	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 21092262 SN 73118428"
	.compiler_invocation	"ctc --dep-file=component\\CanSM\\Implementation\\.CanSM.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc39xb -D__CPU_TC39XB__ --core=tc1.6.2 --iso=99 -DBRS_COMP_TASKING -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\testdemo\\taskingdemo\\demo001 -ID:\\Zonal\\demo011\\tasking\\component\\PduR -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Generator -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Com -ID:\\Zonal\\demo011\\tasking\\component\\Com\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Com\\DaVinciCfg_VASE -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Com\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\ComM -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Det -ID:\\Zonal\\demo011\\tasking\\component\\Det\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Det\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\demo011\\tasking\\appl -ID:\\Zonal\\demo011\\tasking\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\Components -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\ContractPhase -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\inc -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\appl\\Include -ID:\\Zonal\\demo011\\tasking\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\appl\\Source\\swc_test -ID:\\Zonal\\demo011\\tasking\\component -ID:\\Zonal\\demo011\\tasking\\component\\_Common -ID:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os\\TC39xQ -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Os\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug -ID:\\Zonal\\demo011\\tasking\\Debug\\appl -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\Debug\\component -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\src -g2 --make-target=component\\CanSM\\Implementation\\CanSM.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o component\\CanSM\\Implementation\\CanSM.src ..\\component\\CanSM\\Implementation\\CanSM.c"
	.compiler_name		"ctc"
	;source	'..\\component\\CanSM\\Implementation\\CanSM.c'

	
$TC162
	
	.sdecl	'.text.CanSM.CanSM_CheckModeIndication',code,cluster('CanSM_CheckModeIndication')
	.sect	'.text.CanSM.CanSM_CheckModeIndication'
	.align	2
	

; ..\component\CanSM\Implementation\CanSM.c	     1  
; ..\component\CanSM\Implementation\CanSM.c	     2  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	     3   *  COPYRIGHT
; ..\component\CanSM\Implementation\CanSM.c	     4   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\CanSM\Implementation\CanSM.c	     5   *  \verbatim
; ..\component\CanSM\Implementation\CanSM.c	     6   *  Copyright (c) 2018 by Vector Informatik GmbH.                                              All rights reserved.
; ..\component\CanSM\Implementation\CanSM.c	     7   *
; ..\component\CanSM\Implementation\CanSM.c	     8   *                This software is copyright protected and proprietary to Vector Informatik GmbH.
; ..\component\CanSM\Implementation\CanSM.c	     9   *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
; ..\component\CanSM\Implementation\CanSM.c	    10   *                All other rights remain with Vector Informatik GmbH.
; ..\component\CanSM\Implementation\CanSM.c	    11   *  \endverbatim
; ..\component\CanSM\Implementation\CanSM.c	    12   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\CanSM\Implementation\CanSM.c	    13   *  FILE DESCRIPTION
; ..\component\CanSM\Implementation\CanSM.c	    14   *  -----------------------------------------------------------------------------------------------------------------*/
; ..\component\CanSM\Implementation\CanSM.c	    15  /* \file    CanSM.c
; ..\component\CanSM\Implementation\CanSM.c	    16   * \brief   Implementation of the CAN State Manager AUTOSAR Release 4
; ..\component\CanSM\Implementation\CanSM.c	    17   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	    18  
; ..\component\CanSM\Implementation\CanSM.c	    19  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	    20   *  AUTHOR IDENTITY
; ..\component\CanSM\Implementation\CanSM.c	    21   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\CanSM\Implementation\CanSM.c	    22   *  Name                          Initials      Company
; ..\component\CanSM\Implementation\CanSM.c	    23   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\CanSM\Implementation\CanSM.c	    24   *  Mark A. Fingerle              MFi           Vector Informatik GmbH
; ..\component\CanSM\Implementation\CanSM.c	    25   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\CanSM\Implementation\CanSM.c	    26   *  REVISION HISTORY
; ..\component\CanSM\Implementation\CanSM.c	    27   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\CanSM\Implementation\CanSM.c	    28   *  Version   Date        Author  Change Id     Description
; ..\component\CanSM\Implementation\CanSM.c	    29   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\CanSM\Implementation\CanSM.c	    30   *  02.00.00  2012-06-23  MFi     ESCAN00058510 Create Ccl_Asr4SmCan Implementation according to ASR 4.0.3
; ..\component\CanSM\Implementation\CanSM.c	    31   *  02.01.00  2012-10-21  MFi     ESCAN00062053 Interface to provide internal bus-off recovery level; CanSM_CheckBorLevel()
; ..\component\CanSM\Implementation\CanSM.c	    32   *                                ESCAN00062522 Remove compiler abstraction by typedef V A R
; ..\component\CanSM\Implementation\CanSM.c	    33   *                                ESCAN00063353 CAN Tx stays offline after bus-off recovery; E_NOT_OK + CtrlModeIndication STARTED
; ..\component\CanSM\Implementation\CanSM.c	    34   *                                ESCAN00062050 Instruction order for transition to no communication (CANSM_SD_TRCV_NORMAL)
; ..\component\CanSM\Implementation\CanSM.c	    35   *                                ESCAN00063664 Encapsulate function declaration (CheckBaudrate ChangeBaudrate)
; ..\component\CanSM\Implementation\CanSM.c	    36   *                                ESCAN00063810 Compiler error: because of missing define STATIC
; ..\component\CanSM\Implementation\CanSM.c	    37   *  02.02.00  2013-03-23  MFi     ESCAN00066249 CanSM_ConfirmPnAvailability triggers Unwanted Det( UNINIT )
; ..\component\CanSM\Implementation\CanSM.c	    38   *                                ESCAN00065274 Trigger CanIf PduMode wake up filter in PN use case
; ..\component\CanSM\Implementation\CanSM.c	    39   *                                ESCAN00065305 Execute transition from SILENT to FULL within RequestComMode
; ..\component\CanSM\Implementation\CanSM.c	    40   *                                ESCAN00066935 Correct compiler abstraction and memory mapping
; ..\component\CanSM\Implementation\CanSM.c	    41   *  02.03.00  2013-06-13  MFi     ESCAN00068036 Implement functionality of CanSM_SetEcuPassive
; ..\component\CanSM\Implementation\CanSM.c	    42   *                                ESCAN00068039 Implement functionality of CanSM_PreventBusSleepAtStartUp
; ..\component\CanSM\Implementation\CanSM.c	    43   *  02.03.01  2013-07-23  MFi     ESCAN00069362 Usage of the un-initialized variable CanSM_ChannelConfigurationPtr within CanSM_PreventBusSleepAtStartUp()
; ..\component\CanSM\Implementation\CanSM.c	    44   *  02.04.00  2013-07-23  MFi     ESCAN00069109 Set CBR; CANFD Mode 1 (8 Byte Payload) - incl. SetBaudrate
; ..\component\CanSM\Implementation\CanSM.c	    45   *                                ESCAN00068797 BusOff Begin End, Support for J1939
; ..\component\CanSM\Implementation\CanSM.c	    46   *                                ESCAN00069606 Compiler error: CanSM.c: Cannot open include file: 'CanNm.h': No such file or directory
; ..\component\CanSM\Implementation\CanSM.c	    47   *  02.04.01  2014-02-23  MFi     ESCAN00072703 Det_ReportError() called with wrong Det ErrorId parameter (E_PARAM_CONTROLLER instead E_PARAM_TRANSCEIVER)
; ..\component\CanSM\Implementation\CanSM.c	    48   *                                ESCAN00073907 BusoffEnd indication is called without bus-off
; ..\component\CanSM\Implementation\CanSM.c	    49   *  02.05.00  2014-02-23  MFi     ESCAN00073871 Implement PF4_PostBuildSelectable CANSM_POSTBUILD_VARIANT_SUPPORT
; ..\component\CanSM\Implementation\CanSM.c	    50   *  02.06.00  2014-08-23  MFi     ESCAN00078374 Post-Build Selectable (Identity Manager)
; ..\component\CanSM\Implementation\CanSM.c	    51   *                                ESCAN00076224 CAN communication not started, because CAN wake up validation failed (Start Stop WakeupSources)
; ..\component\CanSM\Implementation\CanSM.c	    52   *                                ESCAN00078867 Det error CANSM_E_INVALID_COMM_REQUEST not triggered
; ..\component\CanSM\Implementation\CanSM.c	    53   *                                ESCAN00078993 BusOff recovery, TxOffline phase, takes to long time
; ..\component\CanSM\Implementation\CanSM.c	    54   *  02.07.00  2015-02-13  MFi     ESCAN00079868 Avoid usage "...OfPCConfig" macros
; ..\component\CanSM\Implementation\CanSM.c	    55   *  02.08.00  2015-05-13  MFi     ESCAN00080295 FEAT-427: SafeBSW Step I
; ..\component\CanSM\Implementation\CanSM.c	    56   *                                ESCAN00081783 FEAT-427: SafeBSW Step II
; ..\component\CanSM\Implementation\CanSM.c	    57   *                                ESCAN00082163 No Messages are transmitted (unintended EcuPassiveMode, TX_OFFLINE_ACTIVE)
; ..\component\CanSM\Implementation\CanSM.c	    58   *  02.08.01  2015-10-13  MFi     ESCAN00085065 CAN communication is not possible, FULL_COMMUNICATION is indicated even Trcv is not set to NORMAL mode
; ..\component\CanSM\Implementation\CanSM.c	    59   *                                ESCAN00085071 Memory mapping SEC_CODE does not work
; ..\component\CanSM\Implementation\CanSM.c	    60   *                                ESCAN00084048 The BswM indication CANSM_BSWM_NO_COMMUNICATION is not called
; ..\component\CanSM\Implementation\CanSM.c	    61   *  02.09.00  2015-10-23  MFi     ESCAN00086062 Reinitialization of CAN CC after NM-Timeout if PN is used
; ..\component\CanSM\Implementation\CanSM.c	    62   *                                ESCAN00086732 OSEK NM message is no longer transmitted (BusOffBeginIndication without matching BusOffEndIndication , BusOffEndIndication missing)
; ..\component\CanSM\Implementation\CanSM.c	    63   *  02.10.00  2016-01-23  MFi     ESCAN00088643 Extended RAM Check
; ..\component\CanSM\Implementation\CanSM.c	    64   *                                ESCAN00087801 FEAT-1688: SafeBSW Step 4
; ..\component\CanSM\Implementation\CanSM.c	    65   *                                ESCAN00088799 Communication not possible, because MAX repetition is evaluated wrong
; ..\component\CanSM\Implementation\CanSM.c	    66   *  02.10.01  2016-04-01  MFi     ESCAN00089186 Use the type ComM_ModeType provided by ComM
; ..\component\CanSM\Implementation\CanSM.c	    67   *                                ESCAN00089184 Modify EnableSetBusSleep array to avoid SBSW counter measure
; ..\component\CanSM\Implementation\CanSM.c	    68   *                                ESCAN00089433 Add RAM check begin call out to the PreInit function FEAT-598
; ..\component\CanSM\Implementation\CanSM.c	    69   *                                ESCAN00089434 Adapt RAM check parameter naming FEAT-598
; ..\component\CanSM\Implementation\CanSM.c	    70   *  02.10.02  2016-05-23  MFi     ESCAN00090151 Compiler warning: function "CanSM_RamCheckEnd" was declared but never referenced
; ..\component\CanSM\Implementation\CanSM.c	    71   *  02.11.00  2016-04-23  MFi     ESCAN00089488 FEAT-1933: Add API to provide CAN channel re-initialization
; ..\component\CanSM\Implementation\CanSM.c	    72   *                                ESCAN00089962 Compiler warning: Useless assignment to variable StdReturnValue. Assigned value not used.
; ..\component\CanSM\Implementation\CanSM.c	    73   *  02.12.00  2016-08-03  MFi     ESCAN00091303 Expand Tx timeout exception handling
; ..\component\CanSM\Implementation\CanSM.c	    74   *  02.13.00  2016-11-23  MFi     ESCAN00092617 Toggle preProcessor statements
; ..\component\CanSM\Implementation\CanSM.c	    75   *                                FEATC-570     Mode Request Timeout shall be available as Runtime Error (DEM)
; ..\component\CanSM\Implementation\CanSM.c	    76   *                                ESCAN00093067 Restructure NetworkStatemachine implementation to consider unexpected states
; ..\component\CanSM\Implementation\CanSM.c	    77   *                                ESCAN00093069 Restructure RamCheckEnd implementation to consider unexpected retrun values of RamCheckFinished
; ..\component\CanSM\Implementation\CanSM.c	    78   *                                FEATC-527     AUTOSAR 4.2.2 SWS Traceability Goals 2 and 3
; ..\component\CanSM\Implementation\CanSM.c	    79   *  02.13.01  2017-10-13  MFi     ESCAN00076256 BswM_CanSM_CurrentState called with locked interrupts - OS ErrorHook on Os API Invocation
; ..\component\CanSM\Implementation\CanSM.c	    80   *                                ESCAN00097333 ComM_BusSM_ModeIndication called with locked interrupts - OS ErrorHook on Os API Invocation
; ..\component\CanSM\Implementation\CanSM.c	    81   *  03.00.00  2018-05-23  MFi     ESCAN00099586 ErrorFrame after startup with wakeup validation
; ..\component\CanSM\Implementation\CanSM.c	    82   *                                STORYC-5592   MISRA 2012
; ..\component\CanSM\Implementation\CanSM.c	    83   *  03.00.01  2018-07-23  MFi     STORYC-5592   MISRA 2012 improvements
; ..\component\CanSM\Implementation\CanSM.c	    84   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	    85  
; ..\component\CanSM\Implementation\CanSM.c	    86  
; ..\component\CanSM\Implementation\CanSM.c	    87  
; ..\component\CanSM\Implementation\CanSM.c	    88  #define CANSM_SOURCE
; ..\component\CanSM\Implementation\CanSM.c	    89  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	    90   * INCLUDES
; ..\component\CanSM\Implementation\CanSM.c	    91   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	    92  
; ..\component\CanSM\Implementation\CanSM.c	    93  /* include "Std_Types.h" */ /* already included by "CanSM.h" */
; ..\component\CanSM\Implementation\CanSM.c	    94  #include "CanSM.h"
; ..\component\CanSM\Implementation\CanSM.c	    95  /* \trace SPEC-644 */
; ..\component\CanSM\Implementation\CanSM.c	    96  #include "CanSM_BswM.h" /* Interfaces, which are dedicated to the BswM module. */
; ..\component\CanSM\Implementation\CanSM.c	    97  #include "CanSM_Cbk.h" /* Callback notification functions */
; ..\component\CanSM\Implementation\CanSM.c	    98  #include "CanSM_ComM.h" /* API dedicated to the ComM module. */
; ..\component\CanSM\Implementation\CanSM.c	    99  #include "CanSM_Dcm.h" /* BaudRate */
; ..\component\CanSM\Implementation\CanSM.c	   100  #include "CanSM_EcuM.h" /* Init function */
; ..\component\CanSM\Implementation\CanSM.c	   101  #include "CanSM_TxTimeoutException.h" /* TxTimeoutException function */
; ..\component\CanSM\Implementation\CanSM.c	   102  
; ..\component\CanSM\Implementation\CanSM.c	   103  #include "BswM_CanSM.h"  /* get API declaration */
; ..\component\CanSM\Implementation\CanSM.c	   104  /* \trace SPEC-650 */
; ..\component\CanSM\Implementation\CanSM.c	   105  #include "ComM_BusSM.h" /* get API declaration */
; ..\component\CanSM\Implementation\CanSM.c	   106  /* \trace SPEC-648 */
; ..\component\CanSM\Implementation\CanSM.c	   107  #if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   108  # include "CanNm.h"     /* get API declaration CanNm_ConfirmPnAvailability */
; ..\component\CanSM\Implementation\CanSM.c	   109  #endif /*  CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG  */
; ..\component\CanSM\Implementation\CanSM.c	   110  /* include "CanIf.h" */ /* included in CanSM_Cbk.h */
; ..\component\CanSM\Implementation\CanSM.c	   111  
; ..\component\CanSM\Implementation\CanSM.c	   112  
; ..\component\CanSM\Implementation\CanSM.c	   113  #if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   114  # include "Det.h"
; ..\component\CanSM\Implementation\CanSM.c	   115  /* \trace SPEC-645 */
; ..\component\CanSM\Implementation\CanSM.c	   116  #endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	   117  # include "SchM_CanSM.h" /* interrupt block, Mainfunction */
; ..\component\CanSM\Implementation\CanSM.c	   118  
; ..\component\CanSM\Implementation\CanSM.c	   119  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   120   *  VERSION CHECK
; ..\component\CanSM\Implementation\CanSM.c	   121   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   122  
; ..\component\CanSM\Implementation\CanSM.c	   123  /* vendor specific version information is BCD coded */
; ..\component\CanSM\Implementation\CanSM.c	   124  #if ( ( 0x03u != CANSM_SW_MAJOR_VERSION ) || ( 0x00u != CANSM_SW_MINOR_VERSION ) || ( 0x01u != CANSM_SW_PATCH_VERSION ) )
; ..\component\CanSM\Implementation\CanSM.c	   125  # error "File CanSM.c: Source and CanSM.h file are inconsistent!"
; ..\component\CanSM\Implementation\CanSM.c	   126  #endif
; ..\component\CanSM\Implementation\CanSM.c	   127  
; ..\component\CanSM\Implementation\CanSM.c	   128  # if ( ( CCL_ASR4SMCAN_VERSION != CCL_ASR4SMCAN_BSWM_HEADER_VERSION ) || ( CCL_ASR4SMCAN_RELEASE_VERSION != CCL_ASR4SMCAN_BSWM_HEADER_RELEASE_VERSION ) )
; ..\component\CanSM\Implementation\CanSM.c	   129  #  error "File CanSM.c: Source and CanSM_BswM.h file are inconsistent!"
; ..\component\CanSM\Implementation\CanSM.c	   130  # endif
; ..\component\CanSM\Implementation\CanSM.c	   131  
; ..\component\CanSM\Implementation\CanSM.c	   132  #if ( ( CCL_ASR4SMCAN_VERSION != CCL_ASR4SMCAN_CALLBACK_HEADER_VERSION ) || ( CCL_ASR4SMCAN_RELEASE_VERSION != CCL_ASR4SMCAN_CALLBACK_HEADER_RELEASE_VERSION ) )
; ..\component\CanSM\Implementation\CanSM.c	   133  # error "File CanSM.c: Source and CanSM_Cbk.h file are inconsistent!"
; ..\component\CanSM\Implementation\CanSM.c	   134  #endif
; ..\component\CanSM\Implementation\CanSM.c	   135  
; ..\component\CanSM\Implementation\CanSM.c	   136  #if ( ( CCL_ASR4SMCAN_VERSION != CCL_ASR4SMCAN_COMM_HEADER_VERSION ) || ( CCL_ASR4SMCAN_RELEASE_VERSION != CCL_ASR4SMCAN_COMM_HEADER_RELEASE_VERSION ) )
; ..\component\CanSM\Implementation\CanSM.c	   137  # error "File CanSM.c: Source and CanSM_ComM.h file are inconsistent!"
; ..\component\CanSM\Implementation\CanSM.c	   138  #endif
; ..\component\CanSM\Implementation\CanSM.c	   139  
; ..\component\CanSM\Implementation\CanSM.c	   140  #if ( ( CCL_ASR4SMCAN_VERSION != CCL_ASR4SMCAN_DCM_HEADER_VERSION ) || ( CCL_ASR4SMCAN_RELEASE_VERSION != CCL_ASR4SMCAN_DCM_HEADER_RELEASE_VERSION ) )
; ..\component\CanSM\Implementation\CanSM.c	   141  # error "File CanSM.c: Source and CanSM_Dcm.h file are inconsistent!"
; ..\component\CanSM\Implementation\CanSM.c	   142  #endif
; ..\component\CanSM\Implementation\CanSM.c	   143  
; ..\component\CanSM\Implementation\CanSM.c	   144  #if ( ( CCL_ASR4SMCAN_VERSION != CCL_ASR4SMCAN_ECUM_HEADER_VERSION ) || ( CCL_ASR4SMCAN_RELEASE_VERSION != CCL_ASR4SMCAN_ECUM_HEADER_RELEASE_VERSION ) )
; ..\component\CanSM\Implementation\CanSM.c	   145  # error "File CanSM.c: Source and CanSM_EcuM.h file are inconsistent!"
; ..\component\CanSM\Implementation\CanSM.c	   146  #endif
; ..\component\CanSM\Implementation\CanSM.c	   147  
; ..\component\CanSM\Implementation\CanSM.c	   148  #if ( ( CCL_ASR4SMCAN_VERSION != CCL_ASR4SMCAN_TXTIMEOUTEXCEPTION_HEADER_VERSION ) || ( CCL_ASR4SMCAN_RELEASE_VERSION != CCL_ASR4SMCAN_TXTIMEOUTEXCEPTION_HEADER_RELEASE_VERSION ) )
; ..\component\CanSM\Implementation\CanSM.c	   149  # error "File CanSM.c: Source and CanSM_TxTimeoutException.h file are inconsistent!"
; ..\component\CanSM\Implementation\CanSM.c	   150  #endif
; ..\component\CanSM\Implementation\CanSM.c	   151  
; ..\component\CanSM\Implementation\CanSM.c	   152  #if (  ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_OFF ) && ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )  )
; ..\component\CanSM\Implementation\CanSM.c	   153  # error "Senseless configuration. CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG does NOT work without CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG"
; ..\component\CanSM\Implementation\CanSM.c	   154  #endif
; ..\component\CanSM\Implementation\CanSM.c	   155  
; ..\component\CanSM\Implementation\CanSM.c	   156  /* AUTOSAR version information check has to match definition in header file */
; ..\component\CanSM\Implementation\CanSM.c	   157  #if ( ( CANSM_AR_RELEASE_MAJOR_VERSION != ( 0x04 )) || ( CANSM_AR_RELEASE_MINOR_VERSION != ( 0x00 ) ) )
; ..\component\CanSM\Implementation\CanSM.c	   158  # error "AUTOSAR Version numbers of CanSM.c and CanSM.h are inconsistent!"
; ..\component\CanSM\Implementation\CanSM.c	   159  #endif
; ..\component\CanSM\Implementation\CanSM.c	   160  
; ..\component\CanSM\Implementation\CanSM.c	   161  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   162   *  LOCAL CONSTANT MACROS
; ..\component\CanSM\Implementation\CanSM.c	   163   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   164  
; ..\component\CanSM\Implementation\CanSM.c	   165  /* CanSM_IsInitialized values */
; ..\component\CanSM\Implementation\CanSM.c	   166  #define CANSM_INITFUNCTION_NOT_CALLED         0x00u
; ..\component\CanSM\Implementation\CanSM.c	   167  #define CANSM_PRE_INITIALIZED                 0x01u
; ..\component\CanSM\Implementation\CanSM.c	   168  #define CANSM_INITFUNCTION_RUNNING            0x02u
; ..\component\CanSM\Implementation\CanSM.c	   169  #define CANSM_INITFUNCTION_FINISHED           0x03u
; ..\component\CanSM\Implementation\CanSM.c	   170  #define CANSM_STOPWAKEUPSOURCES_RUNNING       CANSM_INITFUNCTION_RUNNING
; ..\component\CanSM\Implementation\CanSM.c	   171  #define CANSM_STOPWAKEUPSOURCES_FINISHED      CANSM_INITFUNCTION_FINISHED
; ..\component\CanSM\Implementation\CanSM.c	   172  
; ..\component\CanSM\Implementation\CanSM.c	   173  #if ( CANSM_PREVENT_BUSSLEEP_AT_STARTUP == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   174  /* Set the CAN Channel to Sleep    during initialization CanSM_EnableSetBusSleep */
; ..\component\CanSM\Implementation\CanSM.c	   175  # define CANSM_SET_BUS_SLEEP_MODE             0x00u
; ..\component\CanSM\Implementation\CanSM.c	   176  # define CANSM_PREVENT_BUS_SLEEP_MODE         0x01u
; ..\component\CanSM\Implementation\CanSM.c	   177  #endif /* CANSM_PREVENT_BUSSLEEP_AT_STARTUP */
; ..\component\CanSM\Implementation\CanSM.c	   178  
; ..\component\CanSM\Implementation\CanSM.c	   179  /* CanSM_LastValidBaudRate */
; ..\component\CanSM\Implementation\CanSM.c	   180  #define CANSM_INVALID_BAUDRATE                0xFFFFu
; ..\component\CanSM\Implementation\CanSM.c	   181  
; ..\component\CanSM\Implementation\CanSM.c	   182  
; ..\component\CanSM\Implementation\CanSM.c	   183  #define CANSM_TIMER_EXPIRED                   0x0000u
; ..\component\CanSM\Implementation\CanSM.c	   184  #define CANSM_CANCEL_TIMER                    CANSM_TIMER_EXPIRED
; ..\component\CanSM\Implementation\CanSM.c	   185  
; ..\component\CanSM\Implementation\CanSM.c	   186  /* CanSM_CurrentState */
; ..\component\CanSM\Implementation\CanSM.c	   187  /* Start up  PRE_FULLCOM */
; ..\component\CanSM\Implementation\CanSM.c	   188  #define CANSM_SU_TRCV_NORMAL                  0x01u
; ..\component\CanSM\Implementation\CanSM.c	   189  #define CANSM_SU_CC_STOPPED                   0x02u
; ..\component\CanSM\Implementation\CanSM.c	   190  #define CANSM_SU_CC_STARTED                   0x03u
; ..\component\CanSM\Implementation\CanSM.c	   191  
; ..\component\CanSM\Implementation\CanSM.c	   192  /* CANSM_S_FULLCOM */
; ..\component\CanSM\Implementation\CanSM.c	   193  #define CANSM_BO_BUS_OFF_CHECK                0x11u /* 17 */
; ..\component\CanSM\Implementation\CanSM.c	   194  #define CANSM_S_NO_BUS_OFF                    0x10u /* 16 */
; ..\component\CanSM\Implementation\CanSM.c	   195  #define CANSM_S_FULLCOM_ENSURED               CANSM_S_NO_BUS_OFF
; ..\component\CanSM\Implementation\CanSM.c	   196  #define CANSM_BO_TX_OFFLINE                   0x14u /* 20 */
; ..\component\CanSM\Implementation\CanSM.c	   197  /* define CANSM_S_RESTART_CC */
; ..\component\CanSM\Implementation\CanSM.c	   198  
; ..\component\CanSM\Implementation\CanSM.c	   199  /* SILENT */
; ..\component\CanSM\Implementation\CanSM.c	   200  #define CANSM_S_SILENTCOM                     0x20u
; ..\component\CanSM\Implementation\CanSM.c	   201  /* shutdown incl. NoCom: CanSM_CurrentState > CANSM_S_SILENTCOM  */
; ..\component\CanSM\Implementation\CanSM.c	   202  
; ..\component\CanSM\Implementation\CanSM.c	   203  /* ShutDown S_PRE_NOCOM */
; ..\component\CanSM\Implementation\CanSM.c	   204  #define CANSM_SD_PN_CLEAR_WUF                 0x21u /* 33 */
; ..\component\CanSM\Implementation\CanSM.c	   205  #define CANSM_SD_CC_STOPPED                   0x22u /* 34 */
; ..\component\CanSM\Implementation\CanSM.c	   206  #define CANSM_SD_RAMCHECK_END                 0x62u   /* 98 */
; ..\component\CanSM\Implementation\CanSM.c	   207  #define CANSM_SD_CHECK_RAM                    0x61u   /* 97 */
; ..\component\CanSM\Implementation\CanSM.c	   208  #define CANSM_SD_CC_SLEEP                     0x23u /* 35 */
; ..\component\CanSM\Implementation\CanSM.c	   209  #define CANSM_SD_TRCV_NORMAL                  0x24u /* 36 */
; ..\component\CanSM\Implementation\CanSM.c	   210  #define CANSM_SD_TRCV_STANDBY                 0x25u /* 37 */
; ..\component\CanSM\Implementation\CanSM.c	   211  #define CANSM_SD_CC_SLEEP_PN                  0x26u /* 38 */
; ..\component\CanSM\Implementation\CanSM.c	   212  #define CANSM_SD_CHK_WUF_CC_SLEEP             0x27u /* 39 */
; ..\component\CanSM\Implementation\CanSM.c	   213  #define CANSM_SD_CHK_WUF_NOT_CC_SLEEP         0x28u /* 40 */
; ..\component\CanSM\Implementation\CanSM.c	   214  
; ..\component\CanSM\Implementation\CanSM.c	   215  #define CANSM_S_NOCOM                         0x40u /* 64 */
; ..\component\CanSM\Implementation\CanSM.c	   216  #define CANSM_S_STARTWAKEUPSOURCES_SUCCESSFUL 0x60u /* 96 */
; ..\component\CanSM\Implementation\CanSM.c	   217  
; ..\component\CanSM\Implementation\CanSM.c	   218  #define CANSM_TX_TIMEOUT_EXCEPTION_RECEIVED   0x80u
; ..\component\CanSM\Implementation\CanSM.c	   219  #define CANSM_CLEAR_TX_TIMEOUT_EXCEPTION_FLAG 0x7Fu
; ..\component\CanSM\Implementation\CanSM.c	   220  
; ..\component\CanSM\Implementation\CanSM.c	   221  
; ..\component\CanSM\Implementation\CanSM.c	   222  #define CANSM_S_INTERIM_STATE_FILTER          0x0Fu
; ..\component\CanSM\Implementation\CanSM.c	   223  #define CANSM_S_INTERIM_STATE_DETECTED        0x01u
; ..\component\CanSM\Implementation\CanSM.c	   224  
; ..\component\CanSM\Implementation\CanSM.c	   225  
; ..\component\CanSM\Implementation\CanSM.c	   226  /* CanSM_ModeIndicationResponsible
; ..\component\CanSM\Implementation\CanSM.c	   227   * CANSM_SID_GETVERSIONINFO used because it is ensured that these API will never trigger a BswM indication */
; ..\component\CanSM\Implementation\CanSM.c	   228  #define CANSM_NOBODY                                                  (CANSM_SID_GETVERSIONINFO)
; ..\component\CanSM\Implementation\CanSM.c	   229  
; ..\component\CanSM\Implementation\CanSM.c	   230  
; ..\component\CanSM\Implementation\CanSM.c	   231  /*  Last 4 bits used for substates.
; ..\component\CanSM\Implementation\CanSM.c	   232   *  If substate bits are zero (0xY0u) a base state is reached (CANSM_S_SILENTCOM, CANSM_S_NO_BUS_OFF, CANSM_S_NOCOM)
; ..\component\CanSM\Implementation\CanSM.c	   233   *  No action necessary till external request
; ..\component\CanSM\Implementation\CanSM.c	   234   *  So NWSM NOT triggered */
; ..\component\CanSM\Implementation\CanSM.c	   235  #if (  ( CANSM_S_SILENTCOM & CANSM_S_INTERIM_STATE_FILTER ) != 0 )
; ..\component\CanSM\Implementation\CanSM.c	   236  # error "illegal value of meta state: CANSM_S_SILENTCOM"
; ..\component\CanSM\Implementation\CanSM.c	   237  #endif
; ..\component\CanSM\Implementation\CanSM.c	   238  #if (  ( CANSM_S_NO_BUS_OFF & CANSM_S_INTERIM_STATE_FILTER ) != 0 )
; ..\component\CanSM\Implementation\CanSM.c	   239  # error "illegal value of meta state: CANSM_S_FULLCOM_ENSURED, CANSM_S_NO_BUS_OFF"
; ..\component\CanSM\Implementation\CanSM.c	   240  #endif
; ..\component\CanSM\Implementation\CanSM.c	   241  #if (  ( CANSM_S_NOCOM & CANSM_S_INTERIM_STATE_FILTER ) != 0 )
; ..\component\CanSM\Implementation\CanSM.c	   242  # error "illegal value of meta state: CANSM_S_NOCOM"
; ..\component\CanSM\Implementation\CanSM.c	   243  #endif
; ..\component\CanSM\Implementation\CanSM.c	   244  
; ..\component\CanSM\Implementation\CanSM.c	   245  #if ( CANSM_S_NO_BUS_OFF == ( CANSM_S_SILENTCOM & CANSM_S_NO_BUS_OFF ) )
; ..\component\CanSM\Implementation\CanSM.c	   246  # error "illegal value of meta state: CANSM_S_SILENTCOM, metaBit FullCom is active"
; ..\component\CanSM\Implementation\CanSM.c	   247  #endif
; ..\component\CanSM\Implementation\CanSM.c	   248  #if ( CANSM_S_NO_BUS_OFF == ( CANSM_S_NOCOM & CANSM_S_NO_BUS_OFF ) )
; ..\component\CanSM\Implementation\CanSM.c	   249  # error "illegal value of meta state: CANSM_S_NOCOM, metaBit FullCom is active"
; ..\component\CanSM\Implementation\CanSM.c	   250  #endif
; ..\component\CanSM\Implementation\CanSM.c	   251  #if defined ( CANSM_BOR_NONE )
; ..\component\CanSM\Implementation\CanSM.c	   252  # if ( CANSM_BOR_NONE != 0 )
; ..\component\CanSM\Implementation\CanSM.c	   253  #  error "illegal value of BOR counter, BOR state: CANSM_BOR_NONE"
; ..\component\CanSM\Implementation\CanSM.c	   254  # endif
; ..\component\CanSM\Implementation\CanSM.c	   255  #else /* defined ( CANSM_BOR_NONE ) */
; ..\component\CanSM\Implementation\CanSM.c	   256  # define CANSM_BOR_NONE                       (0x00u)
; ..\component\CanSM\Implementation\CanSM.c	   257  #endif /* defined ( CANSM_BOR_NONE ) */
; ..\component\CanSM\Implementation\CanSM.c	   258  
; ..\component\CanSM\Implementation\CanSM.c	   259  /* CanSM_TxOnlineDelayTime
; ..\component\CanSM\Implementation\CanSM.c	   260   * uint8 sufficient, only DELAY */
; ..\component\CanSM\Implementation\CanSM.c	   261  #define CANSM_DELAY_TIMER_INACTIVE            0xFFu
; ..\component\CanSM\Implementation\CanSM.c	   262  
; ..\component\CanSM\Implementation\CanSM.c	   263  /* CanSM_BusOffCounter */
; ..\component\CanSM\Implementation\CanSM.c	   264  #define CANSM_COUNTER_MAX_VALUE               0xFFu
; ..\component\CanSM\Implementation\CanSM.c	   265  
; ..\component\CanSM\Implementation\CanSM.c	   266  
; ..\component\CanSM\Implementation\CanSM.c	   267  #if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   268  # if ( CANSM_ISDEF_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   269  #  define CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON
; ..\component\CanSM\Implementation\CanSM.c	   270  /* CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_OFF is equal to CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG STD_OFF */
; ..\component\CanSM\Implementation\CanSM.c	   271  # else /* CANSM_ISDEF_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	   272  #  define CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF
; ..\component\CanSM\Implementation\CanSM.c	   273  # endif
; ..\component\CanSM\Implementation\CanSM.c	   274  #endif
; ..\component\CanSM\Implementation\CanSM.c	   275  
; ..\component\CanSM\Implementation\CanSM.c	   276  
; ..\component\CanSM\Implementation\CanSM.c	   277  #if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_OFF )
; ..\component\CanSM\Implementation\CanSM.c	   278  # define CANSM_TRCVSTANDBY_NEVER_INDICATED_AT_PN_CHANNELS
; ..\component\CanSM\Implementation\CanSM.c	   279  #endif /* CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	   280  
; ..\component\CanSM\Implementation\CanSM.c	   281  #if defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON
; ..\component\CanSM\Implementation\CanSM.c	   282  # define CANSM_TRCVSTANDBY_ONLY_INDICATED_AT_PN_CHANNELS
; ..\component\CanSM\Implementation\CanSM.c	   283  #else /* CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON */
; ..\component\CanSM\Implementation\CanSM.c	   284  # if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   285  #  if ( CANSM_ISDEF_TRCV_INACTIVE_ATALL_NONPNCANNELSOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   286  #   define CANSM_TRCVSTANDBY_ONLY_INDICATED_AT_PN_CHANNELS
; ..\component\CanSM\Implementation\CanSM.c	   287  #  endif /* ( CANSM_ISDEF_TRCV_INACTIVE_ATALL_NONPNCANNELSOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	   288  # endif /* ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	   289  #endif /* CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON */
; ..\component\CanSM\Implementation\CanSM.c	   290  
; ..\component\CanSM\Implementation\CanSM.c	   291  
; ..\component\CanSM\Implementation\CanSM.c	   292  #if !defined CANSM_TRCVSTANDBY_NEVER_INDICATED_AT_PN_CHANNELS
; ..\component\CanSM\Implementation\CanSM.c	   293  # if !defined CANSM_TRCVSTANDBY_ONLY_INDICATED_AT_PN_CHANNELS
; ..\component\CanSM\Implementation\CanSM.c	   294  #  define CANSM_TRCVSTANDBY_INDICATED_AT_PN_CHANNELS_AND_NON_PN_CHANNELS_MIXED
; ..\component\CanSM\Implementation\CanSM.c	   295  # endif /* !defined CANSM_TRCVSTANDBY_ONLY_INDICATED_AT_PN_CHANNELS */
; ..\component\CanSM\Implementation\CanSM.c	   296  #endif /* !defined CANSM_TRCVSTANDBY_NEVER_INDICATED_AT_PN_CHANNELS */
; ..\component\CanSM\Implementation\CanSM.c	   297  
; ..\component\CanSM\Implementation\CanSM.c	   298  
; ..\component\CanSM\Implementation\CanSM.c	   299  
; ..\component\CanSM\Implementation\CanSM.c	   300  #if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   301  /* Trcv at least on one channel active */
; ..\component\CanSM\Implementation\CanSM.c	   302  # if ( CANSM_ISDEF_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   303  #  define CANSM_TRANSCEIVER_HANDLING_ALWAYS_ON
; ..\component\CanSM\Implementation\CanSM.c	   304  # else   /* ISDEF */
; ..\component\CanSM\Implementation\CanSM.c	   305  #  define CANSM_TRANSCEIVER_HANDLING_MIXED_ON_AND_OFF
; ..\component\CanSM\Implementation\CanSM.c	   306  # endif  /* ISDEF */
; ..\component\CanSM\Implementation\CanSM.c	   307  #endif  /* sometimes or ever ON */
; ..\component\CanSM\Implementation\CanSM.c	   308  
; ..\component\CanSM\Implementation\CanSM.c	   309  
; ..\component\CanSM\Implementation\CanSM.c	   310  
; ..\component\CanSM\Implementation\CanSM.c	   311  
; ..\component\CanSM\Implementation\CanSM.c	   312  # if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_OFF ) /* Trcv active at least at one channel */
; ..\component\CanSM\Implementation\CanSM.c	   313  # define CANSM_SD_CC_SLEEP_ALL_NON_PN_CHANNELS_WITHOUT_TRCV
; ..\component\CanSM\Implementation\CanSM.c	   314  #endif /* CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	   315  
; ..\component\CanSM\Implementation\CanSM.c	   316  #if defined CANSM_TRANSCEIVER_HANDLING_ALWAYS_ON
; ..\component\CanSM\Implementation\CanSM.c	   317  # define CANSM_SD_CC_SLEEP_ALL_NON_PN_CHANNELS_HAS_TRCV
; ..\component\CanSM\Implementation\CanSM.c	   318  #endif /* CANSM_TRANSCEIVER_HANDLING_ALWAYS_ON */
; ..\component\CanSM\Implementation\CanSM.c	   319  
; ..\component\CanSM\Implementation\CanSM.c	   320  #if defined CANSM_TRANSCEIVER_HANDLING_MIXED_ON_AND_OFF
; ..\component\CanSM\Implementation\CanSM.c	   321  /* Any PnTrcvCh has always Trcv */
; ..\component\CanSM\Implementation\CanSM.c	   322  # if ( CANSM_ISDEF_TRCV_INACTIVE_ATALL_NONPNCANNELSOFCHANNELCONFIG == STD_OFF )
; ..\component\CanSM\Implementation\CanSM.c	   323  #  define CANSM_SD_CC_SLEEP_NON_PN_CHANNELS_TRCV_MIXED
; ..\component\CanSM\Implementation\CanSM.c	   324  # endif /* ( CANSM_ISDEF_TRCV_INACTIVE_ATALL_NONPNCANNELSOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	   325  #endif /* CANSM_TRANSCEIVER_HANDLING_MIXED_ON_AND_OFF */
; ..\component\CanSM\Implementation\CanSM.c	   326  
; ..\component\CanSM\Implementation\CanSM.c	   327  /* if !defined ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON ) is already checked before the state will be evaluated  define CANSM_SD_CC_SLEEP_ALL_NON_PN_CHANNELS_WITHOUT_TRCV has to be removed to get the variant coverage */
; ..\component\CanSM\Implementation\CanSM.c	   328  
; ..\component\CanSM\Implementation\CanSM.c	   329  
; ..\component\CanSM\Implementation\CanSM.c	   330  #if ( CANSM_BOR_TX_CONFIRMATION_POLLINGOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   331  # if ( CANSM_ISDEF_BOR_TX_CONFIRMATION_POLLINGOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   332  #  define CANSM_BOR_TX_CONFIRMATION_POLLING_ALWAYS_ON
; ..\component\CanSM\Implementation\CanSM.c	   333  # endif
; ..\component\CanSM\Implementation\CanSM.c	   334  #endif
; ..\component\CanSM\Implementation\CanSM.c	   335  
; ..\component\CanSM\Implementation\CanSM.c	   336  
; ..\component\CanSM\Implementation\CanSM.c	   337  
; ..\component\CanSM\Implementation\CanSM.c	   338  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   339   *  LOCAL FUNCTION MACROS
; ..\component\CanSM\Implementation\CanSM.c	   340   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   341  
; ..\component\CanSM\Implementation\CanSM.c	   342  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   343   *  LOCAL DATA TYPES AND STRUCTURES
; ..\component\CanSM\Implementation\CanSM.c	   344   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   345  
; ..\component\CanSM\Implementation\CanSM.c	   346  /* To provide compatibility, the component defines a CANSM_LOCAL on its own. */
; ..\component\CanSM\Implementation\CanSM.c	   347  #if !defined ( CANSM_LOCAL ) /* COV_CANSM_CHECKDEFINE */
; ..\component\CanSM\Implementation\CanSM.c	   348  # define CANSM_LOCAL static
; ..\component\CanSM\Implementation\CanSM.c	   349  #endif
; ..\component\CanSM\Implementation\CanSM.c	   350  #if !defined ( CANSM_LOCAL_INLINE ) /* COV_CANSM_CHECKDEFINE */
; ..\component\CanSM\Implementation\CanSM.c	   351  # define CANSM_LOCAL_INLINE LOCAL_INLINE
; ..\component\CanSM\Implementation\CanSM.c	   352  #endif
; ..\component\CanSM\Implementation\CanSM.c	   353  
; ..\component\CanSM\Implementation\CanSM.c	   354  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   355   *  LOCAL DATA PROTOTYPES
; ..\component\CanSM\Implementation\CanSM.c	   356   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   357  
; ..\component\CanSM\Implementation\CanSM.c	   358  #if ( CANSM_USE_INIT_POINTER == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   359  # define CANSM_START_SEC_VAR_NOINIT_UNSPECIFIED
; ..\component\CanSM\Implementation\CanSM.c	   360  # include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanSM\Implementation\CanSM.c	   361  /* \trace SPEC-640 */
; ..\component\CanSM\Implementation\CanSM.c	   362  
; ..\component\CanSM\Implementation\CanSM.c	   363  CANSM_LOCAL P2CONST( CanSM_ConfigType, CANSM_VAR_NOINIT, CANSM_CONST ) CanSM_ConfigDataPtr;
; ..\component\CanSM\Implementation\CanSM.c	   364  
; ..\component\CanSM\Implementation\CanSM.c	   365  # define CANSM_STOP_SEC_VAR_NOINIT_UNSPECIFIED
; ..\component\CanSM\Implementation\CanSM.c	   366  # include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanSM\Implementation\CanSM.c	   367  #endif /* ( CANSM_USE_INIT_POINTER == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	   368  
; ..\component\CanSM\Implementation\CanSM.c	   369  #define CANSM_START_SEC_VAR_ZERO_INIT_8BIT
; ..\component\CanSM\Implementation\CanSM.c	   370  #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanSM\Implementation\CanSM.c	   371  /*! Used values are CANSM_INITFUNCTION_NOT_CALLED, CANSM_PRE_INITIALIZED, CANSM_INITFUNCTION_RUNNING, CANSM_INITFUNCTION_FINISHED */
; ..\component\CanSM\Implementation\CanSM.c	   372  CANSM_LOCAL VAR( uint8, CANSM_VAR_ZERO_INIT ) CanSM_IsInitialized = CANSM_INITFUNCTION_NOT_CALLED;
; ..\component\CanSM\Implementation\CanSM.c	   373  /* \trace SPEC-11327, SPEC-47131 */
; ..\component\CanSM\Implementation\CanSM.c	   374  
; ..\component\CanSM\Implementation\CanSM.c	   375  
; ..\component\CanSM\Implementation\CanSM.c	   376  #define CANSM_STOP_SEC_VAR_ZERO_INIT_8BIT
; ..\component\CanSM\Implementation\CanSM.c	   377  #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanSM\Implementation\CanSM.c	   378  
; ..\component\CanSM\Implementation\CanSM.c	   379  #if ( CANSM_ECU_PASSIVE_MODE == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   380  #define CANSM_START_SEC_VAR_NOINIT_8BIT
; ..\component\CanSM\Implementation\CanSM.c	   381  #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanSM\Implementation\CanSM.c	   382  
; ..\component\CanSM\Implementation\CanSM.c	   383  CANSM_LOCAL VAR( boolean, CANSM_VAR_NOINIT ) CanSM_EcuPassiveMode;
; ..\component\CanSM\Implementation\CanSM.c	   384  
; ..\component\CanSM\Implementation\CanSM.c	   385  #define CANSM_STOP_SEC_VAR_NOINIT_8BIT
; ..\component\CanSM\Implementation\CanSM.c	   386  #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanSM\Implementation\CanSM.c	   387  #endif /* CANSM_ECU_PASSIVE_MODE == STD_ON  */
; ..\component\CanSM\Implementation\CanSM.c	   388  
; ..\component\CanSM\Implementation\CanSM.c	   389  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   390   *  GLOBAL DATA
; ..\component\CanSM\Implementation\CanSM.c	   391   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   392  
; ..\component\CanSM\Implementation\CanSM.c	   393  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   394   *  LOCAL FUNCTION PROTOTYPES
; ..\component\CanSM\Implementation\CanSM.c	   395   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   396  
; ..\component\CanSM\Implementation\CanSM.c	   397  #define CANSM_START_SEC_CODE
; ..\component\CanSM\Implementation\CanSM.c	   398  #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanSM\Implementation\CanSM.c	   399  
; ..\component\CanSM\Implementation\CanSM.c	   400  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   401    CanSM_FullComReached()
; ..\component\CanSM\Implementation\CanSM.c	   402   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   403  /*! \brief        Full communication reached
; ..\component\CanSM\Implementation\CanSM.c	   404   *  \details      Enters of the meta state S_FullCom, resp. S_BUS_OFF_CHECK
; ..\component\CanSM\Implementation\CanSM.c	   405   *  \param[in]    CanSM_CanNetworkIdx           Current CanSM channel index
; ..\component\CanSM\Implementation\CanSM.c	   406   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   407   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   408   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   409   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   410   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   411   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   412   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   413   *  \note         Called by CanSM_RequestComMode CanSM_ControllerModeIndication and CanSM_MainFunction
; ..\component\CanSM\Implementation\CanSM.c	   414   */
; ..\component\CanSM\Implementation\CanSM.c	   415  CANSM_LOCAL FUNC(void, CANSM_CODE) CanSM_FullComReached( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   416  
; ..\component\CanSM\Implementation\CanSM.c	   417  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   418    CanSM_FullComToSilent()
; ..\component\CanSM\Implementation\CanSM.c	   419   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   420  /*! \brief        Full communication to silent
; ..\component\CanSM\Implementation\CanSM.c	   421   *  \details      Transition form FullCom To SilentCom
; ..\component\CanSM\Implementation\CanSM.c	   422   *  \param[in]    CanSM_CanNetworkIdx           Current CanSM channel index
; ..\component\CanSM\Implementation\CanSM.c	   423   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   424   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   425   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   426   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   427   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   428   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   429   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   430   *  \note         Called by CanSM_RequestComMode CanSM_ControllerModeIndication and CanSM_MainFunction
; ..\component\CanSM\Implementation\CanSM.c	   431   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   432  CANSM_LOCAL FUNC(void, CANSM_CODE) CanSM_FullComToSilent( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   433  
; ..\component\CanSM\Implementation\CanSM.c	   434  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   435    CanSM_NoComReached()
; ..\component\CanSM\Implementation\CanSM.c	   436   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   437  /*! \brief        No communication reached
; ..\component\CanSM\Implementation\CanSM.c	   438   *  \details      Enters the meta state S_NoCom
; ..\component\CanSM\Implementation\CanSM.c	   439   *
; ..\component\CanSM\Implementation\CanSM.c	   440   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   441   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   442   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   443   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   444   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   445   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   446   *  \note         Called by CanSM_RequestComMode CanSM_ControllerModeIndication and CanSM_MainFunction
; ..\component\CanSM\Implementation\CanSM.c	   447   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   448  CANSM_LOCAL FUNC(void, CANSM_CODE) CanSM_NoComReached( P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   449  
; ..\component\CanSM\Implementation\CanSM.c	   450  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   451    CanSM_NetworkStatemachine()
; ..\component\CanSM\Implementation\CanSM.c	   452   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   453  /*! \brief        Network state machine
; ..\component\CanSM\Implementation\CanSM.c	   454   *  \details      Handles the state transitions
; ..\component\CanSM\Implementation\CanSM.c	   455   *
; ..\component\CanSM\Implementation\CanSM.c	   456   *  \param[in]    CanSM_CanNetworkIdx           Current CanSM channel index
; ..\component\CanSM\Implementation\CanSM.c	   457   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   458   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   459   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   460   *  \synchronous  FALSE
; ..\component\CanSM\Implementation\CanSM.c	   461   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   462   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   463   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   464   *  \note         Called by CanSM_RequestComMode CanSM_Init and CanSM_MainFunction
; ..\component\CanSM\Implementation\CanSM.c	   465   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   466  CANSM_LOCAL FUNC(void, CANSM_CODE) CanSM_NetworkStatemachine( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   467  
; ..\component\CanSM\Implementation\CanSM.c	   468  
; ..\component\CanSM\Implementation\CanSM.c	   469  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   470    CanSM_InitializeVariables()
; ..\component\CanSM\Implementation\CanSM.c	   471   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   472  /*! \brief        Initialize variables
; ..\component\CanSM\Implementation\CanSM.c	   473   *  \details      Initialize the variables of the current channel
; ..\component\CanSM\Implementation\CanSM.c	   474   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   475   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   476   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   477   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   478   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   479   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   480   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   481   *  \note         Called by CanSM_Init
; ..\component\CanSM\Implementation\CanSM.c	   482   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   483  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_InitializeVariables( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	   484  
; ..\component\CanSM\Implementation\CanSM.c	   485  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   486    CanSM_UninitToNoCom()
; ..\component\CanSM\Implementation\CanSM.c	   487   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   488  /*! \brief        Initial transition
; ..\component\CanSM\Implementation\CanSM.c	   489   *  \details      Initial transition to no communication for the current channel
; ..\component\CanSM\Implementation\CanSM.c	   490   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   491   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   492   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   493   *  \synchronous  FALSE
; ..\component\CanSM\Implementation\CanSM.c	   494   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   495   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   496   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   497   *  \note         Called by CanSM_Init
; ..\component\CanSM\Implementation\CanSM.c	   498   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   499  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_UninitToNoCom( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	   500  
; ..\component\CanSM\Implementation\CanSM.c	   501  #if ( CANSM_EXTENDED_RAM_CHECK == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   502  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   503    CanSM_RamCheckEnd()
; ..\component\CanSM\Implementation\CanSM.c	   504   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   505  /*! \brief        RAM check end
; ..\component\CanSM\Implementation\CanSM.c	   506   *  \details      Memorize and evaluate the return value
; ..\component\CanSM\Implementation\CanSM.c	   507   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   508   *  \context      TASK
; ..\component\CanSM\Implementation\CanSM.c	   509   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   510   *  \synchronous  FALSE
; ..\component\CanSM\Implementation\CanSM.c	   511   *  \config       CANSM_EXTENDED_RAM_CHECK
; ..\component\CanSM\Implementation\CanSM.c	   512   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   513   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   514   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   515  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_RamCheckEnd( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	   516  #endif /* CANSM_EXTENDED_RAM_CHECK  */
; ..\component\CanSM\Implementation\CanSM.c	   517  
; ..\component\CanSM\Implementation\CanSM.c	   518  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   519    CanSM_BusOffCheckToNoBusOff
; ..\component\CanSM\Implementation\CanSM.c	   520   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   521  /*! \brief        Full communication ensured
; ..\component\CanSM\Implementation\CanSM.c	   522   *  \details      Transition BusOffCheck to NoBusOff
; ..\component\CanSM\Implementation\CanSM.c	   523   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   524   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   525   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   526   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   527   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   528   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   529   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   530   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   531   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   532  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_BusOffCheckToNoBusOff( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   533  
; ..\component\CanSM\Implementation\CanSM.c	   534  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   535    CanSM_CtrlStartedIndicated
; ..\component\CanSM\Implementation\CanSM.c	   536   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   537  /*! \brief        Controller mode started indicated
; ..\component\CanSM\Implementation\CanSM.c	   538   *  \details      Evaluate the indicated mode CtrlStartedIndicated
; ..\component\CanSM\Implementation\CanSM.c	   539   *                Evaluates the received mode and triggers according transition if needed
; ..\component\CanSM\Implementation\CanSM.c	   540   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   541   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   542   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   543   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   544   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   545   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   546   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   547   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   548   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   549  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_CtrlStartedIndicated( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   550  
; ..\component\CanSM\Implementation\CanSM.c	   551  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   552    CanSM_CtrlStoppedIndicated
; ..\component\CanSM\Implementation\CanSM.c	   553   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   554  /*! \brief        Controller mode stopped indicated
; ..\component\CanSM\Implementation\CanSM.c	   555   *  \details      Evaluate the indicated mode CtrlStoppIndicated
; ..\component\CanSM\Implementation\CanSM.c	   556   *                Evaluates the received mode and triggers according transition if needed
; ..\component\CanSM\Implementation\CanSM.c	   557   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   558   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   559   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   560   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   561   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   562   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   563   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   564   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   565   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   566  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_CtrlStoppedIndicated( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   567  
; ..\component\CanSM\Implementation\CanSM.c	   568  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   569    CanSM_CtrlSleepIndicated
; ..\component\CanSM\Implementation\CanSM.c	   570   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   571  /*! \brief        Controller mode sleep indicated
; ..\component\CanSM\Implementation\CanSM.c	   572   *  \details      Evaluate the indicated mode CtrlSleepIndicated
; ..\component\CanSM\Implementation\CanSM.c	   573   *                Evaluates the received mode and triggers according transition if needed
; ..\component\CanSM\Implementation\CanSM.c	   574   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   575   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   576   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   577   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   578   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   579   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   580   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   581   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   582   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   583  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_CtrlSleepIndicated( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   584  
; ..\component\CanSM\Implementation\CanSM.c	   585  #if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   586  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   587    CanSM_TrcvNormalIndicated
; ..\component\CanSM\Implementation\CanSM.c	   588   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   589  /*! \brief        Transceiver mode normal indicated
; ..\component\CanSM\Implementation\CanSM.c	   590   *  \details      Evaluate the indicated mode TrcvNormalIndicated
; ..\component\CanSM\Implementation\CanSM.c	   591   *                Evaluates the received mode and triggers according transition if needed
; ..\component\CanSM\Implementation\CanSM.c	   592   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   593   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   594   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   595   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   596   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   597   *  \config       CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG
; ..\component\CanSM\Implementation\CanSM.c	   598   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   599   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   600   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   601  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_TrcvNormalIndicated( P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   602  #endif /* ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	   603  
; ..\component\CanSM\Implementation\CanSM.c	   604  #if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   605  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   606    CanSM_TrcvStandbyIndicatedAsExpected
; ..\component\CanSM\Implementation\CanSM.c	   607   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   608  /*! \brief        Transceiver mode standby indicated
; ..\component\CanSM\Implementation\CanSM.c	   609   *  \details      Evaluate the indicated mode TrcvStandbyIndicated
; ..\component\CanSM\Implementation\CanSM.c	   610   *                Evaluates the received mode and triggers according transition if needed
; ..\component\CanSM\Implementation\CanSM.c	   611   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   612   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   613   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   614   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   615   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   616   *  \config       CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG
; ..\component\CanSM\Implementation\CanSM.c	   617   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   618   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   619   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   620  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_TrcvStandbyIndicatedAsExpected( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   621  #endif /* ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	   622  
; ..\component\CanSM\Implementation\CanSM.c	   623  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   624    CanSM_EvaluateComModeRequest
; ..\component\CanSM\Implementation\CanSM.c	   625   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   626  /*! \brief        Evaluate the requested communication mode
; ..\component\CanSM\Implementation\CanSM.c	   627   *  \details      Modify the internal variables to lead the CanSM to the correct path to reach the desired communication mode
; ..\component\CanSM\Implementation\CanSM.c	   628   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   629   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   630   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   631   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   632   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   633   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   634   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   635   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   636   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   637  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_EvaluateComModeRequest( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   638  
; ..\component\CanSM\Implementation\CanSM.c	   639  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   640    CanSM_HandleBusOffInSilent
; ..\component\CanSM\Implementation\CanSM.c	   641   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   642  /*! \brief        Bus-off in silent communication
; ..\component\CanSM\Implementation\CanSM.c	   643   *  \details      Handle bus-off events which occur in state silent communication
; ..\component\CanSM\Implementation\CanSM.c	   644   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   645   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   646   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   647   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   648   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   649   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   650   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   651   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   652   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   653  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_HandleBusOffInSilent( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   654  
; ..\component\CanSM\Implementation\CanSM.c	   655  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   656    CanSM_EvaluateMaxModeRequests
; ..\component\CanSM\Implementation\CanSM.c	   657   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   658  /*! \brief        Evaluate maximum mode requests
; ..\component\CanSM\Implementation\CanSM.c	   659   *  \details      Triggers shut down if the number of requests exceed the configured maximum
; ..\component\CanSM\Implementation\CanSM.c	   660   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   661   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   662   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   663   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   664   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   665   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   666   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   667   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   668   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   669  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_EvaluateMaxModeRequests( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   670  
; ..\component\CanSM\Implementation\CanSM.c	   671  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   672    CanSM_TimerHandling
; ..\component\CanSM\Implementation\CanSM.c	   673   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   674  /*! \brief        Timer handling
; ..\component\CanSM\Implementation\CanSM.c	   675   *  \details      Runs the timer, enable mode request repetition
; ..\component\CanSM\Implementation\CanSM.c	   676   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   677   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   678   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   679   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   680   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   681   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   682   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   683   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   684  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_TimerHandling( P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   685  
; ..\component\CanSM\Implementation\CanSM.c	   686  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   687    CanSM_HandleComModeRequest
; ..\component\CanSM\Implementation\CanSM.c	   688   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   689  /*! \brief        Handles valid communication mode request
; ..\component\CanSM\Implementation\CanSM.c	   690   *  \details      Memorizes the communication mode and triggers short transitions i.e. without hardware mode changes
; ..\component\CanSM\Implementation\CanSM.c	   691   *  \param[in]    CanSM_RequestedComMMode        communication mode, desired by ComM
; ..\component\CanSM\Implementation\CanSM.c	   692   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   693   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   694   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   695   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   696   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   697   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   698   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   699   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   700   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   701  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_HandleComModeRequest( ComM_ModeType CanSM_RequestedComMMode, CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   702  
; ..\component\CanSM\Implementation\CanSM.c	   703  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   704    CanSM_MapNetworkHandleToLocalIndex()
; ..\component\CanSM\Implementation\CanSM.c	   705   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   706  /*! \brief        Map network handle to local index
; ..\component\CanSM\Implementation\CanSM.c	   707   *  \details      Determines the local index from the passed index
; ..\component\CanSM\Implementation\CanSM.c	   708   *  \param[in]    CanSM_NetworkHandle                   identification number of the network
; ..\component\CanSM\Implementation\CanSM.c	   709   *  \return       CanSM Index - valid if given handle was found otherwise value out of range
; ..\component\CanSM\Implementation\CanSM.c	   710   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   711   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   712   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   713   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   714   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   715   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   716   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   717  CANSM_LOCAL_INLINE FUNC(CanSM_SizeOfChannelVarRecordType, CANSM_CODE) CanSM_MapNetworkHandleToLocalIndex( NetworkHandleType CanSM_NetworkHandle );
; ..\component\CanSM\Implementation\CanSM.c	   718  
; ..\component\CanSM\Implementation\CanSM.c	   719  #if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   720  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   721    CanSM_MapTransceiverIdToLocalIndex()
; ..\component\CanSM\Implementation\CanSM.c	   722   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   723  /*! \brief        Map transceiver index to local index
; ..\component\CanSM\Implementation\CanSM.c	   724   *  \details      Determines the local index from the passed index
; ..\component\CanSM\Implementation\CanSM.c	   725   *  \param[in]    CanSM_TransceiverId                   identification number of the transceiver
; ..\component\CanSM\Implementation\CanSM.c	   726   *  \return       CanSM Index - valid if given handle was found otherwise value out of range
; ..\component\CanSM\Implementation\CanSM.c	   727   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   728   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   729   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   730   *  \config       CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG
; ..\component\CanSM\Implementation\CanSM.c	   731   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   732   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   733   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   734  CANSM_LOCAL_INLINE FUNC(CanSM_SizeOfChannelVarRecordType, CANSM_CODE) CanSM_MapTransceiverIdToLocalIndex( uint8 CanSM_TransceiverId );
; ..\component\CanSM\Implementation\CanSM.c	   735  #endif /* ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	   736  
; ..\component\CanSM\Implementation\CanSM.c	   737  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   738    CanSM_MapControllerIdToLocalIndex()
; ..\component\CanSM\Implementation\CanSM.c	   739   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   740  /*! \brief        Map controller index to local index
; ..\component\CanSM\Implementation\CanSM.c	   741   *  \details      Determines the local index from the passed index
; ..\component\CanSM\Implementation\CanSM.c	   742   *  \param[in]    CanSM_ControllerId                   identification number of the controller
; ..\component\CanSM\Implementation\CanSM.c	   743   *  \return       CanSM Index - valid if given handle was found otherwise value out of range
; ..\component\CanSM\Implementation\CanSM.c	   744   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   745   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   746   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   747   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   748   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   749   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   750   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   751  CANSM_LOCAL_INLINE FUNC(CanSM_SizeOfChannelVarRecordType, CANSM_CODE) CanSM_MapControllerIdToLocalIndex( uint8 CanSM_ControllerId );
; ..\component\CanSM\Implementation\CanSM.c	   752  
; ..\component\CanSM\Implementation\CanSM.c	   753  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   754    CanSM_BusOffIndicated()
; ..\component\CanSM\Implementation\CanSM.c	   755   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   756  /*! \brief        Bus off indicated
; ..\component\CanSM\Implementation\CanSM.c	   757   *  \details      Handles new bus-off indication
; ..\component\CanSM\Implementation\CanSM.c	   758   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   759   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   760   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   761   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   762   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   763   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   764   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   765   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   766  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_BusOffIndicated( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	   767  
; ..\component\CanSM\Implementation\CanSM.c	   768  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   769    CanSM_SetCanIfPduModeFullCom()
; ..\component\CanSM\Implementation\CanSM.c	   770   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   771  /*! \brief        Set PDU Mode Full Com
; ..\component\CanSM\Implementation\CanSM.c	   772   *  \details      Set the PDU mode if state bus-off check (FullCom) is entered
; ..\component\CanSM\Implementation\CanSM.c	   773   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   774   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   775   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   776   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   777   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   778   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   779   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   780   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   781  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_SetCanIfPduModeFullCom( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, uint8 CanSM_BusOffLevel );
; ..\component\CanSM\Implementation\CanSM.c	   782  
; ..\component\CanSM\Implementation\CanSM.c	   783  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   784    CanSM_StartControllerToBusOffCheck()
; ..\component\CanSM\Implementation\CanSM.c	   785   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   786  /*! \brief        Enter full communication check
; ..\component\CanSM\Implementation\CanSM.c	   787   *  \details      Enter the state bus-off check (FullCom)
; ..\component\CanSM\Implementation\CanSM.c	   788   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   789   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   790   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   791   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   792   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   793   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   794   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   795   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   796   *  \note         Called by CanSM_FullComReached
; ..\component\CanSM\Implementation\CanSM.c	   797   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   798  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_StartControllerToBusOffCheck( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   799  
; ..\component\CanSM\Implementation\CanSM.c	   800  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   801    CanSM_FullComToRestartController()
; ..\component\CanSM\Implementation\CanSM.c	   802   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   803  /*! \brief        Enter Bus Off Tx offline
; ..\component\CanSM\Implementation\CanSM.c	   804   *  \details      Enters the state (FullCom) Tx offline
; ..\component\CanSM\Implementation\CanSM.c	   805   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   806   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   807   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   808   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   809   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   810   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   811   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   812   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   813   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   814  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_FullComToRestartController( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   815  
; ..\component\CanSM\Implementation\CanSM.c	   816  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   817    CanSM_InitiateShutDownSequence()
; ..\component\CanSM\Implementation\CanSM.c	   818   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   819  /*! \brief        Initiate Shut Down Sequence
; ..\component\CanSM\Implementation\CanSM.c	   820   *  \details      Starts (executes the first step of) the shut down sequence
; ..\component\CanSM\Implementation\CanSM.c	   821   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   822   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   823   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   824   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   825   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   826   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   827   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   828   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   829   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   830  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_InitiateShutDownSequence( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr );
; ..\component\CanSM\Implementation\CanSM.c	   831  
; ..\component\CanSM\Implementation\CanSM.c	   832  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   833    CanSM_CheckModeIndication()
; ..\component\CanSM\Implementation\CanSM.c	   834   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   835  /*! \brief        Handels the indication to BswM and ComM
; ..\component\CanSM\Implementation\CanSM.c	   836   *  \details      Informs the BswM/ComM about occurred mode changes
; ..\component\CanSM\Implementation\CanSM.c	   837   *  \param[in]    CanSM_CanNetworkIdx           Can network index
; ..\component\CanSM\Implementation\CanSM.c	   838   *  \param[in]    CanSM_CurrentChannelVarPtr    Pointer to channel specific variable structure
; ..\component\CanSM\Implementation\CanSM.c	   839   *  \param[in]    CanSM_ModeIndiResp            API-ID of the function which has the premission to trigger the indication
; ..\component\CanSM\Implementation\CanSM.c	   840   *  \context      ANY
; ..\component\CanSM\Implementation\CanSM.c	   841   *  \reentrant    TRUE for different networks
; ..\component\CanSM\Implementation\CanSM.c	   842   *  \synchronous  TRUE
; ..\component\CanSM\Implementation\CanSM.c	   843   *  \config       -
; ..\component\CanSM\Implementation\CanSM.c	   844   *  \pre          -
; ..\component\CanSM\Implementation\CanSM.c	   845   *  \trace        -
; ..\component\CanSM\Implementation\CanSM.c	   846   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   847  CANSM_LOCAL FUNC(void, CANSM_CODE) CanSM_CheckModeIndication( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr, uint8 CanSM_ModeIndiResp );
; ..\component\CanSM\Implementation\CanSM.c	   848  
; ..\component\CanSM\Implementation\CanSM.c	   849  
; ..\component\CanSM\Implementation\CanSM.c	   850  #define CANSM_STOP_SEC_CODE
; ..\component\CanSM\Implementation\CanSM.c	   851  #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanSM\Implementation\CanSM.c	   852  
; ..\component\CanSM\Implementation\CanSM.c	   853  
; ..\component\CanSM\Implementation\CanSM.c	   854  
; ..\component\CanSM\Implementation\CanSM.c	   855  
; ..\component\CanSM\Implementation\CanSM.c	   856  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   857   *  LOCAL FUNCTIONS
; ..\component\CanSM\Implementation\CanSM.c	   858   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   859  
; ..\component\CanSM\Implementation\CanSM.c	   860  #define CANSM_START_SEC_CODE
; ..\component\CanSM\Implementation\CanSM.c	   861  #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanSM\Implementation\CanSM.c	   862  
; ..\component\CanSM\Implementation\CanSM.c	   863  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   864   *  CanSM_SetCanIfPduModeFullCom
; ..\component\CanSM\Implementation\CanSM.c	   865   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   866  /*!
; ..\component\CanSM\Implementation\CanSM.c	   867   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	   868   *
; ..\component\CanSM\Implementation\CanSM.c	   869   *
; ..\component\CanSM\Implementation\CanSM.c	   870   *
; ..\component\CanSM\Implementation\CanSM.c	   871   *
; ..\component\CanSM\Implementation\CanSM.c	   872   *
; ..\component\CanSM\Implementation\CanSM.c	   873   */
; ..\component\CanSM\Implementation\CanSM.c	   874  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_SetCanIfPduModeFullCom( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, uint8 CanSM_BusOffLevel )
; ..\component\CanSM\Implementation\CanSM.c	   875  { /* Context: NWSM; CANSM_BO_TX_OFFLINE timer elapsed, CanSM_CtrlStartedIndicated after startup resp. no BOR CanSM_HandleComModeRequest; from SILENT to FULL;;    CanSM_FullComReached; withOUT new raw pending BusOff;;; CanSM_StartControllerToBusOffCheck; enter FullCom */
; ..\component\CanSM\Implementation\CanSM.c	   876  
; ..\component\CanSM\Implementation\CanSM.c	   877  #if ( CANSM_ECU_PASSIVE_MODE == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   878    if ( CanSM_EcuPassiveMode == FALSE )
; ..\component\CanSM\Implementation\CanSM.c	   879  #endif  /* CANSM_ECU_PASSIVE_MODE */
; ..\component\CanSM\Implementation\CanSM.c	   880    {
; ..\component\CanSM\Implementation\CanSM.c	   881  #if ( CANSM_PARTIAL_NETWORK_WAKEUP_FILTEROFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   882      if ( CanSM_BusOffLevel == CANSM_BOR_NONE )
; ..\component\CanSM\Implementation\CanSM.c	   883      {
; ..\component\CanSM\Implementation\CanSM.c	   884        (void)CanIf_SetPduMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_SET_ONLINE_WAKF );
; ..\component\CanSM\Implementation\CanSM.c	   885      }
; ..\component\CanSM\Implementation\CanSM.c	   886      else
; ..\component\CanSM\Implementation\CanSM.c	   887      { /* enter FULL after BO no wake up for other ECU necessary. Avoid WAKF to accelerate normal Tx communication */
; ..\component\CanSM\Implementation\CanSM.c	   888        (void)CanIf_SetPduMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_SET_ONLINE );
; ..\component\CanSM\Implementation\CanSM.c	   889      }
; ..\component\CanSM\Implementation\CanSM.c	   890  
; ..\component\CanSM\Implementation\CanSM.c	   891  #else /* CANSM_PARTIAL_NETWORK_WAKEUP_FILTEROFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	   892  
; ..\component\CanSM\Implementation\CanSM.c	   893      (void)CanIf_SetPduMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_SET_ONLINE );
; ..\component\CanSM\Implementation\CanSM.c	   894  
; ..\component\CanSM\Implementation\CanSM.c	   895  #endif   /* end else  if ( CANSM_PARTIAL_NETWORK_WAKEUP_FILTEROFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	   896  
; ..\component\CanSM\Implementation\CanSM.c	   897    }
; ..\component\CanSM\Implementation\CanSM.c	   898  #if ( CANSM_ECU_PASSIVE_MODE == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   899    else /*  CanSM_EcuPassiveMode true */
; ..\component\CanSM\Implementation\CanSM.c	   900    {
; ..\component\CanSM\Implementation\CanSM.c	   901      (void)CanIf_SetPduMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_SET_TX_OFFLINE_ACTIVE );
; ..\component\CanSM\Implementation\CanSM.c	   902      (void)CanIf_SetPduMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_SET_RX_ONLINE );
; ..\component\CanSM\Implementation\CanSM.c	   903    } /* CanSM_EcuPassiveMode */
; ..\component\CanSM\Implementation\CanSM.c	   904  #endif  /* CANSM_ECU_PASSIVE_MODE */
; ..\component\CanSM\Implementation\CanSM.c	   905  
; ..\component\CanSM\Implementation\CanSM.c	   906  #if ( CANSM_PARTIAL_NETWORK_WAKEUP_FILTEROFCHANNELCONFIG != STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   907    CANSM_DUMMY_STATEMENT( CanSM_BusOffLevel ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	   908  #endif /* ( CANSM_PARTIAL_NETWORK_WAKEUP_FILTEROFCHANNELCONFIG != STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	   909    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx ); /* might be unreferenced due to ComStackLib optimization */ /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	   910  
; ..\component\CanSM\Implementation\CanSM.c	   911  } /* CanSM_SetCanIfPduModeFullCom */
; ..\component\CanSM\Implementation\CanSM.c	   912  
; ..\component\CanSM\Implementation\CanSM.c	   913  
; ..\component\CanSM\Implementation\CanSM.c	   914  
; ..\component\CanSM\Implementation\CanSM.c	   915  
; ..\component\CanSM\Implementation\CanSM.c	   916  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   917   *  CanSM_CheckModeIndication
; ..\component\CanSM\Implementation\CanSM.c	   918   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   919  /*!
; ..\component\CanSM\Implementation\CanSM.c	   920   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	   921   *
; ..\component\CanSM\Implementation\CanSM.c	   922   *
; ..\component\CanSM\Implementation\CanSM.c	   923   *
; ..\component\CanSM\Implementation\CanSM.c	   924   *
; ..\component\CanSM\Implementation\CanSM.c	   925   *
; ..\component\CanSM\Implementation\CanSM.c	   926   */
; ..\component\CanSM\Implementation\CanSM.c	   927  CANSM_LOCAL FUNC(void, CANSM_CODE) CanSM_CheckModeIndication( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr, uint8 CanSM_ModeIndiResp )
; Function CanSM_CheckModeIndication
.L130:
CanSM_CheckModeIndication:	.type	func
	mov.aa	a15,a4
.L456:

; ..\component\CanSM\Implementation\CanSM.c	   928  { /* Context: CanSM_RequestComMode(CanSM_HandleComModeRequest),  CanSM_BusOffIndicated(CanSM_BusOffIndicated), CanSM_MainFunction, CanSM_ControllerModeIndication */
; ..\component\CanSM\Implementation\CanSM.c	   929  
; ..\component\CanSM\Implementation\CanSM.c	   930  
; ..\component\CanSM\Implementation\CanSM.c	   931    if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible == CanSM_ModeIndiResp )
	ld.bu	d15,[a15]11
.L821:
	jne	d15,d5,.L2
.L822:

; ..\component\CanSM\Implementation\CanSM.c	   932    {
; ..\component\CanSM\Implementation\CanSM.c	   933      (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible = CANSM_NOBODY; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d15,#1
	st.b	[a15]11,d15
.L823:

; ..\component\CanSM\Implementation\CanSM.c	   934  
; ..\component\CanSM\Implementation\CanSM.c	   935      if ( (*CanSM_CurrentChannelVarPtr).CanSM_BswMIndicatedState != (*CanSM_CurrentChannelVarPtr).CanSM_BswMNewState )
	ld.bu	d5,[a15]13
.L455:
	ld.bu	d15,[a15]12
.L824:
	jeq	d15,d5,.L3
.L825:

; ..\component\CanSM\Implementation\CanSM.c	   936      {
; ..\component\CanSM\Implementation\CanSM.c	   937        (*CanSM_CurrentChannelVarPtr).CanSM_BswMIndicatedState = (*CanSM_CurrentChannelVarPtr).CanSM_BswMNewState; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	st.b	[a15]12,d5
.L826:

; ..\component\CanSM\Implementation\CanSM.c	   938        BswM_CanSM_CurrentState( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ), (*CanSM_CurrentChannelVarPtr).CanSM_BswMIndicatedState );
	mov	d4,#0
	call	BswM_CanSM_CurrentState
.L3:

; ..\component\CanSM\Implementation\CanSM.c	   939      } /* BswM changed */
; ..\component\CanSM\Implementation\CanSM.c	   940  
; ..\component\CanSM\Implementation\CanSM.c	   941      if (  ( (*CanSM_CurrentChannelVarPtr).CanSM_IndicatedComMode != (*CanSM_CurrentChannelVarPtr).CanSM_NewComMode ) || ( (*CanSM_CurrentChannelVarPtr).CanSM_EnfroceComModeIndication == TRUE )  )
	ld.bu	d15,[a15]5
.L827:
	ld.bu	d0,[a15]6
.L828:
	jne	d15,d0,.L4
.L829:
	ld.bu	d15,[a15]7
.L830:
	jne	d15,#1,.L5
.L4:

; ..\component\CanSM\Implementation\CanSM.c	   942      {
; ..\component\CanSM\Implementation\CanSM.c	   943        (*CanSM_CurrentChannelVarPtr).CanSM_EnfroceComModeIndication = FALSE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d4,#0
	st.b	[a15]7,d4
.L831:

; ..\component\CanSM\Implementation\CanSM.c	   944        (*CanSM_CurrentChannelVarPtr).CanSM_IndicatedComMode = (*CanSM_CurrentChannelVarPtr).CanSM_NewComMode; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	ld.bu	d15,[a15]6
.L832:
	st.b	[+a15]5,d15
.L833:

; ..\component\CanSM\Implementation\CanSM.c	   945        ComM_BusSM_ModeIndication( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ), &( (*CanSM_CurrentChannelVarPtr ).CanSM_IndicatedComMode ) ); /* SBSW_CANSM_COMMMODEINDICATION_CALL */
	mov.aa	a4,a15
.L457:
	j	ComM_BusSM_ModeIndication
.L5:
.L2:

; ..\component\CanSM\Implementation\CanSM.c	   946      } /* ComM changed */
; ..\component\CanSM\Implementation\CanSM.c	   947  
; ..\component\CanSM\Implementation\CanSM.c	   948    } /* caller is Indication Responsible  */
; ..\component\CanSM\Implementation\CanSM.c	   949  
; ..\component\CanSM\Implementation\CanSM.c	   950  
; ..\component\CanSM\Implementation\CanSM.c	   951    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	   952  
; ..\component\CanSM\Implementation\CanSM.c	   953  } /* end CanSM_CheckModeIndication() */
	ret
.L451:
	
__CanSM_CheckModeIndication_function_end:
	.size	CanSM_CheckModeIndication,__CanSM_CheckModeIndication_function_end-CanSM_CheckModeIndication
.L250:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_FullComReached',code,cluster('CanSM_FullComReached')
	.sect	'.text.CanSM.CanSM_FullComReached'
	.align	2
	

; ..\component\CanSM\Implementation\CanSM.c	   954  
; ..\component\CanSM\Implementation\CanSM.c	   955  
; ..\component\CanSM\Implementation\CanSM.c	   956  
; ..\component\CanSM\Implementation\CanSM.c	   957  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	   958   *  CanSM_StartControllerToBusOffCheck
; ..\component\CanSM\Implementation\CanSM.c	   959   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	   960  /*!
; ..\component\CanSM\Implementation\CanSM.c	   961   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	   962   *
; ..\component\CanSM\Implementation\CanSM.c	   963   *
; ..\component\CanSM\Implementation\CanSM.c	   964   *
; ..\component\CanSM\Implementation\CanSM.c	   965   *
; ..\component\CanSM\Implementation\CanSM.c	   966   *
; ..\component\CanSM\Implementation\CanSM.c	   967   *
; ..\component\CanSM\Implementation\CanSM.c	   968   */
; ..\component\CanSM\Implementation\CanSM.c	   969  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_StartControllerToBusOffCheck( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	   970  { /*  Context: NWSM; CANSM_BO_TX_OFFLINE timer elapsed, CanSM_CtrlStartedIndicated after startup resp. no BOR CanSM_HandleComModeRequest; from SILENT to FULL;;    CanSM_FullComReached; withOUT new raw pending BusOff */
; ..\component\CanSM\Implementation\CanSM.c	   971    /* \trace SPEC-11274,  SPEC-11360  */
; ..\component\CanSM\Implementation\CanSM.c	   972  
; ..\component\CanSM\Implementation\CanSM.c	   973    (*CanSM_CurrentChannelVarPtr).CanSM_BswMNewState = CANSM_BSWM_FULL_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	   974    (*CanSM_CurrentChannelVarPtr).CanSM_NewComMode = COMM_FULL_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	   975  
; ..\component\CanSM\Implementation\CanSM.c	   976    CanSM_SetCanIfPduModeFullCom( CanSM_CanNetworkIdx, (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter );
; ..\component\CanSM\Implementation\CanSM.c	   977  
; ..\component\CanSM\Implementation\CanSM.c	   978  
; ..\component\CanSM\Implementation\CanSM.c	   979    (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_BO_BUS_OFF_CHECK; /* CREQ-368 */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	   980  #if ( CANSM_EXPANDED_TX_TIMEOUT_RECOVERY == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	   981    if ( (*CanSM_CurrentChannelVarPtr).CanSM_TxTimeoutEndIndicationFlag == TRUE )
; ..\component\CanSM\Implementation\CanSM.c	   982    {
; ..\component\CanSM\Implementation\CanSM.c	   983      (*CanSM_CurrentChannelVarPtr).CanSM_TxTimeoutEndIndicationFlag = FALSE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	   984      (*CanSM_TxTimeoutExceptionEndIndicationFctPtr)( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ) );  /* SBSW_CANSM_TX_TIMEOUT_END_INDICATION */
; ..\component\CanSM\Implementation\CanSM.c	   985    }
; ..\component\CanSM\Implementation\CanSM.c	   986  #endif /* ( CANSM_EXPANDED_TX_TIMEOUT_RECOVERY == STD_OFF ) */
; ..\component\CanSM\Implementation\CanSM.c	   987  
; ..\component\CanSM\Implementation\CanSM.c	   988  
; ..\component\CanSM\Implementation\CanSM.c	   989  #if defined CANSM_BOR_TX_CONFIRMATION_POLLING_ALWAYS_ON
; ..\component\CanSM\Implementation\CanSM.c	   990    (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	   991  #elif ( CANSM_BOR_TX_CONFIRMATION_POLLINGOFCHANNELCONFIG == STD_OFF )
; ..\component\CanSM\Implementation\CanSM.c	   992    (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CanSM_GetBorTimeTxEnsuredOfChannelConfig( CanSM_CanNetworkIdx ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	   993  #else /* Some channels with BOR_TX_CONFIRMATION_POLLING     Some channels without TxPolling  */
; ..\component\CanSM\Implementation\CanSM.c	   994    if ( CanSM_IsBor_Tx_Confirmation_PollingOfChannelConfig( CanSM_CanNetworkIdx ) ) /* PRQA S 4304, 4404, 1881, 1882, 4558 */ /* MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean */
; ..\component\CanSM\Implementation\CanSM.c	   995    {
; ..\component\CanSM\Implementation\CanSM.c	   996      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	   997    }
; ..\component\CanSM\Implementation\CanSM.c	   998    else
; ..\component\CanSM\Implementation\CanSM.c	   999    {
; ..\component\CanSM\Implementation\CanSM.c	  1000      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CanSM_GetBorTimeTxEnsuredOfChannelConfig( CanSM_CanNetworkIdx ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1001    }
; ..\component\CanSM\Implementation\CanSM.c	  1002  #endif /* BOR_TX_CONFIRMATION_POLLING */
; ..\component\CanSM\Implementation\CanSM.c	  1003  
; ..\component\CanSM\Implementation\CanSM.c	  1004    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx ); /* might be unreferenced due to ComStackLib optimization */ /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  1005  
; ..\component\CanSM\Implementation\CanSM.c	  1006  } /* CanSM_StartControllerToBusOffCheck */
; ..\component\CanSM\Implementation\CanSM.c	  1007  
; ..\component\CanSM\Implementation\CanSM.c	  1008  
; ..\component\CanSM\Implementation\CanSM.c	  1009  
; ..\component\CanSM\Implementation\CanSM.c	  1010  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1011   *  CanSM_FullComToRestartController
; ..\component\CanSM\Implementation\CanSM.c	  1012   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1013  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1014   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1015   *
; ..\component\CanSM\Implementation\CanSM.c	  1016   *
; ..\component\CanSM\Implementation\CanSM.c	  1017   *
; ..\component\CanSM\Implementation\CanSM.c	  1018   *
; ..\component\CanSM\Implementation\CanSM.c	  1019   *
; ..\component\CanSM\Implementation\CanSM.c	  1020   */
; ..\component\CanSM\Implementation\CanSM.c	  1021  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_FullComToRestartController( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1022  { /* Context: CanSM_BusOffIndicated; new raw bus-off */
; ..\component\CanSM\Implementation\CanSM.c	  1023  
; ..\component\CanSM\Implementation\CanSM.c	  1024    (*CanSM_CurrentChannelVarPtr).CanSM_BswMNewState = CANSM_BSWM_BUS_OFF; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1025    (*CanSM_CurrentChannelVarPtr).CanSM_NewComMode = COMM_SILENT_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1026    /* \trace..SPEC-11324 */
; ..\component\CanSM\Implementation\CanSM.c	  1027    /* \trace..SPEC-11416 */
; ..\component\CanSM\Implementation\CanSM.c	  1028  
; ..\component\CanSM\Implementation\CanSM.c	  1029  #if ( CANSM_PRODERRORDETECT_BUSOFF_OFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1030  # if ( CANSM_ISDEF_PRODERRORDETECT_BUSOFF_OFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1031    CanSM_Dem_ReportErrorEvent( CanSM_GetDemEventId_BusOff_OfChannelConfig( CanSM_CanNetworkIdx ), DEM_EVENT_STATUS_PREFAILED );
; ..\component\CanSM\Implementation\CanSM.c	  1032  # else /* CANSM_ISDEF_PRODERRORDETECT_BUSOFF_OFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	  1033    if ( CanSM_IsProdErrorDetect_BusOff_OfChannelConfig( CanSM_CanNetworkIdx ) ) /* PRQA S 4304, 4404, 1881, 1882, 4558 */ /* MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean */
; ..\component\CanSM\Implementation\CanSM.c	  1034    {
; ..\component\CanSM\Implementation\CanSM.c	  1035      CanSM_Dem_ReportErrorEvent( CanSM_GetDemEventId_BusOff_OfChannelConfig( CanSM_CanNetworkIdx ), DEM_EVENT_STATUS_PREFAILED );
; ..\component\CanSM\Implementation\CanSM.c	  1036    }
; ..\component\CanSM\Implementation\CanSM.c	  1037  # endif /* CANSM_ISDEF_PRODERRORDETECT_BUSOFF_OFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	  1038  #endif /* ( CANSM_PRODERRORDETECT_BUSOFF_OFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1039    /* \trace..SPEC-11335 */
; ..\component\CanSM\Implementation\CanSM.c	  1040  
; ..\component\CanSM\Implementation\CanSM.c	  1041    (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* trigger NwSM next MainFuncCycle */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1042    (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SU_CC_STARTED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1043  
; ..\component\CanSM\Implementation\CanSM.c	  1044    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx ); /* might be unreferenced due to ComStackLib optimization */ /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  1045  
; ..\component\CanSM\Implementation\CanSM.c	  1046  } /* CanSM_FullComToRestartController */
; ..\component\CanSM\Implementation\CanSM.c	  1047  
; ..\component\CanSM\Implementation\CanSM.c	  1048  
; ..\component\CanSM\Implementation\CanSM.c	  1049  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1050   *  CanSM_InitiateShutDownSequence
; ..\component\CanSM\Implementation\CanSM.c	  1051   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1052  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1053   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1054   *
; ..\component\CanSM\Implementation\CanSM.c	  1055   *
; ..\component\CanSM\Implementation\CanSM.c	  1056   *
; ..\component\CanSM\Implementation\CanSM.c	  1057   *
; ..\component\CanSM\Implementation\CanSM.c	  1058   */
; ..\component\CanSM\Implementation\CanSM.c	  1059  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_InitiateShutDownSequence( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1060  { /* Context: CanSM_Init, CanSM_InitializeVariables; CanSM_MainFunction, CanSM_EvaluateComModeRequest CanSM_MainFunction, CanSM_EvaluateMaxModeRequests CanSM_TxTimeoutException, no bus-off */
; ..\component\CanSM\Implementation\CanSM.c	  1061    /* \trace..SPEC-11288 */
; ..\component\CanSM\Implementation\CanSM.c	  1062  
; ..\component\CanSM\Implementation\CanSM.c	  1063    (*CanSM_CurrentChannelVarPtr).CanSM_BswMNewState = CANSM_BSWM_NO_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1064    /* \trace..SPEC-11365 */
; ..\component\CanSM\Implementation\CanSM.c	  1065    (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1066  
; ..\component\CanSM\Implementation\CanSM.c	  1067  
; ..\component\CanSM\Implementation\CanSM.c	  1068  #if defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF
; ..\component\CanSM\Implementation\CanSM.c	  1069    if ( CanSM_IsPartial_Network_Trcv_SupportOfChannelConfig( CanSM_CanNetworkIdx ) ) /* PRQA S 4304, 4404, 1881, 1882, 4558 */ /* MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean */
; ..\component\CanSM\Implementation\CanSM.c	  1070  #endif /*   CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF */
; ..\component\CanSM\Implementation\CanSM.c	  1071    {
; ..\component\CanSM\Implementation\CanSM.c	  1072  #if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1073      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_PN_CLEAR_WUF; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1074  #endif  /* not always OFF ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1075    }
; ..\component\CanSM\Implementation\CanSM.c	  1076  #if defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF
; ..\component\CanSM\Implementation\CanSM.c	  1077    else
; ..\component\CanSM\Implementation\CanSM.c	  1078  #endif /*   CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF */
; ..\component\CanSM\Implementation\CanSM.c	  1079    {
; ..\component\CanSM\Implementation\CanSM.c	  1080  #if !defined ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1081      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_CC_STOPPED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1082  #endif /* ( not CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON  ) */
; ..\component\CanSM\Implementation\CanSM.c	  1083    }
; ..\component\CanSM\Implementation\CanSM.c	  1084  
; ..\component\CanSM\Implementation\CanSM.c	  1085  #if ( CANSM_EXPANDED_TX_TIMEOUT_RECOVERY == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1086    if ( (*CanSM_CurrentChannelVarPtr).CanSM_TxTimeoutEndIndicationFlag == TRUE )
; ..\component\CanSM\Implementation\CanSM.c	  1087    {
; ..\component\CanSM\Implementation\CanSM.c	  1088      (*CanSM_TxTimeoutExceptionEndIndicationFctPtr)( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ) ); /* SBSW_CANSM_TX_TIMEOUT_END_INDICATION */
; ..\component\CanSM\Implementation\CanSM.c	  1089    }
; ..\component\CanSM\Implementation\CanSM.c	  1090  #endif /* ( CANSM_EXPANDED_TX_TIMEOUT_RECOVERY == STD_OFF ) */
; ..\component\CanSM\Implementation\CanSM.c	  1091    (*CanSM_CurrentChannelVarPtr).CanSM_TxTimeoutEndIndicationFlag = FALSE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1092  
; ..\component\CanSM\Implementation\CanSM.c	  1093  
; ..\component\CanSM\Implementation\CanSM.c	  1094    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx ); /* might be unreferenced due to ComStackLib optimization */ /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  1095  
; ..\component\CanSM\Implementation\CanSM.c	  1096  } /* CanSM_InitiateShutDownSequence */
; ..\component\CanSM\Implementation\CanSM.c	  1097  
; ..\component\CanSM\Implementation\CanSM.c	  1098  
; ..\component\CanSM\Implementation\CanSM.c	  1099  
; ..\component\CanSM\Implementation\CanSM.c	  1100  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1101   *  CanSM_InitializeVariables
; ..\component\CanSM\Implementation\CanSM.c	  1102   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1103  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1104   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1105   *
; ..\component\CanSM\Implementation\CanSM.c	  1106   *
; ..\component\CanSM\Implementation\CanSM.c	  1107   */
; ..\component\CanSM\Implementation\CanSM.c	  1108  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_InitializeVariables( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx )
; ..\component\CanSM\Implementation\CanSM.c	  1109  { /* Context: Called by CanSM_Init */
; ..\component\CanSM\Implementation\CanSM.c	  1110    P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  1111  
; ..\component\CanSM\Implementation\CanSM.c	  1112  #if ( CANSM_ECU_PASSIVE_MODE == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1113    CanSM_EcuPassiveMode = FALSE;
; ..\component\CanSM\Implementation\CanSM.c	  1114  #endif  /* CANSM_ECU_PASSIVE_MODE */
; ..\component\CanSM\Implementation\CanSM.c	  1115  
; ..\component\CanSM\Implementation\CanSM.c	  1116    (*CanSM_CurrentChannelVarPtr).CanSM_ModeRequestRepetitionCounter = 0; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1117    (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter = CANSM_BOR_NONE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1118    (*CanSM_CurrentChannelVarPtr).CanSM_BusOffFlag = FALSE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1119    (*CanSM_CurrentChannelVarPtr).CanSM_LastValidBaudRate = CANSM_INVALID_BAUDRATE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1120    (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode = COMM_NO_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1121    (*CanSM_CurrentChannelVarPtr).CanSM_IndicatedComMode = COMM_NO_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1122    (*CanSM_CurrentChannelVarPtr).CanSM_NewComMode = COMM_NO_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1123    (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible = CANSM_NOBODY;  /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1124    (*CanSM_CurrentChannelVarPtr).CanSM_BswMIndicatedState = CANSM_BSWM_NO_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1125    (*CanSM_CurrentChannelVarPtr).CanSM_BswMNewState = CANSM_BSWM_NO_COMMUNICATION;  /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1126    (*CanSM_CurrentChannelVarPtr).CanSM_TxTimeoutEndIndicationFlag = FALSE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1127    (*CanSM_CurrentChannelVarPtr).CanSM_EnfroceComModeIndication = FALSE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1128  #if ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1129    (*CanSM_CurrentChannelVarPtr).CanSM_TxOnlineDelayTime = CANSM_DELAY_TIMER_INACTIVE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1130  #endif /* ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1131  
; ..\component\CanSM\Implementation\CanSM.c	  1132    CanSM_InitiateShutDownSequence( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1133  
; ..\component\CanSM\Implementation\CanSM.c	  1134  } /* CanSM_InitializeVariables */
; ..\component\CanSM\Implementation\CanSM.c	  1135  
; ..\component\CanSM\Implementation\CanSM.c	  1136  
; ..\component\CanSM\Implementation\CanSM.c	  1137  
; ..\component\CanSM\Implementation\CanSM.c	  1138  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1139   *  CanSM_UninitToNoCom
; ..\component\CanSM\Implementation\CanSM.c	  1140   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1141  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1142   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1143   *
; ..\component\CanSM\Implementation\CanSM.c	  1144   *
; ..\component\CanSM\Implementation\CanSM.c	  1145   *
; ..\component\CanSM\Implementation\CanSM.c	  1146   */
; ..\component\CanSM\Implementation\CanSM.c	  1147  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_UninitToNoCom( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx )
; ..\component\CanSM\Implementation\CanSM.c	  1148  { /* Context: CanSM_Init */
; ..\component\CanSM\Implementation\CanSM.c	  1149  
; ..\component\CanSM\Implementation\CanSM.c	  1150    P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  1151  
; ..\component\CanSM\Implementation\CanSM.c	  1152    (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible = CANSM_SID_INIT;  /* avoid mode indication */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1153  #if ( CANSM_EXTENDED_RAM_CHECK == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1154    (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState   = CANSM_SD_CHECK_RAM; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1155    CanSM_RamCheckEnd( (CanSM_SizeOfChannelVarRecordType)CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  1156  #endif /* CANSM_EXTENDED_RAM_CHECK  */
; ..\component\CanSM\Implementation\CanSM.c	  1157  
; ..\component\CanSM\Implementation\CanSM.c	  1158  #if ( CANSM_EXTENDED_RAM_CHECK == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1159    if ( (*CanSM_CurrentChannelVarPtr).CanSM_RamCheckState == CANSM_ENABLE_COMMUNICATION )
; ..\component\CanSM\Implementation\CanSM.c	  1160  #endif /* CANSM_PREVENT_BUSSLEEP_AT_STARTUP CANSM_USE_INIT_POINTER */
; ..\component\CanSM\Implementation\CanSM.c	  1161    {
; ..\component\CanSM\Implementation\CanSM.c	  1162  
; ..\component\CanSM\Implementation\CanSM.c	  1163  #if (  ( CANSM_PREVENT_BUSSLEEP_AT_STARTUP == STD_ON ) && ( CANSM_USE_INIT_POINTER == STD_OFF )  )
; ..\component\CanSM\Implementation\CanSM.c	  1164      if ( CanSM_EnableSetBusSleep[ CanSM_CanNetworkIdx ] != CANSM_SET_BUS_SLEEP_MODE )
; ..\component\CanSM\Implementation\CanSM.c	  1165      { /* skip initial transition to NoCom */
; ..\component\CanSM\Implementation\CanSM.c	  1166        (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState   = CANSM_S_NOCOM; /* CREQ-365 */ /* CanSM_PreventBusSleepAtStartUp */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1167        (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1168      }
; ..\component\CanSM\Implementation\CanSM.c	  1169      else
; ..\component\CanSM\Implementation\CanSM.c	  1170  #endif /* CANSM_PREVENT_BUSSLEEP_AT_STARTUP CANSM_USE_INIT_POINTER */
; ..\component\CanSM\Implementation\CanSM.c	  1171      {
; ..\component\CanSM\Implementation\CanSM.c	  1172        CanSM_NetworkStatemachine( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1173        /* \trace SPEC-11277 */
; ..\component\CanSM\Implementation\CanSM.c	  1174      }  /* EnableSetBusSleep CANSM_SET_BUS_SLEEP_MODE  */
; ..\component\CanSM\Implementation\CanSM.c	  1175  
; ..\component\CanSM\Implementation\CanSM.c	  1176    } /* CanSM_RamCheckState  CANSM_ENABLE_COMMUNICATION */
; ..\component\CanSM\Implementation\CanSM.c	  1177  
; ..\component\CanSM\Implementation\CanSM.c	  1178    (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible = CANSM_NOBODY;  /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1179  
; ..\component\CanSM\Implementation\CanSM.c	  1180  
; ..\component\CanSM\Implementation\CanSM.c	  1181  } /* CanSM_UninitToNoCom */
; ..\component\CanSM\Implementation\CanSM.c	  1182  
; ..\component\CanSM\Implementation\CanSM.c	  1183  
; ..\component\CanSM\Implementation\CanSM.c	  1184  
; ..\component\CanSM\Implementation\CanSM.c	  1185  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1186   *  FUNC CanSM_BusOffCheckToNoBusOff
; ..\component\CanSM\Implementation\CanSM.c	  1187   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1188  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1189   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1190   *
; ..\component\CanSM\Implementation\CanSM.c	  1191   *
; ..\component\CanSM\Implementation\CanSM.c	  1192   *
; ..\component\CanSM\Implementation\CanSM.c	  1193   */
; ..\component\CanSM\Implementation\CanSM.c	  1194  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_BusOffCheckToNoBusOff( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1195  { /* Context: NWSM; CANSM_BO_BUS_OFF_CHECK */
; ..\component\CanSM\Implementation\CanSM.c	  1196  
; ..\component\CanSM\Implementation\CanSM.c	  1197    /* \trace..SPEC-11322 */
; ..\component\CanSM\Implementation\CanSM.c	  1198  #if ( CANSM_PRODERRORDETECT_BUSOFF_OFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1199  # if ( CANSM_ISDEF_PRODERRORDETECT_BUSOFF_OFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1200    CanSM_Dem_ReportErrorEvent( CanSM_GetDemEventId_BusOff_OfChannelConfig( CanSM_CanNetworkIdx ), DEM_EVENT_STATUS_PASSED );
; ..\component\CanSM\Implementation\CanSM.c	  1201  # else /* CANSM_ISDEF_PRODERRORDETECT_BUSOFF_OFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	  1202    if ( CanSM_IsProdErrorDetect_BusOff_OfChannelConfig( CanSM_CanNetworkIdx ) ) /* PRQA S 4304, 4404, 1881, 1882, 4558 */ /* MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean */
; ..\component\CanSM\Implementation\CanSM.c	  1203    {
; ..\component\CanSM\Implementation\CanSM.c	  1204      CanSM_Dem_ReportErrorEvent( CanSM_GetDemEventId_BusOff_OfChannelConfig( CanSM_CanNetworkIdx ), DEM_EVENT_STATUS_PASSED );
; ..\component\CanSM\Implementation\CanSM.c	  1205    }
; ..\component\CanSM\Implementation\CanSM.c	  1206  # endif /* CANSM_ISDEF_PRODERRORDETECT_BUSOFF_OFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	  1207  #endif /* ( CANSM_PRODERRORDETECT_BUSOFF_OFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1208  
; ..\component\CanSM\Implementation\CanSM.c	  1209    (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_S_NO_BUS_OFF; /* CREQ-368 */ /* CANSM_S_FULLCOM_ENSURED */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1210    (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter = CANSM_BOR_NONE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1211  
; ..\component\CanSM\Implementation\CanSM.c	  1212    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx ); /* might be unreferenced due to ComStackLib optimization */ /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  1213  
; ..\component\CanSM\Implementation\CanSM.c	  1214  } /* CanSM_BusOffCheckToNoBusOff */
; ..\component\CanSM\Implementation\CanSM.c	  1215  
; ..\component\CanSM\Implementation\CanSM.c	  1216  
; ..\component\CanSM\Implementation\CanSM.c	  1217  
; ..\component\CanSM\Implementation\CanSM.c	  1218  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1219   *  CanSM_CtrlStartedIndicated
; ..\component\CanSM\Implementation\CanSM.c	  1220   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1221  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1222   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1223   *
; ..\component\CanSM\Implementation\CanSM.c	  1224   *
; ..\component\CanSM\Implementation\CanSM.c	  1225   *
; ..\component\CanSM\Implementation\CanSM.c	  1226   *
; ..\component\CanSM\Implementation\CanSM.c	  1227   *
; ..\component\CanSM\Implementation\CanSM.c	  1228   *
; ..\component\CanSM\Implementation\CanSM.c	  1229   *
; ..\component\CanSM\Implementation\CanSM.c	  1230   */
; ..\component\CanSM\Implementation\CanSM.c	  1231  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_CtrlStartedIndicated( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1232  { /* Context: CanSM_ControllerModeIndication, CANIF_CS_STARTED received in state CANSM_SU_CC_STARTED */
; ..\component\CanSM\Implementation\CanSM.c	  1233  
; ..\component\CanSM\Implementation\CanSM.c	  1234    (*CanSM_CurrentChannelVarPtr).CanSM_ModeRequestRepetitionCounter = 0; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1235    (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode &= CANSM_CLEAR_TX_TIMEOUT_EXCEPTION_FLAG; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1236  
; ..\component\CanSM\Implementation\CanSM.c	  1237  #if !defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON
; ..\component\CanSM\Implementation\CanSM.c	  1238    if ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_NO_COMMUNICATION )
; ..\component\CanSM\Implementation\CanSM.c	  1239    { /* CanSM_StartWakeupSources  Skip FullCom Indication */
; ..\component\CanSM\Implementation\CanSM.c	  1240      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_S_STARTWAKEUPSOURCES_SUCCESSFUL; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1241      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */ /* PRQA S 2982 */ /* MD_CANSM_Rule2.2_2982 */
; ..\component\CanSM\Implementation\CanSM.c	  1242    }
; ..\component\CanSM\Implementation\CanSM.c	  1243    else
; ..\component\CanSM\Implementation\CanSM.c	  1244  #endif /* !defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON */
; ..\component\CanSM\Implementation\CanSM.c	  1245    if ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter == CANSM_BOR_NONE )
; ..\component\CanSM\Implementation\CanSM.c	  1246    { /* E_FULLCOM */ /* E_FULL_COM */
; ..\component\CanSM\Implementation\CanSM.c	  1247  #if ( CANSM_ECU_PASSIVE_MODE == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1248      SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_5(); /* RequestComMode MainFunction SetEcuPassive */
; ..\component\CanSM\Implementation\CanSM.c	  1249  #endif /* CANSM_ECU_PASSIVE_MODE == STD_ON  */
; ..\component\CanSM\Implementation\CanSM.c	  1250  
; ..\component\CanSM\Implementation\CanSM.c	  1251      CanSM_FullComReached( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1252      /* \trace..SPEC-11304 */
; ..\component\CanSM\Implementation\CanSM.c	  1253      /* \trace SPEC-11373, SPEC-11381, SPEC-11387, SPEC-47117, SPEC-47124 */
; ..\component\CanSM\Implementation\CanSM.c	  1254  #if ( CANSM_ECU_PASSIVE_MODE == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1255      SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_5();
; ..\component\CanSM\Implementation\CanSM.c	  1256  #endif /* CANSM_ECU_PASSIVE_MODE == STD_ON  */
; ..\component\CanSM\Implementation\CanSM.c	  1257    }
; ..\component\CanSM\Implementation\CanSM.c	  1258    else
; ..\component\CanSM\Implementation\CanSM.c	  1259    { /* E_TX_OFF */
; ..\component\CanSM\Implementation\CanSM.c	  1260  
; ..\component\CanSM\Implementation\CanSM.c	  1261      (void)CanIf_SetPduMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_SET_TX_OFFLINE );
; ..\component\CanSM\Implementation\CanSM.c	  1262  
; ..\component\CanSM\Implementation\CanSM.c	  1263      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_BO_TX_OFFLINE; /* CREQ-367 */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1264      if ( CanSM_GetBorCounterL1ToL2OfChannelConfig( CanSM_CanNetworkIdx ) > (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter )
; ..\component\CanSM\Implementation\CanSM.c	  1265      {
; ..\component\CanSM\Implementation\CanSM.c	  1266        (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CanSM_GetBorTimeL1OfChannelConfig( CanSM_CanNetworkIdx ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1267      }
; ..\component\CanSM\Implementation\CanSM.c	  1268      else
; ..\component\CanSM\Implementation\CanSM.c	  1269      {
; ..\component\CanSM\Implementation\CanSM.c	  1270        (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CanSM_GetBorTimeL2OfChannelConfig( CanSM_CanNetworkIdx ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1271      }
; ..\component\CanSM\Implementation\CanSM.c	  1272  #if ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1273  
; ..\component\CanSM\Implementation\CanSM.c	  1274      /* Check if CanSM_TxOnlineDelayTime ins unequal to CANSM_DELAY_TIMER_INACTIVE is redundant to the preProcessor switch */
; ..\component\CanSM\Implementation\CanSM.c	  1275  
; ..\component\CanSM\Implementation\CanSM.c	  1276      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer += (*CanSM_CurrentChannelVarPtr).CanSM_TxOnlineDelayTime; /* J1939Nm delay */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1277      /* \trace..SPEC-2181238 */
; ..\component\CanSM\Implementation\CanSM.c	  1278  #endif /* ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1279  
; ..\component\CanSM\Implementation\CanSM.c	  1280    }
; ..\component\CanSM\Implementation\CanSM.c	  1281  
; ..\component\CanSM\Implementation\CanSM.c	  1282  } /* CanSM_CtrlStartedIndicated */
; ..\component\CanSM\Implementation\CanSM.c	  1283  
; ..\component\CanSM\Implementation\CanSM.c	  1284  
; ..\component\CanSM\Implementation\CanSM.c	  1285  
; ..\component\CanSM\Implementation\CanSM.c	  1286  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1287   *  CanSM_CtrlStoppedIndicated
; ..\component\CanSM\Implementation\CanSM.c	  1288   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1289  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1290   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1291   *
; ..\component\CanSM\Implementation\CanSM.c	  1292   *
; ..\component\CanSM\Implementation\CanSM.c	  1293   *
; ..\component\CanSM\Implementation\CanSM.c	  1294   *
; ..\component\CanSM\Implementation\CanSM.c	  1295   *
; ..\component\CanSM\Implementation\CanSM.c	  1296   *
; ..\component\CanSM\Implementation\CanSM.c	  1297   *
; ..\component\CanSM\Implementation\CanSM.c	  1298   *
; ..\component\CanSM\Implementation\CanSM.c	  1299   *
; ..\component\CanSM\Implementation\CanSM.c	  1300   */
; ..\component\CanSM\Implementation\CanSM.c	  1301  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_CtrlStoppedIndicated( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1302  { /* Context: CanSM_ControllerModeIndication, CANIF_CS_STOPPED received */
; ..\component\CanSM\Implementation\CanSM.c	  1303  
; ..\component\CanSM\Implementation\CanSM.c	  1304    if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SU_CC_STOPPED )
; ..\component\CanSM\Implementation\CanSM.c	  1305    {
; ..\component\CanSM\Implementation\CanSM.c	  1306  
; ..\component\CanSM\Implementation\CanSM.c	  1307  #if ( ( CANSM_SET_BAUDRATE_API == STD_ON ) || ( CANSM_CHANGE_BAUDRATE_API == STD_ON ) )
; ..\component\CanSM\Implementation\CanSM.c	  1308      if (  (*CanSM_CurrentChannelVarPtr).CanSM_BswMIndicatedState == CANSM_BSWM_CHANGE_BAUDRATE )
; ..\component\CanSM\Implementation\CanSM.c	  1309      { /* E_CHANGE_BAUDRATE CANSM_BSM_S_CHANGE_BAUDRATE */
; ..\component\CanSM\Implementation\CanSM.c	  1310  
; ..\component\CanSM\Implementation\CanSM.c	  1311        (*CanSM_CurrentChannelVarPtr).CanSM_NewComMode = COMM_NO_COMMUNICATION;  /* CBR  END; */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1312        /* \trace..SPEC-11339 */
; ..\component\CanSM\Implementation\CanSM.c	  1313  
; ..\component\CanSM\Implementation\CanSM.c	  1314  # if ( CANSM_SET_BAUDRATE_API == STD_ON)
; ..\component\CanSM\Implementation\CanSM.c	  1315        (void)CanIf_SetBaudrate( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), (*CanSM_CurrentChannelVarPtr).CanSM_LastValidBaudRate );  /* CanSM_LastValidBaudRate contains value of BaudRateConfigID */
; ..\component\CanSM\Implementation\CanSM.c	  1316  # else /* # if (  ==CANSM_CHANGE_BAUDRATE_API  either SetBR  or ChangeBR allowed */
; ..\component\CanSM\Implementation\CanSM.c	  1317        (void)CanIf_ChangeBaudrate( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), (*CanSM_CurrentChannelVarPtr).CanSM_LastValidBaudRate );
; ..\component\CanSM\Implementation\CanSM.c	  1318  # endif /*  CANSM_CHANGE_BAUDRATE_API ) */
; ..\component\CanSM\Implementation\CanSM.c	  1319        /* \trace..SPEC-47122 */
; ..\component\CanSM\Implementation\CanSM.c	  1320        /* \trace..SPEC-11353 */
; ..\component\CanSM\Implementation\CanSM.c	  1321  
; ..\component\CanSM\Implementation\CanSM.c	  1322      }
; ..\component\CanSM\Implementation\CanSM.c	  1323  #endif /* (  CANSM_SET_BAUDRATE_API ) || ( CANSM_CHANGE_BAUDRATE_API ) ) */
; ..\component\CanSM\Implementation\CanSM.c	  1324  
; ..\component\CanSM\Implementation\CanSM.c	  1325      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SU_CC_STARTED; /* CANSM_S_BR_CC_STARTED */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1326      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1327      /* \trace..SPEC-11309 */
; ..\component\CanSM\Implementation\CanSM.c	  1328      /* \trace..SPEC-47113 */
; ..\component\CanSM\Implementation\CanSM.c	  1329  
; ..\component\CanSM\Implementation\CanSM.c	  1330    }
; ..\component\CanSM\Implementation\CanSM.c	  1331    else if ( CANSM_SD_CC_STOPPED == (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState )
; ..\component\CanSM\Implementation\CanSM.c	  1332    { /* shut down  */
; ..\component\CanSM\Implementation\CanSM.c	  1333  
; ..\component\CanSM\Implementation\CanSM.c	  1334  
; ..\component\CanSM\Implementation\CanSM.c	  1335  #if defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON
; ..\component\CanSM\Implementation\CanSM.c	  1336      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_TRCV_NORMAL; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1337  #else /* CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON */
; ..\component\CanSM\Implementation\CanSM.c	  1338  
; ..\component\CanSM\Implementation\CanSM.c	  1339  # if defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF
; ..\component\CanSM\Implementation\CanSM.c	  1340      if ( !CanSM_IsPartial_Network_Trcv_SupportOfChannelConfig( CanSM_CanNetworkIdx ) ) /* PRQA S 4304, 4404, 1881, 1882, 4558 */ /* MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean */
; ..\component\CanSM\Implementation\CanSM.c	  1341  # endif /* CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF */
; ..\component\CanSM\Implementation\CanSM.c	  1342      {
; ..\component\CanSM\Implementation\CanSM.c	  1343        /* already checked above; if ! defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON */
; ..\component\CanSM\Implementation\CanSM.c	  1344        (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_CC_SLEEP; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1345        /* already checked see below;  end if ( not CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON  ) */
; ..\component\CanSM\Implementation\CanSM.c	  1346  # if ( CANSM_EXTENDED_RAM_CHECK == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1347        if ( CanSM_IsInitialized != CANSM_STOPWAKEUPSOURCES_RUNNING ) /*  alias CANSM_INITFUNCTION_RUNNING */
; ..\component\CanSM\Implementation\CanSM.c	  1348        {
; ..\component\CanSM\Implementation\CanSM.c	  1349          (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_CHECK_RAM; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1350        }
; ..\component\CanSM\Implementation\CanSM.c	  1351  # endif /* CANSM_EXTENDED_RAM_CHECK  */
; ..\component\CanSM\Implementation\CanSM.c	  1352        /* \trace..SPEC-11425 */
; ..\component\CanSM\Implementation\CanSM.c	  1353      }
; ..\component\CanSM\Implementation\CanSM.c	  1354  # if defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF
; ..\component\CanSM\Implementation\CanSM.c	  1355      else
; ..\component\CanSM\Implementation\CanSM.c	  1356  # endif /* CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF */
; ..\component\CanSM\Implementation\CanSM.c	  1357      {
; ..\component\CanSM\Implementation\CanSM.c	  1358  # if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1359        (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_TRCV_NORMAL; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1360  # endif  /* not always OFF ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1361        /* \trace..SPEC-11309 */
; ..\component\CanSM\Implementation\CanSM.c	  1362      }
; ..\component\CanSM\Implementation\CanSM.c	  1363  
; ..\component\CanSM\Implementation\CanSM.c	  1364  #endif /* not defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON */
; ..\component\CanSM\Implementation\CanSM.c	  1365  
; ..\component\CanSM\Implementation\CanSM.c	  1366      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1367  
; ..\component\CanSM\Implementation\CanSM.c	  1368    }
; ..\component\CanSM\Implementation\CanSM.c	  1369    else
; ..\component\CanSM\Implementation\CanSM.c	  1370    {
; ..\component\CanSM\Implementation\CanSM.c	  1371      /* MISRA QAC */
; ..\component\CanSM\Implementation\CanSM.c	  1372    }
; ..\component\CanSM\Implementation\CanSM.c	  1373  
; ..\component\CanSM\Implementation\CanSM.c	  1374    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx ); /* might be unreferenced due to ComStackLib optimization */ /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  1375  
; ..\component\CanSM\Implementation\CanSM.c	  1376  } /* CanSM_CtrlStoppedIndicated */
; ..\component\CanSM\Implementation\CanSM.c	  1377  
; ..\component\CanSM\Implementation\CanSM.c	  1378  
; ..\component\CanSM\Implementation\CanSM.c	  1379  
; ..\component\CanSM\Implementation\CanSM.c	  1380  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1381   * CanSM_CtrlSleepIndicated
; ..\component\CanSM\Implementation\CanSM.c	  1382   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1383  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1384   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1385   *
; ..\component\CanSM\Implementation\CanSM.c	  1386   *
; ..\component\CanSM\Implementation\CanSM.c	  1387   *
; ..\component\CanSM\Implementation\CanSM.c	  1388   *
; ..\component\CanSM\Implementation\CanSM.c	  1389   *
; ..\component\CanSM\Implementation\CanSM.c	  1390   *
; ..\component\CanSM\Implementation\CanSM.c	  1391   */
; ..\component\CanSM\Implementation\CanSM.c	  1392  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_CtrlSleepIndicated( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1393  { /* Context: CanSM_ControllerModeIndication, CANIF_CS_SLEEP received */
; ..\component\CanSM\Implementation\CanSM.c	  1394  
; ..\component\CanSM\Implementation\CanSM.c	  1395  #if !defined ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1396    if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_CC_SLEEP )
; ..\component\CanSM\Implementation\CanSM.c	  1397    {
; ..\component\CanSM\Implementation\CanSM.c	  1398  
; ..\component\CanSM\Implementation\CanSM.c	  1399      /* \trace SPEC-11295 */
; ..\component\CanSM\Implementation\CanSM.c	  1400  # if defined CANSM_SD_CC_SLEEP_NON_PN_CHANNELS_TRCV_MIXED
; ..\component\CanSM\Implementation\CanSM.c	  1401      if ( CanSM_IsTransceiver_Channel_SupportOfChannelConfig( CanSM_CanNetworkIdx ) ) /* PRQA S 4304, 4404, 1881, 1882, 4558 */ /* MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean */
; ..\component\CanSM\Implementation\CanSM.c	  1402  # endif /* Trcv ID, runtime check needed, channels on or off */
; ..\component\CanSM\Implementation\CanSM.c	  1403      {
; ..\component\CanSM\Implementation\CanSM.c	  1404  #if !defined CANSM_SD_CC_SLEEP_ALL_NON_PN_CHANNELS_WITHOUT_TRCV
; ..\component\CanSM\Implementation\CanSM.c	  1405        (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */ /* PRQA S 2982 */ /* MD_CANSM_Rule2.2_2982 */
; ..\component\CanSM\Implementation\CanSM.c	  1406        (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_TRCV_NORMAL; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */ /* PRQA S 2982 */ /* MD_CANSM_Rule2.2_2982 */
; ..\component\CanSM\Implementation\CanSM.c	  1407  # endif /* CANSM_SD_CC_SLEEP_ALL_NON_PN_CHANNELS_WITHOUT_TRCV */
; ..\component\CanSM\Implementation\CanSM.c	  1408      } /* end if Trcv active on current channel */
; ..\component\CanSM\Implementation\CanSM.c	  1409  # if defined CANSM_SD_CC_SLEEP_NON_PN_CHANNELS_TRCV_MIXED
; ..\component\CanSM\Implementation\CanSM.c	  1410      else
; ..\component\CanSM\Implementation\CanSM.c	  1411  # endif /* Trcv ID runtime check, mixed on off */
; ..\component\CanSM\Implementation\CanSM.c	  1412      {
; ..\component\CanSM\Implementation\CanSM.c	  1413        /* Trcv active at least at one channel */
; ..\component\CanSM\Implementation\CanSM.c	  1414  #if !defined CANSM_SD_CC_SLEEP_ALL_NON_PN_CHANNELS_HAS_TRCV
; ..\component\CanSM\Implementation\CanSM.c	  1415        CanSM_NoComReached( CanSM_CurrentChannelVarPtr );  /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1416  #endif /*  CANSM_SD_CC_SLEEP_ALL_NON_PN_CHANNELS_HAS_TRCV  */
; ..\component\CanSM\Implementation\CanSM.c	  1417      }
; ..\component\CanSM\Implementation\CanSM.c	  1418      /* \trace SPEC-11341, SPEC-11405 */
; ..\component\CanSM\Implementation\CanSM.c	  1419  
; ..\component\CanSM\Implementation\CanSM.c	  1420    }
; ..\component\CanSM\Implementation\CanSM.c	  1421  #endif /* ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1422  #if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1423  #if defined ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1424    if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_CC_SLEEP_PN ) || ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_CHK_WUF_NOT_CC_SLEEP ) )
; ..\component\CanSM\Implementation\CanSM.c	  1425  # else
; ..\component\CanSM\Implementation\CanSM.c	  1426    else if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_CC_SLEEP_PN ) || ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_CHK_WUF_NOT_CC_SLEEP ) )
; ..\component\CanSM\Implementation\CanSM.c	  1427  # endif /* ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1428    { /* PN */
; ..\component\CanSM\Implementation\CanSM.c	  1429      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_CHK_WUF_CC_SLEEP; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1430      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1431    }
; ..\component\CanSM\Implementation\CanSM.c	  1432    else
; ..\component\CanSM\Implementation\CanSM.c	  1433    {
; ..\component\CanSM\Implementation\CanSM.c	  1434      /* MISRA QAC */
; ..\component\CanSM\Implementation\CanSM.c	  1435    }
; ..\component\CanSM\Implementation\CanSM.c	  1436  #endif /* if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1437  
; ..\component\CanSM\Implementation\CanSM.c	  1438    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  1439  
; ..\component\CanSM\Implementation\CanSM.c	  1440  } /* CanSM_CtrlSleepIndicated */
; ..\component\CanSM\Implementation\CanSM.c	  1441  
; ..\component\CanSM\Implementation\CanSM.c	  1442  
; ..\component\CanSM\Implementation\CanSM.c	  1443  
; ..\component\CanSM\Implementation\CanSM.c	  1444  #if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1445  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1446   *  CanSM_TrcvNormalIndicated
; ..\component\CanSM\Implementation\CanSM.c	  1447   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1448  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1449   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1450   *
; ..\component\CanSM\Implementation\CanSM.c	  1451   *
; ..\component\CanSM\Implementation\CanSM.c	  1452   *
; ..\component\CanSM\Implementation\CanSM.c	  1453   *
; ..\component\CanSM\Implementation\CanSM.c	  1454   *
; ..\component\CanSM\Implementation\CanSM.c	  1455   *
; ..\component\CanSM\Implementation\CanSM.c	  1456   */
; ..\component\CanSM\Implementation\CanSM.c	  1457  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_TrcvNormalIndicated( P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1458  { /* Context: CanSM_TransceiverModeIndication, CANTRCV_TRCVMODE_NORMAL received */
; ..\component\CanSM\Implementation\CanSM.c	  1459  
; ..\component\CanSM\Implementation\CanSM.c	  1460    if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SU_TRCV_NORMAL )
; ..\component\CanSM\Implementation\CanSM.c	  1461    {
; ..\component\CanSM\Implementation\CanSM.c	  1462      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SU_CC_STOPPED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1463      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1464      /* \trace..SPEC-11284 */
; ..\component\CanSM\Implementation\CanSM.c	  1465      /* \trace..SPEC-11296 */
; ..\component\CanSM\Implementation\CanSM.c	  1466    }
; ..\component\CanSM\Implementation\CanSM.c	  1467    else if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_TRCV_NORMAL )
; ..\component\CanSM\Implementation\CanSM.c	  1468    {
; ..\component\CanSM\Implementation\CanSM.c	  1469      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_TRCV_STANDBY; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1470      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1471      /* \trace..SPEC-11291 */
; ..\component\CanSM\Implementation\CanSM.c	  1472      /* \trace..SPEC-11379 */
; ..\component\CanSM\Implementation\CanSM.c	  1473      /* \trace..SPEC-11394 */
; ..\component\CanSM\Implementation\CanSM.c	  1474    }
; ..\component\CanSM\Implementation\CanSM.c	  1475    else
; ..\component\CanSM\Implementation\CanSM.c	  1476    {
; ..\component\CanSM\Implementation\CanSM.c	  1477      /* MISRA */ /* unexpected indication e.g. during transceiver initialization */
; ..\component\CanSM\Implementation\CanSM.c	  1478    }
; ..\component\CanSM\Implementation\CanSM.c	  1479  
; ..\component\CanSM\Implementation\CanSM.c	  1480  } /* CanSM_TrcvNormalIndicated */
; ..\component\CanSM\Implementation\CanSM.c	  1481  #endif /* ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1482  
; ..\component\CanSM\Implementation\CanSM.c	  1483  
; ..\component\CanSM\Implementation\CanSM.c	  1484  
; ..\component\CanSM\Implementation\CanSM.c	  1485  #if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1486  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1487   *  CanSM_TrcvStandbyIndicatedAsExpected
; ..\component\CanSM\Implementation\CanSM.c	  1488   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1489  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1490   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1491   *
; ..\component\CanSM\Implementation\CanSM.c	  1492   *
; ..\component\CanSM\Implementation\CanSM.c	  1493   *
; ..\component\CanSM\Implementation\CanSM.c	  1494   *
; ..\component\CanSM\Implementation\CanSM.c	  1495   *
; ..\component\CanSM\Implementation\CanSM.c	  1496   *
; ..\component\CanSM\Implementation\CanSM.c	  1497   */
; ..\component\CanSM\Implementation\CanSM.c	  1498  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_TrcvStandbyIndicatedAsExpected( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1499  { /* Context: CanSM_TransceiverModeIndication, CANTRCV_TRCVMODE_STANDBY received in state CANSM_SD_TRCV_STANDBY */
; ..\component\CanSM\Implementation\CanSM.c	  1500  
; ..\component\CanSM\Implementation\CanSM.c	  1501    /* Indicated As Expected
; ..\component\CanSM\Implementation\CanSM.c	  1502     * CanSM_CurrentState == CANSM_SD_TRCV_STANDBY
; ..\component\CanSM\Implementation\CanSM.c	  1503     * * if the transceiver mode stand by indication is caused by a CanSM request is already ensured * */
; ..\component\CanSM\Implementation\CanSM.c	  1504  # if defined CANSM_TRCVSTANDBY_INDICATED_AT_PN_CHANNELS_AND_NON_PN_CHANNELS_MIXED
; ..\component\CanSM\Implementation\CanSM.c	  1505    if ( CanSM_IsPartial_Network_Trcv_SupportOfChannelConfig( CanSM_CanNetworkIdx ) ) /* PRQA S 4304, 4404, 1881, 1882, 4558 */ /* MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean */
; ..\component\CanSM\Implementation\CanSM.c	  1506  # endif /* CANSM_TRCVSTANDBY_INDICATED_AT_PN_CHANNELS_AND_NON_PN_CHANNELS_MIXED */
; ..\component\CanSM\Implementation\CanSM.c	  1507    {
; ..\component\CanSM\Implementation\CanSM.c	  1508  
; ..\component\CanSM\Implementation\CanSM.c	  1509  # if !defined CANSM_TRCVSTANDBY_NEVER_INDICATED_AT_PN_CHANNELS
; ..\component\CanSM\Implementation\CanSM.c	  1510      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_CC_SLEEP_PN; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1511      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1512  # endif  /* CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	  1513      /* \trace..SPEC-11354 */
; ..\component\CanSM\Implementation\CanSM.c	  1514      /* \trace..SPEC-11395 */
; ..\component\CanSM\Implementation\CanSM.c	  1515  
; ..\component\CanSM\Implementation\CanSM.c	  1516    }
; ..\component\CanSM\Implementation\CanSM.c	  1517  # if defined CANSM_TRCVSTANDBY_INDICATED_AT_PN_CHANNELS_AND_NON_PN_CHANNELS_MIXED
; ..\component\CanSM\Implementation\CanSM.c	  1518    else
; ..\component\CanSM\Implementation\CanSM.c	  1519  # endif /* CANSM_TRCVSTANDBY_INDICATED_AT_PN_CHANNELS_AND_NON_PN_CHANNELS_MIXED */
; ..\component\CanSM\Implementation\CanSM.c	  1520    {
; ..\component\CanSM\Implementation\CanSM.c	  1521  # if !defined CANSM_TRCVSTANDBY_ONLY_INDICATED_AT_PN_CHANNELS
; ..\component\CanSM\Implementation\CanSM.c	  1522      CanSM_NoComReached( CanSM_CurrentChannelVarPtr );  /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1523  # endif /* ( not CANSM_TRCVSTANDBY_ONLY_INDICATED_AT_PN_CHANNELS  ) */
; ..\component\CanSM\Implementation\CanSM.c	  1524    }
; ..\component\CanSM\Implementation\CanSM.c	  1525    /* \trace..SPEC-11281 */
; ..\component\CanSM\Implementation\CanSM.c	  1526  
; ..\component\CanSM\Implementation\CanSM.c	  1527    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx ); /* might be unreferenced due to ComStackLib optimization */ /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  1528  
; ..\component\CanSM\Implementation\CanSM.c	  1529  } /* CanSM_TrcvStandbyIndicatedAsExpected  */
; ..\component\CanSM\Implementation\CanSM.c	  1530  #endif /* ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1531  
; ..\component\CanSM\Implementation\CanSM.c	  1532  
; ..\component\CanSM\Implementation\CanSM.c	  1533  
; ..\component\CanSM\Implementation\CanSM.c	  1534  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1535   *  FUNC CanSM_EvaluateComModeRequest
; ..\component\CanSM\Implementation\CanSM.c	  1536   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1537  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1538   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1539   *
; ..\component\CanSM\Implementation\CanSM.c	  1540   *
; ..\component\CanSM\Implementation\CanSM.c	  1541   *
; ..\component\CanSM\Implementation\CanSM.c	  1542   *
; ..\component\CanSM\Implementation\CanSM.c	  1543   *
; ..\component\CanSM\Implementation\CanSM.c	  1544   *
; ..\component\CanSM\Implementation\CanSM.c	  1545   *
; ..\component\CanSM\Implementation\CanSM.c	  1546   */
; ..\component\CanSM\Implementation\CanSM.c	  1547  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_EvaluateComModeRequest( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1548  { /* Context: each CanSM_MainFunction */
; ..\component\CanSM\Implementation\CanSM.c	  1549  
; ..\component\CanSM\Implementation\CanSM.c	  1550    if (  ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_FULL_COMMUNICATION ) && ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState > CANSM_S_SILENTCOM )   )
; ..\component\CanSM\Implementation\CanSM.c	  1551    {
; ..\component\CanSM\Implementation\CanSM.c	  1552      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1553  #if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1554      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SU_TRCV_NORMAL; /* will be changed to CANSM_SU_CC_STOPPED in NWSM if Trcv is inactive on channel */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1555  #else /* CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	  1556      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SU_CC_STOPPED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1557  #endif /*  CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	  1558  
; ..\component\CanSM\Implementation\CanSM.c	  1559    } /* COMM_FULL_COMMUNICATION */
; ..\component\CanSM\Implementation\CanSM.c	  1560    else if (  ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_NO_COMMUNICATION ) && ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState <= CANSM_S_SILENTCOM )  ) /* check if ShutDown is already running; NoComReq and not on the way */
; ..\component\CanSM\Implementation\CanSM.c	  1561    { /* E_PRE_NO_COM  E_PRE_NOCOM */
; ..\component\CanSM\Implementation\CanSM.c	  1562      /* prepares shut down, executes the first step of the shut down sequence */
; ..\component\CanSM\Implementation\CanSM.c	  1563      CanSM_InitiateShutDownSequence( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1564  
; ..\component\CanSM\Implementation\CanSM.c	  1565    } /* COMM_NO_COMMUNICATION */
; ..\component\CanSM\Implementation\CanSM.c	  1566    else
; ..\component\CanSM\Implementation\CanSM.c	  1567    {
; ..\component\CanSM\Implementation\CanSM.c	  1568      /* MISRA */
; ..\component\CanSM\Implementation\CanSM.c	  1569    }
; ..\component\CanSM\Implementation\CanSM.c	  1570  
; ..\component\CanSM\Implementation\CanSM.c	  1571  } /* CanSM_EvaluateComModeRequest */
; ..\component\CanSM\Implementation\CanSM.c	  1572  
; ..\component\CanSM\Implementation\CanSM.c	  1573  
; ..\component\CanSM\Implementation\CanSM.c	  1574  
; ..\component\CanSM\Implementation\CanSM.c	  1575  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1576   *  FUNC CanSM_HandleBusOffInSilent
; ..\component\CanSM\Implementation\CanSM.c	  1577   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1578  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1579   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1580   *
; ..\component\CanSM\Implementation\CanSM.c	  1581   *
; ..\component\CanSM\Implementation\CanSM.c	  1582   *
; ..\component\CanSM\Implementation\CanSM.c	  1583   */
; ..\component\CanSM\Implementation\CanSM.c	  1584  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_HandleBusOffInSilent( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1585  { /* Context: each CanSM_MainFunction */
; ..\component\CanSM\Implementation\CanSM.c	  1586  
; ..\component\CanSM\Implementation\CanSM.c	  1587    if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffFlag == TRUE ) && ( ( (*CanSM_CurrentChannelVarPtr ).CanSM_CurrentState ) == CANSM_S_SILENTCOM ) )
; ..\component\CanSM\Implementation\CanSM.c	  1588    { /* BO in Silent */
; ..\component\CanSM\Implementation\CanSM.c	  1589  
; ..\component\CanSM\Implementation\CanSM.c	  1590      (void)CanIf_SetControllerMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_CS_STARTED );
; ..\component\CanSM\Implementation\CanSM.c	  1591      (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter = CANSM_BOR_NONE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1592      (*CanSM_CurrentChannelVarPtr).CanSM_BusOffFlag = FALSE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1593  # if ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1594      (*CanSM_CurrentChannelVarPtr).CanSM_TxOnlineDelayTime = CANSM_DELAY_TIMER_INACTIVE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1595  # endif /* ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1596  #if ( CANSM_BUSOFF_END_INDICATION == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1597      (*CanSM_BusOffEndIndicationFctPtr)( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ) ); /* J1939Nm_BusOffEnd */ /* SBSW_CANSM_BUS_OFF_END_INDICATION */
; ..\component\CanSM\Implementation\CanSM.c	  1598  #endif /* ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1599  
; ..\component\CanSM\Implementation\CanSM.c	  1600    }
; ..\component\CanSM\Implementation\CanSM.c	  1601  
; ..\component\CanSM\Implementation\CanSM.c	  1602    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx ); /* might be unreferenced due to ComStackLib optimization */ /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  1603  
; ..\component\CanSM\Implementation\CanSM.c	  1604  } /* CanSM_HandleBusOffInSilent */
; ..\component\CanSM\Implementation\CanSM.c	  1605  
; ..\component\CanSM\Implementation\CanSM.c	  1606  
; ..\component\CanSM\Implementation\CanSM.c	  1607  
; ..\component\CanSM\Implementation\CanSM.c	  1608  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1609   *  FUNC CanSM_EvaluateMaxModeRequests
; ..\component\CanSM\Implementation\CanSM.c	  1610   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1611  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1612   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1613   *
; ..\component\CanSM\Implementation\CanSM.c	  1614   *
; ..\component\CanSM\Implementation\CanSM.c	  1615   *
; ..\component\CanSM\Implementation\CanSM.c	  1616   *
; ..\component\CanSM\Implementation\CanSM.c	  1617   */
; ..\component\CanSM\Implementation\CanSM.c	  1618  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_EvaluateMaxModeRequests( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1619  { /* Context: each CanSM_MainFunction, protected by AREA_1 */
; ..\component\CanSM\Implementation\CanSM.c	  1620  
; ..\component\CanSM\Implementation\CanSM.c	  1621    if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeRequestRepetitionCounter > CanSM_GetModeRequestRepetitionMaxOfPCConfig() )
; ..\component\CanSM\Implementation\CanSM.c	  1622    {
; ..\component\CanSM\Implementation\CanSM.c	  1623  
; ..\component\CanSM\Implementation\CanSM.c	  1624  #if ( CANSM_PRODERRORDETECT_MODEREQUEST_OFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1625  # if ( CANSM_ISDEF_PRODERRORDETECT_MODEREQUEST_OFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1626      CanSM_Dem_ReportErrorEvent( CanSM_GetDemEventId_ModeRequest_OfChannelConfig( CanSM_CanNetworkIdx ), DEM_EVENT_STATUS_FAILED );
; ..\component\CanSM\Implementation\CanSM.c	  1627  # else /* CANSM_ISDEF_PRODERRORDETECT_MODEREQUEST_OFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	  1628      if ( CanSM_IsProdErrorDetect_ModeRequest_OfChannelConfig( CanSM_CanNetworkIdx ) ) /* PRQA S 4304, 4404, 1881, 1882, 4558 */ /* MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean */
; ..\component\CanSM\Implementation\CanSM.c	  1629      {
; ..\component\CanSM\Implementation\CanSM.c	  1630        CanSM_Dem_ReportErrorEvent( CanSM_GetDemEventId_ModeRequest_OfChannelConfig( CanSM_CanNetworkIdx ), DEM_EVENT_STATUS_FAILED );
; ..\component\CanSM\Implementation\CanSM.c	  1631      }
; ..\component\CanSM\Implementation\CanSM.c	  1632  #  if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1633      else
; ..\component\CanSM\Implementation\CanSM.c	  1634      {
; ..\component\CanSM\Implementation\CanSM.c	  1635        (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_MAINFUNCTION, CANSM_E_MODE_REQUEST_TIMEOUT );
; ..\component\CanSM\Implementation\CanSM.c	  1636        /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  1637      }
; ..\component\CanSM\Implementation\CanSM.c	  1638  #  endif /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  1639  # endif /* CANSM_ISDEF_PRODERRORDETECT_MODEREQUEST_OFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	  1640  #else /* ( CANSM_PRODERRORDETECT_MODEREQUEST_OFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1641  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1642      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_MAINFUNCTION, CANSM_E_MODE_REQUEST_TIMEOUT );
; ..\component\CanSM\Implementation\CanSM.c	  1643      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  1644  # endif /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  1645  #endif /* ( CANSM_PRODERRORDETECT_MODEREQUEST_OFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1646  
; ..\component\CanSM\Implementation\CanSM.c	  1647  
; ..\component\CanSM\Implementation\CanSM.c	  1648      (*CanSM_CurrentChannelVarPtr).CanSM_ModeRequestRepetitionCounter = 0; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1649  
; ..\component\CanSM\Implementation\CanSM.c	  1650      CanSM_InitiateShutDownSequence( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1651      (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode = COMM_NO_COMMUNICATION; /* block vs. CanSM_RequestComMode */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1652      /* \trace SPEC-11308, SPEC-11338, SPEC-11371, SPEC-11376, SPEC-11407, SPEC-11409, SPEC-47121  */
; ..\component\CanSM\Implementation\CanSM.c	  1653    } /* RepetitionMax */
; ..\component\CanSM\Implementation\CanSM.c	  1654  
; ..\component\CanSM\Implementation\CanSM.c	  1655    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  1656  
; ..\component\CanSM\Implementation\CanSM.c	  1657  } /* CanSM_EvaluateMaxModeRequests */
; ..\component\CanSM\Implementation\CanSM.c	  1658  
; ..\component\CanSM\Implementation\CanSM.c	  1659  
; ..\component\CanSM\Implementation\CanSM.c	  1660  
; ..\component\CanSM\Implementation\CanSM.c	  1661  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1662   *  FUNC CanSM_TimerHandling
; ..\component\CanSM\Implementation\CanSM.c	  1663   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1664  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1665   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1666   *
; ..\component\CanSM\Implementation\CanSM.c	  1667   *
; ..\component\CanSM\Implementation\CanSM.c	  1668   *
; ..\component\CanSM\Implementation\CanSM.c	  1669   *
; ..\component\CanSM\Implementation\CanSM.c	  1670   */
; ..\component\CanSM\Implementation\CanSM.c	  1671  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_TimerHandling( P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1672  { /* Context: each CanSM_MainFunction, protected by AREA_1 */
; ..\component\CanSM\Implementation\CanSM.c	  1673  
; ..\component\CanSM\Implementation\CanSM.c	  1674    if ( (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer > CANSM_TIMER_EXPIRED )
; ..\component\CanSM\Implementation\CanSM.c	  1675    {
; ..\component\CanSM\Implementation\CanSM.c	  1676      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer--; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1677  
; ..\component\CanSM\Implementation\CanSM.c	  1678      if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer == CANSM_TIMER_EXPIRED ) &&
; ..\component\CanSM\Implementation\CanSM.c	  1679  #if ( CANSM_ISDEF_BOR_TX_CONFIRMATION_POLLINGOFCHANNELCONFIG == STD_OFF )
; ..\component\CanSM\Implementation\CanSM.c	  1680          ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState != CANSM_BO_BUS_OFF_CHECK ) &&
; ..\component\CanSM\Implementation\CanSM.c	  1681  #endif /* ( CANSM_ISDEF_BOR_TX_CONFIRMATION_POLLINGOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1682          ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState != CANSM_BO_TX_OFFLINE )  )
; ..\component\CanSM\Implementation\CanSM.c	  1683      {
; ..\component\CanSM\Implementation\CanSM.c	  1684        (*CanSM_CurrentChannelVarPtr).CanSM_ModeRequestRepetitionCounter++; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1685  #if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1686        if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_CC_SLEEP_PN )
; ..\component\CanSM\Implementation\CanSM.c	  1687        {
; ..\component\CanSM\Implementation\CanSM.c	  1688          (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_CHK_WUF_NOT_CC_SLEEP; /* CANSM_SD_CHK_WUF */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1689        }
; ..\component\CanSM\Implementation\CanSM.c	  1690  #endif /* if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1691      }
; ..\component\CanSM\Implementation\CanSM.c	  1692    } /* not  CANSM_TIMER_EXPIRED */
; ..\component\CanSM\Implementation\CanSM.c	  1693  
; ..\component\CanSM\Implementation\CanSM.c	  1694  } /* CanSM_TimerHandling */
; ..\component\CanSM\Implementation\CanSM.c	  1695  
; ..\component\CanSM\Implementation\CanSM.c	  1696  
; ..\component\CanSM\Implementation\CanSM.c	  1697  
; ..\component\CanSM\Implementation\CanSM.c	  1698  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1699   *  CanSM_HandleComModeRequest
; ..\component\CanSM\Implementation\CanSM.c	  1700   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1701  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1702   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1703   *
; ..\component\CanSM\Implementation\CanSM.c	  1704   *
; ..\component\CanSM\Implementation\CanSM.c	  1705   *
; ..\component\CanSM\Implementation\CanSM.c	  1706   *
; ..\component\CanSM\Implementation\CanSM.c	  1707   *
; ..\component\CanSM\Implementation\CanSM.c	  1708   */
; ..\component\CanSM\Implementation\CanSM.c	  1709  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_HandleComModeRequest( ComM_ModeType CanSM_RequestedComMMode, CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; ..\component\CanSM\Implementation\CanSM.c	  1710  { /* Context: CanSM_RequestComMode, valid */
; ..\component\CanSM\Implementation\CanSM.c	  1711  
; ..\component\CanSM\Implementation\CanSM.c	  1712  #if (   (  ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) || ( CANSM_PARTIAL_NETWORK_WAKEUP_FILTEROFCHANNELCONFIG == STD_ON )  ) && ( CANSM_SWIFT_TX_TIMEOUT_RECOVERY == STD_OFF )   )
; ..\component\CanSM\Implementation\CanSM.c	  1713    if ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode >= CANSM_TX_TIMEOUT_EXCEPTION_RECEIVED )
; ..\component\CanSM\Implementation\CanSM.c	  1714    { /* TxTimeout handling force Transition to NoCom, postpone Request */
; ..\component\CanSM\Implementation\CanSM.c	  1715      (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode = (uint8)( CanSM_RequestedComMMode + CANSM_TX_TIMEOUT_EXCEPTION_RECEIVED ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1716      /* \trace SPEC-656 */
; ..\component\CanSM\Implementation\CanSM.c	  1717    }
; ..\component\CanSM\Implementation\CanSM.c	  1718    else if ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode != CanSM_RequestedComMMode )
; ..\component\CanSM\Implementation\CanSM.c	  1719  #else
; ..\component\CanSM\Implementation\CanSM.c	  1720    if ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode != CanSM_RequestedComMMode )
; ..\component\CanSM\Implementation\CanSM.c	  1721  #endif /* ( ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) || ( CANSM_PARTIAL_NETWORK_WAKEUP_FILTEROFCHANNELCONFIG == STD_ON ) ) */
; ..\component\CanSM\Implementation\CanSM.c	  1722    {
; ..\component\CanSM\Implementation\CanSM.c	  1723      (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode = CanSM_RequestedComMMode; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1724      /* \trace SPEC-654, SPEC-2181132 */
; ..\component\CanSM\Implementation\CanSM.c	  1725  
; ..\component\CanSM\Implementation\CanSM.c	  1726      SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_2(); /* MainFunction( ) ControllerModeIndication( ) TransceiverModeIndication( ) ClearTrcvWufFlagIndication( ) CheckTransceiverWakeFlagIndication( ) TxTimeoutException( ) SetEcuPassive( ) StartWakeupSources( ) StopWakeupSources( )  */
; ..\component\CanSM\Implementation\CanSM.c	  1727  
; ..\component\CanSM\Implementation\CanSM.c	  1728      if (   ( CanSM_RequestedComMMode == COMM_FULL_COMMUNICATION ) && (  ( (*CanSM_CurrentChannelVarPtr ).CanSM_CurrentState == CANSM_S_SILENTCOM )
; ..\component\CanSM\Implementation\CanSM.c	  1729  #if !defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON
; ..\component\CanSM\Implementation\CanSM.c	  1730            || ( (*CanSM_CurrentChannelVarPtr ).CanSM_CurrentState == CANSM_S_STARTWAKEUPSOURCES_SUCCESSFUL )
; ..\component\CanSM\Implementation\CanSM.c	  1731  #endif /* !defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON */
; ..\component\CanSM\Implementation\CanSM.c	  1732            )   )
; ..\component\CanSM\Implementation\CanSM.c	  1733      { /* Execute transition from SILENT to FULL within RequestComMode */
; ..\component\CanSM\Implementation\CanSM.c	  1734        CanSM_FullComReached( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1735      }
; ..\component\CanSM\Implementation\CanSM.c	  1736      else if ( ( CanSM_RequestedComMMode != COMM_FULL_COMMUNICATION ) && ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState & CANSM_S_NO_BUS_OFF ) == CANSM_S_NO_BUS_OFF ) ) /* Meta FullCom */ /* CANSM_S_FULLCOM CANSM_BO_BUS_OFF_CHECK CANSM_S_NO_BUS_OFF    CANSM_S_FULLCOM_ENSURED CANSM_BO_TX_OFFLINE  */ /* PRQA S 0715 2 */ /* MD_MSR_Dir1.1 */
; ..\component\CanSM\Implementation\CanSM.c	  1737      {
; ..\component\CanSM\Implementation\CanSM.c	  1738        CanSM_FullComToSilent( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1739        /* \trace..SPEC-11307 */
; ..\component\CanSM\Implementation\CanSM.c	  1740        /* \trace SPEC-11347 */
; ..\component\CanSM\Implementation\CanSM.c	  1741      } /* end if Transition Full To Silent */ /* else the Transition is PostPoned ( StartUp ) OR illegal ( NoCom, ShutDown ) */
; ..\component\CanSM\Implementation\CanSM.c	  1742      else
; ..\component\CanSM\Implementation\CanSM.c	  1743      {
; ..\component\CanSM\Implementation\CanSM.c	  1744        /* MISRA, transition postponed to MainFunc */
; ..\component\CanSM\Implementation\CanSM.c	  1745      }
; ..\component\CanSM\Implementation\CanSM.c	  1746  
; ..\component\CanSM\Implementation\CanSM.c	  1747      if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible == CANSM_NOBODY )
; ..\component\CanSM\Implementation\CanSM.c	  1748      { /* BswM state has been changed and has to be handled by MainFunction */
; ..\component\CanSM\Implementation\CanSM.c	  1749        (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible = CANSM_SID_REQUESTCOMMODE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1750      }
; ..\component\CanSM\Implementation\CanSM.c	  1751  
; ..\component\CanSM\Implementation\CanSM.c	  1752      SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_2();
; ..\component\CanSM\Implementation\CanSM.c	  1753  
; ..\component\CanSM\Implementation\CanSM.c	  1754  
; ..\component\CanSM\Implementation\CanSM.c	  1755      CanSM_CheckModeIndication( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr, CANSM_SID_REQUESTCOMMODE ); /* Function checks if mode has changed */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1756  
; ..\component\CanSM\Implementation\CanSM.c	  1757  
; ..\component\CanSM\Implementation\CanSM.c	  1758    } /* end if No TxTimeout */
; ..\component\CanSM\Implementation\CanSM.c	  1759    else
; ..\component\CanSM\Implementation\CanSM.c	  1760    { /* TxTimeOutException active postpone ComModeRequests */
; ..\component\CanSM\Implementation\CanSM.c	  1761      /* MISRA QAC */
; ..\component\CanSM\Implementation\CanSM.c	  1762    }
; ..\component\CanSM\Implementation\CanSM.c	  1763  
; ..\component\CanSM\Implementation\CanSM.c	  1764  } /* CanSM_HandleComModeRequest  */
; ..\component\CanSM\Implementation\CanSM.c	  1765  
; ..\component\CanSM\Implementation\CanSM.c	  1766  
; ..\component\CanSM\Implementation\CanSM.c	  1767  
; ..\component\CanSM\Implementation\CanSM.c	  1768  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1769   *  CanSM_MapNetworkHandleToLocalIndex
; ..\component\CanSM\Implementation\CanSM.c	  1770   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1771  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1772   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1773   *
; ..\component\CanSM\Implementation\CanSM.c	  1774   *
; ..\component\CanSM\Implementation\CanSM.c	  1775   */
; ..\component\CanSM\Implementation\CanSM.c	  1776  CANSM_LOCAL_INLINE FUNC(CanSM_SizeOfChannelVarRecordType, CANSM_CODE) CanSM_MapNetworkHandleToLocalIndex( NetworkHandleType CanSM_NetworkHandle )
; ..\component\CanSM\Implementation\CanSM.c	  1777  { /* Context: CanSM_RequestComMode CanSM_GetCurrentComMode CanSM_PreventBusSleepAtStartUp CanSM_SetBaudrate CanSM_CheckBaudrate CanSM_ChangeBaudrate CanSM_TxTimeoutException CanSM_CheckBorLevel CanSM_StartWakeupSources CanSM_StopWakeupSources */
; ..\component\CanSM\Implementation\CanSM.c	  1778  
; ..\component\CanSM\Implementation\CanSM.c	  1779    CanSM_ChannelVarRecordIterType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  1780  
; ..\component\CanSM\Implementation\CanSM.c	  1781    /* lint -e442  -e440 */
; ..\component\CanSM\Implementation\CanSM.c	  1782    for ( CanSM_CanNetworkIdx = 0; CanSM_CanNetworkIdx < CanSM_GetSizeOfChannelConfigOfPCConfig(); CanSM_CanNetworkIdx++ ) /* lint +e442 +e440 */
; ..\component\CanSM\Implementation\CanSM.c	  1783    {
; ..\component\CanSM\Implementation\CanSM.c	  1784      if ( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ) == CanSM_NetworkHandle )
; ..\component\CanSM\Implementation\CanSM.c	  1785      {
; ..\component\CanSM\Implementation\CanSM.c	  1786        break; /* CanSM_NetworkHandle valid; found in configuration; stop searching, stop for-loop */
; ..\component\CanSM\Implementation\CanSM.c	  1787      } /* NetworkHandle index in list ==> NetworkHandle valid */
; ..\component\CanSM\Implementation\CanSM.c	  1788    }
; ..\component\CanSM\Implementation\CanSM.c	  1789  
; ..\component\CanSM\Implementation\CanSM.c	  1790    return (CanSM_SizeOfChannelVarRecordType)CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  1791  
; ..\component\CanSM\Implementation\CanSM.c	  1792  } /* CanSM_MapNetworkHandleToLocalIndex */
; ..\component\CanSM\Implementation\CanSM.c	  1793  
; ..\component\CanSM\Implementation\CanSM.c	  1794  
; ..\component\CanSM\Implementation\CanSM.c	  1795  
; ..\component\CanSM\Implementation\CanSM.c	  1796  #if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1797  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1798   *  CanSM_MapTransceiverIdToLocalIndex
; ..\component\CanSM\Implementation\CanSM.c	  1799   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1800  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1801   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1802   *
; ..\component\CanSM\Implementation\CanSM.c	  1803   *
; ..\component\CanSM\Implementation\CanSM.c	  1804   */
; ..\component\CanSM\Implementation\CanSM.c	  1805  CANSM_LOCAL_INLINE FUNC(CanSM_SizeOfChannelVarRecordType, CANSM_CODE) CanSM_MapTransceiverIdToLocalIndex( uint8 CanSM_TransceiverId )
; ..\component\CanSM\Implementation\CanSM.c	  1806  {  /* Context: CanSM_TransceiverModeIndication CanSM_ClearTrcvWufFlagIndication CanSM_CheckTransceiverWakeFlagIndication CanSM_ConfirmPnAvailability */
; ..\component\CanSM\Implementation\CanSM.c	  1807    CanSM_ChannelVarRecordIterType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  1808  
; ..\component\CanSM\Implementation\CanSM.c	  1809    /* lint -e442  -e440 */
; ..\component\CanSM\Implementation\CanSM.c	  1810    for ( CanSM_CanNetworkIdx = 0; CanSM_CanNetworkIdx < CanSM_GetSizeOfChannelConfigOfPCConfig(); CanSM_CanNetworkIdx++ ) /* lint +e442 +e440 */
; ..\component\CanSM\Implementation\CanSM.c	  1811    {
; ..\component\CanSM\Implementation\CanSM.c	  1812      if ( CanSM_GetTransceiverIdOfChannelConfig( CanSM_CanNetworkIdx ) == CanSM_TransceiverId )
; ..\component\CanSM\Implementation\CanSM.c	  1813      {
; ..\component\CanSM\Implementation\CanSM.c	  1814        break; /* TransceiverId valid; found in configuration; stop searching, stop for-loop */
; ..\component\CanSM\Implementation\CanSM.c	  1815      } /* TransceiverId index in list ==> TransceiverId valid */
; ..\component\CanSM\Implementation\CanSM.c	  1816    }
; ..\component\CanSM\Implementation\CanSM.c	  1817  
; ..\component\CanSM\Implementation\CanSM.c	  1818    CANSM_DUMMY_STATEMENT( CanSM_TransceiverId ); /* might be unreferenced due to ComStackLib optimization */ /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  1819  
; ..\component\CanSM\Implementation\CanSM.c	  1820    return (CanSM_SizeOfChannelVarRecordType)CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  1821  
; ..\component\CanSM\Implementation\CanSM.c	  1822  } /* CanSM_MapTransceiverIdToLocalIndex */
; ..\component\CanSM\Implementation\CanSM.c	  1823  #endif /* ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1824  
; ..\component\CanSM\Implementation\CanSM.c	  1825  
; ..\component\CanSM\Implementation\CanSM.c	  1826  
; ..\component\CanSM\Implementation\CanSM.c	  1827  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1828   *  CanSM_MapControllerIdToLocalIndex
; ..\component\CanSM\Implementation\CanSM.c	  1829   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1830  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1831   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1832   *
; ..\component\CanSM\Implementation\CanSM.c	  1833   *
; ..\component\CanSM\Implementation\CanSM.c	  1834   */
; ..\component\CanSM\Implementation\CanSM.c	  1835  CANSM_LOCAL_INLINE FUNC(CanSM_SizeOfChannelVarRecordType, CANSM_CODE) CanSM_MapControllerIdToLocalIndex( uint8 CanSM_ControllerId )
; ..\component\CanSM\Implementation\CanSM.c	  1836  { /* Context: CanSM_ControllerBusOff CanSM_ControllerModeIndication */
; ..\component\CanSM\Implementation\CanSM.c	  1837    CanSM_ChannelVarRecordIterType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  1838  
; ..\component\CanSM\Implementation\CanSM.c	  1839    /* lint -e442  -e440 */
; ..\component\CanSM\Implementation\CanSM.c	  1840    for ( CanSM_CanNetworkIdx = 0; CanSM_CanNetworkIdx < CanSM_GetSizeOfChannelConfigOfPCConfig(); CanSM_CanNetworkIdx++ ) /* lint +e442 +e440 */
; ..\component\CanSM\Implementation\CanSM.c	  1841    {
; ..\component\CanSM\Implementation\CanSM.c	  1842      if ( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ) == CanSM_ControllerId )
; ..\component\CanSM\Implementation\CanSM.c	  1843      {
; ..\component\CanSM\Implementation\CanSM.c	  1844        break; /* ControllerId valid; found in configuration; stop searching, stop for-loop */
; ..\component\CanSM\Implementation\CanSM.c	  1845      } /* ControllerId index in list ==> TransceiverId valid */
; ..\component\CanSM\Implementation\CanSM.c	  1846    }
; ..\component\CanSM\Implementation\CanSM.c	  1847  
; ..\component\CanSM\Implementation\CanSM.c	  1848    return (CanSM_SizeOfChannelVarRecordType)CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  1849  
; ..\component\CanSM\Implementation\CanSM.c	  1850  } /* CanSM_MapControllerIdToLocalIndex */
; ..\component\CanSM\Implementation\CanSM.c	  1851  
; ..\component\CanSM\Implementation\CanSM.c	  1852  
; ..\component\CanSM\Implementation\CanSM.c	  1853  
; ..\component\CanSM\Implementation\CanSM.c	  1854  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1855   * CanSM_BusOffIndicated
; ..\component\CanSM\Implementation\CanSM.c	  1856   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1857  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1858   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1859   *
; ..\component\CanSM\Implementation\CanSM.c	  1860   *
; ..\component\CanSM\Implementation\CanSM.c	  1861   *
; ..\component\CanSM\Implementation\CanSM.c	  1862   *
; ..\component\CanSM\Implementation\CanSM.c	  1863   *
; ..\component\CanSM\Implementation\CanSM.c	  1864   *
; ..\component\CanSM\Implementation\CanSM.c	  1865   *
; ..\component\CanSM\Implementation\CanSM.c	  1866   */
; ..\component\CanSM\Implementation\CanSM.c	  1867  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_BusOffIndicated( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx )
; ..\component\CanSM\Implementation\CanSM.c	  1868  { /* Context: CanSM_BusOffIndicated */
; ..\component\CanSM\Implementation\CanSM.c	  1869    P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  1870  
; ..\component\CanSM\Implementation\CanSM.c	  1871    if ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter < CANSM_COUNTER_MAX_VALUE )
; ..\component\CanSM\Implementation\CanSM.c	  1872    { /* value greater 0 triggers transition to CANSM_BO_TX_OFFLINE in case of Ctrl STARTED indication */
; ..\component\CanSM\Implementation\CanSM.c	  1873      (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter++; /* further BO indication impossible until Ctrl Started and Tx Online */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1874    }
; ..\component\CanSM\Implementation\CanSM.c	  1875  
; ..\component\CanSM\Implementation\CanSM.c	  1876    (*CanSM_CurrentChannelVarPtr).CanSM_BusOffFlag = TRUE; /* CREQ-367 */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1877  
; ..\component\CanSM\Implementation\CanSM.c	  1878    SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_3(); /* RequestComMode( ) ControllerBusOff( ) TxTimeoutException( ) */
; ..\component\CanSM\Implementation\CanSM.c	  1879    if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_BO_BUS_OFF_CHECK ) || ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_S_NO_BUS_OFF ) ) /* CANSM_S_FULLCOM_ENSURED  CANSM_S_NO_BUS_OFF */
; ..\component\CanSM\Implementation\CanSM.c	  1880    {
; ..\component\CanSM\Implementation\CanSM.c	  1881  
; ..\component\CanSM\Implementation\CanSM.c	  1882      CanSM_FullComToRestartController( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1883  
; ..\component\CanSM\Implementation\CanSM.c	  1884      if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible == CANSM_NOBODY )
; ..\component\CanSM\Implementation\CanSM.c	  1885      {
; ..\component\CanSM\Implementation\CanSM.c	  1886        (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible = CANSM_SID_CONTROLLERBUSOFF; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1887      }
; ..\component\CanSM\Implementation\CanSM.c	  1888  
; ..\component\CanSM\Implementation\CanSM.c	  1889    }
; ..\component\CanSM\Implementation\CanSM.c	  1890    SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_3();
; ..\component\CanSM\Implementation\CanSM.c	  1891  
; ..\component\CanSM\Implementation\CanSM.c	  1892  
; ..\component\CanSM\Implementation\CanSM.c	  1893    CanSM_CheckModeIndication( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr, CANSM_SID_CONTROLLERBUSOFF ); /* Function checks if mode has changed */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1894  
; ..\component\CanSM\Implementation\CanSM.c	  1895  
; ..\component\CanSM\Implementation\CanSM.c	  1896  #if ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1897    (*CanSM_CurrentChannelVarPtr).CanSM_TxOnlineDelayTime = 0; /* detect missing BusOffEndIndication in case of ComModeRequest */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1898    (*CanSM_BusOffBeginIndicationFctPtr)( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ), &( (*CanSM_CurrentChannelVarPtr ).CanSM_TxOnlineDelayTime ) ); /* J1939Nm_GetBusOffDelay() */ /* SBSW_CANSM_GETBUSOFFDELAY_POINTERWRITEACCESS */ /* SBSW_CANSM_GETBUSOFFDELAY_INDICATION */
; ..\component\CanSM\Implementation\CanSM.c	  1899  #endif /* ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  1900  
; ..\component\CanSM\Implementation\CanSM.c	  1901  } /* CanSM_BusOffIndicated */
; ..\component\CanSM\Implementation\CanSM.c	  1902  
; ..\component\CanSM\Implementation\CanSM.c	  1903  
; ..\component\CanSM\Implementation\CanSM.c	  1904  
; ..\component\CanSM\Implementation\CanSM.c	  1905  #if( CANSM_EXTENDED_RAM_CHECK == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  1906  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1907   *  CanSM_RamCheckEnd
; ..\component\CanSM\Implementation\CanSM.c	  1908   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1909  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1910   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1911   *
; ..\component\CanSM\Implementation\CanSM.c	  1912   *
; ..\component\CanSM\Implementation\CanSM.c	  1913   *
; ..\component\CanSM\Implementation\CanSM.c	  1914   */
; ..\component\CanSM\Implementation\CanSM.c	  1915  CANSM_LOCAL_INLINE FUNC(void, CANSM_CODE) CanSM_RamCheckEnd( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx )
; ..\component\CanSM\Implementation\CanSM.c	  1916  { /* Context: CanSM_Init or Mainfunc, NW SM, SD RAM check */
; ..\component\CanSM\Implementation\CanSM.c	  1917  
; ..\component\CanSM\Implementation\CanSM.c	  1918    P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  1919  
; ..\component\CanSM\Implementation\CanSM.c	  1920  
; ..\component\CanSM\Implementation\CanSM.c	  1921    (*CanSM_CurrentChannelVarPtr).CanSM_RamCheckState = Appl_CanSM_RamCheckFinished( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx )  ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1922  
; ..\component\CanSM\Implementation\CanSM.c	  1923    switch ( (*CanSM_CurrentChannelVarPtr).CanSM_RamCheckState )
; ..\component\CanSM\Implementation\CanSM.c	  1924    {
; ..\component\CanSM\Implementation\CanSM.c	  1925      case CANSM_ENABLE_COMMUNICATION:
; ..\component\CanSM\Implementation\CanSM.c	  1926      {
; ..\component\CanSM\Implementation\CanSM.c	  1927        CanIf_RamCheckEnableController( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ) );
; ..\component\CanSM\Implementation\CanSM.c	  1928        (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_CC_SLEEP; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1929  
; ..\component\CanSM\Implementation\CanSM.c	  1930        break;
; ..\component\CanSM\Implementation\CanSM.c	  1931      }
; ..\component\CanSM\Implementation\CanSM.c	  1932      case CANSM_DISABLE_COMMUNICATION:
; ..\component\CanSM\Implementation\CanSM.c	  1933      {
; ..\component\CanSM\Implementation\CanSM.c	  1934        CanSM_NoComReached( CanSM_CurrentChannelVarPtr );  /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1935        break;
; ..\component\CanSM\Implementation\CanSM.c	  1936      }
; ..\component\CanSM\Implementation\CanSM.c	  1937      case CANSM_ENABLE_COMMUNICATION_REPEAT:
; ..\component\CanSM\Implementation\CanSM.c	  1938      {
; ..\component\CanSM\Implementation\CanSM.c	  1939        CanIf_RamCheckEnableController( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ) );
; ..\component\CanSM\Implementation\CanSM.c	  1940        /* enable repetition of state  CANSM_SD_CHECK_RAM next Mainfunction see fall through  */
; ..\component\CanSM\Implementation\CanSM.c	  1941      } /* fall through */ /* no break */
; ..\component\CanSM\Implementation\CanSM.c	  1942      default: /* PRQA S 2003 */ /* MD_CANSM_Rule16.3 */
; ..\component\CanSM\Implementation\CanSM.c	  1943      { /* case CANSM_DISABLE_COMMUNICATION_REPEAT: or illegal value */
; ..\component\CanSM\Implementation\CanSM.c	  1944        /* enable repetition of state  CANSM_SD_CHECK_RAM next Mainfunction */
; ..\component\CanSM\Implementation\CanSM.c	  1945        (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_TIMER_EXPIRED; /* retry next cycle */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1946        break;
; ..\component\CanSM\Implementation\CanSM.c	  1947      }
; ..\component\CanSM\Implementation\CanSM.c	  1948    }
; ..\component\CanSM\Implementation\CanSM.c	  1949  
; ..\component\CanSM\Implementation\CanSM.c	  1950  } /* CanSM_RamCheckEnd */
; ..\component\CanSM\Implementation\CanSM.c	  1951  #endif /* CANSM_EXTENDED_RAM_CHECK  */
; ..\component\CanSM\Implementation\CanSM.c	  1952  
; ..\component\CanSM\Implementation\CanSM.c	  1953  
; ..\component\CanSM\Implementation\CanSM.c	  1954  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  1955   *  CanSM_FullComReached
; ..\component\CanSM\Implementation\CanSM.c	  1956   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  1957  /*!
; ..\component\CanSM\Implementation\CanSM.c	  1958   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  1959   *
; ..\component\CanSM\Implementation\CanSM.c	  1960   *
; ..\component\CanSM\Implementation\CanSM.c	  1961   *
; ..\component\CanSM\Implementation\CanSM.c	  1962   *
; ..\component\CanSM\Implementation\CanSM.c	  1963   *
; ..\component\CanSM\Implementation\CanSM.c	  1964   *
; ..\component\CanSM\Implementation\CanSM.c	  1965   *
; ..\component\CanSM\Implementation\CanSM.c	  1966   *
; ..\component\CanSM\Implementation\CanSM.c	  1967   *
; ..\component\CanSM\Implementation\CanSM.c	  1968   */
; ..\component\CanSM\Implementation\CanSM.c	  1969  CANSM_LOCAL FUNC(void, CANSM_CODE) CanSM_FullComReached( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; Function CanSM_FullComReached
.L132:
CanSM_FullComReached:	.type	func
	mov.aa	a15,a4
.L459:

; ..\component\CanSM\Implementation\CanSM.c	  1970  { /* Context: NWSM; CANSM_BO_TX_OFFLINE timer elapsed, CanSM_CtrlStartedIndicated after startup resp. no BOR CanSM_HandleComModeRequest; from SILENT to FULL  */
; ..\component\CanSM\Implementation\CanSM.c	  1971    /* E_FULLCOM */ /* E_FULL_COM E_FULLCOM E_BR_END_FULL_COM E_CHANGE_BR_END E_CHANGE_BR_END_FULL_COM E_TX_ON E_SILENT_TO_FULL_COM */
; ..\component\CanSM\Implementation\CanSM.c	  1972    /* \trace SPEC-11319, SPEC-11417 */
; ..\component\CanSM\Implementation\CanSM.c	  1973    /* \trace SPEC-11293, SPEC-11370 */
; ..\component\CanSM\Implementation\CanSM.c	  1974    /* \trace SPEC-11433, SPEC-11435, SPEC-2181148, SPEC-47112  */
; ..\component\CanSM\Implementation\CanSM.c	  1975    /* \trace SPEC-11275, SPEC-11297, SPEC-2181377 */
; ..\component\CanSM\Implementation\CanSM.c	  1976  
; ..\component\CanSM\Implementation\CanSM.c	  1977  
; ..\component\CanSM\Implementation\CanSM.c	  1978  
; ..\component\CanSM\Implementation\CanSM.c	  1979    if ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_FULL_COMMUNICATION )
	ld.bu	d15,[a15]4
.L753:
	jne	d15,#2,.L6
.L754:

; ..\component\CanSM\Implementation\CanSM.c	  1980    {
; ..\component\CanSM\Implementation\CanSM.c	  1981      (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode &= CANSM_CLEAR_TX_TIMEOUT_EXCEPTION_FLAG; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	st.b	[a15]4,d15
.L755:

; ..\component\CanSM\Implementation\CanSM.c	  1982  
; ..\component\CanSM\Implementation\CanSM.c	  1983  
; ..\component\CanSM\Implementation\CanSM.c	  1984      if ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffFlag == FALSE )
	ld.bu	d0,[a15]15
.L756:
	jne	d0,#0,.L7
.L414:
	mov	d4,#0
	st.b	[a15]13,d15
.L458:
	mov	d5,#5
	st.b	[a15]6,d15
.L757:
	call	CanIf_SetPduMode
.L422:
	mov	d15,#17
	st.b	[a15]9,d15
.L758:
	mov	d15,#500
	st.h	[a15],d15
.L415:

; ..\component\CanSM\Implementation\CanSM.c	  1985      {
; ..\component\CanSM\Implementation\CanSM.c	  1986        CanSM_StartControllerToBusOffCheck( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1987      }
; ..\component\CanSM\Implementation\CanSM.c	  1988      else
; ..\component\CanSM\Implementation\CanSM.c	  1989      { /*  (currently un-handled) BO occurred in silent mode, Start BO recovery handling */
; ..\component\CanSM\Implementation\CanSM.c	  1990        CanSM_FullComToRestartController( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1991      } /* end if BO In Silent, start recovery */
; ..\component\CanSM\Implementation\CanSM.c	  1992  
; ..\component\CanSM\Implementation\CanSM.c	  1993    }
; ..\component\CanSM\Implementation\CanSM.c	  1994    else
; ..\component\CanSM\Implementation\CanSM.c	  1995    { /* FullToSilent E_FULL_TO_SILENT_COM */ /* Silent has been requested during the transition from NoCom To FullCom */
; ..\component\CanSM\Implementation\CanSM.c	  1996      CanSM_FullComToSilent( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  1997    }
; ..\component\CanSM\Implementation\CanSM.c	  1998  
; ..\component\CanSM\Implementation\CanSM.c	  1999  } /* end Func CanSM_FullComReached */
	ret
.L7:
	mov	d15,#3
	st.b	[a15]13,d15
.L759:
	mov	d0,#1
	st.b	[a15]6,d0
.L760:
	mov	d0,#0
	st.h	[a15],d0
.L761:
	st.b	[a15]9,d15
.L428:
	ret
.L6:
	mov	d4,#0
.L460:
	j	CanSM_FullComToSilent
.L409:
	
__CanSM_FullComReached_function_end:
	.size	CanSM_FullComReached,__CanSM_FullComReached_function_end-CanSM_FullComReached
.L230:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_FullComToSilent',code,cluster('CanSM_FullComToSilent')
	.sect	'.text.CanSM.CanSM_FullComToSilent'
	.align	2
	

; ..\component\CanSM\Implementation\CanSM.c	  2000  
; ..\component\CanSM\Implementation\CanSM.c	  2001  
; ..\component\CanSM\Implementation\CanSM.c	  2002  
; ..\component\CanSM\Implementation\CanSM.c	  2003  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2004   *  CanSM_FullComToSilent
; ..\component\CanSM\Implementation\CanSM.c	  2005   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2006  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2007   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2008   *
; ..\component\CanSM\Implementation\CanSM.c	  2009   *
; ..\component\CanSM\Implementation\CanSM.c	  2010   *
; ..\component\CanSM\Implementation\CanSM.c	  2011   *
; ..\component\CanSM\Implementation\CanSM.c	  2012   *
; ..\component\CanSM\Implementation\CanSM.c	  2013   */
; ..\component\CanSM\Implementation\CanSM.c	  2014  CANSM_LOCAL FUNC(void, CANSM_CODE) CanSM_FullComToSilent( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; Function CanSM_FullComToSilent
.L134:
CanSM_FullComToSilent:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  2015  { /* Context: CanSM_RequestComMode, CanSM_HandleComModeRequest; Meta state FullCom CanSM_CtrlStartedIndicated, CanSM_FullComReached pending Silent request */
; ..\component\CanSM\Implementation\CanSM.c	  2016    /* FullToSilent E_FULL_TO_SILENT_COM */
; ..\component\CanSM\Implementation\CanSM.c	  2017    /* \trace..SPEC-11310 */
; ..\component\CanSM\Implementation\CanSM.c	  2018    /* \trace..SPEC-11383 */
; ..\component\CanSM\Implementation\CanSM.c	  2019    (*CanSM_CurrentChannelVarPtr).CanSM_BswMNewState = CANSM_BSWM_SILENT_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d15,#1
	mov.aa	a15,a4
.L463:

; ..\component\CanSM\Implementation\CanSM.c	  2020    (*CanSM_CurrentChannelVarPtr).CanSM_NewComMode = COMM_SILENT_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2021    /* \trace..SPEC-11401 */
; ..\component\CanSM\Implementation\CanSM.c	  2022  
; ..\component\CanSM\Implementation\CanSM.c	  2023  #if ( CANSM_EXPANDED_TX_TIMEOUT_RECOVERY == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2024    if ( (*CanSM_CurrentChannelVarPtr).CanSM_TxTimeoutEndIndicationFlag == TRUE )
; ..\component\CanSM\Implementation\CanSM.c	  2025    {
; ..\component\CanSM\Implementation\CanSM.c	  2026      (*CanSM_CurrentChannelVarPtr).CanSM_TxTimeoutEndIndicationFlag = FALSE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2027      (*CanSM_TxTimeoutExceptionEndIndicationFctPtr)( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ) ); /* SBSW_CANSM_TX_TIMEOUT_END_INDICATION */
; ..\component\CanSM\Implementation\CanSM.c	  2028    }
; ..\component\CanSM\Implementation\CanSM.c	  2029  #endif /* ( CANSM_EXPANDED_TX_TIMEOUT_RECOVERY == STD_OFF ) */
; ..\component\CanSM\Implementation\CanSM.c	  2030  
; ..\component\CanSM\Implementation\CanSM.c	  2031    (void)CanIf_SetPduMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_SET_RX_ONLINE );  /* CANIF_SET_ONLINE explicitly demanded by SWS but senseless. As compromise set RxOnline, avoids problems with passive mode resp. saves IR lock */
	mov	d4,#0
	st.b	[a15]13,d15
.L461:
	mov	d5,#2
	st.b	[a15]6,d15
.L766:
	call	CanIf_SetPduMode
.L462:

; ..\component\CanSM\Implementation\CanSM.c	  2032    (void)CanIf_SetPduMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_SET_TX_OFFLINE );
	mov	d4,#0
.L767:
	mov	d5,#3
	call	CanIf_SetPduMode
.L768:

; ..\component\CanSM\Implementation\CanSM.c	  2033  
; ..\component\CanSM\Implementation\CanSM.c	  2034    (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode &= CANSM_CLEAR_TX_TIMEOUT_EXCEPTION_FLAG; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	ld.bu	d15,[a15]4
.L769:
	and	d15,#127
	st.b	[a15]4,d15
.L770:

; ..\component\CanSM\Implementation\CanSM.c	  2035    (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_S_SILENTCOM; /* CREQ-366 */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d15,#32
	st.b	[a15]9,d15
.L771:

; ..\component\CanSM\Implementation\CanSM.c	  2036    (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* Stop timer e.g. if ComMRequest during CHECK or TxOffline */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d15,#0
	st.h	[a15],d15
.L772:

; ..\component\CanSM\Implementation\CanSM.c	  2037    (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter = CANSM_BOR_NONE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	st.b	[a15]14,d15
.L773:

; ..\component\CanSM\Implementation\CanSM.c	  2038  
; ..\component\CanSM\Implementation\CanSM.c	  2039  #if ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2040    if ( (*CanSM_CurrentChannelVarPtr).CanSM_TxOnlineDelayTime != CANSM_DELAY_TIMER_INACTIVE )
; ..\component\CanSM\Implementation\CanSM.c	  2041    { /* BusOffBeginIndication has been made, eventually BusOffEndIndication missing */
; ..\component\CanSM\Implementation\CanSM.c	  2042      (*CanSM_CurrentChannelVarPtr).CanSM_TxOnlineDelayTime = CANSM_DELAY_TIMER_INACTIVE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2043  # if ( CANSM_BUSOFF_END_INDICATION == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2044      (*CanSM_BusOffEndIndicationFctPtr)( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ) ); /* J1939Nm_BusOffEnd(); */  /* SBSW_CANSM_BUS_OFF_END_INDICATION */
; ..\component\CanSM\Implementation\CanSM.c	  2045  # endif /* ( CANSM_BUSOFF_END_INDICATION == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2046    }
; ..\component\CanSM\Implementation\CanSM.c	  2047  #endif /* ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2048  
; ..\component\CanSM\Implementation\CanSM.c	  2049    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  2050  
; ..\component\CanSM\Implementation\CanSM.c	  2051  } /* end Func CanSM_FullComToSilent */
	ret
.L431:
	
__CanSM_FullComToSilent_function_end:
	.size	CanSM_FullComToSilent,__CanSM_FullComToSilent_function_end-CanSM_FullComToSilent
.L235:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_NoComReached',code,cluster('CanSM_NoComReached')
	.sect	'.text.CanSM.CanSM_NoComReached'
	.align	2
	

; ..\component\CanSM\Implementation\CanSM.c	  2052  
; ..\component\CanSM\Implementation\CanSM.c	  2053  
; ..\component\CanSM\Implementation\CanSM.c	  2054  
; ..\component\CanSM\Implementation\CanSM.c	  2055  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2056   *  CanSM_NoComReached
; ..\component\CanSM\Implementation\CanSM.c	  2057   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2058  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2059   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2060   *
; ..\component\CanSM\Implementation\CanSM.c	  2061   *
; ..\component\CanSM\Implementation\CanSM.c	  2062   *
; ..\component\CanSM\Implementation\CanSM.c	  2063   *
; ..\component\CanSM\Implementation\CanSM.c	  2064   *
; ..\component\CanSM\Implementation\CanSM.c	  2065   *
; ..\component\CanSM\Implementation\CanSM.c	  2066   */
; ..\component\CanSM\Implementation\CanSM.c	  2067  CANSM_LOCAL FUNC(void, CANSM_CODE) CanSM_NoComReached( P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; Function CanSM_NoComReached
.L136:
CanSM_NoComReached:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  2068  { /* Context: CanSM_CheckTransceiverWakeFlagIndication; state CANSM_SD_CHK_WUF_CC_SLEEP CanSM_CtrlSleepIndicated; noPN noTrcv CanSM_TrcvStandbyIndicatedAsExpected; noPN */
; ..\component\CanSM\Implementation\CanSM.c	  2069    /* E_NOCOM */
; ..\component\CanSM\Implementation\CanSM.c	  2070    (*CanSM_CurrentChannelVarPtr).CanSM_ModeRequestRepetitionCounter = 0; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d0,#0
	st.b	[a4]10,d0
.L778:

; ..\component\CanSM\Implementation\CanSM.c	  2071    (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode &= CANSM_CLEAR_TX_TIMEOUT_EXCEPTION_FLAG; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	ld.bu	d15,[a4]4
.L779:
	and	d15,#127
	st.b	[a4]4,d15
.L780:

; ..\component\CanSM\Implementation\CanSM.c	  2072    (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_S_NOCOM; /* CREQ-365 */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d15,#64
	st.b	[a4]9,d15
.L781:

; ..\component\CanSM\Implementation\CanSM.c	  2073    (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	st.h	[a4],d0
.L782:

; ..\component\CanSM\Implementation\CanSM.c	  2074    (*CanSM_CurrentChannelVarPtr).CanSM_NewComMode = COMM_NO_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	st.b	[a4]6,d0
.L783:

; ..\component\CanSM\Implementation\CanSM.c	  2075    (*CanSM_CurrentChannelVarPtr).CanSM_EnfroceComModeIndication = TRUE; /* FORCE NoCom Indication */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d15,#1
	st.b	[a4]7,d15
.L784:

; ..\component\CanSM\Implementation\CanSM.c	  2076    /* \trace..SPEC-11340 */
; ..\component\CanSM\Implementation\CanSM.c	  2077    /* \trace..SPEC-2181146 */
; ..\component\CanSM\Implementation\CanSM.c	  2078  
; ..\component\CanSM\Implementation\CanSM.c	  2079  } /* end Func CanSM_NoComReached */
	ret
.L434:
	
__CanSM_NoComReached_function_end:
	.size	CanSM_NoComReached,__CanSM_NoComReached_function_end-CanSM_NoComReached
.L240:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_NetworkStatemachine',code,cluster('CanSM_NetworkStatemachine')
	.sect	'.text.CanSM.CanSM_NetworkStatemachine'
	.align	2
	

; ..\component\CanSM\Implementation\CanSM.c	  2080  
; ..\component\CanSM\Implementation\CanSM.c	  2081  
; ..\component\CanSM\Implementation\CanSM.c	  2082  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2083   *  CanSM_NetworkStatemachine
; ..\component\CanSM\Implementation\CanSM.c	  2084   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2085  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2086   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2087   *
; ..\component\CanSM\Implementation\CanSM.c	  2088   *
; ..\component\CanSM\Implementation\CanSM.c	  2089   *
; ..\component\CanSM\Implementation\CanSM.c	  2090   *
; ..\component\CanSM\Implementation\CanSM.c	  2091   *
; ..\component\CanSM\Implementation\CanSM.c	  2092   *
; ..\component\CanSM\Implementation\CanSM.c	  2093   *
; ..\component\CanSM\Implementation\CanSM.c	  2094   *
; ..\component\CanSM\Implementation\CanSM.c	  2095   *
; ..\component\CanSM\Implementation\CanSM.c	  2096   *
; ..\component\CanSM\Implementation\CanSM.c	  2097   *
; ..\component\CanSM\Implementation\CanSM.c	  2098   *
; ..\component\CanSM\Implementation\CanSM.c	  2099   *
; ..\component\CanSM\Implementation\CanSM.c	  2100   *
; ..\component\CanSM\Implementation\CanSM.c	  2101   *
; ..\component\CanSM\Implementation\CanSM.c	  2102   *
; ..\component\CanSM\Implementation\CanSM.c	  2103   *
; ..\component\CanSM\Implementation\CanSM.c	  2104   *
; ..\component\CanSM\Implementation\CanSM.c	  2105   */
; ..\component\CanSM\Implementation\CanSM.c	  2106  CANSM_LOCAL FUNC(void, CANSM_CODE) CanSM_NetworkStatemachine( CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx, P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr )
; Function CanSM_NetworkStatemachine
.L138:
CanSM_NetworkStatemachine:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  2107  { /* Context: CanSM_MainFunction; CANSM_TIMER_EXPIRED, CANSM_S_INTERIM_STATE_DETECTED resp. ComModeChanged; CanSM_StartWakeupSources; CanSM_StopWakeupSources;  CanSM_Init; CanSM_UninitToNoCom  */
; ..\component\CanSM\Implementation\CanSM.c	  2108    /* \trace SPEC-11282, SPEC-11292, SPEC-11301, SPEC-11306, SPEC-11315, SPEC-11318, SPEC-11326, SPEC-11334, SPEC-11343, SPEC-11356, SPEC-11385, SPEC-11390, SPEC-11423, SPEC-11427, SPEC-11429, SPEC-11439, SPEC-47123 */
; ..\component\CanSM\Implementation\CanSM.c	  2109  
; ..\component\CanSM\Implementation\CanSM.c	  2110    uint8 CanSM_RetValTriggerFunc = E_OK;
	mov	d8,#0
	mov.aa	a15,a4
.L464:
	mov	d9,d8
	sub.a	a10,#8
.L442:
	mov	d10,#16
.L443:

; ..\component\CanSM\Implementation\CanSM.c	  2111    uint8 CanSM_OldState;
; ..\component\CanSM\Implementation\CanSM.c	  2112  #if ( CANSM_BOR_TX_CONFIRMATION_POLLINGOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2113    CanIf_NotifStatusType CanSM_TxNotificationStatus;
; ..\component\CanSM\Implementation\CanSM.c	  2114  #endif
; ..\component\CanSM\Implementation\CanSM.c	  2115  
; ..\component\CanSM\Implementation\CanSM.c	  2116    do
; ..\component\CanSM\Implementation\CanSM.c	  2117    {
; ..\component\CanSM\Implementation\CanSM.c	  2118      CanSM_OldState = (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState;
; ..\component\CanSM\Implementation\CanSM.c	  2119  
; ..\component\CanSM\Implementation\CanSM.c	  2120      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CanSM_GetModeRequestRepetitionTimeOfPCConfig(); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2121  
; ..\component\CanSM\Implementation\CanSM.c	  2122      switch ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState )
; ..\component\CanSM\Implementation\CanSM.c	  2123      {
; ..\component\CanSM\Implementation\CanSM.c	  2124        /* StartUp State machine */
; ..\component\CanSM\Implementation\CanSM.c	  2125  #if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2126        case CANSM_SU_TRCV_NORMAL:
; ..\component\CanSM\Implementation\CanSM.c	  2127        {
; ..\component\CanSM\Implementation\CanSM.c	  2128          /* \trace..SPEC-11355 */
; ..\component\CanSM\Implementation\CanSM.c	  2129  
; ..\component\CanSM\Implementation\CanSM.c	  2130          /* \trace SPEC-11295 */
; ..\component\CanSM\Implementation\CanSM.c	  2131  # if defined CANSM_TRANSCEIVER_HANDLING_MIXED_ON_AND_OFF
; ..\component\CanSM\Implementation\CanSM.c	  2132          if ( CanSM_IsTransceiver_Channel_SupportOfChannelConfig( CanSM_CanNetworkIdx ) ) /* PRQA S 4304, 4404, 1881, 1882, 4558 */ /* MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean */
; ..\component\CanSM\Implementation\CanSM.c	  2133  # endif /*   CANSM_TRANSCEIVER_HANDLING_MIXED_ON_AND_OFF  */
; ..\component\CanSM\Implementation\CanSM.c	  2134          {
; ..\component\CanSM\Implementation\CanSM.c	  2135            /* already checked above; if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )  */
; ..\component\CanSM\Implementation\CanSM.c	  2136            CanSM_RetValTriggerFunc = CanIf_SetTrcvMode( CanSM_GetTransceiverIdOfChannelConfig( CanSM_CanNetworkIdx ), CANTRCV_TRCVMODE_NORMAL );
; ..\component\CanSM\Implementation\CanSM.c	  2137            /* already checked see below;    endif   CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG */
; ..\component\CanSM\Implementation\CanSM.c	  2138          } /* end if Trcv active on current channel */
; ..\component\CanSM\Implementation\CanSM.c	  2139  # if defined CANSM_TRANSCEIVER_HANDLING_MIXED_ON_AND_OFF
; ..\component\CanSM\Implementation\CanSM.c	  2140          else
; ..\component\CanSM\Implementation\CanSM.c	  2141  # endif /*   CANSM_TRANSCEIVER_HANDLING_MIXED_ON_AND_OFF  */
; ..\component\CanSM\Implementation\CanSM.c	  2142          {
; ..\component\CanSM\Implementation\CanSM.c	  2143  # if !defined CANSM_TRANSCEIVER_HANDLING_ALWAYS_ON /* sometimes or ever OFF */
; ..\component\CanSM\Implementation\CanSM.c	  2144            (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SU_CC_STOPPED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2145  # endif /*   CANSM_TRANSCEIVER_HANDLING_ALWAYS_ON  */
; ..\component\CanSM\Implementation\CanSM.c	  2146          }
; ..\component\CanSM\Implementation\CanSM.c	  2147  
; ..\component\CanSM\Implementation\CanSM.c	  2148          break;
; ..\component\CanSM\Implementation\CanSM.c	  2149        } /* end case CANSM_SU_TRCV_NORMAL CanSM_CurrentState */
; ..\component\CanSM\Implementation\CanSM.c	  2150  #endif /* if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2151        /*  the case CANSM_SU_CC_STOPPED has been shifted below */
; ..\component\CanSM\Implementation\CanSM.c	  2152        case CANSM_SU_CC_STARTED:
; ..\component\CanSM\Implementation\CanSM.c	  2153        {
; ..\component\CanSM\Implementation\CanSM.c	  2154  
; ..\component\CanSM\Implementation\CanSM.c	  2155          CanSM_RetValTriggerFunc = CanIf_SetControllerMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_CS_STARTED );
; ..\component\CanSM\Implementation\CanSM.c	  2156          if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState != CANSM_SU_CC_STARTED ) /* PRQA S 2992, 2996, 2147 */ /* MD_CANSM_Rule2.2_2982, MD_CANSM_Rule2.2_2996, MD_CANSM_Rule14.3 */
; ..\component\CanSM\Implementation\CanSM.c	  2157          { /* Indication has been received; negative return value irrelevant */
; ..\component\CanSM\Implementation\CanSM.c	  2158            CanSM_RetValTriggerFunc = E_OK;  /* PRQA S 2880 */ /* MD_CANSM_Rule2.1 */
; ..\component\CanSM\Implementation\CanSM.c	  2159            CanSM_OldState = (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState; /* Avoid repetition */ /* final state (of sequence) which is handled by NWSM */
; ..\component\CanSM\Implementation\CanSM.c	  2160          }
; ..\component\CanSM\Implementation\CanSM.c	  2161          (*CanSM_CurrentChannelVarPtr).CanSM_BusOffFlag = FALSE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2162  
; ..\component\CanSM\Implementation\CanSM.c	  2163          break;
; ..\component\CanSM\Implementation\CanSM.c	  2164        } /* end case CANSM_SU_CC_STARTED: */
; ..\component\CanSM\Implementation\CanSM.c	  2165        /* ShutDown State machine */
; ..\component\CanSM\Implementation\CanSM.c	  2166  #if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2167        case CANSM_SD_PN_CLEAR_WUF:
; ..\component\CanSM\Implementation\CanSM.c	  2168        {
; ..\component\CanSM\Implementation\CanSM.c	  2169          /* \trace..SPEC-11345 */
; ..\component\CanSM\Implementation\CanSM.c	  2170  
; ..\component\CanSM\Implementation\CanSM.c	  2171          CanSM_RetValTriggerFunc = CanIf_ClearTrcvWufFlag( CanSM_GetTransceiverIdOfChannelConfig( CanSM_CanNetworkIdx ) );
; ..\component\CanSM\Implementation\CanSM.c	  2172  
; ..\component\CanSM\Implementation\CanSM.c	  2173          break;
; ..\component\CanSM\Implementation\CanSM.c	  2174        } /* end case CANSM_SD_PN_CLEAR_WUF: */
; ..\component\CanSM\Implementation\CanSM.c	  2175  #endif /* if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2176        case CANSM_SU_CC_STOPPED: /* PRQA S 2003 */ /* MD_CANSM_Rule16.3 */
; ..\component\CanSM\Implementation\CanSM.c	  2177        {
; ..\component\CanSM\Implementation\CanSM.c	  2178          CanSM_RetValTriggerFunc = CanIf_SetControllerMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_CS_STOPPED );
; ..\component\CanSM\Implementation\CanSM.c	  2179          (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter = CANSM_BOR_NONE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2180  
; ..\component\CanSM\Implementation\CanSM.c	  2181          break;
; ..\component\CanSM\Implementation\CanSM.c	  2182        } /* end case CANSM_SU_CC_STOPPED: */
; ..\component\CanSM\Implementation\CanSM.c	  2183  
; ..\component\CanSM\Implementation\CanSM.c	  2184  #if !defined ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2185        case CANSM_SD_CC_SLEEP:
; ..\component\CanSM\Implementation\CanSM.c	  2186  #endif /* ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2187  #if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2188        case CANSM_SD_CC_SLEEP_PN: /* PRQA S 2003 */ /* MD_CANSM_Rule16.3 */ /* BullsEye; if overall report blames unapproachable, it is a lie */
; ..\component\CanSM\Implementation\CanSM.c	  2189  #endif  /* not always OFF ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2190        {
; ..\component\CanSM\Implementation\CanSM.c	  2191  
; ..\component\CanSM\Implementation\CanSM.c	  2192          CanSM_RetValTriggerFunc = CanIf_SetControllerMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_CS_SLEEP );
; ..\component\CanSM\Implementation\CanSM.c	  2193  
; ..\component\CanSM\Implementation\CanSM.c	  2194  
; ..\component\CanSM\Implementation\CanSM.c	  2195          break;
; ..\component\CanSM\Implementation\CanSM.c	  2196        } /* end case CANSM_SD_CC_SLEEP: */
; ..\component\CanSM\Implementation\CanSM.c	  2197  #if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2198        case CANSM_SD_TRCV_NORMAL: /* PRQA S 2003 */ /* MD_CANSM_Rule16.3 */
; ..\component\CanSM\Implementation\CanSM.c	  2199        {
; ..\component\CanSM\Implementation\CanSM.c	  2200          CanSM_RetValTriggerFunc = CanIf_SetTrcvMode( CanSM_GetTransceiverIdOfChannelConfig( CanSM_CanNetworkIdx ), CANTRCV_TRCVMODE_NORMAL );
; ..\component\CanSM\Implementation\CanSM.c	  2201  
; ..\component\CanSM\Implementation\CanSM.c	  2202          break;
; ..\component\CanSM\Implementation\CanSM.c	  2203        } /* end case CANSM_SD_TRCV_NORMAL */
; ..\component\CanSM\Implementation\CanSM.c	  2204        case CANSM_SD_TRCV_STANDBY: /* PRQA S 2003 */ /* MD_CANSM_Rule16.3 */
; ..\component\CanSM\Implementation\CanSM.c	  2205        {
; ..\component\CanSM\Implementation\CanSM.c	  2206          CanSM_RetValTriggerFunc = CanIf_SetTrcvMode( CanSM_GetTransceiverIdOfChannelConfig( CanSM_CanNetworkIdx ), CANTRCV_TRCVMODE_STANDBY );
; ..\component\CanSM\Implementation\CanSM.c	  2207  
; ..\component\CanSM\Implementation\CanSM.c	  2208          break;
; ..\component\CanSM\Implementation\CanSM.c	  2209        } /* end case CANSM_SD_TRCV_STANDBY */
; ..\component\CanSM\Implementation\CanSM.c	  2210  # if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2211  
; ..\component\CanSM\Implementation\CanSM.c	  2212        case CANSM_SD_CHK_WUF_CC_SLEEP: /* fall through */ /* no break */
; ..\component\CanSM\Implementation\CanSM.c	  2213        case CANSM_SD_CHK_WUF_NOT_CC_SLEEP:
; ..\component\CanSM\Implementation\CanSM.c	  2214        {
; ..\component\CanSM\Implementation\CanSM.c	  2215          CanSM_RetValTriggerFunc = CanIf_CheckTrcvWakeFlag( CanSM_GetTransceiverIdOfChannelConfig( CanSM_CanNetworkIdx ) );
; ..\component\CanSM\Implementation\CanSM.c	  2216  
; ..\component\CanSM\Implementation\CanSM.c	  2217          break;
; ..\component\CanSM\Implementation\CanSM.c	  2218        } /* end case CANSM_SD_CHK_WUF_CC_SLEEP: CANSM_SD_CHK_WUF_NOT_CC_SLEEP: */
; ..\component\CanSM\Implementation\CanSM.c	  2219  # endif /* if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2220  #endif /* if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2221        case CANSM_BO_TX_OFFLINE:
; ..\component\CanSM\Implementation\CanSM.c	  2222        {
; ..\component\CanSM\Implementation\CanSM.c	  2223  #if ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2224          (*CanSM_CurrentChannelVarPtr).CanSM_TxOnlineDelayTime = CANSM_DELAY_TIMER_INACTIVE; /* BusOffEndIndication not missing */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2225  #endif /* ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2226  #if ( CANSM_BUSOFF_END_INDICATION == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2227          (*CanSM_BusOffEndIndicationFctPtr)( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ) ); /* J1939Nm_BusOffEnd(); */  /* SBSW_CANSM_BUS_OFF_END_INDICATION */
; ..\component\CanSM\Implementation\CanSM.c	  2228  #endif /* ( CANSM_BUSOFF_END_INDICATION == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2229  
; ..\component\CanSM\Implementation\CanSM.c	  2230          CanSM_FullComReached( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2231          CanSM_OldState = (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState; /* Avoid repetition */
; ..\component\CanSM\Implementation\CanSM.c	  2232          break;
; ..\component\CanSM\Implementation\CanSM.c	  2233        } /* end case CANSM_SD_CHK_WUF_CC_SLEEP: CANSM_SD_CHK_WUF_NOT_CC_SLEEP: */
; ..\component\CanSM\Implementation\CanSM.c	  2234        case CANSM_BO_BUS_OFF_CHECK:
; ..\component\CanSM\Implementation\CanSM.c	  2235        {
; ..\component\CanSM\Implementation\CanSM.c	  2236  #if defined CANSM_BOR_TX_CONFIRMATION_POLLING_ALWAYS_ON
; ..\component\CanSM\Implementation\CanSM.c	  2237          CanSM_TxNotificationStatus = CanIf_GetTxConfirmationState( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ) );
; ..\component\CanSM\Implementation\CanSM.c	  2238          /* \trace..SPEC-11305 */
; ..\component\CanSM\Implementation\CanSM.c	  2239  
; ..\component\CanSM\Implementation\CanSM.c	  2240          if ( CanSM_TxNotificationStatus == CANIF_TX_RX_NOTIFICATION )
; ..\component\CanSM\Implementation\CanSM.c	  2241          {
; ..\component\CanSM\Implementation\CanSM.c	  2242            CanSM_BusOffCheckToNoBusOff( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2243          }
; ..\component\CanSM\Implementation\CanSM.c	  2244  #elif ( CANSM_BOR_TX_CONFIRMATION_POLLINGOFCHANNELCONFIG == STD_OFF )
; ..\component\CanSM\Implementation\CanSM.c	  2245          CanSM_BusOffCheckToNoBusOff( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2246  #else /* Some channels with BOR_TX_CONFIRMATION_POLLING     Some channels without TxPolling  */
; ..\component\CanSM\Implementation\CanSM.c	  2247          if ( CanSM_IsBor_Tx_Confirmation_PollingOfChannelConfig( CanSM_CanNetworkIdx ) ) /* PRQA S 4304, 4404, 1881, 1882, 4558 */ /* MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean */
; ..\component\CanSM\Implementation\CanSM.c	  2248          {
; ..\component\CanSM\Implementation\CanSM.c	  2249            CanSM_TxNotificationStatus = CanIf_GetTxConfirmationState( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ) );
; ..\component\CanSM\Implementation\CanSM.c	  2250          }
; ..\component\CanSM\Implementation\CanSM.c	  2251          else
; ..\component\CanSM\Implementation\CanSM.c	  2252          {
; ..\component\CanSM\Implementation\CanSM.c	  2253            CanSM_TxNotificationStatus = CANIF_TX_RX_NOTIFICATION;
; ..\component\CanSM\Implementation\CanSM.c	  2254          }
; ..\component\CanSM\Implementation\CanSM.c	  2255  
; ..\component\CanSM\Implementation\CanSM.c	  2256          if ( CanSM_TxNotificationStatus == CANIF_TX_RX_NOTIFICATION )
; ..\component\CanSM\Implementation\CanSM.c	  2257          {
; ..\component\CanSM\Implementation\CanSM.c	  2258            CanSM_BusOffCheckToNoBusOff( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2259          }
; ..\component\CanSM\Implementation\CanSM.c	  2260  #endif /* BOR_TX_CONFIRMATION_POLLING */
; ..\component\CanSM\Implementation\CanSM.c	  2261  
; ..\component\CanSM\Implementation\CanSM.c	  2262          (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* corrects the repetition time, re-triggers SM if TxPolling failed */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d11,#0
.L789:

; ..\component\CanSM\Implementation\CanSM.c	  2263          CanSM_OldState = (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState; /* Avoid repetition */
; ..\component\CanSM\Implementation\CanSM.c	  2264  
; ..\component\CanSM\Implementation\CanSM.c	  2265          break;
; ..\component\CanSM\Implementation\CanSM.c	  2266        } /* end case CANSM_BO_BUS_OFF_CHECK */
; ..\component\CanSM\Implementation\CanSM.c	  2267  #if( CANSM_EXTENDED_RAM_CHECK == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2268        case CANSM_SD_CHECK_RAM:
; ..\component\CanSM\Implementation\CanSM.c	  2269        {
; ..\component\CanSM\Implementation\CanSM.c	  2270          Appl_CanSM_RamCheckStart( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ) );
; ..\component\CanSM\Implementation\CanSM.c	  2271  
; ..\component\CanSM\Implementation\CanSM.c	  2272          CanIf_RamCheckExecute( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ) ); /* potential implicit calls of CanSM_RamCheckErrorIndication() with adaptation of CanSM_RamCheckState */
; ..\component\CanSM\Implementation\CanSM.c	  2273  
; ..\component\CanSM\Implementation\CanSM.c	  2274          CanSM_RamCheckEnd( (CanSM_SizeOfChannelVarRecordType)CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  2275  
; ..\component\CanSM\Implementation\CanSM.c	  2276          break;
; ..\component\CanSM\Implementation\CanSM.c	  2277        } /* end case CANSM_SD_CHECK_RAM */
; ..\component\CanSM\Implementation\CanSM.c	  2278  #endif /* CANSM_EXTENDED_RAM_CHECK  */
; ..\component\CanSM\Implementation\CanSM.c	  2279        default: /* PRQA S 2003 */ /* MD_CANSM_Rule16.3 */
; ..\component\CanSM\Implementation\CanSM.c	  2280        { /* case CANSM_SD_CC_STOPPED */
; ..\component\CanSM\Implementation\CanSM.c	  2281          /* \trace..SPEC-11361 */
; ..\component\CanSM\Implementation\CanSM.c	  2282          (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_CC_STOPPED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d12,#34
.L790:

; ..\component\CanSM\Implementation\CanSM.c	  2283          SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_4(); /* CanIR BO */
; ..\component\CanSM\Implementation\CanSM.c	  2284  
; ..\component\CanSM\Implementation\CanSM.c	  2285          if ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffFlag == TRUE )
; ..\component\CanSM\Implementation\CanSM.c	  2286          { /* BO in Silent */
; ..\component\CanSM\Implementation\CanSM.c	  2287            (void)CanIf_SetControllerMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_CS_STARTED );
; ..\component\CanSM\Implementation\CanSM.c	  2288            (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter = CANSM_BOR_NONE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */ /* PRQA S 2982 */ /* MD_CANSM_Rule2.2_2982 */
; ..\component\CanSM\Implementation\CanSM.c	  2289            (*CanSM_CurrentChannelVarPtr).CanSM_BusOffFlag = FALSE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2290          } /* end if  BO in Silent */
; ..\component\CanSM\Implementation\CanSM.c	  2291  
; ..\component\CanSM\Implementation\CanSM.c	  2292          SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_4(); /* CanIR BO */
; ..\component\CanSM\Implementation\CanSM.c	  2293  
; ..\component\CanSM\Implementation\CanSM.c	  2294  #if ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2295          if ( (*CanSM_CurrentChannelVarPtr).CanSM_TxOnlineDelayTime != CANSM_DELAY_TIMER_INACTIVE )
; ..\component\CanSM\Implementation\CanSM.c	  2296          { /* BusOffEndIndication missing */
; ..\component\CanSM\Implementation\CanSM.c	  2297            (*CanSM_CurrentChannelVarPtr).CanSM_TxOnlineDelayTime = CANSM_DELAY_TIMER_INACTIVE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2298  # if ( CANSM_BUSOFF_END_INDICATION == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2299            (*CanSM_BusOffEndIndicationFctPtr)( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ) ); /* J1939Nm_BusOffEnd(); */  /* SBSW_CANSM_BUS_OFF_END_INDICATION */
; ..\component\CanSM\Implementation\CanSM.c	  2300  # endif /* ( CANSM_BUSOFF_END_INDICATION == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2301          }
; ..\component\CanSM\Implementation\CanSM.c	  2302  #endif /* ( CANSM_BUSOFF_BEGIN_INDICATION == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2303  
; ..\component\CanSM\Implementation\CanSM.c	  2304          CanSM_RetValTriggerFunc = CanIf_SetControllerMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_CS_STOPPED );
; ..\component\CanSM\Implementation\CanSM.c	  2305          (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter = CANSM_BOR_NONE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2306          break;
; ..\component\CanSM\Implementation\CanSM.c	  2307        } /* end case CANSM_SD_CC_STOPPED: */
; ..\component\CanSM\Implementation\CanSM.c	  2308      } /* end switch      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState */
; ..\component\CanSM\Implementation\CanSM.c	  2309  
; ..\component\CanSM\Implementation\CanSM.c	  2310      if ( CanSM_RetValTriggerFunc != E_OK )
; ..\component\CanSM\Implementation\CanSM.c	  2311      {
; ..\component\CanSM\Implementation\CanSM.c	  2312        (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* Set Trcv,Ctrl fail, stop timer to retry next cycle */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d13,#0
.L791:

; ..\component\CanSM\Implementation\CanSM.c	  2313        (*CanSM_CurrentChannelVarPtr).CanSM_ModeRequestRepetitionCounter++; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2314      }
; ..\component\CanSM\Implementation\CanSM.c	  2315      /* \trace SPEC-11278, SPEC-11312, SPEC-11317, SPEC-11346, SPEC-11350, SPEC-11351, SPEC-11363, SPEC-11366, SPEC-11437, SPEC-11440, SPEC-2181158, SPEC-47111, SPEC-47115 */
; ..\component\CanSM\Implementation\CanSM.c	  2316      /* \trace SPEC-11279, SPEC-11300, SPEC-11302, SPEC-11314, SPEC-11408, SPEC-11430, SPEC-2181382, SPEC-2181386, SPEC-2181391 */
; ..\component\CanSM\Implementation\CanSM.c	  2317      /* \trace SPEC-11278, SPEC-11312, SPEC-11317, SPEC-11346, SPEC-11350, SPEC-11351, SPEC-11363, SPEC-11366, SPEC-11437, SPEC-11440, SPEC-47111, SPEC-47115 */
; ..\component\CanSM\Implementation\CanSM.c	  2318      /* \trace SPEC-11290, SPEC-11321, SPEC-11325, SPEC-11330, SPEC-11332, SPEC-11344, SPEC-11349, SPEC-11368, SPEC-11369, SPEC-11388, SPEC-11404, SPEC-11411, SPEC-11415, SPEC-11419, SPEC-11421, SPEC-11426, SPEC-11438, SPEC-2181390, SPEC-47116, SPEC-47119 */
; ..\component\CanSM\Implementation\CanSM.c	  2319  
; ..\component\CanSM\Implementation\CanSM.c	  2320  
; ..\component\CanSM\Implementation\CanSM.c	  2321  
; ..\component\CanSM\Implementation\CanSM.c	  2322      if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_S_NOCOM )
	mov	d14,#64

; ..\component\CanSM\Implementation\CanSM.c	  2323      {
; ..\component\CanSM\Implementation\CanSM.c	  2324        CanSM_RetValTriggerFunc = E_OK;
; ..\component\CanSM\Implementation\CanSM.c	  2325        (*CanSM_CurrentChannelVarPtr).CanSM_ModeRequestRepetitionCounter = 0; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2326        (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* Set Trcv,Ctrl fail, stop timer to retry next cycle */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2327        CanSM_OldState = (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState; /* Avoid repetition */
; ..\component\CanSM\Implementation\CanSM.c	  2328      }
; ..\component\CanSM\Implementation\CanSM.c	  2329  
; ..\component\CanSM\Implementation\CanSM.c	  2330    }while ( CanSM_OldState != (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState );
.L10:
	ld.bu	d15,[a15]9
.L466:
	st.w	[a10],d15
.L468:
	mov	d15,#10
	st.h	[a15],d15
.L467:
	ld.bu	d15,[a15]9
.L792:
	jeq	d15,#2,.L11
.L793:
	jeq	d15,#3,.L12
.L794:
	mov	d0,#17
	jeq	d15,d0,.L13
.L795:
	mov	d0,#20
	jeq	d15,d0,.L14
.L796:
	mov	d0,#35
	jeq	d15,d0,.L15
	j	.L16
.L12:
	mov	d5,#2
	mov	d4,d8
	call	CanIf_SetControllerMode
.L465:
	mov	d9,d2
	ld.bu	d15,[a15]9
.L469:
	jeq	d15,#3,.L17
.L797:
	mov	d9,#0
	st.w	[a10],d15
.L17:
	st.b	[a15]15,d8
.L798:
	j	.L18
.L15:
	mov	d5,#3
	mov	d4,d8
	call	CanIf_SetControllerMode
.L799:
	j	.L19
.L14:
	mov	d4,d8
	mov.aa	a4,a15
.L471:
	call	CanSM_FullComReached
.L472:
	j	.L20
.L13:
	st.b	[a15]9,d10
.L800:
	st.b	[a15]14,d8
.L450:
	st.h	[a15],d11
.L20:
	ld.bu	d15,[a15]9
.L473:
	st.w	[a10],d15
.L801:
	j	.L21
.L16:
	st.b	[a15]9,d12
.L802:
	call	SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_4
.L803:
	ld.bu	d15,[a15]15
.L804:
	jne	d15,#1,.L22
.L805:
	mov	d5,#2
	mov	d4,d8
	call	CanIf_SetControllerMode
.L806:
	st.b	[a15]14,d8
.L807:
	st.b	[a15]15,d8
.L22:
	call	SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_4
.L11:
	mov	d5,#1
	mov	d4,d8
	call	CanIf_SetControllerMode
.L470:
	st.b	[a15]14,d8
.L19:
	mov	d9,d2
.L21:
.L18:
	jeq	d9,#0,.L23
.L808:
	st.h	[a15],d13
.L809:
	ld.bu	d15,[a15]10
.L810:
	add	d15,#1
	st.b	[a15]10,d15
.L23:
	ld.bu	d15,[a15]9
.L811:
	jne	d15,d14,.L24
.L812:
	mov	d9,#0
	st.b	[a15]10,d8
.L813:
	st.h	[a15],d9
.L814:
	ld.bu	d15,[a15]9
.L474:
	st.w	[a10],d15
.L24:
	ld.bu	d15,[a15]9
.L815:
	ld.w	d0,[a10]
.L475:
	jne	d15,d0,.L10
.L816:

; ..\component\CanSM\Implementation\CanSM.c	  2331  
; ..\component\CanSM\Implementation\CanSM.c	  2332  
; ..\component\CanSM\Implementation\CanSM.c	  2333  
; ..\component\CanSM\Implementation\CanSM.c	  2334    CANSM_DUMMY_STATEMENT( CanSM_CanNetworkIdx );  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  2335  
; ..\component\CanSM\Implementation\CanSM.c	  2336  } /* end  Func CanSM_NetworkStatemachine */  /* PRQA S 6030, 6050 */  /* MD_MSR_STCYC, MD_MSR_STCAL */
	ret
.L436:
	
__CanSM_NetworkStatemachine_function_end:
	.size	CanSM_NetworkStatemachine,__CanSM_NetworkStatemachine_function_end-CanSM_NetworkStatemachine
.L245:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_InitMemory',code,cluster('CanSM_InitMemory')
	.sect	'.text.CanSM.CanSM_InitMemory'
	.align	2
	
	.global	CanSM_InitMemory

; ..\component\CanSM\Implementation\CanSM.c	  2337  
; ..\component\CanSM\Implementation\CanSM.c	  2338  
; ..\component\CanSM\Implementation\CanSM.c	  2339  
; ..\component\CanSM\Implementation\CanSM.c	  2340  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2341   *  GLOBAL FUNCTIONS
; ..\component\CanSM\Implementation\CanSM.c	  2342   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2343  
; ..\component\CanSM\Implementation\CanSM.c	  2344  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2345   *  CanSM_InitMemory
; ..\component\CanSM\Implementation\CanSM.c	  2346   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2347  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2348   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2349   *
; ..\component\CanSM\Implementation\CanSM.c	  2350   *
; ..\component\CanSM\Implementation\CanSM.c	  2351   *
; ..\component\CanSM\Implementation\CanSM.c	  2352   *
; ..\component\CanSM\Implementation\CanSM.c	  2353   *
; ..\component\CanSM\Implementation\CanSM.c	  2354   */
; ..\component\CanSM\Implementation\CanSM.c	  2355  FUNC(void, CANSM_CODE) CanSM_InitMemory(void)
; Function CanSM_InitMemory
.L140:
CanSM_InitMemory:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  2356  {
; ..\component\CanSM\Implementation\CanSM.c	  2357  #if (  ( CANSM_PREVENT_BUSSLEEP_AT_STARTUP == STD_ON ) && ( CANSM_USE_INIT_POINTER == STD_OFF )  )
; ..\component\CanSM\Implementation\CanSM.c	  2358    CanSM_ChannelVarRecordIterType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  2359  
; ..\component\CanSM\Implementation\CanSM.c	  2360    /* lint -e442  -e440 */
; ..\component\CanSM\Implementation\CanSM.c	  2361    for ( CanSM_CanNetworkIdx = 0; CanSM_CanNetworkIdx < CANSM_ENABLE_SET_BUS_SLEEP_ARRAY_MAX_SIZE; CanSM_CanNetworkIdx++ ) /* lint +e442 +e440 */
; ..\component\CanSM\Implementation\CanSM.c	  2362    {
; ..\component\CanSM\Implementation\CanSM.c	  2363      CanSM_EnableSetBusSleep[ CanSM_CanNetworkIdx ] = CANSM_SET_BUS_SLEEP_MODE; /* CanSM_PreventBusSleepAtStartUp() */ /* SBSW_CANSM_ENABLE_SET_BUS_SLEEP_ARRAY */
; ..\component\CanSM\Implementation\CanSM.c	  2364    } /* end for ( each CAN channel index ) */
; ..\component\CanSM\Implementation\CanSM.c	  2365  #endif /* CANSM_PREVENT_BUSSLEEP_AT_STARTUP CANSM_USE_INIT_POINTER */
; ..\component\CanSM\Implementation\CanSM.c	  2366  
; ..\component\CanSM\Implementation\CanSM.c	  2367    /* blocks the calling of API function ( except CanSM_Init ) */
; ..\component\CanSM\Implementation\CanSM.c	  2368    CanSM_IsInitialized = CANSM_INITFUNCTION_NOT_CALLED;
	movh.a	a15,#@his(CanSM_IsInitialized)
.L634:
	mov	d15,#0
	st.b	[a15]@los(CanSM_IsInitialized),d15
.L635:

; ..\component\CanSM\Implementation\CanSM.c	  2369  
; ..\component\CanSM\Implementation\CanSM.c	  2370  } /* end Func CanSM_InitMemory() */
	ret
.L359:
	
__CanSM_InitMemory_function_end:
	.size	CanSM_InitMemory,__CanSM_InitMemory_function_end-CanSM_InitMemory
.L205:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_PreInit',code,cluster('CanSM_PreInit')
	.sect	'.text.CanSM.CanSM_PreInit'
	.align	2
	
	.global	CanSM_PreInit

; ..\component\CanSM\Implementation\CanSM.c	  2371  
; ..\component\CanSM\Implementation\CanSM.c	  2372  
; ..\component\CanSM\Implementation\CanSM.c	  2373  /*********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2374   * CanSM_Init
; ..\component\CanSM\Implementation\CanSM.c	  2375   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2376  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2377   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2378   *
; ..\component\CanSM\Implementation\CanSM.c	  2379   *
; ..\component\CanSM\Implementation\CanSM.c	  2380   *
; ..\component\CanSM\Implementation\CanSM.c	  2381   *
; ..\component\CanSM\Implementation\CanSM.c	  2382   *
; ..\component\CanSM\Implementation\CanSM.c	  2383   *
; ..\component\CanSM\Implementation\CanSM.c	  2384   *
; ..\component\CanSM\Implementation\CanSM.c	  2385   */
; ..\component\CanSM\Implementation\CanSM.c	  2386  FUNC(void, CANSM_CODE) CanSM_PreInit( CONSTP2CONST( CanSM_ConfigType, AUTOMATIC, CANSM_CONST ) ConfigPtr ) /* PRQA S 1505 */ /*MD_MSR_Rule8.7 */
; Function CanSM_PreInit
.L142:
CanSM_PreInit:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  2387  { /* \trace SPEC-834 */
; ..\component\CanSM\Implementation\CanSM.c	  2388    CanSM_ChannelVarRecordIterType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  2389    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  2390  
; ..\component\CanSM\Implementation\CanSM.c	  2391  #if ( CANSM_USE_INIT_POINTER == STD_OFF )
; ..\component\CanSM\Implementation\CanSM.c	  2392    CANSM_DUMMY_STATEMENT_CONST(ConfigPtr); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  2393  #else /* CANSM_USE_INIT_POINTER */
; ..\component\CanSM\Implementation\CanSM.c	  2394  
; ..\component\CanSM\Implementation\CanSM.c	  2395    CanSM_ConfigDataPtr = ConfigPtr; /* assignment needed by HasChannelConfig() */
; ..\component\CanSM\Implementation\CanSM.c	  2396  
; ..\component\CanSM\Implementation\CanSM.c	  2397    if ( CanSM_ConfigDataPtr == NULL_PTR )
; ..\component\CanSM\Implementation\CanSM.c	  2398    {
; ..\component\CanSM\Implementation\CanSM.c	  2399      CanSM_DetErrorId = CANSM_E_PARAM_POINTER;
; ..\component\CanSM\Implementation\CanSM.c	  2400      /* \trace SPEC-828 */
; ..\component\CanSM\Implementation\CanSM.c	  2401    }
; ..\component\CanSM\Implementation\CanSM.c	  2402    else if ( CanSM_HasChannelConfig() )
; ..\component\CanSM\Implementation\CanSM.c	  2403  #endif /* (  CANSM_USE_INIT_POINTER ) */
; ..\component\CanSM\Implementation\CanSM.c	  2404    {
; ..\component\CanSM\Implementation\CanSM.c	  2405  
; ..\component\CanSM\Implementation\CanSM.c	  2406      if ( CanSM_IsInitialized == CANSM_INITFUNCTION_NOT_CALLED )
	movh.a	a2,#@his(CanSM_IsInitialized)
	lea	a2,[a2]@los(CanSM_IsInitialized)
	ld.bu	d15,[a2]
.L607:
	jne	d15,#0,.L25
.L337:
	fcall	.cocofun_1
.L608:
	st.b	[a15]10,d15
.L609:
	st.b	[a15]14,d15
.L610:
	st.b	[a15]15,d15
.L611:
	mov.u	d0,#65535
	st.h	[a15]2,d0
.L612:
	st.b	[a15]4,d15
.L613:
	st.b	[a15]5,d15
.L614:
	st.b	[a15]6,d15
.L615:
	mov	d0,#1
	st.b	[a15]11,d0
.L616:
	st.b	[a15]12,d15
.L617:
	st.b	[a15]7,d15
.L344:
	st.h	[a15],d15
.L618:
	mov	d1,#34
	st.b	[a15]9,d1
.L338:

; ..\component\CanSM\Implementation\CanSM.c	  2407      {
; ..\component\CanSM\Implementation\CanSM.c	  2408        /* lint -e442 -e440 */
; ..\component\CanSM\Implementation\CanSM.c	  2409        for ( CanSM_CanNetworkIdx = 0; CanSM_CanNetworkIdx < CanSM_GetSizeOfChannelVarRecord(); CanSM_CanNetworkIdx++ ) /* lint +e442 +e440 */
; ..\component\CanSM\Implementation\CanSM.c	  2410        {
; ..\component\CanSM\Implementation\CanSM.c	  2411  
; ..\component\CanSM\Implementation\CanSM.c	  2412          CanSM_InitializeVariables( (CanSM_SizeOfChannelVarRecordType)CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  2413  #if( CANSM_EXTENDED_RAM_CHECK == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2414          Appl_CanSM_RamCheckStart( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ) );
; ..\component\CanSM\Implementation\CanSM.c	  2415  #endif /* CANSM_EXTENDED_RAM_CHECK  */
; ..\component\CanSM\Implementation\CanSM.c	  2416  
; ..\component\CanSM\Implementation\CanSM.c	  2417        } /* end for ( each CAN channel index ) */
; ..\component\CanSM\Implementation\CanSM.c	  2418  
; ..\component\CanSM\Implementation\CanSM.c	  2419        CanSM_IsInitialized = CANSM_PRE_INITIALIZED;
	st.b	[a2],d0
.L619:
	st.b	[a15]17,d15
	st.b	[a15]13,d15
.L25:

; ..\component\CanSM\Implementation\CanSM.c	  2420  
; ..\component\CanSM\Implementation\CanSM.c	  2421      } /* CANSM_PRE_INITIALIZED */
; ..\component\CanSM\Implementation\CanSM.c	  2422    }
; ..\component\CanSM\Implementation\CanSM.c	  2423  #if ( CANSM_USE_INIT_POINTER != STD_OFF )
; ..\component\CanSM\Implementation\CanSM.c	  2424    else
; ..\component\CanSM\Implementation\CanSM.c	  2425    {
; ..\component\CanSM\Implementation\CanSM.c	  2426      /* MISRA QAC */ /* inactive configuration without channels, valid for PBS */
; ..\component\CanSM\Implementation\CanSM.c	  2427    }
; ..\component\CanSM\Implementation\CanSM.c	  2428  #endif /* ( CANSM_USE_INIT_POINTER != STD_OFF ) */
; ..\component\CanSM\Implementation\CanSM.c	  2429  
; ..\component\CanSM\Implementation\CanSM.c	  2430  #if (  ( CANSM_DEV_ERROR_REPORT == STD_ON ) && ( CANSM_USE_INIT_POINTER == STD_ON )  )
; ..\component\CanSM\Implementation\CanSM.c	  2431    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  2432    {
; ..\component\CanSM\Implementation\CanSM.c	  2433      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_INIT, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  2434      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  2435    }
; ..\component\CanSM\Implementation\CanSM.c	  2436  #else /* CANSM_DEV_ERROR_REPORT CANSM_USE_INIT_POINTER */
; ..\component\CanSM\Implementation\CanSM.c	  2437    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  2438  #endif /* CANSM_DEV_ERROR_REPORT CANSM_USE_INIT_POINTER */
; ..\component\CanSM\Implementation\CanSM.c	  2439  
; ..\component\CanSM\Implementation\CanSM.c	  2440  
; ..\component\CanSM\Implementation\CanSM.c	  2441  } /* End Func CanSM_PreInit() */
	ret
.L333:
	
__CanSM_PreInit_function_end:
	.size	CanSM_PreInit,__CanSM_PreInit_function_end-CanSM_PreInit
.L195:
	; End of function
	
	.sdecl	'.text.CanSM..cocofun_1',code,cluster('.cocofun_1')
	.sect	'.text.CanSM..cocofun_1'
	.align	2
; Function .cocofun_1
.L144:
.cocofun_1:	.type	func
; Function body .cocofun_1, coco_iter:0
	movh.a	a15,#@his(CanSM_ChannelVarRecord)
	lea	a15,[a15]@los(CanSM_ChannelVarRecord)
.L838:
	fret
.L255:
	; End of function
	.sdecl	'.text.CanSM.CanSM_Init',code,cluster('CanSM_Init')
	.sect	'.text.CanSM.CanSM_Init'
	.align	2
	
	.global	CanSM_Init

; ..\component\CanSM\Implementation\CanSM.c	  2442  
; ..\component\CanSM\Implementation\CanSM.c	  2443  
; ..\component\CanSM\Implementation\CanSM.c	  2444  
; ..\component\CanSM\Implementation\CanSM.c	  2445  /*********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2446   * CanSM_Init
; ..\component\CanSM\Implementation\CanSM.c	  2447   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2448  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2449   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2450   *
; ..\component\CanSM\Implementation\CanSM.c	  2451   *
; ..\component\CanSM\Implementation\CanSM.c	  2452   *
; ..\component\CanSM\Implementation\CanSM.c	  2453   *
; ..\component\CanSM\Implementation\CanSM.c	  2454   *
; ..\component\CanSM\Implementation\CanSM.c	  2455   */
; ..\component\CanSM\Implementation\CanSM.c	  2456  FUNC(void, CANSM_CODE) CanSM_Init( CONSTP2CONST( CanSM_ConfigType, AUTOMATIC, CANSM_CONST ) ConfigPtr )
; Function CanSM_Init
.L146:
CanSM_Init:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  2457  { /* \trace SPEC-834, SPEC-47130 */
; ..\component\CanSM\Implementation\CanSM.c	  2458    CanSM_ChannelVarRecordIterType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  2459  
; ..\component\CanSM\Implementation\CanSM.c	  2460    CanSM_PreInit( ConfigPtr ); /* SBSW_CANSM_CFG_POINTER */ /* CanSM_InitializeVariables */ /* function call is redundant if CanSM_PreInit() is used actually and has no effect */
	call	CanSM_PreInit
.L476:

; ..\component\CanSM\Implementation\CanSM.c	  2461  
; ..\component\CanSM\Implementation\CanSM.c	  2462    if ( CanSM_IsInitialized == CANSM_PRE_INITIALIZED )
	movh.a	a15,#@his(CanSM_IsInitialized)
	lea	a15,[a15]@los(CanSM_IsInitialized)
	ld.bu	d15,[a15]
.L624:
	jne	d15,#1,.L26
.L625:

; ..\component\CanSM\Implementation\CanSM.c	  2463    {
; ..\component\CanSM\Implementation\CanSM.c	  2464      CanSM_IsInitialized = CANSM_INITFUNCTION_RUNNING;
	mov	d15,#2
	st.b	[a15],d15
.L354:
	movh.a	a4,#@his(CanSM_ChannelVarRecord)
	lea	a4,[a4]@los(CanSM_ChannelVarRecord)
.L626:
	lea	a12,[a4]11
.L627:
	mov	d4,#0
	st.b	[a12],d4
.L628:
	call	CanSM_NetworkStatemachine
.L629:
	mov	d15,#1
	st.b	[a12],d15
.L355:

; ..\component\CanSM\Implementation\CanSM.c	  2465  
; ..\component\CanSM\Implementation\CanSM.c	  2466      /* lint -e442 -e440 */
; ..\component\CanSM\Implementation\CanSM.c	  2467      for ( CanSM_CanNetworkIdx = 0; CanSM_CanNetworkIdx < CanSM_GetSizeOfChannelVarRecord(); CanSM_CanNetworkIdx++ ) /* lint +e442 +e440 */
; ..\component\CanSM\Implementation\CanSM.c	  2468      {
; ..\component\CanSM\Implementation\CanSM.c	  2469  
; ..\component\CanSM\Implementation\CanSM.c	  2470        CanSM_UninitToNoCom( (CanSM_SizeOfChannelVarRecordType)CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  2471  
; ..\component\CanSM\Implementation\CanSM.c	  2472      } /* end for ( each CAN channel index ) */
; ..\component\CanSM\Implementation\CanSM.c	  2473  
; ..\component\CanSM\Implementation\CanSM.c	  2474      CanSM_IsInitialized = CANSM_INITFUNCTION_FINISHED;
	mov	d15,#3
	st.b	[a15],d15
.L26:

; ..\component\CanSM\Implementation\CanSM.c	  2475    } /* CANSM_PRE_INITIALIZED */
; ..\component\CanSM\Implementation\CanSM.c	  2476  
; ..\component\CanSM\Implementation\CanSM.c	  2477  } /* End Func CanSM_Init() */
	ret
.L350:
	
__CanSM_Init_function_end:
	.size	CanSM_Init,__CanSM_Init_function_end-CanSM_Init
.L200:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_MainFunction',code,cluster('CanSM_MainFunction')
	.sect	'.text.CanSM.CanSM_MainFunction'
	.align	2
	
	.global	CanSM_MainFunction

; ..\component\CanSM\Implementation\CanSM.c	  2478  
; ..\component\CanSM\Implementation\CanSM.c	  2479  
; ..\component\CanSM\Implementation\CanSM.c	  2480  
; ..\component\CanSM\Implementation\CanSM.c	  2481  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2482   *  CanSM_MainFunction
; ..\component\CanSM\Implementation\CanSM.c	  2483   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2484  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2485   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2486   *
; ..\component\CanSM\Implementation\CanSM.c	  2487   *
; ..\component\CanSM\Implementation\CanSM.c	  2488   *
; ..\component\CanSM\Implementation\CanSM.c	  2489   *
; ..\component\CanSM\Implementation\CanSM.c	  2490   *
; ..\component\CanSM\Implementation\CanSM.c	  2491   *
; ..\component\CanSM\Implementation\CanSM.c	  2492   *
; ..\component\CanSM\Implementation\CanSM.c	  2493   *
; ..\component\CanSM\Implementation\CanSM.c	  2494   *
; ..\component\CanSM\Implementation\CanSM.c	  2495   *
; ..\component\CanSM\Implementation\CanSM.c	  2496   *
; ..\component\CanSM\Implementation\CanSM.c	  2497   */
; ..\component\CanSM\Implementation\CanSM.c	  2498  FUNC(void, CANSM_CODE) CanSM_MainFunction( void )
; Function CanSM_MainFunction
.L148:
CanSM_MainFunction:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  2499  { /* \trace SPEC-853 */
; ..\component\CanSM\Implementation\CanSM.c	  2500    P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr;
; ..\component\CanSM\Implementation\CanSM.c	  2501    CanSM_ChannelVarRecordIterType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  2502  
; ..\component\CanSM\Implementation\CanSM.c	  2503    if ( CanSM_IsInitialized == CANSM_INITFUNCTION_FINISHED )
	fcall	.cocofun_2
.L697:
	jne	d15,#3,.L27
.L380:

; ..\component\CanSM\Implementation\CanSM.c	  2504    {
; ..\component\CanSM\Implementation\CanSM.c	  2505  
; ..\component\CanSM\Implementation\CanSM.c	  2506      /* \trace SPEC-11386 */
; ..\component\CanSM\Implementation\CanSM.c	  2507      /* lint -e442 -e440 */
; ..\component\CanSM\Implementation\CanSM.c	  2508      for ( CanSM_CanNetworkIdx = 0; CanSM_CanNetworkIdx < CanSM_GetSizeOfChannelVarRecord(); CanSM_CanNetworkIdx++ ) /* lint +e442 +e440 */
; ..\component\CanSM\Implementation\CanSM.c	  2509      {
; ..\component\CanSM\Implementation\CanSM.c	  2510        CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
	fcall	.cocofun_1
.L698:
	mov.aa	a13,a15
	ld.bu	d15,[+a13]4
.L699:
	lea	a12,[a15]9
.L700:
	ld.hu	d0,[a15]0
.L701:
	ld.bu	d1,[a12]
.L702:

; ..\component\CanSM\Implementation\CanSM.c	  1550    if (  ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_FULL_COMMUNICATION ) && ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState > CANSM_S_SILENTCOM )   )      (inlined)
	jne	d15,#2,.L28
.L703:
	mov	d2,#32
.L704:

; ..\component\CanSM\Implementation\CanSM.c	  1550    if (  ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_FULL_COMMUNICATION ) && ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState > CANSM_S_SILENTCOM )   )      (inlined)
	jge.u	d2,d1,.L29
.L705:
	mov	d0,#0
.L706:
	mov	d1,#2

; ..\component\CanSM\Implementation\CanSM.c	  1552      (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */      (inlined)
	j	.L30
.L27:

; ..\component\CanSM\Implementation\CanSM.c	  2511  
; ..\component\CanSM\Implementation\CanSM.c	  2512        CanSM_EvaluateComModeRequest( (CanSM_SizeOfChannelVarRecordType)CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2513  
; ..\component\CanSM\Implementation\CanSM.c	  2514        SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_1(); /* RequestComMode( ) StartWakeupSources( ) StopWakeupSources( ) ControllerBusOff( ) TxTimeoutException( ) SetEcuPassive( )  */
; ..\component\CanSM\Implementation\CanSM.c	  2515  
; ..\component\CanSM\Implementation\CanSM.c	  2516        if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible == CANSM_NOBODY )
; ..\component\CanSM\Implementation\CanSM.c	  2517        { /* BswM state has been changed and has to be handled by MainFunction */
; ..\component\CanSM\Implementation\CanSM.c	  2518          (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible = CANSM_SID_MAINFUNCTION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2519        }
; ..\component\CanSM\Implementation\CanSM.c	  2520  
; ..\component\CanSM\Implementation\CanSM.c	  2521        CanSM_HandleBusOffInSilent( (CanSM_SizeOfChannelVarRecordType)CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2522        CanSM_EvaluateMaxModeRequests( (CanSM_SizeOfChannelVarRecordType)CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2523        CanSM_TimerHandling( CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2524  
; ..\component\CanSM\Implementation\CanSM.c	  2525        SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_1();
; ..\component\CanSM\Implementation\CanSM.c	  2526  
; ..\component\CanSM\Implementation\CanSM.c	  2527        SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_1(); /* RequestComMode( ) StartWakeupSources( ) StopWakeupSources( ) ControllerBusOff( ) TxTimeoutException( ) SetEcuPassive( )  */
; ..\component\CanSM\Implementation\CanSM.c	  2528        if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer == CANSM_TIMER_EXPIRED ) && ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState & CANSM_S_INTERIM_STATE_FILTER ) >= CANSM_S_INTERIM_STATE_DETECTED ) )
; ..\component\CanSM\Implementation\CanSM.c	  2529        {
; ..\component\CanSM\Implementation\CanSM.c	  2530  
; ..\component\CanSM\Implementation\CanSM.c	  2531          CanSM_NetworkStatemachine( (CanSM_SizeOfChannelVarRecordType)CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2532  
; ..\component\CanSM\Implementation\CanSM.c	  2533        }
; ..\component\CanSM\Implementation\CanSM.c	  2534        SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_1();
; ..\component\CanSM\Implementation\CanSM.c	  2535  
; ..\component\CanSM\Implementation\CanSM.c	  2536        CanSM_CheckModeIndication( (CanSM_SizeOfChannelVarRecordType)CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr, CANSM_SID_MAINFUNCTION ); /* Function checks if mode has changed */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2537  
; ..\component\CanSM\Implementation\CanSM.c	  2538      } /* end for ( CanNetworkIdx ) each CanSM network */
; ..\component\CanSM\Implementation\CanSM.c	  2539  
; ..\component\CanSM\Implementation\CanSM.c	  2540    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  2541  
; ..\component\CanSM\Implementation\CanSM.c	  2542  
; ..\component\CanSM\Implementation\CanSM.c	  2543  } /* end Func CanSM_MainFunction() */ /* PRQA S 6050 */  /* MD_MSR_STCAL */
	ret

; ..\component\CanSM\Implementation\CanSM.c	  1550    if (  ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_FULL_COMMUNICATION ) && ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState > CANSM_S_SILENTCOM )   )      (inlined)
.L29:
.L28:

; ..\component\CanSM\Implementation\CanSM.c	  1560    else if (  ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_NO_COMMUNICATION ) && ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState <= CANSM_S_SILENTCOM )  ) /* check if ShutDown is already running; NoComReq and not on the way */      (inlined)
	jne	d15,#0,.L31
.L707:
	mov	d15,#32
.L708:

; ..\component\CanSM\Implementation\CanSM.c	  1560    else if (  ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_NO_COMMUNICATION ) && ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState <= CANSM_S_SILENTCOM )  ) /* check if ShutDown is already running; NoComReq and not on the way */      (inlined)
	jlt.u	d15,d1,.L32
.L387:
	mov	d0,#0
	st.b	[a15]13,d0
.L709:
	mov	d1,#34
	st.b	[a15]17,d0

; ..\component\CanSM\Implementation\CanSM.c	  1560    else if (  ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_NO_COMMUNICATION ) && ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState <= CANSM_S_SILENTCOM )  ) /* check if ShutDown is already running; NoComReq and not on the way */      (inlined)
.L32:
.L31:
.L30:
	st.b	[a12],d1
	st.h	[a15],d0
.L710:
	call	SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_1
.L711:
	lea	a2,[a15]11
	ld.bu	d15,[a2]
.L712:
	jne	d15,#1,.L33
.L713:
	mov	d15,#5
	st.b	[a2],d15
.L33:
	lea	a14,[a15]15
	ld.bu	d15,[a14]
.L714:

; ..\component\CanSM\Implementation\CanSM.c	  1587    if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffFlag == TRUE ) && ( ( (*CanSM_CurrentChannelVarPtr ).CanSM_CurrentState ) == CANSM_S_SILENTCOM ) )      (inlined)
	jne	d15,#1,.L34
.L715:
	ld.bu	d0,[a12]
.L716:
	mov	d15,#32
.L717:

; ..\component\CanSM\Implementation\CanSM.c	  1587    if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffFlag == TRUE ) && ( ( (*CanSM_CurrentChannelVarPtr ).CanSM_CurrentState ) == CANSM_S_SILENTCOM ) )      (inlined)
	jne	d15,d0,.L35
.L718:
	mov	d4,#0
.L719:
	mov	d5,#2
	call	CanIf_SetControllerMode
.L720:
	mov	d15,#0
	st.b	[a15]14,d15
.L721:
	st.b	[a14],d15

; ..\component\CanSM\Implementation\CanSM.c	  1587    if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffFlag == TRUE ) && ( ( (*CanSM_CurrentChannelVarPtr ).CanSM_CurrentState ) == CANSM_S_SILENTCOM ) )      (inlined)
.L35:
.L34:
	lea	a14,[a15]10
	ld.bu	d15,[a14]
.L722:

; ..\component\CanSM\Implementation\CanSM.c	  1621    if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeRequestRepetitionCounter > CanSM_GetModeRequestRepetitionMaxOfPCConfig() )      (inlined)
	jlt.u	d15,#11,.L36
.L723:
	fcall	.cocofun_3
.L724:
	mov	d6,#5
.L725:
	mov	d7,#10
	call	Det_ReportError
.L726:
	mov	d15,#0
	st.b	[a14],d15
.L403:
	st.b	[a15]13,d15
.L727:
	st.h	[a15],d15
.L728:
	mov	d0,#34
	st.b	[a12],d0
.L729:
	st.b	[a15]17,d15
.L404:
	st.b	[a13],d15

; ..\component\CanSM\Implementation\CanSM.c	  1621    if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeRequestRepetitionCounter > CanSM_GetModeRequestRepetitionMaxOfPCConfig() )      (inlined)
.L36:
	ld.hu	d15,[a15]0
.L730:

; ..\component\CanSM\Implementation\CanSM.c	  1674    if ( (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer > CANSM_TIMER_EXPIRED )      (inlined)
	jeq	d15,#0,.L37
.L731:
	add	d15,#-1
	st.h	[a15],d15
.L732:

; ..\component\CanSM\Implementation\CanSM.c	  1678      if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer == CANSM_TIMER_EXPIRED ) &&      (inlined)
	jne	d15,#0,.L38
.L733:
	ld.bu	d0,[a12]
.L734:
	mov	d15,#17
.L735:

; ..\component\CanSM\Implementation\CanSM.c	  1680          ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState != CANSM_BO_BUS_OFF_CHECK ) &&      (inlined)
	jeq	d15,d0,.L39
.L736:
	mov	d15,#20
.L737:

; ..\component\CanSM\Implementation\CanSM.c	  1682          ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState != CANSM_BO_TX_OFFLINE )  )      (inlined)
	jeq	d15,d0,.L40
.L738:
	ld.bu	d15,[a14]
.L739:
	add	d15,#1
	st.b	[a14],d15

; ..\component\CanSM\Implementation\CanSM.c	  1678      if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer == CANSM_TIMER_EXPIRED ) &&      (inlined)
.L40:

; ..\component\CanSM\Implementation\CanSM.c	  1682          ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState != CANSM_BO_TX_OFFLINE )  )      (inlined)
.L39:
.L38:

; ..\component\CanSM\Implementation\CanSM.c	  1674    if ( (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer > CANSM_TIMER_EXPIRED )      (inlined)
.L37:
	call	SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_1
.L740:
	call	SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_1
.L741:
	ld.hu	d15,[a15]0
.L742:
	jne	d15,#0,.L41
.L743:
	ld.bu	d15,[a12]
.L744:
	and	d15,#15
.L745:
	jeq	d15,#0,.L42
.L746:
	mov	d4,#0
	mov.aa	a4,a15
	call	CanSM_NetworkStatemachine
.L42:
.L41:
	call	SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_1
.L747:
	mov	d4,#0
.L748:
	mov	d5,#5
	mov.aa	a4,a15
	j	CanSM_CheckModeIndication
.L377:
	
__CanSM_MainFunction_function_end:
	.size	CanSM_MainFunction,__CanSM_MainFunction_function_end-CanSM_MainFunction
.L225:
	; End of function
	
	.sdecl	'.text.CanSM..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.CanSM..cocofun_3'
	.align	2
; Function .cocofun_3
.L150:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	mov	d4,#140
.L484:
	mov	d5,#0
	fret
.L265:
	; End of function
	.sdecl	'.text.CanSM..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.CanSM..cocofun_2'
	.align	2
; Function .cocofun_2
.L152:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0
	movh.a	a15,#@his(CanSM_IsInitialized)
.L482:
	ld.bu	d15,[a15]@los(CanSM_IsInitialized)
.L843:
	fret
.L260:
	; End of function
	.sdecl	'.text.CanSM.CanSM_RequestComMode',code,cluster('CanSM_RequestComMode')
	.sect	'.text.CanSM.CanSM_RequestComMode'
	.align	2
	
	.global	CanSM_RequestComMode

; ..\component\CanSM\Implementation\CanSM.c	  2544  
; ..\component\CanSM\Implementation\CanSM.c	  2545  
; ..\component\CanSM\Implementation\CanSM.c	  2546  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2547   *  CanSM_RequestComMode
; ..\component\CanSM\Implementation\CanSM.c	  2548   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2549  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2550   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2551   *
; ..\component\CanSM\Implementation\CanSM.c	  2552   *
; ..\component\CanSM\Implementation\CanSM.c	  2553   *
; ..\component\CanSM\Implementation\CanSM.c	  2554   *
; ..\component\CanSM\Implementation\CanSM.c	  2555   *
; ..\component\CanSM\Implementation\CanSM.c	  2556   *
; ..\component\CanSM\Implementation\CanSM.c	  2557   *
; ..\component\CanSM\Implementation\CanSM.c	  2558   */
; ..\component\CanSM\Implementation\CanSM.c	  2559  FUNC(Std_ReturnType, CANSM_CODE) CanSM_RequestComMode( NetworkHandleType CanSM_NetworkHandle, ComM_ModeType CanSM_RequestedComMMode )
; Function CanSM_RequestComMode
.L154:
CanSM_RequestComMode:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  2560  { /* \trace SPEC-819 */
; ..\component\CanSM\Implementation\CanSM.c	  2561    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  2562    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  2563    Std_ReturnType CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  2564  
; ..\component\CanSM\Implementation\CanSM.c	  2565    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  2566  #if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2567    CanSM_StdReturnValue = E_NOT_OK;
; ..\component\CanSM\Implementation\CanSM.c	  2568    if ( CanSM_IsInitialized != CANSM_INITFUNCTION_FINISHED )
	movh.a	a15,#@his(CanSM_IsInitialized)
.L565:
	mov	d8,d5
	ld.bu	d0,[a15]@los(CanSM_IsInitialized)
.L477:
	mov	d9,#0
.L478:
	mov	d10,#1
.L479:
	jeq	d0,#3,.L43
.L566:

; ..\component\CanSM\Implementation\CanSM.c	  2569    {
; ..\component\CanSM\Implementation\CanSM.c	  2570      CanSM_DetErrorId = CANSM_E_UNINIT;
	mov	d9,d10
	j	.L44
.L43:

; ..\component\CanSM\Implementation\CanSM.c	  2571      /* \trace SPEC-11287 */ /* \trace SPEC-829 */
; ..\component\CanSM\Implementation\CanSM.c	  2572    }
; ..\component\CanSM\Implementation\CanSM.c	  2573    else
; ..\component\CanSM\Implementation\CanSM.c	  2574  #endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2575    {
; ..\component\CanSM\Implementation\CanSM.c	  2576  
; ..\component\CanSM\Implementation\CanSM.c	  2577      CanSM_CanNetworkIdx = CanSM_MapNetworkHandleToLocalIndex( CanSM_NetworkHandle );
; ..\component\CanSM\Implementation\CanSM.c	  2578      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  2579  #if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2580      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
	jeq	d4,#0,.L45
.L567:

; ..\component\CanSM\Implementation\CanSM.c	  2581      {
; ..\component\CanSM\Implementation\CanSM.c	  2582        CanSM_DetErrorId = CANSM_E_INVALID_NETWORK_HANDLE;
	mov	d9,#3
	j	.L46
.L45:

; ..\component\CanSM\Implementation\CanSM.c	  2583        /* \trace SPEC-655 */ /* \trace SPEC-830 */ /* \trace SPEC-817 */
; ..\component\CanSM\Implementation\CanSM.c	  2584      }
; ..\component\CanSM\Implementation\CanSM.c	  2585      else
; ..\component\CanSM\Implementation\CanSM.c	  2586  #endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2587      {
; ..\component\CanSM\Implementation\CanSM.c	  2588        /* \trace SPEC-823 */
; ..\component\CanSM\Implementation\CanSM.c	  2589        P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  2590  
; ..\component\CanSM\Implementation\CanSM.c	  2591        /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  2592  #if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2593        if (  ( CanSM_RequestedComMMode != COMM_NO_COMMUNICATION ) && ( CanSM_RequestedComMMode != COMM_FULL_COMMUNICATION ) && ( CanSM_RequestedComMMode != COMM_SILENT_COMMUNICATION )  )
	jeq	d8,#0,.L47
.L568:
	jeq	d8,#2,.L48
.L569:
	jne	d8,#1,.L49
.L48:
.L47:

; ..\component\CanSM\Implementation\CanSM.c	  2594        { /*   Request denied because out of value range */
; ..\component\CanSM\Implementation\CanSM.c	  2595          CanSM_DetErrorId = CANSM_E_INVALID_COMM_REQUEST;
; ..\component\CanSM\Implementation\CanSM.c	  2596          /* \trace SPEC-654 */
; ..\component\CanSM\Implementation\CanSM.c	  2597  
; ..\component\CanSM\Implementation\CanSM.c	  2598        }
; ..\component\CanSM\Implementation\CanSM.c	  2599        else if ( ( CanSM_RequestedComMMode == COMM_SILENT_COMMUNICATION ) && ( ( (*CanSM_CurrentChannelVarPtr ).CanSM_CurrentState ) > CANSM_S_SILENTCOM ) )
	jne	d8,#1,.L50
.L570:
	movh.a	a15,#@his(CanSM_ChannelVarRecord+9)
.L571:
	ld.bu	d0,[a15]@los(CanSM_ChannelVarRecord+9)
.L572:
	mov	d1,#32
.L573:
	jge.u	d1,d0,.L51
.L49:

; ..\component\CanSM\Implementation\CanSM.c	  2600        { /* Request silent in state NoCom OR Silent, Request denied */
; ..\component\CanSM\Implementation\CanSM.c	  2601          CanSM_DetErrorId = CANSM_E_INVALID_COMM_REQUEST;
	mov	d9,#8
	j	.L52
.L51:
.L50:
	fcall	.cocofun_1
.L480:

; ..\component\CanSM\Implementation\CanSM.c	  2602          /* \trace SPEC-820 */ /* \trace SPEC-825 */
; ..\component\CanSM\Implementation\CanSM.c	  2603        }
; ..\component\CanSM\Implementation\CanSM.c	  2604        else
; ..\component\CanSM\Implementation\CanSM.c	  2605  #endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2606        {
; ..\component\CanSM\Implementation\CanSM.c	  2607          CanSM_StdReturnValue = E_OK;
	mov	d10,#0
	mov.aa	a2,a15
.L319:
	ld.bu	d0,[+a2]4
.L574:

; ..\component\CanSM\Implementation\CanSM.c	  1720    if ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode != CanSM_RequestedComMMode )      (inlined)
	jeq	d0,d8,.L53
.L575:
	st.b	[a2],d8
.L576:
	call	SuspendAllInterrupts
.L481:

; ..\component\CanSM\Implementation\CanSM.c	  1728      if (   ( CanSM_RequestedComMMode == COMM_FULL_COMMUNICATION ) && (  ( (*CanSM_CurrentChannelVarPtr ).CanSM_CurrentState == CANSM_S_SILENTCOM )      (inlined)
	jne	d8,#2,.L54
.L577:
	ld.bu	d15,[a15]9
.L578:
	mov	d0,#32
.L579:

; ..\component\CanSM\Implementation\CanSM.c	  1728      if (   ( CanSM_RequestedComMMode == COMM_FULL_COMMUNICATION ) && (  ( (*CanSM_CurrentChannelVarPtr ).CanSM_CurrentState == CANSM_S_SILENTCOM )      (inlined)
	jeq	d15,d0,.L55
.L580:
	mov	d0,#96
.L581:

; ..\component\CanSM\Implementation\CanSM.c	  1730            || ( (*CanSM_CurrentChannelVarPtr ).CanSM_CurrentState == CANSM_S_STARTWAKEUPSOURCES_SUCCESSFUL )      (inlined)
	jne	d15,d0,.L56
.L55:
	mov	d4,#0
	mov.aa	a4,a15
	call	CanSM_FullComReached
.L582:

; ..\component\CanSM\Implementation\CanSM.c	  1734        CanSM_FullComReached( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */      (inlined)
	j	.L57

; ..\component\CanSM\Implementation\CanSM.c	  1728      if (   ( CanSM_RequestedComMMode == COMM_FULL_COMMUNICATION ) && (  ( (*CanSM_CurrentChannelVarPtr ).CanSM_CurrentState == CANSM_S_SILENTCOM )      (inlined)
.L56:

; ..\component\CanSM\Implementation\CanSM.c	  1732            )   )      (inlined)
.L54:

; ..\component\CanSM\Implementation\CanSM.c	  1736      else if ( ( CanSM_RequestedComMMode != COMM_FULL_COMMUNICATION ) && ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState & CANSM_S_NO_BUS_OFF ) == CANSM_S_NO_BUS_OFF ) ) /* Meta FullCom */ /* CANSM_S_FULLCOM CANSM_BO_BUS_OFF_CHECK CANSM_S_NO_BUS_OFF    CANSM_S_FULLCOM_ENSURED CANSM_BO_TX_OFFLINE  */ /* PRQA S 0715 2 */ /* MD_MSR_Dir1.1 */      (inlined)
	jeq	d8,#2,.L58
.L583:
	ld.bu	d15,[a15]9
.L584:

; ..\component\CanSM\Implementation\CanSM.c	  1736      else if ( ( CanSM_RequestedComMMode != COMM_FULL_COMMUNICATION ) && ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState & CANSM_S_NO_BUS_OFF ) == CANSM_S_NO_BUS_OFF ) ) /* Meta FullCom */ /* CANSM_S_FULLCOM CANSM_BO_BUS_OFF_CHECK CANSM_S_NO_BUS_OFF    CANSM_S_FULLCOM_ENSURED CANSM_BO_TX_OFFLINE  */ /* PRQA S 0715 2 */ /* MD_MSR_Dir1.1 */      (inlined)
	jz.t	d15:4,.L59
.L585:
	mov	d4,#0
	mov.aa	a4,a15
	call	CanSM_FullComToSilent

; ..\component\CanSM\Implementation\CanSM.c	  1736      else if ( ( CanSM_RequestedComMMode != COMM_FULL_COMMUNICATION ) && ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState & CANSM_S_NO_BUS_OFF ) == CANSM_S_NO_BUS_OFF ) ) /* Meta FullCom */ /* CANSM_S_FULLCOM CANSM_BO_BUS_OFF_CHECK CANSM_S_NO_BUS_OFF    CANSM_S_FULLCOM_ENSURED CANSM_BO_TX_OFFLINE  */ /* PRQA S 0715 2 */ /* MD_MSR_Dir1.1 */      (inlined)
.L59:
.L58:
.L57:
	lea	a2,[a15]11
	ld.bu	d15,[a2]
.L586:

; ..\component\CanSM\Implementation\CanSM.c	  1747      if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible == CANSM_NOBODY )      (inlined)
	jne	d15,#1,.L60
.L587:
	mov	d15,#2
	st.b	[a2],d15

; ..\component\CanSM\Implementation\CanSM.c	  1747      if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible == CANSM_NOBODY )      (inlined)
.L60:
	call	ResumeAllInterrupts
.L588:
	mov	d4,#0
	mov.aa	a4,a15
	mov	d5,#2
	call	CanSM_CheckModeIndication

; ..\component\CanSM\Implementation\CanSM.c	  1720    if ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode != CanSM_RequestedComMMode )      (inlined)
.L53:
.L52:
.L46:
.L44:

; ..\component\CanSM\Implementation\CanSM.c	  2608  
; ..\component\CanSM\Implementation\CanSM.c	  2609          CanSM_HandleComModeRequest( CanSM_RequestedComMMode, CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  2610          /* \trace SPEC-826 */
; ..\component\CanSM\Implementation\CanSM.c	  2611          /* \trace..SPEC-11294 */
; ..\component\CanSM\Implementation\CanSM.c	  2612          /* \trace..SPEC-11406 */
; ..\component\CanSM\Implementation\CanSM.c	  2613          /* \trace..SPEC-11418 */
; ..\component\CanSM\Implementation\CanSM.c	  2614  
; ..\component\CanSM\Implementation\CanSM.c	  2615        } /* end if valid ComModeRequest */
; ..\component\CanSM\Implementation\CanSM.c	  2616  
; ..\component\CanSM\Implementation\CanSM.c	  2617      } /* NetworkHandle index in list ==> NetworkHandle valid */
; ..\component\CanSM\Implementation\CanSM.c	  2618    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  2619  
; ..\component\CanSM\Implementation\CanSM.c	  2620  #if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2621    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
	jeq	d9,#0,.L61
.L589:

; ..\component\CanSM\Implementation\CanSM.c	  2622    {
; ..\component\CanSM\Implementation\CanSM.c	  2623      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_REQUESTCOMMODE, CanSM_DetErrorId );
	fcall	.cocofun_3
.L590:
	mov	d6,#2
.L591:
	mov	d7,d9
	call	Det_ReportError
.L61:

; ..\component\CanSM\Implementation\CanSM.c	  2624      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  2625    }
; ..\component\CanSM\Implementation\CanSM.c	  2626  #else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  2627    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  2628  #endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2629  
; ..\component\CanSM\Implementation\CanSM.c	  2630    return CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  2631  
; ..\component\CanSM\Implementation\CanSM.c	  2632  } /* end Func CanSM_RequestComMode() */ /* PRQA S 6030 */ /* MD_MSR_STCYC */
	mov	d2,d10
	ret
.L313:
	
__CanSM_RequestComMode_function_end:
	.size	CanSM_RequestComMode,__CanSM_RequestComMode_function_end-CanSM_RequestComMode
.L185:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_GetCurrentComMode',code,cluster('CanSM_GetCurrentComMode')
	.sect	'.text.CanSM.CanSM_GetCurrentComMode'
	.align	2
	
	.global	CanSM_GetCurrentComMode

; ..\component\CanSM\Implementation\CanSM.c	  2633  
; ..\component\CanSM\Implementation\CanSM.c	  2634  
; ..\component\CanSM\Implementation\CanSM.c	  2635  
; ..\component\CanSM\Implementation\CanSM.c	  2636  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2637   *  CanSM_GetCurrentComMode
; ..\component\CanSM\Implementation\CanSM.c	  2638   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2639  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2640   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2641   *
; ..\component\CanSM\Implementation\CanSM.c	  2642   *
; ..\component\CanSM\Implementation\CanSM.c	  2643   *
; ..\component\CanSM\Implementation\CanSM.c	  2644   *
; ..\component\CanSM\Implementation\CanSM.c	  2645   *
; ..\component\CanSM\Implementation\CanSM.c	  2646   *
; ..\component\CanSM\Implementation\CanSM.c	  2647   *
; ..\component\CanSM\Implementation\CanSM.c	  2648   */
; ..\component\CanSM\Implementation\CanSM.c	  2649  FUNC(Std_ReturnType, CANSM_CODE) CanSM_GetCurrentComMode( NetworkHandleType CanSM_NetworkHandle, P2VAR( ComM_ModeType, AUTOMATIC, CANSM_APPL_VAR ) CanSM_ComMModePtr )
; Function CanSM_GetCurrentComMode
.L156:
CanSM_GetCurrentComMode:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  2650  { /* \trace SPEC-837 */
; ..\component\CanSM\Implementation\CanSM.c	  2651    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  2652    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
	mov	d7,#0
.L485:

; ..\component\CanSM\Implementation\CanSM.c	  2653    Std_ReturnType CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  2654  
; ..\component\CanSM\Implementation\CanSM.c	  2655    /* \trace SPEC-691 */
; ..\component\CanSM\Implementation\CanSM.c	  2656    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  2657  #if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2658    CanSM_StdReturnValue = E_NOT_OK;
; ..\component\CanSM\Implementation\CanSM.c	  2659    if ( CanSM_IsInitialized != CANSM_INITFUNCTION_FINISHED )
	mov	d8,#1
	fcall	.cocofun_2
.L596:
	jeq	d15,#3,.L63
.L597:

; ..\component\CanSM\Implementation\CanSM.c	  2660    {
; ..\component\CanSM\Implementation\CanSM.c	  2661      CanSM_DetErrorId = CANSM_E_UNINIT;
	mov	d7,d8
	j	.L64
.L63:

; ..\component\CanSM\Implementation\CanSM.c	  2662      /* \trace SPEC-836 */
; ..\component\CanSM\Implementation\CanSM.c	  2663    }
; ..\component\CanSM\Implementation\CanSM.c	  2664    else if ( CanSM_ComMModePtr == NULL_PTR )
	jnz.a	a4,.L65
.L598:

; ..\component\CanSM\Implementation\CanSM.c	  2665    {
; ..\component\CanSM\Implementation\CanSM.c	  2666      CanSM_DetErrorId = CANSM_E_PARAM_POINTER;
	mov	d7,#2
	j	.L66
.L65:

; ..\component\CanSM\Implementation\CanSM.c	  2667      /* \trace SPEC-840 */
; ..\component\CanSM\Implementation\CanSM.c	  2668    }
; ..\component\CanSM\Implementation\CanSM.c	  2669    else
; ..\component\CanSM\Implementation\CanSM.c	  2670  #endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2671    {
; ..\component\CanSM\Implementation\CanSM.c	  2672  
; ..\component\CanSM\Implementation\CanSM.c	  2673      CanSM_CanNetworkIdx = CanSM_MapNetworkHandleToLocalIndex( CanSM_NetworkHandle );
; ..\component\CanSM\Implementation\CanSM.c	  2674      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  2675  #if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2676      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
	jeq	d4,#0,.L67
.L599:

; ..\component\CanSM\Implementation\CanSM.c	  2677      {
; ..\component\CanSM\Implementation\CanSM.c	  2678        CanSM_DetErrorId = CANSM_E_INVALID_NETWORK_HANDLE;
	mov	d7,#3
	j	.L68
.L67:

; ..\component\CanSM\Implementation\CanSM.c	  2679        /* \trace SPEC-835 */
; ..\component\CanSM\Implementation\CanSM.c	  2680        /* \trace SPEC-841 */
; ..\component\CanSM\Implementation\CanSM.c	  2681      }
; ..\component\CanSM\Implementation\CanSM.c	  2682      else
; ..\component\CanSM\Implementation\CanSM.c	  2683  #endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2684      {
; ..\component\CanSM\Implementation\CanSM.c	  2685        /* \trace SPEC-838 */
; ..\component\CanSM\Implementation\CanSM.c	  2686  
; ..\component\CanSM\Implementation\CanSM.c	  2687        CanSM_StdReturnValue = E_OK;
; ..\component\CanSM\Implementation\CanSM.c	  2688        *CanSM_ComMModePtr   = CanSM_GetChannelVarRecord( CanSM_CanNetworkIdx ).CanSM_IndicatedComMode; /* SBSW_CANSM_GETCURRENTCOMMODE_POINTERWRITEACCESS */
	mov	d8,#0
	movh.a	a15,#@his(CanSM_ChannelVarRecord+5)
.L600:
	ld.bu	d15,[a15]@los(CanSM_ChannelVarRecord+5)
.L601:
	st.b	[a4],d15
.L68:
.L66:
.L64:

; ..\component\CanSM\Implementation\CanSM.c	  2689        /* \trace SPEC-839 */
; ..\component\CanSM\Implementation\CanSM.c	  2690      } /* NetworkHandle index in list */
; ..\component\CanSM\Implementation\CanSM.c	  2691    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  2692  
; ..\component\CanSM\Implementation\CanSM.c	  2693  #if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2694    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
	jeq	d7,#0,.L69
.L602:

; ..\component\CanSM\Implementation\CanSM.c	  2695    {
; ..\component\CanSM\Implementation\CanSM.c	  2696      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_GETCURRENTCOMMODE, CanSM_DetErrorId );
	fcall	.cocofun_3
.L483:
	mov	d6,#3
	call	Det_ReportError
.L69:

; ..\component\CanSM\Implementation\CanSM.c	  2697      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  2698    }
; ..\component\CanSM\Implementation\CanSM.c	  2699  #else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  2700    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  2701  #endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2702  
; ..\component\CanSM\Implementation\CanSM.c	  2703    return CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  2704  
; ..\component\CanSM\Implementation\CanSM.c	  2705  } /* end Func CanSM_GetCurrentComMode() */
	mov	d2,d8
	ret
.L327:
	
__CanSM_GetCurrentComMode_function_end:
	.size	CanSM_GetCurrentComMode,__CanSM_GetCurrentComMode_function_end-CanSM_GetCurrentComMode
.L190:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_ControllerBusOff',code,cluster('CanSM_ControllerBusOff')
	.sect	'.text.CanSM.CanSM_ControllerBusOff'
	.align	2
	
	.global	CanSM_ControllerBusOff

; ..\component\CanSM\Implementation\CanSM.c	  2706  
; ..\component\CanSM\Implementation\CanSM.c	  2707  
; ..\component\CanSM\Implementation\CanSM.c	  2708  
; ..\component\CanSM\Implementation\CanSM.c	  2709  #if( CANSM_EXTENDED_RAM_CHECK == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2710  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2711   *  CanSM_RamCheckStatus
; ..\component\CanSM\Implementation\CanSM.c	  2712   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2713  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2714   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2715   *
; ..\component\CanSM\Implementation\CanSM.c	  2716   *
; ..\component\CanSM\Implementation\CanSM.c	  2717   *
; ..\component\CanSM\Implementation\CanSM.c	  2718   *
; ..\component\CanSM\Implementation\CanSM.c	  2719   *
; ..\component\CanSM\Implementation\CanSM.c	  2720   *
; ..\component\CanSM\Implementation\CanSM.c	  2721   */
; ..\component\CanSM\Implementation\CanSM.c	  2722  FUNC(Std_ReturnType, CANSM_CODE) CanSM_RamCheckStatus( NetworkHandleType CanSM_NetworkHandle )
; ..\component\CanSM\Implementation\CanSM.c	  2723  {
; ..\component\CanSM\Implementation\CanSM.c	  2724    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  2725    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  2726    Std_ReturnType CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  2727  
; ..\component\CanSM\Implementation\CanSM.c	  2728  #if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2729    CanSM_StdReturnValue = E_NOT_OK;
; ..\component\CanSM\Implementation\CanSM.c	  2730    if ( CanSM_IsInitialized != CANSM_INITFUNCTION_FINISHED )
; ..\component\CanSM\Implementation\CanSM.c	  2731    {
; ..\component\CanSM\Implementation\CanSM.c	  2732      CanSM_DetErrorId = CANSM_E_UNINIT;
; ..\component\CanSM\Implementation\CanSM.c	  2733    }
; ..\component\CanSM\Implementation\CanSM.c	  2734    else
; ..\component\CanSM\Implementation\CanSM.c	  2735  #endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2736    {
; ..\component\CanSM\Implementation\CanSM.c	  2737  
; ..\component\CanSM\Implementation\CanSM.c	  2738      CanSM_CanNetworkIdx = CanSM_MapNetworkHandleToLocalIndex( CanSM_NetworkHandle );
; ..\component\CanSM\Implementation\CanSM.c	  2739  #if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2740      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
; ..\component\CanSM\Implementation\CanSM.c	  2741      {
; ..\component\CanSM\Implementation\CanSM.c	  2742        CanSM_DetErrorId = CANSM_E_INVALID_NETWORK_HANDLE;
; ..\component\CanSM\Implementation\CanSM.c	  2743      }
; ..\component\CanSM\Implementation\CanSM.c	  2744      else
; ..\component\CanSM\Implementation\CanSM.c	  2745  #endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2746      {
; ..\component\CanSM\Implementation\CanSM.c	  2747  
; ..\component\CanSM\Implementation\CanSM.c	  2748        CanSM_StdReturnValue = CanSM_GetChannelVarRecord( CanSM_CanNetworkIdx ).CanSM_RamCheckState;
; ..\component\CanSM\Implementation\CanSM.c	  2749      } /* NetworkHandle index in list */
; ..\component\CanSM\Implementation\CanSM.c	  2750    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  2751  
; ..\component\CanSM\Implementation\CanSM.c	  2752  #if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2753    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  2754    {
; ..\component\CanSM\Implementation\CanSM.c	  2755      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_RAMCHECKSTATUS, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  2756    }
; ..\component\CanSM\Implementation\CanSM.c	  2757  #else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  2758    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  2759  #endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2760  
; ..\component\CanSM\Implementation\CanSM.c	  2761    return CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  2762  
; ..\component\CanSM\Implementation\CanSM.c	  2763  } /* end Func CanSM_RamCheckStatus() */
; ..\component\CanSM\Implementation\CanSM.c	  2764  #endif /* CANSM_EXTENDED_RAM_CHECK  */
; ..\component\CanSM\Implementation\CanSM.c	  2765  
; ..\component\CanSM\Implementation\CanSM.c	  2766  
; ..\component\CanSM\Implementation\CanSM.c	  2767  
; ..\component\CanSM\Implementation\CanSM.c	  2768  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2769   *  CanSM_ControllerBusOff
; ..\component\CanSM\Implementation\CanSM.c	  2770   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2771  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2772   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2773   *
; ..\component\CanSM\Implementation\CanSM.c	  2774   *
; ..\component\CanSM\Implementation\CanSM.c	  2775   *
; ..\component\CanSM\Implementation\CanSM.c	  2776   *
; ..\component\CanSM\Implementation\CanSM.c	  2777   *
; ..\component\CanSM\Implementation\CanSM.c	  2778   *
; ..\component\CanSM\Implementation\CanSM.c	  2779   */
; ..\component\CanSM\Implementation\CanSM.c	  2780  FUNC(void, CANSM_CODE) CanSM_ControllerBusOff( uint8 CanSM_ControllerId )
; Function CanSM_ControllerBusOff
.L158:
CanSM_ControllerBusOff:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  2781  { /* \trace SPEC-843 */
; ..\component\CanSM\Implementation\CanSM.c	  2782    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  2783    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  2784    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  2785  #if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2786    if ( CanSM_IsInitialized != CANSM_INITFUNCTION_FINISHED )
	mov	d8,#0
	fcall	.cocofun_2
.L508:
	jeq	d15,#3,.L71
.L509:

; ..\component\CanSM\Implementation\CanSM.c	  2787    {
; ..\component\CanSM\Implementation\CanSM.c	  2788      CanSM_DetErrorId = CANSM_E_UNINIT;
	mov	d8,#1
	j	.L72
.L71:

; ..\component\CanSM\Implementation\CanSM.c	  2789      /* \trace SPEC-844 */
; ..\component\CanSM\Implementation\CanSM.c	  2790    }
; ..\component\CanSM\Implementation\CanSM.c	  2791    else
; ..\component\CanSM\Implementation\CanSM.c	  2792  #endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2793    {
; ..\component\CanSM\Implementation\CanSM.c	  2794  
; ..\component\CanSM\Implementation\CanSM.c	  2795      CanSM_CanNetworkIdx = CanSM_MapControllerIdToLocalIndex( CanSM_ControllerId );
; ..\component\CanSM\Implementation\CanSM.c	  2796      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  2797  #if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2798      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
	jeq	d4,#0,.L73
.L510:

; ..\component\CanSM\Implementation\CanSM.c	  2799      {
; ..\component\CanSM\Implementation\CanSM.c	  2800        CanSM_DetErrorId = CANSM_E_PARAM_CONTROLLER;
	mov	d8,#4
	j	.L74
.L73:
	fcall	.cocofun_1
.L486:
	lea	a2,[a15]14
	ld.bu	d0,[a2]
.L511:
	mov	d15,#255
.L512:

; ..\component\CanSM\Implementation\CanSM.c	  1871    if ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter < CANSM_COUNTER_MAX_VALUE )      (inlined)
	jge.u	d0,d15,.L75
.L513:
	add	d0,#1
	st.b	[a2],d0

; ..\component\CanSM\Implementation\CanSM.c	  1871    if ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter < CANSM_COUNTER_MAX_VALUE )      (inlined)
.L75:
	mov	d15,#1
	st.b	[a15]15,d15
.L514:
	call	SuspendAllInterrupts
.L487:
	lea	a2,[a15]9
	ld.bu	d0,[a2]
.L515:
	mov	d15,#17
.L516:

; ..\component\CanSM\Implementation\CanSM.c	  1879    if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_BO_BUS_OFF_CHECK ) || ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_S_NO_BUS_OFF ) ) /* CANSM_S_FULLCOM_ENSURED  CANSM_S_NO_BUS_OFF */      (inlined)
	jeq	d15,d0,.L76
.L517:
	mov	d15,#16
.L518:

; ..\component\CanSM\Implementation\CanSM.c	  1879    if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_BO_BUS_OFF_CHECK ) || ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_S_NO_BUS_OFF ) ) /* CANSM_S_FULLCOM_ENSURED  CANSM_S_NO_BUS_OFF */      (inlined)
	jne	d15,d0,.L77
.L76:
	mov	d0,#3
	st.b	[a15]13,d0
.L519:
	mov	d15,#1
	st.b	[a15]6,d15
.L520:
	mov	d15,#0
	st.h	[a15],d15
.L521:
	st.b	[a2],d0
.L277:
	lea	a2,[a15]11
	ld.bu	d15,[a2]
.L522:

; ..\component\CanSM\Implementation\CanSM.c	  1884      if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible == CANSM_NOBODY )      (inlined)
	jne	d15,#1,.L78
.L523:
	mov	d15,#4
	st.b	[a2],d15

; ..\component\CanSM\Implementation\CanSM.c	  1884      if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible == CANSM_NOBODY )      (inlined)
.L78:

; ..\component\CanSM\Implementation\CanSM.c	  1879    if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_BO_BUS_OFF_CHECK ) || ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_S_NO_BUS_OFF ) ) /* CANSM_S_FULLCOM_ENSURED  CANSM_S_NO_BUS_OFF */      (inlined)
.L77:
	call	ResumeAllInterrupts
.L524:
	mov	d4,#0
	mov.aa	a4,a15
	mov	d5,#4
	call	CanSM_CheckModeIndication

; ..\component\CanSM\Implementation\CanSM.c	  2801        /* \trace SPEC-845 */
; ..\component\CanSM\Implementation\CanSM.c	  2802      }
; ..\component\CanSM\Implementation\CanSM.c	  2803      else
.L74:
.L72:

; ..\component\CanSM\Implementation\CanSM.c	  2804  #endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2805      {
; ..\component\CanSM\Implementation\CanSM.c	  2806  
; ..\component\CanSM\Implementation\CanSM.c	  2807        CanSM_BusOffIndicated( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  2808        /* \trace SPEC-842 */
; ..\component\CanSM\Implementation\CanSM.c	  2809        /* \trace..SPEC-11398 */
; ..\component\CanSM\Implementation\CanSM.c	  2810        /* \trace..SPEC-2181140 */
; ..\component\CanSM\Implementation\CanSM.c	  2811      } /* ControllerId valid; found in configuration */
; ..\component\CanSM\Implementation\CanSM.c	  2812  
; ..\component\CanSM\Implementation\CanSM.c	  2813    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  2814  
; ..\component\CanSM\Implementation\CanSM.c	  2815  #if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2816    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
	jeq	d8,#0,.L79
.L525:

; ..\component\CanSM\Implementation\CanSM.c	  2817    {
; ..\component\CanSM\Implementation\CanSM.c	  2818      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_CONTROLLERBUSOFF, CanSM_DetErrorId );
	fcall	.cocofun_3
.L526:
	mov	d6,#4
.L527:
	mov	d7,d8
.L488:
	j	Det_ReportError
.L79:

; ..\component\CanSM\Implementation\CanSM.c	  2819      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  2820    }
; ..\component\CanSM\Implementation\CanSM.c	  2821  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  2822    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PClint: not accessed, not used. GHS: was set but never used */ /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  2823  #endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2824  
; ..\component\CanSM\Implementation\CanSM.c	  2825  } /* end Func CanSM_ControllerBusOff() */
	ret
.L268:
	
__CanSM_ControllerBusOff_function_end:
	.size	CanSM_ControllerBusOff,__CanSM_ControllerBusOff_function_end-CanSM_ControllerBusOff
.L175:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_ControllerModeIndication',code,cluster('CanSM_ControllerModeIndication')
	.sect	'.text.CanSM.CanSM_ControllerModeIndication'
	.align	2
	
	.global	CanSM_ControllerModeIndication

; ..\component\CanSM\Implementation\CanSM.c	  2826  
; ..\component\CanSM\Implementation\CanSM.c	  2827  
; ..\component\CanSM\Implementation\CanSM.c	  2828  
; ..\component\CanSM\Implementation\CanSM.c	  2829  #if ( CANSM_ECU_PASSIVE_MODE == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2830  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2831   *  CanSM_SetEcuPassive
; ..\component\CanSM\Implementation\CanSM.c	  2832   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2833  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2834   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2835   *
; ..\component\CanSM\Implementation\CanSM.c	  2836   *
; ..\component\CanSM\Implementation\CanSM.c	  2837   *
; ..\component\CanSM\Implementation\CanSM.c	  2838   */
; ..\component\CanSM\Implementation\CanSM.c	  2839  /* \trace..SPEC-2181318 */
; ..\component\CanSM\Implementation\CanSM.c	  2840  FUNC(void, CANSM_CODE) CanSM_SetEcuPassive( boolean CanSM_TxOfflineActive )
; ..\component\CanSM\Implementation\CanSM.c	  2841  {
; ..\component\CanSM\Implementation\CanSM.c	  2842    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  2843  
; ..\component\CanSM\Implementation\CanSM.c	  2844    if ( CanSM_EcuPassiveMode != CanSM_TxOfflineActive )
; ..\component\CanSM\Implementation\CanSM.c	  2845    {
; ..\component\CanSM\Implementation\CanSM.c	  2846      CanSM_EcuPassiveMode = CanSM_TxOfflineActive;
; ..\component\CanSM\Implementation\CanSM.c	  2847      /* \trace SPEC-2181272 */
; ..\component\CanSM\Implementation\CanSM.c	  2848  
; ..\component\CanSM\Implementation\CanSM.c	  2849  
; ..\component\CanSM\Implementation\CanSM.c	  2850      /* lint -e442  -e440 */
; ..\component\CanSM\Implementation\CanSM.c	  2851      for ( CanSM_CanNetworkIdx = 0; CanSM_CanNetworkIdx < CanSM_GetSizeOfChannelVarRecord(); CanSM_CanNetworkIdx++ ) /* lint +e442 +e440 */
; ..\component\CanSM\Implementation\CanSM.c	  2852      {
; ..\component\CanSM\Implementation\CanSM.c	  2853        P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  2854  
; ..\component\CanSM\Implementation\CanSM.c	  2855        SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_5(); /* RequestComMode MainFunction */
; ..\component\CanSM\Implementation\CanSM.c	  2856        if ( ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_S_FULLCOM_ENSURED ) || ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_BO_BUS_OFF_CHECK ) ) )
; ..\component\CanSM\Implementation\CanSM.c	  2857        { /* BOR SM not running a recovery, State IS ONLINE */
; ..\component\CanSM\Implementation\CanSM.c	  2858  
; ..\component\CanSM\Implementation\CanSM.c	  2859          if ( CanSM_EcuPassiveMode == TRUE )
; ..\component\CanSM\Implementation\CanSM.c	  2860          { /* Activate ECU passive mode immediately */
; ..\component\CanSM\Implementation\CanSM.c	  2861            (void)CanIf_SetPduMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_SET_TX_OFFLINE_ACTIVE );
; ..\component\CanSM\Implementation\CanSM.c	  2862            /* \trace..SPEC-2181273 */
; ..\component\CanSM\Implementation\CanSM.c	  2863  
; ..\component\CanSM\Implementation\CanSM.c	  2864          }
; ..\component\CanSM\Implementation\CanSM.c	  2865          else
; ..\component\CanSM\Implementation\CanSM.c	  2866          { /* DeActivate ECU passive mode immediately */
; ..\component\CanSM\Implementation\CanSM.c	  2867            (void)CanIf_SetPduMode( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CANIF_SET_TX_ONLINE );
; ..\component\CanSM\Implementation\CanSM.c	  2868            /* \trace..SPEC-2181274 */
; ..\component\CanSM\Implementation\CanSM.c	  2869  
; ..\component\CanSM\Implementation\CanSM.c	  2870          }
; ..\component\CanSM\Implementation\CanSM.c	  2871  
; ..\component\CanSM\Implementation\CanSM.c	  2872        } /* end if full Com && BOR SM not running a recovery */
; ..\component\CanSM\Implementation\CanSM.c	  2873        SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_5();
; ..\component\CanSM\Implementation\CanSM.c	  2874  
; ..\component\CanSM\Implementation\CanSM.c	  2875      } /* end for ( each CAN channel index ) */
; ..\component\CanSM\Implementation\CanSM.c	  2876  
; ..\component\CanSM\Implementation\CanSM.c	  2877    } /* Request toggled */
; ..\component\CanSM\Implementation\CanSM.c	  2878  
; ..\component\CanSM\Implementation\CanSM.c	  2879  } /* end CanSM_SetEcuPassive() */
; ..\component\CanSM\Implementation\CanSM.c	  2880  #endif /* CANSM_ECU_PASSIVE_MODE == STD_ON  */
; ..\component\CanSM\Implementation\CanSM.c	  2881  
; ..\component\CanSM\Implementation\CanSM.c	  2882  
; ..\component\CanSM\Implementation\CanSM.c	  2883  
; ..\component\CanSM\Implementation\CanSM.c	  2884  #if ( CANSM_PREVENT_BUSSLEEP_AT_STARTUP == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2885  /*********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2886   *  CanSM_PreventBusSleepAtStartUp
; ..\component\CanSM\Implementation\CanSM.c	  2887   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2888  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2889   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2890   *
; ..\component\CanSM\Implementation\CanSM.c	  2891   *
; ..\component\CanSM\Implementation\CanSM.c	  2892   *
; ..\component\CanSM\Implementation\CanSM.c	  2893   *
; ..\component\CanSM\Implementation\CanSM.c	  2894   *
; ..\component\CanSM\Implementation\CanSM.c	  2895   *
; ..\component\CanSM\Implementation\CanSM.c	  2896   */
; ..\component\CanSM\Implementation\CanSM.c	  2897  FUNC(Std_ReturnType, CANSM_CODE) CanSM_PreventBusSleepAtStartUp( NetworkHandleType CanSM_NetworkHandle )
; ..\component\CanSM\Implementation\CanSM.c	  2898  {
; ..\component\CanSM\Implementation\CanSM.c	  2899    Std_ReturnType CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  2900  
; ..\component\CanSM\Implementation\CanSM.c	  2901  # if ( CANSM_USE_INIT_POINTER == STD_OFF )
; ..\component\CanSM\Implementation\CanSM.c	  2902    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  2903    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  2904    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  2905  #  if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2906    CanSM_StdReturnValue = E_NOT_OK;
; ..\component\CanSM\Implementation\CanSM.c	  2907    if ( CanSM_IsInitialized == CANSM_INITFUNCTION_FINISHED )
; ..\component\CanSM\Implementation\CanSM.c	  2908    {
; ..\component\CanSM\Implementation\CanSM.c	  2909      CanSM_DetErrorId = CANSM_E_INITIALIZED;
; ..\component\CanSM\Implementation\CanSM.c	  2910    }
; ..\component\CanSM\Implementation\CanSM.c	  2911    else
; ..\component\CanSM\Implementation\CanSM.c	  2912  #  endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2913    {
; ..\component\CanSM\Implementation\CanSM.c	  2914  
; ..\component\CanSM\Implementation\CanSM.c	  2915      CanSM_CanNetworkIdx = CanSM_MapNetworkHandleToLocalIndex( CanSM_NetworkHandle );
; ..\component\CanSM\Implementation\CanSM.c	  2916      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  2917  #  if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2918      if ( CanSM_CanNetworkIdx >= CANSM_ENABLE_SET_BUS_SLEEP_ARRAY_MAX_SIZE )
; ..\component\CanSM\Implementation\CanSM.c	  2919      {
; ..\component\CanSM\Implementation\CanSM.c	  2920        CanSM_DetErrorId = CANSM_E_INVALID_NETWORK_HANDLE;
; ..\component\CanSM\Implementation\CanSM.c	  2921      }
; ..\component\CanSM\Implementation\CanSM.c	  2922      else
; ..\component\CanSM\Implementation\CanSM.c	  2923  #  endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2924      {
; ..\component\CanSM\Implementation\CanSM.c	  2925  
; ..\component\CanSM\Implementation\CanSM.c	  2926        CanSM_EnableSetBusSleep[ CanSM_CanNetworkIdx ] = CANSM_PREVENT_BUS_SLEEP_MODE; /* SBSW_CANSM_ENABLE_SET_BUS_SLEEP_ARRAY */
; ..\component\CanSM\Implementation\CanSM.c	  2927        CanSM_StdReturnValue = E_OK;
; ..\component\CanSM\Implementation\CanSM.c	  2928  
; ..\component\CanSM\Implementation\CanSM.c	  2929      } /* NetworkHandle index in list ==> NetworkHandle valid */
; ..\component\CanSM\Implementation\CanSM.c	  2930    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  2931  
; ..\component\CanSM\Implementation\CanSM.c	  2932  #  if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2933    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  2934    {
; ..\component\CanSM\Implementation\CanSM.c	  2935      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_PREVENTBUSSLEEPATSTARTUP, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  2936      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  2937    }
; ..\component\CanSM\Implementation\CanSM.c	  2938  #  else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  2939    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  2940  #  endif /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  2941  
; ..\component\CanSM\Implementation\CanSM.c	  2942  # else /* CANSM_USE_INIT_POINTER */
; ..\component\CanSM\Implementation\CanSM.c	  2943    CANSM_DUMMY_STATEMENT( CanSM_NetworkHandle ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  2944    CanSM_StdReturnValue = E_NOT_OK;
; ..\component\CanSM\Implementation\CanSM.c	  2945  # endif /* CANSM_USE_INIT_POINTER */
; ..\component\CanSM\Implementation\CanSM.c	  2946  
; ..\component\CanSM\Implementation\CanSM.c	  2947    return CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  2948  
; ..\component\CanSM\Implementation\CanSM.c	  2949  } /* end CanSM_PreventBusSleepAtStartUp() */
; ..\component\CanSM\Implementation\CanSM.c	  2950  #endif /* ( CANSM_PREVENT_BUSSLEEP_AT_STARTUP == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  2951  
; ..\component\CanSM\Implementation\CanSM.c	  2952  
; ..\component\CanSM\Implementation\CanSM.c	  2953  
; ..\component\CanSM\Implementation\CanSM.c	  2954  #if( CANSM_EXTENDED_RAM_CHECK == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2955  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  2956   *  CanSM_RamCheckEnableMailbox
; ..\component\CanSM\Implementation\CanSM.c	  2957   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  2958  /*!
; ..\component\CanSM\Implementation\CanSM.c	  2959   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  2960   *
; ..\component\CanSM\Implementation\CanSM.c	  2961   *
; ..\component\CanSM\Implementation\CanSM.c	  2962   *
; ..\component\CanSM\Implementation\CanSM.c	  2963   *
; ..\component\CanSM\Implementation\CanSM.c	  2964   *
; ..\component\CanSM\Implementation\CanSM.c	  2965   *
; ..\component\CanSM\Implementation\CanSM.c	  2966   */
; ..\component\CanSM\Implementation\CanSM.c	  2967  FUNC(void, CANSM_CODE) CanSM_RamCheckEnableMailbox( NetworkHandleType CanSM_NetworkHandle, Can_HwHandleType CanSM_MailBoxHandle )
; ..\component\CanSM\Implementation\CanSM.c	  2968  { /* Context: CanSM_ControllerModeIndication, CANIF_CS_STOPPED received */
; ..\component\CanSM\Implementation\CanSM.c	  2969  
; ..\component\CanSM\Implementation\CanSM.c	  2970    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  2971    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  2972    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  2973  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2974    if ( CanSM_IsInitialized == CANSM_INITFUNCTION_NOT_CALLED )
; ..\component\CanSM\Implementation\CanSM.c	  2975    {
; ..\component\CanSM\Implementation\CanSM.c	  2976      CanSM_DetErrorId = CANSM_E_UNINIT;
; ..\component\CanSM\Implementation\CanSM.c	  2977    }
; ..\component\CanSM\Implementation\CanSM.c	  2978    else
; ..\component\CanSM\Implementation\CanSM.c	  2979  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2980    {
; ..\component\CanSM\Implementation\CanSM.c	  2981  
; ..\component\CanSM\Implementation\CanSM.c	  2982      CanSM_CanNetworkIdx = CanSM_MapNetworkHandleToLocalIndex( CanSM_NetworkHandle );
; ..\component\CanSM\Implementation\CanSM.c	  2983  
; ..\component\CanSM\Implementation\CanSM.c	  2984      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  2985  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  2986      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
; ..\component\CanSM\Implementation\CanSM.c	  2987      {
; ..\component\CanSM\Implementation\CanSM.c	  2988        CanSM_DetErrorId = CANSM_E_INVALID_NETWORK_HANDLE;
; ..\component\CanSM\Implementation\CanSM.c	  2989      }
; ..\component\CanSM\Implementation\CanSM.c	  2990      else
; ..\component\CanSM\Implementation\CanSM.c	  2991  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  2992      {
; ..\component\CanSM\Implementation\CanSM.c	  2993  
; ..\component\CanSM\Implementation\CanSM.c	  2994        CanIf_RamCheckEnableMailbox( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CanSM_MailBoxHandle );
; ..\component\CanSM\Implementation\CanSM.c	  2995  
; ..\component\CanSM\Implementation\CanSM.c	  2996      } /* CanSM_ControllerId index in list */
; ..\component\CanSM\Implementation\CanSM.c	  2997    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  2998  
; ..\component\CanSM\Implementation\CanSM.c	  2999  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3000    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  3001    {
; ..\component\CanSM\Implementation\CanSM.c	  3002      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_RAMCHECKENABLEMAILBOX, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  3003      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3004    }
; ..\component\CanSM\Implementation\CanSM.c	  3005  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3006    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3007  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3008  
; ..\component\CanSM\Implementation\CanSM.c	  3009  } /* CanSM_RamCheckEnableMailbox */
; ..\component\CanSM\Implementation\CanSM.c	  3010  #endif /* CANSM_EXTENDED_RAM_CHECK  */
; ..\component\CanSM\Implementation\CanSM.c	  3011  
; ..\component\CanSM\Implementation\CanSM.c	  3012  
; ..\component\CanSM\Implementation\CanSM.c	  3013  #if( CANSM_EXTENDED_RAM_CHECK == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3014  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3015   *  CanSM_RamCheckCorruptMailbox
; ..\component\CanSM\Implementation\CanSM.c	  3016   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3017  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3018   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3019   *
; ..\component\CanSM\Implementation\CanSM.c	  3020   *
; ..\component\CanSM\Implementation\CanSM.c	  3021   *
; ..\component\CanSM\Implementation\CanSM.c	  3022   *
; ..\component\CanSM\Implementation\CanSM.c	  3023   *
; ..\component\CanSM\Implementation\CanSM.c	  3024   *
; ..\component\CanSM\Implementation\CanSM.c	  3025   */
; ..\component\CanSM\Implementation\CanSM.c	  3026  FUNC(void, CANSM_CODE) CanSM_RamCheckCorruptMailbox( uint8 CanSM_ControllerId, Can_HwHandleType CanSM_MailBoxHandle )
; ..\component\CanSM\Implementation\CanSM.c	  3027  { /* Context: CanSM_ControllerModeIndication, CANIF_CS_STOPPED received */
; ..\component\CanSM\Implementation\CanSM.c	  3028  
; ..\component\CanSM\Implementation\CanSM.c	  3029    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  3030    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3031    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3032  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3033    if ( CanSM_IsInitialized == CANSM_INITFUNCTION_NOT_CALLED )
; ..\component\CanSM\Implementation\CanSM.c	  3034    {
; ..\component\CanSM\Implementation\CanSM.c	  3035      CanSM_DetErrorId = CANSM_E_UNINIT;
; ..\component\CanSM\Implementation\CanSM.c	  3036    }
; ..\component\CanSM\Implementation\CanSM.c	  3037    else
; ..\component\CanSM\Implementation\CanSM.c	  3038  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3039    {
; ..\component\CanSM\Implementation\CanSM.c	  3040  
; ..\component\CanSM\Implementation\CanSM.c	  3041      CanSM_CanNetworkIdx = CanSM_MapControllerIdToLocalIndex( CanSM_ControllerId );
; ..\component\CanSM\Implementation\CanSM.c	  3042      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3043  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3044      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
; ..\component\CanSM\Implementation\CanSM.c	  3045      {
; ..\component\CanSM\Implementation\CanSM.c	  3046        CanSM_DetErrorId = CANSM_E_PARAM_CONTROLLER;
; ..\component\CanSM\Implementation\CanSM.c	  3047      }
; ..\component\CanSM\Implementation\CanSM.c	  3048      else
; ..\component\CanSM\Implementation\CanSM.c	  3049  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3050      {
; ..\component\CanSM\Implementation\CanSM.c	  3051  
; ..\component\CanSM\Implementation\CanSM.c	  3052        Appl_CanSM_RamCheckCorruptMailbox( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ), CanSM_MailBoxHandle );
; ..\component\CanSM\Implementation\CanSM.c	  3053  
; ..\component\CanSM\Implementation\CanSM.c	  3054      } /* CanSM_ControllerId index in list */
; ..\component\CanSM\Implementation\CanSM.c	  3055    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  3056  
; ..\component\CanSM\Implementation\CanSM.c	  3057  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3058    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  3059    {
; ..\component\CanSM\Implementation\CanSM.c	  3060      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_RAMCHECKCORRUPTMAILBOX, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  3061      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3062    }
; ..\component\CanSM\Implementation\CanSM.c	  3063  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3064    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3065  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3066  
; ..\component\CanSM\Implementation\CanSM.c	  3067  } /* CanSM_RamCheckCorruptMailbox */
; ..\component\CanSM\Implementation\CanSM.c	  3068  #endif /* CANSM_EXTENDED_RAM_CHECK  */
; ..\component\CanSM\Implementation\CanSM.c	  3069  
; ..\component\CanSM\Implementation\CanSM.c	  3070  
; ..\component\CanSM\Implementation\CanSM.c	  3071  #if( CANSM_EXTENDED_RAM_CHECK == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3072  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3073   *  CanSM_RamCheckCorruptController
; ..\component\CanSM\Implementation\CanSM.c	  3074   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3075  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3076   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3077   *
; ..\component\CanSM\Implementation\CanSM.c	  3078   *
; ..\component\CanSM\Implementation\CanSM.c	  3079   *
; ..\component\CanSM\Implementation\CanSM.c	  3080   *
; ..\component\CanSM\Implementation\CanSM.c	  3081   *
; ..\component\CanSM\Implementation\CanSM.c	  3082   *
; ..\component\CanSM\Implementation\CanSM.c	  3083   */
; ..\component\CanSM\Implementation\CanSM.c	  3084  FUNC(void, CANSM_CODE) CanSM_RamCheckCorruptController( uint8 CanSM_ControllerId )
; ..\component\CanSM\Implementation\CanSM.c	  3085  { /* Context: CanSM_ControllerModeIndication, CANIF_CS_STOPPED received */
; ..\component\CanSM\Implementation\CanSM.c	  3086  
; ..\component\CanSM\Implementation\CanSM.c	  3087    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  3088    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3089    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3090  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3091    if ( CanSM_IsInitialized == CANSM_INITFUNCTION_NOT_CALLED )
; ..\component\CanSM\Implementation\CanSM.c	  3092    {
; ..\component\CanSM\Implementation\CanSM.c	  3093      CanSM_DetErrorId = CANSM_E_UNINIT;
; ..\component\CanSM\Implementation\CanSM.c	  3094    }
; ..\component\CanSM\Implementation\CanSM.c	  3095    else
; ..\component\CanSM\Implementation\CanSM.c	  3096  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3097    {
; ..\component\CanSM\Implementation\CanSM.c	  3098  
; ..\component\CanSM\Implementation\CanSM.c	  3099      CanSM_CanNetworkIdx = CanSM_MapControllerIdToLocalIndex( CanSM_ControllerId );
; ..\component\CanSM\Implementation\CanSM.c	  3100      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3101  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3102      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
; ..\component\CanSM\Implementation\CanSM.c	  3103      {
; ..\component\CanSM\Implementation\CanSM.c	  3104        CanSM_DetErrorId = CANSM_E_PARAM_CONTROLLER;
; ..\component\CanSM\Implementation\CanSM.c	  3105      }
; ..\component\CanSM\Implementation\CanSM.c	  3106      else
; ..\component\CanSM\Implementation\CanSM.c	  3107  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3108      {
; ..\component\CanSM\Implementation\CanSM.c	  3109  
; ..\component\CanSM\Implementation\CanSM.c	  3110        Appl_CanSM_RamCheckCorruptController( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ) );
; ..\component\CanSM\Implementation\CanSM.c	  3111  
; ..\component\CanSM\Implementation\CanSM.c	  3112      } /* CanSM_ControllerId index in list */
; ..\component\CanSM\Implementation\CanSM.c	  3113    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  3114  
; ..\component\CanSM\Implementation\CanSM.c	  3115  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3116    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  3117    {
; ..\component\CanSM\Implementation\CanSM.c	  3118      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_RAMCHECKCORRUPTCONTROLLER, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  3119      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3120    }
; ..\component\CanSM\Implementation\CanSM.c	  3121  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3122    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3123  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3124  
; ..\component\CanSM\Implementation\CanSM.c	  3125  } /* CanSM_RamCheckCorruptController */
; ..\component\CanSM\Implementation\CanSM.c	  3126  #endif /* CANSM_EXTENDED_RAM_CHECK  */
; ..\component\CanSM\Implementation\CanSM.c	  3127  
; ..\component\CanSM\Implementation\CanSM.c	  3128  
; ..\component\CanSM\Implementation\CanSM.c	  3129  
; ..\component\CanSM\Implementation\CanSM.c	  3130  
; ..\component\CanSM\Implementation\CanSM.c	  3131  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3132   *  CanSM_ControllerModeIndication
; ..\component\CanSM\Implementation\CanSM.c	  3133   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3134  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3135   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3136   *
; ..\component\CanSM\Implementation\CanSM.c	  3137   *
; ..\component\CanSM\Implementation\CanSM.c	  3138   *
; ..\component\CanSM\Implementation\CanSM.c	  3139   *
; ..\component\CanSM\Implementation\CanSM.c	  3140   *
; ..\component\CanSM\Implementation\CanSM.c	  3141   *
; ..\component\CanSM\Implementation\CanSM.c	  3142   *
; ..\component\CanSM\Implementation\CanSM.c	  3143   *
; ..\component\CanSM\Implementation\CanSM.c	  3144   */
; ..\component\CanSM\Implementation\CanSM.c	  3145  FUNC(void, CANSM_CODE) CanSM_ControllerModeIndication( uint8 CanSM_ControllerId, CanIf_ControllerModeType CanSM_ControllerMode )
; Function CanSM_ControllerModeIndication
.L160:
CanSM_ControllerModeIndication:	.type	func
	mov	d8,d5
.L490:

; ..\component\CanSM\Implementation\CanSM.c	  3146  { /* \trace SPEC-847 */
; ..\component\CanSM\Implementation\CanSM.c	  3147    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  3148    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3149    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3150  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3151    if ( CanSM_IsInitialized == CANSM_INITFUNCTION_NOT_CALLED )
	mov	d9,#0
	fcall	.cocofun_2
.L532:
	jne	d15,#0,.L80
.L533:

; ..\component\CanSM\Implementation\CanSM.c	  3152    {
; ..\component\CanSM\Implementation\CanSM.c	  3153      CanSM_DetErrorId = CANSM_E_UNINIT;
	mov	d9,#1
	j	.L81
.L80:

; ..\component\CanSM\Implementation\CanSM.c	  3154      /* \trace SPEC-848 */
; ..\component\CanSM\Implementation\CanSM.c	  3155    }
; ..\component\CanSM\Implementation\CanSM.c	  3156    else
; ..\component\CanSM\Implementation\CanSM.c	  3157  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3158    {
; ..\component\CanSM\Implementation\CanSM.c	  3159  
; ..\component\CanSM\Implementation\CanSM.c	  3160      CanSM_CanNetworkIdx = CanSM_MapControllerIdToLocalIndex( CanSM_ControllerId );
; ..\component\CanSM\Implementation\CanSM.c	  3161      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3162  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3163      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
	jeq	d4,#0,.L82
.L534:

; ..\component\CanSM\Implementation\CanSM.c	  3164      {
; ..\component\CanSM\Implementation\CanSM.c	  3165        CanSM_DetErrorId = CANSM_E_PARAM_CONTROLLER;
	mov	d9,#4
	j	.L83
.L82:

; ..\component\CanSM\Implementation\CanSM.c	  3166        /* \trace SPEC-846 */
; ..\component\CanSM\Implementation\CanSM.c	  3167      }
; ..\component\CanSM\Implementation\CanSM.c	  3168      else
; ..\component\CanSM\Implementation\CanSM.c	  3169  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3170      {
; ..\component\CanSM\Implementation\CanSM.c	  3171  
; ..\component\CanSM\Implementation\CanSM.c	  3172        P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  3173  
; ..\component\CanSM\Implementation\CanSM.c	  3174        SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_4(); /* CanIR BO */
	call	SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_4
.L289:
	fcall	.cocofun_1
.L489:
	lea	a12,[a15]9
	ld.bu	d0,[a12]
.L290:

; ..\component\CanSM\Implementation\CanSM.c	  3175  
; ..\component\CanSM\Implementation\CanSM.c	  3176        if ( CanSM_ControllerMode == CANIF_CS_STOPPED )
	jne	d8,#1,.L84
.L297:

; ..\component\CanSM\Implementation\CanSM.c	  1304    if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SU_CC_STOPPED )      (inlined)
	jne	d0,#2,.L85
.L535:
	mov	d0,#3
	st.b	[a12],d0
.L536:

; ..\component\CanSM\Implementation\CanSM.c	  1325      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SU_CC_STARTED; /* CANSM_S_BR_CC_STARTED */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */      (inlined)
	j	.L86

; ..\component\CanSM\Implementation\CanSM.c	  1304    if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SU_CC_STOPPED )      (inlined)
.L85:
	mov	d15,#34
.L537:

; ..\component\CanSM\Implementation\CanSM.c	  1331    else if ( CANSM_SD_CC_STOPPED == (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState )      (inlined)
	jne	d15,d0,.L87
.L538:

; ..\component\CanSM\Implementation\CanSM.c	  3177        {
; ..\component\CanSM\Implementation\CanSM.c	  3178          CanSM_CtrlStoppedIndicated( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d15,#35
	j	.L88
.L84:

; ..\component\CanSM\Implementation\CanSM.c	  3179        } /* end if CanIf CC CANIF_CS_STOPPED */
; ..\component\CanSM\Implementation\CanSM.c	  3180        else if ( CanSM_ControllerMode == CANIF_CS_SLEEP )
	jne	d8,#3,.L89
.L299:
	mov	d15,#35
.L539:

; ..\component\CanSM\Implementation\CanSM.c	  1396    if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_CC_SLEEP )      (inlined)
	jne	d15,d0,.L90
.L540:
	mov.aa	a4,a15
	call	CanSM_NoComReached
.L300:

; ..\component\CanSM\Implementation\CanSM.c	  3181        {
; ..\component\CanSM\Implementation\CanSM.c	  3182          CanSM_CtrlSleepIndicated( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	j	.L91
.L89:

; ..\component\CanSM\Implementation\CanSM.c	  3183        } /* end if CanIf CC CANIF_CS_SLEEP */
; ..\component\CanSM\Implementation\CanSM.c	  3184        else if ( ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SU_CC_STARTED ) && ( CanSM_ControllerMode == CANIF_CS_STARTED ) )
	jne	d0,#3,.L92
.L541:
	jne	d8,#2,.L93
.L307:
	mov	d15,#0
	st.b	[a15]10,d15
.L542:
	mov.aa	a2,a15
	ld.bu	d15,[+a2]4
.L543:
	and	d15,#127
	st.b	[a2],d15
.L544:

; ..\component\CanSM\Implementation\CanSM.c	  1238    if ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_NO_COMMUNICATION )      (inlined)
	jne	d15,#0,.L94
.L545:
	mov	d15,#96
.L88:
	st.b	[a12],d15

; ..\component\CanSM\Implementation\CanSM.c	  1331    else if ( CANSM_SD_CC_STOPPED == (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState )      (inlined)
.L86:
	mov	d15,#0

; ..\component\CanSM\Implementation\CanSM.c	  1240      (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_S_STARTWAKEUPSOURCES_SUCCESSFUL; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */      (inlined)
	j	.L95

; ..\component\CanSM\Implementation\CanSM.c	  1238    if ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_NO_COMMUNICATION )      (inlined)
.L94:
	lea	a13,[a15]14
	ld.bu	d15,[a13]
.L546:

; ..\component\CanSM\Implementation\CanSM.c	  1245    if ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter == CANSM_BOR_NONE )      (inlined)
	jne	d15,#0,.L96
.L547:
	mov	d4,#0
	mov.aa	a4,a15
	call	CanSM_FullComReached
.L548:

; ..\component\CanSM\Implementation\CanSM.c	  1251      CanSM_FullComReached( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */      (inlined)
	j	.L97

; ..\component\CanSM\Implementation\CanSM.c	  1245    if ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter == CANSM_BOR_NONE )      (inlined)
.L96:
	mov	d4,#0
.L549:
	mov	d5,#3
	call	CanIf_SetPduMode
.L550:
	mov	d15,#20
	st.b	[a12],d15
.L551:
	mov	d0,#300
.L552:
	ld.bu	d15,[a13]
.L553:

; ..\component\CanSM\Implementation\CanSM.c	  1264      if ( CanSM_GetBorCounterL1ToL2OfChannelConfig( CanSM_CanNetworkIdx ) > (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter )      (inlined)
	ge.u	d15,d15,#5
.L554:
	sel	d15,d15,d0,#100

; ..\component\CanSM\Implementation\CanSM.c	  1243    else      (inlined)
.L95:
	st.h	[a15],d15

; ..\component\CanSM\Implementation\CanSM.c	  1258    else      (inlined)
.L97:
.L93:
.L92:
.L91:

; ..\component\CanSM\Implementation\CanSM.c	  1396    if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_CC_SLEEP )      (inlined)
.L90:

; ..\component\CanSM\Implementation\CanSM.c	  1331    else if ( CANSM_SD_CC_STOPPED == (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState )      (inlined)
.L87:

; ..\component\CanSM\Implementation\CanSM.c	  3185        {
; ..\component\CanSM\Implementation\CanSM.c	  3186          CanSM_CtrlStartedIndicated( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3187        } /* end if CanIf CC CANIF_CS_STARTED */
; ..\component\CanSM\Implementation\CanSM.c	  3188        else
; ..\component\CanSM\Implementation\CanSM.c	  3189        {
; ..\component\CanSM\Implementation\CanSM.c	  3190          /* MISRA QAC */
; ..\component\CanSM\Implementation\CanSM.c	  3191        }
; ..\component\CanSM\Implementation\CanSM.c	  3192  
; ..\component\CanSM\Implementation\CanSM.c	  3193  
; ..\component\CanSM\Implementation\CanSM.c	  3194        if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible == CANSM_NOBODY ) /* PRQA S 0715 4 */ /* MD_MSR_Dir1.1 */
	lea	a2,[a15]11
	ld.bu	d15,[a2]
.L555:
	jne	d15,#1,.L100
.L556:

; ..\component\CanSM\Implementation\CanSM.c	  3195        {
; ..\component\CanSM\Implementation\CanSM.c	  3196          (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible = CANSM_SID_CONTROLLERMODEINDICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d15,#7
	st.b	[a2],d15
.L100:

; ..\component\CanSM\Implementation\CanSM.c	  3197          /* EXCLUSIVE_AREA_4 */
; ..\component\CanSM\Implementation\CanSM.c	  3198        }
; ..\component\CanSM\Implementation\CanSM.c	  3199  
; ..\component\CanSM\Implementation\CanSM.c	  3200        SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_4();
	call	SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_4
.L557:

; ..\component\CanSM\Implementation\CanSM.c	  3201  
; ..\component\CanSM\Implementation\CanSM.c	  3202  
; ..\component\CanSM\Implementation\CanSM.c	  3203        CanSM_CheckModeIndication( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr, CANSM_SID_CONTROLLERMODEINDICATION ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d4,#0
	mov.aa	a4,a15
	mov	d5,#7
	call	CanSM_CheckModeIndication
.L83:
.L81:

; ..\component\CanSM\Implementation\CanSM.c	  3204  
; ..\component\CanSM\Implementation\CanSM.c	  3205      } /* CanSM_ControllerId index in list */
; ..\component\CanSM\Implementation\CanSM.c	  3206    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  3207  
; ..\component\CanSM\Implementation\CanSM.c	  3208  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3209    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
	jeq	d9,#0,.L101
.L558:

; ..\component\CanSM\Implementation\CanSM.c	  3210    {
; ..\component\CanSM\Implementation\CanSM.c	  3211      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_CONTROLLERMODEINDICATION, CanSM_DetErrorId );
	fcall	.cocofun_3
.L559:
	mov	d6,#7
.L560:
	mov	d7,d9
.L491:
	j	Det_ReportError
.L101:

; ..\component\CanSM\Implementation\CanSM.c	  3212      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3213    }
; ..\component\CanSM\Implementation\CanSM.c	  3214  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3215    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3216  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3217  
; ..\component\CanSM\Implementation\CanSM.c	  3218  } /* end Func CanSM_ControllerModeIndication */ /* PRQA S 6050, 6080 */ /* MD_MSR_STCAL, MD_MSR_STMIF */
	ret
.L283:
	
__CanSM_ControllerModeIndication_function_end:
	.size	CanSM_ControllerModeIndication,__CanSM_ControllerModeIndication_function_end-CanSM_ControllerModeIndication
.L180:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_TxTimeoutException',code,cluster('CanSM_TxTimeoutException')
	.sect	'.text.CanSM.CanSM_TxTimeoutException'
	.align	2
	
	.global	CanSM_TxTimeoutException

; ..\component\CanSM\Implementation\CanSM.c	  3219  
; ..\component\CanSM\Implementation\CanSM.c	  3220  
; ..\component\CanSM\Implementation\CanSM.c	  3221  
; ..\component\CanSM\Implementation\CanSM.c	  3222  #if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3223  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3224   *  CanSM_TransceiverModeIndication
; ..\component\CanSM\Implementation\CanSM.c	  3225   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3226  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3227   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3228   *
; ..\component\CanSM\Implementation\CanSM.c	  3229   *
; ..\component\CanSM\Implementation\CanSM.c	  3230   *
; ..\component\CanSM\Implementation\CanSM.c	  3231   *
; ..\component\CanSM\Implementation\CanSM.c	  3232   *
; ..\component\CanSM\Implementation\CanSM.c	  3233   *
; ..\component\CanSM\Implementation\CanSM.c	  3234   */
; ..\component\CanSM\Implementation\CanSM.c	  3235  FUNC(void, CANSM_CODE) CanSM_TransceiverModeIndication( uint8 CanSM_TransceiverId, CanTrcv_TrcvModeType CanSM_TransceiverMode )
; ..\component\CanSM\Implementation\CanSM.c	  3236  { /* \trace SPEC-11280 */
; ..\component\CanSM\Implementation\CanSM.c	  3237    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  3238    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3239    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3240  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3241    if ( CanSM_IsInitialized == CANSM_INITFUNCTION_NOT_CALLED )
; ..\component\CanSM\Implementation\CanSM.c	  3242    {
; ..\component\CanSM\Implementation\CanSM.c	  3243      CanSM_DetErrorId = CANSM_E_UNINIT;
; ..\component\CanSM\Implementation\CanSM.c	  3244      /* \trace SPEC-850 */
; ..\component\CanSM\Implementation\CanSM.c	  3245    }
; ..\component\CanSM\Implementation\CanSM.c	  3246    else
; ..\component\CanSM\Implementation\CanSM.c	  3247  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3248    {
; ..\component\CanSM\Implementation\CanSM.c	  3249  
; ..\component\CanSM\Implementation\CanSM.c	  3250      CanSM_CanNetworkIdx = CanSM_MapTransceiverIdToLocalIndex( CanSM_TransceiverId );
; ..\component\CanSM\Implementation\CanSM.c	  3251      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3252  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3253      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
; ..\component\CanSM\Implementation\CanSM.c	  3254      {
; ..\component\CanSM\Implementation\CanSM.c	  3255        CanSM_DetErrorId = CANSM_E_PARAM_TRANSCEIVER;
; ..\component\CanSM\Implementation\CanSM.c	  3256        /* \trace SPEC-849 */
; ..\component\CanSM\Implementation\CanSM.c	  3257      }
; ..\component\CanSM\Implementation\CanSM.c	  3258      else
; ..\component\CanSM\Implementation\CanSM.c	  3259  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3260      {
; ..\component\CanSM\Implementation\CanSM.c	  3261  
; ..\component\CanSM\Implementation\CanSM.c	  3262        P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  3263  
; ..\component\CanSM\Implementation\CanSM.c	  3264        if ( CanSM_TransceiverMode == CANTRCV_TRCVMODE_NORMAL )
; ..\component\CanSM\Implementation\CanSM.c	  3265        {
; ..\component\CanSM\Implementation\CanSM.c	  3266          CanSM_TrcvNormalIndicated( CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3267        }
; ..\component\CanSM\Implementation\CanSM.c	  3268        else if ( ( CanSM_TransceiverMode == CANTRCV_TRCVMODE_STANDBY ) && ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_TRCV_STANDBY ) )
; ..\component\CanSM\Implementation\CanSM.c	  3269        {
; ..\component\CanSM\Implementation\CanSM.c	  3270          CanSM_TrcvStandbyIndicatedAsExpected( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3271        } /* end if Trcv Standby Indicated */
; ..\component\CanSM\Implementation\CanSM.c	  3272        else
; ..\component\CanSM\Implementation\CanSM.c	  3273        {
; ..\component\CanSM\Implementation\CanSM.c	  3274          /* MISRA QAC */ /* ignore SLEEP inaction */
; ..\component\CanSM\Implementation\CanSM.c	  3275        }
; ..\component\CanSM\Implementation\CanSM.c	  3276  
; ..\component\CanSM\Implementation\CanSM.c	  3277      } /* TransceiverId valid; found in configuration */
; ..\component\CanSM\Implementation\CanSM.c	  3278    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  3279  
; ..\component\CanSM\Implementation\CanSM.c	  3280  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3281    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  3282    {
; ..\component\CanSM\Implementation\CanSM.c	  3283      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_TRANSCEIVERMODEINDICATION, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  3284      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3285    }
; ..\component\CanSM\Implementation\CanSM.c	  3286  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3287    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3288  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3289  
; ..\component\CanSM\Implementation\CanSM.c	  3290  } /* end Func CanSM_TransceiverModeIndication */
; ..\component\CanSM\Implementation\CanSM.c	  3291  #endif /* if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3292  
; ..\component\CanSM\Implementation\CanSM.c	  3293  
; ..\component\CanSM\Implementation\CanSM.c	  3294  
; ..\component\CanSM\Implementation\CanSM.c	  3295  #if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3296  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3297   *  CanSM_ClearTrcvWufFlagIndication
; ..\component\CanSM\Implementation\CanSM.c	  3298   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3299  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3300   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3301   *
; ..\component\CanSM\Implementation\CanSM.c	  3302   *
; ..\component\CanSM\Implementation\CanSM.c	  3303   *
; ..\component\CanSM\Implementation\CanSM.c	  3304   *
; ..\component\CanSM\Implementation\CanSM.c	  3305   *
; ..\component\CanSM\Implementation\CanSM.c	  3306   *
; ..\component\CanSM\Implementation\CanSM.c	  3307   */
; ..\component\CanSM\Implementation\CanSM.c	  3308  FUNC(void, CANSM_CODE) CanSM_ClearTrcvWufFlagIndication( uint8 CanSM_TransceiverId )
; ..\component\CanSM\Implementation\CanSM.c	  3309  { /* \trace SPEC-11414 */
; ..\component\CanSM\Implementation\CanSM.c	  3310    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  3311    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3312  
; ..\component\CanSM\Implementation\CanSM.c	  3313    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3314  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3315    if ( CanSM_IsInitialized == CANSM_INITFUNCTION_NOT_CALLED )
; ..\component\CanSM\Implementation\CanSM.c	  3316    {
; ..\component\CanSM\Implementation\CanSM.c	  3317      CanSM_DetErrorId = CANSM_E_UNINIT;
; ..\component\CanSM\Implementation\CanSM.c	  3318      /* \trace SPEC-11362 */
; ..\component\CanSM\Implementation\CanSM.c	  3319    }
; ..\component\CanSM\Implementation\CanSM.c	  3320    else
; ..\component\CanSM\Implementation\CanSM.c	  3321  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3322    {
; ..\component\CanSM\Implementation\CanSM.c	  3323  
; ..\component\CanSM\Implementation\CanSM.c	  3324      CanSM_CanNetworkIdx = CanSM_MapTransceiverIdToLocalIndex( CanSM_TransceiverId );
; ..\component\CanSM\Implementation\CanSM.c	  3325  
; ..\component\CanSM\Implementation\CanSM.c	  3326      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3327  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3328      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
; ..\component\CanSM\Implementation\CanSM.c	  3329      {
; ..\component\CanSM\Implementation\CanSM.c	  3330        CanSM_DetErrorId = CANSM_E_PARAM_TRANSCEIVER;
; ..\component\CanSM\Implementation\CanSM.c	  3331        /* \trace SPEC-11316 */
; ..\component\CanSM\Implementation\CanSM.c	  3332      }
; ..\component\CanSM\Implementation\CanSM.c	  3333      else
; ..\component\CanSM\Implementation\CanSM.c	  3334  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3335      {
; ..\component\CanSM\Implementation\CanSM.c	  3336  
; ..\component\CanSM\Implementation\CanSM.c	  3337        P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  3338  
; ..\component\CanSM\Implementation\CanSM.c	  3339        if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_PN_CLEAR_WUF )
; ..\component\CanSM\Implementation\CanSM.c	  3340        {
; ..\component\CanSM\Implementation\CanSM.c	  3341          (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_CC_STOPPED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3342          (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3343          /* \trace..SPEC-11299 */
; ..\component\CanSM\Implementation\CanSM.c	  3344        }
; ..\component\CanSM\Implementation\CanSM.c	  3345  
; ..\component\CanSM\Implementation\CanSM.c	  3346      } /* TransceiverId valid; found in configuration; */
; ..\component\CanSM\Implementation\CanSM.c	  3347    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  3348  
; ..\component\CanSM\Implementation\CanSM.c	  3349  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3350    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  3351    {
; ..\component\CanSM\Implementation\CanSM.c	  3352      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_CLEARTRCVWUFFLAGINDICATION, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  3353      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3354    }
; ..\component\CanSM\Implementation\CanSM.c	  3355  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3356    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3357  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3358  
; ..\component\CanSM\Implementation\CanSM.c	  3359  } /* End Func CanSM_ClearTrcvWufFlagIndication   () */
; ..\component\CanSM\Implementation\CanSM.c	  3360  #endif /* end   else if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3361  
; ..\component\CanSM\Implementation\CanSM.c	  3362  
; ..\component\CanSM\Implementation\CanSM.c	  3363  
; ..\component\CanSM\Implementation\CanSM.c	  3364  #if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3365  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3366   *  CanSM_CheckTransceiverWakeFlagIndication
; ..\component\CanSM\Implementation\CanSM.c	  3367   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3368  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3369   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3370   *
; ..\component\CanSM\Implementation\CanSM.c	  3371   *
; ..\component\CanSM\Implementation\CanSM.c	  3372   *
; ..\component\CanSM\Implementation\CanSM.c	  3373   *
; ..\component\CanSM\Implementation\CanSM.c	  3374   *
; ..\component\CanSM\Implementation\CanSM.c	  3375   *
; ..\component\CanSM\Implementation\CanSM.c	  3376   */
; ..\component\CanSM\Implementation\CanSM.c	  3377  FUNC(void, CANSM_CODE) CanSM_CheckTransceiverWakeFlagIndication( uint8 CanSM_TransceiverId )
; ..\component\CanSM\Implementation\CanSM.c	  3378  { /* \trace SPEC-11313 */
; ..\component\CanSM\Implementation\CanSM.c	  3379    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  3380    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3381  
; ..\component\CanSM\Implementation\CanSM.c	  3382    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3383  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3384    if ( CanSM_IsInitialized == CANSM_INITFUNCTION_NOT_CALLED )
; ..\component\CanSM\Implementation\CanSM.c	  3385    {
; ..\component\CanSM\Implementation\CanSM.c	  3386      CanSM_DetErrorId = CANSM_E_UNINIT;
; ..\component\CanSM\Implementation\CanSM.c	  3387      /* \trace SPEC-11372 */
; ..\component\CanSM\Implementation\CanSM.c	  3388    }
; ..\component\CanSM\Implementation\CanSM.c	  3389    else
; ..\component\CanSM\Implementation\CanSM.c	  3390  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3391    {
; ..\component\CanSM\Implementation\CanSM.c	  3392      CanSM_CanNetworkIdx = CanSM_MapTransceiverIdToLocalIndex( CanSM_TransceiverId );
; ..\component\CanSM\Implementation\CanSM.c	  3393  
; ..\component\CanSM\Implementation\CanSM.c	  3394      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3395  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3396      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
; ..\component\CanSM\Implementation\CanSM.c	  3397      {
; ..\component\CanSM\Implementation\CanSM.c	  3398        CanSM_DetErrorId = CANSM_E_PARAM_TRANSCEIVER;
; ..\component\CanSM\Implementation\CanSM.c	  3399        /* \trace SPEC-11436 */
; ..\component\CanSM\Implementation\CanSM.c	  3400      }
; ..\component\CanSM\Implementation\CanSM.c	  3401      else
; ..\component\CanSM\Implementation\CanSM.c	  3402  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3403      {
; ..\component\CanSM\Implementation\CanSM.c	  3404  
; ..\component\CanSM\Implementation\CanSM.c	  3405        P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  3406  
; ..\component\CanSM\Implementation\CanSM.c	  3407        if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_CHK_WUF_CC_SLEEP )
; ..\component\CanSM\Implementation\CanSM.c	  3408        {
; ..\component\CanSM\Implementation\CanSM.c	  3409          (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode &= CANSM_CLEAR_TX_TIMEOUT_EXCEPTION_FLAG; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3410          CanSM_NoComReached( CanSM_CurrentChannelVarPtr );  /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3411        }
; ..\component\CanSM\Implementation\CanSM.c	  3412        else if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_CHK_WUF_NOT_CC_SLEEP )
; ..\component\CanSM\Implementation\CanSM.c	  3413        {
; ..\component\CanSM\Implementation\CanSM.c	  3414          (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_PN_CLEAR_WUF; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3415          (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3416        }
; ..\component\CanSM\Implementation\CanSM.c	  3417        else
; ..\component\CanSM\Implementation\CanSM.c	  3418        {
; ..\component\CanSM\Implementation\CanSM.c	  3419          /* MISRA QAC */ /* ignore unexpected indications */
; ..\component\CanSM\Implementation\CanSM.c	  3420        }
; ..\component\CanSM\Implementation\CanSM.c	  3421        /* \trace..SPEC-11413 */
; ..\component\CanSM\Implementation\CanSM.c	  3422  
; ..\component\CanSM\Implementation\CanSM.c	  3423      } /* CanSM_TransceiverId valid; found in configuration */
; ..\component\CanSM\Implementation\CanSM.c	  3424    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  3425  
; ..\component\CanSM\Implementation\CanSM.c	  3426  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3427    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  3428    {
; ..\component\CanSM\Implementation\CanSM.c	  3429      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_CHECKTRANSCEIVERWAKEFLAGINDICATION, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  3430      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3431    }
; ..\component\CanSM\Implementation\CanSM.c	  3432  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3433    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3434  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3435  
; ..\component\CanSM\Implementation\CanSM.c	  3436  } /* End Func CanSM_CheckTransceiverWakeFlagIndication() */
; ..\component\CanSM\Implementation\CanSM.c	  3437  #endif /* end   else if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3438  
; ..\component\CanSM\Implementation\CanSM.c	  3439  
; ..\component\CanSM\Implementation\CanSM.c	  3440  /* \trace SPEC-827, SPEC-832 */
; ..\component\CanSM\Implementation\CanSM.c	  3441  #if ( CANSM_VERSION_INFO_API == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3442  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3443   *  CanSM_GetVersionInfo
; ..\component\CanSM\Implementation\CanSM.c	  3444   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3445  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3446   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3447   *
; ..\component\CanSM\Implementation\CanSM.c	  3448   *
; ..\component\CanSM\Implementation\CanSM.c	  3449   *
; ..\component\CanSM\Implementation\CanSM.c	  3450   *
; ..\component\CanSM\Implementation\CanSM.c	  3451   *
; ..\component\CanSM\Implementation\CanSM.c	  3452   */
; ..\component\CanSM\Implementation\CanSM.c	  3453  FUNC(void, CANSM_CODE) CanSM_GetVersionInfo( P2VAR( Std_VersionInfoType, AUTOMATIC, CANSM_APPL_VAR ) VersionInfo )
; ..\component\CanSM\Implementation\CanSM.c	  3454  { /* \trace SPEC-821 */
; ..\component\CanSM\Implementation\CanSM.c	  3455    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3456  
; ..\component\CanSM\Implementation\CanSM.c	  3457    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3458  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3459    if ( VersionInfo == NULL_PTR )
; ..\component\CanSM\Implementation\CanSM.c	  3460    {
; ..\component\CanSM\Implementation\CanSM.c	  3461      CanSM_DetErrorId = CANSM_E_PARAM_POINTER;
; ..\component\CanSM\Implementation\CanSM.c	  3462      /* \trace SPEC-831 */
; ..\component\CanSM\Implementation\CanSM.c	  3463    }
; ..\component\CanSM\Implementation\CanSM.c	  3464    else
; ..\component\CanSM\Implementation\CanSM.c	  3465  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3466    {
; ..\component\CanSM\Implementation\CanSM.c	  3467      /* \trace SPEC-824 */
; ..\component\CanSM\Implementation\CanSM.c	  3468      (*VersionInfo).vendorID = (uint16)CANSM_VENDOR_ID; /* SBSW_CANSM_GETVERSIONINFO_POINTERWRITEACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3469      (*VersionInfo).moduleID = (uint8)CANSM_MODULE_ID; /* SBSW_CANSM_GETVERSIONINFO_POINTERWRITEACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3470      (*VersionInfo).sw_major_version = (uint8)CANSM_SW_MAJOR_VERSION; /* SBSW_CANSM_GETVERSIONINFO_POINTERWRITEACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3471      (*VersionInfo).sw_minor_version = (uint8)CANSM_SW_MINOR_VERSION; /* SBSW_CANSM_GETVERSIONINFO_POINTERWRITEACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3472      (*VersionInfo).sw_patch_version = (uint8)CANSM_SW_PATCH_VERSION; /* SBSW_CANSM_GETVERSIONINFO_POINTERWRITEACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3473    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  3474  
; ..\component\CanSM\Implementation\CanSM.c	  3475  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3476    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  3477    {
; ..\component\CanSM\Implementation\CanSM.c	  3478      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_GETVERSIONINFO, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  3479      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3480    }
; ..\component\CanSM\Implementation\CanSM.c	  3481  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3482    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3483  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3484  
; ..\component\CanSM\Implementation\CanSM.c	  3485  } /* end Func CanSM_GetVersionInfo() */
; ..\component\CanSM\Implementation\CanSM.c	  3486  #endif /* end  if ( CANSM_VERSION_INFO_API == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3487  
; ..\component\CanSM\Implementation\CanSM.c	  3488  
; ..\component\CanSM\Implementation\CanSM.c	  3489  
; ..\component\CanSM\Implementation\CanSM.c	  3490  #if ( CANSM_SET_BAUDRATE_API == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3491  /* \trace..SPEC-2181378 */
; ..\component\CanSM\Implementation\CanSM.c	  3492  /* \trace..SPEC-47140 */
; ..\component\CanSM\Implementation\CanSM.c	  3493  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3494   *  CanSM_SetBaudrate
; ..\component\CanSM\Implementation\CanSM.c	  3495   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3496  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3497   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3498   *
; ..\component\CanSM\Implementation\CanSM.c	  3499   *
; ..\component\CanSM\Implementation\CanSM.c	  3500   *
; ..\component\CanSM\Implementation\CanSM.c	  3501   *
; ..\component\CanSM\Implementation\CanSM.c	  3502   *
; ..\component\CanSM\Implementation\CanSM.c	  3503   *
; ..\component\CanSM\Implementation\CanSM.c	  3504   *
; ..\component\CanSM\Implementation\CanSM.c	  3505   *
; ..\component\CanSM\Implementation\CanSM.c	  3506   *
; ..\component\CanSM\Implementation\CanSM.c	  3507   */
; ..\component\CanSM\Implementation\CanSM.c	  3508  FUNC(Std_ReturnType, CANSM_CODE) CanSM_SetBaudrate( NetworkHandleType Network, uint16 BaudRateConfigID )
; ..\component\CanSM\Implementation\CanSM.c	  3509  {
; ..\component\CanSM\Implementation\CanSM.c	  3510    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  3511    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3512    Std_ReturnType CanSM_StdReturnValue = E_NOT_OK;
; ..\component\CanSM\Implementation\CanSM.c	  3513  
; ..\component\CanSM\Implementation\CanSM.c	  3514    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3515  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3516    if ( CanSM_IsInitialized != CANSM_INITFUNCTION_FINISHED )
; ..\component\CanSM\Implementation\CanSM.c	  3517    {
; ..\component\CanSM\Implementation\CanSM.c	  3518      CanSM_DetErrorId = CANSM_E_UNINIT;
; ..\component\CanSM\Implementation\CanSM.c	  3519      /* \trace..SPEC-47137 */
; ..\component\CanSM\Implementation\CanSM.c	  3520      /* \trace..SPEC-47128 */
; ..\component\CanSM\Implementation\CanSM.c	  3521    }
; ..\component\CanSM\Implementation\CanSM.c	  3522    else
; ..\component\CanSM\Implementation\CanSM.c	  3523  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3524    {
; ..\component\CanSM\Implementation\CanSM.c	  3525  
; ..\component\CanSM\Implementation\CanSM.c	  3526      CanSM_CanNetworkIdx = CanSM_MapNetworkHandleToLocalIndex( Network );
; ..\component\CanSM\Implementation\CanSM.c	  3527  
; ..\component\CanSM\Implementation\CanSM.c	  3528      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3529  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3530      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
; ..\component\CanSM\Implementation\CanSM.c	  3531      {
; ..\component\CanSM\Implementation\CanSM.c	  3532        CanSM_DetErrorId = CANSM_E_INVALID_NETWORK_HANDLE;
; ..\component\CanSM\Implementation\CanSM.c	  3533        /* \trace..SPEC-47127 */
; ..\component\CanSM\Implementation\CanSM.c	  3534        /* \trace..SPEC-47129 */
; ..\component\CanSM\Implementation\CanSM.c	  3535      }
; ..\component\CanSM\Implementation\CanSM.c	  3536      else
; ..\component\CanSM\Implementation\CanSM.c	  3537  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3538      {
; ..\component\CanSM\Implementation\CanSM.c	  3539  
; ..\component\CanSM\Implementation\CanSM.c	  3540        P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  3541  
; ..\component\CanSM\Implementation\CanSM.c	  3542        if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_S_FULLCOM_ENSURED ) /* CANSM_S_NO_BUS_OFF */
; ..\component\CanSM\Implementation\CanSM.c	  3543        {
; ..\component\CanSM\Implementation\CanSM.c	  3544  
; ..\component\CanSM\Implementation\CanSM.c	  3545          SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_6();
; ..\component\CanSM\Implementation\CanSM.c	  3546          if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible == CANSM_NOBODY )
; ..\component\CanSM\Implementation\CanSM.c	  3547          {
; ..\component\CanSM\Implementation\CanSM.c	  3548            (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible = CANSM_SID_SETBAUDRATE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3549            (*CanSM_CurrentChannelVarPtr).CanSM_BswMNewState = CANSM_BSWM_CHANGE_BAUDRATE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3550          }
; ..\component\CanSM\Implementation\CanSM.c	  3551          SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_6();
; ..\component\CanSM\Implementation\CanSM.c	  3552  
; ..\component\CanSM\Implementation\CanSM.c	  3553          (*CanSM_CurrentChannelVarPtr).CanSM_LastValidBaudRate = BaudRateConfigID; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3554          (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* trigger NwSM next MainFuncCycle */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3555          (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SU_CC_STOPPED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3556          /* \trace..SPEC-47154 */
; ..\component\CanSM\Implementation\CanSM.c	  3557  
; ..\component\CanSM\Implementation\CanSM.c	  3558  
; ..\component\CanSM\Implementation\CanSM.c	  3559          CanSM_CheckModeIndication( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr, CANSM_SID_SETBAUDRATE ); /* Function checks if mode has changed */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3560  
; ..\component\CanSM\Implementation\CanSM.c	  3561  
; ..\component\CanSM\Implementation\CanSM.c	  3562          /* \trace..SPEC-11328 */
; ..\component\CanSM\Implementation\CanSM.c	  3563          CanSM_StdReturnValue = E_OK;
; ..\component\CanSM\Implementation\CanSM.c	  3564          /* \trace..SPEC-47141 */
; ..\component\CanSM\Implementation\CanSM.c	  3565        }
; ..\component\CanSM\Implementation\CanSM.c	  3566        /* \trace..SPEC-47135 */
; ..\component\CanSM\Implementation\CanSM.c	  3567  
; ..\component\CanSM\Implementation\CanSM.c	  3568      } /* NetworkHandle index in list ==> NetworkHandle valid */
; ..\component\CanSM\Implementation\CanSM.c	  3569    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  3570  
; ..\component\CanSM\Implementation\CanSM.c	  3571  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3572    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  3573    {
; ..\component\CanSM\Implementation\CanSM.c	  3574      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_SETBAUDRATE, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  3575      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3576    }
; ..\component\CanSM\Implementation\CanSM.c	  3577  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3578    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3579  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3580  
; ..\component\CanSM\Implementation\CanSM.c	  3581    return CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  3582  
; ..\component\CanSM\Implementation\CanSM.c	  3583  } /* End Func CanSM_SetBaudrate() */ /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanSM\Implementation\CanSM.c	  3584  #endif /* if ( CANSM_SET_BAUDRATE_API == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3585  
; ..\component\CanSM\Implementation\CanSM.c	  3586  
; ..\component\CanSM\Implementation\CanSM.c	  3587  /* \trace SPEC-11359, SPEC-11402 */
; ..\component\CanSM\Implementation\CanSM.c	  3588  #if ( CANSM_CHANGE_BAUDRATE_API == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3589  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3590   *  CanSM_CheckBaudrate
; ..\component\CanSM\Implementation\CanSM.c	  3591   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3592  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3593   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3594   *
; ..\component\CanSM\Implementation\CanSM.c	  3595   *
; ..\component\CanSM\Implementation\CanSM.c	  3596   *
; ..\component\CanSM\Implementation\CanSM.c	  3597   *
; ..\component\CanSM\Implementation\CanSM.c	  3598   *
; ..\component\CanSM\Implementation\CanSM.c	  3599   *
; ..\component\CanSM\Implementation\CanSM.c	  3600   */
; ..\component\CanSM\Implementation\CanSM.c	  3601  FUNC(Std_ReturnType, CANSM_CODE) CanSM_CheckBaudrate( NetworkHandleType CanSM_NetworkHandle, CONST( uint16, AUTOMATIC ) CanSM_Baudrate )
; ..\component\CanSM\Implementation\CanSM.c	  3602  { /* \trace SPEC-11396 */
; ..\component\CanSM\Implementation\CanSM.c	  3603    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  3604    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3605    Std_ReturnType CanSM_StdReturnValue = E_NOT_OK;
; ..\component\CanSM\Implementation\CanSM.c	  3606    /* \trace SPEC-11380 */
; ..\component\CanSM\Implementation\CanSM.c	  3607  
; ..\component\CanSM\Implementation\CanSM.c	  3608    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3609  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3610    if ( CanSM_IsInitialized != CANSM_INITFUNCTION_FINISHED )
; ..\component\CanSM\Implementation\CanSM.c	  3611    {
; ..\component\CanSM\Implementation\CanSM.c	  3612      CanSM_DetErrorId = CANSM_E_UNINIT;
; ..\component\CanSM\Implementation\CanSM.c	  3613    }
; ..\component\CanSM\Implementation\CanSM.c	  3614    else
; ..\component\CanSM\Implementation\CanSM.c	  3615  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3616    {
; ..\component\CanSM\Implementation\CanSM.c	  3617  
; ..\component\CanSM\Implementation\CanSM.c	  3618      CanSM_CanNetworkIdx = CanSM_MapNetworkHandleToLocalIndex( CanSM_NetworkHandle );
; ..\component\CanSM\Implementation\CanSM.c	  3619  
; ..\component\CanSM\Implementation\CanSM.c	  3620      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3621  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3622      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
; ..\component\CanSM\Implementation\CanSM.c	  3623      {
; ..\component\CanSM\Implementation\CanSM.c	  3624        CanSM_DetErrorId = CANSM_E_INVALID_NETWORK_HANDLE;
; ..\component\CanSM\Implementation\CanSM.c	  3625        /* \trace SPEC-11352 */
; ..\component\CanSM\Implementation\CanSM.c	  3626        /* \trace SPEC-11392 */
; ..\component\CanSM\Implementation\CanSM.c	  3627      }
; ..\component\CanSM\Implementation\CanSM.c	  3628      else
; ..\component\CanSM\Implementation\CanSM.c	  3629  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3630      {
; ..\component\CanSM\Implementation\CanSM.c	  3631  
; ..\component\CanSM\Implementation\CanSM.c	  3632        P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  3633  
; ..\component\CanSM\Implementation\CanSM.c	  3634        /* \trace SPEC-11391 */ /* \trace SPEC-11393 */
; ..\component\CanSM\Implementation\CanSM.c	  3635        if ( CanIf_CheckBaudrate( CanSM_GetControllerIdOfChannelConfig( CanSM_CanNetworkIdx ), CanSM_Baudrate ) == E_OK )
; ..\component\CanSM\Implementation\CanSM.c	  3636        {
; ..\component\CanSM\Implementation\CanSM.c	  3637          (*CanSM_CurrentChannelVarPtr).CanSM_LastValidBaudRate = CanSM_Baudrate; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3638          /* \trace SPEC-11323 */
; ..\component\CanSM\Implementation\CanSM.c	  3639          CanSM_StdReturnValue = E_OK;
; ..\component\CanSM\Implementation\CanSM.c	  3640          /* \trace SPEC-11329 */
; ..\component\CanSM\Implementation\CanSM.c	  3641        }
; ..\component\CanSM\Implementation\CanSM.c	  3642        else
; ..\component\CanSM\Implementation\CanSM.c	  3643        {
; ..\component\CanSM\Implementation\CanSM.c	  3644          (*CanSM_CurrentChannelVarPtr).CanSM_LastValidBaudRate = CANSM_INVALID_BAUDRATE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3645        }
; ..\component\CanSM\Implementation\CanSM.c	  3646  
; ..\component\CanSM\Implementation\CanSM.c	  3647      } /* NetworkHandle index in list ==> NetworkHandle valid */
; ..\component\CanSM\Implementation\CanSM.c	  3648    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  3649  
; ..\component\CanSM\Implementation\CanSM.c	  3650  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3651    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  3652    {
; ..\component\CanSM\Implementation\CanSM.c	  3653      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_CHECKBAUDRATE, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  3654      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3655    }
; ..\component\CanSM\Implementation\CanSM.c	  3656  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3657    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3658  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3659  
; ..\component\CanSM\Implementation\CanSM.c	  3660    return CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  3661  
; ..\component\CanSM\Implementation\CanSM.c	  3662  } /* End Func CanSM_CheckBaudrate () */
; ..\component\CanSM\Implementation\CanSM.c	  3663  #endif /* if ( CANSM_CHANGE_BAUDRATE_API == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3664  
; ..\component\CanSM\Implementation\CanSM.c	  3665  
; ..\component\CanSM\Implementation\CanSM.c	  3666  /* \trace SPEC-11367, SPEC-11382 */
; ..\component\CanSM\Implementation\CanSM.c	  3667  #if ( CANSM_CHANGE_BAUDRATE_API == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3668  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3669   *  CanSM_ChangeBaudrate
; ..\component\CanSM\Implementation\CanSM.c	  3670   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3671  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3672   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3673   *
; ..\component\CanSM\Implementation\CanSM.c	  3674   *
; ..\component\CanSM\Implementation\CanSM.c	  3675   *
; ..\component\CanSM\Implementation\CanSM.c	  3676   *
; ..\component\CanSM\Implementation\CanSM.c	  3677   *
; ..\component\CanSM\Implementation\CanSM.c	  3678   *
; ..\component\CanSM\Implementation\CanSM.c	  3679   *
; ..\component\CanSM\Implementation\CanSM.c	  3680   *
; ..\component\CanSM\Implementation\CanSM.c	  3681   *
; ..\component\CanSM\Implementation\CanSM.c	  3682   *
; ..\component\CanSM\Implementation\CanSM.c	  3683   */
; ..\component\CanSM\Implementation\CanSM.c	  3684  FUNC(Std_ReturnType, CANSM_CODE) CanSM_ChangeBaudrate( NetworkHandleType CanSM_NetworkHandle, CONST( uint16, AUTOMATIC ) CanSM_Baudrate )
; ..\component\CanSM\Implementation\CanSM.c	  3685  { /* \trace SPEC-11336 */
; ..\component\CanSM\Implementation\CanSM.c	  3686    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  3687    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3688    Std_ReturnType CanSM_StdReturnValue = E_NOT_OK;
; ..\component\CanSM\Implementation\CanSM.c	  3689  
; ..\component\CanSM\Implementation\CanSM.c	  3690    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3691  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3692    if ( CanSM_IsInitialized != CANSM_INITFUNCTION_FINISHED )
; ..\component\CanSM\Implementation\CanSM.c	  3693    {
; ..\component\CanSM\Implementation\CanSM.c	  3694      CanSM_DetErrorId = CANSM_E_UNINIT;
; ..\component\CanSM\Implementation\CanSM.c	  3695      /* \trace SPEC-11357 */
; ..\component\CanSM\Implementation\CanSM.c	  3696      /* \trace SPEC-11428 */
; ..\component\CanSM\Implementation\CanSM.c	  3697    }
; ..\component\CanSM\Implementation\CanSM.c	  3698    else
; ..\component\CanSM\Implementation\CanSM.c	  3699  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3700    {
; ..\component\CanSM\Implementation\CanSM.c	  3701  
; ..\component\CanSM\Implementation\CanSM.c	  3702      CanSM_CanNetworkIdx = CanSM_MapNetworkHandleToLocalIndex( CanSM_NetworkHandle );
; ..\component\CanSM\Implementation\CanSM.c	  3703  
; ..\component\CanSM\Implementation\CanSM.c	  3704      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3705  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3706      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
; ..\component\CanSM\Implementation\CanSM.c	  3707      {
; ..\component\CanSM\Implementation\CanSM.c	  3708        CanSM_DetErrorId = CANSM_E_INVALID_NETWORK_HANDLE;
; ..\component\CanSM\Implementation\CanSM.c	  3709        /* \trace SPEC-11364 */
; ..\component\CanSM\Implementation\CanSM.c	  3710        /* \trace SPEC-11348 */
; ..\component\CanSM\Implementation\CanSM.c	  3711      }
; ..\component\CanSM\Implementation\CanSM.c	  3712      else
; ..\component\CanSM\Implementation\CanSM.c	  3713  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3714      {
; ..\component\CanSM\Implementation\CanSM.c	  3715  
; ..\component\CanSM\Implementation\CanSM.c	  3716        P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  3717  
; ..\component\CanSM\Implementation\CanSM.c	  3718        if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_S_FULLCOM_ENSURED ) /* CANSM_S_NO_BUS_OFF */
; ..\component\CanSM\Implementation\CanSM.c	  3719        {
; ..\component\CanSM\Implementation\CanSM.c	  3720  
; ..\component\CanSM\Implementation\CanSM.c	  3721          if ( (*CanSM_CurrentChannelVarPtr).CanSM_LastValidBaudRate == CanSM_Baudrate )
; ..\component\CanSM\Implementation\CanSM.c	  3722          {
; ..\component\CanSM\Implementation\CanSM.c	  3723  
; ..\component\CanSM\Implementation\CanSM.c	  3724            SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_6();
; ..\component\CanSM\Implementation\CanSM.c	  3725            if ( (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible == CANSM_NOBODY )
; ..\component\CanSM\Implementation\CanSM.c	  3726            {
; ..\component\CanSM\Implementation\CanSM.c	  3727              (*CanSM_CurrentChannelVarPtr).CanSM_ModeIndicationResponsible = CANSM_SID_CHANGEBAUDRATE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3728              (*CanSM_CurrentChannelVarPtr).CanSM_BswMNewState = CANSM_BSWM_CHANGE_BAUDRATE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3729            }
; ..\component\CanSM\Implementation\CanSM.c	  3730            SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_6();
; ..\component\CanSM\Implementation\CanSM.c	  3731  
; ..\component\CanSM\Implementation\CanSM.c	  3732  
; ..\component\CanSM\Implementation\CanSM.c	  3733            (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* trigger NwSM next MainFuncCycle */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3734            (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SU_CC_STOPPED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3735  
; ..\component\CanSM\Implementation\CanSM.c	  3736  
; ..\component\CanSM\Implementation\CanSM.c	  3737            CanSM_CheckModeIndication( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr, CANSM_SID_CHANGEBAUDRATE ); /* Function checks if mode has changed */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3738  
; ..\component\CanSM\Implementation\CanSM.c	  3739  
; ..\component\CanSM\Implementation\CanSM.c	  3740            CanSM_StdReturnValue = E_OK;
; ..\component\CanSM\Implementation\CanSM.c	  3741            /* \trace SPEC-11403 */
; ..\component\CanSM\Implementation\CanSM.c	  3742          }
; ..\component\CanSM\Implementation\CanSM.c	  3743          /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3744  #if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3745          else
; ..\component\CanSM\Implementation\CanSM.c	  3746          {
; ..\component\CanSM\Implementation\CanSM.c	  3747            CanSM_DetErrorId = CANSM_E_PARAM_INVALID_BAUDRATE;
; ..\component\CanSM\Implementation\CanSM.c	  3748            /* \trace SPEC-11337 */
; ..\component\CanSM\Implementation\CanSM.c	  3749            CanSM_StdReturnValue = E_NOT_OK;
; ..\component\CanSM\Implementation\CanSM.c	  3750            /* \trace SPEC-11283 */
; ..\component\CanSM\Implementation\CanSM.c	  3751          }
; ..\component\CanSM\Implementation\CanSM.c	  3752  #endif /* end if ( CANSM_DEV_ERROR_DETECT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3753  
; ..\component\CanSM\Implementation\CanSM.c	  3754        }
; ..\component\CanSM\Implementation\CanSM.c	  3755        else
; ..\component\CanSM\Implementation\CanSM.c	  3756        { /* CBR request within illegal communication mode, not COMM_FULL_COMMUNICATION */
; ..\component\CanSM\Implementation\CanSM.c	  3757          CanSM_StdReturnValue = E_NOT_OK;
; ..\component\CanSM\Implementation\CanSM.c	  3758          /* \trace SPEC-11384 */
; ..\component\CanSM\Implementation\CanSM.c	  3759        }
; ..\component\CanSM\Implementation\CanSM.c	  3760  
; ..\component\CanSM\Implementation\CanSM.c	  3761      } /* NetworkHandle index in list ==> NetworkHandle valid */
; ..\component\CanSM\Implementation\CanSM.c	  3762    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  3763  
; ..\component\CanSM\Implementation\CanSM.c	  3764  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3765    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  3766    {
; ..\component\CanSM\Implementation\CanSM.c	  3767      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_CHANGEBAUDRATE, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  3768      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3769    }
; ..\component\CanSM\Implementation\CanSM.c	  3770  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3771    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3772  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3773  
; ..\component\CanSM\Implementation\CanSM.c	  3774    return CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  3775  
; ..\component\CanSM\Implementation\CanSM.c	  3776  } /* End Func CanSM_ChangeBaudrate() */ /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanSM\Implementation\CanSM.c	  3777  #endif /* if ( CANSM_CHANGE_BAUDRATE_API == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3778  
; ..\component\CanSM\Implementation\CanSM.c	  3779  
; ..\component\CanSM\Implementation\CanSM.c	  3780  
; ..\component\CanSM\Implementation\CanSM.c	  3781  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3782   *  CanSM_TxTimeoutException
; ..\component\CanSM\Implementation\CanSM.c	  3783   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3784  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3785   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3786   *
; ..\component\CanSM\Implementation\CanSM.c	  3787   *
; ..\component\CanSM\Implementation\CanSM.c	  3788   *
; ..\component\CanSM\Implementation\CanSM.c	  3789   *
; ..\component\CanSM\Implementation\CanSM.c	  3790   *
; ..\component\CanSM\Implementation\CanSM.c	  3791   *
; ..\component\CanSM\Implementation\CanSM.c	  3792   *
; ..\component\CanSM\Implementation\CanSM.c	  3793   */
; ..\component\CanSM\Implementation\CanSM.c	  3794  FUNC(void, CANSM_CODE) CanSM_TxTimeoutException( NetworkHandleType CanSM_NetworkHandle )
; Function CanSM_TxTimeoutException
.L162:
CanSM_TxTimeoutException:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  3795  { /* \trace SPEC-11331 */
; ..\component\CanSM\Implementation\CanSM.c	  3796    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  3797    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3798  
; ..\component\CanSM\Implementation\CanSM.c	  3799    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3800  #if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3801    if ( CanSM_IsInitialized != CANSM_INITFUNCTION_FINISHED )
	mov	d7,#0
	fcall	.cocofun_2
.L683:
	jeq	d15,#3,.L102
.L684:

; ..\component\CanSM\Implementation\CanSM.c	  3802    {
; ..\component\CanSM\Implementation\CanSM.c	  3803      CanSM_DetErrorId = CANSM_E_UNINIT;
	mov	d7,#1
	j	.L103
.L102:

; ..\component\CanSM\Implementation\CanSM.c	  3804      /* \trace SPEC-11374 */
; ..\component\CanSM\Implementation\CanSM.c	  3805    }
; ..\component\CanSM\Implementation\CanSM.c	  3806    else
; ..\component\CanSM\Implementation\CanSM.c	  3807  #endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3808    {
; ..\component\CanSM\Implementation\CanSM.c	  3809  
; ..\component\CanSM\Implementation\CanSM.c	  3810      CanSM_CanNetworkIdx = CanSM_MapNetworkHandleToLocalIndex( CanSM_NetworkHandle );
; ..\component\CanSM\Implementation\CanSM.c	  3811  
; ..\component\CanSM\Implementation\CanSM.c	  3812      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3813  #if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3814      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
	jeq	d4,#0,.L104
.L685:

; ..\component\CanSM\Implementation\CanSM.c	  3815      {
; ..\component\CanSM\Implementation\CanSM.c	  3816        CanSM_DetErrorId = CANSM_E_INVALID_NETWORK_HANDLE;
	mov	d7,#3
	j	.L105
.L104:

; ..\component\CanSM\Implementation\CanSM.c	  3817        /* \trace SPEC-11303 */
; ..\component\CanSM\Implementation\CanSM.c	  3818      }
; ..\component\CanSM\Implementation\CanSM.c	  3819      else
; ..\component\CanSM\Implementation\CanSM.c	  3820  #endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3821      {
; ..\component\CanSM\Implementation\CanSM.c	  3822        P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
	fcall	.cocofun_1
.L492:

; ..\component\CanSM\Implementation\CanSM.c	  3823  
; ..\component\CanSM\Implementation\CanSM.c	  3824        if (  ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_S_NO_BUS_OFF ) /* CANSM_S_FULLCOM_ENSURED */
	lea	a2,[a15]9
	ld.bu	d0,[a2]
.L686:
	mov	d15,#16
.L687:
	jne	d15,d0,.L106
.L373:
	mov	d15,#0
	st.b	[a15]13,d15
.L688:
	st.h	[a15],d15
.L689:
	mov	d15,#34
	st.b	[a2],d15
.L374:

; ..\component\CanSM\Implementation\CanSM.c	  3825  #if ( CANSM_EXPANDED_TX_TIMEOUT_RECOVERY == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3826            ||  ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_BO_BUS_OFF_CHECK )
; ..\component\CanSM\Implementation\CanSM.c	  3827            ||  ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_S_SILENTCOM )
; ..\component\CanSM\Implementation\CanSM.c	  3828  #endif
; ..\component\CanSM\Implementation\CanSM.c	  3829           )
; ..\component\CanSM\Implementation\CanSM.c	  3830        {
; ..\component\CanSM\Implementation\CanSM.c	  3831  
; ..\component\CanSM\Implementation\CanSM.c	  3832  #if ( CANSM_SWIFT_TX_TIMEOUT_RECOVERY == STD_OFF )
; ..\component\CanSM\Implementation\CanSM.c	  3833  
; ..\component\CanSM\Implementation\CanSM.c	  3834          CanSM_InitiateShutDownSequence( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3835          (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode |=  CANSM_TX_TIMEOUT_EXCEPTION_RECEIVED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov.aa	a2,a15
	ld.bu	d15,[+a2]4
.L690:
	or	d15,#128
	st.b	[a2],d15
.L106:
	mov	d15,#1
	st.b	[a15]17,d15
.L105:
.L103:

; ..\component\CanSM\Implementation\CanSM.c	  3836  
; ..\component\CanSM\Implementation\CanSM.c	  3837  #else /* CANSM_SWIFT_TX_TIMEOUT_RECOVERY */
; ..\component\CanSM\Implementation\CanSM.c	  3838          (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SU_CC_STOPPED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3839          (*CanSM_CurrentChannelVarPtr).CanSM_UniversalTimer = CANSM_CANCEL_TIMER; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3840          (*CanSM_CurrentChannelVarPtr).CanSM_BswMNewState = CANSM_BSWM_NO_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3841          (*CanSM_CurrentChannelVarPtr).CanSM_NewComMode = COMM_SILENT_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3842          /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3843  #endif /* CANSM_SWIFT_TX_TIMEOUT_RECOVERY */
; ..\component\CanSM\Implementation\CanSM.c	  3844          /* \trace..SPEC-47114 */
; ..\component\CanSM\Implementation\CanSM.c	  3845  
; ..\component\CanSM\Implementation\CanSM.c	  3846        } /* NoBusOff ==> handle TxTimeout */
; ..\component\CanSM\Implementation\CanSM.c	  3847  
; ..\component\CanSM\Implementation\CanSM.c	  3848        (*CanSM_CurrentChannelVarPtr).CanSM_TxTimeoutEndIndicationFlag = TRUE; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3849  
; ..\component\CanSM\Implementation\CanSM.c	  3850      } /* NetworkHandle index in configuration list ==> NetworkHandle valid */
; ..\component\CanSM\Implementation\CanSM.c	  3851    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  3852  
; ..\component\CanSM\Implementation\CanSM.c	  3853  #if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3854    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
	jeq	d7,#0,.L107
.L691:

; ..\component\CanSM\Implementation\CanSM.c	  3855    {
; ..\component\CanSM\Implementation\CanSM.c	  3856      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_TXTIMEOUTEXCEPTION, CanSM_DetErrorId );
	fcall	.cocofun_3
.L493:
	mov	d6,#11
.L692:
	j	Det_ReportError
.L107:

; ..\component\CanSM\Implementation\CanSM.c	  3857      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3858    }
; ..\component\CanSM\Implementation\CanSM.c	  3859  #else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3860    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3861  #endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3862  
; ..\component\CanSM\Implementation\CanSM.c	  3863  } /* end Func CanSM_TxTimeoutException */
	ret
.L370:
	
__CanSM_TxTimeoutException_function_end:
	.size	CanSM_TxTimeoutException,__CanSM_TxTimeoutException_function_end-CanSM_TxTimeoutException
.L220:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_StartWakeupSources',code,cluster('CanSM_StartWakeupSources')
	.sect	'.text.CanSM.CanSM_StartWakeupSources'
	.align	2
	
	.global	CanSM_StartWakeupSources

; ..\component\CanSM\Implementation\CanSM.c	  3864  
; ..\component\CanSM\Implementation\CanSM.c	  3865  
; ..\component\CanSM\Implementation\CanSM.c	  3866  
; ..\component\CanSM\Implementation\CanSM.c	  3867  #if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3868  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3869   *  CanSM_ConfirmPnAvailability
; ..\component\CanSM\Implementation\CanSM.c	  3870   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3871  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3872   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3873   *
; ..\component\CanSM\Implementation\CanSM.c	  3874   *
; ..\component\CanSM\Implementation\CanSM.c	  3875   *
; ..\component\CanSM\Implementation\CanSM.c	  3876   *
; ..\component\CanSM\Implementation\CanSM.c	  3877   *
; ..\component\CanSM\Implementation\CanSM.c	  3878   *
; ..\component\CanSM\Implementation\CanSM.c	  3879   */
; ..\component\CanSM\Implementation\CanSM.c	  3880  FUNC(void, CANSM_CODE) CanSM_ConfirmPnAvailability( uint8 CanSM_TransceiverId )
; ..\component\CanSM\Implementation\CanSM.c	  3881  { /* \trace SPEC-11375 */
; ..\component\CanSM\Implementation\CanSM.c	  3882    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  3883    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3884  
; ..\component\CanSM\Implementation\CanSM.c	  3885    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3886  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3887    if ( CanSM_IsInitialized == CANSM_INITFUNCTION_NOT_CALLED )
; ..\component\CanSM\Implementation\CanSM.c	  3888    {
; ..\component\CanSM\Implementation\CanSM.c	  3889      CanSM_DetErrorId = CANSM_E_UNINIT;
; ..\component\CanSM\Implementation\CanSM.c	  3890      /* \trace SPEC-11358 */
; ..\component\CanSM\Implementation\CanSM.c	  3891    }
; ..\component\CanSM\Implementation\CanSM.c	  3892    else if ( CanSM_IsInitialized == CANSM_INITFUNCTION_RUNNING )
; ..\component\CanSM\Implementation\CanSM.c	  3893    {
; ..\component\CanSM\Implementation\CanSM.c	  3894      /* Nm not initialized, avoid Det call */
; ..\component\CanSM\Implementation\CanSM.c	  3895    }
; ..\component\CanSM\Implementation\CanSM.c	  3896    else
; ..\component\CanSM\Implementation\CanSM.c	  3897  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3898    {
; ..\component\CanSM\Implementation\CanSM.c	  3899  
; ..\component\CanSM\Implementation\CanSM.c	  3900      CanSM_CanNetworkIdx = CanSM_MapTransceiverIdToLocalIndex( CanSM_TransceiverId );
; ..\component\CanSM\Implementation\CanSM.c	  3901  
; ..\component\CanSM\Implementation\CanSM.c	  3902      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3903  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3904      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
; ..\component\CanSM\Implementation\CanSM.c	  3905      {
; ..\component\CanSM\Implementation\CanSM.c	  3906        CanSM_DetErrorId = CANSM_E_PARAM_TRANSCEIVER;
; ..\component\CanSM\Implementation\CanSM.c	  3907        /* \trace SPEC-11434 */
; ..\component\CanSM\Implementation\CanSM.c	  3908      }
; ..\component\CanSM\Implementation\CanSM.c	  3909      else
; ..\component\CanSM\Implementation\CanSM.c	  3910  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3911      {
; ..\component\CanSM\Implementation\CanSM.c	  3912        CanNm_ConfirmPnAvailability( CanSM_GetNetworkHandleOfChannelConfig( CanSM_CanNetworkIdx ) );
; ..\component\CanSM\Implementation\CanSM.c	  3913        /* \trace SPEC-11378 */
; ..\component\CanSM\Implementation\CanSM.c	  3914        /* \trace SPEC-11431 */
; ..\component\CanSM\Implementation\CanSM.c	  3915      } /* TransceiverId valid; found in configuration */
; ..\component\CanSM\Implementation\CanSM.c	  3916  
; ..\component\CanSM\Implementation\CanSM.c	  3917    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  3918  
; ..\component\CanSM\Implementation\CanSM.c	  3919  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3920    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  3921    {
; ..\component\CanSM\Implementation\CanSM.c	  3922      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_CONFIRMPNAVAILABILITY, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  3923      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  3924    }
; ..\component\CanSM\Implementation\CanSM.c	  3925  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  3926    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  3927  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3928  
; ..\component\CanSM\Implementation\CanSM.c	  3929  } /* end Func CanSM_ConfirmPnAvailability */
; ..\component\CanSM\Implementation\CanSM.c	  3930  #endif /* end  else  if ( CANSM_PARTIAL_NETWORK_TRCV_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  3931  
; ..\component\CanSM\Implementation\CanSM.c	  3932  
; ..\component\CanSM\Implementation\CanSM.c	  3933  
; ..\component\CanSM\Implementation\CanSM.c	  3934  #if ( CANSM_BOR_CHECK_LEVEL == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3935  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  3936   *  CanSM_CheckBorLevel
; ..\component\CanSM\Implementation\CanSM.c	  3937   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  3938  /*!
; ..\component\CanSM\Implementation\CanSM.c	  3939   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  3940   *
; ..\component\CanSM\Implementation\CanSM.c	  3941   *
; ..\component\CanSM\Implementation\CanSM.c	  3942   *
; ..\component\CanSM\Implementation\CanSM.c	  3943   *
; ..\component\CanSM\Implementation\CanSM.c	  3944   *
; ..\component\CanSM\Implementation\CanSM.c	  3945   *
; ..\component\CanSM\Implementation\CanSM.c	  3946   *
; ..\component\CanSM\Implementation\CanSM.c	  3947   */
; ..\component\CanSM\Implementation\CanSM.c	  3948  FUNC(Std_ReturnType, CANSM_CODE) CanSM_CheckBorLevel( CONST( NetworkHandleType, AUTOMATIC ) CanSM_NetworkHandle, P2VAR( CanSM_BorStateType, AUTOMATIC, CANSM_APPL_VAR ) CanSM_BorStatePtr )
; ..\component\CanSM\Implementation\CanSM.c	  3949  {
; ..\component\CanSM\Implementation\CanSM.c	  3950    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  3951    Std_ReturnType CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  3952  
; ..\component\CanSM\Implementation\CanSM.c	  3953    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  3954  
; ..\component\CanSM\Implementation\CanSM.c	  3955    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3956  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3957    CanSM_StdReturnValue = E_NOT_OK;
; ..\component\CanSM\Implementation\CanSM.c	  3958    if ( CanSM_IsInitialized != CANSM_INITFUNCTION_FINISHED )
; ..\component\CanSM\Implementation\CanSM.c	  3959    {
; ..\component\CanSM\Implementation\CanSM.c	  3960      CanSM_DetErrorId = CANSM_E_UNINIT;
; ..\component\CanSM\Implementation\CanSM.c	  3961    }
; ..\component\CanSM\Implementation\CanSM.c	  3962    else if ( CanSM_BorStatePtr == NULL_PTR )
; ..\component\CanSM\Implementation\CanSM.c	  3963    {
; ..\component\CanSM\Implementation\CanSM.c	  3964      CanSM_DetErrorId = CANSM_E_PARAM_POINTER;
; ..\component\CanSM\Implementation\CanSM.c	  3965    }
; ..\component\CanSM\Implementation\CanSM.c	  3966    else
; ..\component\CanSM\Implementation\CanSM.c	  3967  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3968    {
; ..\component\CanSM\Implementation\CanSM.c	  3969  
; ..\component\CanSM\Implementation\CanSM.c	  3970      CanSM_CanNetworkIdx = CanSM_MapNetworkHandleToLocalIndex( CanSM_NetworkHandle );
; ..\component\CanSM\Implementation\CanSM.c	  3971  
; ..\component\CanSM\Implementation\CanSM.c	  3972      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  3973  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  3974      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
; ..\component\CanSM\Implementation\CanSM.c	  3975      {
; ..\component\CanSM\Implementation\CanSM.c	  3976        CanSM_DetErrorId = CANSM_E_INVALID_NETWORK_HANDLE;
; ..\component\CanSM\Implementation\CanSM.c	  3977      }
; ..\component\CanSM\Implementation\CanSM.c	  3978      else
; ..\component\CanSM\Implementation\CanSM.c	  3979  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  3980      {
; ..\component\CanSM\Implementation\CanSM.c	  3981  
; ..\component\CanSM\Implementation\CanSM.c	  3982        P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  3983  
; ..\component\CanSM\Implementation\CanSM.c	  3984        if ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter == CANSM_BOR_NONE )
; ..\component\CanSM\Implementation\CanSM.c	  3985        {
; ..\component\CanSM\Implementation\CanSM.c	  3986          *CanSM_BorStatePtr = CANSM_BOR_NONE; /* SBSW_CANSM_CHECKBORLEVEL_POINTERWRITEACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3987        }
; ..\component\CanSM\Implementation\CanSM.c	  3988        else if ( (*CanSM_CurrentChannelVarPtr).CanSM_BusOffCounter < CanSM_GetBorCounterL1ToL2OfChannelConfig( CanSM_CanNetworkIdx ) )
; ..\component\CanSM\Implementation\CanSM.c	  3989        {
; ..\component\CanSM\Implementation\CanSM.c	  3990          *CanSM_BorStatePtr = CANSM_BOR_LEVEL1; /* SBSW_CANSM_CHECKBORLEVEL_POINTERWRITEACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3991        }
; ..\component\CanSM\Implementation\CanSM.c	  3992        else
; ..\component\CanSM\Implementation\CanSM.c	  3993        {
; ..\component\CanSM\Implementation\CanSM.c	  3994          *CanSM_BorStatePtr = CANSM_BOR_LEVEL2; /* SBSW_CANSM_CHECKBORLEVEL_POINTERWRITEACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  3995        }
; ..\component\CanSM\Implementation\CanSM.c	  3996  
; ..\component\CanSM\Implementation\CanSM.c	  3997        CanSM_StdReturnValue = E_OK;
; ..\component\CanSM\Implementation\CanSM.c	  3998  
; ..\component\CanSM\Implementation\CanSM.c	  3999      } /* NetworkHandle index in configuration list ==> NetworkHandle valid */
; ..\component\CanSM\Implementation\CanSM.c	  4000    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  4001  
; ..\component\CanSM\Implementation\CanSM.c	  4002  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  4003    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
; ..\component\CanSM\Implementation\CanSM.c	  4004    {
; ..\component\CanSM\Implementation\CanSM.c	  4005      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_CHECKBORLEVEL, CanSM_DetErrorId );
; ..\component\CanSM\Implementation\CanSM.c	  4006      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  4007    }
; ..\component\CanSM\Implementation\CanSM.c	  4008  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  4009    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  4010  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  4011  
; ..\component\CanSM\Implementation\CanSM.c	  4012    return CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  4013  
; ..\component\CanSM\Implementation\CanSM.c	  4014  } /* end CanSM_CheckBorLevel */  /* PRQA S 6080 */ /* MD_MSR_STMIF  */
; ..\component\CanSM\Implementation\CanSM.c	  4015  #endif /* ( CANSM_BOR_CHECK_LEVEL == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  4016  
; ..\component\CanSM\Implementation\CanSM.c	  4017  
; ..\component\CanSM\Implementation\CanSM.c	  4018  
; ..\component\CanSM\Implementation\CanSM.c	  4019  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  4020   *  CanSM_StartWakeupSources
; ..\component\CanSM\Implementation\CanSM.c	  4021   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  4022  /*!
; ..\component\CanSM\Implementation\CanSM.c	  4023   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  4024   *
; ..\component\CanSM\Implementation\CanSM.c	  4025   *
; ..\component\CanSM\Implementation\CanSM.c	  4026   *
; ..\component\CanSM\Implementation\CanSM.c	  4027   *
; ..\component\CanSM\Implementation\CanSM.c	  4028   *
; ..\component\CanSM\Implementation\CanSM.c	  4029   *
; ..\component\CanSM\Implementation\CanSM.c	  4030   *
; ..\component\CanSM\Implementation\CanSM.c	  4031   *
; ..\component\CanSM\Implementation\CanSM.c	  4032   */
; ..\component\CanSM\Implementation\CanSM.c	  4033  FUNC(Std_ReturnType, CANSM_CODE) CanSM_StartWakeupSources( NetworkHandleType CanSM_NetworkHandle )
; Function CanSM_StartWakeupSources
.L164:
CanSM_StartWakeupSources:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  4034  {
; ..\component\CanSM\Implementation\CanSM.c	  4035    Std_ReturnType CanSM_StdReturnValue = E_NOT_OK;
	mov	d8,#1
.L495:

; ..\component\CanSM\Implementation\CanSM.c	  4036  #if !defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON
; ..\component\CanSM\Implementation\CanSM.c	  4037    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  4038  
; ..\component\CanSM\Implementation\CanSM.c	  4039    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  4040  
; ..\component\CanSM\Implementation\CanSM.c	  4041    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  4042  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  4043    if ( CanSM_IsInitialized != CANSM_INITFUNCTION_FINISHED )
	mov	d9,#0
	fcall	.cocofun_2
.L640:
	jeq	d15,#3,.L108
.L641:

; ..\component\CanSM\Implementation\CanSM.c	  4044    {
; ..\component\CanSM\Implementation\CanSM.c	  4045      CanSM_DetErrorId = CANSM_E_UNINIT;
	mov	d9,d8
	j	.L109
.L108:

; ..\component\CanSM\Implementation\CanSM.c	  4046    }
; ..\component\CanSM\Implementation\CanSM.c	  4047    else
; ..\component\CanSM\Implementation\CanSM.c	  4048  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  4049    {
; ..\component\CanSM\Implementation\CanSM.c	  4050  
; ..\component\CanSM\Implementation\CanSM.c	  4051      CanSM_CanNetworkIdx = CanSM_MapNetworkHandleToLocalIndex( CanSM_NetworkHandle );
; ..\component\CanSM\Implementation\CanSM.c	  4052  
; ..\component\CanSM\Implementation\CanSM.c	  4053      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  4054  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  4055      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
	jeq	d4,#0,.L110
.L642:

; ..\component\CanSM\Implementation\CanSM.c	  4056      {
; ..\component\CanSM\Implementation\CanSM.c	  4057        CanSM_DetErrorId = CANSM_E_INVALID_NETWORK_HANDLE;
	mov	d9,#3
	j	.L111
.L110:

; ..\component\CanSM\Implementation\CanSM.c	  4058      }
; ..\component\CanSM\Implementation\CanSM.c	  4059      else
; ..\component\CanSM\Implementation\CanSM.c	  4060  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  4061      {
; ..\component\CanSM\Implementation\CanSM.c	  4062  
; ..\component\CanSM\Implementation\CanSM.c	  4063  # if defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF
; ..\component\CanSM\Implementation\CanSM.c	  4064        if ( !CanSM_IsPartial_Network_Trcv_SupportOfChannelConfig( CanSM_CanNetworkIdx ) ) /* PRQA S 4304, 4404, 1881, 1882, 4558 */ /* MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean */
; ..\component\CanSM\Implementation\CanSM.c	  4065  # endif /* CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF */
; ..\component\CanSM\Implementation\CanSM.c	  4066        {
; ..\component\CanSM\Implementation\CanSM.c	  4067          /* No PN  */
; ..\component\CanSM\Implementation\CanSM.c	  4068  
; ..\component\CanSM\Implementation\CanSM.c	  4069          P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  4070  
; ..\component\CanSM\Implementation\CanSM.c	  4071          SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_5(); /* RequestComMode MainFunction */
	call	SuspendAllInterrupts
.L643:
	fcall	.cocofun_1
.L494:

; ..\component\CanSM\Implementation\CanSM.c	  4072          if ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_NO_COMMUNICATION )
	ld.bu	d15,[a15]4
.L644:
	jne	d15,#0,.L112
.L645:

; ..\component\CanSM\Implementation\CanSM.c	  4073          {
; ..\component\CanSM\Implementation\CanSM.c	  4074  
; ..\component\CanSM\Implementation\CanSM.c	  4075  # if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  4076            (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SU_TRCV_NORMAL; /* will be changed to CANSM_SU_CC_STOPPED in NWSM if Trcv is inactive on channel */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
; ..\component\CanSM\Implementation\CanSM.c	  4077  # else /* CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG  */
; ..\component\CanSM\Implementation\CanSM.c	  4078            (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SU_CC_STOPPED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	lea	a12,[a15]9
.L646:
	mov	d0,#2
	st.b	[a12],d0
.L647:

; ..\component\CanSM\Implementation\CanSM.c	  4079  # endif /* if ( CANSM_TRANSCEIVER_CHANNEL_SUPPORTOFCHANNELCONFIG == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  4080  
; ..\component\CanSM\Implementation\CanSM.c	  4081            /* CanSM_StartupStatemachine */
; ..\component\CanSM\Implementation\CanSM.c	  4082            CanSM_NetworkStatemachine( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d4,#0
	mov.aa	a4,a15
	call	CanSM_NetworkStatemachine
.L648:

; ..\component\CanSM\Implementation\CanSM.c	  4083  
; ..\component\CanSM\Implementation\CanSM.c	  4084            if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_S_STARTWAKEUPSOURCES_SUCCESSFUL )
	ld.bu	d0,[a12]
.L649:
	mov	d15,#96
.L650:
	jne	d15,d0,.L113
.L651:

; ..\component\CanSM\Implementation\CanSM.c	  4085            {
; ..\component\CanSM\Implementation\CanSM.c	  4086              CanSM_StdReturnValue = E_OK;
	mov	d8,#0
	j	.L114
.L113:

; ..\component\CanSM\Implementation\CanSM.c	  4087            }
; ..\component\CanSM\Implementation\CanSM.c	  4088            else
; ..\component\CanSM\Implementation\CanSM.c	  4089            {
; ..\component\CanSM\Implementation\CanSM.c	  4090              (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_S_NOCOM; /* CREQ-365 */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d15,#64
	st.b	[a12],d15
.L114:

; ..\component\CanSM\Implementation\CanSM.c	  4091            }
; ..\component\CanSM\Implementation\CanSM.c	  4092  
; ..\component\CanSM\Implementation\CanSM.c	  4093            (*CanSM_CurrentChannelVarPtr).CanSM_NewComMode = COMM_NO_COMMUNICATION; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d15,#0
	st.b	[a15]6,d15
.L112:

; ..\component\CanSM\Implementation\CanSM.c	  4094  
; ..\component\CanSM\Implementation\CanSM.c	  4095          } /* COMM_NO_COMMUNICATION Req; trigger valid */
; ..\component\CanSM\Implementation\CanSM.c	  4096          SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_5();
	call	ResumeAllInterrupts
.L111:
.L109:

; ..\component\CanSM\Implementation\CanSM.c	  4097        } /* no PN channel */
; ..\component\CanSM\Implementation\CanSM.c	  4098  
; ..\component\CanSM\Implementation\CanSM.c	  4099      } /* NetworkHandle index in list ==> NetworkHandle valid */
; ..\component\CanSM\Implementation\CanSM.c	  4100    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  4101  
; ..\component\CanSM\Implementation\CanSM.c	  4102  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  4103    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
	jeq	d9,#0,.L115
.L652:

; ..\component\CanSM\Implementation\CanSM.c	  4104    {
; ..\component\CanSM\Implementation\CanSM.c	  4105      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_STARTWAKEUPSOURCES, CanSM_DetErrorId );
	fcall	.cocofun_3
.L653:
	mov	d6,#32
.L654:
	mov	d7,d9
	call	Det_ReportError
.L115:

; ..\component\CanSM\Implementation\CanSM.c	  4106      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  4107    }
; ..\component\CanSM\Implementation\CanSM.c	  4108  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  4109    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  4110  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  4111  
; ..\component\CanSM\Implementation\CanSM.c	  4112  #endif /* ( not CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON  ) */
; ..\component\CanSM\Implementation\CanSM.c	  4113  
; ..\component\CanSM\Implementation\CanSM.c	  4114    CANSM_DUMMY_STATEMENT( CanSM_NetworkHandle ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  4115  
; ..\component\CanSM\Implementation\CanSM.c	  4116    return CanSM_StdReturnValue;
; ..\component\CanSM\Implementation\CanSM.c	  4117  
; ..\component\CanSM\Implementation\CanSM.c	  4118  } /* end CanSM_StartWakeupSources */ /* PRQA S 6080 */ /* MD_MSR_STMIF */
	mov	d2,d8
	ret
.L360:
	
__CanSM_StartWakeupSources_function_end:
	.size	CanSM_StartWakeupSources,__CanSM_StartWakeupSources_function_end-CanSM_StartWakeupSources
.L210:
	; End of function
	
	.sdecl	'.text.CanSM.CanSM_StopWakeupSources',code,cluster('CanSM_StopWakeupSources')
	.sect	'.text.CanSM.CanSM_StopWakeupSources'
	.align	2
	
	.global	CanSM_StopWakeupSources

; ..\component\CanSM\Implementation\CanSM.c	  4119  
; ..\component\CanSM\Implementation\CanSM.c	  4120  
; ..\component\CanSM\Implementation\CanSM.c	  4121  
; ..\component\CanSM\Implementation\CanSM.c	  4122  /***********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  4123   *  CanSM_StopWakeupSources
; ..\component\CanSM\Implementation\CanSM.c	  4124   **********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  4125  /*!
; ..\component\CanSM\Implementation\CanSM.c	  4126   * Internal comment removed.
; ..\component\CanSM\Implementation\CanSM.c	  4127   *
; ..\component\CanSM\Implementation\CanSM.c	  4128   *
; ..\component\CanSM\Implementation\CanSM.c	  4129   *
; ..\component\CanSM\Implementation\CanSM.c	  4130   *
; ..\component\CanSM\Implementation\CanSM.c	  4131   *
; ..\component\CanSM\Implementation\CanSM.c	  4132   *
; ..\component\CanSM\Implementation\CanSM.c	  4133   *
; ..\component\CanSM\Implementation\CanSM.c	  4134   */
; ..\component\CanSM\Implementation\CanSM.c	  4135  FUNC(Std_ReturnType, CANSM_CODE) CanSM_StopWakeupSources( NetworkHandleType CanSM_NetworkHandle, EcuM_WakeupSourceType WakeupSource )
; Function CanSM_StopWakeupSources
.L166:
CanSM_StopWakeupSources:	.type	func

; ..\component\CanSM\Implementation\CanSM.c	  4136  {
; ..\component\CanSM\Implementation\CanSM.c	  4137    Std_ReturnType CanSM_StdReturnValue = E_NOT_OK;
; ..\component\CanSM\Implementation\CanSM.c	  4138  #if !defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON
; ..\component\CanSM\Implementation\CanSM.c	  4139    CanSM_SizeOfChannelVarRecordType CanSM_CanNetworkIdx;
; ..\component\CanSM\Implementation\CanSM.c	  4140  
; ..\component\CanSM\Implementation\CanSM.c	  4141    uint8 CanSM_DetErrorId = CANSM_E_NO_ERROR;
; ..\component\CanSM\Implementation\CanSM.c	  4142  
; ..\component\CanSM\Implementation\CanSM.c	  4143    /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  4144  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  4145    if ( CanSM_IsInitialized != CANSM_INITFUNCTION_FINISHED )
	movh.a	a15,#@his(CanSM_IsInitialized)
	lea	a15,[a15]@los(CanSM_IsInitialized)
.L659:
	mov	d9,d5
	ld.bu	d15,[a15]
.L499:
	mov	d8,#1
.L498:
	mov	d10,#0
.L497:
	jeq	d15,#3,.L117
.L660:

; ..\component\CanSM\Implementation\CanSM.c	  4146    {
; ..\component\CanSM\Implementation\CanSM.c	  4147      CanSM_DetErrorId = CANSM_E_UNINIT;
	mov	d10,d8
	j	.L118
.L117:

; ..\component\CanSM\Implementation\CanSM.c	  4148      /* \trace..SPEC-2181302 */
; ..\component\CanSM\Implementation\CanSM.c	  4149    }
; ..\component\CanSM\Implementation\CanSM.c	  4150    else
; ..\component\CanSM\Implementation\CanSM.c	  4151  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  4152    {
; ..\component\CanSM\Implementation\CanSM.c	  4153  
; ..\component\CanSM\Implementation\CanSM.c	  4154      CanSM_CanNetworkIdx = CanSM_MapNetworkHandleToLocalIndex( CanSM_NetworkHandle );
; ..\component\CanSM\Implementation\CanSM.c	  4155  
; ..\component\CanSM\Implementation\CanSM.c	  4156      /* \trace SPEC-812, SPEC-811 */
; ..\component\CanSM\Implementation\CanSM.c	  4157  # if ( CANSM_DEV_ERROR_DETECT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  4158      if ( CanSM_CanNetworkIdx >= CanSM_GetSizeOfChannelVarRecord() )
	jeq	d4,#0,.L119
.L661:

; ..\component\CanSM\Implementation\CanSM.c	  4159      {
; ..\component\CanSM\Implementation\CanSM.c	  4160        CanSM_DetErrorId = CANSM_E_INVALID_NETWORK_HANDLE;
	mov	d10,#3
	j	.L120
.L119:

; ..\component\CanSM\Implementation\CanSM.c	  4161      }
; ..\component\CanSM\Implementation\CanSM.c	  4162      else
; ..\component\CanSM\Implementation\CanSM.c	  4163  # endif /* CANSM_DEV_ERROR_DETECT  */
; ..\component\CanSM\Implementation\CanSM.c	  4164      {
; ..\component\CanSM\Implementation\CanSM.c	  4165  
; ..\component\CanSM\Implementation\CanSM.c	  4166  # if defined CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF
; ..\component\CanSM\Implementation\CanSM.c	  4167        if ( !CanSM_IsPartial_Network_Trcv_SupportOfChannelConfig( CanSM_CanNetworkIdx ) ) /* PRQA S 4304, 4404, 1881, 1882, 4558 */ /* MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean, MD_MSR_AutosarBoolean */
; ..\component\CanSM\Implementation\CanSM.c	  4168  # endif /* CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_MIXED_ON_AND_OFF */
; ..\component\CanSM\Implementation\CanSM.c	  4169        {
; ..\component\CanSM\Implementation\CanSM.c	  4170  
; ..\component\CanSM\Implementation\CanSM.c	  4171          P2VAR(CanSM_ChannelVarRecordType, AUTOMATIC, CANSM_VAR_NOINIT) CanSM_CurrentChannelVarPtr = CanSM_GetAddrChannelVarRecord( CanSM_CanNetworkIdx );
; ..\component\CanSM\Implementation\CanSM.c	  4172  
; ..\component\CanSM\Implementation\CanSM.c	  4173          SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_5(); /* RequestComMode MainFunction */
	call	SuspendAllInterrupts
.L496:
	movh.a	a4,#@his(CanSM_ChannelVarRecord)
	lea	a4,[a4]@los(CanSM_ChannelVarRecord)
.L662:

; ..\component\CanSM\Implementation\CanSM.c	  4174  
; ..\component\CanSM\Implementation\CanSM.c	  4175          if ( (*CanSM_CurrentChannelVarPtr).CanSM_RequestedComMode == COMM_NO_COMMUNICATION )
	ld.bu	d15,[a4]4
.L663:
	jne	d15,#0,.L121
.L664:

; ..\component\CanSM\Implementation\CanSM.c	  4176          {
; ..\component\CanSM\Implementation\CanSM.c	  4177  
; ..\component\CanSM\Implementation\CanSM.c	  4178            (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_SD_CC_STOPPED; /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	lea	a12,[a4]9
.L665:
	mov	d15,#34
	st.b	[a12],d15
.L666:

; ..\component\CanSM\Implementation\CanSM.c	  4179  
; ..\component\CanSM\Implementation\CanSM.c	  4180            if ( (*CanSM_CurrentChannelVarPtr).CanSM_IndicatedComMode == COMM_NO_COMMUNICATION )
	ld.bu	d15,[a4]5
.L667:
	jne	d15,#0,.L122
.L668:

; ..\component\CanSM\Implementation\CanSM.c	  4181            {
; ..\component\CanSM\Implementation\CanSM.c	  4182              CanSM_IsInitialized = CANSM_STOPWAKEUPSOURCES_RUNNING; /* avoid RamCheck */
	mov	d0,#2
	st.b	[a15],d0
.L122:

; ..\component\CanSM\Implementation\CanSM.c	  4183            }
; ..\component\CanSM\Implementation\CanSM.c	  4184  
; ..\component\CanSM\Implementation\CanSM.c	  4185            /* CanSM_ShutDownStatemachine */
; ..\component\CanSM\Implementation\CanSM.c	  4186            CanSM_NetworkStatemachine( CanSM_CanNetworkIdx, CanSM_CurrentChannelVarPtr ); /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d4,#0
	call	CanSM_NetworkStatemachine
.L669:

; ..\component\CanSM\Implementation\CanSM.c	  4187  
; ..\component\CanSM\Implementation\CanSM.c	  4188            if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_SD_CC_SLEEP )
	ld.bu	d0,[a12]
.L670:
	mov	d15,#35
.L671:
	jne	d15,d0,.L123
.L672:

; ..\component\CanSM\Implementation\CanSM.c	  4189            { /* CANIF_CS_SLEEP failed trigger wakeup */
; ..\component\CanSM\Implementation\CanSM.c	  4190              EcuM_SetWakeupEvent( WakeupSource );
	mov	d4,d9
	call	EcuM_SetWakeupEvent
.L673:
	j	.L124
.L123:

; ..\component\CanSM\Implementation\CanSM.c	  4191              CanSM_StdReturnValue = E_OK;
; ..\component\CanSM\Implementation\CanSM.c	  4192            }
; ..\component\CanSM\Implementation\CanSM.c	  4193            else if ( (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState == CANSM_S_NOCOM )
	mov	d15,#64
.L674:
	jne	d15,d0,.L125
.L124:

; ..\component\CanSM\Implementation\CanSM.c	  4194            {
; ..\component\CanSM\Implementation\CanSM.c	  4195              CanSM_StdReturnValue = E_OK;
	mov	d8,#0
.L125:

; ..\component\CanSM\Implementation\CanSM.c	  4196            }
; ..\component\CanSM\Implementation\CanSM.c	  4197            else
; ..\component\CanSM\Implementation\CanSM.c	  4198            {
; ..\component\CanSM\Implementation\CanSM.c	  4199              CanSM_StdReturnValue = E_NOT_OK; /* redundant */
; ..\component\CanSM\Implementation\CanSM.c	  4200            }
; ..\component\CanSM\Implementation\CanSM.c	  4201  
; ..\component\CanSM\Implementation\CanSM.c	  4202            CanSM_IsInitialized = CANSM_STOPWAKEUPSOURCES_FINISHED;
	mov	d15,#3
	st.b	[a15],d15
.L675:

; ..\component\CanSM\Implementation\CanSM.c	  4203  
; ..\component\CanSM\Implementation\CanSM.c	  4204            (*CanSM_CurrentChannelVarPtr).CanSM_CurrentState = CANSM_S_NOCOM; /* CREQ-365 */ /* SBSW_CANSM_CHANNEL_STRUCT_ACCESS */
	mov	d15,#64
	st.b	[a12],d15
.L121:

; ..\component\CanSM\Implementation\CanSM.c	  4205  
; ..\component\CanSM\Implementation\CanSM.c	  4206          } /* COMM_NO_COMMUNICATION request; trigger valid */
; ..\component\CanSM\Implementation\CanSM.c	  4207          /* Exit ExclusiveArea, InterruptsEnabled */
; ..\component\CanSM\Implementation\CanSM.c	  4208          SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_5();
	call	ResumeAllInterrupts
.L120:
.L118:

; ..\component\CanSM\Implementation\CanSM.c	  4209  
; ..\component\CanSM\Implementation\CanSM.c	  4210        } /* !CanSM_IsPartial_Network_Trcv_SupportOfChannelConfig  */
; ..\component\CanSM\Implementation\CanSM.c	  4211  
; ..\component\CanSM\Implementation\CanSM.c	  4212      } /* NetworkHandle index in list ==> NetworkHandle valid */
; ..\component\CanSM\Implementation\CanSM.c	  4213    } /* no error detected */
; ..\component\CanSM\Implementation\CanSM.c	  4214  
; ..\component\CanSM\Implementation\CanSM.c	  4215  # if ( CANSM_DEV_ERROR_REPORT == STD_ON )
; ..\component\CanSM\Implementation\CanSM.c	  4216    if ( CanSM_DetErrorId != CANSM_E_NO_ERROR )
	jeq	d10,#0,.L127
.L676:

; ..\component\CanSM\Implementation\CanSM.c	  4217    {
; ..\component\CanSM\Implementation\CanSM.c	  4218      (void)Det_ReportError( CANSM_MODULE_ID, CANSM_INSTANCE_ID, CANSM_SID_STOPWAKEUPSOURCES, CanSM_DetErrorId );
	fcall	.cocofun_3
.L677:
	mov	d6,#33
.L678:
	mov	d7,d10
	call	Det_ReportError
.L127:

; ..\component\CanSM\Implementation\CanSM.c	  4219      /* \trace SPEC-807, SPEC-809 */
; ..\component\CanSM\Implementation\CanSM.c	  4220    }
; ..\component\CanSM\Implementation\CanSM.c	  4221  # else /* CANSM_DEV_ERROR_REPORT */
; ..\component\CanSM\Implementation\CanSM.c	  4222    CANSM_DUMMY_STATEMENT( CanSM_DetErrorId ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  4223  # endif /* end if ( CANSM_DEV_ERROR_REPORT == STD_ON ) */
; ..\component\CanSM\Implementation\CanSM.c	  4224  
; ..\component\CanSM\Implementation\CanSM.c	  4225  #endif /* ( not CANSM_PARTIAL_NETWORK_TRCV_SUPPORT_ALWAYS_ON  ) */
; ..\component\CanSM\Implementation\CanSM.c	  4226  
; ..\component\CanSM\Implementation\CanSM.c	  4227    CANSM_DUMMY_STATEMENT( CanSM_NetworkHandle ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  4228    CANSM_DUMMY_STATEMENT( WakeupSource ); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanSM\Implementation\CanSM.c	  4229  
; ..\component\CanSM\Implementation\CanSM.c	  4230    return CanSM_StdReturnValue; /* more than one 'return' path */ /* Network valid; found in configuration; stop searching, stop for-loop */
; ..\component\CanSM\Implementation\CanSM.c	  4231  
; ..\component\CanSM\Implementation\CanSM.c	  4232  } /* end CanSM_StopWakeupSources */ /* PRQA S 6080 */ /* MD_MSR_STMIF */
	mov	d2,d8
	ret
.L364:
	
__CanSM_StopWakeupSources_function_end:
	.size	CanSM_StopWakeupSources,__CanSM_StopWakeupSources_function_end-CanSM_StopWakeupSources
.L215:
	; End of function
	
	.sdecl	'.data.CanSM.CanSM_IsInitialized',data,cluster('CanSM_IsInitialized')
	.sect	'.data.CanSM.CanSM_IsInitialized'
CanSM_IsInitialized:	.type	object
	.size	CanSM_IsInitialized,1
	.space	1
	.calls	'CanSM_CheckModeIndication','BswM_CanSM_CurrentState'
	.calls	'CanSM_CheckModeIndication','ComM_BusSM_ModeIndication'
	.calls	'CanSM_FullComReached','CanIf_SetPduMode'
	.calls	'CanSM_FullComReached','CanSM_FullComToSilent'
	.calls	'CanSM_FullComToSilent','CanIf_SetPduMode'
	.calls	'CanSM_NetworkStatemachine','CanIf_SetControllerMode'
	.calls	'CanSM_NetworkStatemachine','CanSM_FullComReached'
	.calls	'CanSM_NetworkStatemachine','SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_4'
	.calls	'CanSM_NetworkStatemachine','SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_4'
	.calls	'CanSM_Init','CanSM_PreInit'
	.calls	'CanSM_Init','CanSM_NetworkStatemachine'
	.calls	'CanSM_MainFunction','SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_1'
	.calls	'CanSM_MainFunction','CanIf_SetControllerMode'
	.calls	'CanSM_MainFunction','Det_ReportError'
	.calls	'CanSM_MainFunction','SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_1'
	.calls	'CanSM_MainFunction','CanSM_NetworkStatemachine'
	.calls	'CanSM_MainFunction','CanSM_CheckModeIndication'
	.calls	'CanSM_RequestComMode','SuspendAllInterrupts'
	.calls	'CanSM_RequestComMode','CanSM_FullComReached'
	.calls	'CanSM_RequestComMode','CanSM_FullComToSilent'
	.calls	'CanSM_RequestComMode','ResumeAllInterrupts'
	.calls	'CanSM_RequestComMode','CanSM_CheckModeIndication'
	.calls	'CanSM_RequestComMode','Det_ReportError'
	.calls	'CanSM_GetCurrentComMode','Det_ReportError'
	.calls	'CanSM_ControllerBusOff','SuspendAllInterrupts'
	.calls	'CanSM_ControllerBusOff','ResumeAllInterrupts'
	.calls	'CanSM_ControllerBusOff','CanSM_CheckModeIndication'
	.calls	'CanSM_ControllerBusOff','Det_ReportError'
	.calls	'CanSM_ControllerModeIndication','SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_4'
	.calls	'CanSM_ControllerModeIndication','CanSM_NoComReached'
	.calls	'CanSM_ControllerModeIndication','CanSM_FullComReached'
	.calls	'CanSM_ControllerModeIndication','CanIf_SetPduMode'
	.calls	'CanSM_ControllerModeIndication','SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_4'
	.calls	'CanSM_ControllerModeIndication','CanSM_CheckModeIndication'
	.calls	'CanSM_ControllerModeIndication','Det_ReportError'
	.calls	'CanSM_TxTimeoutException','Det_ReportError'
	.calls	'CanSM_StartWakeupSources','SuspendAllInterrupts'
	.calls	'CanSM_StartWakeupSources','CanSM_NetworkStatemachine'
	.calls	'CanSM_StartWakeupSources','ResumeAllInterrupts'
	.calls	'CanSM_StartWakeupSources','Det_ReportError'
	.calls	'CanSM_StopWakeupSources','SuspendAllInterrupts'
	.calls	'CanSM_StopWakeupSources','CanSM_NetworkStatemachine'
	.calls	'CanSM_StopWakeupSources','EcuM_SetWakeupEvent'
	.calls	'CanSM_StopWakeupSources','ResumeAllInterrupts'
	.calls	'CanSM_StopWakeupSources','Det_ReportError'
	.calls	'CanSM_PreInit','.cocofun_1'
	.calls	'CanSM_MainFunction','.cocofun_2'
	.calls	'CanSM_MainFunction','.cocofun_1'
	.calls	'CanSM_MainFunction','.cocofun_3'
	.calls	'CanSM_RequestComMode','.cocofun_1'
	.calls	'CanSM_RequestComMode','.cocofun_3'
	.calls	'CanSM_GetCurrentComMode','.cocofun_2'
	.calls	'CanSM_GetCurrentComMode','.cocofun_3'
	.calls	'CanSM_ControllerBusOff','.cocofun_2'
	.calls	'CanSM_ControllerBusOff','.cocofun_1'
	.calls	'CanSM_ControllerBusOff','.cocofun_3'
	.calls	'CanSM_ControllerModeIndication','.cocofun_2'
	.calls	'CanSM_ControllerModeIndication','.cocofun_1'
	.calls	'CanSM_ControllerModeIndication','.cocofun_3'
	.calls	'CanSM_TxTimeoutException','.cocofun_2'
	.calls	'CanSM_TxTimeoutException','.cocofun_1'
	.calls	'CanSM_TxTimeoutException','.cocofun_3'
	.calls	'CanSM_StartWakeupSources','.cocofun_2'
	.calls	'CanSM_StartWakeupSources','.cocofun_1'
	.calls	'CanSM_StartWakeupSources','.cocofun_3'
	.calls	'CanSM_StopWakeupSources','.cocofun_3'
	.calls	'CanSM_CheckModeIndication','',0
	.calls	'CanSM_FullComReached','',0
	.calls	'CanSM_FullComToSilent','',0
	.calls	'CanSM_NoComReached','',0
	.calls	'CanSM_NetworkStatemachine','',8
	.calls	'CanSM_InitMemory','',0
	.calls	'CanSM_PreInit','',0
	.calls	'.cocofun_1','',0
	.calls	'CanSM_Init','',0
	.calls	'CanSM_MainFunction','',0
	.calls	'.cocofun_3','',0
	.calls	'.cocofun_2','',0
	.calls	'CanSM_RequestComMode','',0
	.calls	'CanSM_GetCurrentComMode','',0
	.calls	'CanSM_ControllerBusOff','',0
	.calls	'CanSM_ControllerModeIndication','',0
	.calls	'CanSM_TxTimeoutException','',0
	.calls	'CanSM_StartWakeupSources','',0
	.extern	Det_ReportError
	.extern	CanSM_ChannelVarRecord
	.extern	CanIf_SetControllerMode
	.extern	CanIf_SetPduMode
	.extern	EcuM_SetWakeupEvent
	.extern	BswM_CanSM_CurrentState
	.extern	ComM_BusSM_ModeIndication
	.extern	SuspendAllInterrupts
	.extern	ResumeAllInterrupts
	.extern	SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_1
	.extern	SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_1
	.extern	SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_4
	.extern	SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_4
	.calls	'CanSM_StopWakeupSources','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L168:
	.word	29711
	.half	3
	.word	.L169
	.byte	4
.L167:
	.byte	1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L170
.L269:
	.byte	2
	.byte	'unsigned char',0,1,8
.L336:
	.byte	3
	.byte	'CanSM_InitializeVariables',0,3,1,212,8,43,1,1
.L339:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,212,8,103
	.word	135
.L341:
	.byte	5,6,0,0
.L353:
	.byte	3
	.byte	'CanSM_UninitToNoCom',0,3,1,251,8,43,1,1
.L356:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,251,8,97
	.word	135
.L358:
	.byte	6,0,2
	.byte	'unsigned short int',0,2,7,7
	.byte	'CanSM_ChannelVarRecordTypeTag',0,2,55,16,20,8
	.byte	'CanSM_UniversalTimer',0
	.word	278
	.byte	2,2,35,0,8
	.byte	'CanSM_LastValidBaudRate',0
	.word	278
	.byte	2,2,35,2,8
	.byte	'CanSM_RequestedComMode',0
	.word	135
	.byte	1,2,35,4,8
	.byte	'CanSM_IndicatedComMode',0
	.word	135
	.byte	1,2,35,5,8
	.byte	'CanSM_NewComMode',0
	.word	135
	.byte	1,2,35,6,8
	.byte	'CanSM_EnfroceComModeIndication',0
	.word	135
	.byte	1,2,35,7,8
	.byte	'CanSM_RamCheckState',0
	.word	135
	.byte	1,2,35,8,8
	.byte	'CanSM_CurrentState',0
	.word	135
	.byte	1,2,35,9,8
	.byte	'CanSM_ModeRequestRepetitionCounter',0
	.word	135
	.byte	1,2,35,10,8
	.byte	'CanSM_ModeIndicationResponsible',0
	.word	135
	.byte	1,2,35,11,8
	.byte	'CanSM_BswMIndicatedState',0
	.word	135
	.byte	1,2,35,12,8
	.byte	'CanSM_BswMNewState',0
	.word	135
	.byte	1,2,35,13,8
	.byte	'CanSM_BusOffCounter',0
	.word	135
	.byte	1,2,35,14,8
	.byte	'CanSM_BusOffFlag',0
	.word	135
	.byte	1,2,35,15,8
	.byte	'CanSM_TxOnlineDelayTime',0
	.word	135
	.byte	1,2,35,16,8
	.byte	'CanSM_TxTimeoutEndIndicationFlag',0
	.word	135
	.byte	1,2,35,17,0
.L411:
	.byte	9
	.word	300
.L441:
	.byte	3
	.byte	'CanSM_BusOffCheckToNoBusOff',0,3,1,170,9,43,1,1
.L444:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,170,9,105
	.word	135
.L446:
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,170,9,189,1
	.word	863
.L448:
	.byte	6,0
.L306:
	.byte	3
	.byte	'CanSM_CtrlStartedIndicated',0,3,1,207,9,43,1,1
.L308:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,207,9,104
	.word	135
.L310:
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,207,9,188,1
	.word	863
.L312:
	.byte	6,0
.L288:
	.byte	3
	.byte	'CanSM_CtrlStoppedIndicated',0,3,1,149,10,43,1,1
.L291:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,149,10,104
	.word	135
.L293:
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,149,10,188,1
	.word	863
.L295:
	.byte	6,0
.L298:
	.byte	3
	.byte	'CanSM_CtrlSleepIndicated',0,3,1,240,10,43,1,1
.L301:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,240,10,102
	.word	135
.L303:
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,240,10,186,1
	.word	863
.L305:
	.byte	6,0
.L379:
	.byte	3
	.byte	'CanSM_EvaluateComModeRequest',0,3,1,139,12,43,1,1
.L381:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,139,12,106
	.word	135
.L383:
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,139,12,190,1
	.word	863
.L385:
	.byte	5,6,0,0
.L390:
	.byte	3
	.byte	'CanSM_HandleBusOffInSilent',0,3,1,176,12,43,1,1
.L391:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,176,12,104
	.word	135
.L393:
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,176,12,188,1
	.word	863
.L395:
	.byte	6,0
.L396:
	.byte	3
	.byte	'CanSM_EvaluateMaxModeRequests',0,3,1,210,12,43,1,1
.L397:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,210,12,107
	.word	135
.L399:
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,210,12,191,1
	.word	863
.L401:
	.byte	5,6,0,0
.L405:
	.byte	3
	.byte	'CanSM_TimerHandling',0,3,1,135,13,43,1,1
.L406:
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,135,13,127
	.word	863
.L408:
	.byte	6,0
.L318:
	.byte	3
	.byte	'CanSM_HandleComModeRequest',0,3,1,173,13,43,1,1
.L320:
	.byte	4
	.byte	'CanSM_RequestedComMMode',0,1,173,13,85
	.word	135
.L322:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,173,13,143,1
	.word	135
.L324:
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,173,13,227,1
	.word	863
.L326:
	.byte	6,0,10
	.byte	'CanSM_MapNetworkHandleToLocalIndex',0,3,1,240,13,71
	.word	135
	.byte	1,1,4
	.byte	'CanSM_NetworkHandle',0,1,240,13,125
	.word	135
	.byte	6,0,10
	.byte	'CanSM_MapControllerIdToLocalIndex',0,3,1,171,14,71
	.word	135
	.byte	1,1,4
	.byte	'CanSM_ControllerId',0,1,171,14,112
	.word	135
	.byte	6,0
.L272:
	.byte	3
	.byte	'CanSM_BusOffIndicated',0,3,1,203,14,43,1,1
.L273:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,203,14,99
	.word	135
.L275:
	.byte	5,6,0,0
.L421:
	.byte	3
	.byte	'CanSM_SetCanIfPduModeFullCom',0,3,1,234,6,43,1,1
.L423:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,234,6,106
	.word	135
.L425:
	.byte	4
	.byte	'CanSM_BusOffLevel',0,1,234,6,133,1
	.word	135
.L427:
	.byte	6,0
.L413:
	.byte	3
	.byte	'CanSM_StartControllerToBusOffCheck',0,3,1,201,7,43,1,1
.L416:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,201,7,112
	.word	135
.L418:
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,201,7,196,1
	.word	863
.L420:
	.byte	5,6,0,0
.L276:
	.byte	3
	.byte	'CanSM_FullComToRestartController',0,3,1,253,7,43,1,1
.L278:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,253,7,110
	.word	135
.L280:
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,253,7,194,1
	.word	863
.L282:
	.byte	6,0
.L343:
	.byte	3
	.byte	'CanSM_InitiateShutDownSequence',0,3,1,163,8,43,1,1
.L345:
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,163,8,108
	.word	135
.L347:
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,163,8,192,1
	.word	863
.L349:
	.byte	6,0,2
	.byte	'int',0,4,5,11
	.word	2442
	.byte	12
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,13
	.word	2449
	.byte	0,2
	.byte	'unsigned int',0,4,7,14
	.word	2491
	.byte	9
	.word	2491
	.byte	15
	.byte	'__cmpswapw',0
	.word	2507
	.byte	1,1,1,1,16
	.byte	'p',0
	.word	2512
	.byte	16
	.byte	'value',0
	.word	2491
	.byte	16
	.byte	'compare',0
	.word	2491
	.byte	0,17
	.byte	'Det_ReportError',0,3,154,2,32
	.word	135
	.byte	1,1,1,1,4
	.byte	'ModuleId',0,3,154,2,56
	.word	278
	.byte	4
	.byte	'InstanceId',0,3,154,2,72
	.word	135
	.byte	4
	.byte	'ApiId',0,3,154,2,90
	.word	135
	.byte	4
	.byte	'ErrorId',0,3,154,2,103
	.word	135
	.byte	0
.L285:
	.byte	18,5,189,2,9,1,19
	.byte	'CANIF_CS_UNINIT',0,0,19
	.byte	'CANIF_CS_STOPPED',0,1,19
	.byte	'CANIF_CS_STARTED',0,2,19
	.byte	'CANIF_CS_SLEEP',0,3,0,17
	.byte	'CanIf_SetControllerMode',0,4,188,2,34
	.word	135
	.byte	1,1,1,1,4
	.byte	'ControllerId',0,4,188,2,64
	.word	135
	.byte	4
	.byte	'ControllerMode',0,4,188,2,103
	.word	2669
	.byte	0,18,5,198,2,9,1,19
	.byte	'CANIF_SET_OFFLINE',0,0,19
	.byte	'CANIF_SET_RX_OFFLINE',0,1,19
	.byte	'CANIF_SET_RX_ONLINE',0,2,19
	.byte	'CANIF_SET_TX_OFFLINE',0,3,19
	.byte	'CANIF_SET_TX_ONLINE',0,4,19
	.byte	'CANIF_SET_ONLINE',0,5,19
	.byte	'CANIF_SET_TX_OFFLINE_ACTIVE',0,6,19
	.byte	'CANIF_NO_MODE_PDU_SET_MODE_TYPE_END',0,7,0,17
	.byte	'CanIf_SetPduMode',0,4,249,2,34
	.word	135
	.byte	1,1,1,1,4
	.byte	'ControllerId',0,4,249,2,57
	.word	135
	.byte	4
	.byte	'PduModeRequest',0,4,249,2,92
	.word	2833
	.byte	0
.L329:
	.byte	9
	.word	135
.L366:
	.byte	2
	.byte	'unsigned long int',0,4,7,20
	.byte	'EcuM_SetWakeupEvent',0,6,94,23,1,1,1,1,4
	.byte	'WakeupSource',0,6,94,65
	.word	3119
	.byte	0,7
	.byte	'sCanSM_PCConfigType',0,7,213,4,16,1,8
	.byte	'CanSM_PCConfigNeverUsed',0
	.word	135
	.byte	1,2,35,0,0,11
	.word	3190
	.byte	9
	.word	3250
.L334:
	.byte	11
	.word	3255
.L351:
	.byte	11
	.word	3255
	.byte	20
	.byte	'BswM_CanSM_CurrentState',0,8,79,30,1,1,1,1,4
	.byte	'Network',0,8,79,72
	.word	135
	.byte	4
	.byte	'CurrentState',0,8,79,108
	.word	135
	.byte	0,20
	.byte	'ComM_BusSM_ModeIndication',0,9,78,23,1,1,1,1,4
	.byte	'Channel',0,9,78,67
	.word	135
	.byte	4
	.byte	'ComMode',0,9,78,123
	.word	3114
	.byte	0,21
	.byte	'SuspendAllInterrupts',0,10,222,10,21,1,1,1,1,21
	.byte	'ResumeAllInterrupts',0,10,241,10,21,1,1,1,1,21
	.byte	'SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_1',0,11,61,22,1,1,1,1,21
	.byte	'SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_1',0,11,62,22,1,1,1,1,21
	.byte	'SchM_Enter_CanSM_CANSM_EXCLUSIVE_AREA_4',0,11,63,22,1,1,1,1,21
	.byte	'SchM_Exit_CanSM_CANSM_EXCLUSIVE_AREA_4',0,11,64,22,1,1,1,1,22
	.word	152
	.byte	23
	.word	186
	.byte	5,24
	.word	2335
	.byte	23
	.word	2374
	.byte	23
	.word	2403
	.byte	25
	.word	2440
	.byte	0,6,0,0,22
	.word	219
	.byte	23
	.word	247
	.byte	6,0,22
	.word	868
	.byte	23
	.word	904
	.byte	23
	.word	933
	.byte	6,0,22
	.word	972
	.byte	23
	.word	1007
	.byte	23
	.word	1036
	.byte	6,0,22
	.word	1075
	.byte	23
	.word	1110
	.byte	23
	.word	1139
	.byte	6,0,22
	.word	1178
	.byte	23
	.word	1211
	.byte	23
	.word	1240
	.byte	6,0,22
	.word	1279
	.byte	23
	.word	1316
	.byte	23
	.word	1345
	.byte	5,24
	.word	2335
	.byte	23
	.word	2374
	.byte	23
	.word	2403
	.byte	25
	.word	2440
	.byte	0,6,0,0,22
	.word	1386
	.byte	23
	.word	1421
	.byte	23
	.word	1450
	.byte	6,0,22
	.word	1489
	.byte	23
	.word	1527
	.byte	23
	.word	1556
	.byte	5,24
	.word	2335
	.byte	23
	.word	2374
	.byte	23
	.word	2403
	.byte	25
	.word	2440
	.byte	0,6,0,0,22
	.word	1597
	.byte	23
	.word	1625
	.byte	6,0,22
	.word	1663
	.byte	23
	.word	1698
	.byte	23
	.word	1731
	.byte	23
	.word	1761
	.byte	6,0,22
	.word	1800
	.byte	23
	.word	1847
	.byte	6,0,22
	.word	1878
	.byte	23
	.word	1924
	.byte	6,0,22
	.word	1954
	.byte	23
	.word	1984
	.byte	5,24
	.word	2226
	.byte	23
	.word	2267
	.byte	23
	.word	2296
	.byte	25
	.word	2333
	.byte	0,6,0,0,22
	.word	2017
	.byte	23
	.word	2054
	.byte	23
	.word	2083
	.byte	6,0,22
	.word	2113
	.byte	23
	.word	2156
	.byte	23
	.word	2185
	.byte	5,24
	.word	2017
	.byte	23
	.word	2054
	.byte	23
	.word	2083
	.byte	25
	.word	2111
	.byte	0,6,0,0,22
	.word	2226
	.byte	23
	.word	2267
	.byte	23
	.word	2296
	.byte	6,0,22
	.word	2335
	.byte	23
	.word	2374
	.byte	23
	.word	2403
	.byte	6,0,26,1,9
	.word	4052
	.byte	27
	.byte	'__codeptr',0,1,1,1
	.word	4054
	.byte	27
	.byte	'boolean',0,12,101,31
	.word	135
	.byte	27
	.byte	'uint8',0,12,104,31
	.word	135
	.byte	2
	.byte	'short int',0,2,5,27
	.byte	'sint16',0,12,105,31
	.word	4107
	.byte	27
	.byte	'uint16',0,12,106,31
	.word	278
	.byte	2
	.byte	'long int',0,4,5,27
	.byte	'sint32',0,12,107,31
	.word	4150
	.byte	27
	.byte	'uint32',0,12,108,31
	.word	3119
	.byte	27
	.byte	'uint8_least',0,12,111,31
	.word	135
	.byte	2
	.byte	'unsigned long long int',0,8,7,27
	.byte	'uint64',0,12,121,30
	.word	4212
	.byte	27
	.byte	'StatusType',0,13,127,23
	.word	135
	.byte	27
	.byte	'Std_ReturnType',0,13,132,1,15
	.word	135
	.byte	28,13,134,1,9,8,8
	.byte	'vendorID',0
	.word	278
	.byte	2,2,35,0,8
	.byte	'moduleID',0
	.word	278
	.byte	2,2,35,2,8
	.byte	'sw_major_version',0
	.word	135
	.byte	1,2,35,4,8
	.byte	'sw_minor_version',0
	.word	135
	.byte	1,2,35,5,8
	.byte	'sw_patch_version',0
	.word	135
	.byte	1,2,35,6,0,27
	.byte	'Std_VersionInfoType',0,13,141,1,3
	.word	4296
	.byte	27
	.byte	'PduIdType',0,14,63,15
	.word	135
	.byte	27
	.byte	'PduLengthType',0,14,65,15
	.word	135
	.byte	9
	.word	135
	.byte	27
	.byte	'SduDataPtrType',0,15,196,1,54
	.word	4486
	.byte	27
	.byte	'NetworkHandleType',0,15,215,1,22
	.word	135
	.byte	18,15,219,1,9,1,19
	.byte	'TP_DATACONF',0,0,19
	.byte	'TP_DATARETRY',0,1,19
	.byte	'TP_CONFPENDING',0,2,0,27
	.byte	'TpDataStateType',0,15,226,1,3
	.word	4542
	.byte	7
	.byte	'sDet_PCConfigType',0,16,238,1,16,1,8
	.byte	'Det_PCConfigNeverUsed',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'Det_PCConfigType',0,16,241,1,3
	.word	4620
	.byte	27
	.byte	'ComM_InhibitionStatusType',0,17,37,15
	.word	135
	.byte	27
	.byte	'ComM_ModeType',0,17,58,15
	.word	135
	.byte	27
	.byte	'EcuM_ModeType',0,17,64,15
	.word	135
	.byte	27
	.byte	'EcuM_StateType',0,17,70,15
	.word	135
	.byte	27
	.byte	'CanSM_ChannelVarRecordType',0,2,73,3
	.word	300
	.byte	27
	.byte	'CanSM_ChannelConfigIterType',0,7,223,3,21
	.word	135
	.byte	27
	.byte	'CanSM_SizeOfChannelVarRecordType',0,7,149,4,15
	.word	135
	.byte	7
	.byte	'sCanSM_ChannelConfigType',0,7,165,4,16,1,8
	.byte	'CanSM_ChannelConfigNeverUsed',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'CanSM_ChannelConfigType',0,7,168,4,3
	.word	4917
	.byte	27
	.byte	'CanSM_PCConfigType',0,7,216,4,3
	.word	3190
	.byte	27
	.byte	'CanSM_ConfigType',0,7,218,4,28
	.word	3190
	.byte	29,20
	.word	300
	.byte	30,0,0,31
	.byte	'CanSM_ChannelVarRecord',0,7,237,4,58
	.word	5074
	.byte	1,1,27
	.byte	'Can_IdType',0,18,52,30
	.word	278
	.byte	27
	.byte	'Can_HwHandleType',0,18,55,29
	.word	135
	.byte	27
	.byte	'Can_SduPtrType',0,18,58,45
	.word	4486
	.byte	7
	.byte	'Can_PduTypeTag',0,18,61,16,12,8
	.byte	'id',0
	.word	278
	.byte	2,2,35,0,8
	.byte	'length',0
	.word	135
	.byte	1,2,35,2,8
	.byte	'sdu',0
	.word	5161
	.byte	4,2,35,4,8
	.byte	'swPduHandle',0
	.word	135
	.byte	1,2,35,8,0,27
	.byte	'Can_PduType',0,18,67,3
	.word	5184
	.byte	9
	.word	135
	.byte	18,18,77,9,1,19
	.byte	'CAN_CS_UNINIT',0,0,19
	.byte	'CAN_CS_STARTED',0,1,19
	.byte	'CAN_CS_STOPPED',0,2,19
	.byte	'CAN_CS_SLEEP',0,3,0,27
	.byte	'Can_ControllerStateType',0,18,82,3
	.word	5292
	.byte	18,18,84,9,1,19
	.byte	'CAN_ERRORSTATE_ACTIVE',0,0,19
	.byte	'CAN_ERRORSTATE_PASSIVE',0,1,19
	.byte	'CAN_ERRORSTATE_BUSOFF',0,2,0,27
	.byte	'Can_ErrorStateType',0,18,88,3
	.word	5395
	.byte	27
	.byte	'tCanLLCanIntOld',0,19,161,3,37
	.word	3119
	.byte	27
	.byte	'Can_OsIsrType',0,19,167,3,15
	.word	135
	.byte	27
	.byte	'Can_ExternalTickType',0,19,180,3,16
	.word	3119
	.byte	29,32
	.word	3119
	.byte	30,7,0,27
	.byte	'Can_LoopTimeout_dim_type',0,19,183,3,44
	.word	5579
	.byte	27
	.byte	'Can_ControllerConfigIterType',0,19,192,13,21
	.word	135
	.byte	27
	.byte	'Can_PduOfActiveSendObjectType',0,19,148,14,19
	.word	135
	.byte	27
	.byte	'Can_StateOfActiveSendObjectType',0,19,151,14,16
	.word	278
	.byte	27
	.byte	'Can_BTPType',0,19,154,14,16
	.word	3119
	.byte	27
	.byte	'Can_RXBCOfBufferConfigType',0,19,160,14,15
	.word	135
	.byte	27
	.byte	'Can_RXF0COfBufferConfigType',0,19,163,14,16
	.word	3119
	.byte	27
	.byte	'Can_RXF1COfBufferConfigType',0,19,166,14,15
	.word	135
	.byte	27
	.byte	'Can_TXBCOfBufferConfigType',0,19,169,14,16
	.word	3119
	.byte	27
	.byte	'Can_TXEFCOfBufferConfigType',0,19,172,14,15
	.word	135
	.byte	27
	.byte	'Can_CanIfChannelIdType',0,19,190,14,15
	.word	135
	.byte	27
	.byte	'Can_CanSubSystemBaseAdrType',0,19,193,14,16
	.word	3119
	.byte	27
	.byte	'Can_BasisAdrOfControllerConfigType',0,19,196,14,16
	.word	3119
	.byte	27
	.byte	'Can_CanControllerDefaultBaudrateIdxOfControllerConfigType',0,19,199,14,15
	.word	135
	.byte	27
	.byte	'Can_CanControllerDefaultBaudrateOfControllerConfigType',0,19,202,14,16
	.word	278
	.byte	27
	.byte	'Can_IsTTCanOfControllerConfigType',0,19,205,14,17
	.word	135
	.byte	27
	.byte	'Can_MailboxRxBasicEndIdxOfControllerConfigType',0,19,208,14,15
	.word	135
	.byte	27
	.byte	'Can_MailboxRxBasicLengthOfControllerConfigType',0,19,211,14,15
	.word	135
	.byte	27
	.byte	'Can_MailboxRxBasicStartIdxOfControllerConfigType',0,19,214,14,15
	.word	135
	.byte	27
	.byte	'Can_MailboxTxBasicEndIdxOfControllerConfigType',0,19,220,14,15
	.word	135
	.byte	27
	.byte	'Can_MailboxTxBasicLengthOfControllerConfigType',0,19,223,14,15
	.word	135
	.byte	27
	.byte	'Can_MailboxTxBasicStartIdxOfControllerConfigType',0,19,226,14,15
	.word	135
	.byte	27
	.byte	'Can_RxBasicHwStartOfControllerConfigType',0,19,232,14,15
	.word	135
	.byte	27
	.byte	'Can_RxBasicHwStopOfControllerConfigType',0,19,235,14,15
	.word	135
	.byte	27
	.byte	'Can_RxFullHwStartOfControllerConfigType',0,19,238,14,15
	.word	135
	.byte	27
	.byte	'Can_RxFullHwStopOfControllerConfigType',0,19,241,14,15
	.word	135
	.byte	27
	.byte	'Can_RxSelectionOfControllerConfigType',0,19,244,14,15
	.word	135
	.byte	27
	.byte	'Can_TxBasicHwStartOfControllerConfigType',0,19,247,14,15
	.word	135
	.byte	27
	.byte	'Can_TxBasicHwStopOfControllerConfigType',0,19,250,14,15
	.word	135
	.byte	27
	.byte	'Can_TxFullHwStartOfControllerConfigType',0,19,253,14,15
	.word	135
	.byte	27
	.byte	'Can_TxFullHwStopOfControllerConfigType',0,19,128,15,15
	.word	135
	.byte	27
	.byte	'Can_UnusedHwStartOfControllerConfigType',0,19,131,15,15
	.word	135
	.byte	27
	.byte	'Can_UnusedHwStopOfControllerConfigType',0,19,134,15,15
	.word	135
	.byte	27
	.byte	'Can_BusOffNotificationOfControllerDataType',0,19,137,15,15
	.word	135
	.byte	27
	.byte	'Can_BusOffTransitionRequestOfControllerDataType',0,19,140,15,15
	.word	135
	.byte	27
	.byte	'Can_CanInterruptCounterOfControllerDataType',0,19,143,15,15
	.word	135
	.byte	27
	.byte	'Can_IntEnableOfControllerDataType',0,19,146,15,16
	.word	3119
	.byte	27
	.byte	'Can_IsBusOffOfControllerDataType',0,19,149,15,17
	.word	135
	.byte	27
	.byte	'Can_LastInitObjectOfControllerDataType',0,19,152,15,15
	.word	135
	.byte	27
	.byte	'Can_LastStateOfControllerDataType',0,19,155,15,15
	.word	135
	.byte	27
	.byte	'Can_LogStatusOfControllerDataType',0,19,158,15,15
	.word	135
	.byte	27
	.byte	'Can_ModeTransitionRequestOfControllerDataType',0,19,161,15,15
	.word	135
	.byte	27
	.byte	'Can_NonFdObjectsPendingFlagOfControllerDataType',0,19,164,15,16
	.word	3119
	.byte	27
	.byte	'Can_PrevModeOfControllerDataType',0,19,167,15,15
	.word	135
	.byte	27
	.byte	'Can_RamCheckTransitionRequestOfControllerDataType',0,19,170,15,15
	.word	135
	.byte	27
	.byte	'Can_TXBCROfControllerDataType',0,19,173,15,16
	.word	3119
	.byte	27
	.byte	'Can_TXBRPOfControllerDataType',0,19,176,15,16
	.word	3119
	.byte	27
	.byte	'Can_FBTPType',0,19,179,15,16
	.word	3119
	.byte	27
	.byte	'Can_GFCType',0,19,182,15,15
	.word	135
	.byte	27
	.byte	'Can_INT_PriorityType',0,19,185,15,15
	.word	135
	.byte	27
	.byte	'Can_INT_RoutingGroupType',0,19,188,15,15
	.word	135
	.byte	27
	.byte	'Can_InitObjectBaudrateType',0,19,191,15,16
	.word	278
	.byte	27
	.byte	'Can_InitObjectFdBrsConfigType',0,19,194,15,15
	.word	135
	.byte	27
	.byte	'Can_InitObjectStartIndexType',0,19,197,15,15
	.word	135
	.byte	27
	.byte	'Can_ActiveSendObjectOfMailboxType',0,19,200,15,15
	.word	135
	.byte	27
	.byte	'Can_ControllerConfigIdxOfMailboxType',0,19,203,15,15
	.word	135
	.byte	27
	.byte	'Can_FdPaddingOfMailboxType',0,19,206,15,15
	.word	135
	.byte	27
	.byte	'Can_HwHandleOfMailboxType',0,19,209,15,15
	.word	135
	.byte	27
	.byte	'Can_IDValueOfMailboxType',0,19,212,15,15
	.word	135
	.byte	27
	.byte	'Can_MailboxSizeOfMailboxType',0,19,215,15,15
	.word	135
	.byte	27
	.byte	'Can_MailboxTypeOfMailboxType',0,19,218,15,15
	.word	135
	.byte	27
	.byte	'Can_MaxDataLenOfMailboxType',0,19,221,15,15
	.word	135
	.byte	27
	.byte	'Can_MemorySectionsIndexOfMailboxType',0,19,224,15,15
	.word	135
	.byte	27
	.byte	'Can_MemorySectionStartOfMemorySectionInfoType',0,19,227,15,15
	.word	135
	.byte	27
	.byte	'Can_HwHandleOfMemorySectionObjectsType',0,19,230,15,15
	.word	135
	.byte	27
	.byte	'Can_MailboxElementOfMemorySectionObjectsType',0,19,233,15,15
	.word	135
	.byte	27
	.byte	'Can_MailboxHandleOfMemorySectionObjectsType',0,19,236,15,15
	.word	135
	.byte	27
	.byte	'Can_FLSSAOfSIDFCType',0,19,242,15,15
	.word	135
	.byte	27
	.byte	'Can_LSSOfSIDFCType',0,19,245,15,15
	.word	135
	.byte	27
	.byte	'Can_SIDFEEndIdxOfSIDFCType',0,19,248,15,15
	.word	135
	.byte	27
	.byte	'Can_SIDFEStartIdxOfSIDFCType',0,19,251,15,15
	.word	135
	.byte	27
	.byte	'Can_SIDFEType',0,19,129,16,16
	.word	3119
	.byte	27
	.byte	'Can_SRN_AddressType',0,19,132,16,16
	.word	3119
	.byte	27
	.byte	'Can_RXBAOfShmAdrType',0,19,135,16,16
	.word	3119
	.byte	27
	.byte	'Can_RXF0AOfShmAdrType',0,19,138,16,16
	.word	3119
	.byte	27
	.byte	'Can_RXF1AOfShmAdrType',0,19,141,16,16
	.word	3119
	.byte	27
	.byte	'Can_SIDFAOfShmAdrType',0,19,144,16,16
	.word	3119
	.byte	27
	.byte	'Can_StartAdrOfShmAdrType',0,19,147,16,16
	.word	3119
	.byte	27
	.byte	'Can_StopAdrOfShmAdrType',0,19,150,16,16
	.word	3119
	.byte	27
	.byte	'Can_TXBAOfShmAdrType',0,19,153,16,16
	.word	3119
	.byte	27
	.byte	'Can_TXEFAOfShmAdrType',0,19,156,16,16
	.word	3119
	.byte	27
	.byte	'Can_XIDFAOfShmAdrType',0,19,159,16,16
	.word	3119
	.byte	27
	.byte	'Can_F0DSOfShmElementSizeType',0,19,162,16,15
	.word	135
	.byte	27
	.byte	'Can_F1DSOfShmElementSizeType',0,19,165,16,15
	.word	135
	.byte	27
	.byte	'Can_RBDSOfShmElementSizeType',0,19,168,16,15
	.word	135
	.byte	27
	.byte	'Can_TBDSOfShmElementSizeType',0,19,171,16,15
	.word	135
	.byte	27
	.byte	'Can_TEFBDSOfShmElementSizeType',0,19,174,16,15
	.word	135
	.byte	27
	.byte	'Can_TDCRType',0,19,130,17,15
	.word	135
	.byte	27
	.byte	'Can_XIDAMType',0,19,133,17,16
	.word	3119
	.byte	27
	.byte	'Can_FLESAOfXIDFCType',0,19,136,17,15
	.word	135
	.byte	27
	.byte	'Can_LSEOfXIDFCType',0,19,139,17,15
	.word	135
	.byte	27
	.byte	'Can_EIDFE_0OfXIDFEType',0,19,142,17,15
	.word	135
	.byte	27
	.byte	'Can_EIDFE_1OfXIDFEType',0,19,145,17,15
	.word	135
	.byte	7
	.byte	'sCan_ActiveSendObjectType',0,19,161,17,16,4,8
	.byte	'StateOfActiveSendObject',0
	.word	278
	.byte	2,2,35,0,8
	.byte	'PduOfActiveSendObject',0
	.word	135
	.byte	1,2,35,2,0,27
	.byte	'Can_ActiveSendObjectType',0,19,165,17,3
	.word	9387
	.byte	7
	.byte	'sCan_BufferConfigType',0,19,168,17,16,12,8
	.byte	'RXF0COfBufferConfig',0
	.word	3119
	.byte	4,2,35,0,8
	.byte	'TXBCOfBufferConfig',0
	.word	3119
	.byte	4,2,35,4,8
	.byte	'RXBCOfBufferConfig',0
	.word	135
	.byte	1,2,35,8,8
	.byte	'RXF1COfBufferConfig',0
	.word	135
	.byte	1,2,35,9,8
	.byte	'TXEFCOfBufferConfig',0
	.word	135
	.byte	1,2,35,10,0,27
	.byte	'Can_BufferConfigType',0,19,175,17,3
	.word	9518
	.byte	7
	.byte	'sCan_ControllerConfigType',0,19,178,17,16,28,8
	.byte	'BasisAdrOfControllerConfig',0
	.word	3119
	.byte	4,2,35,0,8
	.byte	'CanControllerDefaultBaudrateOfControllerConfig',0
	.word	278
	.byte	2,2,35,4,8
	.byte	'IsTTCanOfControllerConfig',0
	.word	135
	.byte	1,2,35,6,8
	.byte	'CanControllerDefaultBaudrateIdxOfControllerConfig',0
	.word	135
	.byte	1,2,35,7,8
	.byte	'MailboxRxBasicEndIdxOfControllerConfig',0
	.word	135
	.byte	1,2,35,8,8
	.byte	'MailboxRxBasicLengthOfControllerConfig',0
	.word	135
	.byte	1,2,35,9,8
	.byte	'MailboxRxBasicStartIdxOfControllerConfig',0
	.word	135
	.byte	1,2,35,10,8
	.byte	'MailboxTxBasicEndIdxOfControllerConfig',0
	.word	135
	.byte	1,2,35,11,8
	.byte	'MailboxTxBasicLengthOfControllerConfig',0
	.word	135
	.byte	1,2,35,12,8
	.byte	'MailboxTxBasicStartIdxOfControllerConfig',0
	.word	135
	.byte	1,2,35,13,8
	.byte	'RxBasicHwStartOfControllerConfig',0
	.word	135
	.byte	1,2,35,14,8
	.byte	'RxBasicHwStopOfControllerConfig',0
	.word	135
	.byte	1,2,35,15,8
	.byte	'RxFullHwStartOfControllerConfig',0
	.word	135
	.byte	1,2,35,16,8
	.byte	'RxFullHwStopOfControllerConfig',0
	.word	135
	.byte	1,2,35,17,8
	.byte	'RxSelectionOfControllerConfig',0
	.word	135
	.byte	1,2,35,18,8
	.byte	'TxBasicHwStartOfControllerConfig',0
	.word	135
	.byte	1,2,35,19,8
	.byte	'TxBasicHwStopOfControllerConfig',0
	.word	135
	.byte	1,2,35,20,8
	.byte	'TxFullHwStartOfControllerConfig',0
	.word	135
	.byte	1,2,35,21,8
	.byte	'TxFullHwStopOfControllerConfig',0
	.word	135
	.byte	1,2,35,22,8
	.byte	'UnusedHwStartOfControllerConfig',0
	.word	135
	.byte	1,2,35,23,8
	.byte	'UnusedHwStopOfControllerConfig',0
	.word	135
	.byte	1,2,35,24,0,27
	.byte	'Can_ControllerConfigType',0,19,201,17,3
	.word	9720
	.byte	7
	.byte	'sCan_ControllerDataType',0,19,204,17,16,64,8
	.byte	'IntEnableOfControllerData',0
	.word	3119
	.byte	4,2,35,0,8
	.byte	'NonFdObjectsPendingFlagOfControllerData',0
	.word	3119
	.byte	4,2,35,4,8
	.byte	'TXBCROfControllerData',0
	.word	3119
	.byte	4,2,35,8,8
	.byte	'TXBRPOfControllerData',0
	.word	3119
	.byte	4,2,35,12,8
	.byte	'BusOffNotificationOfControllerData',0
	.word	135
	.byte	1,2,35,16,8
	.byte	'BusOffTransitionRequestOfControllerData',0
	.word	135
	.byte	1,2,35,17,8
	.byte	'CanInterruptCounterOfControllerData',0
	.word	135
	.byte	1,2,35,18,8
	.byte	'IsBusOffOfControllerData',0
	.word	135
	.byte	1,2,35,19,8
	.byte	'LastInitObjectOfControllerData',0
	.word	135
	.byte	1,2,35,20,8
	.byte	'LastStateOfControllerData',0
	.word	135
	.byte	1,2,35,21,8
	.byte	'LogStatusOfControllerData',0
	.word	135
	.byte	1,2,35,22,8
	.byte	'ModeTransitionRequestOfControllerData',0
	.word	135
	.byte	1,2,35,23,8
	.byte	'PrevModeOfControllerData',0
	.word	135
	.byte	1,2,35,24,8
	.byte	'RamCheckTransitionRequestOfControllerData',0
	.word	135
	.byte	1,2,35,25,8
	.byte	'CanInterruptOldStatusOfControllerData',0
	.word	3119
	.byte	4,2,35,26,8
	.byte	'LoopTimeoutOfControllerData',0
	.word	5588
	.byte	32,2,35,30,0,27
	.byte	'Can_ControllerDataType',0,19,222,17,3
	.word	10713
	.byte	29,32
	.word	3119
	.byte	30,7,0,7
	.byte	'sCan_MailboxType',0,19,225,17,16,12,8
	.byte	'ActiveSendObjectOfMailbox',0
	.word	135
	.byte	1,2,35,0,8
	.byte	'ControllerConfigIdxOfMailbox',0
	.word	135
	.byte	1,2,35,1,8
	.byte	'FdPaddingOfMailbox',0
	.word	135
	.byte	1,2,35,2,8
	.byte	'HwHandleOfMailbox',0
	.word	135
	.byte	1,2,35,3,8
	.byte	'IDValueOfMailbox',0
	.word	135
	.byte	1,2,35,4,8
	.byte	'MailboxSizeOfMailbox',0
	.word	135
	.byte	1,2,35,5,8
	.byte	'MailboxTypeOfMailbox',0
	.word	135
	.byte	1,2,35,6,8
	.byte	'MaxDataLenOfMailbox',0
	.word	135
	.byte	1,2,35,7,8
	.byte	'MemorySectionsIndexOfMailbox',0
	.word	135
	.byte	1,2,35,8,0,27
	.byte	'Can_MailboxType',0,19,236,17,3
	.word	11429
	.byte	7
	.byte	'sCan_MemorySectionInfoType',0,19,239,17,16,1,8
	.byte	'MemorySectionStartOfMemorySectionInfo',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'Can_MemorySectionInfoType',0,19,242,17,3
	.word	11759
	.byte	7
	.byte	'sCan_MemorySectionObjectsType',0,19,245,17,16,4,8
	.byte	'HwHandleOfMemorySectionObjects',0
	.word	135
	.byte	1,2,35,0,8
	.byte	'MailboxElementOfMemorySectionObjects',0
	.word	135
	.byte	1,2,35,1,8
	.byte	'MailboxHandleOfMemorySectionObjects',0
	.word	135
	.byte	1,2,35,2,0,27
	.byte	'Can_MemorySectionObjectsType',0,19,250,17,3
	.word	11875
	.byte	7
	.byte	'sCan_SIDFCType',0,19,253,17,16,4,8
	.byte	'FLSSAOfSIDFC',0
	.word	135
	.byte	1,2,35,0,8
	.byte	'LSSOfSIDFC',0
	.word	135
	.byte	1,2,35,1,8
	.byte	'SIDFEEndIdxOfSIDFC',0
	.word	135
	.byte	1,2,35,2,8
	.byte	'SIDFEStartIdxOfSIDFC',0
	.word	135
	.byte	1,2,35,3,0,27
	.byte	'Can_SIDFCType',0,19,131,18,3
	.word	12081
	.byte	7
	.byte	'sCan_ShmAdrType',0,19,134,18,16,36,8
	.byte	'RXBAOfShmAdr',0
	.word	3119
	.byte	4,2,35,0,8
	.byte	'RXF0AOfShmAdr',0
	.word	3119
	.byte	4,2,35,4,8
	.byte	'RXF1AOfShmAdr',0
	.word	3119
	.byte	4,2,35,8,8
	.byte	'SIDFAOfShmAdr',0
	.word	3119
	.byte	4,2,35,12,8
	.byte	'StartAdrOfShmAdr',0
	.word	3119
	.byte	4,2,35,16,8
	.byte	'StopAdrOfShmAdr',0
	.word	3119
	.byte	4,2,35,20,8
	.byte	'TXBAOfShmAdr',0
	.word	3119
	.byte	4,2,35,24,8
	.byte	'TXEFAOfShmAdr',0
	.word	3119
	.byte	4,2,35,28,8
	.byte	'XIDFAOfShmAdr',0
	.word	3119
	.byte	4,2,35,32,0,27
	.byte	'Can_ShmAdrType',0,19,145,18,3
	.word	12226
	.byte	7
	.byte	'sCan_ShmElementSizeType',0,19,148,18,16,6,8
	.byte	'F0DSOfShmElementSize',0
	.word	135
	.byte	1,2,35,0,8
	.byte	'F1DSOfShmElementSize',0
	.word	135
	.byte	1,2,35,1,8
	.byte	'RBDSOfShmElementSize',0
	.word	135
	.byte	1,2,35,2,8
	.byte	'TBDSOfShmElementSize',0
	.word	135
	.byte	1,2,35,3,8
	.byte	'TEFBDSOfShmElementSize',0
	.word	135
	.byte	1,2,35,4,0,27
	.byte	'Can_ShmElementSizeType',0,19,155,18,3
	.word	12483
	.byte	7
	.byte	'sCan_XIDFCType',0,19,158,18,16,2,8
	.byte	'FLESAOfXIDFC',0
	.word	135
	.byte	1,2,35,0,8
	.byte	'LSEOfXIDFC',0
	.word	135
	.byte	1,2,35,1,0,27
	.byte	'Can_XIDFCType',0,19,162,18,3
	.word	12698
	.byte	7
	.byte	'sCan_XIDFEType',0,19,165,18,16,2,8
	.byte	'EIDFE_0OfXIDFE',0
	.word	135
	.byte	1,2,35,0,8
	.byte	'EIDFE_1OfXIDFE',0
	.word	135
	.byte	1,2,35,1,0,27
	.byte	'Can_XIDFEType',0,19,169,18,3
	.word	12785
	.byte	7
	.byte	'sCan_PCConfigType',0,19,143,19,16,1,8
	.byte	'Can_PCConfigNeverUsed',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'Can_PCConfigType',0,19,146,19,3
	.word	12878
	.byte	27
	.byte	'Can_ConfigType',0,19,148,19,26
	.word	12878
	.byte	14
	.word	3119
	.byte	14
	.word	3119
	.byte	29,64
	.word	3119
	.byte	30,15,0,14
	.word	12994
	.byte	7
	.byte	'tElmTypeTag',0,20,145,9,25,72,8
	.byte	'E0',0
	.word	12984
	.byte	4,2,35,0,8
	.byte	'E1',0
	.word	12989
	.byte	4,2,35,4,8
	.byte	'data',0
	.word	13003
	.byte	64,2,35,8,0,14
	.word	13008
	.byte	27
	.byte	'tElmType',0,20,162,9,3
	.word	13065
	.byte	14
	.word	3119
	.byte	14
	.word	135
	.byte	14
	.word	135
	.byte	14
	.word	135
	.byte	28,20,224,9,5,4,32
	.byte	'ID',0,4
	.word	13088
	.byte	29,3,2,35,0,32
	.byte	'RTR',0,1
	.word	13093
	.byte	1,2,2,35,3,32
	.byte	'XTD',0,1
	.word	13098
	.byte	1,1,2,35,3,32
	.byte	'ESI',0,1
	.word	13103
	.byte	1,0,2,35,3,0,14
	.word	3119
	.byte	33,20,222,9,3,4,8
	.byte	'b0',0
	.word	13108
	.byte	4,2,35,0,8
	.byte	'B0',0
	.word	13174
	.byte	4,2,35,0,0,14
	.word	278
	.byte	14
	.word	135
	.byte	14
	.word	135
	.byte	14
	.word	135
	.byte	14
	.word	135
	.byte	14
	.word	135
	.byte	14
	.word	135
	.byte	28,20,235,9,5,4,32
	.byte	'RXTS',0,2
	.word	13210
	.byte	16,0,2,35,0,32
	.byte	'DLC',0,1
	.word	13215
	.byte	4,4,2,35,2,32
	.byte	'BRS',0,1
	.word	13220
	.byte	1,3,2,35,2,32
	.byte	'FDF',0,1
	.word	13225
	.byte	1,2,2,35,2,32
	.byte	'r0',0,1
	.word	13230
	.byte	2,0,2,35,2,32
	.byte	'FIDX',0,1
	.word	13235
	.byte	7,1,2,35,3,32
	.byte	'ANMF',0,1
	.word	13240
	.byte	1,0,2,35,3,0,14
	.word	278
	.byte	14
	.word	135
	.byte	14
	.word	135
	.byte	14
	.word	135
	.byte	14
	.word	135
	.byte	14
	.word	135
	.byte	14
	.word	135
	.byte	28,20,245,9,5,4,32
	.byte	'r1',0,2
	.word	13359
	.byte	16,0,2,35,0,32
	.byte	'DLC',0,1
	.word	13364
	.byte	4,4,2,35,2,32
	.byte	'BRS',0,1
	.word	13369
	.byte	1,3,2,35,2,32
	.byte	'FDF',0,1
	.word	13374
	.byte	1,2,2,35,2,32
	.byte	'r0',0,1
	.word	13379
	.byte	1,1,2,35,2,32
	.byte	'EFC',0,1
	.word	13384
	.byte	1,0,2,35,2,32
	.byte	'MM',0,1
	.word	13389
	.byte	8,0,2,35,3,0,33,20,233,9,3,4,8
	.byte	'rb1',0
	.word	13245
	.byte	4,2,35,0,8
	.byte	'tb1',0
	.word	13394
	.byte	4,2,35,0,8
	.byte	'B1',0
	.word	3119
	.byte	4,2,35,0,0,14
	.word	12994
	.byte	7
	.byte	'tCanChipMsgPtrTag',0,20,220,9,25,72,8
	.byte	'uB0',0
	.word	13179
	.byte	4,2,35,0,8
	.byte	'uB1',0
	.word	13503
	.byte	4,2,35,4,8
	.byte	'data',0
	.word	13548
	.byte	64,2,35,8,0,14
	.word	13553
	.byte	27
	.byte	'tCanChipMsgPtr',0,20,134,10,3
	.word	13618
	.byte	28,20,141,10,3,4,32
	.byte	'FnFL',0,1
	.word	135
	.byte	7,1,2,35,0,32
	.byte	'r2',0,1
	.word	135
	.byte	1,0,2,35,0,32
	.byte	'FnGI',0,1
	.word	135
	.byte	6,2,2,35,1,32
	.byte	'r1',0,4
	.word	3119
	.byte	10,8,2,35,0,32
	.byte	'FnF',0,1
	.word	135
	.byte	1,7,2,35,3,32
	.byte	'RFnL',0,1
	.word	135
	.byte	1,6,2,35,3,32
	.byte	'r0',0,1
	.word	135
	.byte	6,0,2,35,3,0,34
	.byte	'tRXFnSTag',0,20,138,10,15,4,8
	.byte	'R',0
	.word	3119
	.byte	4,2,35,0,8
	.byte	'B',0
	.word	13647
	.byte	4,2,35,0,0,27
	.byte	'tRXFnS',0,20,151,10,3
	.word	13759
	.byte	28,20,156,10,3,4,35,1
	.word	135
	.byte	2,6,2,35,0,32
	.byte	'FOSA',0,2
	.word	278
	.byte	14,0,2,35,0,32
	.byte	'F0S',0,1
	.word	135
	.byte	7,1,2,35,2,35,1
	.word	135
	.byte	1,0,2,35,2,32
	.byte	'F0WM',0,1
	.word	135
	.byte	7,1,2,35,3,35,1
	.word	135
	.byte	1,0,2,35,3,0,34
	.byte	'tRXFnCTag',0,20,153,10,15,4,8
	.byte	'R',0
	.word	3119
	.byte	4,2,35,0,8
	.byte	'B',0
	.word	13814
	.byte	4,2,35,0,0,27
	.byte	'tRXFnC',0,20,165,10,3
	.word	13901
	.byte	28,20,171,10,3,4,32
	.byte	'F0DS',0,1
	.word	135
	.byte	3,5,2,35,0,35,1
	.word	135
	.byte	1,4,2,35,0,32
	.byte	'F1DS',0,1
	.word	135
	.byte	3,1,2,35,0,35,1
	.word	135
	.byte	1,0,2,35,0,32
	.byte	'RBDS',0,1
	.word	135
	.byte	3,5,2,35,1,35,4
	.word	3119
	.byte	21,0,2,35,0,0,34
	.byte	'tRXESCTag',0,20,168,10,15,4,8
	.byte	'R',0
	.word	3119
	.byte	4,2,35,0,8
	.byte	'B',0
	.word	13956
	.byte	4,2,35,0,0,27
	.byte	'tRXESC',0,20,180,10,3
	.word	14044
	.byte	28,20,185,10,3,4,32
	.byte	'TFFL',0,1
	.word	135
	.byte	6,2,2,35,0,35,1
	.word	135
	.byte	2,0,2,35,0,32
	.byte	'TFGI',0,1
	.word	135
	.byte	5,3,2,35,1,35,1
	.word	135
	.byte	3,0,2,35,1,32
	.byte	'TFQPI',0,1
	.word	135
	.byte	5,3,2,35,2,32
	.byte	'TFQF',0,1
	.word	135
	.byte	1,2,2,35,2,35,2
	.word	278
	.byte	10,0,2,35,2,0,34
	.byte	'tTXFQSTag',0,20,182,10,15,4,8
	.byte	'R',0
	.word	3119
	.byte	4,2,35,0,8
	.byte	'B',0
	.word	14099
	.byte	4,2,35,0,0,27
	.byte	'tTXFQS',0,20,195,10,3
	.word	14204
	.byte	28,20,200,10,3,4,32
	.byte	'EFFL',0,1
	.word	135
	.byte	6,2,2,35,0,32
	.byte	'r1',0,1
	.word	135
	.byte	2,0,2,35,0,32
	.byte	'EFGI',0,1
	.word	135
	.byte	5,3,2,35,1,35,4
	.word	3119
	.byte	11,8,2,35,0,32
	.byte	'EFF',0,1
	.word	135
	.byte	1,7,2,35,3,32
	.byte	'TEFL',0,1
	.word	135
	.byte	1,6,2,35,3,32
	.byte	'r0',0,1
	.word	135
	.byte	6,0,2,35,3,0,34
	.byte	'tTXEFSTag',0,20,197,10,15,4,8
	.byte	'R',0
	.word	3119
	.byte	4,2,35,0,8
	.byte	'B',0
	.word	14259
	.byte	4,2,35,0,0,27
	.byte	'tTXEFS',0,20,210,10,3
	.word	14368
	.byte	27
	.byte	'CanIf_TxBufferSizeType',0,21,184,1,15
	.word	135
	.byte	27
	.byte	'CanIf_ControllerModeType',0,5,195,2,3
	.word	2669
	.byte	27
	.byte	'CanIf_PduSetModeType',0,5,212,2,3
	.word	2833
	.byte	18,5,215,2,9,1,19
	.byte	'CANIF_GET_OFFLINE',0,0,19
	.byte	'CANIF_GET_RX_ONLINE',0,1,19
	.byte	'CANIF_GET_TX_ONLINE',0,2,19
	.byte	'CANIF_GET_ONLINE',0,3,19
	.byte	'CANIF_GET_OFFLINE_ACTIVE',0,4,19
	.byte	'CANIF_GET_OFFLINE_ACTIVE_RX_ONLINE',0,5,19
	.byte	'CANIF_NO_MODE_PDU_GET_MODE_TYPE_END',0,6,0,27
	.byte	'CanIf_PduGetModeType',0,5,228,2,3
	.word	14519
	.byte	18,5,231,2,9,1,19
	.byte	'CANIF_RxBasicCANMailbox',0,0,19
	.byte	'CANIF_RxFullCANMailbox',0,1,19
	.byte	'CANIF_TxBasicCANMailbox',0,2,19
	.byte	'CANIF_TxFullCANMailbox',0,3,19
	.byte	'CANIF_UnusedCANMailbox',0,4,0,27
	.byte	'CanIf_MailBoxTypeType',0,5,238,2,3
	.word	14741
	.byte	18,5,241,2,9,1,19
	.byte	'CanIf_SimpleRxIndicationLayout',0,0,19
	.byte	'CanIf_AdvancedRxIndicationLayout',0,1,19
	.byte	'CanIf_NmOsekRxIndicationLayout',0,2,19
	.byte	'CanIf_CddRxIndicationLayout',0,3,0,27
	.byte	'CanIf_RxIndicationLayoutType',0,5,247,2,3
	.word	14906
	.byte	36,1,1,13
	.word	135
	.byte	0,9
	.word	15082
	.byte	27
	.byte	'CanIf_TxConfirmationFctType',0,5,175,3,9
	.word	15091
	.byte	11
	.word	135
	.byte	9
	.word	15133
	.byte	36,1,1,13
	.word	135
	.byte	13
	.word	15138
	.byte	0,9
	.word	15143
	.byte	27
	.byte	'CanIf_SimpleRxIndicationFctType',0,5,181,3,9
	.word	15157
	.byte	28,15,197,1,9,8,8
	.byte	'SduDataPtr',0
	.word	4491
	.byte	4,2,35,0,8
	.byte	'SduLength',0
	.word	135
	.byte	1,2,35,4,0,11
	.word	15203
	.byte	9
	.word	15249
	.byte	36,1,1,13
	.word	135
	.byte	13
	.word	15254
	.byte	0,9
	.word	15259
	.byte	27
	.byte	'CanIf_AdvancedRxIndicationFctType',0,5,186,3,9
	.word	15273
	.byte	9
	.word	135
	.byte	36,1,1,13
	.word	135
	.byte	13
	.word	15138
	.byte	13
	.word	278
	.byte	0,9
	.word	15326
	.byte	27
	.byte	'CanIf_NmOsekRxIndicationFctType',0,5,190,3,9
	.word	15345
	.byte	36,1,1,13
	.word	135
	.byte	13
	.word	15254
	.byte	13
	.word	278
	.byte	0,9
	.word	15391
	.byte	27
	.byte	'CanIf_CddRxIndicationFctType',0,5,194,3,9
	.word	15410
	.byte	36,1,1,13
	.word	135
	.byte	13
	.word	2669
	.byte	0,9
	.word	15453
	.byte	27
	.byte	'CanIf_CtrlModeIndicationFctType',0,5,198,3,9
	.word	15467
	.byte	27
	.byte	'CanIf_BusOffNotificationFctType',0,5,202,3,9
	.word	15091
	.byte	33,5,203,4,9,4,8
	.byte	'eSimpleRxIndicationType',0
	.word	15162
	.byte	4,2,35,0,8
	.byte	'eAdvancedRxIndicationType',0
	.word	15278
	.byte	4,2,35,0,8
	.byte	'eNmOsekRxIndicationType',0
	.word	15350
	.byte	4,2,35,0,8
	.byte	'eCddRxIndicationType',0
	.word	15415
	.byte	4,2,35,0,0,27
	.byte	'CanIf_RxIndicationFctType',0,5,209,4,3
	.word	15554
	.byte	9
	.word	15143
	.byte	9
	.word	15259
	.byte	9
	.word	15326
	.byte	9
	.word	15391
	.byte	7
	.byte	'sCanIf_TxQueueBaseType',0,5,222,4,16,1,8
	.byte	'eSduLength',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'CanIf_TxQueueBaseType',0,5,228,4,3
	.word	15747
	.byte	7
	.byte	'sCanIf_TxQueueBaseWithDataType',0,5,231,4,16,1,8
	.byte	'eBaseParams',0
	.word	15747
	.byte	1,2,35,0,0,27
	.byte	'CanIf_TxQueueBaseWithDataType',0,5,237,4,3
	.word	15828
	.byte	7
	.byte	'sCanIf_TxPrioByCanIdByteQueueType',0,5,242,4,16,2,8
	.byte	'eQueueParams',0
	.word	15828
	.byte	1,2,35,0,8
	.byte	'eQueued',0
	.word	135
	.byte	1,2,35,1,0,27
	.byte	'CanIf_TxPrioByCanIdByteQueueType',0,5,246,4,3
	.word	15926
	.byte	7
	.byte	'sCanIf_TxBufferPrioByCanIdBaseType',0,5,128,5,16,1,8
	.byte	'eQueueCounter',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'CanIf_TxBufferPrioByCanIdBaseType',0,5,131,5,3
	.word	16048
	.byte	27
	.byte	'CanIf_MappedTxBuffersConfigEndIdxOfCanIfCtrlId2MappedTxBuffersConfigType',0,21,138,9,15
	.word	135
	.byte	27
	.byte	'CanIf_MappedTxBuffersConfigStartIdxOfCanIfCtrlId2MappedTxBuffersConfigType',0,21,141,9,15
	.word	135
	.byte	27
	.byte	'CanIf_CtrlStatesIdxOfMailBoxConfigType',0,21,150,9,15
	.word	135
	.byte	27
	.byte	'CanIf_PduIdFirstOfMailBoxConfigType',0,21,153,9,15
	.word	135
	.byte	27
	.byte	'CanIf_PduIdLastOfMailBoxConfigType',0,21,156,9,15
	.word	135
	.byte	27
	.byte	'CanIf_TxBufferCfgIdxOfMailBoxConfigType',0,21,159,9,15
	.word	135
	.byte	27
	.byte	'CanIf_TxBufferHandlingTypeOfMailBoxConfigType',0,21,165,9,15
	.word	135
	.byte	27
	.byte	'CanIf_MailBoxConfigIdxOfMappedTxBuffersConfigType',0,21,168,9,15
	.word	135
	.byte	27
	.byte	'CanIf_RxIndicationFctListIdxOfRxPduConfigType',0,21,171,9,15
	.word	135
	.byte	27
	.byte	'CanIf_RxPduCanIdOfRxPduConfigType',0,21,174,9,15
	.word	135
	.byte	27
	.byte	'CanIf_RxPduDlcOfRxPduConfigType',0,21,177,9,15
	.word	135
	.byte	27
	.byte	'CanIf_RxPduMaskOfRxPduConfigType',0,21,180,9,16
	.word	278
	.byte	27
	.byte	'CanIf_UpperPduIdOfRxPduConfigType',0,21,183,9,19
	.word	135
	.byte	27
	.byte	'CanIf_TxBufferPrioByCanIdBaseIdxOfTxBufferPrioByCanIdByteQueueConfigType',0,21,231,9,15
	.word	135
	.byte	27
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusEndIdxOfTxBufferPrioByCanIdByteQueueConfigType',0,21,234
	.byte	9,15
	.word	135
	.byte	27
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusLengthOfTxBufferPrioByCanIdByteQueueConfigType',0,21,237
	.byte	9,15
	.word	135
	.byte	27
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusStartIdxOfTxBufferPrioByCanIdByteQueueConfigType',0,21
	.byte	240,9,15
	.word	135
	.byte	27
	.byte	'CanIf_TxPduConfigIdxOfTxBufferPrioByCanIdByteQueueMappedTxPdusType',0,21,243,9,15
	.word	135
	.byte	27
	.byte	'CanIf_CanIdOfTxPduConfigType',0,21,246,9,16
	.word	278
	.byte	27
	.byte	'CanIf_CtrlStatesIdxOfTxPduConfigType',0,21,249,9,15
	.word	135
	.byte	27
	.byte	'CanIf_IsTxPduTruncationOfTxPduConfigType',0,21,252,9,17
	.word	135
	.byte	27
	.byte	'CanIf_MailBoxConfigIdxOfTxPduConfigType',0,21,255,9,15
	.word	135
	.byte	27
	.byte	'CanIf_TxConfirmationFctListIdxOfTxPduConfigType',0,21,130,10,15
	.word	135
	.byte	27
	.byte	'CanIf_TxPduLengthOfTxPduConfigType',0,21,133,10,15
	.word	135
	.byte	27
	.byte	'CanIf_UpperLayerTxPduIdOfTxPduConfigType',0,21,136,10,19
	.word	135
	.byte	27
	.byte	'CanIf_TxQueueIdxOfTxPduQueueIndexType',0,21,139,10,15
	.word	135
	.byte	27
	.byte	'CanIf_TxQueueIndex2DataStartStopIdxOfTxPduQueueIndexType',0,21,142,10,15
	.word	135
	.byte	27
	.byte	'CanIf_TxQueueDataType',0,21,151,10,15
	.word	135
	.byte	27
	.byte	'CanIf_TxQueueDataEndIdxOfTxQueueIndex2DataStartStopType',0,21,154,10,15
	.word	135
	.byte	27
	.byte	'CanIf_TxQueueDataLengthOfTxQueueIndex2DataStartStopType',0,21,157,10,15
	.word	135
	.byte	27
	.byte	'CanIf_TxQueueDataStartIdxOfTxQueueIndex2DataStartStopType',0,21,160,10,15
	.word	135
	.byte	7
	.byte	'sCanIf_CanIfCtrlId2MappedTxBuffersConfigType',0,21,183,10,16,2,8
	.byte	'MappedTxBuffersConfigEndIdxOfCanIfCtrlId2MappedTxBuffersConfig',0
	.word	135
	.byte	1,2,35,0,8
	.byte	'MappedTxBuffersConfigStartIdxOfCanIfCtrlId2MappedTxBuffersConfig',0
	.word	135
	.byte	1,2,35,1,0,27
	.byte	'CanIf_CanIfCtrlId2MappedTxBuffersConfigType',0,21,187,10,3
	.word	17987
	.byte	7
	.byte	'sCanIf_CtrlStatesType',0,21,190,10,16,2,8
	.byte	'CtrlModeOfCtrlStates',0
	.word	2669
	.byte	1,2,35,0,8
	.byte	'PduModeOfCtrlStates',0
	.word	14519
	.byte	1,2,35,1,0,27
	.byte	'CanIf_CtrlStatesType',0,21,194,10,3
	.word	18238
	.byte	7
	.byte	'sCanIf_MailBoxConfigType',0,21,200,10,16,6,8
	.byte	'CtrlStatesIdxOfMailBoxConfig',0
	.word	135
	.byte	1,2,35,0,8
	.byte	'PduIdFirstOfMailBoxConfig',0
	.word	135
	.byte	1,2,35,1,8
	.byte	'PduIdLastOfMailBoxConfig',0
	.word	135
	.byte	1,2,35,2,8
	.byte	'TxBufferCfgIdxOfMailBoxConfig',0
	.word	135
	.byte	1,2,35,3,8
	.byte	'TxBufferHandlingTypeOfMailBoxConfig',0
	.word	135
	.byte	1,2,35,4,8
	.byte	'MailBoxTypeOfMailBoxConfig',0
	.word	14741
	.byte	1,2,35,5,0,27
	.byte	'CanIf_MailBoxConfigType',0,21,208,10,3
	.word	18356
	.byte	7
	.byte	'sCanIf_MappedTxBuffersConfigType',0,21,214,10,16,1,8
	.byte	'MailBoxConfigIdxOfMappedTxBuffersConfig',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'CanIf_MappedTxBuffersConfigType',0,21,217,10,3
	.word	18648
	.byte	7
	.byte	'sCanIf_RxIndicationFctListType',0,21,220,10,16,8,8
	.byte	'RxIndicationFctOfRxIndicationFctList',0
	.word	15554
	.byte	4,2,35,0,8
	.byte	'RxIndicationLayoutOfRxIndicationFctList',0
	.word	14906
	.byte	1,2,35,4,0,27
	.byte	'CanIf_RxIndicationFctListType',0,21,224,10,3
	.word	18778
	.byte	7
	.byte	'sCanIf_RxPduConfigType',0,21,230,10,16,6,8
	.byte	'RxPduMaskOfRxPduConfig',0
	.word	278
	.byte	2,2,35,0,8
	.byte	'UpperPduIdOfRxPduConfig',0
	.word	135
	.byte	1,2,35,2,8
	.byte	'RxIndicationFctListIdxOfRxPduConfig',0
	.word	135
	.byte	1,2,35,3,8
	.byte	'RxPduCanIdOfRxPduConfig',0
	.word	135
	.byte	1,2,35,4,8
	.byte	'RxPduDlcOfRxPduConfig',0
	.word	135
	.byte	1,2,35,5,0,27
	.byte	'CanIf_RxPduConfigType',0,21,237,10,3
	.word	18950
	.byte	7
	.byte	'sCanIf_TxBufferPrioByCanIdByteQueueConfigType',0,21,245,10,16,4,8
	.byte	'TxBufferPrioByCanIdBaseIdxOfTxBufferPrioByCanIdByteQueueConfig',0
	.word	135
	.byte	1,2,35,0,8
	.byte	'TxBufferPrioByCanIdByteQueueMappedTxPdusEndIdxOfTxBufferPrioByCanIdByteQueueConfig',0
	.word	135
	.byte	1,2,35,1,8
	.byte	'TxBufferPrioByCanIdByteQueueMappedTxPdusLengthOfTxBufferPrioByCanIdByteQueueConfig',0
	.word	135
	.byte	1,2,35,2,8
	.byte	'TxBufferPrioByCanIdByteQueueMappedTxPdusStartIdxOfTxBufferPrioByCanIdByteQueueConfig',0
	.word	135
	.byte	1,2,35,3,0,27
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueConfigType',0,21,251,10,3
	.word	19185
	.byte	7
	.byte	'sCanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusType',0,21,129,11,16,1,8
	.byte	'TxPduConfigIdxOfTxBufferPrioByCanIdByteQueueMappedTxPdus',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusType',0,21,132,11,3
	.word	19642
	.byte	7
	.byte	'sCanIf_TxPduConfigType',0,21,140,11,16,8,8
	.byte	'CanIdOfTxPduConfig',0
	.word	278
	.byte	2,2,35,0,8
	.byte	'UpperLayerTxPduIdOfTxPduConfig',0
	.word	135
	.byte	1,2,35,2,8
	.byte	'IsTxPduTruncationOfTxPduConfig',0
	.word	135
	.byte	1,2,35,3,8
	.byte	'CtrlStatesIdxOfTxPduConfig',0
	.word	135
	.byte	1,2,35,4,8
	.byte	'MailBoxConfigIdxOfTxPduConfig',0
	.word	135
	.byte	1,2,35,5,8
	.byte	'TxConfirmationFctListIdxOfTxPduConfig',0
	.word	135
	.byte	1,2,35,6,8
	.byte	'TxPduLengthOfTxPduConfig',0
	.word	135
	.byte	1,2,35,7,0,27
	.byte	'CanIf_TxPduConfigType',0,21,149,11,3
	.word	19827
	.byte	7
	.byte	'sCanIf_TxPduQueueIndexType',0,21,155,11,16,2,8
	.byte	'TxQueueIdxOfTxPduQueueIndex',0
	.word	135
	.byte	1,2,35,0,8
	.byte	'TxQueueIndex2DataStartStopIdxOfTxPduQueueIndex',0
	.word	135
	.byte	1,2,35,1,0,27
	.byte	'CanIf_TxPduQueueIndexType',0,21,159,11,3
	.word	20152
	.byte	7
	.byte	'sCanIf_TxQueueIndex2DataStartStopType',0,21,166,11,16,4,8
	.byte	'TxQueueDataEndIdxOfTxQueueIndex2DataStartStop',0
	.word	135
	.byte	1,2,35,0,8
	.byte	'TxQueueDataLengthOfTxQueueIndex2DataStartStop',0
	.word	135
	.byte	1,2,35,1,8
	.byte	'TxQueueDataStartIdxOfTxQueueIndex2DataStartStop',0
	.word	135
	.byte	1,2,35,2,0,27
	.byte	'CanIf_TxQueueIndex2DataStartStopType',0,21,171,11,3
	.word	20314
	.byte	7
	.byte	'CanIf_CtrlStatesStructSTag',0,21,183,11,16,2,8
	.byte	'CT_testCANFDdbc_2c920817',0
	.word	18238
	.byte	2,2,35,0,0,27
	.byte	'CanIf_CtrlStatesStructSType',0,21,186,11,3
	.word	20572
	.byte	7
	.byte	'CanIf_TxBufferPrioByCanIdBaseStructSTag',0,21,189,11,16,1,8
	.byte	'CHNL_7a25eeb6',0
	.word	16048
	.byte	1,2,35,0,0,27
	.byte	'CanIf_TxBufferPrioByCanIdBaseStructSType',0,21,192,11,3
	.word	20677
	.byte	7
	.byte	'CanIf_TxQueueStructSTag',0,21,195,11,16,6,8
	.byte	'TxMessage3_otestCANFDdbc_547b0ac5_Tx',0
	.word	15926
	.byte	2,2,35,0,8
	.byte	'TxMessage22_otestCANFDdbc_f66bbf36_Tx',0
	.word	15926
	.byte	2,2,35,2,8
	.byte	'TxMessage1_otestCANFDdbc_815f4c47_Tx',0
	.word	15926
	.byte	2,2,35,4,0,27
	.byte	'CanIf_TxQueueStructSType',0,21,200,11,3
	.word	20797
	.byte	29,32
	.word	135
	.byte	30,31,0,29,8
	.word	135
	.byte	30,7,0,29,64
	.word	135
	.byte	30,63,0,7
	.byte	'CanIf_TxQueueDataStructSTag',0,21,203,11,16,104,8
	.byte	'TxMessage3_otestCANFDdbc_547b0ac5_Tx',0
	.word	21001
	.byte	32,2,35,0,8
	.byte	'TxMessage22_otestCANFDdbc_f66bbf36_Tx',0
	.word	21010
	.byte	8,2,35,32,8
	.byte	'TxMessage1_otestCANFDdbc_815f4c47_Tx',0
	.word	21019
	.byte	64,2,35,40,0,27
	.byte	'CanIf_TxQueueDataStructSType',0,21,208,11,3
	.word	21028
	.byte	7
	.byte	'sCanIf_PCConfigType',0,21,189,12,16,1,8
	.byte	'CanIf_PCConfigNeverUsed',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'CanIf_PCConfigType',0,21,192,12,3
	.word	21240
	.byte	27
	.byte	'CanSM_BswMCurrentStateType',0,22,65,15
	.word	135
	.byte	27
	.byte	'EcuM_WakeupSourceType',0,23,58,17
	.word	3119
	.byte	37,1,1,9
	.word	21393
	.byte	27
	.byte	'EcuM_DriverFuncType',0,24,201,2,9
	.word	21396
	.byte	27
	.byte	'EcuM_DefaultAppModeType',0,24,237,2,16
	.word	3119
	.byte	27
	.byte	'EcuM_NormalMcuModeType',0,24,255,2,16
	.word	3119
	.byte	27
	.byte	'EcuM_ChannelOfWakeupSourceListType',0,24,136,3,15
	.word	135
	.byte	7
	.byte	'sEcuM_DriverInitOneType',0,24,152,3,16,4,8
	.byte	'FunctionOfDriverInitOne',0
	.word	21401
	.byte	4,2,35,0,0,27
	.byte	'EcuM_DriverInitOneType',0,24,155,3,3
	.word	21539
	.byte	9
	.word	21393
	.byte	7
	.byte	'sEcuM_WakeupSourceListType',0,24,158,3,16,1,8
	.byte	'ChannelOfWakeupSourceList',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'EcuM_WakeupSourceListType',0,24,161,3,3
	.word	21640
	.byte	7
	.byte	'sEcuM_PCConfigType',0,24,200,3,16,1,8
	.byte	'EcuM_PCConfigNeverUsed',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'EcuM_PCConfigType',0,24,203,3,3
	.word	21744
	.byte	27
	.byte	'ComM_PncUserOfUserType',0,25,136,4,17
	.word	135
	.byte	27
	.byte	'ComM_UserReqFullComType',0,25,160,4,15
	.word	135
	.byte	7
	.byte	'sComM_ChannelType',0,25,176,4,16,1,8
	.byte	'ComM_ChannelNeverUsed',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'ComM_ChannelType',0,25,179,4,3
	.word	21894
	.byte	7
	.byte	'sComM_ChannelPbType',0,25,182,4,16,1,8
	.byte	'ComM_ChannelPbNeverUsed',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'ComM_ChannelPbType',0,25,185,4,3
	.word	21976
	.byte	7
	.byte	'sComM_UserType',0,25,188,4,16,1,8
	.byte	'PncUserOfUser',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'ComM_UserType',0,25,191,4,3
	.word	22064
	.byte	7
	.byte	'sComM_UserByteMaskType',0,25,194,4,16,1,8
	.byte	'ComM_UserByteMaskNeverUsed',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'ComM_UserByteMaskType',0,25,197,4,3
	.word	22132
	.byte	7
	.byte	'sComM_PCConfigType',0,25,233,4,16,1,8
	.byte	'ComM_PCConfigNeverUsed',0
	.word	135
	.byte	1,2,35,0,0,27
	.byte	'ComM_PCConfigType',0,25,236,4,3
	.word	22229
	.byte	18,26,147,1,9,1,19
	.byte	'Default_Init_Task',0,0,19
	.byte	'Default_Init_Task_Trusted',0,1,19
	.byte	'IdleTask_OsCore0',0,2,19
	.byte	'bsw_task',0,3,19
	.byte	'swc_init',0,4,19
	.byte	'swc_task',0,5,19
	.byte	'INVALID_TASK',0,6,19
	.byte	'OS_TASKID_COUNT',0,6,0,27
	.byte	'TaskType',0,26,157,1,3
	.word	22314
	.byte	27
	.byte	'Os_Hal_AddressType',0,27,61,16
	.word	3119
	.byte	7
	.byte	'Os_ExceptionContextType_Tag',0,28,71,8,160,1,8
	.byte	'AddressRegisters',0
	.word	12994
	.byte	64,2,35,0,8
	.byte	'DataRegisters',0
	.word	12994
	.byte	64,2,35,64,8
	.byte	'Ra',0
	.word	3119
	.byte	4,3,35,128,1,8
	.byte	'Psw',0
	.word	3119
	.byte	4,3,35,132,1,8
	.byte	'ExceptionSource',0
	.word	3119
	.byte	4,3,35,136,1,8
	.byte	'Pcpn',0
	.word	3119
	.byte	4,3,35,140,1,8
	.byte	'Pie',0
	.word	3119
	.byte	4,3,35,144,1,8
	.byte	'MpuRegionForStackLow',0
	.word	3119
	.byte	4,3,35,148,1,8
	.byte	'MpuRegionForStackUpper',0
	.word	3119
	.byte	4,3,35,152,1,8
	.byte	'RawPCXI',0
	.word	3119
	.byte	4,3,35,156,1,0,27
	.byte	'Os_ExceptionContextType',0,27,66,44
	.word	22499
	.byte	27
	.byte	'Os_InterruptSourceIdType',0,29,238,1,16
	.word	3119
	.byte	27
	.byte	'Os_ExceptionSourceIdType',0,29,246,1,16
	.word	3119
	.byte	18,29,161,2,9,1,19
	.byte	'RUNNING',0,0,19
	.byte	'READY',0,1,19
	.byte	'WAITING',0,2,19
	.byte	'SUSPENDED',0,3,0,27
	.byte	'TaskStateType',0,29,175,2,3
	.word	22847
	.byte	27
	.byte	'EventMaskType',0,29,182,2,16
	.word	4212
	.byte	27
	.byte	'Os_TickType',0,29,200,2,19
	.word	3119
	.byte	27
	.byte	'TickType',0,29,206,2,21
	.word	3119
	.byte	28,29,220,2,9,12,8
	.byte	'maxallowedvalue',0
	.word	3119
	.byte	4,2,35,0,8
	.byte	'ticksperbase',0
	.word	3119
	.byte	4,2,35,4,8
	.byte	'mincycle',0
	.word	3119
	.byte	4,2,35,8,0,27
	.byte	'AlarmBaseType',0,29,228,2,2
	.word	22979
	.byte	18,29,128,3,9,1,19
	.byte	'APPLICATION_TERMINATED',0,0,19
	.byte	'APPLICATION_RESTARTING',0,1,19
	.byte	'APPLICATION_ACCESSIBLE',0,2,0,27
	.byte	'ApplicationStateType',0,29,133,3,3
	.word	23074
	.byte	18,29,177,3,9,1,19
	.byte	'OSServiceId_GetApplicationID',0,0,19
	.byte	'OSServiceId_GetISRID',0,1,19
	.byte	'OSServiceId_CallTrustedFunction',0,2,19
	.byte	'OSServiceId_CheckISRMemoryAccess',0,3,19
	.byte	'OSServiceId_CheckTaskMemoryAccess',0,4,19
	.byte	'OSServiceId_CheckObjectAccess',0,5,19
	.byte	'OSServiceId_CheckObjectOwnership',0,6,19
	.byte	'OSServiceId_StartScheduleTableRel',0,7,19
	.byte	'OSServiceId_StartScheduleTableAbs',0,8,19
	.byte	'OSServiceId_StopScheduleTable',0,9,19
	.byte	'OSServiceId_NextScheduleTable',0,10,19
	.byte	'OSServiceId_StartScheduleTableSynchron',0,11,19
	.byte	'OSServiceId_SyncScheduleTable',0,12,19
	.byte	'OSServiceId_SetScheduleTableAsync',0,13,19
	.byte	'OSServiceId_GetScheduleTableStatus',0,14,19
	.byte	'OSServiceId_IncrementCounter',0,15,19
	.byte	'OSServiceId_GetCounterValue',0,16,19
	.byte	'OSServiceId_GetElapsedValue',0,17,19
	.byte	'OSServiceId_TerminateApplication',0,18,19
	.byte	'OSServiceId_AllowAccess',0,19,19
	.byte	'OSServiceId_GetApplicationState',0,20,19
	.byte	'OSServiceId_GetNumberOfActivatedCores',0,21,19
	.byte	'OSServiceId_GetCoreID',0,22,19
	.byte	'OSServiceId_StartCore',0,23,19
	.byte	'OSServiceId_StartNonAutosarCore',0,24,19
	.byte	'OSServiceId_GetSpinlock',0,25,19
	.byte	'OSServiceId_ReleaseSpinlock',0,26,19
	.byte	'OSServiceId_TryToGetSpinlock',0,27,19
	.byte	'OSServiceId_ShutdownAllCores',0,28,19
	.byte	'OSServiceId_ControlIdle',0,29,19
	.byte	'OSServiceId_IocSend',0,30,19
	.byte	'OSServiceId_IocWrite',0,31,19
	.byte	'OSServiceId_IocSendGroup',0,32,19
	.byte	'OSServiceId_IocWriteGroup',0,33,19
	.byte	'OSServiceId_IocReceive',0,34,19
	.byte	'OSServiceId_IocRead',0,35,19
	.byte	'OSServiceId_IocReceiveGroup',0,36,19
	.byte	'OSServiceId_IocReadGroup',0,37,19
	.byte	'OSServiceId_IocEmptyQueue',0,38,19
	.byte	'OSServiceId_GetCurrentApplicationID',0,39,19
	.byte	'OSServiceId_GetExceptionContext',0,160,1,19
	.byte	'OSServiceId_SetExceptionContext',0,161,1,19
	.byte	'OSServiceId_CallNonTrustedFunction',0,162,1,19
	.byte	'OSServiceId_AppKill',0,163,1,19
	.byte	'OSServiceId_AlarmActionSetEvent',0,164,1,19
	.byte	'OSServiceId_AlarmActionActivateTask',0,165,1,19
	.byte	'OSServiceId_AlarmActionIncrementCounter',0,166,1,19
	.byte	'OSServiceId_AlarmActionCallback',0,167,1,19
	.byte	'OSServiceId_TimerIsr',0,168,1,19
	.byte	'OSServiceId_IsrWrapper',0,169,1,19
	.byte	'OSServiceId_GetTaskStackUsage',0,170,1,19
	.byte	'OSServiceId_GetISRStackUsage',0,171,1,19
	.byte	'OSServiceId_GetKernelStackUsage',0,172,1,19
	.byte	'OSServiceId_GetStartupHookStackUsage',0,173,1,19
	.byte	'OSServiceId_GetErrorHookStackUsage',0,174,1,19
	.byte	'OSServiceId_GetShutdownHookStackUsage',0,175,1,19
	.byte	'OSServiceId_GetProtectionHookStackUsage',0,176,1,19
	.byte	'OSServiceId_GetSemaphore',0,177,1,19
	.byte	'OSServiceId_ReleaseSemaphore',0,178,1,19
	.byte	'OSServiceId_ScheduleTableActivateTask',0,179,1,19
	.byte	'OSServiceId_ScheduleTableSetEvent',0,180,1,19
	.byte	'OSServiceId_DisableInterruptSource',0,181,1,19
	.byte	'OSServiceId_EnableInterruptSource',0,182,1,19
	.byte	'OSServiceId_ClearPendingInterrupt',0,183,1,19
	.byte	'OSServiceId_GetUnhandledIrq',0,184,1,19
	.byte	'OSServiceId_GetUnhandledExc',0,185,1,19
	.byte	'OSServiceId_HookCallCallback',0,186,1,19
	.byte	'OSServiceId_IsInterruptSourceEnabled',0,187,1,19
	.byte	'OSServiceId_IsInterruptPending',0,188,1,19
	.byte	'OSServiceId_CallFastTrustedFunction',0,189,1,19
	.byte	'OSServiceId_BarrierSynchronize',0,190,1,19
	.byte	'OSServiceId_InitialEnableInterruptSources',0,191,1,19
	.byte	'OSServiceId_GetCoreStartState',0,192,1,19
	.byte	'OSServiceId_StartOS',0,208,1,19
	.byte	'OSServiceId_GetActiveApplicationMode',0,210,1,19
	.byte	'OSServiceId_DisableAllInterrupts',0,211,1,19
	.byte	'OSServiceId_EnableAllInterrupts',0,212,1,19
	.byte	'OSServiceId_SuspendAllInterrupts',0,213,1,19
	.byte	'OSServiceId_ResumeAllInterrupts',0,214,1,19
	.byte	'OSServiceId_SuspendOSInterrupts',0,215,1,19
	.byte	'OSServiceId_ResumeOSInterrupts',0,216,1,19
	.byte	'OSServiceId_ActivateTask',0,217,1,19
	.byte	'OSServiceId_TerminateTask',0,218,1,19
	.byte	'OSServiceId_ChainTask',0,219,1,19
	.byte	'OSServiceId_GetTaskID',0,220,1,19
	.byte	'OSServiceId_GetTaskState',0,221,1,19
	.byte	'OSServiceId_Schedule',0,222,1,19
	.byte	'OSServiceId_SetEvent',0,223,1,19
	.byte	'OSServiceId_ClearEvent',0,224,1,19
	.byte	'OSServiceId_GetEvent',0,225,1,19
	.byte	'OSServiceId_WaitEvent',0,226,1,19
	.byte	'OSServiceId_GetAlarmBase',0,227,1,19
	.byte	'OSServiceId_GetAlarm',0,228,1,19
	.byte	'OSServiceId_SetRelAlarm',0,229,1,19
	.byte	'OSServiceId_SetAbsAlarm',0,230,1,19
	.byte	'OSServiceId_CancelAlarm',0,231,1,19
	.byte	'OSServiceId_GetResource',0,232,1,19
	.byte	'OSServiceId_ReleaseResource',0,233,1,19
	.byte	'OSSERVICEID_COUNT',0,255,1,0,27
	.byte	'OSServiceIdType',0,29,156,4,3
	.word	23186
	.byte	18,29,172,4,9,2,19
	.byte	'OS_STATUS_OK',0,0,19
	.byte	'OS_STATUS_CALLEVEL',0,2,19
	.byte	'OS_STATUS_LIMIT',0,4,19
	.byte	'OS_STATUS_RESOURCE',0,6,19
	.byte	'OS_STATUS_SERVICEID',0,9,19
	.byte	'OS_STATUS_ILLEGAL_ADDRESS',0,10,19
	.byte	'OS_STATUS_MISSINGEND',0,11,19
	.byte	'OS_STATUS_DISABLEDINT',0,12,19
	.byte	'OS_STATUS_STACKFAULT',0,13,19
	.byte	'OS_STATUS_PROTECTION_MEMORY',0,14,19
	.byte	'OS_STATUS_PROTECTION_TIME',0,15,19
	.byte	'OS_STATUS_PROTECTION_ARRIVAL',0,16,19
	.byte	'OS_STATUS_PROTECTION_LOCKED',0,17,19
	.byte	'OS_STATUS_PROTECTION_EXCEPTION',0,18,19
	.byte	'OS_STATUS_INTERFERENCE_DEADLOCK',0,19,19
	.byte	'OS_STATUS_NESTING_DEADLOCK',0,20,19
	.byte	'OS_STATUS_SPINLOCK',0,21,19
	.byte	'OS_STATUS_CORE',0,22,19
	.byte	'OS_STATUS_OVERFLOW',0,245,1,19
	.byte	'OS_STATUS_KILL_KERNEL_OBJ',0,246,1,19
	.byte	'OS_STATUS_NO_RESTARTTASK',0,247,1,19
	.byte	'OS_STATUS_CALL_NOT_ALLOWED',0,248,1,19
	.byte	'OS_STATUS_FUNCTION_UNAVAILABLE',0,249,1,19
	.byte	'OS_STATUS_PROTECTION_SYSCALL',0,250,1,19
	.byte	'OS_STATUS_PROTECTION_IRQ',0,251,1,19
	.byte	'OS_STATUS_API_ERROR',0,252,1,19
	.byte	'OS_STATUS_ASSERTION',0,253,1,19
	.byte	'OS_STATUS_OVERLOAD',0,254,1,19
	.byte	'OS_STATUS_ACCESSRIGHTS_1',0,129,2,19
	.byte	'OS_STATUS_CALLEVEL_SHARED_STACK',0,130,2,19
	.byte	'OS_STATUS_ID_1',0,131,2,19
	.byte	'OS_STATUS_UNLOCKED',0,133,2,19
	.byte	'OS_STATUS_STATE_1',0,135,2,19
	.byte	'OS_STATUS_VALUE_IS_ZERO_1',0,136,2,19
	.byte	'OS_STATUS_CORE_CROSS_DATA',0,150,2,19
	.byte	'OS_STATUS_PARAM_POINTER_1',0,151,2,19
	.byte	'OS_STATUS_STACKUSAGE_DISABLED_BY_CONFIG',0,241,3,19
	.byte	'OS_STATUS_NO_BARRIER_PARTICIPANT',0,242,3,19
	.byte	'OS_STATUS_UNIMPLEMENTED_CLEARPENDING',0,243,3,19
	.byte	'OS_STATUS_NO_NTFSTACK_POOL_EMPTY',0,244,3,19
	.byte	'OS_STATUS_ACCESSRIGHTS_2',0,129,4,19
	.byte	'OS_STATUS_CALLEVEL_CROSS_CORE_SYNC',0,130,4,19
	.byte	'OS_STATUS_ID_2',0,131,4,19
	.byte	'OS_STATUS_NOFUNC_1',0,133,4,19
	.byte	'OS_STATUS_STATE_2',0,135,4,19
	.byte	'OS_STATUS_VALUE_IS_ZERO_2',0,136,4,19
	.byte	'OS_STATUS_PARAM_POINTER_2',0,151,4,19
	.byte	'OS_STATUS_EVENT_DISABLED_BY_CONFIG',0,241,5,19
	.byte	'OS_STATUS_UNIMPLEMENTED_EXCEPTIONCONTEXT',0,243,5,19
	.byte	'OS_STATUS_NO_NTFSTACK_APPLIMIT_EXCEEDED',0,244,5,19
	.byte	'OS_STATUS_NOTACCESSIBLE_1',0,129,6,19
	.byte	'OS_STATUS_ID_TYPE_1',0,131,6,19
	.byte	'OS_STATUS_NOFUNC_2',0,133,6,19
	.byte	'OS_STATUS_STATE_STOPPED',0,135,6,19
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_1',0,136,6,19
	.byte	'OS_STATUS_PARAM_POINTER_3',0,151,6,19
	.byte	'OS_STATUS_NOTACCESSIBLE_2',0,129,8,19
	.byte	'OS_STATUS_ID_DIFFERENT_COUNTER',0,131,8,19
	.byte	'OS_STATUS_SPINLOCK_ORDER',0,133,8,19
	.byte	'OS_STATUS_STATE_RUNNING',0,135,8,19
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_2',0,136,8,19
	.byte	'OS_STATUS_NOEXTENDEDTASK_1',0,129,10,19
	.byte	'OS_STATUS_ID_DIFFERENT_SYNC',0,131,10,19
	.byte	'OS_STATUS_STOPPED_1',0,133,10,19
	.byte	'OS_STATUS_STATE_NEXTED',0,135,10,19
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_3',0,136,10,19
	.byte	'OS_STATUS_NOEXTENDEDTASK_2',0,129,12,19
	.byte	'OS_STATUS_HOOK_NOT_AVAILABLE',0,131,12,19
	.byte	'OS_STATUS_NOT_STOPPED_2',0,133,12,19
	.byte	'OS_STATUS_STATE_WAITING',0,135,12,19
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_1',0,136,12,19
	.byte	'OS_STATUS_NOEXTENDEDTASK_CALLER',0,129,14,19
	.byte	'OS_STATUS_NEXTED_1',0,133,14,19
	.byte	'OS_STATUS_STATE_NO_RESTART',0,135,14,19
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_2',0,136,14,19
	.byte	'OS_STATUS_LOCKED',0,129,16,19
	.byte	'OS_STATUS_KILLING_IS_DISABLED',0,133,16,19
	.byte	'OS_STATUS_STATE_ALREADY_TERMINATED',0,135,16,19
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_1',0,136,16,19
	.byte	'OS_STATUS_PRIORITY',0,129,18,19
	.byte	'OS_STATUS_ORDER',0,133,18,19
	.byte	'OS_STATUS_STATE_RESTARTING_NO_MEMBER',0,135,18,19
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_2',0,136,18,19
	.byte	'OS_STATUS_NOT_THE_OWNER_1',0,129,20,19
	.byte	'OS_STATUS_STATE_ALREADY_RESTARTING',0,135,20,19
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_3',0,136,20,19
	.byte	'OS_STATUS_VALUE_IS_NOT_BOOLEAN',0,136,22,0,27
	.byte	'Os_StatusType',0,29,232,5,3
	.word	26356
	.byte	28,29,133,6,9,4,8
	.byte	'Service',0
	.word	23186
	.byte	1,2,35,0,8
	.byte	'Error',0
	.word	135
	.byte	1,2,35,1,8
	.byte	'DetailedError',0
	.word	26356
	.byte	2,2,35,2,0,27
	.byte	'Os_ErrorInformationType',0,29,143,6,3
	.word	28886
	.byte	18,29,175,6,9,1,19
	.byte	'SCHEDULETABLE_STOPPED',0,0,19
	.byte	'SCHEDULETABLE_NEXT',0,1,19
	.byte	'SCHEDULETABLE_WAITING',0,2,19
	.byte	'SCHEDULETABLE_RUNNING',0,3,19
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,27
	.byte	'ScheduleTableStatusType',0,29,192,6,3
	.word	28981
	.byte	27
	.byte	'Os_AccessCheckAddress',0,29,199,6,29
	.word	3119
	.byte	18,29,211,6,9,1,19
	.byte	'OS_MEM_ACCESS_TYPE_NON',0,0,19
	.byte	'OS_MEM_ACCESS_TYPE_R',0,1,19
	.byte	'OS_MEM_ACCESS_TYPE_READ',0,1,19
	.byte	'OS_MEM_ACCESS_TYPE_W',0,2,19
	.byte	'OS_MEM_ACCESS_TYPE_WRITE',0,2,19
	.byte	'OS_MEM_ACCESS_TYPE_RW',0,3,19
	.byte	'OS_MEM_ACCESS_TYPE_EXECUTE',0,4,19
	.byte	'OS_MEM_ACCESS_TYPE_X',0,4,19
	.byte	'OS_MEM_ACCESS_TYPE_RX',0,5,19
	.byte	'OS_MEM_ACCESS_TYPE_WX',0,6,19
	.byte	'OS_MEM_ACCESS_TYPE_RWX',0,7,19
	.byte	'OS_MEM_ACCESS_TYPE_S',0,8,19
	.byte	'OS_MEM_ACCESS_TYPE_STACK',0,8,19
	.byte	'OS_MEM_ACCESS_TYPE_RS',0,9,19
	.byte	'OS_MEM_ACCESS_TYPE_WS',0,10,19
	.byte	'OS_MEM_ACCESS_TYPE_RWS',0,11,19
	.byte	'OS_MEM_ACCESS_TYPE_XS',0,12,19
	.byte	'OS_MEM_ACCESS_TYPE_RXS',0,13,19
	.byte	'OS_MEM_ACCESS_TYPE_WXS',0,14,19
	.byte	'OS_MEM_ACCESS_TYPE_RWXS',0,15,0,27
	.byte	'Os_MemAccessType',0,29,233,6,3
	.word	29185
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L169:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,1,0,0,6,11,0,0,0,7,19,1,3,8,58,15,59
	.byte	15,57,15,11,15,0,0,8,13,0,3,8,73,19,11,15,56,9,0,0,9,15,0,73,19,0,0,10,46,1,3,8,32,13,58,15,59,15,57,15
	.byte	73,19,54,15,39,12,0,0,11,38,0,73,19,0,0,12,46,1,3,8,54,15,39,12,63,12,60,12,0,0,13,5,0,73,19,0,0,14,53
	.byte	0,73,19,0,0,15,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,16,5,0,3,8,73,19,0,0,17,46,1,3,8,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,63,12,60,12,0,0,18,4,1,58,15,59,15,57,15,11,15,0,0,19,40,0,3,8,28,13,0,0,20,46
	.byte	1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,21,46,0,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60
	.byte	12,0,0,22,46,1,49,19,0,0,23,5,0,49,19,0,0,24,29,1,49,19,0,0,25,11,0,49,19,0,0,26,21,0,54,15,0,0,27,22
	.byte	0,3,8,58,15,59,15,57,15,73,19,0,0,28,19,1,58,15,59,15,57,15,11,15,0,0,29,1,1,11,15,73,19,0,0,30,33,0,47
	.byte	15,0,0,31,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,32,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0
	.byte	0,33,23,1,58,15,59,15,57,15,11,15,0,0,34,23,1,3,8,58,15,59,15,57,15,11,15,0,0,35,13,0,11,15,73,19,13,15
	.byte	12,15,56,9,0,0,36,21,1,54,15,39,12,0,0,37,21,0,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L170:
	.word	.L501-.L500
.L500:
	.half	3
	.word	.L503-.L502
.L502:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\CanSM\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\CanIf\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\EcuM\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\appl\\GenData',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\BswM\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\ComM\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Can\\Implementation',0,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0
	.byte	'CanSM_Int.h',0,1,0,0
	.byte	'Det.h',0,2,0,0
	.byte	'CanIf.h',0,3,0,0
	.byte	'CanIf_Types.h',0,3,0,0
	.byte	'EcuM_Cbk.h',0,4,0,0
	.byte	'CanSM_Cfg.h',0,5,0,0
	.byte	'BswM_CanSM.h',0,6,0,0
	.byte	'ComM_BusSM.h',0,7,0,0
	.byte	'Os.h',0,8,0,0
	.byte	'SchM_CanSM.h',0,5,0,0
	.byte	'Platform_Types.h',0,9,0,0
	.byte	'Std_Types.h',0,9,0,0
	.byte	'ComStack_Cfg.h',0,5,0,0
	.byte	'ComStack_Types.h',0,9,0,0
	.byte	'Det_Cfg.h',0,5,0,0
	.byte	'Rte_Type.h',0,5,0,0
	.byte	'Can_DrvGeneralTypes.h',0,5,0,0
	.byte	'Can_Cfg.h',0,5,0,0
	.byte	'Can.h',0,10,0,0
	.byte	'CanIf_Cfg.h',0,5,0,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM_BswM.h',0,0,0,0
	.byte	'EcuM_Generated_Types.h',0,5,0,0
	.byte	'EcuM_Cfg.h',0,5,0,0
	.byte	'ComM_Cfg.h',0,5,0,0
	.byte	'Os_Types_Lcfg.h',0,5,0,0
	.byte	'Os_Hal_Os_Types.h',0,8,0,0
	.byte	'Os_Hal_OsInt.h',0,8,0,0
	.byte	'Os_Types.h',0,8,0,0,0
.L503:
.L501:
	.sdecl	'.debug_info',debug,cluster('CanSM_ControllerBusOff')
	.sect	'.debug_info'
.L171:
	.word	339
	.half	3
	.word	.L172
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L174,.L173
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_ControllerBusOff',0,1,220,21,24,1,1,1
	.word	.L158,.L268,.L157
	.byte	4
	.byte	'CanSM_ControllerId',0,1,220,21,54
	.word	.L269,.L270
	.byte	5
	.word	.L158,.L268
	.byte	6
	.byte	'CanSM_DetErrorId',0,1,223,21,9
	.word	.L269,.L271
	.byte	7
	.word	.L272,.L73,.L72
	.byte	8
	.word	.L273,.L274
	.byte	9
	.word	.L275,.L73,.L72
	.byte	7
	.word	.L276,.L76,.L277
	.byte	8
	.word	.L278,.L279
	.byte	8
	.word	.L280,.L281
	.byte	10
	.word	.L282,.L76,.L277
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_ControllerBusOff')
	.sect	'.debug_abbrev'
.L172:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_ControllerBusOff')
	.sect	'.debug_line'
.L173:
	.word	.L505-.L504
.L504:
	.half	3
	.word	.L507-.L506
.L506:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L507:
	.byte	5,26,7,0,5,2
	.word	.L158
	.byte	3,222,21,1,5,8,3,3,1,5,3,9
	.half	.L508-.L158
	.byte	1,5,22,7,9
	.half	.L509-.L508
	.byte	3,2,1,5,38,1,5,5,9
	.half	.L71-.L509
	.byte	3,10,1,5,24,7,9
	.half	.L510-.L71
	.byte	3,2,1,5,50,1,5,95,9
	.half	.L73-.L510
	.byte	3,221,120,1,5,37,9
	.half	.L486-.L73
	.byte	3,2,1,5,60,9
	.half	.L511-.L486
	.byte	1,5,3,9
	.half	.L512-.L511
	.byte	1,5,54,7,9
	.half	.L513-.L512
	.byte	3,2,1,5,52,9
	.half	.L75-.L513
	.byte	3,3,1,5,50,1,5,3,9
	.half	.L514-.L75
	.byte	3,2,1,5,39,9
	.half	.L487-.L514
	.byte	3,1,1,5,62,9
	.half	.L515-.L487
	.byte	1,5,8,9
	.half	.L516-.L515
	.byte	1,5,144,1,7,9
	.half	.L517-.L516
	.byte	1,5,141,1,9
	.half	.L518-.L517
	.byte	1,5,54,7,9
	.half	.L76-.L518
	.byte	3,169,121,1,5,52,1,9
	.half	.L519-.L76
	.byte	3,1,1,5,50,1,5,56,9
	.half	.L520-.L519
	.byte	3,16,1,5,54,1,5,52,9
	.half	.L521-.L520
	.byte	3,1,1,5,39,9
	.half	.L277-.L521
	.byte	3,202,6,1,5,5,9
	.half	.L522-.L277
	.byte	1,5,71,7,9
	.half	.L523-.L522
	.byte	3,2,1,5,69,1,5,3,9
	.half	.L77-.L523
	.byte	3,4,1,5,30,9
	.half	.L524-.L77
	.byte	3,3,1,5,79,1,5,3,9
	.half	.L72-.L524
	.byte	3,155,7,1,5,28,7,9
	.half	.L525-.L72
	.byte	3,2,1,5,64,9
	.half	.L526-.L525
	.byte	1,5,92,9
	.half	.L527-.L526
	.byte	1,5,1,9
	.half	.L79-.L527
	.byte	3,7,1,7,9
	.half	.L175-.L79
	.byte	0,1,1
.L505:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_ControllerBusOff')
	.sect	'.debug_ranges'
.L174:
	.word	-1,.L158,0,.L175-.L158,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_ControllerModeIndication')
	.sect	'.debug_info'
.L176:
	.word	472
	.half	3
	.word	.L177
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L179,.L178
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_ControllerModeIndication',0,1,201,24,24,1,1,1
	.word	.L160,.L283,.L159
	.byte	4
	.byte	'CanSM_ControllerId',0,1,201,24,62
	.word	.L269,.L284
	.byte	4
	.byte	'CanSM_ControllerMode',0,1,201,24,107
	.word	.L285,.L286
	.byte	5
	.word	.L160,.L283
	.byte	6
	.byte	'CanSM_DetErrorId',0,1,204,24,9
	.word	.L269,.L287
	.byte	5
	.word	.L82,.L81
	.byte	7
	.word	.L288,.L289,.L290
	.byte	8
	.word	.L291,.L292
	.byte	8
	.word	.L293,.L294
	.byte	9
	.word	.L295,.L296
	.byte	0,7
	.word	.L288,.L297,.L84
	.byte	8
	.word	.L291,.L292
	.byte	8
	.word	.L293,.L294
	.byte	0,7
	.word	.L298,.L299,.L300
	.byte	8
	.word	.L301,.L302
	.byte	8
	.word	.L303,.L304
	.byte	10
	.word	.L305,.L299,.L300
	.byte	0,7
	.word	.L306,.L307,.L87
	.byte	8
	.word	.L308,.L309
	.byte	8
	.word	.L310,.L311
	.byte	10
	.word	.L312,.L307,.L87
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_ControllerModeIndication')
	.sect	'.debug_abbrev'
.L177:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0
	.byte	10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_ControllerModeIndication')
	.sect	'.debug_line'
.L178:
	.word	.L529-.L528
.L528:
	.half	3
	.word	.L531-.L530
.L530:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L531:
	.byte	5,24,7,0,5,2
	.word	.L160
	.byte	3,200,24,1,5,26,9
	.half	.L490-.L160
	.byte	3,3,1,5,8,3,3,1,5,3,9
	.half	.L532-.L490
	.byte	1,5,22,7,9
	.half	.L533-.L532
	.byte	3,2,1,5,38,1,5,5,9
	.half	.L80-.L533
	.byte	3,10,1,5,24,7,9
	.half	.L534-.L80
	.byte	3,2,1,5,50,1,5,46,9
	.half	.L82-.L534
	.byte	3,9,1,5,99,9
	.half	.L289-.L82
	.byte	3,126,1,5,37,9
	.half	.L489-.L289
	.byte	3,180,113,1,5,7,9
	.half	.L290-.L489
	.byte	3,208,14,1,5,3,7,9
	.half	.L297-.L290
	.byte	3,176,113,1,5,56,7,9
	.half	.L535-.L297
	.byte	3,21,1,5,54,1,5,75,9
	.half	.L536-.L535
	.byte	1,5,13,9
	.half	.L85-.L536
	.byte	3,6,1,5,8,9
	.half	.L537-.L85
	.byte	1,5,58,7,9
	.half	.L538-.L537
	.byte	3,13,1,5,86,3,170,14,1,5,12,9
	.half	.L84-.L538
	.byte	3,2,1,5,60,7,9
	.half	.L299-.L84
	.byte	3,136,114,1,5,3,9
	.half	.L539-.L299
	.byte	1,5,99,7,9
	.half	.L540-.L539
	.byte	3,240,13,1,5,84,9
	.half	.L300-.L540
	.byte	3,10,1,5,17,9
	.half	.L89-.L300
	.byte	3,2,1,5,119,7,9
	.half	.L541-.L89
	.byte	1,5,70,7,9
	.half	.L307-.L541
	.byte	3,226,112,1,5,68,1,5,32,9
	.half	.L542-.L307
	.byte	3,1,1,5,56,9
	.half	.L543-.L542
	.byte	1,5,3,9
	.half	.L544-.L543
	.byte	3,3,1,5,56,7,9
	.half	.L545-.L544
	.byte	3,2,1,5,54,9
	.half	.L88-.L545
	.byte	1,5,58,9
	.half	.L86-.L88
	.byte	3,1,1,5,93,3,127,1,5,37,9
	.half	.L94-.L86
	.byte	3,5,1,5,3,9
	.half	.L546-.L94
	.byte	1,5,27,7,9
	.half	.L547-.L546
	.byte	3,6,1,5,99,3,129,15,1,5,76,9
	.half	.L548-.L547
	.byte	3,255,112,1,5,29,9
	.half	.L96-.L548
	.byte	3,10,1,5,90,9
	.half	.L549-.L96
	.byte	1,5,56,9
	.half	.L550-.L549
	.byte	3,2,1,5,54,1,5,58,9
	.half	.L551-.L550
	.byte	3,3,1,5,105,9
	.half	.L552-.L551
	.byte	3,126,1,5,5,9
	.half	.L553-.L552
	.byte	1,5,58,9
	.half	.L554-.L553
	.byte	3,2,1,5,3,9
	.half	.L95-.L554
	.byte	3,120,1,5,41,9
	.half	.L87-.L95
	.byte	3,144,15,1,5,7,9
	.half	.L555-.L87
	.byte	1,5,73,7,9
	.half	.L556-.L555
	.byte	3,2,1,5,71,1,5,45,9
	.half	.L100-.L556
	.byte	3,4,1,5,34,9
	.half	.L557-.L100
	.byte	3,3,1,5,83,1,5,3,9
	.half	.L81-.L557
	.byte	3,6,1,5,28,7,9
	.half	.L558-.L81
	.byte	3,2,1,5,64,9
	.half	.L559-.L558
	.byte	1,5,100,9
	.half	.L560-.L559
	.byte	1,5,1,9
	.half	.L101-.L560
	.byte	3,7,1,7,9
	.half	.L180-.L101
	.byte	0,1,1
.L529:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_ControllerModeIndication')
	.sect	'.debug_ranges'
.L179:
	.word	-1,.L160,0,.L180-.L160,0,0
.L296:
	.word	-1,.L160,.L289-.L160,.L290-.L160,.L297-.L160,.L84-.L160,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_RequestComMode')
	.sect	'.debug_info'
.L181:
	.word	395
	.half	3
	.word	.L182
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L184,.L183
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_RequestComMode',0,1,255,19,34
	.word	.L269
	.byte	1,1,1
	.word	.L154,.L313,.L153
	.byte	4
	.byte	'CanSM_NetworkHandle',0,1,255,19,74
	.word	.L269,.L314
	.byte	4
	.byte	'CanSM_RequestedComMMode',0,1,255,19,109
	.word	.L269,.L315
	.byte	5
	.word	.L154,.L313
	.byte	6
	.byte	'CanSM_DetErrorId',0,1,130,20,9
	.word	.L269,.L316
	.byte	6
	.byte	'CanSM_StdReturnValue',0,1,131,20,18
	.word	.L269,.L317
	.byte	5
	.word	.L45,.L44
	.byte	7
	.word	.L318,.L319,.L44
	.byte	8
	.word	.L320,.L321
	.byte	8
	.word	.L322,.L323
	.byte	8
	.word	.L324,.L325
	.byte	9
	.word	.L326,.L319,.L44
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_RequestComMode')
	.sect	'.debug_abbrev'
.L182:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_RequestComMode')
	.sect	'.debug_line'
.L183:
	.word	.L562-.L561
.L561:
	.half	3
	.word	.L564-.L563
.L563:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L564:
	.byte	5,8,7,0,5,2
	.word	.L154
	.byte	3,135,20,1,5,34,9
	.half	.L565-.L154
	.byte	3,119,1,5,8,3,9,1,5,26,9
	.half	.L477-.L565
	.byte	3,122,1,5,24,9
	.half	.L478-.L477
	.byte	3,5,1,5,3,9
	.half	.L479-.L478
	.byte	3,1,1,5,22,7,9
	.half	.L566-.L479
	.byte	3,2,1,5,38,1,5,5,9
	.half	.L43-.L566
	.byte	3,10,1,5,24,7,9
	.half	.L567-.L43
	.byte	3,2,1,5,56,1,5,13,9
	.half	.L45-.L567
	.byte	3,11,1,5,95,7,9
	.half	.L568-.L45
	.byte	1,5,153,1,7,9
	.half	.L569-.L568
	.byte	1,5,17,7,9
	.half	.L47-.L569
	.byte	3,6,1,5,99,7,9
	.half	.L570-.L47
	.byte	3,118,1,5,111,9
	.half	.L571-.L570
	.byte	3,10,1,5,135,1,9
	.half	.L572-.L571
	.byte	1,5,133,1,9
	.half	.L573-.L572
	.byte	1,5,26,7,9
	.half	.L49-.L573
	.byte	3,2,1,5,56,1,5,99,9
	.half	.L50-.L49
	.byte	3,116,1,5,30,9
	.half	.L480-.L50
	.byte	3,18,1,5,37,3,137,121,1,5,3,9
	.half	.L574-.L480
	.byte	1,5,58,7,9
	.half	.L575-.L574
	.byte	3,3,1,5,5,9
	.half	.L576-.L575
	.byte	3,3,1,5,12,9
	.half	.L481-.L576
	.byte	3,2,1,5,105,7,9
	.half	.L577-.L481
	.byte	1,5,128,1,9
	.half	.L578-.L577
	.byte	1,5,73,9
	.half	.L579-.L578
	.byte	1,5,69,7,9
	.half	.L580-.L579
	.byte	3,2,1,5,66,9
	.half	.L581-.L580
	.byte	1,5,29,7,9
	.half	.L55-.L581
	.byte	3,4,1,5,99,3,215,6,1,5,78,9
	.half	.L582-.L55
	.byte	3,169,121,1,5,15,9
	.half	.L54-.L582
	.byte	3,2,1,5,106,7,9
	.half	.L583-.L54
	.byte	1,5,149,1,9
	.half	.L584-.L583
	.byte	1,5,30,7,9
	.half	.L585-.L584
	.byte	3,2,1,5,99,3,211,6,1,5,39,9
	.half	.L57-.L585
	.byte	3,182,121,1,5,5,9
	.half	.L586-.L57
	.byte	1,5,71,7,9
	.half	.L587-.L586
	.byte	3,2,1,5,69,1,5,5,9
	.half	.L60-.L587
	.byte	3,3,1,5,32,9
	.half	.L588-.L60
	.byte	3,3,1,5,81,1,5,3,9
	.half	.L44-.L588
	.byte	3,226,6,1,5,28,7,9
	.half	.L589-.L44
	.byte	3,2,1,5,64,9
	.half	.L590-.L589
	.byte	1,5,90,9
	.half	.L591-.L590
	.byte	1,5,3,9
	.half	.L61-.L591
	.byte	3,7,1,5,1,3,2,1,7,9
	.half	.L185-.L61
	.byte	0,1,1
.L562:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_RequestComMode')
	.sect	'.debug_ranges'
.L184:
	.word	-1,.L154,0,.L185-.L154,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_GetCurrentComMode')
	.sect	'.debug_info'
.L186:
	.word	329
	.half	3
	.word	.L187
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L189,.L188
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_GetCurrentComMode',0,1,217,20,34
	.word	.L269
	.byte	1,1,1
	.word	.L156,.L327,.L155
	.byte	4
	.byte	'CanSM_NetworkHandle',0,1,217,20,77
	.word	.L269,.L328
	.byte	4
	.byte	'CanSM_ComMModePtr',0,1,217,20,148,1
	.word	.L329,.L330
	.byte	5
	.word	.L156,.L327
	.byte	6
	.byte	'CanSM_DetErrorId',0,1,220,20,9
	.word	.L269,.L331
	.byte	6
	.byte	'CanSM_StdReturnValue',0,1,221,20,18
	.word	.L269,.L332
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_GetCurrentComMode')
	.sect	'.debug_abbrev'
.L187:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_GetCurrentComMode')
	.sect	'.debug_line'
.L188:
	.word	.L593-.L592
.L592:
	.half	3
	.word	.L595-.L594
.L594:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L595:
	.byte	5,26,7,0,5,2
	.word	.L156
	.byte	3,219,20,1,5,24,9
	.half	.L485-.L156
	.byte	3,6,1,5,8,3,1,1,5,3,9
	.half	.L596-.L485
	.byte	1,5,22,7,9
	.half	.L597-.L596
	.byte	3,2,1,5,38,1,5,8,9
	.half	.L63-.L597
	.byte	3,3,1,5,22,7,9
	.half	.L598-.L63
	.byte	3,2,1,5,45,1,5,5,9
	.half	.L65-.L598
	.byte	3,10,1,5,24,7,9
	.half	.L599-.L65
	.byte	3,2,1,5,56,1,5,28,9
	.half	.L67-.L599
	.byte	3,9,1,5,30,3,1,1,5,78,9
	.half	.L600-.L67
	.byte	1,5,28,9
	.half	.L601-.L600
	.byte	1,5,3,9
	.half	.L64-.L601
	.byte	3,6,1,5,28,7,9
	.half	.L602-.L64
	.byte	3,2,1,5,64,9
	.half	.L483-.L602
	.byte	1,5,93,1,5,3,9
	.half	.L69-.L483
	.byte	3,7,1,5,1,3,2,1,7,9
	.half	.L190-.L69
	.byte	0,1,1
.L593:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_GetCurrentComMode')
	.sect	'.debug_ranges'
.L189:
	.word	-1,.L156,0,.L190-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_PreInit')
	.sect	'.debug_info'
.L191:
	.word	287
	.half	3
	.word	.L192
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L194,.L193
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_PreInit',0,1,210,18,24,1,1,1
	.word	.L142,.L333,.L141
	.byte	4
	.byte	'ConfigPtr',0,1,210,18,96
	.word	.L334,.L335
	.byte	5
	.word	.L142,.L333
	.byte	6
	.word	.L336,.L337,.L338
	.byte	7
	.word	.L339,.L340
	.byte	8
	.word	.L341,.L342
	.byte	6
	.word	.L343,.L344,.L338
	.byte	7
	.word	.L345,.L346
	.byte	7
	.word	.L347,.L348
	.byte	9
	.word	.L349,.L344,.L338
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_PreInit')
	.sect	'.debug_abbrev'
.L192:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,85,6,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_PreInit')
	.sect	'.debug_line'
.L193:
	.word	.L604-.L603
.L603:
	.half	3
	.word	.L606-.L605
.L605:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L606:
	.byte	5,10,7,0,5,2
	.word	.L142
	.byte	3,229,18,1,5,5,9
	.half	.L607-.L142
	.byte	1,5,95,7,9
	.half	.L337-.L607
	.byte	3,240,117,1,5,68,9
	.half	.L608-.L337
	.byte	3,6,1,5,53,9
	.half	.L609-.L608
	.byte	3,1,1,5,50,9
	.half	.L610-.L609
	.byte	3,1,1,5,59,9
	.half	.L611-.L610
	.byte	3,1,1,5,57,1,5,56,9
	.half	.L612-.L611
	.byte	3,1,1,9
	.half	.L613-.L612
	.byte	3,1,1,5,50,9
	.half	.L614-.L613
	.byte	3,1,1,5,67,9
	.half	.L615-.L614
	.byte	3,1,1,5,65,1,5,58,9
	.half	.L616-.L615
	.byte	3,1,1,5,64,9
	.half	.L617-.L616
	.byte	3,3,1,5,54,9
	.half	.L344-.L617
	.byte	3,66,1,5,56,9
	.half	.L618-.L344
	.byte	3,16,1,5,54,1,5,27,9
	.half	.L338-.L618
	.byte	3,186,10,1,5,50,9
	.half	.L619-.L338
	.byte	1,5,1,9
	.half	.L25-.L619
	.byte	3,22,1,7,9
	.half	.L195-.L25
	.byte	0,1,1
.L604:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_PreInit')
	.sect	'.debug_ranges'
.L194:
	.word	-1,.L142,0,.L195-.L142,0,0
.L342:
	.word	-1,.L142,.L337-.L142,.L338-.L142,-1,.L144,0,.L255-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_Init')
	.sect	'.debug_info'
.L196:
	.word	242
	.half	3
	.word	.L197
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L199,.L198
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_Init',0,1,152,19,24,1,1,1
	.word	.L146,.L350,.L145
	.byte	4
	.byte	'ConfigPtr',0,1,152,19,93
	.word	.L351,.L352
	.byte	5
	.word	.L146,.L350
	.byte	6
	.word	.L353,.L354,.L355
	.byte	7
	.word	.L356,.L357
	.byte	8
	.word	.L358,.L354,.L355
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_Init')
	.sect	'.debug_abbrev'
.L197:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_Init')
	.sect	'.debug_line'
.L198:
	.word	.L621-.L620
.L620:
	.half	3
	.word	.L623-.L622
.L622:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L623:
	.byte	5,18,7,0,5,2
	.word	.L146
	.byte	3,155,19,1,5,8,9
	.half	.L476-.L146
	.byte	3,2,1,5,3,9
	.half	.L624-.L476
	.byte	1,5,27,7,9
	.half	.L625-.L624
	.byte	3,2,1,5,25,1,5,95,9
	.half	.L354-.L625
	.byte	3,222,117,1,5,32,9
	.half	.L626-.L354
	.byte	3,2,1,5,67,9
	.half	.L627-.L626
	.byte	1,5,65,1,5,95,9
	.half	.L628-.L627
	.byte	3,126,1,5,67,9
	.half	.L629-.L628
	.byte	3,28,1,5,65,1,5,27,9
	.half	.L355-.L629
	.byte	3,144,10,1,5,25,1,5,1,9
	.half	.L26-.L355
	.byte	3,3,1,7,9
	.half	.L200-.L26
	.byte	0,1,1
.L621:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_Init')
	.sect	'.debug_ranges'
.L199:
	.word	-1,.L146,0,.L200-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_InitMemory')
	.sect	'.debug_info'
.L201:
	.word	188
	.half	3
	.word	.L202
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L204,.L203
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_InitMemory',0,1,179,18,24,1,1,1
	.word	.L140,.L359,.L139
	.byte	4
	.word	.L140,.L359
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_InitMemory')
	.sect	'.debug_abbrev'
.L202:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_InitMemory')
	.sect	'.debug_line'
.L203:
	.word	.L631-.L630
.L630:
	.half	3
	.word	.L633-.L632
.L632:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L633:
	.byte	5,3,7,0,5,2
	.word	.L140
	.byte	3,191,18,1,5,25,9
	.half	.L634-.L140
	.byte	1,5,23,1,5,1,9
	.half	.L635-.L634
	.byte	3,2,1,7,9
	.half	.L205-.L635
	.byte	0,1,1
.L631:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_InitMemory')
	.sect	'.debug_ranges'
.L204:
	.word	-1,.L140,0,.L205-.L140,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_StartWakeupSources')
	.sect	'.debug_info'
.L206:
	.word	307
	.half	3
	.word	.L207
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L209,.L208
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_StartWakeupSources',0,1,193,31,34
	.word	.L269
	.byte	1,1,1
	.word	.L164,.L360,.L163
	.byte	4
	.byte	'CanSM_NetworkHandle',0,1,193,31,78
	.word	.L269,.L361
	.byte	5
	.word	.L164,.L360
	.byte	6
	.byte	'CanSM_StdReturnValue',0,1,195,31,18
	.word	.L269,.L362
	.byte	6
	.byte	'CanSM_DetErrorId',0,1,199,31,9
	.word	.L269,.L363
	.byte	7
	.word	.L110,.L109
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_StartWakeupSources')
	.sect	'.debug_abbrev'
.L207:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_StartWakeupSources')
	.sect	'.debug_line'
.L208:
	.word	.L637-.L636
.L636:
	.half	3
	.word	.L639-.L638
.L638:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L639:
	.byte	5,39,7,0,5,2
	.word	.L164
	.byte	3,194,31,1,5,26,9
	.half	.L495-.L164
	.byte	3,4,1,5,8,3,4,1,5,3,9
	.half	.L640-.L495
	.byte	1,5,22,7,9
	.half	.L641-.L640
	.byte	3,2,1,5,38,1,5,5,9
	.half	.L108-.L641
	.byte	3,10,1,5,24,7,9
	.half	.L642-.L108
	.byte	3,2,1,5,56,1,5,9,9
	.half	.L110-.L642
	.byte	3,14,1,5,101,9
	.half	.L643-.L110
	.byte	3,126,1,5,43,9
	.half	.L494-.L643
	.byte	3,3,1,5,9,9
	.half	.L644-.L494
	.byte	1,5,40,7,9
	.half	.L645-.L644
	.byte	3,6,1,5,62,9
	.half	.L646-.L645
	.byte	1,5,60,1,5,38,9
	.half	.L647-.L646
	.byte	3,4,1,5,101,3,115,1,5,45,9
	.half	.L648-.L647
	.byte	3,15,1,5,68,9
	.half	.L649-.L648
	.byte	1,5,11,9
	.half	.L650-.L649
	.byte	1,5,34,7,9
	.half	.L651-.L650
	.byte	3,2,1,5,40,1,5,64,9
	.half	.L113-.L651
	.byte	3,4,1,5,62,1,5,60,9
	.half	.L114-.L113
	.byte	3,3,1,5,58,1,5,9,9
	.half	.L112-.L114
	.byte	3,3,1,5,3,9
	.half	.L109-.L112
	.byte	3,7,1,5,28,7,9
	.half	.L652-.L109
	.byte	3,2,1,5,64,9
	.half	.L653-.L652
	.byte	1,5,94,9
	.half	.L654-.L653
	.byte	1,5,3,9
	.half	.L115-.L654
	.byte	3,11,1,5,1,3,2,1,7,9
	.half	.L210-.L115
	.byte	0,1,1
.L637:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_StartWakeupSources')
	.sect	'.debug_ranges'
.L209:
	.word	-1,.L164,0,.L210-.L164,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_StopWakeupSources')
	.sect	'.debug_info'
.L211:
	.word	332
	.half	3
	.word	.L212
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L214,.L213
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_StopWakeupSources',0,1,167,32,34
	.word	.L269
	.byte	1,1,1
	.word	.L166,.L364,.L165
	.byte	4
	.byte	'CanSM_NetworkHandle',0,1,167,32,77
	.word	.L269,.L365
	.byte	4
	.byte	'WakeupSource',0,1,167,32,120
	.word	.L366,.L367
	.byte	5
	.word	.L166,.L364
	.byte	6
	.byte	'CanSM_StdReturnValue',0,1,169,32,18
	.word	.L269,.L368
	.byte	6
	.byte	'CanSM_DetErrorId',0,1,173,32,9
	.word	.L269,.L369
	.byte	7
	.word	.L119,.L118
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_StopWakeupSources')
	.sect	'.debug_abbrev'
.L212:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_StopWakeupSources')
	.sect	'.debug_line'
.L213:
	.word	.L656-.L655
.L655:
	.half	3
	.word	.L658-.L657
.L657:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L658:
	.byte	5,8,7,0,5,2
	.word	.L166
	.byte	3,176,32,1,5,34,9
	.half	.L659-.L166
	.byte	3,118,1,5,8,3,10,1,5,39,9
	.half	.L499-.L659
	.byte	3,120,1,5,26,9
	.half	.L498-.L499
	.byte	3,4,1,5,3,9
	.half	.L497-.L498
	.byte	3,4,1,5,22,7,9
	.half	.L660-.L497
	.byte	3,2,1,5,38,1,5,5,9
	.half	.L117-.L660
	.byte	3,11,1,5,24,7,9
	.half	.L661-.L117
	.byte	3,2,1,5,56,1,5,9,9
	.half	.L119-.L661
	.byte	3,13,1,5,101,9
	.half	.L496-.L119
	.byte	3,126,1,5,43,9
	.half	.L662-.L496
	.byte	3,4,1,5,9,9
	.half	.L663-.L662
	.byte	1,5,40,7,9
	.half	.L664-.L663
	.byte	3,3,1,5,62,9
	.half	.L665-.L664
	.byte	1,5,60,1,5,45,9
	.half	.L666-.L665
	.byte	3,2,1,5,11,9
	.half	.L667-.L666
	.byte	1,5,35,7,9
	.half	.L668-.L667
	.byte	3,2,1,5,33,1,5,38,9
	.half	.L122-.L668
	.byte	3,4,1,5,101,3,113,1,5,45,9
	.half	.L669-.L122
	.byte	3,17,1,5,68,9
	.half	.L670-.L669
	.byte	1,5,11,9
	.half	.L671-.L670
	.byte	1,5,34,7,9
	.half	.L672-.L671
	.byte	3,2,1,5,48,9
	.half	.L673-.L672
	.byte	1,5,73,9
	.half	.L123-.L673
	.byte	3,3,1,5,16,9
	.half	.L674-.L123
	.byte	1,5,34,7,9
	.half	.L124-.L674
	.byte	3,2,1,5,33,9
	.half	.L125-.L124
	.byte	3,7,1,5,31,1,5,62,9
	.half	.L675-.L125
	.byte	3,2,1,5,60,1,5,9,9
	.half	.L121-.L675
	.byte	3,4,1,5,3,9
	.half	.L118-.L121
	.byte	3,8,1,5,28,7,9
	.half	.L676-.L118
	.byte	3,2,1,5,64,9
	.half	.L677-.L676
	.byte	1,5,93,9
	.half	.L678-.L677
	.byte	1,5,3,9
	.half	.L127-.L678
	.byte	3,12,1,5,1,3,2,1,7,9
	.half	.L215-.L127
	.byte	0,1,1
.L656:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_StopWakeupSources')
	.sect	'.debug_ranges'
.L214:
	.word	-1,.L166,0,.L215-.L166,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_TxTimeoutException')
	.sect	'.debug_info'
.L216:
	.word	315
	.half	3
	.word	.L217
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L219,.L218
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_TxTimeoutException',0,1,210,29,24,1,1,1
	.word	.L162,.L370,.L161
	.byte	4
	.byte	'CanSM_NetworkHandle',0,1,210,29,68
	.word	.L269,.L371
	.byte	5
	.word	.L162,.L370
	.byte	6
	.byte	'CanSM_DetErrorId',0,1,213,29,9
	.word	.L269,.L372
	.byte	5
	.word	.L104,.L106
	.byte	7
	.word	.L343,.L373,.L374
	.byte	8
	.word	.L345,.L375
	.byte	8
	.word	.L347,.L376
	.byte	9
	.word	.L349,.L373,.L374
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_TxTimeoutException')
	.sect	'.debug_abbrev'
.L217:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_TxTimeoutException')
	.sect	'.debug_line'
.L218:
	.word	.L680-.L679
.L679:
	.half	3
	.word	.L682-.L681
.L681:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L682:
	.byte	5,26,7,0,5,2
	.word	.L162
	.byte	3,212,29,1,5,8,3,4,1,5,3,9
	.half	.L683-.L162
	.byte	1,5,22,7,9
	.half	.L684-.L683
	.byte	3,2,1,5,38,1,5,5,9
	.half	.L102-.L684
	.byte	3,11,1,5,24,7,9
	.half	.L685-.L102
	.byte	3,2,1,5,56,1,5,99,9
	.half	.L104-.L685
	.byte	3,6,1,5,44,9
	.half	.L492-.L104
	.byte	3,2,1,5,67,9
	.half	.L686-.L492
	.byte	1,5,7,9
	.half	.L687-.L686
	.byte	1,5,54,7,9
	.half	.L373-.L687
	.byte	3,183,106,1,5,52,1,5,54,9
	.half	.L688-.L373
	.byte	3,2,1,5,56,9
	.half	.L689-.L688
	.byte	3,16,1,5,54,1,5,38,9
	.half	.L374-.L689
	.byte	3,194,21,1,5,62,9
	.half	.L690-.L374
	.byte	1,5,5,9
	.half	.L106-.L690
	.byte	3,112,1,5,3,9
	.half	.L103-.L106
	.byte	3,35,1,5,28,7,9
	.half	.L691-.L103
	.byte	3,2,1,5,64,9
	.half	.L493-.L691
	.byte	1,5,94,9
	.half	.L692-.L493
	.byte	1,5,1,7,9
	.half	.L107-.L692
	.byte	3,7,1,7,9
	.half	.L220-.L107
	.byte	0,1,1
.L680:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_TxTimeoutException')
	.sect	'.debug_ranges'
.L219:
	.word	-1,.L162,0,.L220-.L162,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_MainFunction')
	.sect	'.debug_info'
.L221:
	.word	474
	.half	3
	.word	.L222
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L224,.L223
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_MainFunction',0,1,194,19,24,1,1,1
	.word	.L148,.L377,.L147
	.byte	4
	.word	.L378
	.byte	5
	.word	.L379,.L380,.L27
	.byte	6
	.word	.L381,.L382
	.byte	6
	.word	.L383,.L384
	.byte	7
	.word	.L385,.L386
	.byte	5
	.word	.L343,.L387,.L30
	.byte	6
	.word	.L345,.L388
	.byte	6
	.word	.L347,.L389
	.byte	8
	.word	.L349,.L387,.L30
	.byte	0,0,0,5
	.word	.L379,.L28,.L30
	.byte	6
	.word	.L381,.L382
	.byte	6
	.word	.L383,.L384
	.byte	0,5
	.word	.L390,.L33,.L34
	.byte	6
	.word	.L391,.L392
	.byte	6
	.word	.L393,.L394
	.byte	8
	.word	.L395,.L33,.L34
	.byte	0,5
	.word	.L396,.L34,.L36
	.byte	6
	.word	.L397,.L398
	.byte	6
	.word	.L399,.L400
	.byte	7
	.word	.L401,.L402
	.byte	5
	.word	.L343,.L403,.L404
	.byte	6
	.word	.L345,.L388
	.byte	6
	.word	.L347,.L389
	.byte	8
	.word	.L349,.L403,.L404
	.byte	0,0,0,5
	.word	.L405,.L36,.L37
	.byte	6
	.word	.L406,.L407
	.byte	8
	.word	.L408,.L36,.L37
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_MainFunction')
	.sect	'.debug_abbrev'
.L222:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,85,6,0,0,5,29,1,49,16,17,1,18,1,0,0,6,5,0,49,16,2,6,0,0,7,11,1,49
	.byte	16,85,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_MainFunction')
	.sect	'.debug_line'
.L223:
	.word	.L694-.L693
.L693:
	.half	3
	.word	.L696-.L695
.L695:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L696:
	.byte	5,8,7,0,5,2
	.word	.L148
	.byte	3,198,19,1,5,3,9
	.half	.L697-.L148
	.byte	1,5,36,7,9
	.half	.L380-.L697
	.byte	3,7,1,5,40,9
	.half	.L698-.L380
	.byte	3,192,120,1,5,127,9
	.half	.L699-.L698
	.byte	1,5,34,9
	.half	.L700-.L699
	.byte	3,2,1,5,127,9
	.half	.L701-.L700
	.byte	3,126,1,5,9,9
	.half	.L702-.L701
	.byte	1,5,149,1,7,9
	.half	.L703-.L702
	.byte	1,5,147,1,9
	.half	.L704-.L703
	.byte	1,5,56,7,9
	.half	.L705-.L704
	.byte	3,2,1,5,54,9
	.half	.L706-.L705
	.byte	3,4,1,5,76,3,124,1,5,1,9
	.half	.L27-.L706
	.byte	3,223,7,1,5,14,7,9
	.half	.L28-.L27
	.byte	3,169,120,1,5,153,1,7,9
	.half	.L707-.L28
	.byte	1,5,150,1,9
	.half	.L708-.L707
	.byte	1,5,54,7,9
	.half	.L387-.L708
	.byte	3,143,124,1,5,52,1,5,54,9
	.half	.L709-.L387
	.byte	3,18,1,5,66,3,10,1,5,48,9
	.half	.L30-.L709
	.byte	3,143,11,1,5,46,9
	.half	.L710-.L30
	.byte	1,5,41,9
	.half	.L711-.L710
	.byte	3,2,1,5,7,9
	.half	.L712-.L711
	.byte	1,5,73,7,9
	.half	.L713-.L712
	.byte	3,2,1,5,71,1,5,39,9
	.half	.L33-.L713
	.byte	3,221,120,1,5,8,9
	.half	.L714-.L33
	.byte	1,5,104,7,9
	.half	.L715-.L714
	.byte	1,5,129,1,9
	.half	.L716-.L715
	.byte	1,5,126,9
	.half	.L717-.L716
	.byte	1,5,36,7,9
	.half	.L718-.L717
	.byte	3,3,1,5,97,9
	.half	.L719-.L718
	.byte	1,5,57,9
	.half	.L720-.L719
	.byte	3,1,1,5,55,1,5,52,9
	.half	.L721-.L720
	.byte	3,1,1,5,37,9
	.half	.L34-.L721
	.byte	3,29,1,5,3,9
	.half	.L722-.L34
	.byte	1,5,28,7,9
	.half	.L723-.L722
	.byte	3,21,1,5,64,9
	.half	.L724-.L723
	.byte	1,5,88,9
	.half	.L725-.L724
	.byte	1,5,72,9
	.half	.L726-.L725
	.byte	3,6,1,5,70,1,5,52,9
	.half	.L403-.L726
	.byte	3,183,123,1,5,54,9
	.half	.L727-.L403
	.byte	3,2,1,5,56,9
	.half	.L728-.L727
	.byte	3,16,1,5,54,1,5,66,9
	.half	.L729-.L728
	.byte	3,10,1,5,58,9
	.half	.L404-.L729
	.byte	3,176,4,1,5,37,9
	.half	.L36-.L404
	.byte	3,23,1,5,3,9
	.half	.L730-.L36
	.byte	1,5,55,7,9
	.half	.L731-.L730
	.byte	3,2,1,5,10,9
	.half	.L732-.L731
	.byte	3,2,1,5,40,7,9
	.half	.L733-.L732
	.byte	3,2,1,5,63,9
	.half	.L734-.L733
	.byte	1,5,60,9
	.half	.L735-.L734
	.byte	1,5,63,7,9
	.half	.L736-.L735
	.byte	3,2,1,5,60,9
	.half	.L737-.L736
	.byte	1,5,36,7,9
	.half	.L738-.L737
	.byte	3,2,1,5,71,9
	.half	.L739-.L738
	.byte	1,5,45,9
	.half	.L37-.L739
	.byte	3,201,6,1,5,46,9
	.half	.L740-.L37
	.byte	3,2,1,5,43,9
	.half	.L741-.L740
	.byte	3,1,1,5,12,9
	.half	.L742-.L741
	.byte	1,5,126,7,9
	.half	.L743-.L742
	.byte	1,5,146,1,9
	.half	.L744-.L743
	.byte	1,5,179,1,9
	.half	.L745-.L744
	.byte	1,5,70,7,9
	.half	.L746-.L745
	.byte	3,3,1,5,36,3,107,1,5,45,9
	.half	.L41-.L746
	.byte	3,24,1,5,68,9
	.half	.L747-.L41
	.byte	3,2,1,5,117,9
	.half	.L748-.L747
	.byte	1,5,1,9
	.half	.L225-.L748
	.byte	3,7,0,1,1
.L694:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_MainFunction')
	.sect	'.debug_ranges'
.L224:
	.word	-1,.L148,0,.L225-.L148,0,0
.L378:
	.word	-1,.L148,0,.L377-.L148,-1,.L152,0,.L260-.L152,0,0
.L386:
	.word	-1,.L148,.L380-.L148,.L27-.L148,.L28-.L148,.L30-.L148,0,0
.L402:
	.word	-1,.L148,.L34-.L148,.L36-.L148,-1,.L150,0,.L265-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_FullComReached')
	.sect	'.debug_info'
.L226:
	.word	402
	.half	3
	.word	.L227
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L229,.L228
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_FullComReached',0,1,177,15,36,1,1
	.word	.L132,.L409,.L131
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,177,15,91
	.word	.L269,.L410
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,177,15,175,1
	.word	.L411,.L412
	.byte	5
	.word	.L132,.L409
	.byte	6
	.word	.L413,.L414,.L415
	.byte	7
	.word	.L416,.L417
	.byte	7
	.word	.L418,.L419
	.byte	8
	.word	.L420,.L414,.L415
	.byte	6
	.word	.L421,.L414,.L422
	.byte	7
	.word	.L423,.L424
	.byte	7
	.word	.L425,.L426
	.byte	9
	.word	.L427,.L414,.L422
	.byte	0,0,0,6
	.word	.L276,.L7,.L428
	.byte	7
	.word	.L278,.L429
	.byte	7
	.word	.L280,.L430
	.byte	9
	.word	.L282,.L7,.L428
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_FullComReached')
	.sect	'.debug_abbrev'
.L227:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49,16,17
	.byte	1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_FullComReached')
	.sect	'.debug_line'
.L228:
	.word	.L750-.L749
.L749:
	.half	3
	.word	.L752-.L751
.L751:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L752:
	.byte	5,36,7,0,5,2
	.word	.L132
	.byte	3,176,15,1,5,37,9
	.half	.L459-.L132
	.byte	3,10,1,5,3,9
	.half	.L753-.L459
	.byte	1,5,58,7,9
	.half	.L754-.L753
	.byte	3,2,1,5,39,9
	.half	.L755-.L754
	.byte	3,3,1,5,5,9
	.half	.L756-.L755
	.byte	1,5,29,7,9
	.half	.L414-.L756
	.byte	3,189,119,1,5,52,3,208,0,1,5,90,9
	.half	.L458-.L414
	.byte	3,176,127,1,5,50,3,209,0,1,5,90,9
	.half	.L757-.L458
	.byte	3,175,127,1,5,54,9
	.half	.L422-.L757
	.byte	3,214,0,1,5,52,1,5,56,9
	.half	.L758-.L422
	.byte	3,13,1,5,54,1,5,1,9
	.half	.L415-.L758
	.byte	3,239,7,1,5,54,7,9
	.half	.L7-.L415
	.byte	3,177,120,1,5,52,1,9
	.half	.L759-.L7
	.byte	3,1,1,5,50,1,5,56,9
	.half	.L760-.L759
	.byte	3,16,1,5,54,1,5,52,9
	.half	.L761-.L760
	.byte	3,1,1,5,1,9
	.half	.L428-.L761
	.byte	3,189,7,1,5,28,7,9
	.half	.L6-.L428
	.byte	3,125,1,5,49,9
	.half	.L460-.L6
	.byte	1,5,1,7,9
	.half	.L230-.L460
	.byte	3,3,0,1,1
.L750:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_FullComReached')
	.sect	'.debug_ranges'
.L229:
	.word	-1,.L132,0,.L230-.L132,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_FullComToSilent')
	.sect	'.debug_info'
.L231:
	.word	266
	.half	3
	.word	.L232
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L234,.L233
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_FullComToSilent',0,1,222,15,36,1,1
	.word	.L134,.L431,.L133
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,222,15,92
	.word	.L269,.L432
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,222,15,176,1
	.word	.L411,.L433
	.byte	5
	.word	.L134,.L431
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_FullComToSilent')
	.sect	'.debug_abbrev'
.L232:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_FullComToSilent')
	.sect	'.debug_line'
.L233:
	.word	.L763-.L762
.L762:
	.half	3
	.word	.L765-.L764
.L764:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L765:
	.byte	5,54,7,0,5,2
	.word	.L134
	.byte	3,226,15,1,5,36,3,123,1,5,27,9
	.half	.L463-.L134
	.byte	3,17,1,5,52,3,116,1,5,88,9
	.half	.L461-.L463
	.byte	3,12,1,5,50,3,117,1,5,88,9
	.half	.L766-.L461
	.byte	3,11,1,5,27,9
	.half	.L462-.L766
	.byte	3,1,1,5,88,9
	.half	.L767-.L462
	.byte	1,5,32,9
	.half	.L768-.L767
	.byte	3,2,1,5,56,9
	.half	.L769-.L768
	.byte	1,5,54,9
	.half	.L770-.L769
	.byte	3,1,1,5,52,1,5,56,9
	.half	.L771-.L770
	.byte	3,1,1,5,54,1,5,53,9
	.half	.L772-.L771
	.byte	3,1,1,5,1,9
	.half	.L773-.L772
	.byte	3,14,1,7,9
	.half	.L235-.L773
	.byte	0,1,1
.L763:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_FullComToSilent')
	.sect	'.debug_ranges'
.L234:
	.word	-1,.L134,0,.L235-.L134,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_NoComReached')
	.sect	'.debug_info'
.L236:
	.word	229
	.half	3
	.word	.L237
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L239,.L238
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_NoComReached',0,1,147,16,36,1,1
	.word	.L136,.L434,.L135
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,147,16,119
	.word	.L411,.L435
	.byte	5
	.word	.L136,.L434
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_NoComReached')
	.sect	'.debug_abbrev'
.L237:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_NoComReached')
	.sect	'.debug_line'
.L238:
	.word	.L775-.L774
.L774:
	.half	3
	.word	.L777-.L776
.L776:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L777:
	.byte	5,70,7,0,5,2
	.word	.L136
	.byte	3,149,16,1,5,68,1,5,32,9
	.half	.L778-.L136
	.byte	3,1,1,5,56,9
	.half	.L779-.L778
	.byte	1,5,54,9
	.half	.L780-.L779
	.byte	3,1,1,5,52,1,5,54,9
	.half	.L781-.L780
	.byte	3,1,1,5,50,9
	.half	.L782-.L781
	.byte	3,1,1,5,66,9
	.half	.L783-.L782
	.byte	3,1,1,5,64,1,5,1,9
	.half	.L784-.L783
	.byte	3,4,1,7,9
	.half	.L240-.L784
	.byte	0,1,1
.L775:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_NoComReached')
	.sect	'.debug_ranges'
.L239:
	.word	-1,.L136,0,.L240-.L136,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_NetworkStatemachine')
	.sect	'.debug_info'
.L241:
	.word	409
	.half	3
	.word	.L242
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L244,.L243
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_NetworkStatemachine',0,1,186,16,36,1,1
	.word	.L138,.L436,.L137
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,186,16,96
	.word	.L269,.L437
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,186,16,180,1
	.word	.L411,.L438
	.byte	5
	.word	.L138,.L436
	.byte	6
	.byte	'CanSM_RetValTriggerFunc',0,1,190,16,9
	.word	.L269,.L439
	.byte	6
	.byte	'CanSM_OldState',0,1,191,16,9
	.word	.L269,.L440
	.byte	7
	.word	.L441,.L442,.L443
	.byte	8
	.word	.L444,.L445
	.byte	8
	.word	.L446,.L447
	.byte	9
	.word	.L448,.L449
	.byte	0,7
	.word	.L441,.L13,.L450
	.byte	8
	.word	.L444,.L445
	.byte	8
	.word	.L446,.L447
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_NetworkStatemachine')
	.sect	'.debug_abbrev'
.L242:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_NetworkStatemachine')
	.sect	'.debug_line'
.L243:
	.word	.L786-.L785
.L785:
	.half	3
	.word	.L788-.L787
.L787:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L788:
	.byte	5,35,7,0,5,2
	.word	.L138
	.byte	3,189,16,1,5,36,3,124,1,5,33,9
	.half	.L464-.L138
	.byte	3,4,1,5,36,3,124,1,5,54,9
	.half	.L442-.L464
	.byte	3,255,120,1,5,62,9
	.half	.L443-.L442
	.byte	3,157,8,1,5,60,9
	.half	.L789-.L443
	.byte	3,20,1,9
	.half	.L790-.L789
	.byte	3,30,1,5,62,9
	.half	.L791-.L790
	.byte	3,10,1,5,51,9
	.half	.L10-.L791
	.byte	3,180,126,1,5,33,9
	.half	.L468-.L10
	.byte	3,120,1,5,56,3,10,1,5,43,9
	.half	.L467-.L468
	.byte	3,2,1,5,12,9
	.half	.L792-.L467
	.byte	3,54,1,7,9
	.half	.L793-.L792
	.byte	3,104,1,7,9
	.half	.L794-.L793
	.byte	3,210,0,1,9
	.half	.L795-.L794
	.byte	3,115,1,9
	.half	.L796-.L795
	.byte	3,92,1,5,121,9
	.half	.L12-.L796
	.byte	3,98,1,5,33,9
	.half	.L465-.L12
	.byte	1,5,43,3,1,1,5,9,9
	.half	.L469-.L465
	.byte	1,5,35,7,9
	.half	.L797-.L469
	.byte	3,2,1,5,26,3,1,1,5,56,9
	.half	.L17-.L797
	.byte	3,2,1,5,9,9
	.half	.L798-.L17
	.byte	3,2,1,5,121,9
	.half	.L15-.L798
	.byte	3,29,1,5,9,9
	.half	.L799-.L15
	.byte	3,3,1,5,52,9
	.half	.L14-.L799
	.byte	3,35,1,5,9,9
	.half	.L472-.L14
	.byte	3,2,1,5,52,9
	.half	.L13-.L472
	.byte	3,129,120,1,5,53,9
	.half	.L800-.L13
	.byte	3,1,1,5,60,9
	.half	.L450-.L800
	.byte	3,156,8,1,5,55,9
	.half	.L20-.L450
	.byte	3,1,1,5,9,9
	.half	.L801-.L20
	.byte	3,2,1,5,58,9
	.half	.L16-.L801
	.byte	3,17,1,5,48,9
	.half	.L802-.L16
	.byte	3,1,1,5,43,9
	.half	.L803-.L802
	.byte	3,2,1,5,9,9
	.half	.L804-.L803
	.byte	1,5,103,7,9
	.half	.L805-.L804
	.byte	3,2,1,5,61,9
	.half	.L806-.L805
	.byte	3,1,1,5,58,9
	.half	.L807-.L806
	.byte	3,1,1,5,47,9
	.half	.L22-.L807
	.byte	3,3,1,5,121,9
	.half	.L11-.L22
	.byte	3,12,1,5,59,9
	.half	.L470-.L11
	.byte	3,1,1,5,33,9
	.half	.L19-.L470
	.byte	3,127,1,5,5,9
	.half	.L18-.L19
	.byte	3,6,1,5,58,7,9
	.half	.L808-.L18
	.byte	3,2,1,5,36,9
	.half	.L809-.L808
	.byte	3,1,1,5,71,9
	.half	.L810-.L809
	.byte	1,5,39,9
	.half	.L23-.L810
	.byte	3,9,1,5,5,9
	.half	.L811-.L23
	.byte	1,5,31,7,9
	.half	.L812-.L811
	.byte	3,2,1,5,72,3,1,1,5,58,9
	.half	.L813-.L812
	.byte	3,1,1,5,53,9
	.half	.L814-.L813
	.byte	3,1,1,5,59,9
	.half	.L24-.L814
	.byte	3,3,1,5,80,9
	.half	.L815-.L24
	.byte	1,5,1,9
	.half	.L816-.L815
	.byte	3,6,1,7,9
	.half	.L245-.L816
	.byte	0,1,1
.L786:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_NetworkStatemachine')
	.sect	'.debug_ranges'
.L244:
	.word	-1,.L138,0,.L245-.L138,0,0
.L449:
	.word	-1,.L138,.L442-.L138,.L443-.L138,.L13-.L138,.L450-.L138,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_CheckModeIndication')
	.sect	'.debug_info'
.L246:
	.word	303
	.half	3
	.word	.L247
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L249,.L248
	.byte	2
	.word	.L167
	.byte	3
	.byte	'CanSM_CheckModeIndication',0,1,159,7,36,1,1
	.word	.L130,.L451,.L129
	.byte	4
	.byte	'CanSM_CanNetworkIdx',0,1,159,7,96
	.word	.L269,.L452
	.byte	4
	.byte	'CanSM_CurrentChannelVarPtr',0,1,159,7,180,1
	.word	.L411,.L453
	.byte	4
	.byte	'CanSM_ModeIndiResp',0,1,159,7,214,1
	.word	.L269,.L454
	.byte	5
	.word	.L130,.L451
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_CheckModeIndication')
	.sect	'.debug_abbrev'
.L247:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanSM_CheckModeIndication')
	.sect	'.debug_line'
.L248:
	.word	.L818-.L817
.L817:
	.half	3
	.word	.L820-.L819
.L819:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L820:
	.byte	5,36,7,0,5,2
	.word	.L130
	.byte	3,158,7,1,5,37,9
	.half	.L456-.L130
	.byte	3,4,1,5,3,9
	.half	.L821-.L456
	.byte	1,5,69,7,9
	.half	.L822-.L821
	.byte	3,2,1,5,67,1,5,97,9
	.half	.L823-.L822
	.byte	3,2,1,5,39,9
	.half	.L455-.L823
	.byte	1,5,5,9
	.half	.L824-.L455
	.byte	1,5,62,7,9
	.half	.L825-.L824
	.byte	3,2,1,5,32,9
	.half	.L826-.L825
	.byte	3,1,1,5,123,1,5,42,9
	.half	.L3-.L826
	.byte	3,3,1,5,98,9
	.half	.L827-.L3
	.byte	1,5,11,9
	.half	.L828-.L827
	.byte	1,5,152,1,7,9
	.half	.L829-.L828
	.byte	1,5,184,1,9
	.half	.L830-.L829
	.byte	1,5,70,7,9
	.half	.L4-.L830
	.byte	3,2,1,5,68,1,5,91,9
	.half	.L831-.L4
	.byte	3,1,1,5,60,9
	.half	.L832-.L831
	.byte	1,5,129,1,9
	.half	.L833-.L832
	.byte	3,1,1,5,1,9
	.half	.L2-.L833
	.byte	3,8,1,7,9
	.half	.L250-.L2
	.byte	0,1,1
.L818:
	.sdecl	'.debug_ranges',debug,cluster('CanSM_CheckModeIndication')
	.sect	'.debug_ranges'
.L249:
	.word	-1,.L130,0,.L250-.L130,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_1')
	.sect	'.debug_info'
.L251:
	.word	170
	.half	3
	.word	.L252
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L254,.L253
	.byte	2
	.word	.L167
	.byte	3
	.byte	'.cocofun_1',0,1,210,18,24,1
	.word	.L144,.L255,.L143
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_1')
	.sect	'.debug_abbrev'
.L252:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_1')
	.sect	'.debug_line'
.L253:
	.word	.L835-.L834
.L834:
	.half	3
	.word	.L837-.L836
.L836:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L837:
	.byte	5,95,7,0,5,2
	.word	.L144
	.byte	3,213,8,1,9
	.half	.L255-.L144
	.byte	0,1,1,5,36,0,5,2
	.word	.L144
	.byte	3,205,19,1,5,95,9
	.half	.L838-.L144
	.byte	3,136,117,1,7,9
	.half	.L255-.L838
	.byte	0,1,1,5,99,0,5,2
	.word	.L144
	.byte	3,156,20,1,5,95,9
	.half	.L838-.L144
	.byte	3,185,116,1,7,9
	.half	.L255-.L838
	.byte	0,1,1,5,95,0,5,2
	.word	.L144
	.byte	3,204,14,1,9
	.half	.L838-.L144
	.byte	3,137,122,1,7,9
	.half	.L255-.L838
	.byte	0,1,1,5,99,0,5,2
	.word	.L144
	.byte	3,227,24,1,5,95,9
	.half	.L838-.L144
	.byte	3,242,111,1,7,9
	.half	.L255-.L838
	.byte	0,1,1,5,99,0,5,2
	.word	.L144
	.byte	3,237,29,1,5,95,9
	.half	.L838-.L144
	.byte	3,232,106,1,7,9
	.half	.L255-.L838
	.byte	0,1,1,5,101,0,5,2
	.word	.L144
	.byte	3,228,31,1,5,95,9
	.half	.L838-.L144
	.byte	3,241,104,1,7,9
	.half	.L255-.L838
	.byte	0,1,1
.L835:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_1')
	.sect	'.debug_ranges'
.L254:
	.word	-1,.L144,0,.L255-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L256:
	.word	170
	.half	3
	.word	.L257
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L259,.L258
	.byte	2
	.word	.L167
	.byte	3
	.byte	'.cocofun_2',0,1,194,19,24,1
	.word	.L152,.L260,.L151
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L257:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L258:
	.word	.L840-.L839
.L839:
	.half	3
	.word	.L842-.L841
.L841:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L842:
	.byte	5,8,7,0,5,2
	.word	.L152
	.byte	3,198,19,1,9
	.half	.L260-.L152
	.byte	0,1,1,5,8,0,5,2
	.word	.L152
	.byte	3,226,20,1,9
	.half	.L843-.L152
	.byte	3,228,126,1,7,9
	.half	.L260-.L843
	.byte	0,1,1,5,8,0,5,2
	.word	.L152
	.byte	3,225,21,1,9
	.half	.L843-.L152
	.byte	3,229,125,1,7,9
	.half	.L260-.L843
	.byte	0,1,1,5,8,0,5,2
	.word	.L152
	.byte	3,206,24,1,9
	.half	.L843-.L152
	.byte	3,248,122,1,7,9
	.half	.L260-.L843
	.byte	0,1,1,5,8,0,5,2
	.word	.L152
	.byte	3,216,29,1,9
	.half	.L843-.L152
	.byte	3,238,117,1,7,9
	.half	.L260-.L843
	.byte	0,1,1,5,8,0,5,2
	.word	.L152
	.byte	3,202,31,1,9
	.half	.L843-.L152
	.byte	3,252,115,1,7,9
	.half	.L260-.L843
	.byte	0,1,1
.L840:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L259:
	.word	-1,.L152,0,.L260-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L261:
	.word	170
	.half	3
	.word	.L262
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L264,.L263
	.byte	2
	.word	.L167
	.byte	3
	.byte	'.cocofun_3',0,1,194,19,24,1
	.word	.L150,.L265,.L149
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L262:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L263:
	.word	.L845-.L844
.L844:
	.half	3
	.word	.L847-.L846
.L846:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0,0,0,0,0
.L847:
	.byte	5,28,7,0,5,2
	.word	.L150
	.byte	3,233,12,1,5,45,9
	.half	.L484-.L150
	.byte	1,9
	.half	.L265-.L484
	.byte	0,1,1,5,28,0,5,2
	.word	.L150
	.byte	3,190,20,1,5,45,9
	.half	.L484-.L150
	.byte	1,3,171,120,1,7,9
	.half	.L265-.L484
	.byte	0,1,1,5,28,0,5,2
	.word	.L150
	.byte	3,135,21,1,5,45,9
	.half	.L484-.L150
	.byte	1,3,226,119,1,7,9
	.half	.L265-.L484
	.byte	0,1,1,5,28,0,5,2
	.word	.L150
	.byte	3,129,22,1,5,45,9
	.half	.L484-.L150
	.byte	1,3,232,118,1,7,9
	.half	.L265-.L484
	.byte	0,1,1,5,28,0,5,2
	.word	.L150
	.byte	3,138,25,1,5,45,9
	.half	.L484-.L150
	.byte	1,3,223,115,1,7,9
	.half	.L265-.L484
	.byte	0,1,1,5,28,0,5,2
	.word	.L150
	.byte	3,143,30,1,5,45,9
	.half	.L484-.L150
	.byte	1,3,218,110,1,7,9
	.half	.L265-.L484
	.byte	0,1,1,5,28,0,5,2
	.word	.L150
	.byte	3,136,32,1,5,45,9
	.half	.L484-.L150
	.byte	1,3,225,108,1,7,9
	.half	.L265-.L484
	.byte	0,1,1,5,28,0,5,2
	.word	.L150
	.byte	3,249,32,1,5,45,9
	.half	.L484-.L150
	.byte	1,3,240,107,1,7,9
	.half	.L265-.L484
	.byte	0,1,1
.L845:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L264:
	.word	-1,.L150,0,.L265-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('CanSM_IsInitialized')
	.sect	'.debug_info'
.L266:
	.word	168
	.half	3
	.word	.L267
	.byte	4,1
	.byte	'..\\component\\CanSM\\Implementation\\CanSM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L167
	.byte	3
	.byte	'CanSM_IsInitialized',0,1,244,2,47
	.word	.L269
	.byte	5,3
	.word	CanSM_IsInitialized
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanSM_IsInitialized')
	.sect	'.debug_abbrev'
.L267:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_1')
	.sect	'.debug_loc'
.L143:
	.word	-1,.L144,0,.L255-.L144
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L152,0,.L260-.L152
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L149:
	.word	-1,.L150,0,.L265-.L150
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_CheckModeIndication')
	.sect	'.debug_loc'
.L452:
	.word	-1,.L130,0,.L3-.L130
	.half	1
	.byte	84
	.word	0,0
.L129:
	.word	-1,.L130,0,.L451-.L130
	.half	2
	.byte	138,0
	.word	0,0
.L453:
	.word	-1,.L130,0,.L3-.L130
	.half	1
	.byte	100
	.word	.L456-.L130,.L451-.L130
	.half	1
	.byte	111
	.word	.L457-.L130,.L2-.L130
	.half	1
	.byte	100
	.word	0,0
.L454:
	.word	-1,.L130,0,.L455-.L130
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_ControllerBusOff')
	.sect	'.debug_loc'
.L279:
	.word	0,0
.L274:
	.word	0,0
.L157:
	.word	-1,.L158,0,.L268-.L158
	.half	2
	.byte	138,0
	.word	0,0
.L270:
	.word	-1,.L158,.L482-.L158,.L260-.L158
	.half	1
	.byte	84
	.word	0,.L73-.L158
	.half	1
	.byte	84
	.word	.L144-.L158,.L255-.L158
	.half	1
	.byte	84
	.word	.L486-.L158,.L487-.L158
	.half	1
	.byte	84
	.word	0,0
.L281:
	.word	0,0
.L271:
	.word	-1,.L158,.L482-.L158,.L260-.L158
	.half	1
	.byte	88
	.word	0,.L73-.L158
	.half	1
	.byte	88
	.word	.L144-.L158,.L255-.L158
	.half	1
	.byte	88
	.word	.L150-.L158,.L265-.L158
	.half	1
	.byte	88
	.word	.L486-.L158,.L268-.L158
	.half	1
	.byte	88
	.word	.L488-.L158,.L79-.L158
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_ControllerModeIndication')
	.sect	'.debug_loc'
.L309:
	.word	0,0
.L292:
	.word	0,0
.L302:
	.word	0,0
.L284:
	.word	-1,.L160,.L482-.L160,.L260-.L160
	.half	1
	.byte	84
	.word	0,.L489-.L160
	.half	1
	.byte	84
	.word	0,0
.L286:
	.word	-1,.L160,.L482-.L160,.L260-.L160
	.half	1
	.byte	88
	.word	.L482-.L160,.L260-.L160
	.half	1
	.byte	85
	.word	0,.L489-.L160
	.half	1
	.byte	85
	.word	.L144-.L160,.L255-.L160
	.half	1
	.byte	88
	.word	.L150-.L160,.L265-.L160
	.half	1
	.byte	88
	.word	.L490-.L160,.L283-.L160
	.half	1
	.byte	88
	.word	0,0
.L159:
	.word	-1,.L160,0,.L283-.L160
	.half	2
	.byte	138,0
	.word	0,0
.L311:
	.word	0,0
.L294:
	.word	0,0
.L304:
	.word	0,0
.L287:
	.word	-1,.L160,.L482-.L160,.L260-.L160
	.half	1
	.byte	89
	.word	.L144-.L160,.L255-.L160
	.half	1
	.byte	89
	.word	.L150-.L160,.L265-.L160
	.half	1
	.byte	89
	.word	.L490-.L160,.L283-.L160
	.half	1
	.byte	89
	.word	.L491-.L160,.L101-.L160
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_FullComReached')
	.sect	'.debug_loc'
.L426:
	.word	0,0
.L424:
	.word	0,0
.L417:
	.word	0,0
.L429:
	.word	0,0
.L410:
	.word	-1,.L132,0,.L458-.L132
	.half	1
	.byte	84
	.word	.L7-.L132,.L460-.L132
	.half	1
	.byte	84
	.word	0,0
.L419:
	.word	0,0
.L430:
	.word	0,0
.L412:
	.word	-1,.L132,0,.L422-.L132
	.half	1
	.byte	100
	.word	.L459-.L132,.L409-.L132
	.half	1
	.byte	111
	.word	.L7-.L132,.L409-.L132
	.half	1
	.byte	100
	.word	0,0
.L131:
	.word	-1,.L132,0,.L409-.L132
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_FullComToSilent')
	.sect	'.debug_loc'
.L432:
	.word	-1,.L134,0,.L461-.L134
	.half	1
	.byte	84
	.word	0,0
.L433:
	.word	-1,.L134,0,.L462-.L134
	.half	1
	.byte	100
	.word	.L463-.L134,.L431-.L134
	.half	1
	.byte	111
	.word	0,0
.L133:
	.word	-1,.L134,0,.L431-.L134
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_GetCurrentComMode')
	.sect	'.debug_loc'
.L330:
	.word	-1,.L156,.L482-.L156,.L260-.L156
	.half	1
	.byte	100
	.word	.L150-.L156,.L265-.L156
	.half	1
	.byte	100
	.word	0,.L69-.L156
	.half	1
	.byte	100
	.word	0,0
.L331:
	.word	-1,.L156,.L482-.L156,.L260-.L156
	.half	1
	.byte	87
	.word	.L150-.L156,.L265-.L156
	.half	1
	.byte	87
	.word	.L485-.L156,.L69-.L156
	.half	1
	.byte	87
	.word	0,0
.L155:
	.word	-1,.L156,0,.L327-.L156
	.half	2
	.byte	138,0
	.word	0,0
.L328:
	.word	-1,.L156,.L482-.L156,.L260-.L156
	.half	1
	.byte	84
	.word	0,.L483-.L156
	.half	1
	.byte	84
	.word	.L150-.L156,.L484-.L156
	.half	1
	.byte	84
	.word	0,0
.L332:
	.word	-1,.L156,.L482-.L156,.L260-.L156
	.half	1
	.byte	88
	.word	.L150-.L156,.L265-.L156
	.half	1
	.byte	88
	.word	.L485-.L156,.L327-.L156
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_Init')
	.sect	'.debug_loc'
.L357:
	.word	0,0
.L145:
	.word	-1,.L146,0,.L350-.L146
	.half	2
	.byte	138,0
	.word	0,0
.L352:
	.word	-1,.L146,0,.L476-.L146
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_InitMemory')
	.sect	'.debug_loc'
.L139:
	.word	-1,.L140,0,.L359-.L140
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_MainFunction')
	.sect	'.debug_loc'
.L388:
	.word	0,0
.L382:
	.word	0,0
.L392:
	.word	0,0
.L398:
	.word	0,0
.L389:
	.word	0,0
.L384:
	.word	0,0
.L394:
	.word	0,0
.L400:
	.word	0,0
.L407:
	.word	0,0
.L147:
	.word	-1,.L148,0,.L377-.L148
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_NetworkStatemachine')
	.sect	'.debug_loc'
.L445:
	.word	0,0
.L437:
	.word	-1,.L138,0,.L10-.L138
	.half	1
	.byte	84
	.word	0,0
.L447:
	.word	0,0
.L438:
	.word	-1,.L138,0,.L10-.L138
	.half	1
	.byte	100
	.word	.L464-.L138,.L436-.L138
	.half	1
	.byte	111
	.word	.L471-.L138,.L472-.L138
	.half	1
	.byte	100
	.word	0,0
.L137:
	.word	-1,.L138,0,.L442-.L138
	.half	2
	.byte	138,0
	.word	.L442-.L138,.L436-.L138
	.half	2
	.byte	138,8
	.word	.L436-.L138,.L436-.L138
	.half	2
	.byte	138,0
	.word	0,0
.L440:
	.word	-1,.L138,.L466-.L138,.L467-.L138
	.half	1
	.byte	95
	.word	.L468-.L138,.L436-.L138
	.half	2
	.byte	145,120
	.word	.L469-.L138,.L15-.L138
	.half	1
	.byte	95
	.word	.L473-.L138,.L16-.L138
	.half	1
	.byte	95
	.word	.L474-.L138,.L24-.L138
	.half	1
	.byte	95
	.word	.L475-.L138,.L436-.L138
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L439:
	.word	-1,.L138,.L442-.L138,.L465-.L138
	.half	1
	.byte	89
	.word	.L465-.L138,.L17-.L138
	.half	1
	.byte	82
	.word	.L469-.L138,.L470-.L138
	.half	1
	.byte	89
	.word	.L470-.L138,.L18-.L138
	.half	1
	.byte	82
	.word	.L18-.L138,.L436-.L138
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_NoComReached')
	.sect	'.debug_loc'
.L435:
	.word	-1,.L136,0,.L434-.L136
	.half	1
	.byte	100
	.word	0,0
.L135:
	.word	-1,.L136,0,.L434-.L136
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_PreInit')
	.sect	'.debug_loc'
.L346:
	.word	0,0
.L340:
	.word	0,0
.L348:
	.word	0,0
.L141:
	.word	-1,.L142,0,.L333-.L142
	.half	2
	.byte	138,0
	.word	0,0
.L335:
	.word	-1,.L142,.L144-.L142,.L255-.L142
	.half	1
	.byte	100
	.word	0,.L333-.L142
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_RequestComMode')
	.sect	'.debug_loc'
.L323:
	.word	0,0
.L325:
	.word	0,0
.L316:
	.word	-1,.L154,.L478-.L154,.L50-.L154
	.half	1
	.byte	89
	.word	.L144-.L154,.L255-.L154
	.half	1
	.byte	89
	.word	.L150-.L154,.L265-.L154
	.half	1
	.byte	89
	.word	.L480-.L154,.L313-.L154
	.half	1
	.byte	89
	.word	0,0
.L314:
	.word	-1,.L154,0,.L50-.L154
	.half	1
	.byte	84
	.word	.L144-.L154,.L255-.L154
	.half	1
	.byte	84
	.word	.L480-.L154,.L481-.L154
	.half	1
	.byte	84
	.word	0,0
.L153:
	.word	-1,.L154,0,.L313-.L154
	.half	2
	.byte	138,0
	.word	0,0
.L321:
	.word	0,0
.L315:
	.word	-1,.L154,0,.L50-.L154
	.half	1
	.byte	85
	.word	.L477-.L154,.L50-.L154
	.half	1
	.byte	88
	.word	.L144-.L154,.L255-.L154
	.half	1
	.byte	88
	.word	.L144-.L154,.L255-.L154
	.half	1
	.byte	85
	.word	.L480-.L154,.L481-.L154
	.half	1
	.byte	85
	.word	.L150-.L154,.L265-.L154
	.half	1
	.byte	88
	.word	.L480-.L154,.L313-.L154
	.half	1
	.byte	88
	.word	0,0
.L317:
	.word	-1,.L154,.L479-.L154,.L50-.L154
	.half	1
	.byte	90
	.word	.L144-.L154,.L255-.L154
	.half	1
	.byte	90
	.word	.L150-.L154,.L265-.L154
	.half	1
	.byte	90
	.word	.L480-.L154,.L313-.L154
	.half	1
	.byte	90
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_StartWakeupSources')
	.sect	'.debug_loc'
.L363:
	.word	-1,.L164,.L482-.L164,.L260-.L164
	.half	1
	.byte	89
	.word	.L144-.L164,.L255-.L164
	.half	1
	.byte	89
	.word	.L150-.L164,.L265-.L164
	.half	1
	.byte	89
	.word	.L495-.L164,.L360-.L164
	.half	1
	.byte	89
	.word	0,0
.L361:
	.word	-1,.L164,.L482-.L164,.L260-.L164
	.half	1
	.byte	84
	.word	0,.L494-.L164
	.half	1
	.byte	84
	.word	0,0
.L163:
	.word	-1,.L164,0,.L360-.L164
	.half	2
	.byte	138,0
	.word	0,0
.L362:
	.word	-1,.L164,.L482-.L164,.L260-.L164
	.half	1
	.byte	88
	.word	.L144-.L164,.L255-.L164
	.half	1
	.byte	88
	.word	.L150-.L164,.L265-.L164
	.half	1
	.byte	88
	.word	.L495-.L164,.L360-.L164
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_StopWakeupSources')
	.sect	'.debug_loc'
.L369:
	.word	-1,.L166,.L150-.L166,.L265-.L166
	.half	1
	.byte	90
	.word	.L497-.L166,.L364-.L166
	.half	1
	.byte	90
	.word	0,0
.L365:
	.word	-1,.L166,0,.L496-.L166
	.half	1
	.byte	84
	.word	0,0
.L368:
	.word	-1,.L166,.L150-.L166,.L265-.L166
	.half	1
	.byte	88
	.word	.L498-.L166,.L364-.L166
	.half	1
	.byte	88
	.word	0,0
.L165:
	.word	-1,.L166,0,.L364-.L166
	.half	2
	.byte	138,0
	.word	0,0
.L367:
	.word	-1,.L166,0,.L496-.L166
	.half	1
	.byte	85
	.word	.L150-.L166,.L265-.L166
	.half	1
	.byte	89
	.word	.L499-.L166,.L364-.L166
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanSM_TxTimeoutException')
	.sect	'.debug_loc'
.L375:
	.word	0,0
.L376:
	.word	0,0
.L372:
	.word	-1,.L162,.L482-.L162,.L260-.L162
	.half	1
	.byte	87
	.word	0,.L104-.L162
	.half	1
	.byte	87
	.word	.L144-.L162,.L255-.L162
	.half	1
	.byte	87
	.word	.L150-.L162,.L265-.L162
	.half	1
	.byte	87
	.word	.L492-.L162,.L370-.L162
	.half	1
	.byte	87
	.word	0,0
.L371:
	.word	-1,.L162,.L482-.L162,.L260-.L162
	.half	1
	.byte	84
	.word	0,.L104-.L162
	.half	1
	.byte	84
	.word	.L144-.L162,.L255-.L162
	.half	1
	.byte	84
	.word	.L492-.L162,.L493-.L162
	.half	1
	.byte	84
	.word	.L150-.L162,.L484-.L162
	.half	1
	.byte	84
	.word	.L107-.L162,.L370-.L162
	.half	1
	.byte	84
	.word	0,0
.L161:
	.word	-1,.L162,0,.L370-.L162
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L848:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('CanSM_CheckModeIndication')
	.sect	'.debug_frame'
	.word	12
	.word	.L848,.L130,.L451-.L130
	.sdecl	'.debug_frame',debug,cluster('CanSM_FullComReached')
	.sect	'.debug_frame'
	.word	12
	.word	.L848,.L132,.L409-.L132
	.sdecl	'.debug_frame',debug,cluster('CanSM_FullComToSilent')
	.sect	'.debug_frame'
	.word	12
	.word	.L848,.L134,.L431-.L134
	.sdecl	'.debug_frame',debug,cluster('CanSM_NoComReached')
	.sect	'.debug_frame'
	.word	24
	.word	.L848,.L136,.L434-.L136
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('CanSM_NetworkStatemachine')
	.sect	'.debug_frame'
	.word	36
	.word	.L848,.L138,.L436-.L138
	.byte	4
	.word	(.L442-.L138)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L436-.L442)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanSM_InitMemory')
	.sect	'.debug_frame'
	.word	24
	.word	.L848,.L140,.L359-.L140
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CanSM_PreInit')
	.sect	'.debug_frame'
	.word	24
	.word	.L848,.L142,.L333-.L142
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('CanSM_Init')
	.sect	'.debug_frame'
	.word	12
	.word	.L848,.L146,.L350-.L146
	.sdecl	'.debug_frame',debug,cluster('CanSM_MainFunction')
	.sect	'.debug_frame'
	.word	12
	.word	.L848,.L148,.L377-.L148
	.sdecl	'.debug_frame',debug,cluster('CanSM_RequestComMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L848,.L154,.L313-.L154
	.sdecl	'.debug_frame',debug,cluster('CanSM_GetCurrentComMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L848,.L156,.L327-.L156
	.sdecl	'.debug_frame',debug,cluster('CanSM_ControllerBusOff')
	.sect	'.debug_frame'
	.word	12
	.word	.L848,.L158,.L268-.L158
	.sdecl	'.debug_frame',debug,cluster('CanSM_ControllerModeIndication')
	.sect	'.debug_frame'
	.word	12
	.word	.L848,.L160,.L283-.L160
	.sdecl	'.debug_frame',debug,cluster('CanSM_TxTimeoutException')
	.sect	'.debug_frame'
	.word	12
	.word	.L848,.L162,.L370-.L162
	.sdecl	'.debug_frame',debug,cluster('CanSM_StartWakeupSources')
	.sect	'.debug_frame'
	.word	12
	.word	.L848,.L164,.L360-.L164
	.sdecl	'.debug_frame',debug,cluster('CanSM_StopWakeupSources')
	.sect	'.debug_frame'
	.word	12
	.word	.L848,.L166,.L364-.L166
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L849:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_1')
	.sect	'.debug_frame'
	.word	24
	.word	.L849,.L144,.L255-.L144
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L849,.L150,.L265-.L150
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L849,.L152,.L260-.L152
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\component\CanSM\Implementation\CanSM.c	  4233  
; ..\component\CanSM\Implementation\CanSM.c	  4234  
; ..\component\CanSM\Implementation\CanSM.c	  4235  
; ..\component\CanSM\Implementation\CanSM.c	  4236  #define CANSM_STOP_SEC_CODE
; ..\component\CanSM\Implementation\CanSM.c	  4237  #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanSM\Implementation\CanSM.c	  4238  
; ..\component\CanSM\Implementation\CanSM.c	  4239  
; ..\component\CanSM\Implementation\CanSM.c	  4240  /* Dummy statement because of tool bug */ /* PRQA S 1533 */ /* MD_CANSM_Rule8.9 */
; ..\component\CanSM\Implementation\CanSM.c	  4241  /* Module specific MISRA deviations:
; ..\component\CanSM\Implementation\CanSM.c	  4242   * MD_CANSM_Rule2.1
; ..\component\CanSM\Implementation\CanSM.c	  4243   *   Reason:     Incorrect message from QAC, this code is reachable.
; ..\component\CanSM\Implementation\CanSM.c	  4244   *   Risk:       none
; ..\component\CanSM\Implementation\CanSM.c	  4245   *   Prevention: Covered by runtime code coverage.
; ..\component\CanSM\Implementation\CanSM.c	  4246   * MD_CANSM_Rule2.2_2982
; ..\component\CanSM\Implementation\CanSM.c	  4247   *   Reason:     Incorrect message from QAC, This assignment is not redundant. The value of this object is used before being modified.
; ..\component\CanSM\Implementation\CanSM.c	  4248   *   Risk:       none
; ..\component\CanSM\Implementation\CanSM.c	  4249   *   Prevention: Covered by runtime code coverage.
; ..\component\CanSM\Implementation\CanSM.c	  4250   * MD_CANSM_Rule2.2_2996
; ..\component\CanSM\Implementation\CanSM.c	  4251   *   Reason:     Incorrect message from QAC, the result of this logical operation is not always 'false
; ..\component\CanSM\Implementation\CanSM.c	  4252   *   Risk:       none
; ..\component\CanSM\Implementation\CanSM.c	  4253   *   Prevention: Covered by runtime code coverage.
; ..\component\CanSM\Implementation\CanSM.c	  4254   * MD_CANSM_Rule8.9
; ..\component\CanSM\Implementation\CanSM.c	  4255   *   Reason:     The actual function pointer value is generated. So the declaration has to stay in the gererated c file.
; ..\component\CanSM\Implementation\CanSM.c	  4256   *   Risk:       none
; ..\component\CanSM\Implementation\CanSM.c	  4257   *   Prevention: Covered by code review.
; ..\component\CanSM\Implementation\CanSM.c	  4258   * MD_CANSM_Rule8.11
; ..\component\CanSM\Implementation\CanSM.c	  4259   *   Reason:     Avoid libraries with arrays which contains only one single element caused by compiler optimization.
; ..\component\CanSM\Implementation\CanSM.c	  4260   *   Risk:       none
; ..\component\CanSM\Implementation\CanSM.c	  4261   *   Prevention: Covered by code review.
; ..\component\CanSM\Implementation\CanSM.c	  4262   * MD_CANSM_Rule14.3
; ..\component\CanSM\Implementation\CanSM.c	  4263   *   Reason:     Incorrect message from QAC, the result of this logical operation is not always 'false
; ..\component\CanSM\Implementation\CanSM.c	  4264   *   Risk:       none
; ..\component\CanSM\Implementation\CanSM.c	  4265   *   Prevention: Covered by runtime code coverage.
; ..\component\CanSM\Implementation\CanSM.c	  4266   * MD_CANSM_Rule16.3
; ..\component\CanSM\Implementation\CanSM.c	  4267   *   Reason:     Intentionally switch case with out break statement to proceed the next step immediately
; ..\component\CanSM\Implementation\CanSM.c	  4268   *   Risk:       none
; ..\component\CanSM\Implementation\CanSM.c	  4269   *   Prevention: Covered by code review.
; ..\component\CanSM\Implementation\CanSM.c	  4270   */
; ..\component\CanSM\Implementation\CanSM.c	  4271  
; ..\component\CanSM\Implementation\CanSM.c	  4272  
; ..\component\CanSM\Implementation\CanSM.c	  4273  /* SBSW_JUSTIFICATION_BEGIN
; ..\component\CanSM\Implementation\CanSM.c	  4274  
; ..\component\CanSM\Implementation\CanSM.c	  4275  
; ..\component\CanSM\Implementation\CanSM.c	  4276  
; ..\component\CanSM\Implementation\CanSM.c	  4277     \ID SBSW_CANSM_GETCURRENTCOMMODE_POINTERWRITEACCESS
; ..\component\CanSM\Implementation\CanSM.c	  4278     \DESCRIPTION The function writes to the object referenced by the pointer parameter.
; ..\component\CanSM\Implementation\CanSM.c	  4279     \COUNTERMEASURE \N The caller ensures that the pointer passed to the parameter is valid. [SMI-16]
; ..\component\CanSM\Implementation\CanSM.c	  4280  
; ..\component\CanSM\Implementation\CanSM.c	  4281     \ID SBSW_CANSM_GETVERSIONINFO_POINTERWRITEACCESS
; ..\component\CanSM\Implementation\CanSM.c	  4282     \DESCRIPTION The function writes to the object referenced by the pointer parameter.
; ..\component\CanSM\Implementation\CanSM.c	  4283     \COUNTERMEASURE \N The caller ensures that the pointer passed to the parameter is valid. [SMI-16]
; ..\component\CanSM\Implementation\CanSM.c	  4284  
; ..\component\CanSM\Implementation\CanSM.c	  4285     \ID SBSW_CANSM_COMMMODEINDICATION_CALL
; ..\component\CanSM\Implementation\CanSM.c	  4286     \DESCRIPTION   Call to ComM_BusSM_ModeIndication function with network handle and pointer to the communication mode variable.
; ..\component\CanSM\Implementation\CanSM.c	  4287     \COUNTERMEASURE \N The pointer is valid because the calculation is secured by SBSW_CANSM_CHANNEL_STRUCT_ACCESS
; ..\component\CanSM\Implementation\CanSM.c	  4288  
; ..\component\CanSM\Implementation\CanSM.c	  4289     \ID SBSW_CANSM_GETBUSOFFDELAY_POINTERWRITEACCESS
; ..\component\CanSM\Implementation\CanSM.c	  4290     \DESCRIPTION The function writes to the object referenced by parameter OnlineDelayCyclesPtr.
; ..\component\CanSM\Implementation\CanSM.c	  4291     \COUNTERMEASURE \N The passed pointer is valid due to SBSW_CANSM_CHANNEL_STRUCT_ACCESS.
; ..\component\CanSM\Implementation\CanSM.c	  4292  
; ..\component\CanSM\Implementation\CanSM.c	  4293     \ID SBSW_CANSM_GETBUSOFFDELAY_INDICATION
; ..\component\CanSM\Implementation\CanSM.c	  4294     \DESCRIPTION Function pointer to the get bus off delay indication function
; ..\component\CanSM\Implementation\CanSM.c	  4295     \COUNTERMEASURE \S Verify that the function pointer CanSM_BusOffBeginIndicationFctPtr refers to a valid function. [SMI-389]
; ..\component\CanSM\Implementation\CanSM.c	  4296  
; ..\component\CanSM\Implementation\CanSM.c	  4297     \ID SBSW_CANSM_CHANNEL_STRUCT_ACCESS
; ..\component\CanSM\Implementation\CanSM.c	  4298     \DESCRIPTION Access of channel struct using ComStackLib
; ..\component\CanSM\Implementation\CanSM.c	  4299     \COUNTERMEASURE \N Qualified use-case CSL01 of ComStackLib
; ..\component\CanSM\Implementation\CanSM.c	  4300  
; ..\component\CanSM\Implementation\CanSM.c	  4301     \ID SBSW_CANSM_BUS_OFF_END_INDICATION
; ..\component\CanSM\Implementation\CanSM.c	  4302     \DESCRIPTION Function pointer to the bus off end indication function.
; ..\component\CanSM\Implementation\CanSM.c	  4303     \COUNTERMEASURE \S Verify that the function pointer CanSM_BusOffEndIndicationFctPtr refers to a valid function. [SMI-389]
; ..\component\CanSM\Implementation\CanSM.c	  4304  
; ..\component\CanSM\Implementation\CanSM.c	  4305     \ID SBSW_CANSM_TX_TIMEOUT_END_INDICATION
; ..\component\CanSM\Implementation\CanSM.c	  4306     \DESCRIPTION Function pointer to the Tx timeout end indication function.
; ..\component\CanSM\Implementation\CanSM.c	  4307     \COUNTERMEASURE \S Verify that the function pointer CanSM_TxTimeoutExceptionEndIndicationFctPtr refers to a valid function. [SMI-389]
; ..\component\CanSM\Implementation\CanSM.c	  4308  
; ..\component\CanSM\Implementation\CanSM.c	  4309     \ID SBSW_CANSM_CHECKBORLEVEL_POINTERWRITEACCESS
; ..\component\CanSM\Implementation\CanSM.c	  4310     \DESCRIPTION The function CanSM_CheckBorLevel writes to the object referenced by parameter CanSM_BorStatePtr.
; ..\component\CanSM\Implementation\CanSM.c	  4311     \COUNTERMEASURE \N The caller ensures that the pointer passed to the parameter is valid. [SMI-16]
; ..\component\CanSM\Implementation\CanSM.c	  4312  
; ..\component\CanSM\Implementation\CanSM.c	  4313     \ID SBSW_CANSM_ENABLE_SET_BUS_SLEEP_ARRAY
; ..\component\CanSM\Implementation\CanSM.c	  4314     \DESCRIPTION Access of CanSM_EnableSetBusSleep limited by the define which is used fore declaration.
; ..\component\CanSM\Implementation\CanSM.c	  4315     \COUNTERMEASURE \N The same define which is used in definition is used in the for loop which provides the write access index
; ..\component\CanSM\Implementation\CanSM.c	  4316  
; ..\component\CanSM\Implementation\CanSM.c	  4317     \ID SBSW_CANSM_CFG_POINTER
; ..\component\CanSM\Implementation\CanSM.c	  4318     \DESCRIPTION Pointer parameter is forwarded to an internal subfunction.
; ..\component\CanSM\Implementation\CanSM.c	  4319     \COUNTERMEASURE \N NULL pointer check is executed within the subfunction
; ..\component\CanSM\Implementation\CanSM.c	  4320  
; ..\component\CanSM\Implementation\CanSM.c	  4321  
; ..\component\CanSM\Implementation\CanSM.c	  4322     SBSW_JUSTIFICATION_END */
; ..\component\CanSM\Implementation\CanSM.c	  4323  
; ..\component\CanSM\Implementation\CanSM.c	  4324  /* COV_JUSTIFICATION_BEGIN
; ..\component\CanSM\Implementation\CanSM.c	  4325  
; ..\component\CanSM\Implementation\CanSM.c	  4326     \ID COV_CANSM_CHECKDEFINE
; ..\component\CanSM\Implementation\CanSM.c	  4327     \ACCEPT TX
; ..\component\CanSM\Implementation\CanSM.c	  4328     \REASON The condition checks whether a define exists and conditionally assigns a default value.
; ..\component\CanSM\Implementation\CanSM.c	  4329  
; ..\component\CanSM\Implementation\CanSM.c	  4330     COV_JUSTIFICATION_END */
; ..\component\CanSM\Implementation\CanSM.c	  4331  
; ..\component\CanSM\Implementation\CanSM.c	  4332  /**********************************************************************************************************************
; ..\component\CanSM\Implementation\CanSM.c	  4333    END OF FILE: CanSM.c
; ..\component\CanSM\Implementation\CanSM.c	  4334   *********************************************************************************************************************/
; ..\component\CanSM\Implementation\CanSM.c	  4335  
; ..\component\CanSM\Implementation\CanSM.c	  4336  

	; Module end
