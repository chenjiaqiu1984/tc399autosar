	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 21092262 SN 73118428"
	.compiler_invocation	"ctc --dep-file=component\\Can\\Implementation\\.Can.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc39xb -D__CPU_TC39XB__ --core=tc1.6.2 --iso=99 -DBRS_COMP_TASKING -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\testdemo\\taskingdemo\\demo001 -ID:\\Zonal\\demo011\\tasking\\component\\PduR -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Generator -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Com -ID:\\Zonal\\demo011\\tasking\\component\\Com\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Com\\DaVinciCfg_VASE -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Com\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\ComM -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Det -ID:\\Zonal\\demo011\\tasking\\component\\Det\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Det\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\demo011\\tasking\\appl -ID:\\Zonal\\demo011\\tasking\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\Components -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\ContractPhase -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\inc -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\appl\\Include -ID:\\Zonal\\demo011\\tasking\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\appl\\Source\\swc_test -ID:\\Zonal\\demo011\\tasking\\component -ID:\\Zonal\\demo011\\tasking\\component\\_Common -ID:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os\\TC39xQ -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Os\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug -ID:\\Zonal\\demo011\\tasking\\Debug\\appl -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\Debug\\component -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\src -g2 --make-target=component\\Can\\Implementation\\Can.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o component\\Can\\Implementation\\Can.src ..\\component\\Can\\Implementation\\Can.c"
	.compiler_name		"ctc"
	;source	'..\\component\\Can\\Implementation\\Can.c'

	
$TC162
	
	.sdecl	'.text.Can.CanHL_ReInit',code,cluster('CanHL_ReInit')
	.sect	'.text.Can.CanHL_ReInit'
	.align	2
	

; ..\component\Can\Implementation\Can.c	     1  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	     2  
; ..\component\Can\Implementation\Can.c	     3  /* STARTSINGLE_OF_MULTIPLE */
; ..\component\Can\Implementation\Can.c	     4  
; ..\component\Can\Implementation\Can.c	     5  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	     6   *  COPYRIGHT
; ..\component\Can\Implementation\Can.c	     7   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\Can\Implementation\Can.c	     8   *  \verbatim
; ..\component\Can\Implementation\Can.c	     9   *  Copyright (c) 2021 by Vector Informatik GmbH.                                              All rights reserved.
; ..\component\Can\Implementation\Can.c	    10   *
; ..\component\Can\Implementation\Can.c	    11   *                This software is copyright protected and proprietary to Vector Informatik GmbH.
; ..\component\Can\Implementation\Can.c	    12   *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
; ..\component\Can\Implementation\Can.c	    13   *                All other rights remain with Vector Informatik GmbH.
; ..\component\Can\Implementation\Can.c	    14   *  \endverbatim
; ..\component\Can\Implementation\Can.c	    15   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\Can\Implementation\Can.c	    16   *  FILE DESCRIPTION
; ..\component\Can\Implementation\Can.c	    17   *  -----------------------------------------------------------------------------------------------------------------*/
; ..\component\Can\Implementation\Can.c	    18  /*  \file     Can.c / Can_Irq.c
; ..\component\Can\Implementation\Can.c	    19   *  \brief    Implementation of the CAN driver
; ..\component\Can\Implementation\Can.c	    20   *  \details  see functional description below
; ..\component\Can\Implementation\Can.c	    21   *
; ..\component\Can\Implementation\Can.c	    22   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	    23  /* ***************************************************************************
; ..\component\Can\Implementation\Can.c	    24  |-----------------------------------------------------------------------------
; ..\component\Can\Implementation\Can.c	    25  |               R E V I S I O N   H I S T O R Y
; ..\component\Can\Implementation\Can.c	    26  |-----------------------------------------------------------------------------
; ..\component\Can\Implementation\Can.c	    27  | Date       Version Author Description
; ..\component\Can\Implementation\Can.c	    28  | ---------  ------- ------ --------------------------------------------------
; ..\component\Can\Implementation\Can.c	    29  | 2012-04-13 1.00.00  Her - Initial revision (alpha version)
; ..\component\Can\Implementation\Can.c	    30  | 2012-08-28 1.00.01  Her - Initial revision (beta version )
; ..\component\Can\Implementation\Can.c	    31  | 2013-02-01 1.01.00  Her - ESCAN00065098: Initial release version
; ..\component\Can\Implementation\Can.c	    32  | 2013-03-18 1.02.00  Her - ESCAN00065594: Additional (High End) features
; ..\component\Can\Implementation\Can.c	    33  | 2013-06-03 1.03.00  Her - ESCAN00068062: Rx Dedicated Buffers support
; ..\component\Can\Implementation\Can.c	    34  |                     Her - ESCAN00068305: Reduce RAM resource consumption by tailoring the configuration
; ..\component\Can\Implementation\Can.c	    35  |                     Her - ESCAN00068956: CAN messages to be transmitted are missing
; ..\component\Can\Implementation\Can.c	    36  | 2013-07-26 1.03.80  Her - ESCAN00069335: CAN-FD Bitrate Switching Prototype
; ..\component\Can\Implementation\Can.c	    37  | 2013-08-08 1.04.00  Her - ESCAN00069461: Further transmissions are not accepted but a memory violation is reported
; ..\component\Can\Implementation\Can.c	    38  |                     Her - ESCAN00069673: Conditional ECC initialization of the embedded CAN Message RAM
; ..\component\Can\Implementation\Can.c	    39  |                     Her - ESCAN00069937: GHS support
; ..\component\Can\Implementation\Can.c	    40  | 2013-09-27 1.05.00  Her - ESCAN00070770: Use Overrun in Status
; ..\component\Can\Implementation\Can.c	    41  |                     Her - ESCAN00070771: Compiler error: "finishRxFullCan" undefined
; ..\component\Can\Implementation\Can.c	    42  | 2013-10-17 1.06.00  Her - ESCAN00070952: Support customer specific post initialization
; ..\component\Can\Implementation\Can.c	    43  |                     Her - ESCAN00071166: AR4-328: Predefined Runtime Measurement Points
; ..\component\Can\Implementation\Can.c	    44  |                     Her - ESCAN00071326: Delayed overrun notification
; ..\component\Can\Implementation\Can.c	    45  |                     Her - ESCAN00071493: Message processed in wrong (interrupt or task ) context 
; ..\component\Can\Implementation\Can.c	    46  | 2013-11-20 1.07.00  Her - ESCAN00073084: Improvements on derivative handling
; ..\component\Can\Implementation\Can.c	    47  | 2014-02-12 1.08.00  Her - ESCAN00073939: Enhanced CAN-FD (Full) support
; ..\component\Can\Implementation\Can.c	    48  | 2014-03-17 1.09.00  Her - ESCAN00074327: Support embedded assembler for DiabData
; ..\component\Can\Implementation\Can.c	    49  | 2014-06-13 1.10.00  Her - ESCAN00076201: Support MPC5777C derivative
; ..\component\Can\Implementation\Can.c	    50  | 2014-10-30 2.00.00  Her - ESCAN00079193: AR4-R11 Update using ComStackLib
; ..\component\Can\Implementation\Can.c	    51  | 2015-01-30 2.01.00  Her - ESCAN00079800: Added CBD support (for Traveo derivative)
; ..\component\Can\Implementation\Can.c	    52  | 2015-02-20 2.02.00  Her - ESCAN00081372: AR4-R11 Update using ComStackLib (support Spc58xx)
; ..\component\Can\Implementation\Can.c	    53  | 2015-03-18 2.02.01  Her - ESCAN00081884: compile error
; ..\component\Can\Implementation\Can.c	    54  | 2015-04-02 2.02.02  Her - ESCAN00082190: Power Down (sleep mode) correction
; ..\component\Can\Implementation\Can.c	    55  |                     Her - ESCAN00082291: Memory access misalignment exception
; ..\component\Can\Implementation\Can.c	    56  | 2015-04-16 2.02.03  Her - ESCAN00082521: Extended Id Type not correct detected
; ..\component\Can\Implementation\Can.c	    57  |                     Her - ESCAN00082722: CANbedded only: Memory access misalignment exception
; ..\component\Can\Implementation\Can.c	    58  |                     Her - ESCAN00082724: Speed up TxCopyToCan
; ..\component\Can\Implementation\Can.c	    59  | 2015-07-06 2.02.04  Her - ESCAN00083815: Tx Confirmation gets lost
; ..\component\Can\Implementation\Can.c	    60  |                     Her - ESCAN00088481: Compiler error occurs
; ..\component\Can\Implementation\Can.c	    61  | 2015-07-30 2.03.00  Her - ESCAN00084313: Support MCAN Core release 3.1.0 ff.
; ..\component\Can\Implementation\Can.c	    62  |                     Her - ESCAN00084515: Use generated FullCAN masks
; ..\component\Can\Implementation\Can.c	    63  |                     Her - ESCAN00084650: Support ARM Cortex-Mx Data Memory Barrier
; ..\component\Can\Implementation\Can.c	    64  |                     Her - ESCAN00084814: Compiler error due to nested macro construction
; ..\component\Can\Implementation\Can.c	    65  | 2015-10-09 2.03.01  Her - ESCAN00085813: Endless loop during reception of messages
; ..\component\Can\Implementation\Can.c	    66  | 2015-11-11 2.04.00  Her - ESCAN00086128: Dynamic Rx FullCAN Message filtering failure
; ..\component\Can\Implementation\Can.c	    67  |                     Her - ESCAN00086359: Bosch Errata - support of workaround
; ..\component\Can\Implementation\Can.c	    68  | 2015-12-02 2.04.01  Her - ESCAN00086934: Support Keil compiler
; ..\component\Can\Implementation\Can.c	    69  |                     Her - ESCAN00087003: Missing pre-processor constants
; ..\component\Can\Implementation\Can.c	    70  |                     Her - ESCAN00087005: Re-Initialization fails
; ..\component\Can\Implementation\Can.c	    71  |                     Her - ESCAN00087056: Erroneous cancel notification
; ..\component\Can\Implementation\Can.c	    72  | 2015-12-03 2.05.00  Her - ESCAN00087255: Restructured due to AR4/R14
; ..\component\Can\Implementation\Can.c	    73  |                     Her - ESCAN00087256: Compile warning (erratum_013)
; ..\component\Can\Implementation\Can.c	    74  | 2016-01-21 2.05.01  Her - ESCAN00087586: Memory overwrite during RAM check
; ..\component\Can\Implementation\Can.c	    75  |                     Her - ESCAN00087612: Wrong mailbox checked
; ..\component\Can\Implementation\Can.c	    76  | 2016-02-19 2.06.00  Her - ESCAN00088392: Support 8 CAN channels (only Organi affected)
; ..\component\Can\Implementation\Can.c	    77  |                     Her - ESCAN00088519: Support more than 255 Dynamic Rx Objects
; ..\component\Can\Implementation\Can.c	    78  |                     Her - ESCAN00088756: Reserved bits may only be written with "0"
; ..\component\Can\Implementation\Can.c	    79  |                     Her - ESCAN00088813: Incorrect switching between Normal CAN and CAN-FD
; ..\component\Can\Implementation\Can.c	    80  |                     Her - ESCAN00089048: Support Mirror Mode (CBD)
; ..\component\Can\Implementation\Can.c	    81  |                     Her - ESCAN00089049: Assertion causes compile error
; ..\component\Can\Implementation\Can.c	    82  |                     Her - ESCAN00089131: Dynamic Rx objects compile error
; ..\component\Can\Implementation\Can.c	    83  | 2016-04-12 2.06.01  Her - ESCAN00089406: AR4/R14 adaptations to AR3
; ..\component\Can\Implementation\Can.c	    84  | 2016-04-22 2.06.02  Her - ESCAN00089587: Memory overwrite during RAM check
; ..\component\Can\Implementation\Can.c	    85  |                     Her - ESCAN00089610: CAN-ID Rx access macros
; ..\component\Can\Implementation\Can.c	    86  | 2016-04-28 2.07.00  Her - ESCAN00089867: MISRA improvements
; ..\component\Can\Implementation\Can.c	    87  |            2.08.xx  Her - ESCAN00092200: Will be used for Silent branch
; ..\component\Can\Implementation\Can.c	    88  | 2016-06-22 2.09.00  Her - ESCAN00090584: Function call with missing parameter
; ..\component\Can\Implementation\Can.c	    89  |                     Her - ESCAN00090761: Generated filter for dynamic Rx objects must be disabled by default
; ..\component\Can\Implementation\Can.c	    90  |                     Her - ESCAN00090825: Omit obsolete cancellation delay 
; ..\component\Can\Implementation\Can.c	    91  |                     Her - ESCAN00091096: Support AR4/R16
; ..\component\Can\Implementation\Can.c	    92  |                     Her - ESCAN00091328: Support Mirror Mode (ASR)
; ..\component\Can\Implementation\Can.c	    93  |                     Her - ESCAN00091329: CAN-FD Bit Rate Switch always active
; ..\component\Can\Implementation\Can.c	    94  | 2016-08-24 2.10.00  Her - ESCAN00091681: Support dynamic MCAN Revision adaptation
; ..\component\Can\Implementation\Can.c	    95  |                     Her - ESCAN00092569: Compiler error: identifier "pduInfo_var_id" is undefined
; ..\component\Can\Implementation\Can.c	    96  |                     Her - ESCAN00092315: Compiler warning: function "CanLL_WakeUpHandling" was declared but never referenced
; ..\component\Can\Implementation\Can.c	    97  |                     Her - ESCAN00092713: Preprocessor parse error
; ..\component\Can\Implementation\Can.c	    98  | 2016-10-28 2.11.00  Pl  - ESCAN00092591: Support Aurix Plus with AR4/R16
; ..\component\Can\Implementation\Can.c	    99  | 2016-11-24 2.12.00  Her - ESCAN00092995: CAN-FD message without BRS will not be received
; ..\component\Can\Implementation\Can.c	   100  |                     Her - ESCAN00093167: Compiler error "maybe misaligned memory access"
; ..\component\Can\Implementation\Can.c	   101  |                     Pl  - ESCAN00093244: CAN Interrupt lock work not correct (Aurix Plus only)
; ..\component\Can\Implementation\Can.c	   102  | 2017-01-25 2.13.00  Pl  - ESCAN00093483: CAN communication only possible with channels CAN0, CAN4, CAN8 (Aurix Plus only)
; ..\component\Can\Implementation\Can.c	   103  |                     Pl  - ESCAN00093726: Support C_ENABLE_USE_OS_INTERRUPT_CONTROL (Aurix Plus only)
; ..\component\Can\Implementation\Can.c	   104  | 2017-02-02 2.13.01  Her - ESCAN00093849: CAN data bytes containing wrong content 
; ..\component\Can\Implementation\Can.c	   105  |                     Her - ESCAN00093852: Support Extended ID Masking
; ..\component\Can\Implementation\Can.c	   106  | 2017-03-09 2.14.00  Rse - ESCAN00094323: Support TeleChips Tcc802x derivatives for CANbedded
; ..\component\Can\Implementation\Can.c	   107  | 2017-04-19 2.14.01  Pl  - ESCAN00094085: Implementation of workaround for MCMCAN_TC.003_EPN Corruption of transmitted CAN Frame
; ..\component\Can\Implementation\Can.c	   108  | 2017-05-10 2.15.00  Her - ESCAN00094883: Improper workaround for MCAN Erratum #10 
; ..\component\Can\Implementation\Can.c	   109  | 2017-05-11 2.16.00  Her - ESCAN00094518: MCAN SafeBSW Support
; ..\component\Can\Implementation\Can.c	   110  | 2017-08-10 2.16.01  Her - STORYC-2289  : FEAT-2738 (silent mode), FEAT-2888 (selective multiplexedTx)
; ..\component\Can\Implementation\Can.c	   111  | 2017-08-25 2.17.00  Pl  - STORYC-2250  : M-CAN: Support new platform Telemaco3P with ARM DS5 compiler with CFG5
; ..\component\Can\Implementation\Can.c	   112  |                     Her - STORYC-2289  : Support derivatives TCC8021, SAMCA1E for CANbedded
; ..\component\Can\Implementation\Can.c	   113  | 2017-09-12 2.20.00  Her - STORYC-2729  : Support derivatives SPC5777M with AR4/R19, MCAN SafeBSW Support
; ..\component\Can\Implementation\Can.c	   114  |                     Her - STORYC-2780  : Stop Mode transition behaviour improved
; ..\component\Can\Implementation\Can.c	   115  |                     Her - ESCAN00097246: Pending Tx requests block transition to stop mode
; ..\component\Can\Implementation\Can.c	   116  |                     Her - ESCAN00097151: Incomplete Mirror Data
; ..\component\Can\Implementation\Can.c	   117  | 2017-10-27 2.21.00  Her - STORYC-2729  : MCAN SafeBSW Support (continued and ExtRamCheck Beta)
; ..\component\Can\Implementation\Can.c	   118  | 2017-12-01 3.00.00  Pl  - STORYC-3153  : Add infixing to support multiple driver instanced
; ..\component\Can\Implementation\Can.c	   119  |                     Her - STORYC-3325  : AR3/GENy adaptation
; ..\component\Can\Implementation\Can.c	   120  |                     Huo - ESCAN00098069: Add external PIA
; ..\component\Can\Implementation\Can.c	   121  | 2018-01-25 3.01.00  Hum - STORYC-4102  : Support Extended Ram Check
; ..\component\Can\Implementation\Can.c	   122  |                     Her - ESCAN00097602: OS assertion "CAN interrupt lost"
; ..\component\Can\Implementation\Can.c	   123  |                     Hum - ESCAN00098469: TCF Init enabled regardless of CANCEL_IN_HW
; ..\component\Can\Implementation\Can.c	   124  |                     Hum - ESCAN00098470: TDCR write not performed correctly in correspondance with dynamic MCAN revision. CAN_BOSCH_ERRATUM_012
; ..\component\Can\Implementation\Can.c	   125  |                     Hum - ESCAN00098467: Missing ampersand in RAM check resulting in a DET error.
; ..\component\Can\Implementation\Can.c	   126  | 2018-03-07 3.02.00  Pl  - STORYC-4771  : Support TC38X for Tricore
; ..\component\Can\Implementation\Can.c	   127  |                     Her - ESCAN00098887: static variable "mirrorData" linker section issue, 
; ..\component\Can\Implementation\Can.c	   128  |                     Her - ESCAN00098890: use kCanLoopStop instead of kCanLoopSleep (AR3 issue)
; ..\component\Can\Implementation\Can.c	   129  | 2018-09-17 4.00.00  Her - STORYC-6298  : MCAN RI 2.0 adaptation
; ..\component\Can\Implementation\Can.c	   130  |                     Hum - STORYC-6490  : Support for Traveo2
; ..\component\Can\Implementation\Can.c	   131  | 2018-10-26 4.00.01  Yoe - ESCAN00101172: Compiler error: wrong number of arguments in call to CanReInit
; ..\component\Can\Implementation\Can.c	   132  | 2019-03-14 5.00.00  Her - STORYC-7220  : from CBD/RI2.0 to AR/R21,R22 adaptation
; ..\component\Can\Implementation\Can.c	   133  |                     Hum - STORYC-8107  : Adapations for TriCore R22
; ..\component\Can\Implementation\Can.c	   134  |                     Hum - STORYC-7923  : Merge version 3-03-00 - 3-09-01:
; ..\component\Can\Implementation\Can.c	   135  |                                          - STORYC-4711  : Support TDA3x additional registers
; ..\component\Can\Implementation\Can.c	   136  |                                          - STORYC-4584  : Infixing improvements
; ..\component\Can\Implementation\Can.c	   137  |                                          - STORYC-5038  : Support GNU Compiler for TC38X
; ..\component\Can\Implementation\Can.c	   138  |                                          - ESCAN00099574: Adaptation LL for CANBEDDED
; ..\component\Can\Implementation\Can.c	   139  |                                          - STORYC-5679  : Support for Visconti5
; ..\component\Can\Implementation\Can.c	   140  |                                          - STORYC-5763  : Support extended ram check for TDA3x
; ..\component\Can\Implementation\Can.c	   141  |                                          - STORYC-6686  : Support for Traveo2
; ..\component\Can\Implementation\Can.c	   142  |                                          - STORYC-6964  : Support SafeBSW for RH850
; ..\component\Can\Implementation\Can.c	   143  |                                          - STORYC-7393  : Support SafeBsw for Tricore TC3xx
; ..\component\Can\Implementation\Can.c	   144  |                                          - STORYC-7392  : Support Extended RAM check for Tricore TC3xx
; ..\component\Can\Implementation\Can.c	   145  |                                          - ESCAN00101336: Rx BasicCan not deactivated when hwMailbox is corrupted
; ..\component\Can\Implementation\Can.c	   146  |                                          - ESCAN00101842: Extended Ram Check does not validate all configured registers
; ..\component\Can\Implementation\Can.c	   147  |                                          - STORYC-7578  : Support for ATSAME51/54 derivatives (STORYC-7633 for CANBEDDED)
; ..\component\Can\Implementation\Can.c	   148  |                                          - ESCAN00102628: Can controller does not leave NISO mode
; ..\component\Can\Implementation\Can.c	   149  | 2019-04-12 5.01.00  Hum - ESCAN00102829: Can driver causes hardware exception
; ..\component\Can\Implementation\Can.c	   150  |                     Hum - ESCAN00102850: Hardware issue "MCMCAN_AI.H001_EPN"
; ..\component\Can\Implementation\Can.c	   151  |                     Hum - STORYC-8181  : Support Traveo2 HighEnd
; ..\component\Can\Implementation\Can.c	   152  | 2019-04-29 5.02.00  Hum - STORYC-8270  : Support Panasonic AS1
; ..\component\Can\Implementation\Can.c	   153  |                     Yoe - STORYC-8139  : Support ARM6 Compiler for STA1385
; ..\component\Can\Implementation\Can.c	   154  |                     Yoe - STORYC-8386  : Support MCAN revision 3.0.x and Infixing
; ..\component\Can\Implementation\Can.c	   155  |                     Yoe - STORYC-8385  : Support SafeBsw MSR4 R22 ARM32
; ..\component\Can\Implementation\Can.c	   156  |                     Yoe - ESCAN00103110: RAM check not executed in the MCAN  message RAM area
; ..\component\Can\Implementation\Can.c	   157  |                     Yoe - ESCAN00103135: Remove  support of STA1385_cut1
; ..\component\Can\Implementation\Can.c	   158  |                     Hum - ESCAN00103996: Compile error "CAN_E_GENDATA not defined"
; ..\component\Can\Implementation\Can.c	   159  | 2019-05-29 5.02.01  Hum - STORYC-8555  : Improve additional functionality handling in Jacinto6, Traveo2 and Visconti5
; ..\component\Can\Implementation\Can.c	   160  | 2019-06-17 5.02.02  Hum - ESCAN00103387: Transmit Confirmation function called for wrong mailbox
; ..\component\Can\Implementation\Can.c	   161  | 2019-08-21 5.03.00  Pl  - STORYC-8854  : Support for AWR1 RI 2.0 core 3.03.00
; ..\component\Can\Implementation\Can.c	   162  |                     Her - ESCAN00103377: Same peripheral region configuration for "CAN_PROTECTED_AREA_CHANNEL" and "CAN_PROTECTED_AREA_GLOBAL"
; ..\component\Can\Implementation\Can.c	   163  |                     Hum - ESCAN00104123: CAN driver sends incorrect receive BasicCan handle to CanIf
; ..\component\Can\Implementation\Can.c	   164  | 2019-11-10 5.04.00  Hum - CAN-605      : Driver Improvements
; ..\component\Can\Implementation\Can.c	   165  |                     Hum - CAN-606      : Message RAM Optimization
; ..\component\Can\Implementation\Can.c	   166  |                     Hum - CAN-601      : Support Tx Hw Fifo
; ..\component\Can\Implementation\Can.c	   167  |                     Hum - ESCAN00104276: Compile error when using "CanBtpReg()" with Init Post Processing
; ..\component\Can\Implementation\Can.c	   168  |                     Hum - ESCAN00104735: Interrupts are unconditionally re-enabled after Can_DisableControllerInterrupts()
; ..\component\Can\Implementation\Can.c	   169  |                     Naj - CAN-760      : MISRA Improvements
; ..\component\Can\Implementation\Can.c	   170  |                     Red - CAN-784      : Support STM32H742 for R23
; ..\component\Can\Implementation\Can.c	   171  | 2020-02-11 5.05.00  Hum - CAN-936      : Support for TriCore in CANbedded
; ..\component\Can\Implementation\Can.c	   172  | 2020-04-14 5.06.00  Hum - CAN-865      : TriCore 2G Hardware Message RAM Initialization Support
; ..\component\Can\Implementation\Can.c	   173  |                     Naj - CAN-1171     : Support TCC80XX
; ..\component\Can\Implementation\Can.c	   174  |                     Pl  - CAN-1279     : MISRA improvements
; ..\component\Can\Implementation\Can.c	   175  | 2020-06-03 5.07.00  Hum - CAN-1396     : Support for TDA4 (Jacinto7)
; ..\component\Can\Implementation\Can.c	   176  | 2020-09-15 5.08.00  Pl  - ESCAN00106662: Channel Independent TTCAN for CBD
; ..\component\Can\Implementation\Can.c	   177  |                     Pl  - CAN-1296     : TraveoII CBD Subsystem Table
; ..\component\Can\Implementation\Can.c	   178  |                     Hum - CAN-1678     : Support for TriCore TC3E7 with Diab Compiler
; ..\component\Can\Implementation\Can.c	   179  |                     Naj - CAN-1179     : Hardware Object Layout change
; ..\component\Can\Implementation\Can.c	   180  |                     Naj - ESCAN00106609: TCC803x CAN Configuration Write Protection
; ..\component\Can\Implementation\Can.c	   181  |                     Naj - ESCAN00107330: Verify channel parameter in Interrupt handling
; ..\component\Can\Implementation\Can.c	   182  |                     Naj - ESCAN00107331: Support for Tx Delayed FullCAN for Multichannel
; ..\component\Can\Implementation\Can.c	   183  |                     Naj - ESCAN00107332: Undesirable Basic CAN deactivation during RAM check
; ..\component\Can\Implementation\Can.c	   184  |                     Hum - ESCAN00107394: Wrong base addresses accessed for TDA3x
; ..\component\Can\Implementation\Can.c	   185  |                     Hum - ESCAN00107466: Size of generated message RAM table not checked during runtime
; ..\component\Can\Implementation\Can.c	   186  | 2020-10-14 5.08.01  Naj - CAN-1514     : Support TDA4 for CANbedded
; ..\component\Can\Implementation\Can.c	   187  | 2021-01-11 5.08.02  Meid- CAN-2154     : Reworks for TI platforms
; ..\component\Can\Implementation\Can.c	   188  |                     Naj - ESCAN00107521: Hw Loops used in wrong context
; ..\component\Can\Implementation\Can.c	   189  |                     Naj - ESCAN00108028: Unexpected CAN interrupt
; ..\component\Can\Implementation\Can.c	   190  |                     Hum - CAN-2320     : Remove call to TriCore Safety Endinit registers during initialization
; ..\component\Can\Implementation\Can.c	   191  |************************************************************************** */
; ..\component\Can\Implementation\Can.c	   192  
; ..\component\Can\Implementation\Can.c	   193  /* \trace SPEC-1570 */
; ..\component\Can\Implementation\Can.c	   194  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	   195  /* Include files                                                           */
; ..\component\Can\Implementation\Can.c	   196  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	   197  /* ECO_IGNORE_BLOCK_BEGIN */
; ..\component\Can\Implementation\Can.c	   198  #define C_DRV_INTERNAL /* compatibility */
; ..\component\Can\Implementation\Can.c	   199  #define CAN_SOURCE     /* testability */
; ..\component\Can\Implementation\Can.c	   200  #define __CAN_SRC__       /* compatibility RTM not aware of multi driver instance */ /* PRQA S 0602,0603 */ /* MD_Can_ModuleDefine */
; ..\component\Can\Implementation\Can.c	   201  #if !defined(__CAN_SRC__) /* driver use ORGANI without infix */ /* COV_CAN_INTERNAL */
; ..\component\Can\Implementation\Can.c	   202  # define __CAN_SRC__      /* for all MSR module (used by RTM) */ /* PRQA S 0602,0603 */ /* MD_Can_ModuleDefine */
; ..\component\Can\Implementation\Can.c	   203  #endif
; ..\component\Can\Implementation\Can.c	   204  
; ..\component\Can\Implementation\Can.c	   205  /* \trace SPEC-1408, SPEC-1590, SPEC-1588 */
; ..\component\Can\Implementation\Can.c	   206  /* PRQA S 0777 EOF */ /* MD_Can_0777_LL */
; ..\component\Can\Implementation\Can.c	   207  /* PRQA S 0779 EOF */ /* MD_MSR_5.1_779 */
; ..\component\Can\Implementation\Can.c	   208  /* PRQA S 0841 EOF */ /* MD_Can_0841    */
; ..\component\Can\Implementation\Can.c	   209  /* \trace SPEC-1392 */
; ..\component\Can\Implementation\Can.c	   210  #include "CanIf_Cbk.h"   /* for callback declaration */
; ..\component\Can\Implementation\Can.c	   211  /* \trace SPEC-1707 */
; ..\component\Can\Implementation\Can.c	   212  #include "CanIf.h"       /* for version check */
; ..\component\Can\Implementation\Can.c	   213  #include "Can_Local.h"    /* have to be last include due to channel define will lead to problems */
; ..\component\Can\Implementation\Can.c	   214  
; ..\component\Can\Implementation\Can.c	   215  
; ..\component\Can\Implementation\Can.c	   216  #if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	   217  /* \trace SPEC-1596 */
; ..\component\Can\Implementation\Can.c	   218  # include "Det.h"
; ..\component\Can\Implementation\Can.c	   219  #endif
; ..\component\Can\Implementation\Can.c	   220  
; ..\component\Can\Implementation\Can.c	   221  #if !defined(CAN_AMD_RUNTIME_MEASUREMENT) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   222  # define CAN_AMD_RUNTIME_MEASUREMENT STD_OFF
; ..\component\Can\Implementation\Can.c	   223  #endif
; ..\component\Can\Implementation\Can.c	   224  #if (CAN_AMD_RUNTIME_MEASUREMENT == STD_ON) /* COV_CAN_AMD_RUNTIME_MEASUREMENT */
; ..\component\Can\Implementation\Can.c	   225  # include "AmdRtm.h"
; ..\component\Can\Implementation\Can.c	   226  #endif
; ..\component\Can\Implementation\Can.c	   227  
; ..\component\Can\Implementation\Can.c	   228  #if !defined(CAN_RUNTIME_MEASUREMENT_SUPPORT) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   229  # define CAN_RUNTIME_MEASUREMENT_SUPPORT STD_OFF
; ..\component\Can\Implementation\Can.c	   230  #endif
; ..\component\Can\Implementation\Can.c	   231  #if (CAN_RUNTIME_MEASUREMENT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	   232  /* AR4-328 */
; ..\component\Can\Implementation\Can.c	   233  # define C_ENABLE_RUNTIME_MEASUREMENT_SUPPORT
; ..\component\Can\Implementation\Can.c	   234  # include "Rtm.h"
; ..\component\Can\Implementation\Can.c	   235  #endif
; ..\component\Can\Implementation\Can.c	   236  
; ..\component\Can\Implementation\Can.c	   237  #include "vstdlib.h"
; ..\component\Can\Implementation\Can.c	   238  
; ..\component\Can\Implementation\Can.c	   239  /* ECO_IGNORE_BLOCK_END */
; ..\component\Can\Implementation\Can.c	   240  
; ..\component\Can\Implementation\Can.c	   241  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	   242  /* Version Check                                                           */
; ..\component\Can\Implementation\Can.c	   243  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	   244  /* \trace SPEC-20329 */
; ..\component\Can\Implementation\Can.c	   245  /* not the SW version but all file versions that represent the SW version are checked */
; ..\component\Can\Implementation\Can.c	   246  #if (CAN_COREVERSION           != 0x0900u) /* \trace SPEC-1699 */
; ..\component\Can\Implementation\Can.c	   247  # error "Source and Header file are inconsistent!"
; ..\component\Can\Implementation\Can.c	   248  #endif
; ..\component\Can\Implementation\Can.c	   249  #if (CAN_RELEASE_COREVERSION   != 0x01u)
; ..\component\Can\Implementation\Can.c	   250  # error "Source and Header file are inconsistent!"
; ..\component\Can\Implementation\Can.c	   251  #endif
; ..\component\Can\Implementation\Can.c	   252  #if defined(CAN_GEN_BASE_CFG5_VERSION) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   253  # if (CAN_GEN_BASE_CFG5_VERSION         != 0x0103u)
; ..\component\Can\Implementation\Can.c	   254  #  error "Source and Generated Header file are inconsistent!"
; ..\component\Can\Implementation\Can.c	   255  # endif
; ..\component\Can\Implementation\Can.c	   256  #else
; ..\component\Can\Implementation\Can.c	   257  # error "No CAN_GEN_BASE_CFG5_VERSION is defined"
; ..\component\Can\Implementation\Can.c	   258  #endif
; ..\component\Can\Implementation\Can.c	   259  #if( DRVCAN_MPC5700MCANASR_VERSION != 0x0508)
; ..\component\Can\Implementation\Can.c	   260  # error "Source and Header file are inconsistent!"
; ..\component\Can\Implementation\Can.c	   261  #endif
; ..\component\Can\Implementation\Can.c	   262  
; ..\component\Can\Implementation\Can.c	   263  #if( DRVCAN_MPC5700MCANASR_RELEASE_VERSION != 0x02)
; ..\component\Can\Implementation\Can.c	   264  # error "Source and Header file are inconsistent!"
; ..\component\Can\Implementation\Can.c	   265  #endif
; ..\component\Can\Implementation\Can.c	   266  
; ..\component\Can\Implementation\Can.c	   267  #if defined(CAN_GEN_Mpc5700McanAsr_VERSION )  /* COV_CAN_VERSION_CHECK */
; ..\component\Can\Implementation\Can.c	   268  # if(CAN_GEN_Mpc5700McanAsr_VERSION != 0x0504)     /* CFG5 */
; ..\component\Can\Implementation\Can.c	   269  #  error "Generated Data are inconsistent!"
; ..\component\Can\Implementation\Can.c	   270  # endif
; ..\component\Can\Implementation\Can.c	   271  #else
; ..\component\Can\Implementation\Can.c	   272  # define CAN_GEN_Mpc5700McanAsr_VERSION         CAN_GEN_MPC5700MCANASR_VERSION
; ..\component\Can\Implementation\Can.c	   273  # if(CAN_GEN_MPC5700MCANASR_VERSION != 0x0100)
; ..\component\Can\Implementation\Can.c	   274  #  error "Generated Data are inconsistent!"
; ..\component\Can\Implementation\Can.c	   275  # endif
; ..\component\Can\Implementation\Can.c	   276  #endif
; ..\component\Can\Implementation\Can.c	   277  
; ..\component\Can\Implementation\Can.c	   278  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	   279  /* Defines                                                                 */
; ..\component\Can\Implementation\Can.c	   280  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	   281  #if defined(CAN_USE_NO_VECTOR_IF) /* for testability */
; ..\component\Can\Implementation\Can.c	   282  # define CAN_USE_CRITICALSECTION_OVER_CONFIRMATION
; ..\component\Can\Implementation\Can.c	   283  #else
; ..\component\Can\Implementation\Can.c	   284  # if defined(CANIF_VENDOR_ID) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   285  #  if (CANIF_VENDOR_ID == 0x001E) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   286  #   define CAN_USE_VECTOR_IF
; ..\component\Can\Implementation\Can.c	   287  #   if defined(IF_ASRIFCAN_VERSION) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   288  #    if (IF_ASRIFCAN_VERSION < 0x0410) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   289  #     define CAN_USE_CRITICALSECTION_OVER_CONFIRMATION
; ..\component\Can\Implementation\Can.c	   290  #    endif
; ..\component\Can\Implementation\Can.c	   291  #   endif
; ..\component\Can\Implementation\Can.c	   292  #  else
; ..\component\Can\Implementation\Can.c	   293  #   define CAN_USE_CRITICALSECTION_OVER_CONFIRMATION
; ..\component\Can\Implementation\Can.c	   294  #  endif
; ..\component\Can\Implementation\Can.c	   295  # else
; ..\component\Can\Implementation\Can.c	   296  #  define CAN_USE_CRITICALSECTION_OVER_CONFIRMATION
; ..\component\Can\Implementation\Can.c	   297  # endif
; ..\component\Can\Implementation\Can.c	   298  #endif
; ..\component\Can\Implementation\Can.c	   299  /* Compatibility to CBD */
; ..\component\Can\Implementation\Can.c	   300  /* instead of direct canCanInterruptCounter[] use Can_GetCanInterruptCounter(Index) abstraction for ComStackLib */
; ..\component\Can\Implementation\Can.c	   301  
; ..\component\Can\Implementation\Can.c	   302  #if (CAN_RUNTIME_MEASUREMENT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	   303  # define CanHookBegin_Can_Init()                              Rtm_Start(RtmConf_RtmMeasurementPoint_Can_Init)
; ..\component\Can\Implementation\Can.c	   304  # define CanHookEnd_Can_Init()                                Rtm_Stop(RtmConf_RtmMeasurementPoint_Can_Init)
; ..\component\Can\Implementation\Can.c	   305  # define CanHookBegin_Can_SetControllerMode()                 Rtm_Start(RtmConf_RtmMeasurementPoint_Can_SetControllerMode)
; ..\component\Can\Implementation\Can.c	   306  # define CanHookEnd_Can_SetControllerMode()                   Rtm_Stop(RtmConf_RtmMeasurementPoint_Can_SetControllerMode)
; ..\component\Can\Implementation\Can.c	   307  # define CanHookBegin_Can_Write()                             Rtm_Start(RtmConf_RtmMeasurementPoint_Can_Write)
; ..\component\Can\Implementation\Can.c	   308  # define CanHookEnd_Can_Write()                               Rtm_Stop(RtmConf_RtmMeasurementPoint_Can_Write)
; ..\component\Can\Implementation\Can.c	   309  
; ..\component\Can\Implementation\Can.c	   310  #else /* BRS runtime measurement */
; ..\component\Can\Implementation\Can.c	   311  # define CanHookBegin_Can_Init()
; ..\component\Can\Implementation\Can.c	   312  # define CanHookEnd_Can_Init()
; ..\component\Can\Implementation\Can.c	   313  # define CanHookBegin_Can_SetControllerMode() \ 
; ..\component\Can\Implementation\Can.c	   314  
; ..\component\Can\Implementation\Can.c	   315  # define CanHookEnd_Can_SetControllerMode() \ 
; ..\component\Can\Implementation\Can.c	   316  
; ..\component\Can\Implementation\Can.c	   317  # define CanHookBegin_Can_Write() \ 
; ..\component\Can\Implementation\Can.c	   318  
; ..\component\Can\Implementation\Can.c	   319  # define CanHookEnd_Can_Write() \ 
; ..\component\Can\Implementation\Can.c	   320  
; ..\component\Can\Implementation\Can.c	   321  #endif
; ..\component\Can\Implementation\Can.c	   322  
; ..\component\Can\Implementation\Can.c	   323  # define CanHookBegin_CanHL_ReInit() \ 
; ..\component\Can\Implementation\Can.c	   324  
; ..\component\Can\Implementation\Can.c	   325  # define CanHookEnd_CanHL_ReInit() \ 
; ..\component\Can\Implementation\Can.c	   326  
; ..\component\Can\Implementation\Can.c	   327  #define CanHookBegin_CanHL_TxConfirmation() \ 
; ..\component\Can\Implementation\Can.c	   328  
; ..\component\Can\Implementation\Can.c	   329  #define CanHookEnd_CanHL_TxConfirmation() \ 
; ..\component\Can\Implementation\Can.c	   330  
; ..\component\Can\Implementation\Can.c	   331  #define CanHookBegin_CanHL_BasicCanMsgReceived() \ 
; ..\component\Can\Implementation\Can.c	   332  
; ..\component\Can\Implementation\Can.c	   333  #define CanHookEnd_CanHL_BasicCanMsgReceived() \ 
; ..\component\Can\Implementation\Can.c	   334  
; ..\component\Can\Implementation\Can.c	   335  #define CanHookBegin_CanHL_FullCanMsgReceived() \ 
; ..\component\Can\Implementation\Can.c	   336  
; ..\component\Can\Implementation\Can.c	   337  #define CanHookEnd_CanHL_FullCanMsgReceived() \ 
; ..\component\Can\Implementation\Can.c	   338  
; ..\component\Can\Implementation\Can.c	   339  #define CanHookBegin_Can_MainFunction_Write() \ 
; ..\component\Can\Implementation\Can.c	   340  
; ..\component\Can\Implementation\Can.c	   341  #define CanHookEnd_Can_MainFunction_Write() \ 
; ..\component\Can\Implementation\Can.c	   342  
; ..\component\Can\Implementation\Can.c	   343  #define CanHookBegin_Can_MainFunction_Read() \ 
; ..\component\Can\Implementation\Can.c	   344  
; ..\component\Can\Implementation\Can.c	   345  #define CanHookEnd_Can_MainFunction_Read() \ 
; ..\component\Can\Implementation\Can.c	   346  
; ..\component\Can\Implementation\Can.c	   347  
; ..\component\Can\Implementation\Can.c	   348  /*!
; ..\component\Can\Implementation\Can.c	   349   *  Internal comment removed.
; ..\component\Can\Implementation\Can.c	   350   *
; ..\component\Can\Implementation\Can.c	   351   *
; ..\component\Can\Implementation\Can.c	   352   *
; ..\component\Can\Implementation\Can.c	   353   *
; ..\component\Can\Implementation\Can.c	   354   *
; ..\component\Can\Implementation\Can.c	   355   *
; ..\component\Can\Implementation\Can.c	   356   *
; ..\component\Can\Implementation\Can.c	   357   *
; ..\component\Can\Implementation\Can.c	   358   *
; ..\component\Can\Implementation\Can.c	   359   *
; ..\component\Can\Implementation\Can.c	   360   *
; ..\component\Can\Implementation\Can.c	   361   *
; ..\component\Can\Implementation\Can.c	   362   *
; ..\component\Can\Implementation\Can.c	   363   *
; ..\component\Can\Implementation\Can.c	   364   *
; ..\component\Can\Implementation\Can.c	   365   *
; ..\component\Can\Implementation\Can.c	   366   *
; ..\component\Can\Implementation\Can.c	   367   *
; ..\component\Can\Implementation\Can.c	   368  */
; ..\component\Can\Implementation\Can.c	   369  
; ..\component\Can\Implementation\Can.c	   370  
; ..\component\Can\Implementation\Can.c	   371  
; ..\component\Can\Implementation\Can.c	   372  /* Start value of the Message RAM Watchdog Counter. 
; ..\component\Can\Implementation\Can.c	   373     With the reset value of '0' the counter is disabled. */
; ..\component\Can\Implementation\Can.c	   374  #define kCan_RWD                        0x00000000UL
; ..\component\Can\Implementation\Can.c	   375  
; ..\component\Can\Implementation\Can.c	   376  /* Bitmasks of MCAN CCCR */
; ..\component\Can\Implementation\Can.c	   377  #define kCanCCCR_INIT                   0x00000001UL /*! '1'= Initialization is started */
; ..\component\Can\Implementation\Can.c	   378  #define kCanCCCR_CCE                    0x00000002UL /*! Configuration Change Enable: '1'= CPU has write access to the protected configuration registers (while CCCR.INIT = '1') */
; ..\component\Can\Implementation\Can.c	   379  #define kCanCCCR_ASM                    0x00000004UL /*! Restricted Operation Mode: '1'= Restricted Operation Mode active */
; ..\component\Can\Implementation\Can.c	   380  #define kCanCCCR_CSA                    0x00000008UL /*! Clock Stop Acknowledge: '1'= M_CAN may be set in power down by stopping host and core clock */
; ..\component\Can\Implementation\Can.c	   381  #define kCanCCCR_CSR                    0x00000010UL /*! Clock Stop Request:     '1'= Clock stop requested (after all pending transfers are completed and CAN reached Bus_Idle 
; ..\component\Can\Implementation\Can.c	   382                                                                                      first INIT and then CSA will be set */
; ..\component\Can\Implementation\Can.c	   383  #define kCanCCCR_MON                    0x00000020UL /*! Bus Monitoring Mode:    '1'= Bus Monitoring Mode enabled */
; ..\component\Can\Implementation\Can.c	   384  #define kCanCCCR_DAR                    0x00000040UL /*! Disable Automatic Retransmission: '1'= Automatic retransmission disabled */
; ..\component\Can\Implementation\Can.c	   385  #define kCanCCCR_TEST                   0x00000080UL /*! Test Enable Mode:       '1'= Test Mode (write access to register TEST enabled) */
; ..\component\Can\Implementation\Can.c	   386  
; ..\component\Can\Implementation\Can.c	   387  #define kCanFBTP_TDC_Disable            0x00000000UL          /*! Transceiver Delay Compensation disabled  */
; ..\component\Can\Implementation\Can.c	   388  #define kCanTDCR_TDC_Disable            kCanFBTP_TDC_Disable /*! TDCO moved to new register TDCR (since Rev. 3.1.0) */
; ..\component\Can\Implementation\Can.c	   389  #define kCanTDCR_FBTP_TDCO_300          0x1F000000UL /*! Transceiver Delay Compensation Offset from FBTP (Rev. 3.0) */
; ..\component\Can\Implementation\Can.c	   390  #define kCanTDCR_FBTP_TDCO_Mask_310     0x00FFFFFFUL  /*! Transceiver Delay Compensation Offset Mask (since Rev. 3.0) */
; ..\component\Can\Implementation\Can.c	   391  #define kCanFBTP_to_TDCR_bit_offset_r   16UL         /*! Transceiver Delay Compensation Offset bit offset from register FBTP to TDCR (Rev. 3.0 to Rev. 3.1.0) */
; ..\component\Can\Implementation\Can.c	   392  
; ..\component\Can\Implementation\Can.c	   393  #if !defined(kCanGFC_ANFS) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   394  /* Non-matching Frames Standard */
; ..\component\Can\Implementation\Can.c	   395  # define kCanGFC_ANFS                   0x00000030UL  /*! 0x00000000UL Accept in Rx FIFO 0
; ..\component\Can\Implementation\Can.c	   396                                                          0x00000010UL Accept in Rx FIFO 1
; ..\component\Can\Implementation\Can.c	   397                                                          0x00000030UL Reject */
; ..\component\Can\Implementation\Can.c	   398  #endif
; ..\component\Can\Implementation\Can.c	   399  
; ..\component\Can\Implementation\Can.c	   400  #if !defined(kCanGFC_ANFE) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   401  /* Non-matching Frames Extended */
; ..\component\Can\Implementation\Can.c	   402  # define kCanGFC_ANFE                   0x0000000CUL  /*! 0x00000000UL Accept in Rx FIFO 0
; ..\component\Can\Implementation\Can.c	   403                                                          0x00000004UL Accept in Rx FIFO 1
; ..\component\Can\Implementation\Can.c	   404                                                          0x0000000CUL Reject */
; ..\component\Can\Implementation\Can.c	   405  #endif
; ..\component\Can\Implementation\Can.c	   406  
; ..\component\Can\Implementation\Can.c	   407  #if !defined(kCanGFC_RRFS) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   408  /* Remote Frames Standard */
; ..\component\Can\Implementation\Can.c	   409  # define kCanGFC_RRFS                   0x00000002UL  /*! 0x00000000 Filter Remote Frames Standard       
; ..\component\Can\Implementation\Can.c	   410                                                          0x00000002 Reject Remote Frames Standard */
; ..\component\Can\Implementation\Can.c	   411  #endif
; ..\component\Can\Implementation\Can.c	   412  
; ..\component\Can\Implementation\Can.c	   413  #if !defined(kCanGFC_RRFE) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   414  /* Remote Frames Extended */
; ..\component\Can\Implementation\Can.c	   415  # define kCanGFC_RRFE                   0x00000001UL  /*! 0x00000000 Filter Remote Frames Extended
; ..\component\Can\Implementation\Can.c	   416                                                            0x00000001 Reject Remote Frames Extended */
; ..\component\Can\Implementation\Can.c	   417  #endif
; ..\component\Can\Implementation\Can.c	   418  
; ..\component\Can\Implementation\Can.c	   419  # define MCMCAN_GLOBAL_ADDR_0                 0xF0208000UL       /*! Address of Mc_Mcan_0 */
; ..\component\Can\Implementation\Can.c	   420  # define MCMCAN_GLOBAL_ADDR_1                 0xF0218000UL       /*! Address of Mc_Mcan_1 */
; ..\component\Can\Implementation\Can.c	   421  # define MCMCAN_GLOBAL_ADDR_2                 0xF0228000UL       /*! Address of Mc_Mcan_2 */
; ..\component\Can\Implementation\Can.c	   422  
; ..\component\Can\Implementation\Can.c	   423  # define kCanMCMcanEnableMemAccess            0xFFFFFFFFUL  /*! 0xFFFFFFFF Enable Memory Access to all Register */
; ..\component\Can\Implementation\Can.c	   424  # define kCanMCMcan_MCR_CCCE                  0x80000000UL  /*! Clock and RAM change enable */
; ..\component\Can\Implementation\Can.c	   425  # define kCanMCMcan_MCR_CI                    0x40000000UL  /*! Change Init */
; ..\component\Can\Implementation\Can.c	   426  # define kCanMCMcan_MCR_RINIT                 0x20000000UL  /*! RAM init (not available in A-step) */
; ..\component\Can\Implementation\Can.c	   427  # define kCanMCMcan_MCR_RBUSY                 0x10000000UL  /*! RAM BUSY */
; ..\component\Can\Implementation\Can.c	   428  # define kCanMCMcanSetMCR_prog_sequence_0     0xC0000000UL  /*! To be able to change the clock settings the following programming sequence needs to be met: */
; ..\component\Can\Implementation\Can.c	   429  # define kCanMCMcanSetMCR_prog_sequence_1     0xC00000FFUL  /*! CANn_MCR|=0xC0000000;  change clock settings within MCR; CANn_MCR&=~0xC0000000; */
; ..\component\Can\Implementation\Can.c	   430  # define kCanMCMcanSetMCR_prog_sequence_2     0x000000FFUL  /*! after this clock settings for CAN nodes becomes active. */
; ..\component\Can\Implementation\Can.c	   431  # define kCanMCMcanDisable_Service_Request    0xFFFFFBFFUL  /*! disable the CAN Interrupt in the SRN */
; ..\component\Can\Implementation\Can.c	   432  # define kCanMCMcanSRCR_Mask                  0x00003CFFu   /*! Mask for Service Request Node register */
; ..\component\Can\Implementation\Can.c	   433  
; ..\component\Can\Implementation\Can.c	   434  
; ..\component\Can\Implementation\Can.c	   435  
; ..\component\Can\Implementation\Can.c	   436  
; ..\component\Can\Implementation\Can.c	   437  
; ..\component\Can\Implementation\Can.c	   438  
; ..\component\Can\Implementation\Can.c	   439  
; ..\component\Can\Implementation\Can.c	   440  /*  High Priority Message Status Register (HPMS):
; ..\component\Can\Implementation\Can.c	   441  Bits 16     FLST Filter List
; ..\component\Can\Implementation\Can.c	   442  Indicates the filter list of the matching filter element.
; ..\component\Can\Implementation\Can.c	   443  0 Standard Filter List
; ..\component\Can\Implementation\Can.c	   444  1 Extended Filter List
; ..\component\Can\Implementation\Can.c	   445  
; ..\component\Can\Implementation\Can.c	   446  Bits 17:23  FIDX Filter Index
; ..\component\Can\Implementation\Can.c	   447  Index of matching filter element. Range is 0 to SIDFC[LSS] - 1 resp. XIDFC[LSE] - 1.
; ..\component\Can\Implementation\Can.c	   448  
; ..\component\Can\Implementation\Can.c	   449  Bits 24:25  MSI Message Storage Indicator
; ..\component\Can\Implementation\Can.c	   450  00 No FIFO selected
; ..\component\Can\Implementation\Can.c	   451  01 FIFO overrun
; ..\component\Can\Implementation\Can.c	   452  10 Message stored in FIFO 0
; ..\component\Can\Implementation\Can.c	   453  11 Message stored in FIFO 1
; ..\component\Can\Implementation\Can.c	   454  
; ..\component\Can\Implementation\Can.c	   455  Bits 26:31  BIDX Buffer Index
; ..\component\Can\Implementation\Can.c	   456  Index of Rx FIFO element to which the message was stored. Only valid when MSI[1] = '1'.
; ..\component\Can\Implementation\Can.c	   457  */
; ..\component\Can\Implementation\Can.c	   458  #define kCanHPMS_FLST_STD               0x00000000UL
; ..\component\Can\Implementation\Can.c	   459  #define kCanHPMS_FLST_EXT               0x00008000UL
; ..\component\Can\Implementation\Can.c	   460  #define kCanHPMS_FIDX                   0x00007F00UL
; ..\component\Can\Implementation\Can.c	   461  #define kCanHPMS_MSI_NOFIFO             0x00000000UL
; ..\component\Can\Implementation\Can.c	   462  #define kCanHPMS_MSI_FIFO_OWFL          0x00000040UL
; ..\component\Can\Implementation\Can.c	   463  #define kCanHPMS_MSI_FIFO_0             0x00000080UL
; ..\component\Can\Implementation\Can.c	   464  #define kCanHPMS_MSI_FIFO_1             0x000000C0UL
; ..\component\Can\Implementation\Can.c	   465  #define kCanHPMS_BIDX                   0x0000003FUL
; ..\component\Can\Implementation\Can.c	   466  
; ..\component\Can\Implementation\Can.c	   467  /* Standard Message ID Filter element:
; ..\component\Can\Implementation\Can.c	   468    Bits 31:30 SFT[1:0] Standard Filter Type
; ..\component\Can\Implementation\Can.c	   469    00 Range filter from SF1ID to SF2ID (with SF2ID >= SF1ID)
; ..\component\Can\Implementation\Can.c	   470    01 Dual ID filter for SF1ID or SF2ID
; ..\component\Can\Implementation\Can.c	   471    10 Classic filter: SF1ID = filter, SF2ID = mask
; ..\component\Can\Implementation\Can.c	   472    11 Reserved
; ..\component\Can\Implementation\Can.c	   473  
; ..\component\Can\Implementation\Can.c	   474    Bit 29:27 SFEC[2:0] Standard Filter Element Configuration
; ..\component\Can\Implementation\Can.c	   475    000 Disable filter element
; ..\component\Can\Implementation\Can.c	   476    001 Store in Rx FIFO 0 if filter matches
; ..\component\Can\Implementation\Can.c	   477    010 Store in Rx FIFO 1 if filter matches
; ..\component\Can\Implementation\Can.c	   478    011 Reject ID if filter matches
; ..\component\Can\Implementation\Can.c	   479    100 Set priority if filter matches
; ..\component\Can\Implementation\Can.c	   480    101 Set priority and store in FIFO 0 if filter matches
; ..\component\Can\Implementation\Can.c	   481    110 Set priority and store in FIFO 1 if filter matches
; ..\component\Can\Implementation\Can.c	   482    111 Store into Rx Buffer or as debug message, configuration of SFT[1:0] ignored
; ..\component\Can\Implementation\Can.c	   483    All enabled filter elements are used for acceptance filtering of standard frames. 
; ..\component\Can\Implementation\Can.c	   484    Acceptance filtering stops at the first matching enabled filter element or when the end 
; ..\component\Can\Implementation\Can.c	   485    of the filter list is reached. 
; ..\component\Can\Implementation\Can.c	   486    If SFEC = '100', '101', or '110' a match generates an interrupt (if enabled).
; ..\component\Can\Implementation\Can.c	   487    In this case register HPMS is updated with the status of the priority match.
; ..\component\Can\Implementation\Can.c	   488  
; ..\component\Can\Implementation\Can.c	   489    Bits 26:16 SFID1[10:0] Standard Filter ID 1
; ..\component\Can\Implementation\Can.c	   490    First ID of standard ID filter element.
; ..\component\Can\Implementation\Can.c	   491    When filtering for debug messages this field defines the ID of a standard debug
; ..\component\Can\Implementation\Can.c	   492    message to be stored to the re-assigned Rx FIFO 1 element 61...63. 
; ..\component\Can\Implementation\Can.c	   493    The received identifiers must match exactly, no masking mechanism is used.
; ..\component\Can\Implementation\Can.c	   494  
; ..\component\Can\Implementation\Can.c	   495    Bits 10:0 SFID2[10:0] Standard Filter ID 2
; ..\component\Can\Implementation\Can.c	   496    Second ID of standard ID filter element.
; ..\component\Can\Implementation\Can.c	   497    When filtering for debug messages SFID2[5:0] defines the Rx FIFO 1 element number 
; ..\component\Can\Implementation\Can.c	   498    for storage of a matching debug message.
; ..\component\Can\Implementation\Can.c	   499    SFID2[10:9] decides whether the received message is treated as message A, B, or C of 
; ..\component\Can\Implementation\Can.c	   500    the debug message sequence:
; ..\component\Can\Implementation\Can.c	   501    00= Reserved
; ..\component\Can\Implementation\Can.c	   502    01= Message A
; ..\component\Can\Implementation\Can.c	   503    10= Message B
; ..\component\Can\Implementation\Can.c	   504    11= Message C  */
; ..\component\Can\Implementation\Can.c	   505  #define kCanSFE_SFTRange               0x00000000UL
; ..\component\Can\Implementation\Can.c	   506  #define kCanSFE_SFTDualId              0x40000000UL
; ..\component\Can\Implementation\Can.c	   507  #define kCanSFE_SFTClassic             0x80000000UL
; ..\component\Can\Implementation\Can.c	   508  #define kCanSFE_SFTRes                 0xC0000000UL
; ..\component\Can\Implementation\Can.c	   509  
; ..\component\Can\Implementation\Can.c	   510  #define kCanSFE_SFEC_Disable           0x00000000UL
; ..\component\Can\Implementation\Can.c	   511  #define kCanSFE_SFEC_F0                0x08000000UL
; ..\component\Can\Implementation\Can.c	   512  #define kCanSFE_SFEC_F1                0x10000000UL
; ..\component\Can\Implementation\Can.c	   513  #define kCanSFE_SFEC_Reject            0x18000000UL
; ..\component\Can\Implementation\Can.c	   514  #define kCanSFE_SFEC_SetPrio           0x20000000UL
; ..\component\Can\Implementation\Can.c	   515  #define kCanSFE_SFEC_SetPrioStoreF0    0x28000000UL
; ..\component\Can\Implementation\Can.c	   516  #define kCanSFE_SFEC_SetPrioStoreF1    0x30000000UL
; ..\component\Can\Implementation\Can.c	   517  #define kCanSFE_SFEC                   0x38000000UL
; ..\component\Can\Implementation\Can.c	   518  
; ..\component\Can\Implementation\Can.c	   519  #define kCanSFE_SFID1                  0x07FF0000UL  /*! bits 16:26 */
; ..\component\Can\Implementation\Can.c	   520  #define kCanSFE_Res                    0x0000F800UL  /*! bits 11:15 */
; ..\component\Can\Implementation\Can.c	   521  #define kCanSFE_SFID2                  0x000007FFUL  /*! bits  0:10 */
; ..\component\Can\Implementation\Can.c	   522  #define kCanSFE_SFID2_RBSA             0x0000003FUL  /*! bits  0:5 */
; ..\component\Can\Implementation\Can.c	   523  
; ..\component\Can\Implementation\Can.c	   524  /* Extended message ID filter element:
; ..\component\Can\Implementation\Can.c	   525    F0 Bits 31:29 EFEC[2:0] Extended Filter Element Configuration 
; ..\component\Can\Implementation\Can.c	   526    000 Disable filter element
; ..\component\Can\Implementation\Can.c	   527    001 Store in Rx FIFO 0 if filter matches
; ..\component\Can\Implementation\Can.c	   528    010 Store in Rx FIFO 1 if filter matches
; ..\component\Can\Implementation\Can.c	   529    011 Reject ID if filter matches
; ..\component\Can\Implementation\Can.c	   530    100 Set priority if filter matches
; ..\component\Can\Implementation\Can.c	   531    101 Set priority and store in FIFO 0 if filter matches
; ..\component\Can\Implementation\Can.c	   532    110 Set priority and store in FIFO 1 if filter matches
; ..\component\Can\Implementation\Can.c	   533    111 Store as debug message, configuration of EFT[1:0] ignored
; ..\component\Can\Implementation\Can.c	   534  
; ..\component\Can\Implementation\Can.c	   535    F0 Bits 28:0 EFID1[28:0] Extended Filter ID 1
; ..\component\Can\Implementation\Can.c	   536    When filtering for debug messages this field defines the ID of a extended debug 
; ..\component\Can\Implementation\Can.c	   537    message to be stored to the re-assigned Rx FIFO 1 element 61...63. The received 
; ..\component\Can\Implementation\Can.c	   538    identifiers must match exactly, no masking mechanism is used.
; ..\component\Can\Implementation\Can.c	   539  
; ..\component\Can\Implementation\Can.c	   540    F0 Bits 28:0  EFID1[28:0]
; ..\component\Can\Implementation\Can.c	   541  
; ..\component\Can\Implementation\Can.c	   542    F1 Bits 31:30 EFT[1:0] Extended Filter Type
; ..\component\Can\Implementation\Can.c	   543    00 Range filter from EF1ID to EF2ID (EF2ID >= EF1ID)
; ..\component\Can\Implementation\Can.c	   544    01 Dual ID filter for EF1ID or EF2ID
; ..\component\Can\Implementation\Can.c	   545    10 Classic filter: EF1ID = filter, EF2ID = mask
; ..\component\Can\Implementation\Can.c	   546    11 Range filter from EF1ID to EF2ID (EF2ID >= EF1ID), XIDAM mask not applied
; ..\component\Can\Implementation\Can.c	   547  
; ..\component\Can\Implementation\Can.c	   548    F1 Bits 28:0 EFID2[28:0]
; ..\component\Can\Implementation\Can.c	   549    Extended Filter ID 2
; ..\component\Can\Implementation\Can.c	   550    Second ID of extended ID filter element.
; ..\component\Can\Implementation\Can.c	   551    When filtering for debug messages EFID2[5:0] defines the Rx FIFO 1 element number 
; ..\component\Can\Implementation\Can.c	   552    for storage of a matching debug message.
; ..\component\Can\Implementation\Can.c	   553    EFID2[10:9] decides whether the received message is treated as message A, B, or C of 
; ..\component\Can\Implementation\Can.c	   554    the debug message sequence.
; ..\component\Can\Implementation\Can.c	   555    00= Reserved
; ..\component\Can\Implementation\Can.c	   556    01= Message A
; ..\component\Can\Implementation\Can.c	   557    10= Message B
; ..\component\Can\Implementation\Can.c	   558    11= Message C */
; ..\component\Can\Implementation\Can.c	   559  #define kCanEFE_EFTRangewMask          kCanSFE_SFTRange
; ..\component\Can\Implementation\Can.c	   560  #define kCanEFE_EFTDualId              kCanSFE_SFTDualId
; ..\component\Can\Implementation\Can.c	   561  #define kCanEFE_EFTClassic             kCanSFE_SFTClassic
; ..\component\Can\Implementation\Can.c	   562  #define kCanEFE_EFTRangewoMask         0xC0000000UL
; ..\component\Can\Implementation\Can.c	   563  
; ..\component\Can\Implementation\Can.c	   564  #define kCanEFE_EFEC_Disable           0x00000000UL
; ..\component\Can\Implementation\Can.c	   565  #define kCanEFE_EFEC_F0                0x20000000UL
; ..\component\Can\Implementation\Can.c	   566  #define kCanEFE_EFEC_F1                0x40000000UL
; ..\component\Can\Implementation\Can.c	   567  #define kCanEFE_EFEC_Reject            0x60000000UL
; ..\component\Can\Implementation\Can.c	   568  #define kCanEFE_EFEC_SetPrio           0x80000000UL
; ..\component\Can\Implementation\Can.c	   569  #define kCanEFE_EFEC_SetPrioStoreF0    0xA0000000UL
; ..\component\Can\Implementation\Can.c	   570  #define kCanEFE_EFEC_SetPrioStoreF1    0xC0000000UL
; ..\component\Can\Implementation\Can.c	   571  #define kCanEFE_EFEC                   0xE0000000UL
; ..\component\Can\Implementation\Can.c	   572  
; ..\component\Can\Implementation\Can.c	   573  #define kCanEFE_EFID1                  0x1FFFFFFFUL  /*! bits  0:28 */
; ..\component\Can\Implementation\Can.c	   574  #define kCanEFE_Res                    0x02000000UL  /*! bits    29 */
; ..\component\Can\Implementation\Can.c	   575  #define kCanEFE_EFID2                  0x1FFFFFFFUL  /*! bits  0:28 */
; ..\component\Can\Implementation\Can.c	   576  #define kCanEFE_EFID2_RBSA             0x0000003FUL  /*! bits  0:5 */
; ..\component\Can\Implementation\Can.c	   577  
; ..\component\Can\Implementation\Can.c	   578  #define kCanSIDFCMax                   128  /* max number of std filters per channel */
; ..\component\Can\Implementation\Can.c	   579  #define kCanXIDFCMax                    64  /* max number of ext filters per channel */
; ..\component\Can\Implementation\Can.c	   580  
; ..\component\Can\Implementation\Can.c	   581  
; ..\component\Can\Implementation\Can.c	   582  /* Rx FIFO 0/1 Configuration (RXFnC):
; ..\component\Can\Implementation\Can.c	   583  Bits 0          Blocking or overwrite mode 
; ..\component\Can\Implementation\Can.c	   584  Bits 1:7        F0WM Rx FIFO 0 Watermark
; ..\component\Can\Implementation\Can.c	   585                  0     Watermark interrupt disabled
; ..\component\Can\Implementation\Can.c	   586                  1-64  Level for Rx FIFO 0 watermark interrupt (IR[RF0W])
; ..\component\Can\Implementation\Can.c	   587                  >64   Watermark interrupt disabled
; ..\component\Can\Implementation\Can.c	   588  Bits 8:9        Reserved
; ..\component\Can\Implementation\Can.c	   589  Bits 10:15      F0S Rx FIFO 0 Size
; ..\component\Can\Implementation\Can.c	   590                  0 No Rx FIFO 0
; ..\component\Can\Implementation\Can.c	   591                  1-64 Number of Rx FIFO 0 elements
; ..\component\Can\Implementation\Can.c	   592                  >64 Values greater than 64 are interpreted as 64
; ..\component\Can\Implementation\Can.c	   593                  The Rx FIFO 0 elements are indexed from 0 to F0S-1
; ..\component\Can\Implementation\Can.c	   594  Bits 16:29      FOSA Rx FIFO 0 Start Address
; ..\component\Can\Implementation\Can.c	   595                  Start address of Rx FIFO 0 in Message RAM (32-bit word address, Figure 547).
; ..\component\Can\Implementation\Can.c	   596  Bits 30:31      Reserved */
; ..\component\Can\Implementation\Can.c	   597  #define kCanRXF0C_F0WM         0x7F000000UL
; ..\component\Can\Implementation\Can.c	   598  #define kCanRXF0C_F0S          0x007F0000UL
; ..\component\Can\Implementation\Can.c	   599  #define kCanRXF1C_F0WM         kCanRXF0C_F0WM
; ..\component\Can\Implementation\Can.c	   600  #define kCanRXF1C_F0S          0x007F0000UL
; ..\component\Can\Implementation\Can.c	   601  #define kCanRXFnOM_BLOCK       0x00000000UL        /*! Blocking Mode  */
; ..\component\Can\Implementation\Can.c	   602  #define kCanRXFnOM_OVERWRITE   0x80000000UL        /*! Overwrite Mode */
; ..\component\Can\Implementation\Can.c	   603  
; ..\component\Can\Implementation\Can.c	   604  /* Tx Buffer Configuration Register (TXBC):
; ..\component\Can\Implementation\Can.c	   605  Bit 1       TFQM Tx FIFO/Queue Mode
; ..\component\Can\Implementation\Can.c	   606              0 Tx FIFO operation
; ..\component\Can\Implementation\Can.c	   607              1 Tx Queue operation
; ..\component\Can\Implementation\Can.c	   608  Bits 2:7    TFQS Tx FIFO/Queue Size
; ..\component\Can\Implementation\Can.c	   609              0   No Tx FIFO/Queue
; ..\component\Can\Implementation\Can.c	   610              1-32 Number of Tx Buffers used for Tx FIFO/Queue
; ..\component\Can\Implementation\Can.c	   611              >32 Values greater than 32 are interpreted as 32
; ..\component\Can\Implementation\Can.c	   612  Bits 10:15  NDTB Number of Dedicated Transmit Buffers
; ..\component\Can\Implementation\Can.c	   613              0   No Dedicated Tx Buffers
; ..\component\Can\Implementation\Can.c	   614              1-32 Number of Dedicated Tx Buffers
; ..\component\Can\Implementation\Can.c	   615              >32 Values greater than 32 are interpreted as 32
; ..\component\Can\Implementation\Can.c	   616  Bits 16:29  TBSA Tx Buffers Start Address in Message RAM */
; ..\component\Can\Implementation\Can.c	   617  #define kCanTXBC_TFQM_MODE            0x40000000UL /*! 0=FIFO/1=QUEUE Mode */
; ..\component\Can\Implementation\Can.c	   618  #define kCanTXBC_TFQS                 0x3F000000UL /*! (1..32) FIFO/QUEUE size */
; ..\component\Can\Implementation\Can.c	   619  #define kCanTXBC_NDTB                 0x20u        /*! see CanTXBC: (1..32) Number of dedicated Tx buffers */
; ..\component\Can\Implementation\Can.c	   620  #define kCanTXBC_TBSA                 0x0000FFFCUL /*! Tx Buffer Start Address */
; ..\component\Can\Implementation\Can.c	   621  
; ..\component\Can\Implementation\Can.c	   622  #define kCanTXBE_EFC                  0x00800000UL /*! Tx Buffer Event Fifo Control */
; ..\component\Can\Implementation\Can.c	   623  
; ..\component\Can\Implementation\Can.c	   624  /* Tx Buffer Request Pending Register (TXBRP) */
; ..\component\Can\Implementation\Can.c	   625  #define kCanTXBRP_RP                  0x00000001UL   /* Tx request pending */
; ..\component\Can\Implementation\Can.c	   626  /* Tx Buffer confirmation and cancellation interrupts */
; ..\component\Can\Implementation\Can.c	   627  #define kCanTXBTIE_ENABLE_ALL         0xFFFFFFFFUL
; ..\component\Can\Implementation\Can.c	   628  #define kCanTXBCIE_ENABLE_ALL         0xFFFFFFFFUL
; ..\component\Can\Implementation\Can.c	   629  /* Frame detection */
; ..\component\Can\Implementation\Can.c	   630  #define kCanFrm_XTD                   0x40000000UL
; ..\component\Can\Implementation\Can.c	   631  #define kCanFrm_RTR                   0x20000000UL
; ..\component\Can\Implementation\Can.c	   632  
; ..\component\Can\Implementation\Can.c	   633  /* Tx Event FIFO Configuration (TXEFC):
; ..\component\Can\Implementation\Can.c	   634  Bits [0:1]      Reserved.
; ..\component\Can\Implementation\Can.c	   635  Bits [2:7]      EFWM Event FIFO Watermark.
; ..\component\Can\Implementation\Can.c	   636                  0 Watermark interrupt disabled
; ..\component\Can\Implementation\Can.c	   637                  1..32 Level for Tx Event FIFO watermark interrupt (IR[TEFW])
; ..\component\Can\Implementation\Can.c	   638                  >32 Watermark interrupt disabled
; ..\component\Can\Implementation\Can.c	   639  Bits [8:9]      Reserved.
; ..\component\Can\Implementation\Can.c	   640  Bits [10:15]    EFS Event FIFO Size.
; ..\component\Can\Implementation\Can.c	   641                  0 Tx Event FIFO disabled
; ..\component\Can\Implementation\Can.c	   642                  1..32 Number of Tx Event FIFO elements
; ..\component\Can\Implementation\Can.c	   643                  >32 Values greater than 32 are interpreted as 32
; ..\component\Can\Implementation\Can.c	   644                  The Tx Event FIFO elements are indexed from 0 to EFS - 1
; ..\component\Can\Implementation\Can.c	   645  Bits [16:29]    EFSA Event FIFO Start Address.
; ..\component\Can\Implementation\Can.c	   646                  Start address of Tx Event FIFO in Message RAM (32-bit word address,Figure 547.
; ..\component\Can\Implementation\Can.c	   647  Bits [30:31]    Reserved. */
; ..\component\Can\Implementation\Can.c	   648  #define kCanTXEFC_EFWM        0x3F000000UL  /*! '0' or '>32' means INT disabled */
; ..\component\Can\Implementation\Can.c	   649  #define kCanTXEFC_EFS         0x003F0000UL  /*! '0' or '>32' means Event Fifo disabled */
; ..\component\Can\Implementation\Can.c	   650  #define kCanTXEFC_EFSA        0x0000FFFCUL  /*! Event Fifo Start Address */
; ..\component\Can\Implementation\Can.c	   651  
; ..\component\Can\Implementation\Can.c	   652  /* Bitmasks of MCAN ECR */
; ..\component\Can\Implementation\Can.c	   653  #define kCanECR_CEL                     0x00FF0000UL  /*! CAN error logging     */
; ..\component\Can\Implementation\Can.c	   654  #define kCanECR_RP                      0x00008000UL  /*! receive error passive */
; ..\component\Can\Implementation\Can.c	   655  #define kCanECR_REC                     0x00007F00UL  /*! Rx error counter      */
; ..\component\Can\Implementation\Can.c	   656  #define kCanECR_TEC                     0x000000FFUL  /*! Tx error counter      */
; ..\component\Can\Implementation\Can.c	   657  /* Protocol Status Register (PSR): */
; ..\component\Can\Implementation\Can.c	   658  #define kCanPSR_REDL                    0x00002000UL /*! Received CAN FD Message with EDL flag */
; ..\component\Can\Implementation\Can.c	   659  #define kCanPSR_RBRS                    0x00001000UL /*! BRS flag of last received CAN FD Message */
; ..\component\Can\Implementation\Can.c	   660  #define kCanPSR_RBSI                    0x00000800UL /*! ESI CAN FD Message with ESI flag */
; ..\component\Can\Implementation\Can.c	   661  #define kCanPSR_FLEC                    0x00000700UL /*! Fast Last Error Code */
; ..\component\Can\Implementation\Can.c	   662  #define kCanPSR_PXE                     0x00004000UL /*! Protocol Exception Event */
; ..\component\Can\Implementation\Can.c	   663  #define kCanPSR_BO                      0x00000080UL /*! Bus_Off status */
; ..\component\Can\Implementation\Can.c	   664  #define kCanPSR_EW                      0x00000040UL /*! Warning status */
; ..\component\Can\Implementation\Can.c	   665  #define kCanPSR_EP                      0x00000020UL /*! Error Passive  */
; ..\component\Can\Implementation\Can.c	   666  #define kCanPSR_ACT                     0x00000018UL /*! Activity */
; ..\component\Can\Implementation\Can.c	   667  #define kCanPSR_ACT_SYNC                0x00000000UL /*! Activity: synchronizing */
; ..\component\Can\Implementation\Can.c	   668  #define kCanPSR_ACT_IDLE                0x00000008UL /*! Activity: idle          */
; ..\component\Can\Implementation\Can.c	   669  #define kCanPSR_ACT_RX                  0x00000010UL /*! Activity: reception     */
; ..\component\Can\Implementation\Can.c	   670  #define kCanPSR_ACT_TX                  0x00000018UL /*! Activity: transmission  */
; ..\component\Can\Implementation\Can.c	   671  #define kCanPSR_LEC                     0x00000007UL /*! last error code */
; ..\component\Can\Implementation\Can.c	   672  
; ..\component\Can\Implementation\Can.c	   673  
; ..\component\Can\Implementation\Can.c	   674  /* Protocol Status Register (PSR):
; ..\component\Can\Implementation\Can.c	   675  Bit 24      BO  Bus_Off Status
; ..\component\Can\Implementation\Can.c	   676              1  The M_CAN is in Bus_Off state
; ..\component\Can\Implementation\Can.c	   677  Bit 25      EW  Warning Status
; ..\component\Can\Implementation\Can.c	   678              0  Both error counters are below the Error_Warning limit of 96
; ..\component\Can\Implementation\Can.c	   679              1  At least one of error counter has reached the Error_Warning limit of 96
; ..\component\Can\Implementation\Can.c	   680  Bit 26      EP  Error Passive
; ..\component\Can\Implementation\Can.c	   681              0  Error_Active state (takes part in bus communication and sends an active error flag when an error has been detected)
; ..\component\Can\Implementation\Can.c	   682              1  M_CAN is in the Error_Passive state
; ..\component\Can\Implementation\Can.c	   683  Bit 27:28   ACT Activity - Monitors the module's CAN communication state.
; ..\component\Can\Implementation\Can.c	   684              00  Synchronizing - node is synchronizing on CAN communication
; ..\component\Can\Implementation\Can.c	   685              01  Idle - node is neither receiver nor transmitter
; ..\component\Can\Implementation\Can.c	   686              10  Receiver - node is operating as receiver
; ..\component\Can\Implementation\Can.c	   687              11  Transmitter - node is operating as transmitter 
; ..\component\Can\Implementation\Can.c	   688  Bits 29:31  LEC Last Error Code (will be cleared to '0' when a message has been transferred (Rx or Tx) without error)
; ..\component\Can\Implementation\Can.c	   689              0    No Error: No error occurred since LEC has been reset by successful reception or transmission.
; ..\component\Can\Implementation\Can.c	   690              1    Stuff Error: More than 5 equal bits in a sequence have occurred in a part of a received message where this is not allowed.
; ..\component\Can\Implementation\Can.c	   691              2    Form Error: A fixed format part of a received frame has the wrong format.
; ..\component\Can\Implementation\Can.c	   692              3    AckError: The message transmitted by the M_CAN was not acknowledged by another node.
; ..\component\Can\Implementation\Can.c	   693              4    Bit1Error: During transmission (except of the arbitration field): device wants to send a recessive level but the monitored bus value was dominant
; ..\component\Can\Implementation\Can.c	   694              5    Bit0Error: During transmission (message, ACK bit, active error flag, overload flag) device wants to send a dominant level but the monitored bus value was recessive. 
; ..\component\Can\Implementation\Can.c	   695                   During Bus_Off recovery this status is set each time a sequence of 11 recessive bits is monitored (monitor proceeding of Bus_Off recovery sequence).
; ..\component\Can\Implementation\Can.c	   696              6    CRCError: CRC of incoming message != CRC calculated from received data.
; ..\component\Can\Implementation\Can.c	   697              7    NoChange: no CAN bus event was detected since the last read access (any read access to the PSR re-initializes the LEC to '7') */
; ..\component\Can\Implementation\Can.c	   698  
; ..\component\Can\Implementation\Can.c	   699  #define kCanBusoff                  0x01u       /*! CAN driver is in recovery phase after bus off */ 
; ..\component\Can\Implementation\Can.c	   700  #define kCanBusoffInit              0x02u       /*! Driver finished recovery and needs to be initialized */
; ..\component\Can\Implementation\Can.c	   701  #define kCanNormal                  0x03u       /*! Driver completed recovery and is in normal mode */ 
; ..\component\Can\Implementation\Can.c	   702  
; ..\component\Can\Implementation\Can.c	   703  #define kCan_TSCC_TCP               0x00000000UL /*! Timestamp Counter Prescaler (hardware uses one more than the value programmed here) */
; ..\component\Can\Implementation\Can.c	   704  #define kCan_TSCC_TSS               0x00000000UL /*! 00 Timestamp counter value always zero */
; ..\component\Can\Implementation\Can.c	   705  
; ..\component\Can\Implementation\Can.c	   706  
; ..\component\Can\Implementation\Can.c	   707  #define kCan_TOCC_TOP               0x000000C8UL /*! Start value of the Timeout Counter (down-counter, in multiples of CAN bit times) */
; ..\component\Can\Implementation\Can.c	   708  #define kCan_TOCC_TOS               0x00000000UL /*! Timeout Select (00=Continuous operation, 01/10/11=controlled by Tx Event FIFO/by Rx FIFO 0/by Rx FIFO 1 */
; ..\component\Can\Implementation\Can.c	   709  #define kCan_TOCC_ETOC              0x00000001UL /*! 0=Timeout Counter disabled, 1=Timeout Counter enabled */
; ..\component\Can\Implementation\Can.c	   710  
; ..\component\Can\Implementation\Can.c	   711  /* (IR)  The flags are set when one of the listed conditions is detected (edge-sensitive). 
; ..\component\Can\Implementation\Can.c	   712          The flags remain set until the Host clears them. 
; ..\component\Can\Implementation\Can.c	   713          A flag is cleared by writing a '1' to the corresponding bit position. Writing a '0' has no effect. 
; ..\component\Can\Implementation\Can.c	   714          A hard reset will clear the register. 
; ..\component\Can\Implementation\Can.c	   715    (IE)  The settings determine which status changes in the IR will be signalled on an interrupt line.
; ..\component\Can\Implementation\Can.c	   716    (ILE) Each of the two interrupt lines to the CPU can be enabled/disabled separately by programming bits EINT0/EINT1. */
; ..\component\Can\Implementation\Can.c	   717  #if !defined(kCanIR_CLEAR_ALL)          /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   718  # if ( CAN_MCAN_REVISION >= 0x0310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   719  #  define kCanIR_CLEAR_ALL              0x3FFFFFFFUL  /*! clear all pending INT flags */
; ..\component\Can\Implementation\Can.c	   720  # else
; ..\component\Can\Implementation\Can.c	   721  #  define kCanIR_CLEAR_ALL              0xFFFFFFFFUL  /*! clear all pending INT flags */
; ..\component\Can\Implementation\Can.c	   722  # endif
; ..\component\Can\Implementation\Can.c	   723  #endif
; ..\component\Can\Implementation\Can.c	   724  
; ..\component\Can\Implementation\Can.c	   725  #if !defined(kCanIE_DISABLE_ALL)        /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   726  # define kCanIE_DISABLE_ALL             0x00000000UL
; ..\component\Can\Implementation\Can.c	   727  #endif
; ..\component\Can\Implementation\Can.c	   728  #define kCan_ALL_ONE                    0xFFFFFFFFUL
; ..\component\Can\Implementation\Can.c	   729  #define kCanIE_ENABLE_ALL               kCan_ALL_ONE /* enable all INTs */
; ..\component\Can\Implementation\Can.c	   730  
; ..\component\Can\Implementation\Can.c	   731  /* Interrupts (IR):
; ..\component\Can\Implementation\Can.c	   732  Bit 0   STE   Stuff Error
; ..\component\Can\Implementation\Can.c	   733  Bit 1   FOE   Format Error
; ..\component\Can\Implementation\Can.c	   734  Bit 2   ACKE  Acknowledge Error
; ..\component\Can\Implementation\Can.c	   735  Bit 3   BE    Bit Error
; ..\component\Can\Implementation\Can.c	   736  Bit 4   CRCE  CRC Error
; ..\component\Can\Implementation\Can.c	   737  Bit 5   WDI   Message RAM Watchdog Interrupt 
; ..\component\Can\Implementation\Can.c	   738  Bit 6   BO    Bus_Off Status
; ..\component\Can\Implementation\Can.c	   739  Bit 7   EW    Warning Status 
; ..\component\Can\Implementation\Can.c	   740  Bit 8   EP    Error Passive Status
; ..\component\Can\Implementation\Can.c	   741  Bit 9   ELO   Error Logging Overflow
; ..\component\Can\Implementation\Can.c	   742  Bit 10  BEU   Message RAM Bit Error Uncorrected
; ..\component\Can\Implementation\Can.c	   743  Bit 11  BEC   Bit Error Corrected
; ..\component\Can\Implementation\Can.c	   744  Bit 12        MPC5746M = Reserved, MPC5777M = DRX (Message stored to Dedicated Rx Buffer)
; ..\component\Can\Implementation\Can.c	   745  Bit 13  TOO   Timeout Occurred
; ..\component\Can\Implementation\Can.c	   746  Bit 14  UMD   Unprocessed Message Discarded
; ..\component\Can\Implementation\Can.c	   747                When a new message is received while the acceptance filtering process for the previously received message has not yet completed, this message is discarded.
; ..\component\Can\Implementation\Can.c	   748  Bit 15  TSW   Timestamp Wraparound
; ..\component\Can\Implementation\Can.c	   749  Bit 16  TEFL  Tx Event FIFO Event Lost
; ..\component\Can\Implementation\Can.c	   750  Bit 17  TEFF  Tx Event FIFO Full
; ..\component\Can\Implementation\Can.c	   751  Bit 18  TEFW  Tx Event FIFO Watermark Reached
; ..\component\Can\Implementation\Can.c	   752  Bit 19  TEFN  Tx Event FIFO New Entry
; ..\component\Can\Implementation\Can.c	   753  Bit 20  TFE   Tx FIFO Empty
; ..\component\Can\Implementation\Can.c	   754  Bit 21  TCF   Transmission Cancellation Finished
; ..\component\Can\Implementation\Can.c	   755  Bit 22  TC    Transmission Completed
; ..\component\Can\Implementation\Can.c	   756  Bit 23  HPM   High Priority Message
; ..\component\Can\Implementation\Can.c	   757  Bit 24  RF1L  Rx FIFO 1 Message Lost
; ..\component\Can\Implementation\Can.c	   758  Bit 25  RF1F  Rx FIFO 1 full
; ..\component\Can\Implementation\Can.c	   759  Bit 26  RF1W  Rx FIFO 1 Watermark Reached
; ..\component\Can\Implementation\Can.c	   760  Bit 27  RF1N  Rx FIFO 1 New Message
; ..\component\Can\Implementation\Can.c	   761  Bit 28  RF0L  Rx FIFO 0 Message Lost
; ..\component\Can\Implementation\Can.c	   762  Bit 29  RF0F  Rx FIFO 0 Full
; ..\component\Can\Implementation\Can.c	   763  Bit 30  RF0W  Rx FIFO 0 Watermark Reached
; ..\component\Can\Implementation\Can.c	   764  Bit 31  RF0N  Rx FIFO 0 New Message  */
; ..\component\Can\Implementation\Can.c	   765  
; ..\component\Can\Implementation\Can.c	   766  #define kCanIR_STE                      0x80000000UL  /*! Stuff Error */
; ..\component\Can\Implementation\Can.c	   767  #define kCanIR_FOE                      0x40000000UL  /*! Format Error */
; ..\component\Can\Implementation\Can.c	   768  #define kCanIR_ACKE                     0x20000000UL /*! A transmitted message was not acknowledged by another node */
; ..\component\Can\Implementation\Can.c	   769  #define kCanIR_CRCE                     0x08000000UL /*! Received CRC did not match the calculated CRC */
; ..\component\Can\Implementation\Can.c	   770  #define kCanIR_WDI                      0x04000000UL /*! Watchdog Interrupt */
; ..\component\Can\Implementation\Can.c	   771  #define kCanIR_BO                       0x02000000UL /*! Bus_Off status changed */
; ..\component\Can\Implementation\Can.c	   772  #define kCanIR_EW                       0x01000000UL /*! Error_Warning status changed */
; ..\component\Can\Implementation\Can.c	   773  #define kCanIR_EP                       0x00800000UL /*! Error_Passive status changed */
; ..\component\Can\Implementation\Can.c	   774  #define kCanIR_BEU                      0x00200000UL /*! Bit Error Uncorrected */
; ..\component\Can\Implementation\Can.c	   775  #define kCanIR_BEC                      0x00100000UL /*! Bit Error Corrected */
; ..\component\Can\Implementation\Can.c	   776  #define kCanIR_DRX                     0x00080000UL /*! Message stored to Dedicated Rx Buffer (check NDAT1/2) */
; ..\component\Can\Implementation\Can.c	   777  #define kCanIR_MRAF                     0x00020000UL /*! Message RAM Access Failure */
; ..\component\Can\Implementation\Can.c	   778  #define kCanIR_PEA                      0x08000000UL /*! Protocol Error in Arbitration Phase */
; ..\component\Can\Implementation\Can.c	   779  #define kCanIR_TOO                      0x00040000UL /*! Timeout Occurred */
; ..\component\Can\Implementation\Can.c	   780  #define kCanIR_TCF                      0x00000400UL /*! Transmission cancellation finished */
; ..\component\Can\Implementation\Can.c	   781  #define kCanIR_TC                       0x00000200UL /*! Transmission completed */
; ..\component\Can\Implementation\Can.c	   782  #define kCanIR_HPM                      0x00000100UL /*! High Priority Message */
; ..\component\Can\Implementation\Can.c	   783  #define kCanIR_RF1L                     0x00000080UL /*! Rx FIFO 1 message lost (also set after write attempt to Rx FIFO 1 of size zero) */
; ..\component\Can\Implementation\Can.c	   784  #define kCanIR_RF1F                     0x00000040UL /*! Rx FIFO 1 full */
; ..\component\Can\Implementation\Can.c	   785  #define kCanIR_RF1W                     0x00000020UL /*! Rx FIFO 1 fill level reached watermark */
; ..\component\Can\Implementation\Can.c	   786  #define kCanIR_RF1N                     0x00000010UL /*! New message written to Rx FIFO 1 */
; ..\component\Can\Implementation\Can.c	   787  #define kCanIR_RF1X                     0x000000F0UL /*! Any Rx FIFO 1 */
; ..\component\Can\Implementation\Can.c	   788  #define kCanIR_RF0L                     0x00000008UL /*! Rx FIFO 0 message lost (also set after write attempt to Rx FIFO 0 of size zero) */
; ..\component\Can\Implementation\Can.c	   789  #define kCanIR_RF0F                     0x00000004UL /*! Rx FIFO 0 full */
; ..\component\Can\Implementation\Can.c	   790  #define kCanIR_RF0W                     0x00000002UL /*! Rx FIFO 0 fill level reached watermark */
; ..\component\Can\Implementation\Can.c	   791  #define kCanIR_RF0N                     0x00000001UL /*! New message written to Rx FIFO 0 */
; ..\component\Can\Implementation\Can.c	   792  #define kCanIR_RF0X                     0x0000000FUL /*! Any Rx FIFO 0 */
; ..\component\Can\Implementation\Can.c	   793  #define kCanIR_TFE                      0x00000800UL /*! Tx FIFO Empty */
; ..\component\Can\Implementation\Can.c	   794  #define kCanIR_TEFN                     0x00001000UL /*! Tx Event FIFO New Entry */
; ..\component\Can\Implementation\Can.c	   795  #define kCanIR_TEFW                     0x00002000UL /*! Tx Event FIFO Watermark Reached */
; ..\component\Can\Implementation\Can.c	   796  #define kCanIR_TEFF                     0x00004000UL /*! Tx Event FIFO Full */
; ..\component\Can\Implementation\Can.c	   797  #define kCanIR_TEFL                     0x00008000UL /*! Tx Event FIFO Event Lost */
; ..\component\Can\Implementation\Can.c	   798  #define kCanIR_TEF_EVTYPE_TX            0x00400000UL /*! Tx Event FIFO Event Type = Tx Event */
; ..\component\Can\Implementation\Can.c	   799  #define kCanIR_TEF_EVTYPE_TXCANCEL      0x00800000UL /*! Tx Event FIFO Event Type = Transmission in spite of cancellation */
; ..\component\Can\Implementation\Can.c	   800  #define kCanIR_TSW                      0x00010000UL /*! Timestamp Wrap-around */
; ..\component\Can\Implementation\Can.c	   801  #define kCanIR_ELO                      0x00400000UL /*! Error Logging Overflow */
; ..\component\Can\Implementation\Can.c	   802  
; ..\component\Can\Implementation\Can.c	   803  /* Fifo (RXFn): */
; ..\component\Can\Implementation\Can.c	   804  #define kCanRXFnS_FnGI                  0x00003F00UL  /*! Fifo Get Index */
; ..\component\Can\Implementation\Can.c	   805  #define kCanRXFnS_FnFL                  0x0000007FUL  /*! Fifo Fill Level */
; ..\component\Can\Implementation\Can.c	   806  
; ..\component\Can\Implementation\Can.c	   807  /*** A change of the CAN operation mode is requested by writing to this bit field. 
; ..\component\Can\Implementation\Can.c	   808  After change to the requested operation mode the bit field is reset to '00' and the status flags FACT and LACT are set accordingly. 
; ..\component\Can\Implementation\Can.c	   809  In case the requested CAN operation mode is not enabled, the value written to CMR is retained until it is overwritten by the next mode change request. 
; ..\component\Can\Implementation\Can.c	   810  Default is normal CAN operation 
; ..\component\Can\Implementation\Can.c	   811  CAN Mode Request
; ..\component\Can\Implementation\Can.c	   812    00 unchanged
; ..\component\Can\Implementation\Can.c	   813    01 Long Frame Mode request
; ..\component\Can\Implementation\Can.c	   814    10 Long + Fast Frame Mode request
; ..\component\Can\Implementation\Can.c	   815    11 Normal CAN operation request
; ..\component\Can\Implementation\Can.c	   816  CAN Mode Enable
; ..\component\Can\Implementation\Can.c	   817    00 Normal CAN operation according to ISO11898-1
; ..\component\Can\Implementation\Can.c	   818    01 Long        Frame Mode enabled: transmission of long, reception of long and fast CAN FD frames is enabled
; ..\component\Can\Implementation\Can.c	   819    10 Long + Fast Frame Mode enabled: transmission and reception of long and fast CAN FD frames is enabled
; ..\component\Can\Implementation\Can.c	   820    11 Long + Fast Frame Mode enabled: transmission and reception of long and fast CAN FD frames is enabled ***/
; ..\component\Can\Implementation\Can.c	   821  #if ( CAN_MCAN_REVISION >= 0x0310UL )    /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   822  /***  - CMR removed, transmit format configured in Tx Buffer element
; ..\component\Can\Implementation\Can.c	   823        - CME replaced by FDOE and BRSE ***/
; ..\component\Can\Implementation\Can.c	   824  # define kCanCCCR_BRSE                  0x00000200UL /*! Bit Rate Switch enable */
; ..\component\Can\Implementation\Can.c	   825  # define kCanCCCR_FDOE                  0x00000100UL /*! FD operation enable */
; ..\component\Can\Implementation\Can.c	   826  # if ( CAN_MCAN_REVISION >= 0x0315UL )    /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   827  /***  NISO added since Rev. 3.1.5 ***/
; ..\component\Can\Implementation\Can.c	   828  #  define kCanCCCR_NISO                 0x00008000UL /*! Non ISO Operation 
; ..\component\Can\Implementation\Can.c	   829                                                         0= CAN FD frame format according to ISO11898-1
; ..\component\Can\Implementation\Can.c	   830                                                         1= CAN FD frame format according to Bosch CAN FD Spec. V1.0 */
; ..\component\Can\Implementation\Can.c	   831  # endif
; ..\component\Can\Implementation\Can.c	   832  #else
; ..\component\Can\Implementation\Can.c	   833  # define kCanCCCR_CME_CAN20             0x00000300UL /*! NORMAL CAN */
; ..\component\Can\Implementation\Can.c	   834  # define kCanCCCR_CME_LONG              0x00000100UL /*! LONG */
; ..\component\Can\Implementation\Can.c	   835  # define kCanCCCR_CME_LONG_FAST         0x00000200UL /*! LONG & FAST */
; ..\component\Can\Implementation\Can.c	   836  # define kCanCCCR_CMR_CAN20             0x00000C00UL /*! NORMAL CAN */
; ..\component\Can\Implementation\Can.c	   837  # define kCanCCCR_CMR_LONG              0x00000400UL /*! LONG */
; ..\component\Can\Implementation\Can.c	   838  # define kCanCCCR_CMR_LONG_FAST         0x00000800UL /*! LONG & FAST */
; ..\component\Can\Implementation\Can.c	   839  #endif
; ..\component\Can\Implementation\Can.c	   840  
; ..\component\Can\Implementation\Can.c	   841  #define kCanCCCR_TXP                  0x00004000UL /*! Transmit Pause */
; ..\component\Can\Implementation\Can.c	   842  #if ( CAN_MCAN_REVISION >= 0x0310UL )   /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   843  # define kCanCCCR_EFBI                 0x00002000UL /*! new control bit PXHD (Protocol Exception Handling Disable) replaces status flag FDO */
; ..\component\Can\Implementation\Can.c	   844  # define kCanCCCR_PXHD                 0x00001000UL /*! new control bit EFBI (Edge Filtering during Bus Integration) replaces status flag FDBS */
; ..\component\Can\Implementation\Can.c	   845  #else
; ..\component\Can\Implementation\Can.c	   846  # define kCanCCCR_FDO                  0x00001000UL /*! CAN FD Operation */
; ..\component\Can\Implementation\Can.c	   847  # define kCanCCCR_FDBS                 0x00002000UL /*! CAN FD Bit Rate Switching */
; ..\component\Can\Implementation\Can.c	   848  #endif
; ..\component\Can\Implementation\Can.c	   849  
; ..\component\Can\Implementation\Can.c	   850  
; ..\component\Can\Implementation\Can.c	   851  #if !defined( CAN_SET_BR_ID ) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   852  # define CAN_SET_BR_ID  0x0F
; ..\component\Can\Implementation\Can.c	   853  #endif
; ..\component\Can\Implementation\Can.c	   854  
; ..\component\Can\Implementation\Can.c	   855  #if !defined(CAN_NONE) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   856  # define CAN_NONE        0u
; ..\component\Can\Implementation\Can.c	   857  #endif
; ..\component\Can\Implementation\Can.c	   858  #if !defined(CAN_BRS) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   859  # define CAN_BRS         1u
; ..\component\Can\Implementation\Can.c	   860  #endif
; ..\component\Can\Implementation\Can.c	   861  #if !defined(CAN_FULL) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   862  # define CAN_FULL        2u
; ..\component\Can\Implementation\Can.c	   863  #endif
; ..\component\Can\Implementation\Can.c	   864  #if !defined(CAN_FD_RXONLY) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   865  # define CAN_FD_RXONLY   2u
; ..\component\Can\Implementation\Can.c	   866  #endif
; ..\component\Can\Implementation\Can.c	   867  #if !defined(CAN_FD_RXTX) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   868  # define CAN_FD_RXTX     1u
; ..\component\Can\Implementation\Can.c	   869  #endif
; ..\component\Can\Implementation\Can.c	   870  
; ..\component\Can\Implementation\Can.c	   871  #if !defined(STD_ON) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   872  # define STD_ON          1u
; ..\component\Can\Implementation\Can.c	   873  #endif
; ..\component\Can\Implementation\Can.c	   874  #if !defined(STD_OFF) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   875  # define STD_OFF         0u
; ..\component\Can\Implementation\Can.c	   876  #endif
; ..\component\Can\Implementation\Can.c	   877  
; ..\component\Can\Implementation\Can.c	   878  #if !defined (CAN_FD_SUPPORT) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   879  # define CAN_FD_SUPPORT CAN_NONE
; ..\component\Can\Implementation\Can.c	   880  #endif
; ..\component\Can\Implementation\Can.c	   881  
; ..\component\Can\Implementation\Can.c	   882  #if !defined (CAN_TXP_SUPPORT) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   883  # define CAN_TXP_SUPPORT  STD_OFF
; ..\component\Can\Implementation\Can.c	   884  # define C_DISABLE_CAN_TXP_SUPPORT
; ..\component\Can\Implementation\Can.c	   885  #else
; ..\component\Can\Implementation\Can.c	   886  # if (CAN_TXP_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	   887  #  define C_ENABLE_CAN_TXP_SUPPORT
; ..\component\Can\Implementation\Can.c	   888  # else
; ..\component\Can\Implementation\Can.c	   889  #  define C_DISABLE_CAN_TXP_SUPPORT
; ..\component\Can\Implementation\Can.c	   890  # endif
; ..\component\Can\Implementation\Can.c	   891  #endif
; ..\component\Can\Implementation\Can.c	   892  
; ..\component\Can\Implementation\Can.c	   893  #if !defined( kCanNumberOfRxObjects )  /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   894  # define kCanNumberOfRxObjects 0
; ..\component\Can\Implementation\Can.c	   895  #endif
; ..\component\Can\Implementation\Can.c	   896  
; ..\component\Can\Implementation\Can.c	   897  /* Compatibility define */
; ..\component\Can\Implementation\Can.c	   898  
; ..\component\Can\Implementation\Can.c	   899  /* PRQA S 3614 QAC_Can_3614 */ /* MD_Can_3614_LL */
; ..\component\Can\Implementation\Can.c	   900  /* PRQA  L:QAC_Can_3614 */
; ..\component\Can\Implementation\Can.c	   901  
; ..\component\Can\Implementation\Can.c	   902  #define kCanZero                     0u
; ..\component\Can\Implementation\Can.c	   903  
; ..\component\Can\Implementation\Can.c	   904  
; ..\component\Can\Implementation\Can.c	   905  #define kCanRegCheckMaskCCCR_RP        0x00000003UL /*! CCE, INIT */
; ..\component\Can\Implementation\Can.c	   906  #define kCanRegCheckMaskCCCR_CCE       0xFFFFFFFDUL
; ..\component\Can\Implementation\Can.c	   907  
; ..\component\Can\Implementation\Can.c	   908  #if ( CAN_MCAN_REVISION >= 0x0310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   909  # define kCanRegCheckMaskFBTP    0x009F1FFFUL /*! TDC, DBRP, DTSEG1, DTSEG2, DSJW */
; ..\component\Can\Implementation\Can.c	   910  #else
; ..\component\Can\Implementation\Can.c	   911  # define kCanRegCheckMaskFBTP    0x1F9F0F73UL /*! TDCO, TDC, FBRP, FTSEG1, FTSEG2, FSJW */
; ..\component\Can\Implementation\Can.c	   912  #endif  /* MCAN Core Release < 0x0310UL */
; ..\component\Can\Implementation\Can.c	   913  
; ..\component\Can\Implementation\Can.c	   914  #define kCanRegCheckMaskRWD    0x000000FFUL /*! WDC */
; ..\component\Can\Implementation\Can.c	   915  
; ..\component\Can\Implementation\Can.c	   916  # if ( CAN_MCAN_REVISION >= 0x0310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   917  #  if ( CAN_MCAN_REVISION >= 0x0315UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   918  #   define kCanRegCheckMaskCCCR 0x0000F3F7UL /*! NISO, TXP, EFBI, PXHD, BRSE, FDOE, TEST, DAR, MON, CSR, CSA, ASM, CCE, INIT */
; ..\component\Can\Implementation\Can.c	   919  #  else
; ..\component\Can\Implementation\Can.c	   920  #   define kCanRegCheckMaskCCCR 0x000073F7UL /*! TXP, EFBI, PXHD, BRSE, FDOE, TEST, DAR, MON, CSR, CSA, ASM, CCE, INIT */
; ..\component\Can\Implementation\Can.c	   921  #  endif/* MCAN Core Release < 0x0315UL */
; ..\component\Can\Implementation\Can.c	   922  # else  
; ..\component\Can\Implementation\Can.c	   923  #  define kCanRegCheckMaskCCCR 0x00004FF7UL /*! TXP, CMR, CME, TEST, DAR, MON, CSR, CSA, ASM, CCE, INIT */
; ..\component\Can\Implementation\Can.c	   924  # endif/* MCAN Core Release < 0x0310UL */
; ..\component\Can\Implementation\Can.c	   925  
; ..\component\Can\Implementation\Can.c	   926  #if ( CAN_MCAN_REVISION >= 0x0310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   927  # define kCanRegCheckMaskBTP   0xFFFFFF7FUL /*! NSJW, NBRP, NTSEG1, NTSEG2 */
; ..\component\Can\Implementation\Can.c	   928  #else
; ..\component\Can\Implementation\Can.c	   929  # define kCanRegCheckMaskBTP   0x03FF3FFFUL /*! BRP, TSEG, TSEG2, SJW */
; ..\component\Can\Implementation\Can.c	   930  #endif /* MCAN Core Release < 0x0310UL */
; ..\component\Can\Implementation\Can.c	   931  
; ..\component\Can\Implementation\Can.c	   932  #define kCanRegCheckMaskTSCC   0x000F0003UL /*! TCP, TSS */
; ..\component\Can\Implementation\Can.c	   933  #define kCanRegCheckMaskTOCC   0xFFFF0007UL /*! TOP, TOS, ETOC */
; ..\component\Can\Implementation\Can.c	   934  
; ..\component\Can\Implementation\Can.c	   935  #if ( CAN_MCAN_REVISION >= 0x0310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   936  # define kCanRegCheckMaskTDCR   0x00007F7FUL /*! TDCO, TDCF */
; ..\component\Can\Implementation\Can.c	   937  #endif /* MCAN Core Release < 0x0310UL */
; ..\component\Can\Implementation\Can.c	   938  
; ..\component\Can\Implementation\Can.c	   939  #if ( CAN_MCAN_REVISION >= 0x0310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   940  #  define kCanRegCheckMaskIE    0x1FCFFFFFUL /*! PEDE, PEAE, WDIE, BOE, EWE, EPE, ELOE, DRXE, TOOE, MRAFE, TSWE, TEFLE, TEFFE, TEFWE, TEFNE, TFEE, TCFE, TCE, HPME, RF1LE, RF1FE, RF1WE, RF1NE, RF0LE, RF0FE, RF0WE, RF0NE */
; ..\component\Can\Implementation\Can.c	   941  #else
; ..\component\Can\Implementation\Can.c	   942  # define kCanRegCheckMaskIE    0xFFFFFFFFUL /*! STEE, FOEE, ACKEE, BEE, CRCEE, WDIE, BOE, EWE, EPE, ELOE, BEUE, BECE, DRXE, TOOE, MRAFE, TSWE, TEFLE, TEFFE, TEFWE, TEFNE, TFEE, TCFE, TCE, HPME, RF1LE, RF1FE, RF1WE, RF1NE, RF0LE, RF0FE, RF0WE, RF0NE */
; ..\component\Can\Implementation\Can.c	   943  # define kCanRegCheckMaskILS   0xFFFFFFFFUL /*! STEL, FOEL, ACKEL, BEL, CRCEL, WDIL, BOL, EWL, EPL, ELOL, BEUL, BECL, DRXL, TOOL, MRAFL, TSWL, TEFLL, TEFFL, TEFWL, TEFNL, TFEL, TCFL, TCL, HPML, RF1LL, RF1FL, RF1WL, RF1NL, RF0LL, RF0FL, RF0WL, RF0NL */
; ..\component\Can\Implementation\Can.c	   944  #endif /* MCAN Core Release < 0x0310UL */
; ..\component\Can\Implementation\Can.c	   945  
; ..\component\Can\Implementation\Can.c	   946  #define kCanRegCheckMaskGFC    0x0000003FUL /*! ANFS, ANFE, RRFS, RRFE */
; ..\component\Can\Implementation\Can.c	   947  #define kCanRegCheckMaskSIDFC  0x00FFFFFCUL /*! LSS,FLSSA */
; ..\component\Can\Implementation\Can.c	   948  #define kCanRegCheckMaskXIDFC  0x007FFFFCUL /*! LSE, FLESA */
; ..\component\Can\Implementation\Can.c	   949  #define kCanRegCheckMaskXIDAM  0x1FFFFFFFUL /*! EIDM */
; ..\component\Can\Implementation\Can.c	   950  #define kCanRegCheckMaskRXF0C  0xFF7FFFFCUL /*! F0OM,F0WM, F0S, F0SA */
; ..\component\Can\Implementation\Can.c	   951  #define kCanRegCheckMaskRXF0A  0x0000003FUL /*! F0AI */
; ..\component\Can\Implementation\Can.c	   952  #define kCanRegCheckMaskRXBC   0x0000FFFCUL /*! RBSA */
; ..\component\Can\Implementation\Can.c	   953  #define kCanRegCheckMaskRXF1C  0xFF7FFFFCUL /*! F1OM, F1WM, F1S, F1SA */
; ..\component\Can\Implementation\Can.c	   954  #define kCanRegCheckMaskRXF1A  0x0000003FUL /*! F1AI */
; ..\component\Can\Implementation\Can.c	   955  #define kCanRegCheckMaskRXESC  0x00000777UL /*! RBDS, F1DS, F0DS */
; ..\component\Can\Implementation\Can.c	   956  #define kCanRegCheckMaskTXBC   0x7F3FFFFCUL /*! TFQM, TFQS, NDTB, TBSA */
; ..\component\Can\Implementation\Can.c	   957  #define kCanRegCheckMaskTXESC  0x00000007UL /*! TxBufferDataFieldSize */
; ..\component\Can\Implementation\Can.c	   958  #define kCanRegCheckMaskTXBTIE 0xFFFFFFFFUL /*! TIE31...TIE0*/
; ..\component\Can\Implementation\Can.c	   959  #define kCanRegCheckMaskTXEFC  0x3F3FFFFCUL /*! EFWM, EFS, EFSA */
; ..\component\Can\Implementation\Can.c	   960  #if defined ( C_ENABLE_TTCAN_AVAILABLE ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	   961  # define kCanRegCheckMaskTTOCF  0x07FFFFFBUL /*! EVTP, ECC, EGTF, AWL, EECS, IRTO, LDSDL, TM GEN, OM */
; ..\component\Can\Implementation\Can.c	   962  #endif
; ..\component\Can\Implementation\Can.c	   963  
; ..\component\Can\Implementation\Can.c	   964  #if defined( C_ENABLE_STD_ID ) && (kCanNumberOfStandardFilter > 0)
; ..\component\Can\Implementation\Can.c	   965  # define kCanRegCheckMaskSMIDFE_S0   0xFFFF07FFUL /*! SFT, SFEC, SFID1, SFID2 */
; ..\component\Can\Implementation\Can.c	   966  #endif
; ..\component\Can\Implementation\Can.c	   967  #if defined(C_ENABLE_EXTENDED_ID) && (kCanNumberOfExtendedFilter > 0)
; ..\component\Can\Implementation\Can.c	   968  # define kCanRegCheckMaskEMIDFE_F0   0xFFFFFFFFUL /*! EFEC, EFID1 */
; ..\component\Can\Implementation\Can.c	   969  # define kCanRegCheckMaskEMIDFE_F1   0xDFFFFFFFUL /*! EFT, EFID2 */
; ..\component\Can\Implementation\Can.c	   970  #endif
; ..\component\Can\Implementation\Can.c	   971  
; ..\component\Can\Implementation\Can.c	   972  
; ..\component\Can\Implementation\Can.c	   973  
; ..\component\Can\Implementation\Can.c	   974  
; ..\component\Can\Implementation\Can.c	   975  
; ..\component\Can\Implementation\Can.c	   976  # define kCanRegCheckMaskMCMCAN_GRINT        0xFFFFFFFFUL /*! Interrupt routing for Groups */
; ..\component\Can\Implementation\Can.c	   977  # define kCanRegCheckMaskMCMCAN_ACCENNODE0   0xFFFFFFFFUL /*! Access Enable Register */
; ..\component\Can\Implementation\Can.c	   978  # define kCanRegCheckMaskMCMCAN_NPCR         0x00000707UL /*! Node Port Control Register */
; ..\component\Can\Implementation\Can.c	   979  # define kCanRegCheckMaskMCMCANCH_STARTADR   0x0000FFFCUL /*! Start Address Node */
; ..\component\Can\Implementation\Can.c	   980  # define kCanRegCheckMaskMCMCANCH_ENDADR     0x0000FFFCUL /*! End Address Node */
; ..\component\Can\Implementation\Can.c	   981  # define kCanRegCheckMaskMCMCANCH_NTCCR      0x001CCF00UL /*! Node Timer Clock Control Register */
; ..\component\Can\Implementation\Can.c	   982  # define kCanRegCheckMaskMCMCANCH_NTXTTR     0x0100FFFFUL /*! Node Timer X Transmit Trigger Register */
; ..\component\Can\Implementation\Can.c	   983  # define kCanRegCheckMaskMCMCANCH_NTRTR      0x0040FFFFUL /*! Node Timer Receive Timeout Register */
; ..\component\Can\Implementation\Can.c	   984  
; ..\component\Can\Implementation\Can.c	   985  
; ..\component\Can\Implementation\Can.c	   986  
; ..\component\Can\Implementation\Can.c	   987  /* *********************************************************************** */
; ..\component\Can\Implementation\Can.c	   988  /* SafeBSW check (LL)                                                      */
; ..\component\Can\Implementation\Can.c	   989  /* *********************************************************************** */
; ..\component\Can\Implementation\Can.c	   990  #if !defined(CAN_SAFE_BSW) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	   991  # define CAN_SAFE_BSW    STD_OFF
; ..\component\Can\Implementation\Can.c	   992  #endif
; ..\component\Can\Implementation\Can.c	   993  
; ..\component\Can\Implementation\Can.c	   994  #if (CAN_SAFE_BSW == STD_ON)
; ..\component\Can\Implementation\Can.c	   995  # if ( CAN_MCAN_REVISION < 0x0315u )
; ..\component\Can\Implementation\Can.c	   996  #  error "Unsupported MCAN Revision version for SafeBSW !"
; ..\component\Can\Implementation\Can.c	   997  # endif
; ..\component\Can\Implementation\Can.c	   998  #endif
; ..\component\Can\Implementation\Can.c	   999  
; ..\component\Can\Implementation\Can.c	  1000  # if (CAN_SAFE_BSW == STD_ON)
; ..\component\Can\Implementation\Can.c	  1001  #  if !defined(C_ENABLE_USE_OS_INTERRUPT_CONTROL) /* COV_CAN_SAFE_BSW_EXCLUSION_LL */
; ..\component\Can\Implementation\Can.c	  1002  #   error "An unsupported feature is active for SafeBSW!"
; ..\component\Can\Implementation\Can.c	  1003  #  endif
; ..\component\Can\Implementation\Can.c	  1004  # endif
; ..\component\Can\Implementation\Can.c	  1005  /* *********************************************************************** */
; ..\component\Can\Implementation\Can.c	  1006  /* Functional checks (LL)                                                  */
; ..\component\Can\Implementation\Can.c	  1007  /* *********************************************************************** */
; ..\component\Can\Implementation\Can.c	  1008  
; ..\component\Can\Implementation\Can.c	  1009  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	  1010  /* macros                                                                  */
; ..\component\Can\Implementation\Can.c	  1011  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	  1012  /* PRQA S 3453 FctLikeMacroLabel */ /* MD_MSR_FctLikeMacro */
; ..\component\Can\Implementation\Can.c	  1013  
; ..\component\Can\Implementation\Can.c	  1014  /* for LL compatibility */
; ..\component\Can\Implementation\Can.c	  1015  /* hw handles */
; ..\component\Can\Implementation\Can.c	  1016  #define CAN_HL_HW_TX_NORMAL_INDEX(hwch)     (Can_GetTxBasicHwStart(hwch)) 
; ..\component\Can\Implementation\Can.c	  1017  #if defined(CAN_HL_HW_LAYOUT_TXBASIC_FIRST) /* COV_CAN_HW_LAYOUT_TXBASIC_FIRST */
; ..\component\Can\Implementation\Can.c	  1018  # define CAN_HL_HW_TX_STARTINDEX(hwch)      (Can_GetTxBasicHwStart(hwch))
; ..\component\Can\Implementation\Can.c	  1019  #else
; ..\component\Can\Implementation\Can.c	  1020  # define CAN_HL_HW_TX_STARTINDEX(hwch)      (Can_GetTxFullHwStart(hwch))
; ..\component\Can\Implementation\Can.c	  1021  #endif
; ..\component\Can\Implementation\Can.c	  1022  #define CAN_HL_HW_TX_FULL_STARTINDEX(hwch)  (Can_GetTxFullHwStart(hwch))
; ..\component\Can\Implementation\Can.c	  1023  #define CAN_HL_HW_UNUSED_STARTINDEX(hwch)   (Can_GetUnusedHwStart(hwch))
; ..\component\Can\Implementation\Can.c	  1024  #define CAN_HL_HW_RX_FULL_STARTINDEX(hwch)  (Can_GetRxFullHwStart(hwch))
; ..\component\Can\Implementation\Can.c	  1025  #define CAN_HL_HW_RX_BASIC_STARTINDEX(hwch) (Can_GetRxBasicHwStart(hwch))
; ..\component\Can\Implementation\Can.c	  1026  #if defined(CAN_HL_HW_LAYOUT_TXBASIC_FIRST) /* COV_CAN_HW_LAYOUT_TXBASIC_FIRST */
; ..\component\Can\Implementation\Can.c	  1027  # define CAN_HL_HW_TX_STOPINDEX(hwch)       (Can_GetTxFullHwStop(hwch))
; ..\component\Can\Implementation\Can.c	  1028  #else
; ..\component\Can\Implementation\Can.c	  1029  # define CAN_HL_HW_TX_STOPINDEX(hwch)       (Can_GetTxBasicHwStop(hwch))
; ..\component\Can\Implementation\Can.c	  1030  #endif
; ..\component\Can\Implementation\Can.c	  1031  #define CAN_HL_HW_TX_FULL_STOPINDEX(hwch)   (Can_GetTxFullHwStop(hwch))
; ..\component\Can\Implementation\Can.c	  1032  #define CAN_HL_HW_UNUSED_STOPINDEX(hwch)    (Can_GetUnusedHwStop(hwch))
; ..\component\Can\Implementation\Can.c	  1033  #define CAN_HL_HW_RX_FULL_STOPINDEX(hwch)   (Can_GetRxFullHwStop(hwch))
; ..\component\Can\Implementation\Can.c	  1034  #define CAN_HL_HW_RX_BASIC_STOPINDEX(hwch)  (Can_GetRxBasicHwStop(hwch))
; ..\component\Can\Implementation\Can.c	  1035  /* mailbox handles */
; ..\component\Can\Implementation\Can.c	  1036  #define CAN_HL_MB_RX_FULL_STARTINDEX(hwch)  (Can_GetRxFullHandleStart(hwch))
; ..\component\Can\Implementation\Can.c	  1037  #define CAN_HL_MB_RX_BASIC_STARTINDEX(hwch) (Can_GetRxBasicHandleStart(hwch))
; ..\component\Can\Implementation\Can.c	  1038  #define CAN_HL_MB_TX_FULL_STARTINDEX(hwch)  (Can_GetTxFullHandleStart(hwch))
; ..\component\Can\Implementation\Can.c	  1039  #define CAN_HL_MB_TX_BASIC_STARTINDEX(hwch) (Can_GetTxBasicHandleStart(hwch))
; ..\component\Can\Implementation\Can.c	  1040  #define CAN_HL_MB_RX_FULL_STOPINDEX(hwch)   (Can_GetRxFullHandleStop(hwch))
; ..\component\Can\Implementation\Can.c	  1041  #define CAN_HL_MB_RX_BASIC_STOPINDEX(hwch)  (Can_GetRxBasicHandleStop(hwch))
; ..\component\Can\Implementation\Can.c	  1042  #define CAN_HL_MB_TX_FULL_STOPINDEX(hwch)   (Can_GetTxFullHandleStop(hwch))
; ..\component\Can\Implementation\Can.c	  1043  #define CAN_HL_MB_TX_BASIC_STOPINDEX(hwch)  (Can_GetTxBasicHandleStop(hwch))
; ..\component\Can\Implementation\Can.c	  1044  
; ..\component\Can\Implementation\Can.c	  1045  #if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  1046  # if !defined(CAN_RAM_CHECK_MAILBOX_RESULT) /* May be defined by test suite to stimulate RAM_CHECK failure */
; ..\component\Can\Implementation\Can.c	  1047  #  if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  1048  #   define CAN_RAM_CHECK_MAILBOX_RESULT(ch, initParaPtr) CanLL_InitIsMailboxCorrupt((initParaPtr))
; ..\component\Can\Implementation\Can.c	  1049  #  else
; ..\component\Can\Implementation\Can.c	  1050  #   define CAN_RAM_CHECK_MAILBOX_RESULT(ch, initParaPtr) CanLL_InitIsMailboxCorrupt((ch), (initParaPtr))
; ..\component\Can\Implementation\Can.c	  1051  #  endif
; ..\component\Can\Implementation\Can.c	  1052  # endif
; ..\component\Can\Implementation\Can.c	  1053  # if !defined(CAN_RAM_CHECK_FINISHED_CTP) /* May be defined by test suite to check RAM_CHECK finished / executed */
; ..\component\Can\Implementation\Can.c	  1054  #  define CAN_RAM_CHECK_FINISHED_CTP(ch)
; ..\component\Can\Implementation\Can.c	  1055  # endif
; ..\component\Can\Implementation\Can.c	  1056  #endif
; ..\component\Can\Implementation\Can.c	  1057  #if defined(C_ENABLE_CAN_RAM_CHECK_EXTENDED)
; ..\component\Can\Implementation\Can.c	  1058  # if !defined(CAN_RAM_CHECK_BEGIN_REG_RESULT) /* May be defined by test suite to stimulate RAM_CHECK_EXTENDED failure */
; ..\component\Can\Implementation\Can.c	  1059  #  if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  1060  #   define CAN_RAM_CHECK_BEGIN_REG_RESULT(ch, initParaPtr) CanLL_InitBeginIsRegisterCorrupt((initParaPtr))
; ..\component\Can\Implementation\Can.c	  1061  #  else
; ..\component\Can\Implementation\Can.c	  1062  #   define CAN_RAM_CHECK_BEGIN_REG_RESULT(ch, initParaPtr) CanLL_InitBeginIsRegisterCorrupt((ch), (initParaPtr))
; ..\component\Can\Implementation\Can.c	  1063  #  endif
; ..\component\Can\Implementation\Can.c	  1064  # endif
; ..\component\Can\Implementation\Can.c	  1065  # if !defined(CAN_RAM_CHECK_END_REG_RESULT) /* May be defined by test suite to stimulate RAM_CHECK_EXTENDED failure */
; ..\component\Can\Implementation\Can.c	  1066  #  if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  1067  #   define CAN_RAM_CHECK_END_REG_RESULT(ch, initParaPtr) CanLL_InitEndIsRegisterCorrupt((initParaPtr))
; ..\component\Can\Implementation\Can.c	  1068  #  else
; ..\component\Can\Implementation\Can.c	  1069  #   define CAN_RAM_CHECK_END_REG_RESULT(ch, initParaPtr) CanLL_InitEndIsRegisterCorrupt((ch), (initParaPtr))
; ..\component\Can\Implementation\Can.c	  1070  #  endif
; ..\component\Can\Implementation\Can.c	  1071  # endif
; ..\component\Can\Implementation\Can.c	  1072  # if !defined(CAN_RAM_CHECK_READ_BACK_RESULT) /* May be defined by test suite to stimulate RAM_CHECK_EXTENDED failure */
; ..\component\Can\Implementation\Can.c	  1073  #  define CAN_RAM_CHECK_READ_BACK_RESULT(ch)
; ..\component\Can\Implementation\Can.c	  1074  # endif
; ..\component\Can\Implementation\Can.c	  1075  #endif
; ..\component\Can\Implementation\Can.c	  1076  
; ..\component\Can\Implementation\Can.c	  1077  #define CanHL_IsStart(ch) ((Can_GetLogStatus(ch) & CAN_STATUS_START) == CAN_STATUS_START)
; ..\component\Can\Implementation\Can.c	  1078  #define CanHL_IsSleep(ch) ((Can_GetLogStatus(ch) & CAN_STATUS_SLEEP) == CAN_STATUS_SLEEP)
; ..\component\Can\Implementation\Can.c	  1079  #define CanHL_IsStop(ch) ((Can_GetLogStatus(ch) & CAN_STATUS_STOP) == CAN_STATUS_STOP)
; ..\component\Can\Implementation\Can.c	  1080  #define CanHL_IsBusOff(ch) (Can_IsIsBusOff(ch))
; ..\component\Can\Implementation\Can.c	  1081  #define CanHL_IsControllerInit(ch) ((Can_GetLogStatus(ch) & CAN_STATUS_INIT) == CAN_STATUS_INIT)
; ..\component\Can\Implementation\Can.c	  1082  
; ..\component\Can\Implementation\Can.c	  1083  #if defined(C_ENABLE_CAN_FD_USED) /* also for BRS because DLC may be bigger than 8 and will be checked by CanIf */
; ..\component\Can\Implementation\Can.c	  1084  # define CAN_DLC2LEN(dlc) (Can_DlcToFrameLenght[((uint8)(dlc)) & ((uint8)0xFu)])
; ..\component\Can\Implementation\Can.c	  1085  # define CAN_LEN2DLC(length) ((uint8)Can_MessageLengthToDlc[(length)])
; ..\component\Can\Implementation\Can.c	  1086  #else
; ..\component\Can\Implementation\Can.c	  1087  # define CAN_DLC2LEN(dlc) (dlc)
; ..\component\Can\Implementation\Can.c	  1088  # define CAN_LEN2DLC(length) (length)
; ..\component\Can\Implementation\Can.c	  1089  #endif
; ..\component\Can\Implementation\Can.c	  1090  #if defined(C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  1091  # define CAN_MAX_DATALEN_OBJ(Index) Can_GetMailboxDataLen(Index)
; ..\component\Can\Implementation\Can.c	  1092  #else
; ..\component\Can\Implementation\Can.c	  1093  # define CAN_MAX_DATALEN_OBJ(Index) 8u
; ..\component\Can\Implementation\Can.c	  1094  #endif
; ..\component\Can\Implementation\Can.c	  1095  #define CanHL_IsFdMessage(id) (((id) & (Can_IdType)CAN_ID_FD_MASK) == (Can_IdType)CAN_ID_FD_MASK) /* \trace SPEC-60432, SPEC-50586 */
; ..\component\Can\Implementation\Can.c	  1096  #define CanHL_IsFdTxBrs(ch)   (Can_GetInitObjectFdBrsConfig(Can_GetLastInitObject(ch)) == CAN_FD_RXTX) /* \trace SPEC-60432, SPEC-50586 */
; ..\component\Can\Implementation\Can.c	  1097  
; ..\component\Can\Implementation\Can.c	  1098  /* PRQA L:FctLikeMacroLabel */
; ..\component\Can\Implementation\Can.c	  1099  
; ..\component\Can\Implementation\Can.c	  1100  /* PRQA S 3453 FctLikeMacroLabel */ /* MD_MSR_FctLikeMacro */
; ..\component\Can\Implementation\Can.c	  1101  /* 
; ..\component\Can\Implementation\Can.c	  1102    parameter for ApplCanTimerStart(),-End(), -Loop()
; ..\component\Can\Implementation\Can.c	  1103    index has to start with 0, continuous numbers have to be used. Gaps are not allowed! 
; ..\component\Can\Implementation\Can.c	  1104  */
; ..\component\Can\Implementation\Can.c	  1105  
; ..\component\Can\Implementation\Can.c	  1106  # define kCanACTIVE           0x00000001UL /* '1'= used to search or set the active connection  */ 
; ..\component\Can\Implementation\Can.c	  1107  # define CanLL_HwDlcMask      0x000F0000UL /* MCAN register layout */
; ..\component\Can\Implementation\Can.c	  1108  
; ..\component\Can\Implementation\Can.c	  1109  
; ..\component\Can\Implementation\Can.c	  1110  
; ..\component\Can\Implementation\Can.c	  1111  /*
; ..\component\Can\Implementation\Can.c	  1112  |<DataModelStart>| CanLL_TxIsObjFree
; ..\component\Can\Implementation\Can.c	  1113  Relation_Context:
; ..\component\Can\Implementation\Can.c	  1114  # from CanTransmit, CanMsgTransmit, CanCopyDataAndStartTransmission() #
; ..\component\Can\Implementation\Can.c	  1115  Relation:
; ..\component\Can\Implementation\Can.c	  1116  ChannelAmount, TxBasicAmount
; ..\component\Can\Implementation\Can.c	  1117  ChannelAmount, TxFullAmount
; ..\component\Can\Implementation\Can.c	  1118  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  1119  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  1120  Constrain:
; ..\component\Can\Implementation\Can.c	  1121  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  1122  */
; ..\component\Can\Implementation\Can.c	  1123  #define CanLL_TxIsObjFree( hwCh, txObjHandle ) ( ((Cn->TXBC & kCanTXBC_TFQS) > 0UL) ? /* check Fifo/Queue size */ \ 
; ..\component\Can\Implementation\Can.c	  1124              (kCanFalse!=kCanFalse) :  /* N/A: Fifo/Queue exists with size != zero */ \ 
; ..\component\Can\Implementation\Can.c	  1125              ( ((Cn->TXBRP & ((vuint32)(kCanTXBRP_RP << (txObjHandle)))) == 0u) ) )   /* all buffers are dedicated buffers, return true if pending bit is not set */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  1126  /* Each Tx Buffer has its own pending bit. 
; ..\component\Can\Implementation\Can.c	  1127     The bits are set via TXBAR. 
; ..\component\Can\Implementation\Can.c	  1128     The bits are reset after transmission has completed or has been cancelled (via TXBCR).
; ..\component\Can\Implementation\Can.c	  1129  
; ..\component\Can\Implementation\Can.c	  1130     A cancellation request resets the corresponding transmission request pending bit of register TXBRP. 
; ..\component\Can\Implementation\Can.c	  1131     The corresponding TXBCF bit is set for all unsuccessful transmissions.
; ..\component\Can\Implementation\Can.c	  1132     In DAR mode all transmissions are automatically cancelled if they are not successful. */
; ..\component\Can\Implementation\Can.c	  1133  
; ..\component\Can\Implementation\Can.c	  1134  
; ..\component\Can\Implementation\Can.c	  1135  
; ..\component\Can\Implementation\Can.c	  1136  /* Power down mode
; ..\component\Can\Implementation\Can.c	  1137     Controlled by input signal clock stop request or via CCCR[CSR]. 
; ..\component\Can\Implementation\Can.c	  1138     As long as the clock stop request signal is active, bit CCCR[CSR] is read as one. 
; ..\component\Can\Implementation\Can.c	  1139  
; ..\component\Can\Implementation\Can.c	  1140     a) all pending transmission requests are completed
; ..\component\Can\Implementation\Can.c	  1141     b) Bus_Idle is awaited
; ..\component\Can\Implementation\Can.c	  1142     c) CCCR[INIT] is set to '1' (prevent any further CAN transfers)
; ..\component\Can\Implementation\Can.c	  1143     d) Clock stop acknowledge output signal =1, CCCR[CSA] =1 (M_CAN acknowledges that it is ready for power down)
; ..\component\Can\Implementation\Can.c	  1144     In this state, before the clocks are switched off, further register accesses can be made (write access to CCCR[INIT] has no effect)
; ..\component\Can\Implementation\Can.c	  1145     e) Module clock inputs (CAN and Host clock) may be switched off now */
; ..\component\Can\Implementation\Can.c	  1146  /*
; ..\component\Can\Implementation\Can.c	  1147  |<DataModelStart>| CanLL_HwIsStop
; ..\component\Can\Implementation\Can.c	  1148  Relation_Context:
; ..\component\Can\Implementation\Can.c	  1149  Relation:
; ..\component\Can\Implementation\Can.c	  1150  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  1151  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  1152  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  1153  Constrain:
; ..\component\Can\Implementation\Can.c	  1154  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  1155  */
; ..\component\Can\Implementation\Can.c	  1156  #define CanLL_HwIsStop( hwCh )   ((Cn->CCCR & kCanCCCR_INIT) != 0UL)
; ..\component\Can\Implementation\Can.c	  1157  
; ..\component\Can\Implementation\Can.c	  1158  /*
; ..\component\Can\Implementation\Can.c	  1159  |<DataModelStart>| CanLL_HwIsBusOff
; ..\component\Can\Implementation\Can.c	  1160  Relation_Context:
; ..\component\Can\Implementation\Can.c	  1161  Relation:
; ..\component\Can\Implementation\Can.c	  1162  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  1163  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  1164  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  1165  Constrain:
; ..\component\Can\Implementation\Can.c	  1166  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  1167  */
; ..\component\Can\Implementation\Can.c	  1168  #define CanLL_HwIsBusOff( hwCh ) ((Cn->PSR & kCanPSR_BO) != 0UL)
; ..\component\Can\Implementation\Can.c	  1169  
; ..\component\Can\Implementation\Can.c	  1170  #if defined( C_ENABLE_EXTENDED_STATUS )
; ..\component\Can\Implementation\Can.c	  1171  /*
; ..\component\Can\Implementation\Can.c	  1172  |<DataModelStart>| CanLL_HwIsPassive
; ..\component\Can\Implementation\Can.c	  1173  Relation_Context:
; ..\component\Can\Implementation\Can.c	  1174  Relation:
; ..\component\Can\Implementation\Can.c	  1175  CanGetStatus, OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  1176  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  1177  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  1178  Constrain:
; ..\component\Can\Implementation\Can.c	  1179  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  1180  */
; ..\component\Can\Implementation\Can.c	  1181  # define CanLL_HwIsPassive( hwCh ) ((Cn->PSR & kCanPSR_EP) != 0UL)
; ..\component\Can\Implementation\Can.c	  1182  
; ..\component\Can\Implementation\Can.c	  1183  /*
; ..\component\Can\Implementation\Can.c	  1184  |<DataModelStart>| CanLL_HwIsWarning
; ..\component\Can\Implementation\Can.c	  1185  Relation_Context:
; ..\component\Can\Implementation\Can.c	  1186  Relation:
; ..\component\Can\Implementation\Can.c	  1187  CanGetStatus, OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  1188  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  1189  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  1190  Constrain:
; ..\component\Can\Implementation\Can.c	  1191  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  1192  */
; ..\component\Can\Implementation\Can.c	  1193  # define CanLL_HwIsWarning( hwCh )  ((Cn->PSR & kCanPSR_EW) != 0UL)
; ..\component\Can\Implementation\Can.c	  1194  #endif /* C_ENABLE_EXTENDED_STATUS */
; ..\component\Can\Implementation\Can.c	  1195  
; ..\component\Can\Implementation\Can.c	  1196  
; ..\component\Can\Implementation\Can.c	  1197  #if defined( C_ENABLE_HW_LOOP_TIMER )
; ..\component\Can\Implementation\Can.c	  1198  # if defined(C_MULTIPLE_RECEIVE_CHANNEL)
; ..\component\Can\Implementation\Can.c	  1199  #  define CanLL_ApplCanTimerStart(loop)  ApplCanTimerStart(channel, loop)
; ..\component\Can\Implementation\Can.c	  1200  #  define CanLL_ApplCanTimerEnd(loop)    ApplCanTimerEnd(channel, loop)
; ..\component\Can\Implementation\Can.c	  1201  #  define CanLL_ApplCanTimerLoop(loop)   ApplCanTimerLoop(channel, loop)
; ..\component\Can\Implementation\Can.c	  1202  # else
; ..\component\Can\Implementation\Can.c	  1203  #  define CanLL_ApplCanTimerStart(loop)  ApplCanTimerStart(loop)
; ..\component\Can\Implementation\Can.c	  1204  #  define CanLL_ApplCanTimerEnd(loop)    ApplCanTimerEnd(loop)
; ..\component\Can\Implementation\Can.c	  1205  #  define CanLL_ApplCanTimerLoop(loop)   ApplCanTimerLoop(loop)
; ..\component\Can\Implementation\Can.c	  1206  # endif
; ..\component\Can\Implementation\Can.c	  1207  #else
; ..\component\Can\Implementation\Can.c	  1208  # define CanLL_ApplCanTimerStart(loop)
; ..\component\Can\Implementation\Can.c	  1209  # define CanLL_ApplCanTimerEnd(loop)
; ..\component\Can\Implementation\Can.c	  1210  # define CanLL_ApplCanTimerLoop(loop)    (vuint8)(1u)
; ..\component\Can\Implementation\Can.c	  1211  #endif
; ..\component\Can\Implementation\Can.c	  1212  
; ..\component\Can\Implementation\Can.c	  1213  # define CAN_MSG_RAM_SYNC()   
; ..\component\Can\Implementation\Can.c	  1214  
; ..\component\Can\Implementation\Can.c	  1215  
; ..\component\Can\Implementation\Can.c	  1216  #if defined( C_ENABLE_CAN_RAM_CHECK_EXTENDED )
; ..\component\Can\Implementation\Can.c	  1217  # if !defined( C_ENABLE_CAN_RAM_CHECK )
; ..\component\Can\Implementation\Can.c	  1218  #  error "C_ENABLE_CAN_RAM_CHECK has to be defined if C_ENABLE_CAN_RAM_CHECK_EXTENDED is set."
; ..\component\Can\Implementation\Can.c	  1219  # endif
; ..\component\Can\Implementation\Can.c	  1220  #endif
; ..\component\Can\Implementation\Can.c	  1221  
; ..\component\Can\Implementation\Can.c	  1222  
; ..\component\Can\Implementation\Can.c	  1223   
; ..\component\Can\Implementation\Can.c	  1224  #  define CAN_WRITE_SRN_PROTECTED_REG32(area, regAddr, val)     CAN_WRITE_PROTECTED_REG32( (area), ((vuint32*)regAddr), (val) )
; ..\component\Can\Implementation\Can.c	  1225  #  define CAN_READ_SRN_PROTECTED_REG32(area, regAddr)           CAN_READ_PROTECTED_REG32((area), ((vuint32*)regAddr) )
; ..\component\Can\Implementation\Can.c	  1226  
; ..\component\Can\Implementation\Can.c	  1227  # if defined(C_ENABLE_USER_MODE_APPL) || defined(C_ENABLE_USER_MODE_OS)
; ..\component\Can\Implementation\Can.c	  1228  #  if defined(C_ENABLE_USER_MODE_OS)
; ..\component\Can\Implementation\Can.c	  1229  #   define CAN_PROTECTED_AREA(ch)        Can_GetChannelBasedProtectedAreaId(ch)
; ..\component\Can\Implementation\Can.c	  1230  #   define CAN_PROTECTED_AREA_SUB(sub)   Can_GetSubSystemBasedProtectedAreaId(sub)
; ..\component\Can\Implementation\Can.c	  1231  #  else
; ..\component\Can\Implementation\Can.c	  1232      /* Unused Dummy Area for Appl Mode */
; ..\component\Can\Implementation\Can.c	  1233  #   define CAN_PROTECTED_AREA(ch)        0u
; ..\component\Can\Implementation\Can.c	  1234  #  endif
; ..\component\Can\Implementation\Can.c	  1235  #  define CAN_SET_OSVALUE_32_CHANNEL(regAddr, val, mask, localPara, ch) (void)CanLL_WriteProtectedReg32(CAN_CHANNEL_CANPARA_FIRST CAN_PROTECTED_AREA(ch), (regAddr), (val), (mask), (localPara))
; ..\component\Can\Implementation\Can.c	  1236  # else
; ..\component\Can\Implementation\Can.c	  1237  #  define CAN_SET_OSVALUE_32_CHANNEL(regAddr, val, mask, localPara, ch) (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST (regAddr), (val), (mask), (localPara))
; ..\component\Can\Implementation\Can.c	  1238  # endif
; ..\component\Can\Implementation\Can.c	  1239  
; ..\component\Can\Implementation\Can.c	  1240  # define CAN_ENDINIT_PROTECT_OFF()    Appl_UnlockEndinit()
; ..\component\Can\Implementation\Can.c	  1241  # define CAN_ENDINIT_PROTECT_ON()     Appl_LockEndinit()
; ..\component\Can\Implementation\Can.c	  1242   
; ..\component\Can\Implementation\Can.c	  1243  
; ..\component\Can\Implementation\Can.c	  1244  /* PRQA L:FctLikeMacroLabel */
; ..\component\Can\Implementation\Can.c	  1245  
; ..\component\Can\Implementation\Can.c	  1246  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	  1247  /* Constants                                                               */
; ..\component\Can\Implementation\Can.c	  1248  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	  1249  #define CAN_START_SEC_CONST_UNSPECIFIED  /*--------------------------------*/
; ..\component\Can\Implementation\Can.c	  1250  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  1251  /* BR:012 */
; ..\component\Can\Implementation\Can.c	  1252  V_DEF_CONST(V_NONE, uint8, CONST) Can_MainVersion         = (uint8)CAN_SW_MAJOR_VERSION; /* PRQA S 3408 */ /* MD_Can_ExternalScope */
; ..\component\Can\Implementation\Can.c	  1253  V_DEF_CONST(V_NONE, uint8, CONST) Can_SubVersion          = (uint8)CAN_SW_MINOR_VERSION; /* PRQA S 3408 */ /* MD_Can_ExternalScope */
; ..\component\Can\Implementation\Can.c	  1254  V_DEF_CONST(V_NONE, uint8, CONST) Can_ReleaseVersion      = (uint8)CAN_SW_PATCH_VERSION; /* PRQA S 3408 */ /* MD_Can_ExternalScope */
; ..\component\Can\Implementation\Can.c	  1255  
; ..\component\Can\Implementation\Can.c	  1256  
; ..\component\Can\Implementation\Can.c	  1257  #if defined(C_ENABLE_CAN_FD_USED)
; ..\component\Can\Implementation\Can.c	  1258  V_DEF_CONST(CAN_STATIC, uint8, CONST) Can_DlcToFrameLenght[16] = /* PRQA S 3218,3408 */ /* MD_Can_GlobalScope */
; ..\component\Can\Implementation\Can.c	  1259  {
; ..\component\Can\Implementation\Can.c	  1260    0u,  1u,  2u,  3u,
; ..\component\Can\Implementation\Can.c	  1261    4u,  5u,  6u,  7u,
; ..\component\Can\Implementation\Can.c	  1262    8u, 12u, 16u, 20u,
; ..\component\Can\Implementation\Can.c	  1263   24u, 32u, 48u, 64u
; ..\component\Can\Implementation\Can.c	  1264  };
; ..\component\Can\Implementation\Can.c	  1265  V_DEF_CONST(CAN_STATIC, uint8, CONST) Can_MessageLengthToDlc[65] = /* PRQA S 3218,3408 */ /* MD_Can_GlobalScope */
; ..\component\Can\Implementation\Can.c	  1266  {
; ..\component\Can\Implementation\Can.c	  1267  /* 00..07 */  0u,  1u,  2u,  3u,  4u,  5u,  6u,  7u,
; ..\component\Can\Implementation\Can.c	  1268  /* 08..15 */  8u,  9u,  9u,  9u,  9u, 10u, 10u, 10u,
; ..\component\Can\Implementation\Can.c	  1269  /* 16..23 */ 10u, 11u, 11u, 11u, 11u, 12u, 12u, 12u,
; ..\component\Can\Implementation\Can.c	  1270  /* 24..31 */ 12u, 13u, 13u, 13u, 13u, 13u, 13u, 13u,
; ..\component\Can\Implementation\Can.c	  1271  /* 32..39 */ 13u, 14u, 14u, 14u, 14u, 14u, 14u, 14u,
; ..\component\Can\Implementation\Can.c	  1272  /* 40..47 */ 14u, 14u, 14u, 14u, 14u, 14u, 14u, 14u,
; ..\component\Can\Implementation\Can.c	  1273  /* 48..55 */ 14u, 15u, 15u, 15u, 15u, 15u, 15u, 15u,
; ..\component\Can\Implementation\Can.c	  1274  /* 56..63 */ 15u, 15u, 15u, 15u, 15u, 15u, 15u, 15u,
; ..\component\Can\Implementation\Can.c	  1275  /* 64     */ 15u
; ..\component\Can\Implementation\Can.c	  1276  };
; ..\component\Can\Implementation\Can.c	  1277  #endif
; ..\component\Can\Implementation\Can.c	  1278  
; ..\component\Can\Implementation\Can.c	  1279  /* Global constants with CAN driver main and subversion */
; ..\component\Can\Implementation\Can.c	  1280  
; ..\component\Can\Implementation\Can.c	  1281  #if defined( C_ENABLE_CAN_RAM_CHECK )
; ..\component\Can\Implementation\Can.c	  1282  /* ROM CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  1283  V_DEF_CONST(CAN_STATIC, vuint32, CONST) CanMemCheckValues32bit[3] =  /* PRQA S 3218 */ /* MD_Can_GlobalScope */
; ..\component\Can\Implementation\Can.c	  1284  {
; ..\component\Can\Implementation\Can.c	  1285    0xAAAAAAAAUL, 0x55555555UL, 0x00000000UL
; ..\component\Can\Implementation\Can.c	  1286  };
; ..\component\Can\Implementation\Can.c	  1287  /* ROM CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  1288  #endif
; ..\component\Can\Implementation\Can.c	  1289  
; ..\component\Can\Implementation\Can.c	  1290  #if defined( C_ENABLE_CAN_RAM_CHECK_EXTENDED )
; ..\component\Can\Implementation\Can.c	  1291  /* ROM CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  1292  V_DEF_CONST(CAN_STATIC, vuint32, CONST) CanRegCheckValues32bit[4] =  /* PRQA S 3218 */ /* MD_Can_GlobalScope */
; ..\component\Can\Implementation\Can.c	  1293  {
; ..\component\Can\Implementation\Can.c	  1294    0xAAAAAAAAUL, 0x55555555UL, 0xAAAAAAAAUL, 0x00000000UL
; ..\component\Can\Implementation\Can.c	  1295  };
; ..\component\Can\Implementation\Can.c	  1296  /* ROM CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  1297  #endif
; ..\component\Can\Implementation\Can.c	  1298  
; ..\component\Can\Implementation\Can.c	  1299  #if defined(C_ENABLE_CAN_FD_FULL) 
; ..\component\Can\Implementation\Can.c	  1300  V_DEF_CONST(CAN_STATIC, vuint8, CONST) CanLL_xES2Bytes[8] =
; ..\component\Can\Implementation\Can.c	  1301  {
; ..\component\Can\Implementation\Can.c	  1302    8, 12, 16, 20,
; ..\component\Can\Implementation\Can.c	  1303   24, 32, 48, 64
; ..\component\Can\Implementation\Can.c	  1304  };
; ..\component\Can\Implementation\Can.c	  1305  #endif
; ..\component\Can\Implementation\Can.c	  1306  
; ..\component\Can\Implementation\Can.c	  1307  
; ..\component\Can\Implementation\Can.c	  1308  #define CAN_STOP_SEC_CONST_UNSPECIFIED  /*---------------------------------*/
; ..\component\Can\Implementation\Can.c	  1309  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  1310  
; ..\component\Can\Implementation\Can.c	  1311  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	  1312  /* global data definitions                                                 */
; ..\component\Can\Implementation\Can.c	  1313  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	  1314  #define CAN_START_SEC_VAR_NOINIT_UNSPECIFIED  /*---------------------------*/
; ..\component\Can\Implementation\Can.c	  1315  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  1316  
; ..\component\Can\Implementation\Can.c	  1317  
; ..\component\Can\Implementation\Can.c	  1318  /***************************************************************************************/
; ..\component\Can\Implementation\Can.c	  1319  /* local data definitions   (need also INFIX because STATIC may be defined to nothing) */
; ..\component\Can\Implementation\Can.c	  1320  /***************************************************************************************/
; ..\component\Can\Implementation\Can.c	  1321  /* \trace SPEC-1585 */
; ..\component\Can\Implementation\Can.c	  1322  /*! Semaphore to block reentrancy for Can_MainFunction_Read() */
; ..\component\Can\Implementation\Can.c	  1323  V_DEF_VAR(CAN_STATIC, uint8, VAR_NOINIT) canIsRxTaskLocked; /* PRQA S 3408 */ /* MD_Can_GlobalScope */
; ..\component\Can\Implementation\Can.c	  1324  
; ..\component\Can\Implementation\Can.c	  1325  
; ..\component\Can\Implementation\Can.c	  1326  
; ..\component\Can\Implementation\Can.c	  1327  
; ..\component\Can\Implementation\Can.c	  1328  #define CAN_STOP_SEC_VAR_NOINIT_UNSPECIFIED  /*----------------------------*/
; ..\component\Can\Implementation\Can.c	  1329  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  1330  
; ..\component\Can\Implementation\Can.c	  1331  # define CAN_START_SEC_VAR_INIT_UNSPECIFIED  /*-----------------------------*/
; ..\component\Can\Implementation\Can.c	  1332  # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  1333  /* ! Mark module to be initialized (used to check double/none initialization) */
; ..\component\Can\Implementation\Can.c	  1334  V_DEF_VAR(CAN_STATIC, uint8, VAR_INIT) canConfigInitFlag = CAN_STATUS_UNINIT; /* PRQA S 3408 */ /* MD_Can_ExternalScope */
; ..\component\Can\Implementation\Can.c	  1335  # define CAN_STOP_SEC_VAR_INIT_UNSPECIFIED  /*------------------------------*/
; ..\component\Can\Implementation\Can.c	  1336  # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  1337  
; ..\component\Can\Implementation\Can.c	  1338  
; ..\component\Can\Implementation\Can.c	  1339  /* not static because of debug/test usage */
; ..\component\Can\Implementation\Can.c	  1340  #if defined(CAN_ENABLE_USE_INIT_ROOT_POINTER)
; ..\component\Can\Implementation\Can.c	  1341  # define CAN_START_SEC_VAR_INIT_UNSPECIFIED  /*-----------------------------*/
; ..\component\Can\Implementation\Can.c	  1342  # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  1343  /*! Pointer to the current configuration */
; ..\component\Can\Implementation\Can.c	  1344  V_DEF_P2CONST (V_NONE, Can_ConfigType, VAR_INIT, CONST_PBCFG) Can_ConfigDataPtr = NULL_PTR; /* UREQ00035484 */ /* PRQA S 3408 */ /* MD_Can_ExternalScope */
; ..\component\Can\Implementation\Can.c	  1345  # define CAN_STOP_SEC_VAR_INIT_UNSPECIFIED  /*------------------------------*/
; ..\component\Can\Implementation\Can.c	  1346  # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  1347  #else
; ..\component\Can\Implementation\Can.c	  1348  # define CAN_START_SEC_CONST_UNSPECIFIED  /*--------------------------------*/
; ..\component\Can\Implementation\Can.c	  1349  # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  1350  /*! Pointer to the current configuration */
; ..\component\Can\Implementation\Can.c	  1351  V_DEF_CONSTP2CONST(V_NONE, Can_ConfigType, CONST, CONST_PBCFG) Can_ConfigDataPtr = NULL_PTR; /* PRQA S 3408,1514 */ /* MD_Can_ExternalScope */
; ..\component\Can\Implementation\Can.c	  1352  # define CAN_STOP_SEC_CONST_UNSPECIFIED  /*---------------------------------*/
; ..\component\Can\Implementation\Can.c	  1353  # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  1354  #endif
; ..\component\Can\Implementation\Can.c	  1355  
; ..\component\Can\Implementation\Can.c	  1356  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	  1357  /*  Safe Check                                                             */
; ..\component\Can\Implementation\Can.c	  1358  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	  1359  #if !defined(CAN_SAFE_BSW) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	  1360  # define CAN_SAFE_BSW   STD_OFF
; ..\component\Can\Implementation\Can.c	  1361  #else
; ..\component\Can\Implementation\Can.c	  1362  # if (CAN_SAFE_BSW == STD_ON) /* COV_CAN_SAFE_BSW */
; ..\component\Can\Implementation\Can.c	  1363  #  if (CAN_DEV_ERROR_DETECT == STD_OFF) || (CAN_AMD_RUNTIME_MEASUREMENT == STD_ON) /* COV_CAN_SAFE_BSW_EXCLUSION */
; ..\component\Can\Implementation\Can.c	  1364  #   error "Unsupported Feature activated for SafeBSW"
; ..\component\Can\Implementation\Can.c	  1365  #  endif
; ..\component\Can\Implementation\Can.c	  1366  # endif
; ..\component\Can\Implementation\Can.c	  1367  #endif
; ..\component\Can\Implementation\Can.c	  1368  
; ..\component\Can\Implementation\Can.c	  1369  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	  1370  /*  Error Check                                                            */
; ..\component\Can\Implementation\Can.c	  1371  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	  1372  # if (CAN_SLEEP_SUPPORT == STD_ON) && (CAN_WAKEUP_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  1373  #  error "C_ENABLE_SLEEP_WAKEUP organified but generated like supported"
; ..\component\Can\Implementation\Can.c	  1374  # endif
; ..\component\Can\Implementation\Can.c	  1375  #if (CAN_WAKEUP_SUPPORT == STD_ON) && (CAN_SLEEP_SUPPORT == STD_OFF)
; ..\component\Can\Implementation\Can.c	  1376  # error "activated CAN_WAKEUP_SUPPORT need activated CAN_SLEEP_SUPPORT"
; ..\component\Can\Implementation\Can.c	  1377  #endif
; ..\component\Can\Implementation\Can.c	  1378  #if defined(C_ENABLE_HW_LOOP_TIMER)
; ..\component\Can\Implementation\Can.c	  1379  # if (CAN_LOOP_MAX == 0)
; ..\component\Can\Implementation\Can.c	  1380  #  error "CAN_LOOP_MAX should not be generated as 0"
; ..\component\Can\Implementation\Can.c	  1381  # endif
; ..\component\Can\Implementation\Can.c	  1382  #else
; ..\component\Can\Implementation\Can.c	  1383  # if (CAN_HARDWARE_CANCELLATION == STD_ON)
; ..\component\Can\Implementation\Can.c	  1384  #  error "C_ENABLE_HW_LOOP_TIMER organified but generated like supported"
; ..\component\Can\Implementation\Can.c	  1385  # endif
; ..\component\Can\Implementation\Can.c	  1386  #endif
; ..\component\Can\Implementation\Can.c	  1387  # if (CAN_HW_TRANSMIT_CANCELLATION == STD_ON)
; ..\component\Can\Implementation\Can.c	  1388  #  error "C_ENABLE_CANCEL_IN_HW organified but generated like supported"
; ..\component\Can\Implementation\Can.c	  1389  # endif
; ..\component\Can\Implementation\Can.c	  1390  #if (CAN_MIRROR_MODE == STD_ON) && (!defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2) || (CAN_GENERIC_PRECOPY == STD_OFF))
; ..\component\Can\Implementation\Can.c	  1391  # error "CAN_MIRROR_MODE need CAN_GENERIC_CONFIRMATION with CAN_API2 and CAN_GENERIC_PRECOPY as STD_ON"
; ..\component\Can\Implementation\Can.c	  1392  #endif
; ..\component\Can\Implementation\Can.c	  1393  #if (CAN_MULTIPLE_BASICCAN_TX == STD_ON)
; ..\component\Can\Implementation\Can.c	  1394  # if (CAN_HW_TRANSMIT_CANCELLATION == STD_ON)
; ..\component\Can\Implementation\Can.c	  1395  /* cancellation does not work in CanHL_WritePrepareCancelTx for multiple BasicCAN messages, and is not useful for FIFO queue in CanIf (normally combined with multiple BCAN)*/
; ..\component\Can\Implementation\Can.c	  1396  # error "CAN_MULTIPLE_BASICCAN_TX and CAN_HW_TRANSMIT_CANCELLATION are STD_ON but this combination is not supported"
; ..\component\Can\Implementation\Can.c	  1397  # endif
; ..\component\Can\Implementation\Can.c	  1398  #endif
; ..\component\Can\Implementation\Can.c	  1399  
; ..\component\Can\Implementation\Can.c	  1400  
; ..\component\Can\Implementation\Can.c	  1401  
; ..\component\Can\Implementation\Can.c	  1402  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	  1403  /*  Functions                                                              */
; ..\component\Can\Implementation\Can.c	  1404  /***************************************************************************/
; ..\component\Can\Implementation\Can.c	  1405  #define CAN_START_SEC_STATIC_CODE  /*--------------------------------------*/
; ..\component\Can\Implementation\Can.c	  1406  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  1407  
; ..\component\Can\Implementation\Can.c	  1408  
; ..\component\Can\Implementation\Can.c	  1409  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  1410  #  define CanHL_ApplCanTimerStart( timerIdx )  ApplCanTimerStart( timerIdx );
; ..\component\Can\Implementation\Can.c	  1411  #  define CanHL_ApplCanTimerEnd( timerIdx )    ApplCanTimerEnd( timerIdx );
; ..\component\Can\Implementation\Can.c	  1412  # else
; ..\component\Can\Implementation\Can.c	  1413  #  define CanHL_ApplCanTimerStart( timerIdx )  ApplCanTimerStart( channel, (timerIdx) );
; ..\component\Can\Implementation\Can.c	  1414  #  define CanHL_ApplCanTimerEnd( timerIdx )    ApplCanTimerEnd( channel, (timerIdx) );
; ..\component\Can\Implementation\Can.c	  1415  # endif
; ..\component\Can\Implementation\Can.c	  1416  # define CanHL_ApplCanTimerLoop( timerIdx )   if (ApplCanTimerLoop(CAN_CHANNEL_CANPARA_FIRST (timerIdx)) != CAN_OK) \ 
; ..\component\Can\Implementation\Can.c	  1417                                                { \ 
; ..\component\Can\Implementation\Can.c	  1418                                                  break; \ 
; ..\component\Can\Implementation\Can.c	  1419                                                }
; ..\component\Can\Implementation\Can.c	  1420  
; ..\component\Can\Implementation\Can.c	  1421  # if (CAN_HW_LOOP_SUPPORT_API == STD_OFF)
; ..\component\Can\Implementation\Can.c	  1422  /* Internal handling of HW loops (like AutoSar) - otherwise ApplCanTimer... is defined an implemented by Application */
; ..\component\Can\Implementation\Can.c	  1423  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  1424  | NAME:             ApplCanTimerStart
; ..\component\Can\Implementation\Can.c	  1425  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  1426  /* Used as macro to save runtime and code */
; ..\component\Can\Implementation\Can.c	  1427  #  if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  1428  /* \trace SPEC-1640 */
; ..\component\Can\Implementation\Can.c	  1429  #    define ApplCanTimerStart(source)     ((void)GetCounterValue( CAN_OS_COUNTER_ID, &Can_GetCanLoopTimeout(0, (source)))) /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\Can\Implementation\Can.c	  1430  #  else
; ..\component\Can\Implementation\Can.c	  1431  #    define ApplCanTimerStart(ch, source) ((void)GetCounterValue( CAN_OS_COUNTER_ID, &Can_GetCanLoopTimeout((ch), (source)))) /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\Can\Implementation\Can.c	  1432  #  endif
; ..\component\Can\Implementation\Can.c	  1433  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  1434  | NAME:             ApplCanTimerLoop
; ..\component\Can\Implementation\Can.c	  1435  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  1436  /*
; ..\component\Can\Implementation\Can.c	  1437  |<DataModelStart>| ApplCanTimerLoop
; ..\component\Can\Implementation\Can.c	  1438  Relation_Context:
; ..\component\Can\Implementation\Can.c	  1439  # from mode transition + any LL #
; ..\component\Can\Implementation\Can.c	  1440  HardwareLoopCheck, HardwareCancelByAppl
; ..\component\Can\Implementation\Can.c	  1441  Relation:
; ..\component\Can\Implementation\Can.c	  1442  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	  1443  HardwareLoopCheck
; ..\component\Can\Implementation\Can.c	  1444  ChannelAmount
; ..\component\Can\Implementation\Can.c	  1445  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  1446  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  1447  Constrain:
; ..\component\Can\Implementation\Can.c	  1448  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  1449  */
; ..\component\Can\Implementation\Can.c	  1450  /*!
; ..\component\Can\Implementation\Can.c	  1451   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  1452   *
; ..\component\Can\Implementation\Can.c	  1453   *
; ..\component\Can\Implementation\Can.c	  1454   *
; ..\component\Can\Implementation\Can.c	  1455   *
; ..\component\Can\Implementation\Can.c	  1456   *
; ..\component\Can\Implementation\Can.c	  1457   *
; ..\component\Can\Implementation\Can.c	  1458   */
; ..\component\Can\Implementation\Can.c	  1459  V_DEF_FUNC(CAN_LOCAL_INLINE, Can_ReturnType, STATIC_CODE) ApplCanTimerLoop( CAN_CHANNEL_CANTYPE_FIRST uint8 source )
; ..\component\Can\Implementation\Can.c	  1460  {
; ..\component\Can\Implementation\Can.c	  1461    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1462    Can_ReturnType retval;
; ..\component\Can\Implementation\Can.c	  1463    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  1464    uint8 apiId;
; ..\component\Can\Implementation\Can.c	  1465    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  1466    apiId = CAN_HW_ACCESS_ID;
; ..\component\Can\Implementation\Can.c	  1467    retval = CAN_NOT_OK;
; ..\component\Can\Implementation\Can.c	  1468  
; ..\component\Can\Implementation\Can.c	  1469    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1470  #  if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  1471    /* #10 Check if parameter controller and source is valid (no INIT check because may be used inside power on INIT) */
; ..\component\Can\Implementation\Can.c	  1472    if (source > CAN_LOOP_MAX) /* CM_CAN_HL22 */
; ..\component\Can\Implementation\Can.c	  1473    {
; ..\component\Can\Implementation\Can.c	  1474      errorId = CAN_E_PARAM_HANDLE;
; ..\component\Can\Implementation\Can.c	  1475    }
; ..\component\Can\Implementation\Can.c	  1476    else
; ..\component\Can\Implementation\Can.c	  1477  #   if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  1478    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  1479    {
; ..\component\Can\Implementation\Can.c	  1480      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  1481    }
; ..\component\Can\Implementation\Can.c	  1482    else
; ..\component\Can\Implementation\Can.c	  1483  #   endif
; ..\component\Can\Implementation\Can.c	  1484  #  endif
; ..\component\Can\Implementation\Can.c	  1485    {
; ..\component\Can\Implementation\Can.c	  1486      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1487      TickType elapsedTime;
; ..\component\Can\Implementation\Can.c	  1488      TickType startTime;
; ..\component\Can\Implementation\Can.c	  1489      /* #110 Calculate the elapsed since time the start of this hardware loop (identified by parameter source). */
; ..\component\Can\Implementation\Can.c	  1490      /* Get start time (set by ApplCanTimerStart - temporary variable because GetElapsedValue modify original data */
; ..\component\Can\Implementation\Can.c	  1491      startTime = Can_GetCanLoopTimeout(channel, source);
; ..\component\Can\Implementation\Can.c	  1492      /* Get elapsed time - from start time to now */
; ..\component\Can\Implementation\Can.c	  1493      /* #120 Throw DET error when GetElapsedValue() failed */
; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  1495      {
; ..\component\Can\Implementation\Can.c	  1496        errorId = CAN_E_TIMEOUT_DET;
; ..\component\Can\Implementation\Can.c	  1497      }
; ..\component\Can\Implementation\Can.c	  1498      else
; ..\component\Can\Implementation\Can.c	  1499      {
; ..\component\Can\Implementation\Can.c	  1500        /* #130 Check if time out occurs for HW loop checks (none mode transition) \trace SPEC-1594 */
; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  1502        { /* no time out occur return OK */
; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;
; ..\component\Can\Implementation\Can.c	  1504        }
; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */
; ..\component\Can\Implementation\Can.c	  1506        { /* Mode Change synchronous & HW loop check */
; ..\component\Can\Implementation\Can.c	  1507          /* #140 Throw DET error and set hardware cancellation flag */
; ..\component\Can\Implementation\Can.c	  1508          if (source < CAN_LOOP_MAX) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  1509          { 
; ..\component\Can\Implementation\Can.c	  1510            errorId = CAN_E_TIMEOUT_DET;
; ..\component\Can\Implementation\Can.c	  1511          }
; ..\component\Can\Implementation\Can.c	  1512        }
; ..\component\Can\Implementation\Can.c	  1513      }
; ..\component\Can\Implementation\Can.c	  1514      CAN_DUMMY_STATEMENT(startTime); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  1515    }
; ..\component\Can\Implementation\Can.c	  1516  
; ..\component\Can\Implementation\Can.c	  1517    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1518  #  if (CAN_DEV_ERROR_REPORT == STD_ON)  
; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	  1520    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  1521      Can_CallDetReportError(apiId, errorId);
; ..\component\Can\Implementation\Can.c	  1522    }
; ..\component\Can\Implementation\Can.c	  1523  #  else
; ..\component\Can\Implementation\Can.c	  1524    CAN_DUMMY_STATEMENT(apiId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  1525    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  1526  #  endif
; ..\component\Can\Implementation\Can.c	  1527    return retval;
; ..\component\Can\Implementation\Can.c	  1528  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	  1529  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  1530  | NAME:             ApplCanTimerEnd
; ..\component\Can\Implementation\Can.c	  1531  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  1532  /* Used as macro to save runtime and code */
; ..\component\Can\Implementation\Can.c	  1533  /* because of possible nested timers .. timer has to be reset */
; ..\component\Can\Implementation\Can.c	  1534  #  define ApplCanTimerEnd ApplCanTimerStart
; ..\component\Can\Implementation\Can.c	  1535  # endif /* (CAN_HW_LOOP_SUPPORT_API == STD_OFF) */
; ..\component\Can\Implementation\Can.c	  1536  
; ..\component\Can\Implementation\Can.c	  1537  
; ..\component\Can\Implementation\Can.c	  1538  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  1539  | NAME:             CanHL_CleanUpSendState
; ..\component\Can\Implementation\Can.c	  1540  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  1541  /*
; ..\component\Can\Implementation\Can.c	  1542  |<DataModelStart>| CanHL_CleanUpSendState
; ..\component\Can\Implementation\Can.c	  1543  Relation_Context:
; ..\component\Can\Implementation\Can.c	  1544  # from CanLL_ModeTransition() #
; ..\component\Can\Implementation\Can.c	  1545  Relation:
; ..\component\Can\Implementation\Can.c	  1546  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  1547  MultiplexedTx
; ..\component\Can\Implementation\Can.c	  1548  TxFullCANSupport
; ..\component\Can\Implementation\Can.c	  1549  TxBasicAmount
; ..\component\Can\Implementation\Can.c	  1550  TxFullAmount
; ..\component\Can\Implementation\Can.c	  1551  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  1552  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  1553  Constrain:
; ..\component\Can\Implementation\Can.c	  1554  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  1555  */
; ..\component\Can\Implementation\Can.c	  1556  /*!
; ..\component\Can\Implementation\Can.c	  1557   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  1558   *
; ..\component\Can\Implementation\Can.c	  1559   *
; ..\component\Can\Implementation\Can.c	  1560   *
; ..\component\Can\Implementation\Can.c	  1561   *
; ..\component\Can\Implementation\Can.c	  1562   */
; ..\component\Can\Implementation\Can.c	  1563  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanHL_CleanUpSendState( CAN_CHANNEL_CANTYPE_ONLY )
; ..\component\Can\Implementation\Can.c	  1564  {
; ..\component\Can\Implementation\Can.c	  1565    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1566    CanObjectHandle activeSendObject;
; ..\component\Can\Implementation\Can.c	  1567    CanObjectHandle mailboxHandle;
; ..\component\Can\Implementation\Can.c	  1568    Can_HwHandleType mailboxElement;
; ..\component\Can\Implementation\Can.c	  1569    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1570    /* parameter channel is already checked by caller */
; ..\component\Can\Implementation\Can.c	  1571    /* #10 set all BasicCAN TX Objects to state FREE to allow a new transmission */
; ..\component\Can\Implementation\Can.c	  1572    mailboxHandle = Can_GetTxBasicHandleStart(canHwChannel);
; ..\component\Can\Implementation\Can.c	  1573  # if defined(C_ENABLE_MULTIPLE_BASICCAN_TX)
; ..\component\Can\Implementation\Can.c	  1574    for (; mailboxHandle < Can_GetTxBasicHandleStop(canHwChannel); mailboxHandle++) /* PRQA S 2994,2996 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  1575  # endif
; ..\component\Can\Implementation\Can.c	  1576    {
; ..\component\Can\Implementation\Can.c	  1577  # if defined(C_ENABLE_MULTIPLEXED_TRANSMISSION) || defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  1578      for (mailboxElement = 0u; mailboxElement < Can_GetMailboxSize(mailboxHandle); mailboxElement++) /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  1579  # else
; ..\component\Can\Implementation\Can.c	  1580      mailboxElement = 0u; /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  1581  # endif
; ..\component\Can\Implementation\Can.c	  1582      {
; ..\component\Can\Implementation\Can.c	  1583        activeSendObject = CanHL_GetActiveSendObject(mailboxHandle, mailboxElement);
; ..\component\Can\Implementation\Can.c	  1584        Can_SetActiveSendState(activeSendObject, kCanBufferFree); /* SBSW_CAN_HL04 */
; ..\component\Can\Implementation\Can.c	  1585      }
; ..\component\Can\Implementation\Can.c	  1586  # if defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  1587      if (Can_GetMailboxType(mailboxHandle) == CAN_TX_BASICCAN_FIFO_TYPE) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  1588      { /* #20 initialize TxHwFifo index and fill state */
; ..\component\Can\Implementation\Can.c	  1589        uint16 txHwFifo;
; ..\component\Can\Implementation\Can.c	  1590        txHwFifo = Can_GetMailboxTxHwFifo(mailboxHandle);
; ..\component\Can\Implementation\Can.c	  1591  #  if (CAN_SAFE_BSW == STD_ON) /* COV_CAN_SAFE_BSW */
; ..\component\Can\Implementation\Can.c	  1592        if (txHwFifo >= (uint16)Can_GetSizeOfTxHwFifo()) /* CM_CAN_HL32 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  1593        {
; ..\component\Can\Implementation\Can.c	  1594          txHwFifo = 0u;
; ..\component\Can\Implementation\Can.c	  1595        }
; ..\component\Can\Implementation\Can.c	  1596  #  endif
; ..\component\Can\Implementation\Can.c	  1597        Can_SetTxHwFifoWriteIndex(txHwFifo, 0u); /* SBSW_CAN_HL50 */
; ..\component\Can\Implementation\Can.c	  1598        Can_SetTxHwFifoReadIndex(txHwFifo, 0u); /* SBSW_CAN_HL50 */
; ..\component\Can\Implementation\Can.c	  1599        Can_SetTxHwFifoFillCount(txHwFifo, 0u); /* SBSW_CAN_HL50 */
; ..\component\Can\Implementation\Can.c	  1600      }
; ..\component\Can\Implementation\Can.c	  1601  # endif
; ..\component\Can\Implementation\Can.c	  1602    }
; ..\component\Can\Implementation\Can.c	  1603  # if defined(C_ENABLE_TX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  1604    /* #30 set all FullCAN TX Objects to state FREE to allow a new transmission */
; ..\component\Can\Implementation\Can.c	  1605    for (mailboxHandle = Can_GetTxFullHandleStart(canHwChannel); mailboxHandle < Can_GetTxFullHandleStop(canHwChannel); mailboxHandle++) /* PRQA S 2994,2996 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  1606    {
; ..\component\Can\Implementation\Can.c	  1607      activeSendObject = CanHL_GetActiveSendObject(mailboxHandle, 0u); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  1608      Can_SetActiveSendState(activeSendObject, kCanBufferFree); /* SBSW_CAN_HL04 */ 
; ..\component\Can\Implementation\Can.c	  1609    }
; ..\component\Can\Implementation\Can.c	  1610  # endif
; ..\component\Can\Implementation\Can.c	  1611    CAN_CHANNEL_DUMMY_STATEMENT; /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  1612  }
; ..\component\Can\Implementation\Can.c	  1613  
; ..\component\Can\Implementation\Can.c	  1614  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  1615  | NAME:             CanHL_ReInit
; ..\component\Can\Implementation\Can.c	  1616  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  1617  /*
; ..\component\Can\Implementation\Can.c	  1618  |<DataModelStart>| CanHL_ReInit
; ..\component\Can\Implementation\Can.c	  1619  Relation_Context:
; ..\component\Can\Implementation\Can.c	  1620  # from CanHL_ModeTransition() #
; ..\component\Can\Implementation\Can.c	  1621  Wakeup, OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  1622  Relation:
; ..\component\Can\Implementation\Can.c	  1623  DevErrorDetect, OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  1624  DevErrorDetect, Variant, ChannelAmount
; ..\component\Can\Implementation\Can.c	  1625  RamCheck
; ..\component\Can\Implementation\Can.c	  1626  TxFullCANSupport
; ..\component\Can\Implementation\Can.c	  1627  RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  1628  RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  1629  Wakeup, ChannelAmount
; ..\component\Can\Implementation\Can.c	  1630  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  1631  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  1632  Constrain:
; ..\component\Can\Implementation\Can.c	  1633  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  1634  */
; ..\component\Can\Implementation\Can.c	  1635  /*!
; ..\component\Can\Implementation\Can.c	  1636   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  1637   *
; ..\component\Can\Implementation\Can.c	  1638   *
; ..\component\Can\Implementation\Can.c	  1639   *
; ..\component\Can\Implementation\Can.c	  1640   *
; ..\component\Can\Implementation\Can.c	  1641   *
; ..\component\Can\Implementation\Can.c	  1642   *
; ..\component\Can\Implementation\Can.c	  1643   *
; ..\component\Can\Implementation\Can.c	  1644   *
; ..\component\Can\Implementation\Can.c	  1645   *
; ..\component\Can\Implementation\Can.c	  1646   *
; ..\component\Can\Implementation\Can.c	  1647   *
; ..\component\Can\Implementation\Can.c	  1648   *
; ..\component\Can\Implementation\Can.c	  1649   *
; ..\component\Can\Implementation\Can.c	  1650   *
; ..\component\Can\Implementation\Can.c	  1651   *
; ..\component\Can\Implementation\Can.c	  1652   *
; ..\component\Can\Implementation\Can.c	  1653   *
; ..\component\Can\Implementation\Can.c	  1654   *
; ..\component\Can\Implementation\Can.c	  1655   *
; ..\component\Can\Implementation\Can.c	  1656   *
; ..\component\Can\Implementation\Can.c	  1657   */
; ..\component\Can\Implementation\Can.c	  1658  V_DEF_FUNC(CAN_STATIC, uint8, STATIC_CODE) CanHL_ReInit( CAN_HW_CHANNEL_CANTYPE_FIRST uint8 doRamCheck )
; Function CanHL_ReInit
.L345:
CanHL_ReInit:	.type	func

; ..\component\Can\Implementation\Can.c	  1659  { /* \trace SPEC-1719, SPEC-1589, SPEC-1346, SPEC-1565 */
; ..\component\Can\Implementation\Can.c	  1660    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1661    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  1662    tCanInitParaStruct initPara;
; ..\component\Can\Implementation\Can.c	  1663    CanHookBegin_CanHL_ReInit();
; ..\component\Can\Implementation\Can.c	  1664    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  1665    initPara.isInitOk = kCanFailed; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	  1666    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1667  #if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  1668    /* #10 Check if parameter controller and Config pointer is valid and state is INIT */
; ..\component\Can\Implementation\Can.c	  1669    if (canConfigInitFlag == CAN_STATUS_UNINIT)
	movh.a	a15,#@his(canConfigInitFlag)
	ld.bu	d0,[a15]@los(canConfigInitFlag)
.L2088:
	mov	d8,#0
	sub.a	a10,#48
.L1274:
	st.b	[a10]4,d8
.L2089:
	jeq	d0,#0,.L2
.L2090:

; ..\component\Can\Implementation\Can.c	  1670    { /* \trace SPEC-1718 */
; ..\component\Can\Implementation\Can.c	  1671      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  1672    }
; ..\component\Can\Implementation\Can.c	  1673    else
; ..\component\Can\Implementation\Can.c	  1674  # if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  1675    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  1676    { /* \trace SPEC-1713 */
; ..\component\Can\Implementation\Can.c	  1677      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  1678    }
; ..\component\Can\Implementation\Can.c	  1679    else
; ..\component\Can\Implementation\Can.c	  1680  # endif
; ..\component\Can\Implementation\Can.c	  1681  # if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  1682    if (Can_GetCanIfChannelId(channel) == kCanChannelNotUsed) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  1683    { /* \trace SPEC-1713 */
; ..\component\Can\Implementation\Can.c	  1684      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  1685    }
; ..\component\Can\Implementation\Can.c	  1686    else
; ..\component\Can\Implementation\Can.c	  1687  # endif
; ..\component\Can\Implementation\Can.c	  1688  #endif
; ..\component\Can\Implementation\Can.c	  1689    {
; ..\component\Can\Implementation\Can.c	  1690      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1691      /* #100 initialization controller states and initialization objects --- */
; ..\component\Can\Implementation\Can.c	  1692      initPara.initObject = Can_GetLastInitObject(channel);
	movh.a	a12,#@his(Can_ControllerData)
	lea	a12,[a12]@los(Can_ControllerData)
	lea	a13,[a12]20
	ld.bu	d0,[a13]
.L2091:
	st.h	[a10],d0
.L1117:

; ..\component\Can\Implementation\Can.c	  1693  #if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  1694      initPara.doRamCheck = doRamCheck;
; ..\component\Can\Implementation\Can.c	  1695  #endif
; ..\component\Can\Implementation\Can.c	  1696  #if defined(C_ENABLE_CAN_RAM_CHECK_EXTENDED)
; ..\component\Can\Implementation\Can.c	  1697      initPara.isChRamCheckFail = kCanFalse;
; ..\component\Can\Implementation\Can.c	  1698  #endif
; ..\component\Can\Implementation\Can.c	  1699      /* #110 clean up status (do not activate communication and let SLEEP and initialization to detect ram-check request) */
; ..\component\Can\Implementation\Can.c	  1700  #if defined(C_ENABLE_CAN_RAM_CHECK) && !defined(C_ENABLE_CAN_RAM_CHECK_EXTENDED)
; ..\component\Can\Implementation\Can.c	  1701      if (doRamCheck == kCanExecuteRamCheck)
; ..\component\Can\Implementation\Can.c	  1702      { /* #112 standard RAM check will be performed so delete old status CAN_DEACTIVATE_CONTROLLER but leave CAN_STATUS_INIT (info about PowerOn) */
; ..\component\Can\Implementation\Can.c	  1703        Can_SetLogStatus(channel, Can_GetLogStatus(channel) & (uint8)CAN_STATUS_INIT);  /* SBSW_CAN_HL02 */
; ..\component\Can\Implementation\Can.c	  1704      }
; ..\component\Can\Implementation\Can.c	  1705      else
; ..\component\Can\Implementation\Can.c	  1706  #endif
; ..\component\Can\Implementation\Can.c	  1707      { /* #114 extended RAM check may be performed so delete old status except CAN_DEACTIVATE_CONTROLLER and CAN_STATUS_INIT */
; ..\component\Can\Implementation\Can.c	  1708        Can_SetLogStatus(channel, Can_GetLogStatus(channel) & ((uint8)(CAN_DEACTIVATE_CONTROLLER) | (uint8)((uint8)CAN_STATUS_INIT)));  /* SBSW_CAN_HL02 */
; ..\component\Can\Implementation\Can.c	  1709      }
; ..\component\Can\Implementation\Can.c	  1710      /* #125 begin initialization CanHL_InitBegin() */
; ..\component\Can\Implementation\Can.c	  1711      initPara.isInitOk = CanHL_InitBegin(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  1712      /* #130 block invalid hardware access (silent check) */
; ..\component\Can\Implementation\Can.c	  1713      if (initPara.isInitOk == kCanOk) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  1714      {
; ..\component\Can\Implementation\Can.c	  1715  #if defined(C_ENABLE_TX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  1716        /* #140 do TX FullCAN initialization CanHL_InitTxFullCAN()*/
; ..\component\Can\Implementation\Can.c	  1717        initPara.isInitOk &= CanHL_InitTxFullCAN(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  1718  #endif
; ..\component\Can\Implementation\Can.c	  1719        /* #150 do TX BasicCAN initialization CanHL_InitTxBasicCAN() */
; ..\component\Can\Implementation\Can.c	  1720        initPara.isInitOk &= CanHL_InitTxBasicCAN(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  1721  #if defined(C_ENABLE_RX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  1722        /* #170 do RX FullCAN initialization CanHL_InitRxFullCAN() */
; ..\component\Can\Implementation\Can.c	  1723        initPara.isInitOk &= CanHL_InitRxFullCAN(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  1724  #endif
; ..\component\Can\Implementation\Can.c	  1725  #if defined(C_ENABLE_RX_BASICCAN_OBJECTS) /* COV_CAN_MULTIPLE_BASICCAN */
; ..\component\Can\Implementation\Can.c	  1726        /* #180 do RX BasicCAN initialization CanHL_InitRxBasicCAN() */
; ..\component\Can\Implementation\Can.c	  1727        initPara.isInitOk &= CanHL_InitRxBasicCAN(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  1728  #endif
; ..\component\Can\Implementation\Can.c	  1729        /* #190 end initialization CanHL_InitEnd_InitMode() */
; ..\component\Can\Implementation\Can.c	  1730        initPara.isInitOk &= CanHL_InitEnd_InitMode(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &initPara); /* SBSW_CAN_HL31 */ /* PRQA S 2986 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  1731  #if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  1732        if (doRamCheck == kCanExecuteRamCheck)
; ..\component\Can\Implementation\Can.c	  1733        { 
; ..\component\Can\Implementation\Can.c	  1734  # if defined(C_ENABLE_CAN_RAM_CHECK_EXTENDED)
; ..\component\Can\Implementation\Can.c	  1735          /* #200 extended RamChecks new issue occur - notify corrupt register / deactivate controller */
; ..\component\Can\Implementation\Can.c	  1736          if (initPara.isChRamCheckFail == kCanTrue) /* COV_CAN_RAM_CHECK_NO_STIMULATION */
; ..\component\Can\Implementation\Can.c	  1737          {
; ..\component\Can\Implementation\Can.c	  1738            CanIf_RamCheckCorruptController((uint8)Can_GetCanToCanIfChannelMapping(channel));
; ..\component\Can\Implementation\Can.c	  1739            Can_SetLogStatus(channel, Can_GetLogStatus(channel) | CAN_DEACTIVATE_CONTROLLER); /* SBSW_CAN_HL02 */
; ..\component\Can\Implementation\Can.c	  1740          }
; ..\component\Can\Implementation\Can.c	  1741  # else
; ..\component\Can\Implementation\Can.c	  1742          if( (Can_GetLogStatus(channel) & CAN_DEACTIVATE_CONTROLLER) == CAN_DEACTIVATE_CONTROLLER ) /* COV_CAN_RAM_CHECK_NO_STIMULATION */
; ..\component\Can\Implementation\Can.c	  1743          { /* #210 standard RAM check issue occur - call Appl_CanRamCheckFailed() (any mailbox fail) */
; ..\component\Can\Implementation\Can.c	  1744            if (Appl_CanRamCheckFailed((uint8)channel) != CAN_DEACTIVATE_CONTROLLER)
; ..\component\Can\Implementation\Can.c	  1745            { /* #220 let the application decide if communication stay disabled as set by RAM check or not */
; ..\component\Can\Implementation\Can.c	  1746              Can_SetLogStatus(channel, Can_GetLogStatus(channel) & (uint8)(~(CAN_DEACTIVATE_CONTROLLER))); /* Application decide to activate communication in case RAM_CHECK failed */  /* SBSW_CAN_HL02 */
; ..\component\Can\Implementation\Can.c	  1747            }
; ..\component\Can\Implementation\Can.c	  1748          }
; ..\component\Can\Implementation\Can.c	  1749  # endif
; ..\component\Can\Implementation\Can.c	  1750          CAN_RAM_CHECK_FINISHED_CTP(channel)
; ..\component\Can\Implementation\Can.c	  1751        }
; ..\component\Can\Implementation\Can.c	  1752  #endif
; ..\component\Can\Implementation\Can.c	  1753      }
; ..\component\Can\Implementation\Can.c	  1754      if (initPara.isInitOk == kCanOk) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  1755      { /* #280 set controller init flag when no issue occure before */
; ..\component\Can\Implementation\Can.c	  1756        Can_SetLogStatus(channel, Can_GetLogStatus(channel) | (CAN_STATUS_INIT)); /* SBSW_CAN_HL02 */
; ..\component\Can\Implementation\Can.c	  1757      }
; ..\component\Can\Implementation\Can.c	  1758      else
; ..\component\Can\Implementation\Can.c	  1759      { /* #275 set error when issue occure before */
; ..\component\Can\Implementation\Can.c	  1760        Can_SetLogStatus(channel, /* CAN_STATUS_UNINIT | */ (Can_GetLogStatus(channel) & (uint8)(CAN_DEACTIVATE_CONTROLLER))); /* SBSW_CAN_HL02 */
; ..\component\Can\Implementation\Can.c	  1761        errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  1762      }
; ..\component\Can\Implementation\Can.c	  1763    } /* controller active in multiple ECU configuration */
; ..\component\Can\Implementation\Can.c	  1764  
; ..\component\Can\Implementation\Can.c	  1765    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1766  #if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  1767    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	  1768    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  1769      Can_CallDetReportError(CAN_INITCTR_ID, errorId);
; ..\component\Can\Implementation\Can.c	  1770    }
; ..\component\Can\Implementation\Can.c	  1771  #else
; ..\component\Can\Implementation\Can.c	  1772    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  1773  #endif
; ..\component\Can\Implementation\Can.c	  1774  #if !defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  1775    CAN_DUMMY_STATEMENT(doRamCheck); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  1776  #endif
; ..\component\Can\Implementation\Can.c	  1777    CanHookEnd_CanHL_ReInit();
; ..\component\Can\Implementation\Can.c	  1778    return initPara.isInitOk;
; ..\component\Can\Implementation\Can.c	  1779  } /* PRQA S 6010,6030,6050,6080 */ /* MD_MSR_STPTH,MD_MSR_STCYC,MD_MSR_STCAL,MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	  1780  
; ..\component\Can\Implementation\Can.c	  1781  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  1782  | NAME:             CanHL_ModeTransition
; ..\component\Can\Implementation\Can.c	  1783  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  1784  /*
; ..\component\Can\Implementation\Can.c	  1785  |<DataModelStart>| CanHL_ModeTransition
; ..\component\Can\Implementation\Can.c	  1786  Relation_Context:
; ..\component\Can\Implementation\Can.c	  1787  # from Can_Init #
; ..\component\Can\Implementation\Can.c	  1788  ChannelAmount
; ..\component\Can\Implementation\Can.c	  1789  # from Can_MainFunction_BusOff, CanHL_ErrorHandling #
; ..\component\Can\Implementation\Can.c	  1790  StatusPolling, ChannelAmount
; ..\component\Can\Implementation\Can.c	  1791  # from Can_ChangeBaudrate #
; ..\component\Can\Implementation\Can.c	  1792  ChannelAmount
; ..\component\Can\Implementation\Can.c	  1793  # from Can_SetBaudrate #
; ..\component\Can\Implementation\Can.c	  1794  ChannelAmount
; ..\component\Can\Implementation\Can.c	  1795  # from Can_SetControllerMode #
; ..\component\Can\Implementation\Can.c	  1796  Wakeup
; ..\component\Can\Implementation\Can.c	  1797  RamCheck
; ..\component\Can\Implementation\Can.c	  1798  # from Can_RamCheckExecute #
; ..\component\Can\Implementation\Can.c	  1799  RamCheck
; ..\component\Can\Implementation\Can.c	  1800  # from Can_RamCheckEnableController #
; ..\component\Can\Implementation\Can.c	  1801  RamCheck
; ..\component\Can\Implementation\Can.c	  1802  Relation:
; ..\component\Can\Implementation\Can.c	  1803  OneChOpt, HardwareLoopCheck, ChannelAmount
; ..\component\Can\Implementation\Can.c	  1804  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  1805  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  1806  Constrain:
; ..\component\Can\Implementation\Can.c	  1807  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  1808  */
; ..\component\Can\Implementation\Can.c	  1809  /*!
; ..\component\Can\Implementation\Can.c	  1810   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  1811   *
; ..\component\Can\Implementation\Can.c	  1812   *
; ..\component\Can\Implementation\Can.c	  1813   *
; ..\component\Can\Implementation\Can.c	  1814   *
; ..\component\Can\Implementation\Can.c	  1815   *
; ..\component\Can\Implementation\Can.c	  1816   */
; ..\component\Can\Implementation\Can.c	  1817  V_DEF_FUNC(CAN_LOCAL_INLINE, uint8, STATIC_CODE) CanHL_ModeTransition( CAN_CHANNEL_CANTYPE_FIRST uint8 transitionRequest, uint8 busOffRecovery, uint8 doRamCheck )
; ..\component\Can\Implementation\Can.c	  1818  {
; ..\component\Can\Implementation\Can.c	  1819    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1820    uint8 transitionState;
; ..\component\Can\Implementation\Can.c	  1821  
; ..\component\Can\Implementation\Can.c	  1822    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1823    /* #10 request transition in LL */
; ..\component\Can\Implementation\Can.c	  1824    transitionState = CanLL_ModeTransition(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST transitionRequest, busOffRecovery, doRamCheck);
; ..\component\Can\Implementation\Can.c	  1825    if(transitionState != kCanOk) /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	  1826    { /* #20 first request fail so start Loop that wait short time for transition \trace SPEC-1642, SPEC-1635, SPEC-1630 */
; ..\component\Can\Implementation\Can.c	  1827      CanHL_ApplCanTimerStart((uint8)CAN_LOOP_MAX); /* SBSW_CAN_HL38 */
; ..\component\Can\Implementation\Can.c	  1828      do
; ..\component\Can\Implementation\Can.c	  1829      { /* #30 HW check mode reached (LL) */
; ..\component\Can\Implementation\Can.c	  1830        transitionState = CanLL_ModeTransition(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST transitionRequest, busOffRecovery, doRamCheck);
; ..\component\Can\Implementation\Can.c	  1831        CanHL_ApplCanTimerLoop((uint8)CAN_LOOP_MAX); /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	  1832      } while ( transitionState != kCanOk ); /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	  1833      CanHL_ApplCanTimerEnd ((uint8)CAN_LOOP_MAX); /* SBSW_CAN_HL38 */
; ..\component\Can\Implementation\Can.c	  1834    }
; ..\component\Can\Implementation\Can.c	  1835    if ( transitionState == kCanRequested ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	  1836    {
; ..\component\Can\Implementation\Can.c	  1837      /* #50 transition requested so remember request to repeat it asynchronous */
; ..\component\Can\Implementation\Can.c	  1838      Can_SetModeTransitionRequest(channel, transitionRequest); /* SBSW_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  1839      Can_SetBusOffTransitionRequest(channel, busOffRecovery); /* SBSW_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  1840      Can_SetRamCheckTransitionRequest(channel, doRamCheck); /* SBSW_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  1841    }
; ..\component\Can\Implementation\Can.c	  1842    return transitionState;
; ..\component\Can\Implementation\Can.c	  1843  }
; ..\component\Can\Implementation\Can.c	  1844  
; ..\component\Can\Implementation\Can.c	  1845  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  1846  | NAME:             CanHL_NotifyTransition
; ..\component\Can\Implementation\Can.c	  1847  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  1848  /*
; ..\component\Can\Implementation\Can.c	  1849  |<DataModelStart>| CanHL_NotifyTransition
; ..\component\Can\Implementation\Can.c	  1850  Relation_Context:
; ..\component\Can\Implementation\Can.c	  1851  # from Can_SetControllerMode() #
; ..\component\Can\Implementation\Can.c	  1852  Wakeup
; ..\component\Can\Implementation\Can.c	  1853  RamCheck
; ..\component\Can\Implementation\Can.c	  1854  Relation:
; ..\component\Can\Implementation\Can.c	  1855  ChannelAmount
; ..\component\Can\Implementation\Can.c	  1856  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  1857  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  1858  Constrain:
; ..\component\Can\Implementation\Can.c	  1859  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  1860  */
; ..\component\Can\Implementation\Can.c	  1861  /*!
; ..\component\Can\Implementation\Can.c	  1862   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  1863   *
; ..\component\Can\Implementation\Can.c	  1864   *
; ..\component\Can\Implementation\Can.c	  1865   *
; ..\component\Can\Implementation\Can.c	  1866   *
; ..\component\Can\Implementation\Can.c	  1867   *
; ..\component\Can\Implementation\Can.c	  1868   */
; ..\component\Can\Implementation\Can.c	  1869  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanHL_NotifyTransition( CAN_CHANNEL_CANTYPE_FIRST uint8 canState, CanIf_ControllerModeType canIfState, uint8 transitionState )
; ..\component\Can\Implementation\Can.c	  1870  {
; ..\component\Can\Implementation\Can.c	  1871    /* #10 if mode changed successful */
; ..\component\Can\Implementation\Can.c	  1872    if ( transitionState == kCanOk ) /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	  1873    {
; ..\component\Can\Implementation\Can.c	  1874      /* #20 transition finished change internal state */
; ..\component\Can\Implementation\Can.c	  1875      Can_SetLogStatus(channel, (uint8)((Can_GetLogStatus(channel) & CAN_STATUS_MASK_NOMODE) | canState)); /* SBSW_CAN_HL02 */
; ..\component\Can\Implementation\Can.c	  1876      /* #30 remove transition request */
; ..\component\Can\Implementation\Can.c	  1877      Can_SetModeTransitionRequest(channel, kCanModeNone); /* SBSW_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  1878      /* #40 call notification CanIf_ControllerModeIndication() \trace SPEC-1726, SPEC-1644, SPEC-60446 */
; ..\component\Can\Implementation\Can.c	  1879      CanIf_ControllerModeIndication( (uint8)Can_GetCanToCanIfChannelMapping(channel), canIfState );
; ..\component\Can\Implementation\Can.c	  1880    }
; ..\component\Can\Implementation\Can.c	  1881    CAN_DUMMY_STATEMENT(transitionState); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  1882  }
; ..\component\Can\Implementation\Can.c	  1883  
; ..\component\Can\Implementation\Can.c	  1884  
; ..\component\Can\Implementation\Can.c	  1885  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  1886  | NAME:             CanHL_WritePrepare
; ..\component\Can\Implementation\Can.c	  1887  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  1888  /*
; ..\component\Can\Implementation\Can.c	  1889  |<DataModelStart>| CanHL_WritePrepare
; ..\component\Can\Implementation\Can.c	  1890  Relation_Context:
; ..\component\Can\Implementation\Can.c	  1891  # from Can_Write() #
; ..\component\Can\Implementation\Can.c	  1892  Relation:
; ..\component\Can\Implementation\Can.c	  1893  TxFullCANSupport
; ..\component\Can\Implementation\Can.c	  1894  MultiplexedTx, TxHwFifo
; ..\component\Can\Implementation\Can.c	  1895  MultiplexedTx, HwCancelTx, IdenticalIdCancel
; ..\component\Can\Implementation\Can.c	  1896  ChannelAmount
; ..\component\Can\Implementation\Can.c	  1897  OneChOpt
; ..\component\Can\Implementation\Can.c	  1898  TxBasicAmount
; ..\component\Can\Implementation\Can.c	  1899  ChannelAmount
; ..\component\Can\Implementation\Can.c	  1900  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  1901  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  1902  Constrain:
; ..\component\Can\Implementation\Can.c	  1903  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  1904  */
; ..\component\Can\Implementation\Can.c	  1905  /*!
; ..\component\Can\Implementation\Can.c	  1906   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  1907   *
; ..\component\Can\Implementation\Can.c	  1908   *
; ..\component\Can\Implementation\Can.c	  1909   *
; ..\component\Can\Implementation\Can.c	  1910   *
; ..\component\Can\Implementation\Can.c	  1911   *
; ..\component\Can\Implementation\Can.c	  1912   *
; ..\component\Can\Implementation\Can.c	  1913   *
; ..\component\Can\Implementation\Can.c	  1914   *
; ..\component\Can\Implementation\Can.c	  1915   *
; ..\component\Can\Implementation\Can.c	  1916   *
; ..\component\Can\Implementation\Can.c	  1917   *
; ..\component\Can\Implementation\Can.c	  1918   *
; ..\component\Can\Implementation\Can.c	  1919   *
; ..\component\Can\Implementation\Can.c	  1920   */
; ..\component\Can\Implementation\Can.c	  1921  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanHL_WritePrepare( CAN_CHANNEL_CANTYPE_FIRST CanTxTransmissionParaStructPtr txPara )
; ..\component\Can\Implementation\Can.c	  1922  {
; ..\component\Can\Implementation\Can.c	  1923    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1924    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  1925    /* #10 calculate logical TX mailbox handle for FullCAN or for BasicCAN (Multiplexed TX) as start value */
; ..\component\Can\Implementation\Can.c	  1926    txPara->mailboxElement = 0u; /* PRQA S 2982 */ /* MD_MSR_RetVal */ /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  1927    txPara->activeSendObject = CanHL_GetActiveSendObject(txPara->mailboxHandle, 0u); /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  1928  #if defined(C_ENABLE_TX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  1929    if ( Can_GetMailboxType(txPara->mailboxHandle) != CAN_TX_FULLCAN_TYPE ) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  1930  #endif
; ..\component\Can\Implementation\Can.c	  1931    { /* #20 BasicCAN preparation - search for hardware and logical transmit handle and do cancellation */
; ..\component\Can\Implementation\Can.c	  1932  #if defined(C_ENABLE_MULTIPLEXED_TRANSMISSION) || defined(C_ENABLE_TX_HW_FIFO) 
; ..\component\Can\Implementation\Can.c	  1933      CanObjectHandle mailboxElement_max;
; ..\component\Can\Implementation\Can.c	  1934      mailboxElement_max = Can_GetMailboxSize(txPara->mailboxHandle); /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  1935      /* \trace SPEC-1677, SPEC-1672, SPEC-1679, SPEC-1673, SPEC-1671 */
; ..\component\Can\Implementation\Can.c	  1936  # if defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  1937      if (Can_GetMailboxType(txPara->mailboxHandle) == CAN_TX_BASICCAN_FIFO_TYPE) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  1938      { /* #25 in case of FIFO object set logical TX mailbox handle to write index + element start  */
; ..\component\Can\Implementation\Can.c	  1939         txPara->mailboxElement = (CanObjectHandle)Can_GetTxHwFifoWriteIndex(Can_GetMailboxTxHwFifo(txPara->mailboxHandle)); /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  1940         txPara->activeSendObject += txPara->mailboxElement; /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  1941      }
; ..\component\Can\Implementation\Can.c	  1942      else
; ..\component\Can\Implementation\Can.c	  1943  # endif
; ..\component\Can\Implementation\Can.c	  1944      { /* #27 if normal or Mux Tx search from first to last element 0..1 or 0..3 for free object or one to be cancelled */
; ..\component\Can\Implementation\Can.c	  1945        CanObjectHandle mailboxElementFound;
; ..\component\Can\Implementation\Can.c	  1946        CanObjectHandle activeSendObjectFound;
; ..\component\Can\Implementation\Can.c	  1947        mailboxElementFound = mailboxElement_max;
; ..\component\Can\Implementation\Can.c	  1948        activeSendObjectFound = mailboxElement_max;
; ..\component\Can\Implementation\Can.c	  1949        for (txPara->mailboxElement = 0u; txPara->mailboxElement < mailboxElement_max; txPara->mailboxElement++) /* SBSW_CAN_HL42 */ /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  1950        { /* #30 over all multiplexed TX objects: find free mailbox or mailbox with identical ID */
; ..\component\Can\Implementation\Can.c	  1951          if (Can_GetActiveSendState(txPara->activeSendObject) == kCanBufferFree)
; ..\component\Can\Implementation\Can.c	  1952          { /* #60 None Identical ID: else priority 1 - find free mailbox (no cancellation) */
; ..\component\Can\Implementation\Can.c	  1953            mailboxElementFound = txPara->mailboxElement;
; ..\component\Can\Implementation\Can.c	  1954            activeSendObjectFound = txPara->activeSendObject;
; ..\component\Can\Implementation\Can.c	  1955            break;
; ..\component\Can\Implementation\Can.c	  1956          }
; ..\component\Can\Implementation\Can.c	  1957          txPara->activeSendObject++; /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  1958        }
; ..\component\Can\Implementation\Can.c	  1959        if (mailboxElementFound == mailboxElement_max)
; ..\component\Can\Implementation\Can.c	  1960        { /* #90 no free or cancel mailbox found: return values set to valid element or to found element and cancel */
; ..\component\Can\Implementation\Can.c	  1961          txPara->mailboxElement = 0u; /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  1962          txPara->activeSendObject = CanHL_GetActiveSendObject(txPara->mailboxHandle, 0u); /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  1963        }
; ..\component\Can\Implementation\Can.c	  1964        else
; ..\component\Can\Implementation\Can.c	  1965        {
; ..\component\Can\Implementation\Can.c	  1966          txPara->mailboxElement = mailboxElementFound; /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  1967          txPara->activeSendObject = activeSendObjectFound; /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  1968        }
; ..\component\Can\Implementation\Can.c	  1969      } /* normal or mux tx */
; ..\component\Can\Implementation\Can.c	  1970  #endif
; ..\component\Can\Implementation\Can.c	  1971    } /* end BasicCAN handling */
; ..\component\Can\Implementation\Can.c	  1972    CAN_CHANNEL_DUMMY_STATEMENT; /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  1973    /* #200 no special FullCAN handling needed */
; ..\component\Can\Implementation\Can.c	  1974  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	  1975  
; ..\component\Can\Implementation\Can.c	  1976  #if ( defined(C_ENABLE_TX_HW_FIFO) && defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2) )
; ..\component\Can\Implementation\Can.c	  1977  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  1978  | NAME:             CanHL_WriteSavePduInfo
; ..\component\Can\Implementation\Can.c	  1979  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  1980  /*
; ..\component\Can\Implementation\Can.c	  1981  |<DataModelStart>| CanHL_WriteSavePduInfo
; ..\component\Can\Implementation\Can.c	  1982  Relation_Context:
; ..\component\Can\Implementation\Can.c	  1983  # from CanHL_WritePrepareCancelTx #
; ..\component\Can\Implementation\Can.c	  1984  HwCancelTx
; ..\component\Can\Implementation\Can.c	  1985  # from CanHL_WriteStart #
; ..\component\Can\Implementation\Can.c	  1986  TxHwFifo, GenericConfirmation
; ..\component\Can\Implementation\Can.c	  1987  Relation:
; ..\component\Can\Implementation\Can.c	  1988  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  1989  TxBasicAmount
; ..\component\Can\Implementation\Can.c	  1990  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  1991  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  1992  Constrain:
; ..\component\Can\Implementation\Can.c	  1993  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  1994  */
; ..\component\Can\Implementation\Can.c	  1995  /*!
; ..\component\Can\Implementation\Can.c	  1996   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  1997   *
; ..\component\Can\Implementation\Can.c	  1998   *
; ..\component\Can\Implementation\Can.c	  1999   *
; ..\component\Can\Implementation\Can.c	  2000   *
; ..\component\Can\Implementation\Can.c	  2001   *
; ..\component\Can\Implementation\Can.c	  2002   */
; ..\component\Can\Implementation\Can.c	  2003  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanHL_WriteSavePduInfo( CanTxTransmissionParaStructPtr txPara ) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  2004  {
; ..\component\Can\Implementation\Can.c	  2005      /* #10 Get buffer to store data */
; ..\component\Can\Implementation\Can.c	  2006      uint16 activeSendData;
; ..\component\Can\Implementation\Can.c	  2007      activeSendData = CanHL_GetActiveSendData(txPara->mailboxHandle, txPara->mailboxElement);
; ..\component\Can\Implementation\Can.c	  2008      /* #20 SDU pointer may be a null pointer in case the DLC is 0 - so do not copy data in this case */
; ..\component\Can\Implementation\Can.c	  2009      if(txPara->pdu.sdu != NULL_PTR)
; ..\component\Can\Implementation\Can.c	  2010      {
; ..\component\Can\Implementation\Can.c	  2011  # if (CAN_SAFE_BSW == STD_ON) /* COV_CAN_SAFE_BSW */
; ..\component\Can\Implementation\Can.c	  2012        if(Can_GetSizeOfActiveSendData() >= (activeSendData + txPara->pdu.length)) /* CM_CAN_HL20 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  2013  # endif
; ..\component\Can\Implementation\Can.c	  2014        {
; ..\component\Can\Implementation\Can.c	  2015          /* #25 copy data with VStdLib optimized copy routine */
; ..\component\Can\Implementation\Can.c	  2016          VStdMemCpy((void*)&Can_GetActiveSendData(activeSendData), (void*)txPara->pdu.sdu, txPara->pdu.length); /* SBSW_CAN_HL22 */ /* PRQA S 0314,0316 */ /* MD_Can_PointerVoidCast */
; ..\component\Can\Implementation\Can.c	  2017        }
; ..\component\Can\Implementation\Can.c	  2018      }
; ..\component\Can\Implementation\Can.c	  2019      /* #30 copy ID, DLC and pointer to data (also pdu as part of PduInfo struct) */
; ..\component\Can\Implementation\Can.c	  2020      Can_SetActiveSendId(txPara->activeSendObject, txPara->pdu.id); /* SBSW_CAN_HL23 */
; ..\component\Can\Implementation\Can.c	  2021      Can_SetActiveSendLength(txPara->activeSendObject, txPara->pdu.length); /* SBSW_CAN_HL23 */
; ..\component\Can\Implementation\Can.c	  2022      Can_SetActiveSendSdu(txPara->activeSendObject, &Can_GetActiveSendData(activeSendData)); /* SBSW_CAN_HL23 */
; ..\component\Can\Implementation\Can.c	  2023      Can_SetActiveSendSwPduHandle(txPara->activeSendObject, txPara->pdu.swPduHandle); /* SBSW_CAN_HL23 */
; ..\component\Can\Implementation\Can.c	  2024  }
; ..\component\Can\Implementation\Can.c	  2025  #endif
; ..\component\Can\Implementation\Can.c	  2026  
; ..\component\Can\Implementation\Can.c	  2027  
; ..\component\Can\Implementation\Can.c	  2028  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2029  | NAME:             CanHL_WriteStart
; ..\component\Can\Implementation\Can.c	  2030  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2031  /*
; ..\component\Can\Implementation\Can.c	  2032  |<DataModelStart>| Can_WriteStart
; ..\component\Can\Implementation\Can.c	  2033  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2034  # from Can_Write #
; ..\component\Can\Implementation\Can.c	  2035  Relation:
; ..\component\Can\Implementation\Can.c	  2036  GenericPreTransmit
; ..\component\Can\Implementation\Can.c	  2037  TxHwFifo, GenericConfirmation
; ..\component\Can\Implementation\Can.c	  2038  IDType
; ..\component\Can\Implementation\Can.c	  2039  OneChOpt
; ..\component\Can\Implementation\Can.c	  2040  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2041  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2042  Constrain:
; ..\component\Can\Implementation\Can.c	  2043  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2044  */
; ..\component\Can\Implementation\Can.c	  2045  /*!
; ..\component\Can\Implementation\Can.c	  2046   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2047   *
; ..\component\Can\Implementation\Can.c	  2048   *
; ..\component\Can\Implementation\Can.c	  2049   *
; ..\component\Can\Implementation\Can.c	  2050   *
; ..\component\Can\Implementation\Can.c	  2051   *
; ..\component\Can\Implementation\Can.c	  2052   *
; ..\component\Can\Implementation\Can.c	  2053   *
; ..\component\Can\Implementation\Can.c	  2054   *
; ..\component\Can\Implementation\Can.c	  2055   *
; ..\component\Can\Implementation\Can.c	  2056   *
; ..\component\Can\Implementation\Can.c	  2057   *
; ..\component\Can\Implementation\Can.c	  2058   */
; ..\component\Can\Implementation\Can.c	  2059  V_DEF_FUNC(CAN_LOCAL_INLINE, Can_ReturnType, STATIC_CODE) CanHL_WriteStart( CAN_CHANNEL_CANTYPE_FIRST CanTxTransmissionParaStructPtr txPara )
; ..\component\Can\Implementation\Can.c	  2060  {
; ..\component\Can\Implementation\Can.c	  2061    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2062    Can_ReturnType retval = CAN_OK;
; ..\component\Can\Implementation\Can.c	  2063    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2064    /* #10 free TX mailbox found so start transmission \trace SPEC-1744 */
; ..\component\Can\Implementation\Can.c	  2065    if (Can_GetActiveSendState(txPara->activeSendObject) == kCanBufferFree)
; ..\component\Can\Implementation\Can.c	  2066    {
; ..\component\Can\Implementation\Can.c	  2067      uint8 llretval;
; ..\component\Can\Implementation\Can.c	  2068      /* #20 remember PDU and send state to use it in Confirmation function \trace SPEC-1675 */
; ..\component\Can\Implementation\Can.c	  2069      Can_SetActiveSendPdu(txPara->activeSendObject, txPara->pdu.swPduHandle); /* SBSW_CAN_HL05 */
; ..\component\Can\Implementation\Can.c	  2070      Can_SetActiveSendState(txPara->activeSendObject, kCanBufferSend); /* SBSW_CAN_HL04 */
; ..\component\Can\Implementation\Can.c	  2071  #if defined(C_ENABLE_PRETRANSMIT_FCT)
; ..\component\Can\Implementation\Can.c	  2072      /* call pretransmit function ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2073      Appl_GenericPreTransmit( (uint8)channel, &(txPara->pdu) );  /* PRQA S 0312 */ /* MD_Can_NoneVolatilePointerCast */ /* SBSW_CAN_HL24 */
; ..\component\Can\Implementation\Can.c	  2074  #endif
; ..\component\Can\Implementation\Can.c	  2075  #if defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  2076      if (Can_GetMailboxType(txPara->mailboxHandle) == CAN_TX_BASICCAN_FIFO_TYPE) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  2077      { /* #30 in case of FIFO and GenericConfirmation API2 remember also data for confirmation function */
; ..\component\Can\Implementation\Can.c	  2078  # if defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2)
; ..\component\Can\Implementation\Can.c	  2079        CanHL_WriteSavePduInfo(txPara); /* SBSW_CAN_HL49 */
; ..\component\Can\Implementation\Can.c	  2080  # endif
; ..\component\Can\Implementation\Can.c	  2081        /* #40 set Fifo to next element (writing) */
; ..\component\Can\Implementation\Can.c	  2082        CanHL_SetNextTxHwFifoWriteIndex(txPara); /* SBSW_CAN_HL49 */
; ..\component\Can\Implementation\Can.c	  2083      }
; ..\component\Can\Implementation\Can.c	  2084  #endif
; ..\component\Can\Implementation\Can.c	  2085      /* #50 HW prepare transmission */
; ..\component\Can\Implementation\Can.c	  2086      CanLL_TxBegin(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST txPara); /* SBSW_CAN_HL49 */
; ..\component\Can\Implementation\Can.c	  2087      /* #60 Set ID, ID type and DLC in HW register depend on ID type */
; ..\component\Can\Implementation\Can.c	  2088      txPara->dlcRaw = MK_TX_DLC(CAN_LEN2DLC(txPara->pdu.length)); /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  2089  #if defined(C_ENABLE_EXTENDED_ID)
; ..\component\Can\Implementation\Can.c	  2090  # if defined(C_ENABLE_MIXED_ID)
; ..\component\Can\Implementation\Can.c	  2091      if ( ((txPara->pdu.id) & CAN_ID_IDE_MASK) != CAN_ID_IDE_MASK) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  2092      {
; ..\component\Can\Implementation\Can.c	  2093        SET_PARASTRUCT_IDRAW_TX_STD(txPara, txPara->pdu.id); /* SBSW_CAN_HL42 */ /* SBSW_CAN_HL42 */ /* SBSW_CAN_HL42 */ /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  2094      }
; ..\component\Can\Implementation\Can.c	  2095      else
; ..\component\Can\Implementation\Can.c	  2096  # endif
; ..\component\Can\Implementation\Can.c	  2097      {
; ..\component\Can\Implementation\Can.c	  2098        SET_PARASTRUCT_IDRAW_TX_EXT(txPara, txPara->pdu.id); /* SBSW_CAN_HL42 */ /* SBSW_CAN_HL42 */ /* SBSW_CAN_HL42 */ /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  2099      }
; ..\component\Can\Implementation\Can.c	  2100  #else
; ..\component\Can\Implementation\Can.c	  2101      {
; ..\component\Can\Implementation\Can.c	  2102        SET_PARASTRUCT_IDRAW_TX_STD(txPara, txPara->pdu.id); /* SBSW_CAN_HL42 */ /* SBSW_CAN_HL42 */ /* SBSW_CAN_HL42 */ /* SBSW_CAN_HL42 */ /* PRQA S 4491 */ /* MD_Can_IntegerCast */
; ..\component\Can\Implementation\Can.c	  2103      }
; ..\component\Can\Implementation\Can.c	  2104  #endif
; ..\component\Can\Implementation\Can.c	  2105      /* set id, dlc in hardware */
; ..\component\Can\Implementation\Can.c	  2106      CanLL_TxSetMailbox(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST txPara); /* SBSW_CAN_HL49 */
; ..\component\Can\Implementation\Can.c	  2107      if(txPara->pdu.sdu != NULL_PTR)
; ..\component\Can\Implementation\Can.c	  2108      { /* #70 Set CAN data in HW register (LL) - only when data pointer is not null \trace SPEC-1680, SPEC-1572, SPEC-1678, SPEC-60421 */
; ..\component\Can\Implementation\Can.c	  2109        txPara->CanMemCopySrcPtr = txPara->pdu.sdu; /* SBSW_CAN_HL42 */
; ..\component\Can\Implementation\Can.c	  2110        CanLL_TxCopyToCan(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST txPara); /* SBSW_CAN_HL49 */
; ..\component\Can\Implementation\Can.c	  2111      }
; ..\component\Can\Implementation\Can.c	  2112      /* #80 HW start transmission (LL) */
; ..\component\Can\Implementation\Can.c	  2113      llretval = CanLL_TxStart(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST txPara); /* SBSW_CAN_HL49 */
; ..\component\Can\Implementation\Can.c	  2114      /* HW finish transmission (LL) */
; ..\component\Can\Implementation\Can.c	  2115      CanLL_TxEnd(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST txPara); /* SBSW_CAN_HL49 */
; ..\component\Can\Implementation\Can.c	  2116      CAN_DUMMY_STATEMENT(llretval); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  2117    }
; ..\component\Can\Implementation\Can.c	  2118    else
; ..\component\Can\Implementation\Can.c	  2119    { /* #200 no free TX mailbox found so return busy - also in case cancellation (BasicCAN) was possible \trace SPEC-1754, SPEC-1764, SPEC-1747 */
; ..\component\Can\Implementation\Can.c	  2120      retval = CAN_BUSY;
; ..\component\Can\Implementation\Can.c	  2121    }
; ..\component\Can\Implementation\Can.c	  2122    return retval;
; ..\component\Can\Implementation\Can.c	  2123  } /* PRQA S 6050 */ /* MD_MSR_STCAL */
; ..\component\Can\Implementation\Can.c	  2124  
; ..\component\Can\Implementation\Can.c	  2125  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2126  | NAME:             CanHL_GetActiveSendObject
; ..\component\Can\Implementation\Can.c	  2127  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2128  /*
; ..\component\Can\Implementation\Can.c	  2129  |<DataModelStart>| CanHL_GetActiveSendObject
; ..\component\Can\Implementation\Can.c	  2130  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2131  # from CanHL_InitXXX() #
; ..\component\Can\Implementation\Can.c	  2132  Wakeup, OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  2133  # from CanHL_WritePrepare #
; ..\component\Can\Implementation\Can.c	  2134  # from CanHL_TxTaskCancelationHandling #
; ..\component\Can\Implementation\Can.c	  2135  HwCancelTx
; ..\component\Can\Implementation\Can.c	  2136  # from CanHL_CleanUpSendState #
; ..\component\Can\Implementation\Can.c	  2137  # from Can_CancelTx #
; ..\component\Can\Implementation\Can.c	  2138  TransmitCancellationAPI
; ..\component\Can\Implementation\Can.c	  2139  # from CanHL_TxConfirmation #
; ..\component\Can\Implementation\Can.c	  2140  Relation:
; ..\component\Can\Implementation\Can.c	  2141  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  2142  TxFullAmount
; ..\component\Can\Implementation\Can.c	  2143  TxBasicAmount
; ..\component\Can\Implementation\Can.c	  2144  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2145  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2146  Constrain:
; ..\component\Can\Implementation\Can.c	  2147  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2148  */
; ..\component\Can\Implementation\Can.c	  2149  /*!
; ..\component\Can\Implementation\Can.c	  2150   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2151   *
; ..\component\Can\Implementation\Can.c	  2152   *
; ..\component\Can\Implementation\Can.c	  2153   *
; ..\component\Can\Implementation\Can.c	  2154   */
; ..\component\Can\Implementation\Can.c	  2155  V_DEF_FUNC(CAN_LOCAL_INLINE, CanObjectHandle, STATIC_CODE) CanHL_GetActiveSendObject( Can_HwHandleType mailboxHandle, Can_HwHandleType mailboxElement )
; ..\component\Can\Implementation\Can.c	  2156  {
; ..\component\Can\Implementation\Can.c	  2157    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2158    CanObjectHandle activeSendObject;
; ..\component\Can\Implementation\Can.c	  2159    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2160    /* #10 get logical handle from generated indirection table */
; ..\component\Can\Implementation\Can.c	  2161    activeSendObject = (CanObjectHandle) Can_GetMailboxActiveSendObject(mailboxHandle) + mailboxElement;
; ..\component\Can\Implementation\Can.c	  2162  #if (CAN_SAFE_BSW == STD_ON) /* COV_CAN_SAFE_BSW */
; ..\component\Can\Implementation\Can.c	  2163    if (activeSendObject >= (Can_HwHandleType)Can_GetSizeOfActiveSendObject()) /* CM_CAN_HL03 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  2164    { /* #20 secure SilentBSW */
; ..\component\Can\Implementation\Can.c	  2165      activeSendObject = ((Can_HwHandleType)Can_GetSizeOfActiveSendObject() - (Can_HwHandleType)1u);
; ..\component\Can\Implementation\Can.c	  2166  # if (CAN_DEV_ERROR_REPORT == STD_ON)  
; ..\component\Can\Implementation\Can.c	  2167      Can_CallDetReportError(CAN_WRITE_ID, CAN_E_PARAM_HANDLE);
; ..\component\Can\Implementation\Can.c	  2168  # endif
; ..\component\Can\Implementation\Can.c	  2169    }
; ..\component\Can\Implementation\Can.c	  2170  #endif
; ..\component\Can\Implementation\Can.c	  2171    return activeSendObject;
; ..\component\Can\Implementation\Can.c	  2172  }
; ..\component\Can\Implementation\Can.c	  2173  
; ..\component\Can\Implementation\Can.c	  2174  #if ( defined(C_ENABLE_TX_HW_FIFO) && defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2) )
; ..\component\Can\Implementation\Can.c	  2175  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2176  | NAME:             CanHL_GetActiveSendData
; ..\component\Can\Implementation\Can.c	  2177  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2178  /*
; ..\component\Can\Implementation\Can.c	  2179  |<DataModelStart>| CanHL_GetActiveSendData
; ..\component\Can\Implementation\Can.c	  2180  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2181  HwCancelTx, TxHwFifo
; ..\component\Can\Implementation\Can.c	  2182  # from CanHL_WritePrepare #
; ..\component\Can\Implementation\Can.c	  2183  # from CanHL_TxTaskCancelationHandling #
; ..\component\Can\Implementation\Can.c	  2184  HwCancelTx
; ..\component\Can\Implementation\Can.c	  2185  # from Can_CancelTx #
; ..\component\Can\Implementation\Can.c	  2186  TransmitCancellationAPI
; ..\component\Can\Implementation\Can.c	  2187  # from CanHL_TxConfirmation #
; ..\component\Can\Implementation\Can.c	  2188  Relation:
; ..\component\Can\Implementation\Can.c	  2189  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  2190  TxBasicAmount
; ..\component\Can\Implementation\Can.c	  2191  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2192  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2193  Constrain:
; ..\component\Can\Implementation\Can.c	  2194  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2195  */
; ..\component\Can\Implementation\Can.c	  2196  /*!
; ..\component\Can\Implementation\Can.c	  2197   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2198   *
; ..\component\Can\Implementation\Can.c	  2199   *
; ..\component\Can\Implementation\Can.c	  2200   *
; ..\component\Can\Implementation\Can.c	  2201   */
; ..\component\Can\Implementation\Can.c	  2202  V_DEF_FUNC(CAN_LOCAL_INLINE, uint16, STATIC_CODE) CanHL_GetActiveSendData( Can_HwHandleType mailboxHandle, uint8 mailboxElement )
; ..\component\Can\Implementation\Can.c	  2203  {
; ..\component\Can\Implementation\Can.c	  2204    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2205    uint16 activeSendData;
; ..\component\Can\Implementation\Can.c	  2206    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2207    /* #10 get logical handle from generated indirection table */
; ..\component\Can\Implementation\Can.c	  2208    activeSendData = (uint16) (Can_GetMailboxActiveSendData(mailboxHandle) + ((uint16)mailboxElement * (uint16)Can_GetMailboxDataLen(mailboxHandle)));
; ..\component\Can\Implementation\Can.c	  2209  #if (CAN_SAFE_BSW == STD_ON) /* COV_CAN_SAFE_BSW */
; ..\component\Can\Implementation\Can.c	  2210    if ((activeSendData + Can_GetMailboxDataLen(mailboxHandle)) > Can_GetSizeOfActiveSendData()) /* CM_CAN_HL20 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  2211    { /* #20 secure SilentBSW */
; ..\component\Can\Implementation\Can.c	  2212      activeSendData = 0u;
; ..\component\Can\Implementation\Can.c	  2213  # if (CAN_DEV_ERROR_REPORT == STD_ON)  
; ..\component\Can\Implementation\Can.c	  2214      Can_CallDetReportError(CAN_WRITE_ID, CAN_E_PARAM_HANDLE);
; ..\component\Can\Implementation\Can.c	  2215  # endif
; ..\component\Can\Implementation\Can.c	  2216    }
; ..\component\Can\Implementation\Can.c	  2217  #endif
; ..\component\Can\Implementation\Can.c	  2218    return activeSendData;
; ..\component\Can\Implementation\Can.c	  2219  }
; ..\component\Can\Implementation\Can.c	  2220  #endif
; ..\component\Can\Implementation\Can.c	  2221  
; ..\component\Can\Implementation\Can.c	  2222  #if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2223  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2224  | NAME:             CanHL_RamCheckMailboxNotification
; ..\component\Can\Implementation\Can.c	  2225  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2226  /*
; ..\component\Can\Implementation\Can.c	  2227  |<DataModelStart>| CanHL_RamCheckMailboxNotification
; ..\component\Can\Implementation\Can.c	  2228  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2229  # CanHL_InitXXX() #
; ..\component\Can\Implementation\Can.c	  2230  Wakeup, OneChOpt, ChannelAmount, RamCheck
; ..\component\Can\Implementation\Can.c	  2231  Relation:
; ..\component\Can\Implementation\Can.c	  2232  TxFullCANSupport
; ..\component\Can\Implementation\Can.c	  2233  RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  2234  RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  2235  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2236  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2237  Constrain:
; ..\component\Can\Implementation\Can.c	  2238  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2239  */
; ..\component\Can\Implementation\Can.c	  2240  /*!
; ..\component\Can\Implementation\Can.c	  2241   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2242   *
; ..\component\Can\Implementation\Can.c	  2243   *
; ..\component\Can\Implementation\Can.c	  2244   *
; ..\component\Can\Implementation\Can.c	  2245   *
; ..\component\Can\Implementation\Can.c	  2246   */
; ..\component\Can\Implementation\Can.c	  2247  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanHL_RamCheckMailboxNotification( CAN_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara ) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */ /* COV_CAN_RAM_CHECK_NO_STIMULATION */
; ..\component\Can\Implementation\Can.c	  2248  {
; ..\component\Can\Implementation\Can.c	  2249    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2250  
; ..\component\Can\Implementation\Can.c	  2251    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2252    /* #10 deactivate mailbox */
; ..\component\Can\Implementation\Can.c	  2253    Can_SetMailboxState(initPara->mailboxHandle, kCanFailed); /* SBSW_CAN_HL34 */
; ..\component\Can\Implementation\Can.c	  2254    /* #20 deactivate controller */
; ..\component\Can\Implementation\Can.c	  2255    Can_SetLogStatus(channel, Can_GetLogStatus(channel) | CAN_DEACTIVATE_CONTROLLER); /* SBSW_CAN_HL02 */
; ..\component\Can\Implementation\Can.c	  2256    /* #30 notify application about corrupt mailbox */
; ..\component\Can\Implementation\Can.c	  2257  # if defined(C_ENABLE_CAN_RAM_CHECK_EXTENDED)
; ..\component\Can\Implementation\Can.c	  2258    CanIf_RamCheckCorruptMailbox((uint8)Can_GetCanToCanIfChannelMapping(channel), initPara->mailboxHandle);
; ..\component\Can\Implementation\Can.c	  2259  # else
; ..\component\Can\Implementation\Can.c	  2260  #  if defined(C_ENABLE_NOTIFY_CORRUPT_MAILBOX) /* with Mailbox Notification */
; ..\component\Can\Implementation\Can.c	  2261    Appl_CanCorruptMailbox((uint8)channel, (initPara->hwObjHandle));
; ..\component\Can\Implementation\Can.c	  2262  #  endif
; ..\component\Can\Implementation\Can.c	  2263  # endif
; ..\component\Can\Implementation\Can.c	  2264  }
; ..\component\Can\Implementation\Can.c	  2265  #endif
; ..\component\Can\Implementation\Can.c	  2266  
; ..\component\Can\Implementation\Can.c	  2267  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2268  | NAME:             CanHL_InitBegin
; ..\component\Can\Implementation\Can.c	  2269  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2270  /*
; ..\component\Can\Implementation\Can.c	  2271  |<DataModelStart>| CanHL_InitBegin
; ..\component\Can\Implementation\Can.c	  2272  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2273  # CanHL_ReInit() #
; ..\component\Can\Implementation\Can.c	  2274  Wakeup, OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  2275  Relation:
; ..\component\Can\Implementation\Can.c	  2276  RamCheck
; ..\component\Can\Implementation\Can.c	  2277  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2278  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2279  Constrain:
; ..\component\Can\Implementation\Can.c	  2280  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2281  */
; ..\component\Can\Implementation\Can.c	  2282  /*!
; ..\component\Can\Implementation\Can.c	  2283   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2284   *
; ..\component\Can\Implementation\Can.c	  2285   *
; ..\component\Can\Implementation\Can.c	  2286   *
; ..\component\Can\Implementation\Can.c	  2287   */
; ..\component\Can\Implementation\Can.c	  2288  V_DEF_FUNC(CAN_LOCAL_INLINE, uint8, STATIC_CODE) CanHL_InitBegin( CAN_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara )
; ..\component\Can\Implementation\Can.c	  2289  {
; ..\component\Can\Implementation\Can.c	  2290    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2291    uint8 initOk;
; ..\component\Can\Implementation\Can.c	  2292    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2293    initOk = kCanFailed; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	  2294    if (CanLL_InitBegin(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST initPara) == kCanOk) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* SBSW_CAN_HL31 */ /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  2295    {
; ..\component\Can\Implementation\Can.c	  2296  #if defined(C_ENABLE_CAN_RAM_CHECK_EXTENDED)
; ..\component\Can\Implementation\Can.c	  2297      /* #20 Execute pattern RamCheck */
; ..\component\Can\Implementation\Can.c	  2298      if (initPara->doRamCheck == kCanExecuteRamCheck)
; ..\component\Can\Implementation\Can.c	  2299      {
; ..\component\Can\Implementation\Can.c	  2300        initPara->isChRamCheckFail |= CAN_RAM_CHECK_BEGIN_REG_RESULT(channel, initPara); /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL31 */ /* COV_CAN_HARDWARE_FAILURE */ /* PRQA S 2985 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  2301      } 
; ..\component\Can\Implementation\Can.c	  2302  #endif
; ..\component\Can\Implementation\Can.c	  2303      /* #30 Initialize controller registers (Begin section) */
; ..\component\Can\Implementation\Can.c	  2304      initOk = CanLL_InitBeginSetRegisters(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2305    }
; ..\component\Can\Implementation\Can.c	  2306    return initOk;
; ..\component\Can\Implementation\Can.c	  2307  }
; ..\component\Can\Implementation\Can.c	  2308  
; ..\component\Can\Implementation\Can.c	  2309  #if defined(C_ENABLE_TX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  2310  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2311  | NAME:             CanHL_InitTxFullCAN
; ..\component\Can\Implementation\Can.c	  2312  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2313  /*
; ..\component\Can\Implementation\Can.c	  2314  |<DataModelStart>| CanHL_InitTxFullCAN
; ..\component\Can\Implementation\Can.c	  2315  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2316  # CanHL_ReInit() #
; ..\component\Can\Implementation\Can.c	  2317  Wakeup, OneChOpt, ChannelAmount, TxFullCANSupport
; ..\component\Can\Implementation\Can.c	  2318  Relation:
; ..\component\Can\Implementation\Can.c	  2319  RamCheck
; ..\component\Can\Implementation\Can.c	  2320  TxFullAmount
; ..\component\Can\Implementation\Can.c	  2321  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2322  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2323  Constrain:
; ..\component\Can\Implementation\Can.c	  2324  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2325  */
; ..\component\Can\Implementation\Can.c	  2326  /*!
; ..\component\Can\Implementation\Can.c	  2327   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2328   *
; ..\component\Can\Implementation\Can.c	  2329   *
; ..\component\Can\Implementation\Can.c	  2330   *
; ..\component\Can\Implementation\Can.c	  2331   *
; ..\component\Can\Implementation\Can.c	  2332   *
; ..\component\Can\Implementation\Can.c	  2333   *
; ..\component\Can\Implementation\Can.c	  2334   */
; ..\component\Can\Implementation\Can.c	  2335  V_DEF_FUNC(CAN_LOCAL_INLINE, uint8, STATIC_CODE) CanHL_InitTxFullCAN( CAN_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara )
; ..\component\Can\Implementation\Can.c	  2336  {
; ..\component\Can\Implementation\Can.c	  2337    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2338    uint8 initOk;
; ..\component\Can\Implementation\Can.c	  2339    uint8 mailboxState;
; ..\component\Can\Implementation\Can.c	  2340    CanObjectHandle activeSendObject;
; ..\component\Can\Implementation\Can.c	  2341  # if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2342    uint8 isMbRamCheckFail;
; ..\component\Can\Implementation\Can.c	  2343  # endif
; ..\component\Can\Implementation\Can.c	  2344    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2345    initOk = kCanOk;
; ..\component\Can\Implementation\Can.c	  2346    /* #10 iterate over all FullCAN TX */
; ..\component\Can\Implementation\Can.c	  2347    for (initPara->mailboxHandle = Can_GetTxFullHandleStart(canHwChannel); initPara->mailboxHandle < Can_GetTxFullHandleStop(canHwChannel); initPara->mailboxHandle++) /* PRQA S 2994,2996 */ /* MD_Can_ConstValue */ /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  2348    { /* #20 initialize FullCAN TX mailboxes */
; ..\component\Can\Implementation\Can.c	  2349      initPara->hwObjHandle = Can_GetMailboxHwHandle(initPara->mailboxHandle); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */ /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  2350      activeSendObject = CanHL_GetActiveSendObject(initPara->mailboxHandle, 0u);
; ..\component\Can\Implementation\Can.c	  2351      Can_SetActiveSendState(activeSendObject, kCanBufferFree); /* SBSW_CAN_HL04 */
; ..\component\Can\Implementation\Can.c	  2352  # if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2353      /* #30 RAM check for FullCAN TX mailboxes */
; ..\component\Can\Implementation\Can.c	  2354      isMbRamCheckFail = kCanFalse;
; ..\component\Can\Implementation\Can.c	  2355      if (initPara->doRamCheck == kCanExecuteRamCheck)
; ..\component\Can\Implementation\Can.c	  2356      {
; ..\component\Can\Implementation\Can.c	  2357        isMbRamCheckFail = CAN_RAM_CHECK_MAILBOX_RESULT(channel, initPara); /* SBSW_CAN_HL31 */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  2358      } 
; ..\component\Can\Implementation\Can.c	  2359  # endif
; ..\component\Can\Implementation\Can.c	  2360      /* TX initialization */
; ..\component\Can\Implementation\Can.c	  2361      mailboxState = CanLL_InitMailboxTx(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2362      initOk &= mailboxState; /* all mailboxes OK - otherwise return fail */ /* PRQA S 2985 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  2363  # if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2364      if(mailboxState == kCanFailed) { /* PRQA S 2992,2996 */ /* MD_Can_ConstValue */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  2365        isMbRamCheckFail = kCanTrue; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  2366      }
; ..\component\Can\Implementation\Can.c	  2367      if( (Can_GetLogStatus(channel) & CAN_STATUS_INIT) != CAN_STATUS_INIT )
; ..\component\Can\Implementation\Can.c	  2368      { /* PowerOn */
; ..\component\Can\Implementation\Can.c	  2369        Can_SetMailboxState(initPara->mailboxHandle, mailboxState); /* SBSW_CAN_HL34 */
; ..\component\Can\Implementation\Can.c	  2370      }
; ..\component\Can\Implementation\Can.c	  2371      if( (isMbRamCheckFail == kCanTrue) || (Can_GetMailboxState(initPara->mailboxHandle) == kCanFailed) ) /* COV_CAN_RAM_CHECK_NO_STIMULATION */
; ..\component\Can\Implementation\Can.c	  2372      { /* #45 deactivate corrupt mailbox */
; ..\component\Can\Implementation\Can.c	  2373        CanLL_InitMailboxTxDeactivate(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2374        if (isMbRamCheckFail == kCanTrue)
; ..\component\Can\Implementation\Can.c	  2375        {  /* #50 notify application about corrupt mailbox and deactivate controller */
; ..\component\Can\Implementation\Can.c	  2376          CanHL_RamCheckMailboxNotification(CAN_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2377        }
; ..\component\Can\Implementation\Can.c	  2378      }
; ..\component\Can\Implementation\Can.c	  2379  # endif
; ..\component\Can\Implementation\Can.c	  2380    }
; ..\component\Can\Implementation\Can.c	  2381    return initOk;
; ..\component\Can\Implementation\Can.c	  2382  }
; ..\component\Can\Implementation\Can.c	  2383  #endif
; ..\component\Can\Implementation\Can.c	  2384  
; ..\component\Can\Implementation\Can.c	  2385  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2386  | NAME:             CanHL_InitTxBasicCAN
; ..\component\Can\Implementation\Can.c	  2387  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2388  /*
; ..\component\Can\Implementation\Can.c	  2389  |<DataModelStart>| CanHL_InitTxBasicCAN
; ..\component\Can\Implementation\Can.c	  2390  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2391  # CanHL_ReInit() #
; ..\component\Can\Implementation\Can.c	  2392  Wakeup, OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  2393  Relation:
; ..\component\Can\Implementation\Can.c	  2394  MultiplexedTx, TxHwFifo
; ..\component\Can\Implementation\Can.c	  2395  TxHwFifo, GenericConfirmation, IfTxBuffer
; ..\component\Can\Implementation\Can.c	  2396  TxBasicAmount
; ..\component\Can\Implementation\Can.c	  2397  RamCheck
; ..\component\Can\Implementation\Can.c	  2398  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2399  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2400  Constrain:
; ..\component\Can\Implementation\Can.c	  2401  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2402  */
; ..\component\Can\Implementation\Can.c	  2403  /*!
; ..\component\Can\Implementation\Can.c	  2404   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2405   *
; ..\component\Can\Implementation\Can.c	  2406   *
; ..\component\Can\Implementation\Can.c	  2407   *
; ..\component\Can\Implementation\Can.c	  2408   *
; ..\component\Can\Implementation\Can.c	  2409   *
; ..\component\Can\Implementation\Can.c	  2410   *
; ..\component\Can\Implementation\Can.c	  2411   */
; ..\component\Can\Implementation\Can.c	  2412  V_DEF_FUNC(CAN_LOCAL_INLINE, uint8, STATIC_CODE) CanHL_InitTxBasicCAN( CAN_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara )
; ..\component\Can\Implementation\Can.c	  2413  {
; ..\component\Can\Implementation\Can.c	  2414    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2415    uint8 initOk;
; ..\component\Can\Implementation\Can.c	  2416    uint8 mailboxState;
; ..\component\Can\Implementation\Can.c	  2417    CanObjectHandle activeSendObject;
; ..\component\Can\Implementation\Can.c	  2418  #if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2419    uint8 isMbRamCheckFail;
; ..\component\Can\Implementation\Can.c	  2420  #endif
; ..\component\Can\Implementation\Can.c	  2421  
; ..\component\Can\Implementation\Can.c	  2422    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2423    initOk = kCanOk;
; ..\component\Can\Implementation\Can.c	  2424    initPara->mailboxHandle = Can_GetTxBasicHandleStart(canHwChannel); /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  2425  #if defined(C_ENABLE_MULTIPLE_BASICCAN_TX)
; ..\component\Can\Implementation\Can.c	  2426    for (; initPara->mailboxHandle < Can_GetTxBasicHandleStop(canHwChannel); initPara->mailboxHandle++) /* PRQA S 2994,2996 */ /* MD_Can_ConstValue */ /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  2427  #endif
; ..\component\Can\Implementation\Can.c	  2428    { /* #10 iterate over all logical BasicCAN TX */
; ..\component\Can\Implementation\Can.c	  2429  #if defined(C_ENABLE_MULTIPLEXED_TRANSMISSION) || defined(C_ENABLE_TX_HW_FIFO) 
; ..\component\Can\Implementation\Can.c	  2430      CanObjectHandle activeSendObjectStop;
; ..\component\Can\Implementation\Can.c	  2431  #endif
; ..\component\Can\Implementation\Can.c	  2432      initPara->hwObjHandle = Can_GetMailboxHwHandle(initPara->mailboxHandle); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */ /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  2433      activeSendObject = CanHL_GetActiveSendObject(initPara->mailboxHandle, 0u);
; ..\component\Can\Implementation\Can.c	  2434  #if defined(C_ENABLE_MULTIPLEXED_TRANSMISSION) || defined(C_ENABLE_TX_HW_FIFO) 
; ..\component\Can\Implementation\Can.c	  2435      activeSendObjectStop = activeSendObject + Can_GetMailboxSize(initPara->mailboxHandle);
; ..\component\Can\Implementation\Can.c	  2436      for (; activeSendObject < activeSendObjectStop; activeSendObject++)
; ..\component\Can\Implementation\Can.c	  2437  #endif
; ..\component\Can\Implementation\Can.c	  2438      { /* #20 initialize BasicCAN TX mailboxes */
; ..\component\Can\Implementation\Can.c	  2439        Can_SetActiveSendState(activeSendObject, kCanBufferFree); /* SBSW_CAN_HL04 */
; ..\component\Can\Implementation\Can.c	  2440      }
; ..\component\Can\Implementation\Can.c	  2441  # if defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  2442      if (Can_GetMailboxType(initPara->mailboxHandle) == CAN_TX_BASICCAN_FIFO_TYPE) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  2443      { /* #25 initialize TxHwFifo index and fill state */
; ..\component\Can\Implementation\Can.c	  2444        uint16 txHwFifo;
; ..\component\Can\Implementation\Can.c	  2445        txHwFifo = Can_GetMailboxTxHwFifo(initPara->mailboxHandle);
; ..\component\Can\Implementation\Can.c	  2446  #  if (CAN_SAFE_BSW == STD_ON) /* COV_CAN_SAFE_BSW */
; ..\component\Can\Implementation\Can.c	  2447        if (txHwFifo >= (uint16)Can_GetSizeOfTxHwFifo()) /* CM_CAN_HL32 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  2448        {
; ..\component\Can\Implementation\Can.c	  2449          txHwFifo = 0u;
; ..\component\Can\Implementation\Can.c	  2450          initOk = kCanFailed;
; ..\component\Can\Implementation\Can.c	  2451        }
; ..\component\Can\Implementation\Can.c	  2452  #  endif
; ..\component\Can\Implementation\Can.c	  2453        Can_SetTxHwFifoWriteIndex(txHwFifo, 0u); /* SBSW_CAN_HL50 */
; ..\component\Can\Implementation\Can.c	  2454        Can_SetTxHwFifoReadIndex(txHwFifo, 0u); /* SBSW_CAN_HL50 */
; ..\component\Can\Implementation\Can.c	  2455        Can_SetTxHwFifoFillCount(txHwFifo, 0u); /* SBSW_CAN_HL50 */
; ..\component\Can\Implementation\Can.c	  2456      }
; ..\component\Can\Implementation\Can.c	  2457  # endif
; ..\component\Can\Implementation\Can.c	  2458  #if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2459      /* #30 RAM check for BasicCAN TX mailboxes */
; ..\component\Can\Implementation\Can.c	  2460      isMbRamCheckFail = kCanFalse;
; ..\component\Can\Implementation\Can.c	  2461      if (initPara->doRamCheck == kCanExecuteRamCheck)
; ..\component\Can\Implementation\Can.c	  2462      {
; ..\component\Can\Implementation\Can.c	  2463        isMbRamCheckFail = CAN_RAM_CHECK_MAILBOX_RESULT(channel, initPara); /* COV_CAN_HARDWARE_FAILURE */ /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2464      } 
; ..\component\Can\Implementation\Can.c	  2465  #endif
; ..\component\Can\Implementation\Can.c	  2466      /* TX initialization */
; ..\component\Can\Implementation\Can.c	  2467      mailboxState = CanLL_InitMailboxTx(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2468      initOk &= mailboxState; /* all mailboxes OK - otherwise return fail */ /* PRQA S 2985,2986 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  2469  #if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2470      if(mailboxState == kCanFailed) { /* PRQA S 2992,2996 */ /* MD_Can_ConstValue */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  2471        isMbRamCheckFail = kCanTrue; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  2472      }
; ..\component\Can\Implementation\Can.c	  2473      if( (Can_GetLogStatus(channel) & CAN_STATUS_INIT) != CAN_STATUS_INIT )
; ..\component\Can\Implementation\Can.c	  2474      { /* PowerOn */
; ..\component\Can\Implementation\Can.c	  2475        Can_SetMailboxState(initPara->mailboxHandle, mailboxState); /* SBSW_CAN_HL34 */
; ..\component\Can\Implementation\Can.c	  2476      }
; ..\component\Can\Implementation\Can.c	  2477      if( (isMbRamCheckFail == kCanTrue) || (Can_GetMailboxState(initPara->mailboxHandle) == kCanFailed) ) /* COV_CAN_RAM_CHECK_NO_STIMULATION */
; ..\component\Can\Implementation\Can.c	  2478      { /* #45 deactivate corrupt mailbox */
; ..\component\Can\Implementation\Can.c	  2479        CanLL_InitMailboxTxDeactivate(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2480        if (isMbRamCheckFail == kCanTrue)
; ..\component\Can\Implementation\Can.c	  2481        {  /* #50 notify application about corrupt mailbox and deactivate controller */
; ..\component\Can\Implementation\Can.c	  2482          CanHL_RamCheckMailboxNotification(CAN_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2483        }
; ..\component\Can\Implementation\Can.c	  2484      }
; ..\component\Can\Implementation\Can.c	  2485  #endif
; ..\component\Can\Implementation\Can.c	  2486    }
; ..\component\Can\Implementation\Can.c	  2487    return initOk;
; ..\component\Can\Implementation\Can.c	  2488  } /* PRQA S 6010 */ /* MD_MSR_STPTH */
; ..\component\Can\Implementation\Can.c	  2489  
; ..\component\Can\Implementation\Can.c	  2490  
; ..\component\Can\Implementation\Can.c	  2491  #if defined(C_ENABLE_RX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  2492  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2493  | NAME:             CanHL_InitRxFullCAN
; ..\component\Can\Implementation\Can.c	  2494  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2495  /*
; ..\component\Can\Implementation\Can.c	  2496  |<DataModelStart>| CanHL_InitRxFullCAN
; ..\component\Can\Implementation\Can.c	  2497  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2498  # CanHL_ReInit() #
; ..\component\Can\Implementation\Can.c	  2499  Wakeup, OneChOpt, ChannelAmount, RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  2500  Relation:
; ..\component\Can\Implementation\Can.c	  2501  RamCheck
; ..\component\Can\Implementation\Can.c	  2502  IDType
; ..\component\Can\Implementation\Can.c	  2503  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2504  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2505  Constrain:
; ..\component\Can\Implementation\Can.c	  2506  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2507  */
; ..\component\Can\Implementation\Can.c	  2508  /*!
; ..\component\Can\Implementation\Can.c	  2509   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2510   *
; ..\component\Can\Implementation\Can.c	  2511   *
; ..\component\Can\Implementation\Can.c	  2512   *
; ..\component\Can\Implementation\Can.c	  2513   *
; ..\component\Can\Implementation\Can.c	  2514   *
; ..\component\Can\Implementation\Can.c	  2515   *
; ..\component\Can\Implementation\Can.c	  2516   *
; ..\component\Can\Implementation\Can.c	  2517   */
; ..\component\Can\Implementation\Can.c	  2518  V_DEF_FUNC(CAN_LOCAL_INLINE, uint8, STATIC_CODE) CanHL_InitRxFullCAN( CAN_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara )
; ..\component\Can\Implementation\Can.c	  2519  {
; ..\component\Can\Implementation\Can.c	  2520    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2521    uint8 initOk;
; ..\component\Can\Implementation\Can.c	  2522    uint8 mailboxState;
; ..\component\Can\Implementation\Can.c	  2523  # if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2524    uint8 isMbRamCheckFail;
; ..\component\Can\Implementation\Can.c	  2525  # endif
; ..\component\Can\Implementation\Can.c	  2526  
; ..\component\Can\Implementation\Can.c	  2527    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2528    initOk = kCanOk;
; ..\component\Can\Implementation\Can.c	  2529    for (initPara->mailboxHandle = Can_GetRxFullHandleStart(canHwChannel); initPara->mailboxHandle < Can_GetRxFullHandleStop(canHwChannel); initPara->mailboxHandle++) /* PRQA S 2994,2996 */ /* MD_Can_ConstValue */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  2530    { /* #10 iterate over all FullCAN RX mailboxes */
; ..\component\Can\Implementation\Can.c	  2531      initPara->hwObjHandle=Can_GetMailboxHwHandle(initPara->mailboxHandle); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */ /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  2532  # if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2533      /* #20 RAM check for FullCAN RX mailboxes */
; ..\component\Can\Implementation\Can.c	  2534      isMbRamCheckFail = kCanFalse;
; ..\component\Can\Implementation\Can.c	  2535      if (initPara->doRamCheck == kCanExecuteRamCheck)
; ..\component\Can\Implementation\Can.c	  2536      {
; ..\component\Can\Implementation\Can.c	  2537        isMbRamCheckFail = CAN_RAM_CHECK_MAILBOX_RESULT(channel, initPara); /* COV_CAN_HARDWARE_FAILURE */ /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2538      } 
; ..\component\Can\Implementation\Can.c	  2539  # endif
; ..\component\Can\Implementation\Can.c	  2540      /* #30 set ID for FullCAN RX mailboxes (LL) */
; ..\component\Can\Implementation\Can.c	  2541  # if defined(C_ENABLE_EXTENDED_ID)
; ..\component\Can\Implementation\Can.c	  2542  #  if defined(C_ENABLE_MIXED_ID)
; ..\component\Can\Implementation\Can.c	  2543      if ( ((Can_IdType)Can_GetMailboxIDValue(initPara->mailboxHandle) & CAN_ID_IDE_MASK) != CAN_ID_IDE_MASK) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  2544      {
; ..\component\Can\Implementation\Can.c	  2545        initPara->idType = kCanIdTypeStd; /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  2546        SET_PARASTRUCT_IDRAW_RX_STD(initPara, Can_GetMailboxIDValue(initPara->mailboxHandle)); /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */ /* PRQA S 4491 */ /* MD_Can_IntegerCast */
; ..\component\Can\Implementation\Can.c	  2547      }
; ..\component\Can\Implementation\Can.c	  2548      else
; ..\component\Can\Implementation\Can.c	  2549  #  endif
; ..\component\Can\Implementation\Can.c	  2550      {
; ..\component\Can\Implementation\Can.c	  2551        initPara->idType = kCanIdTypeExt; /* SBSW_CAN_HL36 */ /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  2552        SET_PARASTRUCT_IDRAW_RX_EXT(initPara, Can_GetMailboxIDValue(initPara->mailboxHandle)); /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  2553      }
; ..\component\Can\Implementation\Can.c	  2554  # else
; ..\component\Can\Implementation\Can.c	  2555      initPara->idType = kCanIdTypeStd; /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  2556      SET_PARASTRUCT_IDRAW_RX_STD(initPara, Can_GetMailboxIDValue(initPara->mailboxHandle)); /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */ /* PRQA S 4491,2985 */ /* MD_Can_IntegerCast */
; ..\component\Can\Implementation\Can.c	  2557  # endif
; ..\component\Can\Implementation\Can.c	  2558      /* #40 initialize FullCAN RX mailboxes */
; ..\component\Can\Implementation\Can.c	  2559      mailboxState = CanLL_InitMailboxRxFullCan(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2560      initOk &= mailboxState; /* all mailboxes OK - otherwise return fail */ /* PRQA S 2985 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  2561  # if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2562      if(mailboxState == kCanFailed) { /* PRQA S 2992,2996 */ /* MD_Can_ConstValue */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  2563        isMbRamCheckFail = kCanTrue; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  2564      }
; ..\component\Can\Implementation\Can.c	  2565      if( (Can_GetLogStatus(channel) & CAN_STATUS_INIT) != CAN_STATUS_INIT )
; ..\component\Can\Implementation\Can.c	  2566      { /* PowerOn */
; ..\component\Can\Implementation\Can.c	  2567        Can_SetMailboxState(initPara->mailboxHandle, mailboxState); /* SBSW_CAN_HL34 */
; ..\component\Can\Implementation\Can.c	  2568      }
; ..\component\Can\Implementation\Can.c	  2569      if( (isMbRamCheckFail == kCanTrue) || (Can_GetMailboxState(initPara->mailboxHandle) == kCanFailed) ) /* COV_CAN_RAM_CHECK_NO_STIMULATION */
; ..\component\Can\Implementation\Can.c	  2570      { /* #45 deactivate corrupt mailbox */
; ..\component\Can\Implementation\Can.c	  2571        CanLL_InitMailboxRxFullCanDeactivate(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2572        if (isMbRamCheckFail == kCanTrue)
; ..\component\Can\Implementation\Can.c	  2573        {  /* #50 notify application about corrupt mailbox and deactivate controller */
; ..\component\Can\Implementation\Can.c	  2574          CanHL_RamCheckMailboxNotification(CAN_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2575        }
; ..\component\Can\Implementation\Can.c	  2576      }
; ..\component\Can\Implementation\Can.c	  2577  # endif
; ..\component\Can\Implementation\Can.c	  2578    }
; ..\component\Can\Implementation\Can.c	  2579    return initOk;
; ..\component\Can\Implementation\Can.c	  2580  }
; ..\component\Can\Implementation\Can.c	  2581  #endif
; ..\component\Can\Implementation\Can.c	  2582  
; ..\component\Can\Implementation\Can.c	  2583  #if defined(C_ENABLE_RX_BASICCAN_OBJECTS) /* COV_CAN_MULTIPLE_BASICCAN */
; ..\component\Can\Implementation\Can.c	  2584  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2585  | NAME:             CanHL_InitRxBasicCAN
; ..\component\Can\Implementation\Can.c	  2586  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2587  /*
; ..\component\Can\Implementation\Can.c	  2588  |<DataModelStart>| CanHL_InitRxBasicCAN
; ..\component\Can\Implementation\Can.c	  2589  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2590  # CanHL_ReInit() #
; ..\component\Can\Implementation\Can.c	  2591  Wakeup, OneChOpt, ChannelAmount, RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  2592  Relation:
; ..\component\Can\Implementation\Can.c	  2593  RamCheck
; ..\component\Can\Implementation\Can.c	  2594  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2595  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2596  Constrain:
; ..\component\Can\Implementation\Can.c	  2597  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2598  */
; ..\component\Can\Implementation\Can.c	  2599  /*!
; ..\component\Can\Implementation\Can.c	  2600   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2601   *
; ..\component\Can\Implementation\Can.c	  2602   *
; ..\component\Can\Implementation\Can.c	  2603   *
; ..\component\Can\Implementation\Can.c	  2604   *
; ..\component\Can\Implementation\Can.c	  2605   *
; ..\component\Can\Implementation\Can.c	  2606   *
; ..\component\Can\Implementation\Can.c	  2607   */
; ..\component\Can\Implementation\Can.c	  2608  V_DEF_FUNC(CAN_LOCAL_INLINE, uint8, STATIC_CODE) CanHL_InitRxBasicCAN( CAN_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara )
; ..\component\Can\Implementation\Can.c	  2609  {
; ..\component\Can\Implementation\Can.c	  2610    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2611    uint8 initOk;
; ..\component\Can\Implementation\Can.c	  2612    uint8 mailboxState;
; ..\component\Can\Implementation\Can.c	  2613  # if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2614    uint8 isMbRamCheckFail;
; ..\component\Can\Implementation\Can.c	  2615  # endif
; ..\component\Can\Implementation\Can.c	  2616  
; ..\component\Can\Implementation\Can.c	  2617    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2618    initOk = kCanOk;
; ..\component\Can\Implementation\Can.c	  2619    for (initPara->mailboxHandle = Can_GetRxBasicHandleStart(canHwChannel); initPara->mailboxHandle < Can_GetRxBasicHandleStop(canHwChannel); initPara->mailboxHandle++) /* PRQA S 2994,2996 */ /* MD_Can_ConstValue */ /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  2620    { /* #10 iterate over all BasicCAN RX mailboxes */
; ..\component\Can\Implementation\Can.c	  2621      initPara->hwObjHandle = Can_GetMailboxHwHandle(initPara->mailboxHandle); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */ /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  2622  # if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2623      /* #20 RAM check for BasicCAN RX mailboxes */
; ..\component\Can\Implementation\Can.c	  2624      isMbRamCheckFail = kCanFalse;
; ..\component\Can\Implementation\Can.c	  2625      if (initPara->doRamCheck == kCanExecuteRamCheck)
; ..\component\Can\Implementation\Can.c	  2626      {
; ..\component\Can\Implementation\Can.c	  2627        isMbRamCheckFail = CAN_RAM_CHECK_MAILBOX_RESULT(channel, initPara); /* COV_CAN_HARDWARE_FAILURE */ /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2628      } 
; ..\component\Can\Implementation\Can.c	  2629  # endif
; ..\component\Can\Implementation\Can.c	  2630      /* #30 initialize BasicCAN RX mailboxes */
; ..\component\Can\Implementation\Can.c	  2631      mailboxState = CanLL_InitMailboxRxBasicCan(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2632      initOk &= mailboxState; /* all mailboxes OK - otherwise return fail */ /* PRQA S 2985 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  2633  # if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  2634      if(mailboxState == kCanFailed) { /* PRQA S 2992,2996 */ /* MD_Can_ConstValue */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  2635        isMbRamCheckFail = kCanTrue; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  2636      }
; ..\component\Can\Implementation\Can.c	  2637      if( (Can_GetLogStatus(channel) & CAN_STATUS_INIT) != CAN_STATUS_INIT )
; ..\component\Can\Implementation\Can.c	  2638      { /* PowerOn */
; ..\component\Can\Implementation\Can.c	  2639        Can_SetMailboxState(initPara->mailboxHandle, mailboxState); /* SBSW_CAN_HL34 */
; ..\component\Can\Implementation\Can.c	  2640      }
; ..\component\Can\Implementation\Can.c	  2641      if( (isMbRamCheckFail == kCanTrue) || (Can_GetMailboxState(initPara->mailboxHandle) == kCanFailed) ) /* COV_CAN_RAM_CHECK_NO_STIMULATION */
; ..\component\Can\Implementation\Can.c	  2642      { /* #45 deactivate corrupt mailbox */
; ..\component\Can\Implementation\Can.c	  2643        CanLL_InitMailboxRxBasicCanDeactivate(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2644        if (isMbRamCheckFail == kCanTrue)
; ..\component\Can\Implementation\Can.c	  2645        {  /* #50 notify application about corrupt mailbox and deactivate controller */
; ..\component\Can\Implementation\Can.c	  2646          CanHL_RamCheckMailboxNotification(CAN_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */
; ..\component\Can\Implementation\Can.c	  2647        }
; ..\component\Can\Implementation\Can.c	  2648      }
; ..\component\Can\Implementation\Can.c	  2649  # endif
; ..\component\Can\Implementation\Can.c	  2650    }
; ..\component\Can\Implementation\Can.c	  2651    return initOk;
; ..\component\Can\Implementation\Can.c	  2652  }
; ..\component\Can\Implementation\Can.c	  2653  #endif
; ..\component\Can\Implementation\Can.c	  2654  
; ..\component\Can\Implementation\Can.c	  2655  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2656  | NAME:             CanHL_InitEnd_InitMode
; ..\component\Can\Implementation\Can.c	  2657  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2658  /*
; ..\component\Can\Implementation\Can.c	  2659  |<DataModelStart>| CanHL_InitEnd_InitMode
; ..\component\Can\Implementation\Can.c	  2660  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2661  # CanHL_ReInit() #
; ..\component\Can\Implementation\Can.c	  2662  Wakeup, OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  2663  Relation:
; ..\component\Can\Implementation\Can.c	  2664  RamCheck
; ..\component\Can\Implementation\Can.c	  2665  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2666  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2667  Constrain:
; ..\component\Can\Implementation\Can.c	  2668  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2669  */
; ..\component\Can\Implementation\Can.c	  2670  /*!
; ..\component\Can\Implementation\Can.c	  2671   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2672   *
; ..\component\Can\Implementation\Can.c	  2673   *
; ..\component\Can\Implementation\Can.c	  2674   *
; ..\component\Can\Implementation\Can.c	  2675   */
; ..\component\Can\Implementation\Can.c	  2676  V_DEF_FUNC(CAN_LOCAL_INLINE, uint8, STATIC_CODE) CanHL_InitEnd_InitMode( CAN_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara )
; ..\component\Can\Implementation\Can.c	  2677  {
; ..\component\Can\Implementation\Can.c	  2678    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2679    uint8 initOk;
; ..\component\Can\Implementation\Can.c	  2680  
; ..\component\Can\Implementation\Can.c	  2681    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2682    initOk = kCanOk;
; ..\component\Can\Implementation\Can.c	  2683  
; ..\component\Can\Implementation\Can.c	  2684    /* #20 HW specific initialization end */
; ..\component\Can\Implementation\Can.c	  2685    initOk &= CanLL_InitEndSetRegisters(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_HL31 */ /* PRQA S 2985 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  2686    initOk &= CanLL_InitEnd( CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST initPara ); /* SBSW_CAN_HL31 */ /* PRQA S 2985 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  2687    return initOk;
; ..\component\Can\Implementation\Can.c	  2688  }
; ..\component\Can\Implementation\Can.c	  2689  
; ..\component\Can\Implementation\Can.c	  2690  #if defined(C_ENABLE_RX_BASICCAN_OBJECTS) /* COV_CAN_MULTIPLE_BASICCAN */
; ..\component\Can\Implementation\Can.c	  2691  # if defined(C_ENABLE_RX_BASICCAN_POLLING) /* COV_CAN_RX_BASICCAN_POLLING */
; ..\component\Can\Implementation\Can.c	  2692  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2693  | NAME:             CanHL_RxBasicCanPolling
; ..\component\Can\Implementation\Can.c	  2694  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2695  /*
; ..\component\Can\Implementation\Can.c	  2696  |<DataModelStart>| CanHL_RxBasicCanPolling
; ..\component\Can\Implementation\Can.c	  2697  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2698  # from Can_MainFunction_Read #
; ..\component\Can\Implementation\Can.c	  2699  RxBasicCANSupport, RxPolling
; ..\component\Can\Implementation\Can.c	  2700  Relation:
; ..\component\Can\Implementation\Can.c	  2701  IndividualPolling
; ..\component\Can\Implementation\Can.c	  2702  OneChOpt
; ..\component\Can\Implementation\Can.c	  2703  ChannelAmount
; ..\component\Can\Implementation\Can.c	  2704  RxBasicAmount
; ..\component\Can\Implementation\Can.c	  2705  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2706  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2707  Constrain:
; ..\component\Can\Implementation\Can.c	  2708  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2709  */
; ..\component\Can\Implementation\Can.c	  2710  /*!
; ..\component\Can\Implementation\Can.c	  2711   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2712   *
; ..\component\Can\Implementation\Can.c	  2713   *
; ..\component\Can\Implementation\Can.c	  2714   *
; ..\component\Can\Implementation\Can.c	  2715   *
; ..\component\Can\Implementation\Can.c	  2716   *
; ..\component\Can\Implementation\Can.c	  2717   */
; ..\component\Can\Implementation\Can.c	  2718  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanHL_RxBasicCanPolling( CAN_HW_CHANNEL_CANTYPE_ONLY )
; ..\component\Can\Implementation\Can.c	  2719  {
; ..\component\Can\Implementation\Can.c	  2720    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2721    tCanTaskParaStruct taskPara;
; ..\component\Can\Implementation\Can.c	  2722  
; ..\component\Can\Implementation\Can.c	  2723    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2724    /* #10 check global pending flag (over all mailboxes - if available) */
; ..\component\Can\Implementation\Can.c	  2725    if(CanLL_RxBasicIsGlobalIndPending(CAN_HW_CHANNEL_CANPARA_ONLY) == kCanTrue) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  2726    {
; ..\component\Can\Implementation\Can.c	  2727      /* #20 loop over all BasicCAN mailboxes */
; ..\component\Can\Implementation\Can.c	  2728      for (taskPara.mailboxHandle = Can_GetRxBasicHandleStart(canHwChannel); taskPara.mailboxHandle < Can_GetRxBasicHandleStop(canHwChannel); taskPara.mailboxHandle++) /* PRQA S 2994,2996 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  2729      { /* loop over all BasicCAN mailboxes with gap */
; ..\component\Can\Implementation\Can.c	  2730        taskPara.hwObjHandle = Can_GetMailboxHwHandle(taskPara.mailboxHandle); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  2731  #  if defined(C_ENABLE_INDIVIDUAL_POLLING) /* COV_CAN_HWOBJINDIVPOLLING */
; ..\component\Can\Implementation\Can.c	  2732        /* #30 check individual polling flag */
; ..\component\Can\Implementation\Can.c	  2733        if ( Can_IsMailboxIndivPolling(taskPara.mailboxHandle)) /* COV_CAN_HWOBJINDIVPOLLING */
; ..\component\Can\Implementation\Can.c	  2734  #  endif
; ..\component\Can\Implementation\Can.c	  2735        {
; ..\component\Can\Implementation\Can.c	  2736          /* #40 call LL handling */
; ..\component\Can\Implementation\Can.c	  2737          CanLL_RxBasicProcessPendings(CAN_HW_CHANNEL_CANPARA_FIRST &taskPara); /* SBSW_CAN_HL44 */
; ..\component\Can\Implementation\Can.c	  2738        }
; ..\component\Can\Implementation\Can.c	  2739      }
; ..\component\Can\Implementation\Can.c	  2740    }
; ..\component\Can\Implementation\Can.c	  2741  }
; ..\component\Can\Implementation\Can.c	  2742  # endif /* C_ENABLE_RX_BASICCAN_POLLING */
; ..\component\Can\Implementation\Can.c	  2743  #endif /* C_ENABLE_RX_BASICCAN_OBJECTS */
; ..\component\Can\Implementation\Can.c	  2744  
; ..\component\Can\Implementation\Can.c	  2745  #if defined(C_ENABLE_RX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  2746  # if defined(C_ENABLE_RX_FULLCAN_POLLING) /* COV_CAN_RX_FULLCAN_POLLING */
; ..\component\Can\Implementation\Can.c	  2747  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2748  | NAME:             CanHL_RxFullCanPolling
; ..\component\Can\Implementation\Can.c	  2749  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2750  /*
; ..\component\Can\Implementation\Can.c	  2751  |<DataModelStart>| CanHL_RxFullCanPolling
; ..\component\Can\Implementation\Can.c	  2752  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2753  # from Can_MainFunction_Read #
; ..\component\Can\Implementation\Can.c	  2754  RxFullCANSupport, RxPolling
; ..\component\Can\Implementation\Can.c	  2755  Relation:
; ..\component\Can\Implementation\Can.c	  2756  IndividualPolling
; ..\component\Can\Implementation\Can.c	  2757  OneChOpt
; ..\component\Can\Implementation\Can.c	  2758  ChannelAmount
; ..\component\Can\Implementation\Can.c	  2759  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2760  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2761  Constrain:
; ..\component\Can\Implementation\Can.c	  2762  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2763  */
; ..\component\Can\Implementation\Can.c	  2764  /*!
; ..\component\Can\Implementation\Can.c	  2765   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2766   *
; ..\component\Can\Implementation\Can.c	  2767   *
; ..\component\Can\Implementation\Can.c	  2768   *
; ..\component\Can\Implementation\Can.c	  2769   *
; ..\component\Can\Implementation\Can.c	  2770   *
; ..\component\Can\Implementation\Can.c	  2771   */
; ..\component\Can\Implementation\Can.c	  2772  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanHL_RxFullCanPolling( CAN_HW_CHANNEL_CANTYPE_ONLY )
; ..\component\Can\Implementation\Can.c	  2773  {
; ..\component\Can\Implementation\Can.c	  2774    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2775    tCanTaskParaStruct taskPara;
; ..\component\Can\Implementation\Can.c	  2776  
; ..\component\Can\Implementation\Can.c	  2777    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2778    /* #10 check global pending flag (over all mailboxes - if available) */
; ..\component\Can\Implementation\Can.c	  2779    if(CanLL_RxFullIsGlobalIndPending(CAN_HW_CHANNEL_CANPARA_ONLY) == kCanTrue) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  2780    {
; ..\component\Can\Implementation\Can.c	  2781      /* #20 loop over all FullCAN mailboxes */
; ..\component\Can\Implementation\Can.c	  2782      for (taskPara.mailboxHandle = Can_GetRxFullHandleStart(canHwChannel); taskPara.mailboxHandle < Can_GetRxFullHandleStop(canHwChannel); taskPara.mailboxHandle++ ) /* PRQA S 2994,2996 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  2783      {
; ..\component\Can\Implementation\Can.c	  2784        taskPara.hwObjHandle = Can_GetMailboxHwHandle(taskPara.mailboxHandle); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  2785  #  if defined(C_ENABLE_INDIVIDUAL_POLLING) /* COV_CAN_HWOBJINDIVPOLLING */
; ..\component\Can\Implementation\Can.c	  2786        /* #30 check individual polling flag */
; ..\component\Can\Implementation\Can.c	  2787        if ( Can_IsMailboxIndivPolling(taskPara.mailboxHandle)) /* COV_CAN_HWOBJINDIVPOLLING */
; ..\component\Can\Implementation\Can.c	  2788  #  endif
; ..\component\Can\Implementation\Can.c	  2789        {
; ..\component\Can\Implementation\Can.c	  2790          /* #40 call LL handling */
; ..\component\Can\Implementation\Can.c	  2791          CanLL_RxFullProcessPendings(CAN_HW_CHANNEL_CANPARA_FIRST &taskPara); /* SBSW_CAN_HL44 */
; ..\component\Can\Implementation\Can.c	  2792        }
; ..\component\Can\Implementation\Can.c	  2793      }
; ..\component\Can\Implementation\Can.c	  2794    }
; ..\component\Can\Implementation\Can.c	  2795  }
; ..\component\Can\Implementation\Can.c	  2796  # endif /* C_ENABLE_RX_FULLCAN_POLLING */
; ..\component\Can\Implementation\Can.c	  2797  #endif /* C_ENABLE_RX_FULLCAN_OBJECTS */
; ..\component\Can\Implementation\Can.c	  2798  
; ..\component\Can\Implementation\Can.c	  2799  #if defined(C_ENABLE_RX_FULLCAN_OBJECTS) || defined(C_ENABLE_RX_BASICCAN_OBJECTS) /* COV_CAN_MULTIPLE_BASICCAN */
; ..\component\Can\Implementation\Can.c	  2800  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2801  | NAME:             CanHL_RxMsgReceivedNotification
; ..\component\Can\Implementation\Can.c	  2802  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2803  /*
; ..\component\Can\Implementation\Can.c	  2804  |<DataModelStart>| CanHL_RxMsgReceivedNotification
; ..\component\Can\Implementation\Can.c	  2805  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2806  # from CanHL_FullCanMsgReceived #
; ..\component\Can\Implementation\Can.c	  2807  RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  2808  # from CanHL_BasicCanMsgReceived #
; ..\component\Can\Implementation\Can.c	  2809  RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  2810  Relation:
; ..\component\Can\Implementation\Can.c	  2811  RxQueue, GenericPreCopy, MirrorMode
; ..\component\Can\Implementation\Can.c	  2812  RxQueue, DevErrorDetect
; ..\component\Can\Implementation\Can.c	  2813  RxQueue, CanFdSupport
; ..\component\Can\Implementation\Can.c	  2814  OneChOpt
; ..\component\Can\Implementation\Can.c	  2815  ChannelAmount
; ..\component\Can\Implementation\Can.c	  2816  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2817  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2818  Constrain:
; ..\component\Can\Implementation\Can.c	  2819  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2820  */
; ..\component\Can\Implementation\Can.c	  2821  /*!
; ..\component\Can\Implementation\Can.c	  2822   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2823   *
; ..\component\Can\Implementation\Can.c	  2824   *
; ..\component\Can\Implementation\Can.c	  2825   *
; ..\component\Can\Implementation\Can.c	  2826   *
; ..\component\Can\Implementation\Can.c	  2827   *
; ..\component\Can\Implementation\Can.c	  2828   *
; ..\component\Can\Implementation\Can.c	  2829   *
; ..\component\Can\Implementation\Can.c	  2830   *
; ..\component\Can\Implementation\Can.c	  2831   *
; ..\component\Can\Implementation\Can.c	  2832   *
; ..\component\Can\Implementation\Can.c	  2833   *
; ..\component\Can\Implementation\Can.c	  2834   */
; ..\component\Can\Implementation\Can.c	  2835  V_DEF_FUNC(CAN_LOCAL_INLINE, uint8, STATIC_CODE) CanHL_RxMsgReceivedNotification( CAN_CHANNEL_CANTYPE_FIRST CanRxInfoStructPtr rxStructPtr ) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  2836  {
; ..\component\Can\Implementation\Can.c	  2837    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2838  # if !defined(C_ENABLE_RX_QUEUE) && (CAN_GENERIC_PRECOPY == STD_ON)
; ..\component\Can\Implementation\Can.c	  2839    Can_ReturnType generic_retval;
; ..\component\Can\Implementation\Can.c	  2840  # endif
; ..\component\Can\Implementation\Can.c	  2841    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  2842    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  2843    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2844    /* #10 RX queue */
; ..\component\Can\Implementation\Can.c	  2845  # if defined(C_ENABLE_RX_QUEUE)
; ..\component\Can\Implementation\Can.c	  2846    /**************************** RxQueue handling **********************************/
; ..\component\Can\Implementation\Can.c	  2847      /* #20 EXCLUSIVE_AREA_4 secure RxQueue data handling */
; ..\component\Can\Implementation\Can.c	  2848    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_4();
; ..\component\Can\Implementation\Can.c	  2849    if (Can_GetRxQueueInfo().Count < Can_GetSizeOfRxQueueBuffer()) /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  2850    { /* #30 Queue not full: */
; ..\component\Can\Implementation\Can.c	  2851      /* #45 copy HRH, ID, DLC and data to RX queue */
; ..\component\Can\Implementation\Can.c	  2852      Can_GetRxQueueBuffer(Can_GetRxQueueInfo().WriteIndex).Hrh = rxStructPtr->localMailboxHandle; /* SBSW_CAN_HL18 */
; ..\component\Can\Implementation\Can.c	  2853      Can_GetRxQueueBuffer(Can_GetRxQueueInfo().WriteIndex).id  = rxStructPtr->localId; /* SBSW_CAN_HL18 */
; ..\component\Can\Implementation\Can.c	  2854      Can_GetRxQueueBuffer(Can_GetRxQueueInfo().WriteIndex).dlc = rxStructPtr->localDlc; /* SBSW_CAN_HL18 */
; ..\component\Can\Implementation\Can.c	  2855  
; ..\component\Can\Implementation\Can.c	  2856  #  if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  2857      if (((uint8) (sizeof(Can_GetRxQueueBuffer(0).data) / sizeof(Can_GetRxQueueBuffer(0).data[0]))) < rxStructPtr->localDlc) /* CM_CAN_HL17 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  2858      {
; ..\component\Can\Implementation\Can.c	  2859        errorId = CAN_E_PARAM_DLC;
; ..\component\Can\Implementation\Can.c	  2860      }
; ..\component\Can\Implementation\Can.c	  2861      else
; ..\component\Can\Implementation\Can.c	  2862  #  endif
; ..\component\Can\Implementation\Can.c	  2863      {
; ..\component\Can\Implementation\Can.c	  2864        /* #46 copy data with VStdLib optimized copy routine */
; ..\component\Can\Implementation\Can.c	  2865        VStdMemCpy((void*)Can_GetRxQueueBuffer(Can_GetRxQueueInfo().WriteIndex).data, (void*)rxStructPtr->pChipData, rxStructPtr->localDlc); /* SBSW_CAN_HL19 */ /* PRQA S 0312,0314,0316 */ /* MD_Can_NoneVolatilePointerCast,MD_Can_PointerVoidCast,MD_Can_PointerVoidCast */
; ..\component\Can\Implementation\Can.c	  2866      }
; ..\component\Can\Implementation\Can.c	  2867        /* #47 increase pointer to next queue element */
; ..\component\Can\Implementation\Can.c	  2868      Can_GetRxQueueInfo().Count++; /* SBSW_CAN_HL55 */
; ..\component\Can\Implementation\Can.c	  2869      if (Can_GetRxQueueInfo().WriteIndex < ((uint16)Can_GetSizeOfRxQueueBuffer() - (uint16)1u) )
; ..\component\Can\Implementation\Can.c	  2870      {
; ..\component\Can\Implementation\Can.c	  2871        Can_GetRxQueueInfo().WriteIndex++; /* SBSW_CAN_HL55 */
; ..\component\Can\Implementation\Can.c	  2872      }
; ..\component\Can\Implementation\Can.c	  2873      else
; ..\component\Can\Implementation\Can.c	  2874      {
; ..\component\Can\Implementation\Can.c	  2875        Can_GetRxQueueInfo().WriteIndex = 0u; /* CM_CAN_HL24 */ /* SBSW_CAN_HL55 */
; ..\component\Can\Implementation\Can.c	  2876      }
; ..\component\Can\Implementation\Can.c	  2877    }
; ..\component\Can\Implementation\Can.c	  2878  #  if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  2879    else 
; ..\component\Can\Implementation\Can.c	  2880    { /* #50 Queue full: last message will be lost -> overrun in queue do not change ReadIndex to override latest message because inconsistency problem (currently reading queue) */
; ..\component\Can\Implementation\Can.c	  2881      errorId = CAN_E_RXQUEUE;
; ..\component\Can\Implementation\Can.c	  2882    }
; ..\component\Can\Implementation\Can.c	  2883  #  endif
; ..\component\Can\Implementation\Can.c	  2884    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_4();
; ..\component\Can\Implementation\Can.c	  2885  # else /* C_ENABLE_RX_QUEUE */
; ..\component\Can\Implementation\Can.c	  2886    /* #100 no RX queue */
; ..\component\Can\Implementation\Can.c	  2887    /* -------------------------- Interface + APPL Notifications --- */
; ..\component\Can\Implementation\Can.c	  2888      /* #110 call Appl_GenericPrecopy() depend on configuration and if mirror mode is active */
; ..\component\Can\Implementation\Can.c	  2889  #  if (CAN_GENERIC_PRECOPY == STD_ON)
; ..\component\Can\Implementation\Can.c	  2890  #   if defined(C_ENABLE_MIRROR_MODE)
; ..\component\Can\Implementation\Can.c	  2891    if (Can_GetMirrorModeState(channel) == CDDMIRROR_INACTIVE)
; ..\component\Can\Implementation\Can.c	  2892    { /* do not call Appl_GenericPrecopy() in case mirror mode was disabled */
; ..\component\Can\Implementation\Can.c	  2893      generic_retval = CAN_OK;
; ..\component\Can\Implementation\Can.c	  2894    }
; ..\component\Can\Implementation\Can.c	  2895    else
; ..\component\Can\Implementation\Can.c	  2896  #   endif
; ..\component\Can\Implementation\Can.c	  2897    {
; ..\component\Can\Implementation\Can.c	  2898      generic_retval = Appl_GenericPrecopy((uint8)channel, (rxStructPtr->localId & CAN_ID_MASK_IN_GENERIC_CALLOUT), rxStructPtr->localDlc, (Can_DataPtrType)rxStructPtr->pChipData);  /* PRQA S 0312 */ /* MD_Can_NoneVolatilePointerCast */ /* SBSW_CAN_HL07 */
; ..\component\Can\Implementation\Can.c	  2899    }
; ..\component\Can\Implementation\Can.c	  2900    if (generic_retval == CAN_OK) /* \trace SPEC-15119 */
; ..\component\Can\Implementation\Can.c	  2901  #  endif
; ..\component\Can\Implementation\Can.c	  2902    { /* #120 call CanIf_RxIndication() if mirror mode is no active or Appl_GenericPrecopy() return OK \trace SPEC-1726, SPEC-1688, SPEC-1687, SPEC-1687 */
; ..\component\Can\Implementation\Can.c	  2903      CanIf_RxIndication(rxStructPtr->localMailboxHandle, rxStructPtr->localId, rxStructPtr->localDlc, (Can_DataPtrType)rxStructPtr->pChipData); /* PRQA S 0312 */ /* MD_Can_NoneVolatilePointerCast */ /* SBSW_CAN_HL07 */
; ..\component\Can\Implementation\Can.c	  2904    }
; ..\component\Can\Implementation\Can.c	  2905  # endif
; ..\component\Can\Implementation\Can.c	  2906    CAN_CHANNEL_DUMMY_STATEMENT; /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  2907    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  2908    return errorId;
; ..\component\Can\Implementation\Can.c	  2909  }
; ..\component\Can\Implementation\Can.c	  2910  #endif
; ..\component\Can\Implementation\Can.c	  2911  
; ..\component\Can\Implementation\Can.c	  2912  #if defined(C_ENABLE_RX_QUEUE)
; ..\component\Can\Implementation\Can.c	  2913  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  2914  | NAME:             CanHL_RxQueueExecution
; ..\component\Can\Implementation\Can.c	  2915  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  2916  /*!
; ..\component\Can\Implementation\Can.c	  2917   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  2918   *
; ..\component\Can\Implementation\Can.c	  2919   *
; ..\component\Can\Implementation\Can.c	  2920   *
; ..\component\Can\Implementation\Can.c	  2921   *
; ..\component\Can\Implementation\Can.c	  2922   *
; ..\component\Can\Implementation\Can.c	  2923   *
; ..\component\Can\Implementation\Can.c	  2924   *
; ..\component\Can\Implementation\Can.c	  2925   *
; ..\component\Can\Implementation\Can.c	  2926   *
; ..\component\Can\Implementation\Can.c	  2927   */
; ..\component\Can\Implementation\Can.c	  2928  /*
; ..\component\Can\Implementation\Can.c	  2929  |<DataModelStart>| CanHL_RxQueueExecution
; ..\component\Can\Implementation\Can.c	  2930  Relation_Context:
; ..\component\Can\Implementation\Can.c	  2931  # from Can_MainFunction_Read #
; ..\component\Can\Implementation\Can.c	  2932  RxQueue
; ..\component\Can\Implementation\Can.c	  2933  Relation:
; ..\component\Can\Implementation\Can.c	  2934  GenericPreCopy, OneChOpt, DevErrorDetect
; ..\component\Can\Implementation\Can.c	  2935  GenericPreCopy, MirrorMode
; ..\component\Can\Implementation\Can.c	  2936  ChannelAmount
; ..\component\Can\Implementation\Can.c	  2937  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  2938  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  2939  Constrain:
; ..\component\Can\Implementation\Can.c	  2940  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  2941  */
; ..\component\Can\Implementation\Can.c	  2942  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanHL_RxQueueExecution( void )
; ..\component\Can\Implementation\Can.c	  2943  {
; ..\component\Can\Implementation\Can.c	  2944    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2945    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  2946    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  2947    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  2948    /* #10 Execute RxQueue (over all channels) */
; ..\component\Can\Implementation\Can.c	  2949    while ( Can_GetRxQueueInfo().Count != (uint16)0 )
; ..\component\Can\Implementation\Can.c	  2950    { /* #20 over all filled RxQueue elements */
; ..\component\Can\Implementation\Can.c	  2951  # if (CAN_GENERIC_PRECOPY == STD_ON)
; ..\component\Can\Implementation\Can.c	  2952      Can_ReturnType generic_retval;
; ..\component\Can\Implementation\Can.c	  2953      CAN_CHANNEL_CANTYPE_LOCAL
; ..\component\Can\Implementation\Can.c	  2954      generic_retval = CAN_NOT_OK; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	  2955  #  if !defined( C_SINGLE_RECEIVE_CHANNEL ) /* otherwise 'channel' is a define */
; ..\component\Can\Implementation\Can.c	  2956      channel = Can_GetMailboxController(Can_GetRxQueueBuffer(Can_GetRxQueueInfo().ReadIndex).Hrh);
; ..\component\Can\Implementation\Can.c	  2957  #   if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  2958      if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  2959      { /* #30 Check controller is valid */
; ..\component\Can\Implementation\Can.c	  2960        errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  2961      }
; ..\component\Can\Implementation\Can.c	  2962      else
; ..\component\Can\Implementation\Can.c	  2963  #   endif
; ..\component\Can\Implementation\Can.c	  2964  #  endif
; ..\component\Can\Implementation\Can.c	  2965  #  if defined(C_ENABLE_MIRROR_MODE)
; ..\component\Can\Implementation\Can.c	  2966      if (Can_GetMirrorModeState(channel) == CDDMIRROR_INACTIVE)
; ..\component\Can\Implementation\Can.c	  2967      { /* #40 MirrorMode: only when mirror is activated for this controller */
; ..\component\Can\Implementation\Can.c	  2968        generic_retval = CAN_OK;
; ..\component\Can\Implementation\Can.c	  2969      }
; ..\component\Can\Implementation\Can.c	  2970      else
; ..\component\Can\Implementation\Can.c	  2971  #  endif
; ..\component\Can\Implementation\Can.c	  2972      { /* #50 call Appl_GenericPrecopy() */
; ..\component\Can\Implementation\Can.c	  2973        generic_retval = Appl_GenericPrecopy( (uint8)channel,
; ..\component\Can\Implementation\Can.c	  2974                  (Can_GetRxQueueBuffer(Can_GetRxQueueInfo().ReadIndex).id & CAN_ID_MASK_IN_GENERIC_CALLOUT),
; ..\component\Can\Implementation\Can.c	  2975                  Can_GetRxQueueBuffer(Can_GetRxQueueInfo().ReadIndex).dlc,
; ..\component\Can\Implementation\Can.c	  2976                  (Can_DataPtrType)Can_GetRxQueueBuffer(Can_GetRxQueueInfo().ReadIndex).data ); /* PRQA S 0312 */ /* MD_Can_NoneVolatilePointerCast */ /* SBSW_CAN_HL06 */
; ..\component\Can\Implementation\Can.c	  2977      }
; ..\component\Can\Implementation\Can.c	  2978      if (generic_retval == CAN_OK)
; ..\component\Can\Implementation\Can.c	  2979  # endif
; ..\component\Can\Implementation\Can.c	  2980      { /* #60 call CanIf_RxIndication() if Appl_GenericPrecopy() return OK or no generic precopy is used \trace SPEC-1726, SPEC-1688, SPEC-1687, SPEC-1687 */
; ..\component\Can\Implementation\Can.c	  2981        CanIf_RxIndication( Can_GetRxQueueBuffer(Can_GetRxQueueInfo().ReadIndex).Hrh, /* SBSW_CAN_HL06 */
; ..\component\Can\Implementation\Can.c	  2982                Can_GetRxQueueBuffer(Can_GetRxQueueInfo().ReadIndex).id,
; ..\component\Can\Implementation\Can.c	  2983                Can_GetRxQueueBuffer(Can_GetRxQueueInfo().ReadIndex).dlc,
; ..\component\Can\Implementation\Can.c	  2984                (Can_DataPtrType)Can_GetRxQueueBuffer(Can_GetRxQueueInfo().ReadIndex).data ); /* PRQA S 0312 */ /* MD_Can_NoneVolatilePointerCast */
; ..\component\Can\Implementation\Can.c	  2985      }
; ..\component\Can\Implementation\Can.c	  2986      /* #70 EXCLUSIVE_AREA_4 secure RxQueue handling */
; ..\component\Can\Implementation\Can.c	  2987      SchM_Enter_Can_CAN_EXCLUSIVE_AREA_4();
; ..\component\Can\Implementation\Can.c	  2988      /* #80 get next RxQueue element pointer */
; ..\component\Can\Implementation\Can.c	  2989      if (Can_GetRxQueueInfo().ReadIndex >= ((uint16)Can_GetSizeOfRxQueueBuffer() - (uint16)1u) ) /* CM_CAN_HL25 */
; ..\component\Can\Implementation\Can.c	  2990      {
; ..\component\Can\Implementation\Can.c	  2991        Can_GetRxQueueInfo().ReadIndex = 0u; /* CM_CAN_HL25 */ /* SBSW_CAN_HL55 */
; ..\component\Can\Implementation\Can.c	  2992      }
; ..\component\Can\Implementation\Can.c	  2993      else
; ..\component\Can\Implementation\Can.c	  2994      {
; ..\component\Can\Implementation\Can.c	  2995        Can_GetRxQueueInfo().ReadIndex++; /* SBSW_CAN_HL55 */
; ..\component\Can\Implementation\Can.c	  2996      }
; ..\component\Can\Implementation\Can.c	  2997      Can_GetRxQueueInfo().Count--; /* SBSW_CAN_HL55 */
; ..\component\Can\Implementation\Can.c	  2998      SchM_Exit_Can_CAN_EXCLUSIVE_AREA_4();
; ..\component\Can\Implementation\Can.c	  2999    }
; ..\component\Can\Implementation\Can.c	  3000  #if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  3001    if (errorId != CAN_E_NO_ERROR) /* PRQA S 2992,2996 */ /* MD_Can_ConstValue */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3002    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  3003      Can_CallDetReportError(CAN_MAINFCT_READ_ID, errorId); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  3004    }
; ..\component\Can\Implementation\Can.c	  3005  #else
; ..\component\Can\Implementation\Can.c	  3006    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3007  #endif
; ..\component\Can\Implementation\Can.c	  3008  }
; ..\component\Can\Implementation\Can.c	  3009  #endif
; ..\component\Can\Implementation\Can.c	  3010  
; ..\component\Can\Implementation\Can.c	  3011  
; ..\component\Can\Implementation\Can.c	  3012  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  3013  | NAME:             CanLL_WriteReg32
; ..\component\Can\Implementation\Can.c	  3014  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  3015  /*
; ..\component\Can\Implementation\Can.c	  3016  |<DataModelStart>| CanLL_WriteReg32
; ..\component\Can\Implementation\Can.c	  3017  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3018  # CanLL_InitBeginSetRegisters() #
; ..\component\Can\Implementation\Can.c	  3019  RamCheck
; ..\component\Can\Implementation\Can.c	  3020  Relation:
; ..\component\Can\Implementation\Can.c	  3021  OneChOpt, RamCheck
; ..\component\Can\Implementation\Can.c	  3022  ChannelAmount, RamCheck
; ..\component\Can\Implementation\Can.c	  3023  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3024  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3025  Constrain:
; ..\component\Can\Implementation\Can.c	  3026  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3027  */
; ..\component\Can\Implementation\Can.c	  3028  /*!
; ..\component\Can\Implementation\Can.c	  3029   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3030   *
; ..\component\Can\Implementation\Can.c	  3031   *
; ..\component\Can\Implementation\Can.c	  3032   *
; ..\component\Can\Implementation\Can.c	  3033   *
; ..\component\Can\Implementation\Can.c	  3034   */
; ..\component\Can\Implementation\Can.c	  3035  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_WriteReg32( CAN_CHANNEL_CANTYPE_FIRST CanChipMsgPtr32 regPtr, vuint32 value, vuint32 readMask, CanInitParaStructPtr initPara ) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  3036  {
; ..\component\Can\Implementation\Can.c	  3037    vuint8 result = kCanFalse;
; ..\component\Can\Implementation\Can.c	  3038    /* #10 write register value */
; ..\component\Can\Implementation\Can.c	  3039    *regPtr = value; /* SBSW_CAN_HL35 */
; ..\component\Can\Implementation\Can.c	  3040  # if defined(C_ENABLE_CAN_RAM_CHECK_EXTENDED) 
; ..\component\Can\Implementation\Can.c	  3041    if (initPara->doRamCheck == kCanExecuteRamCheck)
; ..\component\Can\Implementation\Can.c	  3042    {
; ..\component\Can\Implementation\Can.c	  3043      /* #20 read back value for RamCheck */
; ..\component\Can\Implementation\Can.c	  3044      volatile vuint32 readBack;
; ..\component\Can\Implementation\Can.c	  3045      readBack = *regPtr;
; ..\component\Can\Implementation\Can.c	  3046      if ((readBack & readMask) != (value & readMask)) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  3047      {
; ..\component\Can\Implementation\Can.c	  3048        /* #30 return issue when read back value differs */
; ..\component\Can\Implementation\Can.c	  3049        result = kCanTrue;  /* PRQA S 2982 */ /* MD_Can_2982_LL */
; ..\component\Can\Implementation\Can.c	  3050      }
; ..\component\Can\Implementation\Can.c	  3051      CAN_RAM_CHECK_READ_BACK_RESULT(channel)
; ..\component\Can\Implementation\Can.c	  3052      initPara->isChRamCheckFail |= result; /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  3053    }
; ..\component\Can\Implementation\Can.c	  3054  # else
; ..\component\Can\Implementation\Can.c	  3055    CAN_DUMMY_STATEMENT(readMask);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3056    CAN_DUMMY_STATEMENT(initPara);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3057  # endif
; ..\component\Can\Implementation\Can.c	  3058  # if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  3059    CAN_CHANNEL_DUMMY_STATEMENT;     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3060  # endif
; ..\component\Can\Implementation\Can.c	  3061    return result;
; ..\component\Can\Implementation\Can.c	  3062  }
; ..\component\Can\Implementation\Can.c	  3063  
; ..\component\Can\Implementation\Can.c	  3064  # if defined(C_ENABLE_USER_MODE_APPL) || defined(C_ENABLE_USER_MODE_OS)
; ..\component\Can\Implementation\Can.c	  3065  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  3066  | NAME:             CanLL_WriteProtectedReg32
; ..\component\Can\Implementation\Can.c	  3067  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  3068  /*
; ..\component\Can\Implementation\Can.c	  3069  |<DataModelStart>| CanLL_WriteProtectedReg32
; ..\component\Can\Implementation\Can.c	  3070  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3071  # CanHL_InitXXX() #
; ..\component\Can\Implementation\Can.c	  3072  RamCheck
; ..\component\Can\Implementation\Can.c	  3073  Relation:
; ..\component\Can\Implementation\Can.c	  3074  OneChOpt
; ..\component\Can\Implementation\Can.c	  3075  ChannelAmount
; ..\component\Can\Implementation\Can.c	  3076  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3077  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3078  Constrain:
; ..\component\Can\Implementation\Can.c	  3079  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3080  */
; ..\component\Can\Implementation\Can.c	  3081  /*!
; ..\component\Can\Implementation\Can.c	  3082   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3083   *
; ..\component\Can\Implementation\Can.c	  3084   *
; ..\component\Can\Implementation\Can.c	  3085   *
; ..\component\Can\Implementation\Can.c	  3086   *
; ..\component\Can\Implementation\Can.c	  3087   */
; ..\component\Can\Implementation\Can.c	  3088  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_WriteProtectedReg32(CAN_CHANNEL_CANTYPE_FIRST vuint16 area, CanChipMsgPtr32 regPtr, vuint32 value, vuint32 readMask, CanInitParaStructPtr initPara ) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */ /* COV_CAN_PROTECTED_WRITE_LL */
; ..\component\Can\Implementation\Can.c	  3089  {
; ..\component\Can\Implementation\Can.c	  3090    vuint8 result = kCanFalse;
; ..\component\Can\Implementation\Can.c	  3091    /* #10 write register value */
; ..\component\Can\Implementation\Can.c	  3092    CAN_WRITE_PROTECTED_REG32(area, regPtr, value); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_HL35 */
; ..\component\Can\Implementation\Can.c	  3093  # if defined(C_ENABLE_CAN_RAM_CHECK_EXTENDED) 
; ..\component\Can\Implementation\Can.c	  3094    if (initPara->doRamCheck == kCanExecuteRamCheck)
; ..\component\Can\Implementation\Can.c	  3095    {
; ..\component\Can\Implementation\Can.c	  3096      /* #20 read back value for RamCheck */
; ..\component\Can\Implementation\Can.c	  3097      volatile vuint32 readBack;
; ..\component\Can\Implementation\Can.c	  3098      readBack = CAN_READ_PROTECTED_REG32(area, regPtr); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_HL35 */
; ..\component\Can\Implementation\Can.c	  3099      if ((readBack & readMask) != (value & readMask)) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  3100      {
; ..\component\Can\Implementation\Can.c	  3101        /* #30 return issue when read back value differs */
; ..\component\Can\Implementation\Can.c	  3102        result = kCanTrue; /* PRQA S 2982 */ /* MD_Can_2982_LL */
; ..\component\Can\Implementation\Can.c	  3103      }
; ..\component\Can\Implementation\Can.c	  3104      CAN_RAM_CHECK_READ_BACK_RESULT(channel)
; ..\component\Can\Implementation\Can.c	  3105      initPara->isChRamCheckFail |= result; /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  3106    }
; ..\component\Can\Implementation\Can.c	  3107  # else
; ..\component\Can\Implementation\Can.c	  3108    CAN_DUMMY_STATEMENT(readMask);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3109    CAN_DUMMY_STATEMENT(initPara);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3110  # endif
; ..\component\Can\Implementation\Can.c	  3111    CAN_CHANNEL_DUMMY_STATEMENT;  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3112    CAN_DUMMY_STATEMENT(area);      /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3113    return result;
; ..\component\Can\Implementation\Can.c	  3114  } /* PRQA S 6060 */ /* MD_MSR_STPAR */
; ..\component\Can\Implementation\Can.c	  3115  # endif /* User Mode */
; ..\component\Can\Implementation\Can.c	  3116  
; ..\component\Can\Implementation\Can.c	  3117  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3118   *  CanLL_InitBegin
; ..\component\Can\Implementation\Can.c	  3119   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3120  /*
; ..\component\Can\Implementation\Can.c	  3121  |<DataModelStart>| CanLL_InitBegin
; ..\component\Can\Implementation\Can.c	  3122  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3123  # CanHL_InitBegin() #
; ..\component\Can\Implementation\Can.c	  3124  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  3125  Relation:
; ..\component\Can\Implementation\Can.c	  3126  OneChOpt
; ..\component\Can\Implementation\Can.c	  3127  ChannelAmount
; ..\component\Can\Implementation\Can.c	  3128  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3129  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3130  Constrain:
; ..\component\Can\Implementation\Can.c	  3131  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3132  */
; ..\component\Can\Implementation\Can.c	  3133  /*!
; ..\component\Can\Implementation\Can.c	  3134  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3135   *
; ..\component\Can\Implementation\Can.c	  3136   *
; ..\component\Can\Implementation\Can.c	  3137  */
; ..\component\Can\Implementation\Can.c	  3138  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3139  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_InitBegin( CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara )
; ..\component\Can\Implementation\Can.c	  3140  {
; ..\component\Can\Implementation\Can.c	  3141    /* #10 Store current Mcan interrupt state (IE) */
; ..\component\Can\Implementation\Can.c	  3142    initPara->canInterruptOldStatus = (vuint32)(Cn->IE); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_109 */
	movh.a	a14,#@his(Can_ControllerConfig)
.L1118:
	ld.bu	d15,[a12]22
.L1123:
	lea	a14,[a14]@los(Can_ControllerConfig)
.L1124:
	and	d15,#12
	st.b	[a12]22,d15
.L1125:

; ..\component\Can\Implementation\Can.c	  3143    CAN_CHANNEL_DUMMY_STATEMENT;  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3144    CAN_DUMMY_STATEMENT(initPara);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3145  
; ..\component\Can\Implementation\Can.c	  3146    return(kCanOk);
; ..\component\Can\Implementation\Can.c	  3147  }
; ..\component\Can\Implementation\Can.c	  3148  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3149  
; ..\component\Can\Implementation\Can.c	  3150  #if defined( C_ENABLE_CAN_RAM_CHECK_EXTENDED )
; ..\component\Can\Implementation\Can.c	  3151  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3152   *  CanLL_InitBeginIsRegisterCorrupt
; ..\component\Can\Implementation\Can.c	  3153   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3154  /*
; ..\component\Can\Implementation\Can.c	  3155  |<DataModelStart>| CanLL_InitBeginIsRegisterCorrupt
; ..\component\Can\Implementation\Can.c	  3156  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3157  # CanHL_InitBegin() #
; ..\component\Can\Implementation\Can.c	  3158  OneChOpt, ChannelAmount, RamCheck
; ..\component\Can\Implementation\Can.c	  3159  Relation:
; ..\component\Can\Implementation\Can.c	  3160  OneChOpt, RamCheck,
; ..\component\Can\Implementation\Can.c	  3161  ChannelAmount, HardwareLoopCheck, RamCheck
; ..\component\Can\Implementation\Can.c	  3162  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3163  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3164  Constrain:
; ..\component\Can\Implementation\Can.c	  3165  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3166  */
; ..\component\Can\Implementation\Can.c	  3167  /*!
; ..\component\Can\Implementation\Can.c	  3168  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3169   *
; ..\component\Can\Implementation\Can.c	  3170   *
; ..\component\Can\Implementation\Can.c	  3171   *
; ..\component\Can\Implementation\Can.c	  3172   *
; ..\component\Can\Implementation\Can.c	  3173  */
; ..\component\Can\Implementation\Can.c	  3174  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3175  /* PRQA S 0303 QAC_Can_0303_IsRegCorrupt */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  3176  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_InitBeginIsRegisterCorrupt( CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara ) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  3177  { 
; ..\component\Can\Implementation\Can.c	  3178    vuint8 indx;
; ..\component\Can\Implementation\Can.c	  3179    vuint8 ret_val;
; ..\component\Can\Implementation\Can.c	  3180    
; ..\component\Can\Implementation\Can.c	  3181  
; ..\component\Can\Implementation\Can.c	  3182  # if defined ( C_MULTIPLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  3183    assertUser(channel < kCanNumberOfChannels, kCanAllChannels, kCanErrorChannelHdlTooLarge); /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3184  # endif
; ..\component\Can\Implementation\Can.c	  3185  
; ..\component\Can\Implementation\Can.c	  3186    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  3187  
; ..\component\Can\Implementation\Can.c	  3188    /* assume the registers are not corrupt */
; ..\component\Can\Implementation\Can.c	  3189    ret_val = kCanFalse;
; ..\component\Can\Implementation\Can.c	  3190  
; ..\component\Can\Implementation\Can.c	  3191    /* Initialization */
; ..\component\Can\Implementation\Can.c	  3192    if ((Cn->CCCR & kCanCCCR_INIT) != kCanCCCR_INIT ) /* If Init-Bit is not set */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3193    {
; ..\component\Can\Implementation\Can.c	  3194      Cn->CCCR  = kCanCCCR_INIT; /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3195      CanLL_ApplCanTimerStart(kCanLoopInit); /* PRQA S 2842 */ /* MD_Can_Assertion */ /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  3196      while( ((Cn->CCCR & kCanCCCR_INIT) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303,2842 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess,MD_Can_Assertion */ /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  3197      {/* Assure that INIT has been accepted. */}
; ..\component\Can\Implementation\Can.c	  3198      CanLL_ApplCanTimerEnd(kCanLoopInit); /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  3199    }
; ..\component\Can\Implementation\Can.c	  3200  
; ..\component\Can\Implementation\Can.c	  3201    /* Configuration Change Enable */
; ..\component\Can\Implementation\Can.c	  3202    Cn->CCCR |= kCanCCCR_CCE; /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3203    CanLL_ApplCanTimerStart(kCanLoopInit); /* PRQA S 2842 */ /* MD_Can_Assertion */ /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  3204    while( ((Cn->CCCR & kCanCCCR_CCE) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303,2842 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess,MD_Can_Assertion */ /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  3205    {/* Assure that CCE has been accepted. */}
; ..\component\Can\Implementation\Can.c	  3206    CanLL_ApplCanTimerEnd(kCanLoopInit); /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  3207    
; ..\component\Can\Implementation\Can.c	  3208    Cn->IE  = 0x00000000u; /* PRQA S 2842 */ /* MD_Can_Assertion */ /* SBSW_CAN_LL_100 */  /* Disable MCAN Interrupts */
; ..\component\Can\Implementation\Can.c	  3209    
; ..\component\Can\Implementation\Can.c	  3210    /* #10 Iterate test patterns */
; ..\component\Can\Implementation\Can.c	  3211    for(indx = 0x00u; indx < 4u; indx++)
; ..\component\Can\Implementation\Can.c	  3212      { 
; ..\component\Can\Implementation\Can.c	  3213        /* #20 Write pattern to controller register */
; ..\component\Can\Implementation\Can.c	  3214        
; ..\component\Can\Implementation\Can.c	  3215        /* CC Control Register (CCCR) */
; ..\component\Can\Implementation\Can.c	  3216        Cn->CCCR = (((kCanRegCheckMaskCCCR ^ kCanRegCheckMaskCCCR_RP) & CanRegCheckValues32bit[indx])|kCanRegCheckMaskCCCR_RP); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3217         
; ..\component\Can\Implementation\Can.c	  3218        /* Data Bit Timing & Prescaler Register (FBTP),RP */ 
; ..\component\Can\Implementation\Can.c	  3219        Cn->FBTP = (kCanRegCheckMaskFBTP & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3220  
; ..\component\Can\Implementation\Can.c	  3221        /* RAM Watchdog (RWD), RP */
; ..\component\Can\Implementation\Can.c	  3222        Cn->RWD  = (kCanRegCheckMaskRWD  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3223        /* Bit Timing and Prescaler Register (BTP/NBTP), RP */
; ..\component\Can\Implementation\Can.c	  3224        Cn->BTP = (kCanRegCheckMaskBTP  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3225        
; ..\component\Can\Implementation\Can.c	  3226        /* Timestamp Counter Configuration (TSCC), RP */
; ..\component\Can\Implementation\Can.c	  3227        Cn->TSCC = (kCanRegCheckMaskTSCC  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */  /*! Not supported but initialized */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3228        /* Timeout Counter Configuration (TOCC), RP */
; ..\component\Can\Implementation\Can.c	  3229        Cn->TOCC = (kCanRegCheckMaskTOCC  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */  /*! Not supported but initialized */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3230        /* Timeout Counter Value (TOCV), RC */ 
; ..\component\Can\Implementation\Can.c	  3231        
; ..\component\Can\Implementation\Can.c	  3232        /* Transmitter Delay Compensation Register (TDCR), RP */
; ..\component\Can\Implementation\Can.c	  3233        {
; ..\component\Can\Implementation\Can.c	  3234  #  if ( CAN_MCAN_REVISION >= 0x0310UL ) /* COV_CAN_HW_SPECIFIC */ 
; ..\component\Can\Implementation\Can.c	  3235          Cn->TDCR = (kCanRegCheckMaskTDCR  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3236  #  endif /* MCAN Core Release < 0x0310UL */
; ..\component\Can\Implementation\Can.c	  3237        }
; ..\component\Can\Implementation\Can.c	  3238      
; ..\component\Can\Implementation\Can.c	  3239        /* Global Filter Configuration (GFC),RP */
; ..\component\Can\Implementation\Can.c	  3240        Cn->GFC = (kCanRegCheckMaskGFC  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3241        /* Standard ID Filter Configuration (SIDFC), RP */
; ..\component\Can\Implementation\Can.c	  3242        Cn->SIDFC = (kCanRegCheckMaskSIDFC  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3243        /* Extended ID Filter Configuration (XIDFC), RP */
; ..\component\Can\Implementation\Can.c	  3244        Cn->XIDFC = (kCanRegCheckMaskXIDFC  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3245        /* Extended ID AND Mask (XIDAM), RP */
; ..\component\Can\Implementation\Can.c	  3246        Cn->XIDAM = (kCanRegCheckMaskXIDAM  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3247        /* Rx FIFO 0 Configuration (RXF0C), RP */
; ..\component\Can\Implementation\Can.c	  3248        Cn->RXF0C.R = (kCanRegCheckMaskRXF0C  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3249        /* Rx FIFO 0 Acknowledge (RXF0A), RW */
; ..\component\Can\Implementation\Can.c	  3250        Cn->RXF0A = (kCanRegCheckMaskRXF0A  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3251        /* Rx Buffer Configuration (RXBC), RP */ 
; ..\component\Can\Implementation\Can.c	  3252        Cn->RXBC = (kCanRegCheckMaskRXBC  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3253        /* Rx FIFO 1 Configuration (RXF1C), RP */
; ..\component\Can\Implementation\Can.c	  3254        Cn->RXF1C.R = (kCanRegCheckMaskRXF1C  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3255        /* Rx FIFO 1 Acknowledge (RXF1A), RW */
; ..\component\Can\Implementation\Can.c	  3256        Cn->RXF1A = (kCanRegCheckMaskRXF1A  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3257        /* Rx Buffer / FIFO Element Size Configuration (RXESC), RP */ 
; ..\component\Can\Implementation\Can.c	  3258        Cn->RXESC.R = (kCanRegCheckMaskRXESC  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3259        /* Tx Buffer Configuration (TXBC) */
; ..\component\Can\Implementation\Can.c	  3260        Cn->TXBC = (kCanRegCheckMaskTXBC  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3261        /* Tx Buffer Element Size Configuration (TXESC) */ 
; ..\component\Can\Implementation\Can.c	  3262        Cn->TXESC = (kCanRegCheckMaskTXESC  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3263        /* Tx Buffer Transmission Interrupt Enable (TXBTIE), RW */
; ..\component\Can\Implementation\Can.c	  3264        Cn->TXBTIE = (kCanRegCheckMaskTXBTIE  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */  /* PRQA S 2986,4558,2842 */ /* MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3265        /* Tx Event FIFO Configuration (TXEFC) */
; ..\component\Can\Implementation\Can.c	  3266        Cn->TXEFC = (kCanRegCheckMaskTXEFC  & CanRegCheckValues32bit[indx]); /* SBSW_CAN_LL_100 */  /* Not supported but initialized */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3267      
; ..\component\Can\Implementation\Can.c	  3268        /* #30 Check if register values are valid  */ 
; ..\component\Can\Implementation\Can.c	  3269        if(
; ..\component\Can\Implementation\Can.c	  3270            ( (Cn->FBTP    & kCanRegCheckMaskFBTP)  != (kCanRegCheckMaskFBTP  & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3271            ( (Cn->CCCR & (kCanRegCheckMaskCCCR ^ kCanRegCheckMaskCCCR_RP))!= ((kCanRegCheckMaskCCCR ^ kCanRegCheckMaskCCCR_RP) & CanRegCheckValues32bit[indx]) ) || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3272            ( (Cn->BTP     & kCanRegCheckMaskBTP)   != (kCanRegCheckMaskBTP   & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3273            ( (Cn->CCCR & (kCanCCCR_CCE | kCanCCCR_INIT))                     != (kCanCCCR_CCE | kCanCCCR_INIT)) || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3274            ( (Cn->RWD     & kCanRegCheckMaskRWD)   != (kCanRegCheckMaskRWD   & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3275            ( (Cn->TSCC    & kCanRegCheckMaskTSCC)  != (kCanRegCheckMaskTSCC  & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3276            ( (Cn->TOCC    & kCanRegCheckMaskTOCC)  != (kCanRegCheckMaskTOCC  & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3277  # if ( CAN_MCAN_REVISION >= 0x0310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  3278            ( (Cn->TDCR    & kCanRegCheckMaskTDCR)  != (kCanRegCheckMaskTDCR  & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3279  # endif /* MCAN Core Release < 0x0310UL */ 
; ..\component\Can\Implementation\Can.c	  3280            ( (Cn->GFC     & kCanRegCheckMaskGFC)   != (kCanRegCheckMaskGFC   & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3281            ( (Cn->SIDFC   & kCanRegCheckMaskSIDFC) != (kCanRegCheckMaskSIDFC & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3282            ( (Cn->XIDFC   & kCanRegCheckMaskXIDFC) != (kCanRegCheckMaskXIDFC & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3283            ( (Cn->XIDAM   & kCanRegCheckMaskXIDAM) != (kCanRegCheckMaskXIDAM & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3284            ( (Cn->RXF0C.R & kCanRegCheckMaskRXF0C) != (kCanRegCheckMaskRXF0C & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3285            ( (Cn->RXF0A   & kCanRegCheckMaskRXF0A) != (kCanRegCheckMaskRXF0A & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3286            ( (Cn->RXBC    & kCanRegCheckMaskRXBC)  != (kCanRegCheckMaskRXBC  & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3287            ( (Cn->RXF1C.R & kCanRegCheckMaskRXF1C) != (kCanRegCheckMaskRXF1C & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3288            ( (Cn->RXF1A   & kCanRegCheckMaskRXF1A) != (kCanRegCheckMaskRXF1A & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3289            ( (Cn->RXESC.R & kCanRegCheckMaskRXESC) != (kCanRegCheckMaskRXESC & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3290            ( (Cn->TXBC    & kCanRegCheckMaskTXBC)  != (kCanRegCheckMaskTXBC  & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3291            ( (Cn->TXESC   & kCanRegCheckMaskTXESC) != (kCanRegCheckMaskTXESC & CanRegCheckValues32bit[indx]))   || /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3292            ( (Cn->TXBTIE  & kCanRegCheckMaskTXBTIE)!= (kCanRegCheckMaskTXBTIE& CanRegCheckValues32bit[indx]))   ||  /* PRQA S 2986,4558,2842 */ /* MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3293            ( (Cn->TXEFC   & kCanRegCheckMaskTXEFC) != (kCanRegCheckMaskTXEFC & CanRegCheckValues32bit[indx]))    ) /* COV_CAN_HARDWARE_FAILURE */ /* PRQA S 2842 */ /* MD_Can_Assertion */
; ..\component\Can\Implementation\Can.c	  3294            {
; ..\component\Can\Implementation\Can.c	  3295              ret_val = kCanTrue; 
; ..\component\Can\Implementation\Can.c	  3296            }
; ..\component\Can\Implementation\Can.c	  3297      
; ..\component\Can\Implementation\Can.c	  3298        /* We need this extra case in order to check TDCR if Dynamic MCAN rev is configured for configuration with MCAN rev 3.0 but run on a > 3.0 target */
; ..\component\Can\Implementation\Can.c	  3299      }
; ..\component\Can\Implementation\Can.c	  3300  
; ..\component\Can\Implementation\Can.c	  3301    CAN_DUMMY_STATEMENT(initPara); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3302    return(ret_val); 
; ..\component\Can\Implementation\Can.c	  3303  } /* PRQA S 6010,6030 */ /* MD_MSR_STPTH,MD_MSR_STCYC */
; ..\component\Can\Implementation\Can.c	  3304  /* PRQA  L:QAC_Can_0303_IsRegCorrupt */
; ..\component\Can\Implementation\Can.c	  3305  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3306  
; ..\component\Can\Implementation\Can.c	  3307  
; ..\component\Can\Implementation\Can.c	  3308  #endif /* C_ENABLE_CAN_RAM_CHECK_EXTENDED */
; ..\component\Can\Implementation\Can.c	  3309  
; ..\component\Can\Implementation\Can.c	  3310  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3311   *  CanLL_InitBeginSetRegisters
; ..\component\Can\Implementation\Can.c	  3312   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3313  /*
; ..\component\Can\Implementation\Can.c	  3314  |<DataModelStart>| CanLL_InitBeginSetRegisters
; ..\component\Can\Implementation\Can.c	  3315  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3316  # CanHL_InitBegin() #
; ..\component\Can\Implementation\Can.c	  3317  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  3318  Relation:
; ..\component\Can\Implementation\Can.c	  3319  OneChOpt
; ..\component\Can\Implementation\Can.c	  3320  ChannelAmount, StatusPolling
; ..\component\Can\Implementation\Can.c	  3321  ChannelAmount, TxPolling
; ..\component\Can\Implementation\Can.c	  3322  ChannelAmount, IndividualPolling
; ..\component\Can\Implementation\Can.c	  3323  RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  3324  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3325  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3326  Constrain:
; ..\component\Can\Implementation\Can.c	  3327  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3328  */
; ..\component\Can\Implementation\Can.c	  3329  /*!
; ..\component\Can\Implementation\Can.c	  3330  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3331   *
; ..\component\Can\Implementation\Can.c	  3332   *
; ..\component\Can\Implementation\Can.c	  3333   *
; ..\component\Can\Implementation\Can.c	  3334   *
; ..\component\Can\Implementation\Can.c	  3335  */
; ..\component\Can\Implementation\Can.c	  3336  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3337  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_InitBeginSetRegisters( CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara )
; ..\component\Can\Implementation\Can.c	  3338  {
; ..\component\Can\Implementation\Can.c	  3339    vuint8 result;
; ..\component\Can\Implementation\Can.c	  3340    /* #10 set MCAN configuration registers */
; ..\component\Can\Implementation\Can.c	  3341    result = CanLL_SetAllRegister(CAN_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_LL_110 */ /* fill in all CAN registers */
; ..\component\Can\Implementation\Can.c	  3342  
; ..\component\Can\Implementation\Can.c	  3343    CanLL_SetRegisterMcMcan(CAN_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_LL_110 */
; ..\component\Can\Implementation\Can.c	  3344    /* #20 set MCAN filter tables */
; ..\component\Can\Implementation\Can.c	  3345    result &= CanLL_SetAllFilter(CAN_CHANNEL_CANPARA_FIRST initPara); /* SBSW_CAN_LL_110 */ /* fill in CAN Message RAM */
; ..\component\Can\Implementation\Can.c	  3346  
; ..\component\Can\Implementation\Can.c	  3347  
; ..\component\Can\Implementation\Can.c	  3348    return(result);
; ..\component\Can\Implementation\Can.c	  3349  }
; ..\component\Can\Implementation\Can.c	  3350  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3351  
; ..\component\Can\Implementation\Can.c	  3352  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3353   *  CanLL_InitMailboxTx
; ..\component\Can\Implementation\Can.c	  3354   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3355  /*
; ..\component\Can\Implementation\Can.c	  3356  |<DataModelStart>| CanHL_InitMailboxTx
; ..\component\Can\Implementation\Can.c	  3357  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3358  # CanHL_InitTxFullCAN() #
; ..\component\Can\Implementation\Can.c	  3359  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  3360  # CanHL_InitTxBasicCAN() #
; ..\component\Can\Implementation\Can.c	  3361  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  3362  Relation:
; ..\component\Can\Implementation\Can.c	  3363  OneChOpt
; ..\component\Can\Implementation\Can.c	  3364  ChannelAmount, TxPolling, IndividualPolling
; ..\component\Can\Implementation\Can.c	  3365  TxHwFifo, MultiplexedTx
; ..\component\Can\Implementation\Can.c	  3366  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3367  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3368  Constrain:
; ..\component\Can\Implementation\Can.c	  3369  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3370  */
; ..\component\Can\Implementation\Can.c	  3371  /*!
; ..\component\Can\Implementation\Can.c	  3372  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3373   *
; ..\component\Can\Implementation\Can.c	  3374   *
; ..\component\Can\Implementation\Can.c	  3375   *
; ..\component\Can\Implementation\Can.c	  3376   *
; ..\component\Can\Implementation\Can.c	  3377  */
; ..\component\Can\Implementation\Can.c	  3378  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3379  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_InitMailboxTx( CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara )
; ..\component\Can\Implementation\Can.c	  3380  {
; ..\component\Can\Implementation\Can.c	  3381    CanObjectHandle mailboxElement = 0; /* PRQA S 2981 */ /* MD_Can_RedundantInit */
; ..\component\Can\Implementation\Can.c	  3382  #if defined(C_ENABLE_MULTIPLEXED_TRANSMISSION) || defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  3383    for(; mailboxElement < Can_GetMailboxSize(initPara->mailboxHandle); mailboxElement++)
; ..\component\Can\Implementation\Can.c	  3384  #endif
; ..\component\Can\Implementation\Can.c	  3385    {
; ..\component\Can\Implementation\Can.c	  3386      /* #10 get the Message RAM location */
; ..\component\Can\Implementation\Can.c	  3387      initPara->pTXB =  (CanElmType*) &ShmTXB(initPara->hwObjHandle + mailboxElement); /* PRQA S 0303,0310,312,1891,4391,2985 */ /* MD_Can_HwAccess,MD_Can_PointerCast,MD_Can_NoneVolatilePointerCast,MD_Can_1891_LL,MD_Can_IntegerCast,MD_Can_ConstValue */ /* SBSW_CAN_LL_109 */
; ..\component\Can\Implementation\Can.c	  3388  #if( CAN_SAFE_BSW == STD_ON ) 
; ..\component\Can\Implementation\Can.c	  3389      if( ((vuint32)initPara->pTXB < (vuint32)Can_GetStartAdrOfShmAdr(canHwChannel)) || ((vuint32)&ShmTXB(initPara->hwObjHandle + mailboxElement +1u) >= (vuint32)Can_GetStopAdrOfShmAdr(canHwChannel) ) ) /* PRQA S 0303,4391,2985 */ /* MD_Can_HwAccess,MD_Can_IntegerCast,MD_Can_ConstValue */ /* CM_CAN_LL_103 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3390      { /* SilentBSW check */
; ..\component\Can\Implementation\Can.c	  3391        initPara->pTXB = &ShmTXB(0u); /* PRQA S 0303,4391,2985 */ /* MD_Can_HwAccess,MD_Can_IntegerCast,MD_Can_ConstValue */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  3392        Can_CallDetReportError(CAN_INIT_ID, CAN_E_GENDATA);
; ..\component\Can\Implementation\Can.c	  3393      }
; ..\component\Can\Implementation\Can.c	  3394  #endif
; ..\component\Can\Implementation\Can.c	  3395      /* #20 reset FD flags and Dlc */
; ..\component\Can\Implementation\Can.c	  3396      initPara->pTXB->E1 = 0x00000000UL; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_103 */
; ..\component\Can\Implementation\Can.c	  3397  #if defined( C_ENABLE_INDIVIDUAL_POLLING )
; ..\component\Can\Implementation\Can.c	  3398      if(Can_IsMailboxIndivPolling(initPara->mailboxHandle))   /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  3399      { /* poll this object */
; ..\component\Can\Implementation\Can.c	  3400      }
; ..\component\Can\Implementation\Can.c	  3401      else
; ..\component\Can\Implementation\Can.c	  3402  #endif
; ..\component\Can\Implementation\Can.c	  3403      {
; ..\component\Can\Implementation\Can.c	  3404  #if !defined( C_ENABLE_TX_POLLING ) || defined( C_ENABLE_INDIVIDUAL_POLLING )
; ..\component\Can\Implementation\Can.c	  3405        /* #30 enable mailbox Tx interrupt if not in polling mode */
; ..\component\Can\Implementation\Can.c	  3406        initPara->txbtie |= (vuint32)(kCanACTIVE << (initPara->hwObjHandle + mailboxElement)); /* PRQA S 2985 */ /* MD_Can_ConstValue */ /* allow CAN Tx Buffer confirmation and cancelation INTs */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  3407  #endif
; ..\component\Can\Implementation\Can.c	  3408      }
; ..\component\Can\Implementation\Can.c	  3409    } /* end for loop */
; ..\component\Can\Implementation\Can.c	  3410    return(kCanOk);
; ..\component\Can\Implementation\Can.c	  3411  }
; ..\component\Can\Implementation\Can.c	  3412  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3413  
; ..\component\Can\Implementation\Can.c	  3414  #if ((defined( C_ENABLE_CAN_RAM_CHECK )))
; ..\component\Can\Implementation\Can.c	  3415  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3416   *  CanLL_InitMailboxTxDeactivate
; ..\component\Can\Implementation\Can.c	  3417   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3418  /*
; ..\component\Can\Implementation\Can.c	  3419  |<DataModelStart>| CanHL_InitMailboxTxDeactivate
; ..\component\Can\Implementation\Can.c	  3420  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3421  # CanHL_InitTxFullCAN() #
; ..\component\Can\Implementation\Can.c	  3422  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  3423  # CanHL_InitTxBasicCAN() #
; ..\component\Can\Implementation\Can.c	  3424  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  3425  Relation:
; ..\component\Can\Implementation\Can.c	  3426  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3427  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3428  Constrain:
; ..\component\Can\Implementation\Can.c	  3429  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3430  */
; ..\component\Can\Implementation\Can.c	  3431  /*!
; ..\component\Can\Implementation\Can.c	  3432  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3433   *
; ..\component\Can\Implementation\Can.c	  3434   *
; ..\component\Can\Implementation\Can.c	  3435  */
; ..\component\Can\Implementation\Can.c	  3436  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3437  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_InitMailboxTxDeactivate( CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara ) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  3438  {
; ..\component\Can\Implementation\Can.c	  3439    /* #10 no actions necessary */
; ..\component\Can\Implementation\Can.c	  3440    CAN_CHANNEL_DUMMY_STATEMENT;   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3441    CAN_DUMMY_STATEMENT(initPara); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3442  }
; ..\component\Can\Implementation\Can.c	  3443  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3444  #endif
; ..\component\Can\Implementation\Can.c	  3445  
; ..\component\Can\Implementation\Can.c	  3446  
; ..\component\Can\Implementation\Can.c	  3447  #if defined( C_ENABLE_RX_FULLCAN_OBJECTS )
; ..\component\Can\Implementation\Can.c	  3448  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3449   *  CanLL_InitMailboxRxFullCan
; ..\component\Can\Implementation\Can.c	  3450   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3451  /*
; ..\component\Can\Implementation\Can.c	  3452  |<DataModelStart>| CanLL_InitMailboxRxFullCan
; ..\component\Can\Implementation\Can.c	  3453  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3454  # CanHL_InitRxFullCAN() #
; ..\component\Can\Implementation\Can.c	  3455  OneChOpt, ChannelAmount, RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  3456  Relation:
; ..\component\Can\Implementation\Can.c	  3457  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3458  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3459  Constrain:
; ..\component\Can\Implementation\Can.c	  3460  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3461  */
; ..\component\Can\Implementation\Can.c	  3462  /*!
; ..\component\Can\Implementation\Can.c	  3463  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3464   *
; ..\component\Can\Implementation\Can.c	  3465   *
; ..\component\Can\Implementation\Can.c	  3466  */
; ..\component\Can\Implementation\Can.c	  3467  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3468  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_InitMailboxRxFullCan( CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara )
; ..\component\Can\Implementation\Can.c	  3469  {
; ..\component\Can\Implementation\Can.c	  3470    CAN_DUMMY_STATEMENT(initPara);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3471    CAN_CHANNEL_DUMMY_STATEMENT;  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3472    return(kCanOk);
; ..\component\Can\Implementation\Can.c	  3473  }
; ..\component\Can\Implementation\Can.c	  3474  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3475  
; ..\component\Can\Implementation\Can.c	  3476  # if ((defined( C_ENABLE_CAN_RAM_CHECK )))
; ..\component\Can\Implementation\Can.c	  3477  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3478   *  CanLL_InitMailboxRxFullCanDeactivate
; ..\component\Can\Implementation\Can.c	  3479   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3480  /*
; ..\component\Can\Implementation\Can.c	  3481  |<DataModelStart>| CanLL_InitMailboxRxFullCanDeactivate
; ..\component\Can\Implementation\Can.c	  3482  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3483  # CanHL_InitRxFullCAN() #
; ..\component\Can\Implementation\Can.c	  3484  OneChOpt, ChannelAmount, RxFullCANSupport, RamCheck
; ..\component\Can\Implementation\Can.c	  3485  Relation:
; ..\component\Can\Implementation\Can.c	  3486  OneChOpt
; ..\component\Can\Implementation\Can.c	  3487  ChannelAmount, IDType
; ..\component\Can\Implementation\Can.c	  3488  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  3489  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3490  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3491  Constrain:
; ..\component\Can\Implementation\Can.c	  3492  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3493  */
; ..\component\Can\Implementation\Can.c	  3494  /*!
; ..\component\Can\Implementation\Can.c	  3495  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3496   *
; ..\component\Can\Implementation\Can.c	  3497   *
; ..\component\Can\Implementation\Can.c	  3498   *
; ..\component\Can\Implementation\Can.c	  3499  */
; ..\component\Can\Implementation\Can.c	  3500  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3501  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_InitMailboxRxFullCanDeactivate( CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara ) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  3502  {
; ..\component\Can\Implementation\Can.c	  3503    CanObjectHandle index;
; ..\component\Can\Implementation\Can.c	  3504    /* #10 Deactive Standard ID Filter */
; ..\component\Can\Implementation\Can.c	  3505  #  if defined( C_ENABLE_STD_ID ) && (kCanNumberOfStandardFilter > 0)  
; ..\component\Can\Implementation\Can.c	  3506    for(index = 0u; index < Can_GetCanSIDFC_LSSOfCanSIDFC(canHwChannel); index++)  /* SBSW_CAN_LL_109 */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  3507    {
; ..\component\Can\Implementation\Can.c	  3508      /* If the Filter Is Configured to the RxBuffer, And if the SFID2 defined offset to the Rx Buffer Start Adress matches the hwObjHandle */
; ..\component\Can\Implementation\Can.c	  3509      if ( (((vuint32) (ShmSIDF(index)).S0 & kCanSFE_SFEC) == kCanSFE_SFEC ) && /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  3510           (((vuint32) (ShmSIDF(index)).S0 & kCanSFE_SFID2_RBSA) == (vuint32)initPara->hwObjHandle) ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_DISABLE_RX_MAILBOX */
; ..\component\Can\Implementation\Can.c	  3511      { /* Disable the filter element */
; ..\component\Can\Implementation\Can.c	  3512  #   if( CAN_SAFE_BSW == STD_ON )
; ..\component\Can\Implementation\Can.c	  3513        if( ((vuint32)&ShmSIDF(index).S0 <  (vuint32)Can_GetStartAdrOfShmAdr(canHwChannel)) || /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* CM_CAN_LL_103 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3514            ((vuint32)&ShmSIDF(index).S0 >= (vuint32)Can_GetStopAdrOfShmAdr(canHwChannel) ) )  /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* CM_CAN_LL_103 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3515        { /* SilentBSW check */
; ..\component\Can\Implementation\Can.c	  3516          Can_CallDetReportError(CAN_INIT_ID, CAN_E_GENDATA);
; ..\component\Can\Implementation\Can.c	  3517        }
; ..\component\Can\Implementation\Can.c	  3518        else
; ..\component\Can\Implementation\Can.c	  3519  #   endif
; ..\component\Can\Implementation\Can.c	  3520        {
; ..\component\Can\Implementation\Can.c	  3521          ShmSIDF(index).S0 |= kCanSFE_SFTRes; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_103 */
; ..\component\Can\Implementation\Can.c	  3522        }
; ..\component\Can\Implementation\Can.c	  3523      }
; ..\component\Can\Implementation\Can.c	  3524    }
; ..\component\Can\Implementation\Can.c	  3525  #  endif  /* STD_FILTER */
; ..\component\Can\Implementation\Can.c	  3526  
; ..\component\Can\Implementation\Can.c	  3527    /* #20 Deactive Extended ID Filter */
; ..\component\Can\Implementation\Can.c	  3528  #  if defined(C_ENABLE_EXTENDED_ID) && (kCanNumberOfExtendedFilter > 0)
; ..\component\Can\Implementation\Can.c	  3529    for(index = 0u; index < Can_GetCanXIDFC_LSEOfCanXIDFC(canHwChannel); index++)  /* SBSW_CAN_LL_109 */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  3530    { 
; ..\component\Can\Implementation\Can.c	  3531      if ( (((vuint32) (ShmXIDF(index)).F0 & kCanEFE_EFEC)       == kCanEFE_EFEC ) && /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  3532           (((vuint32) (ShmXIDF(index)).F1 & kCanEFE_EFID2_RBSA) == (vuint32)initPara->hwObjHandle) ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_DISABLE_RX_MAILBOX */
; ..\component\Can\Implementation\Can.c	  3533      {/* Disable the Filter element */
; ..\component\Can\Implementation\Can.c	  3534  #   if( CAN_SAFE_BSW == STD_ON )
; ..\component\Can\Implementation\Can.c	  3535        if( ((vuint32)&ShmXIDF(index).F0 <  (vuint32)Can_GetStartAdrOfShmAdr(canHwChannel)) || /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* CM_CAN_LL_103 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3536            ((vuint32)&ShmXIDF(index).F0 >= (vuint32)Can_GetStopAdrOfShmAdr(canHwChannel) ) )  /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* CM_CAN_LL_103 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3537        { /* SilentBSW check */
; ..\component\Can\Implementation\Can.c	  3538          Can_CallDetReportError(CAN_INIT_ID, CAN_E_GENDATA);
; ..\component\Can\Implementation\Can.c	  3539        }
; ..\component\Can\Implementation\Can.c	  3540        else
; ..\component\Can\Implementation\Can.c	  3541  #   endif
; ..\component\Can\Implementation\Can.c	  3542        {
; ..\component\Can\Implementation\Can.c	  3543          ShmXIDF(index).F0 &= ~kCanEFE_EFEC; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_103 */
; ..\component\Can\Implementation\Can.c	  3544        }
; ..\component\Can\Implementation\Can.c	  3545      }
; ..\component\Can\Implementation\Can.c	  3546    }
; ..\component\Can\Implementation\Can.c	  3547  #  endif /* EXT_FILTER */
; ..\component\Can\Implementation\Can.c	  3548    CAN_DUMMY_STATEMENT(initPara); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* avoid qac-9.3.1-3673 "parameter could be const" */
; ..\component\Can\Implementation\Can.c	  3549  }
; ..\component\Can\Implementation\Can.c	  3550  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3551  # endif
; ..\component\Can\Implementation\Can.c	  3552  #endif /* C_ENABLE_RX_FULLCAN_OBJECTS */
; ..\component\Can\Implementation\Can.c	  3553  
; ..\component\Can\Implementation\Can.c	  3554  #if defined( C_ENABLE_RX_BASICCAN_OBJECTS )
; ..\component\Can\Implementation\Can.c	  3555  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3556   *  CanLL_InitMailboxRxBasicCan
; ..\component\Can\Implementation\Can.c	  3557   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3558  /*
; ..\component\Can\Implementation\Can.c	  3559  |<DataModelStart>| CanLL_InitMailboxRxBasicCan
; ..\component\Can\Implementation\Can.c	  3560  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3561  # CanHL_InitRxBasicCAN() #
; ..\component\Can\Implementation\Can.c	  3562  OneChOpt, ChannelAmount, RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  3563  Relation:
; ..\component\Can\Implementation\Can.c	  3564  OneChOpt
; ..\component\Can\Implementation\Can.c	  3565  ChannelAmount
; ..\component\Can\Implementation\Can.c	  3566  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3567  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3568  Constrain:
; ..\component\Can\Implementation\Can.c	  3569  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3570  */
; ..\component\Can\Implementation\Can.c	  3571  /*!
; ..\component\Can\Implementation\Can.c	  3572  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3573   *
; ..\component\Can\Implementation\Can.c	  3574   *
; ..\component\Can\Implementation\Can.c	  3575  */
; ..\component\Can\Implementation\Can.c	  3576  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3577  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_InitMailboxRxBasicCan( CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara ) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  3578  {
; ..\component\Can\Implementation\Can.c	  3579    /* using CanLL_WriteReg32(&initPara) just to satisfy test is intentionally omitted */
; ..\component\Can\Implementation\Can.c	  3580    /* #10 no actions necessary */
; ..\component\Can\Implementation\Can.c	  3581    CAN_DUMMY_STATEMENT(initPara); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3582    CAN_CHANNEL_DUMMY_STATEMENT;   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3583    return(kCanOk);
; ..\component\Can\Implementation\Can.c	  3584  }
; ..\component\Can\Implementation\Can.c	  3585  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3586  
; ..\component\Can\Implementation\Can.c	  3587  # if ((defined( C_ENABLE_CAN_RAM_CHECK )))
; ..\component\Can\Implementation\Can.c	  3588  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3589   *  CanLL_InitMailboxRxBasicCanDeactivate
; ..\component\Can\Implementation\Can.c	  3590   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3591  /*
; ..\component\Can\Implementation\Can.c	  3592  |<DataModelStart>| CanLL_InitMailboxRxBasicCanDeactivate
; ..\component\Can\Implementation\Can.c	  3593  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3594  # CanHL_InitRxBasicCAN() #
; ..\component\Can\Implementation\Can.c	  3595  OneChOpt, ChannelAmount, RxBasicCANSupport, RamCheck
; ..\component\Can\Implementation\Can.c	  3596  Relation:
; ..\component\Can\Implementation\Can.c	  3597  OneChOpt
; ..\component\Can\Implementation\Can.c	  3598  ChannelAmount, DevErrorDetect, IDType
; ..\component\Can\Implementation\Can.c	  3599  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3600  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3601  Constrain:
; ..\component\Can\Implementation\Can.c	  3602  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3603  */
; ..\component\Can\Implementation\Can.c	  3604  /*!
; ..\component\Can\Implementation\Can.c	  3605  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3606   *
; ..\component\Can\Implementation\Can.c	  3607   *
; ..\component\Can\Implementation\Can.c	  3608   *
; ..\component\Can\Implementation\Can.c	  3609  */
; ..\component\Can\Implementation\Can.c	  3610  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3611  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_InitMailboxRxBasicCanDeactivate( CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara )  /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  3612  {
; ..\component\Can\Implementation\Can.c	  3613    CanObjectHandle index;
; ..\component\Can\Implementation\Can.c	  3614  
; ..\component\Can\Implementation\Can.c	  3615  #  if defined( C_ENABLE_STD_ID ) && (kCanNumberOfStandardFilter > 0)  /* at least one std filter is available */
; ..\component\Can\Implementation\Can.c	  3616    /* #10 disable STD filters */
; ..\component\Can\Implementation\Can.c	  3617    for(index = 0u; index < Can_GetCanSIDFC_LSSOfCanSIDFC(canHwChannel); index++) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  3618    { 
; ..\component\Can\Implementation\Can.c	  3619      /* If Filter is configured to ( RXFIFO0 OR RXFIFO1) AND The filter offset matches the HwObjHandle */
; ..\component\Can\Implementation\Can.c	  3620      if ( ( (((vuint32) (ShmSIDF(index)).S0 & kCanSFE_SFEC_F0) == kCanSFE_SFEC_F0 ) && ( initPara->hwObjHandle == 0u)) || /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  3621           ( (((vuint32) (ShmSIDF(index)).S0 & kCanSFE_SFEC_F1) == kCanSFE_SFEC_F1 ) && ( initPara->hwObjHandle == 1u))   /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  3622         ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_DISABLE_RX_MAILBOX */
; ..\component\Can\Implementation\Can.c	  3623      { /* Disable the filter element */
; ..\component\Can\Implementation\Can.c	  3624  #    if( CAN_SAFE_BSW == STD_ON )
; ..\component\Can\Implementation\Can.c	  3625        if( ((vuint32)&ShmSIDF(index).S0 <  (vuint32)Can_GetStartAdrOfShmAdr(canHwChannel)) || /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* CM_CAN_LL_103 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3626            ((vuint32)&ShmSIDF(index).S0 >= (vuint32)Can_GetStopAdrOfShmAdr(canHwChannel) ) )  /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* CM_CAN_LL_103 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3627        { /* SilentBSW check */
; ..\component\Can\Implementation\Can.c	  3628          Can_CallDetReportError(CAN_INIT_ID, CAN_E_GENDATA);
; ..\component\Can\Implementation\Can.c	  3629        }
; ..\component\Can\Implementation\Can.c	  3630        else
; ..\component\Can\Implementation\Can.c	  3631  #    endif
; ..\component\Can\Implementation\Can.c	  3632        {
; ..\component\Can\Implementation\Can.c	  3633          ShmSIDF(index).S0 |= kCanSFE_SFTRes; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_103 */
; ..\component\Can\Implementation\Can.c	  3634        }
; ..\component\Can\Implementation\Can.c	  3635      }
; ..\component\Can\Implementation\Can.c	  3636    }
; ..\component\Can\Implementation\Can.c	  3637  #  endif
; ..\component\Can\Implementation\Can.c	  3638  
; ..\component\Can\Implementation\Can.c	  3639  #  if defined(C_ENABLE_EXTENDED_ID) && (kCanNumberOfExtendedFilter > 0)
; ..\component\Can\Implementation\Can.c	  3640    /* #20 disable EXT filters */
; ..\component\Can\Implementation\Can.c	  3641    for(index = 0u; index < Can_GetCanXIDFC_LSEOfCanXIDFC(canHwChannel); index++) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  3642    { 
; ..\component\Can\Implementation\Can.c	  3643      /* If Filter is configured to ( RXFIFO0 OR RXFIFO1) AND The filter offset matches the HwObjHandle*/
; ..\component\Can\Implementation\Can.c	  3644      if ( ( (((vuint32) (ShmXIDF(index)).F0 & kCanEFE_EFEC_F0) == kCanEFE_EFEC_F0 ) && ( initPara->hwObjHandle == 0u)) || /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  3645           ( (((vuint32) (ShmXIDF(index)).F0 & kCanEFE_EFEC_F1) == kCanEFE_EFEC_F1 ) && ( initPara->hwObjHandle == 1u))  /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  3646         ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_DISABLE_RX_MAILBOX */
; ..\component\Can\Implementation\Can.c	  3647      { /* Disable the filter element*/
; ..\component\Can\Implementation\Can.c	  3648  #    if( CAN_SAFE_BSW == STD_ON )
; ..\component\Can\Implementation\Can.c	  3649        if( ((vuint32)&ShmXIDF(index).F0 <  (vuint32)Can_GetStartAdrOfShmAdr(canHwChannel)) || /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* CM_CAN_LL_103 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3650            ((vuint32)&ShmXIDF(index).F0 >= (vuint32)Can_GetStopAdrOfShmAdr(canHwChannel) ) )  /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* CM_CAN_LL_103 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3651        { /* SilentBSW check */
; ..\component\Can\Implementation\Can.c	  3652          Can_CallDetReportError(CAN_INIT_ID, CAN_E_GENDATA);
; ..\component\Can\Implementation\Can.c	  3653        }
; ..\component\Can\Implementation\Can.c	  3654        else
; ..\component\Can\Implementation\Can.c	  3655  #    endif
; ..\component\Can\Implementation\Can.c	  3656        {
; ..\component\Can\Implementation\Can.c	  3657          ShmXIDF(index).F0 &= ~kCanEFE_EFEC; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_103 */
; ..\component\Can\Implementation\Can.c	  3658        }
; ..\component\Can\Implementation\Can.c	  3659      }
; ..\component\Can\Implementation\Can.c	  3660    }
; ..\component\Can\Implementation\Can.c	  3661  #  endif
; ..\component\Can\Implementation\Can.c	  3662  }
; ..\component\Can\Implementation\Can.c	  3663  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3664  # endif
; ..\component\Can\Implementation\Can.c	  3665  #endif /* C_ENABLE_RX_BASICCAN_OBJECTS */
; ..\component\Can\Implementation\Can.c	  3666  
; ..\component\Can\Implementation\Can.c	  3667  
; ..\component\Can\Implementation\Can.c	  3668  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3669   *  CanLL_InitEndSetRegisters
; ..\component\Can\Implementation\Can.c	  3670   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3671  /*
; ..\component\Can\Implementation\Can.c	  3672  |<DataModelStart>| CanLL_InitEndSetRegisters
; ..\component\Can\Implementation\Can.c	  3673  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3674  # CanHL_InitEnd_InitMode() #
; ..\component\Can\Implementation\Can.c	  3675  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  3676  Relation:
; ..\component\Can\Implementation\Can.c	  3677  ChannelAmount, GlobalInitPostProcess
; ..\component\Can\Implementation\Can.c	  3678  ChannelAmount, IDType
; ..\component\Can\Implementation\Can.c	  3679  RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  3680  RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  3681  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3682  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3683  Constrain:
; ..\component\Can\Implementation\Can.c	  3684  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3685  */
; ..\component\Can\Implementation\Can.c	  3686  /*!
; ..\component\Can\Implementation\Can.c	  3687  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3688   *
; ..\component\Can\Implementation\Can.c	  3689   *
; ..\component\Can\Implementation\Can.c	  3690   *
; ..\component\Can\Implementation\Can.c	  3691   *
; ..\component\Can\Implementation\Can.c	  3692   *
; ..\component\Can\Implementation\Can.c	  3693  */
; ..\component\Can\Implementation\Can.c	  3694  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3695  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_InitEndSetRegisters( CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara ) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  3696  {
; ..\component\Can\Implementation\Can.c	  3697    /* #10 set STD filter configuration */
; ..\component\Can\Implementation\Can.c	  3698  #if defined( C_ENABLE_STD_ID )
; ..\component\Can\Implementation\Can.c	  3699    /*  11-bit standard Message ID filtering */
; ..\component\Can\Implementation\Can.c	  3700  # if( kCanNumberOfStandardFilter > 0 ) 
; ..\component\Can\Implementation\Can.c	  3701    /* BasicCAN filter available */
; ..\component\Can\Implementation\Can.c	  3702    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->SIDFC), (vuint32)( ((vuint32)(initPara->stdFeCount) << 16) | ((vuint32)Can_GetCanSIDFC_FLSSAOfCanSIDFC(canHwChannel)) ), kCanRegCheckMaskSIDFC, initPara);     /* SBSW_CAN_LL_100 */     /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  3703  # else
; ..\component\Can\Implementation\Can.c	  3704    /* No BasicCAN filter available */
; ..\component\Can\Implementation\Can.c	  3705  #  if( kCanNumberOfRxObjects > 0 ) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	  3706    /* FullCAN filter available */
; ..\component\Can\Implementation\Can.c	  3707    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->SIDFC), (vuint32)( ((vuint32)(initPara->stdFeCount) << 16) | (((vuint32)(Can_GetCanShmAdr_SIDFAOfCanShmAdr(canHwChannel)) & 0x0000FFFFUL)) ), kCanRegCheckMaskSIDFC, initPara);     /* SBSW_CAN_LL_100 */     /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  3708  #  else
; ..\component\Can\Implementation\Can.c	  3709    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->SIDFC), (vuint32)(0x00000000UL), kCanRegCheckMaskSIDFC, initPara);    /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */  /* LSS zero means no standard filters at all available */
; ..\component\Can\Implementation\Can.c	  3710  #  endif
; ..\component\Can\Implementation\Can.c	  3711  # endif
; ..\component\Can\Implementation\Can.c	  3712  #endif
; ..\component\Can\Implementation\Can.c	  3713  
; ..\component\Can\Implementation\Can.c	  3714    /* #20 set EXT filter configuration */
; ..\component\Can\Implementation\Can.c	  3715  #if defined(C_ENABLE_EXTENDED_ID) 
; ..\component\Can\Implementation\Can.c	  3716    /*  29-bit extended Message ID filtering */
; ..\component\Can\Implementation\Can.c	  3717  # if (kCanNumberOfExtendedFilter > 0) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	  3718    /* BasicCAN filter available */
; ..\component\Can\Implementation\Can.c	  3719    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->XIDFC), (vuint32)( ((vuint32)(initPara->extFeCount) << 16) | ((vuint32)(Can_GetCanXIDFC_FLESAOfCanXIDFC(canHwChannel))) ), kCanRegCheckMaskXIDFC, initPara);     /* SBSW_CAN_LL_100 */     /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  3720  # else
; ..\component\Can\Implementation\Can.c	  3721    /* No BasicCAN filter available */
; ..\component\Can\Implementation\Can.c	  3722  #  if( kCanNumberOfRxObjects > 0 ) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	  3723    /* FullCAN filter available */
; ..\component\Can\Implementation\Can.c	  3724    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->XIDFC), (vuint32)( ((vuint32)(initPara->extFeCount) << 16) | ((vuint32)((Can_GetCanShmAdr_XIDFAOfCanShmAdr(canHwChannel)) & 0x0000FFFFUL)) ), kCanRegCheckMaskXIDFC, initPara);  /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  3725    
; ..\component\Can\Implementation\Can.c	  3726  #  else
; ..\component\Can\Implementation\Can.c	  3727    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->XIDFC), (vuint32)(0x00000000UL), kCanRegCheckMaskXIDFC, initPara);   /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* LSE zero means no extended filters at all available */
; ..\component\Can\Implementation\Can.c	  3728  #  endif
; ..\component\Can\Implementation\Can.c	  3729  # endif
; ..\component\Can\Implementation\Can.c	  3730  #endif
; ..\component\Can\Implementation\Can.c	  3731     
; ..\component\Can\Implementation\Can.c	  3732    /* #30 set Interrupt configuration */
; ..\component\Can\Implementation\Can.c	  3733    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->TXBTIE), (vuint32)(initPara->txbtie), kCanRegCheckMaskTXBTIE, initPara); /* allow CAN Tx Buffer confirmation INTs */ /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_100 */ 
; ..\component\Can\Implementation\Can.c	  3734    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->TXBCIE), (vuint32)(initPara->txbtie), kCan_ALL_ONE, initPara); /* allow CAN Tx Buffer cancellation INTs */ /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_100 */ 
; ..\component\Can\Implementation\Can.c	  3735  
; ..\component\Can\Implementation\Can.c	  3736    Can_GetCanIntEnable(channel) = initPara->ie;  /* SBSW_CAN_LL_112 */  /* keep for usage within ISR and SetControllerMode */
; ..\component\Can\Implementation\Can.c	  3737  
; ..\component\Can\Implementation\Can.c	  3738    /* If not PowerOn Init */
; ..\component\Can\Implementation\Can.c	  3739    if ( (Can_GetLogStatus(canHwChannel) & kCanHwIsInit) == kCanHwIsInit ){
; ..\component\Can\Implementation\Can.c	  3740      (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->IE), (vuint32)(initPara->canInterruptOldStatus), kCanRegCheckMaskIE, initPara); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_100 */ 
; ..\component\Can\Implementation\Can.c	  3741    }
; ..\component\Can\Implementation\Can.c	  3742    else
; ..\component\Can\Implementation\Can.c	  3743    {
; ..\component\Can\Implementation\Can.c	  3744      /* Power On */
; ..\component\Can\Implementation\Can.c	  3745      if(initPara->ie > 0UL)   /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  3746      {
; ..\component\Can\Implementation\Can.c	  3747        (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->IE), (vuint32)(initPara->ie), kCanRegCheckMaskIE, initPara); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_100 */ 
; ..\component\Can\Implementation\Can.c	  3748      }
; ..\component\Can\Implementation\Can.c	  3749      else
; ..\component\Can\Implementation\Can.c	  3750      {
; ..\component\Can\Implementation\Can.c	  3751        (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->IE), (vuint32)kCanIE_DISABLE_ALL, kCanRegCheckMaskIE, initPara); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_100 */ 
; ..\component\Can\Implementation\Can.c	  3752      }
; ..\component\Can\Implementation\Can.c	  3753  #if ( CAN_BOSCH_ERRATUM_012 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	  3754    /* The Protocol Exception Event is signalled via PSR.ACT (and PSR.PXE if MCAN Rev. >=3.1.0 ).
; ..\component\Can\Implementation\Can.c	  3755       Thus the status has to be monitored */
; ..\component\Can\Implementation\Can.c	  3756      {
; ..\component\Can\Implementation\Can.c	  3757        (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->IE), (vuint32)(Cn->IE | (kCanIR_TOO)), kCanRegCheckMaskIE, initPara); /* Enable timeout interrupt */ /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_100 */ 
; ..\component\Can\Implementation\Can.c	  3758      }
; ..\component\Can\Implementation\Can.c	  3759  #endif
; ..\component\Can\Implementation\Can.c	  3760    }
; ..\component\Can\Implementation\Can.c	  3761  
; ..\component\Can\Implementation\Can.c	  3762    /* #40 handle application callback */
; ..\component\Can\Implementation\Can.c	  3763  #if defined( C_ENABLE_INIT_POST_PROCESS )
; ..\component\Can\Implementation\Can.c	  3764    /* The post processing function is called within the initialization mode of the CAN controller.
; ..\component\Can\Implementation\Can.c	  3765       The application can directly overwrite existing configuration in the CAN controller.
; ..\component\Can\Implementation\Can.c	  3766       Example: overwriting the baudrate settings with dynamic values, necessary macros are provided in the LL part */
; ..\component\Can\Implementation\Can.c	  3767    ApplCanInitPostProcessing(CAN_HW_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  3768  #endif
; ..\component\Can\Implementation\Can.c	  3769    CAN_MSG_RAM_SYNC(); /* PRQA S 1006 */ /* MD_Can_1006_inlineASM */
; ..\component\Can\Implementation\Can.c	  3770    return(kCanOk);
; ..\component\Can\Implementation\Can.c	  3771  }
; ..\component\Can\Implementation\Can.c	  3772  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3773  
; ..\component\Can\Implementation\Can.c	  3774  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3775   *  CanLL_InitEnd
; ..\component\Can\Implementation\Can.c	  3776   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3777  /*
; ..\component\Can\Implementation\Can.c	  3778  |<DataModelStart>| CanLL_InitEnd
; ..\component\Can\Implementation\Can.c	  3779  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3780  # CanHL_InitEnd_InitMode() #
; ..\component\Can\Implementation\Can.c	  3781  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  3782  Relation:
; ..\component\Can\Implementation\Can.c	  3783  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3784  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3785  Constrain:
; ..\component\Can\Implementation\Can.c	  3786  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3787  */
; ..\component\Can\Implementation\Can.c	  3788  /*!
; ..\component\Can\Implementation\Can.c	  3789  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3790   *
; ..\component\Can\Implementation\Can.c	  3791   *
; ..\component\Can\Implementation\Can.c	  3792  */
; ..\component\Can\Implementation\Can.c	  3793  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3794  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_InitEnd( CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara ) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  3795  {
; ..\component\Can\Implementation\Can.c	  3796    /* After resetting CCCR[INIT] the Bit Stream Processor (BSP) synchronizes itself to the data transfer 
; ..\component\Can\Implementation\Can.c	  3797       on the CAN bus by waiting for Bus_Idle (sequence of 11 consecutive recessive bits) .
; ..\component\Can\Implementation\Can.c	  3798       CCCR[CCE] is automatically reset when CCCR[INIT] is reset. */
; ..\component\Can\Implementation\Can.c	  3799    /* CCCR_: INIT, CCE, ASM, CSR, MON, DAR, TEST disabled (automated retransmission is enabled) */
; ..\component\Can\Implementation\Can.c	  3800   vuint8 return_value;  
; ..\component\Can\Implementation\Can.c	  3801    
; ..\component\Can\Implementation\Can.c	  3802    /* #10 return initialization status */
; ..\component\Can\Implementation\Can.c	  3803    /* try to avoid "3673  QAC9-CORE: hardware specific (param could be const)" */
; ..\component\Can\Implementation\Can.c	  3804    CAN_CHANNEL_DUMMY_STATEMENT;   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3805    CAN_DUMMY_STATEMENT(initPara); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  3806    return_value = initPara->isInitOk;
; ..\component\Can\Implementation\Can.c	  3807  
; ..\component\Can\Implementation\Can.c	  3808    return (return_value);
; ..\component\Can\Implementation\Can.c	  3809  }
; ..\component\Can\Implementation\Can.c	  3810  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3811  
; ..\component\Can\Implementation\Can.c	  3812  #if defined( C_ENABLE_CAN_RAM_CHECK )
; ..\component\Can\Implementation\Can.c	  3813  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3814   *  CanLL_InitIsMailboxCorrupt
; ..\component\Can\Implementation\Can.c	  3815   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3816  /*
; ..\component\Can\Implementation\Can.c	  3817  |<DataModelStart>| CanLL_InitIsMailboxCorrupt
; ..\component\Can\Implementation\Can.c	  3818  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3819  # CanHL_InitXXX() #
; ..\component\Can\Implementation\Can.c	  3820  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  3821  Relation:
; ..\component\Can\Implementation\Can.c	  3822  RamCheck
; ..\component\Can\Implementation\Can.c	  3823  TxFullCANSupport
; ..\component\Can\Implementation\Can.c	  3824  RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  3825  RxBasicCANSupport, MultipleBasicCanObjects
; ..\component\Can\Implementation\Can.c	  3826  MultiplexedTx, TxHwFifo, RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  3827  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  3828  CanFdSupport
; ..\component\Can\Implementation\Can.c	  3829  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3830  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3831  Constrain:
; ..\component\Can\Implementation\Can.c	  3832  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3833  */
; ..\component\Can\Implementation\Can.c	  3834  /*!
; ..\component\Can\Implementation\Can.c	  3835   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3836   *
; ..\component\Can\Implementation\Can.c	  3837   *
; ..\component\Can\Implementation\Can.c	  3838   *
; ..\component\Can\Implementation\Can.c	  3839  */
; ..\component\Can\Implementation\Can.c	  3840  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3841  V_DEF_FUNC(CAN_STATIC, vuint8, STATIC_CODE) CanLL_InitIsMailboxCorrupt( CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara )  /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  3842  {
; ..\component\Can\Implementation\Can.c	  3843    vuint8   ret_val;
; ..\component\Can\Implementation\Can.c	  3844    CanObjectHandle mailboxElement = 0;
; ..\component\Can\Implementation\Can.c	  3845    volatile vuint32* p2Shm = V_NULL; /* PRQA S 2981 */ /* MD_Can_RedundantInit */
; ..\component\Can\Implementation\Can.c	  3846  
; ..\component\Can\Implementation\Can.c	  3847    ret_val = kCanFalse; /* Assume That The Mailbox is not corrupt */
; ..\component\Can\Implementation\Can.c	  3848  
; ..\component\Can\Implementation\Can.c	  3849  # if defined(C_ENABLE_MULTIPLEXED_TRANSMISSION) || defined(C_ENABLE_RX_BASICCAN_OBJECTS) || defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  3850    for (;(( mailboxElement < Can_GetMailboxSize(initPara->mailboxHandle) ) && (ret_val == kCanFalse)); mailboxElement++) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  3851  # endif
; ..\component\Can\Implementation\Can.c	  3852    {
; ..\component\Can\Implementation\Can.c	  3853  
; ..\component\Can\Implementation\Can.c	  3854      /* If TX Buffer */
; ..\component\Can\Implementation\Can.c	  3855      if((initPara->mailboxHandle) < CAN_HL_MB_TX_BASIC_STOPINDEX(canHwChannel)) /* PRQA S 2992,2996 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  3856      {
; ..\component\Can\Implementation\Can.c	  3857        p2Shm = (vuint32*) (pShmTXB(initPara->hwObjHandle + mailboxElement)); /* PRQA S 0303,0310,312,1891,4391,2985,2880 */ /* MD_Can_HwAccess,MD_Can_PointerCast,MD_Can_NoneVolatilePointerCast,MD_Can_1891_LL,MD_Can_IntegerCast,MD_Can_ConstValue,MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  3858      }
; ..\component\Can\Implementation\Can.c	  3859  # if defined( C_ENABLE_RX_FULLCAN_OBJECTS )
; ..\component\Can\Implementation\Can.c	  3860      else if ((initPara->mailboxHandle) < CAN_HL_MB_RX_FULL_STOPINDEX(canHwChannel))
; ..\component\Can\Implementation\Can.c	  3861      {
; ..\component\Can\Implementation\Can.c	  3862        p2Shm = (vuint32*) (ShmRXB(initPara->hwObjHandle)); /* PRQA S 0303,0310,312,1891,4391 */ /* MD_Can_HwAccess,MD_Can_PointerCast,MD_Can_NoneVolatilePointerCast,MD_Can_1891_LL,MD_Can_IntegerCast */
; ..\component\Can\Implementation\Can.c	  3863      }
; ..\component\Can\Implementation\Can.c	  3864  # endif
; ..\component\Can\Implementation\Can.c	  3865  # if defined(C_ENABLE_RX_BASICCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  3866      else
; ..\component\Can\Implementation\Can.c	  3867      {
; ..\component\Can\Implementation\Can.c	  3868        /* Rx FIFO 0*/
; ..\component\Can\Implementation\Can.c	  3869        if(initPara->mailboxHandle == CAN_HL_MB_RX_BASIC_STARTINDEX(canHwChannel)) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  3870        {
; ..\component\Can\Implementation\Can.c	  3871          p2Shm = (vuint32*) (ShmRXF0(mailboxElement));   /* PRQA S 0303,0310,312,2985,4391,1891 */ /* MD_Can_HwAccess,MD_Can_PointerCast,MD_Can_NoneVolatilePointerCast,MD_Can_ConstValue,MD_Can_IntegerCast,MD_Can_1891_LL */
; ..\component\Can\Implementation\Can.c	  3872        }
; ..\component\Can\Implementation\Can.c	  3873  #  if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	  3874        else if(initPara->mailboxHandle == (CAN_HL_MB_RX_BASIC_STARTINDEX(canHwChannel) + 1u) ) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  3875        {
; ..\component\Can\Implementation\Can.c	  3876          p2Shm = (vuint32*) (ShmRXF1(mailboxElement));  /* PRQA S 0303,0310,312,2985,4391,1891 */ /* MD_Can_HwAccess,MD_Can_PointerCast,MD_Can_NoneVolatilePointerCast,MD_Can_ConstValue,MD_Can_IntegerCast,MD_Can_1891_LL */
; ..\component\Can\Implementation\Can.c	  3877        }
; ..\component\Can\Implementation\Can.c	  3878  #  endif
; ..\component\Can\Implementation\Can.c	  3879        else
; ..\component\Can\Implementation\Can.c	  3880        {
; ..\component\Can\Implementation\Can.c	  3881          /* Handle not found, RAM check will return True */
; ..\component\Can\Implementation\Can.c	  3882        }
; ..\component\Can\Implementation\Can.c	  3883      }
; ..\component\Can\Implementation\Can.c	  3884  # endif
; ..\component\Can\Implementation\Can.c	  3885      if(p2Shm != V_NULL)  /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3886      { /* found valid handle */
; ..\component\Can\Implementation\Can.c	  3887        if( ((vuint32)p2Shm < (vuint32)Can_GetStartAdrOfShmAdr(canHwChannel)) || ((vuint32)p2Shm >= (vuint32)Can_GetStopAdrOfShmAdr(canHwChannel) ) ) /* PRQA S 0306,0303 */ /* MD_Can_0306_HWaccess_LL,MD_Can_HwAccess */ /* CM_CAN_LL_103 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3888        { 
; ..\component\Can\Implementation\Can.c	  3889          ret_val = kCanTrue; /* address out of range assuming mailbox is corrupt */
; ..\component\Can\Implementation\Can.c	  3890        }
; ..\component\Can\Implementation\Can.c	  3891        else
; ..\component\Can\Implementation\Can.c	  3892        {
; ..\component\Can\Implementation\Can.c	  3893          vuint8 i;
; ..\component\Can\Implementation\Can.c	  3894          /* at this point the mailbox is not initialized therefore the contents are not saved! */
; ..\component\Can\Implementation\Can.c	  3895          /* #20 Iterate test patterns (check ID, Flags Dlc, Data) */
; ..\component\Can\Implementation\Can.c	  3896          for(i = 0u; (i < 3u) && (ret_val == kCanFalse); i++) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  3897          { /* PRQA S 0303 QAC_Can_0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  3898            vuint8 j;
; ..\component\Can\Implementation\Can.c	  3899  # if defined (C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  3900            for(j=0u; (j < ((Can_GetMaxDataLenOfMailbox(initPara->mailboxHandle)/4u) + (8u/4u))) && (ret_val == kCanFalse);j++) /* Maximum mailbox size pluss 8 byte header */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  3901  # else
; ..\component\Can\Implementation\Can.c	  3902            for(j=0u; (j <  4u) && (ret_val == kCanFalse);j++)  /* 16 byte per mbox */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  3903  # endif
; ..\component\Can\Implementation\Can.c	  3904            {
; ..\component\Can\Implementation\Can.c	  3905              p2Shm[j] = CanMemCheckValues32bit[i];  /* SBSW_CAN_LL_103 */ /* T0/R0 */
; ..\component\Can\Implementation\Can.c	  3906              if(p2Shm[j] != CanMemCheckValues32bit[i]) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  3907              {
; ..\component\Can\Implementation\Can.c	  3908                ret_val = kCanTrue; /* Mailbox is corrupt */
; ..\component\Can\Implementation\Can.c	  3909                /*no break allowed by QAC*/
; ..\component\Can\Implementation\Can.c	  3910              } 
; ..\component\Can\Implementation\Can.c	  3911            }
; ..\component\Can\Implementation\Can.c	  3912            /* no break allowed by QAC*/
; ..\component\Can\Implementation\Can.c	  3913          } 
; ..\component\Can\Implementation\Can.c	  3914          /* PRQA  L:QAC_Can_0303 */
; ..\component\Can\Implementation\Can.c	  3915        }
; ..\component\Can\Implementation\Can.c	  3916      }
; ..\component\Can\Implementation\Can.c	  3917      else
; ..\component\Can\Implementation\Can.c	  3918      { /* handle not found */
; ..\component\Can\Implementation\Can.c	  3919        ret_val = kCanTrue;
; ..\component\Can\Implementation\Can.c	  3920      }
; ..\component\Can\Implementation\Can.c	  3921    }
; ..\component\Can\Implementation\Can.c	  3922    return(ret_val);
; ..\component\Can\Implementation\Can.c	  3923  }  /* PRQA S 6010, 6030, 6080 */  /* MD_MSR_STPTH,MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	  3924  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3925  #endif /* C_ENABLE_CAN_RAM_CHECK */
; ..\component\Can\Implementation\Can.c	  3926  
; ..\component\Can\Implementation\Can.c	  3927  
; ..\component\Can\Implementation\Can.c	  3928  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3929   *  CanLL_InitPowerOn
; ..\component\Can\Implementation\Can.c	  3930   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3931  /*
; ..\component\Can\Implementation\Can.c	  3932  |<DataModelStart>| CanLL_InitPowerOn
; ..\component\Can\Implementation\Can.c	  3933  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3934  # from Can_Init #
; ..\component\Can\Implementation\Can.c	  3935  Relation:
; ..\component\Can\Implementation\Can.c	  3936  OneChOpt
; ..\component\Can\Implementation\Can.c	  3937  ChannelAmount, Variant
; ..\component\Can\Implementation\Can.c	  3938  EccConfiguration
; ..\component\Can\Implementation\Can.c	  3939  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3940  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3941  Constrain:
; ..\component\Can\Implementation\Can.c	  3942  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3943  */
; ..\component\Can\Implementation\Can.c	  3944  /*!
; ..\component\Can\Implementation\Can.c	  3945  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3946   *
; ..\component\Can\Implementation\Can.c	  3947   *
; ..\component\Can\Implementation\Can.c	  3948  */
; ..\component\Can\Implementation\Can.c	  3949  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3950  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_InitPowerOn(void)
; ..\component\Can\Implementation\Can.c	  3951  {
; ..\component\Can\Implementation\Can.c	  3952    vuint8 ret;
; ..\component\Can\Implementation\Can.c	  3953  #if ( CAN_SAFE_BSW == STD_ON )
; ..\component\Can\Implementation\Can.c	  3954    if (CanLL_CheckGeneratedData() == kCanFailed) /* CM_CAN_LL_112 */ /* PRQA S 2992,2996,2742 */ /* MD_Can_ConstValue,MD_Can_ConstValue */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  3955    {
; ..\component\Can\Implementation\Can.c	  3956      ret = kCanFailed; /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  3957    }
; ..\component\Can\Implementation\Can.c	  3958    else
; ..\component\Can\Implementation\Can.c	  3959  #endif
; ..\component\Can\Implementation\Can.c	  3960    {
; ..\component\Can\Implementation\Can.c	  3961      CanLL_SetGlobalRegisterMcMcan();
; ..\component\Can\Implementation\Can.c	  3962      /* #10 initialize the configured Message RAM area */
; ..\component\Can\Implementation\Can.c	  3963      ret = Can_EccInit();
; ..\component\Can\Implementation\Can.c	  3964    }
; ..\component\Can\Implementation\Can.c	  3965    return(ret);
; ..\component\Can\Implementation\Can.c	  3966  }
; ..\component\Can\Implementation\Can.c	  3967  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  3968  
; ..\component\Can\Implementation\Can.c	  3969  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  3970   *  CanLL_InitPowerOnChannelSpecific
; ..\component\Can\Implementation\Can.c	  3971   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  3972  /*
; ..\component\Can\Implementation\Can.c	  3973  |<DataModelStart>| CanLL_InitPowerOnChannelSpecific
; ..\component\Can\Implementation\Can.c	  3974  Relation_Context:
; ..\component\Can\Implementation\Can.c	  3975  # from Can_Init #
; ..\component\Can\Implementation\Can.c	  3976  Relation:
; ..\component\Can\Implementation\Can.c	  3977  OneChOpt
; ..\component\Can\Implementation\Can.c	  3978  ChannelAmount
; ..\component\Can\Implementation\Can.c	  3979  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  3980  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  3981  Constrain:
; ..\component\Can\Implementation\Can.c	  3982  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  3983  */
; ..\component\Can\Implementation\Can.c	  3984  /*!
; ..\component\Can\Implementation\Can.c	  3985  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  3986   *
; ..\component\Can\Implementation\Can.c	  3987   *
; ..\component\Can\Implementation\Can.c	  3988  */
; ..\component\Can\Implementation\Can.c	  3989  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  3990  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_InitPowerOnChannelSpecific(CAN_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  3991  {
; ..\component\Can\Implementation\Can.c	  3992    /* #10 initialize local variables used for BusOff, Transmit and Interrupt handling */
; ..\component\Can\Implementation\Can.c	  3993    Can_GetCanBusOffNotification(canHwChannel) = 0; /* SBSW_CAN_LL_112 */ 
; ..\component\Can\Implementation\Can.c	  3994    Can_GetCanTXBRP(canHwChannel) = 0;              /* SBSW_CAN_LL_112 */ 
; ..\component\Can\Implementation\Can.c	  3995    Can_GetCanIntEnable(canHwChannel) = 0;          /* SBSW_CAN_LL_112 */ 
; ..\component\Can\Implementation\Can.c	  3996    Can_GetCanPrevMode(canHwChannel)  = 0xFF;       /* SBSW_CAN_LL_112 */ 
; ..\component\Can\Implementation\Can.c	  3997    Can_GetCanLastState(canHwChannel) = 0xFF;       /* SBSW_CAN_LL_112 */ 
; ..\component\Can\Implementation\Can.c	  3998    return(kCanOk);
; ..\component\Can\Implementation\Can.c	  3999  }
; ..\component\Can\Implementation\Can.c	  4000  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  4001  
; ..\component\Can\Implementation\Can.c	  4002  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4003   *  CanLL_InitMemoryPowerOn
; ..\component\Can\Implementation\Can.c	  4004   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4005  /*
; ..\component\Can\Implementation\Can.c	  4006  |<DataModelStart>| CanLL_InitMemoryPowerOn
; ..\component\Can\Implementation\Can.c	  4007  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4008  # from Can_InitMemory #
; ..\component\Can\Implementation\Can.c	  4009  Relation:
; ..\component\Can\Implementation\Can.c	  4010  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4011  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4012  Constrain:
; ..\component\Can\Implementation\Can.c	  4013  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4014  */
; ..\component\Can\Implementation\Can.c	  4015  /*!
; ..\component\Can\Implementation\Can.c	  4016  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4017   *
; ..\component\Can\Implementation\Can.c	  4018   *
; ..\component\Can\Implementation\Can.c	  4019  */
; ..\component\Can\Implementation\Can.c	  4020  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  4021  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_InitMemoryPowerOn(void)
; ..\component\Can\Implementation\Can.c	  4022  {
; ..\component\Can\Implementation\Can.c	  4023    /* #10 no actions necessary */
; ..\component\Can\Implementation\Can.c	  4024  }
; ..\component\Can\Implementation\Can.c	  4025  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  4026  
; ..\component\Can\Implementation\Can.c	  4027  
; ..\component\Can\Implementation\Can.c	  4028  
; ..\component\Can\Implementation\Can.c	  4029  
; ..\component\Can\Implementation\Can.c	  4030  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4031   *  CanLL_TxBegin
; ..\component\Can\Implementation\Can.c	  4032   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4033  /*
; ..\component\Can\Implementation\Can.c	  4034  |<DataModelStart>| CanLL_TxBegin
; ..\component\Can\Implementation\Can.c	  4035  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4036  # from Can_Write #
; ..\component\Can\Implementation\Can.c	  4037  Relation:
; ..\component\Can\Implementation\Can.c	  4038  OneChOpt
; ..\component\Can\Implementation\Can.c	  4039  ChannelAmount, DevErrorDetect
; ..\component\Can\Implementation\Can.c	  4040  MultiplexedTx
; ..\component\Can\Implementation\Can.c	  4041  TxHwFifo
; ..\component\Can\Implementation\Can.c	  4042  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4043  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4044  Constrain:
; ..\component\Can\Implementation\Can.c	  4045  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4046  */
; ..\component\Can\Implementation\Can.c	  4047  /*!
; ..\component\Can\Implementation\Can.c	  4048  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4049   *
; ..\component\Can\Implementation\Can.c	  4050   *
; ..\component\Can\Implementation\Can.c	  4051   *
; ..\component\Can\Implementation\Can.c	  4052  */
; ..\component\Can\Implementation\Can.c	  4053  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4054  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_TxBegin(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanTxTransmissionParaStructPtr txPara)
; ..\component\Can\Implementation\Can.c	  4055  {
; ..\component\Can\Implementation\Can.c	  4056    /* #10 initialize the pointer to the mailbox */
; ..\component\Can\Implementation\Can.c	  4057  # if defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  4058      if(Can_GetMailboxType(txPara->mailboxHandle) == CAN_TX_BASICCAN_FIFO_TYPE) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  4059      {
; ..\component\Can\Implementation\Can.c	  4060        txPara->lpTXB = &ShmTXB(CanGetTxHwFifoPutIndex(canHwChannel)); /* PRQA S 0303,4391 */ /* MD_Can_HwAccess,MD_Can_IntegerCast */ /* SBSW_CAN_LL_113 */
; ..\component\Can\Implementation\Can.c	  4061      }
; ..\component\Can\Implementation\Can.c	  4062      else
; ..\component\Can\Implementation\Can.c	  4063  # endif
; ..\component\Can\Implementation\Can.c	  4064      {
; ..\component\Can\Implementation\Can.c	  4065        txPara->lpTXB = &ShmTXB((vuint32)txPara->hwObjHandle + (vuint32)(txPara->mailboxElement)); /* PRQA S 0303,1891,4391 */ /* MD_Can_HwAccess,MD_Can_1891_LL,MD_Can_IntegerCast */ /* SBSW_CAN_LL_113 */
; ..\component\Can\Implementation\Can.c	  4066      }
; ..\component\Can\Implementation\Can.c	  4067  
; ..\component\Can\Implementation\Can.c	  4068    /* #20 check boundaries */
; ..\component\Can\Implementation\Can.c	  4069  # if( CAN_SAFE_BSW == STD_ON ) 
; ..\component\Can\Implementation\Can.c	  4070    if( ((vuint32)txPara->lpTXB < (vuint32)Can_GetStartAdrOfShmAdr(canHwChannel)) || ((vuint32)&ShmTXB(txPara->hwObjHandle +1u) >= (vuint32)Can_GetStopAdrOfShmAdr(canHwChannel) ) ) /* PRQA S 0303,4391 */ /* MD_Can_HwAccess,MD_Can_IntegerCast */ /* CM_CAN_LL_103 */  /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  4071    { /* SilentBSW check */
; ..\component\Can\Implementation\Can.c	  4072      Can_CallDetReportError(CAN_WRITE_ID, CAN_E_PARAM_HANDLE);
; ..\component\Can\Implementation\Can.c	  4073      txPara->lpTXB = (CanElmType*)Can_GetStartAdrOfShmAdr(canHwChannel); /* assure no out of bounds access */ /* PRQA S 0303 */ /* MD_Can_HwAccess */  /* SBSW_CAN_LL_113 */
; ..\component\Can\Implementation\Can.c	  4074    }
; ..\component\Can\Implementation\Can.c	  4075  # endif
; ..\component\Can\Implementation\Can.c	  4076    CAN_CHANNEL_DUMMY_STATEMENT; /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4077  }
; ..\component\Can\Implementation\Can.c	  4078  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4079  
; ..\component\Can\Implementation\Can.c	  4080  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4081   *  CanLL_TxSetMailbox
; ..\component\Can\Implementation\Can.c	  4082   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4083  /*
; ..\component\Can\Implementation\Can.c	  4084  |<DataModelStart>| CanLL_TxSetMailbox
; ..\component\Can\Implementation\Can.c	  4085  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4086  # from Can_Write #
; ..\component\Can\Implementation\Can.c	  4087  Relation:
; ..\component\Can\Implementation\Can.c	  4088  OneChOpt
; ..\component\Can\Implementation\Can.c	  4089  ChannelAmount, IDType
; ..\component\Can\Implementation\Can.c	  4090  CanFdSupport
; ..\component\Can\Implementation\Can.c	  4091  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4092  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4093  Constrain:
; ..\component\Can\Implementation\Can.c	  4094  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4095  */
; ..\component\Can\Implementation\Can.c	  4096  /*!
; ..\component\Can\Implementation\Can.c	  4097  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4098   *
; ..\component\Can\Implementation\Can.c	  4099   *
; ..\component\Can\Implementation\Can.c	  4100  */
; ..\component\Can\Implementation\Can.c	  4101  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4102  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_TxSetMailbox(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanTxTransmissionParaStructPtr txPara) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  4103  {
; ..\component\Can\Implementation\Can.c	  4104    /* #10 set the mailbox control registers */
; ..\component\Can\Implementation\Can.c	  4105    txPara->lpTXB->E0 = txPara->idRaw0;                       /* SBSW_CAN_LL_103 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4106  #if ( CAN_MCAN_REVISION >= 0x0310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  4107  # if defined(C_ENABLE_CAN_FD_USED)
; ..\component\Can\Implementation\Can.c	  4108    txPara->lpTXB->E1 =  ( ((vuint32) (((vuint32)txPara->dlcRaw) << 16)) | 
; ..\component\Can\Implementation\Can.c	  4109                           ((vuint32) (((vuint32)txPara->fdType) << 16)) | 
; ..\component\Can\Implementation\Can.c	  4110                           ((vuint32) (((vuint32)txPara->fdBrsType) << 16)) ); /* set DLC/FDF/BRS */  /* SBSW_CAN_LL_103 */  /* PRQA S 0303 */  /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4111  # else
; ..\component\Can\Implementation\Can.c	  4112    txPara->lpTXB->E1 = (vuint32) (((vuint32)txPara->dlcRaw) << 16);           /* set DLC/FDF/BRS */  /* SBSW_CAN_LL_103 */  /* PRQA S 0303 */  /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4113  # endif  /* C_ENABLE_CAN_FD_USED */
; ..\component\Can\Implementation\Can.c	  4114  #else
; ..\component\Can\Implementation\Can.c	  4115    txPara->lpTXB->E1 = (vuint32) (((vuint32)txPara->dlcRaw) << 16);           /* set DLC */          /* SBSW_CAN_LL_103 */  /* PRQA S 0303 */  /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4116  #endif  /* CAN_MCAN_REVISION */
; ..\component\Can\Implementation\Can.c	  4117    CAN_CHANNEL_DUMMY_STATEMENT;  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4118  }
; ..\component\Can\Implementation\Can.c	  4119  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4120  
; ..\component\Can\Implementation\Can.c	  4121  
; ..\component\Can\Implementation\Can.c	  4122  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4123   *  CanLL_TxCopyToCan
; ..\component\Can\Implementation\Can.c	  4124   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4125  /*
; ..\component\Can\Implementation\Can.c	  4126  |<DataModelStart>| CanLL_TxCopyToCan
; ..\component\Can\Implementation\Can.c	  4127  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4128  # from Can_Write #
; ..\component\Can\Implementation\Can.c	  4129  Relation:
; ..\component\Can\Implementation\Can.c	  4130  OneChOpt
; ..\component\Can\Implementation\Can.c	  4131  ChannelAmount, CanFdSupport
; ..\component\Can\Implementation\Can.c	  4132  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4133  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4134  Constrain:
; ..\component\Can\Implementation\Can.c	  4135  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4136  */
; ..\component\Can\Implementation\Can.c	  4137  /*!
; ..\component\Can\Implementation\Can.c	  4138  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4139   *
; ..\component\Can\Implementation\Can.c	  4140   *
; ..\component\Can\Implementation\Can.c	  4141  */
; ..\component\Can\Implementation\Can.c	  4142  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4143  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_TxCopyToCan(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanTxTransmissionParaStructPtr txPara) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  4144  {
; ..\component\Can\Implementation\Can.c	  4145  #  if defined( C_CPUTYPE_BITORDER_LSB2MSB ) /* COV_CAN_CPUTYPE */
; ..\component\Can\Implementation\Can.c	  4146  #  else
; ..\component\Can\Implementation\Can.c	  4147    vuint8 offset;
; ..\component\Can\Implementation\Can.c	  4148  #  endif
; ..\component\Can\Implementation\Can.c	  4149    vuint8 curWord, curByte;
; ..\component\Can\Implementation\Can.c	  4150    tAlignCopyElem copyElem;  /* PRQA S 0759 */ /* MD_Can_Union */
; ..\component\Can\Implementation\Can.c	  4151  
; ..\component\Can\Implementation\Can.c	  4152    /* #10 copy the transmit data to a temporary buffer and set the mailbox data registers */
; ..\component\Can\Implementation\Can.c	  4153    curByte = 0u;
; ..\component\Can\Implementation\Can.c	  4154  #  if defined (C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  4155    for (curWord = 0u; (curWord << 2u) < txPara->frameLen; curWord++) /* CM_CAN_LL_105 */ 
; ..\component\Can\Implementation\Can.c	  4156  #  else
; ..\component\Can\Implementation\Can.c	  4157    for (curWord = 0u; (curWord) < 2u; curWord++) /* CM_CAN_LL_105 */ 
; ..\component\Can\Implementation\Can.c	  4158  #  endif
; ..\component\Can\Implementation\Can.c	  4159    {
; ..\component\Can\Implementation\Can.c	  4160  #  if defined( C_CPUTYPE_BITORDER_LSB2MSB ) /* COV_CAN_CPUTYPE */
; ..\component\Can\Implementation\Can.c	  4161      do
; ..\component\Can\Implementation\Can.c	  4162      { /* for each 32 bit word */
; ..\component\Can\Implementation\Can.c	  4163  #   if defined (C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  4164        if(curByte < txPara->messageLen)  /* CM_CAN_LL_105 */ 
; ..\component\Can\Implementation\Can.c	  4165  #   endif
; ..\component\Can\Implementation\Can.c	  4166        { /* either copy data */
; ..\component\Can\Implementation\Can.c	  4167          copyElem.b[curByte & 0x03u] = txPara->CanMemCopySrcPtr[curByte]; /* SBSW_CAN_LL_104 */ /* CM_CAN_LL_104 */
; ..\component\Can\Implementation\Can.c	  4168        }
; ..\component\Can\Implementation\Can.c	  4169  #   if defined (C_ENABLE_CAN_FD_FULL) 
; ..\component\Can\Implementation\Can.c	  4170        else
; ..\component\Can\Implementation\Can.c	  4171        { /* or fill up with padding pattern */
; ..\component\Can\Implementation\Can.c	  4172          copyElem.b[curByte & 0x03u] = txPara->paddingVal;              /* SBSW_CAN_LL_104 */ /* CM_CAN_LL_104 */
; ..\component\Can\Implementation\Can.c	  4173        }
; ..\component\Can\Implementation\Can.c	  4174  #   endif
; ..\component\Can\Implementation\Can.c	  4175        curByte++;
; ..\component\Can\Implementation\Can.c	  4176      } while((curByte & 0x03u) != 0u);                             /* CM_CAN_LL_104 */
; ..\component\Can\Implementation\Can.c	  4177  #  else /* LSB2MSB */
; ..\component\Can\Implementation\Can.c	  4178      offset = 3u;
; ..\component\Can\Implementation\Can.c	  4179      do
; ..\component\Can\Implementation\Can.c	  4180      { /* for each 32 bit word */
; ..\component\Can\Implementation\Can.c	  4181  #   if defined (C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  4182        if(curByte < txPara->messageLen) 
; ..\component\Can\Implementation\Can.c	  4183  #   endif
; ..\component\Can\Implementation\Can.c	  4184        { /* either copy data */
; ..\component\Can\Implementation\Can.c	  4185          copyElem.b[offset] = txPara->CanMemCopySrcPtr[curByte]; /* SBSW_CAN_LL_104 */  
; ..\component\Can\Implementation\Can.c	  4186        }
; ..\component\Can\Implementation\Can.c	  4187  #   if defined (C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  4188        else
; ..\component\Can\Implementation\Can.c	  4189        { /* or fill up with padding pattern */
; ..\component\Can\Implementation\Can.c	  4190          copyElem.b[offset] = txPara->paddingVal;              /* SBSW_CAN_LL_104 */
; ..\component\Can\Implementation\Can.c	  4191        }
; ..\component\Can\Implementation\Can.c	  4192  #   endif
; ..\component\Can\Implementation\Can.c	  4193        curByte++;
; ..\component\Can\Implementation\Can.c	  4194        offset--;
; ..\component\Can\Implementation\Can.c	  4195      } while((curByte & 0x03u) != 0u);                     /* CM_CAN_LL_104 */  
; ..\component\Can\Implementation\Can.c	  4196  #  endif /* LSB2MSB */
; ..\component\Can\Implementation\Can.c	  4197      /* move to Message RAM */
; ..\component\Can\Implementation\Can.c	  4198      txPara->lpTXB->data[curWord] = copyElem.dw; /* SBSW_CAN_LL_103 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4199    } /* end for loop */
; ..\component\Can\Implementation\Can.c	  4200  
; ..\component\Can\Implementation\Can.c	  4201    CAN_CHANNEL_DUMMY_STATEMENT;  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4202  
; ..\component\Can\Implementation\Can.c	  4203  } /* CanLL_TxCopyToCan */
; ..\component\Can\Implementation\Can.c	  4204  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4205  
; ..\component\Can\Implementation\Can.c	  4206  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4207   *  CanLL_TxStart
; ..\component\Can\Implementation\Can.c	  4208   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4209  /*
; ..\component\Can\Implementation\Can.c	  4210  |<DataModelStart>| CanLL_TxStart
; ..\component\Can\Implementation\Can.c	  4211  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4212  # from Can_Write #
; ..\component\Can\Implementation\Can.c	  4213  Relation:
; ..\component\Can\Implementation\Can.c	  4214  OneChOpt
; ..\component\Can\Implementation\Can.c	  4215  ChannelAmount, CanFdSupport, IDType
; ..\component\Can\Implementation\Can.c	  4216  MultiplexedTx
; ..\component\Can\Implementation\Can.c	  4217  TxHwFifo
; ..\component\Can\Implementation\Can.c	  4218  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4219  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4220  Constrain:
; ..\component\Can\Implementation\Can.c	  4221  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4222  */
; ..\component\Can\Implementation\Can.c	  4223  /*!
; ..\component\Can\Implementation\Can.c	  4224  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4225   *
; ..\component\Can\Implementation\Can.c	  4226   *
; ..\component\Can\Implementation\Can.c	  4227   *
; ..\component\Can\Implementation\Can.c	  4228   *
; ..\component\Can\Implementation\Can.c	  4229  */
; ..\component\Can\Implementation\Can.c	  4230  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4231  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_TxStart(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanTxTransmissionParaStructPtr txPara) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  4232  {
; ..\component\Can\Implementation\Can.c	  4233    vuint8  retvalue = kCanOk;
; ..\component\Can\Implementation\Can.c	  4234    vuint32 txBRP;
; ..\component\Can\Implementation\Can.c	  4235  
; ..\component\Can\Implementation\Can.c	  4236    /* #10 get the corresponding Tx Buffer */
; ..\component\Can\Implementation\Can.c	  4237  # if defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  4238    if(Can_GetMailboxType(txPara->mailboxHandle) == CAN_TX_BASICCAN_FIFO_TYPE) /* COV_CAN_GENDATA_TX_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  4239    {
; ..\component\Can\Implementation\Can.c	  4240      txBRP = (vuint32)(kCanACTIVE << CanGetTxHwFifoPutIndex(canHwChannel)); /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4241    }
; ..\component\Can\Implementation\Can.c	  4242    else
; ..\component\Can\Implementation\Can.c	  4243  # endif
; ..\component\Can\Implementation\Can.c	  4244    {
; ..\component\Can\Implementation\Can.c	  4245      txBRP = (vuint32)(kCanACTIVE << ((txPara->hwObjHandle) + (txPara->mailboxElement)));
; ..\component\Can\Implementation\Can.c	  4246    }
; ..\component\Can\Implementation\Can.c	  4247    /* Each Tx Buffer has its own Add Request bit. 
; ..\component\Can\Implementation\Can.c	  4248       Writing a '1' will set the corresponding Add Request bit (writing a '0' has no impact). 
; ..\component\Can\Implementation\Can.c	  4249       This enables the Host to set transmission requests for multiple Tx Buffers with one write to TXBAR. 
; ..\component\Can\Implementation\Can.c	  4250       TXBAR bits are set only for those Tx Buffers configured via TXBC. 
; ..\component\Can\Implementation\Can.c	  4251       When no Tx scan is running, the bits are reset immediately, else the bits remain set until the Tx scan process has completed. */
; ..\component\Can\Implementation\Can.c	  4252    {
; ..\component\Can\Implementation\Can.c	  4253      /* #20 set transmission request */
; ..\component\Can\Implementation\Can.c	  4254      CAN_MSG_RAM_SYNC(); /* PRQA S 1006 */ /* MD_Can_1006_inlineASM */
; ..\component\Can\Implementation\Can.c	  4255      Cn->TXBAR |= txBRP;   /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */ 
; ..\component\Can\Implementation\Can.c	  4256      /* Each Tx Buffer has its own Transmission Request Pending bit. 
; ..\component\Can\Implementation\Can.c	  4257       The bits are set via register TXBAR. The bits are reset after a requested transmission has completed or has been cancelled via register TXBCR.
; ..\component\Can\Implementation\Can.c	  4258       TXBRP bits are set only for those Tx Buffers configured via TXBC. 
; ..\component\Can\Implementation\Can.c	  4259       After a TXBRP bit has been set, a Tx scan is started to check for the pending Tx request with the highest priority (lowest ID).
; ..\component\Can\Implementation\Can.c	  4260       A cancellation request resets the corresponding transmission request pending bit of register TXBRP. 
; ..\component\Can\Implementation\Can.c	  4261       In case a transmission has already been started when a cancellation is requested, this is done at the end of the transmission, 
; ..\component\Can\Implementation\Can.c	  4262       regardless whether the transmission was successful or not. The cancellation request bits are reset directly after the corresponding TXBRP bit has been reset. */
; ..\component\Can\Implementation\Can.c	  4263       /* #30 store the Tx Buffer number for confirmation handling */
; ..\component\Can\Implementation\Can.c	  4264       Can_GetCanTXBRP(canHwChannel) |= txBRP;   /* SBSW_CAN_LL_112 */ 
; ..\component\Can\Implementation\Can.c	  4265    }
; ..\component\Can\Implementation\Can.c	  4266    return(retvalue);
; ..\component\Can\Implementation\Can.c	  4267  }
; ..\component\Can\Implementation\Can.c	  4268  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4269  
; ..\component\Can\Implementation\Can.c	  4270  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4271   *  CanLL_TxEnd
; ..\component\Can\Implementation\Can.c	  4272   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4273  /*
; ..\component\Can\Implementation\Can.c	  4274  |<DataModelStart>| CanLL_TxEnd
; ..\component\Can\Implementation\Can.c	  4275  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4276  # from Can_Write #
; ..\component\Can\Implementation\Can.c	  4277  Relation:
; ..\component\Can\Implementation\Can.c	  4278  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  4279  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4280  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4281  Constrain:
; ..\component\Can\Implementation\Can.c	  4282  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4283  */
; ..\component\Can\Implementation\Can.c	  4284  /*!
; ..\component\Can\Implementation\Can.c	  4285  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4286   *
; ..\component\Can\Implementation\Can.c	  4287   *
; ..\component\Can\Implementation\Can.c	  4288  */
; ..\component\Can\Implementation\Can.c	  4289  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4290  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_TxEnd(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanTxTransmissionParaStructPtr txPara) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  4291  {
; ..\component\Can\Implementation\Can.c	  4292    /* #10 no actions necessary */
; ..\component\Can\Implementation\Can.c	  4293    CAN_DUMMY_STATEMENT(txPara);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4294    CAN_CHANNEL_DUMMY_STATEMENT;     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4295  }
; ..\component\Can\Implementation\Can.c	  4296  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4297  
; ..\component\Can\Implementation\Can.c	  4298  #if defined( C_ENABLE_TX_POLLING )
; ..\component\Can\Implementation\Can.c	  4299  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4300   *  CanLL_TxIsGlobalConfPending
; ..\component\Can\Implementation\Can.c	  4301   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4302  /*
; ..\component\Can\Implementation\Can.c	  4303  |<DataModelStart>| CanLL_TxIsGlobalConfPending
; ..\component\Can\Implementation\Can.c	  4304  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4305  # from Can_MainFunction_Write #
; ..\component\Can\Implementation\Can.c	  4306  TxPolling, TxFullCANSupport
; ..\component\Can\Implementation\Can.c	  4307  Relation:
; ..\component\Can\Implementation\Can.c	  4308  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  4309  MultiplexedTx
; ..\component\Can\Implementation\Can.c	  4310  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4311  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4312  Constrain:
; ..\component\Can\Implementation\Can.c	  4313  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4314  */
; ..\component\Can\Implementation\Can.c	  4315  /*!
; ..\component\Can\Implementation\Can.c	  4316  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4317   *
; ..\component\Can\Implementation\Can.c	  4318   *
; ..\component\Can\Implementation\Can.c	  4319  */
; ..\component\Can\Implementation\Can.c	  4320  /* CODE CATEGORY 2 START */
; ..\component\Can\Implementation\Can.c	  4321  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_TxIsGlobalConfPending(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  4322  {
; ..\component\Can\Implementation\Can.c	  4323    vuint8 retVal = kCanFalse;
; ..\component\Can\Implementation\Can.c	  4324    /* #10 check for pending transmit requests */
; ..\component\Can\Implementation\Can.c	  4325    if(Can_GetCanTXBRP(canHwChannel) != 0u)
; ..\component\Can\Implementation\Can.c	  4326    { /* Tx request is pending (do not check the HW Flags because reset is done only within next transmit request) */
; ..\component\Can\Implementation\Can.c	  4327      retVal = kCanTrue;
; ..\component\Can\Implementation\Can.c	  4328    }
; ..\component\Can\Implementation\Can.c	  4329    return retVal;
; ..\component\Can\Implementation\Can.c	  4330  }
; ..\component\Can\Implementation\Can.c	  4331  /* CODE CATEGORY 2 END */
; ..\component\Can\Implementation\Can.c	  4332  
; ..\component\Can\Implementation\Can.c	  4333  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4334   *  CanLL_TxProcessPendings
; ..\component\Can\Implementation\Can.c	  4335   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4336  /*
; ..\component\Can\Implementation\Can.c	  4337  |<DataModelStart>| CanLL_TxProcessPendings
; ..\component\Can\Implementation\Can.c	  4338  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4339  # from Can_MainFunction_Write #
; ..\component\Can\Implementation\Can.c	  4340  TxPolling, TxFullCANSupport
; ..\component\Can\Implementation\Can.c	  4341  Relation:
; ..\component\Can\Implementation\Can.c	  4342  OneChOpt
; ..\component\Can\Implementation\Can.c	  4343  ChannelAmount, MultiplexedTx
; ..\component\Can\Implementation\Can.c	  4344  ChannelAmount, TxHwFifo
; ..\component\Can\Implementation\Can.c	  4345  TxHwFifo, MultiplexedTx
; ..\component\Can\Implementation\Can.c	  4346  ChannelAmount, TxBasicAmount, TxFullAmount
; ..\component\Can\Implementation\Can.c	  4347  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4348  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4349  Constrain:
; ..\component\Can\Implementation\Can.c	  4350  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4351  */
; ..\component\Can\Implementation\Can.c	  4352  /*!
; ..\component\Can\Implementation\Can.c	  4353  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4354   *
; ..\component\Can\Implementation\Can.c	  4355   *
; ..\component\Can\Implementation\Can.c	  4356   *
; ..\component\Can\Implementation\Can.c	  4357  */
; ..\component\Can\Implementation\Can.c	  4358  /* CODE CATEGORY 2 START */
; ..\component\Can\Implementation\Can.c	  4359  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_TxProcessPendings(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanTaskParaStructPtr taskPara) /* PRQA S 3673*/ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  4360  {
; ..\component\Can\Implementation\Can.c	  4361    CanDeclareGlobalInterruptOldStatus
; ..\component\Can\Implementation\Can.c	  4362    vuint32 txBRP;
; ..\component\Can\Implementation\Can.c	  4363    CanObjectHandle mailboxElement = 0;
; ..\component\Can\Implementation\Can.c	  4364  
; ..\component\Can\Implementation\Can.c	  4365    CanNestedGlobalInterruptDisable();
; ..\component\Can\Implementation\Can.c	  4366  
; ..\component\Can\Implementation\Can.c	  4367  # if defined(C_ENABLE_MULTIPLEXED_TRANSMISSION) || defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  4368      for (;mailboxElement < Can_GetMailboxSize(taskPara->mailboxHandle); mailboxElement++)
; ..\component\Can\Implementation\Can.c	  4369  # endif
; ..\component\Can\Implementation\Can.c	  4370      {
; ..\component\Can\Implementation\Can.c	  4371        /* #10 get the corresponding Tx Buffer number to be confirmed */
; ..\component\Can\Implementation\Can.c	  4372        txBRP = CanLL_if_TxIsObjConfPending(CAN_CHANNEL_CANPARA_FIRST ((vuint32)(kCanACTIVE << (taskPara->hwObjHandle + mailboxElement))) ); /* PRQA S 2985 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  4373        /* #20 confirmation handling for a specific Tx Buffer */
; ..\component\Can\Implementation\Can.c	  4374        if(txBRP == kCanOk) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  4375        { /* at least one Tx buffer is pending */
; ..\component\Can\Implementation\Can.c	  4376          CanHL_TxConfirmationPolling(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST taskPara->mailboxHandle, mailboxElement, taskPara->hwObjHandle + mailboxElement); /* PRQA S 2985 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  4377        }
; ..\component\Can\Implementation\Can.c	  4378      }
; ..\component\Can\Implementation\Can.c	  4379    CanNestedGlobalInterruptRestore();
; ..\component\Can\Implementation\Can.c	  4380  }
; ..\component\Can\Implementation\Can.c	  4381  /* CODE CATEGORY 2 END */
; ..\component\Can\Implementation\Can.c	  4382  #endif /* C_ENABLE_TX_POLLING */
; ..\component\Can\Implementation\Can.c	  4383  
; ..\component\Can\Implementation\Can.c	  4384  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4385   *  CanLL_TxConfBegin
; ..\component\Can\Implementation\Can.c	  4386   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4387  /*
; ..\component\Can\Implementation\Can.c	  4388  |<DataModelStart>| CanLL_TxConfBegin
; ..\component\Can\Implementation\Can.c	  4389  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4390  # from CanHL_TxConfirmation #
; ..\component\Can\Implementation\Can.c	  4391  Relation:
; ..\component\Can\Implementation\Can.c	  4392  OneChOpt
; ..\component\Can\Implementation\Can.c	  4393  ChannelAmount, TxBasicAmount, TxFullAmount
; ..\component\Can\Implementation\Can.c	  4394  MultiplexedTx
; ..\component\Can\Implementation\Can.c	  4395  IntLock, RxBasicCANSupport, RxPolling, RxFullCANSupport, TxPolling, IndividualPolling, StatusPolling, ChannelAmount
; ..\component\Can\Implementation\Can.c	  4396  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4397  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4398  Constrain:
; ..\component\Can\Implementation\Can.c	  4399  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4400  */
; ..\component\Can\Implementation\Can.c	  4401  /*!
; ..\component\Can\Implementation\Can.c	  4402  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4403   *
; ..\component\Can\Implementation\Can.c	  4404   *
; ..\component\Can\Implementation\Can.c	  4405   *
; ..\component\Can\Implementation\Can.c	  4406  */
; ..\component\Can\Implementation\Can.c	  4407  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4408  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_TxConfBegin(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanTxConfirmationParaStructPtr txConfPara)  /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  4409  {
; ..\component\Can\Implementation\Can.c	  4410    vuint32 txBRP = (vuint32)(kCanACTIVE << (txConfPara->hwObjHandle));
; ..\component\Can\Implementation\Can.c	  4411    
; ..\component\Can\Implementation\Can.c	  4412    CanDeclareGlobalInterruptOldStatus
; ..\component\Can\Implementation\Can.c	  4413   
; ..\component\Can\Implementation\Can.c	  4414    /* #10 check for unexpected confirmation */
; ..\component\Can\Implementation\Can.c	  4415    assertHardware( ((Can_GetCanTXBRP(canHwChannel) & txBRP) != 0UL), canHwChannel, kCanErrorUnexpectedConfirmation); /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  4416  
; ..\component\Can\Implementation\Can.c	  4417    CanNestedGlobalInterruptDisable();
; ..\component\Can\Implementation\Can.c	  4418    /* #20 clear pending flag for a specific Tx Buffer */  
; ..\component\Can\Implementation\Can.c	  4419    Can_GetCanTXBRP(canHwChannel)     &= ((vuint32)~txBRP);  /* SBSW_CAN_LL_112 */  
; ..\component\Can\Implementation\Can.c	  4420    CanNestedGlobalInterruptRestore();
; ..\component\Can\Implementation\Can.c	  4421  }
; ..\component\Can\Implementation\Can.c	  4422  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4423  
; ..\component\Can\Implementation\Can.c	  4424  
; ..\component\Can\Implementation\Can.c	  4425  #if defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2)
; ..\component\Can\Implementation\Can.c	  4426  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4427   *  CanLL_TxConfSetTxConfStruct
; ..\component\Can\Implementation\Can.c	  4428   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4429  /*
; ..\component\Can\Implementation\Can.c	  4430  |<DataModelStart>| CanLL_TxConfSetTxConfStruct
; ..\component\Can\Implementation\Can.c	  4431  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4432  # from CanHL_TxConfirmation #
; ..\component\Can\Implementation\Can.c	  4433  GenericConfirmation
; ..\component\Can\Implementation\Can.c	  4434  Relation:
; ..\component\Can\Implementation\Can.c	  4435  OneChOpt
; ..\component\Can\Implementation\Can.c	  4436  ChannelAmount, MultiplexedTx, CanFdSupport, TxBasicAmount, TxFullCANSupport, TxFullAmount
; ..\component\Can\Implementation\Can.c	  4437  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4438  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4439  Constrain:
; ..\component\Can\Implementation\Can.c	  4440  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4441  */
; ..\component\Can\Implementation\Can.c	  4442  /*!
; ..\component\Can\Implementation\Can.c	  4443  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4444   *
; ..\component\Can\Implementation\Can.c	  4445   *
; ..\component\Can\Implementation\Can.c	  4446  */
; ..\component\Can\Implementation\Can.c	  4447  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4448  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_TxConfSetTxConfStruct(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanTxConfirmationParaStructPtr txConfPara) /* COV_CAN_GENDATA_TX_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  4449  {
; ..\component\Can\Implementation\Can.c	  4450  #if defined( C_ENABLE_CAN_FD_FULL )
; ..\component\Can\Implementation\Can.c	  4451    {
; ..\component\Can\Implementation\Can.c	  4452      vuint8 i;
; ..\component\Can\Implementation\Can.c	  4453      for(i=0u; i< (Can_GetMaxDataLenOfMailbox(txConfPara->mailboxHandle)/4u) ; i++)
; ..\component\Can\Implementation\Can.c	  4454      {
; ..\component\Can\Implementation\Can.c	  4455        *(vuint32*)&txConfPara->tmpTXB.data[i] = ShmTXB(txConfPara->hwObjHandle).data[i];                  /* PRQA S 0303,0312,4391 */      /* MD_Can_HwAccess,MD_Can_NoneVolatilePointerCast,MD_Can_IntegerCast */                /* first transfer the 32 bit aligned Message RAM to a byte array */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4456        *(vuint32*)&txConfPara->tmpTXB.data[i] = CanBswap32(*(vuint32*)&txConfPara->tmpTXB.data[i]);     /* PRQA S 0303,0312,0404 */ /* MD_Can_HwAccess,MD_Can_NoneVolatilePointerCast,MD_Can_0404_LL */ /* then sort bytes depending on endianess */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4457      }
; ..\component\Can\Implementation\Can.c	  4458    }
; ..\component\Can\Implementation\Can.c	  4459  #else
; ..\component\Can\Implementation\Can.c	  4460    *(vuint32*)&txConfPara->tmpTXB.data[0] = ShmTXB(txConfPara->hwObjHandle).data[0];                  /* PRQA S 0303,0312 */ /* MD_Can_HwAccess,MD_Can_NoneVolatilePointerCast */                     /* first transfer the 32 bit aligned Message RAM to a byte array */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4461    *(vuint32*)&txConfPara->tmpTXB.data[1] = ShmTXB(txConfPara->hwObjHandle).data[1];                  /* PRQA S 0303,0312 */ /* MD_Can_HwAccess,MD_Can_NoneVolatilePointerCast */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4462    *(vuint32*)&txConfPara->tmpTXB.data[0] = CanBswap32(*(vuint32*)&txConfPara->tmpTXB.data[0]);     /* PRQA S 0303,0312,0404 */ /* MD_Can_HwAccess,MD_Can_NoneVolatilePointerCast,MD_Can_0404_LL */ /* then sort bytes depending on endianess */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4463    *(vuint32*)&txConfPara->tmpTXB.data[1] = CanBswap32(*(vuint32*)&txConfPara->tmpTXB.data[1]);     /* PRQA S 0303,0312,0404 */ /* MD_Can_HwAccess,MD_Can_NoneVolatilePointerCast,MD_Can_0404_LL */  /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4464  #endif
; ..\component\Can\Implementation\Can.c	  4465  
; ..\component\Can\Implementation\Can.c	  4466    /* #10 set pointers in the transmit structure */
; ..\component\Can\Implementation\Can.c	  4467    txConfPara->txStructConf->pChipData   = (CanChipDataPtr)&txConfPara->tmpTXB.data[0]; /* finally hand the byte pointer to the application */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4468    txConfPara->txStructConf->pChipMsgObj = (CanChipMsgPtr) &ShmTXB(txConfPara->hwObjHandle).E0;  /* PRQA S 0310,0303,4391 */ /* MD_Can_PointerCast, MD_Can_HwAccess, MD_Can_IntegerCast */  /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4469  }
; ..\component\Can\Implementation\Can.c	  4470  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4471  #endif
; ..\component\Can\Implementation\Can.c	  4472  
; ..\component\Can\Implementation\Can.c	  4473  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4474   *  CanLL_TxConfEnd
; ..\component\Can\Implementation\Can.c	  4475   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4476  /*
; ..\component\Can\Implementation\Can.c	  4477  |<DataModelStart>| CanLL_TxConfEnd
; ..\component\Can\Implementation\Can.c	  4478  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4479  # from CanHL_TxConfirmation #
; ..\component\Can\Implementation\Can.c	  4480  Relation:
; ..\component\Can\Implementation\Can.c	  4481  OneChOpt,
; ..\component\Can\Implementation\Can.c	  4482  ChannelAmount
; ..\component\Can\Implementation\Can.c	  4483  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4484  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4485  Constrain:
; ..\component\Can\Implementation\Can.c	  4486  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4487  */
; ..\component\Can\Implementation\Can.c	  4488  /*!
; ..\component\Can\Implementation\Can.c	  4489  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4490   *
; ..\component\Can\Implementation\Can.c	  4491   *
; ..\component\Can\Implementation\Can.c	  4492  */
; ..\component\Can\Implementation\Can.c	  4493  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4494  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_TxConfEnd(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanTxConfirmationParaStructPtr txConfPara) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  4495  {
; ..\component\Can\Implementation\Can.c	  4496    /* #10 no actions necessary */
; ..\component\Can\Implementation\Can.c	  4497    CAN_DUMMY_STATEMENT(txConfPara);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4498    CAN_CHANNEL_DUMMY_STATEMENT;      /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4499  }
; ..\component\Can\Implementation\Can.c	  4500  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4501  
; ..\component\Can\Implementation\Can.c	  4502  
; ..\component\Can\Implementation\Can.c	  4503  
; ..\component\Can\Implementation\Can.c	  4504  #if defined( C_ENABLE_RX_BASICCAN_OBJECTS )
; ..\component\Can\Implementation\Can.c	  4505  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4506   *  CanLL_RxBasicMsgReceivedBegin
; ..\component\Can\Implementation\Can.c	  4507   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4508  /*
; ..\component\Can\Implementation\Can.c	  4509  |<DataModelStart>| CanLL_RxBasicMsgReceivedBegin
; ..\component\Can\Implementation\Can.c	  4510  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4511  # from CanHL_BasicCanMsgReceived #
; ..\component\Can\Implementation\Can.c	  4512  RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  4513  Relation:
; ..\component\Can\Implementation\Can.c	  4514  OneChOpt
; ..\component\Can\Implementation\Can.c	  4515  ChannelAmount
; ..\component\Can\Implementation\Can.c	  4516  HardwareLoopCheck
; ..\component\Can\Implementation\Can.c	  4517  CanFdSupport
; ..\component\Can\Implementation\Can.c	  4518  MultipleBasicCanObjects
; ..\component\Can\Implementation\Can.c	  4519  Overrun
; ..\component\Can\Implementation\Can.c	  4520  RxFullAmount
; ..\component\Can\Implementation\Can.c	  4521  RxBasicAmount
; ..\component\Can\Implementation\Can.c	  4522  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4523  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4524  Constrain:
; ..\component\Can\Implementation\Can.c	  4525  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4526  */
; ..\component\Can\Implementation\Can.c	  4527  /*!
; ..\component\Can\Implementation\Can.c	  4528  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4529   *
; ..\component\Can\Implementation\Can.c	  4530   *
; ..\component\Can\Implementation\Can.c	  4531   *
; ..\component\Can\Implementation\Can.c	  4532   *
; ..\component\Can\Implementation\Can.c	  4533  */
; ..\component\Can\Implementation\Can.c	  4534  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4535  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_RxBasicMsgReceivedBegin(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanRxBasicParaStructPtr rxBasicPara)
; ..\component\Can\Implementation\Can.c	  4536  {
; ..\component\Can\Implementation\Can.c	  4537    vuint8  indexL;
; ..\component\Can\Implementation\Can.c	  4538  # if defined(C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  4539    vuint8  fElmSize;
; ..\component\Can\Implementation\Can.c	  4540  # endif
; ..\component\Can\Implementation\Can.c	  4541  
; ..\component\Can\Implementation\Can.c	  4542    /* #10 get the FIFO buffer */
; ..\component\Can\Implementation\Can.c	  4543  # if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	  4544    if(rxBasicPara->mailboxHandle == (CAN_HL_MB_RX_BASIC_STARTINDEX(canHwChannel) + 1u) )  /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  4545    { /* point to Fifo-1 */
; ..\component\Can\Implementation\Can.c	  4546      rxBasicPara->pFifoAck    = &(Cn->RXF1A); /* SBSW_CAN_LL_109 */   /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4547      rxBasicPara->pFifoStatus = &(Cn->RXF1S); /* SBSW_CAN_LL_109 */   /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4548      rxBasicPara->fGetIndex   = (vuint8)(rxBasicPara->pFifoStatus->B.FnGI); /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4549      rxBasicPara->pShm        = ShmRXF1(rxBasicPara->fGetIndex);            /* PRQA S 0303,1891,4391 */ /* MD_Can_HwAccess,MD_Can_1891_LL,MD_Can_IntegerCast */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4550    }
; ..\component\Can\Implementation\Can.c	  4551    else
; ..\component\Can\Implementation\Can.c	  4552  # endif
; ..\component\Can\Implementation\Can.c	  4553    { /* point to Fifo-0 */
; ..\component\Can\Implementation\Can.c	  4554      rxBasicPara->pFifoAck    = &(Cn->RXF0A); /* SBSW_CAN_LL_109 */   /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4555      rxBasicPara->pFifoStatus = &(Cn->RXF0S); /* SBSW_CAN_LL_109 */   /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4556      rxBasicPara->fGetIndex   = (vuint8)(rxBasicPara->pFifoStatus->B.FnGI); /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4557      rxBasicPara->pShm        = ShmRXF0(rxBasicPara->fGetIndex);            /* PRQA S 0303,1891,4391 */ /* MD_Can_HwAccess,MD_Can_1891_LL,MD_Can_IntegerCast */ /* SBSW_CAN_LL_109 */
; ..\component\Can\Implementation\Can.c	  4558    }
; ..\component\Can\Implementation\Can.c	  4559  
; ..\component\Can\Implementation\Can.c	  4560    /* #20 copy mailbox contents to temporary buffer */
; ..\component\Can\Implementation\Can.c	  4561    rxBasicPara->fElm.E0      = rxBasicPara->pShm->E0; /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4562    rxBasicPara->fElm.E1      = rxBasicPara->pShm->E1; /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4563  # if defined(C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  4564    fElmSize = CAN_DLC2LEN(((rxBasicPara->fElm.E1) & 0x000F0000UL) >> 16u); /* SBSW_CAN_LL_109 */
; ..\component\Can\Implementation\Can.c	  4565    for(indexL = 0u; (indexL << 2u) < fElmSize; indexL++)
; ..\component\Can\Implementation\Can.c	  4566  #else
; ..\component\Can\Implementation\Can.c	  4567    for(indexL = 0u; indexL < 2u; indexL++)
; ..\component\Can\Implementation\Can.c	  4568  #endif
; ..\component\Can\Implementation\Can.c	  4569    {
; ..\component\Can\Implementation\Can.c	  4570      rxBasicPara->fElm.data[indexL] = CanBswap32(rxBasicPara->pShm->data[indexL]);    /* PRQA S 0404 */  /* MD_Can_0404_LL */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4571    }
; ..\component\Can\Implementation\Can.c	  4572  
; ..\component\Can\Implementation\Can.c	  4573    /* #30 set pointers to the received message */
; ..\component\Can\Implementation\Can.c	  4574    rxBasicPara->rxStruct.pChipMsgObj = (CanChipMsgPtr)  &rxBasicPara->fElm.E0;      /* SBSW_CAN_LL_109 */ /* PRQA S 0310 */ /* MD_Can_PointerCast */
; ..\component\Can\Implementation\Can.c	  4575    rxBasicPara->rxStruct.pChipData   = (CanChipDataPtr) &rxBasicPara->fElm.data[0]; /* SBSW_CAN_LL_109 */ /* PRQA S 0310 */ /* MD_Can_PointerCast */
; ..\component\Can\Implementation\Can.c	  4576  
; ..\component\Can\Implementation\Can.c	  4577    return(kCanOk);
; ..\component\Can\Implementation\Can.c	  4578  }
; ..\component\Can\Implementation\Can.c	  4579  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4580  
; ..\component\Can\Implementation\Can.c	  4581  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4582   *  CanLL_RxBasicReleaseObj
; ..\component\Can\Implementation\Can.c	  4583   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4584  /*
; ..\component\Can\Implementation\Can.c	  4585  |<DataModelStart>| CanLL_RxBasicReleaseObj
; ..\component\Can\Implementation\Can.c	  4586  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4587  # from CanHL_BasicCanMsgReceived #
; ..\component\Can\Implementation\Can.c	  4588  RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  4589  Relation:
; ..\component\Can\Implementation\Can.c	  4590  OneChOpt
; ..\component\Can\Implementation\Can.c	  4591  ChannelAmount, DevErrorDetect
; ..\component\Can\Implementation\Can.c	  4592  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4593  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4594  Constrain:
; ..\component\Can\Implementation\Can.c	  4595  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4596  */
; ..\component\Can\Implementation\Can.c	  4597  /*!
; ..\component\Can\Implementation\Can.c	  4598  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4599   *
; ..\component\Can\Implementation\Can.c	  4600   *
; ..\component\Can\Implementation\Can.c	  4601  */
; ..\component\Can\Implementation\Can.c	  4602  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4603  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_RxBasicReleaseObj(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanRxBasicParaStructPtr rxBasicPara) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  4604  {
; ..\component\Can\Implementation\Can.c	  4605    if( (((vuint32)*(vuint32*) rxBasicPara->pFifoStatus) & kCanRXFnS_FnFL) > 0UL)  /* PRQA S 0310,0312 */ /* MD_Can_PointerCast,MD_Can_NoneVolatilePointerCast */ /* COV_CAN_MCAN_SAFETY_CHECK */
; ..\component\Can\Implementation\Can.c	  4606    { /* Attention: ACK with Fill Level '0' will result in a endless read loop !!! */
; ..\component\Can\Implementation\Can.c	  4607      /* ACK: After the Host has read a message or a sequence of messages it has to write the buffer index of the last element read to FnAI. 
; ..\component\Can\Implementation\Can.c	  4608              This will set the Get Index RXFnS[FnGI] to FnAI+1 and update the FIFO Fill Level RXF0S[FnFL]. */
; ..\component\Can\Implementation\Can.c	  4609      /* #10 acknowledge the received messsage and go to the next one, if available */
; ..\component\Can\Implementation\Can.c	  4610      *rxBasicPara->pFifoAck    = (rxBasicPara->fGetIndex & 0x0000003FUL); /* SBSW_CAN_LL_109 */  
; ..\component\Can\Implementation\Can.c	  4611    }
; ..\component\Can\Implementation\Can.c	  4612    else
; ..\component\Can\Implementation\Can.c	  4613    {
; ..\component\Can\Implementation\Can.c	  4614      Can_CallDetReportError(CAN_HW_ACCESS_ID, CAN_E_PARAM_CONTROLLER);   /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  4615    }
; ..\component\Can\Implementation\Can.c	  4616    CAN_CHANNEL_DUMMY_STATEMENT;                     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4617  }
; ..\component\Can\Implementation\Can.c	  4618  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4619  
; ..\component\Can\Implementation\Can.c	  4620  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4621   *  CanLL_RxBasicMsgReceivedEnd
; ..\component\Can\Implementation\Can.c	  4622   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4623  /*
; ..\component\Can\Implementation\Can.c	  4624  |<DataModelStart>| CanLL_RxBasicMsgReceivedEnd
; ..\component\Can\Implementation\Can.c	  4625  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4626  # from CanHL_BasicCanMsgReceived #
; ..\component\Can\Implementation\Can.c	  4627  RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  4628  Relation:
; ..\component\Can\Implementation\Can.c	  4629  OneChOpt
; ..\component\Can\Implementation\Can.c	  4630  ChannelAmount
; ..\component\Can\Implementation\Can.c	  4631  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4632  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4633  Constrain:
; ..\component\Can\Implementation\Can.c	  4634  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4635  */
; ..\component\Can\Implementation\Can.c	  4636  /*!
; ..\component\Can\Implementation\Can.c	  4637  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4638   *
; ..\component\Can\Implementation\Can.c	  4639   *
; ..\component\Can\Implementation\Can.c	  4640  */
; ..\component\Can\Implementation\Can.c	  4641  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4642  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_RxBasicMsgReceivedEnd(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanRxBasicParaStructPtr rxBasicPara) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  4643  {
; ..\component\Can\Implementation\Can.c	  4644    /* #10 no actions required */
; ..\component\Can\Implementation\Can.c	  4645    CAN_DUMMY_STATEMENT(rxBasicPara);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4646    CAN_CHANNEL_DUMMY_STATEMENT;       /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4647  }
; ..\component\Can\Implementation\Can.c	  4648  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4649  
; ..\component\Can\Implementation\Can.c	  4650  # if defined( C_ENABLE_RX_BASICCAN_POLLING )
; ..\component\Can\Implementation\Can.c	  4651  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4652   *  CanLL_RxBasicIsGlobalIndPending
; ..\component\Can\Implementation\Can.c	  4653   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4654  /*
; ..\component\Can\Implementation\Can.c	  4655  |<DataModelStart>| CanLL_RxBasicIsGlobalIndPending
; ..\component\Can\Implementation\Can.c	  4656  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4657  # from CanHL_RxBasicCanPolling #
; ..\component\Can\Implementation\Can.c	  4658  RxBasicCANSupport, RxPolling
; ..\component\Can\Implementation\Can.c	  4659  Relation:
; ..\component\Can\Implementation\Can.c	  4660  OneChOpt
; ..\component\Can\Implementation\Can.c	  4661  ChannelAmount, MultipleBasicCanObjects, RxBasicAmount
; ..\component\Can\Implementation\Can.c	  4662  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4663  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4664  Constrain:
; ..\component\Can\Implementation\Can.c	  4665  # CAN_BOSCH_ERRATUM_012 #
; ..\component\Can\Implementation\Can.c	  4666  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4667  */
; ..\component\Can\Implementation\Can.c	  4668  /*!
; ..\component\Can\Implementation\Can.c	  4669  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4670   *
; ..\component\Can\Implementation\Can.c	  4671   *
; ..\component\Can\Implementation\Can.c	  4672  */
; ..\component\Can\Implementation\Can.c	  4673  /* CODE CATEGORY 2 START */
; ..\component\Can\Implementation\Can.c	  4674  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_RxBasicIsGlobalIndPending(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_ONLY) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  4675  {
; ..\component\Can\Implementation\Can.c	  4676    vuint8  retvalue = kCanFalse;
; ..\component\Can\Implementation\Can.c	  4677  # if ( CAN_BOSCH_ERRATUM_012 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	  4678  #  if !defined( C_ENABLE_ISR_MANDATORY )  /* ISR not available, pure polling configuration */
; ..\component\Can\Implementation\Can.c	  4679    { /* check periodically for erratum12 */
; ..\component\Can\Implementation\Can.c	  4680      if( (Cn->IR  & kCanIR_TOO) != 0u)
; ..\component\Can\Implementation\Can.c	  4681      { /* timeout arrived */
; ..\component\Can\Implementation\Can.c	  4682        CanInterruptTimeoutCounter(CAN_HW_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  4683      }
; ..\component\Can\Implementation\Can.c	  4684    }
; ..\component\Can\Implementation\Can.c	  4685  #  endif
; ..\component\Can\Implementation\Can.c	  4686  # endif
; ..\component\Can\Implementation\Can.c	  4687  
; ..\component\Can\Implementation\Can.c	  4688    /* #10 check the FIFO fill level for reception events */
; ..\component\Can\Implementation\Can.c	  4689  #if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	  4690    if( ((Cn->RXF0S.R & kCanRXFnS_FnFL) > 0u) || ((Cn->RXF1S.R & kCanRXFnS_FnFL) > 0u) ) /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4691  #else
; ..\component\Can\Implementation\Can.c	  4692    if( ((Cn->RXF0S.R & kCanRXFnS_FnFL) > 0u) ) /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4693  #endif
; ..\component\Can\Implementation\Can.c	  4694    {
; ..\component\Can\Implementation\Can.c	  4695      retvalue = kCanTrue;
; ..\component\Can\Implementation\Can.c	  4696    }
; ..\component\Can\Implementation\Can.c	  4697    return retvalue;
; ..\component\Can\Implementation\Can.c	  4698  }
; ..\component\Can\Implementation\Can.c	  4699  /* CODE CATEGORY 2 END */
; ..\component\Can\Implementation\Can.c	  4700  
; ..\component\Can\Implementation\Can.c	  4701  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4702   *  CanLL_RxBasicProcessPendings
; ..\component\Can\Implementation\Can.c	  4703   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4704  /*
; ..\component\Can\Implementation\Can.c	  4705  |<DataModelStart>| CanLL_RxBasicProcessPendings
; ..\component\Can\Implementation\Can.c	  4706  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4707  # from CanHL_RxBasicCanPolling #
; ..\component\Can\Implementation\Can.c	  4708  RxBasicCANSupport, RxPolling
; ..\component\Can\Implementation\Can.c	  4709  Relation:
; ..\component\Can\Implementation\Can.c	  4710  OneChOpt
; ..\component\Can\Implementation\Can.c	  4711  ChannelAmount, MultipleBasicCanObjects, RxBasicAmount
; ..\component\Can\Implementation\Can.c	  4712  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4713  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4714  Constrain:
; ..\component\Can\Implementation\Can.c	  4715  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4716  */
; ..\component\Can\Implementation\Can.c	  4717  /*!
; ..\component\Can\Implementation\Can.c	  4718  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4719   *
; ..\component\Can\Implementation\Can.c	  4720   *
; ..\component\Can\Implementation\Can.c	  4721   *
; ..\component\Can\Implementation\Can.c	  4722  */
; ..\component\Can\Implementation\Can.c	  4723  /* CODE CATEGORY 2 START */
; ..\component\Can\Implementation\Can.c	  4724  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_RxBasicProcessPendings(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanTaskParaStructPtr taskPara) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  4725  {
; ..\component\Can\Implementation\Can.c	  4726    vuint8 fillLevel;
; ..\component\Can\Implementation\Can.c	  4727  
; ..\component\Can\Implementation\Can.c	  4728    /* #10 get the corresponding FIFO buffer */
; ..\component\Can\Implementation\Can.c	  4729  #if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	  4730    if(taskPara->mailboxHandle == (CAN_HL_MB_RX_BASIC_STARTINDEX(canHwChannel) + 1u)) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  4731    { /* point to Fifo-1 */
; ..\component\Can\Implementation\Can.c	  4732      fillLevel = Cn->RXF1S.B.FnFL;  /* PRQA S 1843,4558,0303 */ /* MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4733    }
; ..\component\Can\Implementation\Can.c	  4734    else
; ..\component\Can\Implementation\Can.c	  4735  #endif
; ..\component\Can\Implementation\Can.c	  4736    { /* point to Fifo-0 */
; ..\component\Can\Implementation\Can.c	  4737      fillLevel = Cn->RXF0S.B.FnFL;  /* PRQA S 1843,4558,0303 */ /* MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4738    }
; ..\component\Can\Implementation\Can.c	  4739    
; ..\component\Can\Implementation\Can.c	  4740    /* #20 call the reception handling for each message until the FIFO buffer is empty */
; ..\component\Can\Implementation\Can.c	  4741    while( ((fillLevel) > 0u) ) 
; ..\component\Can\Implementation\Can.c	  4742    {
; ..\component\Can\Implementation\Can.c	  4743      fillLevel--;
; ..\component\Can\Implementation\Can.c	  4744      CanHL_BasicCanMsgReceivedPolling(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST taskPara->mailboxHandle, taskPara->hwObjHandle);
; ..\component\Can\Implementation\Can.c	  4745    }
; ..\component\Can\Implementation\Can.c	  4746  
; ..\component\Can\Implementation\Can.c	  4747  }
; ..\component\Can\Implementation\Can.c	  4748  /* CODE CATEGORY 2 END */
; ..\component\Can\Implementation\Can.c	  4749  # endif /* C_ENABLE_RX_BASICCAN_POLLING */
; ..\component\Can\Implementation\Can.c	  4750  #endif /* C_ENABLE_RX_BASICCAN_OBJECTS */
; ..\component\Can\Implementation\Can.c	  4751  
; ..\component\Can\Implementation\Can.c	  4752  #if defined( C_ENABLE_RX_FULLCAN_OBJECTS )
; ..\component\Can\Implementation\Can.c	  4753  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4754   *  CanLL_RxFullMsgReceivedBegin
; ..\component\Can\Implementation\Can.c	  4755   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4756  /*
; ..\component\Can\Implementation\Can.c	  4757  |<DataModelStart>| CanLL_RxFullMsgReceivedBegin
; ..\component\Can\Implementation\Can.c	  4758  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4759  # from CanHL_FullCanMsgReceived #
; ..\component\Can\Implementation\Can.c	  4760  RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  4761  Relation:
; ..\component\Can\Implementation\Can.c	  4762  OneChOpt, ChannelAmount, HardwareLoopCheck
; ..\component\Can\Implementation\Can.c	  4763  CanFdSupport
; ..\component\Can\Implementation\Can.c	  4764  Overrun
; ..\component\Can\Implementation\Can.c	  4765  RxFullCANSupport, RxFullAmount
; ..\component\Can\Implementation\Can.c	  4766  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4767  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4768  Constrain:
; ..\component\Can\Implementation\Can.c	  4769  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4770  */
; ..\component\Can\Implementation\Can.c	  4771  /*!
; ..\component\Can\Implementation\Can.c	  4772  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4773   *
; ..\component\Can\Implementation\Can.c	  4774   *
; ..\component\Can\Implementation\Can.c	  4775   *
; ..\component\Can\Implementation\Can.c	  4776   *
; ..\component\Can\Implementation\Can.c	  4777  */
; ..\component\Can\Implementation\Can.c	  4778  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4779  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_RxFullMsgReceivedBegin(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanRxFullParaStructPtr rxFullPara)
; ..\component\Can\Implementation\Can.c	  4780  {
; ..\component\Can\Implementation\Can.c	  4781  # if defined(C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  4782    vuint8 rElmSize, indexL;
; ..\component\Can\Implementation\Can.c	  4783  # endif
; ..\component\Can\Implementation\Can.c	  4784  
; ..\component\Can\Implementation\Can.c	  4785    rxFullPara->rxStruct.pChipMsgObj = (CanChipMsgPtr)  &rxFullPara->bfElm;         /* SBSW_CAN_LL_109 */ /* PRQA S 0310 */ /* MD_Can_PointerCast */
; ..\component\Can\Implementation\Can.c	  4786    rxFullPara->rxStruct.pChipData   = (CanChipDataPtr) &rxFullPara->bfElm.data[0]; /* SBSW_CAN_LL_109 */ /* PRQA S 0310 */ /* MD_Can_PointerCast */ 
; ..\component\Can\Implementation\Can.c	  4787  
; ..\component\Can\Implementation\Can.c	  4788    /* #10 get the pointer to the message object */
; ..\component\Can\Implementation\Can.c	  4789    rxFullPara->pShm = ShmRXB(rxFullPara->hwObjHandle); /* PRQA S 0303,1891,4391 */ /* MD_Can_HwAccess,MD_Can_1891_LL,MD_Can_IntegerCast */ /* SBSW_CAN_LL_109 */
; ..\component\Can\Implementation\Can.c	  4790    rxFullPara->bfElm.E0 = rxFullPara->pShm->E0; /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4791    rxFullPara->bfElm.E1 = rxFullPara->pShm->E1; /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4792  
; ..\component\Can\Implementation\Can.c	  4793  # if defined(C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  4794    rElmSize = CAN_DLC2LEN((vuint32)((rxFullPara->bfElm.E1) & 0x000F0000UL) >> 16u); /* SBSW_CAN_LL_109 */
; ..\component\Can\Implementation\Can.c	  4795  
; ..\component\Can\Implementation\Can.c	  4796    /* #20 copy the data */
; ..\component\Can\Implementation\Can.c	  4797    for(indexL = 0u; (indexL << 2u) < rElmSize; indexL++) /* SBSW_CAN_LL_109 */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4798    {
; ..\component\Can\Implementation\Can.c	  4799      rxFullPara->bfElm.data[indexL] = rxFullPara->pShm->data[indexL];  /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4800    }
; ..\component\Can\Implementation\Can.c	  4801  #else /* C_ENABLE_CAN_FD_FULL */
; ..\component\Can\Implementation\Can.c	  4802    rxFullPara->bfElm.data[0] = rxFullPara->pShm->data[0]; /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4803    rxFullPara->bfElm.data[1] = rxFullPara->pShm->data[1]; /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  4804  #endif /* C_ENABLE_CAN_FD_FULL */
; ..\component\Can\Implementation\Can.c	  4805  
; ..\component\Can\Implementation\Can.c	  4806    /* #30 clear the New Data Flag  */
; ..\component\Can\Implementation\Can.c	  4807    Cn->NDATA[(rxFullPara->hwObjHandle>>0x05UL)] = (0x00000001UL << (rxFullPara->hwObjHandle & 0x1FUL)); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_100 */
; ..\component\Can\Implementation\Can.c	  4808    
; ..\component\Can\Implementation\Can.c	  4809    /* While an Rx Buffer's New Data flag is set, a Message ID Filter Element referencing this specific Rx Buffer will not match, causing the acceptance filtering to continue. 
; ..\component\Can\Implementation\Can.c	  4810     Following Message ID Filter Elements may cause the received message to be stored 
; ..\component\Can\Implementation\Can.c	  4811     - into another Rx Buffer or
; ..\component\Can\Implementation\Can.c	  4812     - into an Rx FIFO or
; ..\component\Can\Implementation\Can.c	  4813     - the message may be rejected,
; ..\component\Can\Implementation\Can.c	  4814     depending on filter configuration. */
; ..\component\Can\Implementation\Can.c	  4815    return(kCanOk);
; ..\component\Can\Implementation\Can.c	  4816  }
; ..\component\Can\Implementation\Can.c	  4817  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4818  
; ..\component\Can\Implementation\Can.c	  4819  
; ..\component\Can\Implementation\Can.c	  4820  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4821   *  CanLL_RxFullReleaseObj
; ..\component\Can\Implementation\Can.c	  4822   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4823  /*
; ..\component\Can\Implementation\Can.c	  4824  |<DataModelStart>| CanLL_RxFullReleaseObj
; ..\component\Can\Implementation\Can.c	  4825  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4826  # from CanHL_FullCanMsgReceived #
; ..\component\Can\Implementation\Can.c	  4827  RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  4828  Relation:
; ..\component\Can\Implementation\Can.c	  4829  OneChOpt
; ..\component\Can\Implementation\Can.c	  4830  ChannelAmount
; ..\component\Can\Implementation\Can.c	  4831  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4832  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4833  Constrain:
; ..\component\Can\Implementation\Can.c	  4834  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4835  */
; ..\component\Can\Implementation\Can.c	  4836  /*!
; ..\component\Can\Implementation\Can.c	  4837  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4838   *
; ..\component\Can\Implementation\Can.c	  4839   *
; ..\component\Can\Implementation\Can.c	  4840  */
; ..\component\Can\Implementation\Can.c	  4841  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4842   V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_RxFullReleaseObj(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanRxFullParaStructPtr rxFullPara)
; ..\component\Can\Implementation\Can.c	  4843  {
; ..\component\Can\Implementation\Can.c	  4844    /* #10 no actions required */
; ..\component\Can\Implementation\Can.c	  4845    CAN_DUMMY_STATEMENT(rxFullPara);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4846    CAN_CHANNEL_DUMMY_STATEMENT;      /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4847  }
; ..\component\Can\Implementation\Can.c	  4848  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4849  
; ..\component\Can\Implementation\Can.c	  4850  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4851   *  CanLL_RxFullMsgReceivedEnd
; ..\component\Can\Implementation\Can.c	  4852   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4853  /*
; ..\component\Can\Implementation\Can.c	  4854  |<DataModelStart>| CanLL_RxFullMsgReceivedEnd
; ..\component\Can\Implementation\Can.c	  4855  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4856  # from CanHL_FullCanMsgReceived #
; ..\component\Can\Implementation\Can.c	  4857  RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  4858  Relation:
; ..\component\Can\Implementation\Can.c	  4859  OneChOpt
; ..\component\Can\Implementation\Can.c	  4860  ChannelAmount
; ..\component\Can\Implementation\Can.c	  4861  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4862  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4863  Constrain:
; ..\component\Can\Implementation\Can.c	  4864  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4865  */
; ..\component\Can\Implementation\Can.c	  4866  /*!
; ..\component\Can\Implementation\Can.c	  4867  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4868   *
; ..\component\Can\Implementation\Can.c	  4869   *
; ..\component\Can\Implementation\Can.c	  4870  */
; ..\component\Can\Implementation\Can.c	  4871  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  4872  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_RxFullMsgReceivedEnd(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanRxFullParaStructPtr rxFullPara)
; ..\component\Can\Implementation\Can.c	  4873  {
; ..\component\Can\Implementation\Can.c	  4874    /* #10 no actions required */
; ..\component\Can\Implementation\Can.c	  4875    CAN_DUMMY_STATEMENT(rxFullPara);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4876    CAN_CHANNEL_DUMMY_STATEMENT;      /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  4877  }
; ..\component\Can\Implementation\Can.c	  4878  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  4879  
; ..\component\Can\Implementation\Can.c	  4880  
; ..\component\Can\Implementation\Can.c	  4881  # if defined( C_ENABLE_RX_FULLCAN_POLLING )
; ..\component\Can\Implementation\Can.c	  4882  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4883   *  CanLL_RxFullIsGlobalIndPending
; ..\component\Can\Implementation\Can.c	  4884   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4885  /*
; ..\component\Can\Implementation\Can.c	  4886  |<DataModelStart>| CanLL_RxFullIsGlobalIndPending
; ..\component\Can\Implementation\Can.c	  4887  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4888  # from CanHL_RxFullCanPolling #
; ..\component\Can\Implementation\Can.c	  4889  RxFullCANSupport, RxPolling
; ..\component\Can\Implementation\Can.c	  4890  Relation:
; ..\component\Can\Implementation\Can.c	  4891  OneChOpt
; ..\component\Can\Implementation\Can.c	  4892  ChannelAmount
; ..\component\Can\Implementation\Can.c	  4893  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4894  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4895  Constrain:
; ..\component\Can\Implementation\Can.c	  4896  # CAN_BOSCH_ERRATUM_012 #
; ..\component\Can\Implementation\Can.c	  4897  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4898  */
; ..\component\Can\Implementation\Can.c	  4899  /*!
; ..\component\Can\Implementation\Can.c	  4900  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4901   *
; ..\component\Can\Implementation\Can.c	  4902   *
; ..\component\Can\Implementation\Can.c	  4903  */
; ..\component\Can\Implementation\Can.c	  4904  /* CODE CATEGORY 2 START */
; ..\component\Can\Implementation\Can.c	  4905  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_RxFullIsGlobalIndPending(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  4906  {
; ..\component\Can\Implementation\Can.c	  4907    vuint8 retVal = kCanFalse;
; ..\component\Can\Implementation\Can.c	  4908  # if ( CAN_BOSCH_ERRATUM_012 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	  4909  #  if !defined( C_ENABLE_ISR_MANDATORY )  /* ISR not available, pure polling configuration */
; ..\component\Can\Implementation\Can.c	  4910    { /* check periodically for erratum12 */
; ..\component\Can\Implementation\Can.c	  4911      if( (Cn->IR  & kCanIR_TOO) != 0u) /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  4912      { /* timeout arrived */
; ..\component\Can\Implementation\Can.c	  4913        CanInterruptTimeoutCounter(CAN_HW_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  4914      }
; ..\component\Can\Implementation\Can.c	  4915    }
; ..\component\Can\Implementation\Can.c	  4916  #  endif
; ..\component\Can\Implementation\Can.c	  4917  # endif
; ..\component\Can\Implementation\Can.c	  4918  
; ..\component\Can\Implementation\Can.c	  4919    /* #10 check the receive buffer new data registers for reception events */
; ..\component\Can\Implementation\Can.c	  4920    if( (Cn->NDATA[0] != 0u) || (Cn->NDATA[1] != 0u) ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  4921    {
; ..\component\Can\Implementation\Can.c	  4922      retVal = kCanTrue;
; ..\component\Can\Implementation\Can.c	  4923    }
; ..\component\Can\Implementation\Can.c	  4924    return retVal;
; ..\component\Can\Implementation\Can.c	  4925  }
; ..\component\Can\Implementation\Can.c	  4926  /* CODE CATEGORY 2 END */
; ..\component\Can\Implementation\Can.c	  4927  
; ..\component\Can\Implementation\Can.c	  4928  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4929   *  CanLL_RxFullProcessPendings
; ..\component\Can\Implementation\Can.c	  4930   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4931  /*
; ..\component\Can\Implementation\Can.c	  4932  |<DataModelStart>| CanLL_RxFullProcessPendings
; ..\component\Can\Implementation\Can.c	  4933  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4934  # from CanHL_RxFullCanPolling #
; ..\component\Can\Implementation\Can.c	  4935  RxFullCANSupport, RxPolling
; ..\component\Can\Implementation\Can.c	  4936  Relation:
; ..\component\Can\Implementation\Can.c	  4937  OneChOpt
; ..\component\Can\Implementation\Can.c	  4938  ChannelAmount
; ..\component\Can\Implementation\Can.c	  4939  RxFullAmount
; ..\component\Can\Implementation\Can.c	  4940  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4941  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4942  Constrain:
; ..\component\Can\Implementation\Can.c	  4943  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  4944  */
; ..\component\Can\Implementation\Can.c	  4945  /*!
; ..\component\Can\Implementation\Can.c	  4946  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  4947   *
; ..\component\Can\Implementation\Can.c	  4948   *
; ..\component\Can\Implementation\Can.c	  4949   *
; ..\component\Can\Implementation\Can.c	  4950  */
; ..\component\Can\Implementation\Can.c	  4951  /* CODE CATEGORY 2 START */
; ..\component\Can\Implementation\Can.c	  4952  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_RxFullProcessPendings(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST CanTaskParaStructPtr taskPara) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  4953  {
; ..\component\Can\Implementation\Can.c	  4954    vuint32 ndfPos, shiftVal, ndata;
; ..\component\Can\Implementation\Can.c	  4955  
; ..\component\Can\Implementation\Can.c	  4956    /* #10 calculate the corresponding Tx Buffer */
; ..\component\Can\Implementation\Can.c	  4957    ndfPos = (vuint32)taskPara->hwObjHandle; 
; ..\component\Can\Implementation\Can.c	  4958    if(ndfPos >= 32u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  4959    {
; ..\component\Can\Implementation\Can.c	  4960      ndata = Cn->NDATA[1]; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_106 */
; ..\component\Can\Implementation\Can.c	  4961      ndfPos -= 32u;
; ..\component\Can\Implementation\Can.c	  4962    }
; ..\component\Can\Implementation\Can.c	  4963    else
; ..\component\Can\Implementation\Can.c	  4964    {
; ..\component\Can\Implementation\Can.c	  4965      ndata = Cn->NDATA[0]; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_106 */
; ..\component\Can\Implementation\Can.c	  4966    }
; ..\component\Can\Implementation\Can.c	  4967  
; ..\component\Can\Implementation\Can.c	  4968    shiftVal = (vuint32)(0x00000001UL << ndfPos);
; ..\component\Can\Implementation\Can.c	  4969  
; ..\component\Can\Implementation\Can.c	  4970    /* #20 call the reception handling for the mailbox which received a new message */
; ..\component\Can\Implementation\Can.c	  4971    if( (ndata & shiftVal) != 0u)
; ..\component\Can\Implementation\Can.c	  4972    {
; ..\component\Can\Implementation\Can.c	  4973      /* While an Rx Buffers NDF is set the belonging ID Filter will not match, causing the acceptance filtering to continue. 
; ..\component\Can\Implementation\Can.c	  4974         Following ID Filters may cause the received message to be stored into another Rx Buffer or into an Rx FIFO or the message may be rejected. */
; ..\component\Can\Implementation\Can.c	  4975      CanHL_FullCanMsgReceivedPolling(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST (taskPara->mailboxHandle), (taskPara->hwObjHandle));
; ..\component\Can\Implementation\Can.c	  4976    }
; ..\component\Can\Implementation\Can.c	  4977  }
; ..\component\Can\Implementation\Can.c	  4978  /* CODE CATEGORY 2 END */
; ..\component\Can\Implementation\Can.c	  4979  # endif /* C_ENABLE_RX_FULLCAN_POLLING */
; ..\component\Can\Implementation\Can.c	  4980  #endif /* C_ENABLE_RX_FULLCAN_OBJECTS */
; ..\component\Can\Implementation\Can.c	  4981  
; ..\component\Can\Implementation\Can.c	  4982  
; ..\component\Can\Implementation\Can.c	  4983  
; ..\component\Can\Implementation\Can.c	  4984  
; ..\component\Can\Implementation\Can.c	  4985  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  4986   *  CanLL_ErrorHandlingBegin
; ..\component\Can\Implementation\Can.c	  4987   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  4988  /*
; ..\component\Can\Implementation\Can.c	  4989  |<DataModelStart>| CanLL_ErrorHandlingBegin
; ..\component\Can\Implementation\Can.c	  4990  Relation_Context:
; ..\component\Can\Implementation\Can.c	  4991  # from CanHL_ErrorHandling() #
; ..\component\Can\Implementation\Can.c	  4992  StatusPolling
; ..\component\Can\Implementation\Can.c	  4993  Relation:
; ..\component\Can\Implementation\Can.c	  4994  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  4995  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  4996  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  4997  Constrain:
; ..\component\Can\Implementation\Can.c	  4998  # CAN_MCAN_REVISION #
; ..\component\Can\Implementation\Can.c	  4999  # CAN_BOSCH_ERRATUM_011 #
; ..\component\Can\Implementation\Can.c	  5000  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5001  */
; ..\component\Can\Implementation\Can.c	  5002  /*!
; ..\component\Can\Implementation\Can.c	  5003  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5004   *
; ..\component\Can\Implementation\Can.c	  5005   *
; ..\component\Can\Implementation\Can.c	  5006  */
; ..\component\Can\Implementation\Can.c	  5007  /* CODE CATEGORY 2 START */
; ..\component\Can\Implementation\Can.c	  5008  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_ErrorHandlingBegin(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  5009  {
; ..\component\Can\Implementation\Can.c	  5010    /* ***
; ..\component\Can\Implementation\Can.c	  5011    If the CAN protocol controller has detected an error condition (e.g. CRC error), the message is 
; ..\component\Can\Implementation\Can.c	  5012    discarded with the following impact on the affected Rx Buffer or Rx FIFO:
; ..\component\Can\Implementation\Can.c	  5013    Rx Buffer: NDF of matching Rx Buffer is NOT set, but Rx Buffer (partly) overwritten with received data. 
; ..\component\Can\Implementation\Can.c	  5014    Rx FIFO:   Put index of FIFO is NOT updated,  but FIFO element (partly) overwritten with received data. 
; ..\component\Can\Implementation\Can.c	  5015  
; ..\component\Can\Implementation\Can.c	  5016    If the matching Rx FIFO is operated in overwrite mode, the boundary conditions have to be considered
; ..\component\Can\Implementation\Can.c	  5017    It might happen that a received message is written to the Message RAM (put index) while the CPU is 
; ..\component\Can\Implementation\Can.c	  5018    reading from the Message RAM (get index). 
; ..\component\Can\Implementation\Can.c	  5019    In this case inconsistent data may be read from the FIFO element.
; ..\component\Can\Implementation\Can.c	  5020    For error type see PSR.LEC respectively PSR.FLEC.
; ..\component\Can\Implementation\Can.c	  5021    *** */
; ..\component\Can\Implementation\Can.c	  5022  #if ( CAN_BOSCH_ERRATUM_011 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	  5023    if((Cn->IR & kCanIR_MRAF) != 0)        /* COV_CAN_MCAN_NOT_SUPPORTED */
; ..\component\Can\Implementation\Can.c	  5024    {  /* IR.MRAF is erroneously set during frame reception while the M_CAN is in Error Passive state and 
; ..\component\Can\Implementation\Can.c	  5025          the Receive Error Counter has the value ECR.REC = 127.
; ..\component\Can\Implementation\Can.c	  5026          Workaround:
; ..\component\Can\Implementation\Can.c	  5027          The Message RAM Access Failure routine needs to check whether ECR.RP = '1' 
; ..\component\Can\Implementation\Can.c	  5028          (REC has reached the error passive level of 128) and ECR.REC = 127. 
; ..\component\Can\Implementation\Can.c	  5029          In this case reset IR.MRAF, no further action required. */
; ..\component\Can\Implementation\Can.c	  5030      /* #10 clear erroneous interrupt flag (see MCAN Erratum #11) */
; ..\component\Can\Implementation\Can.c	  5031      if( ((Cn->ECR & kCanECR_RP) != 0) && (((Cn->ECR & kCanECR_REC) >> 8) == 127) ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  5032      {
; ..\component\Can\Implementation\Can.c	  5033        Cn->IR = kCanIR_MRAF;   /* SBSW_CAN_LL_100 */    /* reset and forget */
; ..\component\Can\Implementation\Can.c	  5034      }
; ..\component\Can\Implementation\Can.c	  5035    }
; ..\component\Can\Implementation\Can.c	  5036  #endif
; ..\component\Can\Implementation\Can.c	  5037  #if ( CAN_BOSCH_ERRATUM_011 == STD_OFF )  /* COV_CAN_HW_SPECIFIC_FUNCTIONALITY */
; ..\component\Can\Implementation\Can.c	  5038    CAN_CHANNEL_DUMMY_STATEMENT;  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  5039  #endif
; ..\component\Can\Implementation\Can.c	  5040  }
; ..\component\Can\Implementation\Can.c	  5041  /* CODE CATEGORY 2 END */
; ..\component\Can\Implementation\Can.c	  5042  
; ..\component\Can\Implementation\Can.c	  5043  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  5044   *  CanLL_BusOffOccured
; ..\component\Can\Implementation\Can.c	  5045   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  5046  /*
; ..\component\Can\Implementation\Can.c	  5047  |<DataModelStart>| CanLL_BusOffOccured
; ..\component\Can\Implementation\Can.c	  5048  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5049  # from CanHL_ErrorHandling() #
; ..\component\Can\Implementation\Can.c	  5050  StatusPolling
; ..\component\Can\Implementation\Can.c	  5051  Relation:
; ..\component\Can\Implementation\Can.c	  5052  OneChOpt
; ..\component\Can\Implementation\Can.c	  5053  ChannelAmount
; ..\component\Can\Implementation\Can.c	  5054  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5055  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5056  Constrain:
; ..\component\Can\Implementation\Can.c	  5057  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5058  */
; ..\component\Can\Implementation\Can.c	  5059  /*!
; ..\component\Can\Implementation\Can.c	  5060  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5061   *
; ..\component\Can\Implementation\Can.c	  5062   *
; ..\component\Can\Implementation\Can.c	  5063  */
; ..\component\Can\Implementation\Can.c	  5064  /* CODE CATEGORY 2 START */
; ..\component\Can\Implementation\Can.c	  5065  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_BusOffOccured(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  5066  {
; ..\component\Can\Implementation\Can.c	  5067    vuint8 retVal = kCanFalse;
; ..\component\Can\Implementation\Can.c	  5068    /* #10 check if a busoff occurred */
; ..\component\Can\Implementation\Can.c	  5069    if(CanErrorHandlingBusOff(CAN_HW_CHANNEL_CANPARA_ONLY) == kCanOk) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  5070    {
; ..\component\Can\Implementation\Can.c	  5071      retVal = kCanTrue;
; ..\component\Can\Implementation\Can.c	  5072    }
; ..\component\Can\Implementation\Can.c	  5073    return(retVal);
; ..\component\Can\Implementation\Can.c	  5074  }
; ..\component\Can\Implementation\Can.c	  5075  /* CODE CATEGORY 2 END */
; ..\component\Can\Implementation\Can.c	  5076  
; ..\component\Can\Implementation\Can.c	  5077  #if defined( C_HL_ENABLE_OVERRUN_IN_STATUS )    /* COV_CAN_OVERRUN_IN_STATUS */
; ..\component\Can\Implementation\Can.c	  5078  # if defined( C_ENABLE_OVERRUN ) && defined(C_ENABLE_RX_BASICCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  5079  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  5080   *  CanLL_RxBasicCanOverrun
; ..\component\Can\Implementation\Can.c	  5081   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  5082  /*
; ..\component\Can\Implementation\Can.c	  5083  |<DataModelStart>| CanLL_RxBasicCanOverrun
; ..\component\Can\Implementation\Can.c	  5084  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5085  # from CanHL_ErrorHandling() #
; ..\component\Can\Implementation\Can.c	  5086  StatusPolling, Overrun, RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  5087  Relation:
; ..\component\Can\Implementation\Can.c	  5088  OneChOpt
; ..\component\Can\Implementation\Can.c	  5089  MultipleBasicCanObjects, ChannelAmount
; ..\component\Can\Implementation\Can.c	  5090  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5091  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5092  Constrain:
; ..\component\Can\Implementation\Can.c	  5093  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5094  */
; ..\component\Can\Implementation\Can.c	  5095  /*!
; ..\component\Can\Implementation\Can.c	  5096  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5097   *
; ..\component\Can\Implementation\Can.c	  5098   *
; ..\component\Can\Implementation\Can.c	  5099   *
; ..\component\Can\Implementation\Can.c	  5100  */
; ..\component\Can\Implementation\Can.c	  5101  /* CODE CATEGORY 2 START */
; ..\component\Can\Implementation\Can.c	  5102  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_RxBasicCanOverrun(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  5103  {
; ..\component\Can\Implementation\Can.c	  5104    vuint8 ret_val = kCanFalse;
; ..\component\Can\Implementation\Can.c	  5105  
; ..\component\Can\Implementation\Can.c	  5106    /* #10 check if a receive FIFO buffer overrun occurred */
; ..\component\Can\Implementation\Can.c	  5107  #  if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	  5108    if( ((Cn->IR) & ((vuint32)(kCanIR_RF0L | kCanIR_RF1L)) ) != 0UL) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5109  #  else
; ..\component\Can\Implementation\Can.c	  5110    if( ((Cn->IR) & (kCanIR_RF0L) ) != 0UL)               /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5111  #  endif
; ..\component\Can\Implementation\Can.c	  5112    {
; ..\component\Can\Implementation\Can.c	  5113      /* #20 clear the overrun (and full) flag */
; ..\component\Can\Implementation\Can.c	  5114  #  if defined(C_ENABLE_TRICORE_ERRATUM_AI_H001)
; ..\component\Can\Implementation\Can.c	  5115      CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANPARA_FIRST (vuint32)(kCanIR_RF0L | kCanIR_RF0F | kCanIR_RF1L | kCanIR_RF1F));
; ..\component\Can\Implementation\Can.c	  5116  #  else
; ..\component\Can\Implementation\Can.c	  5117      Cn->IR = (vuint32)(kCanIR_RF0L | kCanIR_RF0F | kCanIR_RF1L | kCanIR_RF1F);   /* SBSW_CAN_LL_100 */  /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5118  #  endif
; ..\component\Can\Implementation\Can.c	  5119      ret_val = kCanTrue;
; ..\component\Can\Implementation\Can.c	  5120    }
; ..\component\Can\Implementation\Can.c	  5121    return(ret_val);
; ..\component\Can\Implementation\Can.c	  5122  }
; ..\component\Can\Implementation\Can.c	  5123  /* CODE CATEGORY 2 END */
; ..\component\Can\Implementation\Can.c	  5124  # endif
; ..\component\Can\Implementation\Can.c	  5125  
; ..\component\Can\Implementation\Can.c	  5126  #endif /* C_HL_ENABLE_OVERRUN_IN_STATUS */
; ..\component\Can\Implementation\Can.c	  5127  
; ..\component\Can\Implementation\Can.c	  5128  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  5129   *  CanLL_ErrorHandlingEnd
; ..\component\Can\Implementation\Can.c	  5130   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  5131  /*
; ..\component\Can\Implementation\Can.c	  5132  |<DataModelStart>| CanLL_ErrorHandlingEnd
; ..\component\Can\Implementation\Can.c	  5133  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5134  # from CanHL_ErrorHandling() #
; ..\component\Can\Implementation\Can.c	  5135  StatusPolling
; ..\component\Can\Implementation\Can.c	  5136  Relation:
; ..\component\Can\Implementation\Can.c	  5137  OneChOpt
; ..\component\Can\Implementation\Can.c	  5138  MultipleBasicCanObjects, ChannelAmount
; ..\component\Can\Implementation\Can.c	  5139  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5140  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5141  Constrain:
; ..\component\Can\Implementation\Can.c	  5142  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5143  */
; ..\component\Can\Implementation\Can.c	  5144  /*!
; ..\component\Can\Implementation\Can.c	  5145  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5146   *
; ..\component\Can\Implementation\Can.c	  5147   *
; ..\component\Can\Implementation\Can.c	  5148  */
; ..\component\Can\Implementation\Can.c	  5149  /* CODE CATEGORY 2 START */
; ..\component\Can\Implementation\Can.c	  5150  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_ErrorHandlingEnd(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  5151  {
; ..\component\Can\Implementation\Can.c	  5152  #if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	  5153    if( ((Cn->IR) & (kCanIR_RF0L | kCanIR_RF1L) ) != 0UL) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5154  #else
; ..\component\Can\Implementation\Can.c	  5155    if( ((Cn->IR) & (kCanIR_RF0L) ) != 0UL)               /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5156  #endif
; ..\component\Can\Implementation\Can.c	  5157    {
; ..\component\Can\Implementation\Can.c	  5158      /* #10 clear overrun (and full) flag */
; ..\component\Can\Implementation\Can.c	  5159  #if defined(C_ENABLE_TRICORE_ERRATUM_AI_H001)
; ..\component\Can\Implementation\Can.c	  5160      CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANPARA_FIRST (vuint32)(kCanIR_RF0L | kCanIR_RF0F | kCanIR_RF1L | kCanIR_RF1F));
; ..\component\Can\Implementation\Can.c	  5161  #else
; ..\component\Can\Implementation\Can.c	  5162      Cn->IR = (vuint32)(kCanIR_RF0L | kCanIR_RF0F | kCanIR_RF1L | kCanIR_RF1F);   /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5163  #endif
; ..\component\Can\Implementation\Can.c	  5164    }
; ..\component\Can\Implementation\Can.c	  5165  }
; ..\component\Can\Implementation\Can.c	  5166  /* CODE CATEGORY 2 END */
; ..\component\Can\Implementation\Can.c	  5167  
; ..\component\Can\Implementation\Can.c	  5168  #if defined( C_ENABLE_EXTENDED_STATUS )
; ..\component\Can\Implementation\Can.c	  5169  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  5170   *  CanLL_GetStatusBegin
; ..\component\Can\Implementation\Can.c	  5171   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  5172  /*
; ..\component\Can\Implementation\Can.c	  5173  |<DataModelStart>| CanLL_GetStatusBegin
; ..\component\Can\Implementation\Can.c	  5174  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5175  # from Can_GetStatus
; ..\component\Can\Implementation\Can.c	  5176  CanGetStatus
; ..\component\Can\Implementation\Can.c	  5177  Relation:
; ..\component\Can\Implementation\Can.c	  5178  OneChOpt,
; ..\component\Can\Implementation\Can.c	  5179  ChannelAmount
; ..\component\Can\Implementation\Can.c	  5180  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5181  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5182  Constrain:
; ..\component\Can\Implementation\Can.c	  5183  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5184  */
; ..\component\Can\Implementation\Can.c	  5185  /*!
; ..\component\Can\Implementation\Can.c	  5186  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5187   *
; ..\component\Can\Implementation\Can.c	  5188   *
; ..\component\Can\Implementation\Can.c	  5189  */
; ..\component\Can\Implementation\Can.c	  5190  /* CODE CATEGORY 3 START */
; ..\component\Can\Implementation\Can.c	  5191  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_GetStatusBegin(CAN_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  5192  {
; ..\component\Can\Implementation\Can.c	  5193    /* #10 no actions required */
; ..\component\Can\Implementation\Can.c	  5194    CAN_CHANNEL_DUMMY_STATEMENT;  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  5195  }
; ..\component\Can\Implementation\Can.c	  5196  /* CODE CATEGORY 3 END */
; ..\component\Can\Implementation\Can.c	  5197  #endif
; ..\component\Can\Implementation\Can.c	  5198  
; ..\component\Can\Implementation\Can.c	  5199  
; ..\component\Can\Implementation\Can.c	  5200  
; ..\component\Can\Implementation\Can.c	  5201  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  5202   *  CanLL_ModeTransition
; ..\component\Can\Implementation\Can.c	  5203   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  5204  /*
; ..\component\Can\Implementation\Can.c	  5205  |<DataModelStart>| CanLL_ModeTransition
; ..\component\Can\Implementation\Can.c	  5206  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5207  # from CanHL_ModeTransition() #
; ..\component\Can\Implementation\Can.c	  5208  Wakeup, OneChOpt, HardwareLoopCheck, ChannelAmount
; ..\component\Can\Implementation\Can.c	  5209  RamCheck, OneChOpt, HardwareLoopCheck, ChannelAmount
; ..\component\Can\Implementation\Can.c	  5210  # from Can_Mainfunction_Mode() #
; ..\component\Can\Implementation\Can.c	  5211  ChannelAmount
; ..\component\Can\Implementation\Can.c	  5212  Relation:
; ..\component\Can\Implementation\Can.c	  5213  OneChOpt
; ..\component\Can\Implementation\Can.c	  5214  SilentMode, ChannelAmount
; ..\component\Can\Implementation\Can.c	  5215  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5216  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5217  Constrain:
; ..\component\Can\Implementation\Can.c	  5218  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5219  */
; ..\component\Can\Implementation\Can.c	  5220  /*!
; ..\component\Can\Implementation\Can.c	  5221   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5222   *
; ..\component\Can\Implementation\Can.c	  5223   *
; ..\component\Can\Implementation\Can.c	  5224   *
; ..\component\Can\Implementation\Can.c	  5225   *
; ..\component\Can\Implementation\Can.c	  5226   *
; ..\component\Can\Implementation\Can.c	  5227   *
; ..\component\Can\Implementation\Can.c	  5228   *
; ..\component\Can\Implementation\Can.c	  5229   */
; ..\component\Can\Implementation\Can.c	  5230  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  5231  V_DEF_FUNC(CAN_STATIC, vuint8, STATIC_CODE) CanLL_ModeTransition(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_FIRST vuint8 mode, vuint8 busOffRecovery, vuint8 ramCheck)
; ..\component\Can\Implementation\Can.c	  5232  {
; ..\component\Can\Implementation\Can.c	  5233    vuint8 ret = kCanFailed;
; ..\component\Can\Implementation\Can.c	  5234  
; ..\component\Can\Implementation\Can.c	  5235    switch(mode)
; ..\component\Can\Implementation\Can.c	  5236    {
; ..\component\Can\Implementation\Can.c	  5237      case kCanModeStartReinit:      /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  5238      case kCanModeResetBusOffEnd:   /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  5239        /* #10 START (reinit BusOffEnd) request  */
; ..\component\Can\Implementation\Can.c	  5240        /* perform BusOffEnd handling (delete pending BusOff), goto START  */
; ..\component\Can\Implementation\Can.c	  5241        /* #20 START (reinit) request */
; ..\component\Can\Implementation\Can.c	  5242        /* Reinit means that a call of CanHL_ReInit() should be included (after set to init mode) before the transition to final target mode */
; ..\component\Can\Implementation\Can.c	  5243        if( (Can_GetCanPrevMode(canHwChannel) == mode) && (Can_GetCanLastState(canHwChannel) == kCanRequested) ) /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  5244        { /* repeat requested mode change without repeating reinit */
; ..\component\Can\Implementation\Can.c	  5245          ret = CanLL_StartRequest(CAN_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  5246        }
; ..\component\Can\Implementation\Can.c	  5247        else
; ..\component\Can\Implementation\Can.c	  5248        {
; ..\component\Can\Implementation\Can.c	  5249          ret = CanHL_ReInit(CAN_CHANNEL_CANPARA_FIRST ramCheck);
; ..\component\Can\Implementation\Can.c	  5250          if(ret == kCanOk) /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  5251          {
; ..\component\Can\Implementation\Can.c	  5252            ret = CanLL_StartRequest(CAN_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  5253          }
; ..\component\Can\Implementation\Can.c	  5254        }
; ..\component\Can\Implementation\Can.c	  5255        break;
; ..\component\Can\Implementation\Can.c	  5256  
; ..\component\Can\Implementation\Can.c	  5257      case kCanModeStart:   /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  5258        /* #30 START request */
; ..\component\Can\Implementation\Can.c	  5259        /* if in stop mode, otherwise first go to stop mode */
; ..\component\Can\Implementation\Can.c	  5260        ret = CanLL_StartRequest(CAN_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  5261        break;
; ..\component\Can\Implementation\Can.c	  5262  
; ..\component\Can\Implementation\Can.c	  5263  #if defined(C_ENABLE_SILENT_MODE) 
; ..\component\Can\Implementation\Can.c	  5264      case kCanModeSilent:
; ..\component\Can\Implementation\Can.c	  5265        /* #40 START SILENT request */
; ..\component\Can\Implementation\Can.c	  5266        /* if in stop mode, otherwise first go to stop mode */
; ..\component\Can\Implementation\Can.c	  5267        if( (Can_GetCanPrevMode(canHwChannel) == mode) && (Can_GetCanLastState(canHwChannel) == kCanRequested) ) /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  5268        { /* repeat requested mode change without repeating reinit */
; ..\component\Can\Implementation\Can.c	  5269          ret = CanLL_StartSilentRequest(CAN_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  5270        }
; ..\component\Can\Implementation\Can.c	  5271        else
; ..\component\Can\Implementation\Can.c	  5272        {
; ..\component\Can\Implementation\Can.c	  5273          ret = CanHL_ReInit(CAN_CHANNEL_CANPARA_FIRST ramCheck);
; ..\component\Can\Implementation\Can.c	  5274          if(ret == kCanOk) /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  5275          {
; ..\component\Can\Implementation\Can.c	  5276            ret = CanLL_StartSilentRequest(CAN_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  5277          }
; ..\component\Can\Implementation\Can.c	  5278        }
; ..\component\Can\Implementation\Can.c	  5279        break;
; ..\component\Can\Implementation\Can.c	  5280  #endif
; ..\component\Can\Implementation\Can.c	  5281  
; ..\component\Can\Implementation\Can.c	  5282      case kCanModeResetBusOffStart:   /* ASR: kCanModeResetBusOffEnd or kCanModeResetBusOffStart should do a Reinit (short is ok, ASR: with CanHL_CleanUpSendState()) */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  5283      case kCanModeStopReinit:
; ..\component\Can\Implementation\Can.c	  5284          /* #50 STOP (reinit BusOffStart) request */
; ..\component\Can\Implementation\Can.c	  5285          if( (Can_GetCanPrevMode(canHwChannel) == mode) && (Can_GetCanLastState(canHwChannel) == kCanRequested) ) /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  5286          { /* repeat requested mode change without repeating reinit */
; ..\component\Can\Implementation\Can.c	  5287            ret = CanLL_StopRequest(CAN_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  5288          }
; ..\component\Can\Implementation\Can.c	  5289          else
; ..\component\Can\Implementation\Can.c	  5290          {
; ..\component\Can\Implementation\Can.c	  5291            ret = CanHL_ReInit(CAN_CHANNEL_CANPARA_FIRST ramCheck);
; ..\component\Can\Implementation\Can.c	  5292            if(ret == kCanOk) /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  5293            {
; ..\component\Can\Implementation\Can.c	  5294              ret = CanLL_StopRequest(CAN_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  5295            }
; ..\component\Can\Implementation\Can.c	  5296          }
; ..\component\Can\Implementation\Can.c	  5297          if(ret == kCanOk) { /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  5298            ApplCanClockStop(CAN_HW_CHANNEL_CANPARA_ONLY); /* offer the application to turn off the clocks (CAN, Host) */
; ..\component\Can\Implementation\Can.c	  5299          }
; ..\component\Can\Implementation\Can.c	  5300          CanHL_CleanUpSendState(CAN_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  5301        break;
; ..\component\Can\Implementation\Can.c	  5302  
; ..\component\Can\Implementation\Can.c	  5303      case kCanModeStopReinitFast:     /* distinguish for fast if applicable */
; ..\component\Can\Implementation\Can.c	  5304          /* #60 STOP FAST request */
; ..\component\Can\Implementation\Can.c	  5305          ret = CanLL_StopRequest(CAN_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  5306          if(ret == kCanOk) { /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  5307            CanLL_StopReinit(CAN_HW_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  5308            ApplCanClockStop(CAN_HW_CHANNEL_CANPARA_ONLY); /* offer the application to turn off the clocks (CAN, Host) */
; ..\component\Can\Implementation\Can.c	  5309            CanHL_CleanUpSendState(CAN_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  5310          }
; ..\component\Can\Implementation\Can.c	  5311        break;
; ..\component\Can\Implementation\Can.c	  5312  
; ..\component\Can\Implementation\Can.c	  5313      default:
; ..\component\Can\Implementation\Can.c	  5314        /* ret is kCanFailed */
; ..\component\Can\Implementation\Can.c	  5315        break;
; ..\component\Can\Implementation\Can.c	  5316    }
; ..\component\Can\Implementation\Can.c	  5317    
; ..\component\Can\Implementation\Can.c	  5318    Can_GetCanPrevMode(canHwChannel) = mode; /* SBSW_CAN_LL_112 */ 
; ..\component\Can\Implementation\Can.c	  5319    Can_GetCanLastState(canHwChannel) = ret; /* SBSW_CAN_LL_112 */ 
; ..\component\Can\Implementation\Can.c	  5320    
; ..\component\Can\Implementation\Can.c	  5321    CAN_DUMMY_STATEMENT(busOffRecovery);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  5322    return ret;
; ..\component\Can\Implementation\Can.c	  5323  }  /* PRQA S 6030 */  /* MD_MSR_STCYC */
; ..\component\Can\Implementation\Can.c	  5324  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  5325  
; ..\component\Can\Implementation\Can.c	  5326  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  5327   *  CanLL_StopReinit
; ..\component\Can\Implementation\Can.c	  5328   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  5329  /*
; ..\component\Can\Implementation\Can.c	  5330  |<DataModelStart>| CanLL_StopReinit
; ..\component\Can\Implementation\Can.c	  5331  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5332  # from CanLL_ModeTransition() #
; ..\component\Can\Implementation\Can.c	  5333  OneChOpt, HardwareLoopCheck, ChannelAmount
; ..\component\Can\Implementation\Can.c	  5334  Relation:
; ..\component\Can\Implementation\Can.c	  5335  OneChOpt
; ..\component\Can\Implementation\Can.c	  5336  ChannelAmount, RamCheck
; ..\component\Can\Implementation\Can.c	  5337  RxFullCANSupport, RxBasicCANSupport, MultipleBasicCanObjects, CanFdSupport
; ..\component\Can\Implementation\Can.c	  5338  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5339  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5340  Constrain:
; ..\component\Can\Implementation\Can.c	  5341  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5342  */
; ..\component\Can\Implementation\Can.c	  5343  /*!
; ..\component\Can\Implementation\Can.c	  5344   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5345   *
; ..\component\Can\Implementation\Can.c	  5346   *
; ..\component\Can\Implementation\Can.c	  5347   *
; ..\component\Can\Implementation\Can.c	  5348   *
; ..\component\Can\Implementation\Can.c	  5349   *
; ..\component\Can\Implementation\Can.c	  5350   *
; ..\component\Can\Implementation\Can.c	  5351   *
; ..\component\Can\Implementation\Can.c	  5352   */
; ..\component\Can\Implementation\Can.c	  5353  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  5354  /* PRQA S 0303 QAC_Can_0303_StopReinit */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5355  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_StopReinit(CAN_CHANNEL_AND_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  5356  {
; ..\component\Can\Implementation\Can.c	  5357    vuint32 tmpECR; /* PRQA S 3203 */ /* MD_Can_3203_LL */
; ..\component\Can\Implementation\Can.c	  5358  
; ..\component\Can\Implementation\Can.c	  5359    /* #10 reset FullCAN flags */
; ..\component\Can\Implementation\Can.c	  5360  #if defined( C_ENABLE_RX_FULLCAN_OBJECTS ) 
; ..\component\Can\Implementation\Can.c	  5361    Cn->NDATA[0] = kCan_ALL_ONE;   /* SBSW_CAN_LL_100 */   
; ..\component\Can\Implementation\Can.c	  5362    Cn->NDATA[1] = kCan_ALL_ONE;   /* SBSW_CAN_LL_100 */   
; ..\component\Can\Implementation\Can.c	  5363  #endif
; ..\component\Can\Implementation\Can.c	  5364  
; ..\component\Can\Implementation\Can.c	  5365    /* CAN error logging is reset by read access to ECR[CEL] */
; ..\component\Can\Implementation\Can.c	  5366    /* #20 reset error counter */
; ..\component\Can\Implementation\Can.c	  5367    tmpECR = Cn->ECR; /* CAN error logging is reset by read access to ECR[CEL] */  /* PRQA S 3198,3199 */ /* MD_MSR_14.2 */
; ..\component\Can\Implementation\Can.c	  5368    CAN_DUMMY_STATEMENT(tmpECR);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  5369  
; ..\component\Can\Implementation\Can.c	  5370    /* CCCR[CCE] is automatically reset when CCCR[INIT] is reset */
; ..\component\Can\Implementation\Can.c	  5371    Cn->CCCR |= kCanCCCR_CCE;             /* SBSW_CAN_LL_100 */   
; ..\component\Can\Implementation\Can.c	  5372  
; ..\component\Can\Implementation\Can.c	  5373    /* #30 reset transmit requests */
; ..\component\Can\Implementation\Can.c	  5374    Can_GetCanTXBRP(canHwChannel)   = 0;  /* SBSW_CAN_LL_112 */ 
; ..\component\Can\Implementation\Can.c	  5375    
; ..\component\Can\Implementation\Can.c	  5376    /* If there are any pending Tx requests. */
; ..\component\Can\Implementation\Can.c	  5377    if ((Cn->TXBRP)!=0UL) /* COV_CAN_PENDING_TX_REQUEST */
; ..\component\Can\Implementation\Can.c	  5378    {
; ..\component\Can\Implementation\Can.c	  5379      Cn->TXBCR = (vuint32)(Cn->TXBRP); /* SBSW_CAN_LL_100 */ /* Cancel pending tx requests */
; ..\component\Can\Implementation\Can.c	  5380    }
; ..\component\Can\Implementation\Can.c	  5381  
; ..\component\Can\Implementation\Can.c	  5382    /* #40 reset CAN FD bits */
; ..\component\Can\Implementation\Can.c	  5383  #if defined(C_ENABLE_CAN_FD_USED)
; ..\component\Can\Implementation\Can.c	  5384    if(Can_GetInitObjectFdBrsConfig(Can_GetLastInitObject(channel)) != CAN_NONE)
; ..\component\Can\Implementation\Can.c	  5385    {
; ..\component\Can\Implementation\Can.c	  5386      if(Can_GetInitObjectFdBrsConfig(Can_GetLastInitObject(channel)) == CAN_FD_RXTX)
; ..\component\Can\Implementation\Can.c	  5387      { /* CAN_FD_RXTX */
; ..\component\Can\Implementation\Can.c	  5388  # if ( CAN_MCAN_REVISION >= 0x0310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  5389        Cn->CCCR |= (vuint32)(kCanCCCR_FDOE | kCanCCCR_BRSE);   /* SBSW_CAN_LL_100 */   /* FD operation, BRS enabled */
; ..\component\Can\Implementation\Can.c	  5390  # else
; ..\component\Can\Implementation\Can.c	  5391        Cn->CCCR &= (vuint32)(~(kCanCCCR_CME_CAN20));           /* SBSW_CAN_LL_100 */   /* reset CME bits */
; ..\component\Can\Implementation\Can.c	  5392        Cn->CCCR |= kCanCCCR_CME_LONG_FAST;                     /* SBSW_CAN_LL_100 */   /* enable LONG and FAST */
; ..\component\Can\Implementation\Can.c	  5393  # endif
; ..\component\Can\Implementation\Can.c	  5394      }
; ..\component\Can\Implementation\Can.c	  5395      else
; ..\component\Can\Implementation\Can.c	  5396      { /* CAN_FD_RXONLY */
; ..\component\Can\Implementation\Can.c	  5397  # if ( CAN_MCAN_REVISION >= 0x0310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  5398        Cn->CCCR &= (vuint32)(~(kCanCCCR_FDOE | kCanCCCR_BRSE)); /* SBSW_CAN_LL_100 */  /* reset FD bits */
; ..\component\Can\Implementation\Can.c	  5399        Cn->CCCR |= (vuint32)(kCanCCCR_FDOE);                    /* SBSW_CAN_LL_100 */  /* FD operation, BRS disabled */
; ..\component\Can\Implementation\Can.c	  5400  # else
; ..\component\Can\Implementation\Can.c	  5401        Cn->CCCR &= (vuint32)(~(kCanCCCR_CME_CAN20));   /* SBSW_CAN_LL_100 */  /* reset CME bits */
; ..\component\Can\Implementation\Can.c	  5402        Cn->CCCR |= kCanCCCR_CME_LONG;                  /* SBSW_CAN_LL_100 */  /* enable LONG  */
; ..\component\Can\Implementation\Can.c	  5403  # endif
; ..\component\Can\Implementation\Can.c	  5404      }
; ..\component\Can\Implementation\Can.c	  5405    }
; ..\component\Can\Implementation\Can.c	  5406    else
; ..\component\Can\Implementation\Can.c	  5407    { /* CAN_NONE */
; ..\component\Can\Implementation\Can.c	  5408  # if ( CAN_MCAN_REVISION >= 0x310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  5409      Cn->CCCR &= (vuint32)(~(kCanCCCR_FDOE | kCanCCCR_BRSE));   /* SBSW_CAN_LL_100 */    /* No FD operation, BRS disabled */
; ..\component\Can\Implementation\Can.c	  5410  # else
; ..\component\Can\Implementation\Can.c	  5411      Cn->CCCR &= (vuint32)(~(kCanCCCR_CME_CAN20));              /* SBSW_CAN_LL_100 */    /* enable NORMAL CAN */
; ..\component\Can\Implementation\Can.c	  5412  # endif
; ..\component\Can\Implementation\Can.c	  5413    }
; ..\component\Can\Implementation\Can.c	  5414  #else
; ..\component\Can\Implementation\Can.c	  5415  # if ( CAN_MCAN_REVISION >= 0x310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  5416      /* FD operation disabled */
; ..\component\Can\Implementation\Can.c	  5417      Cn->CCCR &= (vuint32)(~(kCanCCCR_FDOE | kCanCCCR_BRSE));   /* SBSW_CAN_LL_100 */    /* No FD operation, BRS disabled */
; ..\component\Can\Implementation\Can.c	  5418  # else
; ..\component\Can\Implementation\Can.c	  5419      Cn->CCCR &= (vuint32)(~(kCanCCCR_CME_CAN20));              /* SBSW_CAN_LL_100 */    /* enable NORMAL CAN */
; ..\component\Can\Implementation\Can.c	  5420  # endif
; ..\component\Can\Implementation\Can.c	  5421  #endif
; ..\component\Can\Implementation\Can.c	  5422  
; ..\component\Can\Implementation\Can.c	  5423    /* #50 clear pending FIFO messages */
; ..\component\Can\Implementation\Can.c	  5424    CanLL_ApplCanTimerStart(kCanLoopRxFifo); /* SBSW_CAN_LL_102 */  
; ..\component\Can\Implementation\Can.c	  5425    while( (((Cn->RXF0S).B.FnFL) > 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopRxFifo) != CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  5426    {
; ..\component\Can\Implementation\Can.c	  5427      Cn->RXF0A = Cn->RXF0S.B.FnGI;   /* SBSW_CAN_LL_100 */   
; ..\component\Can\Implementation\Can.c	  5428    }
; ..\component\Can\Implementation\Can.c	  5429    CanLL_ApplCanTimerEnd(kCanLoopRxFifo); /* SBSW_CAN_LL_102 */  
; ..\component\Can\Implementation\Can.c	  5430  #if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	  5431    CanLL_ApplCanTimerStart(kCanLoopRxFifo); /* SBSW_CAN_LL_102 */  
; ..\component\Can\Implementation\Can.c	  5432    while( (((Cn->RXF1S).B.FnFL) > 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopRxFifo) != CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  5433    {
; ..\component\Can\Implementation\Can.c	  5434      Cn->RXF1A = Cn->RXF1S.B.FnGI;   /* SBSW_CAN_LL_100 */   
; ..\component\Can\Implementation\Can.c	  5435    }
; ..\component\Can\Implementation\Can.c	  5436    CanLL_ApplCanTimerEnd(kCanLoopRxFifo); /* SBSW_CAN_LL_102 */  
; ..\component\Can\Implementation\Can.c	  5437  #endif
; ..\component\Can\Implementation\Can.c	  5438  
; ..\component\Can\Implementation\Can.c	  5439    /* #60 delete all pending interrupt requests */
; ..\component\Can\Implementation\Can.c	  5440    Cn->IR = kCanIR_CLEAR_ALL;   /* SBSW_CAN_LL_100 */   
; ..\component\Can\Implementation\Can.c	  5441  }
; ..\component\Can\Implementation\Can.c	  5442  /* PRQA  L:QAC_Can_0303_StopReinit */
; ..\component\Can\Implementation\Can.c	  5443  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  5444  
; ..\component\Can\Implementation\Can.c	  5445  
; ..\component\Can\Implementation\Can.c	  5446  
; ..\component\Can\Implementation\Can.c	  5447  #if defined( C_ENABLE_CAN_CAN_INTERRUPT_CONTROL )   /* COV_CAN_LOCK_ISR_BY_APPL */
; ..\component\Can\Implementation\Can.c	  5448  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  5449   *  CanLL_CanInterruptDisable
; ..\component\Can\Implementation\Can.c	  5450   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  5451  /*
; ..\component\Can\Implementation\Can.c	  5452  |<DataModelStart>| CanLL_CanInterruptDisable
; ..\component\Can\Implementation\Can.c	  5453  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5454  # from Can_DisableControllerInterrupts #
; ..\component\Can\Implementation\Can.c	  5455  IndividualPolling
; ..\component\Can\Implementation\Can.c	  5456  TxPolling
; ..\component\Can\Implementation\Can.c	  5457  RxPolling
; ..\component\Can\Implementation\Can.c	  5458  StatusPolling
; ..\component\Can\Implementation\Can.c	  5459  Relation:
; ..\component\Can\Implementation\Can.c	  5460  IntLock
; ..\component\Can\Implementation\Can.c	  5461  OneChOpt 
; ..\component\Can\Implementation\Can.c	  5462  ChannelAmount, CanInterruptControl, IntLock, RxBasicCANSupport, RxPolling, RxFullCANSupport, TxPolling, IndividualPolling, StatusPolling
; ..\component\Can\Implementation\Can.c	  5463  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5464  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5465  Constrain:
; ..\component\Can\Implementation\Can.c	  5466  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5467  */
; ..\component\Can\Implementation\Can.c	  5468  /*!
; ..\component\Can\Implementation\Can.c	  5469  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5470   *
; ..\component\Can\Implementation\Can.c	  5471   *
; ..\component\Can\Implementation\Can.c	  5472  */
; ..\component\Can\Implementation\Can.c	  5473  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  5474  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_CanInterruptDisable(CAN_HW_CHANNEL_CANTYPE_FIRST tCanLLCanIntOldPtr localInterruptOldFlagPtr)
; ..\component\Can\Implementation\Can.c	  5475  {
; ..\component\Can\Implementation\Can.c	  5476    /* #10 Save old state and disable MCAN interrupts */
; ..\component\Can\Implementation\Can.c	  5477  #  if defined(C_ENABLE_USE_OS_INTERRUPT_CONTROL)  /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  5478    boolean  retval;
; ..\component\Can\Implementation\Can.c	  5479    (void)osIsInterruptSourceEnabled(Can_GetIsrOsId(canHwChannel), &retval); /* SBSW_CAN_LL_121 */
; ..\component\Can\Implementation\Can.c	  5480    (void)osDisableInterruptSource(Can_GetIsrOsId(canHwChannel));
; ..\component\Can\Implementation\Can.c	  5481    *(localInterruptOldFlagPtr) = (vuint32) retval; /* SBSW_CAN_LL_122 */
; ..\component\Can\Implementation\Can.c	  5482  #  else
; ..\component\Can\Implementation\Can.c	  5483    *(localInterruptOldFlagPtr) = (vuint32)(kCanMCMcanSRCR_Mask & CAN_READ_SRN_PROTECTED_REG32(CAN_PROTECTED_AREA_SRN,Can_GetSRN_Address(canHwChannel))); /* PRQA S 0306,0303 */ /* MD_Can_0306_HWaccess_LL,MD_Can_HwAccess */ /* SBSW_CAN_HL16 */ /* SBSW_CAN_LL_119 */
; ..\component\Can\Implementation\Can.c	  5484    CAN_WRITE_SRN_PROTECTED_REG32(CAN_PROTECTED_AREA_SRN,Can_GetSRN_Address(canHwChannel),((*localInterruptOldFlagPtr) & kCanMCMcanDisable_Service_Request) ); /* PRQA S 0306 */ /* MD_Can_0306_HWaccess_LL */ /* SBSW_CAN_LL_119 */ /* SBSW_CAN_LL_123 */
; ..\component\Can\Implementation\Can.c	  5485  #  endif /* C_ENABLE_USE_OS_INTERRUPT_CONTROL */
; ..\component\Can\Implementation\Can.c	  5486  } /* CanLL_CanInterruptDisable */
; ..\component\Can\Implementation\Can.c	  5487  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  5488  
; ..\component\Can\Implementation\Can.c	  5489  /**********************************************************************************************************************
; ..\component\Can\Implementation\Can.c	  5490   *  CanLL_CanInterruptRestore
; ..\component\Can\Implementation\Can.c	  5491   *********************************************************************************************************************/
; ..\component\Can\Implementation\Can.c	  5492  /*
; ..\component\Can\Implementation\Can.c	  5493  |<DataModelStart>| CanLL_CanInterruptRestore
; ..\component\Can\Implementation\Can.c	  5494  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5495  # from Can_EnableControllerInterrupts #
; ..\component\Can\Implementation\Can.c	  5496  IndividualPolling
; ..\component\Can\Implementation\Can.c	  5497  TxPolling
; ..\component\Can\Implementation\Can.c	  5498  RxPolling
; ..\component\Can\Implementation\Can.c	  5499  StatusPolling
; ..\component\Can\Implementation\Can.c	  5500  Relation:
; ..\component\Can\Implementation\Can.c	  5501  OneChOpt
; ..\component\Can\Implementation\Can.c	  5502  ChannelAmount, CanInterruptControl, IntLock, RxBasicCANSupport, RxPolling, RxFullCANSupport, TxPolling, IndividualPolling, StatusPolling
; ..\component\Can\Implementation\Can.c	  5503  IntLock
; ..\component\Can\Implementation\Can.c	  5504  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5505  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5506  Constrain:
; ..\component\Can\Implementation\Can.c	  5507  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5508  */
; ..\component\Can\Implementation\Can.c	  5509  /*!
; ..\component\Can\Implementation\Can.c	  5510  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5511   *
; ..\component\Can\Implementation\Can.c	  5512   *
; ..\component\Can\Implementation\Can.c	  5513  */
; ..\component\Can\Implementation\Can.c	  5514  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  5515  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_CanInterruptRestore(CAN_HW_CHANNEL_CANTYPE_FIRST tCanLLCanIntOld localInterruptOldFlag)
; ..\component\Can\Implementation\Can.c	  5516  {
; ..\component\Can\Implementation\Can.c	  5517  #  if defined(C_ENABLE_USE_OS_INTERRUPT_CONTROL)    /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  5518    if( (vuint32)localInterruptOldFlag == TRUE ) /* COV_CAN_OS_INT_SOURCE */
; ..\component\Can\Implementation\Can.c	  5519    {
; ..\component\Can\Implementation\Can.c	  5520      (void)osEnableInterruptSource(Can_GetIsrOsId(canHwChannel), kCanFalse);
; ..\component\Can\Implementation\Can.c	  5521    }
; ..\component\Can\Implementation\Can.c	  5522  #  else
; ..\component\Can\Implementation\Can.c	  5523    /* #10 restore previous state (before disabling interrupts) */
; ..\component\Can\Implementation\Can.c	  5524    CAN_WRITE_SRN_PROTECTED_REG32(CAN_PROTECTED_AREA_SRN,Can_GetSRN_Address(canHwChannel),(vuint32)(kCanMCMcanSRCR_Mask & (CAN_READ_SRN_PROTECTED_REG32(CAN_PROTECTED_AREA_SRN,Can_GetSRN_Address(canHwChannel)) | localInterruptOldFlag)) ); /* PRQA S 0306 */ /* MD_Can_0306_HWaccess_LL */ /* SBSW_CAN_LL_119 */ /* SBSW_CAN_LL_123 */
; ..\component\Can\Implementation\Can.c	  5525  #  endif /* C_ENABLE_USE_OS_INTERRUPT_CONTROL */
; ..\component\Can\Implementation\Can.c	  5526  } /* CanLL_CanInterruptRestore */
; ..\component\Can\Implementation\Can.c	  5527  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  5528  #endif /*  C_ENABLE_CAN_CAN_INTERRUPT_CONTROL */
; ..\component\Can\Implementation\Can.c	  5529  
; ..\component\Can\Implementation\Can.c	  5530  
; ..\component\Can\Implementation\Can.c	  5531  
; ..\component\Can\Implementation\Can.c	  5532  
; ..\component\Can\Implementation\Can.c	  5533  
; ..\component\Can\Implementation\Can.c	  5534  
; ..\component\Can\Implementation\Can.c	  5535  #if defined( C_ENABLE_CAN_ECC_INIT_SHM ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  5536  /* **************************************************************************
; ..\component\Can\Implementation\Can.c	  5537  | NAME:             Can_EccInit
; ..\component\Can\Implementation\Can.c	  5538  | CALLED BY:        Can_Init()
; ..\component\Can\Implementation\Can.c	  5539  | PRECONDITIONS:    MCAN clock must be available, Interrupts must be disabled
; ..\component\Can\Implementation\Can.c	  5540  | INPUT PARAMETERS: none
; ..\component\Can\Implementation\Can.c	  5541  | RETURN VALUES:    none
; ..\component\Can\Implementation\Can.c	  5542  | DESCRIPTION:      The internal SRAM features Error Correcting Code (ECC). 
; ..\component\Can\Implementation\Can.c	  5543  |                   Because these ECC bits can contain random data after the device is turned on, 
; ..\component\Can\Implementation\Can.c	  5544  |                   all SRAM locations must be initialized before being read by application code. 
; ..\component\Can\Implementation\Can.c	  5545  |                   Initialization is done by executing 64-bit writes to the entire SRAM block. 
; ..\component\Can\Implementation\Can.c	  5546  |                   (The value written does not matter at this point.)
; ..\component\Can\Implementation\Can.c	  5547  ************************************************************************** */
; ..\component\Can\Implementation\Can.c	  5548  /*************************************************************************
; ..\component\Can\Implementation\Can.c	  5549   *  Can_EccInit
; ..\component\Can\Implementation\Can.c	  5550   *********************************************************************** */
; ..\component\Can\Implementation\Can.c	  5551  /*
; ..\component\Can\Implementation\Can.c	  5552  |<DataModelStart>| Can_EccInit
; ..\component\Can\Implementation\Can.c	  5553  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5554  # from Can_Init #
; ..\component\Can\Implementation\Can.c	  5555  Relation:
; ..\component\Can\Implementation\Can.c	  5556  OneChOpt
; ..\component\Can\Implementation\Can.c	  5557  ChannelAmount
; ..\component\Can\Implementation\Can.c	  5558  RxBasicCANSupport, RxPolling, RxFullCANSupport, TxPolling, IndividualPolling, StatusPolling, ChannelAmount
; ..\component\Can\Implementation\Can.c	  5559  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5560  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5561  Constrain:
; ..\component\Can\Implementation\Can.c	  5562  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5563  */
; ..\component\Can\Implementation\Can.c	  5564  /*!
; ..\component\Can\Implementation\Can.c	  5565  * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5566   *
; ..\component\Can\Implementation\Can.c	  5567   *
; ..\component\Can\Implementation\Can.c	  5568   *
; ..\component\Can\Implementation\Can.c	  5569   *
; ..\component\Can\Implementation\Can.c	  5570   *
; ..\component\Can\Implementation\Can.c	  5571   *
; ..\component\Can\Implementation\Can.c	  5572   *
; ..\component\Can\Implementation\Can.c	  5573   *
; ..\component\Can\Implementation\Can.c	  5574   *
; ..\component\Can\Implementation\Can.c	  5575   *
; ..\component\Can\Implementation\Can.c	  5576   *
; ..\component\Can\Implementation\Can.c	  5577   *
; ..\component\Can\Implementation\Can.c	  5578   *
; ..\component\Can\Implementation\Can.c	  5579  */
; ..\component\Can\Implementation\Can.c	  5580  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	  5581  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) Can_EccInit(void)
; ..\component\Can\Implementation\Can.c	  5582  {
; ..\component\Can\Implementation\Can.c	  5583    /*Local Variables*/
; ..\component\Can\Implementation\Can.c	  5584    vuint8 ret = kCanOk;
; ..\component\Can\Implementation\Can.c	  5585  # if defined (C_ENABLE_HW_ECC_INIT) /* Message RAM initialization by hardware (RINIT) */
; ..\component\Can\Implementation\Can.c	  5586    vuint8 indx;
; ..\component\Can\Implementation\Can.c	  5587    volatile vuint32 dummyRead;
; ..\component\Can\Implementation\Can.c	  5588  #  if defined( C_ENABLE_HW_LOOP_TIMER ) && !defined ( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  5589    CanChannelHandle channel = 0;
; ..\component\Can\Implementation\Can.c	  5590  #  endif
; ..\component\Can\Implementation\Can.c	  5591  
; ..\component\Can\Implementation\Can.c	  5592    /* #10 Disable EndInit Protection */
; ..\component\Can\Implementation\Can.c	  5593    CAN_ENDINIT_PROTECT_OFF();
; ..\component\Can\Implementation\Can.c	  5594  
; ..\component\Can\Implementation\Can.c	  5595  #  if( CAN_SAFE_BSW == STD_ON ) 
; ..\component\Can\Implementation\Can.c	  5596    /* Amount of subsystems must be between 1 and 5 */
; ..\component\Can\Implementation\Can.c	  5597    if((Can_GetSizeOfCanSubSystemBaseAdr() == 0u) || (Can_GetSizeOfCanSubSystemBaseAdr() > 5u) ) /* PRQA S 3325,2992,2742 */ /* MD_Can_3325_LL,MD_Can_ConstValue,MD_Can_ConstValue */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  5598    { 
; ..\component\Can\Implementation\Can.c	  5599      Can_CallDetReportError(CAN_INIT_ID, CAN_E_GENDATA); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  5600    }
; ..\component\Can\Implementation\Can.c	  5601    else
; ..\component\Can\Implementation\Can.c	  5602  #  endif
; ..\component\Can\Implementation\Can.c	  5603    {
; ..\component\Can\Implementation\Can.c	  5604      /* #20 Initialize the Message RAM of each active subsystem */
; ..\component\Can\Implementation\Can.c	  5605      for (indx=0;indx<Can_GetSizeOfCanSubSystemBaseAdr(); indx++)
; ..\component\Can\Implementation\Can.c	  5606      {
; ..\component\Can\Implementation\Can.c	  5607        /* #30 Set Clock & RAM Change Enable and Change Init  */
; ..\component\Can\Implementation\Can.c	  5608        MCMCAN(indx)->MCR |=  (kCanMCMcan_MCR_CCCE | kCanMCMcan_MCR_CI); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_120 */
; ..\component\Can\Implementation\Can.c	  5609        /* #40 Wait until RBUSY is 0b */
; ..\component\Can\Implementation\Can.c	  5610        if ( (MCMCAN(indx)->MCR & kCanMCMcan_MCR_RBUSY) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  5611        {
; ..\component\Can\Implementation\Can.c	  5612          CanLL_ApplCanTimerStart(kCanLoopRamInit); /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  5613          do
; ..\component\Can\Implementation\Can.c	  5614          {
; ..\component\Can\Implementation\Can.c	  5615          /* Wait */
; ..\component\Can\Implementation\Can.c	  5616          } while( ((MCMCAN(indx)->MCR & kCanMCMcan_MCR_RBUSY) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopRamInit) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5617          CanLL_ApplCanTimerEnd(kCanLoopRamInit); /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  5618        }
; ..\component\Can\Implementation\Can.c	  5619        /* #50 Set RINIT to 0b */
; ..\component\Can\Implementation\Can.c	  5620        MCMCAN(indx)->MCR &= ~kCanMCMcan_MCR_RINIT; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_120 */
; ..\component\Can\Implementation\Can.c	  5621        /* #60 Set RINIT to 1b */
; ..\component\Can\Implementation\Can.c	  5622        MCMCAN(indx)->MCR |= kCanMCMcan_MCR_RINIT; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_120 */
; ..\component\Can\Implementation\Can.c	  5623        /* #70 Dummy Read MCR */
; ..\component\Can\Implementation\Can.c	  5624        dummyRead = MCMCAN(indx)->MCR; /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5625        /* #80 Wait until RBUSY is 0b */
; ..\component\Can\Implementation\Can.c	  5626        if ( (MCMCAN(indx)->MCR & kCanMCMcan_MCR_RBUSY) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5627        {
; ..\component\Can\Implementation\Can.c	  5628          CanLL_ApplCanTimerStart(kCanLoopRamInit); /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  5629          do
; ..\component\Can\Implementation\Can.c	  5630          {
; ..\component\Can\Implementation\Can.c	  5631          /* wait */
; ..\component\Can\Implementation\Can.c	  5632          } while( ((MCMCAN(indx)->MCR & kCanMCMcan_MCR_RBUSY) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopRamInit) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5633          CanLL_ApplCanTimerEnd(kCanLoopRamInit); /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  5634        }
; ..\component\Can\Implementation\Can.c	  5635        if ( (MCMCAN(indx)->MCR & kCanMCMcan_MCR_RBUSY) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  5636        {
; ..\component\Can\Implementation\Can.c	  5637          /* Message RAM initialization Failed */
; ..\component\Can\Implementation\Can.c	  5638          ret = kCanFailed;
; ..\component\Can\Implementation\Can.c	  5639        }
; ..\component\Can\Implementation\Can.c	  5640        /* #90 Set RINIT to 0b */
; ..\component\Can\Implementation\Can.c	  5641        MCMCAN(indx)->MCR &= ~kCanMCMcan_MCR_RINIT; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_120 */
; ..\component\Can\Implementation\Can.c	  5642        /* #100 Reset Clock & RAM Change Enable and Change Init  */
; ..\component\Can\Implementation\Can.c	  5643        MCMCAN(indx)->MCR &=  ~(kCanMCMcan_MCR_CCCE | kCanMCMcan_MCR_CI); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_120 */
; ..\component\Can\Implementation\Can.c	  5644  
; ..\component\Can\Implementation\Can.c	  5645        CAN_DUMMY_STATEMENT(dummyRead); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  5646      }
; ..\component\Can\Implementation\Can.c	  5647    }
; ..\component\Can\Implementation\Can.c	  5648    /* #110 Enable EndInit Protection */
; ..\component\Can\Implementation\Can.c	  5649    CAN_ENDINIT_PROTECT_ON();
; ..\component\Can\Implementation\Can.c	  5650  # else
; ..\component\Can\Implementation\Can.c	  5651    vuint16  ch, idx;
; ..\component\Can\Implementation\Can.c	  5652    vuint32  length;
; ..\component\Can\Implementation\Can.c	  5653    vuint32* dst;
; ..\component\Can\Implementation\Can.c	  5654  
; ..\component\Can\Implementation\Can.c	  5655    /* #120 initialize CAN Message RAM area for each channel */
; ..\component\Can\Implementation\Can.c	  5656    for(ch = 0; ch < kCanNumberOfChannels; ch++)
; ..\component\Can\Implementation\Can.c	  5657    {
; ..\component\Can\Implementation\Can.c	  5658      dst = (vuint32*) Can_GetStartAdrOfShmAdr(ch);   /* PRQA S 0306 */ /* MD_Can_0306_HWaccess_LL */
; ..\component\Can\Implementation\Can.c	  5659      length = (Can_GetStopAdrOfShmAdr(ch) - Can_GetStartAdrOfShmAdr(ch)) >> 2;  /* SMI-64561 */ 
; ..\component\Can\Implementation\Can.c	  5660      for(idx = 0; idx < length; idx++)
; ..\component\Can\Implementation\Can.c	  5661      {
; ..\component\Can\Implementation\Can.c	  5662        dst[idx] = 0x00000000UL; /* SBSW_CAN_LL_108 */ 
; ..\component\Can\Implementation\Can.c	  5663      }
; ..\component\Can\Implementation\Can.c	  5664    }
; ..\component\Can\Implementation\Can.c	  5665  # endif /* C_ENABLE_REGEXT_MCMCAN_COMMENT */
; ..\component\Can\Implementation\Can.c	  5666    return (ret);
; ..\component\Can\Implementation\Can.c	  5667  }
; ..\component\Can\Implementation\Can.c	  5668  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	  5669  #endif /* C_ENABLE_CAN_ECC_INIT_SHM */
; ..\component\Can\Implementation\Can.c	  5670  
; ..\component\Can\Implementation\Can.c	  5671  #if defined( C_ENABLE_TX_POLLING )
; ..\component\Can\Implementation\Can.c	  5672  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  5673  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  5674  | NAME:             CanLL_if_TxIsObjConfPending
; ..\component\Can\Implementation\Can.c	  5675  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  5676  /*
; ..\component\Can\Implementation\Can.c	  5677  |<DataModelStart>| CanLL_if_TxIsObjConfPending
; ..\component\Can\Implementation\Can.c	  5678  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5679  # from CanLL_TxProcessPendings #
; ..\component\Can\Implementation\Can.c	  5680  Relation:
; ..\component\Can\Implementation\Can.c	  5681  OneChOpt
; ..\component\Can\Implementation\Can.c	  5682  ChannelAmount
; ..\component\Can\Implementation\Can.c	  5683  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5684  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5685  Constrain:
; ..\component\Can\Implementation\Can.c	  5686  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5687  */
; ..\component\Can\Implementation\Can.c	  5688  /*!
; ..\component\Can\Implementation\Can.c	  5689   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5690   *
; ..\component\Can\Implementation\Can.c	  5691   *
; ..\component\Can\Implementation\Can.c	  5692   *
; ..\component\Can\Implementation\Can.c	  5693   *
; ..\component\Can\Implementation\Can.c	  5694   */
; ..\component\Can\Implementation\Can.c	  5695  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint32, STATIC_CODE) CanLL_if_TxIsObjConfPending( CAN_CHANNEL_CANTYPE_FIRST vuint32 txBuffer ) 
; ..\component\Can\Implementation\Can.c	  5696  {
; ..\component\Can\Implementation\Can.c	  5697    vuint32 ret;
; ..\component\Can\Implementation\Can.c	  5698  
; ..\component\Can\Implementation\Can.c	  5699    ret = kCanOk; /* assume at least one Tx object confirmation is pending */
; ..\component\Can\Implementation\Can.c	  5700  
; ..\component\Can\Implementation\Can.c	  5701    /* #10 check for pending tx requests */
; ..\component\Can\Implementation\Can.c	  5702    if( ((Can_GetCanTXBRP(canHwChannel) & txBuffer) != 0u) && ((Cn->TXBTO & txBuffer) != 0u) ) /* PRQA S 3673,0303 */ /* MD_Can_NoneConstParameterPointer,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  5703    { /* #20 confirmation shows up */
; ..\component\Can\Implementation\Can.c	  5704    }
; ..\component\Can\Implementation\Can.c	  5705    else
; ..\component\Can\Implementation\Can.c	  5706    { /* #30 no request pending or outstanding confirmation */
; ..\component\Can\Implementation\Can.c	  5707      ret = kCanFailed;
; ..\component\Can\Implementation\Can.c	  5708    }
; ..\component\Can\Implementation\Can.c	  5709    return(ret);
; ..\component\Can\Implementation\Can.c	  5710  }/* CanLL_if_TxIsObjConfPending */
; ..\component\Can\Implementation\Can.c	  5711  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  5712  #endif
; ..\component\Can\Implementation\Can.c	  5713  
; ..\component\Can\Implementation\Can.c	  5714  #if defined(C_ENABLE_TRICORE_ERRATUM_AI_H001)
; ..\component\Can\Implementation\Can.c	  5715  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  5716  | NAME:             CanLL_TriCoreErratum_AI_H001
; ..\component\Can\Implementation\Can.c	  5717  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  5718  /*
; ..\component\Can\Implementation\Can.c	  5719  |<DataModelStart>| CanLL_TriCoreErratum_AI_H001
; ..\component\Can\Implementation\Can.c	  5720  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5721  # CanInterrupt() #
; ..\component\Can\Implementation\Can.c	  5722  Relation:
; ..\component\Can\Implementation\Can.c	  5723  OneChOpt
; ..\component\Can\Implementation\Can.c	  5724  ChannelAmount
; ..\component\Can\Implementation\Can.c	  5725  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5726  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5727  Constrain:
; ..\component\Can\Implementation\Can.c	  5728  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5729  */
; ..\component\Can\Implementation\Can.c	  5730  /*!
; ..\component\Can\Implementation\Can.c	  5731   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5732   *
; ..\component\Can\Implementation\Can.c	  5733   *
; ..\component\Can\Implementation\Can.c	  5734   *
; ..\component\Can\Implementation\Can.c	  5735   *
; ..\component\Can\Implementation\Can.c	  5736   */
; ..\component\Can\Implementation\Can.c	  5737  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  5738  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANTYPE_FIRST vuint32 CanIrFlag)
; ..\component\Can\Implementation\Can.c	  5739  {
; ..\component\Can\Implementation\Can.c	  5740    /* #10 Clear the interrupt flag */
; ..\component\Can\Implementation\Can.c	  5741    Cn->IR = (CanIrFlag); /* SBSW_CAN_LL_100 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5742    /* #20 Check if the clear is neglected */
; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  5744    {
; ..\component\Can\Implementation\Can.c	  5745      CanLL_ApplCanTimerStart(kCanLoopIrFlag); /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  5746      do
; ..\component\Can\Implementation\Can.c	  5747      {
; ..\component\Can\Implementation\Can.c	  5748        /* #30 Repeat clearing until the flag reads zero */
; ..\component\Can\Implementation\Can.c	  5749        Cn->IR = (CanIrFlag); /* SBSW_CAN_LL_100 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5751      CanLL_ApplCanTimerEnd(kCanLoopIrFlag); /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  5752    }
; ..\component\Can\Implementation\Can.c	  5753  } /* CanLL_TriCoreErratum_AI_H001 */
; ..\component\Can\Implementation\Can.c	  5754  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  5755  #endif /* C_ENABLE_REGEXT_MCMCAN_COMMENT */
; ..\component\Can\Implementation\Can.c	  5756  
; ..\component\Can\Implementation\Can.c	  5757  #if ( CAN_BOSCH_ERRATUM_010 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	  5758  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  5759  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  5760  | NAME:             CanBoschErratum_010
; ..\component\Can\Implementation\Can.c	  5761  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  5762  /*
; ..\component\Can\Implementation\Can.c	  5763  |<DataModelStart>| CanBoschErratum_010
; ..\component\Can\Implementation\Can.c	  5764  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5765  # from CanLL_SetAllRegister #
; ..\component\Can\Implementation\Can.c	  5766  Relation:
; ..\component\Can\Implementation\Can.c	  5767  OneChOpt
; ..\component\Can\Implementation\Can.c	  5768  ChannelAmount, HardwareLoopCheck
; ..\component\Can\Implementation\Can.c	  5769  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5770  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5771  Constrain:
; ..\component\Can\Implementation\Can.c	  5772  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5773  */
; ..\component\Can\Implementation\Can.c	  5774  /*!
; ..\component\Can\Implementation\Can.c	  5775   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5776   *
; ..\component\Can\Implementation\Can.c	  5777   *
; ..\component\Can\Implementation\Can.c	  5778   *
; ..\component\Can\Implementation\Can.c	  5779   *
; ..\component\Can\Implementation\Can.c	  5780   *
; ..\component\Can\Implementation\Can.c	  5781   *
; ..\component\Can\Implementation\Can.c	  5782   *
; ..\component\Can\Implementation\Can.c	  5783   *
; ..\component\Can\Implementation\Can.c	  5784   *
; ..\component\Can\Implementation\Can.c	  5785   *
; ..\component\Can\Implementation\Can.c	  5786   */
; ..\component\Can\Implementation\Can.c	  5787  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanBoschErratum_010( CAN_HW_CHANNEL_CANTYPE_ONLY )  /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  5788  {
; ..\component\Can\Implementation\Can.c	  5789    /* When CCCR.CCE is set while a Tx scan is in progress, the Tx Handler FSM stops. 
; ..\component\Can\Implementation\Can.c	  5790       After CCCR.INIT and CCCR.CCE are reset, the Tx Handler FSM does not execute transmission requests.
; ..\component\Can\Implementation\Can.c	  5791       Workaround:
; ..\component\Can\Implementation\Can.c	  5792       1) Cancel all pending transmission requests by writing 0hFFFF FFFF to register TXBCR
; ..\component\Can\Implementation\Can.c	  5793       2) Issue a clock stop request by setting bit CCCR.CSR
; ..\component\Can\Implementation\Can.c	  5794       3) Wait until the M_CAN sets CCCR.INIT and CCCR.CSA to one
; ..\component\Can\Implementation\Can.c	  5795       4) First reset CCCR.CSR
; ..\component\Can\Implementation\Can.c	  5796       5) Then reset CCCR.INIT
; ..\component\Can\Implementation\Can.c	  5797       6) Wait until CCCR.INIT is read as zero
; ..\component\Can\Implementation\Can.c	  5798       7) Issue a second clock stop request by setting bit CCCR.CSR
; ..\component\Can\Implementation\Can.c	  5799       8) Wait until the M_CAN sets CCCR.INIT and CCCR.CSA to one
; ..\component\Can\Implementation\Can.c	  5800       9) Set CCCR.CCE and reset CCCR.CSR */
; ..\component\Can\Implementation\Can.c	  5801  
; ..\component\Can\Implementation\Can.c	  5802    if((Cn->PSR & kCanPSR_ACT_TX) == kCanPSR_ACT_TX) /* #10 check operation */
; ..\component\Can\Implementation\Can.c	  5803    { /* operating as transmitter */
; ..\component\Can\Implementation\Can.c	  5804      Cn->TXBCR = kCan_ALL_ONE;   /* SBSW_CAN_LL_100 */    /* #20 cancel pending tx requests */
; ..\component\Can\Implementation\Can.c	  5805      Cn->CCCR |= kCanCCCR_CSR;   /* SBSW_CAN_LL_100 */    /* #30 issue clock stop request   */
; ..\component\Can\Implementation\Can.c	  5806  
; ..\component\Can\Implementation\Can.c	  5807      /* #40 await clock stop acknowledge */
; ..\component\Can\Implementation\Can.c	  5808      CanLL_ApplCanTimerStart(kCanLoopClockStop); /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  5809      while( ((Cn->CCCR & kCanCCCR_CSA) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopClockStop) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5810      { /* Assure that the previous value has been accepted. */ }
; ..\component\Can\Implementation\Can.c	  5811      CanLL_ApplCanTimerEnd(kCanLoopClockStop); /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  5812  
; ..\component\Can\Implementation\Can.c	  5813      /* #50 return to normal mode */
; ..\component\Can\Implementation\Can.c	  5814      Cn->CCCR &= (vuint32)~(kCanCCCR_CSR);   /* SBSW_CAN_LL_100 */
; ..\component\Can\Implementation\Can.c	  5815      Cn->CCCR &= (vuint32)~(kCanCCCR_INIT);   /* SBSW_CAN_LL_100 */
; ..\component\Can\Implementation\Can.c	  5816  
; ..\component\Can\Implementation\Can.c	  5817      CanLL_ApplCanTimerStart(kCanLoopInit); /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  5818      while( ((Cn->CCCR & kCanCCCR_INIT) != 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5819      { /* Assure that the previous value written to INIT has been accepted. */ }
; ..\component\Can\Implementation\Can.c	  5820      CanLL_ApplCanTimerEnd(kCanLoopInit); /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  5821  
; ..\component\Can\Implementation\Can.c	  5822      /* #60 issue 2'nd clock stop request */
; ..\component\Can\Implementation\Can.c	  5823      Cn->CCCR |= kCanCCCR_CSR;   /* SBSW_CAN_LL_100 */   
; ..\component\Can\Implementation\Can.c	  5824      CanLL_ApplCanTimerStart(kCanLoopClockStop); /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  5825      while( ((Cn->CCCR & kCanCCCR_CSA) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopClockStop) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5826      { /* Assure that the previous value written to CSR has been accepted. */ }
; ..\component\Can\Implementation\Can.c	  5827      CanLL_ApplCanTimerEnd(kCanLoopClockStop); /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  5828  
; ..\component\Can\Implementation\Can.c	  5829      /* #70 now CCE can be set */
; ..\component\Can\Implementation\Can.c	  5830      Cn->CCCR |= kCanCCCR_CCE;   /* SBSW_CAN_LL_100 */
; ..\component\Can\Implementation\Can.c	  5831      CanLL_ApplCanTimerStart(kCanLoopInit); /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  5832      while( ((Cn->CCCR & kCanCCCR_CCE) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5833      { /* Assure that the previous value written to CCE has been accepted. */ }
; ..\component\Can\Implementation\Can.c	  5834      CanLL_ApplCanTimerEnd(kCanLoopInit); /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  5835  
; ..\component\Can\Implementation\Can.c	  5836      /* #80 reset clock stop request */
; ..\component\Can\Implementation\Can.c	  5837      Cn->CCCR &= (vuint32)(~kCanCCCR_CSR);   /* SBSW_CAN_LL_100 */   
; ..\component\Can\Implementation\Can.c	  5838    }
; ..\component\Can\Implementation\Can.c	  5839    else
; ..\component\Can\Implementation\Can.c	  5840    { /* #90 CCE can be set immediately */
; ..\component\Can\Implementation\Can.c	  5841      Cn->CCCR |= kCanCCCR_CCE;   /* SBSW_CAN_LL_100 */   
; ..\component\Can\Implementation\Can.c	  5842      CanLL_ApplCanTimerStart(kCanLoopInit); /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  5843      while( ((Cn->CCCR & kCanCCCR_CCE) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5844      { /* Assure that the previous value has been accepted. */ }
; ..\component\Can\Implementation\Can.c	  5845      CanLL_ApplCanTimerEnd(kCanLoopInit); /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  5846    }
; ..\component\Can\Implementation\Can.c	  5847  } /* CanBoschErratum_010 */
; ..\component\Can\Implementation\Can.c	  5848  /* CODE CATEGORY 4 END */ 
; ..\component\Can\Implementation\Can.c	  5849  #endif
; ..\component\Can\Implementation\Can.c	  5850    
; ..\component\Can\Implementation\Can.c	  5851  
; ..\component\Can\Implementation\Can.c	  5852  
; ..\component\Can\Implementation\Can.c	  5853  
; ..\component\Can\Implementation\Can.c	  5854  
; ..\component\Can\Implementation\Can.c	  5855  
; ..\component\Can\Implementation\Can.c	  5856  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  5857  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  5858  | NAME:             CanErrorHandlingBusOff
; ..\component\Can\Implementation\Can.c	  5859  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  5860  /*
; ..\component\Can\Implementation\Can.c	  5861  |<DataModelStart>| CanErrorHandlingBusOff
; ..\component\Can\Implementation\Can.c	  5862  Relation_Context:
; ..\component\Can\Implementation\Can.c	  5863  # from CanLL_BusOffOccured #
; ..\component\Can\Implementation\Can.c	  5864  Relation:
; ..\component\Can\Implementation\Can.c	  5865  OneChOpt
; ..\component\Can\Implementation\Can.c	  5866  ChannelAmount, DynamicMcanRevision
; ..\component\Can\Implementation\Can.c	  5867  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  5868  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  5869  Constrain:
; ..\component\Can\Implementation\Can.c	  5870  # CAN_BOSCH_ERRATUM_007 #
; ..\component\Can\Implementation\Can.c	  5871  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  5872  */
; ..\component\Can\Implementation\Can.c	  5873  /*!
; ..\component\Can\Implementation\Can.c	  5874   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  5875   *
; ..\component\Can\Implementation\Can.c	  5876   *
; ..\component\Can\Implementation\Can.c	  5877   *
; ..\component\Can\Implementation\Can.c	  5878   *
; ..\component\Can\Implementation\Can.c	  5879   *
; ..\component\Can\Implementation\Can.c	  5880   */
; ..\component\Can\Implementation\Can.c	  5881  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanErrorHandlingBusOff(CAN_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  5882  {
; ..\component\Can\Implementation\Can.c	  5883    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  5884    vuint8 ret;
; ..\component\Can\Implementation\Can.c	  5885  
; ..\component\Can\Implementation\Can.c	  5886    /* The Bus_Off recovery sequence cannot be shortened by setting or resetting CCCR[INIT.] 
; ..\component\Can\Implementation\Can.c	  5887       If the device goes Bus_Off, it will set CCCR[INIT] of its own accord, stopping all bus activities. 
; ..\component\Can\Implementation\Can.c	  5888       Once CCCR[INIT] has been cleared by the CPU, the device will then wait for 129 occurrences of Bus Idle 
; ..\component\Can\Implementation\Can.c	  5889       (129 x 11 consecutive recessive bits) before resuming normal operation. 
; ..\component\Can\Implementation\Can.c	  5890       At the end of the Bus_Off recovery sequence, the Error Management Counters will be reset. 
; ..\component\Can\Implementation\Can.c	  5891       During the waiting time after the resetting of CCCR[INIT], each time a sequence of 11 recessive bits has been monitored, 
; ..\component\Can\Implementation\Can.c	  5892       a Bit 0 Error code is written to PSR[LEC], enabling the CPU to readily check up whether the CAN bus is stuck at dominant or continuously disturbed 
; ..\component\Can\Implementation\Can.c	  5893       and to monitor the Bus_Off recovery sequence. ECR[REC] is used to count these sequences. */
; ..\component\Can\Implementation\Can.c	  5894    /* Uncorrected Message RAM bit error detected: BEU sets CCCR[INIT] to '1' to avoid transmission of corrupted data.
; ..\component\Can\Implementation\Can.c	  5895       Controlled by Message RAM bit error input signal generated by an optional external ECC logic attached to the Message RAM. */
; ..\component\Can\Implementation\Can.c	  5896    /* #10 check error status */
; ..\component\Can\Implementation\Can.c	  5897    if( (((Cn->IR & kCanIR_BO)  != 0UL) && ((Cn->PSR & kCanPSR_BO) != 0UL)) /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5898      ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  5899    { 
; ..\component\Can\Implementation\Can.c	  5900      /* #20 check for BusOff (BusOff state, Bit Error Uncorrected or Message RAM failure detected) */
; ..\component\Can\Implementation\Can.c	  5901      { /* BusOff status changed to BusOff OR Bit Error Uncorrected appeared */
; ..\component\Can\Implementation\Can.c	  5902        if(Can_GetCanBusOffNotification(canHwChannel) == kCanBusoff) /* COV_CAN_BUSOFFNOTIFICATION */
; ..\component\Can\Implementation\Can.c	  5903        { /* already detected */
; ..\component\Can\Implementation\Can.c	  5904        }
; ..\component\Can\Implementation\Can.c	  5905        else
; ..\component\Can\Implementation\Can.c	  5906        { 
; ..\component\Can\Implementation\Can.c	  5907          Can_GetCanBusOffNotification(canHwChannel) = kCanBusoff;  /* SBSW_CAN_LL_112 */ 
; ..\component\Can\Implementation\Can.c	  5908        }
; ..\component\Can\Implementation\Can.c	  5909      }
; ..\component\Can\Implementation\Can.c	  5910      /* #40 reset flags */
; ..\component\Can\Implementation\Can.c	  5911  # if defined(C_ENABLE_TRICORE_ERRATUM_AI_H001)
; ..\component\Can\Implementation\Can.c	  5912      CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANPARA_FIRST (vuint32)(kCanIR_BO));
; ..\component\Can\Implementation\Can.c	  5913  # else
; ..\component\Can\Implementation\Can.c	  5914      Cn->IR = (vuint32)(kCanIR_BO);                /* SBSW_CAN_LL_100 */    /* reset flags */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5915  # endif
; ..\component\Can\Implementation\Can.c	  5916      ret = kCanOk;
; ..\component\Can\Implementation\Can.c	  5917    }
; ..\component\Can\Implementation\Can.c	  5918    else
; ..\component\Can\Implementation\Can.c	  5919    {
; ..\component\Can\Implementation\Can.c	  5920      ret = kCanFailed;
; ..\component\Can\Implementation\Can.c	  5921    }
; ..\component\Can\Implementation\Can.c	  5922  
; ..\component\Can\Implementation\Can.c	  5923    if(((Cn->IR & kCanIR_MRAF) != 0UL)) /* COV_CAN_MCAN_NOT_SUPPORTED */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5924    { /* Message RAM annoyance */
; ..\component\Can\Implementation\Can.c	  5925      /* #30 check for Restricted Mode, if so try to get back to normal mode */
; ..\component\Can\Implementation\Can.c	  5926  #if (CAN_DEV_ERROR_REPORT == STD_ON) 
; ..\component\Can\Implementation\Can.c	  5927          Can_CallDetReportError(CAN_CTRBUSOFF_ID, CAN_E_MRAF); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  5928  #endif
; ..\component\Can\Implementation\Can.c	  5929      if((Cn->CCCR & kCanCCCR_ASM) != 0UL)  /* COV_CAN_MCAN_NOT_SUPPORTED */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5930      { /* Regained in Restricted Mode, Tx Handler read problem assumed.
; ..\component\Can\Implementation\Can.c	  5931         In Restricted Operation Mode the node is able to receive data and remote frames and to give
; ..\component\Can\Implementation\Can.c	  5932         acknowledge to valid frames, but it does not send any frames (data, remote, active error or overload). 
; ..\component\Can\Implementation\Can.c	  5933         In case of an error or overload condition, it does not send dominant bits but waits for bus idle to resynchronize itself. */
; ..\component\Can\Implementation\Can.c	  5934  #if ( CAN_BOSCH_ERRATUM_007 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	  5935         /* Effects:
; ..\component\Can\Implementation\Can.c	  5936             With the next transmission after leaving Restricted Operation Mode (reset CCCR.ASM), a frame with an 
; ..\component\Can\Implementation\Can.c	  5937             unexpected identifier and control field is transmitted which accidentally might be accepted by another receiver.
; ..\component\Can\Implementation\Can.c	  5938             Workaround:
; ..\component\Can\Implementation\Can.c	  5939             To recover from Restricted Operation Mode proceed as follows:
; ..\component\Can\Implementation\Can.c	  5940             1) Cancel all pending transmission requests by writing 0hFFFF FFFF to register TXBCR
; ..\component\Can\Implementation\Can.c	  5941             2) Issue a clock stop request by setting bit CCCR.CSR
; ..\component\Can\Implementation\Can.c	  5942             3) Wait until the M_CAN sets CCCR.INIT and CCCR.CSA to one
; ..\component\Can\Implementation\Can.c	  5943             4) First reset CCCR.CSR
; ..\component\Can\Implementation\Can.c	  5944             5) Then reset CCCR.INIT
; ..\component\Can\Implementation\Can.c	  5945             6) Wait until CCCR.INIT is read as zero
; ..\component\Can\Implementation\Can.c	  5946             7) Issue a second clock stop request by setting bit CCCR.CSR
; ..\component\Can\Implementation\Can.c	  5947             8) Wait until the M_CAN sets CCCR.INIT and CCCR.CSA to one
; ..\component\Can\Implementation\Can.c	  5948             9) Set CCCR.CCE, reset CCCR.CSR, and reset CCCR.ASM
; ..\component\Can\Implementation\Can.c	  5949             10) Restart M_CAN by writing CCCR.INIT = '0'
; ..\component\Can\Implementation\Can.c	  5950             11) Configure the CAN operation mode by writing to CCCR.CMR
; ..\component\Can\Implementation\Can.c	  5951             12) Request the transmissions cancelled by step one */
; ..\component\Can\Implementation\Can.c	  5952        {
; ..\component\Can\Implementation\Can.c	  5953          Cn->TXBCR = kCan_ALL_ONE;          /* SBSW_CAN_LL_100 */  /* cancel all */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5954          Cn->CCCR |= (vuint32)kCanCCCR_CSR; /* SBSW_CAN_LL_100 */  /* clock stop request */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5955          /*  After CSR first INIT and then CSA will be set after all pending transfer requests have been completed and the CAN bus reached idle. */
; ..\component\Can\Implementation\Can.c	  5956          CanLL_ApplCanTimerStart(kCanLoopClockStop); /* SBSW_CAN_LL_101 */ 
; ..\component\Can\Implementation\Can.c	  5957          while( ((Cn->CCCR & kCanCCCR_CSA) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopClockStop) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5958          { /* Assure that CSA and thus also INIT has been accepted */ }
; ..\component\Can\Implementation\Can.c	  5959          CanLL_ApplCanTimerEnd(kCanLoopClockStop);    /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  5960  
; ..\component\Can\Implementation\Can.c	  5961          Cn->CCCR &= (vuint32)~(kCanCCCR_CSR);  /* SBSW_CAN_LL_100 */  /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5962          Cn->CCCR &= (vuint32)~(kCanCCCR_INIT); /* SBSW_CAN_LL_100 */  /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5963  
; ..\component\Can\Implementation\Can.c	  5964          CanLL_ApplCanTimerStart(kCanLoopInit);  /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  5965          while( ((Cn->CCCR & kCanCCCR_INIT) != 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5966          { /* Assure that INIT has been accepted */ }
; ..\component\Can\Implementation\Can.c	  5967          CanLL_ApplCanTimerEnd(kCanLoopInit);    /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  5968          Cn->CCCR |= (vuint32)kCanCCCR_CSR;      /* SBSW_CAN_LL_100 */       /* 2'nd clock stop request */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5969          CanLL_ApplCanTimerStart(kCanLoopClockStop); /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  5970          while( ((Cn->CCCR & kCanCCCR_CSA) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopClockStop) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5971          { /* Assure that CSA and thus also INIT has been accepted */ }
; ..\component\Can\Implementation\Can.c	  5972          CanLL_ApplCanTimerEnd(kCanLoopClockStop);   /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  5973          Cn->CCCR |= (vuint32)kCanCCCR_CCE;      /* SBSW_CAN_LL_100 */   /* configuration change enabled */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5974          Cn->CCCR &= (vuint32)(~kCanCCCR_CSR);   /* SBSW_CAN_LL_100 */   /* reset CSR  */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5975          Cn->CCCR &= (vuint32)(~kCanCCCR_ASM);   /* SBSW_CAN_LL_100 */   /* now leave restricted mode  */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5976          /* Step 10) and 11) is accomplished during start transition, 
; ..\component\Can\Implementation\Can.c	  5977             Step 12) has to be done by the application! */
; ..\component\Can\Implementation\Can.c	  5978        }
; ..\component\Can\Implementation\Can.c	  5979  #else /* CAN_BOSCH_ERRATUM_007 */ 
; ..\component\Can\Implementation\Can.c	  5980        Cn->CCCR &= ( (~kCanCCCR_ASM) );     /* SBSW_CAN_LL_100 */    /* leave Restricted Mode */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5981  #endif
; ..\component\Can\Implementation\Can.c	  5982        ret = kCanOk;
; ..\component\Can\Implementation\Can.c	  5983        }
; ..\component\Can\Implementation\Can.c	  5984      else
; ..\component\Can\Implementation\Can.c	  5985      { /* Rx Handler filtering or access to Message RAM access problem assumed */
; ..\component\Can\Implementation\Can.c	  5986        /* At least one message was discarded (kCanIR_UMD for MCAN < 3.0.0) */
; ..\component\Can\Implementation\Can.c	  5987        /* Do not return a positive busoff notification for only MRAF RX Issue */
; ..\component\Can\Implementation\Can.c	  5988      }
; ..\component\Can\Implementation\Can.c	  5989  #if defined(C_ENABLE_TRICORE_ERRATUM_AI_H001)
; ..\component\Can\Implementation\Can.c	  5990      CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANPARA_FIRST (vuint32)(kCanIR_MRAF));
; ..\component\Can\Implementation\Can.c	  5991  #else
; ..\component\Can\Implementation\Can.c	  5992      Cn->IR = (vuint32)(kCanIR_MRAF); /* SBSW_CAN_LL_100 */    /* reset flags */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  5993  #endif
; ..\component\Can\Implementation\Can.c	  5994    }
; ..\component\Can\Implementation\Can.c	  5995    return(ret);
; ..\component\Can\Implementation\Can.c	  5996  } /* CanErrorHandlingBusOff */
; ..\component\Can\Implementation\Can.c	  5997  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  5998  
; ..\component\Can\Implementation\Can.c	  5999  
; ..\component\Can\Implementation\Can.c	  6000  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  6001  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  6002  | NAME:             CanLL_SetAllFilter
; ..\component\Can\Implementation\Can.c	  6003  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  6004  /*
; ..\component\Can\Implementation\Can.c	  6005  |<DataModelStart>| CanLL_SetAllFilter
; ..\component\Can\Implementation\Can.c	  6006  Relation_Context:
; ..\component\Can\Implementation\Can.c	  6007  # from CanLL_InitBeginSetRegisters #
; ..\component\Can\Implementation\Can.c	  6008  Relation:
; ..\component\Can\Implementation\Can.c	  6009  OneChOpt
; ..\component\Can\Implementation\Can.c	  6010  ChannelAmount, HardwareLoopCheck, IDType, DevErrorDetect
; ..\component\Can\Implementation\Can.c	  6011  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  6012  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  6013  Constrain:
; ..\component\Can\Implementation\Can.c	  6014  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  6015  */
; ..\component\Can\Implementation\Can.c	  6016  /*!
; ..\component\Can\Implementation\Can.c	  6017   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  6018   *
; ..\component\Can\Implementation\Can.c	  6019   *
; ..\component\Can\Implementation\Can.c	  6020   *
; ..\component\Can\Implementation\Can.c	  6021   */
; ..\component\Can\Implementation\Can.c	  6022  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_SetAllFilter(CAN_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara)
; ..\component\Can\Implementation\Can.c	  6023  {
; ..\component\Can\Implementation\Can.c	  6024  #if( CAN_SAFE_BSW == STD_ON ) 
; ..\component\Can\Implementation\Can.c	  6025    vuint8 result = kCanOk;
; ..\component\Can\Implementation\Can.c	  6026  #endif
; ..\component\Can\Implementation\Can.c	  6027    /* 10 set std id filter */
; ..\component\Can\Implementation\Can.c	  6028  #if defined( C_ENABLE_STD_ID ) && (kCanNumberOfStandardFilter > 0)  /* at least one std filter is available */
; ..\component\Can\Implementation\Can.c	  6029    initPara->pFS = &Can_GetCanSIDFE(Can_GetCanSIDFEStartIndex(canHwChannel));  /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  6030    for(initPara->tmpVal = 0; initPara->tmpVal < (Can_GetCanSIDFC_LSSOfCanSIDFC(canHwChannel)); (initPara->tmpVal)++) /* SBSW_CAN_LL_109 */  /* SBSW_CAN_LL_109 */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6031    { /* copy std filter elements to SHM */
; ..\component\Can\Implementation\Can.c	  6032  # if( CAN_SAFE_BSW == STD_ON ) 
; ..\component\Can\Implementation\Can.c	  6033      if( ((vuint32)&ShmSIDF(initPara->stdFeCount).S0 < (vuint32)Can_GetStartAdrOfShmAdr(canHwChannel)) || ((vuint32)&ShmSIDF(initPara->stdFeCount).S0 >= (vuint32)Can_GetStopAdrOfShmAdr(canHwChannel) ) ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* CM_CAN_LL_103 */  /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  6034      { /* SilentBSW check */
; ..\component\Can\Implementation\Can.c	  6035        Can_CallDetReportError(CAN_INIT_ID, CAN_E_GENDATA);
; ..\component\Can\Implementation\Can.c	  6036        result = kCanFailed;
; ..\component\Can\Implementation\Can.c	  6037      }
; ..\component\Can\Implementation\Can.c	  6038      else
; ..\component\Can\Implementation\Can.c	  6039  # endif
; ..\component\Can\Implementation\Can.c	  6040      {
; ..\component\Can\Implementation\Can.c	  6041        (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(ShmSIDF(initPara->stdFeCount).S0), (vuint32)(initPara->pFS[initPara->tmpVal]), kCanRegCheckMaskSMIDFE_S0, initPara);   /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_103 */
; ..\component\Can\Implementation\Can.c	  6042        (initPara->stdFeCount)++;  /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  6043      }
; ..\component\Can\Implementation\Can.c	  6044    }
; ..\component\Can\Implementation\Can.c	  6045  #endif  /* STD_FILTER */
; ..\component\Can\Implementation\Can.c	  6046  
; ..\component\Can\Implementation\Can.c	  6047    /* 20 set ext id filter */
; ..\component\Can\Implementation\Can.c	  6048  #if defined(C_ENABLE_EXTENDED_ID) && (kCanNumberOfExtendedFilter > 0)
; ..\component\Can\Implementation\Can.c	  6049    for(initPara->tmpVal = 0; initPara->tmpVal < (Can_GetCanXIDFC_LSEOfCanXIDFC(canHwChannel)); (initPara->tmpVal)++) /* SBSW_CAN_LL_109 */  /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  6050    { /* copy ext filter elements to SHM */
; ..\component\Can\Implementation\Can.c	  6051  # if( CAN_SAFE_BSW == STD_ON ) 
; ..\component\Can\Implementation\Can.c	  6052      if( ((vuint32)&ShmXIDF(initPara->extFeCount).F0 < (vuint32)Can_GetStartAdrOfShmAdr(canHwChannel)) || ((vuint32)&ShmXIDF(initPara->extFeCount).F0 >= (vuint32)Can_GetStopAdrOfShmAdr(canHwChannel) ) ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* CM_CAN_LL_103 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  6053      { /* SilentBSW check */
; ..\component\Can\Implementation\Can.c	  6054        Can_CallDetReportError(CAN_INIT_ID, CAN_E_GENDATA);
; ..\component\Can\Implementation\Can.c	  6055        result = kCanFailed;
; ..\component\Can\Implementation\Can.c	  6056      }
; ..\component\Can\Implementation\Can.c	  6057      else
; ..\component\Can\Implementation\Can.c	  6058  # endif
; ..\component\Can\Implementation\Can.c	  6059      {
; ..\component\Can\Implementation\Can.c	  6060        (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(ShmXIDF(initPara->extFeCount).F0), (vuint32)(Can_GetCanXIDFEEIDFE_0OfCanXIDFE(Can_GetCanXIDFEStartIndex(canHwChannel) + initPara->tmpVal)), kCanRegCheckMaskEMIDFE_F0, initPara);  /* SBSW_CAN_LL_103 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6061        (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(ShmXIDF(initPara->extFeCount).F1), (vuint32)(Can_GetCanXIDFEEIDFE_1OfCanXIDFE(Can_GetCanXIDFEStartIndex(canHwChannel) + initPara->tmpVal)), kCanRegCheckMaskEMIDFE_F1, initPara);  /* SBSW_CAN_LL_103 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6062        (initPara->extFeCount)++; /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  6063      }
; ..\component\Can\Implementation\Can.c	  6064    }
; ..\component\Can\Implementation\Can.c	  6065  #endif /* EXT_FILTER */
; ..\component\Can\Implementation\Can.c	  6066  #if (!defined( C_ENABLE_STD_ID ) || (kCanNumberOfStandardFilter <= 0u) ) && (!defined(C_ENABLE_EXTENDED_ID) || (kCanNumberOfExtendedFilter <= 0u))
; ..\component\Can\Implementation\Can.c	  6067    CAN_DUMMY_STATEMENT(initPara);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  6068  #endif
; ..\component\Can\Implementation\Can.c	  6069  CAN_CHANNEL_DUMMY_STATEMENT;  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  6070  #if( CAN_SAFE_BSW == STD_ON ) 
; ..\component\Can\Implementation\Can.c	  6071    return(result);
; ..\component\Can\Implementation\Can.c	  6072  #else
; ..\component\Can\Implementation\Can.c	  6073    return(kCanOk);
; ..\component\Can\Implementation\Can.c	  6074  #endif
; ..\component\Can\Implementation\Can.c	  6075  } /* CanLL_SetAllFilter */
; ..\component\Can\Implementation\Can.c	  6076  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  6077   
; ..\component\Can\Implementation\Can.c	  6078  
; ..\component\Can\Implementation\Can.c	  6079  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  6080  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  6081  | NAME:             CanLL_SetAllRegister
; ..\component\Can\Implementation\Can.c	  6082  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  6083  /*
; ..\component\Can\Implementation\Can.c	  6084  |<DataModelStart>| CanLL_SetAllRegister
; ..\component\Can\Implementation\Can.c	  6085  Relation_Context:
; ..\component\Can\Implementation\Can.c	  6086  # from CanLL_InitBeginSetRegisters #
; ..\component\Can\Implementation\Can.c	  6087  Relation:
; ..\component\Can\Implementation\Can.c	  6088  OneChOpt
; ..\component\Can\Implementation\Can.c	  6089  ChannelAmount, IDType, CanFdSupport, RxFullCANSupport, RxBasicCANSupport, MultipleBasicCanObjects
; ..\component\Can\Implementation\Can.c	  6090  ChannelAmount, HardwareLoopCheck, RxPolling, TxPolling, IndividualPolling, StatusPolling
; ..\component\Can\Implementation\Can.c	  6091  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  6092  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  6093  Constrain:
; ..\component\Can\Implementation\Can.c	  6094  # CAN_BOSCH_ERRATUM_008 #
; ..\component\Can\Implementation\Can.c	  6095  # CAN_BOSCH_ERRATUM_010 #
; ..\component\Can\Implementation\Can.c	  6096  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  6097  */
; ..\component\Can\Implementation\Can.c	  6098  /*!
; ..\component\Can\Implementation\Can.c	  6099   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  6100   *
; ..\component\Can\Implementation\Can.c	  6101   *
; ..\component\Can\Implementation\Can.c	  6102   *
; ..\component\Can\Implementation\Can.c	  6103   *
; ..\component\Can\Implementation\Can.c	  6104   *
; ..\component\Can\Implementation\Can.c	  6105   *
; ..\component\Can\Implementation\Can.c	  6106   *
; ..\component\Can\Implementation\Can.c	  6107   *
; ..\component\Can\Implementation\Can.c	  6108   *
; ..\component\Can\Implementation\Can.c	  6109   *
; ..\component\Can\Implementation\Can.c	  6110   */
; ..\component\Can\Implementation\Can.c	  6111  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_SetAllRegister(CAN_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr initPara)
; ..\component\Can\Implementation\Can.c	  6112  {
; ..\component\Can\Implementation\Can.c	  6113    vuint32 LocalRegValue;
; ..\component\Can\Implementation\Can.c	  6114    initPara->tmpVal = 0;     /* SBSW_CAN_LL_109 */    /* PRQA S 2982 */ /* MD_Can_2982_LL */ 
; ..\component\Can\Implementation\Can.c	  6115  #if defined( C_ENABLE_STD_ID )
; ..\component\Can\Implementation\Can.c	  6116    initPara->stdFeCount = 0; /* SBSW_CAN_LL_109 */    /* PRQA S 2982 */ /* MD_Can_2982_LL */
; ..\component\Can\Implementation\Can.c	  6117  #endif
; ..\component\Can\Implementation\Can.c	  6118  #if defined(C_ENABLE_EXTENDED_ID)
; ..\component\Can\Implementation\Can.c	  6119    initPara->extFeCount = 0; /* SBSW_CAN_LL_109 */    /* PRQA S 2982 */ /* MD_Can_2982_LL */
; ..\component\Can\Implementation\Can.c	  6120  #endif
; ..\component\Can\Implementation\Can.c	  6121    
; ..\component\Can\Implementation\Can.c	  6122  #if defined(C_ENABLE_STD_ID) 
; ..\component\Can\Implementation\Can.c	  6123    CAN_DUMMY_STATEMENT(initPara->stdFeCount);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  6124  #endif
; ..\component\Can\Implementation\Can.c	  6125  #if defined(C_ENABLE_EXTENDED_ID) 
; ..\component\Can\Implementation\Can.c	  6126    CAN_DUMMY_STATEMENT(initPara->extFeCount);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  6127  #endif
; ..\component\Can\Implementation\Can.c	  6128  
; ..\component\Can\Implementation\Can.c	  6129    /* #10 assure configuration enable mode */
; ..\component\Can\Implementation\Can.c	  6130    /* Initialization is started by setting CCCR[INIT]. This does not change any configuration register.
; ..\component\Can\Implementation\Can.c	  6131       M_CAN configuration register access is only enabled when CCCR[INIT] and CCCR[CCE] are set (protected write).
; ..\component\Can\Implementation\Can.c	  6132       While CCCR[INIT]==1: 
; ..\component\Can\Implementation\Can.c	  6133       - message transfer on CAN bus is stopped, 
; ..\component\Can\Implementation\Can.c	  6134       - CAN bus Tx output is recessive. */
; ..\component\Can\Implementation\Can.c	  6135    
; ..\component\Can\Implementation\Can.c	  6136  #if ( CAN_BOSCH_ERRATUM_008 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	  6137    /* When CCCR.INIT is set while the M_CAN is receiving a frame, the next received frame         
; ..\component\Can\Implementation\Can.c	  6138       after resetting CCCR.INIT will cause IR.MRAF to be set.
; ..\component\Can\Implementation\Can.c	  6139       Effects:
; ..\component\Can\Implementation\Can.c	  6140       IR.MRAF is set when the first frame after resetting CCCR.INIT is received although that
; ..\component\Can\Implementation\Can.c	  6141       frame is received correctly.
; ..\component\Can\Implementation\Can.c	  6142       Workaround:
; ..\component\Can\Implementation\Can.c	  6143       1) Issue a clock stop request by setting bit CCCR.CSR
; ..\component\Can\Implementation\Can.c	  6144          When clock stop is requested, first CCCR.INIT and then CCCR.CSA will be set 
; ..\component\Can\Implementation\Can.c	  6145          after all pending transfer requests have been completed and the CAN bus reached idle.
; ..\component\Can\Implementation\Can.c	  6146       2) Wait until the M_CAN sets CCCR.INIT and CCCR.CSA to one
; ..\component\Can\Implementation\Can.c	  6147       3) Before resetting CCCR.INIT first reset CCCR.CSR. */
; ..\component\Can\Implementation\Can.c	  6148    /*  When CSR is requested, first INIT and then CSA will be set after all pending transfer 
; ..\component\Can\Implementation\Can.c	  6149        requests have been completed and the CAN bus reached idle. */
; ..\component\Can\Implementation\Can.c	  6150    {
; ..\component\Can\Implementation\Can.c	  6151      Cn->TXBCR = kCan_ALL_ONE;    /* SBSW_CAN_LL_100 */    /* cancel pending tx requests */
; ..\component\Can\Implementation\Can.c	  6152       /* Clear Previous CCCR configuration except INIT and CSR bits */
; ..\component\Can\Implementation\Can.c	  6153      Cn->CCCR &= (kCanCCCR_CSR | kCanCCCR_INIT);  /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6154  
; ..\component\Can\Implementation\Can.c	  6155      Cn->CCCR |= kCanCCCR_CSR;   /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6156      CanLL_ApplCanTimerStart(kCanLoopClockStop); /* SBSW_CAN_LL_101 */
; ..\component\Can\Implementation\Can.c	  6157      while( ((Cn->CCCR & kCanCCCR_CSA) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopClockStop) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  6158      { /* Assure that CSA/INIT has been accepted. */ }
; ..\component\Can\Implementation\Can.c	  6159      CanLL_ApplCanTimerEnd(kCanLoopClockStop); /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  6160    }
; ..\component\Can\Implementation\Can.c	  6161  #else
; ..\component\Can\Implementation\Can.c	  6162    Cn->CCCR = kCanCCCR_INIT;               /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6163    CanLL_ApplCanTimerStart(kCanLoopInit); /* SBSW_CAN_LL_101 */  
	mov	d4,d8
	lea	a15,[a12]30
.L1131:
	ld.w	d0,[a14]
.L1132:
	mov.aa	a4,a15
.L1133:
	mov.a	a2,d0
	ld.w	d0,[a2]340
.L2092:
	st.w	[a10]10,d0
.L1134:
	st.w	[a10]26,d8
.L2093:
	mov	d0,#1
	st.h	[a10]24,d8
.L2094:
	st.w	[a2]280,d0
.L2095:
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  6164    while( ((Cn->CCCR & kCanCCCR_INIT) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */      (inlined)
.L3:

; ..\component\Can\Implementation\Can.c	  6164    while( ((Cn->CCCR & kCanCCCR_INIT) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */
	ld.w	d15,[a14]
.L2096:
	mov.a	a2,d15
	ld.w	d15,[a2]280
.L2097:

; ..\component\Can\Implementation\Can.c	  6164    while( ((Cn->CCCR & kCanCCCR_INIT) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */      (inlined)
	jnz.t	d15:0,.L4
.L1146:
	mov	d9,#0
	ld.w	d15,[a15]
.L1275:
	mov	d10,d9
	st.w	[a10]40,d15
.L1150:
	mov	d4,d9
	lea	a4,[a10]40
.L1276:
	lea	a5,[a10]36
	call	GetElapsedValue
.L1277:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L5
.L2098:
	ld.w	d15,[a10]36
.L2099:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L6
.L2100:
	mov	d10,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L7

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L6:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L5:
	mov	d9,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L7:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d9,#0,.L8
.L2101:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d9
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L8:

; ..\component\Can\Implementation\Can.c	  6164    while( ((Cn->CCCR & kCanCCCR_INIT) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */      (inlined)
	jne	d10,#0,.L3
.L4:

; ..\component\Can\Implementation\Can.c	  6165    { /* Assure that INIT has been accepted. */ }
; ..\component\Can\Implementation\Can.c	  6166    CanLL_ApplCanTimerEnd(kCanLoopInit);  /* SBSW_CAN_LL_101 */  
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue
.L2102:

; ..\component\Can\Implementation\Can.c	  6167  #endif      
; ..\component\Can\Implementation\Can.c	  6168    
; ..\component\Can\Implementation\Can.c	  6169  #if ( CAN_BOSCH_ERRATUM_010 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	  6170    {
; ..\component\Can\Implementation\Can.c	  6171      CanBoschErratum_010(CAN_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  6172    }
; ..\component\Can\Implementation\Can.c	  6173  #else
; ..\component\Can\Implementation\Can.c	  6174    Cn->CCCR = (vuint32)(kCanCCCR_INIT | kCanCCCR_CCE);   /* set all zero */  /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a14]
.L2103:

; ..\component\Can\Implementation\Can.c	  6175    CanLL_ApplCanTimerStart(kCanLoopInit); /* SBSW_CAN_LL_101 */  
	mov	d4,#0
	mov.aa	a4,a15
.L2104:
	mov.a	a2,d15
.L2105:
	mov	d15,#3
.L2106:
	st.w	[a2]280,d15
.L2107:
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  6176    while( ((Cn->CCCR & kCanCCCR_CCE) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */      (inlined)
.L9:

; ..\component\Can\Implementation\Can.c	  6176    while( ((Cn->CCCR & kCanCCCR_CCE) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */
	ld.w	d15,[a14]
.L2108:
	mov.a	a2,d15
	ld.w	d15,[a2]280
.L2109:

; ..\component\Can\Implementation\Can.c	  6176    while( ((Cn->CCCR & kCanCCCR_CCE) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */      (inlined)
	jnz.t	d15:1,.L10
.L1153:
	mov	d9,#0
	ld.w	d15,[a15]
.L1278:
	mov	d10,d9
	st.w	[a10]40,d15
.L1156:
	mov	d4,d9
	lea	a4,[a10]40
.L1279:
	lea	a5,[a10]36
	call	GetElapsedValue
.L1280:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L11
.L2110:
	ld.w	d15,[a10]36
.L2111:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L12
.L2112:
	mov	d10,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L13

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L12:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L11:
	mov	d9,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L13:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d9,#0,.L14
.L2113:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d9
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L14:

; ..\component\Can\Implementation\Can.c	  6176    while( ((Cn->CCCR & kCanCCCR_CCE) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */      (inlined)
	jne	d10,#0,.L9
.L10:

; ..\component\Can\Implementation\Can.c	  6177    { /* Assure that the previous value has been accepted. */ }
; ..\component\Can\Implementation\Can.c	  6178    CanLL_ApplCanTimerEnd( kCanLoopInit ); /* SBSW_CAN_LL_101 */  
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue
.L2114:

; ..\component\Can\Implementation\Can.c	  6179  #endif
; ..\component\Can\Implementation\Can.c	  6180    
; ..\component\Can\Implementation\Can.c	  6181    /* #20 support additional features via user config file */
; ..\component\Can\Implementation\Can.c	  6182    LocalRegValue = Cn->CCCR; /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a14]
.L2115:
	fcall	.cocofun_7
.L2116:

; ..\component\Can\Implementation\Can.c	  6183    
; ..\component\Can\Implementation\Can.c	  6184  
; ..\component\Can\Implementation\Can.c	  6185    /* #30 support CAN-FD */
; ..\component\Can\Implementation\Can.c	  6186  #if ( CAN_MCAN_REVISION >= 0x0315UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  6187  # if ( Can_GetCAN_FD_NISO() == STD_ON)    /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  6188      LocalRegValue |= (vuint32) kCanCCCR_NISO;
; ..\component\Can\Implementation\Can.c	  6189  # else
; ..\component\Can\Implementation\Can.c	  6190      LocalRegValue &= (vuint32)~kCanCCCR_NISO;
; ..\component\Can\Implementation\Can.c	  6191  # endif
; ..\component\Can\Implementation\Can.c	  6192  #endif
; ..\component\Can\Implementation\Can.c	  6193    
; ..\component\Can\Implementation\Can.c	  6194  #if defined( C_ENABLE_CAN_FD_USED )
; ..\component\Can\Implementation\Can.c	  6195    if (Can_GetInitObjectFdBrsConfig(Can_GetLastInitObject(channel)) != CAN_NONE)
	insert	d0,d15,#0,#15,#1
	ld.bu	d15,[a13]
.L1281:
	fcall	.cocofun_14
.L1282:

; ..\component\Can\Implementation\Can.c	  6195    if (Can_GetInitObjectFdBrsConfig(Can_GetLastInitObject(channel)) != CAN_NONE)      (inlined)
	jeq	d15,#0,.L15
.L2117:

; ..\component\Can\Implementation\Can.c	  6196    {
; ..\component\Can\Implementation\Can.c	  6197  # if ( CAN_MCAN_REVISION >= 0x310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  6198        LocalRegValue |= (vuint32)(  kCanCCCR_FDOE | kCanCCCR_BRSE);    /* FD operation, BRS enabled */
	insert	d15,d0,#3,#8,#2

; ..\component\Can\Implementation\Can.c	  6198        LocalRegValue |= (vuint32)(  kCanCCCR_FDOE | kCanCCCR_BRSE);    /* FD operation, BRS enabled */      (inlined)
	j	.L16

; ..\component\Can\Implementation\Can.c	  6195    if (Can_GetInitObjectFdBrsConfig(Can_GetLastInitObject(channel)) != CAN_NONE)      (inlined)
.L15:

; ..\component\Can\Implementation\Can.c	  6199  # else
; ..\component\Can\Implementation\Can.c	  6200        LocalRegValue |= kCanCCCR_CME_LONG_FAST;                       /* enable LONG and FAST */
; ..\component\Can\Implementation\Can.c	  6201  # endif
; ..\component\Can\Implementation\Can.c	  6202    }
; ..\component\Can\Implementation\Can.c	  6203    else
; ..\component\Can\Implementation\Can.c	  6204    { 
; ..\component\Can\Implementation\Can.c	  6205  # if ( CAN_MCAN_REVISION >= 0x310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  6206      /* FD operation disabled */
; ..\component\Can\Implementation\Can.c	  6207      LocalRegValue &= (vuint32)(~(kCanCCCR_FDOE | kCanCCCR_BRSE));  /* reset FD bits */
	insert	d15,d0,#0,#8,#2

; ..\component\Can\Implementation\Can.c	  6203    else      (inlined)
.L16:
	st.w	[a15],d15
.L1160:

; ..\component\Can\Implementation\Can.c	  6208  # else
; ..\component\Can\Implementation\Can.c	  6209      LocalRegValue &= (vuint32)(~(kCanCCCR_CME_CAN20));            /* enable NORMAL CAN */
; ..\component\Can\Implementation\Can.c	  6210  # endif
; ..\component\Can\Implementation\Can.c	  6211    }
; ..\component\Can\Implementation\Can.c	  6212  #else
; ..\component\Can\Implementation\Can.c	  6213  # if ( CAN_MCAN_REVISION >= 0x310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  6214    /* FD operation disabled */
; ..\component\Can\Implementation\Can.c	  6215    LocalRegValue &= (vuint32)(~(kCanCCCR_FDOE | kCanCCCR_BRSE));    /* reset FD bits */
; ..\component\Can\Implementation\Can.c	  6216  # else
; ..\component\Can\Implementation\Can.c	  6217    LocalRegValue &= (vuint32)(~(kCanCCCR_CME_CAN20));               /* enable NORMAL CAN */
; ..\component\Can\Implementation\Can.c	  6218  # endif
; ..\component\Can\Implementation\Can.c	  6219  #endif
; ..\component\Can\Implementation\Can.c	  6220    /* Write the accumulated CCCR Value to the CCCR Register*/
; ..\component\Can\Implementation\Can.c	  6221    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->CCCR), (vuint32)LocalRegValue, kCan_ALL_ONE, initPara);  /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_100 */ 
; ..\component\Can\Implementation\Can.c	  6222  
; ..\component\Can\Implementation\Can.c	  6223    /* #40 support Rx FullCAN */
; ..\component\Can\Implementation\Can.c	  6224    /* Delete all pending interrupt requests */
; ..\component\Can\Implementation\Can.c	  6225    Cn->IR       = kCanIR_CLEAR_ALL; /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a14]
.L2118:
	fcall	.cocofun_12
.L1170:

; ..\component\Can\Implementation\Can.c	  6226  #if defined( C_ENABLE_RX_FULLCAN_OBJECTS ) 
; ..\component\Can\Implementation\Can.c	  6227    Cn->NDATA[0] = kCan_ALL_ONE;     /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6228    Cn->NDATA[1] = kCan_ALL_ONE;     /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6229  #endif
; ..\component\Can\Implementation\Can.c	  6230    
; ..\component\Can\Implementation\Can.c	  6231    /* Start value of the Message RAM Watchdog Counter. 
; ..\component\Can\Implementation\Can.c	  6232       The RAM Watchdog Counter is clocked by the Host clock. 
; ..\component\Can\Implementation\Can.c	  6233       With the reset value of '0' the counter is disabled. */
; ..\component\Can\Implementation\Can.c	  6234    /* Only with ( CAN_BOSCH_ERRATUM_013 == STD_ON )
; ..\component\Can\Implementation\Can.c	  6235       This Errata is not considered by the CAN driver (see "Note" below).
; ..\component\Can\Implementation\Can.c	  6236       When the M_CAN wants to store a received frame and the Message RAM does not respond in time, 
; ..\component\Can\Implementation\Can.c	  6237       this message cannot be stored completely and is discarded. Interrupt flag IR.MRAF is set. 
; ..\component\Can\Implementation\Can.c	  6238       It may happen that the next received message is stored incomplete, then the respective 
; ..\component\Can\Implementation\Can.c	  6239       Rx Buffer holds inconsistent data.
; ..\component\Can\Implementation\Can.c	  6240       Workaround:
; ..\component\Can\Implementation\Can.c	  6241       Configure the RAM Watchdog to the maximum expected Message RAM access delay. 
; ..\component\Can\Implementation\Can.c	  6242       In case the Watchdog Interrupt IR.WDI is set discard the frame received after IR.MRAF has been activated.
; ..\component\Can\Implementation\Can.c	  6243       Note:
; ..\component\Can\Implementation\Can.c	  6244       When the M_CAN has been integrated correctly, this can only occur in case of a Message RAM/Arbiter problem.
; ..\component\Can\Implementation\Can.c	  6245       if(IR.MRAF .AND. IR.WDI) then just Acknowledge and proceed for further messages. */
; ..\component\Can\Implementation\Can.c	  6246    /* Start value of the Message RAM Watchdog Counter. With the reset value of '0' the counter is disabled. 
; ..\component\Can\Implementation\Can.c	  6247       A Message RAM access via the M_CAN's Master Interface starts the Watchdog Counter with RWD.WDC. 
; ..\component\Can\Implementation\Can.c	  6248       The counter is reloaded with RWD.WDC when the Message RAM signals successful completion. 
; ..\component\Can\Implementation\Can.c	  6249       In case there is no response from the Message RAM until the counter has counted down to zero, 
; ..\component\Can\Implementation\Can.c	  6250       the counter stops and IR.WDI is set. 
; ..\component\Can\Implementation\Can.c	  6251       The RAM Watchdog Counter is clocked by the Host clock. */
; ..\component\Can\Implementation\Can.c	  6252    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->RWD), (vuint32)kCan_RWD, kCanRegCheckMaskRWD, initPara);  /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a14]
.L2119:

; ..\component\Can\Implementation\Can.c	  6253    
; ..\component\Can\Implementation\Can.c	  6254  #if ( CAN_MCAN_REVISION >= 0x310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  6255  # if defined( C_ENABLE_CAN_FD_USED )
; ..\component\Can\Implementation\Can.c	  6256    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &Cn->FBTP, Can_GetCanFBTP(initPara->initObject), kCan_ALL_ONE, initPara );  /* PRQA S 0303,2986 */ /* MD_Can_HwAccess,MD_Can_ConstValue */   /* SBSW_CAN_HL36 */ /* Fast Bit Timing and Prescaler Register (FBTP) */ 
	mov	d0,#0
	movh.a	a2,#@his(Can_FBTP)
.L2120:
	mov.a	a15,d15
.L1171:
	lea	a2,[a2]@los(Can_FBTP)
.L1173:
	st.w	[a15]276,d0
.L1174:

; ..\component\Can\Implementation\Can.c	  6257    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &Cn->TDCR, Can_GetCanTDCR(initPara->initObject), kCan_ALL_ONE, initPara );  /* PRQA S 0303,2986 */ /* MD_Can_HwAccess,MD_Can_ConstValue */   /* SBSW_CAN_HL36 */ /* Transmitter Delay Compensation Register (TDCR.[TDCO|TDCF]) */
; ..\component\Can\Implementation\Can.c	  6258  # else
; ..\component\Can\Implementation\Can.c	  6259    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &Cn->FBTP, kCanFBTP_TDC_Disable, kCan_ALL_ONE, initPara );                         /* PRQA S 0303,2986 */ /* MD_Can_HwAccess,MD_Can_ConstValue */   /* SBSW_CAN_HL36 */ /* Transceiver Delay Compensation disabled */
; ..\component\Can\Implementation\Can.c	  6260    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &Cn->TDCR, kCanTDCR_TDC_Disable, kCan_ALL_ONE, initPara );                         /* PRQA S 0303,2986 */ /* MD_Can_HwAccess,MD_Can_ConstValue */   /* SBSW_CAN_HL36 */ /* Transceiver Delay Compensation disabled */
; ..\component\Can\Implementation\Can.c	  6261  # endif
; ..\component\Can\Implementation\Can.c	  6262  #else  /* MCAN Core Release < 0x310UL */
; ..\component\Can\Implementation\Can.c	  6263     
; ..\component\Can\Implementation\Can.c	  6264    {
; ..\component\Can\Implementation\Can.c	  6265  # if defined( C_ENABLE_CAN_FD_USED )
; ..\component\Can\Implementation\Can.c	  6266    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &Cn->FBTP, Can_GetCanFBTP(initPara->initObject),kCan_ALL_ONE, initPara );  /* PRQA S 0303,2986 */ /* MD_Can_HwAccess,MD_Can_ConstValue */  /* SBSW_CAN_HL36 */ /* Fast Bit Timing and Prescaler Register (FBTP) */
; ..\component\Can\Implementation\Can.c	  6267  # else
; ..\component\Can\Implementation\Can.c	  6268    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &Cn->FBTP, kCanFBTP_TDC_Disable, kCan_ALL_ONE, initPara );                        /* PRQA S 0303,2986 */ /* MD_Can_HwAccess,MD_Can_ConstValue */  /* SBSW_CAN_HL36 */ /* Transceiver Delay Compensation disabled */
; ..\component\Can\Implementation\Can.c	  6269  #  endif 
; ..\component\Can\Implementation\Can.c	  6270    }
; ..\component\Can\Implementation\Can.c	  6271  #endif  /* CAN_MCAN_REVISION >= 0x310UL */
; ..\component\Can\Implementation\Can.c	  6272    
; ..\component\Can\Implementation\Can.c	  6273    /* Bit Timing and Prescaler Register (BTP) */
; ..\component\Can\Implementation\Can.c	  6274    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &Cn->BTP,Can_GetCanBTP(initPara->initObject),kCan_ALL_ONE, initPara ); /* PRQA S 0303,2986 */ /* MD_Can_HwAccess,MD_Can_ConstValue */  /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  6275  
; ..\component\Can\Implementation\Can.c	  6276    /* TSCC-Timestamp Counter Configuration Register */
; ..\component\Can\Implementation\Can.c	  6277  #if defined ( C_ENABLE_CAN_FD_USED ) && (kCan_TSCC_TSS > 0)
; ..\component\Can\Implementation\Can.c	  6278  #  error ">>> Note: With CAN FD an external counter is required for timestamp generation (TSCC.TSS = "10") <<<"
; ..\component\Can\Implementation\Can.c	  6279  #endif
; ..\component\Can\Implementation\Can.c	  6280    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->TSCC), (vuint32)(kCan_TSCC_TCP|kCan_TSCC_TSS), kCanRegCheckMaskTSCC, initPara); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_100 */ /* '0' = keep the counter quiet - otherwise use (kCan_TSCC_TCP|kCan_TSCC_TSS) */
; ..\component\Can\Implementation\Can.c	  6281    /* TSCV-Timestamp Counter Value Register 
; ..\component\Can\Implementation\Can.c	  6282       With TSCC[TSS] = '01' the Counter is incremented. The counter value is captured on start of frame (both Rx and Tx).
; ..\component\Can\Implementation\Can.c	  6283       A wrap around sets interrupt flag IR[TSW].
; ..\component\Can\Implementation\Can.c	  6284       Write access resets the counter to zero. */
; ..\component\Can\Implementation\Can.c	  6285    Cn->TSCV = 0x00000000UL;   /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6286    
; ..\component\Can\Implementation\Can.c	  6287    /* TOCC-Timeout Counter Configuration Register */
; ..\component\Can\Implementation\Can.c	  6288    /* Note: If CAN FD BRS feature is used then the timeout counter is clocked differently in arbitration and data field. */
; ..\component\Can\Implementation\Can.c	  6289  #if ( CAN_BOSCH_ERRATUM_012 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	  6290    {
; ..\component\Can\Implementation\Can.c	  6291      (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->TOCC), (vuint32)( (vuint32)(kCan_TOCC_TOP<<16) | kCan_TOCC_TOS | kCan_TOCC_ETOC ), kCanRegCheckMaskTOCC, initPara); /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6292    }
; ..\component\Can\Implementation\Can.c	  6293  #else
; ..\component\Can\Implementation\Can.c	  6294    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->TOCC), (vuint32)(0UL), kCanRegCheckMaskTOCC, initPara);  /* SBSW_CAN_LL_100 */     /* '0' = keep the counter quiet */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6295  #endif
; ..\component\Can\Implementation\Can.c	  6296    /* TOP[15:0]  Timeout Period - Start value of the Timeout Counter (down-counter).
; ..\component\Can\Implementation\Can.c	  6297       TOS[29:30] Timeout Select - When operating in Continuous mode, a write to TOCV presets the counter to TOCC[TOP] and continues down-counting. 
; ..\component\Can\Implementation\Can.c	  6298                                   00=Continuous operation, 01/10/11=controlled by Tx Event FIFO/by Rx FIFO 0/by Rx FIFO 1
; ..\component\Can\Implementation\Can.c	  6299       ETOC[31]   '1' = Enable Timeout Counter */
; ..\component\Can\Implementation\Can.c	  6300    /* TOCV-Timeout Counter Value Register
; ..\component\Can\Implementation\Can.c	  6301       The Timeout Counter is decremented in multiples of CAN bit times depending on the configuration of TSCC.TCP. 
; ..\component\Can\Implementation\Can.c	  6302       When decremented to zero, interrupt flag IR.TOO is set and the Timeout Counter is stopped. 
; ..\component\Can\Implementation\Can.c	  6303       Start and reset/restart conditions are configured via TOCC.TOS. */
; ..\component\Can\Implementation\Can.c	  6304    Cn->TOCV = 0x00000000UL;   /* SBSW_CAN_LL_100 */   /* PRQA S 0303 */ /* MD_Can_HwAccess */ 
; ..\component\Can\Implementation\Can.c	  6305    
; ..\component\Can\Implementation\Can.c	  6306    /* The counters of the Error Management Logic EML are unchanged. */
; ..\component\Can\Implementation\Can.c	  6307    initPara->tmpVal = Cn->ECR; /* CAN error logging is reset by read access to ECR[CEL] */  /* PRQA S 3198,3199,0303 */ /* MD_MSR_14.2,MD_MSR_14.2,MD_Can_HwAccess */ /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  6308    CAN_DUMMY_STATEMENT(initPara->tmpVal);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */  /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  6309    /* Global settings for Message ID filtering. 
; ..\component\Can\Implementation\Can.c	  6310       The GFC controls the filter path for standard and extended messages */
; ..\component\Can\Implementation\Can.c	  6311    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST  &Cn->GFC,Can_GetCanGFC(canHwChannel), kCan_ALL_ONE, initPara );   /* PRQA S 0303,2986 */ /* MD_Can_HwAccess,MD_Can_ConstValue */  /* SBSW_CAN_HL36 */ /* accept/reject non matching and remote (Std/Ext) frames */
; ..\component\Can\Implementation\Can.c	  6312  
; ..\component\Can\Implementation\Can.c	  6313    /* Acceptance filtering of ext. frames the "Ext-ID AND Mask (XIDAM)" is ANDed with the received Message ID */
; ..\component\Can\Implementation\Can.c	  6314    /* There are two possibilities when range filtering is used together with extended frames:
; ..\component\Can\Implementation\Can.c	  6315       EFT = '00': The ID of received frames is ANDed with XIDAM before the range filter is applied
; ..\component\Can\Implementation\Can.c	  6316       EFT = '11': XIDAM is not used for range filtering.
; ..\component\Can\Implementation\Can.c	  6317       Intended for masking of 29-bit IDs in SAE J1939. With the reset value of all bits set to one the mask is not active. */
; ..\component\Can\Implementation\Can.c	  6318  
; ..\component\Can\Implementation\Can.c	  6319    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST  &Cn->XIDAM,(Can_GetCanXIDAM(canHwChannel)), kCan_ALL_ONE, initPara );  /* PRQA S 0303,2986 */ /* MD_Can_HwAccess,MD_Can_ConstValue */  /* SBSW_CAN_HL36 */
; ..\component\Can\Implementation\Can.c	  6320  
; ..\component\Can\Implementation\Can.c	  6321    /* Rx Buffer Start Address (RBSA) configures the start address of the Rx Buffers section in the Message RAM */
; ..\component\Can\Implementation\Can.c	  6322    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->RXBC), (vuint32)Can_GetCanRXBC(canHwChannel), kCanRegCheckMaskRXBC, initPara);   /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */  /* Rx Buffer Start Address (RBSA) configures the start address of the Rx Buffers section in the Message RAM */
; ..\component\Can\Implementation\Can.c	  6323  #if defined(C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  6324    /* Rx Buffer/FIFO Element Size Configuration (RXESC): number of data bytes for an Rx element, sizes >8 bytes are for CAN FD only.
; ..\component\Can\Implementation\Can.c	  6325       RBDS: Rx Buffer Data Field Size = 8,12,16,20,24,32,48,64 byte
; ..\component\Can\Implementation\Can.c	  6326       F1DS: Rx FIFO 1 Data Field Size = 8,12,16,20,24,32,48,64 byte
; ..\component\Can\Implementation\Can.c	  6327       F0DS: Rx FIFO 0 Data Field Size = 8,12,16,20,24,32,48,64 byte
; ..\component\Can\Implementation\Can.c	  6328       Note: In case the data field size of an accepted CAN frame exceeds the data field size configured for the matching Rx element, 
; ..\component\Can\Implementation\Can.c	  6329             only the number of bytes as configured by RXESC are stored. The rest of the frame data field is ignored. */
; ..\component\Can\Implementation\Can.c	  6330    LocalRegValue = (vuint32)( (((vuint32)Can_GetRBDSOfShmElementSize(canHwChannel))<<8) | (((vuint32)Can_GetF1DSOfShmElementSize(canHwChannel))<<4) | ((vuint32)Can_GetF0DSOfShmElementSize(canHwChannel)) );
	movh.a	a5,#@his(Can_ShmElementSize)
.L1176:
	ld.hu	d15,[a10]0
.L2121:
	ld.w	d1,[a14]
.L2122:
	addsc.a	a2,a2,d15,#2
.L2123:
	mov.a	a15,d1
.L2124:
	ld.w	d1,[a2]
.L2125:
	st.w	[a15]268,d1
.L1177:
	movh.a	a2,#@his(Can_TDCR)
.L2126:
	ld.w	d1,[a14]
.L2127:
	lea	a2,[a2]@los(Can_TDCR)
	addsc.a	a2,a2,d15,#0
.L2128:
	mov.a	a15,d1
.L2129:
	ld.bu	d1,[a2]
.L2130:
	st.w	[a15]328,d1
.L1178:
	movh.a	a2,#@his(Can_BTP)
.L2131:
	ld.w	d1,[a14]
.L2132:
	lea	a2,[a2]@los(Can_BTP)
	addsc.a	a2,a2,d15,#2
.L2133:
	mov.a	a15,d1
.L2134:
	ld.w	d15,[a2]
.L2135:
	st.w	[a15]284,d15
.L1179:
	movh.a	a2,#@his(Can_GFC)
.L1180:
	ld.w	d15,[a14]
.L1184:
	lea	a5,[a5]@los(Can_ShmElementSize)
.L1186:
	mov.a	a15,d15
.L1187:

; ..\component\Can\Implementation\Can.c	  6331    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->RXESC.R), (vuint32)LocalRegValue, kCanRegCheckMaskRXESC, initPara);    /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6332  #else
; ..\component\Can\Implementation\Can.c	  6333    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->RXESC.R), (vuint32)(0x00000000UL), kCanRegCheckMaskRXESC, initPara);    /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* Reset to default value */
; ..\component\Can\Implementation\Can.c	  6334  #endif
; ..\component\Can\Implementation\Can.c	  6335  
; ..\component\Can\Implementation\Can.c	  6336    /* #60 support (Multiple) BasicCAN */
; ..\component\Can\Implementation\Can.c	  6337  #if defined( C_ENABLE_RX_BASICCAN_OBJECTS )
; ..\component\Can\Implementation\Can.c	  6338    /* Rx FIFO 0 Configuration (RXF0C) */
; ..\component\Can\Implementation\Can.c	  6339    if(Can_GetRxBasicHandleMax(canHwChannel) > 0u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 2741 */ /* MD_Can_ConstValue */
	lea	a4,[a14]9
.L1188:
	st.w	[a15]288,d0
.L1189:
	ld.w	d15,[a14]
.L2136:
	mov.a	a15,d15
.L2137:
	st.w	[a15]292,d0
.L1190:
	ld.w	d15,[a14]
.L2138:
	mov.a	a15,d15
.L2139:
	st.w	[a15]296,d0
.L1191:
	ld.w	d15,[a14]
.L2140:
	mov.a	a15,d15
.L2141:
	st.w	[a15]300,d0
.L2142:
	ld.w	d15,[a14]
.L2143:
	mov.a	a15,d15
	ld.w	d15,[a15]320
.L2144:
	st.w	[a10]26,d15
.L1182:
	ld.bu	d15,[a2]@los(Can_GFC)
.L2145:
	st.w	[a15]384,d15
.L1183:
	movh.a	a2,#@his(Can_XIDAM)
.L2146:
	ld.w	d15,[a14]
.L2147:
	mov.a	a15,d15
.L2148:
	ld.w	d15,[a2]@los(Can_XIDAM)
.L2149:
	st.w	[a15]400,d15
.L1192:
	movh.a	a15,#@his(Can_BufferConfig)
.L2150:
	ld.w	d15,[a14]
.L2151:
	lea	a15,[a15]@los(Can_BufferConfig)
.L2152:
	mov.a	a2,d15
.L2153:
	ld.bu	d15,[a15]8
.L2154:
	st.w	[a2]428,d15
.L1193:
	ld.bu	d15,[a5]2
.L2155:
	sh	d0,d15,#8
	ld.bu	d15,[a5]1
.L2156:
	sh	d15,#4
.L2157:
	or	d0,d15
	ld.bu	d15,[a5]
.L1284:
	or	d0,d15
	ld.w	d15,[a14]
.L1194:
	mov.a	a2,d15
.L2158:
	st.w	[a2]444,d0
.L1195:

; ..\component\Can\Implementation\Can.c	  6340    {
; ..\component\Can\Implementation\Can.c	  6341      (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->RXF0C.R), (vuint32)(Can_GetCanRXF0C(canHwChannel)), kCanRegCheckMaskRXF0C, initPara);    /* SBSW_CAN_LL_100 */  /* PRQA S 0303 */ /* MD_Can_HwAccess */  /* Using default value kCanRXFnOM_BLOCK */
	ld.w	d15,[a14]
.L2159:
	addi	d15,d15,#416
.L2160:
	mov.a	a2,d15
.L1196:
	ld.bu	d15,[a4]
.L2161:

; ..\component\Can\Implementation\Can.c	  6339    if(Can_GetRxBasicHandleMax(canHwChannel) > 0u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 2741 */ /* MD_Can_ConstValue */      (inlined)
	jeq	d15,#0,.L17
.L1198:
	ld.w	d15,[a15]

; ..\component\Can\Implementation\Can.c	  6339    if(Can_GetRxBasicHandleMax(canHwChannel) > 0u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 2741 */ /* MD_Can_ConstValue */      (inlined)
.L17:
	st.w	[a2],d15
.L1199:
	mov	d0,#0
.L1285:

; ..\component\Can\Implementation\Can.c	  6342    }
; ..\component\Can\Implementation\Can.c	  6343    else
; ..\component\Can\Implementation\Can.c	  6344    { 
; ..\component\Can\Implementation\Can.c	  6345      (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->RXF0C.R), (vuint32)(0x00000000UL), kCanRegCheckMaskRXF0C, initPara);   /* SBSW_CAN_LL_100 */   /* PRQA S 0303,2880 */ /* MD_Can_HwAccess,MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  6346    }
; ..\component\Can\Implementation\Can.c	  6347    /* RXF0S-Rx FIFO 0 Status Register (reset with CCCR.INIT) */
; ..\component\Can\Implementation\Can.c	  6348    /* RXF0A-Rx FIFO 0 Acknowledge Register (reset with CCCR.INIT)
; ..\component\Can\Implementation\Can.c	  6349       After reading a message (or a sequence of messages) the buffer index of the last element read has to be written to F0AI. 
; ..\component\Can\Implementation\Can.c	  6350       This sets the Get Index to F0AI + 1 and updates the Fill Level */
; ..\component\Can\Implementation\Can.c	  6351    
; ..\component\Can\Implementation\Can.c	  6352  # if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	  6353    /* Rx FIFO 1 Configuration (RXF1C) */
; ..\component\Can\Implementation\Can.c	  6354    if(Can_GetRxBasicHandleMax(canHwChannel) > 1u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 2741 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  6355    {
; ..\component\Can\Implementation\Can.c	  6356      (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->RXF1C.R), (vuint32)(Can_GetCanRXF1C(canHwChannel)), kCanRegCheckMaskRXF1C, initPara); /* SBSW_CAN_LL_100 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* Using default value kCanRXFnOM_BLOCK */
; ..\component\Can\Implementation\Can.c	  6357    }
; ..\component\Can\Implementation\Can.c	  6358    else
; ..\component\Can\Implementation\Can.c	  6359    { 
; ..\component\Can\Implementation\Can.c	  6360      (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->RXF1C.R), (vuint32)(0x00000000UL), kCanRegCheckMaskRXF1C, initPara);   /* SBSW_CAN_LL_100 */ /* PRQA S 0303, 2880 */ /* MD_Can_HwAccess, MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  6361    }
; ..\component\Can\Implementation\Can.c	  6362  # else
; ..\component\Can\Implementation\Can.c	  6363    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->RXF1C.R), (vuint32)(0x00000000UL), kCanRegCheckMaskRXF1C, initPara);    /* SBSW_CAN_LL_100 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* Fifo 1 not supported */
	ld.w	d15,[a14]
.L2162:
	mov.a	a2,d15
.L2163:
	st.w	[a2]432,d0
.L1200:

; ..\component\Can\Implementation\Can.c	  6364  # endif
; ..\component\Can\Implementation\Can.c	  6365    /* RXF1S-Rx FIFO 1 Status Register */
; ..\component\Can\Implementation\Can.c	  6366    /* RXF1A-Rx FIFO 1 Acknowledge Register 
; ..\component\Can\Implementation\Can.c	  6367       After reading a message (or a sequence of messages) the buffer index of the last element read has to be written to F0AI. 
; ..\component\Can\Implementation\Can.c	  6368       This sets the Get Index to F0AI + 1 and updates the Fill Level */
; ..\component\Can\Implementation\Can.c	  6369  #else /* C_ENABLE_RX_BASICCAN_OBJECTS */
; ..\component\Can\Implementation\Can.c	  6370    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->RXF0C.R), (vuint32)(0x00000000UL), kCanRegCheckMaskRXF0C, initPara);    /* SBSW_CAN_LL_100 */   /* Fifo 0 not supported */  /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6371    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->RXF1C.R), (vuint32)(0x00000000UL), kCanRegCheckMaskRXF1C, initPara);    /* SBSW_CAN_LL_100 */   /* Fifo 1 not supported */  /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6372  #endif /* C_ENABLE_RX_BASICCAN_OBJECTS */
; ..\component\Can\Implementation\Can.c	  6373    
; ..\component\Can\Implementation\Can.c	  6374    /* Tx Buffer Configuration (TXBC): */
; ..\component\Can\Implementation\Can.c	  6375    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->TXBC), (vuint32)(Can_GetCanTXBC(canHwChannel)), kCanRegCheckMaskTXBC, initPara);   /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a14]
.L2164:
	mov.a	a2,d15
.L2165:
	ld.w	d15,[a15]4
.L2166:
	st.w	[a2]448,d15
.L1201:

; ..\component\Can\Implementation\Can.c	  6376    /* #70 support Tx side */
; ..\component\Can\Implementation\Can.c	  6377  
; ..\component\Can\Implementation\Can.c	  6378  #if defined( C_ENABLE_CAN_FD_FULL )
; ..\component\Can\Implementation\Can.c	  6379    /* Tx Buffer Element Size Configuration (TXESC): number of data bytes for a Tx Buffer element, sizes >8 bytes are for CAN FD only. */
; ..\component\Can\Implementation\Can.c	  6380    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->TXESC), (vuint32)(Can_GetTBDSOfShmElementSize(canHwChannel)), kCanRegCheckMaskTXESC, initPara);   /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a14]
.L2167:
	mov.a	a2,d15
.L2168:
	ld.bu	d15,[+a5]3
.L2169:
	st.w	[a2]456,d15
.L1202:

; ..\component\Can\Implementation\Can.c	  6381    /*  Tx Buffer Data Field Size = 8,12,16,20,24,32,48,64 byte
; ..\component\Can\Implementation\Can.c	  6382        Note: In case the data length code DLC of a Tx Buffer element is configured to a value higher than the Tx Buffer data field size, 
; ..\component\Can\Implementation\Can.c	  6383        the bytes not defined by the Tx Buffer are transmitted as '0xCC' (padding bytes). */
; ..\component\Can\Implementation\Can.c	  6384  #else
; ..\component\Can\Implementation\Can.c	  6385    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->TXESC), (vuint32)(0x00000000UL), kCanRegCheckMaskTXESC, initPara);   /* SBSW_CAN_LL_100 */    /* 8 data bytes */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6386  #endif
; ..\component\Can\Implementation\Can.c	  6387  
; ..\component\Can\Implementation\Can.c	  6388    /* Tx Event FIFO Configuration (TXEFC) */
; ..\component\Can\Implementation\Can.c	  6389    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->TXEFC), (vuint32)(0x00000000UL), kCanRegCheckMaskTXEFC, initPara);   /* SBSW_CAN_LL_100 */    /* No Tx Event Fifo supported */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a14]
.L2170:
	mov.a	a15,d15
.L2171:
	st.w	[a15]496,d0
.L1203:

; ..\component\Can\Implementation\Can.c	  6390  
; ..\component\Can\Implementation\Can.c	  6391    /* #80 interrupt control */
; ..\component\Can\Implementation\Can.c	  6392    /* Interrupt registers */
; ..\component\Can\Implementation\Can.c	  6393    initPara->ie     = kCanIE_DISABLE_ALL; /* SBSW_CAN_LL_109 */ 
	st.w	[a10]6,d0
.L2172:

; ..\component\Can\Implementation\Can.c	  6394    initPara->txbtie = kCanIE_DISABLE_ALL; /* SBSW_CAN_LL_109 */ 
	st.w	[a10]14,d0
.L2173:

; ..\component\Can\Implementation\Can.c	  6395  
; ..\component\Can\Implementation\Can.c	  6396  #if( (!defined( C_ENABLE_RX_BASICCAN_POLLING )) || (defined( C_ENABLE_INDIVIDUAL_POLLING )) )    /* COV_CAN_CBD_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	  6397    if(Can_GetRxBasicHandleMax(canHwChannel) > 0u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 2741 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  6398    {
; ..\component\Can\Implementation\Can.c	  6399  # if defined( C_ENABLE_INDIVIDUAL_POLLING )
; ..\component\Can\Implementation\Can.c	  6400      if(Can_IsMailboxIndivPolling(CAN_HL_MB_RX_BASIC_STARTINDEX(canHwChannel)) == kCanFalse) /* PRQA S 1881 */ /* MD_MSR_AutosarBoolean */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6401  # endif /* C_ENABLE_INDIVIDUAL_POLLING */
; ..\component\Can\Implementation\Can.c	  6402      {
; ..\component\Can\Implementation\Can.c	  6403        initPara->ie |= kCanIR_RF0N; /* SBSW_CAN_LL_109 */ /* use new msg */
; ..\component\Can\Implementation\Can.c	  6404      }
; ..\component\Can\Implementation\Can.c	  6405    }
; ..\component\Can\Implementation\Can.c	  6406  # if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	  6407    if(Can_GetRxBasicHandleMax(canHwChannel) > 1u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 2741 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  6408    {
; ..\component\Can\Implementation\Can.c	  6409  #  if defined( C_ENABLE_INDIVIDUAL_POLLING )
; ..\component\Can\Implementation\Can.c	  6410      if(Can_IsMailboxIndivPolling(CAN_HL_MB_RX_BASIC_STARTINDEX(canHwChannel) + 1u) == kCanFalse) /* PRQA S 1881 */ /* MD_MSR_AutosarBoolean */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6411  #  endif /* C_ENABLE_INDIVIDUAL_POLLING */
; ..\component\Can\Implementation\Can.c	  6412      {
; ..\component\Can\Implementation\Can.c	  6413        initPara->ie |= kCanIR_RF1N; /* SBSW_CAN_LL_109 */   /* use new msg */
; ..\component\Can\Implementation\Can.c	  6414      }
; ..\component\Can\Implementation\Can.c	  6415    }
; ..\component\Can\Implementation\Can.c	  6416  # endif /* C_ENABLE_MULTIPLE_BASICCAN */
; ..\component\Can\Implementation\Can.c	  6417  #endif  /* C_ENABLE_RX_BASICCAN_POLLING || C_ENABLE_INDIVIDUAL_POLLING */
; ..\component\Can\Implementation\Can.c	  6418  
; ..\component\Can\Implementation\Can.c	  6419  #if defined( C_ENABLE_RX_FULLCAN_OBJECTS )
; ..\component\Can\Implementation\Can.c	  6420  #  if( (!defined( C_ENABLE_RX_FULLCAN_POLLING )) || (defined( C_ENABLE_INDIVIDUAL_POLLING )) )
; ..\component\Can\Implementation\Can.c	  6421    initPara->ie |= (kCanIR_DRX); /* SBSW_CAN_LL_109 */   /*    Bit 12 DRX     Message stored to Dedicated Rx Buffer */
; ..\component\Can\Implementation\Can.c	  6422    /* After the last word of a matching Rx message has been written to the Message RAM the NDF within NDAT1,2 is set. 
; ..\component\Can\Implementation\Can.c	  6423       As long as the NDF is set, the respective Rx Buffer is locked. The NDF has to be reset by the Host.
; ..\component\Can\Implementation\Can.c	  6424       While a specific NDF is set the refering Filter Element will not match, causing the acceptance filtering to continue. 
; ..\component\Can\Implementation\Can.c	  6425       Subsequent Filter Elements may cause the received message to be stored into 
; ..\component\Can\Implementation\Can.c	  6426       - another Rx Buffer, or 
; ..\component\Can\Implementation\Can.c	  6427       - an Rx FIFO, or
; ..\component\Can\Implementation\Can.c	  6428       - the message may be rejected. */
; ..\component\Can\Implementation\Can.c	  6429  # endif /* C_ENABLE_RX_FULLCAN_POLLING || C_ENABLE_INDIVIDUAL_POLLING */
; ..\component\Can\Implementation\Can.c	  6430  #endif /* C_ENABLE_RX_FULLCAN_OBJECTS */
; ..\component\Can\Implementation\Can.c	  6431  
; ..\component\Can\Implementation\Can.c	  6432  #if !defined(C_ENABLE_TX_POLLING) || defined( C_ENABLE_INDIVIDUAL_POLLING )
; ..\component\Can\Implementation\Can.c	  6433    /* Bit 19 TEFNE   Tx Event FIFO New Entry Interrupt Enable
; ..\component\Can\Implementation\Can.c	  6434       Bit 21 TCFE    Transmission Cancellation Finished Interrupt Enable
; ..\component\Can\Implementation\Can.c	  6435       Bit 22 TCE     Transmission Completed Interrupt Enable */
; ..\component\Can\Implementation\Can.c	  6436    initPara->ie |= (kCanIR_TC); /* SBSW_CAN_LL_109 */
	mov	d0,#512
.L2174:
	ld.bu	d15,[a4]
.L2175:
	addih	d0,d0,#514
.L2176:
	ne	d15,d15,#0
.L2177:
	or	d0,d15
.L2178:

; ..\component\Can\Implementation\Can.c	  6456    if(Can_GetRxBasicHandleMax(canHwChannel) > 0u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 2741 */ /* MD_Can_ConstValue */      (inlined)
	jeq	d15,#0,.L19
.L2179:

; ..\component\Can\Implementation\Can.c	  6437  #endif
; ..\component\Can\Implementation\Can.c	  6438  #if !defined(C_ENABLE_ERROR_POLLING)
; ..\component\Can\Implementation\Can.c	  6439    initPara->ie |= (kCanIR_BO); /* SBSW_CAN_LL_109 */   /* BusOff */
; ..\component\Can\Implementation\Can.c	  6440    initPara->ie |= (kCanIR_MRAF); /* SBSW_CAN_LL_109 */ 
; ..\component\Can\Implementation\Can.c	  6441    /* Bit 0  STEE    Stuff Error Interrupt Enable
; ..\component\Can\Implementation\Can.c	  6442       Bit 1  FOEE    Format Error Interrupt Enable
; ..\component\Can\Implementation\Can.c	  6443       Bit 2  ACKEE   Acknowledge Error Interrupt Enable
; ..\component\Can\Implementation\Can.c	  6444       Bit 3  BEE     Bit Error Interrupt Disable
; ..\component\Can\Implementation\Can.c	  6445       Bit 4  CRCEE   CRC Error Interrupt Enable
; ..\component\Can\Implementation\Can.c	  6446       Bit 5  WDIE    Watchdog Interrupt Enable
; ..\component\Can\Implementation\Can.c	  6447       Bit 6  BOE     Bus_Off Status Interrupt Enable
; ..\component\Can\Implementation\Can.c	  6448       Bit 7  EWE     Warning Status Interrupt Enable
; ..\component\Can\Implementation\Can.c	  6449       Bit 8  EPE     Error Passive Interrupt Enable
; ..\component\Can\Implementation\Can.c	  6450       Bit 9  ELO     Error Logging Overflow Enable
; ..\component\Can\Implementation\Can.c	  6451       Bit10  BEU     Bit Error Uncorrected Enable
; ..\component\Can\Implementation\Can.c	  6452       Bit11  BEC     Bit Error Corrected Enable
; ..\component\Can\Implementation\Can.c	  6453       Bit17  MRAF    Message RAM Access Failure (since MCAN 3.0.0)
; ..\component\Can\Implementation\Can.c	  6454       Bit27  PEA     Protocol Error in Arbitration Phase (since MCAN 3.1.0) */
; ..\component\Can\Implementation\Can.c	  6455  # if defined( C_ENABLE_RX_BASICCAN_OBJECTS )
; ..\component\Can\Implementation\Can.c	  6456    if(Can_GetRxBasicHandleMax(canHwChannel) > 0u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 2741 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  6457    {
; ..\component\Can\Implementation\Can.c	  6458      initPara->ie |= kCanIR_RF0L;  /* use overrun */ /* SBSW_CAN_LL_109 */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
	or	d0,d0,#8

; ..\component\Can\Implementation\Can.c	  6456    if(Can_GetRxBasicHandleMax(canHwChannel) > 0u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 2741 */ /* MD_Can_ConstValue */      (inlined)
.L19:

; ..\component\Can\Implementation\Can.c	  6459    }
; ..\component\Can\Implementation\Can.c	  6460  #  if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	  6461    if(Can_GetRxBasicHandleMax(canHwChannel) > 1u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 2741 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  6462    {
; ..\component\Can\Implementation\Can.c	  6463      initPara->ie |= kCanIR_RF1L;  /* use overrun */ /* SBSW_CAN_LL_109 */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6464    }
; ..\component\Can\Implementation\Can.c	  6465  #  endif
; ..\component\Can\Implementation\Can.c	  6466  # endif
; ..\component\Can\Implementation\Can.c	  6467  #endif
; ..\component\Can\Implementation\Can.c	  6468  
; ..\component\Can\Implementation\Can.c	  6469    /* #90 if available keep TTCAN quiet */
; ..\component\Can\Implementation\Can.c	  6470  #if defined ( C_ENABLE_TTCAN_AVAILABLE ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  6471    if(Can_IsIsTTCan(canHwChannel)) /* TTCAN */ /* COV_CAN_HW_SPECIFIC */
	st.w	[a10]6,d0
.L2180:
	ld.bu	d15,[a14]6
.L2181:

; ..\component\Can\Implementation\Can.c	  6471    if(Can_IsIsTTCan(canHwChannel)) /* TTCAN */ /* COV_CAN_HW_SPECIFIC */      (inlined)
	jeq	d15,#0,.L20
.L1204:

; ..\component\Can\Implementation\Can.c	  6472    {
; ..\component\Can\Implementation\Can.c	  6473      /* TT Operation Configuration Register:  Event-driven CAN communication, Application Watchdog disabled  */
; ..\component\Can\Implementation\Can.c	  6474      (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->TTOCF), (vuint32)(0x00000000UL), kCanRegCheckMaskTTOCF, initPara);   /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a14]
.L2182:
	mov.a	a15,d15
.L2183:
	mov	d15,#0
.L2184:
	st.w	[a15]520,d15

; ..\component\Can\Implementation\Can.c	  6471    if(Can_IsIsTTCan(canHwChannel)) /* TTCAN */ /* COV_CAN_HW_SPECIFIC */      (inlined)
.L20:

; ..\component\Can\Implementation\Can.c	  6475    }
; ..\component\Can\Implementation\Can.c	  6476  #endif
; ..\component\Can\Implementation\Can.c	  6477  
; ..\component\Can\Implementation\Can.c	  6478    return(kCanOk); /* independent of RAM Check failure(s) returned within para struct */
; ..\component\Can\Implementation\Can.c	  6479  } /* PRQA S 6010,6030,6050 */ /* MD_MSR_STPTH,MD_MSR_STCYC,MD_MSR_STCAL */ 
; ..\component\Can\Implementation\Can.c	  6480  /* CanLL_SetAllRegister */
; ..\component\Can\Implementation\Can.c	  6481  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  6482  
; ..\component\Can\Implementation\Can.c	  6483  
; ..\component\Can\Implementation\Can.c	  6484  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  6485  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  6486  | NAME:             CanLL_SetRegisterMcMcan
; ..\component\Can\Implementation\Can.c	  6487  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  6488  /*!
; ..\component\Can\Implementation\Can.c	  6489   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  6490   *
; ..\component\Can\Implementation\Can.c	  6491   *
; ..\component\Can\Implementation\Can.c	  6492   *
; ..\component\Can\Implementation\Can.c	  6493   */
; ..\component\Can\Implementation\Can.c	  6494  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_SetRegisterMcMcan(CAN_CHANNEL_CANTYPE_FIRST CanInitParaStructPtr localInfo)
; ..\component\Can\Implementation\Can.c	  6495  {
; ..\component\Can\Implementation\Can.c	  6496    /* #10 Set Interrupt routing */
; ..\component\Can\Implementation\Can.c	  6497    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->GRINT1),(vuint32)(Can_GetINT_RoutingGroup(canHwChannel)),kCanRegCheckMaskMCMCAN_GRINT, localInfo); /* select Interrupt output line INT_O0 */ /* SBSW_CAN_LL_100 */ /* SBSW_CAN_HL36 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a14]
.L2185:
	movh.a	a2,#@his(Can_INT_RoutingGroup)
.L2186:
	mov.a	a15,d15
.L2187:
	ld.bu	d15,[a2]@los(Can_INT_RoutingGroup)
.L2188:
	st.w	[a15]20,d15
.L1206:
	movh.a	a7,#@his(Can_SIDFC)
.L1211:

; ..\component\Can\Implementation\Can.c	  6498    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->GRINT2),(vuint32)(Can_GetINT_RoutingGroup(canHwChannel)),kCanRegCheckMaskMCMCAN_GRINT, localInfo); /* for each CAN channel */ /* SBSW_CAN_LL_100 */ /* SBSW_CAN_HL36 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a14]
.L1212:
	lea	a7,[a7]@los(Can_SIDFC)
.L1213:
	mov.a	a15,d15
.L2189:
	ld.bu	d15,[a2]@los(Can_INT_RoutingGroup)
.L2190:
	st.w	[a15]24,d15
.L1214:
	movh.a	a2,#@his(Can_SIDFE)
.L1215:

; ..\component\Can\Implementation\Can.c	  6499    /* Node Timer Clock Control Register */
; ..\component\Can\Implementation\Can.c	  6500    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->NTCCR),(vuint32)(0x00000000UL),kCanRegCheckMaskMCMCANCH_NTCCR, localInfo); /* SBSW_CAN_LL_100 */ /* SBSW_CAN_HL36 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a14]
.L1216:
	lea	a2,[a2]@los(Can_SIDFE)
.L1217:
	mov.a	a15,d15
.L2191:
	mov	d15,#0
.L2192:
	st.w	[a15]32,d15
.L1226:

; ..\component\Can\Implementation\Can.c	  6501    /* Node Timer X Transmit Trigger Register */
; ..\component\Can\Implementation\Can.c	  6502    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->NTATTR),(vuint32)(0x00000000UL),kCanRegCheckMaskMCMCANCH_NTXTTR, localInfo); /* SBSW_CAN_LL_100 */ /* SBSW_CAN_HL36 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d0,[a14]
.L2193:
	mov.a	a15,d0
.L2194:
	st.w	[a15]36,d15
.L1227:

; ..\component\Can\Implementation\Can.c	  6503    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->NTBTTR),(vuint32)(0x00000000UL),kCanRegCheckMaskMCMCANCH_NTXTTR, localInfo); /* SBSW_CAN_LL_100 */ /* SBSW_CAN_HL36 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d0,[a14]
.L2195:
	mov.a	a15,d0
.L2196:
	st.w	[a15]40,d15
.L1228:

; ..\component\Can\Implementation\Can.c	  6504    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->NTCTTR),(vuint32)(0x00000000UL),kCanRegCheckMaskMCMCANCH_NTXTTR, localInfo); /* SBSW_CAN_LL_100 */ /* SBSW_CAN_HL36 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d0,[a14]
.L2197:
	mov.a	a15,d0
.L2198:
	st.w	[a15]44,d15
.L1229:

; ..\component\Can\Implementation\Can.c	  6505    /* Node Timer Receive Timeout Register */
; ..\component\Can\Implementation\Can.c	  6506    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->NTRTR),(vuint32)(0x00000000UL),kCanRegCheckMaskMCMCANCH_NTRTR, localInfo); /* SBSW_CAN_LL_100 */ /* SBSW_CAN_HL36 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d0,[a14]
.L2199:
	mov.a	a15,d0
.L2200:
	st.w	[a15]48,d15
.L1230:

; ..\component\Can\Implementation\Can.c	  6507   /* Node Port Control Register */
; ..\component\Can\Implementation\Can.c	  6508    (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->NPCR),(vuint32)(Can_GetRxSelectionOfControllerConfig(canHwChannel)),kCanRegCheckMaskMCMCAN_NPCR, localInfo); /* SBSW_CAN_LL_100 */ /* SBSW_CAN_HL36 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d0,[a14]
.L2201:
	mov.a	a15,d0
.L2202:
	ld.bu	d0,[a14]18
.L2203:
	st.w	[a15]64,d0
.L1218:
	ld.bu	d0,[a7]3
	addsc.a	a15,a2,d0,#2
.L2204:
	st.a	[a10]20,a15
.L2205:
	st.w	[a10]26,d15
.L2206:
	mov.aa	a2,a7
	ld.bu	d15,[+a2]1
.L2207:

; ..\component\Can\Implementation\Can.c	  6030    for(initPara->tmpVal = 0; initPara->tmpVal < (Can_GetCanSIDFC_LSSOfCanSIDFC(canHwChannel)); (initPara->tmpVal)++) /* SBSW_CAN_LL_109 */  /* SBSW_CAN_LL_109 */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */      (inlined)
	jeq	d15,#0,.L21
.L1231:
	movh.a	a4,#@his(Can_ShmAdr+12)
	lea	a4,[a4]@los(Can_ShmAdr+12)

; ..\component\Can\Implementation\Can.c	  6030    for(initPara->tmpVal = 0; initPara->tmpVal < (Can_GetCanSIDFC_LSSOfCanSIDFC(canHwChannel)); (initPara->tmpVal)++) /* SBSW_CAN_LL_109 */  /* SBSW_CAN_LL_109 */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */      (inlined)
.L22:
	ld.hu	d15,[a10]24
.L2208:
	ld.a	a15,[a10]20
.L2209:
	sh	d2,d15,#2
	ld.w	d1,[a4]
.L2210:
	ld.w	d0,[a10]26
.L2211:
	add	d1,d2
.L2212:
	addsc.a	a15,a15,d0,#2
.L2213:
	mov.a	a6,d1
.L2214:
	ld.w	d1,[a15]
.L1232:
	add	d15,#1
	st.w	[a6],d1
.L2215:
	add	d0,#1
	st.h	[a10]24,d15
.L2216:
	st.w	[a10]26,d0
.L2217:
	ld.bu	d15,[a2]
.L2218:

; ..\component\Can\Implementation\Can.c	  6030    for(initPara->tmpVal = 0; initPara->tmpVal < (Can_GetCanSIDFC_LSSOfCanSIDFC(canHwChannel)); (initPara->tmpVal)++) /* SBSW_CAN_LL_109 */  /* SBSW_CAN_LL_109 */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */      (inlined)
	jlt.u	d0,d15,.L22
.L21:
	mov	d0,#1
	st.b	[a10]4,d0
.L1234:
	movh.a	a2,#@his(Can_Mailbox)
.L2219:
	ld.bu	d15,[a14]13
.L2220:
	st.b	[a10]2,d15
.L2221:
	mul	d15,d15,#12
	lea	a2,[a2]@los(Can_Mailbox)
	addsc.a	a15,a2,d15,#0
	ld.bu	d15,[a15]3
.L2222:
	st.b	[a10]3,d15
.L2223:
	fcall	.cocofun_8
.L1241:
	movh.a	a15,#@his(Can_ShmAdr+24)
	ld.bu	d15,[a5]
	ld.w	d2,[a15]@los(Can_ShmAdr+24)
	movh.a	a15,#@his(CanLL_xES2Bytes)
	lea	a15,[a15]@los(CanLL_xES2Bytes)
	addsc.a	a15,a15,d15,#0
	ld.bu	d1,[a10]3
	ld.bu	d15,[a15]
	add	d15,d15,#8
	mul	d15,d1
.L2224:
	add	d2,d15
	st.w	[a10]32,d2
.L2225:
	mov	d15,#0
.L2226:
	ld.a	a15,[a10]32
.L2227:
	st.w	[a15]4,d15
.L2228:
	sh	d15,d0,d1
	st.w	[a10]14,d15
.L1235:
	st.b	[a10]4,d0
.L1246:
	ld.bu	d15,[a14]10
.L2229:
	st.b	[a10]2,d15
.L2230:
	mul	d0,d15,#12
	addsc.a	a15,a2,d0,#0
.L2231:
	ld.bu	d0,[a14]8
.L2232:
	sub	d0,d15
	jlt	d0,#1,.L25
	mov.a	a2,d0
	add.a	a2,#-1

; ..\component\Can\Implementation\Can.c	  2619    for (initPara->mailboxHandle = Can_GetRxBasicHandleStart(canHwChannel); initPara->mailboxHandle < Can_GetRxBasicHandleStop(canHwChannel); initPara->mailboxHandle++) /* PRQA S 2994,2996 */ /* MD_Can_ConstValue */ /* SBSW_CAN_HL36 */ /* SBSW_CAN_HL36 */      (inlined)
.L24:
	add	d15,#1
	ld.bu	d1,[a15]3
.L2233:
	extr.u	d15,d15,#0,#8
	lea	a15,[a15]12
	loop	a2,.L24
.L25:
	st.b	[a10]3,d1
	st.b	[a10]2,d15
.L2234:
	mov	d15,#1
	st.b	[a10]4,d15
.L1251:
	ld.w	d15,[a14]
.L2235:
	ld.bu	d0,[a7]
.L2236:
	mov.a	a15,d15
.L2237:
	ld.hu	d15,[a10]24
.L2238:
	sh	d15,d15,#16
.L2239:
	or	d15,d0
	st.w	[a15]388,d15
.L1259:
	ld.w	d0,[a14]
.L2240:
	ld.w	d15,[a10]14
.L2241:
	mov.a	a15,d0
.L2242:
	st.w	[a15]480,d15
.L1260:
	ld.w	d0,[a14]
.L2243:
	mov.a	a15,d0
.L2244:
	st.w	[a15]484,d15
.L1261:
	ld.w	d0,[a10]6
.L2245:
	st.w	[a12],d0
.L1262:
	ld.w	d15,[a14]
.L2246:
	addi	d15,d15,#340
.L2247:
	mov.a	a15,d15
.L1263:
	ld.bu	d15,[a12]22
.L2248:

; ..\component\Can\Implementation\Can.c	  3739    if ( (Can_GetLogStatus(canHwChannel) & kCanHwIsInit) == kCanHwIsInit ){      (inlined)
	jz.t	d15:2,.L26
.L1265:
	ld.w	d15,[a10]10
.L2249:
	st.w	[a15],d15
.L1266:

; ..\component\Can\Implementation\Can.c	  3740      (void)CanLL_WriteReg32(CAN_CHANNEL_CANPARA_FIRST &(Cn->IE), (vuint32)(initPara->canInterruptOldStatus), kCanRegCheckMaskIE, initPara); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_100 */       (inlined)
	j	.L27

; ..\component\Can\Implementation\Can.c	  3739    if ( (Can_GetLogStatus(canHwChannel) & kCanHwIsInit) == kCanHwIsInit ){      (inlined)
.L26:
	st.w	[a15],d0

; ..\component\Can\Implementation\Can.c	  3742    else      (inlined)
.L27:
	mov	d15,#1
	st.b	[a10]4,d15
.L2250:
	ld.bu	d15,[a12]22
	or	d15,#4
	st.b	[a12]22,d15
.L2251:
	j	.L28
.L2:
	mov	d8,#5
.L28:
	jeq	d8,#0,.L29
.L2252:
	fcall	.cocofun_2
.L1287:
	mov	d6,#2
.L1288:
	mov	d7,d8
	call	Det_ReportError
.L29:
	ld.bu	d2,[a10]4
.L2253:
	ret
.L1110:
	
__CanHL_ReInit_function_end:
	.size	CanHL_ReInit,__CanHL_ReInit_function_end-CanHL_ReInit
.L533:
	; End of function
	
	.sdecl	'.text.Can..cocofun_14',code,cluster('.cocofun_14')
	.sect	'.text.Can..cocofun_14'
	.align	2
; Function .cocofun_14
.L347:
.cocofun_14:	.type	func
; Function body .cocofun_14, coco_iter:0
	movh.a	a2,#@his(Can_InitObjectFdBrsConfig)
	lea	a2,[a2]@los(Can_InitObjectFdBrsConfig)
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L2322:
	fret
.L598:
	; End of function
	.sdecl	'.text.Can..cocofun_12',code,cluster('.cocofun_12')
	.sect	'.text.Can..cocofun_12'
	.align	2
; Function .cocofun_12
.L349:
.cocofun_12:	.type	func
; Function body .cocofun_12, coco_iter:0
	mov.a	a15,d15
.L2311:
	mov.u	d15,#65535
.L2312:
	addih	d15,d15,#16383
	st.w	[a15]336,d15
.L1283:
	fret
.L588:
	; End of function
	.sdecl	'.text.Can..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.Can..cocofun_8'
	.align	2
; Function .cocofun_8
.L351:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:0
	ld.bu	d15,[a15]
.L2288:
	fcall	.cocofun_22
.L2289:
	mov	d15,#255
	st.h	[a15],d15
.L1286:
	fret
.L568:
	; End of function
	.sdecl	'.text.Can..cocofun_22',code,cluster('.cocofun_22')
	.sect	'.text.Can..cocofun_22'
	.align	2
; Function .cocofun_22
.L353:
.cocofun_22:	.type	func
; Function body .cocofun_22, coco_iter:1
	movh.a	a15,#@his(Can_ActiveSendObject)
	lea	a15,[a15]@los(Can_ActiveSendObject)
	addsc.a	a15,a15,d15,#2
.L2363:
	fret
.L638:
	; End of function
	.sdecl	'.text.Can..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.Can..cocofun_7'
	.align	2
; Function .cocofun_7
.L355:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	addi	d15,d15,#280
	mov.a	a15,d15
	ld.w	d15,[a15]
.L2283:
	fret
.L563:
	; End of function
	.sdecl	'.text.Can..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.Can..cocofun_2'
	.align	2
; Function .cocofun_2
.L357:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0
	mov	d4,#80
.L1313:
	mov	d5,#0
	fret
.L538:
	; End of function
	.sdecl	'.text.Can.CanLL_ModeTransition',code,cluster('CanLL_ModeTransition')
	.sect	'.text.Can.CanLL_ModeTransition'
	.align	2
	
; Function CanLL_ModeTransition
.L359:
CanLL_ModeTransition:	.type	func
	mov	d8,d4
	movh.a	a15,#@his(.1.jmp)
.L1290:
	mov	d15,#10
	lea	a15,[a15]@los(.1.jmp)
.L973:
	mov	d9,#0
	sub.a	a10,#8
.L974:
	jlt	d15,d8,.L32
.L1852:
	mov	d15,#3
	jlt	d8,d15,.L32
	sub	d15,d8,d15
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	ji	a15
.L1289:
	
	.sdecl	'.rodata.Can..1.jmp',data,rom
	.sect	'.rodata.Can..1.jmp'
	.align	4
.1.jmp:	.type	object
	.word	.L33
	.word	.L34
	.word	.L35
	.word	.L36
	.word	.L32
	.word	.L32
	.word	.L37
	.word	.L38
	
	.sect	'.text.Can.CanLL_ModeTransition'
.L38:
.L36:
	fcall	.cocofun_15
.L1292:
	jne	d15,d8,.L39
.L1853:
	ld.bu	d15,[a15]21
.L1854:
	jeq	d15,#3,.L40
.L39:
	mov	d4,d6
	call	CanHL_ReInit
.L977:
	mov	d9,d2
.L1294:
	jne	d9,#1,.L41
.L40:
.L35:
	fcall	.cocofun_21
.L978:

; ..\component\Can\Implementation\Can.c	  6509  
; ..\component\Can\Implementation\Can.c	  6510  # if !defined(C_ENABLE_USE_OS_INTERRUPT_CONTROL) /* COV_CAN_OS_INT_CONTROL */ 
; ..\component\Can\Implementation\Can.c	  6511  #  if (( (((CAN_INTLOCK == CAN_DRIVER) || (CAN_INTLOCK == CAN_BOTH))) ) ) 
; ..\component\Can\Implementation\Can.c	  6512  #   if defined( C_ENABLE_ISR_MANDATORY )
; ..\component\Can\Implementation\Can.c	  6513    /* Power On */
; ..\component\Can\Implementation\Can.c	  6514    if( (Can_GetLogStatus(channel) & kCanHwIsInit) != kCanHwIsInit ){
; ..\component\Can\Implementation\Can.c	  6515      /* #20 Enable Service Request */
; ..\component\Can\Implementation\Can.c	  6516      /* [0..7] ISRPrio, [10] Service Request enable, [11..12] TOS=TriCore interrupt: 0=CPU0, 1=DMA, 2=CPU1, 3=CPU2, 4=CPU3, 5=CPU4, 6=CPU5 */
; ..\component\Can\Implementation\Can.c	  6517      CAN_WRITE_SRN_PROTECTED_REG32(CAN_PROTECTED_AREA_SRN,Can_GetSRN_Address(canHwChannel),(vuint32)( (vuint32)kCanMCMcanSRCR_Mask & ( ((vuint32)Can_GetINT_Priority(canHwChannel) | (1u << 10u)) | (Can_GetkCanUsedCore() << 11u) ) )); /* PRQA S 0306,2986,2985 */ /* MD_Can_0306_HWaccess_LL,MD_Can_ConstValue,MD_Can_ConstValue */ /* SBSW_CAN_LL_119 */
; ..\component\Can\Implementation\Can.c	  6518    }
; ..\component\Can\Implementation\Can.c	  6519  #   endif
; ..\component\Can\Implementation\Can.c	  6520  #  endif
; ..\component\Can\Implementation\Can.c	  6521  # endif
; ..\component\Can\Implementation\Can.c	  6522  }
; ..\component\Can\Implementation\Can.c	  6523  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  6524  
; ..\component\Can\Implementation\Can.c	  6525  
; ..\component\Can\Implementation\Can.c	  6526  
; ..\component\Can\Implementation\Can.c	  6527  
; ..\component\Can\Implementation\Can.c	  6528  
; ..\component\Can\Implementation\Can.c	  6529  #if ( CAN_SAFE_BSW == STD_ON )
; ..\component\Can\Implementation\Can.c	  6530  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  6531  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  6532  | NAME:             CanLL_CheckGeneratedData
; ..\component\Can\Implementation\Can.c	  6533  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  6534  /*!
; ..\component\Can\Implementation\Can.c	  6535   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  6536   *
; ..\component\Can\Implementation\Can.c	  6537   *
; ..\component\Can\Implementation\Can.c	  6538   */
; ..\component\Can\Implementation\Can.c	  6539  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_CheckGeneratedData(void)
; ..\component\Can\Implementation\Can.c	  6540  {
; ..\component\Can\Implementation\Can.c	  6541    /* Local Variables */
; ..\component\Can\Implementation\Can.c	  6542    vuint8 ret = kCanOk;
; ..\component\Can\Implementation\Can.c	  6543    /* #10 Check size of ShmAdr table */
; ..\component\Can\Implementation\Can.c	  6544    if (Can_GetSizeOfShmAdr() != kCanNumberOfChannels) /* CM_CAN_LL_112 */ /* PRQA S 2992,2742 */ /* MD_Can_ConstValue,MD_Can_ConstValue */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  6545    {
; ..\component\Can\Implementation\Can.c	  6546      Can_CallDetReportError(CAN_INIT_ID, CAN_E_GENDATA); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  6547      ret = kCanFailed;
; ..\component\Can\Implementation\Can.c	  6548    }
; ..\component\Can\Implementation\Can.c	  6549    return (ret);
; ..\component\Can\Implementation\Can.c	  6550  } /* CanLL_CheckGeneratedData */
; ..\component\Can\Implementation\Can.c	  6551  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  6552  #endif /*End C_ENABLE_REGEXT_MCANSS*/
; ..\component\Can\Implementation\Can.c	  6553  
; ..\component\Can\Implementation\Can.c	  6554  
; ..\component\Can\Implementation\Can.c	  6555  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  6556  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  6557  | NAME:             CanLL_SetGlobalRegisterMcMcan
; ..\component\Can\Implementation\Can.c	  6558  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  6559  /*!
; ..\component\Can\Implementation\Can.c	  6560   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  6561   *
; ..\component\Can\Implementation\Can.c	  6562   *
; ..\component\Can\Implementation\Can.c	  6563   *
; ..\component\Can\Implementation\Can.c	  6564   *
; ..\component\Can\Implementation\Can.c	  6565   *
; ..\component\Can\Implementation\Can.c	  6566   */
; ..\component\Can\Implementation\Can.c	  6567  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanLL_SetGlobalRegisterMcMcan(void)
; ..\component\Can\Implementation\Can.c	  6568  {
; ..\component\Can\Implementation\Can.c	  6569    /*Local Variables*/
; ..\component\Can\Implementation\Can.c	  6570    vuint8 indx;
; ..\component\Can\Implementation\Can.c	  6571  
; ..\component\Can\Implementation\Can.c	  6572    /* #10 Disable EndInit Protection */
; ..\component\Can\Implementation\Can.c	  6573    CAN_ENDINIT_PROTECT_OFF();
; ..\component\Can\Implementation\Can.c	  6574  
; ..\component\Can\Implementation\Can.c	  6575    /* #20 Set Global Sybsystem Specific Functionality */
; ..\component\Can\Implementation\Can.c	  6576  #  if( CAN_SAFE_BSW == STD_ON ) 
; ..\component\Can\Implementation\Can.c	  6577    /* Amount of subsystems must be between 1 and 5 */
; ..\component\Can\Implementation\Can.c	  6578    if((Can_GetSizeOfCanSubSystemBaseAdr() == 0u) || (Can_GetSizeOfCanSubSystemBaseAdr() > 5u) ) /* PRQA S 3325,2992,2742 */ /* MD_Can_3325_LL,MD_Can_ConstValue,MD_Can_ConstValue */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  6579    { 
; ..\component\Can\Implementation\Can.c	  6580      Can_CallDetReportError(CAN_INIT_ID, CAN_E_GENDATA); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  6581    }
; ..\component\Can\Implementation\Can.c	  6582    else
; ..\component\Can\Implementation\Can.c	  6583  #  endif
; ..\component\Can\Implementation\Can.c	  6584    {
; ..\component\Can\Implementation\Can.c	  6585      /* #30 Get Number of Active Subsystems */
; ..\component\Can\Implementation\Can.c	  6586      for (indx=0;indx<Can_GetSizeOfCanSubSystemBaseAdr(); indx++)
; ..\component\Can\Implementation\Can.c	  6587      {
; ..\component\Can\Implementation\Can.c	  6588        CAN_WRITE_PROTECTED_REG32(CAN_PROTECTED_AREA_SUB(indx),&(MCMCAN(indx)->CLC),0); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_120 */
; ..\component\Can\Implementation\Can.c	  6589        MCMCAN(indx)->MCR       = kCanMCMcanSetMCR_prog_sequence_0; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_120 */
; ..\component\Can\Implementation\Can.c	  6590        MCMCAN(indx)->MCR       = kCanMCMcanSetMCR_prog_sequence_1; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_120 */
; ..\component\Can\Implementation\Can.c	  6591        MCMCAN(indx)->MCR       = kCanMCMcanSetMCR_prog_sequence_2; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_120 */
; ..\component\Can\Implementation\Can.c	  6592        MCMCAN(indx)->BUFADR    = 0x00000000UL; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_120 */
; ..\component\Can\Implementation\Can.c	  6593        MCMCAN(indx)->MECR      = 0x00000000UL; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_120 */
; ..\component\Can\Implementation\Can.c	  6594        MCMCAN(indx)->MESTAT    = 0x00000000UL; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_120 */
; ..\component\Can\Implementation\Can.c	  6595      }
; ..\component\Can\Implementation\Can.c	  6596    }
; ..\component\Can\Implementation\Can.c	  6597  
; ..\component\Can\Implementation\Can.c	  6598    /* #40 Enable EndInit Protection */
; ..\component\Can\Implementation\Can.c	  6599    CAN_ENDINIT_PROTECT_ON();
; ..\component\Can\Implementation\Can.c	  6600  } /* CanLL_SetGlobalRegisterMcMcan */
; ..\component\Can\Implementation\Can.c	  6601  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  6602  
; ..\component\Can\Implementation\Can.c	  6603  
; ..\component\Can\Implementation\Can.c	  6604  
; ..\component\Can\Implementation\Can.c	  6605  #if ((defined( C_ENABLE_RX_BASICCAN_OBJECTS ) && !defined( C_ENABLE_RX_BASICCAN_POLLING )) || \ 
; ..\component\Can\Implementation\Can.c	  6606         defined( C_ENABLE_INDIVIDUAL_POLLING ) )        /* ISR necessary; no pure polling configuration */
; ..\component\Can\Implementation\Can.c	  6607  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  6608  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  6609  | NAME:             CanBasicInterruptRx
; ..\component\Can\Implementation\Can.c	  6610  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  6611  /*
; ..\component\Can\Implementation\Can.c	  6612  |<DataModelStart>| CanBasicInterruptRx
; ..\component\Can\Implementation\Can.c	  6613  Relation_Context:
; ..\component\Can\Implementation\Can.c	  6614  # CanInterrupt() #
; ..\component\Can\Implementation\Can.c	  6615  Relation:
; ..\component\Can\Implementation\Can.c	  6616  OneChOpt
; ..\component\Can\Implementation\Can.c	  6617  ChannelAmount
; ..\component\Can\Implementation\Can.c	  6618  RxBasicCANSupport, MultipleBasicCanObjects, RxPolling, TxPolling, IndividualPolling, HardwareLoopCheck
; ..\component\Can\Implementation\Can.c	  6619  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  6620  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  6621  Constrain:
; ..\component\Can\Implementation\Can.c	  6622  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  6623  */
; ..\component\Can\Implementation\Can.c	  6624  /*!
; ..\component\Can\Implementation\Can.c	  6625   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  6626   *
; ..\component\Can\Implementation\Can.c	  6627   *
; ..\component\Can\Implementation\Can.c	  6628   *
; ..\component\Can\Implementation\Can.c	  6629   */
; ..\component\Can\Implementation\Can.c	  6630  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanBasicInterruptRx(CAN_HW_CHANNEL_CANTYPE_ONLY) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6631  {
; ..\component\Can\Implementation\Can.c	  6632    /* #30 check Fifo - 0 (BasicCAN0) for new data */
; ..\component\Can\Implementation\Can.c	  6633    if( ((Cn->IR) & kCanIR_RF0N) != 0UL)  /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6634    { /* rcvd new msg in FIFO 0 */
; ..\component\Can\Implementation\Can.c	  6635  # if defined(C_ENABLE_TRICORE_ERRATUM_AI_H001)
; ..\component\Can\Implementation\Can.c	  6636      CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANPARA_FIRST (vuint32)kCanIR_RF0N);
; ..\component\Can\Implementation\Can.c	  6637  # else
; ..\component\Can\Implementation\Can.c	  6638      Cn->IR = (kCanIR_RF0N);   /* SBSW_CAN_LL_100 */    /* clear */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6639  # endif
; ..\component\Can\Implementation\Can.c	  6640  # if defined( C_ENABLE_INDIVIDUAL_POLLING )
; ..\component\Can\Implementation\Can.c	  6641      if(Can_IsMailboxIndivPolling(CAN_HL_MB_RX_BASIC_STARTINDEX(canHwChannel)))  /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6642      { 
; ..\component\Can\Implementation\Can.c	  6643        /* poll this object later on during the next read task cycle */ 
; ..\component\Can\Implementation\Can.c	  6644      }
; ..\component\Can\Implementation\Can.c	  6645      else
; ..\component\Can\Implementation\Can.c	  6646  # endif
; ..\component\Can\Implementation\Can.c	  6647      {
; ..\component\Can\Implementation\Can.c	  6648        CanLL_ApplCanTimerStart(kCanLoopRxFifo); /* SBSW_CAN_LL_102 */  
; ..\component\Can\Implementation\Can.c	  6649        while( (((Cn->RXF0S).B.FnFL) > 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopRxFifo) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6650        { /* hwObjHandle for RxFifo0 is 0 */
; ..\component\Can\Implementation\Can.c	  6651          CanHL_BasicCanMsgReceived(CAN_HW_CHANNEL_CANPARA_FIRST (CAN_HL_MB_RX_BASIC_STARTINDEX(canHwChannel)), 0u ); 
; ..\component\Can\Implementation\Can.c	  6652        }
; ..\component\Can\Implementation\Can.c	  6653        CanLL_ApplCanTimerEnd(kCanLoopRxFifo); /* SBSW_CAN_LL_102 */  
; ..\component\Can\Implementation\Can.c	  6654      }
; ..\component\Can\Implementation\Can.c	  6655    }
; ..\component\Can\Implementation\Can.c	  6656  
; ..\component\Can\Implementation\Can.c	  6657  # if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	  6658    /* #40 check Fifo - 1 (BasicCAN1) for new data */
; ..\component\Can\Implementation\Can.c	  6659    if( ((Cn->IR) & kCanIR_RF1N) != 0UL) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6660    { /* Rcvd new msg in FIFO 1 */
; ..\component\Can\Implementation\Can.c	  6661  #  if defined(C_ENABLE_TRICORE_ERRATUM_AI_H001)
; ..\component\Can\Implementation\Can.c	  6662      CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANPARA_FIRST (vuint32)kCanIR_RF1N);
; ..\component\Can\Implementation\Can.c	  6663  #  else
; ..\component\Can\Implementation\Can.c	  6664      Cn->IR = (kCanIR_RF1N); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_100 */ /* Clear */
; ..\component\Can\Implementation\Can.c	  6665  #  endif
; ..\component\Can\Implementation\Can.c	  6666  #  if defined( C_ENABLE_INDIVIDUAL_POLLING )
; ..\component\Can\Implementation\Can.c	  6667      if(Can_IsMailboxIndivPolling(CAN_HL_MB_RX_BASIC_STARTINDEX(canHwChannel) + 1u)) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6668      {
; ..\component\Can\Implementation\Can.c	  6669        /* poll this object later on during the next read task cycle */ 
; ..\component\Can\Implementation\Can.c	  6670      }
; ..\component\Can\Implementation\Can.c	  6671      else
; ..\component\Can\Implementation\Can.c	  6672  #  endif
; ..\component\Can\Implementation\Can.c	  6673      {
; ..\component\Can\Implementation\Can.c	  6674        CanLL_ApplCanTimerStart(kCanLoopRxFifo); /* SBSW_CAN_LL_102 */  
; ..\component\Can\Implementation\Can.c	  6675        while( (((Cn->RXF1S).B.FnFL) > 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopRxFifo) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  6676        {
; ..\component\Can\Implementation\Can.c	  6677          /* Increment the MailboxHandle. There is an  additional mailbox object for FIFO-1. hwObjHandle for RxFifo-1 is 1 */
; ..\component\Can\Implementation\Can.c	  6678          CanHL_BasicCanMsgReceived(CAN_HW_CHANNEL_CANPARA_FIRST (CAN_HL_MB_RX_BASIC_STARTINDEX(canHwChannel) + 1u), 1u ); 
; ..\component\Can\Implementation\Can.c	  6679        }
; ..\component\Can\Implementation\Can.c	  6680        CanLL_ApplCanTimerEnd(kCanLoopRxFifo); /* SBSW_CAN_LL_102 */  
; ..\component\Can\Implementation\Can.c	  6681      }
; ..\component\Can\Implementation\Can.c	  6682    }
; ..\component\Can\Implementation\Can.c	  6683  # endif /* C_ENABLE_MULTIPLE_BASICCAN */
; ..\component\Can\Implementation\Can.c	  6684  } /* PRQA S 6010,6030,6050,6080 */ /* MD_MSR_STPTH,MD_MSR_STCYC,MD_MSR_STCAL,MD_MSR_STMIF */  
; ..\component\Can\Implementation\Can.c	  6685  /* CanBasicInterruptRx */
; ..\component\Can\Implementation\Can.c	  6686  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  6687  #endif
; ..\component\Can\Implementation\Can.c	  6688  
; ..\component\Can\Implementation\Can.c	  6689  #if defined( C_ENABLE_RX_FULLCAN_OBJECTS )
; ..\component\Can\Implementation\Can.c	  6690  # if (!defined( C_ENABLE_RX_FULLCAN_POLLING ) || defined( C_ENABLE_INDIVIDUAL_POLLING ))        /* ISR necessary; no pure polling configuration */
; ..\component\Can\Implementation\Can.c	  6691  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  6692  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  6693  | NAME:             CanFullInterruptRx
; ..\component\Can\Implementation\Can.c	  6694  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  6695  /*
; ..\component\Can\Implementation\Can.c	  6696  |<DataModelStart>| CanFullInterruptRx
; ..\component\Can\Implementation\Can.c	  6697  Relation_Context:
; ..\component\Can\Implementation\Can.c	  6698  # CanInterrupt() #
; ..\component\Can\Implementation\Can.c	  6699  Relation:
; ..\component\Can\Implementation\Can.c	  6700  OneChOpt
; ..\component\Can\Implementation\Can.c	  6701  ChannelAmount
; ..\component\Can\Implementation\Can.c	  6702  RxFullCANSupport, RxPolling, TxPolling, IndividualPolling, HardwareLoopCheck
; ..\component\Can\Implementation\Can.c	  6703  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  6704  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  6705  Constrain:
; ..\component\Can\Implementation\Can.c	  6706  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  6707  */
; ..\component\Can\Implementation\Can.c	  6708  /*!
; ..\component\Can\Implementation\Can.c	  6709   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  6710   *
; ..\component\Can\Implementation\Can.c	  6711   *
; ..\component\Can\Implementation\Can.c	  6712   */
; ..\component\Can\Implementation\Can.c	  6713  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanFullInterruptRx(CAN_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  6714  {
; ..\component\Can\Implementation\Can.c	  6715    vuint32 ndata[2], shiftVal;
; ..\component\Can\Implementation\Can.c	  6716    vuint8  ndf, idx;
; ..\component\Can\Implementation\Can.c	  6717    CanObjectHandle hwObjHandle;
; ..\component\Can\Implementation\Can.c	  6718  
; ..\component\Can\Implementation\Can.c	  6719    /* #20 check RxBuffer (FullCAN) for new data */
; ..\component\Can\Implementation\Can.c	  6720    /* Rx Buffer Handling
; ..\component\Can\Implementation\Can.c	  6721      - Reset interrupt flag IR.DRX
; ..\component\Can\Implementation\Can.c	  6722      - Read New Data registers
; ..\component\Can\Implementation\Can.c	  6723      - Read messages from Message RAM
; ..\component\Can\Implementation\Can.c	  6724      - Reset New Data flags of processed messages */
; ..\component\Can\Implementation\Can.c	  6725    if( ((Cn->IR) & kCanIR_DRX ) != 0UL) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6726    { /* rcvd FullCAN msg(s) */
; ..\component\Can\Implementation\Can.c	  6727  # if defined(C_ENABLE_TRICORE_ERRATUM_AI_H001)
; ..\component\Can\Implementation\Can.c	  6728      CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANPARA_FIRST (vuint32)kCanIR_DRX);
; ..\component\Can\Implementation\Can.c	  6729  # else
; ..\component\Can\Implementation\Can.c	  6730      Cn->IR = (kCanIR_DRX); /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_100 */  /* Reset interrupt flag */
; ..\component\Can\Implementation\Can.c	  6731  # endif
; ..\component\Can\Implementation\Can.c	  6732      ndata[0] = Cn->NDATA[0]; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_106 */  /* Read New Data registers */
; ..\component\Can\Implementation\Can.c	  6733      ndata[1] = Cn->NDATA[1]; /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* SBSW_CAN_LL_106 */
; ..\component\Can\Implementation\Can.c	  6734      /* After the last word of a matching received message has been written to the Message RAM, the respective New Data flag in register NDAT1,2 is set. 
; ..\component\Can\Implementation\Can.c	  6735         As long as the New Data flag is set, the respective Rx Buffer is locked against updates from received matching frames. */
; ..\component\Can\Implementation\Can.c	  6736      ndf = 0u;
; ..\component\Can\Implementation\Can.c	  6737      idx = 0u;
; ..\component\Can\Implementation\Can.c	  6738      hwObjHandle = 0u;
; ..\component\Can\Implementation\Can.c	  6739      while( ((ndata[0] | ndata[1]) > 0UL) && (idx < 2u) ) /* CM_CAN_LL_107 */  /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6740      { /* at least one buffer not read yet AND first sweep */
; ..\component\Can\Implementation\Can.c	  6741        shiftVal = (vuint32)(0x00000001UL << ndf);
; ..\component\Can\Implementation\Can.c	  6742        if((ndata[idx] & shiftVal) != 0UL)
; ..\component\Can\Implementation\Can.c	  6743        { /* detected NDF */
; ..\component\Can\Implementation\Can.c	  6744  #  if defined( C_ENABLE_INDIVIDUAL_POLLING )
; ..\component\Can\Implementation\Can.c	  6745          if(Can_IsMailboxIndivPolling(CAN_HL_MB_RX_FULL_STARTINDEX(canHwChannel) + hwObjHandle))  /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6746          { 
; ..\component\Can\Implementation\Can.c	  6747            /* poll this object later on during the next read task cycle */ 
; ..\component\Can\Implementation\Can.c	  6748          }
; ..\component\Can\Implementation\Can.c	  6749          else
; ..\component\Can\Implementation\Can.c	  6750  #  endif
; ..\component\Can\Implementation\Can.c	  6751          { /* Attention:
; ..\component\Can\Implementation\Can.c	  6752               While an Rx Buffers NDF is set the belonging ID Filter will not match, causing the acceptance filtering to continue. 
; ..\component\Can\Implementation\Can.c	  6753               Following ID Filters may cause the received message to be stored into another Rx Buffer or into an Rx FIFO or the message may be rejected. */
; ..\component\Can\Implementation\Can.c	  6754            CanHL_FullCanMsgReceived(CAN_HW_CHANNEL_CANPARA_FIRST ((CAN_HL_MB_RX_FULL_STARTINDEX(canHwChannel)) + hwObjHandle), hwObjHandle);
; ..\component\Can\Implementation\Can.c	  6755          }
; ..\component\Can\Implementation\Can.c	  6756          ndata[idx] &= (vuint32) (~shiftVal); /* reset NDF */  /* SBSW_CAN_LL_107 */
; ..\component\Can\Implementation\Can.c	  6757        }
; ..\component\Can\Implementation\Can.c	  6758        hwObjHandle++;
; ..\component\Can\Implementation\Can.c	  6759        ndf++;
; ..\component\Can\Implementation\Can.c	  6760        if(ndf >= 32u)  /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6761        { /* next 32 FullCAN Buffers */
; ..\component\Can\Implementation\Can.c	  6762          ndf = 0u;
; ..\component\Can\Implementation\Can.c	  6763          idx += 1u;
; ..\component\Can\Implementation\Can.c	  6764        }
; ..\component\Can\Implementation\Can.c	  6765      } /* endwhile */
; ..\component\Can\Implementation\Can.c	  6766    } /* endif Rx FullCAN interrupt */
; ..\component\Can\Implementation\Can.c	  6767  } /* PRQA S 6010,6030,6050,6080 */ /* MD_MSR_STPTH,MD_MSR_STCYC,MD_MSR_STCAL,MD_MSR_STMIF */  
; ..\component\Can\Implementation\Can.c	  6768  /* CanFullInterruptRx */
; ..\component\Can\Implementation\Can.c	  6769  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  6770  # endif
; ..\component\Can\Implementation\Can.c	  6771  #endif
; ..\component\Can\Implementation\Can.c	  6772  
; ..\component\Can\Implementation\Can.c	  6773  
; ..\component\Can\Implementation\Can.c	  6774  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  6775  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  6776  | NAME:             CanInterruptErrorHandling
; ..\component\Can\Implementation\Can.c	  6777  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  6778  /*
; ..\component\Can\Implementation\Can.c	  6779  |<DataModelStart>| CanInterruptErrorHandling
; ..\component\Can\Implementation\Can.c	  6780  Relation_Context:
; ..\component\Can\Implementation\Can.c	  6781  # CanInterrupt() #
; ..\component\Can\Implementation\Can.c	  6782  Relation:
; ..\component\Can\Implementation\Can.c	  6783  OneChOpt
; ..\component\Can\Implementation\Can.c	  6784  ChannelAmount
; ..\component\Can\Implementation\Can.c	  6785  StatusPolling, RxBasicCANSupport, MultipleBasicCanObjects
; ..\component\Can\Implementation\Can.c	  6786  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  6787  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  6788  Constrain:
; ..\component\Can\Implementation\Can.c	  6789  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  6790  */
; ..\component\Can\Implementation\Can.c	  6791  /*!
; ..\component\Can\Implementation\Can.c	  6792   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  6793   *
; ..\component\Can\Implementation\Can.c	  6794   *
; ..\component\Can\Implementation\Can.c	  6795   *
; ..\component\Can\Implementation\Can.c	  6796   *
; ..\component\Can\Implementation\Can.c	  6797   *
; ..\component\Can\Implementation\Can.c	  6798   *
; ..\component\Can\Implementation\Can.c	  6799   *
; ..\component\Can\Implementation\Can.c	  6800   *
; ..\component\Can\Implementation\Can.c	  6801   *
; ..\component\Can\Implementation\Can.c	  6802   *
; ..\component\Can\Implementation\Can.c	  6803   */
; ..\component\Can\Implementation\Can.c	  6804  #if !defined(C_ENABLE_ERROR_POLLING)
; ..\component\Can\Implementation\Can.c	  6805  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanInterruptErrorHandling(CAN_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  6806  {
; ..\component\Can\Implementation\Can.c	  6807    vuint8 ret;
; ..\component\Can\Implementation\Can.c	  6808    vuint32 CanLocal_IR;
; ..\component\Can\Implementation\Can.c	  6809  
; ..\component\Can\Implementation\Can.c	  6810    /* #10 check error status and call error handling */
; ..\component\Can\Implementation\Can.c	  6811    CanLocal_IR = Cn->IR; /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6812    /* #20 check for Message Lost */
; ..\component\Can\Implementation\Can.c	  6813  # if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	  6814    if(((CanLocal_IR & Cn->IE & kCanIR_RF0L) != 0UL) || ((CanLocal_IR & Cn->IE & kCanIR_RF1L) != 0UL)) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6815  # else
; ..\component\Can\Implementation\Can.c	  6816    if( (CanLocal_IR & Cn->IE & kCanIR_RF0L) != 0UL)                                            /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6817  # endif
; ..\component\Can\Implementation\Can.c	  6818    { /* msg lost due to either FIFO 0/1 full or with size zero */
; ..\component\Can\Implementation\Can.c	  6819      CanHL_ErrorHandling(CAN_HW_CHANNEL_CANPARA_ONLY); /* call Interrupt handling with logical channel */
; ..\component\Can\Implementation\Can.c	  6820      /* #30 clear overflow flags */
; ..\component\Can\Implementation\Can.c	  6821  # if defined(C_ENABLE_TRICORE_ERRATUM_AI_H001)
; ..\component\Can\Implementation\Can.c	  6822      CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANPARA_FIRST (vuint32)(kCanIR_RF0L | kCanIR_RF0F | kCanIR_RF1L | kCanIR_RF1F));
; ..\component\Can\Implementation\Can.c	  6823  # else
; ..\component\Can\Implementation\Can.c	  6824      Cn->IR = (vuint32)(kCanIR_RF0L | kCanIR_RF0F | kCanIR_RF1L | kCanIR_RF1F);   /* SBSW_CAN_LL_100 */   /* PRQA S 0303 */ /* MD_Can_HwAccess */     /* clear flag(s) */
; ..\component\Can\Implementation\Can.c	  6825  # endif
; ..\component\Can\Implementation\Can.c	  6826    }
; ..\component\Can\Implementation\Can.c	  6827  
; ..\component\Can\Implementation\Can.c	  6828    ret = kCanFailed; /* do not proceed with further IR Flags evaluation */
; ..\component\Can\Implementation\Can.c	  6829    /* #40 check for Message RAM failure */
; ..\component\Can\Implementation\Can.c	  6830    if( (CanLocal_IR & Cn->IE & kCanIR_BO) != 0u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6831    { /* Bus_Off status changed */
; ..\component\Can\Implementation\Can.c	  6832      CanHL_ErrorHandling(CAN_HW_CHANNEL_CANPARA_ONLY); /* call Interrupt handling with logical channel */
; ..\component\Can\Implementation\Can.c	  6833      /*  In contrast to Bus_Off neither Warning-/Error- status nor ACK or CRC errors are considered (kCanIR_EW,kCanIR_EP,kCanIR_ACKE, kCanIR_CRCE,) */
; ..\component\Can\Implementation\Can.c	  6834      /* #70 clear busoff error flags */
; ..\component\Can\Implementation\Can.c	  6835  # if defined(C_ENABLE_TRICORE_ERRATUM_AI_H001)
; ..\component\Can\Implementation\Can.c	  6836      CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANPARA_FIRST (vuint32)kCanIR_BO);
; ..\component\Can\Implementation\Can.c	  6837  # else
; ..\component\Can\Implementation\Can.c	  6838      Cn->IR = (kCanIR_BO);   /* SBSW_CAN_LL_100 */    /* clear flag */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6839  # endif
; ..\component\Can\Implementation\Can.c	  6840    }
; ..\component\Can\Implementation\Can.c	  6841    /* #80 check for access failure flags */
; ..\component\Can\Implementation\Can.c	  6842    else if( (CanLocal_IR & Cn->IE & kCanIR_MRAF) != 0UL) /* COV_CAN_MCAN_NOT_SUPPORTED */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6843    { /* Message RAM Access Failure
; ..\component\Can\Implementation\Can.c	  6844          The flag is set, when the Rx Handler
; ..\component\Can\Implementation\Can.c	  6845          - has not completed acceptance filtering or storage of an accepted message until the arbitration
; ..\component\Can\Implementation\Can.c	  6846          field of the following message has been received. In this case acceptance filtering or message
; ..\component\Can\Implementation\Can.c	  6847          storage is aborted and the Rx Handler starts processing of the following message.
; ..\component\Can\Implementation\Can.c	  6848          - was not able to write a message to the Message RAM. In this case message storage is aborted.
; ..\component\Can\Implementation\Can.c	  6849          In both cases the FIFO put index is not updated resp. the New Data flag for a dedicated Rx Buffer
; ..\component\Can\Implementation\Can.c	  6850          is not set, a partly stored message is overwritten when the next message is stored to this location.
; ..\component\Can\Implementation\Can.c	  6851          
; ..\component\Can\Implementation\Can.c	  6852          The flag is also set when the Tx Handler 
; ..\component\Can\Implementation\Can.c	  6853          - was not able to read a message from the Message RAM in time. 
; ..\component\Can\Implementation\Can.c	  6854          In this case message transmission is aborted. 
; ..\component\Can\Implementation\Can.c	  6855          In case of a Tx Handler access failure the M_CAN is switched into Restricted Operation Mode.  */
; ..\component\Can\Implementation\Can.c	  6856      CanHL_ErrorHandling(CAN_HW_CHANNEL_CANPARA_ONLY); /* call Interrupt handling with logical channel */
; ..\component\Can\Implementation\Can.c	  6857      /* #90 clear access failure flags */
; ..\component\Can\Implementation\Can.c	  6858  # if defined(C_ENABLE_TRICORE_ERRATUM_AI_H001)
; ..\component\Can\Implementation\Can.c	  6859      CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANPARA_FIRST (vuint32)kCanIR_MRAF);
; ..\component\Can\Implementation\Can.c	  6860  # else
; ..\component\Can\Implementation\Can.c	  6861      Cn->IR = (kCanIR_MRAF);   /* SBSW_CAN_LL_100 */    /* clear flag */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6862  # endif
; ..\component\Can\Implementation\Can.c	  6863    }
; ..\component\Can\Implementation\Can.c	  6864    else
; ..\component\Can\Implementation\Can.c	  6865    {
; ..\component\Can\Implementation\Can.c	  6866      ret = kCanOk;  /* PRQA S 2400 */ /* test_MD_Can_2004_14.10 */
; ..\component\Can\Implementation\Can.c	  6867    }
; ..\component\Can\Implementation\Can.c	  6868    return(ret);
; ..\component\Can\Implementation\Can.c	  6869  } /* PRQA S 6010,6030,6050,6080 */ /* MD_MSR_STPTH,MD_MSR_STCYC,MD_MSR_STCAL,MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	  6870  /* CanInterruptErrorHandling */
; ..\component\Can\Implementation\Can.c	  6871  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  6872  #endif
; ..\component\Can\Implementation\Can.c	  6873  
; ..\component\Can\Implementation\Can.c	  6874  
; ..\component\Can\Implementation\Can.c	  6875  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  6876  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  6877  | NAME:             CanInterruptTx
; ..\component\Can\Implementation\Can.c	  6878  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  6879  /*
; ..\component\Can\Implementation\Can.c	  6880  |<DataModelStart>| CanInterruptTx
; ..\component\Can\Implementation\Can.c	  6881  Relation_Context:
; ..\component\Can\Implementation\Can.c	  6882  # CanInterrupt() #
; ..\component\Can\Implementation\Can.c	  6883  Relation:
; ..\component\Can\Implementation\Can.c	  6884  OneChOpt
; ..\component\Can\Implementation\Can.c	  6885  ChannelAmount, TxPolling, IndividualPolling
; ..\component\Can\Implementation\Can.c	  6886  ChannelAmount, TxHwFifo
; ..\component\Can\Implementation\Can.c	  6887  TxHwFifo, MultiplexedTx
; ..\component\Can\Implementation\Can.c	  6888  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  6889  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  6890  Constrain:
; ..\component\Can\Implementation\Can.c	  6891  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  6892  */
; ..\component\Can\Implementation\Can.c	  6893  /*!
; ..\component\Can\Implementation\Can.c	  6894   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  6895   *
; ..\component\Can\Implementation\Can.c	  6896   *
; ..\component\Can\Implementation\Can.c	  6897   *
; ..\component\Can\Implementation\Can.c	  6898   *
; ..\component\Can\Implementation\Can.c	  6899   */
; ..\component\Can\Implementation\Can.c	  6900  #if !defined(C_ENABLE_TX_POLLING) || defined( C_ENABLE_INDIVIDUAL_POLLING )
; ..\component\Can\Implementation\Can.c	  6901  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanInterruptTx(CAN_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  6902  {
; ..\component\Can\Implementation\Can.c	  6903    vuint8  hwObjHdl;
; ..\component\Can\Implementation\Can.c	  6904    CanObjectHandle  mboxHdl;
; ..\component\Can\Implementation\Can.c	  6905    CanObjectHandle  mailboxElement = kCanZero; /* PRQA S 2981 */  /* MD_Can_RedundantInit */
; ..\component\Can\Implementation\Can.c	  6906    vuint32 bPos;
; ..\component\Can\Implementation\Can.c	  6907    vuint32 CanLocal_IR;
; ..\component\Can\Implementation\Can.c	  6908  
; ..\component\Can\Implementation\Can.c	  6909    CanLocal_IR = Cn->IR; /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6910  
; ..\component\Can\Implementation\Can.c	  6911    /* #10 check transmit status */
; ..\component\Can\Implementation\Can.c	  6912    if( (CanLocal_IR & Cn->IE & kCanIR_TC) != 0UL) /* COV_CAN_TX_INTERRUPT */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6913    { /* Tx Confirmation */
; ..\component\Can\Implementation\Can.c	  6914      /* #20 clear flags */
; ..\component\Can\Implementation\Can.c	  6915  # if defined(C_ENABLE_TRICORE_ERRATUM_AI_H001)
; ..\component\Can\Implementation\Can.c	  6916      CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANPARA_FIRST (vuint32)kCanIR_TC);
; ..\component\Can\Implementation\Can.c	  6917  # else
; ..\component\Can\Implementation\Can.c	  6918      Cn->IR = (kCanIR_TC);   /* SBSW_CAN_LL_100 */    /* clear */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6919  # endif
; ..\component\Can\Implementation\Can.c	  6920      /* Each Tx Buffer has its own Transmission Occurred bit. 
; ..\component\Can\Implementation\Can.c	  6921         The bits are set when the corresponding TXBRP bit is cleared after a successful transmission. 
; ..\component\Can\Implementation\Can.c	  6922         The bits are reset when a new transmission is requested by writing a '1' to the corresponding bit of register TXBAR. */
; ..\component\Can\Implementation\Can.c	  6923      bPos = kCanACTIVE;
; ..\component\Can\Implementation\Can.c	  6924      hwObjHdl = 0;
; ..\component\Can\Implementation\Can.c	  6925      /* #30 check for Transmit Confirmation */
; ..\component\Can\Implementation\Can.c	  6926      while ( (hwObjHdl < kCanTXBC_NDTB) && (Can_GetCanTXBRP(canHwChannel) > 0UL) )
; ..\component\Can\Implementation\Can.c	  6927      { /* at least one transmission is pending */
; ..\component\Can\Implementation\Can.c	  6928        mboxHdl = Can_GetMailboxHandleOfMemorySectionObjects( Can_GetMemorySectionStartOfMemorySectionInfo(canHwChannel) + hwObjHdl);
; ..\component\Can\Implementation\Can.c	  6929  #  if defined( C_ENABLE_MULTIPLEXED_TRANSMISSION ) || defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  6930        mailboxElement = Can_GetMailboxElementOfMemorySectionObjects(Can_GetMemorySectionStartOfMemorySectionInfo(canHwChannel) + hwObjHdl);
; ..\component\Can\Implementation\Can.c	  6931  #  endif
; ..\component\Can\Implementation\Can.c	  6932        if( ((Can_GetCanTXBRP(canHwChannel) & bPos) != 0UL) && ( ((Cn->TXBTO & bPos) != 0UL) ) ) /* COV_CAN_HW_SPECIFIC */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  6933        { /* found requested confirmation */
; ..\component\Can\Implementation\Can.c	  6934  # if defined( C_ENABLE_INDIVIDUAL_POLLING )
; ..\component\Can\Implementation\Can.c	  6935          if(Can_IsMailboxIndivPolling(mboxHdl)) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  6936          { /* poll this object */
; ..\component\Can\Implementation\Can.c	  6937          }
; ..\component\Can\Implementation\Can.c	  6938          else
; ..\component\Can\Implementation\Can.c	  6939  # endif
; ..\component\Can\Implementation\Can.c	  6940          {
; ..\component\Can\Implementation\Can.c	  6941            CanHL_TxConfirmation(CAN_CHANNEL_CANPARA_FIRST mboxHdl, mailboxElement, hwObjHdl);
; ..\component\Can\Implementation\Can.c	  6942          }
; ..\component\Can\Implementation\Can.c	  6943        }
; ..\component\Can\Implementation\Can.c	  6944        hwObjHdl++;
; ..\component\Can\Implementation\Can.c	  6945        bPos <<= 1;
; ..\component\Can\Implementation\Can.c	  6946      } /* end while */
; ..\component\Can\Implementation\Can.c	  6947    }  /* endif TC */
; ..\component\Can\Implementation\Can.c	  6948  
; ..\component\Can\Implementation\Can.c	  6949  } /* PRQA S 6010,6030,6050,6080 */ /* MD_MSR_STPTH,MD_MSR_STCYC,MD_MSR_STCAL,MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	  6950  /* CanInterruptTx */
; ..\component\Can\Implementation\Can.c	  6951  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  6952  #endif
; ..\component\Can\Implementation\Can.c	  6953  
; ..\component\Can\Implementation\Can.c	  6954  #if( CAN_BOSCH_ERRATUM_012 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	  6955  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  6956  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  6957  | NAME:             CanInterruptTimeoutCounter
; ..\component\Can\Implementation\Can.c	  6958  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  6959  /*
; ..\component\Can\Implementation\Can.c	  6960  |<DataModelStart>| CanInterruptTimeoutCounter
; ..\component\Can\Implementation\Can.c	  6961  Relation_Context:
; ..\component\Can\Implementation\Can.c	  6962  # CanInterrupt() #
; ..\component\Can\Implementation\Can.c	  6963  Relation:
; ..\component\Can\Implementation\Can.c	  6964  OneChOpt
; ..\component\Can\Implementation\Can.c	  6965  ChannelAmount
; ..\component\Can\Implementation\Can.c	  6966  HardwareLoopCheck
; ..\component\Can\Implementation\Can.c	  6967  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  6968  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  6969  Constrain:
; ..\component\Can\Implementation\Can.c	  6970  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  6971  */
; ..\component\Can\Implementation\Can.c	  6972  /*!
; ..\component\Can\Implementation\Can.c	  6973   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  6974   *
; ..\component\Can\Implementation\Can.c	  6975   *
; ..\component\Can\Implementation\Can.c	  6976   *
; ..\component\Can\Implementation\Can.c	  6977   *
; ..\component\Can\Implementation\Can.c	  6978   */
; ..\component\Can\Implementation\Can.c	  6979  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanInterruptTimeoutCounter(CAN_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  6980  {
; ..\component\Can\Implementation\Can.c	  6981    /* timeout arrived */
; ..\component\Can\Implementation\Can.c	  6982  
; ..\component\Can\Implementation\Can.c	  6983    /* The erratum is limited to the case where a receiving M_CAN with PXHD enabled enters Bus Integration state 
; ..\component\Can\Implementation\Can.c	  6984       after detection of bits FDF and res both recessive.
; ..\component\Can\Implementation\Can.c	  6985       Effects:
; ..\component\Can\Implementation\Can.c	  6986       The receiver stops for an unpredictable amount of time.
; ..\component\Can\Implementation\Can.c	  6987       To leave Bus Integration state, at least one dominant bit has to be detected by a receiving
; ..\component\Can\Implementation\Can.c	  6988       M_CAN to start counting of 11 consecutive recessive bits.
; ..\component\Can\Implementation\Can.c	  6989       With Protocol Exception Handling enabled (CCCR.PXHD = '0'):
; ..\component\Can\Implementation\Can.c	  6990        - PSR.PXE (Protocol Exception Event) is signalled
; ..\component\Can\Implementation\Can.c	  6991        - Operation state changes from Receiver (PSR.ACT = '10') to Integrating (PSR.ACT = '00') at the next sample point.
; ..\component\Can\Implementation\Can.c	  6992        Workaround:
; ..\component\Can\Implementation\Can.c	  6993         R3.1.0: disable Protocol Exception Event Handling (CCCR.PXHD = '1')
; ..\component\Can\Implementation\Can.c	  6994         Other revisions: set and release INIT  */
; ..\component\Can\Implementation\Can.c	  6995    /* #10 check for protocol error */
; ..\component\Can\Implementation\Can.c	  6996  #  if ( CAN_MCAN_REVISION >= 0x310UL ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  6997    if( ((Cn->CCCR & kCanCCCR_PXHD) == 0UL) && ((Cn->PSR & kCanPSR_PXE) != 0UL) && ((Cn->PSR & kCanPSR_ACT) == 0UL) ) /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  6998  #  else
; ..\component\Can\Implementation\Can.c	  6999    if( ((Cn->PSR & kCanPSR_BO) == 0UL) && ((Cn->PSR & kCanPSR_ACT) == 0UL) )
; ..\component\Can\Implementation\Can.c	  7000  #  endif /* CAN_MCAN_REVISION */
; ..\component\Can\Implementation\Can.c	  7001    { /* PXE and ACT is reset on read.
; ..\component\Can\Implementation\Can.c	  7002         Note: Disable Protocol Exception Handling 'CCCR.PXHD = 1' generates an error frame thus we prefer this workaround */
; ..\component\Can\Implementation\Can.c	  7003      /* #20 accomplish propagated workaround */
; ..\component\Can\Implementation\Can.c	  7004      Cn->CCCR |= kCanCCCR_INIT; /* SBSW_CAN_LL_100 */  /* Setting INIT means the MCAN node is detached from the CAN Bus, the Tx Pin becomes recessive '1'.
; ..\component\Can\Implementation\Can.c	  7005                                                             During INIT = '1' the MCAN is stopped, all other nodes are not disturbed.) */
; ..\component\Can\Implementation\Can.c	  7006      CanLL_ApplCanTimerStart(kCanLoopInit); /* SBSW_CAN_LL_102 */  
; ..\component\Can\Implementation\Can.c	  7007      while( ((Cn->CCCR & kCanCCCR_INIT) == 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */
; ..\component\Can\Implementation\Can.c	  7008      { /* Assure that INIT has been accepted */ }
; ..\component\Can\Implementation\Can.c	  7009      CanLL_ApplCanTimerEnd(kCanLoopInit);  /* SBSW_CAN_LL_102 */  
; ..\component\Can\Implementation\Can.c	  7010      Cn->CCCR &= (vuint32)(~kCanCCCR_INIT);  /* SBSW_CAN_LL_100 */   
; ..\component\Can\Implementation\Can.c	  7011    }
; ..\component\Can\Implementation\Can.c	  7012  
; ..\component\Can\Implementation\Can.c	  7013    /* #30 keep counter running for further supervision */
; ..\component\Can\Implementation\Can.c	  7014    /* further periodical interruption requested due to PSR monitoring */
; ..\component\Can\Implementation\Can.c	  7015    Cn->TOCV = 0; /* SBSW_CAN_LL_100 */ /* When the counter reaches zero IR.TOO is set. In Continuous Mode the counter is immediately restarted at TOCC.TOP.
; ..\component\Can\Implementation\Can.c	  7016                                             Thus reload counter once more NOW (before clearing the IR) with TOCC[TOP] and continue down counting */
; ..\component\Can\Implementation\Can.c	  7017    Cn->IR = kCanIR_TOO;   /* SBSW_CAN_LL_100 */    /* clear */
; ..\component\Can\Implementation\Can.c	  7018  } /* PRQA S 6010,6030,6050,6080 */ /* MD_MSR_STPTH,MD_MSR_STCYC,MD_MSR_STCAL,MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	  7019  /* CanInterruptTimeoutCounter */
; ..\component\Can\Implementation\Can.c	  7020  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  7021  #endif
; ..\component\Can\Implementation\Can.c	  7022  
; ..\component\Can\Implementation\Can.c	  7023  
; ..\component\Can\Implementation\Can.c	  7024  
; ..\component\Can\Implementation\Can.c	  7025  
; ..\component\Can\Implementation\Can.c	  7026  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  7027  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  7028  | NAME:             CanLL_StartRequest
; ..\component\Can\Implementation\Can.c	  7029  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  7030  /*
; ..\component\Can\Implementation\Can.c	  7031  |<DataModelStart>| CanLL_StartRequest
; ..\component\Can\Implementation\Can.c	  7032  Relation_Context:
; ..\component\Can\Implementation\Can.c	  7033  # from CanLL_ModeTransition #
; ..\component\Can\Implementation\Can.c	  7034  Relation:
; ..\component\Can\Implementation\Can.c	  7035  OneChOpt
; ..\component\Can\Implementation\Can.c	  7036  ChannelAmount
; ..\component\Can\Implementation\Can.c	  7037  HardwareLoopCheck
; ..\component\Can\Implementation\Can.c	  7038  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  7039  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  7040  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  7041  Constrain:
; ..\component\Can\Implementation\Can.c	  7042  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  7043  */
; ..\component\Can\Implementation\Can.c	  7044  /*!
; ..\component\Can\Implementation\Can.c	  7045   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  7046   *
; ..\component\Can\Implementation\Can.c	  7047   *
; ..\component\Can\Implementation\Can.c	  7048   *
; ..\component\Can\Implementation\Can.c	  7049   *
; ..\component\Can\Implementation\Can.c	  7050   */
; ..\component\Can\Implementation\Can.c	  7051  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_StartRequest(CAN_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  7052  {
; ..\component\Can\Implementation\Can.c	  7053    vuint8 transitionRequest;
; ..\component\Can\Implementation\Can.c	  7054    transitionRequest = kCanOk; /* PRQA S 2982 */ /* MD_Can_2982_LL */
; ..\component\Can\Implementation\Can.c	  7055  
; ..\component\Can\Implementation\Can.c	  7056    /* #10 requested mode already reached */
; ..\component\Can\Implementation\Can.c	  7057    if((Cn->CCCR & kCanCCCR_INIT) == 0UL)  /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
	mov	d9,#1
	fcall	.cocofun_9
	ld.w	d0,[a12]
.L1855:
	addi	d0,d0,#280
	mov.a	a2,d0
	ld.w	d15,[a2]
.L1856:

; ..\component\Can\Implementation\Can.c	  7057    if((Cn->CCCR & kCanCCCR_INIT) == 0UL)  /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_LL_HARDWARE_BEHAVIOUR */      (inlined)
	jz.t	d15:0,.L51
.L1857:

; ..\component\Can\Implementation\Can.c	  7058    {
; ..\component\Can\Implementation\Can.c	  7059      transitionRequest = kCanOk;
; ..\component\Can\Implementation\Can.c	  7060    }
; ..\component\Can\Implementation\Can.c	  7061    else
; ..\component\Can\Implementation\Can.c	  7062    {
; ..\component\Can\Implementation\Can.c	  7063      /* #20 request mode transition if not reached yet */
; ..\component\Can\Implementation\Can.c	  7064      /* request RUNNING mode finish Power Down:
; ..\component\Can\Implementation\Can.c	  7065         a) Reset CCCR[CSR] (before resetting the CSR bit the module clocks must have been turned on by the application)
; ..\component\Can\Implementation\Can.c	  7066         b) M_CAN will acknowledge the reset of the CSR bit by resetting CCCR[CSA]. 
; ..\component\Can\Implementation\Can.c	  7067         c) Now the application can reset CCCR[INIT] to restart the CAN communication */
; ..\component\Can\Implementation\Can.c	  7068      ApplCanClockStart(CAN_HW_CHANNEL_CANPARA_ONLY);        /* request the application to turn on the clocks (CAN, Host) */
; ..\component\Can\Implementation\Can.c	  7069      
; ..\component\Can\Implementation\Can.c	  7070      /* The CCCR[CSR] have been set during the handling of the Erratas */
; ..\component\Can\Implementation\Can.c	  7071      /* CCCR[CSR] have to be reset first */
; ..\component\Can\Implementation\Can.c	  7072      Cn->CCCR &= (vuint32)~(kCanCCCR_CSR); /* SBSW_CAN_LL_100 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a2]
.L1858:
	insert	d15,d15,#0,#4,#1
	fcall	.cocofun_16
.L1859:

; ..\component\Can\Implementation\Can.c	  7073      Cn->CCCR &= (vuint32)~(kCanCCCR_INIT); /* SBSW_CAN_LL_100 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	insert	d15,d15,#0,#0,#1
	st.w	[a2],d15
.L1860:

; ..\component\Can\Implementation\Can.c	  7074      /* To leave power down mode, the application has to turn on the module clocks before resetting CCCR.CSR. 
; ..\component\Can\Implementation\Can.c	  7075         MCAN will acknowledge this by resetting CCCR.CSA. 
; ..\component\Can\Implementation\Can.c	  7076         Afterwards, the application can restart CAN communication by resetting bit CCCR.INIT. */
; ..\component\Can\Implementation\Can.c	  7077      /* After resetting CCCR[INIT] the Bit Stream Processor (BSP) synchronizes itself to the data transfer 
; ..\component\Can\Implementation\Can.c	  7078         on the CAN bus by waiting for Bus_Idle (sequence of 11 consecutive recessive bits) .
; ..\component\Can\Implementation\Can.c	  7079         CCCR[CCE] is automatically reset when CCCR[INIT] is reset. */
; ..\component\Can\Implementation\Can.c	  7080      /* CCCR_: INIT, CCE, ASM, CSR, MON, DAR, TEST disabled (automated retransmission is enabled) */
; ..\component\Can\Implementation\Can.c	  7081  
; ..\component\Can\Implementation\Can.c	  7082      /* #30 check current state: if already reached then avoid asynchronous all */
; ..\component\Can\Implementation\Can.c	  7083      CanLL_ApplCanTimerStart(kCanLoopInit); /* SBSW_CAN_LL_101 */  
	lea	a15,[a15]30
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  7084      while( ((Cn->CCCR & kCanCCCR_INIT) != 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */      (inlined)
.L44:

; ..\component\Can\Implementation\Can.c	  7084      while( ((Cn->CCCR & kCanCCCR_INIT) != 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */
	ld.w	d15,[a12]
.L1861:
	mov.a	a2,d15
	ld.w	d15,[a2]280
.L1862:

; ..\component\Can\Implementation\Can.c	  7084      while( ((Cn->CCCR & kCanCCCR_INIT) != 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */      (inlined)
	jz.t	d15:0,.L45
.L984:
	mov	d10,#0
	ld.w	d15,[a15]
.L1295:
	mov	d11,d10
	st.w	[a10]4,d15
.L988:
	mov	d4,d10
	lea	a4,[a10]4
.L1296:
	mov.aa	a5,a10
	call	GetElapsedValue
.L1297:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L46
.L1863:
	ld.w	d15,[a10]
.L1864:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L47
.L1865:
	mov	d11,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L48

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L47:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L46:
	mov	d10,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L48:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d10,#0,.L49
.L1866:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d10
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L49:

; ..\component\Can\Implementation\Can.c	  7084      while( ((Cn->CCCR & kCanCCCR_INIT) != 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */      (inlined)
	jne	d11,#0,.L44
.L45:

; ..\component\Can\Implementation\Can.c	  7085      {/* Assure that INIT has been accepted. */}
; ..\component\Can\Implementation\Can.c	  7086      CanLL_ApplCanTimerEnd(kCanLoopInit); /* SBSW_CAN_LL_101 */  
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue
.L1867:

; ..\component\Can\Implementation\Can.c	  7087      if ( (Cn->CCCR & kCanCCCR_INIT) != 0UL) /* COV_CAN_TRANSITION_REQUEST */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a12]
.L1868:
	mov.a	a15,d15
	ld.w	d15,[a15]280
.L1869:

; ..\component\Can\Implementation\Can.c	  7087      if ( (Cn->CCCR & kCanCCCR_INIT) != 0UL) /* COV_CAN_TRANSITION_REQUEST */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	and	d15,#1
.L1870:

; ..\component\Can\Implementation\Can.c	  7088      {
; ..\component\Can\Implementation\Can.c	  7089        transitionRequest = kCanRequested; /* assure start mode request */
	cmov	d9,d15,#3
	j	.L51
.L34:
.L37:
	fcall	.cocofun_15
.L1298:
	jne	d15,d8,.L52
.L1871:
	ld.bu	d15,[a15]21
.L1872:
	jeq	d15,#3,.L53
.L52:
	mov	d4,d6
	call	CanHL_ReInit
.L979:
	mov	d9,d2
.L1299:
	jne	d9,#1,.L54
.L53:

; ..\component\Can\Implementation\Can.c	  7090      }
; ..\component\Can\Implementation\Can.c	  7091    }
; ..\component\Can\Implementation\Can.c	  7092  
; ..\component\Can\Implementation\Can.c	  7093    return(transitionRequest);
; ..\component\Can\Implementation\Can.c	  7094  } /* CanLL_StartRequest */
; ..\component\Can\Implementation\Can.c	  7095  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  7096  
; ..\component\Can\Implementation\Can.c	  7097  
; ..\component\Can\Implementation\Can.c	  7098  #if defined(C_ENABLE_SILENT_MODE) 
; ..\component\Can\Implementation\Can.c	  7099  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  7100  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  7101  | NAME:             CanLL_StartSilentRequest
; ..\component\Can\Implementation\Can.c	  7102  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  7103  /*
; ..\component\Can\Implementation\Can.c	  7104  |<DataModelStart>| CanLL_StartRequest
; ..\component\Can\Implementation\Can.c	  7105  Relation_Context:
; ..\component\Can\Implementation\Can.c	  7106  # from CanLL_ModeTransition #
; ..\component\Can\Implementation\Can.c	  7107  Relation:
; ..\component\Can\Implementation\Can.c	  7108  OneChOpt
; ..\component\Can\Implementation\Can.c	  7109  ChannelAmount
; ..\component\Can\Implementation\Can.c	  7110  SilentMode, HardwareLoopCheck
; ..\component\Can\Implementation\Can.c	  7111  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  7112  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  7113  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  7114  Constrain:
; ..\component\Can\Implementation\Can.c	  7115  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  7116  */
; ..\component\Can\Implementation\Can.c	  7117  /*!
; ..\component\Can\Implementation\Can.c	  7118   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  7119   *
; ..\component\Can\Implementation\Can.c	  7120   *
; ..\component\Can\Implementation\Can.c	  7121   *
; ..\component\Can\Implementation\Can.c	  7122   *
; ..\component\Can\Implementation\Can.c	  7123   */
; ..\component\Can\Implementation\Can.c	  7124  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_StartSilentRequest(CAN_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  7125  {
; ..\component\Can\Implementation\Can.c	  7126    vuint8 transitionRequest;
; ..\component\Can\Implementation\Can.c	  7127    transitionRequest = kCanOk; /* PRQA S 2982 */ /* MD_Can_2982_LL */
; ..\component\Can\Implementation\Can.c	  7128  
; ..\component\Can\Implementation\Can.c	  7129    /* #10 requested mode already reached */
; ..\component\Can\Implementation\Can.c	  7130    if( ((Cn->CCCR & (kCanCCCR_MON | kCanCCCR_ASM | kCanCCCR_INIT)) == (kCanCCCR_MON | kCanCCCR_ASM)) )   /* COV_CAN_HARDWARE_FAILURE */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  7131    {
; ..\component\Can\Implementation\Can.c	  7132    }
; ..\component\Can\Implementation\Can.c	  7133    else
; ..\component\Can\Implementation\Can.c	  7134    {
; ..\component\Can\Implementation\Can.c	  7135      /* #20 request mode transition if not reached yet */
; ..\component\Can\Implementation\Can.c	  7136      /* request RUNNING mode finish Power Down:
; ..\component\Can\Implementation\Can.c	  7137         a) Reset CCCR[CSR] (before resetting the CSR bit the module clocks must have been turned on by the application)
; ..\component\Can\Implementation\Can.c	  7138         b) M_CAN will acknowledge the reset of the CSR bit by resetting CCCR[CSA]. 
; ..\component\Can\Implementation\Can.c	  7139         c) Now the application can reset CCCR[INIT] to restart the CAN communication */
; ..\component\Can\Implementation\Can.c	  7140      ApplCanClockStart(CAN_HW_CHANNEL_CANPARA_ONLY);        /* request the application to turn on the clocks (CAN, Host) */
; ..\component\Can\Implementation\Can.c	  7141      { /* start in silent mode */
; ..\component\Can\Implementation\Can.c	  7142        Cn->CCCR |= kCanCCCR_INIT;                /* SBSW_CAN_LL_100 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  7143        Cn->CCCR |= kCanCCCR_CCE;                 /* SBSW_CAN_LL_100 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  7144        Cn->CCCR |= kCanCCCR_MON | kCanCCCR_ASM;  /* SBSW_CAN_LL_100 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  7145      }
; ..\component\Can\Implementation\Can.c	  7146      
; ..\component\Can\Implementation\Can.c	  7147      /* The CCCR[CSR] have been set during the handling of the Erratas */
; ..\component\Can\Implementation\Can.c	  7148      /* CCCR[CSR] have to be reset first */
; ..\component\Can\Implementation\Can.c	  7149      Cn->CCCR &= (vuint32)~(kCanCCCR_CSR); /* SBSW_CAN_LL_100 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  7150      Cn->CCCR &= (vuint32)~(kCanCCCR_INIT); /* SBSW_CAN_LL_100 */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  7151  
; ..\component\Can\Implementation\Can.c	  7152      /* To leave power down mode, the application has to turn on the module clocks before resetting CCCR.CSR. 
; ..\component\Can\Implementation\Can.c	  7153         MCAN will acknowledge this by resetting CCCR.CSA. 
; ..\component\Can\Implementation\Can.c	  7154         Afterwards, the application can restart CAN communication by resetting bit CCCR.INIT. */
; ..\component\Can\Implementation\Can.c	  7155      /* After resetting CCCR[INIT] the Bit Stream Processor (BSP) synchronizes itself to the data transfer
; ..\component\Can\Implementation\Can.c	  7156         on the CAN bus by waiting for Bus_Idle (sequence of 11 consecutive recessive bits) .
; ..\component\Can\Implementation\Can.c	  7157         CCCR[CCE] is automatically reset when CCCR[INIT] is reset. */
; ..\component\Can\Implementation\Can.c	  7158      /* CCCR_: INIT, CCE, ASM, CSR, MON, DAR, TEST disabled (automated retransmission is enabled) */
; ..\component\Can\Implementation\Can.c	  7159  
; ..\component\Can\Implementation\Can.c	  7160      /* #30 check current state: if already reached then avoid asynchronous all */
; ..\component\Can\Implementation\Can.c	  7161      CanLL_ApplCanTimerStart(kCanLoopInit); /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  7162      while( ((Cn->CCCR & (vuint32)(kCanCCCR_MON | kCanCCCR_ASM | kCanCCCR_INIT)) != (kCanCCCR_MON | kCanCCCR_ASM)) && (CanLL_ApplCanTimerLoop(kCanLoopInit) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_HW_SPECIFIC */ 
; ..\component\Can\Implementation\Can.c	  7163      {/* Assure that INIT/SILENT has been accepted. */}
; ..\component\Can\Implementation\Can.c	  7164      CanLL_ApplCanTimerEnd(kCanLoopInit); /* SBSW_CAN_LL_101 */  
; ..\component\Can\Implementation\Can.c	  7165      if( ((Cn->CCCR & (kCanCCCR_MON | kCanCCCR_ASM | kCanCCCR_INIT)) != (kCanCCCR_MON | kCanCCCR_ASM)) )   /* COV_CAN_HARDWARE_FAILURE */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  7166      {
; ..\component\Can\Implementation\Can.c	  7167        transitionRequest = kCanRequested; /* assure silent mode request */
; ..\component\Can\Implementation\Can.c	  7168      }
; ..\component\Can\Implementation\Can.c	  7169    }
; ..\component\Can\Implementation\Can.c	  7170  
; ..\component\Can\Implementation\Can.c	  7171    return(transitionRequest);
; ..\component\Can\Implementation\Can.c	  7172  } /* CanLL_StartSilentRequest */
; ..\component\Can\Implementation\Can.c	  7173  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  7174  #endif
; ..\component\Can\Implementation\Can.c	  7175  
; ..\component\Can\Implementation\Can.c	  7176  /* CODE CATEGORY 4 START */
; ..\component\Can\Implementation\Can.c	  7177  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  7178  | NAME:             CanLL_StopRequest
; ..\component\Can\Implementation\Can.c	  7179  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  7180  /*
; ..\component\Can\Implementation\Can.c	  7181  |<DataModelStart>| CanLL_StopRequest
; ..\component\Can\Implementation\Can.c	  7182  Relation_Context:
; ..\component\Can\Implementation\Can.c	  7183  # from CanLL_ModeTransition #
; ..\component\Can\Implementation\Can.c	  7184  Relation:
; ..\component\Can\Implementation\Can.c	  7185  OneChOpt
; ..\component\Can\Implementation\Can.c	  7186  ChannelAmount
; ..\component\Can\Implementation\Can.c	  7187  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  7188  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  7189  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  7190  Constrain:
; ..\component\Can\Implementation\Can.c	  7191  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  7192  */
; ..\component\Can\Implementation\Can.c	  7193  /*!
; ..\component\Can\Implementation\Can.c	  7194   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  7195   *
; ..\component\Can\Implementation\Can.c	  7196   *
; ..\component\Can\Implementation\Can.c	  7197   *
; ..\component\Can\Implementation\Can.c	  7198   */
; ..\component\Can\Implementation\Can.c	  7199  V_DEF_FUNC(CAN_LOCAL_INLINE, vuint8, STATIC_CODE) CanLL_StopRequest(CAN_HW_CHANNEL_CANTYPE_ONLY)
; ..\component\Can\Implementation\Can.c	  7200  {
; ..\component\Can\Implementation\Can.c	  7201    vuint8 transitionRequest;
; ..\component\Can\Implementation\Can.c	  7202    transitionRequest = kCanFailed; /* PRQA S 2982 */ /* MD_Can_2982_LL */
; ..\component\Can\Implementation\Can.c	  7203  
; ..\component\Can\Implementation\Can.c	  7204    /* #10 check current state */
; ..\component\Can\Implementation\Can.c	  7205    if( (Cn->CCCR & kCanCCCR_INIT) == 0UL) /* PRQA S 0303 */ /* MD_Can_HwAccess */
	movh.a	a15,#@his(Can_ControllerConfig)
	lea	a15,[a15]@los(Can_ControllerConfig)
	ld.w	d15,[a15]
.L1873:
	mov.a	a2,d15
	ld.w	d15,[a2]280
.L1874:

; ..\component\Can\Implementation\Can.c	  7205    if( (Cn->CCCR & kCanCCCR_INIT) == 0UL) /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jnz.t	d15:0,.L55
.L1875:

; ..\component\Can\Implementation\Can.c	  7206    { /* in normal operating mode */
; ..\component\Can\Implementation\Can.c	  7207      Cn->TXBCR = kCan_ALL_ONE;   /* SBSW_CAN_LL_100 */ /* cancel any pending request */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	mov	d15,#-1
	st.w	[a2]468,d15
.L1876:

; ..\component\Can\Implementation\Can.c	  7208      /* While CCCR[INIT] is set, message transfer from and to the CAN bus is stopped, the status of the CAN bus transmit output is recessive (HIGH). 
; ..\component\Can\Implementation\Can.c	  7209         Setting CCCR[INIT] does not change any configuration register. 
; ..\component\Can\Implementation\Can.c	  7210         After resetting CCCR[INIT] the Bit Stream Processor (BSP) synchronizes itself to the data transfer on the CAN bus 
; ..\component\Can\Implementation\Can.c	  7211         by waiting for the occurrence of a sequence of 11 consecutive recessive bits (= Bus_Idle) before it can take part in bus activities and start the message transfer. */
; ..\component\Can\Implementation\Can.c	  7212  #if ( CAN_BOSCH_ERRATUM_008 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	  7213      /* When CCCR.INIT is set while the M_CAN is receiving a frame, the next received frame         
; ..\component\Can\Implementation\Can.c	  7214         after resetting CCCR.INIT will cause IR.MRAF to be set.
; ..\component\Can\Implementation\Can.c	  7215          Workaround:
; ..\component\Can\Implementation\Can.c	  7216          1) Issue a clock stop request by setting bit CCCR.CSR
; ..\component\Can\Implementation\Can.c	  7217          2) Wait until the M_CAN sets CCCR.INIT and CCCR.CSA to one
; ..\component\Can\Implementation\Can.c	  7218             Before resetting CCCR.INIT first reset CCCR.CSR. */
; ..\component\Can\Implementation\Can.c	  7219  #endif
; ..\component\Can\Implementation\Can.c	  7220      /* #20 request mode transition if not reached yet */
; ..\component\Can\Implementation\Can.c	  7221      /* Put HW to halt mode, if it is not already there */
; ..\component\Can\Implementation\Can.c	  7222      /*  Power down:
; ..\component\Can\Implementation\Can.c	  7223          The M_CAN can be set into power down mode via CCCR[CSR]. 
; ..\component\Can\Implementation\Can.c	  7224          When clock stop is requested (CCCR[CSR]='1') first INIT and then CSA will be set after all pending transfer requests are completed and the CAN bus reached idle.
; ..\component\Can\Implementation\Can.c	  7225          1)  As long as the clock stop request signal is active, bit CCCR[CSR] is read as one. 
; ..\component\Can\Implementation\Can.c	  7226          1a) When all pending transmission requests have completed, 
; ..\component\Can\Implementation\Can.c	  7227          1b) then M_CAN waits until bus idle state is detected. 
; ..\component\Can\Implementation\Can.c	  7228          2)  The M_CAN sets CCCR[INIT] to one to prevent any further CAN transfers. 
; ..\component\Can\Implementation\Can.c	  7229          3)  Now M_CAN acknowledges that it is ready for power down by setting CCCR[CSA] to one. 
; ..\component\Can\Implementation\Can.c	  7230              In this state, before the clocks are switched off, further register accesses can be made. 
; ..\component\Can\Implementation\Can.c	  7231              A write access to CCCR[INIT] will have no effect. 
; ..\component\Can\Implementation\Can.c	  7232          4)  Now the module clock inputs (CAN clock and host clock) may be switched off. 
; ..\component\Can\Implementation\Can.c	  7233          5)  To leave power down mode, the application has to turn on the module clocks before resetting CCCR[CSR]. 
; ..\component\Can\Implementation\Can.c	  7234          5a) The M_CAN will acknowledge this by resetting CCCR[CSA]. 
; ..\component\Can\Implementation\Can.c	  7235          6)  Afterwards, the application can restart CAN communication by resetting bit CCCR[INIT]. */
; ..\component\Can\Implementation\Can.c	  7236  #if ( CAN_BOSCH_ERRATUM_008 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	  7237      Cn->CCCR |= kCanCCCR_CSR;   /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  7238      /*  When clock stop is requested, first INIT then CSA will be set 
; ..\component\Can\Implementation\Can.c	  7239          after all pending transfer requests have been completed and the CAN bus reached idle. */
; ..\component\Can\Implementation\Can.c	  7240      if((Cn->CCCR & kCanCCCR_CSA) != kCanCCCR_CSA) /* COV_CAN_TRANSITION_REQUEST */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
; ..\component\Can\Implementation\Can.c	  7241  #else
; ..\component\Can\Implementation\Can.c	  7242      Cn->CCCR |= kCanCCCR_INIT;   /* SBSW_CAN_LL_100 */    /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a15]
.L1877:
	addi	d15,d15,#280
	mov.a	a2,d15
	ld.w	d15,[a2]
.L1878:
	or	d15,#1
	st.w	[a2],d15
.L1879:

; ..\component\Can\Implementation\Can.c	  7243      if((Cn->CCCR & kCanCCCR_INIT) != kCanCCCR_INIT) /* COV_CAN_TRANSITION_REQUEST */ /* PRQA S 0303 */ /* MD_Can_HwAccess */
	ld.w	d15,[a15]
.L1880:
	mov.a	a15,d15
	ld.w	d15,[a15]280
.L1881:

; ..\component\Can\Implementation\Can.c	  7243      if((Cn->CCCR & kCanCCCR_INIT) != kCanCCCR_INIT) /* COV_CAN_TRANSITION_REQUEST */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jnz.t	d15:0,.L56
.L1882:

; ..\component\Can\Implementation\Can.c	  7244  #endif
; ..\component\Can\Implementation\Can.c	  7245      { /* Set clock stop request, then wait for acknowledge (CSA) */
; ..\component\Can\Implementation\Can.c	  7246        transitionRequest = kCanRequested;
	mov	d9,#3

; ..\component\Can\Implementation\Can.c	  7246        transitionRequest = kCanRequested;      (inlined)
	j	.L58

; ..\component\Can\Implementation\Can.c	  7243      if((Cn->CCCR & kCanCCCR_INIT) != kCanCCCR_INIT) /* COV_CAN_TRANSITION_REQUEST */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L56:

; ..\component\Can\Implementation\Can.c	  7205    if( (Cn->CCCR & kCanCCCR_INIT) == 0UL) /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L55:

; ..\component\Can\Implementation\Can.c	  7247      }
; ..\component\Can\Implementation\Can.c	  7248      else
; ..\component\Can\Implementation\Can.c	  7249      { /* Already in sleep mode. Nothing to be done */
; ..\component\Can\Implementation\Can.c	  7250        transitionRequest = kCanOk;
; ..\component\Can\Implementation\Can.c	  7251      }
; ..\component\Can\Implementation\Can.c	  7252    }
; ..\component\Can\Implementation\Can.c	  7253    else
; ..\component\Can\Implementation\Can.c	  7254    { /* Already in stop mode */
; ..\component\Can\Implementation\Can.c	  7255      transitionRequest = kCanOk;
	mov	d9,#1
	j	.L58
.L33:
	fcall	.cocofun_9
.L1300:
	ld.w	d15,[a12]
.L1883:
	addi	d0,d15,#280
	mov.a	a15,d0
	ld.w	d0,[a15]
.L1884:

; ..\component\Can\Implementation\Can.c	  7205    if( (Cn->CCCR & kCanCCCR_INIT) == 0UL) /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jnz.t	d0:0,.L59
.L1885:
	mov.a	a15,d15
.L1886:
	mov	d15,#-1
.L1887:
	st.w	[a15]468,d15
.L1888:
	ld.w	d15,[a12]
.L1889:
	fcall	.cocofun_7
.L1890:
	or	d15,#1
	st.w	[a15],d15
.L1891:
	ld.w	d15,[a12]
.L1892:
	fcall	.cocofun_7
.L1893:

; ..\component\Can\Implementation\Can.c	  7243      if((Cn->CCCR & kCanCCCR_INIT) != kCanCCCR_INIT) /* COV_CAN_TRANSITION_REQUEST */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jnz.t	d15:0,.L60
.L1894:
	mov	d9,#3

; ..\component\Can\Implementation\Can.c	  7246        transitionRequest = kCanRequested;      (inlined)
	j	.L61

; ..\component\Can\Implementation\Can.c	  7243      if((Cn->CCCR & kCanCCCR_INIT) != kCanCCCR_INIT) /* COV_CAN_TRANSITION_REQUEST */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L60:

; ..\component\Can\Implementation\Can.c	  7205    if( (Cn->CCCR & kCanCCCR_INIT) == 0UL) /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L59:
	mov	d9,#1

; ..\component\Can\Implementation\Can.c	  7248      else      (inlined)
.L61:
	jne	d9,#1,.L62
.L980:
	ld.w	d15,[a12]
.L1895:
	mov.a	a15,d15
	ld.w	d0,[a15]320
.L1896:
	fcall	.cocofun_7
.L1897:
	or	d15,#2
	st.w	[a15],d15
.L1301:
	fcall	.cocofun_21
.L1302:
	mov	d15,#0
	st.w	[a15]12,d15
.L1898:
	ld.w	d0,[a12]
.L1899:
	addi	d15,d0,#460
	mov.a	a2,d15
	ld.w	d15,[a2]
.L1900:

; ..\component\Can\Implementation\Can.c	  5377    if ((Cn->TXBRP)!=0UL) /* COV_CAN_PENDING_TX_REQUEST */      (inlined)
	jeq	d15,#0,.L63
.L1901:
	mov.a	a4,d0
.L1902:
	ld.w	d15,[a2]
.L1903:
	st.w	[a4]468,d15

; ..\component\Can\Implementation\Can.c	  5377    if ((Cn->TXBRP)!=0UL) /* COV_CAN_PENDING_TX_REQUEST */      (inlined)
.L63:
	ld.w	d15,[a12]
.L1904:
	addi	d15,d15,#280
.L1905:
	mov.a	a2,d15
.L1906:
	ld.bu	d15,[a15]20
	fcall	.cocofun_17
.L1907:

; ..\component\Can\Implementation\Can.c	  5384    if(Can_GetInitObjectFdBrsConfig(Can_GetLastInitObject(channel)) != CAN_NONE)      (inlined)
	jeq	d15,#0,.L64
.L1908:

; ..\component\Can\Implementation\Can.c	  5386      if(Can_GetInitObjectFdBrsConfig(Can_GetLastInitObject(channel)) == CAN_FD_RXTX)      (inlined)
	jne	d15,#1,.L65
.L1909:
	ld.w	d15,[a2]
.L1910:
	insert	d15,d15,#3,#8,#2

; ..\component\Can\Implementation\Can.c	  5389        Cn->CCCR |= (vuint32)(kCanCCCR_FDOE | kCanCCCR_BRSE);   /* SBSW_CAN_LL_100 */   /* FD operation, BRS enabled */      (inlined)
	j	.L66

; ..\component\Can\Implementation\Can.c	  5386      if(Can_GetInitObjectFdBrsConfig(Can_GetLastInitObject(channel)) == CAN_FD_RXTX)      (inlined)
.L65:
	ld.w	d15,[a2]
.L1911:
	insert	d15,d15,#0,#8,#2
	fcall	.cocofun_16
.L1912:
	or	d15,d15,#256

; ..\component\Can\Implementation\Can.c	  5395      else      (inlined)
	j	.L67

; ..\component\Can\Implementation\Can.c	  5384    if(Can_GetInitObjectFdBrsConfig(Can_GetLastInitObject(channel)) != CAN_NONE)      (inlined)
.L64:
	ld.w	d15,[a2]
.L1913:
	insert	d15,d15,#0,#8,#2

; ..\component\Can\Implementation\Can.c	  5395      else      (inlined)
.L66:

; ..\component\Can\Implementation\Can.c	  5406    else      (inlined)
.L67:
	st.w	[a2],d15
.L1914:
	lea	a15,[a15]34
	mov	d4,#0
	mov.aa	a4,a15
.L1304:
	call	GetCounterValue
.L1303:

; ..\component\Can\Implementation\Can.c	  5425    while( (((Cn->RXF0S).B.FnFL) > 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopRxFifo) != CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */      (inlined)
	j	.L68
.L69:
	ld.w	d15,[a12]
.L1915:
	mov.a	a2,d15
.L1916:
	ld.bu	d15,[a2]421
.L1917:
	and	d15,#63
	st.w	[a2]424,d15

; ..\component\Can\Implementation\Can.c	  5425    while( (((Cn->RXF0S).B.FnFL) > 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopRxFifo) != CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */      (inlined)
.L68:
	ld.w	d15,[a12]
.L1918:
	mov.a	a2,d15
.L1919:
	ld.bu	d15,[a2]420
	and	d15,#127
.L1920:

; ..\component\Can\Implementation\Can.c	  5425    while( (((Cn->RXF0S).B.FnFL) > 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopRxFifo) != CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */      (inlined)
	jeq	d15,#0,.L70
.L998:
	mov	d10,#0
	ld.w	d15,[a15]
.L1305:
	mov	d11,d10
	st.w	[a10]4,d15
.L1001:
	mov	d4,d10
	lea	a4,[a10]4
.L1306:
	mov.aa	a5,a10
	call	GetElapsedValue
.L1307:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L71
.L1921:
	ld.w	d15,[a10]
.L1922:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L72
.L1923:
	mov	d11,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L73

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L72:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L71:
	mov	d10,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L73:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d10,#0,.L74
.L1924:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d10
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L74:

; ..\component\Can\Implementation\Can.c	  5425    while( (((Cn->RXF0S).B.FnFL) > 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopRxFifo) != CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */      (inlined)
	jne	d11,#0,.L69
.L70:
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue
.L1925:
	ld.w	d15,[a12]
.L1926:
	fcall	.cocofun_12
.L58:
.L54:
	movh.a	a15,#@his(Can_ControllerConfig+13)
.L981:
	ld.bu	d15,[a15]@los(Can_ControllerConfig+13)
.L1927:
	mul	d15,d15,#12
	movh.a	a15,#@his(Can_Mailbox)
	lea	a15,[a15]@los(Can_Mailbox)
	addsc.a	a15,a15,d15,#0
	fcall	.cocofun_8
.L62:
.L51:
.L41:
.L32:
	fcall	.cocofun_21
.L1308:
	st.b	[a15]24,d8
.L982:
	st.b	[a15]21,d9
.L1928:
	mov	d2,d9
	ret
.L966:
	
__CanLL_ModeTransition_function_end:
	.size	CanLL_ModeTransition,__CanLL_ModeTransition_function_end-CanLL_ModeTransition
.L513:
	; End of function
	
	.sdecl	'.text.Can..cocofun_21',code,cluster('.cocofun_21')
	.sect	'.text.Can..cocofun_21'
	.align	2
; Function .cocofun_21
.L361:
.cocofun_21:	.type	func
; Function body .cocofun_21, coco_iter:1
	movh.a	a15,#@his(Can_ControllerData)
	lea	a15,[a15]@los(Can_ControllerData)
.L2358:
	fret
.L633:
	; End of function
	.sdecl	'.text.Can..cocofun_17',code,cluster('.cocofun_17')
	.sect	'.text.Can..cocofun_17'
	.align	2
; Function .cocofun_17
.L363:
.cocofun_17:	.type	func
; Function body .cocofun_17, coco_iter:0
	movh.a	a4,#@his(Can_InitObjectFdBrsConfig)
.L1396:
	lea	a4,[a4]@los(Can_InitObjectFdBrsConfig)
	addsc.a	a4,a4,d15,#0
	ld.bu	d15,[a4]
.L2339:
	fret
.L613:
	; End of function
	.sdecl	'.text.Can..cocofun_16',code,cluster('.cocofun_16')
	.sect	'.text.Can..cocofun_16'
	.align	2
; Function .cocofun_16
.L365:
.cocofun_16:	.type	func
; Function body .cocofun_16, coco_iter:0
	st.w	[a2],d15
.L2332:
	ld.w	d15,[a12]
.L2333:
	addi	d15,d15,#280
	mov.a	a2,d15
	ld.w	d15,[a2]
.L2334:
	fret
.L608:
	; End of function
	.sdecl	'.text.Can..cocofun_15',code,cluster('.cocofun_15')
	.sect	'.text.Can..cocofun_15'
	.align	2
; Function .cocofun_15
.L367:
.cocofun_15:	.type	func
; Function body .cocofun_15, coco_iter:0
	fcall	.cocofun_21
.L1291:
	ld.bu	d15,[a15]24
.L2327:
	fret
.L603:
	; End of function
	.sdecl	'.text.Can..cocofun_9',code,cluster('.cocofun_9')
	.sect	'.text.Can..cocofun_9'
	.align	2
; Function .cocofun_9
.L369:
.cocofun_9:	.type	func
; Function body .cocofun_9, coco_iter:0
	movh.a	a12,#@his(Can_ControllerConfig)
.L1293:
	lea	a12,[a12]@los(Can_ControllerConfig)
.L2294:
	fret
.L573:
	; End of function
	.sdecl	'.text.Can.CanHL_TxConfirmation',code,cluster('CanHL_TxConfirmation')
	.sect	'.text.Can.CanHL_TxConfirmation'
	.align	2
	

; ..\component\Can\Implementation\Can.c	  7256    }
; ..\component\Can\Implementation\Can.c	  7257    return(transitionRequest);
; ..\component\Can\Implementation\Can.c	  7258  } /* CanLL_StopRequest */
; ..\component\Can\Implementation\Can.c	  7259  /* CODE CATEGORY 4 END */
; ..\component\Can\Implementation\Can.c	  7260  
; ..\component\Can\Implementation\Can.c	  7261  #if defined(C_ENABLE_TX_POLLING) /* COV_CAN_TX_POLLING TX */
; ..\component\Can\Implementation\Can.c	  7262  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  7263  | NAME:             CanHL_TxConfirmationPolling
; ..\component\Can\Implementation\Can.c	  7264  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  7265  /*
; ..\component\Can\Implementation\Can.c	  7266  |<DataModelStart>| CanHL_TxConfirmationPolling
; ..\component\Can\Implementation\Can.c	  7267  Relation_Context:
; ..\component\Can\Implementation\Can.c	  7268  # from CanLL_TxProcessPendings #
; ..\component\Can\Implementation\Can.c	  7269  TxPolling
; ..\component\Can\Implementation\Can.c	  7270  Relation:
; ..\component\Can\Implementation\Can.c	  7271  OneChOpt
; ..\component\Can\Implementation\Can.c	  7272  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  7273  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  7274  Constrain:
; ..\component\Can\Implementation\Can.c	  7275  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  7276  */
; ..\component\Can\Implementation\Can.c	  7277  /*!
; ..\component\Can\Implementation\Can.c	  7278   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  7279   *
; ..\component\Can\Implementation\Can.c	  7280   *
; ..\component\Can\Implementation\Can.c	  7281   *
; ..\component\Can\Implementation\Can.c	  7282   */
; ..\component\Can\Implementation\Can.c	  7283  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanHL_TxConfirmationPolling( CAN_HW_CHANNEL_CANTYPE_FIRST CanObjectHandle mailboxHandle, CanObjectHandle mailboxElement, CanObjectHandle hwObjHandle )
; ..\component\Can\Implementation\Can.c	  7284  {
; ..\component\Can\Implementation\Can.c	  7285    /* #10 Lock CAN controller interrupts. (avoid nested call of confirmation (individual polling) and CancelTx interrupt confirmation out of Can interrupt like TP) */
; ..\component\Can\Implementation\Can.c	  7286    Can_DisableControllerInterrupts((uint8)channel);
; ..\component\Can\Implementation\Can.c	  7287    /* #20 call CanHL_TxConfirmation() for handling */
; ..\component\Can\Implementation\Can.c	  7288    CanHL_TxConfirmation(CAN_HW_CHANNEL_CANPARA_FIRST mailboxHandle, mailboxElement, hwObjHandle);
; ..\component\Can\Implementation\Can.c	  7289    Can_EnableControllerInterrupts((uint8)channel);
; ..\component\Can\Implementation\Can.c	  7290  }
; ..\component\Can\Implementation\Can.c	  7291  #endif
; ..\component\Can\Implementation\Can.c	  7292  
; ..\component\Can\Implementation\Can.c	  7293  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  7294  | NAME:             CanHL_TxConfirmation
; ..\component\Can\Implementation\Can.c	  7295  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  7296  /*
; ..\component\Can\Implementation\Can.c	  7297  |<DataModelStart>| CanHL_TxConfirmation
; ..\component\Can\Implementation\Can.c	  7298  Relation_Context:
; ..\component\Can\Implementation\Can.c	  7299  # from CanHL_TxConfirmationPolling #
; ..\component\Can\Implementation\Can.c	  7300  # from Tx Interrupt #
; ..\component\Can\Implementation\Can.c	  7301  TxPolling, IndividualPolling
; ..\component\Can\Implementation\Can.c	  7302  Relation:
; ..\component\Can\Implementation\Can.c	  7303  TxHwFifo, GenericConfirmation
; ..\component\Can\Implementation\Can.c	  7304  DevErrorDetect, TxPolling, OneChOpt
; ..\component\Can\Implementation\Can.c	  7305  TransmitCancellationAPI
; ..\component\Can\Implementation\Can.c	  7306  GenericConfirmation, IfTxBuffer
; ..\component\Can\Implementation\Can.c	  7307  HwCancelTx
; ..\component\Can\Implementation\Can.c	  7308  GenericConfirmation, MirrorMode
; ..\component\Can\Implementation\Can.c	  7309  HwCancelTx, TransmitCancellationAPI, GenericConfirmation
; ..\component\Can\Implementation\Can.c	  7310  ChannelAmount
; ..\component\Can\Implementation\Can.c	  7311  TxBasicAmount
; ..\component\Can\Implementation\Can.c	  7312  TxFullAmount
; ..\component\Can\Implementation\Can.c	  7313  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  7314  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  7315  Constrain:
; ..\component\Can\Implementation\Can.c	  7316  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  7317  */
; ..\component\Can\Implementation\Can.c	  7318  /*!
; ..\component\Can\Implementation\Can.c	  7319   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  7320   *
; ..\component\Can\Implementation\Can.c	  7321   *
; ..\component\Can\Implementation\Can.c	  7322   *
; ..\component\Can\Implementation\Can.c	  7323   *
; ..\component\Can\Implementation\Can.c	  7324   *
; ..\component\Can\Implementation\Can.c	  7325   *
; ..\component\Can\Implementation\Can.c	  7326   *
; ..\component\Can\Implementation\Can.c	  7327   *
; ..\component\Can\Implementation\Can.c	  7328   *
; ..\component\Can\Implementation\Can.c	  7329   *
; ..\component\Can\Implementation\Can.c	  7330   *
; ..\component\Can\Implementation\Can.c	  7331   *
; ..\component\Can\Implementation\Can.c	  7332   *
; ..\component\Can\Implementation\Can.c	  7333   *
; ..\component\Can\Implementation\Can.c	  7334   *
; ..\component\Can\Implementation\Can.c	  7335   *
; ..\component\Can\Implementation\Can.c	  7336   *
; ..\component\Can\Implementation\Can.c	  7337   *
; ..\component\Can\Implementation\Can.c	  7338   *
; ..\component\Can\Implementation\Can.c	  7339   *
; ..\component\Can\Implementation\Can.c	  7340   *
; ..\component\Can\Implementation\Can.c	  7341   *
; ..\component\Can\Implementation\Can.c	  7342   *
; ..\component\Can\Implementation\Can.c	  7343   *
; ..\component\Can\Implementation\Can.c	  7344   *
; ..\component\Can\Implementation\Can.c	  7345   *
; ..\component\Can\Implementation\Can.c	  7346   */
; ..\component\Can\Implementation\Can.c	  7347  /* explicite not inline (big code + multiple calls) */
; ..\component\Can\Implementation\Can.c	  7348  V_DEF_FUNC(CAN_STATIC, void, STATIC_CODE) CanHL_TxConfirmation( CAN_HW_CHANNEL_CANTYPE_FIRST CanObjectHandle mailboxHandle, CanObjectHandle mailboxElement, CanObjectHandle hwObjHandle )
; Function CanHL_TxConfirmation
.L371:
CanHL_TxConfirmation:	.type	func
	sub.a	a10,#72
.L1309:

; ..\component\Can\Implementation\Can.c	  7349  {
; ..\component\Can\Implementation\Can.c	  7350    /* \trace SPEC-1574 */
; ..\component\Can\Implementation\Can.c	  7351    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  7352    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  7353    tCanTxConfirmationParaStruct txConfPara;
; ..\component\Can\Implementation\Can.c	  7354  #if defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2)
; ..\component\Can\Implementation\Can.c	  7355    tCanTxConfInfoStruct txConfInfoStruct;
; ..\component\Can\Implementation\Can.c	  7356  #endif
; ..\component\Can\Implementation\Can.c	  7357    CanHookBegin_CanHL_TxConfirmation();
; ..\component\Can\Implementation\Can.c	  7358    errorId = CAN_E_NO_ERROR; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	  7359    txConfPara.mailboxHandle = mailboxHandle;
	mov	d9,#0
	st.b	[a10],d4
.L1310:

; ..\component\Can\Implementation\Can.c	  7360    txConfPara.mailboxElement = mailboxElement; /* PRQA S 2983 */ /* MD_MSR_DummyStmt */
	st.b	[a10]1,d9
.L1933:

; ..\component\Can\Implementation\Can.c	  7361    txConfPara.hwObjHandle = hwObjHandle; /* PRQA S 2983 */ /* MD_MSR_DummyStmt */
	st.b	[a10]2,d6
.L1934:

; ..\component\Can\Implementation\Can.c	  7362  #if defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2)
; ..\component\Can\Implementation\Can.c	  7363    txConfPara.txStructConf = &txConfInfoStruct;
; ..\component\Can\Implementation\Can.c	  7364  #endif
; ..\component\Can\Implementation\Can.c	  7365    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  7366  #if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  7367  # if !defined(C_ENABLE_TX_POLLING) /* COV_CAN_TX_POLLING */
; ..\component\Can\Implementation\Can.c	  7368    /* #10 Check if parameter controller and hwObjHandle is valid (only for Interrupt system, polling do this by caller) */
; ..\component\Can\Implementation\Can.c	  7369  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  7370    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  7371    {
; ..\component\Can\Implementation\Can.c	  7372      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  7373    }
; ..\component\Can\Implementation\Can.c	  7374    else
; ..\component\Can\Implementation\Can.c	  7375  #  endif
; ..\component\Can\Implementation\Can.c	  7376    if ( 
; ..\component\Can\Implementation\Can.c	  7377  #  if defined(C_ENABLE_TX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  7378         ((txConfPara.mailboxHandle < Can_GetTxFullHandleStart(canHwChannel)) || (txConfPara.mailboxHandle >= Can_GetTxFullHandleStop(canHwChannel))) &&  /* PRQA S 2995,2996 */ /* MD_Can_ConstValue */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  7379  #  endif
; ..\component\Can\Implementation\Can.c	  7380         ((txConfPara.mailboxHandle < Can_GetTxBasicHandleStart(canHwChannel)) || (txConfPara.mailboxHandle >= Can_GetTxBasicHandleStop(canHwChannel))) ) /* PRQA S 2991,2992,2995,2996 */ /* MD_Can_ConstValue */ /* COV_CAN_GENDATA_FAILURE */
	movh.a	a15,#@his(Can_ControllerConfig)
	lea	a15,[a15]@los(Can_ControllerConfig)
	ld.bu	d15,[a15]13
.L1935:
	jlt.u	d4,d15,.L76
.L1936:
	ld.bu	d15,[a15]11
.L1937:
	jlt.u	d4,d15,.L77
.L76:

; ..\component\Can\Implementation\Can.c	  7381    {
; ..\component\Can\Implementation\Can.c	  7382      errorId = CAN_E_PARAM_HANDLE;
	mov	d9,#2
	j	.L78
.L77:
	fcall	.cocofun_13
.L1311:
	ld.bu	d15,[a15]
.L1938:

; ..\component\Can\Implementation\Can.c	  7383    }
; ..\component\Can\Implementation\Can.c	  7384    else
; ..\component\Can\Implementation\Can.c	  7385  # endif
; ..\component\Can\Implementation\Can.c	  7386  #endif
; ..\component\Can\Implementation\Can.c	  7387    {
; ..\component\Can\Implementation\Can.c	  7388      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  7389      PduIdType tmp_pdu;
; ..\component\Can\Implementation\Can.c	  7390  #if defined(C_ENABLE_CANCEL_SUPPORT_API)
; ..\component\Can\Implementation\Can.c	  7391      uint8_least tmp_state;
; ..\component\Can\Implementation\Can.c	  7392  #endif
; ..\component\Can\Implementation\Can.c	  7393  #if defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2)
; ..\component\Can\Implementation\Can.c	  7394      Can_ReturnType generic_retval;
; ..\component\Can\Implementation\Can.c	  7395  #endif
; ..\component\Can\Implementation\Can.c	  7396  #if (defined(CAN_USE_CRITICALSECTION_OVER_CONFIRMATION) && (CAN_TRANSMIT_BUFFER == STD_ON)) || defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2)
; ..\component\Can\Implementation\Can.c	  7397      /* #100 EXCLUSIVE_AREA_3 needed to avoid another can_write while interface send out of queue (first send out of queue avoid inversion) or call GenericConfirmation2 (data consistency) */
; ..\component\Can\Implementation\Can.c	  7398      SchM_Enter_Can_CAN_EXCLUSIVE_AREA_3();
; ..\component\Can\Implementation\Can.c	  7399  #endif
; ..\component\Can\Implementation\Can.c	  7400  #if defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  7401      if (Can_GetMailboxType(txConfPara.mailboxHandle) == CAN_TX_BASICCAN_FIFO_TYPE) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  7402      { /* #110 in case of Fifo element get the read index */
; ..\component\Can\Implementation\Can.c	  7403        txConfPara.mailboxElement = CanHL_GetNextTxHwFifoReadIndex(&txConfPara); /* SBSW_CAN_HL45 */
; ..\component\Can\Implementation\Can.c	  7404      }
; ..\component\Can\Implementation\Can.c	  7405  #endif
; ..\component\Can\Implementation\Can.c	  7406      txConfPara.activeSendObject = CanHL_GetActiveSendObject(txConfPara.mailboxHandle, txConfPara.mailboxElement); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
	st.b	[a10]3,d15
.L1016:
	mov	d0,#1
	movh.a	a15,#@his(Can_ControllerData+12)
.L1939:
	sh	d8,d0,d6
	lea	a15,[a15]@los(Can_ControllerData+12)
.L1315:
	ld.w	d0,[a15]
	and	d0,d8

; ..\component\Can\Implementation\Can.c	  4415    assertHardware( ((Can_GetCanTXBRP(canHwChannel) & txBRP) != 0UL), canHwChannel, kCanErrorUnexpectedConfirmation); /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d0,#0,.L79
	fcall	.cocofun_2
.L1312:
	mov	d6,#96
.L1314:
	mov	d7,#166
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  4415    assertHardware( ((Can_GetCanTXBRP(canHwChannel) & txBRP) != 0UL), canHwChannel, kCanErrorUnexpectedConfirmation); /* COV_CAN_GENDATA_FAILURE */      (inlined)
.L79:
	call	SuspendAllInterrupts
.L1940:
	mov	d0,#-1
	ld.w	d15,[a15]
.L1941:
	xor	d8,d0
.L1316:
	and	d15,d8
	st.w	[a15],d15
.L1942:
	call	ResumeAllInterrupts
.L1017:

; ..\component\Can\Implementation\Can.c	  7407      {
; ..\component\Can\Implementation\Can.c	  7408        /* #120 Pre Release HW transmit object (LL) */
; ..\component\Can\Implementation\Can.c	  7409        CanLL_TxConfBegin(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &txConfPara); /* SBSW_CAN_HL45 */
; ..\component\Can\Implementation\Can.c	  7410        /* #130 Remember PDU for confirmation parameter */
; ..\component\Can\Implementation\Can.c	  7411        tmp_pdu   = Can_GetActiveSendPdu(txConfPara.activeSendObject);
	ld.bu	d15,[a10]3
	fcall	.cocofun_22
	ld.bu	d4,[a15]2
.L1317:

; ..\component\Can\Implementation\Can.c	  7412  #if defined(C_ENABLE_CANCEL_SUPPORT_API)
; ..\component\Can\Implementation\Can.c	  7413        /* #140 Remember SEND STATE which may be modified due to new transmit call in indication */
; ..\component\Can\Implementation\Can.c	  7414        tmp_state = (uint8_least)Can_GetActiveSendState(txConfPara.activeSendObject);
; ..\component\Can\Implementation\Can.c	  7415  #endif
; ..\component\Can\Implementation\Can.c	  7416        { /* #200 Set send state to free to allow next TX out of confirmation or direct (reload queue) */
; ..\component\Can\Implementation\Can.c	  7417          /* #210 Notify the application by call Appl_GenericConfirmation() and CanIf_TxConfirmation() */
; ..\component\Can\Implementation\Can.c	  7418          /*      - Appl_GenericConfirmation() if configured and mirror mode is active
; ..\component\Can\Implementation\Can.c	  7419                  and afterwards depend of return value
; ..\component\Can\Implementation\Can.c	  7420                  - CanIf_TxConfirmation() if generic confirmation return OK, or no generic is used, and TX is not cancelled */
; ..\component\Can\Implementation\Can.c	  7421  #if defined(CAN_ENABLE_GENERIC_CONFIRMATION_API1)
; ..\component\Can\Implementation\Can.c	  7422          Can_SetActiveSendState(txConfPara.activeSendObject, kCanBufferFree); /* SBSW_CAN_HL04 */
; ..\component\Can\Implementation\Can.c	  7423          if (Appl_GenericConfirmation( tmp_pdu ) == CAN_OK)
; ..\component\Can\Implementation\Can.c	  7424  #elif defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2)
; ..\component\Can\Implementation\Can.c	  7425  # if defined(C_ENABLE_MIRROR_MODE)
; ..\component\Can\Implementation\Can.c	  7426          if (Can_GetMirrorModeState(channel) == CDDMIRROR_INACTIVE)
; ..\component\Can\Implementation\Can.c	  7427          { /* MirrorMode is inactive so call the following CanIf_TxConfirmation() */
; ..\component\Can\Implementation\Can.c	  7428            Can_SetActiveSendState(txConfPara.activeSendObject, kCanBufferFree); /* SBSW_CAN_HL04 */
; ..\component\Can\Implementation\Can.c	  7429            generic_retval = CAN_OK;
; ..\component\Can\Implementation\Can.c	  7430          }
; ..\component\Can\Implementation\Can.c	  7431          else
; ..\component\Can\Implementation\Can.c	  7432  # endif
; ..\component\Can\Implementation\Can.c	  7433          { /* #230 For generic confirmation with API2 copy PDU data as parameter for Appl_GenericConfirmation() */
; ..\component\Can\Implementation\Can.c	  7434  # if defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  7435            if (Can_GetMailboxType(txConfPara.mailboxHandle) == CAN_TX_BASICCAN_FIFO_TYPE) /* COV_CAN_GENDATA_TX_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  7436            { /* #240 in case of FIFO get data out of Fifo storage */
; ..\component\Can\Implementation\Can.c	  7437              Can_SetActiveSendState(txConfPara.activeSendObject, kCanBufferFree); /* SBSW_CAN_HL04 */ /* release after copy data to avoid data inconsistency */
; ..\component\Can\Implementation\Can.c	  7438              /* call Appl_GenericConfirmation() and in case of CAN_OK also the following CanIf_TxConfirmation() */
; ..\component\Can\Implementation\Can.c	  7439              generic_retval = Appl_GenericConfirmation( (uint8)channel, &Can_GetActiveSendPduInfo(txConfPara.activeSendObject) ); /* PRQA S 0312 */ /* MD_Can_NoneVolatilePointerCast */ /* SBSW_CAN_HL25 */
; ..\component\Can\Implementation\Can.c	  7440            }
; ..\component\Can\Implementation\Can.c	  7441            else
; ..\component\Can\Implementation\Can.c	  7442  # endif
; ..\component\Can\Implementation\Can.c	  7443            { /* #250 in case of none FIFO get data out of CAN cell buffer (LL txStructConf) */
; ..\component\Can\Implementation\Can.c	  7444              Can_PduType canPdu;
; ..\component\Can\Implementation\Can.c	  7445              /* #260 get confirmation data out of hardware */
; ..\component\Can\Implementation\Can.c	  7446              CanLL_TxConfSetTxConfStruct(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &txConfPara); /* SBSW_CAN_HL45 */
; ..\component\Can\Implementation\Can.c	  7447              CanHL_SetCanPduInfo(&canPdu, &txConfPara); /* SBSW_CAN_HL32 */ /* SBSW_CAN_HL45 */
; ..\component\Can\Implementation\Can.c	  7448              canPdu.swPduHandle = tmp_pdu;
; ..\component\Can\Implementation\Can.c	  7449              Can_SetActiveSendState(txConfPara.activeSendObject, kCanBufferFree); /* SBSW_CAN_HL04 */ /* release after copy data to avoid data inconsistency */
; ..\component\Can\Implementation\Can.c	  7450              /* call Appl_GenericConfirmation() and in case of CAN_OK also the following CanIf_TxConfirmation() */
; ..\component\Can\Implementation\Can.c	  7451              generic_retval = Appl_GenericConfirmation( (uint8)channel, &canPdu ); /* PRQA S 0312 */ /* MD_Can_NoneVolatilePointerCast */ /* SBSW_CAN_HL32 */
; ..\component\Can\Implementation\Can.c	  7452            }
; ..\component\Can\Implementation\Can.c	  7453          }
; ..\component\Can\Implementation\Can.c	  7454          /* #300 Appl_GenericConfirmation() decide to call Indication */
; ..\component\Can\Implementation\Can.c	  7455          if (generic_retval == CAN_OK)
; ..\component\Can\Implementation\Can.c	  7456  #else /* no generic confirmation */
; ..\component\Can\Implementation\Can.c	  7457          Can_SetActiveSendState(txConfPara.activeSendObject, kCanBufferFree); /* SBSW_CAN_HL04 */
	mov	d15,#255
	st.h	[a15],d15
.L1943:

; ..\component\Can\Implementation\Can.c	  7458  #endif
; ..\component\Can\Implementation\Can.c	  7459          {
; ..\component\Can\Implementation\Can.c	  7460  #if defined(C_ENABLE_CANCEL_SUPPORT_API)
; ..\component\Can\Implementation\Can.c	  7461            /* #310 If TX is SW cancelled call CanIf_CancelTxNotification() */
; ..\component\Can\Implementation\Can.c	  7462            if (tmp_state == kCanBufferCancelSw) /* COV_CAN_CANCEL_SW_STIMULATION */
; ..\component\Can\Implementation\Can.c	  7463            {
; ..\component\Can\Implementation\Can.c	  7464              CanIf_CancelTxNotification(tmp_pdu, FALSE);
; ..\component\Can\Implementation\Can.c	  7465            }
; ..\component\Can\Implementation\Can.c	  7466            else
; ..\component\Can\Implementation\Can.c	  7467  #endif  /* #320 otherwise call CanIf_TxConfirmation() */
; ..\component\Can\Implementation\Can.c	  7468            {
; ..\component\Can\Implementation\Can.c	  7469              CanIf_TxConfirmation(tmp_pdu); /* \trace SPEC-1726, SPEC-1571 */
	call	CanIf_TxConfirmation
.L78:

; ..\component\Can\Implementation\Can.c	  7470            }
; ..\component\Can\Implementation\Can.c	  7471          }
; ..\component\Can\Implementation\Can.c	  7472  #if (defined(CAN_ENABLE_GENERIC_CONFIRMATION_API1) || defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2)) && (CAN_TRANSMIT_BUFFER == STD_ON)
; ..\component\Can\Implementation\Can.c	  7473          /* #350 otherwise no CanIf_TxConfirmation() will be called so call CanIf_CancelTxNotification() just to notify IF to restart sending out of Queue */
; ..\component\Can\Implementation\Can.c	  7474          else
; ..\component\Can\Implementation\Can.c	  7475          {
; ..\component\Can\Implementation\Can.c	  7476  # if defined(C_ENABLE_CANCEL_SUPPORT_API)
; ..\component\Can\Implementation\Can.c	  7477            CanIf_CancelTxNotification( tmp_pdu, FALSE );
; ..\component\Can\Implementation\Can.c	  7478  # else
; ..\component\Can\Implementation\Can.c	  7479  #  error "When using Generic Confirmation and Transmit buffer (If) the Cancel-support-api (if) has to be activated"
; ..\component\Can\Implementation\Can.c	  7480  # endif
; ..\component\Can\Implementation\Can.c	  7481          }
; ..\component\Can\Implementation\Can.c	  7482  #endif
; ..\component\Can\Implementation\Can.c	  7483        }
; ..\component\Can\Implementation\Can.c	  7484        /* #500 Post release HW transmit object (LL) */
; ..\component\Can\Implementation\Can.c	  7485        CanLL_TxConfEnd(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &txConfPara); /* SBSW_CAN_HL45 */
; ..\component\Can\Implementation\Can.c	  7486      }
; ..\component\Can\Implementation\Can.c	  7487  
; ..\component\Can\Implementation\Can.c	  7488  #if (defined(CAN_USE_CRITICALSECTION_OVER_CONFIRMATION) && (CAN_TRANSMIT_BUFFER == STD_ON)) || defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2)
; ..\component\Can\Implementation\Can.c	  7489      SchM_Exit_Can_CAN_EXCLUSIVE_AREA_3();
; ..\component\Can\Implementation\Can.c	  7490  #endif
; ..\component\Can\Implementation\Can.c	  7491    }
; ..\component\Can\Implementation\Can.c	  7492  
; ..\component\Can\Implementation\Can.c	  7493    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  7494  #if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  7495  # if !defined(C_ENABLE_TX_POLLING) /* COV_CAN_TX_POLLING */
; ..\component\Can\Implementation\Can.c	  7496    if (errorId != CAN_E_NO_ERROR) /* PRQA S 2991,2992,2995,2996 */ /* MD_Can_ConstValue */ /* COV_CAN_HARDWARE_FAILURE */
	jeq	d9,#0,.L80
.L1944:

; ..\component\Can\Implementation\Can.c	  7497    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  7498      Can_CallDetReportError(CAN_TXCNF_ID, errorId);
	fcall	.cocofun_2
	mov	d6,#81
	mov	d7,d9
.L1318:
	j	Det_ReportError
.L80:

; ..\component\Can\Implementation\Can.c	  7499    }
; ..\component\Can\Implementation\Can.c	  7500  # endif
; ..\component\Can\Implementation\Can.c	  7501  #endif
; ..\component\Can\Implementation\Can.c	  7502    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  7503    CanHookEnd_CanHL_TxConfirmation();
; ..\component\Can\Implementation\Can.c	  7504  } /* PRQA S 6010,6030,6050,6080 */ /* MD_MSR_STPTH,MD_MSR_STCYC,MD_MSR_STCAL,MD_MSR_STMIF */
	ret
.L1006:
	
__CanHL_TxConfirmation_function_end:
	.size	CanHL_TxConfirmation,__CanHL_TxConfirmation_function_end-CanHL_TxConfirmation
.L518:
	; End of function
	
	.sdecl	'.text.Can..cocofun_13',code,cluster('.cocofun_13')
	.sect	'.text.Can..cocofun_13'
	.align	2
; Function .cocofun_13
.L373:
.cocofun_13:	.type	func
; Function body .cocofun_13, coco_iter:0
	mul	d15,d4,#12
	movh.a	a15,#@his(Can_Mailbox)
	lea	a15,[a15]@los(Can_Mailbox)
	addsc.a	a15,a15,d15,#0
.L2317:
	fret
.L593:
	; End of function
	.sdecl	'.text.Can.CanHL_BasicCanMsgReceived',code,cluster('CanHL_BasicCanMsgReceived')
	.sect	'.text.Can.CanHL_BasicCanMsgReceived'
	.align	2
	

; ..\component\Can\Implementation\Can.c	  7505  
; ..\component\Can\Implementation\Can.c	  7506  #if defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  7507  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  7508  | NAME:             CanHL_GetNextTxHwFifoReadIndex
; ..\component\Can\Implementation\Can.c	  7509  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  7510  /*
; ..\component\Can\Implementation\Can.c	  7511  |<DataModelStart>| CanHL_GetNextTxHwFifoReadIndex
; ..\component\Can\Implementation\Can.c	  7512  Relation_Context:
; ..\component\Can\Implementation\Can.c	  7513  # from CanHL_TxConfirmation #
; ..\component\Can\Implementation\Can.c	  7514  TxHwFifo
; ..\component\Can\Implementation\Can.c	  7515  Relation:
; ..\component\Can\Implementation\Can.c	  7516  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  7517  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  7518  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  7519  Constrain:
; ..\component\Can\Implementation\Can.c	  7520  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  7521  */
; ..\component\Can\Implementation\Can.c	  7522  /*!
; ..\component\Can\Implementation\Can.c	  7523   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  7524   *
; ..\component\Can\Implementation\Can.c	  7525   *
; ..\component\Can\Implementation\Can.c	  7526   *
; ..\component\Can\Implementation\Can.c	  7527   *
; ..\component\Can\Implementation\Can.c	  7528   */
; ..\component\Can\Implementation\Can.c	  7529  V_DEF_FUNC(CAN_STATIC, CanObjectHandle, STATIC_CODE) CanHL_GetNextTxHwFifoReadIndex(CanTxConfirmationParaStructPtr txConfPara) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  7530  {
; ..\component\Can\Implementation\Can.c	  7531    CanObjectHandle mailboxElement;
; ..\component\Can\Implementation\Can.c	  7532    uint16 txHwFifo;
; ..\component\Can\Implementation\Can.c	  7533    /* #10 need to do the FIFO index access atomic - use EXCLUSIVE_AREA_7 */
; ..\component\Can\Implementation\Can.c	  7534    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_7();
; ..\component\Can\Implementation\Can.c	  7535    txHwFifo = Can_GetMailboxTxHwFifo(txConfPara->mailboxHandle);
; ..\component\Can\Implementation\Can.c	  7536  # if (CAN_SAFE_BSW == STD_ON) /* COV_CAN_SAFE_BSW */
; ..\component\Can\Implementation\Can.c	  7537    if (txHwFifo >= (uint16)Can_GetSizeOfTxHwFifo()) /* CM_CAN_HL32 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  7538    {
; ..\component\Can\Implementation\Can.c	  7539      txHwFifo = 0u;
; ..\component\Can\Implementation\Can.c	  7540    }
; ..\component\Can\Implementation\Can.c	  7541  # endif
; ..\component\Can\Implementation\Can.c	  7542    /* #20 get Fifo element read index */
; ..\component\Can\Implementation\Can.c	  7543    mailboxElement = (CanObjectHandle)Can_GetTxHwFifoReadIndex(txHwFifo);
; ..\component\Can\Implementation\Can.c	  7544    /* #30 move to next Fifo element read index */
; ..\component\Can\Implementation\Can.c	  7545    if (Can_GetTxHwFifoReadIndex(txHwFifo) < ((uint16)Can_GetMailboxSize(txConfPara->mailboxHandle) - (uint16)1u) ) /* CM_CAN_HL25 */
; ..\component\Can\Implementation\Can.c	  7546    {
; ..\component\Can\Implementation\Can.c	  7547      Can_IncTxHwFifoReadIndex(txHwFifo); /* SBSW_CAN_HL50 */
; ..\component\Can\Implementation\Can.c	  7548    }
; ..\component\Can\Implementation\Can.c	  7549    else
; ..\component\Can\Implementation\Can.c	  7550    {
; ..\component\Can\Implementation\Can.c	  7551      Can_SetTxHwFifoReadIndex(txHwFifo, 0u); /* SBSW_CAN_HL50 */
; ..\component\Can\Implementation\Can.c	  7552    }
; ..\component\Can\Implementation\Can.c	  7553    Can_DecTxHwFifoFillCount(txHwFifo); /* SBSW_CAN_HL50 */
; ..\component\Can\Implementation\Can.c	  7554    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_7();
; ..\component\Can\Implementation\Can.c	  7555    return mailboxElement;
; ..\component\Can\Implementation\Can.c	  7556  }
; ..\component\Can\Implementation\Can.c	  7557  
; ..\component\Can\Implementation\Can.c	  7558  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  7559  | NAME:             CanHL_SetNextTxHwFifoWriteIndex
; ..\component\Can\Implementation\Can.c	  7560  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  7561  /*
; ..\component\Can\Implementation\Can.c	  7562  |<DataModelStart>| CanHL_SetNextTxHwFifoWriteIndex
; ..\component\Can\Implementation\Can.c	  7563  Relation_Context:
; ..\component\Can\Implementation\Can.c	  7564  # from CanHL_WriteStart #
; ..\component\Can\Implementation\Can.c	  7565  TxHwFifo
; ..\component\Can\Implementation\Can.c	  7566  Relation:
; ..\component\Can\Implementation\Can.c	  7567  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  7568  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  7569  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  7570  Constrain:
; ..\component\Can\Implementation\Can.c	  7571  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  7572  */
; ..\component\Can\Implementation\Can.c	  7573  /*!
; ..\component\Can\Implementation\Can.c	  7574   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  7575   *
; ..\component\Can\Implementation\Can.c	  7576   *
; ..\component\Can\Implementation\Can.c	  7577   *
; ..\component\Can\Implementation\Can.c	  7578   */
; ..\component\Can\Implementation\Can.c	  7579  V_DEF_FUNC(CAN_STATIC, void, STATIC_CODE) CanHL_SetNextTxHwFifoWriteIndex(CanTxTransmissionParaStructPtr txPara) /* PRQA S 3673 */ /* MD_Can_NoneConstParameterPointer */
; ..\component\Can\Implementation\Can.c	  7580  {
; ..\component\Can\Implementation\Can.c	  7581    uint16 txHwFifo;
; ..\component\Can\Implementation\Can.c	  7582    /* #10 need to do the FIFO index access atomic - use EXCLUSIVE_AREA_7 */
; ..\component\Can\Implementation\Can.c	  7583    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_7();
; ..\component\Can\Implementation\Can.c	  7584    txHwFifo = Can_GetMailboxTxHwFifo(txPara->mailboxHandle);
; ..\component\Can\Implementation\Can.c	  7585  # if (CAN_SAFE_BSW == STD_ON) /* COV_CAN_SAFE_BSW */
; ..\component\Can\Implementation\Can.c	  7586    if (txHwFifo >= (uint16)Can_GetSizeOfTxHwFifo()) /* CM_CAN_HL32 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  7587    {
; ..\component\Can\Implementation\Can.c	  7588      txHwFifo = 0u;
; ..\component\Can\Implementation\Can.c	  7589    }
; ..\component\Can\Implementation\Can.c	  7590  # endif
; ..\component\Can\Implementation\Can.c	  7591    /* #30 move to next Fifo element write index */
; ..\component\Can\Implementation\Can.c	  7592    Can_IncTxHwFifoFillCount(txHwFifo); /* SBSW_CAN_HL50 */
; ..\component\Can\Implementation\Can.c	  7593    if (Can_GetTxHwFifoWriteIndex(txHwFifo) < ((uint16)Can_GetMailboxSize(txPara->mailboxHandle) - (uint16)1u) )
; ..\component\Can\Implementation\Can.c	  7594    {
; ..\component\Can\Implementation\Can.c	  7595      Can_IncTxHwFifoWriteIndex(txHwFifo); /* SBSW_CAN_HL50 */
; ..\component\Can\Implementation\Can.c	  7596    }
; ..\component\Can\Implementation\Can.c	  7597    else
; ..\component\Can\Implementation\Can.c	  7598    {
; ..\component\Can\Implementation\Can.c	  7599      Can_SetTxHwFifoWriteIndex(txHwFifo,0); /* SBSW_CAN_HL50 */
; ..\component\Can\Implementation\Can.c	  7600    }
; ..\component\Can\Implementation\Can.c	  7601    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_7();
; ..\component\Can\Implementation\Can.c	  7602  }
; ..\component\Can\Implementation\Can.c	  7603  #endif
; ..\component\Can\Implementation\Can.c	  7604  
; ..\component\Can\Implementation\Can.c	  7605  #if defined(CAN_ENABLE_GENERIC_CONFIRMATION_API2)
; ..\component\Can\Implementation\Can.c	  7606  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  7607  | NAME:             CanHL_SetCanPduInfo
; ..\component\Can\Implementation\Can.c	  7608  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  7609  /*
; ..\component\Can\Implementation\Can.c	  7610  |<DataModelStart>| CanHL_SetCanPduInfo
; ..\component\Can\Implementation\Can.c	  7611  Relation_Context:
; ..\component\Can\Implementation\Can.c	  7612  # from CanHL_TxConfirmation #
; ..\component\Can\Implementation\Can.c	  7613  GenericConfirmation
; ..\component\Can\Implementation\Can.c	  7614  Relation:
; ..\component\Can\Implementation\Can.c	  7615  IDType
; ..\component\Can\Implementation\Can.c	  7616  CanFdSupport
; ..\component\Can\Implementation\Can.c	  7617  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  7618  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  7619  Constrain:
; ..\component\Can\Implementation\Can.c	  7620  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  7621  */
; ..\component\Can\Implementation\Can.c	  7622  /*!
; ..\component\Can\Implementation\Can.c	  7623   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  7624   *
; ..\component\Can\Implementation\Can.c	  7625   *
; ..\component\Can\Implementation\Can.c	  7626   *
; ..\component\Can\Implementation\Can.c	  7627   *
; ..\component\Can\Implementation\Can.c	  7628   */
; ..\component\Can\Implementation\Can.c	  7629  V_DEF_FUNC(CAN_STATIC, void, STATIC_CODE) CanHL_SetCanPduInfo(Can_PduInfoPtrType_var PduInfo, CanTxConfirmationParaStructPtr txConfPara) /* COV_CAN_GENDATA_TX_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  7630  {
; ..\component\Can\Implementation\Can.c	  7631    /* #10 set data pointer */
; ..\component\Can\Implementation\Can.c	  7632    PduInfo->sdu = (Can_SduPtrType) txConfPara->txStructConf->pChipData; /* PRQA S 0312 */ /* MD_Can_NoneVolatilePointerCast */ /* SBSW_CAN_HL46 */
; ..\component\Can\Implementation\Can.c	  7633    /* #20 set data length */
; ..\component\Can\Implementation\Can.c	  7634    PduInfo->length = CanTxActualDLC(txConfPara->txStructConf); /* SBSW_CAN_HL46 */
; ..\component\Can\Implementation\Can.c	  7635    /* #30 set ID */
; ..\component\Can\Implementation\Can.c	  7636  # if defined(C_ENABLE_EXTENDED_ID)
; ..\component\Can\Implementation\Can.c	  7637  #  if defined(C_ENABLE_MIXED_ID)
; ..\component\Can\Implementation\Can.c	  7638    if ( CanTxActualIdType(txConfPara->txStructConf) == kCanIdTypeStd) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  7639    { /* Mixed ID */
; ..\component\Can\Implementation\Can.c	  7640      PduInfo->id = (Can_IdType)CanTxActualStdId(txConfPara->txStructConf); /* PRQA S 4391 */ /* MD_Can_IntegerCast */ /* SBSW_CAN_HL46 */
; ..\component\Can\Implementation\Can.c	  7641    }
; ..\component\Can\Implementation\Can.c	  7642    else
; ..\component\Can\Implementation\Can.c	  7643  #  endif  /* pure Extended ID */
; ..\component\Can\Implementation\Can.c	  7644    { /* Extended ID */
; ..\component\Can\Implementation\Can.c	  7645      PduInfo->id = (Can_IdType)(CanTxActualExtId(txConfPara->txStructConf) | CAN_ID_IDE_MASK); /* SBSW_CAN_HL46 */
; ..\component\Can\Implementation\Can.c	  7646    }
; ..\component\Can\Implementation\Can.c	  7647  # else    /* Standard ID */
; ..\component\Can\Implementation\Can.c	  7648    PduInfo->id = CanTxActualStdId(txConfPara->txStructConf); /* SBSW_CAN_HL46 */
; ..\component\Can\Implementation\Can.c	  7649  # endif
; ..\component\Can\Implementation\Can.c	  7650  # if defined(C_ENABLE_CAN_FD_USED)
; ..\component\Can\Implementation\Can.c	  7651    if ( CanTxActualFdType(txConfPara->txStructConf) == kCanFdTypeFd )
; ..\component\Can\Implementation\Can.c	  7652    {
; ..\component\Can\Implementation\Can.c	  7653      PduInfo->id |= (Can_IdType)CAN_ID_FD_MASK; /* SBSW_CAN_HL46 */
; ..\component\Can\Implementation\Can.c	  7654    }
; ..\component\Can\Implementation\Can.c	  7655  # endif
; ..\component\Can\Implementation\Can.c	  7656    PduInfo->id &= CAN_ID_MASK_IN_GENERIC_CALLOUT; /* SBSW_CAN_HL46 */
; ..\component\Can\Implementation\Can.c	  7657  }
; ..\component\Can\Implementation\Can.c	  7658  #endif
; ..\component\Can\Implementation\Can.c	  7659  
; ..\component\Can\Implementation\Can.c	  7660  
; ..\component\Can\Implementation\Can.c	  7661  #if defined(C_ENABLE_RX_BASICCAN_OBJECTS) /* COV_CAN_MULTIPLE_BASICCAN */
; ..\component\Can\Implementation\Can.c	  7662  # if defined(C_ENABLE_RX_BASICCAN_POLLING) /* COV_CAN_RX_BASICCAN_POLLING */
; ..\component\Can\Implementation\Can.c	  7663  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  7664  | NAME:             CanHL_BasicCanMsgReceivedPolling
; ..\component\Can\Implementation\Can.c	  7665  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  7666  /*
; ..\component\Can\Implementation\Can.c	  7667  |<DataModelStart>| CanHL_BasicCanMsgReceivedPolling
; ..\component\Can\Implementation\Can.c	  7668  Relation_Context:
; ..\component\Can\Implementation\Can.c	  7669  # from CanLL_RxBasicProcessPendings #
; ..\component\Can\Implementation\Can.c	  7670  RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  7671  Relation:
; ..\component\Can\Implementation\Can.c	  7672  OneChOpt
; ..\component\Can\Implementation\Can.c	  7673  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  7674  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  7675  Constrain:
; ..\component\Can\Implementation\Can.c	  7676  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  7677  */
; ..\component\Can\Implementation\Can.c	  7678  /*!
; ..\component\Can\Implementation\Can.c	  7679   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  7680   *
; ..\component\Can\Implementation\Can.c	  7681   *
; ..\component\Can\Implementation\Can.c	  7682   *
; ..\component\Can\Implementation\Can.c	  7683   */
; ..\component\Can\Implementation\Can.c	  7684  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanHL_BasicCanMsgReceivedPolling( CAN_HW_CHANNEL_CANTYPE_FIRST CanObjectHandle rxMailboxHandle, CanObjectHandle hwObjHandle )
; ..\component\Can\Implementation\Can.c	  7685  {
; ..\component\Can\Implementation\Can.c	  7686    /* #10 Lock CAN controller interrupts. */
; ..\component\Can\Implementation\Can.c	  7687    Can_DisableControllerInterrupts((uint8)channel);
; ..\component\Can\Implementation\Can.c	  7688    /* #20 call CanHL_BasicCanMsgReceived() for handling */
; ..\component\Can\Implementation\Can.c	  7689    CanHL_BasicCanMsgReceived( CAN_HW_CHANNEL_CANPARA_FIRST rxMailboxHandle, hwObjHandle );
; ..\component\Can\Implementation\Can.c	  7690    Can_EnableControllerInterrupts((uint8)channel);
; ..\component\Can\Implementation\Can.c	  7691  }
; ..\component\Can\Implementation\Can.c	  7692  #endif
; ..\component\Can\Implementation\Can.c	  7693  
; ..\component\Can\Implementation\Can.c	  7694  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  7695  | NAME:             CanHL_BasicCanMsgReceived
; ..\component\Can\Implementation\Can.c	  7696  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  7697  /*
; ..\component\Can\Implementation\Can.c	  7698  |<DataModelStart>| CanHL_BasicCanMsgReceived
; ..\component\Can\Implementation\Can.c	  7699  Relation_Context:
; ..\component\Can\Implementation\Can.c	  7700  # from CanHL_BasicCanMsgReceivedPolling #
; ..\component\Can\Implementation\Can.c	  7701  RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  7702  # from Rx Interrupt #
; ..\component\Can\Implementation\Can.c	  7703  Relation:
; ..\component\Can\Implementation\Can.c	  7704  DevErrorDetect, RxPolling, OneChOpt
; ..\component\Can\Implementation\Can.c	  7705  RamCheck
; ..\component\Can\Implementation\Can.c	  7706  Overrun
; ..\component\Can\Implementation\Can.c	  7707  IDType
; ..\component\Can\Implementation\Can.c	  7708  CanFdSupport
; ..\component\Can\Implementation\Can.c	  7709  DevErrorDetect, RxPolling, IndividualPolling
; ..\component\Can\Implementation\Can.c	  7710  ChannelAmount
; ..\component\Can\Implementation\Can.c	  7711  RxBasicAmount
; ..\component\Can\Implementation\Can.c	  7712  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  7713  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  7714  Constrain:
; ..\component\Can\Implementation\Can.c	  7715  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  7716  */
; ..\component\Can\Implementation\Can.c	  7717  /*!
; ..\component\Can\Implementation\Can.c	  7718   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  7719   *
; ..\component\Can\Implementation\Can.c	  7720   *
; ..\component\Can\Implementation\Can.c	  7721   *
; ..\component\Can\Implementation\Can.c	  7722   *
; ..\component\Can\Implementation\Can.c	  7723   *
; ..\component\Can\Implementation\Can.c	  7724   *
; ..\component\Can\Implementation\Can.c	  7725   *
; ..\component\Can\Implementation\Can.c	  7726   *
; ..\component\Can\Implementation\Can.c	  7727   *
; ..\component\Can\Implementation\Can.c	  7728   *
; ..\component\Can\Implementation\Can.c	  7729   *
; ..\component\Can\Implementation\Can.c	  7730   *
; ..\component\Can\Implementation\Can.c	  7731   *
; ..\component\Can\Implementation\Can.c	  7732   */
; ..\component\Can\Implementation\Can.c	  7733  /* explicite not inline (big code + multiple calls) */
; ..\component\Can\Implementation\Can.c	  7734  V_DEF_FUNC(CAN_STATIC, void, STATIC_CODE) CanHL_BasicCanMsgReceived( CAN_HW_CHANNEL_CANTYPE_FIRST CanObjectHandle rxMailboxHandle, CanObjectHandle hwObjHandle )
; Function CanHL_BasicCanMsgReceived
.L375:
CanHL_BasicCanMsgReceived:	.type	func
	sub.a	a10,#112
.L1029:

; ..\component\Can\Implementation\Can.c	  7735  {
; ..\component\Can\Implementation\Can.c	  7736    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  7737    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  7738    tCanRxBasicParaStruct rxBasicPara;
; ..\component\Can\Implementation\Can.c	  7739    CanHookBegin_CanHL_BasicCanMsgReceived();
; ..\component\Can\Implementation\Can.c	  7740    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  7741    rxBasicPara.mailboxHandle = rxMailboxHandle;
; ..\component\Can\Implementation\Can.c	  7742    rxBasicPara.hwObjHandle = hwObjHandle;
	mov	d2,#0
	st.b	[a10],d4
.L1320:
	st.b	[a10]1,d2
.L1949:
	movh.a	a5,#@his(Can_ControllerConfig)
	lea	a5,[a5]@los(Can_ControllerConfig)
	ld.w	d0,[a5]
.L1950:
	mov.a	a2,d0
.L1951:
	addi	d15,d0,#424
	st.w	[a10]24,d15
.L1952:
	addi	d15,d0,#420
	st.w	[a10]28,d15
.L1953:
	ld.bu	d15,[a2]421
.L1954:
	movh.a	a2,#@his(Can_ShmAdr+4)
	ld.w	d0,[a2]@los(Can_ShmAdr+4)
	movh.a	a2,#@his(Can_ShmElementSize)
.L1955:
	and	d15,#63
	ld.bu	d1,[a2]@los(Can_ShmElementSize)
	movh.a	a2,#@his(CanLL_xES2Bytes)
	lea	a2,[a2]@los(CanLL_xES2Bytes)
	addsc.a	a2,a2,d1,#0
.L1956:
	st.b	[a10]104,d15
.L1957:
	ld.bu	d1,[a2]
.L1958:
	movh.a	a2,#@his(Can_DlcToFrameLenght)
.L1959:
	add	d1,d1,#8
	lea	a2,[a2]@los(Can_DlcToFrameLenght)
.L1960:
	mul	d1,d15
.L1961:
	add	d0,d1
	st.w	[a10]20,d0
.L1962:
	ld.a	a15,[a10]20
.L1963:
	ld.w	d15,[a15]
.L1964:
	st.w	[a10]32,d15
.L1965:
	ld.w	d15,[a15]4
.L1966:
	st.w	[a10]36,d15
.L1967:
	ld.w	d15,[a10]36
	extr.u	d15,d15,#16,#4
	addsc.a	a4,a2,d15,#0
	ld.bu	d0,[a4]
.L1322:

; ..\component\Can\Implementation\Can.c	  4565    for(indexL = 0u; (indexL << 2u) < fElmSize; indexL++)      (inlined)
	jeq	d0,#0,.L81
.L82:
	addsc.a	a4,a10,d2,#2
.L1968:
	ld.a	a15,[a10]20
	addsc.a	a15,a15,d2,#2
.L1969:
	add	d2,#1
.L1321:
	ld.w	d15,[a15]8
.L1970:
	extr.u	d2,d2,#0,#8
.L1325:
	st.w	[a4]40,d15
.L1971:
	sha	d15,d2,#2
.L1972:

; ..\component\Can\Implementation\Can.c	  4565    for(indexL = 0u; (indexL << 2u) < fElmSize; indexL++)      (inlined)
	jlt	d15,d0,.L82
.L81:
	lea	a15,[a10]32
.L1973:
	st.a	[a10]4,a15
.L1974:
	lea	a15,[a10]40
.L1975:
	st.a	[a10]8,a15
.L1030:

; ..\component\Can\Implementation\Can.c	  7743    
; ..\component\Can\Implementation\Can.c	  7744    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  7745  # if (CAN_DEV_ERROR_DETECT == STD_ON) && !defined(C_ENABLE_RX_BASICCAN_POLLING)
; ..\component\Can\Implementation\Can.c	  7746  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  7747    /* #10 Check if parameter controller is in expected limit (already checked in polling task - do it only for interrupt) */
; ..\component\Can\Implementation\Can.c	  7748    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  7749    {
; ..\component\Can\Implementation\Can.c	  7750      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  7751    }
; ..\component\Can\Implementation\Can.c	  7752    else
; ..\component\Can\Implementation\Can.c	  7753  #  endif
; ..\component\Can\Implementation\Can.c	  7754  # endif 
; ..\component\Can\Implementation\Can.c	  7755    {
; ..\component\Can\Implementation\Can.c	  7756      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  7757      /* #25 receive handling begin CanLL_RxBasicMsgReceivedBegin() \trace SPEC-1682, SPEC-1694 */
; ..\component\Can\Implementation\Can.c	  7758      if (CanLL_RxBasicMsgReceivedBegin(CAN_CHANNEL_CANPARA_FIRST &rxBasicPara) == kCanOk) /* SBSW_CAN_HL26 */ /* COV_CAN_RxBasicMsgReceivedBegin */
; ..\component\Can\Implementation\Can.c	  7759      {
; ..\component\Can\Implementation\Can.c	  7760  # if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  7761        /* -------------------------- RAM check failed --- */
; ..\component\Can\Implementation\Can.c	  7762        if ((Can_GetLogStatus(channel) & CAN_DEACTIVATE_CONTROLLER) != CAN_DEACTIVATE_CONTROLLER) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  7763  # endif
; ..\component\Can\Implementation\Can.c	  7764        { /* #30 RAM CHECK pass so continue reception */
; ..\component\Can\Implementation\Can.c	  7765  # if defined(C_ENABLE_OVERRUN)
; ..\component\Can\Implementation\Can.c	  7766  #  if !defined(C_HL_ENABLE_OVERRUN_IN_STATUS) /* COV_CAN_OVERRUN_IN_STATUS */
; ..\component\Can\Implementation\Can.c	  7767  #  endif
; ..\component\Can\Implementation\Can.c	  7768  # endif
; ..\component\Can\Implementation\Can.c	  7769          /* \trace SPEC-1346 */
; ..\component\Can\Implementation\Can.c	  7770          {
; ..\component\Can\Implementation\Can.c	  7771            /* -------------------------- Get DLC and Data Pointer --- */
; ..\component\Can\Implementation\Can.c	  7772            /* #60 get ID, DLC and data from HW \trace SPEC-1691, SPEC-1693 */
; ..\component\Can\Implementation\Can.c	  7773            rxBasicPara.rxStruct.localDlc = CanRxActualDLC((&(rxBasicPara.rxStruct)));
	ld.bu	d15,[a10]38
	and	d15,#15
	addsc.a	a15,a2,d15,#0
	ld.bu	d15,[a15]
.L1976:
	st.b	[a10]16,d15
.L1977:

; ..\component\Can\Implementation\Can.c	  7774            /* -------------------------- Get ID  &  reject unwanted ID type --- */
; ..\component\Can\Implementation\Can.c	  7775  # if defined(C_ENABLE_EXTENDED_ID)
; ..\component\Can\Implementation\Can.c	  7776  #  if defined(C_ENABLE_MIXED_ID)
; ..\component\Can\Implementation\Can.c	  7777            if ( CanRxActualIdType((&(rxBasicPara.rxStruct))) == kCanIdTypeStd) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  7778            { /* mixed - standard ID */
; ..\component\Can\Implementation\Can.c	  7779              rxBasicPara.rxStruct.localId = (Can_IdType)CanRxActualStdId((&(rxBasicPara.rxStruct)));
; ..\component\Can\Implementation\Can.c	  7780            }
; ..\component\Can\Implementation\Can.c	  7781            else
; ..\component\Can\Implementation\Can.c	  7782  #  endif 
; ..\component\Can\Implementation\Can.c	  7783            { /* mixed or pure - extended ID */
; ..\component\Can\Implementation\Can.c	  7784              rxBasicPara.rxStruct.localId = (Can_IdType)(CanRxActualExtId((&(rxBasicPara.rxStruct))) | CAN_ID_IDE_MASK);
; ..\component\Can\Implementation\Can.c	  7785            }
; ..\component\Can\Implementation\Can.c	  7786            {
; ..\component\Can\Implementation\Can.c	  7787  # else 
; ..\component\Can\Implementation\Can.c	  7788            { /* pure - standard ID */
; ..\component\Can\Implementation\Can.c	  7789              rxBasicPara.rxStruct.localId = CanRxActualStdId((&(rxBasicPara.rxStruct)));
	ld.w	d15,[a10]32
	sh	d15,d15,#-18
.L1978:
	insert	d15,d15,#0,#11,#21
	st.h	[a10]14,d15
.L1979:

; ..\component\Can\Implementation\Can.c	  7790  # endif
; ..\component\Can\Implementation\Can.c	  7791  # if defined(C_ENABLE_CAN_FD_USED)
; ..\component\Can\Implementation\Can.c	  7792              if ( CanRxActualFdType((&(rxBasicPara.rxStruct))) == kCanFdTypeFd )
	ld.w	d0,[a10]36
.L1323:
	jz.t	d0:21,.L83
.L1980:

; ..\component\Can\Implementation\Can.c	  7793              { /* \trace SPEC-60428 */
; ..\component\Can\Implementation\Can.c	  7794                rxBasicPara.rxStruct.localId |= (Can_IdType)CAN_ID_FD_MASK;
	insert	d15,d15,#1,#14,#1
	st.h	[a10]14,d15
.L83:

; ..\component\Can\Implementation\Can.c	  7795              }
; ..\component\Can\Implementation\Can.c	  7796              /* DLC is not bigger than expected length (8) for CLASSIC CAN msg (additional to HashTag 145) */
; ..\component\Can\Implementation\Can.c	  7797              if ((CanRxActualFdType((&(rxBasicPara.rxStruct))) != kCanFdTypeFd) && (rxBasicPara.rxStruct.localDlc > 8u)) /* ESCAN00084263 */ /* COV_CAN_HARDWARE_FAILURE */
	ld.w	d15,[a10]36
.L1981:
	jnz.t	d15:21,.L84
.L1982:
	ld.bu	d15,[a10]16
.L1983:
	jge.u	d15,#9,.L85
.L84:

; ..\component\Can\Implementation\Can.c	  7798              {
; ..\component\Can\Implementation\Can.c	  7799                errorId = CAN_E_PARAM_DLC;
; ..\component\Can\Implementation\Can.c	  7800              }
; ..\component\Can\Implementation\Can.c	  7801              else
; ..\component\Can\Implementation\Can.c	  7802  # endif
; ..\component\Can\Implementation\Can.c	  7803  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  7804  #  if (!defined(C_ENABLE_RX_BASICCAN_POLLING) || defined(C_ENABLE_INDIVIDUAL_POLLING))
; ..\component\Can\Implementation\Can.c	  7805              /* #140 Check HRH is BasicCAN (already checked in polling task - do it only for interrupt) */
; ..\component\Can\Implementation\Can.c	  7806              if ( (rxBasicPara.mailboxHandle < Can_GetRxBasicHandleStart(canHwChannel)) ||
	ld.bu	d4,[a10]
.L1319:
	ld.bu	d15,[a5]10
.L1984:
	jlt.u	d4,d15,.L86
.L1985:

; ..\component\Can\Implementation\Can.c	  7807                   (rxBasicPara.mailboxHandle >= Can_GetRxBasicHandleStop(canHwChannel)) ) /* PRQA S 2991,2992,2995,2996 */ /* MD_Can_ConstValue */ /* CM_CAN_HL18 */ /* COV_CAN_GENDATA_FAILURE */
	ld.bu	d15,[a5]8
.L1986:
	jlt.u	d4,d15,.L87
.L86:

; ..\component\Can\Implementation\Can.c	  7808              {
; ..\component\Can\Implementation\Can.c	  7809                errorId = CAN_E_PARAM_HANDLE;
	mov	d8,#2
	j	.L88
.L87:

; ..\component\Can\Implementation\Can.c	  7810              } 
; ..\component\Can\Implementation\Can.c	  7811              else
; ..\component\Can\Implementation\Can.c	  7812  #  endif
; ..\component\Can\Implementation\Can.c	  7813  # endif
; ..\component\Can\Implementation\Can.c	  7814              /* #145 DLC is not bigger than expected length from mailbox (MAX over all PDU for this mailbox) */
; ..\component\Can\Implementation\Can.c	  7815              if (rxBasicPara.rxStruct.localDlc > CAN_MAX_DATALEN_OBJ(rxBasicPara.mailboxHandle)) /* ESCAN00084263 */ /* COV_CAN_HARDWARE_FAILURE */
	ld.bu	d0,[a10]16
.L1987:
	fcall	.cocofun_13
	ld.bu	d15,[a15]7
.L1988:
	jge.u	d15,d0,.L89
.L85:

; ..\component\Can\Implementation\Can.c	  7816              {
; ..\component\Can\Implementation\Can.c	  7817                errorId = CAN_E_PARAM_DLC;
	mov	d8,#3
	j	.L90
.L89:

; ..\component\Can\Implementation\Can.c	  7818              }
; ..\component\Can\Implementation\Can.c	  7819              else
; ..\component\Can\Implementation\Can.c	  7820              {
; ..\component\Can\Implementation\Can.c	  7821                /* -------------------------- Notification --- */
; ..\component\Can\Implementation\Can.c	  7822                /* #150 RX queue and notification handling CanHL_RxMsgReceivedNotification() */
; ..\component\Can\Implementation\Can.c	  7823                rxBasicPara.rxStruct.localMailboxHandle = rxBasicPara.mailboxHandle;
	st.b	[a10]12,d4
.L1037:
	ld.hu	d5,[a10]14
.L1324:
	ld.bu	d6,[a10]16
	ld.a	a4,[a10]8
	call	CanIf_RxIndicationAsr403
.L1038:

; ..\component\Can\Implementation\Can.c	  7824                errorId = CanHL_RxMsgReceivedNotification(CAN_CHANNEL_CANPARA_FIRST &(rxBasicPara.rxStruct)); /* SBSW_CAN_HL26 */
	mov	d8,#0
.L90:
.L88:
	ld.a	a15,[a10]28
.L1989:
	ld.w	d15,[a15]
.L1990:
	and	d15,#127
.L1991:

; ..\component\Can\Implementation\Can.c	  4605    if( (((vuint32)*(vuint32*) rxBasicPara->pFifoStatus) & kCanRXFnS_FnFL) > 0UL)  /* PRQA S 0310,0312 */ /* MD_Can_PointerCast,MD_Can_NoneVolatilePointerCast */ /* COV_CAN_MCAN_SAFETY_CHECK */      (inlined)
	jeq	d15,#0,.L91
.L1992:
	ld.a	a15,[a10]24
.L1993:
	ld.bu	d15,[a10]104
.L1994:
	and	d15,#63
	st.w	[a15],d15
.L1995:

; ..\component\Can\Implementation\Can.c	  4610      *rxBasicPara->pFifoAck    = (rxBasicPara->fGetIndex & 0x0000003FUL); /* SBSW_CAN_LL_109 */        (inlined)
	j	.L92

; ..\component\Can\Implementation\Can.c	  4605    if( (((vuint32)*(vuint32*) rxBasicPara->pFifoStatus) & kCanRXFnS_FnFL) > 0UL)  /* PRQA S 0310,0312 */ /* MD_Can_PointerCast,MD_Can_NoneVolatilePointerCast */ /* COV_CAN_MCAN_SAFETY_CHECK */      (inlined)
.L91:
	fcall	.cocofun_2
	mov	d6,#96
	mov	d7,#4
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  4612    else      (inlined)
.L92:

; ..\component\Can\Implementation\Can.c	  7825              }
; ..\component\Can\Implementation\Can.c	  7826            }
; ..\component\Can\Implementation\Can.c	  7827          }
; ..\component\Can\Implementation\Can.c	  7828        }
; ..\component\Can\Implementation\Can.c	  7829      }
; ..\component\Can\Implementation\Can.c	  7830      /* #160 receive handling end CanHL_RxBasicMsgReceivedEnd() */
; ..\component\Can\Implementation\Can.c	  7831      CanLL_RxBasicReleaseObj(CAN_CHANNEL_CANPARA_FIRST &rxBasicPara); /* SBSW_CAN_HL26 */
; ..\component\Can\Implementation\Can.c	  7832      CanLL_RxBasicMsgReceivedEnd(CAN_CHANNEL_CANPARA_FIRST &rxBasicPara); /* SBSW_CAN_HL26 */
; ..\component\Can\Implementation\Can.c	  7833    }
; ..\component\Can\Implementation\Can.c	  7834  
; ..\component\Can\Implementation\Can.c	  7835    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  7836  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  7837    if (errorId != CAN_E_NO_ERROR) /* PRQA S 2992,2996 */ /* MD_Can_ConstValue */ /* COV_CAN_HARDWARE_FAILURE */
	jeq	d8,#0,.L93
.L1996:

; ..\component\Can\Implementation\Can.c	  7838    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  7839      Can_CallDetReportError(CAN_RXINDI_ID, errorId); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
	fcall	.cocofun_2
	mov	e6,d8,d4
	j	Det_ReportError
.L93:

; ..\component\Can\Implementation\Can.c	  7840    }
; ..\component\Can\Implementation\Can.c	  7841  # else
; ..\component\Can\Implementation\Can.c	  7842    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  7843  # endif
; ..\component\Can\Implementation\Can.c	  7844    CanHookEnd_CanHL_BasicCanMsgReceived();
; ..\component\Can\Implementation\Can.c	  7845  } /* PRQA S 6010,6030,6080 */ /* MD_MSR_STPTH,MD_MSR_STCYC,MD_MSR_STMIF */
	ret
.L1022:
	
__CanHL_BasicCanMsgReceived_function_end:
	.size	CanHL_BasicCanMsgReceived,__CanHL_BasicCanMsgReceived_function_end-CanHL_BasicCanMsgReceived
.L523:
	; End of function
	
	.sdecl	'.text.Can.CanHL_ErrorHandling',code,cluster('CanHL_ErrorHandling')
	.sect	'.text.Can.CanHL_ErrorHandling'
	.align	2
	

; ..\component\Can\Implementation\Can.c	  7846  #endif /* C_ENABLE_RX_BASICCAN_OBJECTS */
; ..\component\Can\Implementation\Can.c	  7847  
; ..\component\Can\Implementation\Can.c	  7848  #if defined(C_ENABLE_RX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  7849  # if defined(C_ENABLE_RX_FULLCAN_POLLING) /* COV_CAN_RX_FULLCAN_POLLING */
; ..\component\Can\Implementation\Can.c	  7850  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  7851  | NAME:             CanHL_FullCanMsgReceivedPolling
; ..\component\Can\Implementation\Can.c	  7852  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  7853  /*
; ..\component\Can\Implementation\Can.c	  7854  |<DataModelStart>| CanHL_FullCanMsgReceivedPolling
; ..\component\Can\Implementation\Can.c	  7855  Relation_Context:
; ..\component\Can\Implementation\Can.c	  7856  # from CanLL_RxFullProcessPendings #
; ..\component\Can\Implementation\Can.c	  7857  RxFullCANSupport, RxPolling
; ..\component\Can\Implementation\Can.c	  7858  Relation:
; ..\component\Can\Implementation\Can.c	  7859  OneChOpt
; ..\component\Can\Implementation\Can.c	  7860  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  7861  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  7862  Constrain:
; ..\component\Can\Implementation\Can.c	  7863  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  7864  */
; ..\component\Can\Implementation\Can.c	  7865  /*!
; ..\component\Can\Implementation\Can.c	  7866   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  7867   *
; ..\component\Can\Implementation\Can.c	  7868   *
; ..\component\Can\Implementation\Can.c	  7869   *
; ..\component\Can\Implementation\Can.c	  7870   */
; ..\component\Can\Implementation\Can.c	  7871  V_DEF_FUNC(CAN_LOCAL_INLINE, void, STATIC_CODE) CanHL_FullCanMsgReceivedPolling( CAN_HW_CHANNEL_CANTYPE_FIRST CanObjectHandle rxMailboxHandle, CanObjectHandle hwObjHandle )
; ..\component\Can\Implementation\Can.c	  7872  {
; ..\component\Can\Implementation\Can.c	  7873    /* #10 Lock CAN controller interrupts. */
; ..\component\Can\Implementation\Can.c	  7874    Can_DisableControllerInterrupts((uint8)channel);
; ..\component\Can\Implementation\Can.c	  7875    /* #20 call CanHL_FullCanMsgReceived() for handling */
; ..\component\Can\Implementation\Can.c	  7876    CanHL_FullCanMsgReceived( CAN_HW_CHANNEL_CANPARA_FIRST rxMailboxHandle, hwObjHandle );
; ..\component\Can\Implementation\Can.c	  7877    Can_EnableControllerInterrupts((uint8)channel);
; ..\component\Can\Implementation\Can.c	  7878  }
; ..\component\Can\Implementation\Can.c	  7879  # endif
; ..\component\Can\Implementation\Can.c	  7880  
; ..\component\Can\Implementation\Can.c	  7881  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  7882  | NAME:             CanHL_FullCanMsgReceived
; ..\component\Can\Implementation\Can.c	  7883  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  7884  /*
; ..\component\Can\Implementation\Can.c	  7885  |<DataModelStart>| CanHL_FullCanMsgReceived
; ..\component\Can\Implementation\Can.c	  7886  Relation_Context:
; ..\component\Can\Implementation\Can.c	  7887  # from CanLL_FullCanMsgReceivedPolling #
; ..\component\Can\Implementation\Can.c	  7888  RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  7889  # from Rx Interrupt #
; ..\component\Can\Implementation\Can.c	  7890  Relation:
; ..\component\Can\Implementation\Can.c	  7891  OneChOpt
; ..\component\Can\Implementation\Can.c	  7892  DevErrorDetect, RxPolling, OneChOpt
; ..\component\Can\Implementation\Can.c	  7893  RamCheck
; ..\component\Can\Implementation\Can.c	  7894  Overrun
; ..\component\Can\Implementation\Can.c	  7895  IDType
; ..\component\Can\Implementation\Can.c	  7896  CanFdSupport
; ..\component\Can\Implementation\Can.c	  7897  DevErrorDetect, RxPolling, IndividualPolling
; ..\component\Can\Implementation\Can.c	  7898  ChannelAmount
; ..\component\Can\Implementation\Can.c	  7899  RxFullAmount
; ..\component\Can\Implementation\Can.c	  7900  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  7901  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  7902  Constrain:
; ..\component\Can\Implementation\Can.c	  7903  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  7904  */
; ..\component\Can\Implementation\Can.c	  7905  /*!
; ..\component\Can\Implementation\Can.c	  7906   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  7907   *
; ..\component\Can\Implementation\Can.c	  7908   *
; ..\component\Can\Implementation\Can.c	  7909   *
; ..\component\Can\Implementation\Can.c	  7910   *
; ..\component\Can\Implementation\Can.c	  7911   *
; ..\component\Can\Implementation\Can.c	  7912   *
; ..\component\Can\Implementation\Can.c	  7913   *
; ..\component\Can\Implementation\Can.c	  7914   *
; ..\component\Can\Implementation\Can.c	  7915   *
; ..\component\Can\Implementation\Can.c	  7916   *
; ..\component\Can\Implementation\Can.c	  7917   *
; ..\component\Can\Implementation\Can.c	  7918   *
; ..\component\Can\Implementation\Can.c	  7919   *
; ..\component\Can\Implementation\Can.c	  7920   */
; ..\component\Can\Implementation\Can.c	  7921  /* explicite not inline (big code + multiple calls) */
; ..\component\Can\Implementation\Can.c	  7922  V_DEF_FUNC(CAN_STATIC, void, STATIC_CODE) CanHL_FullCanMsgReceived( CAN_HW_CHANNEL_CANTYPE_FIRST CanObjectHandle rxMailboxHandle, CanObjectHandle hwObjHandle ) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  7923  {
; ..\component\Can\Implementation\Can.c	  7924    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  7925    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  7926    tCanRxFullParaStruct rxFullPara;
; ..\component\Can\Implementation\Can.c	  7927    CanHookBegin_CanHL_FullCanMsgReceived();
; ..\component\Can\Implementation\Can.c	  7928    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  7929    rxFullPara.mailboxHandle = rxMailboxHandle;
; ..\component\Can\Implementation\Can.c	  7930    rxFullPara.hwObjHandle = hwObjHandle;
; ..\component\Can\Implementation\Can.c	  7931    
; ..\component\Can\Implementation\Can.c	  7932    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  7933  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  7934  #  if !defined(C_ENABLE_RX_FULLCAN_POLLING) /* COV_CAN_RX_FULLCAN_POLLING */
; ..\component\Can\Implementation\Can.c	  7935  #   if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  7936    /* #10 Check if parameter controller is in expected limit (already checked in polling task - do it only for interrupt) */
; ..\component\Can\Implementation\Can.c	  7937    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  7938    {
; ..\component\Can\Implementation\Can.c	  7939      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  7940    }
; ..\component\Can\Implementation\Can.c	  7941    else
; ..\component\Can\Implementation\Can.c	  7942  #   endif
; ..\component\Can\Implementation\Can.c	  7943  #  endif
; ..\component\Can\Implementation\Can.c	  7944  # endif
; ..\component\Can\Implementation\Can.c	  7945    {
; ..\component\Can\Implementation\Can.c	  7946      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  7947      /* #25 receive handling begin CanLL_RxFullMsgReceivedBegin() \trace SPEC-1682, SPEC-1694 */
; ..\component\Can\Implementation\Can.c	  7948      if (CanLL_RxFullMsgReceivedBegin(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &rxFullPara) == kCanOk) /* SBSW_CAN_HL27 */ /* COV_CAN_RxFullMsgReceivedBegin */
; ..\component\Can\Implementation\Can.c	  7949      {
; ..\component\Can\Implementation\Can.c	  7950    /* -------------------------- RAM check failed --- */
; ..\component\Can\Implementation\Can.c	  7951  # if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  7952        if ((Can_GetLogStatus(channel) & CAN_DEACTIVATE_CONTROLLER) != CAN_DEACTIVATE_CONTROLLER) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  7953  # endif
; ..\component\Can\Implementation\Can.c	  7954        { /* #30 RAM CHECK pass so continue reception */
; ..\component\Can\Implementation\Can.c	  7955          /* -------------------------- Overrun --- */
; ..\component\Can\Implementation\Can.c	  7956          {
; ..\component\Can\Implementation\Can.c	  7957            /* -------------------------- Get DLC and Data Pointer --- */
; ..\component\Can\Implementation\Can.c	  7958            /* #60 get ID, DLC and data from HW \trace SPEC-1691, SPEC-1693 */
; ..\component\Can\Implementation\Can.c	  7959            rxFullPara.rxStruct.localDlc = CanRxActualDLC((&(rxFullPara.rxStruct)));
; ..\component\Can\Implementation\Can.c	  7960            /* -------------------------- Get ID  &  reject unwanted ID type --- */
; ..\component\Can\Implementation\Can.c	  7961  # if defined(C_ENABLE_EXTENDED_ID)
; ..\component\Can\Implementation\Can.c	  7962  #  if defined(C_ENABLE_MIXED_ID)
; ..\component\Can\Implementation\Can.c	  7963            if ( CanRxActualIdType((&(rxFullPara.rxStruct))) == kCanIdTypeStd) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  7964            { /* mixed - standard ID */
; ..\component\Can\Implementation\Can.c	  7965              rxFullPara.rxStruct.localId = (Can_IdType)CanRxActualStdId((&(rxFullPara.rxStruct)));
; ..\component\Can\Implementation\Can.c	  7966            }
; ..\component\Can\Implementation\Can.c	  7967            else
; ..\component\Can\Implementation\Can.c	  7968  #  endif 
; ..\component\Can\Implementation\Can.c	  7969            { /* mixed or pure - extended ID */
; ..\component\Can\Implementation\Can.c	  7970              rxFullPara.rxStruct.localId = (Can_IdType)(CanRxActualExtId((&(rxFullPara.rxStruct))) | CAN_ID_IDE_MASK);
; ..\component\Can\Implementation\Can.c	  7971            }
; ..\component\Can\Implementation\Can.c	  7972  # else 
; ..\component\Can\Implementation\Can.c	  7973            rxFullPara.rxStruct.localId = CanRxActualStdId((&(rxFullPara.rxStruct)));
; ..\component\Can\Implementation\Can.c	  7974  # endif
; ..\component\Can\Implementation\Can.c	  7975            { /* ID has valid IdType */
; ..\component\Can\Implementation\Can.c	  7976  # if defined(C_ENABLE_CAN_FD_USED)
; ..\component\Can\Implementation\Can.c	  7977              if ( CanRxActualFdType((&(rxFullPara.rxStruct))) == kCanFdTypeFd )
; ..\component\Can\Implementation\Can.c	  7978              { /* \trace SPEC-60428 */
; ..\component\Can\Implementation\Can.c	  7979                rxFullPara.rxStruct.localId |= (Can_IdType)CAN_ID_FD_MASK;
; ..\component\Can\Implementation\Can.c	  7980              }
; ..\component\Can\Implementation\Can.c	  7981              /* DLC is not bigger than expected length (8) for CLASSIC CAN msg (additional to HashTag 145) */
; ..\component\Can\Implementation\Can.c	  7982              if ((CanRxActualFdType((&(rxFullPara.rxStruct))) != kCanFdTypeFd) && (rxFullPara.rxStruct.localDlc > 8u)) /* ESCAN00084263 */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  7983              {
; ..\component\Can\Implementation\Can.c	  7984                errorId = CAN_E_PARAM_DLC;
; ..\component\Can\Implementation\Can.c	  7985              }
; ..\component\Can\Implementation\Can.c	  7986              else
; ..\component\Can\Implementation\Can.c	  7987  # endif
; ..\component\Can\Implementation\Can.c	  7988  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  7989  #  if (!defined(C_ENABLE_RX_FULLCAN_POLLING) || defined(C_ENABLE_INDIVIDUAL_POLLING)) /* COV_CAN_RX_FULLCAN_POLLING */
; ..\component\Can\Implementation\Can.c	  7990              /* #140 Check HRH is FullCAN (already checked in polling task - do it only for interrupt) */
; ..\component\Can\Implementation\Can.c	  7991              if ( (rxFullPara.mailboxHandle < Can_GetRxFullHandleStart(canHwChannel)) ||
; ..\component\Can\Implementation\Can.c	  7992                   (rxFullPara.mailboxHandle >= Can_GetRxFullHandleStop(canHwChannel)) )  /* PRQA S 2991,2992,2995,2996 */ /* MD_Can_ConstValue */ /* CM_CAN_HL18 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  7993              {
; ..\component\Can\Implementation\Can.c	  7994                errorId = CAN_E_PARAM_HANDLE;
; ..\component\Can\Implementation\Can.c	  7995              }
; ..\component\Can\Implementation\Can.c	  7996              else
; ..\component\Can\Implementation\Can.c	  7997  #  endif
; ..\component\Can\Implementation\Can.c	  7998  # endif
; ..\component\Can\Implementation\Can.c	  7999              /* #145 DLC is not bigger than expected length from mailbox */
; ..\component\Can\Implementation\Can.c	  8000              if (rxFullPara.rxStruct.localDlc > CAN_MAX_DATALEN_OBJ(rxFullPara.mailboxHandle)) /* ESCAN00084263 */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  8001              {
; ..\component\Can\Implementation\Can.c	  8002                errorId = CAN_E_PARAM_DLC;
; ..\component\Can\Implementation\Can.c	  8003              }
; ..\component\Can\Implementation\Can.c	  8004              else
; ..\component\Can\Implementation\Can.c	  8005              {
; ..\component\Can\Implementation\Can.c	  8006                /* -------------------------- Notification --- */
; ..\component\Can\Implementation\Can.c	  8007                /* #150 RX queue and notification handling CanHL_RxMsgReceivedNotification() */
; ..\component\Can\Implementation\Can.c	  8008                rxFullPara.rxStruct.localMailboxHandle = rxFullPara.mailboxHandle;
; ..\component\Can\Implementation\Can.c	  8009                errorId = CanHL_RxMsgReceivedNotification(CAN_CHANNEL_CANPARA_FIRST &(rxFullPara.rxStruct)); /* SBSW_CAN_HL27 */
; ..\component\Can\Implementation\Can.c	  8010              }
; ..\component\Can\Implementation\Can.c	  8011            }
; ..\component\Can\Implementation\Can.c	  8012          }
; ..\component\Can\Implementation\Can.c	  8013        }
; ..\component\Can\Implementation\Can.c	  8014      }
; ..\component\Can\Implementation\Can.c	  8015      /* #160 receive handling end CanHL_RxFullMsgReceivedEnd() */
; ..\component\Can\Implementation\Can.c	  8016      CanLL_RxFullReleaseObj(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &rxFullPara); /* SBSW_CAN_HL27 */
; ..\component\Can\Implementation\Can.c	  8017      CanLL_RxFullMsgReceivedEnd(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &rxFullPara); /* SBSW_CAN_HL27 */
; ..\component\Can\Implementation\Can.c	  8018    }
; ..\component\Can\Implementation\Can.c	  8019  
; ..\component\Can\Implementation\Can.c	  8020    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8021  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8022    if (errorId != CAN_E_NO_ERROR) /* PRQA S 2992,2996 */ /* MD_Can_ConstValue */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  8023    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  8024      Can_CallDetReportError(CAN_RXINDI_ID, errorId); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  8025    }
; ..\component\Can\Implementation\Can.c	  8026  # else
; ..\component\Can\Implementation\Can.c	  8027    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8028  # endif
; ..\component\Can\Implementation\Can.c	  8029    CanHookEnd_CanHL_FullCanMsgReceived();
; ..\component\Can\Implementation\Can.c	  8030  } /* PRQA S 6030,6080 */ /* MD_MSR_STCYC,MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	  8031  #endif /* C_ENABLE_RX_FULLCAN_OBJECTS */
; ..\component\Can\Implementation\Can.c	  8032  
; ..\component\Can\Implementation\Can.c	  8033  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  8034  | NAME:             CanHL_ErrorHandling
; ..\component\Can\Implementation\Can.c	  8035  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  8036  /*
; ..\component\Can\Implementation\Can.c	  8037  |<DataModelStart>| CanHL_ErrorHandling
; ..\component\Can\Implementation\Can.c	  8038  Relation_Context:
; ..\component\Can\Implementation\Can.c	  8039  # from Can_MainFunction_BusOff() #
; ..\component\Can\Implementation\Can.c	  8040  StatusPolling
; ..\component\Can\Implementation\Can.c	  8041  # from BusOff Interrupt #
; ..\component\Can\Implementation\Can.c	  8042  StatusPolling
; ..\component\Can\Implementation\Can.c	  8043  Relation:
; ..\component\Can\Implementation\Can.c	  8044  DevErrorDetect, StatusPolling, OneChOpt
; ..\component\Can\Implementation\Can.c	  8045  Overrun
; ..\component\Can\Implementation\Can.c	  8046  ChannelAmount
; ..\component\Can\Implementation\Can.c	  8047  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  8048  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  8049  Constrain:
; ..\component\Can\Implementation\Can.c	  8050  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  8051  */
; ..\component\Can\Implementation\Can.c	  8052  /*!
; ..\component\Can\Implementation\Can.c	  8053   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  8054   *
; ..\component\Can\Implementation\Can.c	  8055   *
; ..\component\Can\Implementation\Can.c	  8056   *
; ..\component\Can\Implementation\Can.c	  8057   *
; ..\component\Can\Implementation\Can.c	  8058   *
; ..\component\Can\Implementation\Can.c	  8059   *
; ..\component\Can\Implementation\Can.c	  8060   *
; ..\component\Can\Implementation\Can.c	  8061   *
; ..\component\Can\Implementation\Can.c	  8062   *
; ..\component\Can\Implementation\Can.c	  8063   *
; ..\component\Can\Implementation\Can.c	  8064   *
; ..\component\Can\Implementation\Can.c	  8065   *
; ..\component\Can\Implementation\Can.c	  8066   *
; ..\component\Can\Implementation\Can.c	  8067   */
; ..\component\Can\Implementation\Can.c	  8068  /* explicite not inline (big code + multiple calls) */
; ..\component\Can\Implementation\Can.c	  8069  V_DEF_FUNC(CAN_STATIC, void, STATIC_CODE) CanHL_ErrorHandling( CAN_HW_CHANNEL_CANTYPE_ONLY )
; Function CanHL_ErrorHandling
.L377:
CanHL_ErrorHandling:	.type	func

; ..\component\Can\Implementation\Can.c	  8070  {
; ..\component\Can\Implementation\Can.c	  8071    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8072    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  8073    errorId = CAN_E_NO_ERROR;
	mov	d8,#0
	sub.a	a10,#8
.L1050:
	movh	d9,#512
	fcall	.cocofun_9
	ld.w	d0,[a12]
.L2001:
	addi	d1,d0,#336
	mov.a	a15,d1
	ld.w	d1,[a15]
.L2002:

; ..\component\Can\Implementation\Can.c	  5897    if( (((Cn->IR & kCanIR_BO)  != 0UL) && ((Cn->PSR & kCanPSR_BO) != 0UL)) /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jz.t	d1:25,.L94
.L2003:
	mov.a	a2,d0
	ld.w	d0,[a2]324
.L2004:

; ..\component\Can\Implementation\Can.c	  5897    if( (((Cn->IR & kCanIR_BO)  != 0UL) && ((Cn->PSR & kCanPSR_BO) != 0UL)) /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jz.t	d0:7,.L95
.L2005:
	movh.a	a2,#@his(Can_ControllerData)
	lea	a2,[a2]@los(Can_ControllerData)
	lea	a4,[a2]16
	ld.bu	d15,[a4]
.L2006:

; ..\component\Can\Implementation\Can.c	  5902        if(Can_GetCanBusOffNotification(canHwChannel) == kCanBusoff) /* COV_CAN_BUSOFFNOTIFICATION */      (inlined)
	jeq	d15,#1,.L96
.L2007:
	mov	d0,#1
	st.b	[a4],d0

; ..\component\Can\Implementation\Can.c	  5905        else      (inlined)
.L96:
	st.w	[a15],d9
.L2008:
	fcall	.cocofun_23
.L2009:

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jz.t	d15:25,.L97
.L2010:
	lea	a15,[a2]50
	mov	d4,d8
	mov.aa	a4,a15
.L1326:
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
.L98:
	ld.w	d15,[a12]
.L2011:
	mov.a	a2,d15
.L2012:
	st.w	[a2]336,d9
.L2013:
	ld.w	d15,[a12]
.L2014:
	mov.a	a2,d15
	ld.w	d15,[a2]336
.L2015:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jz.t	d15:25,.L99
.L1059:
	mov	d10,#0
	ld.w	d15,[a15]
.L1327:
	mov	d11,d10
	st.w	[a10]4,d15
.L1063:
	mov	d4,d10
	lea	a4,[a10]4
.L1328:
	mov.aa	a5,a10
	call	GetElapsedValue
.L1329:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L100
.L2016:
	ld.w	d15,[a10]
.L2017:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L101
.L2018:
	mov	d11,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L102

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L101:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L100:
	mov	d10,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L102:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d10,#0,.L103
.L2019:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d10
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L103:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jne	d11,#0,.L98
.L99:
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L97:
	ld.w	d15,[a12]
.L2020:
	mov	d9,#1
.L1330:
	addi	d15,d15,#336
.L2021:
	mov.a	a15,d15
.L2022:

; ..\component\Can\Implementation\Can.c	  5912      CanLL_TriCoreErratum_AI_H001(CAN_HW_CHANNEL_CANPARA_FIRST (vuint32)(kCanIR_BO));      (inlined)
	j	.L104

; ..\component\Can\Implementation\Can.c	  5897    if( (((Cn->IR & kCanIR_BO)  != 0UL) && ((Cn->PSR & kCanPSR_BO) != 0UL)) /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L95:
.L94:
	mov	d9,#0

; ..\component\Can\Implementation\Can.c	  5918    else      (inlined)
.L104:
	ld.w	d15,[a15]
.L2023:
	movh	d10,#2
.L2024:

; ..\component\Can\Implementation\Can.c	  5923    if(((Cn->IR & kCanIR_MRAF) != 0UL)) /* COV_CAN_MCAN_NOT_SUPPORTED */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jz.t	d15:17,.L105
.L2025:
	fcall	.cocofun_2
	mov	d6,#83
	mov	d7,#19
	call	Det_ReportError
.L2026:
	ld.w	d15,[a12]
.L2027:
	fcall	.cocofun_7
.L2028:

; ..\component\Can\Implementation\Can.c	  5929      if((Cn->CCCR & kCanCCCR_ASM) != 0UL)  /* COV_CAN_MCAN_NOT_SUPPORTED */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jz.t	d15:2,.L106
.L2029:
	ld.w	d15,[a15]
.L2030:
	mov	d9,#1
.L2031:
	insert	d15,d15,#0,#2,#1
	st.w	[a15],d15

; ..\component\Can\Implementation\Can.c	  5929      if((Cn->CCCR & kCanCCCR_ASM) != 0UL)  /* COV_CAN_MCAN_NOT_SUPPORTED */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L106:
	fcall	.cocofun_3
.L1336:

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jz.t	d15:17,.L107
.L2032:
	fcall	.cocofun_4
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
.L108:
	ld.w	d15,[a12]
.L2033:
	mov.a	a2,d15
.L2034:
	st.w	[a2]336,d10
.L2035:
	ld.w	d15,[a12]
.L2036:
	mov.a	a2,d15
	ld.w	d15,[a2]336
.L2037:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jz.t	d15:17,.L109
.L1067:
	mov	d11,#0
	ld.w	d15,[a15]
.L1333:
	mov	d12,d11
	st.w	[a10]4,d15
.L1070:
	mov	d4,d11
	lea	a4,[a10]4
.L1334:
	mov.aa	a5,a10
	call	GetElapsedValue
.L1335:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L110
.L2038:
	ld.w	d15,[a10]
.L2039:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L111
.L2040:
	mov	d12,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L112

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L111:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L110:
	mov	d11,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L112:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d11,#0,.L113
.L2041:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d11
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L113:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jne	d12,#0,.L108
.L109:
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L107:

; ..\component\Can\Implementation\Can.c	  5923    if(((Cn->IR & kCanIR_MRAF) != 0UL)) /* COV_CAN_MCAN_NOT_SUPPORTED */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L105:
	mov	d15,d9
.L1054:

; ..\component\Can\Implementation\Can.c	  8074    
; ..\component\Can\Implementation\Can.c	  8075    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8076  #if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8077  # if !defined(C_ENABLE_ERROR_POLLING) /* COV_CAN_ERROR_POLLING */
; ..\component\Can\Implementation\Can.c	  8078  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  8079    /* #10 Check if parameter controller is in expected limit */
; ..\component\Can\Implementation\Can.c	  8080    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  8081    {
; ..\component\Can\Implementation\Can.c	  8082      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  8083    }
; ..\component\Can\Implementation\Can.c	  8084    else
; ..\component\Can\Implementation\Can.c	  8085  #  endif
; ..\component\Can\Implementation\Can.c	  8086  # endif
; ..\component\Can\Implementation\Can.c	  8087  #endif
; ..\component\Can\Implementation\Can.c	  8088    {
; ..\component\Can\Implementation\Can.c	  8089      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8090      /* #20 Pre Error handling (LL) */
; ..\component\Can\Implementation\Can.c	  8091      CanLL_ErrorHandlingBegin(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_ONLY); /* PRQA S 2987 */ /* MD_Can_EmptyFunction */
; ..\component\Can\Implementation\Can.c	  8092      if ( (CanLL_BusOffOccured(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_ONLY) == kCanTrue) && (!Can_IsIsBusOff(channel) /* avoid repeated call */)) /* COV_CAN_BUSOFF_NOT_IN_ALL_CONFIG */
	jeq	d15,#0,.L114
.L1051:
	fcall	.cocofun_21
	lea	a13,[a15]19
	ld.bu	d15,[a13]
	jne	d15,#0,.L115
.L2042:

; ..\component\Can\Implementation\Can.c	  8093      {
; ..\component\Can\Implementation\Can.c	  8094        /* #90 EXCLUSIVE_AREA_6 secure mode changes */
; ..\component\Can\Implementation\Can.c	  8095        SchM_Enter_Can_CAN_EXCLUSIVE_AREA_6();
	call	SuspendAllInterrupts
.L2043:

; ..\component\Can\Implementation\Can.c	  8096        /* #100 BUSOFF occur -> ECU Manager restart Controller (no ResetBusOffStart/End needed) */
; ..\component\Can\Implementation\Can.c	  8097        Can_SetIsBusOff(channel, TRUE); /* SBSW_CAN_HL08 */
	mov	d15,#1
	st.b	[a13],d15
.L1073:
	mov	d4,#9
.L2044:
	mov	d5,#0
.L2045:
	mov	d6,d5
	call	CanLL_ModeTransition
.L1338:
	mov	d9,d2
.L1337:

; ..\component\Can\Implementation\Can.c	  1825    if(transitionState != kCanOk) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jeq	d9,#1,.L116
.L2046:
	lea	a13,[a15]58
	mov	d4,#0
	mov.aa	a4,a13
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  1832      } while ( transitionState != kCanOk ); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L117:
	mov	d4,#9
.L2047:
	mov	d5,#0
.L2048:
	mov	d6,d5
	call	CanLL_ModeTransition
.L1078:
	mov	d10,#0
	ld.w	d15,[a13]
.L1079:
	mov	d9,d2
	st.w	[a10]4,d15
.L1081:
	mov	d11,d10
	lea	a4,[a10]4
.L1085:
	mov	d4,d10
	mov.aa	a5,a10
.L1340:
	call	GetElapsedValue
.L1339:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L118
.L2049:
	ld.w	d15,[a10]
.L2050:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L119
.L2051:
	mov	d11,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L120

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L118:
	mov	d10,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L120:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L119:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d10,#0,.L121
.L2052:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d10
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L121:

; ..\component\Can\Implementation\Can.c	  1831        CanHL_ApplCanTimerLoop((uint8)CAN_LOOP_MAX); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jeq	d11,#0,.L122
.L1082:

; ..\component\Can\Implementation\Can.c	  1832      } while ( transitionState != kCanOk ); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d9,#1,.L117

; ..\component\Can\Implementation\Can.c	  1833      CanHL_ApplCanTimerEnd ((uint8)CAN_LOOP_MAX); /* SBSW_CAN_HL38 */      (inlined)
.L122:
	mov	d4,#0
	mov.aa	a4,a13
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  1825    if(transitionState != kCanOk) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L116:

; ..\component\Can\Implementation\Can.c	  1835    if ( transitionState == kCanRequested ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d9,#3,.L123
.L2053:
	mov	d15,#9
	st.b	[a15]23,d15
.L2054:
	mov	d15,#0
	st.b	[a15]17,d15
.L2055:
	st.b	[a15]25,d15

; ..\component\Can\Implementation\Can.c	  1835    if ( transitionState == kCanRequested ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L123:

; ..\component\Can\Implementation\Can.c	  8098        /* #110 ResetBusOffStart need when BUSOFF handled by Application */
; ..\component\Can\Implementation\Can.c	  8099        (void)CanHL_ModeTransition(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST kCanModeResetBusOffStart, kCanContinueBusOffRecovery, kCanSuppressRamCheck);
; ..\component\Can\Implementation\Can.c	  8100        /* #115 Controller is in STOP mode after ResetBusOffStart \trace SPEC-1578, SPEC-1664, SPEC-1663 */
; ..\component\Can\Implementation\Can.c	  8101        /* #120 Status changed to STOP - no more call of STOP from CAN Interface */
; ..\component\Can\Implementation\Can.c	  8102        Can_SetLogStatus(channel, (uint8)((Can_GetLogStatus(channel) & CAN_STATUS_MASK_NOMODE) | CAN_STATUS_STOP)); /* SBSW_CAN_HL02 */
	ld.bu	d15,[a15]22
	and	d15,#12
	or	d15,#2
	st.b	[a15]22,d15
.L2056:

; ..\component\Can\Implementation\Can.c	  8103        SchM_Exit_Can_CAN_EXCLUSIVE_AREA_6();
	call	ResumeAllInterrupts
.L2057:

; ..\component\Can\Implementation\Can.c	  8104        /* #130 notify higher layer by call CanIf_ControllerBusOff() \trace SPEC-1726, SPEC-1578 */
; ..\component\Can\Implementation\Can.c	  8105        CanIf_ControllerBusOff((uint8)Can_GetCanToCanIfChannelMapping(channel));
	fcall	.cocofun_24
	call	CanIf_ControllerBusOff
.L115:
.L114:
	mov	d4,#0
	fcall	.cocofun_10
.L2058:

; ..\component\Can\Implementation\Can.c	  5110    if( ((Cn->IR) & (kCanIR_RF0L) ) != 0UL)               /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jz.t	d15:3,.L124
.L1093:
	fcall	.cocofun_11
.L2059:

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jeq	d15,#0,.L125
.L2060:
	movh.a	a15,#@his(Can_ControllerData+50)
	lea	a15,[a15]@los(Can_ControllerData+50)
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
.L126:
	ld.w	d0,[a12]
.L2061:
	mov.a	a2,d0
.L2062:
	st.w	[a2]336,d9
.L2063:
	ld.w	d0,[a12]
.L2064:
	mov.a	a2,d0
	ld.w	d15,[a2]336
.L2065:
	and	d15,#204
.L2066:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jeq	d15,#0,.L127
.L1095:
	mov	d10,#0
	ld.w	d15,[a15]
.L1342:
	mov	d11,d10
	st.w	[a10]4,d15
.L1098:
	mov	d4,d10
	lea	a4,[a10]4
.L1343:
	mov.aa	a5,a10
	call	GetElapsedValue
.L1344:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L128
.L2067:
	ld.w	d15,[a10]
.L2068:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L129
.L2069:
	mov	d11,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L130

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L129:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L128:
	mov	d10,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L130:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d10,#0,.L131
.L2070:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d10
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L131:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jne	d11,#0,.L126
.L127:
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L125:
	mov	d4,#1

; ..\component\Can\Implementation\Can.c	  5110    if( ((Cn->IR) & (kCanIR_RF0L) ) != 0UL)               /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L124:

; ..\component\Can\Implementation\Can.c	  8106      }
; ..\component\Can\Implementation\Can.c	  8107  #if defined(C_HL_ENABLE_OVERRUN_IN_STATUS) /* COV_CAN_OVERRUN_IN_STATUS */
; ..\component\Can\Implementation\Can.c	  8108      /* #135 check for status register (overrun occur) */
; ..\component\Can\Implementation\Can.c	  8109  # if defined(C_ENABLE_OVERRUN) && defined(C_ENABLE_RX_BASICCAN_OBJECTS) /* COV_CAN_MULTIPLE_BASICCAN */
; ..\component\Can\Implementation\Can.c	  8110      /* #140 notify BasicCAN overrun DET or Appl_CanOverrun() */
; ..\component\Can\Implementation\Can.c	  8111      if (CanLL_RxBasicCanOverrun(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_ONLY) == kCanTrue)
; ..\component\Can\Implementation\Can.c	  8112      {
; ..\component\Can\Implementation\Can.c	  8113  #  if (CAN_OVERRUN_NOTIFICATION == CAN_DET)
; ..\component\Can\Implementation\Can.c	  8114        errorId = CAN_E_DATALOST; /* \trace SPEC-1686 */
	seln	d8,d4,d8,#7
	fcall	.cocofun_10
.L1089:

; ..\component\Can\Implementation\Can.c	  5155    if( ((Cn->IR) & (kCanIR_RF0L) ) != 0UL)               /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jz.t	d15:3,.L133
.L1103:
	fcall	.cocofun_11
.L2071:

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jeq	d15,#0,.L134
.L2072:
	fcall	.cocofun_4
.L1345:
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
.L135:
	ld.w	d0,[a12]
.L2073:
	mov.a	a2,d0
.L2074:
	st.w	[a2]336,d9
.L2075:
	ld.w	d0,[a12]
.L2076:
	mov.a	a2,d0
	ld.w	d15,[a2]336
.L2077:
	and	d15,#204
.L2078:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jeq	d15,#0,.L136
.L1104:
	mov	d10,#0
	ld.w	d15,[a15]
.L1347:
	mov	d11,d10
	st.w	[a10]4,d15
.L1107:
	mov	d4,d10
	lea	a4,[a10]4
.L1348:
	mov.aa	a5,a10
	call	GetElapsedValue
.L1349:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L137
.L2079:
	ld.w	d15,[a10]
.L2080:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L138
.L2081:
	mov	d11,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L139

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L138:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L137:
	mov	d10,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L139:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d10,#0,.L140
.L2082:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d10
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L140:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jne	d11,#0,.L135
.L136:
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L134:

; ..\component\Can\Implementation\Can.c	  5155    if( ((Cn->IR) & (kCanIR_RF0L) ) != 0UL)               /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L133:

; ..\component\Can\Implementation\Can.c	  8115  #  else /* CAN_OVERRUN_NOTIFICATION == CAN_APPL */
; ..\component\Can\Implementation\Can.c	  8116        Appl_CanOverrun( (uint8)channel );
; ..\component\Can\Implementation\Can.c	  8117  #  endif
; ..\component\Can\Implementation\Can.c	  8118      }
; ..\component\Can\Implementation\Can.c	  8119  # endif
; ..\component\Can\Implementation\Can.c	  8120  #endif
; ..\component\Can\Implementation\Can.c	  8121      /* #200 Post Error handling (LL) */
; ..\component\Can\Implementation\Can.c	  8122      CanLL_ErrorHandlingEnd(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_ONLY); /* PRQA S 2987 */ /* MD_Can_EmptyFunction */
; ..\component\Can\Implementation\Can.c	  8123    }
; ..\component\Can\Implementation\Can.c	  8124  
; ..\component\Can\Implementation\Can.c	  8125    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8126  #if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8127    if (errorId != CAN_E_NO_ERROR) /* PRQA S 2992,2996 */ /* MD_Can_ConstValue */ /* COV_CAN_GENDATA_FAILURE */
	jeq	d8,#0,.L141
.L2083:

; ..\component\Can\Implementation\Can.c	  8128    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  8129      Can_CallDetReportError(CAN_CTRBUSOFF_ID, errorId); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
	fcall	.cocofun_2
	mov	d6,#83
	mov	d7,d8
.L1350:
	j	Det_ReportError
.L141:

; ..\component\Can\Implementation\Can.c	  8130    }
; ..\component\Can\Implementation\Can.c	  8131  #else
; ..\component\Can\Implementation\Can.c	  8132    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8133  #endif
; ..\component\Can\Implementation\Can.c	  8134  } /* PRQA S 6050 */ /* MD_MSR_STCAL */
	ret
.L1046:
	
__CanHL_ErrorHandling_function_end:
	.size	CanHL_ErrorHandling,__CanHL_ErrorHandling_function_end-CanHL_ErrorHandling
.L528:
	; End of function
	
	.sdecl	'.text.Can..cocofun_24',code,cluster('.cocofun_24')
	.sect	'.text.Can..cocofun_24'
	.align	2
; Function .cocofun_24
.L379:
.cocofun_24:	.type	func
; Function body .cocofun_24, coco_iter:1
	movh.a	a15,#@his(Can_CanIfChannelId)
	ld.bu	d4,[a15]@los(Can_CanIfChannelId)
.L2373:
	fret
.L648:
	; End of function
	.sdecl	'.text.Can..cocofun_23',code,cluster('.cocofun_23')
	.sect	'.text.Can..cocofun_23'
	.align	2
; Function .cocofun_23
.L381:
.cocofun_23:	.type	func
; Function body .cocofun_23, coco_iter:1
	ld.w	d15,[a12]
.L2368:
	mov.a	a15,d15
	ld.w	d15,[a15]336
	fret
.L643:
	; End of function
	.sdecl	'.text.Can..cocofun_11',code,cluster('.cocofun_11')
	.sect	'.text.Can..cocofun_11'
	.align	2
; Function .cocofun_11
.L383:
.cocofun_11:	.type	func
; Function body .cocofun_11, coco_iter:0
	mov	d9,#204
	st.w	[a15],d9
.L2304:
	ld.w	d0,[a12]
.L2305:
	mov.a	a15,d0
	ld.w	d15,[a15]336
.L2306:
	and	d15,#204
	fret
.L583:
	; End of function
	.sdecl	'.text.Can..cocofun_10',code,cluster('.cocofun_10')
	.sect	'.text.Can..cocofun_10'
	.align	2
; Function .cocofun_10
.L385:
.cocofun_10:	.type	func
; Function body .cocofun_10, coco_iter:0
	ld.w	d15,[a12]
.L1341:
	addi	d15,d15,#336
	mov.a	a15,d15
	ld.w	d15,[a15]
.L2299:
	fret
.L578:
	; End of function
	.sdecl	'.text.Can..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.Can..cocofun_4'
	.align	2
; Function .cocofun_4
.L387:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	movh.a	a15,#@his(Can_ControllerData+50)
	lea	a15,[a15]@los(Can_ControllerData+50)
.L1346:
	mov	d4,#0
	mov.aa	a4,a15
.L1332:
	fret
.L548:
	; End of function
	.sdecl	'.text.Can..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.Can..cocofun_3'
	.align	2
; Function .cocofun_3
.L389:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	ld.w	d15,[a12]
.L2262:
	mov.a	a15,d15
.L2263:
	st.w	[a15]336,d10
.L2264:
	fcall	.cocofun_23
.L1331:
	fret
.L543:
	; End of function
	.sdecl	'.text.Can.Can_InitMemory',code,cluster('Can_InitMemory')
	.sect	'.text.Can.Can_InitMemory'
	.align	2
	
	.global	Can_InitMemory

; ..\component\Can\Implementation\Can.c	  8135  
; ..\component\Can\Implementation\Can.c	  8136  
; ..\component\Can\Implementation\Can.c	  8137  #define CAN_STOP_SEC_STATIC_CODE  /*---------------------------------------*/
; ..\component\Can\Implementation\Can.c	  8138  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  8139  /*-------------------------------------------------------------------------*/
; ..\component\Can\Implementation\Can.c	  8140  
; ..\component\Can\Implementation\Can.c	  8141  #define CAN_START_SEC_CODE  /*---------------------------------------------*/
; ..\component\Can\Implementation\Can.c	  8142  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	  8143  
; ..\component\Can\Implementation\Can.c	  8144  #if (CAN_VERSION_INFO_API == STD_ON) /* \trace SPEC-1716 */
; ..\component\Can\Implementation\Can.c	  8145  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  8146  | NAME:             Can_GetVersionInfo
; ..\component\Can\Implementation\Can.c	  8147  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  8148  /*
; ..\component\Can\Implementation\Can.c	  8149  |<DataModelStart>| Can_GetVersionInfo
; ..\component\Can\Implementation\Can.c	  8150  Relation_Context:
; ..\component\Can\Implementation\Can.c	  8151  VersionInfoApi
; ..\component\Can\Implementation\Can.c	  8152  Relation:
; ..\component\Can\Implementation\Can.c	  8153  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  8154  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  8155  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  8156  Constrain:
; ..\component\Can\Implementation\Can.c	  8157  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  8158  */
; ..\component\Can\Implementation\Can.c	  8159  /*!
; ..\component\Can\Implementation\Can.c	  8160   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  8161   *
; ..\component\Can\Implementation\Can.c	  8162   *
; ..\component\Can\Implementation\Can.c	  8163   *
; ..\component\Can\Implementation\Can.c	  8164   */
; ..\component\Can\Implementation\Can.c	  8165  V_DEF_FUNC(V_NONE, void, CODE) Can_GetVersionInfo( Can_VersionInfoPtrType VersionInfo )
; ..\component\Can\Implementation\Can.c	  8166  { /* \trace SPEC-1723 */
; ..\component\Can\Implementation\Can.c	  8167    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8168    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  8169    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  8170    
; ..\component\Can\Implementation\Can.c	  8171    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8172  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8173    /* #10 Check if parameter versionInfo is an illegal null pointer \trace SPEC-1721 */
; ..\component\Can\Implementation\Can.c	  8174    if (VersionInfo == NULL_PTR)
; ..\component\Can\Implementation\Can.c	  8175    {
; ..\component\Can\Implementation\Can.c	  8176      errorId = CAN_E_PARAM_POINTER;
; ..\component\Can\Implementation\Can.c	  8177    }
; ..\component\Can\Implementation\Can.c	  8178    else
; ..\component\Can\Implementation\Can.c	  8179  # endif
; ..\component\Can\Implementation\Can.c	  8180    { /* #100 copy version info to given pointer parameter \trace SPEC-1717 */
; ..\component\Can\Implementation\Can.c	  8181      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8182      VersionInfo->vendorID   = CAN_VENDOR_ID; /* SBSW_CAN_HL10 */
; ..\component\Can\Implementation\Can.c	  8183      VersionInfo->moduleID   = CAN_MODULE_ID; /* SBSW_CAN_HL10 */
; ..\component\Can\Implementation\Can.c	  8184      VersionInfo->sw_major_version = (uint8)CAN_SW_MAJOR_VERSION; /* SBSW_CAN_HL10 */
; ..\component\Can\Implementation\Can.c	  8185      VersionInfo->sw_minor_version = (uint8)CAN_SW_MINOR_VERSION; /* SBSW_CAN_HL10 */
; ..\component\Can\Implementation\Can.c	  8186      VersionInfo->sw_patch_version = (uint8)CAN_SW_PATCH_VERSION; /* SBSW_CAN_HL10 */
; ..\component\Can\Implementation\Can.c	  8187    }
; ..\component\Can\Implementation\Can.c	  8188  
; ..\component\Can\Implementation\Can.c	  8189    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8190  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8191    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	  8192    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  8193      Can_CallDetReportError(CAN_VERSION_ID, errorId);
; ..\component\Can\Implementation\Can.c	  8194    }
; ..\component\Can\Implementation\Can.c	  8195  # else
; ..\component\Can\Implementation\Can.c	  8196    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8197  # endif
; ..\component\Can\Implementation\Can.c	  8198  }
; ..\component\Can\Implementation\Can.c	  8199  #endif
; ..\component\Can\Implementation\Can.c	  8200  
; ..\component\Can\Implementation\Can.c	  8201  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  8202  | NAME:             Can_InitMemory
; ..\component\Can\Implementation\Can.c	  8203  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  8204  /*
; ..\component\Can\Implementation\Can.c	  8205  |<DataModelStart>| Can_InitMemory
; ..\component\Can\Implementation\Can.c	  8206  Relation_Context:
; ..\component\Can\Implementation\Can.c	  8207  Relation:
; ..\component\Can\Implementation\Can.c	  8208  Variant
; ..\component\Can\Implementation\Can.c	  8209  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  8210  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  8211  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  8212  Constrain:
; ..\component\Can\Implementation\Can.c	  8213  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  8214  */
; ..\component\Can\Implementation\Can.c	  8215  /*!
; ..\component\Can\Implementation\Can.c	  8216   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  8217   *
; ..\component\Can\Implementation\Can.c	  8218   *
; ..\component\Can\Implementation\Can.c	  8219   *
; ..\component\Can\Implementation\Can.c	  8220   *
; ..\component\Can\Implementation\Can.c	  8221   */
; ..\component\Can\Implementation\Can.c	  8222  V_DEF_FUNC(V_NONE, void, CODE) Can_InitMemory( void )
; Function Can_InitMemory
.L391:
Can_InitMemory:	.type	func

; ..\component\Can\Implementation\Can.c	  8223  { /* BR:011 */
; ..\component\Can\Implementation\Can.c	  8224    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8225    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8226    /* #10 mark driver as uninitialized \trace SPEC-1650 */
; ..\component\Can\Implementation\Can.c	  8227    canConfigInitFlag = CAN_STATUS_UNINIT;
	movh.a	a15,#@his(canConfigInitFlag)
.L1454:
	mov	d15,#0
	st.b	[a15]@los(canConfigInitFlag),d15
.L1455:

; ..\component\Can\Implementation\Can.c	  8228  #if defined(CAN_ENABLE_USE_INIT_ROOT_POINTER)
; ..\component\Can\Implementation\Can.c	  8229    /* #20 reset global configuration pointer */
; ..\component\Can\Implementation\Can.c	  8230    Can_ConfigDataPtr = NULL_PTR;
; ..\component\Can\Implementation\Can.c	  8231  #endif /* otherwise constant pointer is used */
; ..\component\Can\Implementation\Can.c	  8232    /* #30 HW reset memory */
; ..\component\Can\Implementation\Can.c	  8233    CanLL_InitMemoryPowerOn(); /* PRQA S 2987 */ /* MD_Can_EmptyFunction */
; ..\component\Can\Implementation\Can.c	  8234  #if(CAN_DEV_ERROR_DETECT == STD_OFF)
; ..\component\Can\Implementation\Can.c	  8235    CAN_DUMMY_STATEMENT(canConfigInitFlag); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8236  #endif
; ..\component\Can\Implementation\Can.c	  8237  }
	ret
.L667:
	
__Can_InitMemory_function_end:
	.size	Can_InitMemory,__Can_InitMemory_function_end-Can_InitMemory
.L438:
	; End of function
	
	.sdecl	'.text.Can.Can_ChangeBaudrate',code,cluster('Can_ChangeBaudrate')
	.sect	'.text.Can.Can_ChangeBaudrate'
	.align	2
	
	.global	Can_ChangeBaudrate

; ..\component\Can\Implementation\Can.c	  8238  
; ..\component\Can\Implementation\Can.c	  8239  
; ..\component\Can\Implementation\Can.c	  8240  #if ((CAN_CHANGE_BAUDRATE_API == STD_ON) || (CAN_SET_BAUDRATE_API == STD_OFF))
; ..\component\Can\Implementation\Can.c	  8241  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  8242  | NAME:             Can_ChangeBaudrate
; ..\component\Can\Implementation\Can.c	  8243  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  8244  /*
; ..\component\Can\Implementation\Can.c	  8245  |<DataModelStart>| Can_ChangeBaudrate
; ..\component\Can\Implementation\Can.c	  8246  Relation_Context:
; ..\component\Can\Implementation\Can.c	  8247  Relation:
; ..\component\Can\Implementation\Can.c	  8248  ChangeBaudrate, DevErrorDetect, OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  8249  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  8250  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  8251  Constrain:
; ..\component\Can\Implementation\Can.c	  8252  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  8253  */
; ..\component\Can\Implementation\Can.c	  8254  /*!
; ..\component\Can\Implementation\Can.c	  8255   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  8256   *
; ..\component\Can\Implementation\Can.c	  8257   *
; ..\component\Can\Implementation\Can.c	  8258   *
; ..\component\Can\Implementation\Can.c	  8259   *
; ..\component\Can\Implementation\Can.c	  8260   *
; ..\component\Can\Implementation\Can.c	  8261   */
; ..\component\Can\Implementation\Can.c	  8262  V_DEF_FUNC(V_NONE, Std_ReturnType, CODE) Can_ChangeBaudrate( uint8 Controller, V_DEF_CONST(V_NONE, uint16, APPL_CONST) Baudrate )
; Function Can_ChangeBaudrate
.L393:
Can_ChangeBaudrate:	.type	func

; ..\component\Can\Implementation\Can.c	  8263  { /* \trace SPEC-20314 */
; ..\component\Can\Implementation\Can.c	  8264    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8265    Std_ReturnType retval;
; ..\component\Can\Implementation\Can.c	  8266    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  8267    retval = E_NOT_OK;
	mov	d10,#1
	sub.a	a10,#8
.L1351:

; ..\component\Can\Implementation\Can.c	  8268    errorId = CAN_E_PARAM_BAUDRATE; /* explicit default as Issue - remove when baud rate fit */ /* \trace SPEC-20321 */
	mov	d7,#8
.L1354:

; ..\component\Can\Implementation\Can.c	  8269    
; ..\component\Can\Implementation\Can.c	  8270    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8271  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8272    /* #10 Check if parameter controller is valid and state is INIT and STOP \trace SPEC-20338 */
; ..\component\Can\Implementation\Can.c	  8273    if ( canConfigInitFlag == CAN_STATUS_UNINIT )
	mov	d11,#0
	fcall	.cocofun_6
.L1517:
	jne	d15,#0,.L142
.L1518:

; ..\component\Can\Implementation\Can.c	  8274    {
; ..\component\Can\Implementation\Can.c	  8275      errorId = CAN_E_UNINIT;
	mov	d7,#5
	j	.L143
.L142:

; ..\component\Can\Implementation\Can.c	  8276    }
; ..\component\Can\Implementation\Can.c	  8277    else
; ..\component\Can\Implementation\Can.c	  8278  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  8279    if ( channel >= kCanNumberOfChannels ) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  8280    { /* \trace SPEC-20331 */
; ..\component\Can\Implementation\Can.c	  8281      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  8282    }
; ..\component\Can\Implementation\Can.c	  8283    else
; ..\component\Can\Implementation\Can.c	  8284  #  endif
; ..\component\Can\Implementation\Can.c	  8285    if ( (Can_GetLogStatus(channel) & CAN_STATUS_STOP) != CAN_STATUS_STOP )
	movh.a	a12,#@his(Can_ControllerData)
	lea	a12,[a12]@los(Can_ControllerData)
	lea	a13,[a12]22
	ld.bu	d15,[a13]
.L1519:
	jnz.t	d15:1,.L144
.L1520:

; ..\component\Can\Implementation\Can.c	  8286    { /* \trace SPEC-1655, SPEC-20312 */
; ..\component\Can\Implementation\Can.c	  8287      errorId = CAN_E_TRANSITION;
	mov	d7,#6
	j	.L145
.L144:

; ..\component\Can\Implementation\Can.c	  8288    }
; ..\component\Can\Implementation\Can.c	  8289    else
; ..\component\Can\Implementation\Can.c	  8290  # endif
; ..\component\Can\Implementation\Can.c	  8291    {
; ..\component\Can\Implementation\Can.c	  8292      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8293      uint8_least baudrateIndex;
; ..\component\Can\Implementation\Can.c	  8294      for (baudrateIndex = Can_GetInitObjectStartIndex(channel); baudrateIndex < Can_GetInitObjectStartIndex(channel + 1u); baudrateIndex++)
	movh.a	a15,#@his(Can_InitObjectStartIndex)
	lea	a15,[a15]@los(Can_InitObjectStartIndex)
	ld.bu	d15,[a15+]
.L1356:

; ..\component\Can\Implementation\Can.c	  8295      { /* #30 search for baud rate configuration */
; ..\component\Can\Implementation\Can.c	  8296        if (Can_GetInitObjectBaudrate(baudrateIndex) == Baudrate)
	movh.a	a2,#@his(Can_InitObjectBaudrate)
	lea	a2,[a2]@los(Can_InitObjectBaudrate)
	addsc.a	a2,a2,d15,#1
.L1521:
	j	.L146
.L147:
	ld.hu	d0,[a2]0
.L1522:
	jne	d0,d5,.L148
.L727:

; ..\component\Can\Implementation\Can.c	  8297        { /* #40 set baud rate and reinitialize controller to activate baud rate \trace SPEC-1669 */
; ..\component\Can\Implementation\Can.c	  8298          uint8 transitionState;
; ..\component\Can\Implementation\Can.c	  8299          Can_SetLastInitObject(channel, (uint8)baudrateIndex); /* SBSW_CAN_HL11 */
	mov	d8,#4
	st.b	[a12]20,d15
.L1523:
	mov	e4,d10,d8
.L1353:
	mov	d6,d11
	call	CanLL_ModeTransition
.L1355:
	mov	d9,d2
.L1357:

; ..\component\Can\Implementation\Can.c	  1825    if(transitionState != kCanOk) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jeq	d9,#1,.L149
.L1524:
	lea	a15,[a12]58
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  1832      } while ( transitionState != kCanOk ); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L150:
	mov	e4,d10,d8
	mov	d6,d11
	call	CanLL_ModeTransition
.L733:
	mov	d12,#0
	ld.w	d15,[a15]
.L734:
	mov	d9,d2
	st.w	[a10]4,d15
.L737:
	mov	d13,d12
	lea	a4,[a10]4
.L741:
	mov	d4,d12
	mov.aa	a5,a10
.L1359:
	call	GetElapsedValue
.L1358:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L151
.L1525:
	ld.w	d15,[a10]
.L1526:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L152
.L1527:
	mov	d13,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L153

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L151:
	mov	d12,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L153:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L152:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d12,#0,.L154
.L1528:
	mov	d4,#80
	mov	d6,#96
	mov	d5,d11
	mov	d7,d12
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L154:

; ..\component\Can\Implementation\Can.c	  1831        CanHL_ApplCanTimerLoop((uint8)CAN_LOOP_MAX); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jeq	d13,#0,.L155
.L738:

; ..\component\Can\Implementation\Can.c	  1832      } while ( transitionState != kCanOk ); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d9,#1,.L150

; ..\component\Can\Implementation\Can.c	  1833      CanHL_ApplCanTimerEnd ((uint8)CAN_LOOP_MAX); /* SBSW_CAN_HL38 */      (inlined)
.L155:
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  1825    if(transitionState != kCanOk) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L149:

; ..\component\Can\Implementation\Can.c	  1835    if ( transitionState == kCanRequested ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d9,#3,.L156
.L1529:
	st.b	[a12]23,d8
.L1530:
	st.b	[a12]17,d10
.L1531:
	st.b	[a12]25,d11

; ..\component\Can\Implementation\Can.c	  1835    if ( transitionState == kCanRequested ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L156:
	mov	d15,d9
.L728:

; ..\component\Can\Implementation\Can.c	  8300          transitionState = CanHL_ModeTransition(CAN_CHANNEL_CANPARA_FIRST kCanModeStopReinit, kCanFinishBusOffRecovery, kCanSuppressRamCheck);
; ..\component\Can\Implementation\Can.c	  8301          if (transitionState == kCanOk) /* COV_CAN_TRANSITION_REQUEST */
	jne	d15,#1,.L157
.L1532:

; ..\component\Can\Implementation\Can.c	  8302          { /* #50 check transition STOP (Reinit) is successful */
; ..\component\Can\Implementation\Can.c	  8303            Can_SetLogStatus(channel, Can_GetLogStatus(channel) | CAN_STATUS_STOP); /* STOP mode reached */ /* SBSW_CAN_HL02 */
	ld.bu	d15,[a13]
	or	d15,#2
	st.b	[a13],d15
.L157:

; ..\component\Can\Implementation\Can.c	  8304          }
; ..\component\Can\Implementation\Can.c	  8305          retval = E_OK;
	mov	d10,#0
.L1533:

; ..\component\Can\Implementation\Can.c	  8306          errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  8307          break;
	mov	d7,d10
	j	.L158
.L148:
	add	d15,#1
	add.a	a2,#2
.L1360:
	extr.u	d15,d15,#0,#8
.L146:
	ld.bu	d0,[a15]
.L1534:
	jlt.u	d15,d0,.L147

; ..\component\Can\Implementation\Can.c	  8308        }
; ..\component\Can\Implementation\Can.c	  8309      }
; ..\component\Can\Implementation\Can.c	  8310    }
.L158:
.L145:
.L143:

; ..\component\Can\Implementation\Can.c	  8311  
; ..\component\Can\Implementation\Can.c	  8312    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8313  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8314    if (errorId != CAN_E_NO_ERROR)
	jeq	d7,#0,.L159
.L1535:

; ..\component\Can\Implementation\Can.c	  8315    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  8316      Can_CallDetReportError(CAN_CHANGE_BR_ID, errorId);
	mov	d4,#80
	mov	d6,#13
	mov	d5,d11
	call	Det_ReportError
.L159:

; ..\component\Can\Implementation\Can.c	  8317    }
; ..\component\Can\Implementation\Can.c	  8318  # else
; ..\component\Can\Implementation\Can.c	  8319    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8320  # endif
; ..\component\Can\Implementation\Can.c	  8321  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  8322    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8323  # endif
; ..\component\Can\Implementation\Can.c	  8324    return retval;
; ..\component\Can\Implementation\Can.c	  8325  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	mov	d2,d10
	ret
.L719:
	
__Can_ChangeBaudrate_function_end:
	.size	Can_ChangeBaudrate,__Can_ChangeBaudrate_function_end-Can_ChangeBaudrate
.L448:
	; End of function
	
	.sdecl	'.text.Can..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.Can..cocofun_6'
	.align	2
; Function .cocofun_6
.L395:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0
	movh.a	a15,#@his(canConfigInitFlag)
.L1352:
	ld.bu	d15,[a15]@los(canConfigInitFlag)
.L2278:
	fret
.L558:
	; End of function
	.sdecl	'.text.Can.Can_Init',code,cluster('Can_Init')
	.sect	'.text.Can.Can_Init'
	.align	2
	
	.global	Can_Init

; ..\component\Can\Implementation\Can.c	  8326  #endif
; ..\component\Can\Implementation\Can.c	  8327  
; ..\component\Can\Implementation\Can.c	  8328  #if (CAN_CHANGE_BAUDRATE_API == STD_ON)
; ..\component\Can\Implementation\Can.c	  8329  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  8330  | NAME:             Can_CheckBaudrate
; ..\component\Can\Implementation\Can.c	  8331  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  8332  /*
; ..\component\Can\Implementation\Can.c	  8333  |<DataModelStart>| Can_CheckBaudrate
; ..\component\Can\Implementation\Can.c	  8334  Relation_Context:
; ..\component\Can\Implementation\Can.c	  8335  ChangeBaudrate
; ..\component\Can\Implementation\Can.c	  8336  Relation:
; ..\component\Can\Implementation\Can.c	  8337  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	  8338  ChannelAmount
; ..\component\Can\Implementation\Can.c	  8339  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  8340  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  8341  Constrain:
; ..\component\Can\Implementation\Can.c	  8342  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  8343  */
; ..\component\Can\Implementation\Can.c	  8344  /*!
; ..\component\Can\Implementation\Can.c	  8345   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  8346   *
; ..\component\Can\Implementation\Can.c	  8347   *
; ..\component\Can\Implementation\Can.c	  8348   *
; ..\component\Can\Implementation\Can.c	  8349   *
; ..\component\Can\Implementation\Can.c	  8350   */
; ..\component\Can\Implementation\Can.c	  8351  V_DEF_FUNC(V_NONE, Std_ReturnType, CODE) Can_CheckBaudrate( uint8 Controller, V_DEF_CONST(V_NONE, uint16, APPL_CONST) Baudrate )
; ..\component\Can\Implementation\Can.c	  8352  { /* \trace SPEC-20311 */
; ..\component\Can\Implementation\Can.c	  8353    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8354    Std_ReturnType retval;
; ..\component\Can\Implementation\Can.c	  8355    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  8356    retval = E_NOT_OK;
; ..\component\Can\Implementation\Can.c	  8357    errorId = CAN_E_PARAM_BAUDRATE; /* \trace SPEC-20317 */
; ..\component\Can\Implementation\Can.c	  8358    
; ..\component\Can\Implementation\Can.c	  8359    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8360  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8361    /* #10 Check if parameter controller is valid and state is INIT \trace SPEC-20328, SPEC-20318 */
; ..\component\Can\Implementation\Can.c	  8362    if ( canConfigInitFlag == CAN_STATUS_UNINIT )
; ..\component\Can\Implementation\Can.c	  8363    {
; ..\component\Can\Implementation\Can.c	  8364      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  8365    }
; ..\component\Can\Implementation\Can.c	  8366    else
; ..\component\Can\Implementation\Can.c	  8367  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  8368    if ( channel >= kCanNumberOfChannels )
; ..\component\Can\Implementation\Can.c	  8369    { /* \trace SPEC-20335 */
; ..\component\Can\Implementation\Can.c	  8370      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  8371    }
; ..\component\Can\Implementation\Can.c	  8372    else
; ..\component\Can\Implementation\Can.c	  8373  #  endif
; ..\component\Can\Implementation\Can.c	  8374  # endif
; ..\component\Can\Implementation\Can.c	  8375    {
; ..\component\Can\Implementation\Can.c	  8376      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8377      uint8_least baudrateIndex;
; ..\component\Can\Implementation\Can.c	  8378      for (baudrateIndex = Can_GetInitObjectStartIndex(channel); baudrateIndex < Can_GetInitObjectStartIndex(channel + 1u); baudrateIndex++)
; ..\component\Can\Implementation\Can.c	  8379      { /* #30 search for baud rate configuration */
; ..\component\Can\Implementation\Can.c	  8380        if (Can_GetInitObjectBaudrate(baudrateIndex) == Baudrate)
; ..\component\Can\Implementation\Can.c	  8381        { /* #40 requested baud rate is set - return OK */
; ..\component\Can\Implementation\Can.c	  8382          retval = E_OK;
; ..\component\Can\Implementation\Can.c	  8383          errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  8384          break;
; ..\component\Can\Implementation\Can.c	  8385        }
; ..\component\Can\Implementation\Can.c	  8386      }
; ..\component\Can\Implementation\Can.c	  8387    }
; ..\component\Can\Implementation\Can.c	  8388  
; ..\component\Can\Implementation\Can.c	  8389    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8390  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8391    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	  8392    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  8393      Can_CallDetReportError(CAN_CHECK_BR_ID, errorId);
; ..\component\Can\Implementation\Can.c	  8394    }
; ..\component\Can\Implementation\Can.c	  8395  # else
; ..\component\Can\Implementation\Can.c	  8396    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8397  # endif
; ..\component\Can\Implementation\Can.c	  8398  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  8399    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8400  # endif
; ..\component\Can\Implementation\Can.c	  8401    return retval;
; ..\component\Can\Implementation\Can.c	  8402  }
; ..\component\Can\Implementation\Can.c	  8403  #endif /* CAN_CHANGE_BAUDRATE_API == STD_ON */
; ..\component\Can\Implementation\Can.c	  8404  
; ..\component\Can\Implementation\Can.c	  8405  #if (CAN_SET_BAUDRATE_API == STD_ON)
; ..\component\Can\Implementation\Can.c	  8406  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  8407  | NAME:             Can_SetBaudrate
; ..\component\Can\Implementation\Can.c	  8408  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  8409  /*
; ..\component\Can\Implementation\Can.c	  8410  |<DataModelStart>| Can_SetBaudrate
; ..\component\Can\Implementation\Can.c	  8411  Relation_Context:
; ..\component\Can\Implementation\Can.c	  8412  Relation:
; ..\component\Can\Implementation\Can.c	  8413  ChangeBaudrate, DevErrorDetect, OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  8414  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  8415  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  8416  Constrain:
; ..\component\Can\Implementation\Can.c	  8417  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  8418  */
; ..\component\Can\Implementation\Can.c	  8419  /*!
; ..\component\Can\Implementation\Can.c	  8420   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  8421   *
; ..\component\Can\Implementation\Can.c	  8422   *
; ..\component\Can\Implementation\Can.c	  8423   *
; ..\component\Can\Implementation\Can.c	  8424   *
; ..\component\Can\Implementation\Can.c	  8425   *
; ..\component\Can\Implementation\Can.c	  8426   */
; ..\component\Can\Implementation\Can.c	  8427  V_DEF_FUNC(V_NONE, Std_ReturnType, CODE) Can_SetBaudrate( uint8 Controller, uint16 BaudRateConfigID )
; ..\component\Can\Implementation\Can.c	  8428  { /* \trace SPEC-50605 */
; ..\component\Can\Implementation\Can.c	  8429    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8430    Std_ReturnType retval;
; ..\component\Can\Implementation\Can.c	  8431    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  8432    /* #5 return E_NOT_OK in case no fitting baudrate is found */
; ..\component\Can\Implementation\Can.c	  8433    retval = E_NOT_OK; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	  8434    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  8435    
; ..\component\Can\Implementation\Can.c	  8436    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8437  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8438    /* #10 Check if parameter controller is valid and state is INIT and STOP \trace SPEC-50595 */
; ..\component\Can\Implementation\Can.c	  8439    if ( canConfigInitFlag == CAN_STATUS_UNINIT )
; ..\component\Can\Implementation\Can.c	  8440    {
; ..\component\Can\Implementation\Can.c	  8441      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  8442    }
; ..\component\Can\Implementation\Can.c	  8443    else
; ..\component\Can\Implementation\Can.c	  8444  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  8445    if ( channel >= kCanNumberOfChannels ) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  8446    { /* \trace SPEC-50587 */
; ..\component\Can\Implementation\Can.c	  8447      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  8448    }
; ..\component\Can\Implementation\Can.c	  8449    else
; ..\component\Can\Implementation\Can.c	  8450  #  endif
; ..\component\Can\Implementation\Can.c	  8451    if ( (Can_GetLogStatus(channel) & CAN_STATUS_STOP) != CAN_STATUS_STOP )
; ..\component\Can\Implementation\Can.c	  8452    { /* \trace SPEC-50584 */
; ..\component\Can\Implementation\Can.c	  8453      errorId = CAN_E_TRANSITION;
; ..\component\Can\Implementation\Can.c	  8454    }
; ..\component\Can\Implementation\Can.c	  8455    else
; ..\component\Can\Implementation\Can.c	  8456    if ( BaudRateConfigID >= (uint16)(Can_GetInitObjectStartIndex(channel + 1u) - Can_GetInitObjectStartIndex(channel)) ) /* PRQA S 4391 */ /* MD_Can_IntegerCast */
; ..\component\Can\Implementation\Can.c	  8457    { /* \trace SPEC-50625, SPEC-50563 */
; ..\component\Can\Implementation\Can.c	  8458      errorId = CAN_E_PARAM_BAUDRATE;
; ..\component\Can\Implementation\Can.c	  8459    }
; ..\component\Can\Implementation\Can.c	  8460    else
; ..\component\Can\Implementation\Can.c	  8461  # endif
; ..\component\Can\Implementation\Can.c	  8462    { /* #50 set baud rate and reinitialize controller to activate baud rate */
; ..\component\Can\Implementation\Can.c	  8463      uint8 transitionState;
; ..\component\Can\Implementation\Can.c	  8464      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8465      Can_SetLastInitObject(channel, (uint8)(Can_GetInitObjectStartIndex(channel) + BaudRateConfigID)); /* SBSW_CAN_HL11 */
; ..\component\Can\Implementation\Can.c	  8466      transitionState = CanHL_ModeTransition(CAN_CHANNEL_CANPARA_FIRST kCanModeStopReinit, kCanFinishBusOffRecovery, kCanSuppressRamCheck);
; ..\component\Can\Implementation\Can.c	  8467      /* #60 check if hardware cancellation appear while mode change, so for the baud rate set is not successful \trace SPEC-60434 */
; ..\component\Can\Implementation\Can.c	  8468      if (transitionState == kCanOk) /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	  8469      {
; ..\component\Can\Implementation\Can.c	  8470        retval = E_OK;
; ..\component\Can\Implementation\Can.c	  8471        Can_SetLogStatus(channel, Can_GetLogStatus(channel) | CAN_STATUS_STOP); /* STOP mode reached */ /* SBSW_CAN_HL02 */
; ..\component\Can\Implementation\Can.c	  8472      }
; ..\component\Can\Implementation\Can.c	  8473    }
; ..\component\Can\Implementation\Can.c	  8474  
; ..\component\Can\Implementation\Can.c	  8475    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8476  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8477    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	  8478    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  8479      Can_CallDetReportError(CAN_SET_BR_ID, errorId);
; ..\component\Can\Implementation\Can.c	  8480    }
; ..\component\Can\Implementation\Can.c	  8481  # else
; ..\component\Can\Implementation\Can.c	  8482    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8483  # endif
; ..\component\Can\Implementation\Can.c	  8484  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  8485    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8486  # endif
; ..\component\Can\Implementation\Can.c	  8487    return retval;
; ..\component\Can\Implementation\Can.c	  8488  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	  8489  #endif /* CAN_SET_BAUDRATE_API == STD_ON */
; ..\component\Can\Implementation\Can.c	  8490  
; ..\component\Can\Implementation\Can.c	  8491  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  8492  | NAME:             Can_Init
; ..\component\Can\Implementation\Can.c	  8493  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  8494  /*
; ..\component\Can\Implementation\Can.c	  8495  |<DataModelStart>| Can_Init
; ..\component\Can\Implementation\Can.c	  8496  Relation_Context:
; ..\component\Can\Implementation\Can.c	  8497  Relation:
; ..\component\Can\Implementation\Can.c	  8498  Variant, DevErrorDetect
; ..\component\Can\Implementation\Can.c	  8499  RxQueue
; ..\component\Can\Implementation\Can.c	  8500  OneChOpt
; ..\component\Can\Implementation\Can.c	  8501  Variant
; ..\component\Can\Implementation\Can.c	  8502  Wakeup
; ..\component\Can\Implementation\Can.c	  8503  MirrorMode
; ..\component\Can\Implementation\Can.c	  8504  SilentMode
; ..\component\Can\Implementation\Can.c	  8505  ChannelAmount
; ..\component\Can\Implementation\Can.c	  8506  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  8507  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  8508  Constrain:
; ..\component\Can\Implementation\Can.c	  8509  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  8510  */
; ..\component\Can\Implementation\Can.c	  8511  /*!
; ..\component\Can\Implementation\Can.c	  8512   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  8513   *
; ..\component\Can\Implementation\Can.c	  8514   *
; ..\component\Can\Implementation\Can.c	  8515   *
; ..\component\Can\Implementation\Can.c	  8516   *
; ..\component\Can\Implementation\Can.c	  8517   *
; ..\component\Can\Implementation\Can.c	  8518   *
; ..\component\Can\Implementation\Can.c	  8519   *
; ..\component\Can\Implementation\Can.c	  8520   *
; ..\component\Can\Implementation\Can.c	  8521   *
; ..\component\Can\Implementation\Can.c	  8522   *
; ..\component\Can\Implementation\Can.c	  8523   *
; ..\component\Can\Implementation\Can.c	  8524   *
; ..\component\Can\Implementation\Can.c	  8525   *
; ..\component\Can\Implementation\Can.c	  8526   *
; ..\component\Can\Implementation\Can.c	  8527   *
; ..\component\Can\Implementation\Can.c	  8528   */
; ..\component\Can\Implementation\Can.c	  8529  V_DEF_FUNC(V_NONE, void, CODE) Can_Init( Can_ConfigPtrType ConfigPtr ) /* PRQA S 3206 */ /* MD_MSR_DummyStmt */
; Function Can_Init
.L397:
Can_Init:	.type	func

; ..\component\Can\Implementation\Can.c	  8530  { /* \trace SPEC-1587, SPEC-1708 */
; ..\component\Can\Implementation\Can.c	  8531    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8532    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  8533    CAN_CHANNEL_CANTYPE_LOCAL
; ..\component\Can\Implementation\Can.c	  8534    CanHookBegin_Can_Init();
; ..\component\Can\Implementation\Can.c	  8535    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  8536  #if defined(CAN_ENABLE_USE_INIT_ROOT_POINTER) /* PostBuild (load+sel) */
; ..\component\Can\Implementation\Can.c	  8537    Can_ConfigDataPtr = ConfigPtr; /* \trace SPEC-1394, SPEC-1575 */
; ..\component\Can\Implementation\Can.c	  8538  # if defined(CAN_ENABLE_USE_ECUM_BSW_ERROR_HOOK) /* PostBuildLoadable */
; ..\component\Can\Implementation\Can.c	  8539    if (ConfigPtr == NULL_PTR)
; ..\component\Can\Implementation\Can.c	  8540    { /* #10 EcuM null pointer configuration check and notification */
; ..\component\Can\Implementation\Can.c	  8541      EcuM_BswErrorHook((uint16) CAN_MODULE_ID, (uint8) ECUM_BSWERROR_NULLPTR);
; ..\component\Can\Implementation\Can.c	  8542    }
; ..\component\Can\Implementation\Can.c	  8543    else
; ..\component\Can\Implementation\Can.c	  8544  #  if (CAN_FINALMAGICNUMBER == STD_ON) /* COV_CAN_FINALMAGICNUMBER */
; ..\component\Can\Implementation\Can.c	  8545    if (Can_GetFinalMagicNumber() != 20510u) /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  8546    { /* #20 EcuM wrong magic number check and notification */
; ..\component\Can\Implementation\Can.c	  8547      EcuM_BswErrorHook((uint16) CAN_MODULE_ID, (uint8) ECUM_BSWERROR_MAGICNUMBER);
; ..\component\Can\Implementation\Can.c	  8548    }
; ..\component\Can\Implementation\Can.c	  8549    else
; ..\component\Can\Implementation\Can.c	  8550  #  endif
; ..\component\Can\Implementation\Can.c	  8551  # else
; ..\component\Can\Implementation\Can.c	  8552    
; ..\component\Can\Implementation\Can.c	  8553    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8554  #  if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8555    /* #30 Check if all parameters are valid \trace SPEC-1724 */
; ..\component\Can\Implementation\Can.c	  8556    if (ConfigPtr == NULL_PTR)
; ..\component\Can\Implementation\Can.c	  8557    {
; ..\component\Can\Implementation\Can.c	  8558      errorId = CAN_E_PARAM_POINTER;
; ..\component\Can\Implementation\Can.c	  8559    }
; ..\component\Can\Implementation\Can.c	  8560    else
; ..\component\Can\Implementation\Can.c	  8561  #  endif
; ..\component\Can\Implementation\Can.c	  8562  # endif
; ..\component\Can\Implementation\Can.c	  8563  #else
; ..\component\Can\Implementation\Can.c	  8564    CAN_DUMMY_STATEMENT(ConfigPtr);  /* PRQA S 1338, 2982, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8565  # if defined(V_ENABLE_USE_DUMMY_STATEMENT) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	  8566    ConfigPtr = Can_ConfigDataPtr;  /* PRQA S 2983,1338 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8567  # endif
; ..\component\Can\Implementation\Can.c	  8568  #endif /* CAN_ENABLE_USE_INIT_ROOT_POINTER */
; ..\component\Can\Implementation\Can.c	  8569  #if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8570    if (canConfigInitFlag != CAN_STATUS_UNINIT)
	movh.a	a12,#@his(canConfigInitFlag)
	lea	a12,[a12]@los(canConfigInitFlag)
	ld.bu	d0,[a12]
.L1460:
	mov	d8,#0
	sub.a	a10,#16
.L1361:
	jne	d0,#0,.L161
.L1461:

; ..\component\Can\Implementation\Can.c	  8571    {
; ..\component\Can\Implementation\Can.c	  8572      /* #60 Check already initialized -> 2nd call is not allowed \trace SPEC-1712, SPEC-1722 */
; ..\component\Can\Implementation\Can.c	  8573      errorId = CAN_E_TRANSITION;
; ..\component\Can\Implementation\Can.c	  8574    }
; ..\component\Can\Implementation\Can.c	  8575    else
; ..\component\Can\Implementation\Can.c	  8576  #endif
; ..\component\Can\Implementation\Can.c	  8577    if (  ( Can_GetBaseDll_GeneratorVersion()     != (uint16)CAN_GEN_BASE_CFG5_VERSION ) ||  /* PRQA S 2742 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  8578          ( Can_GetPlatformDll_GeneratorVersion() != (uint16)CAN_GEN_Mpc5700McanAsr_VERSION ) ) /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  8579    {
; ..\component\Can\Implementation\Can.c	  8580      /* #70 EcuM generator and compatibility version check and notification */
; ..\component\Can\Implementation\Can.c	  8581  #if defined(CAN_ENABLE_USE_ECUM_BSW_ERROR_HOOK) /* not for PostBuildSelectable */
; ..\component\Can\Implementation\Can.c	  8582      EcuM_BswErrorHook((uint16) CAN_MODULE_ID, (uint8) ECUM_BSWERROR_COMPATIBILITYVERSION); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  8583  #else
; ..\component\Can\Implementation\Can.c	  8584      errorId = CAN_E_UNINIT; /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  8585  #endif
; ..\component\Can\Implementation\Can.c	  8586    }
; ..\component\Can\Implementation\Can.c	  8587    else
; ..\component\Can\Implementation\Can.c	  8588    {
; ..\component\Can\Implementation\Can.c	  8589      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8590      {
; ..\component\Can\Implementation\Can.c	  8591        canIsRxTaskLocked = kCanFalse;
	movh.a	a15,#@his(canIsRxTaskLocked)
.L1462:
	mov	d15,d8
	st.b	[a15]@los(canIsRxTaskLocked),d15
.L674:
	call	Appl_UnlockEndinit
.L1362:
	movh.a	a2,#@his(Can_CanSubSystemBaseAdr)
	ld.w	d0,[a2]@los(Can_CanSubSystemBaseAdr)
	mov	d9,#0
	mov.a	a15,d0
.L1463:
	movh	d15,#49152
.L1364:
	st.w	[a15],d9
.L1464:
	ld.w	d0,[a2]@los(Can_CanSubSystemBaseAdr)
.L1465:
	mov.a	a15,d0
.L1466:
	st.w	[a15]48,d15
.L1467:
	mov	d15,#255
.L1468:
	ld.w	d0,[a2]@los(Can_CanSubSystemBaseAdr)
.L1469:
	addih	d15,d15,#49152
.L1470:
	mov.a	a15,d0
.L1471:
	st.w	[a15]48,d15
.L1472:
	mov	d15,#255
.L1473:
	ld.w	d0,[a2]@los(Can_CanSubSystemBaseAdr)
.L1474:
	mov.a	a15,d0
.L1475:
	st.w	[a15]48,d15
.L1476:
	ld.w	d15,[a2]@los(Can_CanSubSystemBaseAdr)
.L1477:
	mov.a	a15,d15
.L1478:
	st.w	[a15]52,d9
.L1479:
	ld.w	d15,[a2]@los(Can_CanSubSystemBaseAdr)
.L1480:
	mov.a	a15,d15
.L1481:
	st.w	[a15]64,d9
.L1482:
	ld.w	d15,[a2]@los(Can_CanSubSystemBaseAdr)
.L1483:
	mov.a	a15,d15
.L1484:
	st.w	[a15]68,d9
.L1485:
	call	Appl_LockEndinit
.L677:
	movh.a	a15,#@his(Can_ShmAdr)
	lea	a15,[a15]@los(Can_ShmAdr)
	ld.w	d0,[a15]16
.L1486:
	ld.w	d15,[a15]20
.L1487:
	mov.a	a15,d0
.L1488:
	sub	d15,d0
.L1365:
	sh	d15,#-2
.L1489:
	jlt	d15,#1,.L164
.L1490:
	mov.a	a2,d15
.L1366:
	add.a	a2,#-1

; ..\component\Can\Implementation\Can.c	  5660      for(idx = 0; idx < length; idx++)      (inlined)
.L163:
	st.w	[a15+],d9
	loop	a2,.L163
.L164:

; ..\component\Can\Implementation\Can.c	  8592  #if defined(C_ENABLE_RX_QUEUE)
; ..\component\Can\Implementation\Can.c	  8593        /* #110 delete RxQueue (all channels) */
; ..\component\Can\Implementation\Can.c	  8594        Can_GetRxQueueInfo().WriteIndex = 0u;  /* CM_CAN_HL24 */ /* SBSW_CAN_HL55 */
; ..\component\Can\Implementation\Can.c	  8595        Can_GetRxQueueInfo().ReadIndex = 0u; /* SBSW_CAN_HL55 */
; ..\component\Can\Implementation\Can.c	  8596        Can_GetRxQueueInfo().Count = 0u; /* SBSW_CAN_HL55 */
; ..\component\Can\Implementation\Can.c	  8597  #endif
; ..\component\Can\Implementation\Can.c	  8598        /* #120 Set active Identity */
; ..\component\Can\Implementation\Can.c	  8599        /* #130 HW specific power on (LL) */
; ..\component\Can\Implementation\Can.c	  8600        if (CanLL_InitPowerOn() == kCanOk) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  8601        {
; ..\component\Can\Implementation\Can.c	  8602          canConfigInitFlag = CAN_STATUS_INIT; /* \trace SPEC-1648 */ /* before Controller initialization begin */
	mov	d4,#4
	st.b	[a12],d4
.L1363:

; ..\component\Can\Implementation\Can.c	  8603  #if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  8604          for (channel = 0u; channel < kCanNumberOfChannels; channel++) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  8605  #endif
; ..\component\Can\Implementation\Can.c	  8606          { /* #132 for each controller */
; ..\component\Can\Implementation\Can.c	  8607  #if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON) /* one controller optimization is always off */
; ..\component\Can\Implementation\Can.c	  8608            if ( Can_GetCanIfChannelId(channel) == kCanChannelNotUsed ) /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  8609            { /* #134 not for inactive controller */
; ..\component\Can\Implementation\Can.c	  8610              continue;
; ..\component\Can\Implementation\Can.c	  8611            }
; ..\component\Can\Implementation\Can.c	  8612  #endif
; ..\component\Can\Implementation\Can.c	  8613            /* #140 initialize start up values for each controllers */
; ..\component\Can\Implementation\Can.c	  8614            Can_SetLogStatus(channel, CAN_STATUS_UNINIT); /* PowerOn mark */ /* SBSW_CAN_HL02 */
	fcall	.cocofun_21
.L1371:
	mov	d0,#0
	lea	a14,[a15]22
	st.b	[a14],d0
.L1491:

; ..\component\Can\Implementation\Can.c	  8615            Can_SetModeTransitionRequest(channel, kCanModeNone); /* SBSW_CAN_HL01 */
	lea	a2,[a15]23
	mov	d15,#16
	st.a	[a10]8,a2
.L1492:

; ..\component\Can\Implementation\Can.c	  8616            Can_SetBusOffTransitionRequest(channel, kCanFinishBusOffRecovery); /* SBSW_CAN_HL01 */
	mov	d5,#1
	st.b	[a15]23,d15
.L1493:
	lea	a13,[a15]17
	st.b	[a13],d5
.L1494:

; ..\component\Can\Implementation\Can.c	  8617            Can_SetRamCheckTransitionRequest(channel, kCanSuppressRamCheck); /* SBSW_CAN_HL01 */
	lea	a12,[a15]25
	st.b	[a12],d0
.L1495:

; ..\component\Can\Implementation\Can.c	  8618            Can_SetIsBusOff(channel, FALSE);  /* start up: no BUSOFF */ /* SBSW_CAN_HL08 */
	st.b	[a15]19,d0
.L1496:

; ..\component\Can\Implementation\Can.c	  8619            Can_SetCanInterruptCounter(channel, 0u); /* SBSW_CAN_HL12 */
	st.b	[a15]18,d0
.L686:
	st.b	[a15]16,d0
.L1497:
	st.w	[a15]12,d9
.L1498:
	mov	d15,#255
	st.w	[a15],d9
.L1499:
	st.b	[a15]24,d15
.L1500:
	st.b	[a15]21,d15
.L687:

; ..\component\Can\Implementation\Can.c	  8620  #if defined(C_ENABLE_MIRROR_MODE)
; ..\component\Can\Implementation\Can.c	  8621            Can_SetMirrorModeState(channel, CDDMIRROR_INACTIVE); /* SBSW_CAN_HL20 */
; ..\component\Can\Implementation\Can.c	  8622  #endif
; ..\component\Can\Implementation\Can.c	  8623  #if defined(C_ENABLE_SILENT_MODE)
; ..\component\Can\Implementation\Can.c	  8624            Can_SetSilentModeState(channel, CAN_SILENT_INACTIVE); /* SBSW_CAN_HL20 */
; ..\component\Can\Implementation\Can.c	  8625  #endif
; ..\component\Can\Implementation\Can.c	  8626            /* #155 HW channel specific power on */
; ..\component\Can\Implementation\Can.c	  8627            if (CanLL_InitPowerOnChannelSpecific(CAN_CHANNEL_CANPARA_ONLY) == kCanOk) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  8628            {
; ..\component\Can\Implementation\Can.c	  8629              uint8 transitionState;
; ..\component\Can\Implementation\Can.c	  8630              /* #160 set baud rate and initialize all CAN controllers \trace SPEC-1587, SPEC-1656 */
; ..\component\Can\Implementation\Can.c	  8631              Can_SetLastInitObject(channel, (uint8)(Can_GetInitObjectStartIndex(channel) + Can_GetCanControllerDefaultBaudrateIdx(CAN_HL_HW_CHANNEL_STARTINDEX(channel)))); /* SBSW_CAN_HL11 */
	movh.a	a2,#@his(Can_InitObjectStartIndex)
	ld.bu	d15,[a2]@los(Can_InitObjectStartIndex)
	movh.a	a2,#@his(Can_ControllerConfig+7)
	ld.bu	d0,[a2]@los(Can_ControllerConfig+7)
.L690:
	mov	d6,d5
.L691:
	add	d15,d0
	st.b	[a15]20,d15
.L700:
	call	CanLL_ModeTransition
.L1367:
	mov	d9,d2
.L1368:

; ..\component\Can\Implementation\Can.c	  1825    if(transitionState != kCanOk) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jeq	d9,#1,.L165
.L1501:
	lea	a15,[a15]58
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  1832      } while ( transitionState != kCanOk ); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L166:
	mov	d4,#4
.L1502:
	mov	d5,#1
.L1503:
	mov	d6,d5
	call	CanLL_ModeTransition
.L704:
	mov	d10,#0
	ld.w	d15,[a15]
.L705:
	mov	d9,d2
	st.w	[a10]4,d15
.L710:
	mov	d11,d10
	lea	a4,[a10]4
.L716:
	mov	d4,d10
	mov.aa	a5,a10
.L1370:
	call	GetElapsedValue
.L1369:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L167
.L1504:
	ld.w	d15,[a10]
.L1505:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L168
.L1506:
	mov	d11,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L169

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L167:
	mov	d10,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L169:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L168:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d10,#0,.L170
.L1507:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d10
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L170:

; ..\component\Can\Implementation\Can.c	  1831        CanHL_ApplCanTimerLoop((uint8)CAN_LOOP_MAX); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jeq	d11,#0,.L171
.L711:

; ..\component\Can\Implementation\Can.c	  1832      } while ( transitionState != kCanOk ); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d9,#1,.L166

; ..\component\Can\Implementation\Can.c	  1833      CanHL_ApplCanTimerEnd ((uint8)CAN_LOOP_MAX); /* SBSW_CAN_HL38 */      (inlined)
.L171:
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  1825    if(transitionState != kCanOk) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L165:

; ..\component\Can\Implementation\Can.c	  1835    if ( transitionState == kCanRequested ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d9,#3,.L172
.L1508:
	ld.a	a15,[a10]8
	mov	d15,#4
	st.b	[a15],d15
.L1509:
	mov	d15,#1
	st.b	[a13],d15
.L1510:
	st.b	[a12],d15

; ..\component\Can\Implementation\Can.c	  1835    if ( transitionState == kCanRequested ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L172:

; ..\component\Can\Implementation\Can.c	  8632              transitionState = CanHL_ModeTransition(CAN_CHANNEL_CANPARA_FIRST kCanModeStopReinit, kCanFinishBusOffRecovery, kCanExecuteRamCheck);
; ..\component\Can\Implementation\Can.c	  8633              if (transitionState == kCanOk) /* COV_CAN_TRANSITION_REQUEST */
	jne	d9,#1,.L173
.L701:

; ..\component\Can\Implementation\Can.c	  8634              { /* #170 check transition STOP (Reinit) is successful */
; ..\component\Can\Implementation\Can.c	  8635                Can_SetLogStatus(channel, Can_GetLogStatus(channel) | CAN_STATUS_STOP); /* STOP mode reached or issue */ /* SBSW_CAN_HL02 */
	ld.bu	d15,[a14]
	or	d15,#2
	st.b	[a14],d15
.L1511:
	j	.L174
.L173:
.L161:

; ..\component\Can\Implementation\Can.c	  8636              }
; ..\component\Can\Implementation\Can.c	  8637  #if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8638              else
; ..\component\Can\Implementation\Can.c	  8639              {              
; ..\component\Can\Implementation\Can.c	  8640                errorId = CAN_E_TRANSITION;
	mov	d8,#6
.L174:

; ..\component\Can\Implementation\Can.c	  8641              }
; ..\component\Can\Implementation\Can.c	  8642  #endif
; ..\component\Can\Implementation\Can.c	  8643            }
; ..\component\Can\Implementation\Can.c	  8644          }
; ..\component\Can\Implementation\Can.c	  8645        } /* CanLL_InitPowerOn */
; ..\component\Can\Implementation\Can.c	  8646      }
; ..\component\Can\Implementation\Can.c	  8647    }
; ..\component\Can\Implementation\Can.c	  8648  
; ..\component\Can\Implementation\Can.c	  8649    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8650  #if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8651    if (errorId != CAN_E_NO_ERROR)
	jeq	d8,#0,.L175
.L1512:

; ..\component\Can\Implementation\Can.c	  8652    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  8653      Can_CallDetReportError(CAN_INIT_ID, errorId);
	fcall	.cocofun_2
	mov	e6,d8,d5
	j	Det_ReportError
.L175:

; ..\component\Can\Implementation\Can.c	  8654    }
; ..\component\Can\Implementation\Can.c	  8655  #else
; ..\component\Can\Implementation\Can.c	  8656    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8657  #endif
; ..\component\Can\Implementation\Can.c	  8658    CanHookEnd_Can_Init();
; ..\component\Can\Implementation\Can.c	  8659  } /* PRQA S 6030,6050,6080 */ /* MD_MSR_STCYC,MD_MSR_STCAL,MD_MSR_STMIF */
	ret
.L668:
	
__Can_Init_function_end:
	.size	Can_Init,__Can_Init_function_end-Can_Init
.L443:
	; End of function
	
	.sdecl	'.text.Can.Can_SetControllerMode',code,cluster('Can_SetControllerMode')
	.sect	'.text.Can.Can_SetControllerMode'
	.align	2
	
	.global	Can_SetControllerMode

; ..\component\Can\Implementation\Can.c	  8660  
; ..\component\Can\Implementation\Can.c	  8661  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  8662  | NAME:             Can_SetControllerMode
; ..\component\Can\Implementation\Can.c	  8663  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  8664  /*
; ..\component\Can\Implementation\Can.c	  8665  |<DataModelStart>| Can_SetControllerMode
; ..\component\Can\Implementation\Can.c	  8666  Relation_Context:
; ..\component\Can\Implementation\Can.c	  8667  Relation:
; ..\component\Can\Implementation\Can.c	  8668  DevErrorDetect, OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  8669  DevErrorDetect, Variant, ChannelAmount
; ..\component\Can\Implementation\Can.c	  8670  DevErrorDetect, TransitionCheck
; ..\component\Can\Implementation\Can.c	  8671  RamCheck, ChannelAmount
; ..\component\Can\Implementation\Can.c	  8672  SilentMode, ChannelAmount
; ..\component\Can\Implementation\Can.c	  8673  ReInitStart
; ..\component\Can\Implementation\Can.c	  8674  Wakeup
; ..\component\Can\Implementation\Can.c	  8675  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  8676  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  8677  Constrain:
; ..\component\Can\Implementation\Can.c	  8678  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  8679  */
; ..\component\Can\Implementation\Can.c	  8680  /*!
; ..\component\Can\Implementation\Can.c	  8681   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  8682   *
; ..\component\Can\Implementation\Can.c	  8683   *
; ..\component\Can\Implementation\Can.c	  8684   *
; ..\component\Can\Implementation\Can.c	  8685   *
; ..\component\Can\Implementation\Can.c	  8686   *
; ..\component\Can\Implementation\Can.c	  8687   *
; ..\component\Can\Implementation\Can.c	  8688   *
; ..\component\Can\Implementation\Can.c	  8689   *
; ..\component\Can\Implementation\Can.c	  8690   *
; ..\component\Can\Implementation\Can.c	  8691   *
; ..\component\Can\Implementation\Can.c	  8692   *
; ..\component\Can\Implementation\Can.c	  8693   *
; ..\component\Can\Implementation\Can.c	  8694   *
; ..\component\Can\Implementation\Can.c	  8695   *
; ..\component\Can\Implementation\Can.c	  8696   *
; ..\component\Can\Implementation\Can.c	  8697   *
; ..\component\Can\Implementation\Can.c	  8698   *
; ..\component\Can\Implementation\Can.c	  8699   *
; ..\component\Can\Implementation\Can.c	  8700   *
; ..\component\Can\Implementation\Can.c	  8701   *
; ..\component\Can\Implementation\Can.c	  8702   *
; ..\component\Can\Implementation\Can.c	  8703   */
; ..\component\Can\Implementation\Can.c	  8704  V_DEF_FUNC(V_NONE, Can_ReturnType, CODE) Can_SetControllerMode( uint8 Controller, Can_StateTransitionType Transition )
; Function Can_SetControllerMode
.L399:
Can_SetControllerMode:	.type	func

; ..\component\Can\Implementation\Can.c	  8705  { /* \trace SPEC-1715 */
; ..\component\Can\Implementation\Can.c	  8706    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8707    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  8708    Can_ReturnType retval;
; ..\component\Can\Implementation\Can.c	  8709    uint8 transitionRequest;
; ..\component\Can\Implementation\Can.c	  8710    uint8 busOffRecovery;
; ..\component\Can\Implementation\Can.c	  8711    uint8 doRamCheck;
; ..\component\Can\Implementation\Can.c	  8712    uint8 transitionState;
; ..\component\Can\Implementation\Can.c	  8713    CanHookBegin_Can_SetControllerMode();
; ..\component\Can\Implementation\Can.c	  8714    retval = CAN_NOT_OK;  /* \trace SPEC-1407 */ /* For successful transition it is set explicit to CAN_OK */
	mov	d9,#0
	sub.a	a10,#8
.L1372:
	mov	d8,d5
.L1374:

; ..\component\Can\Implementation\Can.c	  8715    transitionState = kCanFailed;
; ..\component\Can\Implementation\Can.c	  8716    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  8717    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8718  #if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8719    /* #10 Check if parameter controller and Transition is valid and state is INIT */
; ..\component\Can\Implementation\Can.c	  8720    if (canConfigInitFlag == CAN_STATUS_UNINIT)
	mov	e10,d9,d9
	fcall	.cocofun_6
.L1540:
	jeq	d15,#0,.L176
.L1541:

; ..\component\Can\Implementation\Can.c	  8721    { /* \trace SPEC-1731 */
; ..\component\Can\Implementation\Can.c	  8722      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  8723    }
; ..\component\Can\Implementation\Can.c	  8724    else
; ..\component\Can\Implementation\Can.c	  8725  # if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  8726    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  8727    { /* \trace SPEC-1732 */
; ..\component\Can\Implementation\Can.c	  8728      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  8729    }
; ..\component\Can\Implementation\Can.c	  8730    else
; ..\component\Can\Implementation\Can.c	  8731  # endif
; ..\component\Can\Implementation\Can.c	  8732  # if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8733    if (Can_GetCanIfChannelId(channel) == kCanChannelNotUsed) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  8734    { 
; ..\component\Can\Implementation\Can.c	  8735      errorId = CAN_E_PARAM_CONTROLLER; /* \trace SPEC3874 */
; ..\component\Can\Implementation\Can.c	  8736    }
; ..\component\Can\Implementation\Can.c	  8737    else
; ..\component\Can\Implementation\Can.c	  8738  # endif
; ..\component\Can\Implementation\Can.c	  8739  #endif
; ..\component\Can\Implementation\Can.c	  8740    { /* #50 second level check (modes and transitions) only valid when controller is in active ECU and valid */
; ..\component\Can\Implementation\Can.c	  8741  #if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8742      if (!CanHL_IsControllerInit(channel))
	fcall	.cocofun_18
	lea	a14,[a13]22
	ld.bu	d15,[a14]
	jnz.t	d15:2,.L177
.L176:

; ..\component\Can\Implementation\Can.c	  8743      { /* #60 Check controller is initialized */
; ..\component\Can\Implementation\Can.c	  8744        errorId = CAN_E_UNINIT;
	mov	d10,#5
	j	.L178
.L177:

; ..\component\Can\Implementation\Can.c	  8745      }
; ..\component\Can\Implementation\Can.c	  8746      else
; ..\component\Can\Implementation\Can.c	  8747      if ((!CanHL_IsStop(channel)) && (Transition == CAN_T_START))
	and	d0,d15,#2
	jne	d0,#0,.L179
.L1542:
	jeq	d8,#0,.L180
.L179:

; ..\component\Can\Implementation\Can.c	  8748      { /* #70 Check No-STOP -> START-Req is invalid \trace SPEC-1637 */ /* ESCAN00073272 */
; ..\component\Can\Implementation\Can.c	  8749        errorId = CAN_E_TRANSITION;
; ..\component\Can\Implementation\Can.c	  8750      }
; ..\component\Can\Implementation\Can.c	  8751      else
; ..\component\Can\Implementation\Can.c	  8752  # if (CAN_TRANSITION_CHECK == STD_ON)  /* SREQ00000291 */
; ..\component\Can\Implementation\Can.c	  8753      if ( ((!CanHL_IsStop(channel)) && (!CanHL_IsSleep(channel)) && ((Transition == CAN_T_WAKEUP) || (Transition == CAN_T_SLEEP))) ||
	jne	d0,#0,.L181
.L1543:
	jnz.t	d15:7,.L182
.L1544:
	jeq	d8,#3,.L183
.L1545:
	jeq	d8,#2,.L184
.L182:
.L181:

; ..\component\Can\Implementation\Can.c	  8754           ((CanHL_IsSleep(channel)) && (Transition == CAN_T_STOP)) )
	jz.t	d15:7,.L185
.L1546:
	jne	d8,#1,.L186
.L184:
.L183:
.L180:

; ..\component\Can\Implementation\Can.c	  8755      { /* #80 Check  No STOP Nor SLEEP -> SLEEP-Req   or   No SLEEP Nor STOP --> WAKEUP-Req   is invalid \trace SPEC-1654, SPEC-1649 */
; ..\component\Can\Implementation\Can.c	  8756        /* #90 Check  No START Nor STOP -> STOP-Req is invalid \trace SPEC-1652 */
; ..\component\Can\Implementation\Can.c	  8757        errorId = CAN_E_TRANSITION;
	mov	d10,#6
	j	.L187
.L186:
.L185:

; ..\component\Can\Implementation\Can.c	  8758      }
; ..\component\Can\Implementation\Can.c	  8759      else
; ..\component\Can\Implementation\Can.c	  8760  # endif
; ..\component\Can\Implementation\Can.c	  8761  #endif
; ..\component\Can\Implementation\Can.c	  8762  #if defined(C_ENABLE_CAN_RAM_CHECK_EXTENDED)
; ..\component\Can\Implementation\Can.c	  8763      /* #95 controller is active (no RAM check issue): */
; ..\component\Can\Implementation\Can.c	  8764      if ((Can_GetLogStatus(channel) & CAN_DEACTIVATE_CONTROLLER) != CAN_DEACTIVATE_CONTROLLER) /* PRQA S 2004 */ /* MD_Can_NoElseAfterIf */ /* COV_CAN_RAM_CHECK_NO_STIMULATION */
; ..\component\Can\Implementation\Can.c	  8765  #endif
; ..\component\Can\Implementation\Can.c	  8766      {
; ..\component\Can\Implementation\Can.c	  8767        /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8768        /* #100 EXCLUSIVE_AREA_6 avoid nesting mode changes (e.g. same API, initialization or BUSOFF) */
; ..\component\Can\Implementation\Can.c	  8769        SchM_Enter_Can_CAN_EXCLUSIVE_AREA_6();
	call	SuspendAllInterrupts
.L1373:

; ..\component\Can\Implementation\Can.c	  8770        /* #125 HW begin mode transition */
; ..\component\Can\Implementation\Can.c	  8771        switch(Transition)
; ..\component\Can\Implementation\Can.c	  8772        {
; ..\component\Can\Implementation\Can.c	  8773        case CAN_T_START:
	jeq	d8,#0,.L188
.L1547:

; ..\component\Can\Implementation\Can.c	  8774          /* #200 Handle --- START --- transition */
; ..\component\Can\Implementation\Can.c	  8775          if (Can_IsIsBusOff(channel)) /* COV_CAN_BUSOFF_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  8776          { /* #210 BUSOFF occur so finish BUSOFF handling and do START transition inside */
; ..\component\Can\Implementation\Can.c	  8777            transitionRequest = kCanModeResetBusOffEnd;
; ..\component\Can\Implementation\Can.c	  8778          } 
; ..\component\Can\Implementation\Can.c	  8779          else
; ..\component\Can\Implementation\Can.c	  8780          {
; ..\component\Can\Implementation\Can.c	  8781  #if defined(C_ENABLE_SILENT_MODE)
; ..\component\Can\Implementation\Can.c	  8782            if (Can_GetSilentModeState(channel) == CAN_SILENT_ACTIVE)
; ..\component\Can\Implementation\Can.c	  8783            {
; ..\component\Can\Implementation\Can.c	  8784              transitionRequest = kCanModeSilent;
; ..\component\Can\Implementation\Can.c	  8785            }
; ..\component\Can\Implementation\Can.c	  8786            else
; ..\component\Can\Implementation\Can.c	  8787  #endif
; ..\component\Can\Implementation\Can.c	  8788            {
; ..\component\Can\Implementation\Can.c	  8789  #if (CAN_REINIT_START == STD_ON)
; ..\component\Can\Implementation\Can.c	  8790              transitionRequest = kCanModeStartReinit;
; ..\component\Can\Implementation\Can.c	  8791  #else
; ..\component\Can\Implementation\Can.c	  8792              transitionRequest = kCanModeStart;
; ..\component\Can\Implementation\Can.c	  8793  #endif
; ..\component\Can\Implementation\Can.c	  8794            }
; ..\component\Can\Implementation\Can.c	  8795          }
; ..\component\Can\Implementation\Can.c	  8796          busOffRecovery = kCanContinueBusOffRecovery;
; ..\component\Can\Implementation\Can.c	  8797          doRamCheck = kCanSuppressRamCheck;
; ..\component\Can\Implementation\Can.c	  8798          transitionState = CanHL_ModeTransition(CAN_CHANNEL_CANPARA_FIRST transitionRequest, busOffRecovery, doRamCheck);
; ..\component\Can\Implementation\Can.c	  8799          if ( transitionState == kCanOk ) /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	  8800          {
; ..\component\Can\Implementation\Can.c	  8801            Can_SetIsBusOff(channel, FALSE); /* SBSW_CAN_HL08 */
; ..\component\Can\Implementation\Can.c	  8802          }
; ..\component\Can\Implementation\Can.c	  8803          CanHL_NotifyTransition(CAN_CHANNEL_CANPARA_FIRST CAN_STATUS_START, CANIF_CS_STARTED, transitionState);
; ..\component\Can\Implementation\Can.c	  8804          break;
; ..\component\Can\Implementation\Can.c	  8805  
; ..\component\Can\Implementation\Can.c	  8806        case CAN_T_STOP:
	jeq	d8,#1,.L189
.L1548:

; ..\component\Can\Implementation\Can.c	  8807          /* #300 Handle --- STOP --- transition */
; ..\component\Can\Implementation\Can.c	  8808          transitionRequest = kCanModeStopReinitFast;
; ..\component\Can\Implementation\Can.c	  8809          busOffRecovery = kCanContinueBusOffRecovery;
; ..\component\Can\Implementation\Can.c	  8810          doRamCheck = kCanSuppressRamCheck;
; ..\component\Can\Implementation\Can.c	  8811          transitionState = CanHL_ModeTransition(CAN_CHANNEL_CANPARA_FIRST transitionRequest, busOffRecovery, doRamCheck);
; ..\component\Can\Implementation\Can.c	  8812          CanHL_NotifyTransition(CAN_CHANNEL_CANPARA_FIRST CAN_STATUS_STOP, CANIF_CS_STOPPED, transitionState);
; ..\component\Can\Implementation\Can.c	  8813          break;
; ..\component\Can\Implementation\Can.c	  8814  
; ..\component\Can\Implementation\Can.c	  8815        case CAN_T_WAKEUP:
; ..\component\Can\Implementation\Can.c	  8816          /* #400 Handle --- WAKEUP --- transition */
; ..\component\Can\Implementation\Can.c	  8817  #if defined(C_ENABLE_CAN_RAM_CHECK) && !defined(C_ENABLE_CAN_RAM_CHECK_EXTENDED)
; ..\component\Can\Implementation\Can.c	  8818          if (!CanHL_IsStop(channel)) { /* do not call RAM_CHECK again in case CanIf call wakeup a second time (buswakeup + stop transition afterwards) */
; ..\component\Can\Implementation\Can.c	  8819            /* #415 do standard RAM check CanHL_DoRamCheck() if controller is not in STOP mode */
; ..\component\Can\Implementation\Can.c	  8820            transitionRequest = kCanModeStopReinit;
; ..\component\Can\Implementation\Can.c	  8821            doRamCheck = kCanExecuteRamCheck;
; ..\component\Can\Implementation\Can.c	  8822          }
; ..\component\Can\Implementation\Can.c	  8823          else
; ..\component\Can\Implementation\Can.c	  8824  #endif
; ..\component\Can\Implementation\Can.c	  8825          {
; ..\component\Can\Implementation\Can.c	  8826            transitionRequest = kCanModeStopReinitFast;
; ..\component\Can\Implementation\Can.c	  8827            doRamCheck = kCanSuppressRamCheck;
; ..\component\Can\Implementation\Can.c	  8828          }
; ..\component\Can\Implementation\Can.c	  8829          {
; ..\component\Can\Implementation\Can.c	  8830            busOffRecovery = kCanFinishBusOffRecovery;
; ..\component\Can\Implementation\Can.c	  8831          }
; ..\component\Can\Implementation\Can.c	  8832          transitionState = CanHL_ModeTransition(CAN_CHANNEL_CANPARA_FIRST transitionRequest, busOffRecovery, doRamCheck);
; ..\component\Can\Implementation\Can.c	  8833          CanHL_NotifyTransition(CAN_CHANNEL_CANPARA_FIRST CAN_STATUS_STOP, CANIF_CS_STOPPED, transitionState);
; ..\component\Can\Implementation\Can.c	  8834          break;
; ..\component\Can\Implementation\Can.c	  8835  
; ..\component\Can\Implementation\Can.c	  8836        case CAN_T_SLEEP: /* \trace SPEC-1639 */
	jeq	d8,#2,.L190
.L1549:
	jeq	d8,#3,.L191
.L1550:
	j	.L192
.L188:
	lea	a15,[a13]19
.L1551:
	mov	d15,#10
	ld.bu	d0,[a15]
.L754:
	mov	d5,#0
.L755:
	sel	d8,d0,d15,#5
.L760:
	mov	d4,d8
.L1375:
	mov	d6,d5
	call	CanLL_ModeTransition
.L1376:
	mov	d11,d2
.L1377:

; ..\component\Can\Implementation\Can.c	  1825    if(transitionState != kCanOk) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jeq	d11,#1,.L195
.L1552:
	lea	a12,[a13]58
	mov	d4,#0
	mov.aa	a4,a12
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  1832      } while ( transitionState != kCanOk ); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L196:
	mov	d5,#0
.L1553:
	mov	d6,d5
	mov	d4,d8
	call	CanLL_ModeTransition
.L766:
	mov	d12,#0
	ld.w	d15,[a12]
.L767:
	mov	d11,d2
	st.w	[a10]4,d15
.L770:
	mov	d13,d12
	lea	a4,[a10]4
.L774:
	mov	d4,d12
	mov.aa	a5,a10
.L1379:
	call	GetElapsedValue
.L1378:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L197
.L1554:
	ld.w	d15,[a10]
.L1555:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L198
.L1556:
	mov	d13,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L199

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L197:
	mov	d12,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L199:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L198:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d12,#0,.L200
.L1557:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d12
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L200:

; ..\component\Can\Implementation\Can.c	  1831        CanHL_ApplCanTimerLoop((uint8)CAN_LOOP_MAX); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jeq	d13,#0,.L201
.L771:

; ..\component\Can\Implementation\Can.c	  1832      } while ( transitionState != kCanOk ); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d11,#1,.L196

; ..\component\Can\Implementation\Can.c	  1833      CanHL_ApplCanTimerEnd ((uint8)CAN_LOOP_MAX); /* SBSW_CAN_HL38 */      (inlined)
.L201:
	mov	d4,#0
	mov.aa	a4,a12
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  1825    if(transitionState != kCanOk) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L195:

; ..\component\Can\Implementation\Can.c	  1835    if ( transitionState == kCanRequested ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d11,#3,.L202
.L1558:
	st.b	[a13]23,d8
.L1559:
	mov	d15,#0
	st.b	[a13]17,d15
.L1560:
	st.b	[a13]25,d15

; ..\component\Can\Implementation\Can.c	  1835    if ( transitionState == kCanRequested ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L202:
	jne	d11,#1,.L203
.L761:
	mov	d15,#0
	st.b	[a15],d15
.L203:

; ..\component\Can\Implementation\Can.c	  1872    if ( transitionState == kCanOk ) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d11,#1,.L204
.L1561:
	ld.bu	d15,[a14]
	and	d15,#12
	or	d15,#1
	fcall	.cocofun_5
.L1562:
	mov	d5,#2
	call	CanIf_ControllerModeIndication
.L778:
	j	.L205
.L189:
	mov	d12,#0
	j	.L206
.L191:
	mov	d12,#1

; ..\component\Can\Implementation\Can.c	  8837          /* #500 Handle --- SLEEP --- transition */
; ..\component\Can\Implementation\Can.c	  8838          { /* #520 no WAKEUP-source-ref: do emulated SLEEP mode \trace SPEC-1629, SPEC-1641, SPEC-1645 */
; ..\component\Can\Implementation\Can.c	  8839            transitionState = kCanOk;
; ..\component\Can\Implementation\Can.c	  8840          }
; ..\component\Can\Implementation\Can.c	  8841          CanHL_NotifyTransition(CAN_CHANNEL_CANPARA_FIRST CAN_STATUS_SLEEP, CANIF_CS_SLEEP, transitionState);
; ..\component\Can\Implementation\Can.c	  8842          break;
; ..\component\Can\Implementation\Can.c	  8843  
; ..\component\Can\Implementation\Can.c	  8844        default:
; ..\component\Can\Implementation\Can.c	  8845          /* #600 check unknown transition, return NOT_OK \trace SPEC-1573, SPEC-1402, SPEC-1403 */
; ..\component\Can\Implementation\Can.c	  8846          errorId = CAN_E_TRANSITION; /* \trace SPEC-1733, SPEC-1407 */
; ..\component\Can\Implementation\Can.c	  8847          break;
; ..\component\Can\Implementation\Can.c	  8848        } /* switch */
; ..\component\Can\Implementation\Can.c	  8849        SchM_Exit_Can_CAN_EXCLUSIVE_AREA_6();
.L206:
	mov	d4,#3
.L1563:
	mov	d6,#0
	mov	d5,d12
	call	CanLL_ModeTransition
.L1381:
	mov	d13,d2
.L1382:

; ..\component\Can\Implementation\Can.c	  1825    if(transitionState != kCanOk) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jeq	d13,#1,.L207
.L1564:
	lea	a15,[a13]58
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  1832      } while ( transitionState != kCanOk ); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L208:
	mov	d4,#3
.L1565:
	mov	d6,#0
	mov	d5,d12
	call	CanLL_ModeTransition
.L789:
	mov	d8,#0
	ld.w	d15,[a15]
.L790:
	mov	d13,d2
	st.w	[a10]4,d15
.L792:
	mov	d11,d8
	lea	a4,[a10]4
.L796:
	mov	d4,d8
	mov.aa	a5,a10
.L1384:
	call	GetElapsedValue
.L1383:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L209
.L1566:
	ld.w	d0,[a10]
.L1567:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d0,#10,.L210
.L1568:
	mov	d11,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L211

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L209:
	mov	d8,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L211:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L210:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d8,#0,.L212
.L1569:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d8
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L212:

; ..\component\Can\Implementation\Can.c	  1831        CanHL_ApplCanTimerLoop((uint8)CAN_LOOP_MAX); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jeq	d11,#0,.L213
.L793:

; ..\component\Can\Implementation\Can.c	  1832      } while ( transitionState != kCanOk ); /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d13,#1,.L208

; ..\component\Can\Implementation\Can.c	  1833      CanHL_ApplCanTimerEnd ((uint8)CAN_LOOP_MAX); /* SBSW_CAN_HL38 */      (inlined)
.L213:
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  1825    if(transitionState != kCanOk) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L207:

; ..\component\Can\Implementation\Can.c	  1835    if ( transitionState == kCanRequested ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d13,#3,.L214
.L1570:
	mov	d15,#3
	st.b	[a13]23,d15
.L1571:
	st.b	[a13]17,d12
.L1572:
	mov	d15,#0
	st.b	[a13]25,d15

; ..\component\Can\Implementation\Can.c	  1835    if ( transitionState == kCanRequested ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L214:
	mov	d11,d13
.L787:

; ..\component\Can\Implementation\Can.c	  1872    if ( transitionState == kCanOk ) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d11,#1,.L215
.L1573:
	ld.bu	d15,[a14]
	and	d15,#12
	or	d15,#2
	fcall	.cocofun_5
.L1574:
	mov	d5,#1
	call	CanIf_ControllerModeIndication
.L799:
	j	.L216
.L190:
	ld.bu	d15,[a14]
.L762:
	mov	d11,#1
.L763:
	and	d15,#12
	or	d15,#128
	fcall	.cocofun_5
.L1575:
	mov	d5,#3
	call	CanIf_ControllerModeIndication
.L801:
	j	.L217
.L192:
	mov	d10,#6
.L217:
.L216:

; ..\component\Can\Implementation\Can.c	  1872    if ( transitionState == kCanOk ) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L215:
.L205:

; ..\component\Can\Implementation\Can.c	  1872    if ( transitionState == kCanOk ) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L204:
	call	ResumeAllInterrupts
.L187:
.L178:

; ..\component\Can\Implementation\Can.c	  8850      }
; ..\component\Can\Implementation\Can.c	  8851    }
; ..\component\Can\Implementation\Can.c	  8852    if ( transitionState != kCanFailed ) /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	  8853    {
; ..\component\Can\Implementation\Can.c	  8854      retval = CAN_OK;
	seln	d9,d11,d9,#1
.L764:

; ..\component\Can\Implementation\Can.c	  8855    }
; ..\component\Can\Implementation\Can.c	  8856    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8857  #if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8858    if (errorId != CAN_E_NO_ERROR)
	jeq	d10,#0,.L219
.L1576:

; ..\component\Can\Implementation\Can.c	  8859    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  8860      Can_CallDetReportError(CAN_SETCTR_ID, errorId);
	fcall	.cocofun_2
.L1386:
	mov	d6,#3
.L1387:
	mov	d7,d10
	call	Det_ReportError
.L219:

; ..\component\Can\Implementation\Can.c	  8861    }
; ..\component\Can\Implementation\Can.c	  8862  #else
; ..\component\Can\Implementation\Can.c	  8863    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8864  #endif
; ..\component\Can\Implementation\Can.c	  8865  #if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  8866    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8867  #endif
; ..\component\Can\Implementation\Can.c	  8868    CanHookEnd_Can_SetControllerMode();
; ..\component\Can\Implementation\Can.c	  8869    return retval;
; ..\component\Can\Implementation\Can.c	  8870  } /* PRQA S 6010,6030,6080 */ /* MD_MSR_STPTH,MD_MSR_STCYC,MD_MSR_STMIF */
	mov	d2,d9
	ret
.L744:
	
__Can_SetControllerMode_function_end:
	.size	Can_SetControllerMode,__Can_SetControllerMode_function_end-Can_SetControllerMode
.L453:
	; End of function
	
	.sdecl	'.text.Can..cocofun_18',code,cluster('.cocofun_18')
	.sect	'.text.Can..cocofun_18'
	.align	2
; Function .cocofun_18
.L401:
.cocofun_18:	.type	func
; Function body .cocofun_18, coco_iter:0
	movh.a	a13,#@his(Can_ControllerData)
	lea	a13,[a13]@los(Can_ControllerData)
.L2344:
	fret
.L618:
	; End of function
	.sdecl	'.text.Can..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.Can..cocofun_5'
	.align	2
; Function .cocofun_5
.L403:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0
	st.b	[a14],d15
.L2273:
	mov	d15,#16
	st.b	[a13]23,d15
.L1380:
	fcall	.cocofun_24
.L1385:
	fret
.L553:
	; End of function
	.sdecl	'.text.Can.Can_DisableControllerInterrupts',code,cluster('Can_DisableControllerInterrupts')
	.sect	'.text.Can.Can_DisableControllerInterrupts'
	.align	2
	
	.global	Can_DisableControllerInterrupts

; ..\component\Can\Implementation\Can.c	  8871  
; ..\component\Can\Implementation\Can.c	  8872  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  8873  | NAME:             Can_DisableControllerInterrupts
; ..\component\Can\Implementation\Can.c	  8874  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  8875  /*
; ..\component\Can\Implementation\Can.c	  8876  |<DataModelStart>| Can_DisableControllerInterrupts
; ..\component\Can\Implementation\Can.c	  8877  Relation_Context:
; ..\component\Can\Implementation\Can.c	  8878  # from Can_MainFunction_BusOff #
; ..\component\Can\Implementation\Can.c	  8879  StatusPolling, ChannelAmount
; ..\component\Can\Implementation\Can.c	  8880  # from CanHL_TxTaskCancelationHandling #
; ..\component\Can\Implementation\Can.c	  8881  HwCancelTx, IndividualPolling
; ..\component\Can\Implementation\Can.c	  8882  # from CanHL_TxConfirmationPolling #
; ..\component\Can\Implementation\Can.c	  8883  TxPolling
; ..\component\Can\Implementation\Can.c	  8884  # from Rx BasicCan FullCan #
; ..\component\Can\Implementation\Can.c	  8885  RxPolling
; ..\component\Can\Implementation\Can.c	  8886  RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  8887  RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  8888  # from Error handling #
; ..\component\Can\Implementation\Can.c	  8889  StatusPolling
; ..\component\Can\Implementation\Can.c	  8890  Relation:
; ..\component\Can\Implementation\Can.c	  8891  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	  8892  DevErrorDetect, Variant
; ..\component\Can\Implementation\Can.c	  8893  IntLock
; ..\component\Can\Implementation\Can.c	  8894  ChannelAmount
; ..\component\Can\Implementation\Can.c	  8895  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  8896  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  8897  Constrain:
; ..\component\Can\Implementation\Can.c	  8898  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  8899  */
; ..\component\Can\Implementation\Can.c	  8900  /*!
; ..\component\Can\Implementation\Can.c	  8901   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  8902   *
; ..\component\Can\Implementation\Can.c	  8903   *
; ..\component\Can\Implementation\Can.c	  8904   *
; ..\component\Can\Implementation\Can.c	  8905   *
; ..\component\Can\Implementation\Can.c	  8906   *
; ..\component\Can\Implementation\Can.c	  8907   *
; ..\component\Can\Implementation\Can.c	  8908   *
; ..\component\Can\Implementation\Can.c	  8909   */
; ..\component\Can\Implementation\Can.c	  8910  V_DEF_FUNC(V_NONE, void, CODE) Can_DisableControllerInterrupts( uint8 Controller )
; Function Can_DisableControllerInterrupts
.L405:
Can_DisableControllerInterrupts:	.type	func
	sub.a	a10,#8
.L1388:

; ..\component\Can\Implementation\Can.c	  8911  { /* \trace SPEC-1746 */
; ..\component\Can\Implementation\Can.c	  8912    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8913    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  8914    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  8915    
; ..\component\Can\Implementation\Can.c	  8916    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8917  #if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8918    /* #10 Check if parameter controller is valid and state is INIT */
; ..\component\Can\Implementation\Can.c	  8919    if (canConfigInitFlag == CAN_STATUS_UNINIT)
	mov	d8,#0
	fcall	.cocofun_6
.L1674:
	jeq	d15,#0,.L221
.L1675:

; ..\component\Can\Implementation\Can.c	  8920    { /* \trace SPEC-1750 */
; ..\component\Can\Implementation\Can.c	  8921      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  8922    }
; ..\component\Can\Implementation\Can.c	  8923    else
; ..\component\Can\Implementation\Can.c	  8924  # if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  8925    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  8926    { /* \trace SPEC-1742 */
; ..\component\Can\Implementation\Can.c	  8927      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  8928    }
; ..\component\Can\Implementation\Can.c	  8929    else
; ..\component\Can\Implementation\Can.c	  8930  # endif
; ..\component\Can\Implementation\Can.c	  8931  # if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8932    if (Can_GetCanIfChannelId(channel) == kCanChannelNotUsed) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  8933    {
; ..\component\Can\Implementation\Can.c	  8934      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  8935    }
; ..\component\Can\Implementation\Can.c	  8936    else
; ..\component\Can\Implementation\Can.c	  8937  # endif
; ..\component\Can\Implementation\Can.c	  8938    if (!CanHL_IsControllerInit(channel))
	fcall	.cocofun_19
	jnz.t	d15:2,.L222
.L221:

; ..\component\Can\Implementation\Can.c	  8939    { /* #40 Check controller is initialized \trace SPEC-1750 */
; ..\component\Can\Implementation\Can.c	  8940      errorId = CAN_E_UNINIT;
	mov	d8,#5
	j	.L223
.L222:

; ..\component\Can\Implementation\Can.c	  8941    }
; ..\component\Can\Implementation\Can.c	  8942    else
; ..\component\Can\Implementation\Can.c	  8943  #endif
; ..\component\Can\Implementation\Can.c	  8944    { /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8945      /* #100 EXCLUSIVE_AREA_1 secure interrupt lock handling */
; ..\component\Can\Implementation\Can.c	  8946      SchM_Enter_Can_CAN_EXCLUSIVE_AREA_1();
	call	SuspendAllInterrupts
.L1390:

; ..\component\Can\Implementation\Can.c	  8947      if (Can_GetCanInterruptCounter(channel) == 0u)
	lea	a12,[a15]18
	ld.bu	d15,[a12]
.L1676:
	jne	d15,#0,.L224
.L866:
	movh.a	a13,#@his(Can_IsrOsId)
	ld.bu	d4,[a13]@los(Can_IsrOsId)
.L1677:
	mov.aa	a4,a10
	call	Os_IsInterruptSourceEnabled
.L1678:
	ld.bu	d4,[a13]@los(Can_IsrOsId)
	call	Os_DisableInterruptSource
.L1679:
	ld.bu	d15,[a10]
.L1680:
	st.w	[a15]26,d15
.L224:

; ..\component\Can\Implementation\Can.c	  8948      { /* #110 Disable only when not disabled before (count nesting) \trace SPEC-1735, SPEC-1745 */
; ..\component\Can\Implementation\Can.c	  8949  #if (CAN_INTLOCK == CAN_DRIVER) || (CAN_INTLOCK == CAN_BOTH) /* COV_CAN_LOCK_ISR_BY_APPL */
; ..\component\Can\Implementation\Can.c	  8950        { /* #120 Disable CAN interrupt for each HW channel */
; ..\component\Can\Implementation\Can.c	  8951          CanLL_CanInterruptDisable(CAN_CHANNEL_CANPARA_FIRST  &Can_GetCanInterruptOldStatus(canHwChannel)); /* SBSW_CAN_HL16 */
; ..\component\Can\Implementation\Can.c	  8952        }
; ..\component\Can\Implementation\Can.c	  8953  #endif
; ..\component\Can\Implementation\Can.c	  8954  #if (CAN_INTLOCK == CAN_APPL) || (CAN_INTLOCK == CAN_BOTH) /* COV_CAN_LOCK_ISR_BY_APPL */
; ..\component\Can\Implementation\Can.c	  8955        /* #130 Let application Disable CAN interrupt ApplCanInterruptDisable() */
; ..\component\Can\Implementation\Can.c	  8956        ApplCanInterruptDisable((uint8)channel);
; ..\component\Can\Implementation\Can.c	  8957  #endif
; ..\component\Can\Implementation\Can.c	  8958      }
; ..\component\Can\Implementation\Can.c	  8959      Can_IncCanInterruptCounter(channel); /* \trace SPEC-1748 */ /* SBSW_CAN_HL12 */
	ld.bu	d15,[a12]
	add	d15,#1
	st.b	[a12],d15
.L1681:

; ..\component\Can\Implementation\Can.c	  8960      SchM_Exit_Can_CAN_EXCLUSIVE_AREA_1();
	call	ResumeAllInterrupts
.L223:

; ..\component\Can\Implementation\Can.c	  8961    }
; ..\component\Can\Implementation\Can.c	  8962  
; ..\component\Can\Implementation\Can.c	  8963    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  8964  #if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  8965    if (errorId != CAN_E_NO_ERROR)
	jeq	d8,#0,.L225
.L1682:

; ..\component\Can\Implementation\Can.c	  8966    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  8967      Can_CallDetReportError(CAN_DIINT_ID, errorId);
	fcall	.cocofun_2
	mov	d6,#4
	mov	d7,d8
.L1391:
	j	Det_ReportError
.L225:

; ..\component\Can\Implementation\Can.c	  8968    }
; ..\component\Can\Implementation\Can.c	  8969  #else
; ..\component\Can\Implementation\Can.c	  8970    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8971  #endif
; ..\component\Can\Implementation\Can.c	  8972  #if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  8973    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  8974  #endif
; ..\component\Can\Implementation\Can.c	  8975  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	ret
.L861:
	
__Can_DisableControllerInterrupts_function_end:
	.size	Can_DisableControllerInterrupts,__Can_DisableControllerInterrupts_function_end-Can_DisableControllerInterrupts
.L473:
	; End of function
	
	.sdecl	'.text.Can..cocofun_19',code,cluster('.cocofun_19')
	.sect	'.text.Can..cocofun_19'
	.align	2
; Function .cocofun_19
.L407:
.cocofun_19:	.type	func
; Function body .cocofun_19, coco_iter:0
	fcall	.cocofun_21
.L1389:
	ld.bu	d15,[a15]22
.L2349:
	fret
.L623:
	; End of function
	.sdecl	'.text.Can.Can_EnableControllerInterrupts',code,cluster('Can_EnableControllerInterrupts')
	.sect	'.text.Can.Can_EnableControllerInterrupts'
	.align	2
	
	.global	Can_EnableControllerInterrupts

; ..\component\Can\Implementation\Can.c	  8976  
; ..\component\Can\Implementation\Can.c	  8977  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  8978  | NAME:             Can_EnableControllerInterrupts
; ..\component\Can\Implementation\Can.c	  8979  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  8980  /*
; ..\component\Can\Implementation\Can.c	  8981  |<DataModelStart>| Can_EnableControllerInterrupts
; ..\component\Can\Implementation\Can.c	  8982  Relation_Context:
; ..\component\Can\Implementation\Can.c	  8983  # from Can_MainFunction_BusOff #
; ..\component\Can\Implementation\Can.c	  8984  StatusPolling, ChannelAmount
; ..\component\Can\Implementation\Can.c	  8985  # from CanHL_TxTaskCancelationHandling #
; ..\component\Can\Implementation\Can.c	  8986  HwCancelTx, IndividualPolling
; ..\component\Can\Implementation\Can.c	  8987  # from CanHL_TxConfirmationPolling #
; ..\component\Can\Implementation\Can.c	  8988  TxPolling
; ..\component\Can\Implementation\Can.c	  8989  # from Rx BasicCan FullCan #
; ..\component\Can\Implementation\Can.c	  8990  RxPolling
; ..\component\Can\Implementation\Can.c	  8991  RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  8992  RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  8993  # from Error handling #
; ..\component\Can\Implementation\Can.c	  8994  StatusPolling
; ..\component\Can\Implementation\Can.c	  8995  Relation:
; ..\component\Can\Implementation\Can.c	  8996  DevErrorDetect, OneChOpt 
; ..\component\Can\Implementation\Can.c	  8997  DevErrorDetect, Variant
; ..\component\Can\Implementation\Can.c	  8998  IntLock
; ..\component\Can\Implementation\Can.c	  8999  ChannelAmount
; ..\component\Can\Implementation\Can.c	  9000  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  9001  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  9002  Constrain:
; ..\component\Can\Implementation\Can.c	  9003  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  9004  */
; ..\component\Can\Implementation\Can.c	  9005  /*!
; ..\component\Can\Implementation\Can.c	  9006   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  9007   *
; ..\component\Can\Implementation\Can.c	  9008   *
; ..\component\Can\Implementation\Can.c	  9009   *
; ..\component\Can\Implementation\Can.c	  9010   *
; ..\component\Can\Implementation\Can.c	  9011   *
; ..\component\Can\Implementation\Can.c	  9012   *
; ..\component\Can\Implementation\Can.c	  9013   *
; ..\component\Can\Implementation\Can.c	  9014   */
; ..\component\Can\Implementation\Can.c	  9015  V_DEF_FUNC(V_NONE, void, CODE) Can_EnableControllerInterrupts( uint8 Controller )
; Function Can_EnableControllerInterrupts
.L409:
Can_EnableControllerInterrupts:	.type	func

; ..\component\Can\Implementation\Can.c	  9016  { /* \trace SPEC-1741 */
; ..\component\Can\Implementation\Can.c	  9017    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9018    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  9019    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  9020    
; ..\component\Can\Implementation\Can.c	  9021    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9022  #if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9023    /* #10 Check if parameter controller is valid and state is INIT */
; ..\component\Can\Implementation\Can.c	  9024    if (canConfigInitFlag == CAN_STATUS_UNINIT)
	mov	d8,#0
	fcall	.cocofun_6
.L1687:
	jeq	d15,#0,.L226
.L1688:

; ..\component\Can\Implementation\Can.c	  9025    { /* \trace SPEC-1739 */
; ..\component\Can\Implementation\Can.c	  9026      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  9027    }
; ..\component\Can\Implementation\Can.c	  9028    else
; ..\component\Can\Implementation\Can.c	  9029  # if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  9030    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  9031    { /* \trace SPEC-1752 */
; ..\component\Can\Implementation\Can.c	  9032      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  9033    }
; ..\component\Can\Implementation\Can.c	  9034    else
; ..\component\Can\Implementation\Can.c	  9035  # endif
; ..\component\Can\Implementation\Can.c	  9036  # if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9037    if (Can_GetCanIfChannelId(channel) == kCanChannelNotUsed) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  9038    {
; ..\component\Can\Implementation\Can.c	  9039      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  9040    }
; ..\component\Can\Implementation\Can.c	  9041    else
; ..\component\Can\Implementation\Can.c	  9042  # endif
; ..\component\Can\Implementation\Can.c	  9043    if (!CanHL_IsControllerInit(channel))
	fcall	.cocofun_19
	jnz.t	d15:2,.L227
.L226:

; ..\component\Can\Implementation\Can.c	  9044    { /* #40 Check controller is initialized \trace SPEC-1739 */
; ..\component\Can\Implementation\Can.c	  9045      errorId = CAN_E_UNINIT;
	mov	d8,#5
	j	.L228
.L227:

; ..\component\Can\Implementation\Can.c	  9046    }
; ..\component\Can\Implementation\Can.c	  9047    else
; ..\component\Can\Implementation\Can.c	  9048  #endif
; ..\component\Can\Implementation\Can.c	  9049    { /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9050      /* #100 EXCLUSIVE_AREA_1 secure interrupt lock handling */
; ..\component\Can\Implementation\Can.c	  9051      SchM_Enter_Can_CAN_EXCLUSIVE_AREA_1();
	call	SuspendAllInterrupts
.L1392:

; ..\component\Can\Implementation\Can.c	  9052      if (Can_GetCanInterruptCounter(channel) != 0u)
	lea	a2,[a15]18
	ld.bu	d15,[a2]
.L1689:
	jeq	d15,#0,.L229
.L1690:

; ..\component\Can\Implementation\Can.c	  9053      { /* #110 Enable only when disabled before (count nesting) \trace SPEC-1749, SPEC-1748 */
; ..\component\Can\Implementation\Can.c	  9054        Can_DecCanInterruptCounter(channel); /* SBSW_CAN_HL12 */
	add	d15,#-1
	st.b	[a2],d15
.L1691:

; ..\component\Can\Implementation\Can.c	  9055        if (Can_GetCanInterruptCounter(channel) == 0u) /* \trace SPEC-1736, SPEC-1756 */
	jne	d15,#0,.L230
.L875:

; ..\component\Can\Implementation\Can.c	  9056        {
; ..\component\Can\Implementation\Can.c	  9057  #if (CAN_INTLOCK == CAN_DRIVER) || (CAN_INTLOCK == CAN_BOTH) /* COV_CAN_LOCK_ISR_BY_APPL */
; ..\component\Can\Implementation\Can.c	  9058          { /* #120 Disable CAN interrupt for each HW channel */
; ..\component\Can\Implementation\Can.c	  9059            CanLL_CanInterruptRestore(CAN_CHANNEL_CANPARA_FIRST Can_GetCanInterruptOldStatus(canHwChannel));
	ld.w	d15,[a15]26
.L1692:

; ..\component\Can\Implementation\Can.c	  5518    if( (vuint32)localInterruptOldFlag == TRUE ) /* COV_CAN_OS_INT_SOURCE */      (inlined)
	jne	d15,#1,.L231
.L1693:
	movh.a	a15,#@his(Can_IsrOsId)
	ld.bu	d4,[a15]@los(Can_IsrOsId)
.L1694:
	mov	d5,#0
	call	Os_EnableInterruptSource

; ..\component\Can\Implementation\Can.c	  5518    if( (vuint32)localInterruptOldFlag == TRUE ) /* COV_CAN_OS_INT_SOURCE */      (inlined)
.L231:
.L230:
.L229:

; ..\component\Can\Implementation\Can.c	  9060          }
; ..\component\Can\Implementation\Can.c	  9061  #endif
; ..\component\Can\Implementation\Can.c	  9062  #if (CAN_INTLOCK == CAN_APPL) || (CAN_INTLOCK == CAN_BOTH) /* COV_CAN_LOCK_ISR_BY_APPL */
; ..\component\Can\Implementation\Can.c	  9063          /* #130 Let application Enable CAN interrupt ApplCanInterruptRestore() */
; ..\component\Can\Implementation\Can.c	  9064          ApplCanInterruptRestore((uint8)channel);
; ..\component\Can\Implementation\Can.c	  9065  #endif
; ..\component\Can\Implementation\Can.c	  9066        }
; ..\component\Can\Implementation\Can.c	  9067      }
; ..\component\Can\Implementation\Can.c	  9068      SchM_Exit_Can_CAN_EXCLUSIVE_AREA_1();
	call	ResumeAllInterrupts
.L228:

; ..\component\Can\Implementation\Can.c	  9069    }
; ..\component\Can\Implementation\Can.c	  9070  
; ..\component\Can\Implementation\Can.c	  9071    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9072  #if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9073    if (errorId != CAN_E_NO_ERROR)
	jeq	d8,#0,.L232
.L1695:

; ..\component\Can\Implementation\Can.c	  9074    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  9075      Can_CallDetReportError(CAN_ENINT_ID, errorId);
	fcall	.cocofun_2
	mov	d6,#5
	mov	d7,d8
.L1393:
	j	Det_ReportError
.L232:

; ..\component\Can\Implementation\Can.c	  9076    }
; ..\component\Can\Implementation\Can.c	  9077  #else
; ..\component\Can\Implementation\Can.c	  9078    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  9079  #endif
; ..\component\Can\Implementation\Can.c	  9080  #if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  9081    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  9082  #endif
; ..\component\Can\Implementation\Can.c	  9083  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	ret
.L871:
	
__Can_EnableControllerInterrupts_function_end:
	.size	Can_EnableControllerInterrupts,__Can_EnableControllerInterrupts_function_end-Can_EnableControllerInterrupts
.L478:
	; End of function
	
	.sdecl	'.text.Can.Can_Write',code,cluster('Can_Write')
	.sect	'.text.Can.Can_Write'
	.align	2
	
	.global	Can_Write

; ..\component\Can\Implementation\Can.c	  9084  
; ..\component\Can\Implementation\Can.c	  9085  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  9086  | NAME:             Can_Write
; ..\component\Can\Implementation\Can.c	  9087  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  9088  /*
; ..\component\Can\Implementation\Can.c	  9089  |<DataModelStart>| Can_Write
; ..\component\Can\Implementation\Can.c	  9090  Relation_Context:
; ..\component\Can\Implementation\Can.c	  9091  Relation:
; ..\component\Can\Implementation\Can.c	  9092  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  9093  OneChOpt
; ..\component\Can\Implementation\Can.c	  9094  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	  9095  DevErrorDetect, Variant
; ..\component\Can\Implementation\Can.c	  9096  DevErrorDetect, TxFullCANSupport
; ..\component\Can\Implementation\Can.c	  9097  DevErrorDetect, CanFdSupport
; ..\component\Can\Implementation\Can.c	  9098  DevErrorDetect, MixedId
; ..\component\Can\Implementation\Can.c	  9099  RamCheck
; ..\component\Can\Implementation\Can.c	  9100  UseVectorCanIf
; ..\component\Can\Implementation\Can.c	  9101  CanFdSupport
; ..\component\Can\Implementation\Can.c	  9102  ChannelAmount
; ..\component\Can\Implementation\Can.c	  9103  TxBasicAmount
; ..\component\Can\Implementation\Can.c	  9104  TxFullAmount
; ..\component\Can\Implementation\Can.c	  9105  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  9106  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  9107  Constrain:
; ..\component\Can\Implementation\Can.c	  9108  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  9109  */
; ..\component\Can\Implementation\Can.c	  9110  /*!
; ..\component\Can\Implementation\Can.c	  9111   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  9112   *
; ..\component\Can\Implementation\Can.c	  9113   *
; ..\component\Can\Implementation\Can.c	  9114   *
; ..\component\Can\Implementation\Can.c	  9115   *
; ..\component\Can\Implementation\Can.c	  9116   *
; ..\component\Can\Implementation\Can.c	  9117   *
; ..\component\Can\Implementation\Can.c	  9118   *
; ..\component\Can\Implementation\Can.c	  9119   *
; ..\component\Can\Implementation\Can.c	  9120   *
; ..\component\Can\Implementation\Can.c	  9121   *
; ..\component\Can\Implementation\Can.c	  9122   *
; ..\component\Can\Implementation\Can.c	  9123   *
; ..\component\Can\Implementation\Can.c	  9124   */
; ..\component\Can\Implementation\Can.c	  9125  V_DEF_FUNC(V_NONE, Can_ReturnType, CODE) Can_Write( Can_HwHandleType Hth, Can_PduInfoPtrType PduInfo )
; Function Can_Write
.L411:
Can_Write:	.type	func

; ..\component\Can\Implementation\Can.c	  9126  { /* \trace SPEC-1751, SPEC-1760, SPEC-1406 */
; ..\component\Can\Implementation\Can.c	  9127    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9128    Can_ReturnType retval;
; ..\component\Can\Implementation\Can.c	  9129    CAN_CHANNEL_CANTYPE_LOCAL
; ..\component\Can\Implementation\Can.c	  9130    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  9131    CanHookBegin_Can_Write();
; ..\component\Can\Implementation\Can.c	  9132    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  9133    retval = CAN_NOT_OK; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	  9134    
; ..\component\Can\Implementation\Can.c	  9135    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9136  #if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9137    /* #10 Check if parameter controller is valid and state is INIT */
; ..\component\Can\Implementation\Can.c	  9138    if (canConfigInitFlag == CAN_STATUS_UNINIT)
	mov	d7,#0
	movh.a	a2,#@his(canConfigInitFlag)
.L1409:
	mov	d8,d7
	ld.bu	d15,[a2]@los(canConfigInitFlag)
.L1410:
	mov.aa	a15,a4
.L1397:
	sub.a	a10,#48
.L1394:
	jeq	d15,#0,.L233
.L1581:

; ..\component\Can\Implementation\Can.c	  9139    { /* \trace SPEC-1759 */
; ..\component\Can\Implementation\Can.c	  9140      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  9141    }
; ..\component\Can\Implementation\Can.c	  9142    else
; ..\component\Can\Implementation\Can.c	  9143    if (Hth >= Can_GetSizeOfMailbox()) {
	jge.u	d4,#2,.L234
.L1582:

; ..\component\Can\Implementation\Can.c	  9144      errorId = CAN_E_PARAM_HANDLE;
; ..\component\Can\Implementation\Can.c	  9145    }
; ..\component\Can\Implementation\Can.c	  9146    else
; ..\component\Can\Implementation\Can.c	  9147  #endif
; ..\component\Can\Implementation\Can.c	  9148    {
; ..\component\Can\Implementation\Can.c	  9149  #if !defined( C_SINGLE_RECEIVE_CHANNEL ) /* otherwise 'channel' is a define */
; ..\component\Can\Implementation\Can.c	  9150      channel = Can_GetMailboxController(Hth);
; ..\component\Can\Implementation\Can.c	  9151  #endif
; ..\component\Can\Implementation\Can.c	  9152  #if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9153  # if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  9154      if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  9155      {
; ..\component\Can\Implementation\Can.c	  9156        errorId = CAN_E_PARAM_HANDLE;
; ..\component\Can\Implementation\Can.c	  9157      }
; ..\component\Can\Implementation\Can.c	  9158      else
; ..\component\Can\Implementation\Can.c	  9159  # endif
; ..\component\Can\Implementation\Can.c	  9160  # if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9161      if (Can_GetCanIfChannelId(channel) == kCanChannelNotUsed) /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  9162      {
; ..\component\Can\Implementation\Can.c	  9163        errorId = CAN_E_PARAM_HANDLE;
; ..\component\Can\Implementation\Can.c	  9164      }
; ..\component\Can\Implementation\Can.c	  9165      else
; ..\component\Can\Implementation\Can.c	  9166  # endif
; ..\component\Can\Implementation\Can.c	  9167      if (!CanHL_IsControllerInit(channel))
	movh.a	a5,#@his(Can_ControllerData)
	lea	a5,[a5]@los(Can_ControllerData)
	ld.bu	d15,[a5]22
	jnz.t	d15:2,.L235
.L233:

; ..\component\Can\Implementation\Can.c	  9168      { /* #40 Check controller is initialized \trace SPEC-1407 */
; ..\component\Can\Implementation\Can.c	  9169        errorId = CAN_E_UNINIT;
	mov	d7,#5
	j	.L236
.L235:

; ..\component\Can\Implementation\Can.c	  9170      }
; ..\component\Can\Implementation\Can.c	  9171      else
; ..\component\Can\Implementation\Can.c	  9172  # if defined(C_ENABLE_TX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  9173      if ((Can_GetMailboxType(Hth) != CAN_TX_BASICCAN_TYPE) && (Can_GetMailboxType(Hth) != CAN_TX_BASICCAN_MUX_TYPE) && (Can_GetMailboxType(Hth) != CAN_TX_BASICCAN_FIFO_TYPE) && (Can_GetMailboxType(Hth) != CAN_TX_FULLCAN_TYPE)) /* COV_CAN_GENDATA_TX_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  9174  # else
; ..\component\Can\Implementation\Can.c	  9175      if ((Can_GetMailboxType(Hth) != CAN_TX_BASICCAN_TYPE) && (Can_GetMailboxType(Hth) != CAN_TX_BASICCAN_MUX_TYPE) && (Can_GetMailboxType(Hth) != CAN_TX_BASICCAN_FIFO_TYPE)) /* COV_CAN_GENDATA_TX_NOT_IN_ALL_CONFIG */
	mul	d15,d4,#12
	movh.a	a6,#@his(Can_Mailbox)
	lea	a6,[a6]@los(Can_Mailbox)
	addsc.a	a2,a6,d15,#0
	ld.bu	d15,[a2]6
.L1583:
	jeq	d15,#2,.L237
.L1584:
	jeq	d15,#5,.L238
.L1585:
	jeq	d15,#6,.L239
.L234:

; ..\component\Can\Implementation\Can.c	  9176  # endif
; ..\component\Can\Implementation\Can.c	  9177      { /* \trace SPEC-1763 */
; ..\component\Can\Implementation\Can.c	  9178        errorId = CAN_E_PARAM_HANDLE;
	mov	d7,#2
	j	.L240
.L239:
.L238:
.L237:

; ..\component\Can\Implementation\Can.c	  9179      }
; ..\component\Can\Implementation\Can.c	  9180      else
; ..\component\Can\Implementation\Can.c	  9181      if ((PduInfo == NULL_PTR) || ((PduInfo->sdu == NULL_PTR) && (PduInfo->length != 0u)))
	jz.a	a15,.L241
.L1586:
	ld.w	d15,[a15]4
.L1587:
	jne	d15,#0,.L242
.L1588:
	ld.bu	d15,[a15]2
.L1589:
	jne	d15,#0,.L243
.L242:
	ld.bu	d0,[a15]2
.L1590:

; ..\component\Can\Implementation\Can.c	  9182      { /* \trace SPEC-1761 */
; ..\component\Can\Implementation\Can.c	  9183        errorId = CAN_E_PARAM_POINTER;
; ..\component\Can\Implementation\Can.c	  9184      }
; ..\component\Can\Implementation\Can.c	  9185      else
; ..\component\Can\Implementation\Can.c	  9186  # if !defined(C_ENABLE_CAN_FD_USED)
; ..\component\Can\Implementation\Can.c	  9187      if ( CanHL_IsFdMessage(PduInfo->id) )
; ..\component\Can\Implementation\Can.c	  9188      { /* no CAN_FD: Check parameter PduInfo->id should not have FD bit in ID */
; ..\component\Can\Implementation\Can.c	  9189        errorId = CAN_E_PARAM_POINTER;
; ..\component\Can\Implementation\Can.c	  9190      }
; ..\component\Can\Implementation\Can.c	  9191      else
; ..\component\Can\Implementation\Can.c	  9192  # endif
; ..\component\Can\Implementation\Can.c	  9193  # if defined(C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  9194      if ( ((PduInfo->length > 8u) && (Can_GetInitObjectFdBrsConfig(Can_GetLastInitObject(channel)) == CAN_NONE)) ||
	jlt.u	d0,#9,.L244
.L1591:
	ld.bu	d15,[a5]20
	fcall	.cocofun_17
.L1395:
	jeq	d15,#0,.L245
.L244:

; ..\component\Can\Implementation\Can.c	  9195           (PduInfo->length > CAN_MAX_DATALEN_OBJ(Hth)) ) /* COV_CAN_GENDATA_FAILURE */
	ld.bu	d15,[a2]7
.L1592:
	jge.u	d15,d0,.L246
.L245:

; ..\component\Can\Implementation\Can.c	  9196           { /* \trace SPEC-1758 */
; ..\component\Can\Implementation\Can.c	  9197        /* \trace SPEC-60433 */ /* CAN_FD: Check parameter PduInfo->length is smaller than 9 for none FD configuration
; ..\component\Can\Implementation\Can.c	  9198           If development error detection for the CAN module is enabled and the CAN Controller is not in CAN FD mode (no CanControllerFdBaudrateConfig):
; ..\component\Can\Implementation\Can.c	  9199           The function Can_Write shall raise the error CAN_E_PARAM_DLC and shall return CAN_NOT_OK if the length is more than 8 byte.() */
; ..\component\Can\Implementation\Can.c	  9200        /* CAN_FD: Check parameter PduInfo->length against PDU maximum size */
; ..\component\Can\Implementation\Can.c	  9201        errorId = CAN_E_PARAM_DLC;
	mov	d7,#3
	j	.L247
.L246:

; ..\component\Can\Implementation\Can.c	  9202      }
; ..\component\Can\Implementation\Can.c	  9203      else
; ..\component\Can\Implementation\Can.c	  9204  # else
; ..\component\Can\Implementation\Can.c	  9205      if ( PduInfo->length > CAN_MAX_DATALEN_OBJ(Hth) ) /* CM_CAN_HL20 */
; ..\component\Can\Implementation\Can.c	  9206      { /* \trace SPEC-1758 */ /* Check parameter PduInfo->length against maximum buffer size */
; ..\component\Can\Implementation\Can.c	  9207        errorId = CAN_E_PARAM_DLC;
; ..\component\Can\Implementation\Can.c	  9208      }
; ..\component\Can\Implementation\Can.c	  9209      else
; ..\component\Can\Implementation\Can.c	  9210  # endif
; ..\component\Can\Implementation\Can.c	  9211  # if defined(C_ENABLE_MIXED_ID)
; ..\component\Can\Implementation\Can.c	  9212      if ( ((PduInfo->id & (Can_IdType)CAN_ID_IDE_MASK) != (Can_IdType)CAN_ID_IDE_MASK ) && ( (PduInfo->id & (Can_IdType)CAN_ID_MASK) > (Can_IdType)CAN_ID_MASK_STD ) ) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  9213      { /* Check parameter PduInfo->id for STD ID is in STD range (EXT is always in range) */
; ..\component\Can\Implementation\Can.c	  9214        errorId = CAN_E_PARAM_POINTER;
; ..\component\Can\Implementation\Can.c	  9215      }
; ..\component\Can\Implementation\Can.c	  9216      else
; ..\component\Can\Implementation\Can.c	  9217  # endif
; ..\component\Can\Implementation\Can.c	  9218      if ( (PduInfo->id & (Can_IdType)CAN_ID_UNUSED_MASK) != (Can_IdType)0UL )
	ld.hu	d0,[a15]0
.L1593:
	mov	d15,#14336
.L1594:
	and	d15,d0
.L1595:
	jeq	d15,#0,.L248
.L243:
.L241:

; ..\component\Can\Implementation\Can.c	  9219      { /* Check parameter PduInfo->id contains illegal bits (e.g. bigger ID value than MAX for given type) */
; ..\component\Can\Implementation\Can.c	  9220        errorId = CAN_E_PARAM_POINTER;
	mov	d7,#1
	j	.L249
.L248:

; ..\component\Can\Implementation\Can.c	  9221      }
; ..\component\Can\Implementation\Can.c	  9222      else
; ..\component\Can\Implementation\Can.c	  9223  #endif
; ..\component\Can\Implementation\Can.c	  9224      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9225  #if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  9226      /* #150 reject deactivated mailbox (by RamCheck) */
; ..\component\Can\Implementation\Can.c	  9227      if (Can_GetMailboxState(Hth) == kCanFailed) /* COV_CAN_RAM_CHECK_NO_STIMULATION */
; ..\component\Can\Implementation\Can.c	  9228      {
; ..\component\Can\Implementation\Can.c	  9229        retval = CAN_NOT_OK;
; ..\component\Can\Implementation\Can.c	  9230      }
; ..\component\Can\Implementation\Can.c	  9231      else
; ..\component\Can\Implementation\Can.c	  9232  #endif
; ..\component\Can\Implementation\Can.c	  9233      /* #180 check Hardware is in BUSOFF recovery state and is not able to handle a request: return BUSY \trace SPEC-1764 */
; ..\component\Can\Implementation\Can.c	  9234      if (Can_IsIsBusOff(channel)) /* COV_CAN_BUSOFF_NOT_IN_ALL_CONFIG */
	ld.bu	d15,[a5]19
.L1596:
	jeq	d15,#0,.L250
.L1597:

; ..\component\Can\Implementation\Can.c	  9235      {
; ..\component\Can\Implementation\Can.c	  9236        retval = CAN_NOT_OK; /* ESCAN00096369 */
	mov	d8,#0
	j	.L251
.L250:

; ..\component\Can\Implementation\Can.c	  9237      }
; ..\component\Can\Implementation\Can.c	  9238      else
; ..\component\Can\Implementation\Can.c	  9239  #if defined(C_ENABLE_CAN_RAM_CHECK)
; ..\component\Can\Implementation\Can.c	  9240      /* #200 controller is active (no RAM check issue): */
; ..\component\Can\Implementation\Can.c	  9241      if ((Can_GetLogStatus(channel) & CAN_DEACTIVATE_CONTROLLER) != CAN_DEACTIVATE_CONTROLLER) /* PRQA S 2004 */ /* MD_Can_NoElseAfterIf */ /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	  9242  #endif
; ..\component\Can\Implementation\Can.c	  9243      {
; ..\component\Can\Implementation\Can.c	  9244        /* #205 temporary pdu buffer to avoid data modification on constant data (modification in generic pretransmit) */
; ..\component\Can\Implementation\Can.c	  9245        tCanTxTransmissionParaStruct txPara;
; ..\component\Can\Implementation\Can.c	  9246        /* #210 EXCLUSIVE_AREA_2: Interrupts may not be locked and re-entrant call may occur. */
; ..\component\Can\Implementation\Can.c	  9247        /*                        Time in between ID search and lock of mailbox is critical 
; ..\component\Can\Implementation\Can.c	  9248                                  (only when no Vector Interface used otherwise CanIf EXCLUSIVE_AREA is used instead) 
; ..\component\Can\Implementation\Can.c	  9249                                  Can_Write() could be called re-entrant, there for also for polling systems the interrupts have to be locked  
; ..\component\Can\Implementation\Can.c	  9250                                  this is essential while check for mailbox is free (in between if (free) and set to not free) and save PDU handle */
; ..\component\Can\Implementation\Can.c	  9251  #if !defined(CAN_USE_VECTOR_IF)
; ..\component\Can\Implementation\Can.c	  9252        SchM_Enter_Can_CAN_EXCLUSIVE_AREA_2();
; ..\component\Can\Implementation\Can.c	  9253  #endif
; ..\component\Can\Implementation\Can.c	  9254        txPara.mailboxHandle = Hth;
	st.b	[a10],d4
.L1598:

; ..\component\Can\Implementation\Can.c	  9255        txPara.hwObjHandle = Can_GetMailboxHwHandle(Hth); 
; ..\component\Can\Implementation\Can.c	  9256        txPara.pdu.id = PduInfo->id;
; ..\component\Can\Implementation\Can.c	  9257        txPara.pdu.length = PduInfo->length;
	ld.bu	d1,[a15]2
.L1599:
	ld.bu	d15,[a2]3
.L1600:
	st.b	[a10]2,d15
.L1601:
	st.h	[a10]28,d0
.L1602:
	st.b	[a10]30,d1
.L1603:

; ..\component\Can\Implementation\Can.c	  9258        txPara.pdu.sdu = PduInfo->sdu;
	ld.a	a2,[a15]4
.L1604:
	st.a	[a10]32,a2
.L1605:

; ..\component\Can\Implementation\Can.c	  9259        txPara.pdu.swPduHandle = PduInfo->swPduHandle;
	ld.bu	d15,[a15]8
.L1606:
	st.b	[a10]36,d15
.L1607:

; ..\component\Can\Implementation\Can.c	  9260  #if defined(C_ENABLE_CAN_FD_USED)
; ..\component\Can\Implementation\Can.c	  9261        if (txPara.pdu.length <= 8u) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
	jge.u	d1,#9,.L252
.L1608:

; ..\component\Can\Implementation\Can.c	  9262        {
; ..\component\Can\Implementation\Can.c	  9263          if (Can_GetInitObjectFdBrsConfig(Can_GetLastInitObject(channel)) == CAN_NONE)
	ld.bu	d15,[a5]20
	fcall	.cocofun_14
.L1609:
	jne	d15,#0,.L253
.L1610:

; ..\component\Can\Implementation\Can.c	  9264          { /* #220 remove FD flag when no FD support is activated in this initialization structure and DLC not greater than 8 */
; ..\component\Can\Implementation\Can.c	  9265            /* CAN FD also support an extended payload which allows the transmission of up to 64 bytes.
; ..\component\Can\Implementation\Can.c	  9266            This feature also depends on the CAN FD configuration (see CanControllerFdBaudrateConfig).
; ..\component\Can\Implementation\Can.c	  9267            Therefore, if the CAN FD feature is enabled and the CAN FD flag is set in CanId passed to
; ..\component\Can\Implementation\Can.c	  9268             Can_Write(), CanDrv supports the transmission of PDUs with a length up to 64 bytes.
; ..\component\Can\Implementation\Can.c	  9269            If there is a request to transmit a CAN FD frame without the CAN FD feature enabled the
; ..\component\Can\Implementation\Can.c	  9270            frame is sent as conventional CAN frame as long as the PDU length <= 8 bytes. */
; ..\component\Can\Implementation\Can.c	  9271            txPara.pdu.id = txPara.pdu.id & ((Can_IdType)(CAN_ID_IDE_MASK | CAN_ID_MASK)); /* CAN_FD_   mask out the FD bit */
	insert	d15,d0,#0,#11,#21
	st.h	[a10]28,d15
.L253:
.L252:

; ..\component\Can\Implementation\Can.c	  9272          }
; ..\component\Can\Implementation\Can.c	  9273        }
; ..\component\Can\Implementation\Can.c	  9274        txPara.fdBrsType = kCanFdBrsTypeFalse;
	mov	d15,#0
	st.w	[a10]20,d15
.L1611:

; ..\component\Can\Implementation\Can.c	  9275        if (CanHL_IsFdMessage(txPara.pdu.id))
	ld.hu	d2,[a10]28
.L1612:
	jz.t	d2:14,.L254
.L1613:

; ..\component\Can\Implementation\Can.c	  9276        {
; ..\component\Can\Implementation\Can.c	  9277          txPara.fdType = kCanFdTypeFd;
; ..\component\Can\Implementation\Can.c	  9278          if (CanHL_IsFdTxBrs(channel))
	ld.bu	d15,[a5]20
	movh.a	a2,#@his(Can_InitObjectFdBrsConfig)
	lea	a2,[a2]@los(Can_InitObjectFdBrsConfig)
	addsc.a	a15,a2,d15,#0
.L1398:
	mov	d0,#32
.L1614:
	ld.bu	d15,[a15]
.L1615:
	jne	d15,#1,.L255
.L1616:

; ..\component\Can\Implementation\Can.c	  9279          {
; ..\component\Can\Implementation\Can.c	  9280            txPara.fdBrsType = kCanFdBrsTypeTrue;
	mov	d15,#16
	st.w	[a10]20,d15
.L1617:
	j	.L256
.L254:

; ..\component\Can\Implementation\Can.c	  9281          }
; ..\component\Can\Implementation\Can.c	  9282        } else {
; ..\component\Can\Implementation\Can.c	  9283          txPara.fdType = kCanFdTypeClassic;
	mov	d0,#0
.L256:
.L255:

; ..\component\Can\Implementation\Can.c	  9284        }
; ..\component\Can\Implementation\Can.c	  9285        txPara.messageLen = txPara.pdu.length;
; ..\component\Can\Implementation\Can.c	  9286        txPara.frameLen = CAN_DLC2LEN(CAN_LEN2DLC(txPara.messageLen));
	movh.a	a15,#@his(Can_MessageLengthToDlc)
.L1618:
	st.w	[a10]16,d0
.L1619:
	lea	a15,[a15]@los(Can_MessageLengthToDlc)
	addsc.a	a2,a15,d1,#0
.L1620:
	st.b	[a10]24,d1
.L1621:
	movh.a	a15,#@his(Can_DlcToFrameLenght)
	ld.bu	d15,[a2]
	lea	a15,[a15]@los(Can_DlcToFrameLenght)
	and	d15,#15
	addsc.a	a15,a15,d15,#0
.L1622:

; ..\component\Can\Implementation\Can.c	  9287  # if defined(C_ENABLE_CAN_FD_FULL)
; ..\component\Can\Implementation\Can.c	  9288        txPara.paddingVal = Can_GetMailboxFdPadding(txPara.mailboxHandle);
	mul	d15,d4,#12
.L1623:
	ld.bu	d0,[a15]
.L1624:
	addsc.a	a15,a6,d15,#0
.L1625:
	st.b	[a10]25,d0
.L811:
	mov	d4,#0
.L812:
	ld.bu	d15,[a15]2
.L1626:
	st.b	[a10]26,d15
.L817:
	st.b	[a10]1,d4
.L818:
	mov	d8,#1
.L819:
	ld.bu	d15,[a15]
.L1627:
	st.b	[a10]3,d15
.L820:
	fcall	.cocofun_22
	ld.hu	d0,[a15]0
.L1628:
	mov	d15,#255
.L1629:

; ..\component\Can\Implementation\Can.c	  2065    if (Can_GetActiveSendState(txPara->activeSendObject) == kCanBufferFree)      (inlined)
	jne	d15,d0,.L257
.L828:
	mov	d0,d8
	ld.bu	d15,[a10]36
.L1399:
	st.b	[a15]2,d15
.L1630:
	st.h	[a15],d0
.L831:
	movh.a	a15,#@his(Can_ShmElementSize+3)
	ld.bu	d15,[a15]@los(Can_ShmElementSize+3)
	movh.a	a15,#@his(CanLL_xES2Bytes)
	lea	a15,[a15]@los(CanLL_xES2Bytes)
	addsc.a	a15,a15,d15,#0
	ld.bu	d5,[a10]2
	ld.bu	d0,[a15]
.L1400:
	movh.a	a15,#@his(Can_ShmAdr+24)
	add	d0,d0,#8
	ld.w	d3,[a15]@los(Can_ShmAdr+24)
.L1631:
	madd	d15,d3,d5,d0
	st.w	[a10]40,d15
.L832:
	sh	d0,d2,#18
.L1632:
	ld.bu	d15,[a2]
.L1633:
	movh	d2,#8188
.L1634:
	and	d15,#15
	st.w	[a10]8,d15
.L1635:
	and	d0,d2
	st.w	[a10]4,d0
.L837:
	ld.a	a2,[a10]40
.L1636:
	st.w	[a2],d0
.L1637:
	ld.w	d15,[a10]8
.L1638:
	sh	d0,d15,#16
	ld.w	d15,[a10]16
.L1639:
	sh	d15,d15,#16
.L1640:
	or	d0,d15
	ld.w	d15,[a10]20
.L1641:
	sh	d15,d15,#16
.L1642:
	or	d0,d15
	st.w	[a2]4,d0
.L838:
	ld.a	a15,[a10]32
.L1643:

; ..\component\Can\Implementation\Can.c	  2107      if(txPara->pdu.sdu != NULL_PTR)      (inlined)
	jz.a	a15,.L258
.L1644:
	st.a	[a10]12,a15
.L843:
	mov	d0,d4
.L1401:
	ld.bu	d3,[a10]25
.L1645:
	mov	d2,d4
.L1403:

; ..\component\Can\Implementation\Can.c	  4155    for (curWord = 0u; (curWord << 2u) < txPara->frameLen; curWord++) /* CM_CAN_LL_105 */       (inlined)
	jeq	d3,#0,.L259
.L1646:
	lea	a15,[a2]8

; ..\component\Can\Implementation\Can.c	  4155    for (curWord = 0u; (curWord << 2u) < txPara->frameLen; curWord++) /* CM_CAN_LL_105 */       (inlined)
.L260:

; ..\component\Can\Implementation\Can.c	  4176      } while((curByte & 0x03u) != 0u);                             /* CM_CAN_LL_104 */      (inlined)
.L261:
	and	d15,d0,#3
.L1647:
	addsc.a	a2,a10,d15,#0
	lea	a2,[a2]44
.L1648:

; ..\component\Can\Implementation\Can.c	  4164        if(curByte < txPara->messageLen)  /* CM_CAN_LL_105 */       (inlined)
	jge.u	d0,d1,.L262
.L1649:
	ld.a	a4,[a10]12
.L1650:
	addsc.a	a4,a4,d0,#0
	ld.bu	d15,[a4]
.L1651:

; ..\component\Can\Implementation\Can.c	  4167          copyElem.b[curByte & 0x03u] = txPara->CanMemCopySrcPtr[curByte]; /* SBSW_CAN_LL_104 */ /* CM_CAN_LL_104 */      (inlined)
	j	.L263

; ..\component\Can\Implementation\Can.c	  4164        if(curByte < txPara->messageLen)  /* CM_CAN_LL_105 */       (inlined)
.L262:
	ld.bu	d15,[a10]26

; ..\component\Can\Implementation\Can.c	  4170        else      (inlined)
.L263:
	add	d0,#1
	st.b	[a2],d15
.L1402:
	extr.u	d0,d0,#0,#8
.L1405:
	and	d15,d0,#3
.L1652:

; ..\component\Can\Implementation\Can.c	  4176      } while((curByte & 0x03u) != 0u);                             /* CM_CAN_LL_104 */      (inlined)
	jne	d15,#0,.L261
.L1653:
	addsc.a	a2,a15,d2,#2
.L1654:
	add	d2,#1
	ld.w	d15,[a10]44
.L1404:
	extr.u	d2,d2,#0,#8
	st.w	[a2],d15
.L1406:
	sha	d15,d2,#2
.L1655:

; ..\component\Can\Implementation\Can.c	  4155    for (curWord = 0u; (curWord << 2u) < txPara->frameLen; curWord++) /* CM_CAN_LL_105 */       (inlined)
	jlt	d15,d3,.L260
.L259:

; ..\component\Can\Implementation\Can.c	  2107      if(txPara->pdu.sdu != NULL_PTR)      (inlined)
.L258:
	movh.a	a15,#@his(Can_ControllerConfig)
	ld.w	d15,[a15]@los(Can_ControllerConfig)
.L1656:
	mov	d0,d8
.L1407:
	addi	d15,d15,#464
	mov.a	a15,d15
.L1657:
	sh	d0,d0,d5
.L1408:
	ld.w	d15,[a15]
.L1658:
	or	d15,d0
	st.w	[a15],d15
.L1659:
	ld.w	d15,[a5]12
.L1660:
	or	d15,d0
	st.w	[a5]12,d15
.L829:

; ..\component\Can\Implementation\Can.c	  2113      llretval = CanLL_TxStart(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST txPara); /* SBSW_CAN_HL49 */      (inlined)
	j	.L264

; ..\component\Can\Implementation\Can.c	  2065    if (Can_GetActiveSendState(txPara->activeSendObject) == kCanBufferFree)      (inlined)
.L257:
	mov	d8,#2

; ..\component\Can\Implementation\Can.c	  2118    else      (inlined)
.L264:
.L251:
.L249:
.L247:
.L240:
.L236:

; ..\component\Can\Implementation\Can.c	  9289  # endif
; ..\component\Can\Implementation\Can.c	  9290  #endif
; ..\component\Can\Implementation\Can.c	  9291        /* #230 search for BasicCAN object handle to transmit (Multiplexed TX) and backup data for cancel TX object if necessary */
; ..\component\Can\Implementation\Can.c	  9292        CanHL_WritePrepare(CAN_CHANNEL_CANPARA_FIRST &txPara); /* SBSW_CAN_HL49 */
; ..\component\Can\Implementation\Can.c	  9293        /* #240 start transmission for given handle (if free) and return state */
; ..\component\Can\Implementation\Can.c	  9294        retval = CanHL_WriteStart(CAN_CHANNEL_CANPARA_FIRST &txPara); /* SBSW_CAN_HL49 */
; ..\component\Can\Implementation\Can.c	  9295  
; ..\component\Can\Implementation\Can.c	  9296  #if !defined(CAN_USE_VECTOR_IF) /* No Vector Interface used, Interrupts may not be locked */
; ..\component\Can\Implementation\Can.c	  9297        /* avoid change of PDU information due to TX interrupt while changing */
; ..\component\Can\Implementation\Can.c	  9298        SchM_Exit_Can_CAN_EXCLUSIVE_AREA_2();
; ..\component\Can\Implementation\Can.c	  9299  #endif
; ..\component\Can\Implementation\Can.c	  9300      }
; ..\component\Can\Implementation\Can.c	  9301    }
; ..\component\Can\Implementation\Can.c	  9302    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9303  #if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9304    if (errorId != CAN_E_NO_ERROR)
	jeq	d7,#0,.L265
.L1661:

; ..\component\Can\Implementation\Can.c	  9305    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  9306      Can_CallDetReportError(CAN_WRITE_ID, errorId);
	fcall	.cocofun_2
	mov	d6,#6
	call	Det_ReportError
.L265:

; ..\component\Can\Implementation\Can.c	  9307    }
; ..\component\Can\Implementation\Can.c	  9308  #else
; ..\component\Can\Implementation\Can.c	  9309    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  9310  #endif
; ..\component\Can\Implementation\Can.c	  9311    CanHookEnd_Can_Write();
; ..\component\Can\Implementation\Can.c	  9312    return retval;
; ..\component\Can\Implementation\Can.c	  9313  } /* PRQA S 6010,6030,6080 */ /* MD_MSR_STPTH,MD_MSR_STCYC,MD_MSR_STMIF */
	mov	d2,d8
	ret
.L802:
	
__Can_Write_function_end:
	.size	Can_Write,__Can_Write_function_end-Can_Write
.L458:
	; End of function
	
	.sdecl	'.text.Can.Can_CheckWakeup',code,cluster('Can_CheckWakeup')
	.sect	'.text.Can.Can_CheckWakeup'
	.align	2
	
	.global	Can_CheckWakeup

; ..\component\Can\Implementation\Can.c	  9314  
; ..\component\Can\Implementation\Can.c	  9315  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  9316  | NAME:             ASR4.x - Can_CheckWakeup
; ..\component\Can\Implementation\Can.c	  9317  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  9318  /*
; ..\component\Can\Implementation\Can.c	  9319  |<DataModelStart>| Can_CheckWakeup
; ..\component\Can\Implementation\Can.c	  9320  Relation_Context:
; ..\component\Can\Implementation\Can.c	  9321  Relation:
; ..\component\Can\Implementation\Can.c	  9322  Wakeup, DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	  9323  Wakeup, DevErrorDetect, Variant
; ..\component\Can\Implementation\Can.c	  9324  ChannelAmount
; ..\component\Can\Implementation\Can.c	  9325  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  9326  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  9327  Constrain:
; ..\component\Can\Implementation\Can.c	  9328  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  9329  */
; ..\component\Can\Implementation\Can.c	  9330  /*!
; ..\component\Can\Implementation\Can.c	  9331   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  9332   *
; ..\component\Can\Implementation\Can.c	  9333   *
; ..\component\Can\Implementation\Can.c	  9334   *
; ..\component\Can\Implementation\Can.c	  9335   *
; ..\component\Can\Implementation\Can.c	  9336   *
; ..\component\Can\Implementation\Can.c	  9337   *
; ..\component\Can\Implementation\Can.c	  9338   */
; ..\component\Can\Implementation\Can.c	  9339  #if defined(C_ENABLE_CHECK_WAKEUP_CAN_RET_TYPE) /* COV_CAN_COMPATIBILITY */
; ..\component\Can\Implementation\Can.c	  9340  # define CAN_CHECKWAKEUP_RETTYPE Can_ReturnType
; ..\component\Can\Implementation\Can.c	  9341  # define CAN_CHECKWAKEUP_RETVAL_OK     CAN_OK
; ..\component\Can\Implementation\Can.c	  9342  # define CAN_CHECKWAKEUP_RETVAL_NOT_OK CAN_NOT_OK
; ..\component\Can\Implementation\Can.c	  9343  V_DEF_FUNC(V_NONE, Can_ReturnType, CODE) Can_CheckWakeup( uint8 Controller )
; ..\component\Can\Implementation\Can.c	  9344  #else
; ..\component\Can\Implementation\Can.c	  9345  # define CAN_CHECKWAKEUP_RETTYPE Std_ReturnType
; ..\component\Can\Implementation\Can.c	  9346  # define CAN_CHECKWAKEUP_RETVAL_OK     E_OK
; ..\component\Can\Implementation\Can.c	  9347  # define CAN_CHECKWAKEUP_RETVAL_NOT_OK E_NOT_OK
; ..\component\Can\Implementation\Can.c	  9348  V_DEF_FUNC(V_NONE, Std_ReturnType, CODE) Can_CheckWakeup( uint8 Controller )
; Function Can_CheckWakeup
.L413:
Can_CheckWakeup:	.type	func

; ..\component\Can\Implementation\Can.c	  9349  #endif
; ..\component\Can\Implementation\Can.c	  9350  { /* \trace SPEC-1740 */
; ..\component\Can\Implementation\Can.c	  9351    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9352    CAN_CHECKWAKEUP_RETTYPE retval;
; ..\component\Can\Implementation\Can.c	  9353    retval = CAN_CHECKWAKEUP_RETVAL_NOT_OK; /* \trace SPEC-1407 */
; ..\component\Can\Implementation\Can.c	  9354    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  9355    return retval;
; ..\component\Can\Implementation\Can.c	  9356  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	mov	d2,#1
	ret
.L859:
	
__Can_CheckWakeup_function_end:
	.size	Can_CheckWakeup,__Can_CheckWakeup_function_end-Can_CheckWakeup
.L468:
	; End of function
	
	.sdecl	'.text.Can.Can_MainFunction_Write',code,cluster('Can_MainFunction_Write')
	.sect	'.text.Can.Can_MainFunction_Write'
	.align	2
	
	.global	Can_MainFunction_Write

; ..\component\Can\Implementation\Can.c	  9357  
; ..\component\Can\Implementation\Can.c	  9358  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  9359  | NAME:             Can_MainFunction_Write
; ..\component\Can\Implementation\Can.c	  9360  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  9361  /*
; ..\component\Can\Implementation\Can.c	  9362  |<DataModelStart>| Can_MainFunction_Write
; ..\component\Can\Implementation\Can.c	  9363  Relation_Context:
; ..\component\Can\Implementation\Can.c	  9364  Relation:
; ..\component\Can\Implementation\Can.c	  9365  TxPolling, HwCancelTx, DevErrorDetect
; ..\component\Can\Implementation\Can.c	  9366  TxPolling, HwCancelTx, OneChOpt
; ..\component\Can\Implementation\Can.c	  9367  TxPolling, HwCancelTx, Variant
; ..\component\Can\Implementation\Can.c	  9368  TxPolling, HwCancelTx, Wakeup
; ..\component\Can\Implementation\Can.c	  9369  TxPolling, IndividualPolling
; ..\component\Can\Implementation\Can.c	  9370  TxPolling, TxFullCANSupport, IndividualPolling
; ..\component\Can\Implementation\Can.c	  9371  TxFullCANSupport, HwCancelTx
; ..\component\Can\Implementation\Can.c	  9372  ChannelAmount
; ..\component\Can\Implementation\Can.c	  9373  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  9374  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  9375  Constrain:
; ..\component\Can\Implementation\Can.c	  9376  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  9377  */
; ..\component\Can\Implementation\Can.c	  9378  /*!
; ..\component\Can\Implementation\Can.c	  9379   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  9380   *
; ..\component\Can\Implementation\Can.c	  9381   *
; ..\component\Can\Implementation\Can.c	  9382   *
; ..\component\Can\Implementation\Can.c	  9383   *
; ..\component\Can\Implementation\Can.c	  9384   *
; ..\component\Can\Implementation\Can.c	  9385   *
; ..\component\Can\Implementation\Can.c	  9386   *
; ..\component\Can\Implementation\Can.c	  9387   *
; ..\component\Can\Implementation\Can.c	  9388   *
; ..\component\Can\Implementation\Can.c	  9389   *
; ..\component\Can\Implementation\Can.c	  9390   *
; ..\component\Can\Implementation\Can.c	  9391   *
; ..\component\Can\Implementation\Can.c	  9392   *
; ..\component\Can\Implementation\Can.c	  9393   *
; ..\component\Can\Implementation\Can.c	  9394   *
; ..\component\Can\Implementation\Can.c	  9395   *
; ..\component\Can\Implementation\Can.c	  9396   *
; ..\component\Can\Implementation\Can.c	  9397   *
; ..\component\Can\Implementation\Can.c	  9398   *
; ..\component\Can\Implementation\Can.c	  9399   */
; ..\component\Can\Implementation\Can.c	  9400  V_DEF_FUNC(V_NONE, void, CODE) Can_MainFunction_Write( void )
; Function Can_MainFunction_Write
.L415:
Can_MainFunction_Write:	.type	func

; ..\component\Can\Implementation\Can.c	  9401  { /* \trace SPEC-1766 */
; ..\component\Can\Implementation\Can.c	  9402    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9403  #if defined(C_ENABLE_TX_POLLING) 
; ..\component\Can\Implementation\Can.c	  9404    CAN_CHANNEL_CANTYPE_LOCAL
; ..\component\Can\Implementation\Can.c	  9405    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  9406    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  9407    CanHookBegin_Can_MainFunction_Write();
; ..\component\Can\Implementation\Can.c	  9408    /* canSendSemaphor no more needed because of ControllerInterrupts disabled while Can_Write() */
; ..\component\Can\Implementation\Can.c	  9409    
; ..\component\Can\Implementation\Can.c	  9410    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9411  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9412    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	  9413    { /* #10 Check Driver is initialized \trace SPEC-1767 */
; ..\component\Can\Implementation\Can.c	  9414      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  9415    }
; ..\component\Can\Implementation\Can.c	  9416    else
; ..\component\Can\Implementation\Can.c	  9417  # endif
; ..\component\Can\Implementation\Can.c	  9418    {  
; ..\component\Can\Implementation\Can.c	  9419      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9420  # if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  9421      for (channel = 0u; channel < kCanNumberOfChannels; channel++)
; ..\component\Can\Implementation\Can.c	  9422  # endif
; ..\component\Can\Implementation\Can.c	  9423      { /* #20 over all active controller */
; ..\component\Can\Implementation\Can.c	  9424  # if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON) /* one controller optimization is always off */
; ..\component\Can\Implementation\Can.c	  9425        if ( Can_GetCanIfChannelId(channel) == kCanChannelNotUsed ) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  9426        { /* not for inactive controller */
; ..\component\Can\Implementation\Can.c	  9427          continue;
; ..\component\Can\Implementation\Can.c	  9428        }
; ..\component\Can\Implementation\Can.c	  9429  # endif
; ..\component\Can\Implementation\Can.c	  9430  # if (CAN_DEV_ERROR_DETECT == STD_ON) /* \trace SPEC-1573, SPEC-1402, SPEC-1403 */
; ..\component\Can\Implementation\Can.c	  9431        if (!CanHL_IsControllerInit(channel))
; ..\component\Can\Implementation\Can.c	  9432        { /* #50 Check controller is initialized */
; ..\component\Can\Implementation\Can.c	  9433          errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  9434        }
; ..\component\Can\Implementation\Can.c	  9435        else
; ..\component\Can\Implementation\Can.c	  9436  # endif
; ..\component\Can\Implementation\Can.c	  9437        {
; ..\component\Can\Implementation\Can.c	  9438          if ( !CanHL_IsSleep(channel) )
; ..\component\Can\Implementation\Can.c	  9439          { /* #60 do not access CAN hardware in SLEEP */
; ..\component\Can\Implementation\Can.c	  9440            tCanTaskParaStruct taskPara;
; ..\component\Can\Implementation\Can.c	  9441  # if defined(C_ENABLE_TX_POLLING) /* COV_CAN_TX_POLLING TX */ /* always true when no hw-cancel is supported */
; ..\component\Can\Implementation\Can.c	  9442            /* #100 do confirmation handling for pending mailboxes */
; ..\component\Can\Implementation\Can.c	  9443            if ( CanLL_TxIsGlobalConfPending(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_ONLY) == kCanTrue ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  9444            { /* #110 is at least one mailbox pending */
; ..\component\Can\Implementation\Can.c	  9445              for ( taskPara.mailboxHandle = Can_GetTxBasicHandleStart(canHwChannel); taskPara.mailboxHandle < Can_GetTxBasicHandleStop(canHwChannel); taskPara.mailboxHandle++ ) /* PRQA S 2994,2996 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  9446              { /* #120 iterate over all TxBasicCAN */
; ..\component\Can\Implementation\Can.c	  9447                taskPara.hwObjHandle = Can_GetMailboxHwHandle(taskPara.mailboxHandle); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  9448  #  if defined(C_ENABLE_INDIVIDUAL_POLLING) /* COV_CAN_HWOBJINDIVPOLLING */
; ..\component\Can\Implementation\Can.c	  9449                if ( Can_IsMailboxIndivPolling(taskPara.mailboxHandle)) /* COV_CAN_HWOBJINDIVPOLLING */
; ..\component\Can\Implementation\Can.c	  9450  #  endif
; ..\component\Can\Implementation\Can.c	  9451                { /* #130 is mailbox handled by polling (individual) */
; ..\component\Can\Implementation\Can.c	  9452                  /* #140 call LL confirmation handling */
; ..\component\Can\Implementation\Can.c	  9453                  CanLL_TxProcessPendings(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &taskPara); /* SBSW_CAN_HL44 */
; ..\component\Can\Implementation\Can.c	  9454                }
; ..\component\Can\Implementation\Can.c	  9455              }
; ..\component\Can\Implementation\Can.c	  9456            }
; ..\component\Can\Implementation\Can.c	  9457  # endif
; ..\component\Can\Implementation\Can.c	  9458  # if defined(C_ENABLE_TX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  9459  #  if defined(C_ENABLE_TX_POLLING) /* COV_CAN_TX_POLLING TX */ /* always true when no hw-cancel is supported */
; ..\component\Can\Implementation\Can.c	  9460            /* #200 do confirmation handling for pending mailboxes */
; ..\component\Can\Implementation\Can.c	  9461            if ( CanLL_TxIsGlobalConfPending(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_ONLY) == kCanTrue ) /* PRQA S 2991,2995 */ /* MD_Can_ConstValue */ /* COV_CAN_LL_HARDWARE_BEHAVIOUR */
; ..\component\Can\Implementation\Can.c	  9462            { /* #210 is at least one mailbox pending */
; ..\component\Can\Implementation\Can.c	  9463              for ( taskPara.mailboxHandle = Can_GetTxFullHandleStart(canHwChannel); taskPara.mailboxHandle < Can_GetTxFullHandleStop(canHwChannel); taskPara.mailboxHandle++ ) /* PRQA S 2994,2996 */ /* MD_Can_ConstValue */
; ..\component\Can\Implementation\Can.c	  9464              { /* #220 iterate over all TxFullCAN */
; ..\component\Can\Implementation\Can.c	  9465                taskPara.hwObjHandle = Can_GetMailboxHwHandle(taskPara.mailboxHandle); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	  9466  #   if defined(C_ENABLE_INDIVIDUAL_POLLING) /* COV_CAN_HWOBJINDIVPOLLING */
; ..\component\Can\Implementation\Can.c	  9467                if ( Can_IsMailboxIndivPolling(taskPara.mailboxHandle)) /* COV_CAN_HWOBJINDIVPOLLING */
; ..\component\Can\Implementation\Can.c	  9468  #   endif
; ..\component\Can\Implementation\Can.c	  9469                { /* #230 is mailbox handled by polling (individual) */
; ..\component\Can\Implementation\Can.c	  9470                  /* #240 call LL confirmation handling */
; ..\component\Can\Implementation\Can.c	  9471                  CanLL_TxProcessPendings(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST &taskPara); /* SBSW_CAN_HL44 */
; ..\component\Can\Implementation\Can.c	  9472                }
; ..\component\Can\Implementation\Can.c	  9473              }
; ..\component\Can\Implementation\Can.c	  9474            }
; ..\component\Can\Implementation\Can.c	  9475  #  endif
; ..\component\Can\Implementation\Can.c	  9476  # endif
; ..\component\Can\Implementation\Can.c	  9477          } /* !IsSleep */
; ..\component\Can\Implementation\Can.c	  9478        }
; ..\component\Can\Implementation\Can.c	  9479      }
; ..\component\Can\Implementation\Can.c	  9480    }
; ..\component\Can\Implementation\Can.c	  9481  
; ..\component\Can\Implementation\Can.c	  9482    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9483  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9484    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	  9485    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  9486      Can_CallDetReportError(CAN_MAINFCT_WRITE_ID, errorId);
; ..\component\Can\Implementation\Can.c	  9487    }
; ..\component\Can\Implementation\Can.c	  9488  # else
; ..\component\Can\Implementation\Can.c	  9489    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  9490  # endif
; ..\component\Can\Implementation\Can.c	  9491  
; ..\component\Can\Implementation\Can.c	  9492  #else
; ..\component\Can\Implementation\Can.c	  9493    CanHookBegin_Can_MainFunction_Write();
; ..\component\Can\Implementation\Can.c	  9494  #endif /* C_ENABLE_TX_POLLING */
; ..\component\Can\Implementation\Can.c	  9495    CanHookEnd_Can_MainFunction_Write();
; ..\component\Can\Implementation\Can.c	  9496  } /* PRQA S 6030,6080 */ /* MD_MSR_STCYC,MD_MSR_STMIF */
	ret
.L879:
	
__Can_MainFunction_Write_function_end:
	.size	Can_MainFunction_Write,__Can_MainFunction_Write_function_end-Can_MainFunction_Write
.L483:
	; End of function
	
	.sdecl	'.text.Can.Can_MainFunction_Read',code,cluster('Can_MainFunction_Read')
	.sect	'.text.Can.Can_MainFunction_Read'
	.align	2
	
	.global	Can_MainFunction_Read

; ..\component\Can\Implementation\Can.c	  9497  
; ..\component\Can\Implementation\Can.c	  9498  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  9499  | NAME:             Can_MainFunction_Read
; ..\component\Can\Implementation\Can.c	  9500  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  9501  /*
; ..\component\Can\Implementation\Can.c	  9502  |<DataModelStart>| Can_MainFunction_Read
; ..\component\Can\Implementation\Can.c	  9503  Relation_Context:
; ..\component\Can\Implementation\Can.c	  9504  Relation:
; ..\component\Can\Implementation\Can.c	  9505  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  9506  RxPolling, OneChOpt
; ..\component\Can\Implementation\Can.c	  9507  RxPolling, Variant
; ..\component\Can\Implementation\Can.c	  9508  RxPolling, DevErrorDetect
; ..\component\Can\Implementation\Can.c	  9509  RxPolling, Wakeup
; ..\component\Can\Implementation\Can.c	  9510  RxPolling, RxFullCANSupport
; ..\component\Can\Implementation\Can.c	  9511  RxPolling, RxBasicCANSupport
; ..\component\Can\Implementation\Can.c	  9512  RxQueue
; ..\component\Can\Implementation\Can.c	  9513  ChannelAmount
; ..\component\Can\Implementation\Can.c	  9514  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  9515  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  9516  Constrain:
; ..\component\Can\Implementation\Can.c	  9517  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  9518  */
; ..\component\Can\Implementation\Can.c	  9519  /*!
; ..\component\Can\Implementation\Can.c	  9520   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  9521   *
; ..\component\Can\Implementation\Can.c	  9522   *
; ..\component\Can\Implementation\Can.c	  9523   *
; ..\component\Can\Implementation\Can.c	  9524   *
; ..\component\Can\Implementation\Can.c	  9525   *
; ..\component\Can\Implementation\Can.c	  9526   *
; ..\component\Can\Implementation\Can.c	  9527   *
; ..\component\Can\Implementation\Can.c	  9528   *
; ..\component\Can\Implementation\Can.c	  9529   *
; ..\component\Can\Implementation\Can.c	  9530   *
; ..\component\Can\Implementation\Can.c	  9531   */
; ..\component\Can\Implementation\Can.c	  9532  V_DEF_FUNC(V_NONE, void, CODE) Can_MainFunction_Read( void )
; Function Can_MainFunction_Read
.L417:
Can_MainFunction_Read:	.type	func

; ..\component\Can\Implementation\Can.c	  9533  { /* \trace SPEC-1776 */
; ..\component\Can\Implementation\Can.c	  9534    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9535    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  9536    CanHookBegin_Can_MainFunction_Read();
; ..\component\Can\Implementation\Can.c	  9537    errorId = CAN_E_NO_ERROR; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	  9538    
; ..\component\Can\Implementation\Can.c	  9539    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9540  #if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9541    /* #10 Check Driver is initialized \trace SPEC-1784 */
; ..\component\Can\Implementation\Can.c	  9542    if (canConfigInitFlag == CAN_STATUS_UNINIT)
	mov	d7,#0
	fcall	.cocofun_6
.L1704:
	jne	d15,#0,.L268
.L1705:

; ..\component\Can\Implementation\Can.c	  9543    {
; ..\component\Can\Implementation\Can.c	  9544      errorId = CAN_E_UNINIT;
	mov	d7,#5
	j	.L269
.L268:

; ..\component\Can\Implementation\Can.c	  9545    }
; ..\component\Can\Implementation\Can.c	  9546    else
; ..\component\Can\Implementation\Can.c	  9547  #endif
; ..\component\Can\Implementation\Can.c	  9548    /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9549    /* #20 semaphore to secure parallel access to RX buffers interrupt or polling \trace SPEC-1569 */
; ..\component\Can\Implementation\Can.c	  9550    if ( canIsRxTaskLocked == kCanFalse )  /* PRQA S 2004 */ /* MD_Can_NoElseAfterIf */
	movh.a	a15,#@his(canIsRxTaskLocked)
	lea	a15,[a15]@los(canIsRxTaskLocked)
	ld.bu	d15,[a15]
.L1706:
	jne	d15,#0,.L270
.L1707:

; ..\component\Can\Implementation\Can.c	  9551    {
; ..\component\Can\Implementation\Can.c	  9552  #if defined(C_ENABLE_RX_POLLING) /* COV_CAN_RX_POLLING */
; ..\component\Can\Implementation\Can.c	  9553      CAN_CHANNEL_CANTYPE_LOCAL
; ..\component\Can\Implementation\Can.c	  9554  #endif
; ..\component\Can\Implementation\Can.c	  9555      canIsRxTaskLocked = kCanTrue; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	  9556  #if defined(C_ENABLE_RX_POLLING) /* \trace SPEC-1782 */ /* COV_CAN_RX_POLLING */
; ..\component\Can\Implementation\Can.c	  9557  # if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  9558      for (channel = 0u; channel < kCanNumberOfChannels; channel++)
; ..\component\Can\Implementation\Can.c	  9559  # endif
; ..\component\Can\Implementation\Can.c	  9560      { /* #30 iterate over all active controller */
; ..\component\Can\Implementation\Can.c	  9561  # if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON) /* one controller optimization is always off */
; ..\component\Can\Implementation\Can.c	  9562        if ( Can_GetCanIfChannelId(channel) == kCanChannelNotUsed ) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  9563        { /* not for inactive controller */
; ..\component\Can\Implementation\Can.c	  9564          continue;
; ..\component\Can\Implementation\Can.c	  9565        }
; ..\component\Can\Implementation\Can.c	  9566  # endif
; ..\component\Can\Implementation\Can.c	  9567  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9568        if (!CanHL_IsControllerInit(channel))
; ..\component\Can\Implementation\Can.c	  9569        { /* #60 Check controller is initialized */
; ..\component\Can\Implementation\Can.c	  9570          errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  9571        }
; ..\component\Can\Implementation\Can.c	  9572        else
; ..\component\Can\Implementation\Can.c	  9573  # endif
; ..\component\Can\Implementation\Can.c	  9574        {
; ..\component\Can\Implementation\Can.c	  9575          if ( !CanHL_IsSleep(channel) )
; ..\component\Can\Implementation\Can.c	  9576          { /* #70 do not access CAN hardware in SLEEP */
; ..\component\Can\Implementation\Can.c	  9577            /* #80 over all HW channel \trace SPEC-1774 */
; ..\component\Can\Implementation\Can.c	  9578  # if defined(C_ENABLE_RX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  9579            /* #90 search for all pending FullCAN mailbox objects and call notification */
; ..\component\Can\Implementation\Can.c	  9580            CanHL_RxFullCanPolling(CAN_HW_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  9581  # endif
; ..\component\Can\Implementation\Can.c	  9582  # if defined(C_ENABLE_RX_BASICCAN_OBJECTS) /* COV_CAN_MULTIPLE_BASICCAN */
; ..\component\Can\Implementation\Can.c	  9583            /* #100 search for all pending BasicCAN mailbox objects and call notification */
; ..\component\Can\Implementation\Can.c	  9584            CanHL_RxBasicCanPolling(CAN_HW_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	  9585  # endif
; ..\component\Can\Implementation\Can.c	  9586          }
; ..\component\Can\Implementation\Can.c	  9587        }
; ..\component\Can\Implementation\Can.c	  9588      }
; ..\component\Can\Implementation\Can.c	  9589  #endif /* C_ENABLE_RX_POLLING */
; ..\component\Can\Implementation\Can.c	  9590  #if defined(C_ENABLE_RX_QUEUE)
; ..\component\Can\Implementation\Can.c	  9591      /* #200 execute RxQueue CanHL_RxQueueExecution() */
; ..\component\Can\Implementation\Can.c	  9592      CanHL_RxQueueExecution(); 
; ..\component\Can\Implementation\Can.c	  9593  #endif
; ..\component\Can\Implementation\Can.c	  9594      canIsRxTaskLocked = kCanFalse;
	st.b	[a15],d15
.L270:
.L269:

; ..\component\Can\Implementation\Can.c	  9595    }
; ..\component\Can\Implementation\Can.c	  9596  
; ..\component\Can\Implementation\Can.c	  9597    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9598  #if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9599    if (errorId != CAN_E_NO_ERROR) /* PRQA S 2992,2996 */ /* MD_Can_ConstValue */
	jeq	d7,#0,.L271
.L1708:

; ..\component\Can\Implementation\Can.c	  9600    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  9601      Can_CallDetReportError(CAN_MAINFCT_READ_ID, errorId); /* PRQA S 2880 */ /*  MD_MSR_Unreachable */
	fcall	.cocofun_2
	mov	d6,#8
	j	Det_ReportError
.L271:

; ..\component\Can\Implementation\Can.c	  9602    }
; ..\component\Can\Implementation\Can.c	  9603  #else
; ..\component\Can\Implementation\Can.c	  9604    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  9605  #endif
; ..\component\Can\Implementation\Can.c	  9606    CanHookEnd_Can_MainFunction_Read();
; ..\component\Can\Implementation\Can.c	  9607  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	ret
.L880:
	
__Can_MainFunction_Read_function_end:
	.size	Can_MainFunction_Read,__Can_MainFunction_Read_function_end-Can_MainFunction_Read
.L488:
	; End of function
	
	.sdecl	'.text.Can.Can_MainFunction_BusOff',code,cluster('Can_MainFunction_BusOff')
	.sect	'.text.Can.Can_MainFunction_BusOff'
	.align	2
	
	.global	Can_MainFunction_BusOff

; ..\component\Can\Implementation\Can.c	  9608  
; ..\component\Can\Implementation\Can.c	  9609  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  9610  | NAME:             Can_MainFunction_BusOff
; ..\component\Can\Implementation\Can.c	  9611  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  9612  /*
; ..\component\Can\Implementation\Can.c	  9613  |<DataModelStart>| Can_MainFunction_BusOff
; ..\component\Can\Implementation\Can.c	  9614  Relation_Context:
; ..\component\Can\Implementation\Can.c	  9615  Relation:
; ..\component\Can\Implementation\Can.c	  9616  StatusPolling, DevErrorDetect, ChannelAmount
; ..\component\Can\Implementation\Can.c	  9617  StatusPolling, OneChOpt
; ..\component\Can\Implementation\Can.c	  9618  StatusPolling, Variant, ChannelAmount
; ..\component\Can\Implementation\Can.c	  9619  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  9620  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  9621  Constrain:
; ..\component\Can\Implementation\Can.c	  9622  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  9623  */
; ..\component\Can\Implementation\Can.c	  9624  /*!
; ..\component\Can\Implementation\Can.c	  9625   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  9626   *
; ..\component\Can\Implementation\Can.c	  9627   *
; ..\component\Can\Implementation\Can.c	  9628   *
; ..\component\Can\Implementation\Can.c	  9629   *
; ..\component\Can\Implementation\Can.c	  9630   *
; ..\component\Can\Implementation\Can.c	  9631   *
; ..\component\Can\Implementation\Can.c	  9632   *
; ..\component\Can\Implementation\Can.c	  9633   */
; ..\component\Can\Implementation\Can.c	  9634  V_DEF_FUNC(V_NONE, void, CODE) Can_MainFunction_BusOff( void )
; Function Can_MainFunction_BusOff
.L419:
Can_MainFunction_BusOff:	.type	func

; ..\component\Can\Implementation\Can.c	  9635  { /* \trace SPEC-1783 */
; ..\component\Can\Implementation\Can.c	  9636    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9637  #if defined(C_ENABLE_ERROR_POLLING) /* \trace SPEC-1778 */ /* COV_CAN_ERROR_POLLING */
; ..\component\Can\Implementation\Can.c	  9638    CAN_CHANNEL_CANTYPE_LOCAL
; ..\component\Can\Implementation\Can.c	  9639    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  9640    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  9641    
; ..\component\Can\Implementation\Can.c	  9642    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9643  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9644    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	  9645    { /* #10 Check Driver is initialized \trace SPEC-1780 */
; ..\component\Can\Implementation\Can.c	  9646      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  9647    }
; ..\component\Can\Implementation\Can.c	  9648    else
; ..\component\Can\Implementation\Can.c	  9649  # endif
; ..\component\Can\Implementation\Can.c	  9650    {  
; ..\component\Can\Implementation\Can.c	  9651      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9652  # if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  9653      for (channel = 0u; channel < kCanNumberOfChannels; channel++)
; ..\component\Can\Implementation\Can.c	  9654  # endif
; ..\component\Can\Implementation\Can.c	  9655      { /* #20 over all active controller */
; ..\component\Can\Implementation\Can.c	  9656  # if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON) /* one controller optimization is always off */
; ..\component\Can\Implementation\Can.c	  9657        if ( Can_GetCanIfChannelId(channel) == kCanChannelNotUsed ) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  9658        { /* not for inactive controller */
; ..\component\Can\Implementation\Can.c	  9659          continue;
; ..\component\Can\Implementation\Can.c	  9660        }
; ..\component\Can\Implementation\Can.c	  9661  # endif
; ..\component\Can\Implementation\Can.c	  9662  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9663        if (!CanHL_IsControllerInit(channel))
; ..\component\Can\Implementation\Can.c	  9664        { /* #50 Check controller is initialized */
; ..\component\Can\Implementation\Can.c	  9665          errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  9666        }
; ..\component\Can\Implementation\Can.c	  9667        else
; ..\component\Can\Implementation\Can.c	  9668  # endif
; ..\component\Can\Implementation\Can.c	  9669        {
; ..\component\Can\Implementation\Can.c	  9670          if ( !CanHL_IsSleep(channel) )
; ..\component\Can\Implementation\Can.c	  9671          { /* #60 do not access CAN hardware in SLEEP */
; ..\component\Can\Implementation\Can.c	  9672            /* #80 disable CAN interrupts */
; ..\component\Can\Implementation\Can.c	  9673            Can_DisableControllerInterrupts((uint8)channel);
; ..\component\Can\Implementation\Can.c	  9674            /* #90 call CanHL_ErrorHandling */
; ..\component\Can\Implementation\Can.c	  9675            CanHL_ErrorHandling( CAN_HW_CHANNEL_CANPARA_ONLY );
; ..\component\Can\Implementation\Can.c	  9676            Can_EnableControllerInterrupts((uint8)channel);
; ..\component\Can\Implementation\Can.c	  9677          }
; ..\component\Can\Implementation\Can.c	  9678        }
; ..\component\Can\Implementation\Can.c	  9679      }
; ..\component\Can\Implementation\Can.c	  9680    }
; ..\component\Can\Implementation\Can.c	  9681  
; ..\component\Can\Implementation\Can.c	  9682    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9683  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9684    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	  9685    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  9686      Can_CallDetReportError(CAN_MAINFCT_BO_ID, errorId);
; ..\component\Can\Implementation\Can.c	  9687    }
; ..\component\Can\Implementation\Can.c	  9688  # else
; ..\component\Can\Implementation\Can.c	  9689    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  9690  # endif
; ..\component\Can\Implementation\Can.c	  9691  #endif /* C_ENABLE_ERROR_POLLING */
; ..\component\Can\Implementation\Can.c	  9692  }
	ret
.L882:
	
__Can_MainFunction_BusOff_function_end:
	.size	Can_MainFunction_BusOff,__Can_MainFunction_BusOff_function_end-Can_MainFunction_BusOff
.L493:
	; End of function
	
	.sdecl	'.text.Can.Can_MainFunction_Wakeup',code,cluster('Can_MainFunction_Wakeup')
	.sect	'.text.Can.Can_MainFunction_Wakeup'
	.align	2
	
	.global	Can_MainFunction_Wakeup

; ..\component\Can\Implementation\Can.c	  9693  
; ..\component\Can\Implementation\Can.c	  9694  
; ..\component\Can\Implementation\Can.c	  9695  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  9696  | NAME:             Can_MainFunction_Wakeup
; ..\component\Can\Implementation\Can.c	  9697  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  9698  /*
; ..\component\Can\Implementation\Can.c	  9699  |<DataModelStart>| Can_MainFunction_Wakeup
; ..\component\Can\Implementation\Can.c	  9700  Relation_Context:
; ..\component\Can\Implementation\Can.c	  9701  Relation:
; ..\component\Can\Implementation\Can.c	  9702  WakeupPolling, Wakeup, DevErrorDetect
; ..\component\Can\Implementation\Can.c	  9703  WakeupPolling, Wakeup, OneChOpt
; ..\component\Can\Implementation\Can.c	  9704  WakeupPolling, Wakeup, Variant
; ..\component\Can\Implementation\Can.c	  9705  ChannelAmount
; ..\component\Can\Implementation\Can.c	  9706  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  9707  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  9708  Constrain:
; ..\component\Can\Implementation\Can.c	  9709  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  9710  */
; ..\component\Can\Implementation\Can.c	  9711  /*!
; ..\component\Can\Implementation\Can.c	  9712   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  9713   *
; ..\component\Can\Implementation\Can.c	  9714   *
; ..\component\Can\Implementation\Can.c	  9715   *
; ..\component\Can\Implementation\Can.c	  9716   *
; ..\component\Can\Implementation\Can.c	  9717   *
; ..\component\Can\Implementation\Can.c	  9718   *
; ..\component\Can\Implementation\Can.c	  9719   *
; ..\component\Can\Implementation\Can.c	  9720   */
; ..\component\Can\Implementation\Can.c	  9721  V_DEF_FUNC(V_NONE, void, CODE) Can_MainFunction_Wakeup( void )
; Function Can_MainFunction_Wakeup
.L421:
Can_MainFunction_Wakeup:	.type	func

; ..\component\Can\Implementation\Can.c	  9722  { /* \trace SPEC-1770 */
; ..\component\Can\Implementation\Can.c	  9723    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9724  }
	ret
.L883:
	
__Can_MainFunction_Wakeup_function_end:
	.size	Can_MainFunction_Wakeup,__Can_MainFunction_Wakeup_function_end-Can_MainFunction_Wakeup
.L498:
	; End of function
	
	.sdecl	'.text.Can.Can_MainFunction_Mode',code,cluster('Can_MainFunction_Mode')
	.sect	'.text.Can.Can_MainFunction_Mode'
	.align	2
	
	.global	Can_MainFunction_Mode

; ..\component\Can\Implementation\Can.c	  9725  
; ..\component\Can\Implementation\Can.c	  9726  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  9727  | NAME:             Can_MainFunction_Mode
; ..\component\Can\Implementation\Can.c	  9728  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  9729  /*
; ..\component\Can\Implementation\Can.c	  9730  |<DataModelStart>| Can_MainFunction_Mode
; ..\component\Can\Implementation\Can.c	  9731  Relation_Context:
; ..\component\Can\Implementation\Can.c	  9732  Relation:
; ..\component\Can\Implementation\Can.c	  9733  DevErrorDetect
; ..\component\Can\Implementation\Can.c	  9734  OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	  9735  Variant, ChannelAmount
; ..\component\Can\Implementation\Can.c	  9736  DevErrorDetect, ChannelAmount
; ..\component\Can\Implementation\Can.c	  9737  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  9738  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  9739  Constrain:
; ..\component\Can\Implementation\Can.c	  9740  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  9741  */
; ..\component\Can\Implementation\Can.c	  9742  /*!
; ..\component\Can\Implementation\Can.c	  9743   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  9744   *
; ..\component\Can\Implementation\Can.c	  9745   *
; ..\component\Can\Implementation\Can.c	  9746   *
; ..\component\Can\Implementation\Can.c	  9747   *
; ..\component\Can\Implementation\Can.c	  9748   *
; ..\component\Can\Implementation\Can.c	  9749   *
; ..\component\Can\Implementation\Can.c	  9750   */
; ..\component\Can\Implementation\Can.c	  9751  V_DEF_FUNC(V_NONE, void, CODE) Can_MainFunction_Mode( void )
; Function Can_MainFunction_Mode
.L423:
Can_MainFunction_Mode:	.type	func

; ..\component\Can\Implementation\Can.c	  9752  { /* \trace SPEC-1775 */
; ..\component\Can\Implementation\Can.c	  9753    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9754    CAN_CHANNEL_CANTYPE_LOCAL
; ..\component\Can\Implementation\Can.c	  9755    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  9756    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  9757    
; ..\component\Can\Implementation\Can.c	  9758    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9759  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9760    if (canConfigInitFlag == CAN_STATUS_UNINIT)
	mov	d10,#0
	fcall	.cocofun_6
.L1721:
	jne	d15,#0,.L272
.L1722:

; ..\component\Can\Implementation\Can.c	  9761    { /* #10 Check Driver is initialized \trace SPEC-1779 */
; ..\component\Can\Implementation\Can.c	  9762      errorId = CAN_E_UNINIT;
	mov	d10,#5
	j	.L273
.L272:

; ..\component\Can\Implementation\Can.c	  9763    }
; ..\component\Can\Implementation\Can.c	  9764    else
; ..\component\Can\Implementation\Can.c	  9765  # endif
; ..\component\Can\Implementation\Can.c	  9766    { /* #15 EXCLUSIVE_AREA_6 avoid nesting mode changes (e.g. same API, initialization or BUSOFF) */
; ..\component\Can\Implementation\Can.c	  9767      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9768      SchM_Enter_Can_CAN_EXCLUSIVE_AREA_6();
	call	SuspendAllInterrupts
.L1723:

; ..\component\Can\Implementation\Can.c	  9769  # if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  9770      for (channel = 0u; channel < kCanNumberOfChannels; channel++) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	  9771  # endif
; ..\component\Can\Implementation\Can.c	  9772      { /* #20 over all active controller */
; ..\component\Can\Implementation\Can.c	  9773  # if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON) /* one controller optimization is always off */
; ..\component\Can\Implementation\Can.c	  9774        if ( Can_GetCanIfChannelId(channel) == kCanChannelNotUsed ) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  9775        { /* not for inactive controller */
; ..\component\Can\Implementation\Can.c	  9776          continue;
; ..\component\Can\Implementation\Can.c	  9777        }
; ..\component\Can\Implementation\Can.c	  9778  # endif
; ..\component\Can\Implementation\Can.c	  9779  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9780        if (!CanHL_IsControllerInit(channel))
	fcall	.cocofun_21
	lea	a12,[a15]22
	ld.bu	d15,[a12]
	jnz.t	d15:2,.L274
.L1724:

; ..\component\Can\Implementation\Can.c	  9781        { /* #50 Check controller is initialized */ /* \trace SPEC-1779 */
; ..\component\Can\Implementation\Can.c	  9782          errorId = CAN_E_UNINIT;
	mov	d10,#5
	j	.L275
.L274:

; ..\component\Can\Implementation\Can.c	  9783        }
; ..\component\Can\Implementation\Can.c	  9784        else
; ..\component\Can\Implementation\Can.c	  9785  # endif
; ..\component\Can\Implementation\Can.c	  9786        {
; ..\component\Can\Implementation\Can.c	  9787          uint8 transitionRequest;
; ..\component\Can\Implementation\Can.c	  9788          uint8 busOffRecovery;
; ..\component\Can\Implementation\Can.c	  9789          uint8 doRamCheck;
; ..\component\Can\Implementation\Can.c	  9790          uint8 transitionState;
; ..\component\Can\Implementation\Can.c	  9791          transitionRequest = Can_GetModeTransitionRequest(channel);
	lea	a13,[a15]23
.L1725:

; ..\component\Can\Implementation\Can.c	  9792          busOffRecovery = Can_GetBusOffTransitionRequest(channel);
; ..\component\Can\Implementation\Can.c	  9793          doRamCheck = Can_GetRamCheckTransitionRequest(channel);
; ..\component\Can\Implementation\Can.c	  9794          /* #55 only one transition request at one time is possible - execute it \trace SPEC-1771 */
; ..\component\Can\Implementation\Can.c	  9795          if(transitionRequest != kCanModeNone)
	mov	d15,#16
	ld.bu	d8,[a13]
.L1412:
	ld.bu	d5,[a15]17
.L1413:
	ld.bu	d6,[a15]25
.L1415:
	jeq	d15,d8,.L276
.L1726:

; ..\component\Can\Implementation\Can.c	  9796          {
; ..\component\Can\Implementation\Can.c	  9797            transitionState = CanLL_ModeTransition(CAN_CHANNEL_AND_HW_CHANNEL_CANPARA_FIRST transitionRequest, busOffRecovery, doRamCheck);
	mov	d4,d8
	call	CanLL_ModeTransition
.L1414:
	mov	d9,d2
.L1416:

; ..\component\Can\Implementation\Can.c	  9798            switch(transitionRequest)
; ..\component\Can\Implementation\Can.c	  9799            {
; ..\component\Can\Implementation\Can.c	  9800              case kCanModeStopReinitFast: /* COV_CAN_TRANSITION_REQUEST */
	jeq	d8,#3,.L277
.L1727:

; ..\component\Can\Implementation\Can.c	  9801              case kCanModeStopReinit: /* COV_CAN_TRANSITION_REQUEST */
	jeq	d8,#4,.L278
.L1728:

; ..\component\Can\Implementation\Can.c	  9802                CanHL_NotifyTransition(CAN_CHANNEL_CANPARA_FIRST CAN_STATUS_STOP, CANIF_CS_STOPPED, transitionState);
; ..\component\Can\Implementation\Can.c	  9803                break;
; ..\component\Can\Implementation\Can.c	  9804  # if (CAN_REINIT_START == STD_ON)
; ..\component\Can\Implementation\Can.c	  9805              case kCanModeStartReinit: /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	  9806  # else
; ..\component\Can\Implementation\Can.c	  9807              case kCanModeStart: /* COV_CAN_TRANSITION_REQUEST */
	jeq	d8,#5,.L279
.L1729:

; ..\component\Can\Implementation\Can.c	  9808  # endif
; ..\component\Can\Implementation\Can.c	  9809              case kCanModeResetBusOffEnd: /* COV_CAN_TRANSITION_REQUEST */
	mov	d15,#10
	jeq	d15,d8,.L280
	j	.L281
.L278:
.L277:

; ..\component\Can\Implementation\Can.c	  1872    if ( transitionState == kCanOk ) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d9,#1,.L282
.L1730:
	ld.bu	d15,[a12]
	and	d15,#12
	or	d15,#2
	st.b	[a12],d15
.L1731:
	mov	d15,#16
	st.b	[a13],d15
.L1411:
	fcall	.cocofun_24
.L1417:
	mov	d5,#1
	call	CanIf_ControllerModeIndication
.L890:
	j	.L283
.L280:
.L279:

; ..\component\Can\Implementation\Can.c	  1872    if ( transitionState == kCanOk ) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
	jne	d9,#1,.L284
.L1732:
	ld.bu	d15,[a12]
	and	d15,#12
	or	d15,#1
	st.b	[a12],d15
.L1733:
	mov	d15,#16
	st.b	[a13],d15
.L1734:
	movh.a	a2,#@his(Can_CanIfChannelId)
	ld.bu	d4,[a2]@los(Can_CanIfChannelId)
.L1735:
	mov	d5,#2
	call	CanIf_ControllerModeIndication

; ..\component\Can\Implementation\Can.c	  1872    if ( transitionState == kCanOk ) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L284:

; ..\component\Can\Implementation\Can.c	  9810  # if defined(C_ENABLE_SILENT_MODE)
; ..\component\Can\Implementation\Can.c	  9811              case kCanModeSilent: /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	  9812  # endif
; ..\component\Can\Implementation\Can.c	  9813                CanHL_NotifyTransition(CAN_CHANNEL_CANPARA_FIRST CAN_STATUS_START, CANIF_CS_STARTED, transitionState);
; ..\component\Can\Implementation\Can.c	  9814                if ( transitionState == kCanOk ) /* COV_CAN_TRANSITION_REQUEST */
	jne	d9,#1,.L285
.L1736:

; ..\component\Can\Implementation\Can.c	  9815                {
; ..\component\Can\Implementation\Can.c	  9816                  Can_SetIsBusOff(channel, FALSE); /* SBSW_CAN_HL08 */
	mov	d15,#0
	st.b	[a15]19,d15
.L285:

; ..\component\Can\Implementation\Can.c	  9817                }
; ..\component\Can\Implementation\Can.c	  9818                break;
; ..\component\Can\Implementation\Can.c	  9819              case kCanModeResetBusOffStart: /* COV_CAN_TRANSITION_REQUEST */ /* not expected, no repetition request */
; ..\component\Can\Implementation\Can.c	  9820              default: /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	  9821                break;
; ..\component\Can\Implementation\Can.c	  9822            }
; ..\component\Can\Implementation\Can.c	  9823          }
.L283:

; ..\component\Can\Implementation\Can.c	  1872    if ( transitionState == kCanOk ) /* COV_CAN_TRANSITION_REQUEST */      (inlined)
.L282:
.L281:
.L276:
.L275:

; ..\component\Can\Implementation\Can.c	  9824        }
; ..\component\Can\Implementation\Can.c	  9825      } /* over all channels */
; ..\component\Can\Implementation\Can.c	  9826      SchM_Exit_Can_CAN_EXCLUSIVE_AREA_6();
	call	ResumeAllInterrupts
.L273:

; ..\component\Can\Implementation\Can.c	  9827    }
; ..\component\Can\Implementation\Can.c	  9828  
; ..\component\Can\Implementation\Can.c	  9829    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9830  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9831    if (errorId != CAN_E_NO_ERROR)
	jeq	d10,#0,.L286
.L1737:

; ..\component\Can\Implementation\Can.c	  9832    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  9833      Can_CallDetReportError(CAN_MAINFCT_MODE_ID, errorId);
	fcall	.cocofun_2
	mov	d6,#12
	mov	d7,d10
.L1418:
	j	Det_ReportError
.L286:

; ..\component\Can\Implementation\Can.c	  9834    }
; ..\component\Can\Implementation\Can.c	  9835  # else
; ..\component\Can\Implementation\Can.c	  9836    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  9837  # endif
; ..\component\Can\Implementation\Can.c	  9838  } /* PRQA S 6030,6080 */ /* MD_MSR_STCYC,MD_MSR_STMIF */
	ret
.L884:
	
__Can_MainFunction_Mode_function_end:
	.size	Can_MainFunction_Mode,__Can_MainFunction_Mode_function_end-Can_MainFunction_Mode
.L503:
	; End of function
	
	.sdecl	'.text.Can.Can_CancelTx',code,cluster('Can_CancelTx')
	.sect	'.text.Can.Can_CancelTx'
	.align	2
	
	.global	Can_CancelTx

; ..\component\Can\Implementation\Can.c	  9839  
; ..\component\Can\Implementation\Can.c	  9840  
; ..\component\Can\Implementation\Can.c	  9841  /****************************************************************************
; ..\component\Can\Implementation\Can.c	  9842  | NAME:             Can_CancelTx
; ..\component\Can\Implementation\Can.c	  9843  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	  9844  /*
; ..\component\Can\Implementation\Can.c	  9845  |<DataModelStart>| Can_CancelTx
; ..\component\Can\Implementation\Can.c	  9846  Relation_Context:
; ..\component\Can\Implementation\Can.c	  9847  TransmitCancellationAPI
; ..\component\Can\Implementation\Can.c	  9848  Relation:
; ..\component\Can\Implementation\Can.c	  9849  DevErrorDetect, TxFullCANSupport
; ..\component\Can\Implementation\Can.c	  9850  OneChOpt
; ..\component\Can\Implementation\Can.c	  9851  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	  9852  DevErrorDetect, Variant
; ..\component\Can\Implementation\Can.c	  9853  TxFullCANSupport, HwCancelTx
; ..\component\Can\Implementation\Can.c	  9854  ChannelAmount
; ..\component\Can\Implementation\Can.c	  9855  TxFullAmount
; ..\component\Can\Implementation\Can.c	  9856  TxBasicAmount
; ..\component\Can\Implementation\Can.c	  9857  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	  9858  Parameter_Data:
; ..\component\Can\Implementation\Can.c	  9859  Constrain:
; ..\component\Can\Implementation\Can.c	  9860  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	  9861  */
; ..\component\Can\Implementation\Can.c	  9862  /*!
; ..\component\Can\Implementation\Can.c	  9863   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	  9864   *
; ..\component\Can\Implementation\Can.c	  9865   *
; ..\component\Can\Implementation\Can.c	  9866   *
; ..\component\Can\Implementation\Can.c	  9867   *
; ..\component\Can\Implementation\Can.c	  9868   *
; ..\component\Can\Implementation\Can.c	  9869   *
; ..\component\Can\Implementation\Can.c	  9870   *
; ..\component\Can\Implementation\Can.c	  9871   *
; ..\component\Can\Implementation\Can.c	  9872   *
; ..\component\Can\Implementation\Can.c	  9873   *
; ..\component\Can\Implementation\Can.c	  9874   *
; ..\component\Can\Implementation\Can.c	  9875   *
; ..\component\Can\Implementation\Can.c	  9876   *
; ..\component\Can\Implementation\Can.c	  9877   *
; ..\component\Can\Implementation\Can.c	  9878   *
; ..\component\Can\Implementation\Can.c	  9879   *
; ..\component\Can\Implementation\Can.c	  9880   *
; ..\component\Can\Implementation\Can.c	  9881   *
; ..\component\Can\Implementation\Can.c	  9882   */
; ..\component\Can\Implementation\Can.c	  9883  V_DEF_FUNC(V_NONE, void, CODE) Can_CancelTx( Can_HwHandleType Hth, PduIdType PduId )
; Function Can_CancelTx
.L425:
Can_CancelTx:	.type	func

; ..\component\Can\Implementation\Can.c	  9884  {
; ..\component\Can\Implementation\Can.c	  9885    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9886  #if defined(C_ENABLE_CANCEL_SUPPORT_API)
; ..\component\Can\Implementation\Can.c	  9887    CAN_CHANNEL_CANTYPE_LOCAL
; ..\component\Can\Implementation\Can.c	  9888    tCanTxCancellationParaStruct txCancellationPara;
; ..\component\Can\Implementation\Can.c	  9889    uint8 errorId;
; ..\component\Can\Implementation\Can.c	  9890    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	  9891    
; ..\component\Can\Implementation\Can.c	  9892    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9893  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9894    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	  9895    { /* #10 Check Driver is initialized */
; ..\component\Can\Implementation\Can.c	  9896      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  9897    }
; ..\component\Can\Implementation\Can.c	  9898    else
; ..\component\Can\Implementation\Can.c	  9899    if (Hth >= Can_GetSizeOfMailbox())
; ..\component\Can\Implementation\Can.c	  9900    { /* #20 Check Hth is in range */
; ..\component\Can\Implementation\Can.c	  9901      errorId = CAN_E_PARAM_HANDLE;
; ..\component\Can\Implementation\Can.c	  9902    }
; ..\component\Can\Implementation\Can.c	  9903    else
; ..\component\Can\Implementation\Can.c	  9904  #  if defined(C_ENABLE_TX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  9905    if ((Can_GetMailboxType(Hth) != CAN_TX_BASICCAN_TYPE) && (Can_GetMailboxType(Hth) != CAN_TX_BASICCAN_MUX_TYPE) && (Can_GetMailboxType(Hth) != CAN_TX_BASICCAN_FIFO_TYPE) && (Can_GetMailboxType(Hth) != CAN_TX_FULLCAN_TYPE)) /* COV_CAN_GENDATA_TX_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  9906  #  else
; ..\component\Can\Implementation\Can.c	  9907    if ((Can_GetMailboxType(Hth) != CAN_TX_BASICCAN_TYPE) && (Can_GetMailboxType(Hth) != CAN_TX_BASICCAN_MUX_TYPE) && (Can_GetMailboxType(Hth) != CAN_TX_BASICCAN_FIFO_TYPE)) /* COV_CAN_GENDATA_TX_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  9908  #  endif
; ..\component\Can\Implementation\Can.c	  9909    { /* #30 Check Hth is FullCAN or BasicCAN */
; ..\component\Can\Implementation\Can.c	  9910      errorId = CAN_E_PARAM_HANDLE;
; ..\component\Can\Implementation\Can.c	  9911    }
; ..\component\Can\Implementation\Can.c	  9912    else
; ..\component\Can\Implementation\Can.c	  9913  # endif
; ..\component\Can\Implementation\Can.c	  9914    {
; ..\component\Can\Implementation\Can.c	  9915  # if !defined( C_SINGLE_RECEIVE_CHANNEL ) /* otherwise 'channel' is a define */
; ..\component\Can\Implementation\Can.c	  9916      channel = Can_GetMailboxController(Hth);
; ..\component\Can\Implementation\Can.c	  9917  # endif
; ..\component\Can\Implementation\Can.c	  9918  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9919  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	  9920      if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  9921      { /* #40 Check parameter controller is in range */
; ..\component\Can\Implementation\Can.c	  9922        errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  9923      }
; ..\component\Can\Implementation\Can.c	  9924      else
; ..\component\Can\Implementation\Can.c	  9925  #  endif
; ..\component\Can\Implementation\Can.c	  9926  #  if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9927      if (Can_GetCanIfChannelId(channel) == kCanChannelNotUsed) /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	  9928      { /* #60 Check parameter controller is valid */
; ..\component\Can\Implementation\Can.c	  9929        errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	  9930      }
; ..\component\Can\Implementation\Can.c	  9931      else
; ..\component\Can\Implementation\Can.c	  9932  #  endif
; ..\component\Can\Implementation\Can.c	  9933      if (!CanHL_IsControllerInit(channel))
; ..\component\Can\Implementation\Can.c	  9934      { /* #70 Check controller is initialized */
; ..\component\Can\Implementation\Can.c	  9935        errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	  9936      }
; ..\component\Can\Implementation\Can.c	  9937      else
; ..\component\Can\Implementation\Can.c	  9938  # endif
; ..\component\Can\Implementation\Can.c	  9939      {
; ..\component\Can\Implementation\Can.c	  9940        /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9941        txCancellationPara.mailboxHandle = Hth;
; ..\component\Can\Implementation\Can.c	  9942        txCancellationPara.mailboxElement = 0u;
; ..\component\Can\Implementation\Can.c	  9943        txCancellationPara.activeSendObject = CanHL_GetActiveSendObject(txCancellationPara.mailboxHandle, txCancellationPara.mailboxElement);
; ..\component\Can\Implementation\Can.c	  9944  
; ..\component\Can\Implementation\Can.c	  9945  # if defined (C_ENABLE_TX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  9946        if ( Can_GetMailboxType(Hth) != CAN_TX_FULLCAN_TYPE ) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	  9947  # endif
; ..\component\Can\Implementation\Can.c	  9948        { /* #100 is BasicCAN */
; ..\component\Can\Implementation\Can.c	  9949  # if defined(C_ENABLE_MULTIPLEXED_TRANSMISSION) || defined(C_ENABLE_TX_HW_FIFO) /* \trace SPEC-1677 */
; ..\component\Can\Implementation\Can.c	  9950          for (; txCancellationPara.mailboxElement < Can_GetMailboxSize(Hth); txCancellationPara.mailboxElement++, txCancellationPara.activeSendObject++) /* PRQA S 3418 */ /* MD_Can_IncompleteForLoop */
; ..\component\Can\Implementation\Can.c	  9951  # endif
; ..\component\Can\Implementation\Can.c	  9952          { /* #110 over all Multiplexed TX objects - search for handle */
; ..\component\Can\Implementation\Can.c	  9953            if (Can_GetActiveSendPdu(txCancellationPara.activeSendObject) == PduId)
; ..\component\Can\Implementation\Can.c	  9954            {
; ..\component\Can\Implementation\Can.c	  9955              if ((Can_GetActiveSendState(txCancellationPara.activeSendObject) == kCanBufferSend)
; ..\component\Can\Implementation\Can.c	  9956                  )  /* COV_CAN_CANCEL_SW_STIMULATION */
; ..\component\Can\Implementation\Can.c	  9957              { /* #120 PDU found in active send list - handle found */
; ..\component\Can\Implementation\Can.c	  9958                /* #130 CANCEL_IN_HW is active - just suppress TX confirmation */
; ..\component\Can\Implementation\Can.c	  9959                Can_SetActiveSendState(txCancellationPara.activeSendObject, kCanBufferCancelSw); /* mark as cancelled by SW */ /* SBSW_CAN_HL04 */
; ..\component\Can\Implementation\Can.c	  9960  # if defined(C_ENABLE_MULTIPLEXED_TRANSMISSION) || defined(C_ENABLE_TX_HW_FIFO)
; ..\component\Can\Implementation\Can.c	  9961                break;
; ..\component\Can\Implementation\Can.c	  9962  # endif
; ..\component\Can\Implementation\Can.c	  9963              }
; ..\component\Can\Implementation\Can.c	  9964            }
; ..\component\Can\Implementation\Can.c	  9965          }
; ..\component\Can\Implementation\Can.c	  9966        }
; ..\component\Can\Implementation\Can.c	  9967  # if defined (C_ENABLE_TX_FULLCAN_OBJECTS)
; ..\component\Can\Implementation\Can.c	  9968        else
; ..\component\Can\Implementation\Can.c	  9969        { /* #200 is FullCAN */
; ..\component\Can\Implementation\Can.c	  9970          if (Can_GetActiveSendPdu(txCancellationPara.activeSendObject) == PduId)
; ..\component\Can\Implementation\Can.c	  9971          {
; ..\component\Can\Implementation\Can.c	  9972            if ((Can_GetActiveSendState(txCancellationPara.activeSendObject) == kCanBufferSend)
; ..\component\Can\Implementation\Can.c	  9973               )  /* COV_CAN_CANCEL_SW_STIMULATION */
; ..\component\Can\Implementation\Can.c	  9974            { /* #210 mailbox to cancel is valid (PDU, handle, send state OK) */
; ..\component\Can\Implementation\Can.c	  9975              /* #220 CANCEL_FULLCAN_IN_HW is active - just suppress TX confirmation */
; ..\component\Can\Implementation\Can.c	  9976              Can_SetActiveSendState(txCancellationPara.activeSendObject, kCanBufferCancelSw); /* mark as cancelled by SW */ /* SBSW_CAN_HL04 */
; ..\component\Can\Implementation\Can.c	  9977            }
; ..\component\Can\Implementation\Can.c	  9978          }
; ..\component\Can\Implementation\Can.c	  9979        }
; ..\component\Can\Implementation\Can.c	  9980  # endif
; ..\component\Can\Implementation\Can.c	  9981      }
; ..\component\Can\Implementation\Can.c	  9982      CAN_CHANNEL_DUMMY_STATEMENT; /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  9983    }
; ..\component\Can\Implementation\Can.c	  9984    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	  9985  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	  9986    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	  9987    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	  9988      Can_CallDetReportError(CAN_WRITE_ID, errorId);
; ..\component\Can\Implementation\Can.c	  9989    }
; ..\component\Can\Implementation\Can.c	  9990  # else
; ..\component\Can\Implementation\Can.c	  9991    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  9992  # endif
; ..\component\Can\Implementation\Can.c	  9993  #else /* CAN_ENABLE_CANCEL_SUPPORT_API */
; ..\component\Can\Implementation\Can.c	  9994    CAN_DUMMY_STATEMENT(Hth); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  9995    CAN_DUMMY_STATEMENT(PduId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	  9996  #endif /* CAN_ENABLE_CANCEL_SUPPORT_API */
; ..\component\Can\Implementation\Can.c	  9997  } /* PRQA S 6030,6080 */ /* MD_MSR_STCYC,MD_MSR_STMIF */
	ret
.L856:
	
__Can_CancelTx_function_end:
	.size	Can_CancelTx,__Can_CancelTx_function_end-Can_CancelTx
.L463:
	; End of function
	
	.sdecl	'.text.Can.CanInterrupt',code,cluster('CanInterrupt')
	.sect	'.text.Can.CanInterrupt'
	.align	2
	
	.global	CanInterrupt

; ..\component\Can\Implementation\Can.c	  9998  
; ..\component\Can\Implementation\Can.c	  9999  #if (CAN_GET_STATUS == STD_ON)
; ..\component\Can\Implementation\Can.c	 10000  /****************************************************************************
; ..\component\Can\Implementation\Can.c	 10001  | NAME:             Can_GetStatus
; ..\component\Can\Implementation\Can.c	 10002  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10003  /*
; ..\component\Can\Implementation\Can.c	 10004  |<DataModelStart>| Can_GetStatus
; ..\component\Can\Implementation\Can.c	 10005  Relation_Context:
; ..\component\Can\Implementation\Can.c	 10006  CanGetStatus
; ..\component\Can\Implementation\Can.c	 10007  Relation:
; ..\component\Can\Implementation\Can.c	 10008  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	 10009  DevErrorDetect, Variant
; ..\component\Can\Implementation\Can.c	 10010  ChannelAmount
; ..\component\Can\Implementation\Can.c	 10011  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	 10012  Parameter_Data:
; ..\component\Can\Implementation\Can.c	 10013  Constrain:
; ..\component\Can\Implementation\Can.c	 10014  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	 10015  */
; ..\component\Can\Implementation\Can.c	 10016  /*!
; ..\component\Can\Implementation\Can.c	 10017   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	 10018   *
; ..\component\Can\Implementation\Can.c	 10019   *
; ..\component\Can\Implementation\Can.c	 10020   *
; ..\component\Can\Implementation\Can.c	 10021   *
; ..\component\Can\Implementation\Can.c	 10022   *
; ..\component\Can\Implementation\Can.c	 10023   *
; ..\component\Can\Implementation\Can.c	 10024   *
; ..\component\Can\Implementation\Can.c	 10025   *
; ..\component\Can\Implementation\Can.c	 10026   */
; ..\component\Can\Implementation\Can.c	 10027  V_DEF_FUNC(V_NONE, uint8, CODE) Can_GetStatus( uint8 Controller )
; ..\component\Can\Implementation\Can.c	 10028  {
; ..\component\Can\Implementation\Can.c	 10029    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10030    uint8 canReturnCode;
; ..\component\Can\Implementation\Can.c	 10031    uint8 errorId;
; ..\component\Can\Implementation\Can.c	 10032    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	 10033    canReturnCode = CAN_STATUS_INCONSISTENT; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	 10034    
; ..\component\Can\Implementation\Can.c	 10035    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10036  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10037    /* #10 Check if parameter controller is valid and state is INIT */
; ..\component\Can\Implementation\Can.c	 10038    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	 10039    { /* #20 Check Driver is initialized */
; ..\component\Can\Implementation\Can.c	 10040      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10041    }
; ..\component\Can\Implementation\Can.c	 10042    else
; ..\component\Can\Implementation\Can.c	 10043  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10044    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	 10045    {
; ..\component\Can\Implementation\Can.c	 10046      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10047    }
; ..\component\Can\Implementation\Can.c	 10048    else
; ..\component\Can\Implementation\Can.c	 10049  #  endif
; ..\component\Can\Implementation\Can.c	 10050  #  if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10051    if (Can_GetCanIfChannelId(channel) == kCanChannelNotUsed) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	 10052    {
; ..\component\Can\Implementation\Can.c	 10053      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10054    }
; ..\component\Can\Implementation\Can.c	 10055    else
; ..\component\Can\Implementation\Can.c	 10056  #  endif
; ..\component\Can\Implementation\Can.c	 10057    if (!CanHL_IsControllerInit(channel))
; ..\component\Can\Implementation\Can.c	 10058    { /* #50 Check controller is initialized */
; ..\component\Can\Implementation\Can.c	 10059      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10060    }
; ..\component\Can\Implementation\Can.c	 10061    else
; ..\component\Can\Implementation\Can.c	 10062  # endif
; ..\component\Can\Implementation\Can.c	 10063    {
; ..\component\Can\Implementation\Can.c	 10064      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10065      CanLL_GetStatusBegin(CAN_CHANNEL_CANPARA_ONLY); /* PRQA S 2987 */ /* MD_Can_EmptyFunction */
; ..\component\Can\Implementation\Can.c	 10066      /* #100 set logical state as return value */
; ..\component\Can\Implementation\Can.c	 10067      canReturnCode = (uint8)Can_GetLogStatus(channel);
; ..\component\Can\Implementation\Can.c	 10068      if ( CanLL_HwIsBusOff(channel) ) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	 10069      { /* #150 set BUSOFF - BUSOFF can only happen on first HW channel (with TX objects) */
; ..\component\Can\Implementation\Can.c	 10070        canReturnCode |= CAN_STATUS_BUSOFF;
; ..\component\Can\Implementation\Can.c	 10071      }
; ..\component\Can\Implementation\Can.c	 10072  # if defined(C_ENABLE_EXTENDED_STATUS) /* COV_CAN_EXTENDED_STATUS */
; ..\component\Can\Implementation\Can.c	 10073      {    
; ..\component\Can\Implementation\Can.c	 10074        if ( CanLL_HwIsPassive(channel) ) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	 10075        { /* #160 set Error Passive */
; ..\component\Can\Implementation\Can.c	 10076          canReturnCode |= CAN_STATUS_PASSIVE;
; ..\component\Can\Implementation\Can.c	 10077        }    
; ..\component\Can\Implementation\Can.c	 10078        if ( CanLL_HwIsWarning(channel) ) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	 10079        { /* #170 set Error Warning */
; ..\component\Can\Implementation\Can.c	 10080          canReturnCode |= CAN_STATUS_WARNING;
; ..\component\Can\Implementation\Can.c	 10081        }
; ..\component\Can\Implementation\Can.c	 10082      }
; ..\component\Can\Implementation\Can.c	 10083  # endif /* C_ENABLE_EXTENDED_STATUS */
; ..\component\Can\Implementation\Can.c	 10084    }
; ..\component\Can\Implementation\Can.c	 10085  
; ..\component\Can\Implementation\Can.c	 10086    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10087  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10088    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	 10089    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	 10090      Can_CallDetReportError(CAN_HW_ACCESS_ID, errorId);
; ..\component\Can\Implementation\Can.c	 10091    }
; ..\component\Can\Implementation\Can.c	 10092  # else
; ..\component\Can\Implementation\Can.c	 10093    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10094  # endif
; ..\component\Can\Implementation\Can.c	 10095  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10096    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10097  # endif
; ..\component\Can\Implementation\Can.c	 10098    return (uint8)canReturnCode;
; ..\component\Can\Implementation\Can.c	 10099  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	 10100  
; ..\component\Can\Implementation\Can.c	 10101  /****************************************************************************
; ..\component\Can\Implementation\Can.c	 10102  | NAME:             Can_GetControllerMode
; ..\component\Can\Implementation\Can.c	 10103  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10104  /*
; ..\component\Can\Implementation\Can.c	 10105  |<DataModelStart>| Can_GetControllerMode
; ..\component\Can\Implementation\Can.c	 10106  Relation_Context:
; ..\component\Can\Implementation\Can.c	 10107  CanGetStatus
; ..\component\Can\Implementation\Can.c	 10108  Relation:
; ..\component\Can\Implementation\Can.c	 10109  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	 10110  DevErrorDetect, Variant
; ..\component\Can\Implementation\Can.c	 10111  ChannelAmount
; ..\component\Can\Implementation\Can.c	 10112  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	 10113  Parameter_Data:
; ..\component\Can\Implementation\Can.c	 10114  Constrain:
; ..\component\Can\Implementation\Can.c	 10115  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	 10116  */
; ..\component\Can\Implementation\Can.c	 10117  /*!
; ..\component\Can\Implementation\Can.c	 10118   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	 10119   *
; ..\component\Can\Implementation\Can.c	 10120   *
; ..\component\Can\Implementation\Can.c	 10121   *
; ..\component\Can\Implementation\Can.c	 10122   *
; ..\component\Can\Implementation\Can.c	 10123   */
; ..\component\Can\Implementation\Can.c	 10124  V_DEF_FUNC(V_NONE, Std_ReturnType, CODE) Can_GetControllerMode( uint8 Controller, Can_ControllerStatePtrType ControllerModePtr )
; ..\component\Can\Implementation\Can.c	 10125  {
; ..\component\Can\Implementation\Can.c	 10126    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10127    Std_ReturnType canReturnCode;
; ..\component\Can\Implementation\Can.c	 10128    uint8 errorId;
; ..\component\Can\Implementation\Can.c	 10129    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	 10130    canReturnCode = E_NOT_OK; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	 10131    
; ..\component\Can\Implementation\Can.c	 10132    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10133  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10134    /* #10 Check if parameters are valid */
; ..\component\Can\Implementation\Can.c	 10135    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	 10136    { /* #20 Check Driver is initialized */
; ..\component\Can\Implementation\Can.c	 10137      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10138    }
; ..\component\Can\Implementation\Can.c	 10139    else
; ..\component\Can\Implementation\Can.c	 10140  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10141    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	 10142    {
; ..\component\Can\Implementation\Can.c	 10143      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10144    }
; ..\component\Can\Implementation\Can.c	 10145    else
; ..\component\Can\Implementation\Can.c	 10146  #  endif
; ..\component\Can\Implementation\Can.c	 10147  #  if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10148    if (Can_GetCanIfChannelId(channel) == kCanChannelNotUsed) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	 10149    {
; ..\component\Can\Implementation\Can.c	 10150      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10151    }
; ..\component\Can\Implementation\Can.c	 10152    else
; ..\component\Can\Implementation\Can.c	 10153  #  endif
; ..\component\Can\Implementation\Can.c	 10154    if (ControllerModePtr == NULL_PTR)
; ..\component\Can\Implementation\Can.c	 10155    {
; ..\component\Can\Implementation\Can.c	 10156      errorId = CAN_E_PARAM_POINTER;
; ..\component\Can\Implementation\Can.c	 10157    }
; ..\component\Can\Implementation\Can.c	 10158    else
; ..\component\Can\Implementation\Can.c	 10159  # endif
; ..\component\Can\Implementation\Can.c	 10160    {
; ..\component\Can\Implementation\Can.c	 10161      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10162      /* #30 get logical controller mode from state machine variable */
; ..\component\Can\Implementation\Can.c	 10163      if (!CanHL_IsControllerInit(channel))
; ..\component\Can\Implementation\Can.c	 10164      {
; ..\component\Can\Implementation\Can.c	 10165        *ControllerModePtr = CAN_CS_UNINIT; /* SBSW_CAN_HL51 */
; ..\component\Can\Implementation\Can.c	 10166      }
; ..\component\Can\Implementation\Can.c	 10167      else if (CanHL_IsStart(channel))
; ..\component\Can\Implementation\Can.c	 10168      {
; ..\component\Can\Implementation\Can.c	 10169        *ControllerModePtr = CAN_CS_STARTED; /* SBSW_CAN_HL51 */
; ..\component\Can\Implementation\Can.c	 10170      } 
; ..\component\Can\Implementation\Can.c	 10171      else if (CanHL_IsSleep(channel))
; ..\component\Can\Implementation\Can.c	 10172      {
; ..\component\Can\Implementation\Can.c	 10173        *ControllerModePtr = CAN_CS_SLEEP; /* SBSW_CAN_HL51 */
; ..\component\Can\Implementation\Can.c	 10174      }
; ..\component\Can\Implementation\Can.c	 10175      else /* default is:   if (CanHL_IsStop(channel)) */
; ..\component\Can\Implementation\Can.c	 10176      {
; ..\component\Can\Implementation\Can.c	 10177        *ControllerModePtr = CAN_CS_STOPPED; /* SBSW_CAN_HL51 */
; ..\component\Can\Implementation\Can.c	 10178      }
; ..\component\Can\Implementation\Can.c	 10179      canReturnCode = E_OK;
; ..\component\Can\Implementation\Can.c	 10180    }
; ..\component\Can\Implementation\Can.c	 10181    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10182  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10183    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	 10184    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	 10185      Can_CallDetReportError(CAN_GETCTR_MODE_ID, errorId);
; ..\component\Can\Implementation\Can.c	 10186    }
; ..\component\Can\Implementation\Can.c	 10187  # else
; ..\component\Can\Implementation\Can.c	 10188    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10189  # endif
; ..\component\Can\Implementation\Can.c	 10190  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10191    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10192  # endif
; ..\component\Can\Implementation\Can.c	 10193    return canReturnCode;
; ..\component\Can\Implementation\Can.c	 10194  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	 10195  
; ..\component\Can\Implementation\Can.c	 10196  /****************************************************************************
; ..\component\Can\Implementation\Can.c	 10197  | NAME:             Can_GetControllerErrorState
; ..\component\Can\Implementation\Can.c	 10198  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10199  /*
; ..\component\Can\Implementation\Can.c	 10200  |<DataModelStart>| Can_GetControllerErrorState
; ..\component\Can\Implementation\Can.c	 10201  Relation_Context:
; ..\component\Can\Implementation\Can.c	 10202  CanGetStatus
; ..\component\Can\Implementation\Can.c	 10203  Relation:
; ..\component\Can\Implementation\Can.c	 10204  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	 10205  DevErrorDetect, Variant
; ..\component\Can\Implementation\Can.c	 10206  ChannelAmount
; ..\component\Can\Implementation\Can.c	 10207  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	 10208  Parameter_Data:
; ..\component\Can\Implementation\Can.c	 10209  Constrain:
; ..\component\Can\Implementation\Can.c	 10210  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	 10211  */
; ..\component\Can\Implementation\Can.c	 10212  /*!
; ..\component\Can\Implementation\Can.c	 10213   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	 10214   *
; ..\component\Can\Implementation\Can.c	 10215   *
; ..\component\Can\Implementation\Can.c	 10216   *
; ..\component\Can\Implementation\Can.c	 10217   *
; ..\component\Can\Implementation\Can.c	 10218   *
; ..\component\Can\Implementation\Can.c	 10219   */
; ..\component\Can\Implementation\Can.c	 10220  V_DEF_FUNC(V_NONE, Std_ReturnType, CODE) Can_GetControllerErrorState( uint8 Controller, Can_ErrorStatePtrType ErrorStatePtr )
; ..\component\Can\Implementation\Can.c	 10221  {
; ..\component\Can\Implementation\Can.c	 10222    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10223    Std_ReturnType canReturnCode;
; ..\component\Can\Implementation\Can.c	 10224    uint8 errorId;
; ..\component\Can\Implementation\Can.c	 10225    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	 10226    canReturnCode = E_NOT_OK; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	 10227    
; ..\component\Can\Implementation\Can.c	 10228    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10229  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10230    /* #10 Check if parameter controller is valid and state is INIT */
; ..\component\Can\Implementation\Can.c	 10231    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	 10232    { /* Check Driver is initialized */
; ..\component\Can\Implementation\Can.c	 10233      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10234    }
; ..\component\Can\Implementation\Can.c	 10235    else
; ..\component\Can\Implementation\Can.c	 10236  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10237    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	 10238    {
; ..\component\Can\Implementation\Can.c	 10239      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10240    }
; ..\component\Can\Implementation\Can.c	 10241    else
; ..\component\Can\Implementation\Can.c	 10242  #  endif
; ..\component\Can\Implementation\Can.c	 10243  #  if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10244    if (Can_GetCanIfChannelId(channel) == kCanChannelNotUsed) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	 10245    {
; ..\component\Can\Implementation\Can.c	 10246      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10247    }
; ..\component\Can\Implementation\Can.c	 10248    else
; ..\component\Can\Implementation\Can.c	 10249  #  endif
; ..\component\Can\Implementation\Can.c	 10250    if (!CanHL_IsControllerInit(channel))
; ..\component\Can\Implementation\Can.c	 10251    { /* Check controller is initialized */
; ..\component\Can\Implementation\Can.c	 10252      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10253    }
; ..\component\Can\Implementation\Can.c	 10254    else
; ..\component\Can\Implementation\Can.c	 10255    if (ErrorStatePtr == NULL_PTR)
; ..\component\Can\Implementation\Can.c	 10256    {
; ..\component\Can\Implementation\Can.c	 10257      errorId = CAN_E_PARAM_POINTER;
; ..\component\Can\Implementation\Can.c	 10258    }
; ..\component\Can\Implementation\Can.c	 10259    else
; ..\component\Can\Implementation\Can.c	 10260  # endif
; ..\component\Can\Implementation\Can.c	 10261    {
; ..\component\Can\Implementation\Can.c	 10262      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10263      CanLL_GetStatusBegin(CAN_CHANNEL_CANPARA_ONLY); /* PRQA S 2987 */ /* MD_Can_EmptyFunction */
; ..\component\Can\Implementation\Can.c	 10264      if ( CanLL_HwIsBusOff(channel) ) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	 10265      { /* #40 set BUSOFF */
; ..\component\Can\Implementation\Can.c	 10266        *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF; /* SBSW_CAN_HL52 */
; ..\component\Can\Implementation\Can.c	 10267      } 
; ..\component\Can\Implementation\Can.c	 10268  # if defined(C_ENABLE_EXTENDED_STATUS) /* COV_CAN_EXTENDED_STATUS */
; ..\component\Can\Implementation\Can.c	 10269      else if ( CanLL_HwIsPassive(channel) ) /* COV_CAN_HARDWARE_FAILURE */
; ..\component\Can\Implementation\Can.c	 10270      { /* #50 set Error Passive */
; ..\component\Can\Implementation\Can.c	 10271        *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE; /* SBSW_CAN_HL52 */
; ..\component\Can\Implementation\Can.c	 10272      }
; ..\component\Can\Implementation\Can.c	 10273  # endif /* C_ENABLE_EXTENDED_STATUS */
; ..\component\Can\Implementation\Can.c	 10274      else
; ..\component\Can\Implementation\Can.c	 10275      { /* #60 default return is ACTIVE */
; ..\component\Can\Implementation\Can.c	 10276        *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE; /* SBSW_CAN_HL52 */
; ..\component\Can\Implementation\Can.c	 10277      }
; ..\component\Can\Implementation\Can.c	 10278      canReturnCode = E_OK;
; ..\component\Can\Implementation\Can.c	 10279    }
; ..\component\Can\Implementation\Can.c	 10280  
; ..\component\Can\Implementation\Can.c	 10281    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10282  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10283    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	 10284    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	 10285      Can_CallDetReportError(CAN_GETCTR_STATE_ID, errorId);
; ..\component\Can\Implementation\Can.c	 10286    }
; ..\component\Can\Implementation\Can.c	 10287  # else
; ..\component\Can\Implementation\Can.c	 10288    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10289  # endif
; ..\component\Can\Implementation\Can.c	 10290  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10291    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10292  # endif
; ..\component\Can\Implementation\Can.c	 10293    return canReturnCode;
; ..\component\Can\Implementation\Can.c	 10294  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	 10295  
; ..\component\Can\Implementation\Can.c	 10296  /****************************************************************************
; ..\component\Can\Implementation\Can.c	 10297  | NAME:             Can_GetControllerTxErrorCounter
; ..\component\Can\Implementation\Can.c	 10298  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10299  /*
; ..\component\Can\Implementation\Can.c	 10300  |<DataModelStart>| Can_GetControllerTxErrorCounter
; ..\component\Can\Implementation\Can.c	 10301  Relation_Context:
; ..\component\Can\Implementation\Can.c	 10302  CanGetStatus
; ..\component\Can\Implementation\Can.c	 10303  Relation:
; ..\component\Can\Implementation\Can.c	 10304  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	 10305  DevErrorDetect, Variant
; ..\component\Can\Implementation\Can.c	 10306  ChannelAmount
; ..\component\Can\Implementation\Can.c	 10307  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	 10308  Parameter_Data:
; ..\component\Can\Implementation\Can.c	 10309  Constrain:
; ..\component\Can\Implementation\Can.c	 10310  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	 10311  */
; ..\component\Can\Implementation\Can.c	 10312  /*!
; ..\component\Can\Implementation\Can.c	 10313   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	 10314   *
; ..\component\Can\Implementation\Can.c	 10315   *
; ..\component\Can\Implementation\Can.c	 10316   *
; ..\component\Can\Implementation\Can.c	 10317   */
; ..\component\Can\Implementation\Can.c	 10318  V_DEF_FUNC(V_NONE, Std_ReturnType, CODE) Can_GetControllerTxErrorCounter( uint8 Controller, Can_ErrorCounterPtrType TxErrorCounterPtr )
; ..\component\Can\Implementation\Can.c	 10319  {
; ..\component\Can\Implementation\Can.c	 10320    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10321    Std_ReturnType canReturnCode;
; ..\component\Can\Implementation\Can.c	 10322    uint8 errorId;
; ..\component\Can\Implementation\Can.c	 10323    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	 10324    canReturnCode = E_NOT_OK; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	 10325    
; ..\component\Can\Implementation\Can.c	 10326    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10327  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10328    /* #10 Check if parameter controller is valid and state is INIT */
; ..\component\Can\Implementation\Can.c	 10329    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	 10330    { /* Check Driver is initialized */
; ..\component\Can\Implementation\Can.c	 10331      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10332    }
; ..\component\Can\Implementation\Can.c	 10333    else
; ..\component\Can\Implementation\Can.c	 10334  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10335    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	 10336    {
; ..\component\Can\Implementation\Can.c	 10337      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10338    }
; ..\component\Can\Implementation\Can.c	 10339    else
; ..\component\Can\Implementation\Can.c	 10340  #  endif
; ..\component\Can\Implementation\Can.c	 10341  #  if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10342    if (Can_GetCanIfChannelId(channel) == kCanChannelNotUsed) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	 10343    {
; ..\component\Can\Implementation\Can.c	 10344      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10345    }
; ..\component\Can\Implementation\Can.c	 10346    else
; ..\component\Can\Implementation\Can.c	 10347  #  endif
; ..\component\Can\Implementation\Can.c	 10348    if (!CanHL_IsControllerInit(channel))
; ..\component\Can\Implementation\Can.c	 10349    { /* Check controller is initialized */
; ..\component\Can\Implementation\Can.c	 10350      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10351    }
; ..\component\Can\Implementation\Can.c	 10352    else
; ..\component\Can\Implementation\Can.c	 10353    if (TxErrorCounterPtr == NULL_PTR)
; ..\component\Can\Implementation\Can.c	 10354    {
; ..\component\Can\Implementation\Can.c	 10355      errorId = CAN_E_PARAM_POINTER;
; ..\component\Can\Implementation\Can.c	 10356    }
; ..\component\Can\Implementation\Can.c	 10357    else
; ..\component\Can\Implementation\Can.c	 10358  # endif
; ..\component\Can\Implementation\Can.c	 10359    {
; ..\component\Can\Implementation\Can.c	 10360      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10361      /* #40 get error counter from hardware */
; ..\component\Can\Implementation\Can.c	 10362  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10363      *TxErrorCounterPtr = CanTxActualErrorCounter(); /* SBSW_CAN_HL53 */
; ..\component\Can\Implementation\Can.c	 10364  # else
; ..\component\Can\Implementation\Can.c	 10365      *TxErrorCounterPtr = CanTxActualErrorCounter(channel); /* SBSW_CAN_HL53 */
; ..\component\Can\Implementation\Can.c	 10366  # endif
; ..\component\Can\Implementation\Can.c	 10367      canReturnCode = E_OK;
; ..\component\Can\Implementation\Can.c	 10368    }
; ..\component\Can\Implementation\Can.c	 10369  
; ..\component\Can\Implementation\Can.c	 10370    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10371  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10372    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	 10373    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	 10374      Can_CallDetReportError(CAN_GETCTR_TXCNT_ID, errorId);
; ..\component\Can\Implementation\Can.c	 10375    }
; ..\component\Can\Implementation\Can.c	 10376  # else
; ..\component\Can\Implementation\Can.c	 10377    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10378  # endif
; ..\component\Can\Implementation\Can.c	 10379  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10380    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10381  # endif
; ..\component\Can\Implementation\Can.c	 10382    return canReturnCode;
; ..\component\Can\Implementation\Can.c	 10383  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	 10384  
; ..\component\Can\Implementation\Can.c	 10385  /****************************************************************************
; ..\component\Can\Implementation\Can.c	 10386  | NAME:             Can_GetControllerRxErrorCounter
; ..\component\Can\Implementation\Can.c	 10387  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10388  /*
; ..\component\Can\Implementation\Can.c	 10389  |<DataModelStart>| Can_GetControllerRxErrorCounter
; ..\component\Can\Implementation\Can.c	 10390  Relation_Context:
; ..\component\Can\Implementation\Can.c	 10391  CanGetStatus
; ..\component\Can\Implementation\Can.c	 10392  Relation:
; ..\component\Can\Implementation\Can.c	 10393  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	 10394  DevErrorDetect, Variant
; ..\component\Can\Implementation\Can.c	 10395  ChannelAmount
; ..\component\Can\Implementation\Can.c	 10396  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	 10397  Parameter_Data:
; ..\component\Can\Implementation\Can.c	 10398  Constrain:
; ..\component\Can\Implementation\Can.c	 10399  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	 10400  */
; ..\component\Can\Implementation\Can.c	 10401  /*!
; ..\component\Can\Implementation\Can.c	 10402   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	 10403   *
; ..\component\Can\Implementation\Can.c	 10404   *
; ..\component\Can\Implementation\Can.c	 10405   *
; ..\component\Can\Implementation\Can.c	 10406   */
; ..\component\Can\Implementation\Can.c	 10407  V_DEF_FUNC(V_NONE, Std_ReturnType, CODE) Can_GetControllerRxErrorCounter( uint8 Controller, Can_ErrorCounterPtrType RxErrorCounterPtr )
; ..\component\Can\Implementation\Can.c	 10408  {
; ..\component\Can\Implementation\Can.c	 10409    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10410    Std_ReturnType canReturnCode;
; ..\component\Can\Implementation\Can.c	 10411    uint8 errorId;
; ..\component\Can\Implementation\Can.c	 10412    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	 10413    canReturnCode = E_NOT_OK; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	 10414    
; ..\component\Can\Implementation\Can.c	 10415    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10416  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10417    /* #10 Check if parameter controller is valid and state is INIT */
; ..\component\Can\Implementation\Can.c	 10418    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	 10419    { /* Check Driver is initialized */
; ..\component\Can\Implementation\Can.c	 10420      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10421    }
; ..\component\Can\Implementation\Can.c	 10422    else
; ..\component\Can\Implementation\Can.c	 10423  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10424    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	 10425    {
; ..\component\Can\Implementation\Can.c	 10426      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10427    }
; ..\component\Can\Implementation\Can.c	 10428    else
; ..\component\Can\Implementation\Can.c	 10429  #  endif
; ..\component\Can\Implementation\Can.c	 10430  #  if (CAN_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10431    if (Can_GetCanIfChannelId(channel) == kCanChannelNotUsed) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	 10432    {
; ..\component\Can\Implementation\Can.c	 10433      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10434    }
; ..\component\Can\Implementation\Can.c	 10435    else
; ..\component\Can\Implementation\Can.c	 10436  #  endif
; ..\component\Can\Implementation\Can.c	 10437    if (!CanHL_IsControllerInit(channel))
; ..\component\Can\Implementation\Can.c	 10438    { /* Check controller is initialized */
; ..\component\Can\Implementation\Can.c	 10439      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10440    }
; ..\component\Can\Implementation\Can.c	 10441    else
; ..\component\Can\Implementation\Can.c	 10442    if (RxErrorCounterPtr == NULL_PTR)
; ..\component\Can\Implementation\Can.c	 10443    {
; ..\component\Can\Implementation\Can.c	 10444      errorId = CAN_E_PARAM_POINTER;
; ..\component\Can\Implementation\Can.c	 10445    }
; ..\component\Can\Implementation\Can.c	 10446    else
; ..\component\Can\Implementation\Can.c	 10447  # endif
; ..\component\Can\Implementation\Can.c	 10448    {
; ..\component\Can\Implementation\Can.c	 10449      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10450      /* #40 get error counter from hardware */
; ..\component\Can\Implementation\Can.c	 10451  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10452      *RxErrorCounterPtr = CanRxActualErrorCounter(); /* SBSW_CAN_HL54 */
; ..\component\Can\Implementation\Can.c	 10453  # else
; ..\component\Can\Implementation\Can.c	 10454      *RxErrorCounterPtr = CanRxActualErrorCounter(channel); /* SBSW_CAN_HL54 */
; ..\component\Can\Implementation\Can.c	 10455  # endif
; ..\component\Can\Implementation\Can.c	 10456      canReturnCode = E_OK;
; ..\component\Can\Implementation\Can.c	 10457    }
; ..\component\Can\Implementation\Can.c	 10458  
; ..\component\Can\Implementation\Can.c	 10459    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10460  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10461    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	 10462    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	 10463      Can_CallDetReportError(CAN_GETCTR_RXCNT_ID, errorId);
; ..\component\Can\Implementation\Can.c	 10464    }
; ..\component\Can\Implementation\Can.c	 10465  # else
; ..\component\Can\Implementation\Can.c	 10466    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10467  # endif
; ..\component\Can\Implementation\Can.c	 10468  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10469    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10470  # endif
; ..\component\Can\Implementation\Can.c	 10471    return canReturnCode;
; ..\component\Can\Implementation\Can.c	 10472  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Can\Implementation\Can.c	 10473  
; ..\component\Can\Implementation\Can.c	 10474  #endif
; ..\component\Can\Implementation\Can.c	 10475  
; ..\component\Can\Implementation\Can.c	 10476  #if defined(C_ENABLE_MIRROR_MODE)
; ..\component\Can\Implementation\Can.c	 10477  /****************************************************************************
; ..\component\Can\Implementation\Can.c	 10478  | NAME:             Can_SetMirrorMode
; ..\component\Can\Implementation\Can.c	 10479  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10480  /*
; ..\component\Can\Implementation\Can.c	 10481  |<DataModelStart>| Can_SetMirrorMode
; ..\component\Can\Implementation\Can.c	 10482  Relation_Context:
; ..\component\Can\Implementation\Can.c	 10483  MirrorMode
; ..\component\Can\Implementation\Can.c	 10484  Relation:
; ..\component\Can\Implementation\Can.c	 10485  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	 10486  ChannelAmount
; ..\component\Can\Implementation\Can.c	 10487  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	 10488  Parameter_Data:
; ..\component\Can\Implementation\Can.c	 10489  Constrain:
; ..\component\Can\Implementation\Can.c	 10490  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	 10491  */
; ..\component\Can\Implementation\Can.c	 10492  /*!
; ..\component\Can\Implementation\Can.c	 10493   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	 10494   *
; ..\component\Can\Implementation\Can.c	 10495   *
; ..\component\Can\Implementation\Can.c	 10496   *
; ..\component\Can\Implementation\Can.c	 10497   *
; ..\component\Can\Implementation\Can.c	 10498   */
; ..\component\Can\Implementation\Can.c	 10499  V_DEF_FUNC(V_NONE, void, CODE) Can_SetMirrorMode( uint8 Controller, CddMirror_MirrorModeType mirrorMode )
; ..\component\Can\Implementation\Can.c	 10500  {
; ..\component\Can\Implementation\Can.c	 10501    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10502    uint8 errorId;
; ..\component\Can\Implementation\Can.c	 10503    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	 10504    
; ..\component\Can\Implementation\Can.c	 10505    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10506  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10507    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	 10508    { /* #10 Check Driver is initialized */
; ..\component\Can\Implementation\Can.c	 10509      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10510    }
; ..\component\Can\Implementation\Can.c	 10511    else
; ..\component\Can\Implementation\Can.c	 10512  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10513    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	 10514    { /* #20 Check parameter controller is in range */
; ..\component\Can\Implementation\Can.c	 10515      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10516    }
; ..\component\Can\Implementation\Can.c	 10517    else
; ..\component\Can\Implementation\Can.c	 10518  #  endif
; ..\component\Can\Implementation\Can.c	 10519  # endif
; ..\component\Can\Implementation\Can.c	 10520    { /* #30 set mirror mode for given controller */
; ..\component\Can\Implementation\Can.c	 10521      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10522      Can_SetMirrorModeState(channel, mirrorMode); /* SBSW_CAN_HL20 */
; ..\component\Can\Implementation\Can.c	 10523    }
; ..\component\Can\Implementation\Can.c	 10524  
; ..\component\Can\Implementation\Can.c	 10525    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10526  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10527    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	 10528    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	 10529      Can_CallDetReportError(CAN_HW_ACCESS_ID, errorId);
; ..\component\Can\Implementation\Can.c	 10530    }
; ..\component\Can\Implementation\Can.c	 10531  # else
; ..\component\Can\Implementation\Can.c	 10532    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10533  # endif
; ..\component\Can\Implementation\Can.c	 10534  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10535    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10536  # endif
; ..\component\Can\Implementation\Can.c	 10537  }
; ..\component\Can\Implementation\Can.c	 10538  #endif
; ..\component\Can\Implementation\Can.c	 10539  
; ..\component\Can\Implementation\Can.c	 10540  #if defined(C_ENABLE_SILENT_MODE)
; ..\component\Can\Implementation\Can.c	 10541  /****************************************************************************
; ..\component\Can\Implementation\Can.c	 10542  | NAME:             Can_SetSilentMode
; ..\component\Can\Implementation\Can.c	 10543  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10544  /*
; ..\component\Can\Implementation\Can.c	 10545  |<DataModelStart>| Can_SetSilentMode
; ..\component\Can\Implementation\Can.c	 10546  Relation_Context:
; ..\component\Can\Implementation\Can.c	 10547  SilentMode
; ..\component\Can\Implementation\Can.c	 10548  Relation:
; ..\component\Can\Implementation\Can.c	 10549  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	 10550  ChannelAmount
; ..\component\Can\Implementation\Can.c	 10551  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	 10552  Parameter_Data:
; ..\component\Can\Implementation\Can.c	 10553  Constrain:
; ..\component\Can\Implementation\Can.c	 10554  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	 10555  */
; ..\component\Can\Implementation\Can.c	 10556  /*!
; ..\component\Can\Implementation\Can.c	 10557   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	 10558   *
; ..\component\Can\Implementation\Can.c	 10559   *
; ..\component\Can\Implementation\Can.c	 10560   *
; ..\component\Can\Implementation\Can.c	 10561   *
; ..\component\Can\Implementation\Can.c	 10562   */
; ..\component\Can\Implementation\Can.c	 10563  V_DEF_FUNC(V_NONE, Std_ReturnType, CODE) Can_SetSilentMode( uint8 Controller, Can_SilentModeType silentMode )
; ..\component\Can\Implementation\Can.c	 10564  {
; ..\component\Can\Implementation\Can.c	 10565    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10566    uint8 errorId;
; ..\component\Can\Implementation\Can.c	 10567    Std_ReturnType retval;
; ..\component\Can\Implementation\Can.c	 10568    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	 10569    retval = E_NOT_OK; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\Can\Implementation\Can.c	 10570    
; ..\component\Can\Implementation\Can.c	 10571    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10572  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10573    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	 10574    { /* #10 Check Driver is initialized */
; ..\component\Can\Implementation\Can.c	 10575      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10576    }
; ..\component\Can\Implementation\Can.c	 10577    else
; ..\component\Can\Implementation\Can.c	 10578  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10579    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	 10580    { /* #20 Check parameter controller is in range */
; ..\component\Can\Implementation\Can.c	 10581      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10582    }
; ..\component\Can\Implementation\Can.c	 10583    else
; ..\component\Can\Implementation\Can.c	 10584  #  endif
; ..\component\Can\Implementation\Can.c	 10585  # endif
; ..\component\Can\Implementation\Can.c	 10586    { /* #30 set silent mode for given controller */
; ..\component\Can\Implementation\Can.c	 10587      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10588      Can_SetSilentModeState(channel, silentMode); /* SBSW_CAN_HL20 */
; ..\component\Can\Implementation\Can.c	 10589      retval = E_OK;
; ..\component\Can\Implementation\Can.c	 10590    }
; ..\component\Can\Implementation\Can.c	 10591  
; ..\component\Can\Implementation\Can.c	 10592    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10593  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10594    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	 10595    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	 10596      Can_CallDetReportError(CAN_HW_ACCESS_ID, errorId);
; ..\component\Can\Implementation\Can.c	 10597    }
; ..\component\Can\Implementation\Can.c	 10598  # else
; ..\component\Can\Implementation\Can.c	 10599    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10600  # endif
; ..\component\Can\Implementation\Can.c	 10601  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10602    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10603  # endif
; ..\component\Can\Implementation\Can.c	 10604    return retval;
; ..\component\Can\Implementation\Can.c	 10605  }
; ..\component\Can\Implementation\Can.c	 10606  #endif
; ..\component\Can\Implementation\Can.c	 10607  
; ..\component\Can\Implementation\Can.c	 10608  #if defined(C_ENABLE_CAN_RAM_CHECK_EXTENDED)
; ..\component\Can\Implementation\Can.c	 10609  /****************************************************************************
; ..\component\Can\Implementation\Can.c	 10610  | NAME:             Can_RamCheckExecute
; ..\component\Can\Implementation\Can.c	 10611  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10612  /*
; ..\component\Can\Implementation\Can.c	 10613  |<DataModelStart>| Can_RamCheckExecute
; ..\component\Can\Implementation\Can.c	 10614  Relation_Context:
; ..\component\Can\Implementation\Can.c	 10615  Relation:
; ..\component\Can\Implementation\Can.c	 10616  RamCheck, DevErrorDetect, OneChOpt, ChannelAmount
; ..\component\Can\Implementation\Can.c	 10617  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	 10618  Parameter_Data:
; ..\component\Can\Implementation\Can.c	 10619  Constrain:
; ..\component\Can\Implementation\Can.c	 10620  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	 10621  */
; ..\component\Can\Implementation\Can.c	 10622  /*!
; ..\component\Can\Implementation\Can.c	 10623   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	 10624   *
; ..\component\Can\Implementation\Can.c	 10625   *
; ..\component\Can\Implementation\Can.c	 10626   *
; ..\component\Can\Implementation\Can.c	 10627   *
; ..\component\Can\Implementation\Can.c	 10628   *
; ..\component\Can\Implementation\Can.c	 10629   */
; ..\component\Can\Implementation\Can.c	 10630  V_DEF_FUNC(V_NONE, void, CODE) Can_RamCheckExecute( uint8 Controller )
; ..\component\Can\Implementation\Can.c	 10631  {
; ..\component\Can\Implementation\Can.c	 10632    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10633    uint8 errorId;
; ..\component\Can\Implementation\Can.c	 10634    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	 10635    
; ..\component\Can\Implementation\Can.c	 10636    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10637  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10638    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	 10639    { /* #10 Check Driver is initialized */
; ..\component\Can\Implementation\Can.c	 10640      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10641    }
; ..\component\Can\Implementation\Can.c	 10642    else
; ..\component\Can\Implementation\Can.c	 10643  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10644    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	 10645    { /* #20 Check parameter controller is in range */
; ..\component\Can\Implementation\Can.c	 10646      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10647    }
; ..\component\Can\Implementation\Can.c	 10648    else
; ..\component\Can\Implementation\Can.c	 10649  #  endif
; ..\component\Can\Implementation\Can.c	 10650  # endif
; ..\component\Can\Implementation\Can.c	 10651    { /* #30 Do RamCheck by execute reinitialization with activated check */
; ..\component\Can\Implementation\Can.c	 10652      uint8 transitionState;
; ..\component\Can\Implementation\Can.c	 10653      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10654      transitionState = CanHL_ModeTransition(CAN_CHANNEL_CANPARA_FIRST kCanModeStopReinit, kCanFinishBusOffRecovery, kCanExecuteRamCheck);
; ..\component\Can\Implementation\Can.c	 10655      if (transitionState == kCanOk) /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	 10656      { /* #40 check transition STOP (Reinit) is successful */
; ..\component\Can\Implementation\Can.c	 10657        Can_SetLogStatus(channel, Can_GetLogStatus(channel) | CAN_STATUS_STOP); /* STOP mode reached */ /* SBSW_CAN_HL02 */
; ..\component\Can\Implementation\Can.c	 10658      }
; ..\component\Can\Implementation\Can.c	 10659    }
; ..\component\Can\Implementation\Can.c	 10660  
; ..\component\Can\Implementation\Can.c	 10661    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10662  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10663    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	 10664    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	 10665      Can_CallDetReportError(CAN_HW_ACCESS_ID, errorId);
; ..\component\Can\Implementation\Can.c	 10666    }
; ..\component\Can\Implementation\Can.c	 10667  # else
; ..\component\Can\Implementation\Can.c	 10668    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10669  # endif
; ..\component\Can\Implementation\Can.c	 10670  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10671    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10672  # endif
; ..\component\Can\Implementation\Can.c	 10673  }
; ..\component\Can\Implementation\Can.c	 10674  
; ..\component\Can\Implementation\Can.c	 10675  /****************************************************************************
; ..\component\Can\Implementation\Can.c	 10676  | NAME:             Can_RamCheckEnableMailbox
; ..\component\Can\Implementation\Can.c	 10677  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10678  /*
; ..\component\Can\Implementation\Can.c	 10679  |<DataModelStart>| Can_RamCheckEnableMailbox
; ..\component\Can\Implementation\Can.c	 10680  Relation_Context:
; ..\component\Can\Implementation\Can.c	 10681  Relation:
; ..\component\Can\Implementation\Can.c	 10682  RamCheck, DevErrorDetect
; ..\component\Can\Implementation\Can.c	 10683  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	 10684  Parameter_Data:
; ..\component\Can\Implementation\Can.c	 10685  Constrain:
; ..\component\Can\Implementation\Can.c	 10686  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	 10687  */
; ..\component\Can\Implementation\Can.c	 10688  /*!
; ..\component\Can\Implementation\Can.c	 10689   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	 10690   *
; ..\component\Can\Implementation\Can.c	 10691   *
; ..\component\Can\Implementation\Can.c	 10692   *
; ..\component\Can\Implementation\Can.c	 10693   *
; ..\component\Can\Implementation\Can.c	 10694   */
; ..\component\Can\Implementation\Can.c	 10695  V_DEF_FUNC(V_NONE, void, CODE) Can_RamCheckEnableMailbox( Can_HwHandleType htrh )
; ..\component\Can\Implementation\Can.c	 10696  {
; ..\component\Can\Implementation\Can.c	 10697    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10698    uint8 errorId;
; ..\component\Can\Implementation\Can.c	 10699    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	 10700    
; ..\component\Can\Implementation\Can.c	 10701    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10702  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10703    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	 10704    { /* #10 Check Driver is initialized */
; ..\component\Can\Implementation\Can.c	 10705      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10706    }
; ..\component\Can\Implementation\Can.c	 10707    else
; ..\component\Can\Implementation\Can.c	 10708    if (htrh >= Can_GetSizeOfMailbox()) { /* CM_CAN_HL28 */
; ..\component\Can\Implementation\Can.c	 10709      errorId = CAN_E_PARAM_HANDLE;
; ..\component\Can\Implementation\Can.c	 10710    }
; ..\component\Can\Implementation\Can.c	 10711    else
; ..\component\Can\Implementation\Can.c	 10712  # endif
; ..\component\Can\Implementation\Can.c	 10713    {
; ..\component\Can\Implementation\Can.c	 10714      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10715      /* #15 disable controller to force reinitialization afterwards in Can_RamCheckEnableController() */
; ..\component\Can\Implementation\Can.c	 10716      Can_SetLogStatus(Can_GetMailboxController(htrh), CAN_DEACTIVATE_CONTROLLER); /* SBSW_CAN_HL40 */
; ..\component\Can\Implementation\Can.c	 10717      /* #20 reactivate mailbox */
; ..\component\Can\Implementation\Can.c	 10718      Can_SetMailboxState(htrh, kCanOk); /* SBSW_CAN_HL34 */
; ..\component\Can\Implementation\Can.c	 10719    }
; ..\component\Can\Implementation\Can.c	 10720  
; ..\component\Can\Implementation\Can.c	 10721    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10722  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10723    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	 10724    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	 10725      Can_CallDetReportError(CAN_HW_ACCESS_ID, errorId);
; ..\component\Can\Implementation\Can.c	 10726    }
; ..\component\Can\Implementation\Can.c	 10727  # else
; ..\component\Can\Implementation\Can.c	 10728    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10729  # endif
; ..\component\Can\Implementation\Can.c	 10730  }
; ..\component\Can\Implementation\Can.c	 10731  
; ..\component\Can\Implementation\Can.c	 10732  /****************************************************************************
; ..\component\Can\Implementation\Can.c	 10733  | NAME:             Can_RamCheckEnableController
; ..\component\Can\Implementation\Can.c	 10734  ****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10735  /*
; ..\component\Can\Implementation\Can.c	 10736  |<DataModelStart>| Can_RamCheckEnableController
; ..\component\Can\Implementation\Can.c	 10737  Relation_Context:
; ..\component\Can\Implementation\Can.c	 10738  RamCheck
; ..\component\Can\Implementation\Can.c	 10739  Relation:
; ..\component\Can\Implementation\Can.c	 10740  DevErrorDetect, OneChOpt
; ..\component\Can\Implementation\Can.c	 10741  ChannelAmount
; ..\component\Can\Implementation\Can.c	 10742  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	 10743  Parameter_Data:
; ..\component\Can\Implementation\Can.c	 10744  Constrain:
; ..\component\Can\Implementation\Can.c	 10745  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	 10746  */
; ..\component\Can\Implementation\Can.c	 10747  /*!
; ..\component\Can\Implementation\Can.c	 10748   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	 10749   *
; ..\component\Can\Implementation\Can.c	 10750   *
; ..\component\Can\Implementation\Can.c	 10751   *
; ..\component\Can\Implementation\Can.c	 10752   *
; ..\component\Can\Implementation\Can.c	 10753   *
; ..\component\Can\Implementation\Can.c	 10754   *
; ..\component\Can\Implementation\Can.c	 10755   */
; ..\component\Can\Implementation\Can.c	 10756  V_DEF_FUNC(V_NONE, void, CODE) Can_RamCheckEnableController( uint8 Controller )
; ..\component\Can\Implementation\Can.c	 10757  {
; ..\component\Can\Implementation\Can.c	 10758    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10759    uint8 errorId;
; ..\component\Can\Implementation\Can.c	 10760    errorId = CAN_E_NO_ERROR;
; ..\component\Can\Implementation\Can.c	 10761    
; ..\component\Can\Implementation\Can.c	 10762    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10763  # if (CAN_DEV_ERROR_DETECT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10764    if (canConfigInitFlag == CAN_STATUS_UNINIT)
; ..\component\Can\Implementation\Can.c	 10765    { /* #10 Check Driver is initialized */
; ..\component\Can\Implementation\Can.c	 10766      errorId = CAN_E_UNINIT;
; ..\component\Can\Implementation\Can.c	 10767    }
; ..\component\Can\Implementation\Can.c	 10768    else
; ..\component\Can\Implementation\Can.c	 10769  #  if !defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10770    if (channel >= kCanNumberOfChannels) /* CM_CAN_HL01 */
; ..\component\Can\Implementation\Can.c	 10771    { /* #20 Check parameter controller is in range */
; ..\component\Can\Implementation\Can.c	 10772      errorId = CAN_E_PARAM_CONTROLLER;
; ..\component\Can\Implementation\Can.c	 10773    }
; ..\component\Can\Implementation\Can.c	 10774    else
; ..\component\Can\Implementation\Can.c	 10775  #  endif
; ..\component\Can\Implementation\Can.c	 10776  # endif
; ..\component\Can\Implementation\Can.c	 10777    {
; ..\component\Can\Implementation\Can.c	 10778      /* ----- Implementation ----------------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10779      /* #30 activate controller only when currently disabled */
; ..\component\Can\Implementation\Can.c	 10780      if ( (Can_GetLogStatus(channel) & CAN_DEACTIVATE_CONTROLLER) == CAN_DEACTIVATE_CONTROLLER ) /* COV_CAN_RAM_CHECK_NO_STIMULATION */
; ..\component\Can\Implementation\Can.c	 10781      {
; ..\component\Can\Implementation\Can.c	 10782        uint8 transitionState;
; ..\component\Can\Implementation\Can.c	 10783        /* #40 re-initialize to activate mailboxes and controller after RAM check issue */
; ..\component\Can\Implementation\Can.c	 10784        Can_SetLogStatus(channel, Can_GetLogStatus(channel) & (uint8)(~(CAN_DEACTIVATE_CONTROLLER))); /* SBSW_CAN_HL02 */
; ..\component\Can\Implementation\Can.c	 10785        transitionState = CanHL_ModeTransition(CAN_CHANNEL_CANPARA_FIRST kCanModeStopReinit, kCanFinishBusOffRecovery, kCanSuppressRamCheck);
; ..\component\Can\Implementation\Can.c	 10786        if (transitionState == kCanOk) /* COV_CAN_TRANSITION_REQUEST */
; ..\component\Can\Implementation\Can.c	 10787        { /* #40 check transition STOP (Reinit) is successful */
; ..\component\Can\Implementation\Can.c	 10788          Can_SetLogStatus(channel, Can_GetLogStatus(channel) | CAN_STATUS_STOP); /* STOP mode reached */ /* SBSW_CAN_HL02 */
; ..\component\Can\Implementation\Can.c	 10789        }
; ..\component\Can\Implementation\Can.c	 10790      }
; ..\component\Can\Implementation\Can.c	 10791    }
; ..\component\Can\Implementation\Can.c	 10792  
; ..\component\Can\Implementation\Can.c	 10793    /* ----- Development Error Report --------------------------------------- */
; ..\component\Can\Implementation\Can.c	 10794  # if (CAN_DEV_ERROR_REPORT == STD_ON)
; ..\component\Can\Implementation\Can.c	 10795    if (errorId != CAN_E_NO_ERROR)
; ..\component\Can\Implementation\Can.c	 10796    { /* Throw DET if an error detected before */
; ..\component\Can\Implementation\Can.c	 10797      Can_CallDetReportError(CAN_HW_ACCESS_ID, errorId);
; ..\component\Can\Implementation\Can.c	 10798    }
; ..\component\Can\Implementation\Can.c	 10799  # else
; ..\component\Can\Implementation\Can.c	 10800    CAN_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10801  # endif
; ..\component\Can\Implementation\Can.c	 10802  # if defined( C_SINGLE_RECEIVE_CHANNEL )
; ..\component\Can\Implementation\Can.c	 10803    CAN_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10804  # endif
; ..\component\Can\Implementation\Can.c	 10805  }
; ..\component\Can\Implementation\Can.c	 10806  #endif
; ..\component\Can\Implementation\Can.c	 10807  
; ..\component\Can\Implementation\Can.c	 10808  
; ..\component\Can\Implementation\Can.c	 10809  
; ..\component\Can\Implementation\Can.c	 10810  # if defined( C_ENABLE_ISR_MANDATORY )  /* ISR necessary; no pure polling configuration */
; ..\component\Can\Implementation\Can.c	 10811  
; ..\component\Can\Implementation\Can.c	 10812  /* **************************************************************************
; ..\component\Can\Implementation\Can.c	 10813  | NAME:             CanInterrupt
; ..\component\Can\Implementation\Can.c	 10814  | CALLED BY:        CanIsr_<physicalChannelIndex>()
; ..\component\Can\Implementation\Can.c	 10815  | PRECONDITIONS:
; ..\component\Can\Implementation\Can.c	 10816  | INPUT PARAMETERS: canHwChannel
; ..\component\Can\Implementation\Can.c	 10817  | RETURN VALUES:    none
; ..\component\Can\Implementation\Can.c	 10818  | DESCRIPTION:      Interrupt service functions according to the CAN controller
; ..\component\Can\Implementation\Can.c	 10819  |                   interrupt structure
; ..\component\Can\Implementation\Can.c	 10820  |                   - check for the interrupt reason ( interrupt source )
; ..\component\Can\Implementation\Can.c	 10821  |                   - work appropriate interrupt:
; ..\component\Can\Implementation\Can.c	 10822  |                     + status/error interrupt (BUSOFF, wakeup, error warning)
; ..\component\Can\Implementation\Can.c	 10823  |                     + basic can receive
; ..\component\Can\Implementation\Can.c	 10824  |                     + full can receive
; ..\component\Can\Implementation\Can.c	 10825  |                     + can transmit
; ..\component\Can\Implementation\Can.c	 10826  |
; ..\component\Can\Implementation\Can.c	 10827  |                   If an RX-Interrupt occurs while the CAN controller is in Sleep mode, 
; ..\component\Can\Implementation\Can.c	 10828  |                   a wakeup has to be generated. 
; ..\component\Can\Implementation\Can.c	 10829  |
; ..\component\Can\Implementation\Can.c	 10830  |                   If an TX-Interrupt occurs while the CAN controller is in Sleep mode, 
; ..\component\Can\Implementation\Can.c	 10831  |                   an assertion has to be called and the interrupt has to be ignored.
; ..\component\Can\Implementation\Can.c	 10832  |
; ..\component\Can\Implementation\Can.c	 10833  |                   The name of BrsTimeStrt...() and BrsTimeStop...() can be adapted to 
; ..\component\Can\Implementation\Can.c	 10834  |                   really used name of the interrupt functions.
; ..\component\Can\Implementation\Can.c	 10835  |
; ..\component\Can\Implementation\Can.c	 10836  * ************************************************************************* */
; ..\component\Can\Implementation\Can.c	 10837  /*
; ..\component\Can\Implementation\Can.c	 10838  |<DataModelStart>| CanInterrupt
; ..\component\Can\Implementation\Can.c	 10839  Relation_Context:
; ..\component\Can\Implementation\Can.c	 10840  Relation:
; ..\component\Can\Implementation\Can.c	 10841  OneChOpt
; ..\component\Can\Implementation\Can.c	 10842  ChannelAmount, RxBasicCANSupport, MultipleBasicCanObjects, RxFullCANSupport, RxPolling, TxPolling, StatusPolling, IndividualPolling
; ..\component\Can\Implementation\Can.c	 10843  Parameter_PreCompile:
; ..\component\Can\Implementation\Can.c	 10844  Parameter_Data:
; ..\component\Can\Implementation\Can.c	 10845  Constrain:
; ..\component\Can\Implementation\Can.c	 10846  |<DataModelEnd>|
; ..\component\Can\Implementation\Can.c	 10847  */
; ..\component\Can\Implementation\Can.c	 10848  /*!
; ..\component\Can\Implementation\Can.c	 10849   * Internal comment removed.
; ..\component\Can\Implementation\Can.c	 10850   *
; ..\component\Can\Implementation\Can.c	 10851   *
; ..\component\Can\Implementation\Can.c	 10852   *
; ..\component\Can\Implementation\Can.c	 10853   *
; ..\component\Can\Implementation\Can.c	 10854   *
; ..\component\Can\Implementation\Can.c	 10855   *
; ..\component\Can\Implementation\Can.c	 10856  */
; ..\component\Can\Implementation\Can.c	 10857  /* CODE CATEGORY 1 START */
; ..\component\Can\Implementation\Can.c	 10858  V_DEF_FUNC(V_NONE, void, CODE) CanInterrupt(CAN_HW_CHANNEL_CANTYPE_ONLY)
; Function CanInterrupt
.L427:
CanInterrupt:	.type	func
	sub.a	a10,#8
.L896:
	fcall	.cocofun_9
	ld.w	d15,[a12]
.L1742:
	mov.a	a2,d15
	ld.w	d8,[a2]336
.L1423:
	ld.w	d15,[a2]340
.L1743:
	and	d15,d8
.L1744:

; ..\component\Can\Implementation\Can.c	  6816    if( (CanLocal_IR & Cn->IE & kCanIR_RF0L) != 0UL)                                            /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jz.t	d15:3,.L287
.L1745:
	call	CanHL_ErrorHandling
.L904:
	ld.w	d0,[a12]
.L1746:
	mov	d9,#204
.L1747:
	mov.a	a2,d0
.L1748:
	st.w	[a2]336,d9
.L1749:
	ld.w	d0,[a12]
.L1750:
	mov.a	a2,d0
	ld.w	d15,[a2]336
.L1751:
	and	d15,#204
.L1752:

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jeq	d15,#0,.L288
.L1753:
	fcall	.cocofun_4
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
.L289:
	ld.w	d0,[a12]
.L1754:
	mov.a	a2,d0
.L1755:
	st.w	[a2]336,d9
.L1756:
	ld.w	d0,[a12]
.L1757:
	mov.a	a2,d0
	ld.w	d15,[a2]336
.L1758:
	and	d15,#204
.L1759:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jeq	d15,#0,.L290
.L909:
	mov	d10,#0
	ld.w	d15,[a15]
.L1419:
	mov	d11,d10
	st.w	[a10]4,d15
.L913:
	mov	d4,d10
	lea	a4,[a10]4
.L1420:
	mov.aa	a5,a10
	call	GetElapsedValue
.L1421:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L291
.L1760:
	ld.w	d15,[a10]
.L1761:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d15,#10,.L292
.L1762:
	mov	d11,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L293

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L292:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L291:
	mov	d10,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L293:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d10,#0,.L294
.L1763:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d10
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L294:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jne	d11,#0,.L289
.L290:
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L288:

; ..\component\Can\Implementation\Can.c	  6816    if( (CanLocal_IR & Cn->IE & kCanIR_RF0L) != 0UL)                                            /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L287:
	ld.w	d15,[a12]
.L1764:
	mov	d9,#0
.L1433:
	addi	d15,d15,#340
	mov.a	a15,d15
.L1765:
	movh	d10,#512
.L1766:
	ld.w	d15,[a15]
.L1767:
	and	d15,d8
.L1768:

; ..\component\Can\Implementation\Can.c	  6830    if( (CanLocal_IR & Cn->IE & kCanIR_BO) != 0u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jz.t	d15:25,.L295
.L1769:
	call	CanHL_ErrorHandling
.L916:
	fcall	.cocofun_3
.L1770:

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jz.t	d15:25,.L296
.L1771:
	fcall	.cocofun_20
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
.L297:
	ld.w	d15,[a12]
.L1772:
	mov.a	a15,d15
.L1773:
	st.w	[a15]336,d10
.L1774:
	ld.w	d15,[a12]
.L1775:
	mov.a	a15,d15
	ld.w	d15,[a15]336
.L1776:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jz.t	d15:25,.L298
.L919:
	mov	d15,#0
	ld.w	d0,[a13]
.L1424:
	mov	d8,d15
	st.w	[a10]4,d0
.L922:
	mov	d4,d15
	lea	a4,[a10]4
.L1425:
	mov.aa	a5,a10
	call	GetElapsedValue
.L1426:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L299
.L1777:
	ld.w	d0,[a10]
.L1778:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d0,#10,.L300
.L1779:
	mov	d8,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L301

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L300:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L299:
	mov	d15,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L301:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d15,#0,.L302
.L1780:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d15
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L302:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jne	d8,#0,.L297
.L917:

; ..\component\Can\Implementation\Can.c	  6832      CanHL_ErrorHandling(CAN_HW_CHANNEL_CANPARA_ONLY); /* call Interrupt handling with logical channel */      (inlined)
	j	.L303

; ..\component\Can\Implementation\Can.c	  6830    if( (CanLocal_IR & Cn->IE & kCanIR_BO) != 0u) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L295:
	ld.w	d15,[a15]
.L1781:
	movh	d10,#2
.L1782:
	and	d8,d15
.L1427:

; ..\component\Can\Implementation\Can.c	  6842    else if( (CanLocal_IR & Cn->IE & kCanIR_MRAF) != 0UL) /* COV_CAN_MCAN_NOT_SUPPORTED */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jz.t	d8:17,.L304
.L1783:
	call	CanHL_ErrorHandling
.L925:
	fcall	.cocofun_3
.L1784:

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jz.t	d15:17,.L305
.L1785:
	fcall	.cocofun_20
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
.L306:
	ld.w	d15,[a12]
.L1786:
	mov.a	a15,d15
.L1787:
	st.w	[a15]336,d10
.L1788:
	ld.w	d15,[a12]
.L1789:
	mov.a	a15,d15
	ld.w	d15,[a15]336
.L1790:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jz.t	d15:17,.L307
.L927:
	mov	d15,#0
	ld.w	d0,[a13]
.L1428:
	mov	d8,d15
	st.w	[a10]4,d0
.L930:
	mov	d4,d15
	lea	a4,[a10]4
.L1429:
	mov.aa	a5,a10
	call	GetElapsedValue
.L1430:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L308
.L1791:
	ld.w	d0,[a10]
.L1792:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d0,#10,.L309
.L1793:
	mov	d8,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L310

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L309:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L308:
	mov	d15,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L310:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d15,#0,.L311
.L1794:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d15
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L311:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jne	d8,#0,.L306
.L307:

; ..\component\Can\Implementation\Can.c	  6842    else if( (CanLocal_IR & Cn->IE & kCanIR_MRAF) != 0UL) /* COV_CAN_MCAN_NOT_SUPPORTED */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L303:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
.L298:
	mov	d4,#0
	mov.aa	a4,a13
	call	GetCounterValue
.L926:

; ..\component\Can\Implementation\Can.c	  6856      CanHL_ErrorHandling(CAN_HW_CHANNEL_CANPARA_ONLY); /* call Interrupt handling with logical channel */      (inlined)
	j	.L312

; ..\component\Can\Implementation\Can.c	  6842    else if( (CanLocal_IR & Cn->IE & kCanIR_MRAF) != 0UL) /* COV_CAN_MCAN_NOT_SUPPORTED */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L304:
	mov	d9,#1

; ..\component\Can\Implementation\Can.c	  6864    else      (inlined)
.L312:

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L305:
.L296:

; ..\component\Can\Implementation\Can.c	 10859  {
; ..\component\Can\Implementation\Can.c	 10860  
; ..\component\Can\Implementation\Can.c	 10861  #  if( CAN_SAFE_BSW == STD_ON ) 
; ..\component\Can\Implementation\Can.c	 10862    if (canHwChannel >= kCanNumberOfChannels) /* PRQA S 2742 */ /* MD_Can_ConstValue */ /* CM_CAN_LL_100 */ /* COV_CAN_GENDATA_FAILURE */
; ..\component\Can\Implementation\Can.c	 10863    {
; ..\component\Can\Implementation\Can.c	 10864      Can_CallDetReportError(CAN_HW_ACCESS_ID, CAN_E_GENDATA); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\Can\Implementation\Can.c	 10865    }
; ..\component\Can\Implementation\Can.c	 10866    else
; ..\component\Can\Implementation\Can.c	 10867  #  endif
; ..\component\Can\Implementation\Can.c	 10868    {
; ..\component\Can\Implementation\Can.c	 10869  #  if !defined ( C_SINGLE_RECEIVE_CHANNEL ) 
; ..\component\Can\Implementation\Can.c	 10870      CAN_DUMMY_STATEMENT(canHwChannel);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\Can\Implementation\Can.c	 10871  #  endif
; ..\component\Can\Implementation\Can.c	 10872  
; ..\component\Can\Implementation\Can.c	 10873      /* #10 check for interrupt sources */
; ..\component\Can\Implementation\Can.c	 10874  #  if !defined(C_ENABLE_ERROR_POLLING)
; ..\component\Can\Implementation\Can.c	 10875      /* #20 handle error interrupt */
; ..\component\Can\Implementation\Can.c	 10876      if(CanInterruptErrorHandling(CAN_HW_CHANNEL_CANPARA_ONLY) == kCanOk) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
	jeq	d9,#0,.L313
.L934:
	ld.w	d15,[a12]
.L1795:
	mov	d8,#512
.L1796:
	addi	d0,d15,#336
	mov.a	a15,d0
.L1797:
	addi	d15,d15,#340
.L1798:
	ld.w	d0,[a15]
.L1431:
	mov.a	a2,d15
	ld.w	d15,[a2]
.L1799:
	and	d0,d15
.L1432:

; ..\component\Can\Implementation\Can.c	  6912    if( (CanLocal_IR & Cn->IE & kCanIR_TC) != 0UL) /* COV_CAN_TX_INTERRUPT */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jz.t	d0:9,.L314
.L943:
	st.w	[a15],d8
.L1800:
	fcall	.cocofun_23
.L1801:

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jz.t	d15:9,.L315
.L1802:
	fcall	.cocofun_4
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
.L316:
	ld.w	d15,[a12]
.L1803:
	mov.a	a2,d15
.L1804:
	st.w	[a2]336,d8
.L1805:
	ld.w	d15,[a12]
.L1806:
	mov.a	a2,d15
	ld.w	d15,[a2]336
.L1807:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jz.t	d15:9,.L317
.L944:
	mov	d15,#0
	ld.w	d0,[a15]
.L1434:
	mov	d9,d15
	st.w	[a10]4,d0
.L947:
	mov	d4,d15
	lea	a4,[a10]4
.L1435:
	mov.aa	a5,a10
	call	GetElapsedValue
.L1436:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L318
.L1808:
	ld.w	d0,[a10]
.L1809:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d0,#10,.L319
.L1810:
	mov	d9,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L320

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L319:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L318:
	mov	d15,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L320:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d15,#0,.L321
.L1811:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d15
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L321:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jne	d9,#0,.L316
.L317:
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L315:
	fcall	.cocofun_18
.L899:
	mov	d8,#1
.L1437:
	mov	d9,#0
	movh.a	a14,#@his(Can_MemorySectionInfo)
.L1438:
	mov	d10,#32

; ..\component\Can\Implementation\Can.c	  6926      while ( (hwObjHdl < kCanTXBC_NDTB) && (Can_GetCanTXBRP(canHwChannel) > 0UL) )      (inlined)
	j	.L322
.L323:
	ld.bu	d0,[a14]@los(Can_MemorySectionInfo)
	movh.a	a15,#@his(Can_MemorySectionObjects)
	add	d0,d9
	lea	a15,[a15]@los(Can_MemorySectionObjects)
	addsc.a	a15,a15,d0,#2
.L1812:
	ld.w	d0,[a2]
.L1813:
	ld.bu	d4,[a15]2
.L1439:
	and	d0,d8
.L1814:

; ..\component\Can\Implementation\Can.c	  6932        if( ((Can_GetCanTXBRP(canHwChannel) & bPos) != 0UL) && ( ((Cn->TXBTO & bPos) != 0UL) ) ) /* COV_CAN_HW_SPECIFIC */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jeq	d0,#0,.L324
.L1815:
	ld.w	d0,[a12]
.L1816:
	mov.a	a15,d0
	ld.w	d15,[a15]472
.L1817:
	and	d15,d8
.L1818:

; ..\component\Can\Implementation\Can.c	  6932        if( ((Can_GetCanTXBRP(canHwChannel) & bPos) != 0UL) && ( ((Cn->TXBTO & bPos) != 0UL) ) ) /* COV_CAN_HW_SPECIFIC */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jeq	d15,#0,.L325
.L1819:
	mov	d5,#0
.L1820:
	mov	d6,d9
	call	CanHL_TxConfirmation

; ..\component\Can\Implementation\Can.c	  6932        if( ((Can_GetCanTXBRP(canHwChannel) & bPos) != 0UL) && ( ((Cn->TXBTO & bPos) != 0UL) ) ) /* COV_CAN_HW_SPECIFIC */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L325:
.L324:
	add	d9,#1
.L1821:
	sh	d8,#1

; ..\component\Can\Implementation\Can.c	  6926      while ( (hwObjHdl < kCanTXBC_NDTB) && (Can_GetCanTXBRP(canHwChannel) > 0UL) )      (inlined)
.L322:
	jge.u	d9,d10,.L326
.L1822:
	lea	a2,[a13]12
	ld.w	d15,[a2]
.L1823:

; ..\component\Can\Implementation\Can.c	  6926      while ( (hwObjHdl < kCanTXBC_NDTB) && (Can_GetCanTXBRP(canHwChannel) > 0UL) )      (inlined)
	jne	d15,#0,.L323
.L326:

; ..\component\Can\Implementation\Can.c	  6912    if( (CanLocal_IR & Cn->IE & kCanIR_TC) != 0UL) /* COV_CAN_TX_INTERRUPT */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L314:
	fcall	.cocofun_18
.L900:

; ..\component\Can\Implementation\Can.c	 10877  #  endif
; ..\component\Can\Implementation\Can.c	 10878      {
; ..\component\Can\Implementation\Can.c	 10879  #  if !defined(C_ENABLE_TX_POLLING) || defined( C_ENABLE_INDIVIDUAL_POLLING )
; ..\component\Can\Implementation\Can.c	 10880        CanInterruptTx(CAN_HW_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	 10881  #  endif
; ..\component\Can\Implementation\Can.c	 10882  
; ..\component\Can\Implementation\Can.c	 10883  #  if( CAN_BOSCH_ERRATUM_012 == STD_ON ) /* COV_CAN_ERRATUM_OFF */
; ..\component\Can\Implementation\Can.c	 10884        /* #30 handle timeout interrupt */
; ..\component\Can\Implementation\Can.c	 10885        if( (Cn->IR & kCanIR_TOO) != 0UL)
; ..\component\Can\Implementation\Can.c	 10886        { /* timeout arrived */
; ..\component\Can\Implementation\Can.c	 10887          CanInterruptTimeoutCounter(CAN_HW_CHANNEL_CANPARA_ONLY);
; ..\component\Can\Implementation\Can.c	 10888        }
; ..\component\Can\Implementation\Can.c	 10889  #  endif
; ..\component\Can\Implementation\Can.c	 10890  
; ..\component\Can\Implementation\Can.c	 10891  #  if defined( C_ENABLE_RX_BASICCAN_OBJECTS )
; ..\component\Can\Implementation\Can.c	 10892        /* #40 handle BasicCAN (FIFO) interrupt */
; ..\component\Can\Implementation\Can.c	 10893  #   if( (!defined( C_ENABLE_RX_BASICCAN_POLLING )) || (defined( C_ENABLE_INDIVIDUAL_POLLING )) ) /* ISR necessary; no pure polling configuration */
; ..\component\Can\Implementation\Can.c	 10894  #    if defined( C_ENABLE_MULTIPLE_BASICCAN )
; ..\component\Can\Implementation\Can.c	 10895        if( (Can_GetCanIntEnable(canHwChannel) & (kCanIR_RF0N | kCanIR_RF1N)) != 0UL) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	 10896        {
; ..\component\Can\Implementation\Can.c	 10897          if( (Cn->IR & (kCanIR_RF0N | kCanIR_RF1N)) != 0UL) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	 10898  #    else
; ..\component\Can\Implementation\Can.c	 10899        if( (Can_GetCanIntEnable(canHwChannel) &  kCanIR_RF0N) != 0UL) /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
	ld.w	d15,[a13]
.L937:
	mov	d8,#1
.L938:
	jz.t	d15:0,.L327
.L1824:

; ..\component\Can\Implementation\Can.c	 10900        {
; ..\component\Can\Implementation\Can.c	 10901          if( (Cn->IR &  kCanIR_RF0N) != 0UL)  /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
	fcall	.cocofun_10
.L1825:
	jz.t	d15:0,.L328
.L951:
	ld.w	d15,[a15]
.L1826:

; ..\component\Can\Implementation\Can.c	  6633    if( ((Cn->IR) & kCanIR_RF0N) != 0UL)  /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
	jz.t	d15:0,.L329
.L953:
	st.w	[a15],d8
.L1827:
	fcall	.cocofun_23
.L1828:

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jz.t	d15:0,.L330
.L1829:
	lea	a14,[a13]50
	mov	d4,#0
	mov.aa	a4,a14
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
.L331:
	ld.w	d15,[a12]
.L1830:
	mov.a	a15,d15
.L1831:
	st.w	[a15]336,d8
.L1832:
	ld.w	d15,[a12]
.L1833:
	mov.a	a15,d15
	ld.w	d15,[a15]336
.L1834:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jz.t	d15:0,.L332
.L954:
	mov	d15,#0
	ld.w	d0,[a14]
.L1440:
	mov	d9,d15
	st.w	[a10]4,d0
.L957:
	mov	d4,d15
	lea	a4,[a10]4
.L1441:
	mov.aa	a5,a10
	call	GetElapsedValue
.L1442:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L333
.L1835:
	ld.w	d0,[a10]
.L1836:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d0,#10,.L334
.L1837:
	mov	d9,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L335

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L334:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L333:
	mov	d15,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L335:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d15,#0,.L336
.L1838:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d15
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L336:

; ..\component\Can\Implementation\Can.c	  5750      } while( ((Cn->IR & CanIrFlag) != 0u ) && (CanLL_ApplCanTimerLoop(kCanLoopIrFlag) !=  CAN_NOT_OK) ); /* PRQA S 1881,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */      (inlined)
	jne	d9,#0,.L331
.L332:
	mov	d4,#0
	mov.aa	a4,a14
	call	GetCounterValue

; ..\component\Can\Implementation\Can.c	  5743    if ( (Cn->IR & CanIrFlag) != 0u ) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L330:
	lea	a15,[a13]34
	mov	d4,#0
	mov.aa	a4,a15
	call	GetCounterValue
.L1839:

; ..\component\Can\Implementation\Can.c	  6649        while( (((Cn->RXF0S).B.FnFL) > 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopRxFifo) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */      (inlined)
	j	.L337
.L338:
	ld.bu	d4,[a12]10
.L1840:
	mov	d5,#0
	call	CanHL_BasicCanMsgReceived

; ..\component\Can\Implementation\Can.c	  6649        while( (((Cn->RXF0S).B.FnFL) > 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopRxFifo) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */      (inlined)
.L337:
	ld.w	d15,[a12]
.L1841:
	mov.a	a2,d15
.L1842:
	ld.bu	d15,[a2]420
	and	d15,#127
.L1843:

; ..\component\Can\Implementation\Can.c	  6649        while( (((Cn->RXF0S).B.FnFL) > 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopRxFifo) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */      (inlined)
	jeq	d15,#0,.L339
.L960:
	mov	d15,#0
	ld.w	d0,[a15]
.L1443:
	mov	d8,d15
	st.w	[a10]4,d0
.L963:
	mov	d4,d15
	lea	a4,[a10]4
.L1444:
	mov.aa	a5,a10
	call	GetElapsedValue
.L1445:

; ..\component\Can\Implementation\Can.c	  1494      if ( GetElapsedValue( CAN_OS_COUNTER_ID, &startTime, &elapsedTime ) != (StatusType)E_OK ) /* SBSW_CAN_HL37 */ /* COV_CAN_GENDATA_FAILURE */      (inlined)
	jne	d2,#0,.L340
.L1844:
	ld.w	d0,[a10]
.L1845:

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
	jge.u	d0,#10,.L341
.L1846:
	mov	d8,#1

; ..\component\Can\Implementation\Can.c	  1503          retval = CAN_OK;      (inlined)
	j	.L342

; ..\component\Can\Implementation\Can.c	  1501        if ( (TickType)CAN_OS_TICK2MS( elapsedTime ) < (TickType)CAN_TIMEOUT_DURATION ) /* COV_CAN_HARDWARE_FAILURE */      (inlined)
.L341:

; ..\component\Can\Implementation\Can.c	  1498      else      (inlined)
.L340:
	mov	d15,#17

; ..\component\Can\Implementation\Can.c	  1505        else /* only used in case C_ENABLE_HW_LOOP_TIMER but removed because of coverage TX for some organiy cases */      (inlined)
.L342:

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
	jeq	d15,#0,.L343
.L1847:
	mov	d4,#80
	mov	d5,#0
	mov	d6,#96
	mov	d7,d15
	call	Det_ReportError

; ..\component\Can\Implementation\Can.c	  1519    if (errorId != CAN_E_NO_ERROR)      (inlined)
.L343:

; ..\component\Can\Implementation\Can.c	  6649        while( (((Cn->RXF0S).B.FnFL) > 0UL) && (CanLL_ApplCanTimerLoop(kCanLoopRxFifo) !=  CAN_NOT_OK) ) /* PRQA S 1881,4558,3415,0303 */ /* MD_MSR_AutosarBoolean,MD_Can_4558_RHsideEffect,MD_Can_4558_RHsideEffect,MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */      (inlined)
	jne	d8,#0,.L338
.L339:
	mov	d4,#0
	mov.aa	a4,a15
	j	GetCounterValue

; ..\component\Can\Implementation\Can.c	  6633    if( ((Cn->IR) & kCanIR_RF0N) != 0UL)  /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */ /* PRQA S 0303 */ /* MD_Can_HwAccess */      (inlined)
.L329:
.L328:
.L327:
.L313:

; ..\component\Can\Implementation\Can.c	 10902  #    endif
; ..\component\Can\Implementation\Can.c	 10903          { /* Rx FIFO(0,1) */
; ..\component\Can\Implementation\Can.c	 10904            CanBasicInterruptRx(CAN_HW_CHANNEL_CANPARA_ONLY); /* call Interrupt handling with logical channel */
; ..\component\Can\Implementation\Can.c	 10905          }
; ..\component\Can\Implementation\Can.c	 10906        }
; ..\component\Can\Implementation\Can.c	 10907  #   endif
; ..\component\Can\Implementation\Can.c	 10908  #  endif
; ..\component\Can\Implementation\Can.c	 10909  #  if defined( C_ENABLE_RX_FULLCAN_OBJECTS )
; ..\component\Can\Implementation\Can.c	 10910  #   if ( (!defined( C_ENABLE_RX_FULLCAN_POLLING )) || (defined( C_ENABLE_INDIVIDUAL_POLLING )) )          /* ISR necessary; no pure polling configuration */
; ..\component\Can\Implementation\Can.c	 10911        /*Rx Buffer Handling
; ..\component\Can\Implementation\Can.c	 10912          - Reset interrupt flag IR.DRX
; ..\component\Can\Implementation\Can.c	 10913          - Read New Data registers
; ..\component\Can\Implementation\Can.c	 10914          - Read messages from Message RAM
; ..\component\Can\Implementation\Can.c	 10915          - Reset New Data flags of processed messages */
; ..\component\Can\Implementation\Can.c	 10916        /* #50 handle FullCAN interrupt */
; ..\component\Can\Implementation\Can.c	 10917        if( (Can_GetCanIntEnable(canHwChannel) & kCanIR_DRX) != 0UL)  /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	 10918        {
; ..\component\Can\Implementation\Can.c	 10919          if( (Cn->IR & kCanIR_DRX) != 0UL) /* PRQA S 0303 */ /* MD_Can_HwAccess */ /* COV_CAN_GENDATA_NOT_IN_ALL_CONFIG */
; ..\component\Can\Implementation\Can.c	 10920          { /* rcvd FullCAN msg(s) */
; ..\component\Can\Implementation\Can.c	 10921            CanFullInterruptRx(CAN_HW_CHANNEL_CANPARA_ONLY);     /* call Interrupt handling with logical channel */
; ..\component\Can\Implementation\Can.c	 10922          }
; ..\component\Can\Implementation\Can.c	 10923        }
; ..\component\Can\Implementation\Can.c	 10924  #   endif
; ..\component\Can\Implementation\Can.c	 10925  #  endif
; ..\component\Can\Implementation\Can.c	 10926      }
; ..\component\Can\Implementation\Can.c	 10927    } /* end else DET check */
; ..\component\Can\Implementation\Can.c	 10928  
; ..\component\Can\Implementation\Can.c	 10929  } /* PRQA S 6010,6030,6050,6080 */ /* MD_MSR_STPTH,MD_MSR_STCYC,MD_MSR_STCAL,MD_MSR_STMIF */
	ret
.L894:
	
__CanInterrupt_function_end:
	.size	CanInterrupt,__CanInterrupt_function_end-CanInterrupt
.L508:
	; End of function
	
	.sdecl	'.text.Can..cocofun_20',code,cluster('.cocofun_20')
	.sect	'.text.Can..cocofun_20'
	.align	2
; Function .cocofun_20
.L429:
.cocofun_20:	.type	func
; Function body .cocofun_20, coco_iter:0
	movh.a	a15,#@his(Can_ControllerData+50)
	lea	a13,[a15]@los(Can_ControllerData+50)
	mov	d4,#0
	mov.aa	a4,a13
.L1422:
	fret
.L628:
	; End of function
	.sdecl	'.rodata.Can.Can_MainVersion',data,rom,cluster('Can_MainVersion')
	.sect	'.rodata.Can.Can_MainVersion'
	.global	Can_MainVersion
Can_MainVersion:	.type	object
	.size	Can_MainVersion,1
	.byte	5
	.sdecl	'.rodata.Can.Can_SubVersion',data,rom,cluster('Can_SubVersion')
	.sect	'.rodata.Can.Can_SubVersion'
	.global	Can_SubVersion
Can_SubVersion:	.type	object
	.size	Can_SubVersion,1
	.byte	8
	.sdecl	'.rodata.Can.Can_ReleaseVersion',data,rom,cluster('Can_ReleaseVersion')
	.sect	'.rodata.Can.Can_ReleaseVersion'
	.global	Can_ReleaseVersion
Can_ReleaseVersion:	.type	object
	.size	Can_ReleaseVersion,1
	.byte	2
	.sdecl	'.rodata.Can.Can_DlcToFrameLenght',data,rom,cluster('Can_DlcToFrameLenght')
	.sect	'.rodata.Can.Can_DlcToFrameLenght'
Can_DlcToFrameLenght:	.type	object
	.size	Can_DlcToFrameLenght,16
	.space	1
	.byte	1,2,3,4
	.byte	5,6,7,8
	.byte	12,16,20,24
	.byte	32,48,64
	.sdecl	'.rodata.Can.Can_MessageLengthToDlc',data,rom,cluster('Can_MessageLengthToDlc')
	.sect	'.rodata.Can.Can_MessageLengthToDlc'
Can_MessageLengthToDlc:	.type	object
	.size	Can_MessageLengthToDlc,65
	.space	1
	.byte	1,2,3,4
	.byte	5,6,7,8
	.byte	9,9,9,9
	.byte	10,10,10,10
	.byte	11,11,11,11
	.byte	12,12,12,12
	.byte	13,13,13,13
	.byte	13,13,13,13
	.byte	14,14,14,14
	.byte	14,14,14,14
	.byte	14,14,14,14
	.byte	14,14,14,14
	.byte	15,15,15,15
	.byte	15,15,15,15
	.byte	15,15,15,15
	.byte	15,15,15,15
	.sdecl	'.rodata.Can.CanLL_xES2Bytes',data,rom,cluster('CanLL_xES2Bytes')
	.sect	'.rodata.Can.CanLL_xES2Bytes'
CanLL_xES2Bytes:	.type	object
	.size	CanLL_xES2Bytes,8
	.byte	8,12,16,20
	.byte	24,32,48,64
	.sdecl	'.bss.Can.canIsRxTaskLocked',data,cluster('canIsRxTaskLocked')
	.sect	'.bss.Can.canIsRxTaskLocked'
canIsRxTaskLocked:	.type	object
	.size	canIsRxTaskLocked,1
	.space	1
	.sdecl	'.data.Can.canConfigInitFlag',data,cluster('canConfigInitFlag')
	.sect	'.data.Can.canConfigInitFlag'
canConfigInitFlag:	.type	object
	.size	canConfigInitFlag,1
	.space	1
	.sdecl	'.rodata.Can.Can_ConfigDataPtr',data,rom,cluster('Can_ConfigDataPtr')
	.sect	'.rodata.Can.Can_ConfigDataPtr'
	.global	Can_ConfigDataPtr
	.align	4
Can_ConfigDataPtr:	.type	object
	.size	Can_ConfigDataPtr,4
	.space	4
	.calls	'CanHL_ReInit','GetCounterValue'
	.calls	'CanHL_ReInit','GetElapsedValue'
	.calls	'CanHL_ReInit','Det_ReportError'
	.calls	'CanLL_ModeTransition','CanHL_ReInit'
	.calls	'CanLL_ModeTransition','GetCounterValue'
	.calls	'CanLL_ModeTransition','GetElapsedValue'
	.calls	'CanLL_ModeTransition','Det_ReportError'
	.calls	'CanHL_TxConfirmation','Det_ReportError'
	.calls	'CanHL_TxConfirmation','SuspendAllInterrupts'
	.calls	'CanHL_TxConfirmation','ResumeAllInterrupts'
	.calls	'CanHL_TxConfirmation','CanIf_TxConfirmation'
	.calls	'CanHL_BasicCanMsgReceived','CanIf_RxIndicationAsr403'
	.calls	'CanHL_BasicCanMsgReceived','Det_ReportError'
	.calls	'CanHL_ErrorHandling','GetCounterValue'
	.calls	'CanHL_ErrorHandling','GetElapsedValue'
	.calls	'CanHL_ErrorHandling','Det_ReportError'
	.calls	'CanHL_ErrorHandling','SuspendAllInterrupts'
	.calls	'CanHL_ErrorHandling','CanLL_ModeTransition'
	.calls	'CanHL_ErrorHandling','ResumeAllInterrupts'
	.calls	'CanHL_ErrorHandling','CanIf_ControllerBusOff'
	.calls	'Can_ChangeBaudrate','CanLL_ModeTransition'
	.calls	'Can_ChangeBaudrate','GetCounterValue'
	.calls	'Can_ChangeBaudrate','GetElapsedValue'
	.calls	'Can_ChangeBaudrate','Det_ReportError'
	.calls	'Can_Init','Appl_UnlockEndinit'
	.calls	'Can_Init','Appl_LockEndinit'
	.calls	'Can_Init','CanLL_ModeTransition'
	.calls	'Can_Init','GetCounterValue'
	.calls	'Can_Init','GetElapsedValue'
	.calls	'Can_Init','Det_ReportError'
	.calls	'Can_SetControllerMode','SuspendAllInterrupts'
	.calls	'Can_SetControllerMode','CanLL_ModeTransition'
	.calls	'Can_SetControllerMode','GetCounterValue'
	.calls	'Can_SetControllerMode','GetElapsedValue'
	.calls	'Can_SetControllerMode','Det_ReportError'
	.calls	'Can_SetControllerMode','CanIf_ControllerModeIndication'
	.calls	'Can_SetControllerMode','ResumeAllInterrupts'
	.calls	'Can_DisableControllerInterrupts','SuspendAllInterrupts'
	.calls	'Can_DisableControllerInterrupts','Os_IsInterruptSourceEnabled'
	.calls	'Can_DisableControllerInterrupts','Os_DisableInterruptSource'
	.calls	'Can_DisableControllerInterrupts','ResumeAllInterrupts'
	.calls	'Can_DisableControllerInterrupts','Det_ReportError'
	.calls	'Can_EnableControllerInterrupts','SuspendAllInterrupts'
	.calls	'Can_EnableControllerInterrupts','Os_EnableInterruptSource'
	.calls	'Can_EnableControllerInterrupts','ResumeAllInterrupts'
	.calls	'Can_EnableControllerInterrupts','Det_ReportError'
	.calls	'Can_Write','Det_ReportError'
	.calls	'Can_MainFunction_Read','Det_ReportError'
	.calls	'Can_MainFunction_Mode','SuspendAllInterrupts'
	.calls	'Can_MainFunction_Mode','CanLL_ModeTransition'
	.calls	'Can_MainFunction_Mode','CanIf_ControllerModeIndication'
	.calls	'Can_MainFunction_Mode','ResumeAllInterrupts'
	.calls	'Can_MainFunction_Mode','Det_ReportError'
	.calls	'CanInterrupt','CanHL_ErrorHandling'
	.calls	'CanInterrupt','GetCounterValue'
	.calls	'CanInterrupt','GetElapsedValue'
	.calls	'CanInterrupt','Det_ReportError'
	.calls	'CanInterrupt','CanHL_TxConfirmation'
	.calls	'CanInterrupt','CanHL_BasicCanMsgReceived'
	.calls	'CanHL_ReInit','.cocofun_7'
	.calls	'CanHL_ReInit','.cocofun_14'
	.calls	'CanHL_ReInit','.cocofun_12'
	.calls	'CanHL_ReInit','.cocofun_8'
	.calls	'CanHL_ReInit','.cocofun_2'
	.calls	'.cocofun_8','.cocofun_22'
	.calls	'CanLL_ModeTransition','.cocofun_15'
	.calls	'CanLL_ModeTransition','.cocofun_21'
	.calls	'CanLL_ModeTransition','.cocofun_9'
	.calls	'CanLL_ModeTransition','.cocofun_16'
	.calls	'CanLL_ModeTransition','.cocofun_7'
	.calls	'CanLL_ModeTransition','.cocofun_17'
	.calls	'CanLL_ModeTransition','.cocofun_12'
	.calls	'CanLL_ModeTransition','.cocofun_8'
	.calls	'.cocofun_15','.cocofun_21'
	.calls	'CanHL_TxConfirmation','.cocofun_13'
	.calls	'CanHL_TxConfirmation','.cocofun_2'
	.calls	'CanHL_TxConfirmation','.cocofun_22'
	.calls	'CanHL_BasicCanMsgReceived','.cocofun_13'
	.calls	'CanHL_BasicCanMsgReceived','.cocofun_2'
	.calls	'CanHL_ErrorHandling','.cocofun_9'
	.calls	'CanHL_ErrorHandling','.cocofun_23'
	.calls	'CanHL_ErrorHandling','.cocofun_2'
	.calls	'CanHL_ErrorHandling','.cocofun_7'
	.calls	'CanHL_ErrorHandling','.cocofun_3'
	.calls	'CanHL_ErrorHandling','.cocofun_4'
	.calls	'CanHL_ErrorHandling','.cocofun_21'
	.calls	'CanHL_ErrorHandling','.cocofun_24'
	.calls	'CanHL_ErrorHandling','.cocofun_10'
	.calls	'CanHL_ErrorHandling','.cocofun_11'
	.calls	'.cocofun_3','.cocofun_23'
	.calls	'Can_ChangeBaudrate','.cocofun_6'
	.calls	'Can_Init','.cocofun_21'
	.calls	'Can_Init','.cocofun_2'
	.calls	'Can_SetControllerMode','.cocofun_6'
	.calls	'Can_SetControllerMode','.cocofun_18'
	.calls	'Can_SetControllerMode','.cocofun_5'
	.calls	'Can_SetControllerMode','.cocofun_2'
	.calls	'.cocofun_5','.cocofun_24'
	.calls	'Can_DisableControllerInterrupts','.cocofun_6'
	.calls	'Can_DisableControllerInterrupts','.cocofun_19'
	.calls	'Can_DisableControllerInterrupts','.cocofun_2'
	.calls	'.cocofun_19','.cocofun_21'
	.calls	'Can_EnableControllerInterrupts','.cocofun_6'
	.calls	'Can_EnableControllerInterrupts','.cocofun_19'
	.calls	'Can_EnableControllerInterrupts','.cocofun_2'
	.calls	'Can_Write','.cocofun_17'
	.calls	'Can_Write','.cocofun_14'
	.calls	'Can_Write','.cocofun_22'
	.calls	'Can_Write','.cocofun_2'
	.calls	'Can_MainFunction_Read','.cocofun_6'
	.calls	'Can_MainFunction_Read','.cocofun_2'
	.calls	'Can_MainFunction_Mode','.cocofun_6'
	.calls	'Can_MainFunction_Mode','.cocofun_21'
	.calls	'Can_MainFunction_Mode','.cocofun_24'
	.calls	'Can_MainFunction_Mode','.cocofun_2'
	.calls	'CanInterrupt','.cocofun_9'
	.calls	'CanInterrupt','.cocofun_4'
	.calls	'CanInterrupt','.cocofun_3'
	.calls	'CanInterrupt','.cocofun_20'
	.calls	'CanInterrupt','.cocofun_23'
	.calls	'CanInterrupt','.cocofun_18'
	.calls	'CanInterrupt','.cocofun_10'
	.calls	'CanHL_ReInit','',48
	.calls	'.cocofun_14','',0
	.calls	'.cocofun_12','',0
	.calls	'.cocofun_8','',0
	.calls	'.cocofun_22','',0
	.calls	'.cocofun_7','',0
	.calls	'.cocofun_2','',0
	.calls	'CanLL_ModeTransition','',8
	.calls	'.cocofun_21','',0
	.calls	'.cocofun_17','',0
	.calls	'.cocofun_16','',0
	.calls	'.cocofun_15','',0
	.calls	'.cocofun_9','',0
	.calls	'CanHL_TxConfirmation','',72
	.calls	'.cocofun_13','',0
	.calls	'CanHL_BasicCanMsgReceived','',112
	.calls	'CanHL_ErrorHandling','',8
	.calls	'.cocofun_24','',0
	.calls	'.cocofun_23','',0
	.calls	'.cocofun_11','',0
	.calls	'.cocofun_10','',0
	.calls	'.cocofun_4','',0
	.calls	'.cocofun_3','',0
	.calls	'Can_InitMemory','',0
	.calls	'Can_ChangeBaudrate','',8
	.calls	'.cocofun_6','',0
	.calls	'Can_Init','',16
	.calls	'Can_SetControllerMode','',8
	.calls	'.cocofun_18','',0
	.calls	'.cocofun_5','',0
	.calls	'Can_DisableControllerInterrupts','',8
	.calls	'.cocofun_19','',0
	.calls	'Can_EnableControllerInterrupts','',0
	.calls	'Can_Write','',48
	.calls	'Can_CheckWakeup','',0
	.calls	'Can_MainFunction_Write','',0
	.calls	'Can_MainFunction_Read','',0
	.calls	'Can_MainFunction_BusOff','',0
	.calls	'Can_MainFunction_Wakeup','',0
	.calls	'Can_MainFunction_Mode','',0
	.calls	'Can_CancelTx','',0
	.calls	'CanInterrupt','',8
	.extern	SuspendAllInterrupts
	.extern	ResumeAllInterrupts
	.extern	Os_DisableInterruptSource
	.extern	Os_EnableInterruptSource
	.extern	Os_IsInterruptSourceEnabled
	.extern	GetCounterValue
	.extern	GetElapsedValue
	.extern	Can_BTP
	.extern	Can_BufferConfig
	.extern	Can_CanIfChannelId
	.extern	Can_CanSubSystemBaseAdr
	.extern	Can_ControllerConfig
	.extern	Can_FBTP
	.extern	Can_GFC
	.extern	Can_INT_RoutingGroup
	.extern	Can_InitObjectBaudrate
	.extern	Can_InitObjectFdBrsConfig
	.extern	Can_InitObjectStartIndex
	.extern	Can_IsrOsId
	.extern	Can_Mailbox
	.extern	Can_MemorySectionInfo
	.extern	Can_MemorySectionObjects
	.extern	Can_SIDFC
	.extern	Can_SIDFE
	.extern	Can_ShmAdr
	.extern	Can_ShmElementSize
	.extern	Can_TDCR
	.extern	Can_XIDAM
	.extern	Can_ActiveSendObject
	.extern	Can_ControllerData
	.extern	Appl_UnlockEndinit
	.extern	Appl_LockEndinit
	.extern	CanIf_TxConfirmation
	.extern	CanIf_RxIndicationAsr403
	.extern	CanIf_ControllerBusOff
	.extern	CanIf_ControllerModeIndication
	.extern	Det_ReportError
	.calls	'.cocofun_20','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L431:
	.word	36459
	.half	3
	.word	.L432
	.byte	4
.L430:
	.byte	1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L433
.L671:
	.byte	2
	.byte	'unsigned char',0,1,8
.L683:
	.byte	2
	.byte	'unsigned long int',0,4,7,3
	.word	148
	.byte	4
	.word	169
	.byte	5
	.byte	'CanChipMsgPtr32',0,2,234,8,41
	.word	174
.L681:
	.byte	2
	.byte	'unsigned short int',0,2,7,6
	.word	148
	.byte	4
	.word	226
	.byte	3
	.word	148
	.byte	3
	.word	148
	.byte	7,64
	.word	148
	.byte	8,15,0,3
	.word	246
	.byte	9
	.byte	'tElmTypeTag',0,2,145,9,25,72,10
	.byte	'E0',0
	.word	236
	.byte	4,2,35,0,10
	.byte	'E1',0
	.word	241
	.byte	4,2,35,4,10
	.byte	'data',0
	.word	255
	.byte	64,2,35,8,0,3
	.word	260
	.byte	4
	.word	317
.L1114:
	.byte	9
	.byte	'sCanInitParaStruct',0,3,142,9,16,36,10
	.byte	'initObject',0
	.word	204
	.byte	2,2,35,0,10
	.byte	'mailboxHandle',0
	.word	131
	.byte	1,2,35,2,10
	.byte	'hwObjHandle',0
	.word	131
	.byte	1,2,35,3,10
	.byte	'isInitOk',0
	.word	131
	.byte	1,2,35,4,10
	.byte	'ie',0
	.word	148
	.byte	4,2,35,6,10
	.byte	'canInterruptOldStatus',0
	.word	148
	.byte	4,2,35,10,10
	.byte	'txbtie',0
	.word	148
	.byte	4,2,35,14,10
	.byte	'pFS',0
	.word	231
	.byte	4,2,35,20,10
	.byte	'stdFeCount',0
	.word	204
	.byte	2,2,35,24,10
	.byte	'tmpVal',0
	.word	148
	.byte	4,2,35,26,10
	.byte	'pTXB',0
	.word	322
	.byte	4,2,35,32,0,4
	.word	327
	.byte	5
	.byte	'CanInitParaStructPtr',0,3,186,9,58
	.word	557
.L1159:
	.byte	11
	.byte	'CanLL_WriteReg32',0,3,1,219,23,51
	.word	131
	.byte	1,1
.L1161:
	.byte	12
	.byte	'regPtr',0,1,219,23,111
	.word	179
.L1163:
	.byte	12
	.byte	'value',0,1,219,23,127
	.word	148
.L1165:
	.byte	12
	.byte	'readMask',0,1,219,23,142,1
	.word	148
.L1167:
	.byte	12
	.byte	'initPara',0,1,219,23,173,1
	.word	562
.L1169:
	.byte	13,0,3
	.word	148
	.byte	4
	.word	692
	.byte	4
	.word	327
.L1126:
	.byte	11
	.byte	'CanLL_InitBegin',0,3,1,195,24,51
	.word	131
	.byte	1,1
.L1127:
	.byte	12
	.byte	'initPara',0,1,195,24,130,1
	.word	562
.L1129:
	.byte	13,0
.L1135:
	.byte	11
	.byte	'CanLL_InitBeginSetRegisters',0,3,1,137,26,51
	.word	131
	.byte	1,1
.L1136:
	.byte	12
	.byte	'initPara',0,1,137,26,142,1
	.word	562
.L1138:
	.byte	14,13,13,13,0,0
.L1240:
	.byte	11
	.byte	'CanLL_InitMailboxTx',0,3,1,179,26,51
	.word	131
	.byte	1,1
.L1242:
	.byte	12
	.byte	'initPara',0,1,179,26,134,1
	.word	562
.L1244:
	.byte	13,0
.L1255:
	.byte	11
	.byte	'CanLL_InitEndSetRegisters',0,3,1,239,28,51
	.word	131
	.byte	1,1
.L1256:
	.byte	12
	.byte	'initPara',0,1,239,28,140,1
	.word	562
.L1258:
	.byte	14,13,13,13,13,13,13,0,0,11
	.byte	'CanLL_InitEnd',0,3,1,210,29,51
	.word	131
	.byte	1,1,12
	.byte	'initPara',0,1,210,29,128,1
	.word	562
	.byte	13,0
.L673:
	.byte	11
	.byte	'CanLL_InitPowerOn',0,3,1,238,30,51
	.word	131
	.byte	1,1
.L675:
	.byte	14,13,13,0,0
.L685:
	.byte	11
	.byte	'CanLL_InitPowerOnChannelSpecific',0,3,1,150,31,51
	.word	131
	.byte	1,1
.L688:
	.byte	13,0,4
	.word	131
	.byte	5
	.byte	'Can_SduPtrType',0,4,58,45
	.word	1069
	.byte	9
	.byte	'Can_PduTypeTag',0,4,61,16,12,10
	.byte	'id',0
	.word	204
	.byte	2,2,35,0,10
	.byte	'length',0
	.word	131
	.byte	1,2,35,2,10
	.byte	'sdu',0
	.word	1074
	.byte	4,2,35,4,10
	.byte	'swPduHandle',0
	.word	131
	.byte	1,2,35,8,0
.L808:
	.byte	9
	.byte	'sCanTxTransmissionParaStruct',0,3,189,9,16,44,10
	.byte	'mailboxHandle',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'mailboxElement',0
	.word	131
	.byte	1,2,35,1,10
	.byte	'hwObjHandle',0
	.word	131
	.byte	1,2,35,2,10
	.byte	'activeSendObject',0
	.word	131
	.byte	1,2,35,3,10
	.byte	'idRaw0',0
	.word	148
	.byte	4,2,35,4,10
	.byte	'dlcRaw',0
	.word	148
	.byte	4,2,35,8,10
	.byte	'CanMemCopySrcPtr',0
	.word	1074
	.byte	4,2,35,12,10
	.byte	'fdType',0
	.word	148
	.byte	4,2,35,16,10
	.byte	'fdBrsType',0
	.word	148
	.byte	4,2,35,20,10
	.byte	'messageLen',0
	.word	131
	.byte	1,2,35,24,10
	.byte	'frameLen',0
	.word	131
	.byte	1,2,35,25,10
	.byte	'paddingVal',0
	.word	131
	.byte	1,2,35,26,10
	.byte	'pdu',0
	.word	1097
	.byte	12,2,35,28,10
	.byte	'lpTXB',0
	.word	322
	.byte	4,2,35,40,0,4
	.word	1180
	.byte	5
	.byte	'CanTxTransmissionParaStructPtr',0,3,225,9,68
	.word	1489
.L830:
	.byte	15
	.byte	'CanLL_TxBegin',0,3,1,214,31,49,1,1
.L833:
	.byte	12
	.byte	'txPara',0,1,214,31,135,1
	.word	1494
.L835:
	.byte	13,0,4
	.word	1180
	.byte	4
	.word	131
.L836:
	.byte	15
	.byte	'CanLL_TxSetMailbox',0,3,1,134,32,49,1,1
.L839:
	.byte	12
	.byte	'txPara',0,1,134,32,140,1
	.word	1494
.L841:
	.byte	13,0
.L842:
	.byte	15
	.byte	'CanLL_TxCopyToCan',0,3,1,175,32,49,1,1
.L844:
	.byte	12
	.byte	'txPara',0,1,175,32,139,1
	.word	1494
.L846:
	.byte	13,0
.L851:
	.byte	11
	.byte	'CanLL_TxStart',0,3,1,135,33,51
	.word	131
	.byte	1,1
.L852:
	.byte	12
	.byte	'txPara',0,1,135,33,137,1
	.word	1494
.L854:
	.byte	13,0,7,8
	.word	148
	.byte	8,1,0,3
	.word	246
	.byte	16,2,135,9,9,64,10
	.byte	'dw',0
	.word	1721
	.byte	8,2,35,0,10
	.byte	'data',0
	.word	1730
	.byte	64,2,35,0,0
.L1011:
	.byte	17,3,139,10,9,68,10
	.byte	'mailboxHandle',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'mailboxElement',0
	.word	131
	.byte	1,2,35,1,10
	.byte	'hwObjHandle',0
	.word	131
	.byte	1,2,35,2,10
	.byte	'activeSendObject',0
	.word	131
	.byte	1,2,35,3,10
	.byte	'tmpTXB',0
	.word	1735
	.byte	64,2,35,4,0,4
	.word	1768
	.byte	5
	.byte	'CanTxConfirmationParaStructPtr',0,3,150,10,68
	.word	1885
.L1015:
	.byte	15
	.byte	'CanLL_TxConfBegin',0,3,1,184,34,49,1,1
.L1018:
	.byte	12
	.byte	'txConfPara',0,1,184,34,139,1
	.word	1890
.L1020:
	.byte	13,0,4
	.word	1768
	.byte	3
	.word	148
	.byte	3
	.word	131
	.byte	3
	.word	131
	.byte	3
	.word	131
	.byte	17,2,224,9,5,4,18
	.byte	'ID',0,4
	.word	1984
	.byte	29,3,2,35,0,18
	.byte	'RTR',0,1
	.word	1989
	.byte	1,2,2,35,3,18
	.byte	'XTD',0,1
	.word	1994
	.byte	1,1,2,35,3,18
	.byte	'ESI',0,1
	.word	1999
	.byte	1,0,2,35,3,0,3
	.word	148
	.byte	16,2,222,9,3,4,10
	.byte	'b0',0
	.word	2004
	.byte	4,2,35,0,10
	.byte	'B0',0
	.word	2070
	.byte	4,2,35,0,0,3
	.word	204
	.byte	3
	.word	131
	.byte	3
	.word	131
	.byte	3
	.word	131
	.byte	3
	.word	131
	.byte	3
	.word	131
	.byte	3
	.word	131
	.byte	17,2,235,9,5,4,18
	.byte	'RXTS',0,2
	.word	2106
	.byte	16,0,2,35,0,18
	.byte	'DLC',0,1
	.word	2111
	.byte	4,4,2,35,2,18
	.byte	'BRS',0,1
	.word	2116
	.byte	1,3,2,35,2,18
	.byte	'FDF',0,1
	.word	2121
	.byte	1,2,2,35,2,18
	.byte	'r0',0,1
	.word	2126
	.byte	2,0,2,35,2,18
	.byte	'FIDX',0,1
	.word	2131
	.byte	7,1,2,35,3,18
	.byte	'ANMF',0,1
	.word	2136
	.byte	1,0,2,35,3,0,3
	.word	204
	.byte	3
	.word	131
	.byte	3
	.word	131
	.byte	3
	.word	131
	.byte	3
	.word	131
	.byte	3
	.word	131
	.byte	3
	.word	131
	.byte	17,2,245,9,5,4,18
	.byte	'r1',0,2
	.word	2255
	.byte	16,0,2,35,0,18
	.byte	'DLC',0,1
	.word	2260
	.byte	4,4,2,35,2,18
	.byte	'BRS',0,1
	.word	2265
	.byte	1,3,2,35,2,18
	.byte	'FDF',0,1
	.word	2270
	.byte	1,2,2,35,2,18
	.byte	'r0',0,1
	.word	2275
	.byte	1,1,2,35,2,18
	.byte	'EFC',0,1
	.word	2280
	.byte	1,0,2,35,2,18
	.byte	'MM',0,1
	.word	2285
	.byte	8,0,2,35,3,0,16,2,233,9,3,4,10
	.byte	'rb1',0
	.word	2141
	.byte	4,2,35,0,10
	.byte	'tb1',0
	.word	2290
	.byte	4,2,35,0,10
	.byte	'B1',0
	.word	148
	.byte	4,2,35,0,0,3
	.word	246
	.byte	9
	.byte	'tCanChipMsgPtrTag',0,2,220,9,25,72,10
	.byte	'uB0',0
	.word	2075
	.byte	4,2,35,0,10
	.byte	'uB1',0
	.word	2399
	.byte	4,2,35,4,10
	.byte	'data',0
	.word	2444
	.byte	64,2,35,8,0,3
	.word	2449
	.byte	4
	.word	2514
	.byte	5
	.byte	'CanChipMsgPtr',0,2,136,10,46
	.word	2519
	.byte	3
	.word	131
	.byte	4
	.word	2547
	.byte	5
	.byte	'CanChipDataPtr',0,2,231,8,41
	.word	2552
	.byte	9
	.byte	'sCanRxInfoStruct',0,3,250,8,16,16,10
	.byte	'pChipMsgObj',0
	.word	2524
	.byte	4,2,35,0,10
	.byte	'pChipData',0
	.word	2557
	.byte	4,2,35,4,10
	.byte	'localMailboxHandle',0
	.word	131
	.byte	1,2,35,8,10
	.byte	'localId',0
	.word	204
	.byte	2,2,35,10,10
	.byte	'localDlc',0
	.word	131
	.byte	1,2,35,12,0,17,2,141,10,3,4,18
	.byte	'FnFL',0,1
	.word	131
	.byte	7,1,2,35,0,18
	.byte	'r2',0,1
	.word	131
	.byte	1,0,2,35,0,18
	.byte	'FnGI',0,1
	.word	131
	.byte	6,2,2,35,1,18
	.byte	'r1',0,4
	.word	148
	.byte	10,8,2,35,0,18
	.byte	'FnF',0,1
	.word	131
	.byte	1,7,2,35,3,18
	.byte	'RFnL',0,1
	.word	131
	.byte	1,6,2,35,3,18
	.byte	'r0',0,1
	.word	131
	.byte	6,0,2,35,3,0,19
	.byte	'tRXFnSTag',0,2,138,10,15,4,10
	.byte	'R',0
	.word	148
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2708
	.byte	4,2,35,0,0,3
	.word	2820
	.byte	4
	.word	2859
	.byte	3
	.word	260
.L1026:
	.byte	9
	.byte	'sCanRxBasicParaStruct',0,3,227,9,16,108,10
	.byte	'mailboxHandle',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'hwObjHandle',0
	.word	131
	.byte	1,2,35,1,10
	.byte	'rxStruct',0
	.word	2581
	.byte	16,2,35,4,10
	.byte	'pShm',0
	.word	322
	.byte	4,2,35,20,10
	.byte	'pFifoAck',0
	.word	174
	.byte	4,2,35,24,10
	.byte	'pFifoStatus',0
	.word	2864
	.byte	4,2,35,28,10
	.byte	'fElm',0
	.word	2869
	.byte	72,2,35,32,10
	.byte	'fGetIndex',0
	.word	131
	.byte	1,2,35,104,0,4
	.word	2874
	.byte	5
	.byte	'CanRxBasicParaStructPtr',0,3,241,9,61
	.word	3051
.L1028:
	.byte	11
	.byte	'CanLL_RxBasicMsgReceivedBegin',0,3,1,183,35,51
	.word	131
	.byte	1,1
.L1031:
	.byte	12
	.byte	'rxBasicPara',0,1,183,35,146,1
	.word	3056
.L1033:
	.byte	13,0,4
	.word	2874
	.byte	3
	.word	2449
	.byte	4
	.word	3160
	.byte	3
	.word	131
	.byte	4
	.word	3170
.L1042:
	.byte	15
	.byte	'CanLL_RxBasicReleaseObj',0,3,1,251,35,49,1,1
.L1043:
	.byte	12
	.byte	'rxBasicPara',0,1,251,35,138,1
	.word	3056
.L1045:
	.byte	13,0
.L1049:
	.byte	11
	.byte	'CanLL_BusOffOccured',0,3,1,201,39,51
	.word	131
	.byte	1,1
.L1052:
	.byte	14,13,0,0
.L1088:
	.byte	11
	.byte	'CanLL_RxBasicCanOverrun',0,3,1,238,39,51
	.word	131
	.byte	1,1
.L1090:
	.byte	14,13,0,0
.L1101:
	.byte	15
	.byte	'CanLL_ErrorHandlingEnd',0,3,1,158,40,49,1,1
.L1102:
	.byte	14,13,0,0
.L995:
	.byte	15
	.byte	'CanLL_StopReinit',0,3,1,235,41,49,1,1
.L996:
	.byte	14,13,0,0,4
	.word	148
	.byte	5
	.byte	'tCanLLCanIntOldPtr',0,2,182,9,26
	.word	3376
.L865:
	.byte	15
	.byte	'CanLL_CanInterruptDisable',0,3,1,226,42,49,1,1
.L867:
	.byte	12
	.byte	'localInterruptOldFlagPtr',0,1,226,42,123
	.word	3381
.L869:
	.byte	13,0,4
	.word	148
.L874:
	.byte	15
	.byte	'CanLL_CanInterruptRestore',0,3,1,139,43,49,1,1
.L876:
	.byte	12
	.byte	'localInterruptOldFlag',0,1,139,43,120
	.word	148
.L878:
	.byte	13,0
.L903:
	.byte	15
	.byte	'CanLL_TriCoreErratum_AI_H001',0,3,1,234,44,49,1,1
.L905:
	.byte	12
	.byte	'CanIrFlag',0,1,234,44,115
	.word	148
.L907:
	.byte	14,13,0,0
.L1219:
	.byte	11
	.byte	'CanLL_SetAllFilter',0,3,1,134,47,51
	.word	131
	.byte	1,1
.L1220:
	.byte	12
	.byte	'initPara',0,1,134,47,117
	.word	562
.L1222:
	.byte	14,13,0,0
.L1140:
	.byte	11
	.byte	'CanLL_SetAllRegister',0,3,1,223,47,51
	.word	131
	.byte	1,1
.L1141:
	.byte	12
	.byte	'initPara',0,1,223,47,119
	.word	562
.L1143:
	.byte	14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0
.L1205:
	.byte	15
	.byte	'CanLL_SetRegisterMcMcan',0,3,1,222,50,49,1,1
.L1207:
	.byte	12
	.byte	'localInfo',0,1,222,50,120
	.word	562
.L1209:
	.byte	14,13,13,13,13,13,13,13,13,0,0
.L676:
	.byte	15
	.byte	'CanLL_SetGlobalRegisterMcMcan',0,3,1,167,51,49,1,1
.L678:
	.byte	13,0
.L972:
	.byte	11
	.byte	'CanLL_StartRequest',0,3,1,139,55,51
	.word	131
	.byte	1,1
.L975:
	.byte	14,13,0,0
.L991:
	.byte	11
	.byte	'CanLL_StopRequest',0,3,1,159,56,51
	.word	131
	.byte	1,1
.L992:
	.byte	13,0
.L1053:
	.byte	11
	.byte	'CanErrorHandlingBusOff',0,3,1,249,45,51
	.word	131
	.byte	1,1
.L1055:
	.byte	14,13,13,0,0
.L950:
	.byte	15
	.byte	'CanBasicInterruptRx',0,3,1,230,51,49,1,1
.L952:
	.byte	14,13,13,0,0
.L895:
	.byte	11
	.byte	'CanInterruptErrorHandling',0,3,1,149,53,51
	.word	131
	.byte	1,1
.L897:
	.byte	14,13,13,13,0,0
.L933:
	.byte	15
	.byte	'CanInterruptTx',0,3,1,245,53,49,1,1
.L935:
	.byte	14,13,0,0
.L679:
	.byte	11
	.byte	'Can_EccInit',0,3,1,205,43,51
	.word	131
	.byte	1,1
.L680:
	.byte	13,0
.L1004:
	.byte	15
	.byte	'CanHL_CleanUpSendState',0,3,1,155,12,49,1,1
.L1005:
	.byte	14,13,0,0
.L712:
	.byte	20,4,91,9,1,21
	.byte	'CAN_NOT_OK',0,0,21
	.byte	'CAN_OK',0,1,21
	.byte	'CAN_BUSY',0,2,21
	.byte	'CAN_NOT_SUPPORTED',0,3,21
	.byte	'CAN_REQUESTED',0,4,0
.L703:
	.byte	11
	.byte	'ApplCanTimerLoop',0,3,1,179,11,59
	.word	4112
	.byte	1,1
.L706:
	.byte	12
	.byte	'source',0,1,179,11,109
	.word	131
.L708:
	.byte	14
.L715:
	.byte	13,0,0
.L689:
	.byte	11
	.byte	'CanHL_ModeTransition',0,3,1,153,14,50
	.word	131
	.byte	1,1
.L692:
	.byte	12
	.byte	'transitionRequest',0,1,153,14,104
	.word	131
.L694:
	.byte	12
	.byte	'busOffRecovery',0,1,153,14,129,1
	.word	131
.L696:
	.byte	12
	.byte	'doRamCheck',0,1,153,14,151,1
	.word	131
.L698:
	.byte	14,13,0,0,20,5,189,2,9,1,21
	.byte	'CANIF_CS_UNINIT',0,0,21
	.byte	'CANIF_CS_STOPPED',0,1,21
	.byte	'CANIF_CS_STARTED',0,2,21
	.byte	'CANIF_CS_SLEEP',0,3,0
.L777:
	.byte	15
	.byte	'CanHL_NotifyTransition',0,3,1,205,14,49,1,1
.L779:
	.byte	12
	.byte	'canState',0,1,205,14,105
	.word	131
.L781:
	.byte	12
	.byte	'canIfState',0,1,205,14,140,1
	.word	4346
.L783:
	.byte	12
	.byte	'transitionState',0,1,205,14,158,1
	.word	131
.L785:
	.byte	13,0
.L810:
	.byte	15
	.byte	'CanHL_WritePrepare',0,3,1,129,15,49,1,1
.L813:
	.byte	12
	.byte	'txPara',0,1,129,15,126
	.word	1494
.L815:
	.byte	14,13,0,0
.L821:
	.byte	11
	.byte	'CanHL_WriteStart',0,3,1,139,16,59
	.word	4112
	.byte	1,1
.L822:
	.byte	12
	.byte	'txPara',0,1,139,16,134,1
	.word	1494
.L824:
	.byte	14
.L827:
	.byte	13,13,13,13,13,0,0,11
	.byte	'CanHL_GetActiveSendObject',0,3,1,235,16,60
	.word	131
	.byte	1,1,12
	.byte	'mailboxHandle',0,1,235,16,104
	.word	131
	.byte	12
	.byte	'mailboxElement',0,1,235,16,136,1
	.word	131
	.byte	13,0
.L1116:
	.byte	11
	.byte	'CanHL_InitBegin',0,3,1,240,17,50
	.word	131
	.byte	1,1
.L1119:
	.byte	12
	.byte	'initPara',0,1,240,17,114
	.word	562
.L1121:
	.byte	14,13,13,0,0
.L1233:
	.byte	11
	.byte	'CanHL_InitTxBasicCAN',0,3,1,236,18,50
	.word	131
	.byte	1,1
.L1236:
	.byte	12
	.byte	'initPara',0,1,236,18,119
	.word	562
.L1238:
	.byte	14,13,13,0,0
.L1245:
	.byte	11
	.byte	'CanHL_InitRxBasicCAN',0,3,1,176,20,50
	.word	131
	.byte	1,1
.L1247:
	.byte	12
	.byte	'initPara',0,1,176,20,119
	.word	562
.L1249:
	.byte	13,0
.L1250:
	.byte	11
	.byte	'CanHL_InitEnd_InitMode',0,3,1,244,20,50
	.word	131
	.byte	1,1
.L1252:
	.byte	12
	.byte	'initPara',0,1,244,20,121
	.word	562
.L1254:
	.byte	14,13,13,0,0,4
	.word	2581
	.byte	5
	.byte	'CanRxInfoStructPtr',0,3,131,9,56
	.word	4931
.L1036:
	.byte	11
	.byte	'CanHL_RxMsgReceivedNotification',0,3,1,147,22,50
	.word	131
	.byte	1,1
.L1039:
	.byte	12
	.byte	'rxStructPtr',0,1,147,22,128,1
	.word	4936
.L1041:
	.byte	13,0,4
	.word	2581
	.byte	2
	.byte	'int',0,4,5,6
	.word	5037
	.byte	22
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,23
	.word	5044
	.byte	0,2
	.byte	'unsigned int',0,4,7,3
	.word	5086
	.byte	4
	.word	5086
	.byte	24
	.byte	'__cmpswapw',0
	.word	5102
	.byte	1,1,1,1,25
	.byte	'p',0
	.word	5107
	.byte	25
	.byte	'value',0
	.word	5086
	.byte	25
	.byte	'compare',0
	.word	5086
	.byte	0,26
	.byte	'SuspendAllInterrupts',0,6,222,10,21,1,1,1,1,26
	.byte	'ResumeAllInterrupts',0,6,241,10,21,1,1,1,1,20,7,161,1,9,1,21
	.byte	'CanIsr_0',0,0,21
	.byte	'CounterIsr_SystemTimer',0,1,21
	.byte	'INVALID_ISR',0,2,21
	.byte	'OS_ISRID_COUNT',0,2,0,27
	.byte	'Os_DisableInterruptSource',0,6,182,13,27
	.word	131
	.byte	1,1,1,1,12
	.byte	'ISRID',0,6,184,13,11
	.word	5223
	.byte	0,27
	.byte	'Os_EnableInterruptSource',0,6,250,13,27
	.word	131
	.byte	1,1,1,1,12
	.byte	'ISRID',0,6,252,13,11
	.word	5223
	.byte	12
	.byte	'ClearPending',0,6,253,13,11
	.word	131
	.byte	0,4
	.word	131
	.byte	27
	.byte	'Os_IsInterruptSourceEnabled',0,6,190,14,27
	.word	131
	.byte	1,1,1,1,12
	.byte	'ISRID',0,6,192,14,11
	.word	5223
	.byte	12
	.byte	'IsEnabled',0,6,193,14,44
	.word	5428
	.byte	0,20,7,180,1,9,1,21
	.byte	'OsCounterCAN0',0,0,21
	.byte	'SystemTimer',0,1,21
	.byte	'OS_COUNTERID_COUNT',0,2,0,4
	.word	148
	.byte	5
	.byte	'TickRefType',0,8,210,2,56
	.word	5567
	.byte	27
	.byte	'GetCounterValue',0,6,172,18,27
	.word	131
	.byte	1,1,1,1,12
	.byte	'CounterID',0,6,174,18,15
	.word	5509
	.byte	12
	.byte	'Value',0,6,175,18,15
	.word	5572
	.byte	0,4
	.word	148
	.byte	27
	.byte	'GetElapsedValue',0,6,213,18,27
	.word	131
	.byte	1,1,1,1,12
	.byte	'CounterID',0,6,215,18,15
	.word	5509
	.byte	12
	.byte	'Value',0,6,216,18,15
	.word	5572
	.byte	12
	.byte	'ElapsedValue',0,6,217,18,15
	.word	5572
	.byte	0,9
	.byte	'sCan_PCConfigType',0,9,143,19,16,1,10
	.byte	'Can_PCConfigNeverUsed',0
	.word	131
	.byte	1,2,35,0,0,6
	.word	5748
	.byte	4
	.word	5804
	.byte	6
	.word	5748
	.byte	4
	.word	5814
.L669:
	.byte	5
	.byte	'Can_ConfigPtrType',0,2,207,8,57
	.word	5819
.L721:
	.byte	6
	.word	204
.L746:
	.byte	20,4,70,9,1,21
	.byte	'CAN_T_START',0,0,21
	.byte	'CAN_T_STOP',0,1,21
	.byte	'CAN_T_SLEEP',0,2,21
	.byte	'CAN_T_WAKEUP',0,3,0,6
	.word	1097
	.byte	4
	.word	5918
	.byte	6
	.word	1097
	.byte	4
	.word	5928
.L804:
	.byte	5
	.byte	'Can_PduInfoPtrType',0,2,208,8,61
	.word	5933
	.byte	7,4
	.word	131
	.byte	8,3,0,7,4
	.word	204
	.byte	8,1,0
.L849:
	.byte	16,2,128,9,9,4,10
	.byte	'b',0
	.word	5966
	.byte	4,2,35,0,10
	.byte	'w',0
	.word	5975
	.byte	4,2,35,0,10
	.byte	'dw',0
	.word	148
	.byte	4,2,35,0,0,26
	.byte	'Appl_UnlockEndinit',0,2,154,21,41,1,1,1,1,26
	.byte	'Appl_LockEndinit',0,2,170,21,41,1,1,1,1,28
	.byte	'CanIf_TxConfirmation',0,10,89,24,1,1,1,1,12
	.byte	'CanTxPduId',0,10,89,55
	.word	131
	.byte	0,6
	.word	131
	.byte	4
	.word	6128
	.byte	28
	.byte	'CanIf_RxIndicationAsr403',0,10,110,24,1,1,1,1,12
	.byte	'Hrh',0,10,110,68
	.word	131
	.byte	12
	.byte	'CanId',0,10,110,84
	.word	204
	.byte	12
	.byte	'CanDlc',0,10,110,97
	.word	131
	.byte	12
	.byte	'CanSduPtr',0,10,110,149,1
	.word	6133
	.byte	0,28
	.byte	'CanIf_ControllerBusOff',0,10,149,1,24,1,1,1,1,12
	.byte	'ControllerId',0,10,149,1,53
	.word	131
	.byte	0,28
	.byte	'CanIf_ControllerModeIndication',0,11,197,5,24,1,1,1,1,12
	.byte	'ControllerId',0,11,197,5,61
	.word	131
	.byte	12
	.byte	'ControllerMode',0,11,197,5,100
	.word	4346
	.byte	0,27
	.byte	'Det_ReportError',0,12,154,2,32
	.word	131
	.byte	1,1,1,1,12
	.byte	'ModuleId',0,12,154,2,56
	.word	204
	.byte	12
	.byte	'InstanceId',0,12,154,2,72
	.word	131
	.byte	12
	.byte	'ApiId',0,12,154,2,90
	.word	131
	.byte	12
	.byte	'ErrorId',0,12,154,2,103
	.word	131
	.byte	0,29
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	13,0,29
	.word	707
	.byte	30
	.word	735
	.byte	13,0,29
	.word	756
	.byte	30
	.word	796
	.byte	14,31
	.word	3611
	.byte	30
	.word	3642
	.byte	32
	.word	3660
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3661
	.byte	0,0,13,31
	.word	3738
	.byte	30
	.word	3770
	.byte	32
	.word	3789
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3790
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3791
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3792
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3793
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3794
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3795
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3796
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3797
	.byte	0,0,13,31
	.word	3664
	.byte	30
	.word	3697
	.byte	32
	.word	3715
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3716
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3717
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3718
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3719
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3720
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3721
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3722
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3723
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3724
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3725
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3726
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3727
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3728
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3729
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3730
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3731
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3732
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3733
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3734
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3735
	.byte	0,0,13,0,0,29
	.word	821
	.byte	30
	.word	853
	.byte	13,0,29
	.word	874
	.byte	30
	.word	912
	.byte	14,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,0,0,29
	.word	940
	.byte	30
	.word	966
	.byte	13,0,29
	.word	987
	.byte	14,31
	.word	4051
	.byte	33
	.word	4075
	.byte	0,13,31
	.word	3800
	.byte	33
	.word	3838
	.byte	0,13,0,0,29
	.word	1022
	.byte	13,0,29
	.word	1534
	.byte	30
	.word	1556
	.byte	13,0,29
	.word	1585
	.byte	30
	.word	1612
	.byte	13,0,29
	.word	1631
	.byte	30
	.word	1657
	.byte	13,0,29
	.word	1676
	.byte	30
	.word	1702
	.byte	13,0,29
	.word	1930
	.byte	30
	.word	1956
	.byte	13,0,29
	.word	3089
	.byte	30
	.word	3131
	.byte	13,0,29
	.word	3180
	.byte	30
	.word	3212
	.byte	13,0,29
	.word	3236
	.byte	14,31
	.word	3907
	.byte	32
	.word	3942
	.byte	31
	.word	3551
	.byte	30
	.word	3588
	.byte	32
	.word	3607
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3608
	.byte	0,0,33
	.word	3943
	.byte	31
	.word	3551
	.byte	30
	.word	3588
	.byte	32
	.word	3607
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3608
	.byte	0,0,33
	.word	3944
	.byte	0,0,13,0,0,29
	.word	3272
	.byte	14,31
	.word	3551
	.byte	30
	.word	3588
	.byte	32
	.word	3607
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3608
	.byte	0,0,13,0,0,29
	.word	3312
	.byte	14,31
	.word	3551
	.byte	30
	.word	3588
	.byte	32
	.word	3607
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3608
	.byte	0,0,13,0,0,29
	.word	3347
	.byte	14,31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,13,0,0,29
	.word	3409
	.byte	30
	.word	3443
	.byte	13,0,29
	.word	3484
	.byte	30
	.word	3518
	.byte	13,0,29
	.word	3551
	.byte	30
	.word	3588
	.byte	14,31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,13,0,0,29
	.word	3611
	.byte	30
	.word	3642
	.byte	14,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,0,0,29
	.word	3664
	.byte	30
	.word	3697
	.byte	14,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,13,31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,13,0,0,29
	.word	3738
	.byte	30
	.word	3770
	.byte	14,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,13,0,0,29
	.word	3800
	.byte	13,0,29
	.word	3840
	.byte	14,31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,13,0,0,29
	.word	3875
	.byte	13,0,29
	.word	3907
	.byte	14,31
	.word	3551
	.byte	30
	.word	3588
	.byte	32
	.word	3607
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3608
	.byte	0,0,13,31
	.word	3551
	.byte	30
	.word	3588
	.byte	32
	.word	3607
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3608
	.byte	0,0,13,0,0,29
	.word	3947
	.byte	14,31
	.word	3551
	.byte	30
	.word	3588
	.byte	32
	.word	3607
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3608
	.byte	0,0,13,31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,13,0,0,29
	.word	3980
	.byte	14,31
	.word	3551
	.byte	30
	.word	3588
	.byte	32
	.word	3607
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3608
	.byte	0,0,13,31
	.word	3551
	.byte	30
	.word	3588
	.byte	32
	.word	3607
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3608
	.byte	0,0,13,31
	.word	3551
	.byte	30
	.word	3588
	.byte	32
	.word	3607
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3608
	.byte	0,0,13,0,0,29
	.word	4024
	.byte	14,31
	.word	3551
	.byte	30
	.word	3588
	.byte	32
	.word	3607
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3608
	.byte	0,0,13,0,0,29
	.word	4051
	.byte	13,0,29
	.word	4077
	.byte	14,31
	.word	4625
	.byte	30
	.word	4663
	.byte	30
	.word	4686
	.byte	33
	.word	4711
	.byte	0,13,0,0,29
	.word	4187
	.byte	30
	.word	4216
	.byte	14,13,0,0,29
	.word	4236
	.byte	30
	.word	4269
	.byte	30
	.word	4296
	.byte	30
	.word	4321
	.byte	14,31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,13,0,0,29
	.word	4426
	.byte	30
	.word	4457
	.byte	30
	.word	4475
	.byte	30
	.word	4496
	.byte	13,0,29
	.word	4524
	.byte	30
	.word	4551
	.byte	14,31
	.word	4625
	.byte	30
	.word	4663
	.byte	30
	.word	4686
	.byte	33
	.word	4711
	.byte	0,13,0,0,29
	.word	4571
	.byte	30
	.word	4600
	.byte	14,14,31
	.word	1534
	.byte	30
	.word	1556
	.byte	33
	.word	1573
	.byte	0,31
	.word	1676
	.byte	30
	.word	1702
	.byte	33
	.word	1719
	.byte	0,31
	.word	1585
	.byte	30
	.word	1612
	.byte	33
	.word	1629
	.byte	0,31
	.word	1631
	.byte	30
	.word	1657
	.byte	33
	.word	1674
	.byte	0,0,13,13,13,13,0,0,29
	.word	4625
	.byte	30
	.word	4663
	.byte	30
	.word	4686
	.byte	13,0,29
	.word	4713
	.byte	30
	.word	4741
	.byte	14,31
	.word	707
	.byte	30
	.word	735
	.byte	33
	.word	754
	.byte	0,13,31
	.word	756
	.byte	30
	.word	796
	.byte	32
	.word	815
	.byte	31
	.word	3611
	.byte	30
	.word	3642
	.byte	32
	.word	3660
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3661
	.byte	0,0,33
	.word	816
	.byte	31
	.word	3738
	.byte	30
	.word	3770
	.byte	32
	.word	3789
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3790
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3791
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3792
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3793
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3794
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3795
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3796
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3797
	.byte	0,0,33
	.word	817
	.byte	31
	.word	3664
	.byte	30
	.word	3697
	.byte	32
	.word	3715
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3716
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3717
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3718
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3719
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3720
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3721
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3722
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3723
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3724
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3725
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3726
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3727
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3728
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3729
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3730
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3731
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3732
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	3733
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3734
	.byte	31
	.word	4187
	.byte	30
	.word	4216
	.byte	32
	.word	4232
	.byte	33
	.word	4233
	.byte	0,0,33
	.word	3735
	.byte	0,0,33
	.word	818
	.byte	0,0,13,0,0,29
	.word	4764
	.byte	30
	.word	4797
	.byte	14,31
	.word	4625
	.byte	30
	.word	4663
	.byte	30
	.word	4686
	.byte	33
	.word	4711
	.byte	0,13,31
	.word	821
	.byte	30
	.word	853
	.byte	33
	.word	872
	.byte	0,13,0,0,29
	.word	4820
	.byte	30
	.word	4853
	.byte	13,0,29
	.word	4873
	.byte	30
	.word	4908
	.byte	14,31
	.word	940
	.byte	30
	.word	966
	.byte	33
	.word	985
	.byte	0,13,31
	.word	874
	.byte	30
	.word	912
	.byte	32
	.word	931
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	932
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	933
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	934
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	935
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	936
	.byte	31
	.word	592
	.byte	30
	.word	621
	.byte	30
	.word	637
	.byte	30
	.word	652
	.byte	30
	.word	671
	.byte	33
	.word	690
	.byte	0,33
	.word	937
	.byte	0,0,13,0,0,29
	.word	4964
	.byte	30
	.word	5008
	.byte	13,0,34,1,4
	.word	11372
	.byte	5
	.byte	'__codeptr',0,1,1,1
	.word	11374
	.byte	5
	.byte	'boolean',0,13,101,31
	.word	131
	.byte	5
	.byte	'uint8',0,13,104,31
	.word	131
	.byte	2
	.byte	'short int',0,2,5,5
	.byte	'sint16',0,13,105,31
	.word	11427
	.byte	5
	.byte	'uint16',0,13,106,31
	.word	204
	.byte	2
	.byte	'long int',0,4,5,5
	.byte	'sint32',0,13,107,31
	.word	11470
	.byte	5
	.byte	'uint32',0,13,108,31
	.word	148
	.byte	5
	.byte	'uint8_least',0,13,111,31
	.word	131
	.byte	5
	.byte	'uint32_least',0,13,115,31
	.word	148
	.byte	2
	.byte	'unsigned long long int',0,8,7,5
	.byte	'uint64',0,13,121,30
	.word	11553
	.byte	5
	.byte	'StatusType',0,14,127,23
	.word	131
	.byte	5
	.byte	'Std_ReturnType',0,14,132,1,15
	.word	131
	.byte	17,14,134,1,9,8,10
	.byte	'vendorID',0
	.word	204
	.byte	2,2,35,0,10
	.byte	'moduleID',0
	.word	204
	.byte	2,2,35,2,10
	.byte	'sw_major_version',0
	.word	131
	.byte	1,2,35,4,10
	.byte	'sw_minor_version',0
	.word	131
	.byte	1,2,35,5,10
	.byte	'sw_patch_version',0
	.word	131
	.byte	1,2,35,6,0,5
	.byte	'Std_VersionInfoType',0,14,141,1,3
	.word	11637
	.byte	5
	.byte	'PduIdType',0,15,63,15
	.word	131
	.byte	5
	.byte	'PduLengthType',0,15,65,15
	.word	131
	.byte	5
	.byte	'SduDataPtrType',0,16,196,1,54
	.word	1069
	.byte	20,16,219,1,9,1,21
	.byte	'TP_DATACONF',0,0,21
	.byte	'TP_DATARETRY',0,1,21
	.byte	'TP_CONFPENDING',0,2,0,5
	.byte	'TpDataStateType',0,16,226,1,3
	.word	11851
	.byte	5
	.byte	'Can_IdType',0,4,52,30
	.word	204
	.byte	5
	.byte	'Can_HwHandleType',0,4,55,29
	.word	131
	.byte	5
	.byte	'Can_PduType',0,4,67,3
	.word	1097
	.byte	5
	.byte	'Can_StateTransitionType',0,4,75,3
	.word	5856
	.byte	20,4,77,9,1,21
	.byte	'CAN_CS_UNINIT',0,0,21
	.byte	'CAN_CS_STARTED',0,1,21
	.byte	'CAN_CS_STOPPED',0,2,21
	.byte	'CAN_CS_SLEEP',0,3,0,5
	.byte	'Can_ControllerStateType',0,4,82,3
	.word	12025
	.byte	20,4,84,9,1,21
	.byte	'CAN_ERRORSTATE_ACTIVE',0,0,21
	.byte	'CAN_ERRORSTATE_PASSIVE',0,1,21
	.byte	'CAN_ERRORSTATE_BUSOFF',0,2,0,5
	.byte	'Can_ErrorStateType',0,4,88,3
	.word	12128
	.byte	5
	.byte	'Can_ReturnType',0,4,98,3
	.word	4112
	.byte	20,7,148,1,9,1,21
	.byte	'Default_Init_Task',0,0,21
	.byte	'Default_Init_Task_Trusted',0,1,21
	.byte	'IdleTask_OsCore0',0,2,21
	.byte	'bsw_task',0,3,21
	.byte	'swc_init',0,4,21
	.byte	'swc_task',0,5,21
	.byte	'INVALID_TASK',0,6,21
	.byte	'OS_TASKID_COUNT',0,6,0,5
	.byte	'TaskType',0,7,158,1,3
	.word	12257
	.byte	5
	.byte	'ISRType',0,7,167,1,3
	.word	5223
	.byte	5
	.byte	'CounterType',0,7,185,1,3
	.word	5509
	.byte	5
	.byte	'Os_Hal_AddressType',0,17,61,16
	.word	148
	.byte	9
	.byte	'Os_ExceptionContextType_Tag',0,18,71,8,160,1,10
	.byte	'AddressRegisters',0
	.word	246
	.byte	64,2,35,0,10
	.byte	'DataRegisters',0
	.word	246
	.byte	64,2,35,64,10
	.byte	'Ra',0
	.word	148
	.byte	4,3,35,128,1,10
	.byte	'Psw',0
	.word	148
	.byte	4,3,35,132,1,10
	.byte	'ExceptionSource',0
	.word	148
	.byte	4,3,35,136,1,10
	.byte	'Pcpn',0
	.word	148
	.byte	4,3,35,140,1,10
	.byte	'Pie',0
	.word	148
	.byte	4,3,35,144,1,10
	.byte	'MpuRegionForStackLow',0
	.word	148
	.byte	4,3,35,148,1,10
	.byte	'MpuRegionForStackUpper',0
	.word	148
	.byte	4,3,35,152,1,10
	.byte	'RawPCXI',0
	.word	148
	.byte	4,3,35,156,1,0,5
	.byte	'Os_ExceptionContextType',0,17,66,44
	.word	12480
	.byte	5
	.byte	'Os_InterruptSourceIdType',0,8,238,1,16
	.word	148
	.byte	5
	.byte	'Os_ExceptionSourceIdType',0,8,246,1,16
	.word	148
	.byte	20,8,161,2,9,1,21
	.byte	'RUNNING',0,0,21
	.byte	'READY',0,1,21
	.byte	'WAITING',0,2,21
	.byte	'SUSPENDED',0,3,0,5
	.byte	'TaskStateType',0,8,175,2,3
	.word	12828
	.byte	5
	.byte	'EventMaskType',0,8,182,2,16
	.word	11553
	.byte	5
	.byte	'Os_TickType',0,8,200,2,19
	.word	148
	.byte	5
	.byte	'TickType',0,8,206,2,21
	.word	148
	.byte	17,8,220,2,9,12,10
	.byte	'maxallowedvalue',0
	.word	148
	.byte	4,2,35,0,10
	.byte	'ticksperbase',0
	.word	148
	.byte	4,2,35,4,10
	.byte	'mincycle',0
	.word	148
	.byte	4,2,35,8,0,5
	.byte	'AlarmBaseType',0,8,228,2,2
	.word	12960
	.byte	20,8,128,3,9,1,21
	.byte	'APPLICATION_TERMINATED',0,0,21
	.byte	'APPLICATION_RESTARTING',0,1,21
	.byte	'APPLICATION_ACCESSIBLE',0,2,0,5
	.byte	'ApplicationStateType',0,8,133,3,3
	.word	13055
	.byte	20,8,177,3,9,1,21
	.byte	'OSServiceId_GetApplicationID',0,0,21
	.byte	'OSServiceId_GetISRID',0,1,21
	.byte	'OSServiceId_CallTrustedFunction',0,2,21
	.byte	'OSServiceId_CheckISRMemoryAccess',0,3,21
	.byte	'OSServiceId_CheckTaskMemoryAccess',0,4,21
	.byte	'OSServiceId_CheckObjectAccess',0,5,21
	.byte	'OSServiceId_CheckObjectOwnership',0,6,21
	.byte	'OSServiceId_StartScheduleTableRel',0,7,21
	.byte	'OSServiceId_StartScheduleTableAbs',0,8,21
	.byte	'OSServiceId_StopScheduleTable',0,9,21
	.byte	'OSServiceId_NextScheduleTable',0,10,21
	.byte	'OSServiceId_StartScheduleTableSynchron',0,11,21
	.byte	'OSServiceId_SyncScheduleTable',0,12,21
	.byte	'OSServiceId_SetScheduleTableAsync',0,13,21
	.byte	'OSServiceId_GetScheduleTableStatus',0,14,21
	.byte	'OSServiceId_IncrementCounter',0,15,21
	.byte	'OSServiceId_GetCounterValue',0,16,21
	.byte	'OSServiceId_GetElapsedValue',0,17,21
	.byte	'OSServiceId_TerminateApplication',0,18,21
	.byte	'OSServiceId_AllowAccess',0,19,21
	.byte	'OSServiceId_GetApplicationState',0,20,21
	.byte	'OSServiceId_GetNumberOfActivatedCores',0,21,21
	.byte	'OSServiceId_GetCoreID',0,22,21
	.byte	'OSServiceId_StartCore',0,23,21
	.byte	'OSServiceId_StartNonAutosarCore',0,24,21
	.byte	'OSServiceId_GetSpinlock',0,25,21
	.byte	'OSServiceId_ReleaseSpinlock',0,26,21
	.byte	'OSServiceId_TryToGetSpinlock',0,27,21
	.byte	'OSServiceId_ShutdownAllCores',0,28,21
	.byte	'OSServiceId_ControlIdle',0,29,21
	.byte	'OSServiceId_IocSend',0,30,21
	.byte	'OSServiceId_IocWrite',0,31,21
	.byte	'OSServiceId_IocSendGroup',0,32,21
	.byte	'OSServiceId_IocWriteGroup',0,33,21
	.byte	'OSServiceId_IocReceive',0,34,21
	.byte	'OSServiceId_IocRead',0,35,21
	.byte	'OSServiceId_IocReceiveGroup',0,36,21
	.byte	'OSServiceId_IocReadGroup',0,37,21
	.byte	'OSServiceId_IocEmptyQueue',0,38,21
	.byte	'OSServiceId_GetCurrentApplicationID',0,39,21
	.byte	'OSServiceId_GetExceptionContext',0,160,1,21
	.byte	'OSServiceId_SetExceptionContext',0,161,1,21
	.byte	'OSServiceId_CallNonTrustedFunction',0,162,1,21
	.byte	'OSServiceId_AppKill',0,163,1,21
	.byte	'OSServiceId_AlarmActionSetEvent',0,164,1,21
	.byte	'OSServiceId_AlarmActionActivateTask',0,165,1,21
	.byte	'OSServiceId_AlarmActionIncrementCounter',0,166,1,21
	.byte	'OSServiceId_AlarmActionCallback',0,167,1,21
	.byte	'OSServiceId_TimerIsr',0,168,1,21
	.byte	'OSServiceId_IsrWrapper',0,169,1,21
	.byte	'OSServiceId_GetTaskStackUsage',0,170,1,21
	.byte	'OSServiceId_GetISRStackUsage',0,171,1,21
	.byte	'OSServiceId_GetKernelStackUsage',0,172,1,21
	.byte	'OSServiceId_GetStartupHookStackUsage',0,173,1,21
	.byte	'OSServiceId_GetErrorHookStackUsage',0,174,1,21
	.byte	'OSServiceId_GetShutdownHookStackUsage',0,175,1,21
	.byte	'OSServiceId_GetProtectionHookStackUsage',0,176,1,21
	.byte	'OSServiceId_GetSemaphore',0,177,1,21
	.byte	'OSServiceId_ReleaseSemaphore',0,178,1,21
	.byte	'OSServiceId_ScheduleTableActivateTask',0,179,1,21
	.byte	'OSServiceId_ScheduleTableSetEvent',0,180,1,21
	.byte	'OSServiceId_DisableInterruptSource',0,181,1,21
	.byte	'OSServiceId_EnableInterruptSource',0,182,1,21
	.byte	'OSServiceId_ClearPendingInterrupt',0,183,1,21
	.byte	'OSServiceId_GetUnhandledIrq',0,184,1,21
	.byte	'OSServiceId_GetUnhandledExc',0,185,1,21
	.byte	'OSServiceId_HookCallCallback',0,186,1,21
	.byte	'OSServiceId_IsInterruptSourceEnabled',0,187,1,21
	.byte	'OSServiceId_IsInterruptPending',0,188,1,21
	.byte	'OSServiceId_CallFastTrustedFunction',0,189,1,21
	.byte	'OSServiceId_BarrierSynchronize',0,190,1,21
	.byte	'OSServiceId_InitialEnableInterruptSources',0,191,1,21
	.byte	'OSServiceId_GetCoreStartState',0,192,1,21
	.byte	'OSServiceId_StartOS',0,208,1,21
	.byte	'OSServiceId_GetActiveApplicationMode',0,210,1,21
	.byte	'OSServiceId_DisableAllInterrupts',0,211,1,21
	.byte	'OSServiceId_EnableAllInterrupts',0,212,1,21
	.byte	'OSServiceId_SuspendAllInterrupts',0,213,1,21
	.byte	'OSServiceId_ResumeAllInterrupts',0,214,1,21
	.byte	'OSServiceId_SuspendOSInterrupts',0,215,1,21
	.byte	'OSServiceId_ResumeOSInterrupts',0,216,1,21
	.byte	'OSServiceId_ActivateTask',0,217,1,21
	.byte	'OSServiceId_TerminateTask',0,218,1,21
	.byte	'OSServiceId_ChainTask',0,219,1,21
	.byte	'OSServiceId_GetTaskID',0,220,1,21
	.byte	'OSServiceId_GetTaskState',0,221,1,21
	.byte	'OSServiceId_Schedule',0,222,1,21
	.byte	'OSServiceId_SetEvent',0,223,1,21
	.byte	'OSServiceId_ClearEvent',0,224,1,21
	.byte	'OSServiceId_GetEvent',0,225,1,21
	.byte	'OSServiceId_WaitEvent',0,226,1,21
	.byte	'OSServiceId_GetAlarmBase',0,227,1,21
	.byte	'OSServiceId_GetAlarm',0,228,1,21
	.byte	'OSServiceId_SetRelAlarm',0,229,1,21
	.byte	'OSServiceId_SetAbsAlarm',0,230,1,21
	.byte	'OSServiceId_CancelAlarm',0,231,1,21
	.byte	'OSServiceId_GetResource',0,232,1,21
	.byte	'OSServiceId_ReleaseResource',0,233,1,21
	.byte	'OSSERVICEID_COUNT',0,255,1,0,5
	.byte	'OSServiceIdType',0,8,156,4,3
	.word	13167
	.byte	20,8,172,4,9,2,21
	.byte	'OS_STATUS_OK',0,0,21
	.byte	'OS_STATUS_CALLEVEL',0,2,21
	.byte	'OS_STATUS_LIMIT',0,4,21
	.byte	'OS_STATUS_RESOURCE',0,6,21
	.byte	'OS_STATUS_SERVICEID',0,9,21
	.byte	'OS_STATUS_ILLEGAL_ADDRESS',0,10,21
	.byte	'OS_STATUS_MISSINGEND',0,11,21
	.byte	'OS_STATUS_DISABLEDINT',0,12,21
	.byte	'OS_STATUS_STACKFAULT',0,13,21
	.byte	'OS_STATUS_PROTECTION_MEMORY',0,14,21
	.byte	'OS_STATUS_PROTECTION_TIME',0,15,21
	.byte	'OS_STATUS_PROTECTION_ARRIVAL',0,16,21
	.byte	'OS_STATUS_PROTECTION_LOCKED',0,17,21
	.byte	'OS_STATUS_PROTECTION_EXCEPTION',0,18,21
	.byte	'OS_STATUS_INTERFERENCE_DEADLOCK',0,19,21
	.byte	'OS_STATUS_NESTING_DEADLOCK',0,20,21
	.byte	'OS_STATUS_SPINLOCK',0,21,21
	.byte	'OS_STATUS_CORE',0,22,21
	.byte	'OS_STATUS_OVERFLOW',0,245,1,21
	.byte	'OS_STATUS_KILL_KERNEL_OBJ',0,246,1,21
	.byte	'OS_STATUS_NO_RESTARTTASK',0,247,1,21
	.byte	'OS_STATUS_CALL_NOT_ALLOWED',0,248,1,21
	.byte	'OS_STATUS_FUNCTION_UNAVAILABLE',0,249,1,21
	.byte	'OS_STATUS_PROTECTION_SYSCALL',0,250,1,21
	.byte	'OS_STATUS_PROTECTION_IRQ',0,251,1,21
	.byte	'OS_STATUS_API_ERROR',0,252,1,21
	.byte	'OS_STATUS_ASSERTION',0,253,1,21
	.byte	'OS_STATUS_OVERLOAD',0,254,1,21
	.byte	'OS_STATUS_ACCESSRIGHTS_1',0,129,2,21
	.byte	'OS_STATUS_CALLEVEL_SHARED_STACK',0,130,2,21
	.byte	'OS_STATUS_ID_1',0,131,2,21
	.byte	'OS_STATUS_UNLOCKED',0,133,2,21
	.byte	'OS_STATUS_STATE_1',0,135,2,21
	.byte	'OS_STATUS_VALUE_IS_ZERO_1',0,136,2,21
	.byte	'OS_STATUS_CORE_CROSS_DATA',0,150,2,21
	.byte	'OS_STATUS_PARAM_POINTER_1',0,151,2,21
	.byte	'OS_STATUS_STACKUSAGE_DISABLED_BY_CONFIG',0,241,3,21
	.byte	'OS_STATUS_NO_BARRIER_PARTICIPANT',0,242,3,21
	.byte	'OS_STATUS_UNIMPLEMENTED_CLEARPENDING',0,243,3,21
	.byte	'OS_STATUS_NO_NTFSTACK_POOL_EMPTY',0,244,3,21
	.byte	'OS_STATUS_ACCESSRIGHTS_2',0,129,4,21
	.byte	'OS_STATUS_CALLEVEL_CROSS_CORE_SYNC',0,130,4,21
	.byte	'OS_STATUS_ID_2',0,131,4,21
	.byte	'OS_STATUS_NOFUNC_1',0,133,4,21
	.byte	'OS_STATUS_STATE_2',0,135,4,21
	.byte	'OS_STATUS_VALUE_IS_ZERO_2',0,136,4,21
	.byte	'OS_STATUS_PARAM_POINTER_2',0,151,4,21
	.byte	'OS_STATUS_EVENT_DISABLED_BY_CONFIG',0,241,5,21
	.byte	'OS_STATUS_UNIMPLEMENTED_EXCEPTIONCONTEXT',0,243,5,21
	.byte	'OS_STATUS_NO_NTFSTACK_APPLIMIT_EXCEEDED',0,244,5,21
	.byte	'OS_STATUS_NOTACCESSIBLE_1',0,129,6,21
	.byte	'OS_STATUS_ID_TYPE_1',0,131,6,21
	.byte	'OS_STATUS_NOFUNC_2',0,133,6,21
	.byte	'OS_STATUS_STATE_STOPPED',0,135,6,21
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_1',0,136,6,21
	.byte	'OS_STATUS_PARAM_POINTER_3',0,151,6,21
	.byte	'OS_STATUS_NOTACCESSIBLE_2',0,129,8,21
	.byte	'OS_STATUS_ID_DIFFERENT_COUNTER',0,131,8,21
	.byte	'OS_STATUS_SPINLOCK_ORDER',0,133,8,21
	.byte	'OS_STATUS_STATE_RUNNING',0,135,8,21
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_2',0,136,8,21
	.byte	'OS_STATUS_NOEXTENDEDTASK_1',0,129,10,21
	.byte	'OS_STATUS_ID_DIFFERENT_SYNC',0,131,10,21
	.byte	'OS_STATUS_STOPPED_1',0,133,10,21
	.byte	'OS_STATUS_STATE_NEXTED',0,135,10,21
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_3',0,136,10,21
	.byte	'OS_STATUS_NOEXTENDEDTASK_2',0,129,12,21
	.byte	'OS_STATUS_HOOK_NOT_AVAILABLE',0,131,12,21
	.byte	'OS_STATUS_NOT_STOPPED_2',0,133,12,21
	.byte	'OS_STATUS_STATE_WAITING',0,135,12,21
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_1',0,136,12,21
	.byte	'OS_STATUS_NOEXTENDEDTASK_CALLER',0,129,14,21
	.byte	'OS_STATUS_NEXTED_1',0,133,14,21
	.byte	'OS_STATUS_STATE_NO_RESTART',0,135,14,21
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_2',0,136,14,21
	.byte	'OS_STATUS_LOCKED',0,129,16,21
	.byte	'OS_STATUS_KILLING_IS_DISABLED',0,133,16,21
	.byte	'OS_STATUS_STATE_ALREADY_TERMINATED',0,135,16,21
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_1',0,136,16,21
	.byte	'OS_STATUS_PRIORITY',0,129,18,21
	.byte	'OS_STATUS_ORDER',0,133,18,21
	.byte	'OS_STATUS_STATE_RESTARTING_NO_MEMBER',0,135,18,21
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_2',0,136,18,21
	.byte	'OS_STATUS_NOT_THE_OWNER_1',0,129,20,21
	.byte	'OS_STATUS_STATE_ALREADY_RESTARTING',0,135,20,21
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_3',0,136,20,21
	.byte	'OS_STATUS_VALUE_IS_NOT_BOOLEAN',0,136,22,0,5
	.byte	'Os_StatusType',0,8,232,5,3
	.word	16337
	.byte	17,8,133,6,9,4,10
	.byte	'Service',0
	.word	13167
	.byte	1,2,35,0,10
	.byte	'Error',0
	.word	131
	.byte	1,2,35,1,10
	.byte	'DetailedError',0
	.word	16337
	.byte	2,2,35,2,0,5
	.byte	'Os_ErrorInformationType',0,8,143,6,3
	.word	18867
	.byte	20,8,175,6,9,1,21
	.byte	'SCHEDULETABLE_STOPPED',0,0,21
	.byte	'SCHEDULETABLE_NEXT',0,1,21
	.byte	'SCHEDULETABLE_WAITING',0,2,21
	.byte	'SCHEDULETABLE_RUNNING',0,3,21
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,5
	.byte	'ScheduleTableStatusType',0,8,192,6,3
	.word	18962
	.byte	5
	.byte	'Os_AccessCheckAddress',0,8,199,6,29
	.word	148
	.byte	20,8,211,6,9,1,21
	.byte	'OS_MEM_ACCESS_TYPE_NON',0,0,21
	.byte	'OS_MEM_ACCESS_TYPE_R',0,1,21
	.byte	'OS_MEM_ACCESS_TYPE_READ',0,1,21
	.byte	'OS_MEM_ACCESS_TYPE_W',0,2,21
	.byte	'OS_MEM_ACCESS_TYPE_WRITE',0,2,21
	.byte	'OS_MEM_ACCESS_TYPE_RW',0,3,21
	.byte	'OS_MEM_ACCESS_TYPE_EXECUTE',0,4,21
	.byte	'OS_MEM_ACCESS_TYPE_X',0,4,21
	.byte	'OS_MEM_ACCESS_TYPE_RX',0,5,21
	.byte	'OS_MEM_ACCESS_TYPE_WX',0,6,21
	.byte	'OS_MEM_ACCESS_TYPE_RWX',0,7,21
	.byte	'OS_MEM_ACCESS_TYPE_S',0,8,21
	.byte	'OS_MEM_ACCESS_TYPE_STACK',0,8,21
	.byte	'OS_MEM_ACCESS_TYPE_RS',0,9,21
	.byte	'OS_MEM_ACCESS_TYPE_WS',0,10,21
	.byte	'OS_MEM_ACCESS_TYPE_RWS',0,11,21
	.byte	'OS_MEM_ACCESS_TYPE_XS',0,12,21
	.byte	'OS_MEM_ACCESS_TYPE_RXS',0,13,21
	.byte	'OS_MEM_ACCESS_TYPE_WXS',0,14,21
	.byte	'OS_MEM_ACCESS_TYPE_RWXS',0,15,0,5
	.byte	'Os_MemAccessType',0,8,233,6,3
	.word	19166
	.byte	5
	.byte	'tCanLLCanIntOld',0,9,161,3,37
	.word	148
	.byte	5
	.byte	'Can_OsIsrType',0,9,165,3,17
	.word	5223
	.byte	5
	.byte	'Can_ExternalTickType',0,9,178,3,18
	.word	148
	.byte	7,32
	.word	148
	.byte	8,7,0,5
	.byte	'Can_LoopTimeout_dim_type',0,9,183,3,44
	.word	19773
	.byte	5
	.byte	'Can_ControllerConfigIterType',0,9,192,13,21
	.word	131
	.byte	5
	.byte	'Can_PduOfActiveSendObjectType',0,9,148,14,19
	.word	131
	.byte	5
	.byte	'Can_StateOfActiveSendObjectType',0,9,151,14,16
	.word	204
	.byte	5
	.byte	'Can_BTPType',0,9,154,14,16
	.word	148
	.byte	5
	.byte	'Can_RXBCOfBufferConfigType',0,9,160,14,15
	.word	131
	.byte	5
	.byte	'Can_RXF0COfBufferConfigType',0,9,163,14,16
	.word	148
	.byte	5
	.byte	'Can_RXF1COfBufferConfigType',0,9,166,14,15
	.word	131
	.byte	5
	.byte	'Can_TXBCOfBufferConfigType',0,9,169,14,16
	.word	148
	.byte	5
	.byte	'Can_TXEFCOfBufferConfigType',0,9,172,14,15
	.word	131
	.byte	5
	.byte	'Can_CanIfChannelIdType',0,9,190,14,15
	.word	131
	.byte	5
	.byte	'Can_CanSubSystemBaseAdrType',0,9,193,14,16
	.word	148
	.byte	5
	.byte	'Can_BasisAdrOfControllerConfigType',0,9,196,14,16
	.word	148
	.byte	5
	.byte	'Can_CanControllerDefaultBaudrateIdxOfControllerConfigType',0,9,199,14,15
	.word	131
	.byte	5
	.byte	'Can_CanControllerDefaultBaudrateOfControllerConfigType',0,9,202,14,16
	.word	204
	.byte	5
	.byte	'Can_IsTTCanOfControllerConfigType',0,9,205,14,17
	.word	131
	.byte	5
	.byte	'Can_MailboxRxBasicEndIdxOfControllerConfigType',0,9,208,14,15
	.word	131
	.byte	5
	.byte	'Can_MailboxRxBasicLengthOfControllerConfigType',0,9,211,14,15
	.word	131
	.byte	5
	.byte	'Can_MailboxRxBasicStartIdxOfControllerConfigType',0,9,214,14,15
	.word	131
	.byte	5
	.byte	'Can_MailboxTxBasicEndIdxOfControllerConfigType',0,9,220,14,15
	.word	131
	.byte	5
	.byte	'Can_MailboxTxBasicLengthOfControllerConfigType',0,9,223,14,15
	.word	131
	.byte	5
	.byte	'Can_MailboxTxBasicStartIdxOfControllerConfigType',0,9,226,14,15
	.word	131
	.byte	5
	.byte	'Can_RxBasicHwStartOfControllerConfigType',0,9,232,14,15
	.word	131
	.byte	5
	.byte	'Can_RxBasicHwStopOfControllerConfigType',0,9,235,14,15
	.word	131
	.byte	5
	.byte	'Can_RxFullHwStartOfControllerConfigType',0,9,238,14,15
	.word	131
	.byte	5
	.byte	'Can_RxFullHwStopOfControllerConfigType',0,9,241,14,15
	.word	131
	.byte	5
	.byte	'Can_RxSelectionOfControllerConfigType',0,9,244,14,15
	.word	131
	.byte	5
	.byte	'Can_TxBasicHwStartOfControllerConfigType',0,9,247,14,15
	.word	131
	.byte	5
	.byte	'Can_TxBasicHwStopOfControllerConfigType',0,9,250,14,15
	.word	131
	.byte	5
	.byte	'Can_TxFullHwStartOfControllerConfigType',0,9,253,14,15
	.word	131
	.byte	5
	.byte	'Can_TxFullHwStopOfControllerConfigType',0,9,128,15,15
	.word	131
	.byte	5
	.byte	'Can_UnusedHwStartOfControllerConfigType',0,9,131,15,15
	.word	131
	.byte	5
	.byte	'Can_UnusedHwStopOfControllerConfigType',0,9,134,15,15
	.word	131
	.byte	5
	.byte	'Can_BusOffNotificationOfControllerDataType',0,9,137,15,15
	.word	131
	.byte	5
	.byte	'Can_BusOffTransitionRequestOfControllerDataType',0,9,140,15,15
	.word	131
	.byte	5
	.byte	'Can_CanInterruptCounterOfControllerDataType',0,9,143,15,15
	.word	131
	.byte	5
	.byte	'Can_IntEnableOfControllerDataType',0,9,146,15,16
	.word	148
	.byte	5
	.byte	'Can_IsBusOffOfControllerDataType',0,9,149,15,17
	.word	131
	.byte	5
	.byte	'Can_LastInitObjectOfControllerDataType',0,9,152,15,15
	.word	131
	.byte	5
	.byte	'Can_LastStateOfControllerDataType',0,9,155,15,15
	.word	131
	.byte	5
	.byte	'Can_LogStatusOfControllerDataType',0,9,158,15,15
	.word	131
	.byte	5
	.byte	'Can_ModeTransitionRequestOfControllerDataType',0,9,161,15,15
	.word	131
	.byte	5
	.byte	'Can_NonFdObjectsPendingFlagOfControllerDataType',0,9,164,15,16
	.word	148
	.byte	5
	.byte	'Can_PrevModeOfControllerDataType',0,9,167,15,15
	.word	131
	.byte	5
	.byte	'Can_RamCheckTransitionRequestOfControllerDataType',0,9,170,15,15
	.word	131
	.byte	5
	.byte	'Can_TXBCROfControllerDataType',0,9,173,15,16
	.word	148
	.byte	5
	.byte	'Can_TXBRPOfControllerDataType',0,9,176,15,16
	.word	148
	.byte	5
	.byte	'Can_FBTPType',0,9,179,15,16
	.word	148
	.byte	5
	.byte	'Can_GFCType',0,9,182,15,15
	.word	131
	.byte	5
	.byte	'Can_INT_PriorityType',0,9,185,15,15
	.word	131
	.byte	5
	.byte	'Can_INT_RoutingGroupType',0,9,188,15,15
	.word	131
	.byte	5
	.byte	'Can_InitObjectBaudrateType',0,9,191,15,16
	.word	204
	.byte	5
	.byte	'Can_InitObjectFdBrsConfigType',0,9,194,15,15
	.word	131
	.byte	5
	.byte	'Can_InitObjectStartIndexType',0,9,197,15,15
	.word	131
	.byte	5
	.byte	'Can_ActiveSendObjectOfMailboxType',0,9,200,15,15
	.word	131
	.byte	5
	.byte	'Can_ControllerConfigIdxOfMailboxType',0,9,203,15,15
	.word	131
	.byte	5
	.byte	'Can_FdPaddingOfMailboxType',0,9,206,15,15
	.word	131
	.byte	5
	.byte	'Can_HwHandleOfMailboxType',0,9,209,15,15
	.word	131
	.byte	5
	.byte	'Can_IDValueOfMailboxType',0,9,212,15,15
	.word	131
	.byte	5
	.byte	'Can_MailboxSizeOfMailboxType',0,9,215,15,15
	.word	131
	.byte	5
	.byte	'Can_MailboxTypeOfMailboxType',0,9,218,15,15
	.word	131
	.byte	5
	.byte	'Can_MaxDataLenOfMailboxType',0,9,221,15,15
	.word	131
	.byte	5
	.byte	'Can_MemorySectionsIndexOfMailboxType',0,9,224,15,15
	.word	131
	.byte	5
	.byte	'Can_MemorySectionStartOfMemorySectionInfoType',0,9,227,15,15
	.word	131
	.byte	5
	.byte	'Can_HwHandleOfMemorySectionObjectsType',0,9,230,15,15
	.word	131
	.byte	5
	.byte	'Can_MailboxElementOfMemorySectionObjectsType',0,9,233,15,15
	.word	131
	.byte	5
	.byte	'Can_MailboxHandleOfMemorySectionObjectsType',0,9,236,15,15
	.word	131
	.byte	5
	.byte	'Can_FLSSAOfSIDFCType',0,9,242,15,15
	.word	131
	.byte	5
	.byte	'Can_LSSOfSIDFCType',0,9,245,15,15
	.word	131
	.byte	5
	.byte	'Can_SIDFEEndIdxOfSIDFCType',0,9,248,15,15
	.word	131
	.byte	5
	.byte	'Can_SIDFEStartIdxOfSIDFCType',0,9,251,15,15
	.word	131
	.byte	5
	.byte	'Can_SIDFEType',0,9,129,16,16
	.word	148
	.byte	5
	.byte	'Can_SRN_AddressType',0,9,132,16,16
	.word	148
	.byte	5
	.byte	'Can_RXBAOfShmAdrType',0,9,135,16,16
	.word	148
	.byte	5
	.byte	'Can_RXF0AOfShmAdrType',0,9,138,16,16
	.word	148
	.byte	5
	.byte	'Can_RXF1AOfShmAdrType',0,9,141,16,16
	.word	148
	.byte	5
	.byte	'Can_SIDFAOfShmAdrType',0,9,144,16,16
	.word	148
	.byte	5
	.byte	'Can_StartAdrOfShmAdrType',0,9,147,16,16
	.word	148
	.byte	5
	.byte	'Can_StopAdrOfShmAdrType',0,9,150,16,16
	.word	148
	.byte	5
	.byte	'Can_TXBAOfShmAdrType',0,9,153,16,16
	.word	148
	.byte	5
	.byte	'Can_TXEFAOfShmAdrType',0,9,156,16,16
	.word	148
	.byte	5
	.byte	'Can_XIDFAOfShmAdrType',0,9,159,16,16
	.word	148
	.byte	5
	.byte	'Can_F0DSOfShmElementSizeType',0,9,162,16,15
	.word	131
	.byte	5
	.byte	'Can_F1DSOfShmElementSizeType',0,9,165,16,15
	.word	131
	.byte	5
	.byte	'Can_RBDSOfShmElementSizeType',0,9,168,16,15
	.word	131
	.byte	5
	.byte	'Can_TBDSOfShmElementSizeType',0,9,171,16,15
	.word	131
	.byte	5
	.byte	'Can_TEFBDSOfShmElementSizeType',0,9,174,16,15
	.word	131
	.byte	5
	.byte	'Can_TDCRType',0,9,130,17,15
	.word	131
	.byte	5
	.byte	'Can_XIDAMType',0,9,133,17,16
	.word	148
	.byte	5
	.byte	'Can_FLESAOfXIDFCType',0,9,136,17,15
	.word	131
	.byte	5
	.byte	'Can_LSEOfXIDFCType',0,9,139,17,15
	.word	131
	.byte	5
	.byte	'Can_EIDFE_0OfXIDFEType',0,9,142,17,15
	.word	131
	.byte	5
	.byte	'Can_EIDFE_1OfXIDFEType',0,9,145,17,15
	.word	131
	.byte	9
	.byte	'sCan_ActiveSendObjectType',0,9,161,17,16,4,10
	.byte	'StateOfActiveSendObject',0
	.word	204
	.byte	2,2,35,0,10
	.byte	'PduOfActiveSendObject',0
	.word	131
	.byte	1,2,35,2,0,5
	.byte	'Can_ActiveSendObjectType',0,9,165,17,3
	.word	23581
	.byte	9
	.byte	'sCan_BufferConfigType',0,9,168,17,16,12,10
	.byte	'RXF0COfBufferConfig',0
	.word	148
	.byte	4,2,35,0,10
	.byte	'TXBCOfBufferConfig',0
	.word	148
	.byte	4,2,35,4,10
	.byte	'RXBCOfBufferConfig',0
	.word	131
	.byte	1,2,35,8,10
	.byte	'RXF1COfBufferConfig',0
	.word	131
	.byte	1,2,35,9,10
	.byte	'TXEFCOfBufferConfig',0
	.word	131
	.byte	1,2,35,10,0,5
	.byte	'Can_BufferConfigType',0,9,175,17,3
	.word	23712
	.byte	9
	.byte	'sCan_ControllerConfigType',0,9,178,17,16,28,10
	.byte	'BasisAdrOfControllerConfig',0
	.word	148
	.byte	4,2,35,0,10
	.byte	'CanControllerDefaultBaudrateOfControllerConfig',0
	.word	204
	.byte	2,2,35,4,10
	.byte	'IsTTCanOfControllerConfig',0
	.word	131
	.byte	1,2,35,6,10
	.byte	'CanControllerDefaultBaudrateIdxOfControllerConfig',0
	.word	131
	.byte	1,2,35,7,10
	.byte	'MailboxRxBasicEndIdxOfControllerConfig',0
	.word	131
	.byte	1,2,35,8,10
	.byte	'MailboxRxBasicLengthOfControllerConfig',0
	.word	131
	.byte	1,2,35,9,10
	.byte	'MailboxRxBasicStartIdxOfControllerConfig',0
	.word	131
	.byte	1,2,35,10,10
	.byte	'MailboxTxBasicEndIdxOfControllerConfig',0
	.word	131
	.byte	1,2,35,11,10
	.byte	'MailboxTxBasicLengthOfControllerConfig',0
	.word	131
	.byte	1,2,35,12,10
	.byte	'MailboxTxBasicStartIdxOfControllerConfig',0
	.word	131
	.byte	1,2,35,13,10
	.byte	'RxBasicHwStartOfControllerConfig',0
	.word	131
	.byte	1,2,35,14,10
	.byte	'RxBasicHwStopOfControllerConfig',0
	.word	131
	.byte	1,2,35,15,10
	.byte	'RxFullHwStartOfControllerConfig',0
	.word	131
	.byte	1,2,35,16,10
	.byte	'RxFullHwStopOfControllerConfig',0
	.word	131
	.byte	1,2,35,17,10
	.byte	'RxSelectionOfControllerConfig',0
	.word	131
	.byte	1,2,35,18,10
	.byte	'TxBasicHwStartOfControllerConfig',0
	.word	131
	.byte	1,2,35,19,10
	.byte	'TxBasicHwStopOfControllerConfig',0
	.word	131
	.byte	1,2,35,20,10
	.byte	'TxFullHwStartOfControllerConfig',0
	.word	131
	.byte	1,2,35,21,10
	.byte	'TxFullHwStopOfControllerConfig',0
	.word	131
	.byte	1,2,35,22,10
	.byte	'UnusedHwStartOfControllerConfig',0
	.word	131
	.byte	1,2,35,23,10
	.byte	'UnusedHwStopOfControllerConfig',0
	.word	131
	.byte	1,2,35,24,0,5
	.byte	'Can_ControllerConfigType',0,9,201,17,3
	.word	23914
	.byte	9
	.byte	'sCan_ControllerDataType',0,9,204,17,16,64,10
	.byte	'IntEnableOfControllerData',0
	.word	148
	.byte	4,2,35,0,10
	.byte	'NonFdObjectsPendingFlagOfControllerData',0
	.word	148
	.byte	4,2,35,4,10
	.byte	'TXBCROfControllerData',0
	.word	148
	.byte	4,2,35,8,10
	.byte	'TXBRPOfControllerData',0
	.word	148
	.byte	4,2,35,12,10
	.byte	'BusOffNotificationOfControllerData',0
	.word	131
	.byte	1,2,35,16,10
	.byte	'BusOffTransitionRequestOfControllerData',0
	.word	131
	.byte	1,2,35,17,10
	.byte	'CanInterruptCounterOfControllerData',0
	.word	131
	.byte	1,2,35,18,10
	.byte	'IsBusOffOfControllerData',0
	.word	131
	.byte	1,2,35,19,10
	.byte	'LastInitObjectOfControllerData',0
	.word	131
	.byte	1,2,35,20,10
	.byte	'LastStateOfControllerData',0
	.word	131
	.byte	1,2,35,21,10
	.byte	'LogStatusOfControllerData',0
	.word	131
	.byte	1,2,35,22,10
	.byte	'ModeTransitionRequestOfControllerData',0
	.word	131
	.byte	1,2,35,23,10
	.byte	'PrevModeOfControllerData',0
	.word	131
	.byte	1,2,35,24,10
	.byte	'RamCheckTransitionRequestOfControllerData',0
	.word	131
	.byte	1,2,35,25,10
	.byte	'CanInterruptOldStatusOfControllerData',0
	.word	148
	.byte	4,2,35,26,10
	.byte	'LoopTimeoutOfControllerData',0
	.word	19782
	.byte	32,2,35,30,0,5
	.byte	'Can_ControllerDataType',0,9,222,17,3
	.word	24907
	.byte	7,32
	.word	148
	.byte	8,7,0,9
	.byte	'sCan_MailboxType',0,9,225,17,16,12,10
	.byte	'ActiveSendObjectOfMailbox',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'ControllerConfigIdxOfMailbox',0
	.word	131
	.byte	1,2,35,1,10
	.byte	'FdPaddingOfMailbox',0
	.word	131
	.byte	1,2,35,2,10
	.byte	'HwHandleOfMailbox',0
	.word	131
	.byte	1,2,35,3,10
	.byte	'IDValueOfMailbox',0
	.word	131
	.byte	1,2,35,4,10
	.byte	'MailboxSizeOfMailbox',0
	.word	131
	.byte	1,2,35,5,10
	.byte	'MailboxTypeOfMailbox',0
	.word	131
	.byte	1,2,35,6,10
	.byte	'MaxDataLenOfMailbox',0
	.word	131
	.byte	1,2,35,7,10
	.byte	'MemorySectionsIndexOfMailbox',0
	.word	131
	.byte	1,2,35,8,0,5
	.byte	'Can_MailboxType',0,9,236,17,3
	.word	25623
	.byte	9
	.byte	'sCan_MemorySectionInfoType',0,9,239,17,16,1,10
	.byte	'MemorySectionStartOfMemorySectionInfo',0
	.word	131
	.byte	1,2,35,0,0,5
	.byte	'Can_MemorySectionInfoType',0,9,242,17,3
	.word	25953
	.byte	9
	.byte	'sCan_MemorySectionObjectsType',0,9,245,17,16,4,10
	.byte	'HwHandleOfMemorySectionObjects',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'MailboxElementOfMemorySectionObjects',0
	.word	131
	.byte	1,2,35,1,10
	.byte	'MailboxHandleOfMemorySectionObjects',0
	.word	131
	.byte	1,2,35,2,0,5
	.byte	'Can_MemorySectionObjectsType',0,9,250,17,3
	.word	26069
	.byte	9
	.byte	'sCan_SIDFCType',0,9,253,17,16,4,10
	.byte	'FLSSAOfSIDFC',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'LSSOfSIDFC',0
	.word	131
	.byte	1,2,35,1,10
	.byte	'SIDFEEndIdxOfSIDFC',0
	.word	131
	.byte	1,2,35,2,10
	.byte	'SIDFEStartIdxOfSIDFC',0
	.word	131
	.byte	1,2,35,3,0,5
	.byte	'Can_SIDFCType',0,9,131,18,3
	.word	26275
	.byte	9
	.byte	'sCan_ShmAdrType',0,9,134,18,16,36,10
	.byte	'RXBAOfShmAdr',0
	.word	148
	.byte	4,2,35,0,10
	.byte	'RXF0AOfShmAdr',0
	.word	148
	.byte	4,2,35,4,10
	.byte	'RXF1AOfShmAdr',0
	.word	148
	.byte	4,2,35,8,10
	.byte	'SIDFAOfShmAdr',0
	.word	148
	.byte	4,2,35,12,10
	.byte	'StartAdrOfShmAdr',0
	.word	148
	.byte	4,2,35,16,10
	.byte	'StopAdrOfShmAdr',0
	.word	148
	.byte	4,2,35,20,10
	.byte	'TXBAOfShmAdr',0
	.word	148
	.byte	4,2,35,24,10
	.byte	'TXEFAOfShmAdr',0
	.word	148
	.byte	4,2,35,28,10
	.byte	'XIDFAOfShmAdr',0
	.word	148
	.byte	4,2,35,32,0,5
	.byte	'Can_ShmAdrType',0,9,145,18,3
	.word	26420
	.byte	9
	.byte	'sCan_ShmElementSizeType',0,9,148,18,16,6,10
	.byte	'F0DSOfShmElementSize',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'F1DSOfShmElementSize',0
	.word	131
	.byte	1,2,35,1,10
	.byte	'RBDSOfShmElementSize',0
	.word	131
	.byte	1,2,35,2,10
	.byte	'TBDSOfShmElementSize',0
	.word	131
	.byte	1,2,35,3,10
	.byte	'TEFBDSOfShmElementSize',0
	.word	131
	.byte	1,2,35,4,0,5
	.byte	'Can_ShmElementSizeType',0,9,155,18,3
	.word	26677
	.byte	9
	.byte	'sCan_XIDFCType',0,9,158,18,16,2,10
	.byte	'FLESAOfXIDFC',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'LSEOfXIDFC',0
	.word	131
	.byte	1,2,35,1,0,5
	.byte	'Can_XIDFCType',0,9,162,18,3
	.word	26892
	.byte	9
	.byte	'sCan_XIDFEType',0,9,165,18,16,2,10
	.byte	'EIDFE_0OfXIDFE',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'EIDFE_1OfXIDFE',0
	.word	131
	.byte	1,2,35,1,0,5
	.byte	'Can_XIDFEType',0,9,169,18,3
	.word	26979
	.byte	5
	.byte	'Can_PCConfigType',0,9,146,19,3
	.word	5748
	.byte	5
	.byte	'Can_ConfigType',0,9,148,19,26
	.word	5748
	.byte	7,4
	.word	148
	.byte	8,0,0,6
	.word	27122
	.byte	35
	.byte	'Can_BTP',0,9,192,19,38
	.word	27131
	.byte	1,1,7,12
	.word	23712
	.byte	8,0,0,6
	.word	27155
	.byte	35
	.byte	'Can_BufferConfig',0,9,216,19,47
	.word	27164
	.byte	1,1,7,1
	.word	131
	.byte	8,0,0,6
	.word	27197
	.byte	35
	.byte	'Can_CanIfChannelId',0,9,233,19,49
	.word	27206
	.byte	1,1,7,4
	.word	148
	.byte	8,0,0,6
	.word	27241
	.byte	35
	.byte	'Can_CanSubSystemBaseAdr',0,9,246,19,54
	.word	27250
	.byte	1,1,7,28
	.word	23914
	.byte	8,0,0,6
	.word	27290
	.byte	35
	.byte	'Can_ControllerConfig',0,9,158,20,51
	.word	27299
	.byte	1,1,7,4
	.word	148
	.byte	8,0,0,6
	.word	27336
	.byte	35
	.byte	'Can_FBTP',0,9,175,20,39
	.word	27345
	.byte	1,1,7,1
	.word	131
	.byte	8,0,0,6
	.word	27370
	.byte	35
	.byte	'Can_GFC',0,9,188,20,38
	.word	27379
	.byte	1,1,7,1
	.word	131
	.byte	8,0,0,6
	.word	27403
	.byte	35
	.byte	'Can_INT_RoutingGroup',0,9,222,20,51
	.word	27412
	.byte	1,1,7,2
	.word	204
	.byte	8,0,0,6
	.word	27449
	.byte	35
	.byte	'Can_InitObjectBaudrate',0,9,239,20,53
	.word	27458
	.byte	1,1,7,1
	.word	131
	.byte	8,0,0,6
	.word	27497
	.byte	35
	.byte	'Can_InitObjectFdBrsConfig',0,9,128,21,56
	.word	27506
	.byte	1,1,7,2
	.word	131
	.byte	8,1,0,6
	.word	27548
	.byte	35
	.byte	'Can_InitObjectStartIndex',0,9,145,21,55
	.word	27557
	.byte	1,1,7,1
	.word	5223
	.byte	8,0,0,6
	.word	27598
	.byte	35
	.byte	'Can_IsrOsId',0,9,162,21,40
	.word	27607
	.byte	1,1,7,24
	.word	25623
	.byte	8,1,0,6
	.word	27635
	.byte	35
	.byte	'Can_Mailbox',0,9,190,21,42
	.word	27644
	.byte	1,1,7,1
	.word	25953
	.byte	8,0,0,6
	.word	27672
	.byte	35
	.byte	'Can_MemorySectionInfo',0,9,210,21,52
	.word	27681
	.byte	1,1,7,128,1
	.word	26069
	.byte	8,31,0,6
	.word	27719
	.byte	35
	.byte	'Can_MemorySectionObjects',0,9,232,21,55
	.word	27729
	.byte	1,1,7,4
	.word	26275
	.byte	8,0,0,6
	.word	27770
	.byte	35
	.byte	'Can_SIDFC',0,9,255,21,40
	.word	27779
	.byte	1,1,7,4
	.word	148
	.byte	8,0,0,6
	.word	27805
	.byte	35
	.byte	'Can_SIDFE',0,9,144,22,40
	.word	27814
	.byte	1,1,7,36
	.word	26420
	.byte	8,0,0,6
	.word	27840
	.byte	35
	.byte	'Can_ShmAdr',0,9,189,22,41
	.word	27849
	.byte	1,1,7,6
	.word	26677
	.byte	8,0,0,6
	.word	27876
	.byte	35
	.byte	'Can_ShmElementSize',0,9,213,22,49
	.word	27885
	.byte	1,1,7,1
	.word	131
	.byte	8,0,0,6
	.word	27920
	.byte	35
	.byte	'Can_TDCR',0,9,230,22,39
	.word	27929
	.byte	1,1,7,4
	.word	148
	.byte	8,0,0,6
	.word	27954
	.byte	35
	.byte	'Can_XIDAM',0,9,243,22,40
	.word	27963
	.byte	1,1,7,4
	.word	23581
	.byte	8,0,0,35
	.byte	'Can_ActiveSendObject',0,9,178,23,54
	.word	27989
	.byte	1,1,7,64
	.word	24907
	.byte	8,0,0,35
	.byte	'Can_ControllerData',0,9,213,23,52
	.word	28030
	.byte	1,1,5
	.byte	'CanInitHandle',0,2,223,8,33
	.word	204
	.byte	5
	.byte	'tCanTxId0',0,2,226,8,33
	.word	148
	.byte	5
	.byte	'tCanDlc',0,2,236,8,17
	.word	148
	.byte	5
	.byte	'tAlign32bit',0,2,143,9,3
	.word	1735
	.byte	3
	.word	260
	.byte	5
	.byte	'tElmType',0,2,162,9,3
	.word	28149
	.byte	3
	.word	260
	.byte	5
	.byte	'CanElmType',0,2,163,9,34
	.word	28172
	.byte	5
	.byte	'tCanFdType',0,2,179,9,33
	.word	148
	.byte	5
	.byte	'tCanFdBrsType',0,2,180,9,33
	.word	148
	.byte	3
	.word	2449
	.byte	5
	.byte	'tCanChipMsgPtr',0,2,134,10,3
	.word	28240
	.byte	5
	.byte	'tRXFnS',0,2,151,10,3
	.word	2820
	.byte	17,2,156,10,3,4,36,1
	.word	131
	.byte	2,6,2,35,0,18
	.byte	'FOSA',0,2
	.word	204
	.byte	14,0,2,35,0,18
	.byte	'F0S',0,1
	.word	131
	.byte	7,1,2,35,2,36,1
	.word	131
	.byte	1,0,2,35,2,18
	.byte	'F0WM',0,1
	.word	131
	.byte	7,1,2,35,3,36,1
	.word	131
	.byte	1,0,2,35,3,0,19
	.byte	'tRXFnCTag',0,2,153,10,15,4,10
	.byte	'R',0
	.word	148
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	28285
	.byte	4,2,35,0,0,5
	.byte	'tRXFnC',0,2,165,10,3
	.word	28372
	.byte	17,2,171,10,3,4,18
	.byte	'F0DS',0,1
	.word	131
	.byte	3,5,2,35,0,36,1
	.word	131
	.byte	1,4,2,35,0,18
	.byte	'F1DS',0,1
	.word	131
	.byte	3,1,2,35,0,36,1
	.word	131
	.byte	1,0,2,35,0,18
	.byte	'RBDS',0,1
	.word	131
	.byte	3,5,2,35,1,36,4
	.word	148
	.byte	21,0,2,35,0,0,19
	.byte	'tRXESCTag',0,2,168,10,15,4,10
	.byte	'R',0
	.word	148
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	28427
	.byte	4,2,35,0,0,5
	.byte	'tRXESC',0,2,180,10,3
	.word	28515
	.byte	17,2,185,10,3,4,18
	.byte	'TFFL',0,1
	.word	131
	.byte	6,2,2,35,0,36,1
	.word	131
	.byte	2,0,2,35,0,18
	.byte	'TFGI',0,1
	.word	131
	.byte	5,3,2,35,1,36,1
	.word	131
	.byte	3,0,2,35,1,18
	.byte	'TFQPI',0,1
	.word	131
	.byte	5,3,2,35,2,18
	.byte	'TFQF',0,1
	.word	131
	.byte	1,2,2,35,2,36,2
	.word	204
	.byte	10,0,2,35,2,0,19
	.byte	'tTXFQSTag',0,2,182,10,15,4,10
	.byte	'R',0
	.word	148
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	28570
	.byte	4,2,35,0,0,5
	.byte	'tTXFQS',0,2,195,10,3
	.word	28675
	.byte	17,2,200,10,3,4,18
	.byte	'EFFL',0,1
	.word	131
	.byte	6,2,2,35,0,18
	.byte	'r1',0,1
	.word	131
	.byte	2,0,2,35,0,18
	.byte	'EFGI',0,1
	.word	131
	.byte	5,3,2,35,1,36,4
	.word	148
	.byte	11,8,2,35,0,18
	.byte	'EFF',0,1
	.word	131
	.byte	1,7,2,35,3,18
	.byte	'TEFL',0,1
	.word	131
	.byte	1,6,2,35,3,18
	.byte	'r0',0,1
	.word	131
	.byte	6,0,2,35,3,0,19
	.byte	'tTXEFSTag',0,2,197,10,15,4,10
	.byte	'R',0
	.word	148
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	28730
	.byte	4,2,35,0,0,5
	.byte	'tTXEFS',0,2,210,10,3
	.word	28839
	.byte	5
	.byte	'CanIf_TxBufferSizeType',0,19,184,1,15
	.word	131
	.byte	5
	.byte	'CanIf_ControllerModeType',0,5,195,2,3
	.word	4346
	.byte	20,5,215,2,9,1,21
	.byte	'CANIF_GET_OFFLINE',0,0,21
	.byte	'CANIF_GET_RX_ONLINE',0,1,21
	.byte	'CANIF_GET_TX_ONLINE',0,2,21
	.byte	'CANIF_GET_ONLINE',0,3,21
	.byte	'CANIF_GET_OFFLINE_ACTIVE',0,4,21
	.byte	'CANIF_GET_OFFLINE_ACTIVE_RX_ONLINE',0,5,21
	.byte	'CANIF_NO_MODE_PDU_GET_MODE_TYPE_END',0,6,0,5
	.byte	'CanIf_PduGetModeType',0,5,228,2,3
	.word	28960
	.byte	20,5,231,2,9,1,21
	.byte	'CANIF_RxBasicCANMailbox',0,0,21
	.byte	'CANIF_RxFullCANMailbox',0,1,21
	.byte	'CANIF_TxBasicCANMailbox',0,2,21
	.byte	'CANIF_TxFullCANMailbox',0,3,21
	.byte	'CANIF_UnusedCANMailbox',0,4,0,5
	.byte	'CanIf_MailBoxTypeType',0,5,238,2,3
	.word	29182
	.byte	20,5,241,2,9,1,21
	.byte	'CanIf_SimpleRxIndicationLayout',0,0,21
	.byte	'CanIf_AdvancedRxIndicationLayout',0,1,21
	.byte	'CanIf_NmOsekRxIndicationLayout',0,2,21
	.byte	'CanIf_CddRxIndicationLayout',0,3,0,5
	.byte	'CanIf_RxIndicationLayoutType',0,5,247,2,3
	.word	29347
	.byte	37,1,1,23
	.word	131
	.byte	0,4
	.word	29523
	.byte	5
	.byte	'CanIf_TxConfirmationFctType',0,5,175,3,9
	.word	29532
	.byte	6
	.word	131
	.byte	4
	.word	29574
	.byte	37,1,1,23
	.word	131
	.byte	23
	.word	29579
	.byte	0,4
	.word	29584
	.byte	5
	.byte	'CanIf_SimpleRxIndicationFctType',0,5,181,3,9
	.word	29598
	.byte	17,16,197,1,9,8,10
	.byte	'SduDataPtr',0
	.word	11827
	.byte	4,2,35,0,10
	.byte	'SduLength',0
	.word	131
	.byte	1,2,35,4,0,6
	.word	29644
	.byte	4
	.word	29690
	.byte	37,1,1,23
	.word	131
	.byte	23
	.word	29695
	.byte	0,4
	.word	29700
	.byte	5
	.byte	'CanIf_AdvancedRxIndicationFctType',0,5,186,3,9
	.word	29714
	.byte	4
	.word	131
	.byte	37,1,1,23
	.word	131
	.byte	23
	.word	29579
	.byte	23
	.word	204
	.byte	0,4
	.word	29767
	.byte	5
	.byte	'CanIf_NmOsekRxIndicationFctType',0,5,190,3,9
	.word	29786
	.byte	37,1,1,23
	.word	131
	.byte	23
	.word	29695
	.byte	23
	.word	204
	.byte	0,4
	.word	29832
	.byte	5
	.byte	'CanIf_CddRxIndicationFctType',0,5,194,3,9
	.word	29851
	.byte	37,1,1,23
	.word	131
	.byte	23
	.word	4346
	.byte	0,4
	.word	29894
	.byte	5
	.byte	'CanIf_CtrlModeIndicationFctType',0,5,198,3,9
	.word	29908
	.byte	5
	.byte	'CanIf_BusOffNotificationFctType',0,5,202,3,9
	.word	29532
	.byte	16,5,203,4,9,4,10
	.byte	'eSimpleRxIndicationType',0
	.word	29603
	.byte	4,2,35,0,10
	.byte	'eAdvancedRxIndicationType',0
	.word	29719
	.byte	4,2,35,0,10
	.byte	'eNmOsekRxIndicationType',0
	.word	29791
	.byte	4,2,35,0,10
	.byte	'eCddRxIndicationType',0
	.word	29856
	.byte	4,2,35,0,0,5
	.byte	'CanIf_RxIndicationFctType',0,5,209,4,3
	.word	29995
	.byte	4
	.word	29584
	.byte	4
	.word	29700
	.byte	4
	.word	29767
	.byte	4
	.word	29832
	.byte	9
	.byte	'sCanIf_TxQueueBaseType',0,5,222,4,16,1,10
	.byte	'eSduLength',0
	.word	131
	.byte	1,2,35,0,0,5
	.byte	'CanIf_TxQueueBaseType',0,5,228,4,3
	.word	30188
	.byte	9
	.byte	'sCanIf_TxQueueBaseWithDataType',0,5,231,4,16,1,10
	.byte	'eBaseParams',0
	.word	30188
	.byte	1,2,35,0,0,5
	.byte	'CanIf_TxQueueBaseWithDataType',0,5,237,4,3
	.word	30269
	.byte	9
	.byte	'sCanIf_TxPrioByCanIdByteQueueType',0,5,242,4,16,2,10
	.byte	'eQueueParams',0
	.word	30269
	.byte	1,2,35,0,10
	.byte	'eQueued',0
	.word	131
	.byte	1,2,35,1,0,5
	.byte	'CanIf_TxPrioByCanIdByteQueueType',0,5,246,4,3
	.word	30367
	.byte	9
	.byte	'sCanIf_TxBufferPrioByCanIdBaseType',0,5,128,5,16,1,10
	.byte	'eQueueCounter',0
	.word	131
	.byte	1,2,35,0,0,5
	.byte	'CanIf_TxBufferPrioByCanIdBaseType',0,5,131,5,3
	.word	30489
	.byte	5
	.byte	'CanIf_MappedTxBuffersConfigEndIdxOfCanIfCtrlId2MappedTxBuffersConfigType',0,19,138,9,15
	.word	131
	.byte	5
	.byte	'CanIf_MappedTxBuffersConfigStartIdxOfCanIfCtrlId2MappedTxBuffersConfigType',0,19,141,9,15
	.word	131
	.byte	5
	.byte	'CanIf_CtrlStatesIdxOfMailBoxConfigType',0,19,150,9,15
	.word	131
	.byte	5
	.byte	'CanIf_PduIdFirstOfMailBoxConfigType',0,19,153,9,15
	.word	131
	.byte	5
	.byte	'CanIf_PduIdLastOfMailBoxConfigType',0,19,156,9,15
	.word	131
	.byte	5
	.byte	'CanIf_TxBufferCfgIdxOfMailBoxConfigType',0,19,159,9,15
	.word	131
	.byte	5
	.byte	'CanIf_TxBufferHandlingTypeOfMailBoxConfigType',0,19,165,9,15
	.word	131
	.byte	5
	.byte	'CanIf_MailBoxConfigIdxOfMappedTxBuffersConfigType',0,19,168,9,15
	.word	131
	.byte	5
	.byte	'CanIf_RxIndicationFctListIdxOfRxPduConfigType',0,19,171,9,15
	.word	131
	.byte	5
	.byte	'CanIf_RxPduCanIdOfRxPduConfigType',0,19,174,9,15
	.word	131
	.byte	5
	.byte	'CanIf_RxPduDlcOfRxPduConfigType',0,19,177,9,15
	.word	131
	.byte	5
	.byte	'CanIf_RxPduMaskOfRxPduConfigType',0,19,180,9,16
	.word	204
	.byte	5
	.byte	'CanIf_UpperPduIdOfRxPduConfigType',0,19,183,9,19
	.word	131
	.byte	5
	.byte	'CanIf_TxBufferPrioByCanIdBaseIdxOfTxBufferPrioByCanIdByteQueueConfigType',0,19,231,9,15
	.word	131
	.byte	5
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusEndIdxOfTxBufferPrioByCanIdByteQueueConfigType',0,19,234
	.byte	9,15
	.word	131
	.byte	5
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusLengthOfTxBufferPrioByCanIdByteQueueConfigType',0,19,237
	.byte	9,15
	.word	131
	.byte	5
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusStartIdxOfTxBufferPrioByCanIdByteQueueConfigType',0,19
	.byte	240,9,15
	.word	131
	.byte	5
	.byte	'CanIf_TxPduConfigIdxOfTxBufferPrioByCanIdByteQueueMappedTxPdusType',0,19,243,9,15
	.word	131
	.byte	5
	.byte	'CanIf_CanIdOfTxPduConfigType',0,19,246,9,16
	.word	204
	.byte	5
	.byte	'CanIf_CtrlStatesIdxOfTxPduConfigType',0,19,249,9,15
	.word	131
	.byte	5
	.byte	'CanIf_IsTxPduTruncationOfTxPduConfigType',0,19,252,9,17
	.word	131
	.byte	5
	.byte	'CanIf_MailBoxConfigIdxOfTxPduConfigType',0,19,255,9,15
	.word	131
	.byte	5
	.byte	'CanIf_TxConfirmationFctListIdxOfTxPduConfigType',0,19,130,10,15
	.word	131
	.byte	5
	.byte	'CanIf_TxPduLengthOfTxPduConfigType',0,19,133,10,15
	.word	131
	.byte	5
	.byte	'CanIf_UpperLayerTxPduIdOfTxPduConfigType',0,19,136,10,19
	.word	131
	.byte	5
	.byte	'CanIf_TxQueueIdxOfTxPduQueueIndexType',0,19,139,10,15
	.word	131
	.byte	5
	.byte	'CanIf_TxQueueIndex2DataStartStopIdxOfTxPduQueueIndexType',0,19,142,10,15
	.word	131
	.byte	5
	.byte	'CanIf_TxQueueDataType',0,19,151,10,15
	.word	131
	.byte	5
	.byte	'CanIf_TxQueueDataEndIdxOfTxQueueIndex2DataStartStopType',0,19,154,10,15
	.word	131
	.byte	5
	.byte	'CanIf_TxQueueDataLengthOfTxQueueIndex2DataStartStopType',0,19,157,10,15
	.word	131
	.byte	5
	.byte	'CanIf_TxQueueDataStartIdxOfTxQueueIndex2DataStartStopType',0,19,160,10,15
	.word	131
	.byte	9
	.byte	'sCanIf_CanIfCtrlId2MappedTxBuffersConfigType',0,19,183,10,16,2,10
	.byte	'MappedTxBuffersConfigEndIdxOfCanIfCtrlId2MappedTxBuffersConfig',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'MappedTxBuffersConfigStartIdxOfCanIfCtrlId2MappedTxBuffersConfig',0
	.word	131
	.byte	1,2,35,1,0,5
	.byte	'CanIf_CanIfCtrlId2MappedTxBuffersConfigType',0,19,187,10,3
	.word	32428
	.byte	9
	.byte	'sCanIf_CtrlStatesType',0,19,190,10,16,2,10
	.byte	'CtrlModeOfCtrlStates',0
	.word	4346
	.byte	1,2,35,0,10
	.byte	'PduModeOfCtrlStates',0
	.word	28960
	.byte	1,2,35,1,0,5
	.byte	'CanIf_CtrlStatesType',0,19,194,10,3
	.word	32679
	.byte	9
	.byte	'sCanIf_MailBoxConfigType',0,19,200,10,16,6,10
	.byte	'CtrlStatesIdxOfMailBoxConfig',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'PduIdFirstOfMailBoxConfig',0
	.word	131
	.byte	1,2,35,1,10
	.byte	'PduIdLastOfMailBoxConfig',0
	.word	131
	.byte	1,2,35,2,10
	.byte	'TxBufferCfgIdxOfMailBoxConfig',0
	.word	131
	.byte	1,2,35,3,10
	.byte	'TxBufferHandlingTypeOfMailBoxConfig',0
	.word	131
	.byte	1,2,35,4,10
	.byte	'MailBoxTypeOfMailBoxConfig',0
	.word	29182
	.byte	1,2,35,5,0,5
	.byte	'CanIf_MailBoxConfigType',0,19,208,10,3
	.word	32797
	.byte	9
	.byte	'sCanIf_MappedTxBuffersConfigType',0,19,214,10,16,1,10
	.byte	'MailBoxConfigIdxOfMappedTxBuffersConfig',0
	.word	131
	.byte	1,2,35,0,0,5
	.byte	'CanIf_MappedTxBuffersConfigType',0,19,217,10,3
	.word	33089
	.byte	9
	.byte	'sCanIf_RxIndicationFctListType',0,19,220,10,16,8,10
	.byte	'RxIndicationFctOfRxIndicationFctList',0
	.word	29995
	.byte	4,2,35,0,10
	.byte	'RxIndicationLayoutOfRxIndicationFctList',0
	.word	29347
	.byte	1,2,35,4,0,5
	.byte	'CanIf_RxIndicationFctListType',0,19,224,10,3
	.word	33219
	.byte	9
	.byte	'sCanIf_RxPduConfigType',0,19,230,10,16,6,10
	.byte	'RxPduMaskOfRxPduConfig',0
	.word	204
	.byte	2,2,35,0,10
	.byte	'UpperPduIdOfRxPduConfig',0
	.word	131
	.byte	1,2,35,2,10
	.byte	'RxIndicationFctListIdxOfRxPduConfig',0
	.word	131
	.byte	1,2,35,3,10
	.byte	'RxPduCanIdOfRxPduConfig',0
	.word	131
	.byte	1,2,35,4,10
	.byte	'RxPduDlcOfRxPduConfig',0
	.word	131
	.byte	1,2,35,5,0,5
	.byte	'CanIf_RxPduConfigType',0,19,237,10,3
	.word	33391
	.byte	9
	.byte	'sCanIf_TxBufferPrioByCanIdByteQueueConfigType',0,19,245,10,16,4,10
	.byte	'TxBufferPrioByCanIdBaseIdxOfTxBufferPrioByCanIdByteQueueConfig',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'TxBufferPrioByCanIdByteQueueMappedTxPdusEndIdxOfTxBufferPrioByCanIdByteQueueConfig',0
	.word	131
	.byte	1,2,35,1,10
	.byte	'TxBufferPrioByCanIdByteQueueMappedTxPdusLengthOfTxBufferPrioByCanIdByteQueueConfig',0
	.word	131
	.byte	1,2,35,2,10
	.byte	'TxBufferPrioByCanIdByteQueueMappedTxPdusStartIdxOfTxBufferPrioByCanIdByteQueueConfig',0
	.word	131
	.byte	1,2,35,3,0,5
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueConfigType',0,19,251,10,3
	.word	33626
	.byte	9
	.byte	'sCanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusType',0,19,129,11,16,1,10
	.byte	'TxPduConfigIdxOfTxBufferPrioByCanIdByteQueueMappedTxPdus',0
	.word	131
	.byte	1,2,35,0,0,5
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusType',0,19,132,11,3
	.word	34083
	.byte	9
	.byte	'sCanIf_TxPduConfigType',0,19,140,11,16,8,10
	.byte	'CanIdOfTxPduConfig',0
	.word	204
	.byte	2,2,35,0,10
	.byte	'UpperLayerTxPduIdOfTxPduConfig',0
	.word	131
	.byte	1,2,35,2,10
	.byte	'IsTxPduTruncationOfTxPduConfig',0
	.word	131
	.byte	1,2,35,3,10
	.byte	'CtrlStatesIdxOfTxPduConfig',0
	.word	131
	.byte	1,2,35,4,10
	.byte	'MailBoxConfigIdxOfTxPduConfig',0
	.word	131
	.byte	1,2,35,5,10
	.byte	'TxConfirmationFctListIdxOfTxPduConfig',0
	.word	131
	.byte	1,2,35,6,10
	.byte	'TxPduLengthOfTxPduConfig',0
	.word	131
	.byte	1,2,35,7,0,5
	.byte	'CanIf_TxPduConfigType',0,19,149,11,3
	.word	34268
	.byte	9
	.byte	'sCanIf_TxPduQueueIndexType',0,19,155,11,16,2,10
	.byte	'TxQueueIdxOfTxPduQueueIndex',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'TxQueueIndex2DataStartStopIdxOfTxPduQueueIndex',0
	.word	131
	.byte	1,2,35,1,0,5
	.byte	'CanIf_TxPduQueueIndexType',0,19,159,11,3
	.word	34593
	.byte	9
	.byte	'sCanIf_TxQueueIndex2DataStartStopType',0,19,166,11,16,4,10
	.byte	'TxQueueDataEndIdxOfTxQueueIndex2DataStartStop',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'TxQueueDataLengthOfTxQueueIndex2DataStartStop',0
	.word	131
	.byte	1,2,35,1,10
	.byte	'TxQueueDataStartIdxOfTxQueueIndex2DataStartStop',0
	.word	131
	.byte	1,2,35,2,0,5
	.byte	'CanIf_TxQueueIndex2DataStartStopType',0,19,171,11,3
	.word	34755
	.byte	9
	.byte	'CanIf_CtrlStatesStructSTag',0,19,183,11,16,2,10
	.byte	'CT_testCANFDdbc_2c920817',0
	.word	32679
	.byte	2,2,35,0,0,5
	.byte	'CanIf_CtrlStatesStructSType',0,19,186,11,3
	.word	35013
	.byte	9
	.byte	'CanIf_TxBufferPrioByCanIdBaseStructSTag',0,19,189,11,16,1,10
	.byte	'CHNL_7a25eeb6',0
	.word	30489
	.byte	1,2,35,0,0,5
	.byte	'CanIf_TxBufferPrioByCanIdBaseStructSType',0,19,192,11,3
	.word	35118
	.byte	9
	.byte	'CanIf_TxQueueStructSTag',0,19,195,11,16,6,10
	.byte	'TxMessage3_otestCANFDdbc_547b0ac5_Tx',0
	.word	30367
	.byte	2,2,35,0,10
	.byte	'TxMessage22_otestCANFDdbc_f66bbf36_Tx',0
	.word	30367
	.byte	2,2,35,2,10
	.byte	'TxMessage1_otestCANFDdbc_815f4c47_Tx',0
	.word	30367
	.byte	2,2,35,4,0,5
	.byte	'CanIf_TxQueueStructSType',0,19,200,11,3
	.word	35238
	.byte	7,32
	.word	131
	.byte	8,31,0,7,8
	.word	131
	.byte	8,7,0,7,64
	.word	131
	.byte	8,63,0,9
	.byte	'CanIf_TxQueueDataStructSTag',0,19,203,11,16,104,10
	.byte	'TxMessage3_otestCANFDdbc_547b0ac5_Tx',0
	.word	35442
	.byte	32,2,35,0,10
	.byte	'TxMessage22_otestCANFDdbc_f66bbf36_Tx',0
	.word	35451
	.byte	8,2,35,32,10
	.byte	'TxMessage1_otestCANFDdbc_815f4c47_Tx',0
	.word	35460
	.byte	64,2,35,40,0,5
	.byte	'CanIf_TxQueueDataStructSType',0,19,208,11,3
	.word	35469
	.byte	9
	.byte	'sCanIf_PCConfigType',0,19,189,12,16,1,10
	.byte	'CanIf_PCConfigNeverUsed',0
	.word	131
	.byte	1,2,35,0,0,5
	.byte	'CanIf_PCConfigType',0,19,192,12,3
	.word	35681
	.byte	9
	.byte	'sDet_PCConfigType',0,20,238,1,16,1,10
	.byte	'Det_PCConfigNeverUsed',0
	.word	131
	.byte	1,2,35,0,0,5
	.byte	'Det_PCConfigType',0,20,241,1,3
	.word	35769
	.byte	5
	.byte	'tCanRxInfoStruct',0,3,130,9,3
	.word	2581
	.byte	9
	.byte	'sCanTxConfInfoStruct',0,3,133,9,16,72,10
	.byte	'pChipMsgObj',0
	.word	2524
	.byte	4,2,35,0,10
	.byte	'pChipData',0
	.word	2557
	.byte	4,2,35,4,10
	.byte	'tmpTXB',0
	.word	1735
	.byte	64,2,35,8,0,5
	.byte	'tCanTxConfInfoStruct',0,3,139,9,3
	.word	35877
	.byte	5
	.byte	'tCanInitParaStruct',0,3,185,9,3
	.word	327
	.byte	5
	.byte	'tCanTxTransmissionParaStruct',0,3,224,9,3
	.word	1180
	.byte	5
	.byte	'tCanRxBasicParaStruct',0,3,240,9,3
	.word	2874
	.byte	3
	.word	260
	.byte	9
	.byte	'sCanRxFullParaStruct',0,3,243,9,16,100,10
	.byte	'mailboxHandle',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'hwObjHandle',0
	.word	131
	.byte	1,2,35,1,10
	.byte	'rxStruct',0
	.word	2581
	.byte	16,2,35,4,10
	.byte	'pShm',0
	.word	322
	.byte	4,2,35,20,10
	.byte	'objectNumber',0
	.word	204
	.byte	2,2,35,24,10
	.byte	'bfElm',0
	.word	36088
	.byte	72,2,35,28,0,5
	.byte	'tCanRxFullParaStruct',0,3,252,9,3
	.word	36093
	.byte	5
	.byte	'tCanTxConfirmationParaStruct',0,3,149,10,3
	.word	1768
	.byte	9
	.byte	'sCanTaskParaStruct',0,3,152,10,16,2,10
	.byte	'mailboxHandle',0
	.word	131
	.byte	1,2,35,0,10
	.byte	'hwObjHandle',0
	.word	131
	.byte	1,2,35,1,0,5
	.byte	'tCanTaskParaStruct',0,3,157,10,3
	.word	36302
.L1267:
	.byte	6
	.word	131
.L1268:
	.byte	6
	.word	131
.L1269:
	.byte	6
	.word	131
	.byte	7,16
	.word	131
	.byte	8,15,0
.L1270:
	.byte	6
	.word	36415
	.byte	7,65
	.word	131
	.byte	8,64,0
.L1271:
	.byte	6
	.word	36429
	.byte	7,8
	.word	131
	.byte	8,7,0
.L1272:
	.byte	6
	.word	36443
.L1273:
	.byte	6
	.word	5819
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L432:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,53,0,73,19,0,0,4,15,0,73,19
	.byte	0,0,5,22,0,3,8,58,15,59,15,57,15,73,19,0,0,6,38,0,73,19,0,0,7,1,1,11,15,73,19,0,0,8,33,0,47,15,0,0,9,19
	.byte	1,3,8,58,15,59,15,57,15,11,15,0,0,10,13,0,3,8,73,19,11,15,56,9,0,0,11,46,1,3,8,32,13,58,15,59,15,57,15
	.byte	73,19,54,15,39,12,0,0,12,5,0,3,8,58,15,59,15,57,15,73,19,0,0,13,11,0,0,0,14,11,1,0,0,15,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,16,23,1,58,15,59,15,57,15,11,15,0,0,17,19,1,58,15,59,15,57,15,11,15
	.byte	0,0,18,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,19,23,1,3,8,58,15,59,15,57,15,11,15,0,0,20,4,1,58,15
	.byte	59,15,57,15,11,15,0,0,21,40,0,3,8,28,13,0,0,22,46,1,3,8,54,15,39,12,63,12,60,12,0,0,23,5,0,73,19,0,0,24
	.byte	46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,25,5,0,3,8,73,19,0,0,26,46,0,3,8,58,15,59,15,57,15,54,15,39
	.byte	12,63,12,60,12,0,0,27,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,28,46,1,3,8,58,15,59
	.byte	15,57,15,54,15,39,12,63,12,60,12,0,0,29,46,1,49,19,0,0,30,5,0,49,19,0,0,31,29,1,49,19,0,0,32,11,1,49,19
	.byte	0,0,33,11,0,49,19,0,0,34,21,0,54,15,0,0,35,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,36,13,0,11
	.byte	15,73,19,13,15,12,15,56,9,0,0,37,21,1,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L433:
	.word	.L1447-.L1446
.L1446:
	.half	3
	.word	.L1449-.L1448
.L1448:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Can\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\appl\\GenData',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\CanIf\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation',0,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0
	.byte	'Can.h',0,1,0,0
	.byte	'..\\component\\Can\\Implementation\\Can_Local.h',0,0,0,0
	.byte	'Can_DrvGeneralTypes.h',0,2,0,0
	.byte	'CanIf_Types.h',0,3,0,0
	.byte	'Os.h',0,4,0,0
	.byte	'Os_Types_Lcfg.h',0,2,0,0
	.byte	'Os_Types.h',0,4,0,0
	.byte	'Can_Cfg.h',0,2,0,0
	.byte	'CanIf_Cbk.h',0,3,0,0
	.byte	'CanIf.h',0,3,0,0
	.byte	'Det.h',0,5,0,0
	.byte	'Platform_Types.h',0,6,0,0
	.byte	'Std_Types.h',0,6,0,0
	.byte	'ComStack_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,6,0,0
	.byte	'Os_Hal_Os_Types.h',0,4,0,0
	.byte	'Os_Hal_OsInt.h',0,4,0,0
	.byte	'CanIf_Cfg.h',0,2,0,0
	.byte	'Det_Cfg.h',0,2,0,0,0
.L1449:
.L1447:
	.sdecl	'.debug_info',debug,cluster('Can_InitMemory')
	.sect	'.debug_info'
.L434:
	.word	182
	.half	3
	.word	.L435
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L437,.L436
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_InitMemory',0,1,158,64,32,1,1,1
	.word	.L391,.L667,.L390
	.byte	4
	.word	.L391,.L667
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_InitMemory')
	.sect	'.debug_abbrev'
.L435:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_InitMemory')
	.sect	'.debug_line'
.L436:
	.word	.L1451-.L1450
.L1450:
	.half	3
	.word	.L1453-.L1452
.L1452:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1453:
	.byte	5,3,7,0,5,2
	.word	.L391
	.byte	3,162,192,0,1,5,23,9
	.half	.L1454-.L391
	.byte	1,5,21,1,5,1,9
	.half	.L1455-.L1454
	.byte	3,10,1,7,9
	.half	.L438-.L1455
	.byte	0,1,1
.L1451:
	.sdecl	'.debug_ranges',debug,cluster('Can_InitMemory')
	.sect	'.debug_ranges'
.L437:
	.word	-1,.L391,0,.L438-.L391,0,0
	.sdecl	'.debug_info',debug,cluster('Can_Init')
	.sect	'.debug_info'
.L439:
	.word	658
	.half	3
	.word	.L440
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L442,.L441
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_Init',0,1,209,66,32,1,1,1
	.word	.L397,.L668,.L396
	.byte	4
	.byte	'ConfigPtr',0,1,209,66,60
	.word	.L669,.L670
	.byte	5
	.word	.L397,.L668
	.byte	6
	.byte	'errorId',0,1,212,66,9
	.word	.L671,.L672
	.byte	7
	.word	.L673,.L674,.L164
	.byte	8
	.word	.L675,.L674,.L164
	.byte	7
	.word	.L676,.L674,.L677
	.byte	9
	.word	.L678,.L674,.L677
	.byte	0,7
	.word	.L679,.L677,.L164
	.byte	8
	.word	.L680,.L677,.L164
	.byte	6
	.byte	'idx',0,1,147,44,16
	.word	.L681,.L682
	.byte	6
	.byte	'length',0,1,148,44,12
	.word	.L683,.L684
	.byte	0,0,0,0,7
	.word	.L685,.L686,.L687
	.byte	9
	.word	.L688,.L686,.L687
	.byte	0,5
	.word	.L687,.L174
	.byte	7
	.word	.L689,.L690,.L691
	.byte	10
	.word	.L692,.L693
	.byte	10
	.word	.L694,.L695
	.byte	10
	.word	.L696,.L697
	.byte	11
	.word	.L698,.L699
	.byte	6
	.byte	'transitionState',0,1,156,14,9
	.word	.L671,.L702
	.byte	7
	.word	.L703,.L704,.L705
	.byte	10
	.word	.L706,.L707
	.byte	11
	.word	.L708,.L709
	.byte	6
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L713
	.byte	6
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L714
	.byte	8
	.word	.L715,.L716,.L168
	.byte	6
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L717
	.byte	6
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L718
	.byte	0,0,0,7
	.word	.L703,.L710,.L711
	.byte	10
	.word	.L706,.L707
	.byte	0,0,0,7
	.word	.L689,.L700,.L701
	.byte	10
	.word	.L692,.L693
	.byte	10
	.word	.L694,.L695
	.byte	10
	.word	.L696,.L697
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_Init')
	.sect	'.debug_abbrev'
.L440:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,5,0,49,16,2,6,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_Init')
	.sect	'.debug_line'
.L441:
	.word	.L1457-.L1456
.L1456:
	.half	3
	.word	.L1459-.L1458
.L1458:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1459:
	.byte	5,7,7,0,5,2
	.word	.L397
	.byte	3,249,194,0,1,5,11,9
	.half	.L1460-.L397
	.byte	3,93,1,5,32,3,122,1,5,3,9
	.half	.L1361-.L1460
	.byte	3,41,1,5,7,7,9
	.half	.L1461-.L1361
	.byte	3,21,1,5,27,9
	.half	.L1462-.L1461
	.byte	1,5,25,1,5,3,9
	.half	.L674-.L1462
	.byte	3,158,112,1,5,7,9
	.half	.L1362-.L674
	.byte	3,15,1,5,33,9
	.half	.L1463-.L1362
	.byte	3,1,1,5,7,9
	.half	.L1364-.L1463
	.byte	3,127,1,9
	.half	.L1464-.L1364
	.byte	3,1,1,5,19,9
	.half	.L1465-.L1464
	.byte	1,5,31,9
	.half	.L1466-.L1465
	.byte	1,5,33,9
	.half	.L1467-.L1466
	.byte	3,1,1,5,7,9
	.half	.L1468-.L1467
	.byte	1,5,33,9
	.half	.L1469-.L1468
	.byte	1,5,19,9
	.half	.L1470-.L1469
	.byte	1,5,31,9
	.half	.L1471-.L1470
	.byte	1,5,33,9
	.half	.L1472-.L1471
	.byte	3,1,1,5,7,9
	.half	.L1473-.L1472
	.byte	1,5,19,9
	.half	.L1474-.L1473
	.byte	1,5,31,9
	.half	.L1475-.L1474
	.byte	1,5,7,9
	.half	.L1476-.L1475
	.byte	3,1,1,5,19,9
	.half	.L1477-.L1476
	.byte	1,5,31,9
	.half	.L1478-.L1477
	.byte	1,5,7,9
	.half	.L1479-.L1478
	.byte	3,1,1,5,19,9
	.half	.L1480-.L1479
	.byte	1,5,31,9
	.half	.L1481-.L1480
	.byte	1,5,7,9
	.half	.L1482-.L1481
	.byte	3,1,1,5,19,9
	.half	.L1483-.L1482
	.byte	1,5,31,9
	.half	.L1484-.L1483
	.byte	1,5,3,9
	.half	.L1485-.L1484
	.byte	3,5,1,5,44,9
	.half	.L677-.L1485
	.byte	3,212,120,1,5,15,9
	.half	.L1486-.L677
	.byte	1,5,37,9
	.half	.L1487-.L1486
	.byte	3,1,1,5,42,9
	.half	.L1488-.L1487
	.byte	3,127,1,5,73,9
	.half	.L1365-.L1488
	.byte	1,5,24,9
	.half	.L1489-.L1365
	.byte	3,1,1,7,9
	.half	.L1490-.L1489
	.byte	1,5,16,9
	.half	.L163-.L1490
	.byte	3,2,1,5,24,3,126,1,5,29,7,9
	.half	.L164-.L163
	.byte	3,254,22,1,5,27,1,5,11,9
	.half	.L1363-.L164
	.byte	3,12,1,9
	.half	.L1491-.L1363
	.byte	3,1,1,9
	.half	.L1492-.L1491
	.byte	3,1,1,3,127,1,9
	.half	.L1493-.L1492
	.byte	3,1,1,9
	.half	.L1494-.L1493
	.byte	3,1,1,9
	.half	.L1495-.L1494
	.byte	3,1,1,9
	.half	.L1496-.L1495
	.byte	3,1,1,5,46,9
	.half	.L686-.L1496
	.byte	3,238,91,1,5,33,9
	.half	.L1497-.L686
	.byte	3,1,1,5,39,9
	.half	.L1498-.L1497
	.byte	3,2,1,5,37,3,127,1,9
	.half	.L1499-.L1498
	.byte	3,1,1,9
	.half	.L1500-.L1499
	.byte	3,1,1,5,13,9
	.half	.L687-.L1500
	.byte	3,154,36,1,5,118,9
	.half	.L690-.L687
	.byte	3,233,74,1,5,13,9
	.half	.L691-.L690
	.byte	3,151,53,1,5,118,9
	.half	.L700-.L691
	.byte	3,233,74,1,5,19,9
	.half	.L1367-.L700
	.byte	1,5,3,9
	.half	.L1368-.L1367
	.byte	3,1,1,5,5,7,9
	.half	.L1501-.L1368
	.byte	3,2,1,5,87,9
	.half	.L166-.L1501
	.byte	3,3,1,5,106,9
	.half	.L1502-.L166
	.byte	1,5,122,9
	.half	.L1503-.L1502
	.byte	1,5,11,9
	.half	.L704-.L1503
	.byte	3,147,125,1,5,17,3,26,1,5,23,9
	.half	.L705-.L704
	.byte	3,211,2,1,5,15,3,173,125,1,5,10,9
	.half	.L710-.L705
	.byte	3,104,1,5,47,3,27,1,5,27,9
	.half	.L716-.L710
	.byte	1,5,59,1,5,5,9
	.half	.L1369-.L716
	.byte	1,5,22,7,9
	.half	.L1504-.L1369
	.byte	3,7,1,5,7,9
	.half	.L1505-.L1504
	.byte	1,5,16,7,9
	.half	.L1506-.L1505
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L167-.L1506
	.byte	3,7,1,5,3,9
	.half	.L168-.L167
	.byte	3,9,1,5,5,7,9
	.half	.L1507-.L168
	.byte	3,2,1,5,7,9
	.half	.L170-.L1507
	.byte	3,182,2,1,5,42,7,9
	.half	.L711-.L170
	.byte	3,1,1,5,5,7,9
	.half	.L171-.L711
	.byte	3,1,1,5,3,9
	.half	.L165-.L171
	.byte	3,2,1,5,5,7,9
	.half	.L1508-.L165
	.byte	3,3,1,9
	.half	.L1509-.L1508
	.byte	3,1,1,9
	.half	.L1510-.L1509
	.byte	3,1,1,5,13,9
	.half	.L172-.L1510
	.byte	3,137,53,1,5,15,7,9
	.half	.L701-.L172
	.byte	3,2,1,5,85,9
	.half	.L1511-.L701
	.byte	1,5,23,9
	.half	.L161-.L1511
	.byte	3,5,1,5,3,9
	.half	.L174-.L161
	.byte	3,11,1,5,5,7,9
	.half	.L1512-.L174
	.byte	3,2,1,5,1,9
	.half	.L175-.L1512
	.byte	3,6,1,7,9
	.half	.L443-.L175
	.byte	0,1,1
.L1457:
	.sdecl	'.debug_ranges',debug,cluster('Can_Init')
	.sect	'.debug_ranges'
.L442:
	.word	-1,.L397,0,.L443-.L397,0,0
.L699:
	.word	-1,.L397,.L690-.L397,.L691-.L397,.L700-.L397,.L701-.L397,0,0
.L709:
	.word	-1,.L397,.L704-.L397,.L705-.L397,.L710-.L397,.L711-.L397,0,0
	.sdecl	'.debug_info',debug,cluster('Can_ChangeBaudrate')
	.sect	'.debug_info'
.L444:
	.word	564
	.half	3
	.word	.L445
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L447,.L446
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_ChangeBaudrate',0,1,198,64,42
	.word	.L671
	.byte	1,1,1
	.word	.L393,.L719,.L392
	.byte	4
	.byte	'Controller',0,1,198,64,68
	.word	.L671,.L720
	.byte	4
	.byte	'Baudrate',0,1,198,64,120
	.word	.L721,.L722
	.byte	5
	.word	.L723
	.byte	6
	.byte	'retval',0,1,201,64,18
	.word	.L671,.L724
	.byte	6
	.byte	'errorId',0,1,202,64,9
	.word	.L671,.L725
	.byte	7
	.word	.L144,.L143
	.byte	6
	.byte	'baudrateIndex',0,1,229,64,17
	.word	.L671,.L726
	.byte	7
	.word	.L727,.L148
	.byte	8
	.word	.L689,.L727,.L728
	.byte	9
	.word	.L692,.L729
	.byte	9
	.word	.L694,.L730
	.byte	9
	.word	.L696,.L731
	.byte	10
	.word	.L698,.L727,.L728
	.byte	6
	.byte	'transitionState',0,1,156,14,9
	.word	.L671,.L732
	.byte	8
	.word	.L703,.L733,.L734
	.byte	9
	.word	.L706,.L735
	.byte	11
	.word	.L708,.L736
	.byte	6
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L739
	.byte	6
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L740
	.byte	10
	.word	.L715,.L741,.L152
	.byte	6
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L742
	.byte	6
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L743
	.byte	0,0,0,8
	.word	.L703,.L737,.L738
	.byte	9
	.word	.L706,.L735
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_ChangeBaudrate')
	.sect	'.debug_abbrev'
.L445:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,8,29,1,49,16,17,1,18,1,0,0,9,5,0,49,16,2,6,0
	.byte	0,10,11,1,49,16,17,1,18,1,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_ChangeBaudrate')
	.sect	'.debug_line'
.L446:
	.word	.L1514-.L1513
.L1513:
	.half	3
	.word	.L1516-.L1515
.L1515:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1516:
	.byte	5,12,7,0,5,2
	.word	.L393
	.byte	3,202,192,0,1,5,42,3,123,1,5,11,9
	.half	.L1351-.L393
	.byte	3,6,1,5,29,9
	.half	.L1354-.L1351
	.byte	3,5,1,5,8,1,5,3,9
	.half	.L1517-.L1354
	.byte	1,5,13,7,9
	.half	.L1518-.L1517
	.byte	3,2,1,5,27,1,5,9,9
	.half	.L142-.L1518
	.byte	3,10,1,5,3,9
	.half	.L1519-.L142
	.byte	1,5,13,7,9
	.half	.L1520-.L1519
	.byte	3,2,1,5,31,1,5,26,9
	.half	.L144-.L1520
	.byte	3,7,1,5,11,9
	.half	.L1356-.L144
	.byte	3,2,1,5,121,9
	.half	.L1521-.L1356
	.byte	3,126,1,5,11,9
	.half	.L147-.L1521
	.byte	3,2,1,5,7,9
	.half	.L1522-.L147
	.byte	1,5,83,7,9
	.half	.L727-.L1522
	.byte	3,184,77,1,5,9,3,203,50,1,5,118,9
	.half	.L1523-.L727
	.byte	3,181,77,1,5,19,9
	.half	.L1355-.L1523
	.byte	1,5,3,9
	.half	.L1357-.L1355
	.byte	3,1,1,5,5,7,9
	.half	.L1524-.L1357
	.byte	3,2,1,5,122,9
	.half	.L150-.L1524
	.byte	3,3,1,5,11,9
	.half	.L733-.L150
	.byte	3,147,125,1,5,17,3,26,1,5,23,9
	.half	.L734-.L733
	.byte	3,211,2,1,5,15,3,173,125,1,5,10,9
	.half	.L737-.L734
	.byte	3,104,1,5,47,3,27,1,5,27,9
	.half	.L741-.L737
	.byte	1,5,59,1,5,5,9
	.half	.L1358-.L741
	.byte	1,5,22,7,9
	.half	.L1525-.L1358
	.byte	3,7,1,5,7,9
	.half	.L1526-.L1525
	.byte	1,5,16,7,9
	.half	.L1527-.L1526
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L151-.L1527
	.byte	3,7,1,5,3,9
	.half	.L152-.L151
	.byte	3,9,1,5,5,7,9
	.half	.L1528-.L152
	.byte	3,2,1,5,7,9
	.half	.L154-.L1528
	.byte	3,182,2,1,5,42,7,9
	.half	.L738-.L154
	.byte	3,1,1,5,5,7,9
	.half	.L155-.L738
	.byte	3,1,1,5,3,9
	.half	.L149-.L155
	.byte	3,2,1,5,5,7,9
	.half	.L1529-.L149
	.byte	3,3,1,9
	.half	.L1530-.L1529
	.byte	3,1,1,9
	.half	.L1531-.L1530
	.byte	3,1,1,5,3,9
	.half	.L156-.L1531
	.byte	3,2,1,5,9,9
	.half	.L728-.L156
	.byte	3,187,50,1,5,11,7,9
	.half	.L1532-.L728
	.byte	3,2,1,5,16,9
	.half	.L157-.L1532
	.byte	3,2,1,5,17,9
	.half	.L1533-.L157
	.byte	3,1,1,5,9,3,1,1,5,136,1,9
	.half	.L148-.L1533
	.byte	3,115,1,5,80,9
	.half	.L146-.L148
	.byte	1,5,121,9
	.half	.L1534-.L146
	.byte	1,5,3,7,9
	.half	.L143-.L1534
	.byte	3,20,1,5,5,7,9
	.half	.L1535-.L143
	.byte	3,2,1,5,3,9
	.half	.L159-.L1535
	.byte	3,8,1,5,1,3,1,1,7,9
	.half	.L448-.L159
	.byte	0,1,1
.L1514:
	.sdecl	'.debug_ranges',debug,cluster('Can_ChangeBaudrate')
	.sect	'.debug_ranges'
.L447:
	.word	-1,.L393,0,.L448-.L393,0,0
.L723:
	.word	-1,.L393,0,.L719-.L393,-1,.L395,0,.L558-.L395,0,0
.L736:
	.word	-1,.L393,.L733-.L393,.L734-.L393,.L737-.L393,.L738-.L393,0,0
	.sdecl	'.debug_info',debug,cluster('Can_SetControllerMode')
	.sect	'.debug_info'
.L449:
	.word	1167
	.half	3
	.word	.L450
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L452,.L451
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_SetControllerMode',0,1,128,68,42
	.word	.L712
	.byte	1,1,1
	.word	.L399,.L744,.L398
	.byte	4
	.byte	'Controller',0,1,128,68,71
	.word	.L671,.L745
	.byte	4
	.byte	'Transition',0,1,128,68,107
	.word	.L746,.L747
	.byte	5
	.word	.L748
	.byte	6
	.byte	'errorId',0,1,131,68,9
	.word	.L671,.L749
	.byte	6
	.byte	'retval',0,1,132,68,18
	.word	.L712,.L750
	.byte	6
	.byte	'transitionRequest',0,1,133,68,9
	.word	.L671,.L751
	.byte	6
	.byte	'busOffRecovery',0,1,134,68,9
	.word	.L671,.L752
	.byte	6
	.byte	'transitionState',0,1,136,68,9
	.word	.L671,.L753
	.byte	7
	.word	.L689,.L754,.L755
	.byte	8
	.word	.L692,.L756
	.byte	8
	.word	.L694,.L757
	.byte	8
	.word	.L696,.L758
	.byte	9
	.word	.L698,.L759
	.byte	6
	.byte	'transitionState',0,1,156,14,9
	.word	.L671,.L765
	.byte	7
	.word	.L703,.L766,.L767
	.byte	8
	.word	.L706,.L768
	.byte	9
	.word	.L708,.L769
	.byte	6
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L772
	.byte	6
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L773
	.byte	10
	.word	.L715,.L774,.L198
	.byte	6
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L775
	.byte	6
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L776
	.byte	0,0,0,7
	.word	.L703,.L770,.L771
	.byte	8
	.word	.L706,.L768
	.byte	0,0,0,7
	.word	.L689,.L760,.L761
	.byte	8
	.word	.L692,.L756
	.byte	8
	.word	.L694,.L757
	.byte	8
	.word	.L696,.L758
	.byte	0,7
	.word	.L777,.L203,.L778
	.byte	8
	.word	.L779,.L780
	.byte	8
	.word	.L781,.L782
	.byte	8
	.word	.L783,.L784
	.byte	11
	.word	.L785,.L786
	.byte	0,7
	.word	.L689,.L206,.L787
	.byte	8
	.word	.L692,.L756
	.byte	8
	.word	.L694,.L757
	.byte	8
	.word	.L696,.L758
	.byte	10
	.word	.L698,.L206,.L787
	.byte	6
	.byte	'transitionState',0,1,156,14,9
	.word	.L671,.L788
	.byte	7
	.word	.L703,.L789,.L790
	.byte	8
	.word	.L706,.L768
	.byte	9
	.word	.L708,.L791
	.byte	6
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L794
	.byte	6
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L795
	.byte	10
	.word	.L715,.L796,.L210
	.byte	6
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L797
	.byte	6
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L798
	.byte	0,0,0,7
	.word	.L703,.L792,.L793
	.byte	8
	.word	.L706,.L768
	.byte	0,0,0,7
	.word	.L777,.L787,.L799
	.byte	8
	.word	.L779,.L780
	.byte	8
	.word	.L781,.L782
	.byte	8
	.word	.L783,.L784
	.byte	12
	.word	.L785,.L787,.L799
	.byte	0,7
	.word	.L777,.L190,.L762
	.byte	8
	.word	.L779,.L780
	.byte	8
	.word	.L781,.L782
	.byte	8
	.word	.L783,.L784
	.byte	11
	.word	.L785,.L800
	.byte	0,7
	.word	.L689,.L762,.L763
	.byte	8
	.word	.L692,.L756
	.byte	8
	.word	.L694,.L757
	.byte	8
	.word	.L696,.L758
	.byte	0,7
	.word	.L777,.L763,.L801
	.byte	8
	.word	.L779,.L780
	.byte	8
	.word	.L781,.L782
	.byte	8
	.word	.L783,.L784
	.byte	0,7
	.word	.L689,.L178,.L764
	.byte	8
	.word	.L692,.L756
	.byte	8
	.word	.L694,.L757
	.byte	8
	.word	.L696,.L758
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_SetControllerMode')
	.sect	'.debug_abbrev'
.L450:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85,6,0
	.byte	0,10,11,1,49,16,17,1,18,1,0,0,11,11,0,49,16,85,6,0,0,12,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_SetControllerMode')
	.sect	'.debug_line'
.L451:
	.word	.L1537-.L1536
.L1536:
	.half	3
	.word	.L1539-.L1538
.L1538:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1539:
	.byte	5,10,7,0,5,2
	.word	.L399
	.byte	3,137,196,0,1,5,42,3,118,1,5,19,9
	.half	.L1374-.L399
	.byte	3,11,1,5,7,3,5,1,5,3,9
	.half	.L1540-.L1374
	.byte	1,5,10,7,9
	.half	.L1541-.L1540
	.byte	3,22,1,5,15,9
	.half	.L176-.L1541
	.byte	3,2,1,5,29,1,5,11,9
	.half	.L177-.L176
	.byte	3,3,1,5,49,9
	.half	.L1542-.L177
	.byte	1,5,13,7,9
	.half	.L179-.L1542
	.byte	3,6,1,5,41,7,9
	.half	.L1543-.L179
	.byte	1,5,69,7,9
	.half	.L1544-.L1543
	.byte	1,5,113,7,9
	.half	.L1545-.L1544
	.byte	1,5,11,7,9
	.half	.L181-.L1545
	.byte	3,1,1,5,51,7,9
	.half	.L1546-.L181
	.byte	1,5,15,7,9
	.half	.L180-.L1546
	.byte	3,3,1,5,33,1,5,7,9
	.half	.L185-.L180
	.byte	3,12,1,5,12,9
	.half	.L1373-.L185
	.byte	3,4,1,7,9
	.half	.L1547-.L1373
	.byte	3,33,1,7,9
	.half	.L1548-.L1547
	.byte	3,30,1,7,9
	.half	.L1549-.L1548
	.byte	3,107,1,7,9
	.half	.L1550-.L1549
	.byte	1,5,13,9
	.half	.L188-.L1550
	.byte	3,88,1,5,29,9
	.half	.L1551-.L188
	.byte	3,2,1,5,13,3,126,1,5,102,9
	.half	.L754-.L1551
	.byte	3,217,73,1,5,29,9
	.half	.L755-.L754
	.byte	3,169,54,1,5,118,9
	.half	.L760-.L755
	.byte	3,215,73,1,5,19,9
	.half	.L1376-.L760
	.byte	1,5,3,9
	.half	.L1377-.L1376
	.byte	3,1,1,5,5,7,9
	.half	.L1552-.L1377
	.byte	3,2,1,5,106,9
	.half	.L196-.L1552
	.byte	3,3,1,5,122,9
	.half	.L1553-.L196
	.byte	1,5,11,9
	.half	.L766-.L1553
	.byte	3,147,125,1,5,17,3,26,1,5,23,9
	.half	.L767-.L766
	.byte	3,211,2,1,5,15,3,173,125,1,5,10,9
	.half	.L770-.L767
	.byte	3,104,1,5,47,3,27,1,5,27,9
	.half	.L774-.L770
	.byte	1,5,59,1,5,5,9
	.half	.L1378-.L774
	.byte	1,5,22,7,9
	.half	.L1554-.L1378
	.byte	3,7,1,5,7,9
	.half	.L1555-.L1554
	.byte	1,5,16,7,9
	.half	.L1556-.L1555
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L197-.L1556
	.byte	3,7,1,5,3,9
	.half	.L198-.L197
	.byte	3,9,1,5,5,7,9
	.half	.L1557-.L198
	.byte	3,2,1,5,7,9
	.half	.L200-.L1557
	.byte	3,182,2,1,5,42,7,9
	.half	.L771-.L200
	.byte	3,1,1,5,5,7,9
	.half	.L201-.L771
	.byte	3,1,1,5,3,9
	.half	.L195-.L201
	.byte	3,2,1,5,5,7,9
	.half	.L1558-.L195
	.byte	3,3,1,9
	.half	.L1559-.L1558
	.byte	3,1,1,9
	.half	.L1560-.L1559
	.byte	3,1,1,5,9,9
	.half	.L202-.L1560
	.byte	3,175,54,1,5,11,7,9
	.half	.L761-.L202
	.byte	3,2,1,5,3,9
	.half	.L203-.L761
	.byte	3,239,73,1,5,5,7,9
	.half	.L1561-.L203
	.byte	3,3,1,5,86,9
	.half	.L1562-.L1561
	.byte	3,4,1,5,9,9
	.half	.L778-.L1562
	.byte	3,141,54,1,5,24,9
	.half	.L189-.L778
	.byte	3,5,1,5,9,3,4,1,5,26,9
	.half	.L191-.L189
	.byte	3,17,1,5,83,9
	.half	.L206-.L191
	.byte	3,162,73,1,5,118,9
	.half	.L1563-.L206
	.byte	1,5,19,9
	.half	.L1381-.L1563
	.byte	1,5,3,9
	.half	.L1382-.L1381
	.byte	3,1,1,5,5,7,9
	.half	.L1564-.L1382
	.byte	3,2,1,5,87,9
	.half	.L208-.L1564
	.byte	3,3,1,5,122,9
	.half	.L1565-.L208
	.byte	1,5,11,9
	.half	.L789-.L1565
	.byte	3,147,125,1,5,17,3,26,1,5,23,9
	.half	.L790-.L789
	.byte	3,211,2,1,5,15,3,173,125,1,5,10,9
	.half	.L792-.L790
	.byte	3,104,1,5,47,3,27,1,5,27,9
	.half	.L796-.L792
	.byte	1,5,59,1,5,5,9
	.half	.L1383-.L796
	.byte	1,5,22,7,9
	.half	.L1566-.L1383
	.byte	3,7,1,5,7,9
	.half	.L1567-.L1566
	.byte	1,5,16,7,9
	.half	.L1568-.L1567
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L209-.L1568
	.byte	3,7,1,5,3,9
	.half	.L210-.L209
	.byte	3,9,1,5,5,7,9
	.half	.L1569-.L210
	.byte	3,2,1,5,7,9
	.half	.L212-.L1569
	.byte	3,182,2,1,5,42,7,9
	.half	.L793-.L212
	.byte	3,1,1,5,5,7,9
	.half	.L213-.L793
	.byte	3,1,1,5,3,9
	.half	.L207-.L213
	.byte	3,2,1,5,5,7,9
	.half	.L1570-.L207
	.byte	3,3,1,9
	.half	.L1571-.L1570
	.byte	3,1,1,9
	.half	.L1572-.L1571
	.byte	3,1,1,5,3,9
	.half	.L214-.L1572
	.byte	3,2,1,9
	.half	.L787-.L214
	.byte	3,30,1,5,5,7,9
	.half	.L1573-.L787
	.byte	3,3,1,5,86,9
	.half	.L1574-.L1573
	.byte	3,4,1,5,9,9
	.half	.L799-.L1574
	.byte	3,171,54,1,5,5,9
	.half	.L190-.L799
	.byte	3,209,73,1,5,27,9
	.half	.L762-.L190
	.byte	3,180,54,1,5,5,9
	.half	.L763-.L762
	.byte	3,204,73,1,5,86,9
	.half	.L1575-.L763
	.byte	3,4,1,5,9,9
	.half	.L801-.L1575
	.byte	3,179,54,1,5,17,9
	.half	.L192-.L801
	.byte	3,4,1,5,7,9
	.half	.L204-.L192
	.byte	3,3,1,5,12,9
	.half	.L178-.L204
	.byte	3,5,1,5,3,9
	.half	.L764-.L178
	.byte	3,4,1,5,5,7,9
	.half	.L1576-.L764
	.byte	3,2,1,5,3,9
	.half	.L219-.L1576
	.byte	3,9,1,5,1,3,1,1,7,9
	.half	.L453-.L219
	.byte	0,1,1
.L1537:
	.sdecl	'.debug_ranges',debug,cluster('Can_SetControllerMode')
	.sect	'.debug_ranges'
.L452:
	.word	-1,.L399,0,.L453-.L399,0,0
.L748:
	.word	-1,.L399,0,.L744-.L399,-1,.L401,0,.L618-.L401,0,0
.L759:
	.word	-1,.L399,.L754-.L399,.L755-.L399,.L760-.L399,.L761-.L399,.L762-.L399,.L763-.L399,.L178-.L399,.L764-.L399
	.word	0,0
.L769:
	.word	-1,.L399,.L766-.L399,.L767-.L399,.L770-.L399,.L771-.L399,0,0
.L786:
	.word	-1,.L399,.L203-.L399,.L778-.L399,-1,.L403,0,.L553-.L403,0,0
.L791:
	.word	-1,.L399,.L789-.L399,.L790-.L399,.L792-.L399,.L793-.L399,0,0
.L800:
	.word	-1,.L399,.L190-.L399,.L762-.L399,.L763-.L399,.L801-.L399,0,0
	.sdecl	'.debug_info',debug,cluster('Can_Write')
	.sect	'.debug_info'
.L454:
	.word	688
	.half	3
	.word	.L455
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L457,.L456
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_Write',0,1,165,71,42
	.word	.L712
	.byte	1,1,1
	.word	.L411,.L802,.L410
	.byte	4
	.byte	'Hth',0,1,165,71,70
	.word	.L671,.L803
	.byte	4
	.byte	'PduInfo',0,1,165,71,94
	.word	.L804,.L805
	.byte	5
	.word	.L411,.L802
	.byte	6
	.byte	'retval',0,1,168,71,18
	.word	.L712,.L806
	.byte	6
	.byte	'errorId',0,1,170,71,9
	.word	.L671,.L807
	.byte	5
	.word	.L250,.L236
	.byte	6
	.byte	'txPara',0,1,157,72,36
	.word	.L808,.L809
	.byte	7
	.word	.L810,.L811,.L812
	.byte	8
	.word	.L813,.L814
	.byte	9
	.word	.L815,.L816
	.byte	0,7
	.word	.L810,.L817,.L818
	.byte	8
	.word	.L813,.L814
	.byte	0,7
	.word	.L821,.L818,.L819
	.byte	8
	.word	.L822,.L823
	.byte	10
	.word	.L824,.L825
	.byte	6
	.byte	'retval',0,1,142,16,18
	.word	.L712,.L826
	.byte	11
	.word	.L827,.L828,.L829
	.byte	7
	.word	.L830,.L831,.L832
	.byte	8
	.word	.L833,.L834
	.byte	12
	.word	.L835,.L831,.L832
	.byte	0,7
	.word	.L836,.L837,.L838
	.byte	8
	.word	.L839,.L840
	.byte	12
	.word	.L841,.L837,.L838
	.byte	0,7
	.word	.L842,.L843,.L258
	.byte	8
	.word	.L844,.L845
	.byte	11
	.word	.L846,.L843,.L258
	.byte	6
	.byte	'curWord',0,1,181,32,10
	.word	.L671,.L847
	.byte	6
	.byte	'curByte',0,1,181,32,19
	.word	.L671,.L848
	.byte	6
	.byte	'copyElem',0,1,182,32,18
	.word	.L849,.L850
	.byte	0,0,7
	.word	.L851,.L258,.L829
	.byte	8
	.word	.L852,.L853
	.byte	11
	.word	.L854,.L258,.L829
	.byte	6
	.byte	'txBRP',0,1,138,33,11
	.word	.L683,.L855
	.byte	0,0,0,0,0,7
	.word	.L810,.L819,.L820
	.byte	8
	.word	.L813,.L814
	.byte	0,7
	.word	.L821,.L820,.L236
	.byte	8
	.word	.L822,.L823
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_Write')
	.sect	'.debug_abbrev'
.L455:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85
	.byte	6,0,0,10,11,1,49,16,85,6,0,0,11,11,1,49,16,17,1,18,1,0,0,12,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_Write')
	.sect	'.debug_line'
.L456:
	.word	.L1578-.L1577
.L1577:
	.half	3
	.word	.L1580-.L1579
.L1579:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1580:
	.byte	5,11,7,0,5,2
	.word	.L411
	.byte	3,171,199,0,1,5,7,3,6,1,5,10,9
	.half	.L1409-.L411
	.byte	3,123,1,5,7,3,5,1,5,42,9
	.half	.L1410-.L1409
	.byte	3,115,1,5,3,9
	.half	.L1394-.L1410
	.byte	3,13,1,7,9
	.half	.L1581-.L1394
	.byte	3,5,1,5,10,7,9
	.half	.L1582-.L1581
	.byte	3,24,1,5,15,9
	.half	.L233-.L1582
	.byte	3,2,1,5,29,1,5,10,9
	.half	.L235-.L233
	.byte	3,6,1,5,9,9
	.half	.L1583-.L235
	.byte	1,5,87,7,9
	.half	.L1584-.L1583
	.byte	1,5,144,1,7,9
	.half	.L1585-.L1584
	.byte	1,5,15,7,9
	.half	.L234-.L1585
	.byte	3,3,1,5,35,1,5,9,9
	.half	.L237-.L234
	.byte	3,3,1,5,43,7,9
	.half	.L1586-.L237
	.byte	1,5,35,9
	.half	.L1587-.L1586
	.byte	1,5,73,7,9
	.half	.L1588-.L1587
	.byte	1,5,82,9
	.half	.L1589-.L1588
	.byte	1,5,73,7,9
	.half	.L242-.L1589
	.byte	1,5,11,9
	.half	.L1590-.L242
	.byte	3,13,1,5,38,7,9
	.half	.L1591-.L1590
	.byte	1,5,99,9
	.half	.L1395-.L1591
	.byte	1,5,29,7,9
	.half	.L244-.L1395
	.byte	3,1,1,5,27,9
	.half	.L1592-.L244
	.byte	1,5,15,7,9
	.half	.L245-.L1592
	.byte	3,6,1,5,32,1,5,18,9
	.half	.L246-.L245
	.byte	3,17,1,5,25,9
	.half	.L1593-.L246
	.byte	1,5,23,9
	.half	.L1594-.L1593
	.byte	1,5,5,9
	.half	.L1595-.L1594
	.byte	1,5,15,7,9
	.half	.L241-.L1595
	.byte	3,2,1,5,36,1,5,9,9
	.half	.L248-.L241
	.byte	3,14,1,5,5,9
	.half	.L1596-.L248
	.byte	1,5,14,7,9
	.half	.L1597-.L1596
	.byte	3,2,1,5,26,1,5,28,9
	.half	.L250-.L1597
	.byte	3,18,1,5,34,9
	.half	.L1598-.L250
	.byte	3,3,1,5,28,9
	.half	.L1599-.L1598
	.byte	3,126,1,5,26,9
	.half	.L1600-.L1599
	.byte	1,5,21,9
	.half	.L1601-.L1600
	.byte	3,1,1,5,25,9
	.half	.L1602-.L1601
	.byte	3,1,1,5,31,9
	.half	.L1603-.L1602
	.byte	3,1,1,5,22,9
	.half	.L1604-.L1603
	.byte	1,5,39,9
	.half	.L1605-.L1604
	.byte	3,1,1,5,30,9
	.half	.L1606-.L1605
	.byte	1,5,7,9
	.half	.L1607-.L1606
	.byte	3,2,1,5,13,7,9
	.half	.L1608-.L1607
	.byte	3,2,1,5,9,9
	.half	.L1609-.L1608
	.byte	1,5,41,7,9
	.half	.L1610-.L1609
	.byte	3,8,1,5,25,1,5,26,9
	.half	.L252-.L1610
	.byte	3,3,1,5,24,1,5,11,9
	.half	.L1611-.L252
	.byte	3,1,1,5,7,9
	.half	.L1612-.L1611
	.byte	1,5,13,7,9
	.half	.L1613-.L1612
	.byte	3,3,1,5,23,9
	.half	.L1398-.L1613
	.byte	3,127,1,5,13,9
	.half	.L1614-.L1398
	.byte	3,1,1,5,9,9
	.half	.L1615-.L1614
	.byte	1,5,30,7,9
	.half	.L1616-.L1615
	.byte	3,2,1,5,28,1,5,9,9
	.half	.L1617-.L1616
	.byte	3,126,1,5,23,9
	.half	.L254-.L1617
	.byte	3,5,1,5,25,9
	.half	.L255-.L254
	.byte	3,3,1,5,44,9
	.half	.L1618-.L255
	.byte	3,127,1,5,25,9
	.half	.L1619-.L1618
	.byte	3,1,1,9
	.half	.L1620-.L1619
	.byte	3,127,1,9
	.half	.L1621-.L1620
	.byte	3,1,1,5,27,9
	.half	.L1622-.L1621
	.byte	3,2,1,5,25,9
	.half	.L1623-.L1622
	.byte	3,126,1,5,27,9
	.half	.L1624-.L1623
	.byte	3,2,1,5,23,9
	.half	.L1625-.L1624
	.byte	3,126,1,5,28,9
	.half	.L811-.L1625
	.byte	3,192,70,1,5,27,9
	.half	.L812-.L811
	.byte	3,194,57,1,5,25,9
	.half	.L1626-.L812
	.byte	1,5,26,9
	.half	.L817-.L1626
	.byte	3,190,70,1,5,25,9
	.half	.L818-.L817
	.byte	3,136,1,1,5,40,9
	.half	.L819-.L818
	.byte	3,227,0,1,5,28,9
	.half	.L1627-.L819
	.byte	3,150,126,1,5,7,9
	.half	.L820-.L1627
	.byte	3,138,1,1,5,59,9
	.half	.L1628-.L820
	.byte	1,5,3,9
	.half	.L1629-.L1628
	.byte	1,5,5,7,9
	.half	.L828-.L1629
	.byte	3,5,1,3,127,1,9
	.half	.L1630-.L828
	.byte	3,1,1,5,24,9
	.half	.L831-.L1630
	.byte	3,203,15,1,5,21,9
	.half	.L1631-.L831
	.byte	1,5,7,9
	.half	.L832-.L1631
	.byte	3,213,112,1,5,22,9
	.half	.L1632-.L832
	.byte	3,114,1,5,7,9
	.half	.L1633-.L1632
	.byte	3,14,1,5,22,9
	.half	.L1634-.L1633
	.byte	3,114,1,5,20,1,5,7,9
	.half	.L1635-.L1634
	.byte	3,14,1,5,9,9
	.half	.L837-.L1635
	.byte	3,211,15,1,5,21,9
	.half	.L1636-.L837
	.byte	1,5,54,9
	.half	.L1637-.L1636
	.byte	3,3,1,5,64,9
	.half	.L1638-.L1637
	.byte	1,5,54,3,1,1,5,64,9
	.half	.L1639-.L1638
	.byte	1,5,72,9
	.half	.L1640-.L1639
	.byte	3,127,1,5,54,3,2,1,5,67,9
	.half	.L1641-.L1640
	.byte	1,5,72,9
	.half	.L1642-.L1641
	.byte	3,127,1,5,21,3,127,1,5,19,9
	.half	.L838-.L1642
	.byte	3,175,112,1,5,5,9
	.half	.L1643-.L838
	.byte	1,5,32,7,9
	.half	.L1644-.L1643
	.byte	3,2,1,5,11,9
	.half	.L843-.L1644
	.byte	3,252,15,1,5,46,9
	.half	.L1401-.L843
	.byte	3,2,1,5,16,9
	.half	.L1645-.L1401
	.byte	1,5,56,9
	.half	.L1403-.L1645
	.byte	1,5,18,7,9
	.half	.L1646-.L1403
	.byte	3,43,1,5,28,9
	.half	.L261-.L1646
	.byte	3,97,1,5,19,9
	.half	.L1647-.L261
	.byte	1,5,7,9
	.half	.L1648-.L1647
	.byte	3,125,1,5,45,7,9
	.half	.L1649-.L1648
	.byte	3,3,1,5,63,9
	.half	.L1650-.L1649
	.byte	1,5,72,9
	.half	.L1651-.L1650
	.byte	1,5,45,9
	.half	.L262-.L1651
	.byte	3,5,1,5,14,9
	.half	.L263-.L262
	.byte	3,3,1,5,37,3,125,1,5,14,9
	.half	.L1402-.L263
	.byte	3,3,1,5,22,9
	.half	.L1405-.L1402
	.byte	3,1,1,5,37,9
	.half	.L1652-.L1405
	.byte	1,5,24,7,9
	.half	.L1653-.L1652
	.byte	3,22,1,5,65,9
	.half	.L1654-.L1653
	.byte	3,85,1,5,44,3,43,1,5,65,9
	.half	.L1404-.L1654
	.byte	3,85,1,5,34,3,43,1,5,31,9
	.half	.L1406-.L1404
	.byte	3,85,1,5,56,9
	.half	.L1655-.L1406
	.byte	1,5,5,7,9
	.half	.L258-.L1655
	.byte	3,228,0,1,5,23,9
	.half	.L1656-.L258
	.byte	3,118,1,5,7,9
	.half	.L1407-.L1656
	.byte	3,10,1,5,34,9
	.half	.L1657-.L1407
	.byte	3,118,1,5,7,9
	.half	.L1408-.L1657
	.byte	3,10,1,5,15,9
	.half	.L1658-.L1408
	.byte	1,5,6,9
	.half	.L1659-.L1658
	.byte	3,9,1,5,36,9
	.half	.L1660-.L1659
	.byte	1,5,78,9
	.half	.L829-.L1660
	.byte	3,153,111,1,5,12,9
	.half	.L257-.L829
	.byte	3,7,1,5,3,9
	.half	.L236-.L257
	.byte	3,144,56,1,5,5,7,9
	.half	.L1661-.L236
	.byte	3,2,1,5,3,9
	.half	.L265-.L1661
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L458-.L265
	.byte	0,1,1
.L1578:
	.sdecl	'.debug_ranges',debug,cluster('Can_Write')
	.sect	'.debug_ranges'
.L457:
	.word	-1,.L411,0,.L458-.L411,0,0
.L816:
	.word	-1,.L411,.L811-.L411,.L812-.L411,.L817-.L411,.L818-.L411,.L819-.L411,.L820-.L411,0,0
.L825:
	.word	-1,.L411,.L818-.L411,.L819-.L411,.L820-.L411,.L236-.L411,0,0
	.sdecl	'.debug_info',debug,cluster('Can_CancelTx')
	.sect	'.debug_info'
.L459:
	.word	216
	.half	3
	.word	.L460
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L462,.L461
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_CancelTx',0,1,155,77,32,1,1,1
	.word	.L425,.L856,.L424
	.byte	4
	.byte	'Hth',0,1,155,77,63
	.word	.L671,.L857
	.byte	4
	.byte	'PduId',0,1,155,77,78
	.word	.L671,.L858
	.byte	5
	.word	.L425,.L856
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_CancelTx')
	.sect	'.debug_abbrev'
.L460:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_CancelTx')
	.sect	'.debug_line'
.L461:
	.word	.L1663-.L1662
.L1662:
	.half	3
	.word	.L1665-.L1664
.L1664:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1665:
	.byte	5,1,7,0,5,2
	.word	.L425
	.byte	3,140,206,0,1,7,9
	.half	.L463-.L425
	.byte	0,1,1
.L1663:
	.sdecl	'.debug_ranges',debug,cluster('Can_CancelTx')
	.sect	'.debug_ranges'
.L462:
	.word	-1,.L425,0,.L463-.L425,0,0
	.sdecl	'.debug_info',debug,cluster('Can_CheckWakeup')
	.sect	'.debug_info'
.L464:
	.word	211
	.half	3
	.word	.L465
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L467,.L466
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_CheckWakeup',0,1,132,73,42
	.word	.L671
	.byte	1,1,1
	.word	.L413,.L859,.L412
	.byte	4
	.byte	'Controller',0,1,132,73,65
	.word	.L671,.L860
	.byte	5
	.word	.L413,.L859
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_CheckWakeup')
	.sect	'.debug_abbrev'
.L465:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_CheckWakeup')
	.sect	'.debug_line'
.L466:
	.word	.L1667-.L1666
.L1666:
	.half	3
	.word	.L1669-.L1668
.L1668:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1669:
	.byte	5,10,7,0,5,2
	.word	.L413
	.byte	3,138,201,0,1,5,1,3,1,1,7,9
	.half	.L468-.L413
	.byte	0,1,1
.L1667:
	.sdecl	'.debug_ranges',debug,cluster('Can_CheckWakeup')
	.sect	'.debug_ranges'
.L467:
	.word	-1,.L413,0,.L468-.L413,0,0
	.sdecl	'.debug_info',debug,cluster('Can_DisableControllerInterrupts')
	.sect	'.debug_info'
.L469:
	.word	298
	.half	3
	.word	.L470
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L472,.L471
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_DisableControllerInterrupts',0,1,206,69,32,1,1,1
	.word	.L405,.L861,.L404
	.byte	4
	.byte	'Controller',0,1,206,69,71
	.word	.L671,.L862
	.byte	5
	.word	.L863
	.byte	6
	.byte	'errorId',0,1,209,69,9
	.word	.L671,.L864
	.byte	7
	.word	.L865,.L866,.L224
	.byte	8
	.word	.L867,.L868
	.byte	9
	.word	.L869,.L866,.L224
	.byte	6
	.byte	'retval',0,1,230,42,12
	.word	.L671,.L870
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_DisableControllerInterrupts')
	.sect	'.debug_abbrev'
.L470:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('Can_DisableControllerInterrupts')
	.sect	'.debug_line'
.L471:
	.word	.L1671-.L1670
.L1670:
	.half	3
	.word	.L1673-.L1672
.L1672:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1673:
	.byte	5,32,7,0,5,2
	.word	.L405
	.byte	3,205,197,0,1,5,11,9
	.half	.L1388-.L405
	.byte	3,4,1,5,7,3,5,1,5,3,9
	.half	.L1674-.L1388
	.byte	1,5,8,7,9
	.half	.L1675-.L1674
	.byte	3,19,1,5,13,9
	.half	.L221-.L1675
	.byte	3,2,1,5,27,1,5,5,9
	.half	.L222-.L221
	.byte	3,6,1,5,9,9
	.half	.L1390-.L222
	.byte	3,1,1,5,5,9
	.half	.L1676-.L1390
	.byte	1,5,36,7,9
	.half	.L866-.L1676
	.byte	3,244,100,1,5,67,9
	.half	.L1677-.L866
	.byte	1,5,34,9
	.half	.L1678-.L1677
	.byte	3,1,1,5,43,9
	.half	.L1679-.L1678
	.byte	3,1,1,5,31,9
	.half	.L1680-.L1679
	.byte	1,5,5,9
	.half	.L224-.L1680
	.byte	3,150,27,1,9
	.half	.L1681-.L224
	.byte	3,1,1,5,3,9
	.half	.L223-.L1681
	.byte	3,5,1,5,5,7,9
	.half	.L1682-.L223
	.byte	3,2,1,5,1,9
	.half	.L225-.L1682
	.byte	3,8,1,7,9
	.half	.L473-.L225
	.byte	0,1,1
.L1671:
	.sdecl	'.debug_ranges',debug,cluster('Can_DisableControllerInterrupts')
	.sect	'.debug_ranges'
.L472:
	.word	-1,.L405,0,.L473-.L405,0,0
.L863:
	.word	-1,.L405,0,.L861-.L405,-1,.L407,0,.L623-.L407,0,0
	.sdecl	'.debug_info',debug,cluster('Can_EnableControllerInterrupts')
	.sect	'.debug_info'
.L474:
	.word	280
	.half	3
	.word	.L475
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L477,.L476
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_EnableControllerInterrupts',0,1,183,70,32,1,1,1
	.word	.L409,.L871,.L408
	.byte	4
	.byte	'Controller',0,1,183,70,70
	.word	.L671,.L872
	.byte	5
	.word	.L409,.L871
	.byte	6
	.byte	'errorId',0,1,186,70,9
	.word	.L671,.L873
	.byte	7
	.word	.L874,.L875,.L229
	.byte	8
	.word	.L876,.L877
	.byte	9
	.word	.L878,.L875,.L229
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_EnableControllerInterrupts')
	.sect	'.debug_abbrev'
.L475:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_EnableControllerInterrupts')
	.sect	'.debug_line'
.L476:
	.word	.L1684-.L1683
.L1683:
	.half	3
	.word	.L1686-.L1685
.L1685:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1686:
	.byte	5,11,7,0,5,2
	.word	.L409
	.byte	3,186,198,0,1,5,7,3,5,1,5,3,9
	.half	.L1687-.L409
	.byte	1,5,8,7,9
	.half	.L1688-.L1687
	.byte	3,19,1,5,13,9
	.half	.L226-.L1688
	.byte	3,2,1,5,27,1,5,5,9
	.half	.L227-.L226
	.byte	3,6,1,5,9,9
	.half	.L1392-.L227
	.byte	3,1,1,5,5,9
	.half	.L1689-.L1392
	.byte	1,5,7,7,9
	.half	.L1690-.L1689
	.byte	3,2,1,9
	.half	.L1691-.L1690
	.byte	3,1,1,5,63,7,9
	.half	.L875-.L1691
	.byte	3,4,1,5,3,9
	.half	.L1692-.L875
	.byte	3,171,100,1,5,35,7,9
	.half	.L1693-.L1692
	.byte	3,2,1,5,65,9
	.half	.L1694-.L1693
	.byte	1,5,5,9
	.half	.L229-.L1694
	.byte	3,220,27,1,5,3,9
	.half	.L228-.L229
	.byte	3,5,1,5,5,7,9
	.half	.L1695-.L228
	.byte	3,2,1,5,1,9
	.half	.L232-.L1695
	.byte	3,8,1,7,9
	.half	.L478-.L232
	.byte	0,1,1
.L1684:
	.sdecl	'.debug_ranges',debug,cluster('Can_EnableControllerInterrupts')
	.sect	'.debug_ranges'
.L477:
	.word	-1,.L409,0,.L478-.L409,0,0
	.sdecl	'.debug_info',debug,cluster('Can_MainFunction_Write')
	.sect	'.debug_info'
.L479:
	.word	190
	.half	3
	.word	.L480
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L482,.L481
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_MainFunction_Write',0,1,184,73,32,1,1,1
	.word	.L415,.L879,.L414
	.byte	4
	.word	.L415,.L879
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_MainFunction_Write')
	.sect	'.debug_abbrev'
.L480:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_MainFunction_Write')
	.sect	'.debug_line'
.L481:
	.word	.L1697-.L1696
.L1696:
	.half	3
	.word	.L1699-.L1698
.L1698:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1699:
	.byte	5,1,7,0,5,2
	.word	.L415
	.byte	3,151,202,0,1,7,9
	.half	.L483-.L415
	.byte	0,1,1
.L1697:
	.sdecl	'.debug_ranges',debug,cluster('Can_MainFunction_Write')
	.sect	'.debug_ranges'
.L482:
	.word	-1,.L415,0,.L483-.L415,0,0
	.sdecl	'.debug_info',debug,cluster('Can_MainFunction_Read')
	.sect	'.debug_info'
.L484:
	.word	211
	.half	3
	.word	.L485
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L487,.L486
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_MainFunction_Read',0,1,188,74,32,1,1,1
	.word	.L417,.L880,.L416
	.byte	4
	.word	.L417,.L880
	.byte	5
	.byte	'errorId',0,1,191,74,9
	.word	.L671,.L881
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_MainFunction_Read')
	.sect	'.debug_abbrev'
.L485:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_MainFunction_Read')
	.sect	'.debug_line'
.L486:
	.word	.L1701-.L1700
.L1700:
	.half	3
	.word	.L1703-.L1702
.L1702:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1703:
	.byte	5,11,7,0,5,2
	.word	.L417
	.byte	3,192,202,0,1,5,7,3,5,1,5,3,9
	.half	.L1704-.L417
	.byte	1,5,13,7,9
	.half	.L1705-.L1704
	.byte	3,2,1,5,27,1,5,8,9
	.half	.L268-.L1705
	.byte	3,6,1,5,3,9
	.half	.L1706-.L268
	.byte	1,5,23,7,9
	.half	.L1707-.L1706
	.byte	3,44,1,5,3,9
	.half	.L269-.L1707
	.byte	3,5,1,5,5,7,9
	.half	.L1708-.L269
	.byte	3,2,1,5,1,9
	.half	.L271-.L1708
	.byte	3,6,1,7,9
	.half	.L488-.L271
	.byte	0,1,1
.L1701:
	.sdecl	'.debug_ranges',debug,cluster('Can_MainFunction_Read')
	.sect	'.debug_ranges'
.L487:
	.word	-1,.L417,0,.L488-.L417,0,0
	.sdecl	'.debug_info',debug,cluster('Can_MainFunction_BusOff')
	.sect	'.debug_info'
.L489:
	.word	191
	.half	3
	.word	.L490
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L492,.L491
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_MainFunction_BusOff',0,1,162,75,32,1,1,1
	.word	.L419,.L882,.L418
	.byte	4
	.word	.L419,.L882
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_MainFunction_BusOff')
	.sect	'.debug_abbrev'
.L490:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_MainFunction_BusOff')
	.sect	'.debug_line'
.L491:
	.word	.L1710-.L1709
.L1709:
	.half	3
	.word	.L1712-.L1711
.L1711:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1712:
	.byte	5,1,7,0,5,2
	.word	.L419
	.byte	3,219,203,0,1,7,9
	.half	.L493-.L419
	.byte	0,1,1
.L1710:
	.sdecl	'.debug_ranges',debug,cluster('Can_MainFunction_BusOff')
	.sect	'.debug_ranges'
.L492:
	.word	-1,.L419,0,.L493-.L419,0,0
	.sdecl	'.debug_info',debug,cluster('Can_MainFunction_Wakeup')
	.sect	'.debug_info'
.L494:
	.word	191
	.half	3
	.word	.L495
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L497,.L496
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_MainFunction_Wakeup',0,1,249,75,32,1,1,1
	.word	.L421,.L883,.L420
	.byte	4
	.word	.L421,.L883
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_MainFunction_Wakeup')
	.sect	'.debug_abbrev'
.L495:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_MainFunction_Wakeup')
	.sect	'.debug_line'
.L496:
	.word	.L1714-.L1713
.L1713:
	.half	3
	.word	.L1716-.L1715
.L1715:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1716:
	.byte	5,1,7,0,5,2
	.word	.L421
	.byte	3,251,203,0,1,7,9
	.half	.L498-.L421
	.byte	0,1,1
.L1714:
	.sdecl	'.debug_ranges',debug,cluster('Can_MainFunction_Wakeup')
	.sect	'.debug_ranges'
.L497:
	.word	-1,.L421,0,.L498-.L421,0,0
	.sdecl	'.debug_info',debug,cluster('Can_MainFunction_Mode')
	.sect	'.debug_info'
.L499:
	.word	441
	.half	3
	.word	.L500
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L502,.L501
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Can_MainFunction_Mode',0,1,151,76,32,1,1,1
	.word	.L423,.L884,.L422
	.byte	4
	.word	.L423,.L884
	.byte	5
	.byte	'errorId',0,1,155,76,9
	.word	.L671,.L885
	.byte	4
	.word	.L274,.L275
	.byte	5
	.byte	'transitionRequest',0,1,187,76,15
	.word	.L671,.L886
	.byte	5
	.byte	'busOffRecovery',0,1,188,76,15
	.word	.L671,.L887
	.byte	5
	.byte	'doRamCheck',0,1,189,76,15
	.word	.L671,.L888
	.byte	5
	.byte	'transitionState',0,1,190,76,15
	.word	.L671,.L889
	.byte	6
	.word	.L777,.L277,.L890
	.byte	7
	.word	.L779,.L891
	.byte	7
	.word	.L781,.L892
	.byte	7
	.word	.L783,.L893
	.byte	8
	.word	.L785,.L277,.L890
	.byte	0,6
	.word	.L777,.L279,.L284
	.byte	7
	.word	.L779,.L891
	.byte	7
	.word	.L781,.L892
	.byte	7
	.word	.L783,.L893
	.byte	8
	.word	.L785,.L279,.L284
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Can_MainFunction_Mode')
	.sect	'.debug_abbrev'
.L500:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Can_MainFunction_Mode')
	.sect	'.debug_line'
.L501:
	.word	.L1718-.L1717
.L1717:
	.half	3
	.word	.L1720-.L1719
.L1719:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1720:
	.byte	5,11,7,0,5,2
	.word	.L423
	.byte	3,155,204,0,1,5,7,3,4,1,5,3,9
	.half	.L1721-.L423
	.byte	1,5,13,7,9
	.half	.L1722-.L1721
	.byte	3,2,1,5,27,1,5,5,9
	.half	.L272-.L1722
	.byte	3,6,1,5,12,9
	.half	.L1723-.L272
	.byte	3,12,1,5,17,9
	.half	.L1724-.L1723
	.byte	3,2,1,5,31,1,5,29,9
	.half	.L274-.L1724
	.byte	3,9,1,5,33,9
	.half	.L1725-.L274
	.byte	3,4,1,5,29,3,124,1,5,26,9
	.half	.L1412-.L1725
	.byte	3,1,1,5,22,9
	.half	.L1413-.L1412
	.byte	3,1,1,5,9,9
	.half	.L1415-.L1413
	.byte	3,2,1,5,126,7,9
	.half	.L1726-.L1415
	.byte	3,2,1,5,27,9
	.half	.L1414-.L1726
	.byte	1,5,18,9
	.half	.L1416-.L1414
	.byte	3,3,1,7,9
	.half	.L1727-.L1416
	.byte	3,1,1,7,9
	.half	.L1728-.L1727
	.byte	3,6,1,7,9
	.half	.L1729-.L1728
	.byte	3,2,1,5,3,9
	.half	.L277-.L1729
	.byte	3,255,65,1,5,5,7,9
	.half	.L1730-.L277
	.byte	3,3,1,9
	.half	.L1731-.L1730
	.byte	3,2,1,5,44,9
	.half	.L1411-.L1731
	.byte	3,2,1,5,86,9
	.half	.L1417-.L1411
	.byte	1,5,15,9
	.half	.L890-.L1417
	.byte	3,244,61,1,5,3,9
	.half	.L279-.L890
	.byte	3,133,66,1,5,5,7,9
	.half	.L1732-.L279
	.byte	3,3,1,9
	.half	.L1733-.L1732
	.byte	3,2,1,5,44,9
	.half	.L1734-.L1733
	.byte	3,2,1,5,86,9
	.half	.L1735-.L1734
	.byte	1,5,15,9
	.half	.L284-.L1735
	.byte	3,255,61,1,5,17,7,9
	.half	.L1736-.L284
	.byte	3,2,1,5,5,9
	.half	.L275-.L1736
	.byte	3,10,1,5,3,9
	.half	.L273-.L275
	.byte	3,5,1,5,5,7,9
	.half	.L1737-.L273
	.byte	3,2,1,5,1,9
	.half	.L286-.L1737
	.byte	3,5,1,7,9
	.half	.L503-.L286
	.byte	0,1,1
.L1718:
	.sdecl	'.debug_ranges',debug,cluster('Can_MainFunction_Mode')
	.sect	'.debug_ranges'
.L502:
	.word	-1,.L423,0,.L503-.L423,0,0
	.sdecl	'.debug_info',debug,cluster('CanInterrupt')
	.sect	'.debug_info'
.L504:
	.word	1500
	.half	3
	.word	.L505
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L507,.L506
	.byte	2
	.word	.L430
	.byte	3
	.byte	'CanInterrupt',0,1,234,84,32,1,1,1
	.word	.L427,.L894,.L426
	.byte	4
	.word	.L427,.L894
	.byte	5
	.word	.L895,.L896,.L296
	.byte	6
	.word	.L897,.L898
	.byte	7
	.byte	'ret',0,1,151,53,10
	.word	.L671,.L901
	.byte	7
	.byte	'CanLocal_IR',0,1,152,53,11
	.word	.L683,.L902
	.byte	5
	.word	.L903,.L904,.L287
	.byte	8
	.word	.L905,.L906
	.byte	6
	.word	.L907,.L908
	.byte	5
	.word	.L703,.L909,.L290
	.byte	8
	.word	.L706,.L910
	.byte	9
	.word	.L708,.L909,.L290
	.byte	7
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L911
	.byte	7
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L912
	.byte	9
	.word	.L715,.L913,.L293
	.byte	7
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L914
	.byte	7
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L915
	.byte	0,0,0,0,0,5
	.word	.L903,.L916,.L917
	.byte	8
	.word	.L905,.L906
	.byte	6
	.word	.L907,.L918
	.byte	5
	.word	.L703,.L919,.L917
	.byte	8
	.word	.L706,.L910
	.byte	9
	.word	.L708,.L919,.L917
	.byte	7
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L920
	.byte	7
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L921
	.byte	9
	.word	.L715,.L922,.L301
	.byte	7
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L923
	.byte	7
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L924
	.byte	0,0,0,0,0,5
	.word	.L903,.L925,.L926
	.byte	8
	.word	.L905,.L906
	.byte	9
	.word	.L907,.L925,.L926
	.byte	5
	.word	.L703,.L927,.L298
	.byte	8
	.word	.L706,.L910
	.byte	9
	.word	.L708,.L927,.L298
	.byte	7
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L928
	.byte	7
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L929
	.byte	9
	.word	.L715,.L930,.L310
	.byte	7
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L931
	.byte	7
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L932
	.byte	0,0,0,0,0,5
	.word	.L903,.L315,.L899
	.byte	8
	.word	.L905,.L906
	.byte	0,5
	.word	.L903,.L314,.L900
	.byte	8
	.word	.L905,.L906
	.byte	0,0,0,5
	.word	.L933,.L934,.L315
	.byte	6
	.word	.L935,.L936
	.byte	7
	.byte	'hwObjHdl',0,1,247,53,11
	.word	.L671,.L939
	.byte	7
	.byte	'mboxHdl',0,1,248,53,20
	.word	.L671,.L940
	.byte	7
	.byte	'bPos',0,1,250,53,11
	.word	.L683,.L941
	.byte	7
	.byte	'CanLocal_IR',0,1,251,53,11
	.word	.L683,.L942
	.byte	5
	.word	.L903,.L943,.L315
	.byte	8
	.word	.L905,.L906
	.byte	9
	.word	.L907,.L943,.L315
	.byte	5
	.word	.L703,.L944,.L317
	.byte	8
	.word	.L706,.L910
	.byte	9
	.word	.L708,.L944,.L317
	.byte	7
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L945
	.byte	7
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L946
	.byte	9
	.word	.L715,.L947,.L320
	.byte	7
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L948
	.byte	7
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L949
	.byte	0,0,0,0,0,0,0,10
	.word	.L895,.L315,.L899
	.byte	10
	.word	.L933,.L899,.L314
	.byte	10
	.word	.L895,.L314,.L900
	.byte	10
	.word	.L933,.L937,.L938
	.byte	5
	.word	.L950,.L951,.L313
	.byte	9
	.word	.L952,.L951,.L313
	.byte	5
	.word	.L903,.L953,.L330
	.byte	8
	.word	.L905,.L906
	.byte	9
	.word	.L907,.L953,.L330
	.byte	5
	.word	.L703,.L954,.L332
	.byte	8
	.word	.L706,.L910
	.byte	9
	.word	.L708,.L954,.L332
	.byte	7
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L955
	.byte	7
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L956
	.byte	9
	.word	.L715,.L957,.L335
	.byte	7
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L958
	.byte	7
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L959
	.byte	0,0,0,0,0,5
	.word	.L703,.L960,.L339
	.byte	8
	.word	.L706,.L910
	.byte	9
	.word	.L708,.L960,.L339
	.byte	7
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L961
	.byte	7
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L962
	.byte	9
	.word	.L715,.L963,.L342
	.byte	7
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L964
	.byte	7
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L965
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanInterrupt')
	.sect	'.debug_abbrev'
.L505:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,85,6,0,0,7
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0,10,29,0,49,16
	.byte	17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanInterrupt')
	.sect	'.debug_line'
.L506:
	.word	.L1739-.L1738
.L1738:
	.half	3
	.word	.L1741-.L1740
.L1740:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1741:
	.byte	5,32,7,0,5,2
	.word	.L427
	.byte	3,233,212,0,1,5,17,9
	.half	.L896-.L427
	.byte	3,177,96,1,5,19,9
	.half	.L1742-.L896
	.byte	1,5,24,9
	.half	.L1423-.L1742
	.byte	3,5,1,5,20,9
	.half	.L1743-.L1423
	.byte	1,5,3,9
	.half	.L1744-.L1743
	.byte	1,5,24,7,9
	.half	.L1745-.L1744
	.byte	3,3,1,5,3,9
	.half	.L904-.L1745
	.byte	3,202,119,1,5,13,9
	.half	.L1746-.L904
	.byte	1,5,5,9
	.half	.L1747-.L1746
	.byte	1,5,10,9
	.half	.L1748-.L1747
	.byte	1,5,9,9
	.half	.L1749-.L1748
	.byte	3,2,1,5,11,9
	.half	.L1750-.L1749
	.byte	1,5,16,9
	.half	.L1751-.L1750
	.byte	1,5,3,9
	.half	.L1752-.L1751
	.byte	1,5,5,7,9
	.half	.L1753-.L1752
	.byte	3,2,1,5,7,9
	.half	.L289-.L1753
	.byte	3,4,1,5,9,9
	.half	.L1754-.L289
	.byte	1,5,14,9
	.half	.L1755-.L1754
	.byte	1,5,16,9
	.half	.L1756-.L1755
	.byte	3,1,1,5,18,9
	.half	.L1757-.L1756
	.byte	1,5,23,9
	.half	.L1758-.L1757
	.byte	1,5,14,9
	.half	.L1759-.L1758
	.byte	1,5,11,7,9
	.half	.L909-.L1759
	.byte	3,195,94,1,5,17,3,26,1,5,10,9
	.half	.L1419-.L909
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L913-.L1419
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1420-.L913
	.byte	1,5,5,9
	.half	.L1421-.L1420
	.byte	1,5,22,7,9
	.half	.L1760-.L1421
	.byte	3,7,1,5,7,9
	.half	.L1761-.L1760
	.byte	1,5,16,7,9
	.half	.L1762-.L1761
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L291-.L1762
	.byte	3,7,1,5,3,9
	.half	.L293-.L291
	.byte	3,9,1,5,5,7,9
	.half	.L1763-.L293
	.byte	3,2,1,5,87,9
	.half	.L294-.L1763
	.byte	3,133,33,1,5,5,7,9
	.half	.L290-.L294
	.byte	3,1,1,5,22,9
	.half	.L287-.L290
	.byte	3,183,8,1,5,7,9
	.half	.L1764-.L287
	.byte	3,126,1,5,24,9
	.half	.L1433-.L1764
	.byte	3,2,1,5,31,9
	.half	.L1765-.L1433
	.byte	1,5,24,9
	.half	.L1766-.L1765
	.byte	1,5,20,9
	.half	.L1767-.L1766
	.byte	1,5,3,9
	.half	.L1768-.L1767
	.byte	1,5,24,7,9
	.half	.L1769-.L1768
	.byte	3,2,1,5,3,9
	.half	.L916-.L1769
	.byte	3,189,119,1,9
	.half	.L1770-.L916
	.byte	3,2,1,5,5,7,9
	.half	.L1771-.L1770
	.byte	3,2,1,5,7,9
	.half	.L297-.L1771
	.byte	3,4,1,5,9,9
	.half	.L1772-.L297
	.byte	1,5,14,9
	.half	.L1773-.L1772
	.byte	1,5,16,9
	.half	.L1774-.L1773
	.byte	3,1,1,5,18,9
	.half	.L1775-.L1774
	.byte	1,5,14,9
	.half	.L1776-.L1775
	.byte	1,5,11,7,9
	.half	.L919-.L1776
	.byte	3,195,94,1,5,17,3,26,1,5,10,9
	.half	.L1424-.L919
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L922-.L1424
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1425-.L922
	.byte	1,5,5,9
	.half	.L1426-.L1425
	.byte	1,5,22,7,9
	.half	.L1777-.L1426
	.byte	3,7,1,5,7,9
	.half	.L1778-.L1777
	.byte	1,5,16,7,9
	.half	.L1779-.L1778
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L299-.L1779
	.byte	3,7,1,5,3,9
	.half	.L301-.L299
	.byte	3,9,1,5,5,7,9
	.half	.L1780-.L301
	.byte	3,2,1,5,87,9
	.half	.L302-.L1780
	.byte	3,133,33,1,5,53,7,9
	.half	.L917-.L302
	.byte	3,186,8,1,5,29,9
	.half	.L295-.L917
	.byte	3,10,1,5,36,9
	.half	.L1781-.L295
	.byte	1,5,25,9
	.half	.L1782-.L1781
	.byte	1,5,8,9
	.half	.L1427-.L1782
	.byte	1,5,24,7,9
	.half	.L1783-.L1427
	.byte	3,14,1,5,3,9
	.half	.L925-.L1783
	.byte	3,165,119,1,9
	.half	.L1784-.L925
	.byte	3,2,1,5,5,7,9
	.half	.L1785-.L1784
	.byte	3,2,1,5,7,9
	.half	.L306-.L1785
	.byte	3,4,1,5,9,9
	.half	.L1786-.L306
	.byte	1,5,14,9
	.half	.L1787-.L1786
	.byte	1,5,16,9
	.half	.L1788-.L1787
	.byte	3,1,1,5,18,9
	.half	.L1789-.L1788
	.byte	1,5,14,9
	.half	.L1790-.L1789
	.byte	1,5,11,7,9
	.half	.L927-.L1790
	.byte	3,195,94,1,5,17,3,26,1,5,10,9
	.half	.L1428-.L927
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L930-.L1428
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1429-.L930
	.byte	1,5,5,9
	.half	.L1430-.L1429
	.byte	1,5,22,7,9
	.half	.L1791-.L1430
	.byte	3,7,1,5,7,9
	.half	.L1792-.L1791
	.byte	1,5,16,7,9
	.half	.L1793-.L1792
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L308-.L1793
	.byte	3,7,1,5,3,9
	.half	.L310-.L308
	.byte	3,9,1,5,5,7,9
	.half	.L1794-.L310
	.byte	3,2,1,5,87,9
	.half	.L311-.L1794
	.byte	3,133,33,1,5,5,7,9
	.half	.L298-.L311
	.byte	3,1,1,5,53,9
	.half	.L926-.L298
	.byte	3,209,8,1,5,9,9
	.half	.L304-.L926
	.byte	3,10,1,5,5,9
	.half	.L296-.L304
	.byte	3,170,31,1,5,17,7,9
	.half	.L934-.L296
	.byte	3,129,97,1,5,31,9
	.half	.L1795-.L934
	.byte	3,3,1,5,19,9
	.half	.L1796-.L1795
	.byte	3,125,1,5,24,9
	.half	.L1797-.L1796
	.byte	3,3,1,5,19,9
	.half	.L1798-.L1797
	.byte	3,125,1,5,24,9
	.half	.L1431-.L1798
	.byte	3,3,1,5,20,9
	.half	.L1799-.L1431
	.byte	1,5,3,9
	.half	.L1432-.L1799
	.byte	1,5,10,7,9
	.half	.L943-.L1432
	.byte	3,237,118,1,5,9,9
	.half	.L1800-.L943
	.byte	3,2,1,5,3,9
	.half	.L1801-.L1800
	.byte	1,5,5,7,9
	.half	.L1802-.L1801
	.byte	3,2,1,5,7,9
	.half	.L316-.L1802
	.byte	3,4,1,5,9,9
	.half	.L1803-.L316
	.byte	1,5,14,9
	.half	.L1804-.L1803
	.byte	1,5,16,9
	.half	.L1805-.L1804
	.byte	3,1,1,5,18,9
	.half	.L1806-.L1805
	.byte	1,5,14,9
	.half	.L1807-.L1806
	.byte	1,5,11,7,9
	.half	.L944-.L1807
	.byte	3,195,94,1,5,17,3,26,1,5,10,9
	.half	.L1434-.L944
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L947-.L1434
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1435-.L947
	.byte	1,5,5,9
	.half	.L1436-.L1435
	.byte	1,5,22,7,9
	.half	.L1808-.L1436
	.byte	3,7,1,5,7,9
	.half	.L1809-.L1808
	.byte	1,5,16,7,9
	.half	.L1810-.L1809
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L318-.L1810
	.byte	3,7,1,5,3,9
	.half	.L320-.L318
	.byte	3,9,1,5,5,7,9
	.half	.L1811-.L320
	.byte	3,2,1,5,87,9
	.half	.L321-.L1811
	.byte	3,133,33,1,5,5,7,9
	.half	.L317-.L321
	.byte	3,1,1,9
	.half	.L315-.L317
	.byte	3,122,1,5,10,9
	.half	.L899-.L315
	.byte	3,154,9,1,5,14,9
	.half	.L1437-.L899
	.byte	3,1,1,5,17,3,4,1,5,25,9
	.half	.L1438-.L1437
	.byte	3,126,1,5,81,1,5,17,9
	.half	.L323-.L1438
	.byte	3,2,1,5,13,9
	.half	.L1812-.L323
	.byte	3,4,1,5,17,9
	.half	.L1813-.L1812
	.byte	3,124,1,5,43,9
	.half	.L1439-.L1813
	.byte	3,4,1,5,11,9
	.half	.L1814-.L1439
	.byte	1,5,66,7,9
	.half	.L1815-.L1814
	.byte	1,5,68,9
	.half	.L1816-.L1815
	.byte	1,5,76,9
	.half	.L1817-.L1816
	.byte	1,5,84,9
	.half	.L1818-.L1817
	.byte	1,5,67,7,9
	.half	.L1819-.L1818
	.byte	3,9,1,5,83,9
	.half	.L1820-.L1819
	.byte	1,5,15,9
	.half	.L324-.L1820
	.byte	3,3,1,5,12,9
	.half	.L1821-.L324
	.byte	3,1,1,5,13,9
	.half	.L322-.L1821
	.byte	3,109,1,5,44,7,9
	.half	.L1822-.L322
	.byte	1,5,74,9
	.half	.L1823-.L1822
	.byte	1,5,5,7,9
	.half	.L314-.L1823
	.byte	3,227,118,1,5,12,9
	.half	.L900-.L314
	.byte	3,162,40,1,5,3,9
	.half	.L937-.L900
	.byte	3,237,96,1,5,7,9
	.half	.L938-.L937
	.byte	3,147,31,1,5,14,7,9
	.half	.L1824-.L938
	.byte	3,2,1,5,9,9
	.half	.L1825-.L1824
	.byte	1,5,11,7,9
	.half	.L951-.L1825
	.byte	3,212,94,1,5,3,9
	.half	.L1826-.L951
	.byte	1,5,10,7,9
	.half	.L953-.L1826
	.byte	3,132,121,1,5,9,9
	.half	.L1827-.L953
	.byte	3,2,1,5,3,9
	.half	.L1828-.L1827
	.byte	1,5,5,7,9
	.half	.L1829-.L1828
	.byte	3,2,1,5,7,9
	.half	.L331-.L1829
	.byte	3,4,1,5,9,9
	.half	.L1830-.L331
	.byte	1,5,14,9
	.half	.L1831-.L1830
	.byte	1,5,16,9
	.half	.L1832-.L1831
	.byte	3,1,1,5,18,9
	.half	.L1833-.L1832
	.byte	1,5,14,9
	.half	.L1834-.L1833
	.byte	1,5,11,7,9
	.half	.L954-.L1834
	.byte	3,195,94,1,5,17,3,26,1,5,10,9
	.half	.L1440-.L954
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L957-.L1440
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1441-.L957
	.byte	1,5,5,9
	.half	.L1442-.L1441
	.byte	1,5,22,7,9
	.half	.L1835-.L1442
	.byte	3,7,1,5,7,9
	.half	.L1836-.L1835
	.byte	1,5,16,7,9
	.half	.L1837-.L1836
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L333-.L1837
	.byte	3,7,1,5,3,9
	.half	.L335-.L333
	.byte	3,9,1,5,5,7,9
	.half	.L1838-.L335
	.byte	3,2,1,5,87,9
	.half	.L336-.L1838
	.byte	3,133,33,1,5,5,7,9
	.half	.L332-.L336
	.byte	3,1,1,5,7,9
	.half	.L330-.L332
	.byte	3,129,7,1,5,102,9
	.half	.L1839-.L330
	.byte	3,1,1,5,65,9
	.half	.L338-.L1839
	.byte	3,2,1,5,111,9
	.half	.L1840-.L338
	.byte	1,5,17,9
	.half	.L337-.L1840
	.byte	3,126,1,5,19,9
	.half	.L1841-.L337
	.byte	1,5,29,9
	.half	.L1842-.L1841
	.byte	1,5,14,9
	.half	.L1843-.L1842
	.byte	1,5,11,7,9
	.half	.L960-.L1843
	.byte	3,192,87,1,5,17,3,26,1,5,10,9
	.half	.L1443-.L960
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L963-.L1443
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1444-.L963
	.byte	1,5,5,9
	.half	.L1445-.L1444
	.byte	1,5,22,7,9
	.half	.L1844-.L1445
	.byte	3,7,1,5,7,9
	.half	.L1845-.L1844
	.byte	1,5,16,7,9
	.half	.L1846-.L1845
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L340-.L1846
	.byte	3,7,1,5,3,9
	.half	.L342-.L340
	.byte	3,9,1,5,5,7,9
	.half	.L1847-.L342
	.byte	3,2,1,5,86,9
	.half	.L343-.L1847
	.byte	3,136,40,1,5,7,7,9
	.half	.L339-.L343
	.byte	3,4,1,5,1,9
	.half	.L313-.L339
	.byte	3,180,33,1,7,9
	.half	.L508-.L313
	.byte	0,1,1
.L1739:
	.sdecl	'.debug_ranges',debug,cluster('CanInterrupt')
	.sect	'.debug_ranges'
.L507:
	.word	-1,.L427,0,.L508-.L427,0,0
.L898:
	.word	-1,.L427,.L896-.L427,.L296-.L427,.L315-.L427,.L899-.L427,.L314-.L427,.L900-.L427,0,0
.L908:
	.word	-1,.L427,.L904-.L427,.L287-.L427,.L315-.L427,.L899-.L427,.L314-.L427,.L900-.L427,0,0
.L918:
	.word	-1,.L427,.L916-.L427,.L917-.L427,-1,.L429,0,.L628-.L429,0,0
.L936:
	.word	-1,.L427,.L934-.L427,.L315-.L427,.L899-.L427,.L314-.L427,.L937-.L427,.L938-.L427,0,0
	.sdecl	'.debug_info',debug,cluster('CanLL_ModeTransition')
	.sect	'.debug_info'
.L509:
	.word	856
	.half	3
	.word	.L510
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L512,.L511
	.byte	2
	.word	.L430
	.byte	3
	.byte	'CanLL_ModeTransition',0,1,239,40,45
	.word	.L671
	.byte	1,1
	.word	.L359,.L966,.L358
	.byte	4
	.byte	'mode',0,1,239,40,114
	.word	.L671,.L967
	.byte	4
	.byte	'busOffRecovery',0,1,239,40,127
	.word	.L671,.L968
	.byte	4
	.byte	'ramCheck',0,1,239,40,150,1
	.word	.L671,.L969
	.byte	5
	.word	.L970
	.byte	6
	.byte	'ret',0,1,241,40,10
	.word	.L671,.L971
	.byte	7
	.word	.L972,.L973,.L974
	.byte	8
	.word	.L975,.L976
	.byte	6
	.byte	'transitionRequest',0,1,141,55,10
	.word	.L671,.L983
	.byte	7
	.word	.L703,.L984,.L45
	.byte	9
	.word	.L706,.L985
	.byte	10
	.word	.L708,.L984,.L45
	.byte	6
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L986
	.byte	6
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L987
	.byte	10
	.word	.L715,.L988,.L48
	.byte	6
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L989
	.byte	6
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L990
	.byte	0,0,0,0,0,11
	.word	.L972,.L977,.L35
	.byte	11
	.word	.L972,.L978,.L37
	.byte	11
	.word	.L972,.L979,.L53
	.byte	7
	.word	.L991,.L53,.L33
	.byte	10
	.word	.L992,.L53,.L33
	.byte	6
	.byte	'transitionRequest',0,1,161,56,10
	.word	.L671,.L993
	.byte	0,0,7
	.word	.L991,.L33,.L61
	.byte	10
	.word	.L992,.L33,.L61
	.byte	6
	.byte	'transitionRequest',0,1,161,56,10
	.word	.L671,.L994
	.byte	0,0,11
	.word	.L972,.L61,.L980
	.byte	7
	.word	.L995,.L980,.L54
	.byte	8
	.word	.L996,.L997
	.byte	7
	.word	.L703,.L998,.L70
	.byte	9
	.word	.L706,.L985
	.byte	10
	.word	.L708,.L998,.L70
	.byte	6
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L999
	.byte	6
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L1000
	.byte	10
	.word	.L715,.L1001,.L73
	.byte	6
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L1002
	.byte	6
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L1003
	.byte	0,0,0,0,0,11
	.word	.L972,.L54,.L981
	.byte	7
	.word	.L1004,.L981,.L32
	.byte	12
	.word	.L1005,.L981,.L32
	.byte	0,11
	.word	.L972,.L982,.L966
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanLL_ModeTransition')
	.sect	'.debug_abbrev'
.L510:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,85,6,0,0,9,5,0,49,16,2,6,0,0,10,11
	.byte	1,49,16,17,1,18,1,0,0,11,29,0,49,16,17,1,18,1,0,0,12,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanLL_ModeTransition')
	.sect	'.debug_line'
.L511:
	.word	.L1849-.L1848
.L1848:
	.half	3
	.word	.L1851-.L1850
.L1850:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1851:
	.byte	5,45,7,0,5,2
	.word	.L359
	.byte	3,238,40,1,5,3,3,4,1,5,14,9
	.half	.L973-.L359
	.byte	3,126,1,5,45,3,126,1,5,3,9
	.half	.L974-.L973
	.byte	3,4,1,7,9
	.half	.L1852-.L974
	.byte	1,5,12,9
	.half	.L36-.L1852
	.byte	3,8,1,5,11,9
	.half	.L1292-.L36
	.byte	1,5,58,7,9
	.half	.L1853-.L1292
	.byte	1,5,92,9
	.half	.L1854-.L1853
	.byte	1,5,54,7,9
	.half	.L39-.L1854
	.byte	3,6,1,5,13,9
	.half	.L977-.L39
	.byte	1,5,9,9
	.half	.L1294-.L977
	.byte	3,1,1,5,12,7,9
	.half	.L35-.L1294
	.byte	3,121,1,5,21,9
	.half	.L978-.L35
	.byte	3,147,14,1,5,7,3,3,1,5,9,9
	.half	.L1855-.L978
	.byte	1,5,3,9
	.half	.L1856-.L1855
	.byte	1,5,7,7,9
	.half	.L1857-.L1856
	.byte	3,15,1,5,14,9
	.half	.L1858-.L1857
	.byte	1,9
	.half	.L1859-.L1858
	.byte	3,1,1,5,5,9
	.half	.L1860-.L1859
	.byte	3,10,1,5,14,9
	.half	.L44-.L1860
	.byte	3,1,1,5,16,9
	.half	.L1861-.L44
	.byte	1,5,12,9
	.half	.L1862-.L1861
	.byte	1,5,11,7,9
	.half	.L984-.L1862
	.byte	3,141,84,1,5,17,3,26,1,5,10,9
	.half	.L1295-.L984
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L988-.L1295
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1296-.L988
	.byte	1,5,5,9
	.half	.L1297-.L1296
	.byte	1,5,22,7,9
	.half	.L1863-.L1297
	.byte	3,7,1,5,7,9
	.half	.L1864-.L1863
	.byte	1,5,16,7,9
	.half	.L1865-.L1864
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L46-.L1865
	.byte	3,7,1,5,3,9
	.half	.L48-.L46
	.byte	3,9,1,5,5,7,9
	.half	.L1866-.L48
	.byte	3,2,1,5,89,9
	.half	.L49-.L1866
	.byte	3,187,43,1,5,5,7,9
	.half	.L45-.L49
	.byte	3,2,1,5,11,9
	.half	.L1867-.L45
	.byte	3,1,1,5,13,9
	.half	.L1868-.L1867
	.byte	1,5,5,9
	.half	.L1869-.L1868
	.byte	1,5,25,9
	.half	.L1870-.L1869
	.byte	3,2,1,5,7,3,220,113,1,5,14,9
	.half	.L37-.L1870
	.byte	3,24,1,5,13,9
	.half	.L1298-.L37
	.byte	1,5,60,7,9
	.half	.L1871-.L1298
	.byte	1,5,94,9
	.half	.L1872-.L1871
	.byte	1,5,56,7,9
	.half	.L52-.L1872
	.byte	3,6,1,5,15,9
	.half	.L979-.L52
	.byte	1,5,11,9
	.half	.L1299-.L979
	.byte	3,1,1,5,8,7,9
	.half	.L53-.L1299
	.byte	3,249,14,1,5,10,9
	.half	.L1873-.L53
	.byte	1,5,3,9
	.half	.L1874-.L1873
	.byte	1,5,17,7,9
	.half	.L1875-.L1874
	.byte	3,2,1,5,15,1,5,5,9
	.half	.L1876-.L1875
	.byte	3,35,1,5,7,9
	.half	.L1877-.L1876
	.byte	1,5,14,9
	.half	.L1878-.L1877
	.byte	1,5,9,9
	.half	.L1879-.L1878
	.byte	3,1,1,5,11,9
	.half	.L1880-.L1879
	.byte	1,5,5,9
	.half	.L1881-.L1880
	.byte	1,5,25,7,9
	.half	.L1882-.L1881
	.byte	3,3,1,5,40,1,5,23,9
	.half	.L55-.L1882
	.byte	3,9,1,5,7,3,222,112,1,5,8,9
	.half	.L33-.L55
	.byte	3,240,14,1,5,10,9
	.half	.L1883-.L33
	.byte	1,5,3,9
	.half	.L1884-.L1883
	.byte	1,5,7,7,9
	.half	.L1885-.L1884
	.byte	3,2,1,5,17,9
	.half	.L1886-.L1885
	.byte	1,5,15,9
	.half	.L1887-.L1886
	.byte	1,5,5,9
	.half	.L1888-.L1887
	.byte	3,35,1,5,7,9
	.half	.L1889-.L1888
	.byte	1,5,14,9
	.half	.L1890-.L1889
	.byte	1,5,9,9
	.half	.L1891-.L1890
	.byte	3,1,1,5,11,9
	.half	.L1892-.L1891
	.byte	1,5,5,9
	.half	.L1893-.L1892
	.byte	1,5,25,7,9
	.half	.L1894-.L1893
	.byte	3,3,1,5,40,1,5,23,9
	.half	.L59-.L1894
	.byte	3,9,1,5,9,9
	.half	.L61-.L59
	.byte	3,227,112,1,5,12,7,9
	.half	.L980-.L61
	.byte	3,61,1,5,14,9
	.half	.L1895-.L980
	.byte	1,5,5,9
	.half	.L1896-.L1895
	.byte	3,4,1,5,12,9
	.half	.L1897-.L1896
	.byte	1,5,3,9
	.half	.L1301-.L1897
	.byte	3,3,1,5,37,9
	.half	.L1302-.L1301
	.byte	1,5,35,1,5,8,9
	.half	.L1898-.L1302
	.byte	3,3,1,5,10,9
	.half	.L1899-.L1898
	.byte	1,5,3,9
	.half	.L1900-.L1899
	.byte	1,5,7,7,9
	.half	.L1901-.L1900
	.byte	3,2,1,5,29,9
	.half	.L1902-.L1901
	.byte	1,5,15,9
	.half	.L1903-.L1902
	.byte	1,5,7,9
	.half	.L63-.L1903
	.byte	3,10,1,5,9,9
	.half	.L1904-.L63
	.byte	1,5,3,9
	.half	.L1905-.L1904
	.byte	3,123,1,5,6,9
	.half	.L1906-.L1905
	.byte	1,5,3,9
	.half	.L1907-.L1906
	.byte	1,5,5,7,9
	.half	.L1908-.L1907
	.byte	3,2,1,5,9,7,9
	.half	.L1909-.L1908
	.byte	3,3,1,5,16,9
	.half	.L1910-.L1909
	.byte	1,5,59,1,5,9,9
	.half	.L65-.L1910
	.byte	3,9,1,5,16,9
	.half	.L1911-.L65
	.byte	1,9
	.half	.L1912-.L1911
	.byte	3,1,1,5,5,3,124,1,5,7,9
	.half	.L64-.L1912
	.byte	3,14,1,5,14,9
	.half	.L1913-.L64
	.byte	1,5,3,9
	.half	.L1914-.L1913
	.byte	3,15,1,5,97,9
	.half	.L1303-.L1914
	.byte	3,1,1,5,17,9
	.half	.L69-.L1303
	.byte	3,2,1,5,7,9
	.half	.L1915-.L69
	.byte	1,5,28,9
	.half	.L1916-.L1915
	.byte	1,5,15,9
	.half	.L1917-.L1916
	.byte	1,5,13,9
	.half	.L68-.L1917
	.byte	3,126,1,5,15,9
	.half	.L1918-.L68
	.byte	1,5,25,9
	.half	.L1919-.L1918
	.byte	1,5,10,9
	.half	.L1920-.L1919
	.byte	1,5,11,7,9
	.half	.L998-.L1920
	.byte	3,136,97,1,5,17,3,26,1,5,10,9
	.half	.L1305-.L998
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L1001-.L1305
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1306-.L1001
	.byte	1,5,5,9
	.half	.L1307-.L1306
	.byte	1,5,22,7,9
	.half	.L1921-.L1307
	.byte	3,7,1,5,7,9
	.half	.L1922-.L1921
	.byte	1,5,16,7,9
	.half	.L1923-.L1922
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L71-.L1923
	.byte	3,7,1,5,3,9
	.half	.L73-.L71
	.byte	3,9,1,5,5,7,9
	.half	.L1924-.L73
	.byte	3,2,1,5,82,9
	.half	.L74-.L1924
	.byte	3,192,30,1,5,3,7,9
	.half	.L70-.L74
	.byte	3,4,1,9
	.half	.L1925-.L70
	.byte	3,11,1,5,5,9
	.half	.L1926-.L1925
	.byte	1,5,7,9
	.half	.L54-.L1926
	.byte	3,209,12,1,5,19,9
	.half	.L981-.L54
	.byte	3,147,85,1,5,40,9
	.half	.L1927-.L981
	.byte	3,205,4,1,5,12,9
	.half	.L32-.L1927
	.byte	3,138,24,1,5,36,9
	.half	.L1308-.L32
	.byte	3,203,0,1,5,37,9
	.half	.L982-.L1308
	.byte	3,1,1,5,3,9
	.half	.L1928-.L982
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L513-.L1928
	.byte	0,1,1
.L1849:
	.sdecl	'.debug_ranges',debug,cluster('CanLL_ModeTransition')
	.sect	'.debug_ranges'
.L512:
	.word	-1,.L359,0,.L513-.L359,0,0
.L970:
	.word	-1,.L359,0,.L966-.L359,-1,.L361,0,.L633-.L361,-1,.L367,0,.L603-.L367,0,0
.L976:
	.word	-1,.L359,.L973-.L359,.L974-.L359,.L977-.L359,.L35-.L359,.L978-.L359,.L37-.L359,.L979-.L359,.L53-.L359
	.word	.L61-.L359,.L980-.L359,.L54-.L359,.L981-.L359,.L982-.L359,.L966-.L359,-1,.L365,0,.L608-.L365,-1,.L369
	.word	0,.L573-.L369,0,0
.L997:
	.word	-1,.L359,.L980-.L359,.L54-.L359,-1,.L363,0,.L613-.L363,0,0
	.sdecl	'.debug_info',debug,cluster('CanHL_TxConfirmation')
	.sect	'.debug_info'
.L514:
	.word	398
	.half	3
	.word	.L515
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L517,.L516
	.byte	2
	.word	.L430
	.byte	3
	.byte	'CanHL_TxConfirmation',0,1,180,57,43,1,1
	.word	.L371,.L1006,.L370
	.byte	4
	.byte	'mailboxHandle',0,1,180,57,110
	.word	.L671,.L1007
	.byte	4
	.byte	'mailboxElement',0,1,180,57,141,1
	.word	.L671,.L1008
	.byte	4
	.byte	'hwObjHandle',0,1,180,57,173,1
	.word	.L671,.L1009
	.byte	5
	.word	.L371,.L1006
	.byte	6
	.byte	'errorId',0,1,184,57,9
	.word	.L671,.L1010
	.byte	6
	.byte	'txConfPara',0,1,185,57,32
	.word	.L1011,.L1012
	.byte	7
	.word	.L1013
	.byte	6
	.byte	'tmp_pdu',0,1,221,57,15
	.word	.L671,.L1014
	.byte	8
	.word	.L1015,.L1016,.L1017
	.byte	9
	.word	.L1018,.L1019
	.byte	10
	.word	.L1020,.L1016,.L1017
	.byte	6
	.byte	'txBRP',0,1,186,34,11
	.word	.L683,.L1021
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanHL_TxConfirmation')
	.sect	'.debug_abbrev'
.L515:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,8,29,1,49,16,17,1,18,1,0,0,9,5,0,49,16,2,6,0,0,10,11,1,49
	.byte	16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanHL_TxConfirmation')
	.sect	'.debug_line'
.L516:
	.word	.L1930-.L1929
.L1929:
	.half	3
	.word	.L1932-.L1931
.L1931:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1932:
	.byte	5,43,7,0,5,2
	.word	.L371
	.byte	3,179,57,1,5,11,9
	.half	.L1309-.L371
	.byte	3,10,1,5,28,3,1,1,5,29,9
	.half	.L1310-.L1309
	.byte	3,1,1,5,26,9
	.half	.L1933-.L1310
	.byte	3,1,1,5,37,9
	.half	.L1934-.L1933
	.byte	3,19,1,5,9,9
	.half	.L1935-.L1934
	.byte	1,5,110,7,9
	.half	.L1936-.L1935
	.byte	1,5,107,9
	.half	.L1937-.L1936
	.byte	1,5,13,7,9
	.half	.L76-.L1937
	.byte	3,2,1,5,33,1,5,40,9
	.half	.L77-.L76
	.byte	3,155,87,1,5,33,9
	.half	.L1938-.L77
	.byte	3,253,40,1,5,29,9
	.half	.L1016-.L1938
	.byte	3,204,104,1,5,3,3,5,1,5,40,9
	.half	.L1939-.L1016
	.byte	3,123,1,5,3,3,5,1,9
	.half	.L79-.L1939
	.byte	3,2,1,5,50,9
	.half	.L1940-.L79
	.byte	3,2,1,5,3,1,5,50,9
	.half	.L1941-.L1940
	.byte	1,5,37,9
	.half	.L1316-.L1941
	.byte	1,5,3,9
	.half	.L1942-.L1316
	.byte	3,1,1,5,19,9
	.half	.L1017-.L1942
	.byte	3,175,23,1,5,9,9
	.half	.L1317-.L1017
	.byte	3,46,1,5,34,9
	.half	.L1943-.L1317
	.byte	3,12,1,5,3,9
	.half	.L78-.L1943
	.byte	3,27,1,5,5,7,9
	.half	.L1944-.L78
	.byte	3,2,1,5,1,9
	.half	.L80-.L1944
	.byte	3,6,1,7,9
	.half	.L518-.L80
	.byte	0,1,1
.L1930:
	.sdecl	'.debug_ranges',debug,cluster('CanHL_TxConfirmation')
	.sect	'.debug_ranges'
.L517:
	.word	-1,.L371,0,.L518-.L371,0,0
.L1013:
	.word	-1,.L371,.L77-.L371,.L78-.L371,-1,.L373,0,.L593-.L373,0,0
	.sdecl	'.debug_info',debug,cluster('CanHL_BasicCanMsgReceived')
	.sect	'.debug_info'
.L519:
	.word	445
	.half	3
	.word	.L520
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L522,.L521
	.byte	2
	.word	.L430
	.byte	3
	.byte	'CanHL_BasicCanMsgReceived',0,1,182,60,43,1,1
	.word	.L375,.L1022,.L374
	.byte	4
	.byte	'rxMailboxHandle',0,1,182,60,115
	.word	.L671,.L1023
	.byte	4
	.byte	'hwObjHandle',0,1,182,60,148,1
	.word	.L671,.L1024
	.byte	5
	.word	.L375,.L1022
	.byte	6
	.byte	'errorId',0,1,185,60,9
	.word	.L671,.L1025
	.byte	6
	.byte	'rxBasicPara',0,1,186,60,25
	.word	.L1026,.L1027
	.byte	7
	.word	.L1028,.L1029,.L1030
	.byte	8
	.word	.L1031,.L1032
	.byte	9
	.word	.L1033,.L1029,.L1030
	.byte	6
	.byte	'indexL',0,1,185,35,11
	.word	.L671,.L1034
	.byte	6
	.byte	'fElmSize',0,1,187,35,11
	.word	.L671,.L1035
	.byte	0,0,7
	.word	.L1036,.L1037,.L1038
	.byte	8
	.word	.L1039,.L1040
	.byte	10
	.word	.L1041,.L1037,.L1038
	.byte	0,7
	.word	.L1042,.L88,.L92
	.byte	8
	.word	.L1043,.L1044
	.byte	10
	.word	.L1045,.L88,.L92
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanHL_BasicCanMsgReceived')
	.sect	'.debug_abbrev'
.L520:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanHL_BasicCanMsgReceived')
	.sect	'.debug_line'
.L521:
	.word	.L1946-.L1945
.L1945:
	.half	3
	.word	.L1948-.L1947
.L1947:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L1948:
	.byte	5,43,7,0,5,2
	.word	.L375
	.byte	3,181,60,1,5,29,9
	.half	.L1029-.L375
	.byte	3,8,1,3,127,1,5,27,9
	.half	.L1320-.L1029
	.byte	3,1,1,5,34,9
	.half	.L1949-.L1320
	.byte	3,140,103,1,5,52,9
	.half	.L1950-.L1949
	.byte	3,2,1,5,36,9
	.half	.L1951-.L1950
	.byte	3,126,1,5,30,1,5,36,9
	.half	.L1952-.L1951
	.byte	3,1,1,5,30,1,5,68,9
	.half	.L1953-.L1952
	.byte	3,1,1,5,32,9
	.half	.L1954-.L1953
	.byte	3,1,1,5,68,9
	.half	.L1955-.L1954
	.byte	3,127,1,5,32,3,1,1,5,30,9
	.half	.L1956-.L1955
	.byte	3,127,1,5,32,9
	.half	.L1957-.L1956
	.byte	3,1,1,5,14,9
	.half	.L1958-.L1957
	.byte	3,7,1,5,32,9
	.half	.L1959-.L1958
	.byte	3,121,1,5,14,3,7,1,5,32,9
	.half	.L1960-.L1959
	.byte	3,121,1,5,30,9
	.half	.L1961-.L1960
	.byte	1,5,42,9
	.half	.L1962-.L1961
	.byte	3,4,1,5,48,9
	.half	.L1963-.L1962
	.byte	1,5,29,9
	.half	.L1964-.L1963
	.byte	1,5,48,9
	.half	.L1965-.L1964
	.byte	3,1,1,5,29,9
	.half	.L1966-.L1965
	.byte	1,5,14,9
	.half	.L1967-.L1966
	.byte	3,2,1,5,45,9
	.half	.L1322-.L1967
	.byte	3,1,1,5,27,7,9
	.half	.L82-.L1322
	.byte	3,5,1,5,38,9
	.half	.L1968-.L82
	.byte	1,5,53,9
	.half	.L1969-.L1968
	.byte	3,123,1,5,38,9
	.half	.L1321-.L1969
	.byte	3,5,1,5,53,9
	.half	.L1970-.L1321
	.byte	3,123,1,5,36,9
	.half	.L1325-.L1970
	.byte	3,5,1,5,28,9
	.half	.L1971-.L1325
	.byte	3,123,1,5,45,9
	.half	.L1972-.L1971
	.byte	1,5,68,7,9
	.half	.L81-.L1972
	.byte	3,9,1,5,37,9
	.half	.L1973-.L81
	.byte	1,5,68,9
	.half	.L1974-.L1973
	.byte	3,1,1,5,37,9
	.half	.L1975-.L1974
	.byte	1,5,43,9
	.half	.L1030-.L1975
	.byte	3,254,24,1,5,41,9
	.half	.L1976-.L1030
	.byte	1,5,44,9
	.half	.L1977-.L1976
	.byte	3,16,1,5,42,9
	.half	.L1978-.L1977
	.byte	1,5,18,9
	.half	.L1979-.L1978
	.byte	3,3,1,5,13,9
	.half	.L1323-.L1979
	.byte	1,5,44,7,9
	.half	.L1980-.L1323
	.byte	3,2,1,5,18,9
	.half	.L83-.L1980
	.byte	3,3,1,5,17,9
	.half	.L1981-.L83
	.byte	1,5,104,7,9
	.half	.L1982-.L1981
	.byte	1,5,114,9
	.half	.L1983-.L1982
	.byte	1,5,30,7,9
	.half	.L84-.L1983
	.byte	3,9,1,5,47,9
	.half	.L1319-.L84
	.byte	1,5,18,9
	.half	.L1984-.L1319
	.byte	1,5,48,7,9
	.half	.L1985-.L1984
	.byte	3,1,1,5,45,9
	.half	.L1986-.L1985
	.byte	1,5,23,7,9
	.half	.L86-.L1986
	.byte	3,2,1,5,43,1,5,37,9
	.half	.L87-.L86
	.byte	3,6,1,5,49,9
	.half	.L1987-.L87
	.byte	1,5,13,9
	.half	.L1988-.L1987
	.byte	1,5,23,7,9
	.half	.L85-.L1988
	.byte	3,2,1,5,40,1,5,55,9
	.half	.L89-.L85
	.byte	3,6,1,5,5,9
	.half	.L1037-.L89
	.byte	3,200,89,1,5,23,9
	.half	.L1038-.L1037
	.byte	3,185,38,1,5,41,9
	.half	.L88-.L1038
	.byte	3,237,102,1,5,18,9
	.half	.L1989-.L88
	.byte	1,5,56,9
	.half	.L1990-.L1989
	.byte	1,5,3,9
	.half	.L1991-.L1990
	.byte	1,5,17,7,9
	.half	.L1992-.L1991
	.byte	3,5,1,5,45,9
	.half	.L1993-.L1992
	.byte	1,5,57,9
	.half	.L1994-.L1993
	.byte	1,5,31,1,5,72,9
	.half	.L1995-.L1994
	.byte	1,5,5,9
	.half	.L91-.L1995
	.byte	3,4,1,5,3,9
	.half	.L92-.L91
	.byte	3,151,25,1,5,5,7,9
	.half	.L1996-.L92
	.byte	3,2,1,5,1,9
	.half	.L93-.L1996
	.byte	3,6,1,7,9
	.half	.L523-.L93
	.byte	0,1,1
.L1946:
	.sdecl	'.debug_ranges',debug,cluster('CanHL_BasicCanMsgReceived')
	.sect	'.debug_ranges'
.L522:
	.word	-1,.L375,0,.L523-.L375,0,0
	.sdecl	'.debug_info',debug,cluster('CanHL_ErrorHandling')
	.sect	'.debug_info'
.L524:
	.word	1289
	.half	3
	.word	.L525
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L527,.L526
	.byte	2
	.word	.L430
	.byte	3
	.byte	'CanHL_ErrorHandling',0,1,133,63,43,1,1
	.word	.L377,.L1046,.L376
	.byte	4
	.word	.L1047
	.byte	5
	.byte	'errorId',0,1,136,63,9
	.word	.L671,.L1048
	.byte	6
	.word	.L1049,.L1050,.L1051
	.byte	7
	.word	.L1052,.L1050,.L1051
	.byte	6
	.word	.L1053,.L1050,.L1054
	.byte	7
	.word	.L1055,.L1050,.L1054
	.byte	5
	.byte	'ret',0,1,252,45,10
	.word	.L671,.L1056
	.byte	6
	.word	.L903,.L96,.L97
	.byte	8
	.word	.L905,.L1057
	.byte	9
	.word	.L907,.L1058
	.byte	6
	.word	.L703,.L1059,.L99
	.byte	8
	.word	.L706,.L1060
	.byte	7
	.word	.L708,.L1059,.L99
	.byte	5
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L1061
	.byte	5
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L1062
	.byte	7
	.word	.L715,.L1063,.L102
	.byte	5
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L1064
	.byte	5
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L1065
	.byte	0,0,0,0,0,6
	.word	.L903,.L106,.L105
	.byte	8
	.word	.L905,.L1057
	.byte	9
	.word	.L907,.L1066
	.byte	6
	.word	.L703,.L1067,.L109
	.byte	8
	.word	.L706,.L1060
	.byte	7
	.word	.L708,.L1067,.L109
	.byte	5
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L1068
	.byte	5
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L1069
	.byte	7
	.word	.L715,.L1070,.L112
	.byte	5
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L1071
	.byte	5
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L1072
	.byte	0,0,0,0,0,0,0,0,0,6
	.word	.L689,.L1073,.L123
	.byte	8
	.word	.L692,.L1074
	.byte	8
	.word	.L694,.L1075
	.byte	8
	.word	.L696,.L1076
	.byte	7
	.word	.L698,.L1073,.L123
	.byte	5
	.byte	'transitionState',0,1,156,14,9
	.word	.L671,.L1077
	.byte	6
	.word	.L703,.L1078,.L1079
	.byte	8
	.word	.L706,.L1060
	.byte	9
	.word	.L708,.L1080
	.byte	5
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L1083
	.byte	5
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L1084
	.byte	7
	.word	.L715,.L1085,.L119
	.byte	5
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L1086
	.byte	5
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L1087
	.byte	0,0,0,6
	.word	.L703,.L1081,.L1082
	.byte	8
	.word	.L706,.L1060
	.byte	0,0,0,6
	.word	.L1088,.L114,.L1089
	.byte	9
	.word	.L1090,.L1091
	.byte	5
	.byte	'ret_val',0,1,240,39,10
	.word	.L671,.L1092
	.byte	6
	.word	.L903,.L1093,.L125
	.byte	8
	.word	.L905,.L1057
	.byte	9
	.word	.L907,.L1094
	.byte	6
	.word	.L703,.L1095,.L127
	.byte	8
	.word	.L706,.L1060
	.byte	7
	.word	.L708,.L1095,.L127
	.byte	5
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L1096
	.byte	5
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L1097
	.byte	7
	.word	.L715,.L1098,.L130
	.byte	5
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L1099
	.byte	5
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L1100
	.byte	0,0,0,0,0,0,0,6
	.word	.L1101,.L1089,.L133
	.byte	7
	.word	.L1102,.L1089,.L133
	.byte	6
	.word	.L903,.L1103,.L133
	.byte	8
	.word	.L905,.L1057
	.byte	7
	.word	.L907,.L1103,.L133
	.byte	6
	.word	.L703,.L1104,.L136
	.byte	8
	.word	.L706,.L1060
	.byte	7
	.word	.L708,.L1104,.L136
	.byte	5
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L1105
	.byte	5
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L1106
	.byte	7
	.word	.L715,.L1107,.L139
	.byte	5
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L1108
	.byte	5
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L1109
	.byte	0,0,0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanHL_ErrorHandling')
	.sect	'.debug_abbrev'
.L525:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,11,1,85,6,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1,49,16,17,1
	.byte	18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanHL_ErrorHandling')
	.sect	'.debug_line'
.L526:
	.word	.L1998-.L1997
.L1997:
	.half	3
	.word	.L2000-.L1999
.L1999:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2000:
	.byte	5,11,7,0,5,2
	.word	.L377
	.byte	3,136,63,1,5,43,3,124,1,5,19,9
	.half	.L1050-.L377
	.byte	3,132,111,1,5,10,1,5,12,9
	.half	.L2001-.L1050
	.byte	1,5,8,9
	.half	.L2002-.L2001
	.byte	1,5,46,7,9
	.half	.L2003-.L2002
	.byte	1,5,66,9
	.half	.L2004-.L2003
	.byte	1,5,10,7,9
	.half	.L2005-.L2004
	.byte	3,5,1,5,7,9
	.half	.L2006-.L2005
	.byte	1,5,54,7,9
	.half	.L2007-.L2006
	.byte	3,5,1,5,52,1,5,10,9
	.half	.L96-.L2007
	.byte	3,218,126,1,5,9,9
	.half	.L2008-.L96
	.byte	3,2,1,5,3,9
	.half	.L2009-.L2008
	.byte	1,5,5,7,9
	.half	.L2010-.L2009
	.byte	3,2,1,5,7,9
	.half	.L98-.L2010
	.byte	3,4,1,5,9,9
	.half	.L2011-.L98
	.byte	1,5,14,9
	.half	.L2012-.L2011
	.byte	1,5,16,9
	.half	.L2013-.L2012
	.byte	3,1,1,5,18,9
	.half	.L2014-.L2013
	.byte	1,5,14,9
	.half	.L2015-.L2014
	.byte	1,5,11,7,9
	.half	.L1059-.L2015
	.byte	3,195,94,1,5,17,3,26,1,5,10,9
	.half	.L1327-.L1059
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L1063-.L1327
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1328-.L1063
	.byte	1,5,5,9
	.half	.L1329-.L1328
	.byte	1,5,22,7,9
	.half	.L2016-.L1329
	.byte	3,7,1,5,7,9
	.half	.L2017-.L2016
	.byte	1,5,16,7,9
	.half	.L2018-.L2017
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L100-.L2018
	.byte	3,7,1,5,3,9
	.half	.L102-.L100
	.byte	3,9,1,5,5,7,9
	.half	.L2019-.L102
	.byte	3,2,1,5,87,9
	.half	.L103-.L2019
	.byte	3,133,33,1,5,5,7,9
	.half	.L99-.L103
	.byte	3,1,1,5,10,9
	.half	.L97-.L99
	.byte	3,146,1,1,5,9,9
	.half	.L2020-.L97
	.byte	3,19,1,5,12,9
	.half	.L1330-.L2020
	.byte	3,109,1,5,3,9
	.half	.L2021-.L1330
	.byte	3,21,1,5,84,9
	.half	.L2022-.L2021
	.byte	3,122,1,5,9,9
	.half	.L94-.L2022
	.byte	3,8,1,5,10,9
	.half	.L104-.L94
	.byte	3,3,1,5,17,9
	.half	.L2023-.L104
	.byte	1,5,3,9
	.half	.L2024-.L2023
	.byte	1,5,9,7,9
	.half	.L2025-.L2024
	.byte	3,4,1,9
	.half	.L2026-.L2025
	.byte	3,2,1,5,11,9
	.half	.L2027-.L2026
	.byte	1,5,5,9
	.half	.L2028-.L2027
	.byte	1,5,9,7,9
	.half	.L2029-.L2028
	.byte	3,51,1,5,11,9
	.half	.L2030-.L2029
	.byte	3,2,1,5,16,9
	.half	.L2031-.L2030
	.byte	3,126,1,5,3,9
	.half	.L106-.L2031
	.byte	3,145,126,1,9
	.half	.L1336-.L106
	.byte	3,2,1,5,5,7,9
	.half	.L2032-.L1336
	.byte	3,2,1,5,7,9
	.half	.L108-.L2032
	.byte	3,4,1,5,9,9
	.half	.L2033-.L108
	.byte	1,5,14,9
	.half	.L2034-.L2033
	.byte	1,5,16,9
	.half	.L2035-.L2034
	.byte	3,1,1,5,18,9
	.half	.L2036-.L2035
	.byte	1,5,14,9
	.half	.L2037-.L2036
	.byte	1,5,11,7,9
	.half	.L1067-.L2037
	.byte	3,195,94,1,5,17,3,26,1,5,10,9
	.half	.L1333-.L1067
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L1070-.L1333
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1334-.L1070
	.byte	1,5,5,9
	.half	.L1335-.L1334
	.byte	1,5,22,7,9
	.half	.L2038-.L1335
	.byte	3,7,1,5,7,9
	.half	.L2039-.L2038
	.byte	1,5,16,7,9
	.half	.L2040-.L2039
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L110-.L2040
	.byte	3,7,1,5,3,9
	.half	.L112-.L110
	.byte	3,9,1,5,5,7,9
	.half	.L2041-.L112
	.byte	3,2,1,5,87,9
	.half	.L113-.L2041
	.byte	3,133,33,1,5,5,7,9
	.half	.L109-.L113
	.byte	3,1,1,5,3,9
	.half	.L105-.L109
	.byte	3,244,1,1,5,10,9
	.half	.L1054-.L105
	.byte	3,177,16,1,5,90,7,9
	.half	.L1051-.L1054
	.byte	1,5,7,9
	.half	.L2042-.L1051
	.byte	3,3,1,9
	.half	.L2043-.L2042
	.byte	3,2,1,5,83,9
	.half	.L1073-.L2043
	.byte	3,255,78,1,5,102,9
	.half	.L2044-.L1073
	.byte	1,5,118,9
	.half	.L2045-.L2044
	.byte	1,5,19,9
	.half	.L1338-.L2045
	.byte	1,5,3,9
	.half	.L1337-.L1338
	.byte	3,1,1,5,5,7,9
	.half	.L2046-.L1337
	.byte	3,2,1,5,87,9
	.half	.L117-.L2046
	.byte	3,3,1,5,106,9
	.half	.L2047-.L117
	.byte	1,5,122,9
	.half	.L2048-.L2047
	.byte	1,5,11,9
	.half	.L1078-.L2048
	.byte	3,147,125,1,5,17,3,26,1,5,23,9
	.half	.L1079-.L1078
	.byte	3,211,2,1,5,15,3,173,125,1,5,10,9
	.half	.L1081-.L1079
	.byte	3,104,1,5,47,3,27,1,5,27,9
	.half	.L1085-.L1081
	.byte	1,5,59,1,5,5,9
	.half	.L1339-.L1085
	.byte	1,5,22,7,9
	.half	.L2049-.L1339
	.byte	3,7,1,5,7,9
	.half	.L2050-.L2049
	.byte	1,5,16,7,9
	.half	.L2051-.L2050
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L118-.L2051
	.byte	3,7,1,5,3,9
	.half	.L119-.L118
	.byte	3,9,1,5,5,7,9
	.half	.L2052-.L119
	.byte	3,2,1,5,7,9
	.half	.L121-.L2052
	.byte	3,182,2,1,5,42,7,9
	.half	.L1082-.L121
	.byte	3,1,1,5,5,7,9
	.half	.L122-.L1082
	.byte	3,1,1,5,3,9
	.half	.L116-.L122
	.byte	3,2,1,5,5,7,9
	.half	.L2053-.L116
	.byte	3,3,1,9
	.half	.L2054-.L2053
	.byte	3,1,1,9
	.half	.L2055-.L2054
	.byte	3,1,1,5,7,9
	.half	.L123-.L2055
	.byte	3,246,48,1,9
	.half	.L2056-.L123
	.byte	3,1,1,5,37,9
	.half	.L2057-.L2056
	.byte	3,2,1,5,18,9
	.half	.L114-.L2057
	.byte	3,199,104,1,5,9,3,6,1,5,3,9
	.half	.L2058-.L114
	.byte	1,5,13,7,9
	.half	.L1093-.L2058
	.byte	3,247,4,1,5,3,9
	.half	.L2059-.L1093
	.byte	3,2,1,5,5,7,9
	.half	.L2060-.L2059
	.byte	3,2,1,5,7,9
	.half	.L126-.L2060
	.byte	3,4,1,5,9,9
	.half	.L2061-.L126
	.byte	1,5,14,9
	.half	.L2062-.L2061
	.byte	1,5,16,9
	.half	.L2063-.L2062
	.byte	3,1,1,5,18,9
	.half	.L2064-.L2063
	.byte	1,5,23,9
	.half	.L2065-.L2064
	.byte	1,5,14,9
	.half	.L2066-.L2065
	.byte	1,5,11,7,9
	.half	.L1095-.L2066
	.byte	3,195,94,1,5,17,3,26,1,5,10,9
	.half	.L1342-.L1095
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L1098-.L1342
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1343-.L1098
	.byte	1,5,5,9
	.half	.L1344-.L1343
	.byte	1,5,22,7,9
	.half	.L2067-.L1344
	.byte	3,7,1,5,7,9
	.half	.L2068-.L2067
	.byte	1,5,16,7,9
	.half	.L2069-.L2068
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L128-.L2069
	.byte	3,7,1,5,3,9
	.half	.L130-.L128
	.byte	3,9,1,5,5,7,9
	.half	.L2070-.L130
	.byte	3,2,1,5,87,9
	.half	.L131-.L2070
	.byte	3,133,33,1,5,5,7,9
	.half	.L127-.L131
	.byte	3,1,1,5,13,9
	.half	.L125-.L127
	.byte	3,136,123,1,5,15,9
	.half	.L124-.L125
	.byte	3,179,23,1,5,9,3,241,104,1,5,3,9
	.half	.L1089-.L124
	.byte	1,5,13,7,9
	.half	.L1103-.L1089
	.byte	3,202,4,1,5,3,9
	.half	.L2071-.L1103
	.byte	3,2,1,5,5,7,9
	.half	.L2072-.L2071
	.byte	3,2,1,5,7,9
	.half	.L135-.L2072
	.byte	3,4,1,5,9,9
	.half	.L2073-.L135
	.byte	1,5,14,9
	.half	.L2074-.L2073
	.byte	1,5,16,9
	.half	.L2075-.L2074
	.byte	3,1,1,5,18,9
	.half	.L2076-.L2075
	.byte	1,5,23,9
	.half	.L2077-.L2076
	.byte	1,5,14,9
	.half	.L2078-.L2077
	.byte	1,5,11,7,9
	.half	.L1104-.L2078
	.byte	3,195,94,1,5,17,3,26,1,5,10,9
	.half	.L1347-.L1104
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L1107-.L1347
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1348-.L1107
	.byte	1,5,5,9
	.half	.L1349-.L1348
	.byte	1,5,22,7,9
	.half	.L2079-.L1349
	.byte	3,7,1,5,7,9
	.half	.L2080-.L2079
	.byte	1,5,16,7,9
	.half	.L2081-.L2080
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L137-.L2081
	.byte	3,7,1,5,3,9
	.half	.L139-.L137
	.byte	3,9,1,5,5,7,9
	.half	.L2082-.L139
	.byte	3,2,1,5,87,9
	.half	.L140-.L2082
	.byte	3,133,33,1,5,5,7,9
	.half	.L136-.L140
	.byte	3,1,1,5,3,9
	.half	.L133-.L136
	.byte	3,200,18,1,5,5,7,9
	.half	.L2083-.L133
	.byte	3,2,1,5,1,9
	.half	.L141-.L2083
	.byte	3,5,1,7,9
	.half	.L528-.L141
	.byte	0,1,1
.L1998:
	.sdecl	'.debug_ranges',debug,cluster('CanHL_ErrorHandling')
	.sect	'.debug_ranges'
.L527:
	.word	-1,.L377,0,.L528-.L377,0,0
.L1047:
	.word	-1,.L377,0,.L1046-.L377,-1,.L379,0,.L648-.L379,0,0
.L1058:
	.word	-1,.L377,.L96-.L377,.L97-.L377,-1,.L381,0,.L643-.L381,0,0
.L1066:
	.word	-1,.L377,.L106-.L377,.L105-.L377,-1,.L387,0,.L548-.L387,-1,.L389,0,.L543-.L389,0,0
.L1080:
	.word	-1,.L377,.L1078-.L377,.L1079-.L377,.L1081-.L377,.L1082-.L377,0,0
.L1091:
	.word	-1,.L377,.L114-.L377,.L1089-.L377,-1,.L385,0,.L578-.L385,0,0
.L1094:
	.word	-1,.L377,.L1093-.L377,.L125-.L377,-1,.L383,0,.L583-.L383,0,0
	.sdecl	'.debug_info',debug,cluster('CanHL_ReInit')
	.sect	'.debug_info'
.L529:
	.word	3755
	.half	3
	.word	.L530
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L532,.L531
	.byte	2
	.word	.L430
	.byte	3
	.byte	'CanHL_ReInit',0,1,250,12,44
	.word	.L671
	.byte	1,1
	.word	.L345,.L1110,.L344
	.byte	4
	.byte	'doRamCheck',0,1,250,12,93
	.word	.L671,.L1111
	.byte	5
	.word	.L1112
	.byte	6
	.byte	'errorId',0,1,253,12,9
	.word	.L671,.L1113
	.byte	6
	.byte	'initPara',0,1,254,12,22
	.word	.L1114,.L1115
	.byte	7
	.word	.L1116,.L1117,.L1118
	.byte	8
	.word	.L1119,.L1120
	.byte	9
	.word	.L1121,.L1122
	.byte	7
	.word	.L1126,.L1117,.L1118
	.byte	8
	.word	.L1127,.L1128
	.byte	10
	.word	.L1129,.L1130
	.byte	0,7
	.word	.L1126,.L1123,.L1124
	.byte	8
	.word	.L1127,.L1128
	.byte	0,7
	.word	.L1135,.L1125,.L1131
	.byte	8
	.word	.L1136,.L1137
	.byte	9
	.word	.L1138,.L1139
	.byte	7
	.word	.L1140,.L1125,.L1131
	.byte	8
	.word	.L1141,.L1142
	.byte	9
	.word	.L1143,.L1144
	.byte	6
	.byte	'LocalRegValue',0,1,225,47,11
	.word	.L683,.L1145
	.byte	7
	.word	.L703,.L1146,.L4
	.byte	8
	.word	.L706,.L1147
	.byte	11
	.word	.L708,.L1146,.L4
	.byte	6
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L1148
	.byte	6
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L1149
	.byte	11
	.word	.L715,.L1150,.L7
	.byte	6
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L1151
	.byte	6
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L1152
	.byte	0,0,0,7
	.word	.L703,.L1153,.L10
	.byte	8
	.word	.L706,.L1147
	.byte	11
	.word	.L708,.L1153,.L10
	.byte	6
	.byte	'retval',0,1,182,11,18
	.word	.L712,.L1154
	.byte	6
	.byte	'errorId',0,1,183,11,9
	.word	.L671,.L1155
	.byte	11
	.word	.L715,.L1156,.L13
	.byte	6
	.byte	'elapsedTime',0,1,207,11,14
	.word	.L683,.L1157
	.byte	6
	.byte	'startTime',0,1,208,11,14
	.word	.L683,.L1158
	.byte	0,0,0,7
	.word	.L1159,.L16,.L1160
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L16,.L1160
	.byte	0,7
	.word	.L1159,.L1170,.L1171
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	10
	.word	.L1169,.L1172
	.byte	0,7
	.word	.L1159,.L1171,.L1173
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	10
	.word	.L1169,.L1175
	.byte	0,7
	.word	.L1159,.L1173,.L1174
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	0,7
	.word	.L1159,.L1176,.L1177
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	0,7
	.word	.L1159,.L1177,.L1178
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1177,.L1178
	.byte	0,7
	.word	.L1159,.L1178,.L1179
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1178,.L1179
	.byte	0,7
	.word	.L1159,.L1179,.L1180
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	10
	.word	.L1169,.L1181
	.byte	0,7
	.word	.L1159,.L1180,.L1184
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	10
	.word	.L1169,.L1185
	.byte	0,7
	.word	.L1159,.L1186,.L1187
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	0,7
	.word	.L1159,.L1188,.L1189
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	0,7
	.word	.L1159,.L1190,.L1191
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1190,.L1191
	.byte	0,7
	.word	.L1159,.L1182,.L1183
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	0,7
	.word	.L1159,.L1183,.L1192
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1183,.L1192
	.byte	0,7
	.word	.L1159,.L1192,.L1193
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1192,.L1193
	.byte	0,7
	.word	.L1159,.L1194,.L1195
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1194,.L1195
	.byte	0,7
	.word	.L1159,.L1195,.L1196
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	10
	.word	.L1169,.L1197
	.byte	0,7
	.word	.L1159,.L1198,.L17
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	0,7
	.word	.L1159,.L17,.L1199
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L17,.L1199
	.byte	0,7
	.word	.L1159,.L1199,.L1200
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1199,.L1200
	.byte	0,7
	.word	.L1159,.L1200,.L1201
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1200,.L1201
	.byte	0,7
	.word	.L1159,.L1201,.L1202
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1201,.L1202
	.byte	0,7
	.word	.L1159,.L1202,.L1203
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1202,.L1203
	.byte	0,7
	.word	.L1159,.L1204,.L20
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1204,.L20
	.byte	0,0,0,7
	.word	.L1140,.L1132,.L1133
	.byte	8
	.word	.L1141,.L1142
	.byte	0,7
	.word	.L1140,.L1134,.L20
	.byte	8
	.word	.L1141,.L1142
	.byte	0,7
	.word	.L1205,.L20,.L1206
	.byte	8
	.word	.L1207,.L1208
	.byte	9
	.word	.L1209,.L1210
	.byte	7
	.word	.L1159,.L20,.L1206
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L20,.L1206
	.byte	0,7
	.word	.L1159,.L1211,.L1212
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	10
	.word	.L1169,.L1224
	.byte	0,7
	.word	.L1159,.L1213,.L1214
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	0,7
	.word	.L1159,.L1215,.L1216
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	10
	.word	.L1169,.L1225
	.byte	0,7
	.word	.L1159,.L1217,.L1226
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	0,7
	.word	.L1159,.L1226,.L1227
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1226,.L1227
	.byte	0,7
	.word	.L1159,.L1227,.L1228
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1227,.L1228
	.byte	0,7
	.word	.L1159,.L1228,.L1229
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1228,.L1229
	.byte	0,7
	.word	.L1159,.L1229,.L1230
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1229,.L1230
	.byte	0,7
	.word	.L1159,.L1230,.L1218
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1230,.L1218
	.byte	0,0,0,7
	.word	.L1219,.L1206,.L1211
	.byte	8
	.word	.L1220,.L1221
	.byte	9
	.word	.L1222,.L1223
	.byte	7
	.word	.L1159,.L1231,.L1232
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1231,.L1232
	.byte	0,0,0,7
	.word	.L1205,.L1211,.L1212
	.byte	8
	.word	.L1207,.L1208
	.byte	0,7
	.word	.L1219,.L1212,.L1213
	.byte	8
	.word	.L1220,.L1221
	.byte	0,7
	.word	.L1205,.L1213,.L1214
	.byte	8
	.word	.L1207,.L1208
	.byte	0,7
	.word	.L1219,.L1214,.L1215
	.byte	8
	.word	.L1220,.L1221
	.byte	0,7
	.word	.L1205,.L1215,.L1216
	.byte	8
	.word	.L1207,.L1208
	.byte	0,7
	.word	.L1219,.L1216,.L1217
	.byte	8
	.word	.L1220,.L1221
	.byte	0,7
	.word	.L1205,.L1217,.L1218
	.byte	8
	.word	.L1207,.L1208
	.byte	0,7
	.word	.L1219,.L1218,.L21
	.byte	8
	.word	.L1220,.L1221
	.byte	0,0,0,7
	.word	.L1126,.L1131,.L1132
	.byte	8
	.word	.L1127,.L1128
	.byte	0,7
	.word	.L1135,.L1132,.L1133
	.byte	8
	.word	.L1136,.L1137
	.byte	0,7
	.word	.L1126,.L1133,.L1134
	.byte	8
	.word	.L1127,.L1128
	.byte	0,7
	.word	.L1135,.L1134,.L21
	.byte	8
	.word	.L1136,.L1137
	.byte	0,0,0,7
	.word	.L1116,.L1123,.L1124
	.byte	8
	.word	.L1119,.L1120
	.byte	0,7
	.word	.L1116,.L1125,.L21
	.byte	8
	.word	.L1119,.L1120
	.byte	0,7
	.word	.L1233,.L1234,.L1235
	.byte	8
	.word	.L1236,.L1237
	.byte	9
	.word	.L1238,.L1239
	.byte	7
	.word	.L1240,.L1241,.L1235
	.byte	8
	.word	.L1242,.L1243
	.byte	12
	.word	.L1244,.L1241,.L1235
	.byte	0,0,0,7
	.word	.L1245,.L1246,.L25
	.byte	8
	.word	.L1247,.L1248
	.byte	12
	.word	.L1249,.L1246,.L25
	.byte	0,7
	.word	.L1250,.L1251,.L27
	.byte	8
	.word	.L1252,.L1253
	.byte	11
	.word	.L1254,.L1251,.L27
	.byte	7
	.word	.L1255,.L1251,.L27
	.byte	8
	.word	.L1256,.L1257
	.byte	11
	.word	.L1258,.L1251,.L27
	.byte	7
	.word	.L1159,.L1251,.L1259
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1251,.L1259
	.byte	0,7
	.word	.L1159,.L1259,.L1260
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1259,.L1260
	.byte	0,7
	.word	.L1159,.L1260,.L1261
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L1260,.L1261
	.byte	0,7
	.word	.L1159,.L1262,.L1263
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	10
	.word	.L1169,.L1264
	.byte	0,7
	.word	.L1159,.L1265,.L1266
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	0,7
	.word	.L1159,.L26,.L27
	.byte	8
	.word	.L1161,.L1162
	.byte	8
	.word	.L1163,.L1164
	.byte	8
	.word	.L1165,.L1166
	.byte	8
	.word	.L1167,.L1168
	.byte	12
	.word	.L1169,.L26,.L27
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanHL_ReInit')
	.sect	'.debug_abbrev'
.L530:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85,6,0,0,10,11
	.byte	0,49,16,85,6,0,0,11,11,1,49,16,17,1,18,1,0,0,12,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanHL_ReInit')
	.sect	'.debug_line'
.L531:
	.word	.L2085-.L2084
.L2084:
	.half	3
	.word	.L2087-.L2086
.L2086:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2087:
	.byte	5,7,7,0,5,2
	.word	.L345
	.byte	3,132,13,1,5,11,9
	.half	.L2088-.L345
	.byte	3,123,1,5,44,3,122,1,5,21,9
	.half	.L1274-.L2088
	.byte	3,7,1,5,3,9
	.half	.L2089-.L1274
	.byte	3,4,1,5,27,7,9
	.half	.L2090-.L2089
	.byte	3,23,1,5,25,9
	.half	.L2091-.L2090
	.byte	1,5,47,9
	.half	.L1117-.L2091
	.byte	3,170,11,1,5,7,9
	.half	.L1118-.L1117
	.byte	3,230,116,1,5,47,9
	.half	.L1123-.L1118
	.byte	3,154,11,1,5,7,9
	.half	.L1124-.L1123
	.byte	3,230,116,1,5,3,9
	.half	.L1125-.L1124
	.byte	3,231,34,1,5,47,9
	.half	.L1131-.L1125
	.byte	3,179,104,1,5,3,9
	.half	.L1132-.L1131
	.byte	3,205,23,1,5,49,9
	.half	.L1133-.L1132
	.byte	3,179,104,1,5,35,9
	.half	.L2092-.L1133
	.byte	1,5,20,9
	.half	.L1134-.L2092
	.byte	3,156,23,1,5,14,9
	.half	.L2093-.L1134
	.byte	3,48,1,5,24,3,82,1,5,12,9
	.half	.L2094-.L2093
	.byte	3,46,1,5,3,9
	.half	.L2095-.L2094
	.byte	3,1,1,5,12,9
	.half	.L3-.L2095
	.byte	3,1,1,5,14,9
	.half	.L2096-.L3
	.byte	1,5,10,9
	.half	.L2097-.L2096
	.byte	1,5,11,7,9
	.half	.L1146-.L2097
	.byte	3,165,91,1,5,17,3,26,1,5,10,9
	.half	.L1275-.L1146
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L1150-.L1275
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1276-.L1150
	.byte	1,5,5,9
	.half	.L1277-.L1276
	.byte	1,5,22,7,9
	.half	.L2098-.L1277
	.byte	3,7,1,5,7,9
	.half	.L2099-.L2098
	.byte	1,5,16,7,9
	.half	.L2100-.L2099
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L5-.L2100
	.byte	3,7,1,5,3,9
	.half	.L7-.L5
	.byte	3,9,1,5,5,7,9
	.half	.L2101-.L7
	.byte	3,2,1,5,87,9
	.half	.L8-.L2101
	.byte	3,163,36,1,5,3,7,9
	.half	.L4-.L8
	.byte	3,2,1,9
	.half	.L2102-.L4
	.byte	3,8,1,9
	.half	.L2103-.L2102
	.byte	3,1,1,5,5,9
	.half	.L2104-.L2103
	.byte	3,127,1,5,38,9
	.half	.L2105-.L2104
	.byte	1,5,12,9
	.half	.L2106-.L2105
	.byte	1,5,3,9
	.half	.L2107-.L2106
	.byte	3,1,1,5,12,9
	.half	.L9-.L2107
	.byte	3,1,1,5,14,9
	.half	.L2108-.L9
	.byte	1,5,10,9
	.half	.L2109-.L2108
	.byte	1,5,11,7,9
	.half	.L1153-.L2109
	.byte	3,153,91,1,5,17,3,26,1,5,10,9
	.half	.L1278-.L1153
	.byte	3,104,1,5,15,3,24,1,5,27,9
	.half	.L1156-.L1278
	.byte	3,3,1,5,47,1,5,59,9
	.half	.L1279-.L1156
	.byte	1,5,5,9
	.half	.L1280-.L1279
	.byte	1,5,22,7,9
	.half	.L2110-.L1280
	.byte	3,7,1,5,7,9
	.half	.L2111-.L2110
	.byte	1,5,16,7,9
	.half	.L2112-.L2111
	.byte	3,2,1,5,24,1,5,19,9
	.half	.L11-.L2112
	.byte	3,7,1,5,3,9
	.half	.L13-.L11
	.byte	3,9,1,5,5,7,9
	.half	.L2113-.L13
	.byte	3,2,1,5,86,9
	.half	.L14-.L2113
	.byte	3,175,36,1,5,3,7,9
	.half	.L10-.L14
	.byte	3,2,1,5,19,9
	.half	.L2114-.L10
	.byte	3,4,1,5,21,9
	.half	.L2115-.L2114
	.byte	1,5,19,9
	.half	.L2116-.L2115
	.byte	3,8,1,5,7,3,5,1,5,3,9
	.half	.L1282-.L2116
	.byte	1,5,21,7,9
	.half	.L2117-.L1282
	.byte	3,3,1,5,66,1,5,19,9
	.half	.L15-.L2117
	.byte	3,9,1,5,11,9
	.half	.L16-.L15
	.byte	3,160,103,1,5,3,9
	.half	.L1160-.L16
	.byte	3,242,24,1,5,5,9
	.half	.L2118-.L1160
	.byte	1,5,54,9
	.half	.L1170-.L2118
	.byte	3,27,1,5,13,9
	.half	.L2119-.L1170
	.byte	3,243,102,1,5,63,3,145,25,1,5,56,9
	.half	.L2120-.L2119
	.byte	3,124,1,5,63,9
	.half	.L1171-.L2120
	.byte	3,4,1,5,11,9
	.half	.L1173-.L1171
	.byte	3,239,102,1,5,160,1,9
	.half	.L1174-.L1173
	.byte	3,219,25,1,5,63,9
	.half	.L1176-.L1174
	.byte	3,182,127,1,5,53,9
	.half	.L2121-.L1176
	.byte	1,5,63,9
	.half	.L2122-.L2121
	.byte	1,5,55,9
	.half	.L2123-.L2122
	.byte	1,5,63,9
	.half	.L2124-.L2123
	.byte	1,5,11,9
	.half	.L2125-.L2124
	.byte	3,239,102,1,5,63,9
	.half	.L1177-.L2125
	.byte	3,146,25,1,5,53,9
	.half	.L2126-.L1177
	.byte	1,5,63,9
	.half	.L2127-.L2126
	.byte	1,5,55,9
	.half	.L2128-.L2127
	.byte	1,5,63,9
	.half	.L2129-.L2128
	.byte	1,5,11,9
	.half	.L2130-.L2129
	.byte	3,238,102,1,5,61,9
	.half	.L1178-.L2130
	.byte	3,163,25,1,5,53,9
	.half	.L2131-.L1178
	.byte	1,5,61,9
	.half	.L2132-.L2131
	.byte	1,5,55,9
	.half	.L2133-.L2132
	.byte	1,5,61,9
	.half	.L2134-.L2133
	.byte	1,5,11,9
	.half	.L2135-.L2134
	.byte	3,221,102,1,5,62,9
	.half	.L1179-.L2135
	.byte	3,200,25,1,5,54,9
	.half	.L1180-.L1179
	.byte	3,97,1,5,160,1,9
	.half	.L1184-.L1180
	.byte	3,50,1,5,56,9
	.half	.L1186-.L1184
	.byte	3,78,1,5,6,9
	.half	.L1187-.L1186
	.byte	3,59,1,5,11,9
	.half	.L1188-.L1187
	.byte	3,156,102,1,5,3,9
	.half	.L1189-.L1188
	.byte	3,174,25,1,5,5,9
	.half	.L2136-.L1189
	.byte	1,5,12,9
	.half	.L2137-.L2136
	.byte	1,5,54,9
	.half	.L1190-.L2137
	.byte	3,9,1,5,56,9
	.half	.L2138-.L1190
	.byte	1,5,11,9
	.half	.L2139-.L2138
	.byte	3,201,102,1,5,3,9
	.half	.L1191-.L2139
	.byte	3,193,25,1,5,5,9
	.half	.L2140-.L1191
	.byte	1,5,12,9
	.half	.L2141-.L2140
	.byte	1,5,22,9
	.half	.L2142-.L2141
	.byte	3,3,1,5,24,9
	.half	.L2143-.L2142
	.byte	1,5,20,9
	.half	.L2144-.L2143
	.byte	1,5,62,9
	.half	.L1182-.L2144
	.byte	3,4,1,5,11,9
	.half	.L2145-.L1182
	.byte	3,184,102,1,5,65,9
	.half	.L1183-.L2145
	.byte	3,208,25,1,5,54,9
	.half	.L2146-.L1183
	.byte	1,5,56,9
	.half	.L2147-.L2146
	.byte	1,5,65,9
	.half	.L2148-.L2147
	.byte	1,5,11,9
	.half	.L2149-.L2148
	.byte	3,176,102,1,5,74,9
	.half	.L1192-.L2149
	.byte	3,211,25,1,5,54,9
	.half	.L2150-.L1192
	.byte	1,5,74,9
	.half	.L2151-.L2150
	.byte	1,5,56,9
	.half	.L2152-.L2151
	.byte	1,5,74,9
	.half	.L2153-.L2152
	.byte	1,5,11,9
	.half	.L2154-.L2153
	.byte	3,173,102,1,5,41,9
	.half	.L1193-.L2154
	.byte	3,219,25,1,5,83,9
	.half	.L2155-.L1193
	.byte	1,5,101,1,5,143,1,9
	.half	.L2156-.L2155
	.byte	1,5,88,9
	.half	.L2157-.L2156
	.byte	1,5,160,1,1,5,148,1,9
	.half	.L1284-.L2157
	.byte	1,5,54,3,1,1,5,56,9
	.half	.L1194-.L1284
	.byte	1,5,11,9
	.half	.L2158-.L1194
	.byte	3,164,102,1,5,56,9
	.half	.L1195-.L2158
	.byte	3,230,25,1,5,58,9
	.half	.L2159-.L1195
	.byte	1,5,112,9
	.half	.L2160-.L2159
	.byte	3,136,127,1,5,6,9
	.half	.L1196-.L2160
	.byte	3,246,0,1,5,3,9
	.half	.L2161-.L1196
	.byte	1,5,80,7,9
	.half	.L1198-.L2161
	.byte	3,2,1,5,11,9
	.half	.L17-.L1198
	.byte	3,154,102,1,5,13,9
	.half	.L1199-.L17
	.byte	1,5,54,9
	.half	.L1285-.L1199
	.byte	3,252,25,1,5,56,9
	.half	.L2162-.L1285
	.byte	1,5,11,9
	.half	.L2163-.L2162
	.byte	3,132,102,1,5,54,9
	.half	.L1200-.L2163
	.byte	3,136,26,1,5,56,9
	.half	.L2164-.L1200
	.byte	1,5,75,9
	.half	.L2165-.L2164
	.byte	1,5,11,9
	.half	.L2166-.L2165
	.byte	3,248,101,1,5,54,9
	.half	.L1201-.L2166
	.byte	3,141,26,1,5,56,9
	.half	.L2167-.L1201
	.byte	1,5,76,9
	.half	.L2168-.L2167
	.byte	1,5,11,9
	.half	.L2169-.L2168
	.byte	3,243,101,1,5,54,9
	.half	.L1202-.L2169
	.byte	3,150,26,1,5,56,9
	.half	.L2170-.L1202
	.byte	1,5,11,9
	.half	.L2171-.L2170
	.byte	3,234,101,1,5,20,9
	.half	.L1203-.L2171
	.byte	3,154,26,1,9
	.half	.L2172-.L1203
	.byte	3,1,1,9
	.half	.L2173-.L2172
	.byte	3,42,1,5,6,9
	.half	.L2174-.L2173
	.byte	3,89,1,5,20,9
	.half	.L2175-.L2174
	.byte	3,39,1,5,44,9
	.half	.L2176-.L2175
	.byte	3,89,1,5,11,9
	.half	.L2177-.L2176
	.byte	3,39,1,5,3,9
	.half	.L2178-.L2177
	.byte	3,20,1,5,18,7,9
	.half	.L2179-.L2178
	.byte	3,2,1,5,3,9
	.half	.L19-.L2179
	.byte	3,13,1,5,6,9
	.half	.L2180-.L19
	.byte	1,5,3,9
	.half	.L2181-.L2180
	.byte	1,5,56,7,9
	.half	.L1204-.L2181
	.byte	3,3,1,5,58,9
	.half	.L2182-.L1204
	.byte	1,5,13,9
	.half	.L2183-.L2182
	.byte	3,149,101,1,5,11,9
	.half	.L2184-.L2183
	.byte	1,5,54,9
	.half	.L20-.L2184
	.byte	3,130,27,1,5,76,9
	.half	.L2185-.L20
	.byte	1,5,56,9
	.half	.L2186-.L2185
	.byte	1,5,76,9
	.half	.L2187-.L2186
	.byte	1,5,11,9
	.half	.L2188-.L2187
	.byte	3,254,100,1,5,20,9
	.half	.L1206-.L2188
	.byte	3,174,23,1,5,54,9
	.half	.L1211-.L1206
	.byte	3,213,3,1,5,20,9
	.half	.L1212-.L1211
	.byte	3,171,124,1,5,56,9
	.half	.L1213-.L1212
	.byte	3,213,3,1,5,76,9
	.half	.L2189-.L1213
	.byte	1,5,11,9
	.half	.L2190-.L2189
	.byte	3,253,100,1,5,20,9
	.half	.L1214-.L2190
	.byte	3,174,23,1,5,54,9
	.half	.L1215-.L1214
	.byte	3,215,3,1,5,20,9
	.half	.L1216-.L1215
	.byte	3,169,124,1,5,56,9
	.half	.L1217-.L1216
	.byte	3,215,3,1,5,13,9
	.half	.L2191-.L1217
	.byte	3,251,100,1,5,11,9
	.half	.L2192-.L2191
	.byte	1,5,54,9
	.half	.L1226-.L2192
	.byte	3,135,27,1,5,56,9
	.half	.L2193-.L1226
	.byte	1,5,11,9
	.half	.L2194-.L2193
	.byte	3,249,100,1,5,54,9
	.half	.L1227-.L2194
	.byte	3,136,27,1,5,56,9
	.half	.L2195-.L1227
	.byte	1,5,11,9
	.half	.L2196-.L2195
	.byte	3,248,100,1,5,54,9
	.half	.L1228-.L2196
	.byte	3,137,27,1,5,56,9
	.half	.L2197-.L1228
	.byte	1,5,11,9
	.half	.L2198-.L2197
	.byte	3,247,100,1,5,54,9
	.half	.L1229-.L2198
	.byte	3,139,27,1,5,56,9
	.half	.L2199-.L1229
	.byte	1,5,11,9
	.half	.L2200-.L2199
	.byte	3,245,100,1,5,54,9
	.half	.L1230-.L2200
	.byte	3,141,27,1,5,56,9
	.half	.L2201-.L1230
	.byte	1,5,74,9
	.half	.L2202-.L2201
	.byte	1,5,11,9
	.half	.L2203-.L2202
	.byte	3,243,100,1,5,20,9
	.half	.L1218-.L2203
	.byte	3,174,23,1,5,17,9
	.half	.L2204-.L1218
	.byte	1,5,24,9
	.half	.L2205-.L2204
	.byte	3,1,1,5,49,9
	.half	.L2206-.L2205
	.byte	1,5,93,9
	.half	.L2207-.L2206
	.byte	1,5,58,7,9
	.half	.L1231-.L2207
	.byte	3,11,1,5,111,9
	.half	.L2208-.L1231
	.byte	1,5,58,9
	.half	.L2209-.L2208
	.byte	1,5,125,9
	.half	.L2210-.L2209
	.byte	1,5,58,9
	.half	.L2211-.L2210
	.byte	1,5,116,9
	.half	.L2212-.L2211
	.byte	1,5,87,9
	.half	.L2213-.L2212
	.byte	1,5,116,9
	.half	.L2214-.L2213
	.byte	1,5,29,9
	.half	.L1232-.L2214
	.byte	3,1,1,5,11,3,197,104,1,5,113,9
	.half	.L2215-.L1232
	.byte	3,175,23,1,5,29,3,12,1,5,113,9
	.half	.L2216-.L2215
	.byte	3,116,1,5,49,9
	.half	.L2217-.L2216
	.byte	1,5,93,9
	.half	.L2218-.L2217
	.byte	1,5,40,7,9
	.half	.L21-.L2218
	.byte	3,161,94,1,5,23,1,5,29,9
	.half	.L1234-.L21
	.byte	3,209,5,1,9
	.half	.L2219-.L1234
	.byte	3,120,1,5,27,9
	.half	.L2220-.L2219
	.byte	1,5,29,9
	.half	.L2221-.L2220
	.byte	3,8,1,5,27,9
	.half	.L2222-.L2221
	.byte	1,5,40,9
	.half	.L2223-.L2222
	.byte	3,241,125,1,5,38,9
	.half	.L1241-.L2223
	.byte	3,202,9,1,5,20,9
	.half	.L2224-.L1241
	.byte	1,5,26,9
	.half	.L2225-.L2224
	.byte	3,9,1,5,13,9
	.half	.L2226-.L2225
	.byte	1,5,24,9
	.half	.L2227-.L2226
	.byte	1,5,48,9
	.half	.L2228-.L2227
	.byte	3,10,1,5,24,1,5,25,9
	.half	.L1235-.L2228
	.byte	3,234,114,1,5,34,9
	.half	.L1246-.L1235
	.byte	3,131,7,1,5,32,9
	.half	.L2229-.L1246
	.byte	1,5,29,9
	.half	.L2230-.L2229
	.byte	3,2,1,5,101,9
	.half	.L2231-.L2230
	.byte	3,126,1,5,11,9
	.half	.L2232-.L2231
	.byte	3,189,126,1,5,164,1,9
	.half	.L24-.L2232
	.byte	3,195,1,1,5,29,3,2,1,5,164,1,9
	.half	.L2233-.L24
	.byte	3,126,1,5,11,3,189,126,1,5,100,7,9
	.half	.L25-.L2233
	.byte	3,199,122,1,5,15,9
	.half	.L2234-.L25
	.byte	1,5,25,1,5,54,9
	.half	.L1251-.L2234
	.byte	3,183,15,1,5,129,1,9
	.half	.L2235-.L1251
	.byte	1,5,56,9
	.half	.L2236-.L2235
	.byte	1,5,96,9
	.half	.L2237-.L2236
	.byte	1,5,110,9
	.half	.L2238-.L2237
	.byte	1,5,117,9
	.half	.L2239-.L2238
	.byte	1,5,11,3,233,122,1,5,54,9
	.half	.L1259-.L2239
	.byte	3,182,5,1,5,85,9
	.half	.L2240-.L1259
	.byte	1,5,56,9
	.half	.L2241-.L2240
	.byte	1,5,11,9
	.half	.L2242-.L2241
	.byte	3,202,122,1,5,54,9
	.half	.L1260-.L2242
	.byte	3,183,5,1,5,56,9
	.half	.L2243-.L1260
	.byte	1,5,11,9
	.half	.L2244-.L2243
	.byte	3,201,122,1,5,42,9
	.half	.L1261-.L2244
	.byte	3,185,5,1,5,32,9
	.half	.L2245-.L1261
	.byte	1,5,56,9
	.half	.L1262-.L2245
	.byte	3,4,1,5,58,9
	.half	.L2246-.L1262
	.byte	1,5,100,9
	.half	.L2247-.L2246
	.byte	3,156,112,1,5,9,9
	.half	.L1263-.L2247
	.byte	3,227,15,1,5,3,9
	.half	.L2248-.L1263
	.byte	1,5,83,7,9
	.half	.L1265-.L2248
	.byte	3,1,1,5,11,9
	.half	.L2249-.L1265
	.byte	3,195,122,1,5,138,1,9
	.half	.L1266-.L2249
	.byte	3,189,5,1,5,11,9
	.half	.L26-.L1266
	.byte	3,195,122,1,5,25,9
	.half	.L27-.L26
	.byte	3,227,117,1,5,7,9
	.half	.L2250-.L27
	.byte	3,26,1,5,79,9
	.half	.L2251-.L2250
	.byte	1,5,15,9
	.half	.L2-.L2251
	.byte	3,5,1,5,3,9
	.half	.L28-.L2
	.byte	3,6,1,5,5,7,9
	.half	.L2252-.L28
	.byte	3,2,1,5,18,9
	.half	.L29-.L2252
	.byte	3,9,1,5,1,9
	.half	.L2253-.L29
	.byte	3,1,1,7,9
	.half	.L533-.L2253
	.byte	0,1,1
.L2085:
	.sdecl	'.debug_ranges',debug,cluster('CanHL_ReInit')
	.sect	'.debug_ranges'
.L532:
	.word	-1,.L345,0,.L533-.L345,0,0
.L1112:
	.word	-1,.L345,0,.L1110-.L345,-1,.L357,0,.L538-.L357,0,0
.L1122:
	.word	-1,.L345,.L1117-.L345,.L1118-.L345,.L1123-.L345,.L1124-.L345,.L1125-.L345,.L21-.L345,0,0
.L1130:
	.word	-1,.L345,.L1117-.L345,.L1118-.L345,.L1123-.L345,.L1124-.L345,.L1131-.L345,.L1132-.L345,.L1133-.L345,.L1134-.L345
	.word	0,0
.L1139:
	.word	-1,.L345,.L1125-.L345,.L1131-.L345,.L1132-.L345,.L1133-.L345,.L1134-.L345,.L21-.L345,0,0
.L1144:
	.word	-1,.L345,.L1125-.L345,.L1131-.L345,.L1132-.L345,.L1133-.L345,.L1134-.L345,.L20-.L345,-1,.L347,0,.L598-.L347
	.word	-1,.L349,0,.L588-.L349,-1,.L355,0,.L563-.L355,0,0
.L1172:
	.word	-1,.L345,.L1170-.L345,.L1171-.L345,.L1173-.L345,.L1174-.L345,0,0
.L1175:
	.word	-1,.L345,.L1171-.L345,.L1173-.L345,.L1176-.L345,.L1177-.L345,0,0
.L1181:
	.word	-1,.L345,.L1179-.L345,.L1180-.L345,.L1182-.L345,.L1183-.L345,0,0
.L1185:
	.word	-1,.L345,.L1180-.L345,.L1184-.L345,.L1186-.L345,.L1187-.L345,.L1188-.L345,.L1189-.L345,0,0
.L1197:
	.word	-1,.L345,.L1195-.L345,.L1196-.L345,.L1198-.L345,.L17-.L345,0,0
.L1210:
	.word	-1,.L345,.L20-.L345,.L1206-.L345,.L1211-.L345,.L1212-.L345,.L1213-.L345,.L1214-.L345,.L1215-.L345,.L1216-.L345
	.word	.L1217-.L345,.L1218-.L345,0,0
.L1223:
	.word	-1,.L345,.L1206-.L345,.L1211-.L345,.L1212-.L345,.L1213-.L345,.L1214-.L345,.L1215-.L345,.L1216-.L345,.L1217-.L345
	.word	.L1218-.L345,.L21-.L345,0,0
.L1224:
	.word	-1,.L345,.L1211-.L345,.L1212-.L345,.L1213-.L345,.L1214-.L345,0,0
.L1225:
	.word	-1,.L345,.L1215-.L345,.L1216-.L345,.L1217-.L345,.L1226-.L345,0,0
.L1239:
	.word	-1,.L345,.L1234-.L345,.L1235-.L345,-1,.L351,0,.L568-.L351,-1,.L353,0,.L638-.L353,0,0
.L1264:
	.word	-1,.L345,.L1262-.L345,.L1263-.L345,.L1265-.L345,.L1266-.L345,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L534:
	.word	166
	.half	3
	.word	.L535
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L537,.L536
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_2',0,1,250,12,44,1
	.word	.L357,.L538,.L356
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L535:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L536:
	.word	.L2255-.L2254
.L2254:
	.half	3
	.word	.L2257-.L2256
.L2256:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2257:
	.byte	5,5,7,0,5,2
	.word	.L357
	.byte	3,232,13,1,9
	.half	.L538-.L357
	.byte	0,1,1,5,3,0,5,2
	.word	.L357
	.byte	3,190,34,1,5,5,9
	.half	.L1313-.L357
	.byte	3,170,107,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1,5,5,0,5,2
	.word	.L357
	.byte	3,201,58,1,9
	.half	.L1313-.L357
	.byte	3,159,83,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1,5,5,0,5,2
	.word	.L357
	.byte	3,133,36,1,9
	.half	.L1313-.L357
	.byte	3,227,105,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1,5,5,0,5,2
	.word	.L357
	.byte	3,158,61,1,9
	.half	.L1313-.L357
	.byte	3,202,80,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1,5,9,0,5,2
	.word	.L357
	.byte	3,166,46,1,5,5,9
	.half	.L1313-.L357
	.byte	3,194,95,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1,5,5,0,5,2
	.word	.L357
	.byte	3,192,63,1,9
	.half	.L1313-.L357
	.byte	3,168,78,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1,5,5,0,5,2
	.word	.L357
	.byte	3,204,195,0,1,9
	.half	.L1313-.L357
	.byte	3,156,74,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1,5,5,0,5,2
	.word	.L357
	.byte	3,155,197,0,1,9
	.half	.L1313-.L357
	.byte	3,205,72,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1,5,5,0,5,2
	.word	.L357
	.byte	3,134,198,0,1,9
	.half	.L1313-.L357
	.byte	3,226,71,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1,5,5,0,5,2
	.word	.L357
	.byte	3,242,198,0,1,9
	.half	.L1313-.L357
	.byte	3,246,70,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1,5,5,0,5,2
	.word	.L357
	.byte	3,217,200,0,1,9
	.half	.L1313-.L357
	.byte	3,143,69,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1,5,5,0,5,2
	.word	.L357
	.byte	3,128,203,0,1,9
	.half	.L1313-.L357
	.byte	3,232,66,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1,5,5,0,5,2
	.word	.L357
	.byte	3,232,204,0,1,9
	.half	.L1313-.L357
	.byte	3,128,65,1,7,9
	.half	.L538-.L1313
	.byte	0,1,1
.L2255:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L537:
	.word	-1,.L357,0,.L538-.L357,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L539:
	.word	166
	.half	3
	.word	.L540
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L542,.L541
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_3',0,1,133,63,43,1
	.word	.L389,.L543,.L388
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L540:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L541:
	.word	.L2259-.L2258
.L2258:
	.half	3
	.word	.L2261-.L2260
.L2260:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2261:
	.byte	5,3,7,0,5,2
	.word	.L389
	.byte	3,236,44,1,5,5,9
	.half	.L2262-.L389
	.byte	1,5,10,9
	.half	.L2263-.L2262
	.byte	1,5,9,9
	.half	.L2264-.L2263
	.byte	3,2,1,5,11,9
	.half	.L1331-.L2264
	.byte	1,7,9
	.half	.L543-.L1331
	.byte	0,1,1,5,3,0,5,2
	.word	.L389
	.byte	3,236,44,1,5,5,9
	.half	.L2262-.L389
	.byte	1,5,10,9
	.half	.L2263-.L2262
	.byte	1,5,9,9
	.half	.L2264-.L2263
	.byte	3,2,1,5,11,9
	.half	.L1331-.L2264
	.byte	1,7,9
	.half	.L543-.L1331
	.byte	0,1,1,5,3,0,5,2
	.word	.L389
	.byte	3,236,44,1,5,5,9
	.half	.L2262-.L389
	.byte	1,5,10,9
	.half	.L2263-.L2262
	.byte	1,5,9,9
	.half	.L2264-.L2263
	.byte	3,2,1,5,11,9
	.half	.L1331-.L2264
	.byte	1,7,9
	.half	.L543-.L1331
	.byte	0,1,1
.L2259:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L542:
	.word	-1,.L389,0,.L543-.L389,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L544:
	.word	166
	.half	3
	.word	.L545
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L547,.L546
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_4',0,1,133,63,43,1
	.word	.L387,.L548,.L386
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L545:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L546:
	.word	.L2266-.L2265
.L2265:
	.half	3
	.word	.L2268-.L2267
.L2267:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2268:
	.byte	5,5,7,0,5,2
	.word	.L387
	.byte	3,240,44,1,9
	.half	.L548-.L387
	.byte	0,1,1,5,5,0,5,2
	.word	.L387
	.byte	3,240,44,1,9
	.half	.L548-.L387
	.byte	0,1,1,5,5,0,5,2
	.word	.L387
	.byte	3,240,44,1,9
	.half	.L548-.L387
	.byte	0,1,1,5,5,0,5,2
	.word	.L387
	.byte	3,240,44,1,9
	.half	.L548-.L387
	.byte	0,1,1
.L2266:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L547:
	.word	-1,.L387,0,.L548-.L387,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L549:
	.word	166
	.half	3
	.word	.L550
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L552,.L551
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_5',0,1,128,68,42,1
	.word	.L403,.L553,.L402
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L550:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L551:
	.word	.L2270-.L2269
.L2269:
	.half	3
	.word	.L2272-.L2271
.L2271:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2272:
	.byte	5,5,7,0,5,2
	.word	.L403
	.byte	3,210,14,1,9
	.half	.L2273-.L403
	.byte	3,2,1,5,44,9
	.half	.L1380-.L2273
	.byte	3,2,1,9
	.half	.L553-.L1380
	.byte	0,1,1,5,5,0,5,2
	.word	.L403
	.byte	3,210,14,1,9
	.half	.L2273-.L403
	.byte	3,2,1,5,44,9
	.half	.L1380-.L2273
	.byte	3,2,1,9
	.half	.L553-.L1380
	.byte	0,1,1,5,5,0,5,2
	.word	.L403
	.byte	3,210,14,1,9
	.half	.L2273-.L403
	.byte	3,2,1,5,44,9
	.half	.L1380-.L2273
	.byte	3,2,1,9
	.half	.L553-.L1380
	.byte	0,1,1
.L2270:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L552:
	.word	-1,.L403,0,.L553-.L403,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L554:
	.word	166
	.half	3
	.word	.L555
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L557,.L556
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_6',0,1,198,64,42,1
	.word	.L395,.L558,.L394
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L555:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L556:
	.word	.L2275-.L2274
.L2274:
	.half	3
	.word	.L2277-.L2276
.L2276:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2277:
	.byte	5,8,7,0,5,2
	.word	.L395
	.byte	3,208,192,0,1,9
	.half	.L558-.L395
	.byte	0,1,1,5,7,0,5,2
	.word	.L395
	.byte	3,143,196,0,1,5,8,9
	.half	.L2278-.L395
	.byte	3,193,124,1,7,9
	.half	.L558-.L2278
	.byte	0,1,1,5,7,0,5,2
	.word	.L395
	.byte	3,214,197,0,1,5,8,9
	.half	.L2278-.L395
	.byte	3,250,122,1,7,9
	.half	.L558-.L2278
	.byte	0,1,1,5,7,0,5,2
	.word	.L395
	.byte	3,191,198,0,1,5,8,9
	.half	.L2278-.L395
	.byte	3,145,122,1,7,9
	.half	.L558-.L2278
	.byte	0,1,1,5,7,0,5,2
	.word	.L395
	.byte	3,197,202,0,1,5,8,9
	.half	.L2278-.L395
	.byte	3,139,118,1,7,9
	.half	.L558-.L2278
	.byte	0,1,1,5,7,0,5,2
	.word	.L395
	.byte	3,159,204,0,1,5,8,9
	.half	.L2278-.L395
	.byte	3,177,116,1,7,9
	.half	.L558-.L2278
	.byte	0,1,1
.L2275:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L557:
	.word	-1,.L395,0,.L558-.L395,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L559:
	.word	166
	.half	3
	.word	.L560
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L562,.L561
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_7',0,1,250,12,44,1
	.word	.L355,.L563,.L354
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L560:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L561:
	.word	.L2280-.L2279
.L2279:
	.half	3
	.word	.L2282-.L2281
.L2281:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2282:
	.byte	5,21,7,0,5,2
	.word	.L355
	.byte	3,165,48,1,9
	.half	.L563-.L355
	.byte	0,1,1,5,7,0,5,2
	.word	.L355
	.byte	3,201,56,1,5,21,9
	.half	.L2283-.L355
	.byte	3,220,119,1,7,9
	.half	.L563-.L2283
	.byte	0,1,1,5,11,0,5,2
	.word	.L355
	.byte	3,202,56,1,5,21,9
	.half	.L2283-.L355
	.byte	3,219,119,1,7,9
	.half	.L563-.L2283
	.byte	0,1,1,5,5,0,5,2
	.word	.L355
	.byte	3,250,41,1,5,21,9
	.half	.L2283-.L355
	.byte	3,171,6,1,7,9
	.half	.L563-.L2283
	.byte	0,1,1,5,11,0,5,2
	.word	.L355
	.byte	3,168,46,1,5,21,9
	.half	.L2283-.L355
	.byte	3,253,1,1,7,9
	.half	.L563-.L2283
	.byte	0,1,1
.L2280:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L562:
	.word	-1,.L355,0,.L563-.L355,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L564:
	.word	166
	.half	3
	.word	.L565
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L567,.L566
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_8',0,1,250,12,44,1
	.word	.L351,.L568,.L350
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L565:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L566:
	.word	.L2285-.L2284
.L2284:
	.half	3
	.word	.L2287-.L2286
.L2286:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2287:
	.byte	5,40,7,0,5,2
	.word	.L351
	.byte	3,240,16,1,5,7,9
	.half	.L2288-.L351
	.byte	3,150,2,1,9
	.half	.L568-.L2288
	.byte	0,1,1,5,40,0,5,2
	.word	.L351
	.byte	3,240,16,1,5,7,9
	.half	.L2288-.L351
	.byte	3,150,2,1,9
	.half	.L2289-.L2288
	.byte	3,169,121,1,9
	.half	.L1286-.L2289
	.byte	3,215,6,1,7,9
	.half	.L568-.L1286
	.byte	0,1,1
.L2285:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L567:
	.word	-1,.L351,0,.L568-.L351,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_9')
	.sect	'.debug_info'
.L569:
	.word	166
	.half	3
	.word	.L570
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L572,.L571
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_9',0,1,239,40,45,1
	.word	.L369,.L573,.L368
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_9')
	.sect	'.debug_abbrev'
.L570:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_9')
	.sect	'.debug_line'
.L571:
	.word	.L2291-.L2290
.L2290:
	.half	3
	.word	.L2293-.L2292
.L2292:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2293:
	.byte	5,7,7,0,5,2
	.word	.L369
	.byte	3,144,55,1,9
	.half	.L573-.L369
	.byte	0,1,1,5,8,0,5,2
	.word	.L369
	.byte	3,164,56,1,5,7,9
	.half	.L2294-.L369
	.byte	3,236,126,1,7,9
	.half	.L573-.L2294
	.byte	0,1,1,5,10,0,5,2
	.word	.L369
	.byte	3,136,46,1,5,7,9
	.half	.L2294-.L369
	.byte	3,136,9,1,7,9
	.half	.L573-.L2294
	.byte	0,1,1,5,17,0,5,2
	.word	.L369
	.byte	3,154,53,1,5,7,9
	.half	.L2294-.L369
	.byte	3,246,1,1,7,9
	.half	.L573-.L2294
	.byte	0,1,1
.L2291:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_9')
	.sect	'.debug_ranges'
.L572:
	.word	-1,.L369,0,.L573-.L369,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_10')
	.sect	'.debug_info'
.L574:
	.word	167
	.half	3
	.word	.L575
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L577,.L576
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_10',0,1,133,63,43,1
	.word	.L385,.L578,.L384
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_10')
	.sect	'.debug_abbrev'
.L575:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_10')
	.sect	'.debug_line'
.L576:
	.word	.L2296-.L2295
.L2295:
	.half	3
	.word	.L2298-.L2297
.L2297:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2298:
	.byte	5,9,7,0,5,2
	.word	.L385
	.byte	3,245,39,1,5,11,9
	.half	.L1341-.L385
	.byte	1,9
	.half	.L578-.L1341
	.byte	0,1,1,5,9,0,5,2
	.word	.L385
	.byte	3,162,40,1,5,11,9
	.half	.L1341-.L385
	.byte	1,9
	.half	.L2299-.L1341
	.byte	3,83,1,7,9
	.half	.L578-.L2299
	.byte	0,1,1,5,14,0,5,2
	.word	.L385
	.byte	3,148,213,0,1,5,16,9
	.half	.L1341-.L385
	.byte	1,5,11,9
	.half	.L2299-.L1341
	.byte	3,225,82,1,7,9
	.half	.L578-.L2299
	.byte	0,1,1
.L2296:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_10')
	.sect	'.debug_ranges'
.L577:
	.word	-1,.L385,0,.L578-.L385,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_11')
	.sect	'.debug_info'
.L579:
	.word	167
	.half	3
	.word	.L580
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L582,.L581
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_11',0,1,133,63,43,1
	.word	.L383,.L583,.L382
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_11')
	.sect	'.debug_abbrev'
.L580:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_11')
	.sect	'.debug_line'
.L581:
	.word	.L2301-.L2300
.L2300:
	.half	3
	.word	.L2303-.L2302
.L2302:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2303:
	.byte	5,13,7,0,5,2
	.word	.L383
	.byte	3,236,44,1,5,10,1,5,9,9
	.half	.L2304-.L383
	.byte	3,2,1,5,11,9
	.half	.L2305-.L2304
	.byte	1,5,16,9
	.half	.L2306-.L2305
	.byte	1,9
	.half	.L583-.L2306
	.byte	0,1,1,5,13,0,5,2
	.word	.L383
	.byte	3,236,44,1,5,10,1,5,9,9
	.half	.L2304-.L383
	.byte	3,2,1,5,11,9
	.half	.L2305-.L2304
	.byte	1,5,16,9
	.half	.L2306-.L2305
	.byte	1,9
	.half	.L583-.L2306
	.byte	0,1,1
.L2301:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_11')
	.sect	'.debug_ranges'
.L582:
	.word	-1,.L383,0,.L583-.L383,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_12')
	.sect	'.debug_info'
.L584:
	.word	167
	.half	3
	.word	.L585
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L587,.L586
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_12',0,1,250,12,44,1
	.word	.L349,.L588,.L348
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_12')
	.sect	'.debug_abbrev'
.L585:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_12')
	.sect	'.debug_line'
.L586:
	.word	.L2308-.L2307
.L2307:
	.half	3
	.word	.L2310-.L2309
.L2309:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2310:
	.byte	5,5,7,0,5,2
	.word	.L349
	.byte	3,208,48,1,5,18,9
	.half	.L2311-.L349
	.byte	1,5,16,9
	.half	.L2312-.L2311
	.byte	1,9
	.half	.L588-.L2312
	.byte	0,1,1,5,5,0,5,2
	.word	.L349
	.byte	3,191,42,1,5,12,9
	.half	.L2311-.L349
	.byte	1,5,10,9
	.half	.L2312-.L2311
	.byte	1,5,16,9
	.half	.L1283-.L2312
	.byte	3,145,6,1,7,9
	.half	.L588-.L1283
	.byte	0,1,1
.L2308:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_12')
	.sect	'.debug_ranges'
.L587:
	.word	-1,.L349,0,.L588-.L349,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_13')
	.sect	'.debug_info'
.L589:
	.word	167
	.half	3
	.word	.L590
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L592,.L591
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_13',0,1,180,57,43,1
	.word	.L373,.L593,.L372
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_13')
	.sect	'.debug_abbrev'
.L590:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_13')
	.sect	'.debug_line'
.L591:
	.word	.L2314-.L2313
.L2313:
	.half	3
	.word	.L2316-.L2315
.L2315:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2316:
	.byte	5,40,7,0,5,2
	.word	.L373
	.byte	3,240,16,1,9
	.half	.L593-.L373
	.byte	0,1,1,5,49,0,5,2
	.word	.L373
	.byte	3,134,61,1,5,40,9
	.half	.L2317-.L373
	.byte	3,234,83,1,7,9
	.half	.L593-.L2317
	.byte	0,1,1
.L2314:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_13')
	.sect	'.debug_ranges'
.L592:
	.word	-1,.L373,0,.L593-.L373,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_14')
	.sect	'.debug_info'
.L594:
	.word	167
	.half	3
	.word	.L595
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L597,.L596
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_14',0,1,250,12,44,1
	.word	.L347,.L598,.L346
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_14')
	.sect	'.debug_abbrev'
.L595:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_14')
	.sect	'.debug_line'
.L596:
	.word	.L2319-.L2318
.L2318:
	.half	3
	.word	.L2321-.L2320
.L2320:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2321:
	.byte	5,7,7,0,5,2
	.word	.L347
	.byte	3,178,48,1,9
	.half	.L598-.L347
	.byte	0,1,1,5,13,0,5,2
	.word	.L347
	.byte	3,174,200,0,1,5,7,9
	.half	.L2322-.L347
	.byte	3,132,104,1,7,9
	.half	.L598-.L2322
	.byte	0,1,1
.L2319:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_14')
	.sect	'.debug_ranges'
.L597:
	.word	-1,.L347,0,.L598-.L347,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_15')
	.sect	'.debug_info'
.L599:
	.word	167
	.half	3
	.word	.L600
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L602,.L601
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_15',0,1,239,40,45,1
	.word	.L367,.L603,.L366
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_15')
	.sect	'.debug_abbrev'
.L600:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_15')
	.sect	'.debug_line'
.L601:
	.word	.L2324-.L2323
.L2323:
	.half	3
	.word	.L2326-.L2325
.L2325:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2326:
	.byte	5,12,7,0,5,2
	.word	.L367
	.byte	3,250,40,1,9
	.half	.L603-.L367
	.byte	0,1,1,5,12,0,5,2
	.word	.L367
	.byte	3,250,40,1,5,14,9
	.half	.L1291-.L367
	.byte	3,42,1,5,12,9
	.half	.L2327-.L1291
	.byte	3,86,1,7,9
	.half	.L603-.L2327
	.byte	0,1,1
.L2324:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_15')
	.sect	'.debug_ranges'
.L602:
	.word	-1,.L367,0,.L603-.L367,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_16')
	.sect	'.debug_info'
.L604:
	.word	167
	.half	3
	.word	.L605
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L607,.L606
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_16',0,1,239,40,45,1
	.word	.L365,.L608,.L364
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_16')
	.sect	'.debug_abbrev'
.L605:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_16')
	.sect	'.debug_line'
.L606:
	.word	.L2329-.L2328
.L2328:
	.half	3
	.word	.L2331-.L2330
.L2330:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2331:
	.byte	5,14,7,0,5,2
	.word	.L365
	.byte	3,159,55,1,5,5,9
	.half	.L2332-.L365
	.byte	3,1,1,5,7,9
	.half	.L2333-.L2332
	.byte	1,9
	.half	.L608-.L2333
	.byte	0,1,1,5,16,0,5,2
	.word	.L365
	.byte	3,149,42,1,5,7,9
	.half	.L2332-.L365
	.byte	3,1,1,5,9,9
	.half	.L2333-.L2332
	.byte	1,5,7,9
	.half	.L2334-.L2333
	.byte	3,138,13,1,7,9
	.half	.L608-.L2334
	.byte	0,1,1
.L2329:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_16')
	.sect	'.debug_ranges'
.L607:
	.word	-1,.L365,0,.L608-.L365,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_17')
	.sect	'.debug_info'
.L609:
	.word	167
	.half	3
	.word	.L610
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L612,.L611
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_17',0,1,239,40,45,1
	.word	.L363,.L613,.L362
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_17')
	.sect	'.debug_abbrev'
.L610:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_17')
	.sect	'.debug_line'
.L611:
	.word	.L2336-.L2335
.L2335:
	.half	3
	.word	.L2338-.L2337
.L2337:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2338:
	.byte	5,6,7,0,5,2
	.word	.L363
	.byte	3,135,42,1,9
	.half	.L613-.L363
	.byte	0,1,1,5,38,0,5,2
	.word	.L363
	.byte	3,233,199,0,1,5,6,9
	.half	.L2339-.L363
	.byte	3,158,98,1,7,9
	.half	.L613-.L2339
	.byte	0,1,1
.L2336:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_17')
	.sect	'.debug_ranges'
.L612:
	.word	-1,.L363,0,.L613-.L363,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_18')
	.sect	'.debug_info'
.L614:
	.word	167
	.half	3
	.word	.L615
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L617,.L616
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_18',0,1,128,68,42,1
	.word	.L401,.L618,.L400
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_18')
	.sect	'.debug_abbrev'
.L615:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_18')
	.sect	'.debug_line'
.L616:
	.word	.L2341-.L2340
.L2340:
	.half	3
	.word	.L2343-.L2342
.L2342:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2343:
	.byte	5,10,7,0,5,2
	.word	.L401
	.byte	3,165,196,0,1,9
	.half	.L618-.L401
	.byte	0,1,1,5,5,0,5,2
	.word	.L401
	.byte	3,240,44,1,5,10,9
	.half	.L2344-.L401
	.byte	3,181,23,1,7,9
	.half	.L618-.L2344
	.byte	0,1,1,5,5,0,5,2
	.word	.L401
	.byte	3,240,44,1,5,10,9
	.half	.L2344-.L401
	.byte	3,181,23,1,7,9
	.half	.L618-.L2344
	.byte	0,1,1
.L2341:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_18')
	.sect	'.debug_ranges'
.L617:
	.word	-1,.L401,0,.L618-.L401,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_19')
	.sect	'.debug_info'
.L619:
	.word	167
	.half	3
	.word	.L620
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L622,.L621
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_19',0,1,206,69,32,1
	.word	.L407,.L623,.L406
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_19')
	.sect	'.debug_abbrev'
.L620:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_19')
	.sect	'.debug_line'
.L621:
	.word	.L2346-.L2345
.L2345:
	.half	3
	.word	.L2348-.L2347
.L2347:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2348:
	.byte	5,8,7,0,5,2
	.word	.L407
	.byte	3,233,197,0,1,9
	.half	.L623-.L407
	.byte	0,1,1,5,8,0,5,2
	.word	.L407
	.byte	3,233,197,0,1,9
	.half	.L1389-.L407
	.byte	3,233,0,1,9
	.half	.L2349-.L1389
	.byte	3,151,127,1,7,9
	.half	.L623-.L2349
	.byte	0,1,1
.L2346:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_19')
	.sect	'.debug_ranges'
.L622:
	.word	-1,.L407,0,.L623-.L407,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_20')
	.sect	'.debug_info'
.L624:
	.word	167
	.half	3
	.word	.L625
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L627,.L626
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_20',0,1,234,84,32,1
	.word	.L429,.L628,.L428
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_20')
	.sect	'.debug_abbrev'
.L625:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_20')
	.sect	'.debug_line'
.L626:
	.word	.L2351-.L2350
.L2350:
	.half	3
	.word	.L2353-.L2352
.L2352:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2353:
	.byte	5,5,7,0,5,2
	.word	.L429
	.byte	3,240,44,1,9
	.half	.L628-.L429
	.byte	0,1,1,5,5,0,5,2
	.word	.L429
	.byte	3,240,44,1,9
	.half	.L628-.L429
	.byte	0,1,1
.L2351:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_20')
	.sect	'.debug_ranges'
.L627:
	.word	-1,.L429,0,.L628-.L429,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_21')
	.sect	'.debug_info'
.L629:
	.word	167
	.half	3
	.word	.L630
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L632,.L631
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_21',0,1,239,40,45,1
	.word	.L361,.L633,.L360
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_21')
	.sect	'.debug_abbrev'
.L630:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_21')
	.sect	'.debug_line'
.L631:
	.word	.L2355-.L2354
.L2354:
	.half	3
	.word	.L2357-.L2356
.L2356:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2357:
	.byte	5,12,7,0,5,2
	.word	.L361
	.byte	3,250,40,1,9
	.half	.L633-.L361
	.byte	0,1,1,5,3,0,5,2
	.word	.L361
	.byte	3,253,41,1,5,12,9
	.half	.L2358-.L361
	.byte	3,253,126,1,7,9
	.half	.L633-.L2358
	.byte	0,1,1,5,12,0,5,2
	.word	.L361
	.byte	3,250,40,1,9
	.half	.L633-.L361
	.byte	0,1,1,5,12,0,5,2
	.word	.L361
	.byte	3,250,40,1,9
	.half	.L633-.L361
	.byte	0,1,1,5,14,0,5,2
	.word	.L361
	.byte	3,164,41,1,5,12,9
	.half	.L2358-.L361
	.byte	3,86,1,7,9
	.half	.L633-.L2358
	.byte	0,1,1,5,90,0,5,2
	.word	.L361
	.byte	3,155,63,1,5,12,9
	.half	.L2358-.L361
	.byte	3,223,105,1,7,9
	.half	.L633-.L2358
	.byte	0,1,1,5,11,0,5,2
	.word	.L361
	.byte	3,165,195,0,1,5,12,9
	.half	.L2358-.L361
	.byte	3,213,101,1,7,9
	.half	.L633-.L2358
	.byte	0,1,1,5,8,0,5,2
	.word	.L361
	.byte	3,233,197,0,1,5,12,9
	.half	.L2358-.L361
	.byte	3,145,99,1,7,9
	.half	.L633-.L2358
	.byte	0,1,1,5,8,0,5,2
	.word	.L361
	.byte	3,210,198,0,1,5,12,9
	.half	.L2358-.L361
	.byte	3,168,98,1,7,9
	.half	.L633-.L2358
	.byte	0,1,1,5,12,0,5,2
	.word	.L361
	.byte	3,179,204,0,1,9
	.half	.L2358-.L361
	.byte	3,199,92,1,7,9
	.half	.L633-.L2358
	.byte	0,1,1
.L2355:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_21')
	.sect	'.debug_ranges'
.L632:
	.word	-1,.L361,0,.L633-.L361,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_22')
	.sect	'.debug_info'
.L634:
	.word	167
	.half	3
	.word	.L635
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L637,.L636
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_22',0,1,250,12,44,1
	.word	.L353,.L638,.L352
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_22')
	.sect	'.debug_abbrev'
.L635:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_22')
	.sect	'.debug_line'
.L636:
	.word	.L2360-.L2359
.L2359:
	.half	3
	.word	.L2362-.L2361
.L2361:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2362:
	.byte	5,7,7,0,5,2
	.word	.L353
	.byte	3,134,19,1,9
	.half	.L638-.L353
	.byte	0,1,1,5,7,0,5,2
	.word	.L353
	.byte	3,175,12,1,9
	.half	.L2363-.L353
	.byte	3,215,6,1,7,9
	.half	.L638-.L2363
	.byte	0,1,1,5,19,0,5,2
	.word	.L353
	.byte	3,242,57,1,5,7,9
	.half	.L2363-.L353
	.byte	3,148,89,1,7,9
	.half	.L638-.L2363
	.byte	0,1,1,5,7,0,5,2
	.word	.L353
	.byte	3,144,16,1,9
	.half	.L2363-.L353
	.byte	3,246,2,1,7,9
	.half	.L638-.L2363
	.byte	0,1,1
.L2360:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_22')
	.sect	'.debug_ranges'
.L637:
	.word	-1,.L353,0,.L638-.L353,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_23')
	.sect	'.debug_info'
.L639:
	.word	167
	.half	3
	.word	.L640
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L642,.L641
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_23',0,1,133,63,43,1
	.word	.L381,.L643,.L380
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_23')
	.sect	'.debug_abbrev'
.L640:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_23')
	.sect	'.debug_line'
.L641:
	.word	.L2365-.L2364
.L2364:
	.half	3
	.word	.L2367-.L2366
.L2366:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2367:
	.byte	5,9,7,0,5,2
	.word	.L381
	.byte	3,238,44,1,5,11,9
	.half	.L2368-.L381
	.byte	1,9
	.half	.L643-.L2368
	.byte	0,1,1,5,9,0,5,2
	.word	.L381
	.byte	3,238,44,1,5,11,9
	.half	.L2368-.L381
	.byte	1,9
	.half	.L643-.L2368
	.byte	0,1,1,5,9,0,5,2
	.word	.L381
	.byte	3,238,44,1,5,11,9
	.half	.L2368-.L381
	.byte	1,9
	.half	.L643-.L2368
	.byte	0,1,1,5,9,0,5,2
	.word	.L381
	.byte	3,238,44,1,5,11,9
	.half	.L2368-.L381
	.byte	1,9
	.half	.L643-.L2368
	.byte	0,1,1,5,9,0,5,2
	.word	.L381
	.byte	3,238,44,1,5,11,9
	.half	.L2368-.L381
	.byte	1,9
	.half	.L643-.L2368
	.byte	0,1,1,5,9,0,5,2
	.word	.L381
	.byte	3,238,44,1,5,11,9
	.half	.L2368-.L381
	.byte	1,9
	.half	.L643-.L2368
	.byte	0,1,1
.L2365:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_23')
	.sect	'.debug_ranges'
.L642:
	.word	-1,.L381,0,.L643-.L381,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_24')
	.sect	'.debug_info'
.L644:
	.word	167
	.half	3
	.word	.L645
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L647,.L646
	.byte	2
	.word	.L430
	.byte	3
	.byte	'.cocofun_24',0,1,133,63,43,1
	.word	.L379,.L648,.L378
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_24')
	.sect	'.debug_abbrev'
.L645:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_24')
	.sect	'.debug_line'
.L646:
	.word	.L2370-.L2369
.L2369:
	.half	3
	.word	.L2372-.L2371
.L2371:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Can\\Implementation\\Can.c',0,0,0,0,0
.L2372:
	.byte	5,37,7,0,5,2
	.word	.L379
	.byte	3,168,63,1,9
	.half	.L648-.L379
	.byte	0,1,1,5,44,0,5,2
	.word	.L379
	.byte	3,214,14,1,5,37,9
	.half	.L2373-.L379
	.byte	3,210,48,1,7,9
	.half	.L648-.L2373
	.byte	0,1,1,5,44,0,5,2
	.word	.L379
	.byte	3,214,14,1,5,37,9
	.half	.L2373-.L379
	.byte	3,210,48,1,7,9
	.half	.L648-.L2373
	.byte	0,1,1,5,44,0,5,2
	.word	.L379
	.byte	3,214,14,1,5,37,9
	.half	.L2373-.L379
	.byte	3,210,48,1,7,9
	.half	.L648-.L2373
	.byte	0,1,1,5,44,0,5,2
	.word	.L379
	.byte	3,214,14,1,5,37,9
	.half	.L2373-.L379
	.byte	3,210,48,1,7,9
	.half	.L648-.L2373
	.byte	0,1,1
.L2370:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_24')
	.sect	'.debug_ranges'
.L647:
	.word	-1,.L379,0,.L648-.L379,0,0
	.sdecl	'.debug_info',debug,cluster('Can_MainVersion')
	.sect	'.debug_info'
.L649:
	.word	161
	.half	3
	.word	.L650
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L430
	.byte	3
	.byte	'Can_MainVersion',0,1,228,9,35
	.word	.L1267
	.byte	1,5,3
	.word	Can_MainVersion
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Can_MainVersion')
	.sect	'.debug_abbrev'
.L650:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Can_SubVersion')
	.sect	'.debug_info'
.L651:
	.word	160
	.half	3
	.word	.L652
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L430
	.byte	3
	.byte	'Can_SubVersion',0,1,229,9,35
	.word	.L1268
	.byte	1,5,3
	.word	Can_SubVersion
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Can_SubVersion')
	.sect	'.debug_abbrev'
.L652:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Can_ReleaseVersion')
	.sect	'.debug_info'
.L653:
	.word	164
	.half	3
	.word	.L654
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L430
	.byte	3
	.byte	'Can_ReleaseVersion',0,1,230,9,35
	.word	.L1269
	.byte	1,5,3
	.word	Can_ReleaseVersion
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Can_ReleaseVersion')
	.sect	'.debug_abbrev'
.L654:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Can_DlcToFrameLenght')
	.sect	'.debug_info'
.L655:
	.word	165
	.half	3
	.word	.L656
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L430
	.byte	3
	.byte	'Can_DlcToFrameLenght',0,1,234,9,39
	.word	.L1270
	.byte	5,3
	.word	Can_DlcToFrameLenght
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Can_DlcToFrameLenght')
	.sect	'.debug_abbrev'
.L656:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Can_MessageLengthToDlc')
	.sect	'.debug_info'
.L657:
	.word	167
	.half	3
	.word	.L658
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L430
	.byte	3
	.byte	'Can_MessageLengthToDlc',0,1,241,9,39
	.word	.L1271
	.byte	5,3
	.word	Can_MessageLengthToDlc
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Can_MessageLengthToDlc')
	.sect	'.debug_abbrev'
.L658:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('CanLL_xES2Bytes')
	.sect	'.debug_info'
.L659:
	.word	160
	.half	3
	.word	.L660
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L430
	.byte	3
	.byte	'CanLL_xES2Bytes',0,1,148,10,40
	.word	.L1272
	.byte	5,3
	.word	CanLL_xES2Bytes
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanLL_xES2Bytes')
	.sect	'.debug_abbrev'
.L660:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('canIsRxTaskLocked')
	.sect	'.debug_info'
.L661:
	.word	162
	.half	3
	.word	.L662
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L430
	.byte	3
	.byte	'canIsRxTaskLocked',0,1,171,10,42
	.word	.L671
	.byte	5,3
	.word	canIsRxTaskLocked
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('canIsRxTaskLocked')
	.sect	'.debug_abbrev'
.L662:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('canConfigInitFlag')
	.sect	'.debug_info'
.L663:
	.word	162
	.half	3
	.word	.L664
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L430
	.byte	3
	.byte	'canConfigInitFlag',0,1,182,10,40
	.word	.L671
	.byte	5,3
	.word	canConfigInitFlag
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('canConfigInitFlag')
	.sect	'.debug_abbrev'
.L664:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Can_ConfigDataPtr')
	.sect	'.debug_info'
.L665:
	.word	163
	.half	3
	.word	.L666
	.byte	4,1
	.byte	'..\\component\\Can\\Implementation\\Can.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L430
	.byte	3
	.byte	'Can_ConfigDataPtr',0,1,199,10,64
	.word	.L1273
	.byte	1,5,3
	.word	Can_ConfigDataPtr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Can_ConfigDataPtr')
	.sect	'.debug_abbrev'
.L666:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_10')
	.sect	'.debug_loc'
.L384:
	.word	-1,.L385,0,.L578-.L385
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_11')
	.sect	'.debug_loc'
.L382:
	.word	-1,.L383,0,.L583-.L383
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_12')
	.sect	'.debug_loc'
.L348:
	.word	-1,.L349,0,.L588-.L349
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_13')
	.sect	'.debug_loc'
.L372:
	.word	-1,.L373,0,.L593-.L373
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_14')
	.sect	'.debug_loc'
.L346:
	.word	-1,.L347,0,.L598-.L347
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_15')
	.sect	'.debug_loc'
.L366:
	.word	-1,.L367,0,.L603-.L367
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_16')
	.sect	'.debug_loc'
.L364:
	.word	-1,.L365,0,.L608-.L365
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_17')
	.sect	'.debug_loc'
.L362:
	.word	-1,.L363,0,.L613-.L363
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_18')
	.sect	'.debug_loc'
.L400:
	.word	-1,.L401,0,.L618-.L401
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_19')
	.sect	'.debug_loc'
.L406:
	.word	-1,.L407,0,.L623-.L407
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L356:
	.word	-1,.L357,0,.L538-.L357
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_20')
	.sect	'.debug_loc'
.L428:
	.word	-1,.L429,0,.L628-.L429
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_21')
	.sect	'.debug_loc'
.L360:
	.word	-1,.L361,0,.L633-.L361
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_22')
	.sect	'.debug_loc'
.L352:
	.word	-1,.L353,0,.L638-.L353
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_23')
	.sect	'.debug_loc'
.L380:
	.word	-1,.L381,0,.L643-.L381
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_24')
	.sect	'.debug_loc'
.L378:
	.word	-1,.L379,0,.L648-.L379
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L388:
	.word	-1,.L389,0,.L543-.L389
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L386:
	.word	-1,.L387,0,.L548-.L387
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L402:
	.word	-1,.L403,0,.L553-.L403
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L394:
	.word	-1,.L395,0,.L558-.L395
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L354:
	.word	-1,.L355,0,.L563-.L355
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L350:
	.word	-1,.L351,0,.L568-.L351
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_9')
	.sect	'.debug_loc'
.L368:
	.word	-1,.L369,0,.L573-.L369
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanHL_BasicCanMsgReceived')
	.sect	'.debug_loc'
.L374:
	.word	-1,.L375,0,.L1029-.L375
	.half	2
	.byte	138,0
	.word	.L1029-.L375,.L93-.L375
	.half	3
	.byte	138,240,0
	.word	.L93-.L375,.L93-.L375
	.half	2
	.byte	138,0
	.word	.L93-.L375,.L1022-.L375
	.half	3
	.byte	138,240,0
	.word	.L1022-.L375,.L1022-.L375
	.half	2
	.byte	138,0
	.word	0,0
.L1025:
	.word	-1,.L375,.L357-.L375,.L538-.L375
	.half	1
	.byte	88
	.word	.L88-.L375,.L1022-.L375
	.half	1
	.byte	88
	.word	0,0
.L1035:
	.word	-1,.L375,.L1322-.L375,.L1323-.L375
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1024:
	.word	-1,.L375,.L373-.L375,.L593-.L375
	.half	1
	.byte	85
	.word	0,.L1324-.L375
	.half	1
	.byte	85
	.word	0,0
.L1034:
	.word	-1,.L375,.L1320-.L375,.L1321-.L375
	.half	1
	.byte	82
	.word	.L373-.L375,.L593-.L375
	.half	1
	.byte	82
	.word	.L1325-.L375,.L1038-.L375
	.half	1
	.byte	82
	.word	0,0
.L1032:
	.word	0,0
.L1044:
	.word	0,0
.L1027:
	.word	-1,.L375,.L373-.L375,.L593-.L375
	.half	3
	.byte	145,144,127
	.word	.L357-.L375,.L538-.L375
	.half	3
	.byte	145,144,127
	.word	0,.L1022-.L375
	.half	3
	.byte	145,144,127
	.word	0,0
.L1023:
	.word	-1,.L375,0,.L1319-.L375
	.half	1
	.byte	84
	.word	0,0
.L1040:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanHL_ErrorHandling')
	.sect	'.debug_loc'
.L376:
	.word	-1,.L377,0,.L1050-.L377
	.half	2
	.byte	138,0
	.word	.L1050-.L377,.L141-.L377
	.half	2
	.byte	138,8
	.word	.L141-.L377,.L141-.L377
	.half	2
	.byte	138,0
	.word	.L141-.L377,.L1046-.L377
	.half	2
	.byte	138,8
	.word	.L1046-.L377,.L1046-.L377
	.half	2
	.byte	138,0
	.word	0,0
.L1057:
	.word	0,0
.L1075:
	.word	0,0
.L1076:
	.word	0,0
.L1064:
	.word	-1,.L377,.L1293-.L377,.L573-.L377
	.half	2
	.byte	145,120
	.word	.L381-.L377,.L643-.L377
	.half	2
	.byte	145,120
	.word	.L357-.L377,.L538-.L377
	.half	2
	.byte	145,120
	.word	.L355-.L377,.L563-.L377
	.half	2
	.byte	145,120
	.word	0,.L106-.L377
	.half	2
	.byte	145,120
	.word	.L389-.L377,.L1331-.L377
	.half	2
	.byte	145,120
	.word	.L387-.L377,.L1332-.L377
	.half	2
	.byte	145,120
	.word	.L361-.L377,.L633-.L377
	.half	2
	.byte	145,120
	.word	.L379-.L377,.L648-.L377
	.half	2
	.byte	145,120
	.word	.L1341-.L377,.L578-.L377
	.half	2
	.byte	145,120
	.word	.L383-.L377,.L583-.L377
	.half	2
	.byte	145,120
	.word	.L387-.L377,.L548-.L377
	.half	2
	.byte	145,120
	.word	.L1336-.L377,.L1046-.L377
	.half	2
	.byte	145,120
	.word	0,0
.L1071:
	.word	-1,.L377,.L1293-.L377,.L573-.L377
	.half	2
	.byte	145,120
	.word	.L381-.L377,.L643-.L377
	.half	2
	.byte	145,120
	.word	.L357-.L377,.L538-.L377
	.half	2
	.byte	145,120
	.word	.L355-.L377,.L563-.L377
	.half	2
	.byte	145,120
	.word	0,.L106-.L377
	.half	2
	.byte	145,120
	.word	.L389-.L377,.L1331-.L377
	.half	2
	.byte	145,120
	.word	.L387-.L377,.L1332-.L377
	.half	2
	.byte	145,120
	.word	.L361-.L377,.L633-.L377
	.half	2
	.byte	145,120
	.word	.L379-.L377,.L648-.L377
	.half	2
	.byte	145,120
	.word	.L1341-.L377,.L578-.L377
	.half	2
	.byte	145,120
	.word	.L383-.L377,.L583-.L377
	.half	2
	.byte	145,120
	.word	.L387-.L377,.L548-.L377
	.half	2
	.byte	145,120
	.word	.L1336-.L377,.L1046-.L377
	.half	2
	.byte	145,120
	.word	0,0
.L1086:
	.word	-1,.L377,.L1293-.L377,.L573-.L377
	.half	2
	.byte	145,120
	.word	.L381-.L377,.L643-.L377
	.half	2
	.byte	145,120
	.word	.L357-.L377,.L538-.L377
	.half	2
	.byte	145,120
	.word	.L355-.L377,.L563-.L377
	.half	2
	.byte	145,120
	.word	0,.L106-.L377
	.half	2
	.byte	145,120
	.word	.L389-.L377,.L1331-.L377
	.half	2
	.byte	145,120
	.word	.L387-.L377,.L1332-.L377
	.half	2
	.byte	145,120
	.word	.L361-.L377,.L633-.L377
	.half	2
	.byte	145,120
	.word	.L379-.L377,.L648-.L377
	.half	2
	.byte	145,120
	.word	.L1341-.L377,.L578-.L377
	.half	2
	.byte	145,120
	.word	.L383-.L377,.L583-.L377
	.half	2
	.byte	145,120
	.word	.L387-.L377,.L548-.L377
	.half	2
	.byte	145,120
	.word	.L1336-.L377,.L1046-.L377
	.half	2
	.byte	145,120
	.word	0,0
.L1099:
	.word	-1,.L377,.L1293-.L377,.L573-.L377
	.half	2
	.byte	145,120
	.word	.L381-.L377,.L643-.L377
	.half	2
	.byte	145,120
	.word	.L357-.L377,.L538-.L377
	.half	2
	.byte	145,120
	.word	.L355-.L377,.L563-.L377
	.half	2
	.byte	145,120
	.word	0,.L106-.L377
	.half	2
	.byte	145,120
	.word	.L389-.L377,.L1331-.L377
	.half	2
	.byte	145,120
	.word	.L387-.L377,.L1332-.L377
	.half	2
	.byte	145,120
	.word	.L361-.L377,.L633-.L377
	.half	2
	.byte	145,120
	.word	.L379-.L377,.L648-.L377
	.half	2
	.byte	145,120
	.word	.L1341-.L377,.L578-.L377
	.half	2
	.byte	145,120
	.word	.L383-.L377,.L583-.L377
	.half	2
	.byte	145,120
	.word	.L387-.L377,.L548-.L377
	.half	2
	.byte	145,120
	.word	.L1336-.L377,.L1046-.L377
	.half	2
	.byte	145,120
	.word	0,0
.L1108:
	.word	-1,.L377,.L1293-.L377,.L573-.L377
	.half	2
	.byte	145,120
	.word	.L381-.L377,.L643-.L377
	.half	2
	.byte	145,120
	.word	.L357-.L377,.L538-.L377
	.half	2
	.byte	145,120
	.word	.L355-.L377,.L563-.L377
	.half	2
	.byte	145,120
	.word	0,.L106-.L377
	.half	2
	.byte	145,120
	.word	.L389-.L377,.L1331-.L377
	.half	2
	.byte	145,120
	.word	.L387-.L377,.L1332-.L377
	.half	2
	.byte	145,120
	.word	.L361-.L377,.L633-.L377
	.half	2
	.byte	145,120
	.word	.L379-.L377,.L648-.L377
	.half	2
	.byte	145,120
	.word	.L1341-.L377,.L578-.L377
	.half	2
	.byte	145,120
	.word	.L383-.L377,.L583-.L377
	.half	2
	.byte	145,120
	.word	.L387-.L377,.L548-.L377
	.half	2
	.byte	145,120
	.word	.L1336-.L377,.L1046-.L377
	.half	2
	.byte	145,120
	.word	0,0
.L1062:
	.word	-1,.L377,.L1327-.L377,.L99-.L377
	.half	1
	.byte	90
	.word	.L1328-.L377,.L1329-.L377
	.half	1
	.byte	84
	.word	0,0
.L1069:
	.word	-1,.L377,.L1333-.L377,.L109-.L377
	.half	1
	.byte	91
	.word	.L1334-.L377,.L1335-.L377
	.half	1
	.byte	84
	.word	0,0
.L1084:
	.word	-1,.L377,.L1079-.L377,.L116-.L377
	.half	1
	.byte	90
	.word	.L1340-.L377,.L1339-.L377
	.half	1
	.byte	84
	.word	0,0
.L1097:
	.word	-1,.L377,.L1342-.L377,.L127-.L377
	.half	1
	.byte	90
	.word	.L1343-.L377,.L1344-.L377
	.half	1
	.byte	84
	.word	0,0
.L1106:
	.word	-1,.L377,.L1347-.L377,.L136-.L377
	.half	1
	.byte	90
	.word	.L1348-.L377,.L1349-.L377
	.half	1
	.byte	84
	.word	0,0
.L1048:
	.word	-1,.L377,.L1293-.L377,.L573-.L377
	.half	1
	.byte	88
	.word	.L381-.L377,.L643-.L377
	.half	1
	.byte	88
	.word	.L1326-.L377,.L98-.L377
	.half	1
	.byte	84
	.word	.L357-.L377,.L538-.L377
	.half	1
	.byte	88
	.word	.L355-.L377,.L563-.L377
	.half	1
	.byte	88
	.word	.L1050-.L377,.L106-.L377
	.half	1
	.byte	88
	.word	.L389-.L377,.L1331-.L377
	.half	1
	.byte	88
	.word	.L387-.L377,.L1332-.L377
	.half	1
	.byte	88
	.word	.L361-.L377,.L633-.L377
	.half	1
	.byte	88
	.word	.L379-.L377,.L648-.L377
	.half	1
	.byte	88
	.word	.L1341-.L377,.L578-.L377
	.half	1
	.byte	88
	.word	.L383-.L377,.L583-.L377
	.half	1
	.byte	88
	.word	.L387-.L377,.L548-.L377
	.half	1
	.byte	88
	.word	.L1336-.L377,.L1046-.L377
	.half	1
	.byte	88
	.word	.L1350-.L377,.L141-.L377
	.half	1
	.byte	87
	.word	0,0
.L1056:
	.word	-1,.L377,.L1330-.L377,.L94-.L377
	.half	1
	.byte	89
	.word	.L357-.L377,.L538-.L377
	.half	1
	.byte	89
	.word	.L355-.L377,.L563-.L377
	.half	1
	.byte	89
	.word	.L104-.L377,.L106-.L377
	.half	1
	.byte	89
	.word	.L389-.L377,.L1331-.L377
	.half	1
	.byte	89
	.word	.L381-.L377,.L643-.L377
	.half	1
	.byte	89
	.word	.L387-.L377,.L1332-.L377
	.half	1
	.byte	89
	.word	.L361-.L377,.L633-.L377
	.half	1
	.byte	89
	.word	.L1336-.L377,.L1337-.L377
	.half	1
	.byte	89
	.word	0,0
.L1092:
	.word	-1,.L377,.L1341-.L377,.L578-.L377
	.half	1
	.byte	84
	.word	.L383-.L377,.L583-.L377
	.half	1
	.byte	84
	.word	.L114-.L377,.L126-.L377
	.half	1
	.byte	84
	.word	.L124-.L377,.L1345-.L377
	.half	1
	.byte	84
	.word	.L387-.L377,.L1346-.L377
	.half	1
	.byte	84
	.word	0,0
.L1061:
	.word	-1,.L377,.L1063-.L377,.L99-.L377
	.half	1
	.byte	91
	.word	0,0
.L1068:
	.word	-1,.L377,.L1070-.L377,.L109-.L377
	.half	1
	.byte	92
	.word	0,0
.L1083:
	.word	-1,.L377,.L1085-.L377,.L116-.L377
	.half	1
	.byte	91
	.word	0,0
.L1096:
	.word	-1,.L377,.L1098-.L377,.L127-.L377
	.half	1
	.byte	91
	.word	0,0
.L1105:
	.word	-1,.L377,.L1107-.L377,.L136-.L377
	.half	1
	.byte	91
	.word	0,0
.L1060:
	.word	0,0
.L1065:
	.word	-1,.L377,.L1293-.L377,.L573-.L377
	.half	2
	.byte	145,124
	.word	.L381-.L377,.L643-.L377
	.half	2
	.byte	145,124
	.word	.L357-.L377,.L538-.L377
	.half	2
	.byte	145,124
	.word	.L355-.L377,.L563-.L377
	.half	2
	.byte	145,124
	.word	0,.L106-.L377
	.half	2
	.byte	145,124
	.word	.L389-.L377,.L1331-.L377
	.half	2
	.byte	145,124
	.word	.L387-.L377,.L1332-.L377
	.half	2
	.byte	145,124
	.word	.L361-.L377,.L633-.L377
	.half	2
	.byte	145,124
	.word	.L379-.L377,.L648-.L377
	.half	2
	.byte	145,124
	.word	.L1341-.L377,.L578-.L377
	.half	2
	.byte	145,124
	.word	.L383-.L377,.L583-.L377
	.half	2
	.byte	145,124
	.word	.L387-.L377,.L548-.L377
	.half	2
	.byte	145,124
	.word	.L1336-.L377,.L1046-.L377
	.half	2
	.byte	145,124
	.word	0,0
.L1072:
	.word	-1,.L377,.L1293-.L377,.L573-.L377
	.half	2
	.byte	145,124
	.word	.L381-.L377,.L643-.L377
	.half	2
	.byte	145,124
	.word	.L357-.L377,.L538-.L377
	.half	2
	.byte	145,124
	.word	.L355-.L377,.L563-.L377
	.half	2
	.byte	145,124
	.word	0,.L106-.L377
	.half	2
	.byte	145,124
	.word	.L389-.L377,.L1331-.L377
	.half	2
	.byte	145,124
	.word	.L387-.L377,.L1332-.L377
	.half	2
	.byte	145,124
	.word	.L361-.L377,.L633-.L377
	.half	2
	.byte	145,124
	.word	.L379-.L377,.L648-.L377
	.half	2
	.byte	145,124
	.word	.L1341-.L377,.L578-.L377
	.half	2
	.byte	145,124
	.word	.L383-.L377,.L583-.L377
	.half	2
	.byte	145,124
	.word	.L387-.L377,.L548-.L377
	.half	2
	.byte	145,124
	.word	.L1336-.L377,.L1046-.L377
	.half	2
	.byte	145,124
	.word	0,0
.L1087:
	.word	-1,.L377,.L1293-.L377,.L573-.L377
	.half	2
	.byte	145,124
	.word	.L381-.L377,.L643-.L377
	.half	2
	.byte	145,124
	.word	.L357-.L377,.L538-.L377
	.half	2
	.byte	145,124
	.word	.L355-.L377,.L563-.L377
	.half	2
	.byte	145,124
	.word	0,.L106-.L377
	.half	2
	.byte	145,124
	.word	.L389-.L377,.L1331-.L377
	.half	2
	.byte	145,124
	.word	.L387-.L377,.L1332-.L377
	.half	2
	.byte	145,124
	.word	.L361-.L377,.L633-.L377
	.half	2
	.byte	145,124
	.word	.L379-.L377,.L648-.L377
	.half	2
	.byte	145,124
	.word	.L1341-.L377,.L578-.L377
	.half	2
	.byte	145,124
	.word	.L383-.L377,.L583-.L377
	.half	2
	.byte	145,124
	.word	.L387-.L377,.L548-.L377
	.half	2
	.byte	145,124
	.word	.L1336-.L377,.L1046-.L377
	.half	2
	.byte	145,124
	.word	0,0
.L1100:
	.word	-1,.L377,.L1293-.L377,.L573-.L377
	.half	2
	.byte	145,124
	.word	.L381-.L377,.L643-.L377
	.half	2
	.byte	145,124
	.word	.L357-.L377,.L538-.L377
	.half	2
	.byte	145,124
	.word	.L355-.L377,.L563-.L377
	.half	2
	.byte	145,124
	.word	0,.L106-.L377
	.half	2
	.byte	145,124
	.word	.L389-.L377,.L1331-.L377
	.half	2
	.byte	145,124
	.word	.L387-.L377,.L1332-.L377
	.half	2
	.byte	145,124
	.word	.L361-.L377,.L633-.L377
	.half	2
	.byte	145,124
	.word	.L379-.L377,.L648-.L377
	.half	2
	.byte	145,124
	.word	.L1341-.L377,.L578-.L377
	.half	2
	.byte	145,124
	.word	.L383-.L377,.L583-.L377
	.half	2
	.byte	145,124
	.word	.L387-.L377,.L548-.L377
	.half	2
	.byte	145,124
	.word	.L1336-.L377,.L1046-.L377
	.half	2
	.byte	145,124
	.word	0,0
.L1109:
	.word	-1,.L377,.L1293-.L377,.L573-.L377
	.half	2
	.byte	145,124
	.word	.L381-.L377,.L643-.L377
	.half	2
	.byte	145,124
	.word	.L357-.L377,.L538-.L377
	.half	2
	.byte	145,124
	.word	.L355-.L377,.L563-.L377
	.half	2
	.byte	145,124
	.word	0,.L106-.L377
	.half	2
	.byte	145,124
	.word	.L389-.L377,.L1331-.L377
	.half	2
	.byte	145,124
	.word	.L387-.L377,.L1332-.L377
	.half	2
	.byte	145,124
	.word	.L361-.L377,.L633-.L377
	.half	2
	.byte	145,124
	.word	.L379-.L377,.L648-.L377
	.half	2
	.byte	145,124
	.word	.L1341-.L377,.L578-.L377
	.half	2
	.byte	145,124
	.word	.L383-.L377,.L583-.L377
	.half	2
	.byte	145,124
	.word	.L387-.L377,.L548-.L377
	.half	2
	.byte	145,124
	.word	.L1336-.L377,.L1046-.L377
	.half	2
	.byte	145,124
	.word	0,0
.L1074:
	.word	0,0
.L1077:
	.word	-1,.L377,.L1338-.L377,.L117-.L377
	.half	1
	.byte	82
	.word	.L1337-.L377,.L1078-.L377
	.half	1
	.byte	89
	.word	.L1078-.L377,.L1339-.L377
	.half	1
	.byte	82
	.word	.L379-.L377,.L648-.L377
	.half	1
	.byte	89
	.word	.L1081-.L377,.L114-.L377
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanHL_ReInit')
	.sect	'.debug_loc'
.L344:
	.word	-1,.L345,0,.L1274-.L345
	.half	2
	.byte	138,0
	.word	.L1274-.L345,.L1110-.L345
	.half	2
	.byte	138,48
	.word	.L1110-.L345,.L1110-.L345
	.half	2
	.byte	138,0
	.word	0,0
.L1145:
	.word	-1,.L345,.L347-.L345,.L598-.L345
	.half	5
	.byte	144,32,157,32,0
	.word	.L1282-.L345,.L16-.L345
	.half	5
	.byte	144,32,157,32,0
	.word	.L16-.L345,.L1170-.L345
	.half	1
	.byte	95
	.word	.L1284-.L345,.L1285-.L345
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1111:
	.word	-1,.L345,0,.L1131-.L345
	.half	1
	.byte	84
	.word	.L2-.L345,.L28-.L345
	.half	1
	.byte	84
	.word	0,0
.L1151:
	.word	-1,.L345,.L355-.L345,.L563-.L345
	.half	2
	.byte	145,116
	.word	0,.L1281-.L345
	.half	2
	.byte	145,116
	.word	.L347-.L345,.L598-.L345
	.half	2
	.byte	145,116
	.word	.L349-.L345,.L1283-.L345
	.half	2
	.byte	145,116
	.word	.L353-.L345,.L638-.L345
	.half	2
	.byte	145,116
	.word	.L351-.L345,.L1286-.L345
	.half	2
	.byte	145,116
	.word	.L1282-.L345,.L1287-.L345
	.half	2
	.byte	145,116
	.word	.L357-.L345,.L538-.L345
	.half	2
	.byte	145,116
	.word	.L1288-.L345,.L1110-.L345
	.half	2
	.byte	145,116
	.word	0,0
.L1157:
	.word	-1,.L345,.L355-.L345,.L563-.L345
	.half	2
	.byte	145,116
	.word	0,.L1281-.L345
	.half	2
	.byte	145,116
	.word	.L347-.L345,.L598-.L345
	.half	2
	.byte	145,116
	.word	.L349-.L345,.L1283-.L345
	.half	2
	.byte	145,116
	.word	.L353-.L345,.L638-.L345
	.half	2
	.byte	145,116
	.word	.L351-.L345,.L1286-.L345
	.half	2
	.byte	145,116
	.word	.L1282-.L345,.L1287-.L345
	.half	2
	.byte	145,116
	.word	.L357-.L345,.L538-.L345
	.half	2
	.byte	145,116
	.word	.L1288-.L345,.L1110-.L345
	.half	2
	.byte	145,116
	.word	0,0
.L1149:
	.word	-1,.L345,.L1275-.L345,.L4-.L345
	.half	1
	.byte	89
	.word	.L1276-.L345,.L1277-.L345
	.half	1
	.byte	84
	.word	0,0
.L1155:
	.word	-1,.L345,.L1278-.L345,.L10-.L345
	.half	1
	.byte	89
	.word	.L1279-.L345,.L1280-.L345
	.half	1
	.byte	84
	.word	0,0
.L1113:
	.word	-1,.L345,.L1131-.L345,.L3-.L345
	.half	1
	.byte	84
	.word	.L355-.L345,.L563-.L345
	.half	1
	.byte	88
	.word	.L1274-.L345,.L1281-.L345
	.half	1
	.byte	88
	.word	.L347-.L345,.L598-.L345
	.half	1
	.byte	88
	.word	.L349-.L345,.L1283-.L345
	.half	1
	.byte	88
	.word	.L353-.L345,.L638-.L345
	.half	1
	.byte	88
	.word	.L351-.L345,.L1286-.L345
	.half	1
	.byte	88
	.word	.L1282-.L345,.L1287-.L345
	.half	1
	.byte	88
	.word	.L357-.L345,.L538-.L345
	.half	1
	.byte	88
	.word	.L1288-.L345,.L1110-.L345
	.half	1
	.byte	88
	.word	0,0
.L1115:
	.word	-1,.L345,.L355-.L345,.L563-.L345
	.half	2
	.byte	145,80
	.word	0,.L1281-.L345
	.half	2
	.byte	145,80
	.word	.L347-.L345,.L598-.L345
	.half	2
	.byte	145,80
	.word	.L349-.L345,.L1283-.L345
	.half	2
	.byte	145,80
	.word	.L353-.L345,.L638-.L345
	.half	2
	.byte	145,80
	.word	.L351-.L345,.L1286-.L345
	.half	2
	.byte	145,80
	.word	.L1282-.L345,.L1287-.L345
	.half	2
	.byte	145,80
	.word	.L357-.L345,.L538-.L345
	.half	2
	.byte	145,80
	.word	.L1288-.L345,.L1110-.L345
	.half	2
	.byte	145,80
	.word	0,0
.L1120:
	.word	0,0
.L1237:
	.word	0,0
.L1248:
	.word	0,0
.L1253:
	.word	0,0
.L1168:
	.word	0,0
.L1128:
	.word	0,0
.L1137:
	.word	0,0
.L1243:
	.word	0,0
.L1257:
	.word	0,0
.L1221:
	.word	0,0
.L1142:
	.word	0,0
.L1208:
	.word	0,0
.L1166:
	.word	0,0
.L1162:
	.word	0,0
.L1148:
	.word	-1,.L345,.L1150-.L345,.L4-.L345
	.half	1
	.byte	90
	.word	0,0
.L1154:
	.word	-1,.L345,.L1156-.L345,.L10-.L345
	.half	1
	.byte	90
	.word	0,0
.L1147:
	.word	0,0
.L1152:
	.word	-1,.L345,.L355-.L345,.L563-.L345
	.half	2
	.byte	145,120
	.word	0,.L1281-.L345
	.half	2
	.byte	145,120
	.word	.L347-.L345,.L598-.L345
	.half	2
	.byte	145,120
	.word	.L349-.L345,.L1283-.L345
	.half	2
	.byte	145,120
	.word	.L353-.L345,.L638-.L345
	.half	2
	.byte	145,120
	.word	.L351-.L345,.L1286-.L345
	.half	2
	.byte	145,120
	.word	.L1282-.L345,.L1287-.L345
	.half	2
	.byte	145,120
	.word	.L357-.L345,.L538-.L345
	.half	2
	.byte	145,120
	.word	.L1288-.L345,.L1110-.L345
	.half	2
	.byte	145,120
	.word	0,0
.L1158:
	.word	-1,.L345,.L355-.L345,.L563-.L345
	.half	2
	.byte	145,120
	.word	0,.L1281-.L345
	.half	2
	.byte	145,120
	.word	.L347-.L345,.L598-.L345
	.half	2
	.byte	145,120
	.word	.L349-.L345,.L1283-.L345
	.half	2
	.byte	145,120
	.word	.L353-.L345,.L638-.L345
	.half	2
	.byte	145,120
	.word	.L351-.L345,.L1286-.L345
	.half	2
	.byte	145,120
	.word	.L1282-.L345,.L1287-.L345
	.half	2
	.byte	145,120
	.word	.L357-.L345,.L538-.L345
	.half	2
	.byte	145,120
	.word	.L1288-.L345,.L1110-.L345
	.half	2
	.byte	145,120
	.word	0,0
.L1164:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanHL_TxConfirmation')
	.sect	'.debug_loc'
.L370:
	.word	-1,.L371,0,.L1309-.L371
	.half	2
	.byte	138,0
	.word	.L1309-.L371,.L80-.L371
	.half	3
	.byte	138,200,0
	.word	.L80-.L371,.L80-.L371
	.half	2
	.byte	138,0
	.word	.L80-.L371,.L1006-.L371
	.half	3
	.byte	138,200,0
	.word	.L1006-.L371,.L1006-.L371
	.half	2
	.byte	138,0
	.word	0,0
.L1010:
	.word	-1,.L371,.L1310-.L371,.L77-.L371
	.half	1
	.byte	89
	.word	.L373-.L371,.L593-.L371
	.half	1
	.byte	89
	.word	.L357-.L371,.L538-.L371
	.half	1
	.byte	89
	.word	.L353-.L371,.L638-.L371
	.half	1
	.byte	89
	.word	.L1311-.L371,.L1006-.L371
	.half	1
	.byte	89
	.word	.L1318-.L371,.L80-.L371
	.half	1
	.byte	87
	.word	0,0
.L1009:
	.word	-1,.L371,0,.L77-.L371
	.half	1
	.byte	86
	.word	.L373-.L371,.L593-.L371
	.half	1
	.byte	86
	.word	.L357-.L371,.L538-.L371
	.half	1
	.byte	86
	.word	.L1311-.L371,.L1314-.L371
	.half	1
	.byte	86
	.word	0,0
.L1008:
	.word	-1,.L371,0,.L77-.L371
	.half	1
	.byte	85
	.word	.L373-.L371,.L593-.L371
	.half	1
	.byte	85
	.word	.L1311-.L371,.L1312-.L371
	.half	1
	.byte	85
	.word	.L357-.L371,.L538-.L371
	.half	1
	.byte	85
	.word	0,0
.L1007:
	.word	-1,.L371,0,.L77-.L371
	.half	1
	.byte	84
	.word	.L373-.L371,.L593-.L371
	.half	1
	.byte	84
	.word	.L1311-.L371,.L1312-.L371
	.half	1
	.byte	84
	.word	.L357-.L371,.L1313-.L371
	.half	1
	.byte	84
	.word	0,0
.L1014:
	.word	-1,.L371,.L1317-.L371,.L78-.L371
	.half	1
	.byte	84
	.word	0,0
.L1021:
	.word	-1,.L371,.L357-.L371,.L538-.L371
	.half	1
	.byte	88
	.word	.L1315-.L371,.L1316-.L371
	.half	1
	.byte	88
	.word	0,0
.L1019:
	.word	0,0
.L1012:
	.word	-1,.L371,0,.L77-.L371
	.half	3
	.byte	145,184,127
	.word	.L373-.L371,.L593-.L371
	.half	3
	.byte	145,184,127
	.word	.L357-.L371,.L538-.L371
	.half	3
	.byte	145,184,127
	.word	.L353-.L371,.L638-.L371
	.half	3
	.byte	145,184,127
	.word	.L1311-.L371,.L1006-.L371
	.half	3
	.byte	145,184,127
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanInterrupt')
	.sect	'.debug_loc'
.L426:
	.word	-1,.L427,0,.L896-.L427
	.half	2
	.byte	138,0
	.word	.L896-.L427,.L329-.L427
	.half	2
	.byte	138,8
	.word	.L329-.L427,.L329-.L427
	.half	2
	.byte	138,0
	.word	.L329-.L427,.L894-.L427
	.half	2
	.byte	138,8
	.word	.L894-.L427,.L894-.L427
	.half	2
	.byte	138,0
	.word	0,0
.L906:
	.word	0,0
.L902:
	.word	-1,.L427,.L387-.L427,.L548-.L427
	.half	1
	.byte	88
	.word	.L389-.L427,.L1331-.L427
	.half	1
	.byte	88
	.word	.L381-.L427,.L643-.L427
	.half	1
	.byte	88
	.word	.L429-.L427,.L1422-.L427
	.half	1
	.byte	88
	.word	.L1423-.L427,.L297-.L427
	.half	1
	.byte	88
	.word	.L295-.L427,.L1427-.L427
	.half	1
	.byte	88
	.word	0,0
.L942:
	.word	-1,.L427,.L1431-.L427,.L1432-.L427
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L941:
	.word	-1,.L427,.L1437-.L427,.L900-.L427
	.half	1
	.byte	88
	.word	0,0
.L914:
	.word	-1,.L427,.L369-.L427,.L573-.L427
	.half	2
	.byte	145,120
	.word	.L387-.L427,.L548-.L427
	.half	2
	.byte	145,120
	.word	.L389-.L427,.L1331-.L427
	.half	2
	.byte	145,120
	.word	.L381-.L427,.L643-.L427
	.half	2
	.byte	145,120
	.word	.L429-.L427,.L1422-.L427
	.half	2
	.byte	145,120
	.word	.L429-.L427,.L628-.L427
	.half	2
	.byte	145,120
	.word	.L401-.L427,.L618-.L427
	.half	2
	.byte	145,120
	.word	.L385-.L427,.L578-.L427
	.half	2
	.byte	145,120
	.word	0,.L894-.L427
	.half	2
	.byte	145,120
	.word	0,0
.L923:
	.word	-1,.L427,.L369-.L427,.L573-.L427
	.half	2
	.byte	145,120
	.word	.L387-.L427,.L548-.L427
	.half	2
	.byte	145,120
	.word	.L389-.L427,.L1331-.L427
	.half	2
	.byte	145,120
	.word	.L381-.L427,.L643-.L427
	.half	2
	.byte	145,120
	.word	.L429-.L427,.L1422-.L427
	.half	2
	.byte	145,120
	.word	.L429-.L427,.L628-.L427
	.half	2
	.byte	145,120
	.word	.L401-.L427,.L618-.L427
	.half	2
	.byte	145,120
	.word	.L385-.L427,.L578-.L427
	.half	2
	.byte	145,120
	.word	0,.L894-.L427
	.half	2
	.byte	145,120
	.word	0,0
.L931:
	.word	-1,.L427,.L369-.L427,.L573-.L427
	.half	2
	.byte	145,120
	.word	.L387-.L427,.L548-.L427
	.half	2
	.byte	145,120
	.word	.L389-.L427,.L1331-.L427
	.half	2
	.byte	145,120
	.word	.L381-.L427,.L643-.L427
	.half	2
	.byte	145,120
	.word	.L429-.L427,.L1422-.L427
	.half	2
	.byte	145,120
	.word	.L429-.L427,.L628-.L427
	.half	2
	.byte	145,120
	.word	.L401-.L427,.L618-.L427
	.half	2
	.byte	145,120
	.word	.L385-.L427,.L578-.L427
	.half	2
	.byte	145,120
	.word	0,.L894-.L427
	.half	2
	.byte	145,120
	.word	0,0
.L948:
	.word	-1,.L427,.L369-.L427,.L573-.L427
	.half	2
	.byte	145,120
	.word	.L387-.L427,.L548-.L427
	.half	2
	.byte	145,120
	.word	.L389-.L427,.L1331-.L427
	.half	2
	.byte	145,120
	.word	.L381-.L427,.L643-.L427
	.half	2
	.byte	145,120
	.word	.L429-.L427,.L1422-.L427
	.half	2
	.byte	145,120
	.word	.L429-.L427,.L628-.L427
	.half	2
	.byte	145,120
	.word	.L401-.L427,.L618-.L427
	.half	2
	.byte	145,120
	.word	.L385-.L427,.L578-.L427
	.half	2
	.byte	145,120
	.word	0,.L894-.L427
	.half	2
	.byte	145,120
	.word	0,0
.L958:
	.word	-1,.L427,.L369-.L427,.L573-.L427
	.half	2
	.byte	145,120
	.word	.L387-.L427,.L548-.L427
	.half	2
	.byte	145,120
	.word	.L389-.L427,.L1331-.L427
	.half	2
	.byte	145,120
	.word	.L381-.L427,.L643-.L427
	.half	2
	.byte	145,120
	.word	.L429-.L427,.L1422-.L427
	.half	2
	.byte	145,120
	.word	.L429-.L427,.L628-.L427
	.half	2
	.byte	145,120
	.word	.L401-.L427,.L618-.L427
	.half	2
	.byte	145,120
	.word	.L385-.L427,.L578-.L427
	.half	2
	.byte	145,120
	.word	0,.L894-.L427
	.half	2
	.byte	145,120
	.word	0,0
.L964:
	.word	-1,.L427,.L369-.L427,.L573-.L427
	.half	2
	.byte	145,120
	.word	.L387-.L427,.L548-.L427
	.half	2
	.byte	145,120
	.word	.L389-.L427,.L1331-.L427
	.half	2
	.byte	145,120
	.word	.L381-.L427,.L643-.L427
	.half	2
	.byte	145,120
	.word	.L429-.L427,.L1422-.L427
	.half	2
	.byte	145,120
	.word	.L429-.L427,.L628-.L427
	.half	2
	.byte	145,120
	.word	.L401-.L427,.L618-.L427
	.half	2
	.byte	145,120
	.word	.L385-.L427,.L578-.L427
	.half	2
	.byte	145,120
	.word	0,.L894-.L427
	.half	2
	.byte	145,120
	.word	0,0
.L912:
	.word	-1,.L427,.L1419-.L427,.L290-.L427
	.half	1
	.byte	90
	.word	.L1420-.L427,.L1421-.L427
	.half	1
	.byte	84
	.word	0,0
.L921:
	.word	-1,.L427,.L1424-.L427,.L295-.L427
	.half	1
	.byte	95
	.word	.L1425-.L427,.L1426-.L427
	.half	1
	.byte	84
	.word	0,0
.L929:
	.word	-1,.L427,.L1428-.L427,.L298-.L427
	.half	1
	.byte	95
	.word	.L1429-.L427,.L1430-.L427
	.half	1
	.byte	84
	.word	0,0
.L946:
	.word	-1,.L427,.L1434-.L427,.L317-.L427
	.half	1
	.byte	95
	.word	.L1435-.L427,.L1436-.L427
	.half	1
	.byte	84
	.word	0,0
.L956:
	.word	-1,.L427,.L1440-.L427,.L332-.L427
	.half	1
	.byte	95
	.word	.L1441-.L427,.L1442-.L427
	.half	1
	.byte	84
	.word	0,0
.L962:
	.word	-1,.L427,.L338-.L427,.L337-.L427
	.half	1
	.byte	95
	.word	.L1443-.L427,.L339-.L427
	.half	1
	.byte	95
	.word	.L1444-.L427,.L1445-.L427
	.half	1
	.byte	84
	.word	0,0
.L939:
	.word	-1,.L427,.L1438-.L427,.L900-.L427
	.half	1
	.byte	89
	.word	0,0
.L940:
	.word	-1,.L427,.L1439-.L427,.L324-.L427
	.half	1
	.byte	84
	.word	0,0
.L901:
	.word	-1,.L427,.L389-.L427,.L1331-.L427
	.half	1
	.byte	89
	.word	.L381-.L427,.L643-.L427
	.half	1
	.byte	89
	.word	.L429-.L427,.L1422-.L427
	.half	1
	.byte	89
	.word	.L429-.L427,.L628-.L427
	.half	1
	.byte	89
	.word	.L387-.L427,.L548-.L427
	.half	1
	.byte	89
	.word	.L1433-.L427,.L316-.L427
	.half	1
	.byte	89
	.word	0,0
.L911:
	.word	-1,.L427,.L913-.L427,.L290-.L427
	.half	1
	.byte	91
	.word	0,0
.L920:
	.word	-1,.L427,.L922-.L427,.L295-.L427
	.half	1
	.byte	88
	.word	0,0
.L928:
	.word	-1,.L427,.L930-.L427,.L298-.L427
	.half	1
	.byte	88
	.word	0,0
.L945:
	.word	-1,.L427,.L947-.L427,.L317-.L427
	.half	1
	.byte	89
	.word	0,0
.L955:
	.word	-1,.L427,.L957-.L427,.L332-.L427
	.half	1
	.byte	89
	.word	0,0
.L961:
	.word	-1,.L427,.L338-.L427,.L337-.L427
	.half	1
	.byte	88
	.word	.L963-.L427,.L339-.L427
	.half	1
	.byte	88
	.word	0,0
.L910:
	.word	0,0
.L915:
	.word	-1,.L427,.L369-.L427,.L573-.L427
	.half	2
	.byte	145,124
	.word	.L387-.L427,.L548-.L427
	.half	2
	.byte	145,124
	.word	.L389-.L427,.L1331-.L427
	.half	2
	.byte	145,124
	.word	.L381-.L427,.L643-.L427
	.half	2
	.byte	145,124
	.word	.L429-.L427,.L1422-.L427
	.half	2
	.byte	145,124
	.word	.L429-.L427,.L628-.L427
	.half	2
	.byte	145,124
	.word	.L401-.L427,.L618-.L427
	.half	2
	.byte	145,124
	.word	.L385-.L427,.L578-.L427
	.half	2
	.byte	145,124
	.word	0,.L894-.L427
	.half	2
	.byte	145,124
	.word	0,0
.L924:
	.word	-1,.L427,.L369-.L427,.L573-.L427
	.half	2
	.byte	145,124
	.word	.L387-.L427,.L548-.L427
	.half	2
	.byte	145,124
	.word	.L389-.L427,.L1331-.L427
	.half	2
	.byte	145,124
	.word	.L381-.L427,.L643-.L427
	.half	2
	.byte	145,124
	.word	.L429-.L427,.L1422-.L427
	.half	2
	.byte	145,124
	.word	.L429-.L427,.L628-.L427
	.half	2
	.byte	145,124
	.word	.L401-.L427,.L618-.L427
	.half	2
	.byte	145,124
	.word	.L385-.L427,.L578-.L427
	.half	2
	.byte	145,124
	.word	0,.L894-.L427
	.half	2
	.byte	145,124
	.word	0,0
.L932:
	.word	-1,.L427,.L369-.L427,.L573-.L427
	.half	2
	.byte	145,124
	.word	.L387-.L427,.L548-.L427
	.half	2
	.byte	145,124
	.word	.L389-.L427,.L1331-.L427
	.half	2
	.byte	145,124
	.word	.L381-.L427,.L643-.L427
	.half	2
	.byte	145,124
	.word	.L429-.L427,.L1422-.L427
	.half	2
	.byte	145,124
	.word	.L429-.L427,.L628-.L427
	.half	2
	.byte	145,124
	.word	.L401-.L427,.L618-.L427
	.half	2
	.byte	145,124
	.word	.L385-.L427,.L578-.L427
	.half	2
	.byte	145,124
	.word	0,.L894-.L427
	.half	2
	.byte	145,124
	.word	0,0
.L949:
	.word	-1,.L427,.L369-.L427,.L573-.L427
	.half	2
	.byte	145,124
	.word	.L387-.L427,.L548-.L427
	.half	2
	.byte	145,124
	.word	.L389-.L427,.L1331-.L427
	.half	2
	.byte	145,124
	.word	.L381-.L427,.L643-.L427
	.half	2
	.byte	145,124
	.word	.L429-.L427,.L1422-.L427
	.half	2
	.byte	145,124
	.word	.L429-.L427,.L628-.L427
	.half	2
	.byte	145,124
	.word	.L401-.L427,.L618-.L427
	.half	2
	.byte	145,124
	.word	.L385-.L427,.L578-.L427
	.half	2
	.byte	145,124
	.word	0,.L894-.L427
	.half	2
	.byte	145,124
	.word	0,0
.L959:
	.word	-1,.L427,.L369-.L427,.L573-.L427
	.half	2
	.byte	145,124
	.word	.L387-.L427,.L548-.L427
	.half	2
	.byte	145,124
	.word	.L389-.L427,.L1331-.L427
	.half	2
	.byte	145,124
	.word	.L381-.L427,.L643-.L427
	.half	2
	.byte	145,124
	.word	.L429-.L427,.L1422-.L427
	.half	2
	.byte	145,124
	.word	.L429-.L427,.L628-.L427
	.half	2
	.byte	145,124
	.word	.L401-.L427,.L618-.L427
	.half	2
	.byte	145,124
	.word	.L385-.L427,.L578-.L427
	.half	2
	.byte	145,124
	.word	0,.L894-.L427
	.half	2
	.byte	145,124
	.word	0,0
.L965:
	.word	-1,.L427,.L369-.L427,.L573-.L427
	.half	2
	.byte	145,124
	.word	.L387-.L427,.L548-.L427
	.half	2
	.byte	145,124
	.word	.L389-.L427,.L1331-.L427
	.half	2
	.byte	145,124
	.word	.L381-.L427,.L643-.L427
	.half	2
	.byte	145,124
	.word	.L429-.L427,.L1422-.L427
	.half	2
	.byte	145,124
	.word	.L429-.L427,.L628-.L427
	.half	2
	.byte	145,124
	.word	.L401-.L427,.L618-.L427
	.half	2
	.byte	145,124
	.word	.L385-.L427,.L578-.L427
	.half	2
	.byte	145,124
	.word	0,.L894-.L427
	.half	2
	.byte	145,124
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanLL_ModeTransition')
	.sect	'.debug_loc'
.L358:
	.word	-1,.L359,0,.L974-.L359
	.half	2
	.byte	138,0
	.word	.L974-.L359,.L966-.L359
	.half	2
	.byte	138,8
	.word	.L966-.L359,.L966-.L359
	.half	2
	.byte	138,0
	.word	0,0
.L968:
	.word	-1,.L359,0,.L1289-.L359
	.half	1
	.byte	85
	.word	.L361-.L359,.L633-.L359
	.half	1
	.byte	85
	.word	.L1291-.L359,.L603-.L359
	.half	1
	.byte	85
	.word	.L1292-.L359,.L977-.L359
	.half	1
	.byte	85
	.word	.L1298-.L359,.L979-.L359
	.half	1
	.byte	85
	.word	.L369-.L359,.L573-.L359
	.half	1
	.byte	85
	.word	.L355-.L359,.L563-.L359
	.half	1
	.byte	85
	.word	.L1300-.L359,.L1301-.L359
	.half	1
	.byte	85
	.word	.L363-.L359,.L613-.L359
	.half	1
	.byte	85
	.word	.L365-.L359,.L608-.L359
	.half	1
	.byte	85
	.word	.L1302-.L359,.L1303-.L359
	.half	1
	.byte	85
	.word	0,0
.L989:
	.word	-1,.L359,0,.L1289-.L359
	.half	2
	.byte	145,120
	.word	.L361-.L359,.L633-.L359
	.half	2
	.byte	145,120
	.word	.L1291-.L359,.L603-.L359
	.half	2
	.byte	145,120
	.word	.L1293-.L359,.L573-.L359
	.half	2
	.byte	145,120
	.word	.L365-.L359,.L608-.L359
	.half	2
	.byte	145,120
	.word	.L1292-.L359,.L37-.L359
	.half	2
	.byte	145,120
	.word	.L1298-.L359,.L33-.L359
	.half	2
	.byte	145,120
	.word	.L355-.L359,.L563-.L359
	.half	2
	.byte	145,120
	.word	.L1300-.L359,.L1301-.L359
	.half	2
	.byte	145,120
	.word	.L363-.L359,.L613-.L359
	.half	2
	.byte	145,120
	.word	.L349-.L359,.L588-.L359
	.half	2
	.byte	145,120
	.word	.L1302-.L359,.L32-.L359
	.half	2
	.byte	145,120
	.word	.L353-.L359,.L638-.L359
	.half	2
	.byte	145,120
	.word	.L351-.L359,.L568-.L359
	.half	2
	.byte	145,120
	.word	.L1308-.L359,.L966-.L359
	.half	2
	.byte	145,120
	.word	0,0
.L1002:
	.word	-1,.L359,0,.L1289-.L359
	.half	2
	.byte	145,120
	.word	.L361-.L359,.L633-.L359
	.half	2
	.byte	145,120
	.word	.L1291-.L359,.L603-.L359
	.half	2
	.byte	145,120
	.word	.L1293-.L359,.L573-.L359
	.half	2
	.byte	145,120
	.word	.L365-.L359,.L608-.L359
	.half	2
	.byte	145,120
	.word	.L1292-.L359,.L37-.L359
	.half	2
	.byte	145,120
	.word	.L1298-.L359,.L33-.L359
	.half	2
	.byte	145,120
	.word	.L355-.L359,.L563-.L359
	.half	2
	.byte	145,120
	.word	.L1300-.L359,.L1301-.L359
	.half	2
	.byte	145,120
	.word	.L363-.L359,.L613-.L359
	.half	2
	.byte	145,120
	.word	.L349-.L359,.L588-.L359
	.half	2
	.byte	145,120
	.word	.L1302-.L359,.L32-.L359
	.half	2
	.byte	145,120
	.word	.L353-.L359,.L638-.L359
	.half	2
	.byte	145,120
	.word	.L351-.L359,.L568-.L359
	.half	2
	.byte	145,120
	.word	.L1308-.L359,.L966-.L359
	.half	2
	.byte	145,120
	.word	0,0
.L987:
	.word	-1,.L359,.L1295-.L359,.L45-.L359
	.half	1
	.byte	90
	.word	.L1296-.L359,.L1297-.L359
	.half	1
	.byte	84
	.word	0,0
.L1000:
	.word	-1,.L359,.L69-.L359,.L68-.L359
	.half	1
	.byte	90
	.word	.L1305-.L359,.L70-.L359
	.half	1
	.byte	90
	.word	.L1306-.L359,.L1307-.L359
	.half	1
	.byte	84
	.word	0,0
.L967:
	.word	-1,.L359,0,.L1289-.L359
	.half	1
	.byte	84
	.word	.L1290-.L359,.L1289-.L359
	.half	1
	.byte	88
	.word	.L361-.L359,.L633-.L359
	.half	1
	.byte	84
	.word	.L361-.L359,.L633-.L359
	.half	1
	.byte	88
	.word	.L1291-.L359,.L603-.L359
	.half	1
	.byte	84
	.word	.L1291-.L359,.L603-.L359
	.half	1
	.byte	88
	.word	.L1292-.L359,.L977-.L359
	.half	1
	.byte	84
	.word	.L1293-.L359,.L573-.L359
	.half	1
	.byte	88
	.word	.L365-.L359,.L608-.L359
	.half	1
	.byte	88
	.word	.L1292-.L359,.L37-.L359
	.half	1
	.byte	88
	.word	.L1298-.L359,.L979-.L359
	.half	1
	.byte	84
	.word	.L1298-.L359,.L33-.L359
	.half	1
	.byte	88
	.word	.L369-.L359,.L573-.L359
	.half	1
	.byte	84
	.word	.L355-.L359,.L563-.L359
	.half	1
	.byte	84
	.word	.L355-.L359,.L563-.L359
	.half	1
	.byte	88
	.word	.L1300-.L359,.L1301-.L359
	.half	1
	.byte	84
	.word	.L1300-.L359,.L1301-.L359
	.half	1
	.byte	88
	.word	.L363-.L359,.L613-.L359
	.half	1
	.byte	84
	.word	.L363-.L359,.L613-.L359
	.half	1
	.byte	88
	.word	.L365-.L359,.L608-.L359
	.half	1
	.byte	84
	.word	.L1302-.L359,.L1304-.L359
	.half	1
	.byte	84
	.word	.L349-.L359,.L588-.L359
	.half	1
	.byte	88
	.word	.L1302-.L359,.L32-.L359
	.half	1
	.byte	88
	.word	.L353-.L359,.L638-.L359
	.half	1
	.byte	88
	.word	.L351-.L359,.L568-.L359
	.half	1
	.byte	88
	.word	.L1308-.L359,.L966-.L359
	.half	1
	.byte	88
	.word	0,0
.L969:
	.word	-1,.L359,0,.L1289-.L359
	.half	1
	.byte	86
	.word	.L361-.L359,.L633-.L359
	.half	1
	.byte	86
	.word	.L1291-.L359,.L603-.L359
	.half	1
	.byte	86
	.word	.L1292-.L359,.L977-.L359
	.half	1
	.byte	86
	.word	.L1298-.L359,.L979-.L359
	.half	1
	.byte	86
	.word	.L369-.L359,.L573-.L359
	.half	1
	.byte	86
	.word	.L355-.L359,.L563-.L359
	.half	1
	.byte	86
	.word	.L1300-.L359,.L1301-.L359
	.half	1
	.byte	86
	.word	.L363-.L359,.L613-.L359
	.half	1
	.byte	86
	.word	.L365-.L359,.L608-.L359
	.half	1
	.byte	86
	.word	.L1302-.L359,.L1303-.L359
	.half	1
	.byte	86
	.word	0,0
.L971:
	.word	0,0
.L986:
	.word	-1,.L359,.L988-.L359,.L45-.L359
	.half	1
	.byte	91
	.word	0,0
.L999:
	.word	-1,.L359,.L69-.L359,.L68-.L359
	.half	1
	.byte	91
	.word	.L1001-.L359,.L70-.L359
	.half	1
	.byte	91
	.word	0,0
.L985:
	.word	0,0
.L990:
	.word	-1,.L359,0,.L1289-.L359
	.half	2
	.byte	145,124
	.word	.L361-.L359,.L633-.L359
	.half	2
	.byte	145,124
	.word	.L1291-.L359,.L603-.L359
	.half	2
	.byte	145,124
	.word	.L1293-.L359,.L573-.L359
	.half	2
	.byte	145,124
	.word	.L365-.L359,.L608-.L359
	.half	2
	.byte	145,124
	.word	.L1292-.L359,.L37-.L359
	.half	2
	.byte	145,124
	.word	.L1298-.L359,.L33-.L359
	.half	2
	.byte	145,124
	.word	.L355-.L359,.L563-.L359
	.half	2
	.byte	145,124
	.word	.L1300-.L359,.L1301-.L359
	.half	2
	.byte	145,124
	.word	.L363-.L359,.L613-.L359
	.half	2
	.byte	145,124
	.word	.L349-.L359,.L588-.L359
	.half	2
	.byte	145,124
	.word	.L1302-.L359,.L32-.L359
	.half	2
	.byte	145,124
	.word	.L353-.L359,.L638-.L359
	.half	2
	.byte	145,124
	.word	.L351-.L359,.L568-.L359
	.half	2
	.byte	145,124
	.word	.L1308-.L359,.L966-.L359
	.half	2
	.byte	145,124
	.word	0,0
.L1003:
	.word	-1,.L359,0,.L1289-.L359
	.half	2
	.byte	145,124
	.word	.L361-.L359,.L633-.L359
	.half	2
	.byte	145,124
	.word	.L1291-.L359,.L603-.L359
	.half	2
	.byte	145,124
	.word	.L1293-.L359,.L573-.L359
	.half	2
	.byte	145,124
	.word	.L365-.L359,.L608-.L359
	.half	2
	.byte	145,124
	.word	.L1292-.L359,.L37-.L359
	.half	2
	.byte	145,124
	.word	.L1298-.L359,.L33-.L359
	.half	2
	.byte	145,124
	.word	.L355-.L359,.L563-.L359
	.half	2
	.byte	145,124
	.word	.L1300-.L359,.L1301-.L359
	.half	2
	.byte	145,124
	.word	.L363-.L359,.L613-.L359
	.half	2
	.byte	145,124
	.word	.L349-.L359,.L588-.L359
	.half	2
	.byte	145,124
	.word	.L1302-.L359,.L32-.L359
	.half	2
	.byte	145,124
	.word	.L353-.L359,.L638-.L359
	.half	2
	.byte	145,124
	.word	.L351-.L359,.L568-.L359
	.half	2
	.byte	145,124
	.word	.L1308-.L359,.L966-.L359
	.half	2
	.byte	145,124
	.word	0,0
.L983:
	.word	-1,.L359,.L974-.L359,.L1289-.L359
	.half	1
	.byte	89
	.word	.L361-.L359,.L633-.L359
	.half	1
	.byte	89
	.word	.L1291-.L359,.L603-.L359
	.half	1
	.byte	89
	.word	.L1292-.L359,.L977-.L359
	.half	1
	.byte	89
	.word	.L977-.L359,.L978-.L359
	.half	1
	.byte	82
	.word	.L1293-.L359,.L573-.L359
	.half	1
	.byte	89
	.word	.L365-.L359,.L608-.L359
	.half	1
	.byte	89
	.word	.L1294-.L359,.L37-.L359
	.half	1
	.byte	89
	.word	.L1298-.L359,.L979-.L359
	.half	1
	.byte	89
	.word	.L979-.L359,.L53-.L359
	.half	1
	.byte	82
	.word	.L1299-.L359,.L33-.L359
	.half	1
	.byte	89
	.word	.L355-.L359,.L563-.L359
	.half	1
	.byte	89
	.word	.L1300-.L359,.L1301-.L359
	.half	1
	.byte	89
	.word	.L363-.L359,.L613-.L359
	.half	1
	.byte	89
	.word	.L349-.L359,.L588-.L359
	.half	1
	.byte	89
	.word	.L1302-.L359,.L32-.L359
	.half	1
	.byte	89
	.word	.L353-.L359,.L638-.L359
	.half	1
	.byte	89
	.word	.L351-.L359,.L568-.L359
	.half	1
	.byte	89
	.word	.L1308-.L359,.L966-.L359
	.half	1
	.byte	89
	.word	0,0
.L993:
	.word	0,0
.L994:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_CancelTx')
	.sect	'.debug_loc'
.L424:
	.word	-1,.L425,0,.L856-.L425
	.half	2
	.byte	138,0
	.word	0,0
.L857:
	.word	-1,.L425,0,.L856-.L425
	.half	1
	.byte	84
	.word	0,0
.L858:
	.word	-1,.L425,0,.L856-.L425
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_ChangeBaudrate')
	.sect	'.debug_loc'
.L722:
	.word	-1,.L393,.L1352-.L393,.L558-.L393
	.half	1
	.byte	85
	.word	0,.L1353-.L393
	.half	1
	.byte	85
	.word	.L148-.L393,.L143-.L393
	.half	1
	.byte	85
	.word	0,0
.L392:
	.word	-1,.L393,0,.L1351-.L393
	.half	2
	.byte	138,0
	.word	.L1351-.L393,.L719-.L393
	.half	2
	.byte	138,8
	.word	.L719-.L393,.L719-.L393
	.half	2
	.byte	138,0
	.word	0,0
.L720:
	.word	-1,.L393,.L1352-.L393,.L558-.L393
	.half	1
	.byte	84
	.word	0,.L1353-.L393
	.half	1
	.byte	84
	.word	.L148-.L393,.L143-.L393
	.half	1
	.byte	84
	.word	0,0
.L726:
	.word	-1,.L393,.L1356-.L393,.L150-.L393
	.half	1
	.byte	95
	.word	.L148-.L393,.L1360-.L393
	.half	1
	.byte	95
	.word	.L146-.L393,.L143-.L393
	.half	1
	.byte	95
	.word	0,0
.L730:
	.word	0,0
.L731:
	.word	0,0
.L742:
	.word	-1,.L393,.L1352-.L393,.L558-.L393
	.half	2
	.byte	145,120
	.word	0,.L719-.L393
	.half	2
	.byte	145,120
	.word	0,0
.L740:
	.word	-1,.L393,.L734-.L393,.L149-.L393
	.half	1
	.byte	92
	.word	.L1359-.L393,.L1358-.L393
	.half	1
	.byte	84
	.word	0,0
.L725:
	.word	-1,.L393,.L1352-.L393,.L558-.L393
	.half	1
	.byte	87
	.word	.L1354-.L393,.L1355-.L393
	.half	1
	.byte	87
	.word	.L148-.L393,.L159-.L393
	.half	1
	.byte	87
	.word	0,0
.L739:
	.word	-1,.L393,.L741-.L393,.L149-.L393
	.half	1
	.byte	93
	.word	0,0
.L724:
	.word	-1,.L393,.L1352-.L393,.L558-.L393
	.half	1
	.byte	90
	.word	.L1351-.L393,.L719-.L393
	.half	1
	.byte	90
	.word	0,0
.L735:
	.word	0,0
.L743:
	.word	-1,.L393,.L1352-.L393,.L558-.L393
	.half	2
	.byte	145,124
	.word	0,.L719-.L393
	.half	2
	.byte	145,124
	.word	0,0
.L729:
	.word	0,0
.L732:
	.word	-1,.L393,.L1355-.L393,.L150-.L393
	.half	1
	.byte	82
	.word	.L1357-.L393,.L733-.L393
	.half	1
	.byte	89
	.word	.L733-.L393,.L1358-.L393
	.half	1
	.byte	82
	.word	.L737-.L393,.L148-.L393
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_CheckWakeup')
	.sect	'.debug_loc'
.L412:
	.word	-1,.L413,0,.L859-.L413
	.half	2
	.byte	138,0
	.word	0,0
.L860:
	.word	-1,.L413,0,.L859-.L413
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_DisableControllerInterrupts')
	.sect	'.debug_loc'
.L404:
	.word	-1,.L405,0,.L1388-.L405
	.half	2
	.byte	138,0
	.word	.L1388-.L405,.L225-.L405
	.half	2
	.byte	138,8
	.word	.L225-.L405,.L225-.L405
	.half	2
	.byte	138,0
	.word	.L225-.L405,.L861-.L405
	.half	2
	.byte	138,8
	.word	.L861-.L405,.L861-.L405
	.half	2
	.byte	138,0
	.word	0,0
.L862:
	.word	-1,.L405,.L1352-.L405,.L558-.L405
	.half	1
	.byte	84
	.word	.L361-.L405,.L633-.L405
	.half	1
	.byte	84
	.word	.L1389-.L405,.L623-.L405
	.half	1
	.byte	84
	.word	0,.L1390-.L405
	.half	1
	.byte	84
	.word	0,0
.L864:
	.word	-1,.L405,.L1352-.L405,.L558-.L405
	.half	1
	.byte	88
	.word	.L361-.L405,.L633-.L405
	.half	1
	.byte	88
	.word	.L1389-.L405,.L623-.L405
	.half	1
	.byte	88
	.word	.L357-.L405,.L538-.L405
	.half	1
	.byte	88
	.word	.L1388-.L405,.L861-.L405
	.half	1
	.byte	88
	.word	.L1391-.L405,.L225-.L405
	.half	1
	.byte	87
	.word	0,0
.L868:
	.word	0,0
.L870:
	.word	-1,.L405,.L1352-.L405,.L558-.L405
	.half	2
	.byte	145,120
	.word	.L361-.L405,.L633-.L405
	.half	2
	.byte	145,120
	.word	.L1389-.L405,.L623-.L405
	.half	2
	.byte	145,120
	.word	.L357-.L405,.L538-.L405
	.half	2
	.byte	145,120
	.word	0,.L861-.L405
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_EnableControllerInterrupts')
	.sect	'.debug_loc'
.L408:
	.word	-1,.L409,0,.L871-.L409
	.half	2
	.byte	138,0
	.word	0,0
.L872:
	.word	-1,.L409,.L1352-.L409,.L558-.L409
	.half	1
	.byte	84
	.word	.L361-.L409,.L633-.L409
	.half	1
	.byte	84
	.word	.L1389-.L409,.L623-.L409
	.half	1
	.byte	84
	.word	0,.L1392-.L409
	.half	1
	.byte	84
	.word	0,0
.L873:
	.word	-1,.L409,.L1352-.L409,.L558-.L409
	.half	1
	.byte	88
	.word	.L361-.L409,.L633-.L409
	.half	1
	.byte	88
	.word	.L1389-.L409,.L623-.L409
	.half	1
	.byte	88
	.word	.L357-.L409,.L538-.L409
	.half	1
	.byte	88
	.word	0,.L871-.L409
	.half	1
	.byte	88
	.word	.L1393-.L409,.L232-.L409
	.half	1
	.byte	87
	.word	0,0
.L877:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_Init')
	.sect	'.debug_loc'
.L396:
	.word	-1,.L397,0,.L1361-.L397
	.half	2
	.byte	138,0
	.word	.L1361-.L397,.L175-.L397
	.half	2
	.byte	138,16
	.word	.L175-.L397,.L175-.L397
	.half	2
	.byte	138,0
	.word	.L175-.L397,.L668-.L397
	.half	2
	.byte	138,16
	.word	.L668-.L397,.L668-.L397
	.half	2
	.byte	138,0
	.word	0,0
.L670:
	.word	-1,.L397,0,.L1362-.L397
	.half	1
	.byte	100
	.word	0,0
.L695:
	.word	0,0
.L697:
	.word	0,0
.L717:
	.word	-1,.L397,0,.L1363-.L397
	.half	2
	.byte	145,112
	.word	.L361-.L397,.L633-.L397
	.half	2
	.byte	145,112
	.word	.L357-.L397,.L538-.L397
	.half	2
	.byte	145,112
	.word	.L1371-.L397,.L668-.L397
	.half	2
	.byte	145,112
	.word	0,0
.L714:
	.word	-1,.L397,.L705-.L397,.L165-.L397
	.half	1
	.byte	90
	.word	.L1370-.L397,.L1369-.L397
	.half	1
	.byte	84
	.word	0,0
.L672:
	.word	-1,.L397,.L1361-.L397,.L1363-.L397
	.half	1
	.byte	88
	.word	.L674-.L397,.L1364-.L397
	.half	1
	.byte	95
	.word	.L361-.L397,.L633-.L397
	.half	1
	.byte	88
	.word	.L357-.L397,.L538-.L397
	.half	1
	.byte	88
	.word	.L1371-.L397,.L668-.L397
	.half	1
	.byte	88
	.word	0,0
.L682:
	.word	0,0
.L684:
	.word	-1,.L397,.L1365-.L397,.L163-.L397
	.half	1
	.byte	95
	.word	.L1366-.L397,.L164-.L397
	.half	1
	.byte	98
	.word	0,0
.L713:
	.word	-1,.L397,.L716-.L397,.L165-.L397
	.half	1
	.byte	91
	.word	0,0
.L707:
	.word	0,0
.L718:
	.word	-1,.L397,0,.L1363-.L397
	.half	2
	.byte	145,116
	.word	.L361-.L397,.L633-.L397
	.half	2
	.byte	145,116
	.word	.L357-.L397,.L538-.L397
	.half	2
	.byte	145,116
	.word	.L1371-.L397,.L668-.L397
	.half	2
	.byte	145,116
	.word	0,0
.L693:
	.word	0,0
.L702:
	.word	-1,.L397,.L1367-.L397,.L166-.L397
	.half	1
	.byte	82
	.word	.L1368-.L397,.L704-.L397
	.half	1
	.byte	89
	.word	.L704-.L397,.L1369-.L397
	.half	1
	.byte	82
	.word	.L710-.L397,.L161-.L397
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_InitMemory')
	.sect	'.debug_loc'
.L390:
	.word	-1,.L391,0,.L667-.L391
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_MainFunction_BusOff')
	.sect	'.debug_loc'
.L418:
	.word	-1,.L419,0,.L882-.L419
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_MainFunction_Mode')
	.sect	'.debug_loc'
.L422:
	.word	-1,.L423,0,.L884-.L423
	.half	2
	.byte	138,0
	.word	0,0
.L887:
	.word	-1,.L423,.L1413-.L423,.L1414-.L423
	.half	1
	.byte	85
	.word	0,0
.L892:
	.word	0,0
.L891:
	.word	0,0
.L888:
	.word	-1,.L423,.L1415-.L423,.L1414-.L423
	.half	1
	.byte	86
	.word	0,0
.L885:
	.word	-1,.L423,.L1352-.L423,.L558-.L423
	.half	1
	.byte	90
	.word	.L361-.L423,.L633-.L423
	.half	1
	.byte	90
	.word	0,.L1411-.L423
	.half	1
	.byte	90
	.word	.L379-.L423,.L648-.L423
	.half	1
	.byte	90
	.word	.L357-.L423,.L538-.L423
	.half	1
	.byte	90
	.word	.L1417-.L423,.L884-.L423
	.half	1
	.byte	90
	.word	.L1418-.L423,.L286-.L423
	.half	1
	.byte	87
	.word	0,0
.L886:
	.word	-1,.L423,.L1412-.L423,.L1411-.L423
	.half	1
	.byte	88
	.word	.L379-.L423,.L648-.L423
	.half	1
	.byte	88
	.word	.L1417-.L423,.L275-.L423
	.half	1
	.byte	88
	.word	0,0
.L893:
	.word	0,0
.L889:
	.word	-1,.L423,.L1414-.L423,.L1411-.L423
	.half	1
	.byte	82
	.word	.L1416-.L423,.L1411-.L423
	.half	1
	.byte	89
	.word	.L379-.L423,.L648-.L423
	.half	1
	.byte	89
	.word	.L379-.L423,.L648-.L423
	.half	1
	.byte	82
	.word	.L1417-.L423,.L275-.L423
	.half	1
	.byte	89
	.word	.L1417-.L423,.L890-.L423
	.half	1
	.byte	82
	.word	.L279-.L423,.L284-.L423
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_MainFunction_Read')
	.sect	'.debug_loc'
.L416:
	.word	-1,.L417,0,.L880-.L417
	.half	2
	.byte	138,0
	.word	0,0
.L881:
	.word	-1,.L417,.L1352-.L417,.L558-.L417
	.half	1
	.byte	87
	.word	.L357-.L417,.L538-.L417
	.half	1
	.byte	87
	.word	0,.L880-.L417
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_MainFunction_Wakeup')
	.sect	'.debug_loc'
.L420:
	.word	-1,.L421,0,.L883-.L421
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_MainFunction_Write')
	.sect	'.debug_loc'
.L414:
	.word	-1,.L415,0,.L879-.L415
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_SetControllerMode')
	.sect	'.debug_loc'
.L398:
	.word	-1,.L399,0,.L1372-.L399
	.half	2
	.byte	138,0
	.word	.L1372-.L399,.L744-.L399
	.half	2
	.byte	138,8
	.word	.L744-.L399,.L744-.L399
	.half	2
	.byte	138,0
	.word	0,0
.L745:
	.word	-1,.L399,.L1352-.L399,.L558-.L399
	.half	1
	.byte	84
	.word	.L401-.L399,.L618-.L399
	.half	1
	.byte	84
	.word	0,.L1373-.L399
	.half	1
	.byte	84
	.word	0,0
.L747:
	.word	-1,.L399,.L1352-.L399,.L558-.L399
	.half	1
	.byte	88
	.word	.L1352-.L399,.L558-.L399
	.half	1
	.byte	85
	.word	.L401-.L399,.L618-.L399
	.half	1
	.byte	88
	.word	.L401-.L399,.L618-.L399
	.half	1
	.byte	85
	.word	.L1374-.L399,.L760-.L399
	.half	1
	.byte	88
	.word	0,.L1373-.L399
	.half	1
	.byte	85
	.word	.L189-.L399,.L208-.L399
	.half	1
	.byte	88
	.word	.L403-.L399,.L1385-.L399
	.half	1
	.byte	88
	.word	.L379-.L399,.L648-.L399
	.half	1
	.byte	88
	.word	.L190-.L399,.L204-.L399
	.half	1
	.byte	88
	.word	0,0
.L757:
	.word	0,0
.L752:
	.word	-1,.L399,.L403-.L399,.L1385-.L399
	.half	1
	.byte	92
	.word	.L379-.L399,.L648-.L399
	.half	1
	.byte	92
	.word	.L206-.L399,.L190-.L399
	.half	1
	.byte	92
	.word	0,0
.L782:
	.word	0,0
.L780:
	.word	0,0
.L758:
	.word	0,0
.L775:
	.word	-1,.L399,.L1352-.L399,.L558-.L399
	.half	2
	.byte	145,120
	.word	.L401-.L399,.L618-.L399
	.half	2
	.byte	145,120
	.word	.L403-.L399,.L1380-.L399
	.half	2
	.byte	145,120
	.word	.L379-.L399,.L648-.L399
	.half	2
	.byte	145,120
	.word	.L403-.L399,.L1385-.L399
	.half	2
	.byte	145,120
	.word	.L357-.L399,.L538-.L399
	.half	2
	.byte	145,120
	.word	0,.L744-.L399
	.half	2
	.byte	145,120
	.word	0,0
.L797:
	.word	-1,.L399,.L1352-.L399,.L558-.L399
	.half	2
	.byte	145,120
	.word	.L401-.L399,.L618-.L399
	.half	2
	.byte	145,120
	.word	.L403-.L399,.L1380-.L399
	.half	2
	.byte	145,120
	.word	.L379-.L399,.L648-.L399
	.half	2
	.byte	145,120
	.word	.L403-.L399,.L1385-.L399
	.half	2
	.byte	145,120
	.word	.L357-.L399,.L538-.L399
	.half	2
	.byte	145,120
	.word	0,.L744-.L399
	.half	2
	.byte	145,120
	.word	0,0
.L773:
	.word	-1,.L399,.L767-.L399,.L195-.L399
	.half	1
	.byte	92
	.word	.L1379-.L399,.L1378-.L399
	.half	1
	.byte	84
	.word	0,0
.L795:
	.word	-1,.L399,.L790-.L399,.L207-.L399
	.half	1
	.byte	88
	.word	.L1384-.L399,.L1383-.L399
	.half	1
	.byte	84
	.word	0,0
.L749:
	.word	-1,.L399,.L764-.L399,.L1386-.L399
	.half	1
	.byte	90
	.word	.L1387-.L399,.L219-.L399
	.half	1
	.byte	90
	.word	0,0
.L772:
	.word	-1,.L399,.L774-.L399,.L195-.L399
	.half	1
	.byte	93
	.word	0,0
.L794:
	.word	-1,.L399,.L796-.L399,.L207-.L399
	.half	1
	.byte	91
	.word	0,0
.L750:
	.word	-1,.L399,.L1352-.L399,.L558-.L399
	.half	1
	.byte	89
	.word	.L401-.L399,.L618-.L399
	.half	1
	.byte	89
	.word	.L403-.L399,.L1380-.L399
	.half	1
	.byte	89
	.word	.L379-.L399,.L648-.L399
	.half	1
	.byte	89
	.word	.L403-.L399,.L1385-.L399
	.half	1
	.byte	89
	.word	.L357-.L399,.L538-.L399
	.half	1
	.byte	89
	.word	.L1372-.L399,.L744-.L399
	.half	1
	.byte	89
	.word	0,0
.L768:
	.word	0,0
.L776:
	.word	-1,.L399,.L1352-.L399,.L558-.L399
	.half	2
	.byte	145,124
	.word	.L401-.L399,.L618-.L399
	.half	2
	.byte	145,124
	.word	.L403-.L399,.L1380-.L399
	.half	2
	.byte	145,124
	.word	.L379-.L399,.L648-.L399
	.half	2
	.byte	145,124
	.word	.L403-.L399,.L1385-.L399
	.half	2
	.byte	145,124
	.word	.L357-.L399,.L538-.L399
	.half	2
	.byte	145,124
	.word	0,.L744-.L399
	.half	2
	.byte	145,124
	.word	0,0
.L798:
	.word	-1,.L399,.L1352-.L399,.L558-.L399
	.half	2
	.byte	145,124
	.word	.L401-.L399,.L618-.L399
	.half	2
	.byte	145,124
	.word	.L403-.L399,.L1380-.L399
	.half	2
	.byte	145,124
	.word	.L379-.L399,.L648-.L399
	.half	2
	.byte	145,124
	.word	.L403-.L399,.L1385-.L399
	.half	2
	.byte	145,124
	.word	.L357-.L399,.L538-.L399
	.half	2
	.byte	145,124
	.word	0,.L744-.L399
	.half	2
	.byte	145,124
	.word	0,0
.L756:
	.word	0,0
.L751:
	.word	-1,.L399,.L1375-.L399,.L1376-.L399
	.half	1
	.byte	84
	.word	.L403-.L399,.L1380-.L399
	.half	1
	.byte	88
	.word	.L379-.L399,.L648-.L399
	.half	1
	.byte	88
	.word	.L760-.L399,.L189-.L399
	.half	1
	.byte	88
	.word	0,0
.L765:
	.word	-1,.L399,.L1376-.L399,.L196-.L399
	.half	1
	.byte	82
	.word	.L1377-.L399,.L766-.L399
	.half	1
	.byte	91
	.word	.L766-.L399,.L1378-.L399
	.half	1
	.byte	82
	.word	.L403-.L399,.L1380-.L399
	.half	1
	.byte	91
	.word	.L379-.L399,.L648-.L399
	.half	1
	.byte	91
	.word	.L770-.L399,.L189-.L399
	.half	1
	.byte	91
	.word	.L403-.L399,.L1385-.L399
	.half	1
	.byte	91
	.word	.L787-.L399,.L190-.L399
	.half	1
	.byte	91
	.word	.L763-.L399,.L192-.L399
	.half	1
	.byte	91
	.word	.L178-.L399,.L764-.L399
	.half	1
	.byte	91
	.word	0,0
.L788:
	.word	-1,.L399,.L1381-.L399,.L208-.L399
	.half	1
	.byte	82
	.word	.L1382-.L399,.L789-.L399
	.half	1
	.byte	93
	.word	.L789-.L399,.L1383-.L399
	.half	1
	.byte	82
	.word	.L403-.L399,.L1385-.L399
	.half	1
	.byte	93
	.word	.L379-.L399,.L648-.L399
	.half	1
	.byte	93
	.word	.L792-.L399,.L190-.L399
	.half	1
	.byte	93
	.word	0,0
.L784:
	.word	0,0
.L753:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Can_Write')
	.sect	'.debug_loc'
.L410:
	.word	-1,.L411,0,.L1394-.L411
	.half	2
	.byte	138,0
	.word	.L1394-.L411,.L802-.L411
	.half	2
	.byte	138,48
	.word	.L802-.L411,.L802-.L411
	.half	2
	.byte	138,0
	.word	0,0
.L803:
	.word	-1,.L411,.L363-.L411,.L613-.L411
	.half	1
	.byte	84
	.word	.L347-.L411,.L598-.L411
	.half	1
	.byte	84
	.word	0,.L812-.L411
	.half	1
	.byte	84
	.word	0,0
.L805:
	.word	-1,.L411,0,.L1395-.L411
	.half	1
	.byte	100
	.word	.L363-.L411,.L613-.L411
	.half	1
	.byte	111
	.word	.L363-.L411,.L1396-.L411
	.half	1
	.byte	100
	.word	.L347-.L411,.L598-.L411
	.half	1
	.byte	111
	.word	.L1397-.L411,.L1398-.L411
	.half	1
	.byte	111
	.word	.L254-.L411,.L255-.L411
	.half	1
	.byte	111
	.word	0,0
.L850:
	.word	-1,.L411,.L363-.L411,.L613-.L411
	.half	2
	.byte	145,124
	.word	.L347-.L411,.L598-.L411
	.half	2
	.byte	145,124
	.word	.L353-.L411,.L638-.L411
	.half	2
	.byte	145,124
	.word	.L357-.L411,.L538-.L411
	.half	2
	.byte	145,124
	.word	0,.L802-.L411
	.half	2
	.byte	145,124
	.word	0,0
.L848:
	.word	-1,.L411,.L353-.L411,.L638-.L411
	.half	1
	.byte	84
	.word	.L812-.L411,.L261-.L411
	.half	1
	.byte	84
	.word	.L1401-.L411,.L1402-.L411
	.half	5
	.byte	144,32,157,32,0
	.word	.L1405-.L411,.L258-.L411
	.half	5
	.byte	144,32,157,32,0
	.word	.L257-.L411,.L236-.L411
	.half	1
	.byte	84
	.word	0,0
.L847:
	.word	-1,.L411,.L1403-.L411,.L1404-.L411
	.half	1
	.byte	82
	.word	.L1406-.L411,.L258-.L411
	.half	1
	.byte	82
	.word	0,0
.L807:
	.word	-1,.L411,.L363-.L411,.L613-.L411
	.half	1
	.byte	87
	.word	.L347-.L411,.L598-.L411
	.half	1
	.byte	87
	.word	.L353-.L411,.L638-.L411
	.half	1
	.byte	87
	.word	.L357-.L411,.L538-.L411
	.half	1
	.byte	87
	.word	.L1409-.L411,.L265-.L411
	.half	1
	.byte	87
	.word	0,0
.L826:
	.word	-1,.L411,.L363-.L411,.L613-.L411
	.half	1
	.byte	88
	.word	.L347-.L411,.L598-.L411
	.half	1
	.byte	88
	.word	.L353-.L411,.L638-.L411
	.half	1
	.byte	88
	.word	.L1399-.L411,.L1400-.L411
	.half	5
	.byte	144,32,157,32,0
	.word	.L1407-.L411,.L1408-.L411
	.half	5
	.byte	144,32,157,32,0
	.word	.L357-.L411,.L538-.L411
	.half	1
	.byte	88
	.word	.L1410-.L411,.L802-.L411
	.half	1
	.byte	88
	.word	0,0
.L806:
	.word	-1,.L411,.L363-.L411,.L613-.L411
	.half	1
	.byte	88
	.word	.L347-.L411,.L598-.L411
	.half	1
	.byte	88
	.word	.L353-.L411,.L638-.L411
	.half	1
	.byte	88
	.word	.L357-.L411,.L538-.L411
	.half	1
	.byte	88
	.word	.L1410-.L411,.L802-.L411
	.half	1
	.byte	88
	.word	0,0
.L855:
	.word	-1,.L411,.L1408-.L411,.L257-.L411
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L814:
	.word	0,0
.L823:
	.word	0,0
.L834:
	.word	0,0
.L840:
	.word	0,0
.L845:
	.word	0,0
.L853:
	.word	0,0
.L809:
	.word	-1,.L411,.L363-.L411,.L613-.L411
	.half	2
	.byte	145,80
	.word	.L347-.L411,.L598-.L411
	.half	2
	.byte	145,80
	.word	.L353-.L411,.L638-.L411
	.half	2
	.byte	145,80
	.word	.L357-.L411,.L538-.L411
	.half	2
	.byte	145,80
	.word	0,.L802-.L411
	.half	2
	.byte	145,80
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L2374:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('CanHL_ReInit')
	.sect	'.debug_frame'
	.word	36
	.word	.L2374,.L345,.L1110-.L345
	.byte	4
	.word	(.L1274-.L345)/2
	.byte	19,48,22,26,3,19,138,48,4
	.word	(.L1110-.L1274)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanLL_ModeTransition')
	.sect	'.debug_frame'
	.word	36
	.word	.L2374,.L359,.L966-.L359
	.byte	4
	.word	(.L974-.L359)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L966-.L974)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanHL_TxConfirmation')
	.sect	'.debug_frame'
	.word	56
	.word	.L2374,.L371,.L1006-.L371
	.byte	4
	.word	(.L1309-.L371)/2
	.byte	19,200,0,22,26,4,19,138,200,0,4
	.word	(.L80-.L1309)/2
	.byte	19,0,8,26,19,200,0,22,26,4,19,138,200,0,4
	.word	(.L1006-.L80)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('CanHL_BasicCanMsgReceived')
	.sect	'.debug_frame'
	.word	56
	.word	.L2374,.L375,.L1022-.L375
	.byte	4
	.word	(.L1029-.L375)/2
	.byte	19,240,0,22,26,4,19,138,240,0,4
	.word	(.L93-.L1029)/2
	.byte	19,0,8,26,19,240,0,22,26,4,19,138,240,0,4
	.word	(.L1022-.L93)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('CanHL_ErrorHandling')
	.sect	'.debug_frame'
	.word	52
	.word	.L2374,.L377,.L1046-.L377
	.byte	4
	.word	(.L1050-.L377)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L141-.L1050)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L1046-.L141)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Can_InitMemory')
	.sect	'.debug_frame'
	.word	24
	.word	.L2374,.L391,.L667-.L391
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Can_ChangeBaudrate')
	.sect	'.debug_frame'
	.word	36
	.word	.L2374,.L393,.L719-.L393
	.byte	4
	.word	(.L1351-.L393)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L719-.L1351)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Can_Init')
	.sect	'.debug_frame'
	.word	52
	.word	.L2374,.L397,.L668-.L397
	.byte	4
	.word	(.L1361-.L397)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L175-.L1361)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L668-.L175)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Can_SetControllerMode')
	.sect	'.debug_frame'
	.word	36
	.word	.L2374,.L399,.L744-.L399
	.byte	4
	.word	(.L1372-.L399)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L744-.L1372)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Can_DisableControllerInterrupts')
	.sect	'.debug_frame'
	.word	52
	.word	.L2374,.L405,.L861-.L405
	.byte	4
	.word	(.L1388-.L405)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L225-.L1388)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L861-.L225)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Can_EnableControllerInterrupts')
	.sect	'.debug_frame'
	.word	12
	.word	.L2374,.L409,.L871-.L409
	.sdecl	'.debug_frame',debug,cluster('Can_Write')
	.sect	'.debug_frame'
	.word	36
	.word	.L2374,.L411,.L802-.L411
	.byte	4
	.word	(.L1394-.L411)/2
	.byte	19,48,22,26,3,19,138,48,4
	.word	(.L802-.L1394)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Can_CheckWakeup')
	.sect	'.debug_frame'
	.word	24
	.word	.L2374,.L413,.L859-.L413
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Can_MainFunction_Write')
	.sect	'.debug_frame'
	.word	24
	.word	.L2374,.L415,.L879-.L415
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Can_MainFunction_Read')
	.sect	'.debug_frame'
	.word	12
	.word	.L2374,.L417,.L880-.L417
	.sdecl	'.debug_frame',debug,cluster('Can_MainFunction_BusOff')
	.sect	'.debug_frame'
	.word	24
	.word	.L2374,.L419,.L882-.L419
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Can_MainFunction_Wakeup')
	.sect	'.debug_frame'
	.word	24
	.word	.L2374,.L421,.L883-.L421
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Can_MainFunction_Mode')
	.sect	'.debug_frame'
	.word	12
	.word	.L2374,.L423,.L884-.L423
	.sdecl	'.debug_frame',debug,cluster('Can_CancelTx')
	.sect	'.debug_frame'
	.word	24
	.word	.L2374,.L425,.L856-.L425
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CanInterrupt')
	.sect	'.debug_frame'
	.word	52
	.word	.L2374,.L427,.L894-.L427
	.byte	4
	.word	(.L896-.L427)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L329-.L896)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L894-.L329)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L2375:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_14')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L347,.L598-.L347
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_12')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L349,.L588-.L349
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L351,.L568-.L351
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_22')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L353,.L638-.L353
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L355,.L563-.L355
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L357,.L538-.L357
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_21')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L361,.L633-.L361
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_17')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L363,.L613-.L363
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_16')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L365,.L608-.L365
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_15')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L367,.L603-.L367
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_9')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L369,.L573-.L369
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_13')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L373,.L593-.L373
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_24')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L379,.L648-.L379
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_23')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L381,.L643-.L381
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_11')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L383,.L583-.L383
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_10')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L385,.L578-.L385
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L387,.L548-.L387
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L389,.L543-.L389
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L395,.L558-.L395
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_18')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L401,.L618-.L401
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L403,.L553-.L403
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_19')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L407,.L623-.L407
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_20')
	.sect	'.debug_frame'
	.word	24
	.word	.L2375,.L429,.L628-.L429
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\component\Can\Implementation\Can.c	 10930  /* CanInterrupt */
; ..\component\Can\Implementation\Can.c	 10931  # endif /* End of ISR_MANDATORY */
; ..\component\Can\Implementation\Can.c	 10932  /* CODE CATEGORY 1 END */
; ..\component\Can\Implementation\Can.c	 10933  
; ..\component\Can\Implementation\Can.c	 10934  #define CAN_STOP_SEC_CODE  /*----------------------------------------------*/
; ..\component\Can\Implementation\Can.c	 10935  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\Can\Implementation\Can.c	 10936  /****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10937  
; ..\component\Can\Implementation\Can.c	 10938  /****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10939  /*  excluded Requirements                                                   */
; ..\component\Can\Implementation\Can.c	 10940  /****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10941  /* part of other component: SPEC-1597 */
; ..\component\Can\Implementation\Can.c	 10942  /* Currently no use-case / not supported: SPEC-1601, SPEC-1592, SPEC-1582 */
; ..\component\Can\Implementation\Can.c	 10943  
; ..\component\Can\Implementation\Can.c	 10944  /****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10945  /*  MISRA deviations                                                        */
; ..\component\Can\Implementation\Can.c	 10946  /****************************************************************************/
; ..\component\Can\Implementation\Can.c	 10947  /* Justification for module-specific MISRA deviations:
; ..\component\Can\Implementation\Can.c	 10948  
; ..\component\Can\Implementation\Can.c	 10949  MD_Can_Goto:
; ..\component\Can\Implementation\Can.c	 10950  PRQA message 2001
; ..\component\Can\Implementation\Can.c	 10951    Reason: 'goto' statements are used to reduce code complexity.
; ..\component\Can\Implementation\Can.c	 10952    Risk: Incorrect jump.
; ..\component\Can\Implementation\Can.c	 10953    Prevention: Code inspection and runtime tests.
; ..\component\Can\Implementation\Can.c	 10954  
; ..\component\Can\Implementation\Can.c	 10955  MD_Can_MultipleReturn:
; ..\component\Can\Implementation\Can.c	 10956  PRQA message 2889
; ..\component\Can\Implementation\Can.c	 10957    Reason: Multiple return paths are used to reduce code complexity.
; ..\component\Can\Implementation\Can.c	 10958    Risk: Return a function too soon.
; ..\component\Can\Implementation\Can.c	 10959    Prevention: Code inspection and runtime tests.
; ..\component\Can\Implementation\Can.c	 10960  
; ..\component\Can\Implementation\Can.c	 10961  MD_Can_ParameterName:
; ..\component\Can\Implementation\Can.c	 10962  PRQA message 0784, 0788
; ..\component\Can\Implementation\Can.c	 10963    Reason: A parameter that is also used as a macro name is accepted for compatibility reasons.
; ..\component\Can\Implementation\Can.c	 10964    Risk: The macro can change the declaration unintentionally and readability is reduced.
; ..\component\Can\Implementation\Can.c	 10965    Prevention: Code inspection and test of the different variants in the component test.
; ..\component\Can\Implementation\Can.c	 10966  
; ..\component\Can\Implementation\Can.c	 10967  MD_Can_ConstValue:
; ..\component\Can\Implementation\Can.c	 10968  PRQA message 2741, 2742, 2880, 2985, 2986, 2990, 2991, 2992, 2993, 2994, 2995, 2996
; ..\component\Can\Implementation\Can.c	 10969    Reason: Value is constant depending on configuration aspects or platform specific implementation. This leads to constant control expressions, unreachable code or redundant operations.
; ..\component\Can\Implementation\Can.c	 10970    Risk: Wrong or missing functionality.
; ..\component\Can\Implementation\Can.c	 10971    Prevention: Code inspection and test of the different variants in the component test.
; ..\component\Can\Implementation\Can.c	 10972  
; ..\component\Can\Implementation\Can.c	 10973  MD_Can_EmptyFunction:
; ..\component\Can\Implementation\Can.c	 10974  PRQA message 2987
; ..\component\Can\Implementation\Can.c	 10975    Reason: Function is empty depending on configuration aspects and platform specific implementation.
; ..\component\Can\Implementation\Can.c	 10976    Risk: Function implementation missing.
; ..\component\Can\Implementation\Can.c	 10977    Prevention: Code inspection and test of the different variants in the component test.
; ..\component\Can\Implementation\Can.c	 10978  
; ..\component\Can\Implementation\Can.c	 10979  MD_Can_NoneConstParameterPointer:
; ..\component\Can\Implementation\Can.c	 10980  PRQA message 3673
; ..\component\Can\Implementation\Can.c	 10981    Reason: Non-const pointer parameter is required by the internal interface or compatibility reasons but depending on the configuration or specific platform implementation the target may not always be modified.
; ..\component\Can\Implementation\Can.c	 10982    Risk: Read only data could be modified without intention.
; ..\component\Can\Implementation\Can.c	 10983    Prevention: Code inspection and test of the different variants in the component test.
; ..\component\Can\Implementation\Can.c	 10984  
; ..\component\Can\Implementation\Can.c	 10985  MD_Can_ModuleDefine:
; ..\component\Can\Implementation\Can.c	 10986  PRQA message 0602, 0603
; ..\component\Can\Implementation\Can.c	 10987    Reason: Usage of reserved identifiers with leading underscores is accepted for compatibility reasons.
; ..\component\Can\Implementation\Can.c	 10988    Risk: Name conflicts.
; ..\component\Can\Implementation\Can.c	 10989    Prevention: Compile and link of the different variants in the component and integration test.
; ..\component\Can\Implementation\Can.c	 10990  
; ..\component\Can\Implementation\Can.c	 10991  MD_Can_RedundantInit:
; ..\component\Can\Implementation\Can.c	 10992  PRQA message 2981
; ..\component\Can\Implementation\Can.c	 10993    Reason: Reduce code complexity by using an explicit variable initializer that may be always modified before being used in some configurations.
; ..\component\Can\Implementation\Can.c	 10994    Risk: Unintended change of value.
; ..\component\Can\Implementation\Can.c	 10995    Prevention: Code inspection and test of the different variants in the component test.
; ..\component\Can\Implementation\Can.c	 10996  
; ..\component\Can\Implementation\Can.c	 10997  MD_Can_GlobalScope:
; ..\component\Can\Implementation\Can.c	 10998  PRQA message 3218
; ..\component\Can\Implementation\Can.c	 10999    Reason: The usage of variables depends on configuration aspects and they may be used only once or defined globally to improve overview.
; ..\component\Can\Implementation\Can.c	 11000    Risk: None.
; ..\component\Can\Implementation\Can.c	 11001    Prevention: None.
; ..\component\Can\Implementation\Can.c	 11002  
; ..\component\Can\Implementation\Can.c	 11003  MD_Can_ExternalScope:
; ..\component\Can\Implementation\Can.c	 11004  PRQA message 1514, 3408, 3447, 3451, 3210
; ..\component\Can\Implementation\Can.c	 11005    Reason: The variable is used by other modules and can't be declared static.
; ..\component\Can\Implementation\Can.c	 11006    Risk: Name conflicts.
; ..\component\Can\Implementation\Can.c	 11007    Prevention: Compile and link of the different variants in the component and integration test.
; ..\component\Can\Implementation\Can.c	 11008  
; ..\component\Can\Implementation\Can.c	 11009  MD_Can_GenData:
; ..\component\Can\Implementation\Can.c	 11010  PRQA message 1533, 3408
; ..\component\Can\Implementation\Can.c	 11011    Reason: These constants are defined in a generated file and cannot be moved to the static source file. Visibility might be reduced by stricter switches for the declaration (kept for compatibility reasons).
; ..\component\Can\Implementation\Can.c	 11012    Risk: Compile or link errors.
; ..\component\Can\Implementation\Can.c	 11013    Prevention: Code inspection and compile-link of the different variants in the component and integration test.
; ..\component\Can\Implementation\Can.c	 11014  
; ..\component\Can\Implementation\Can.c	 11015  MD_Can_Union:
; ..\component\Can\Implementation\Can.c	 11016  PRQA message 0750, 0759
; ..\component\Can\Implementation\Can.c	 11017    Reason: Using union type to handle different data accesses.
; ..\component\Can\Implementation\Can.c	 11018    Risk: Misinterpreted data.
; ..\component\Can\Implementation\Can.c	 11019    Prevention: Code inspection and test of the different variants in the component test.
; ..\component\Can\Implementation\Can.c	 11020  
; ..\component\Can\Implementation\Can.c	 11021  MD_Can_Assertion:
; ..\component\Can\Implementation\Can.c	 11022  PRQA message 2842, 2897
; ..\component\Can\Implementation\Can.c	 11023    Reason: Assertion leads to apparent out of bounds indexing or casting an apparent negative value to an unsigned type.
; ..\component\Can\Implementation\Can.c	 11024    Risk: Undefined behaviour.
; ..\component\Can\Implementation\Can.c	 11025    Prevention: Code inspection. The assertion itself prevents the apparent anomaly.
; ..\component\Can\Implementation\Can.c	 11026  
; ..\component\Can\Implementation\Can.c	 11027  MD_Can_PointerVoidCast:
; ..\component\Can\Implementation\Can.c	 11028  PRQA message 0314, 0316
; ..\component\Can\Implementation\Can.c	 11029    Reason: API is defined with pointer to void parameter, so pointer has to be casted to or from void.
; ..\component\Can\Implementation\Can.c	 11030    Risk: Wrong data access or undefiend behavior for platforms where the byte alignment is not arbitrary.
; ..\component\Can\Implementation\Can.c	 11031    Prevention: Code inspection and test with the target compiler/platform in the component test.
; ..\component\Can\Implementation\Can.c	 11032  
; ..\component\Can\Implementation\Can.c	 11033  MD_Can_PointerCast:
; ..\component\Can\Implementation\Can.c	 11034  PRQA message 0310
; ..\component\Can\Implementation\Can.c	 11035    Reason: Different pointer type is used to access data.
; ..\component\Can\Implementation\Can.c	 11036    Risk: Wrong memory is accessed or alignment is incorrect.
; ..\component\Can\Implementation\Can.c	 11037    Prevention: Code inspection and test of different variants in the component test.
; ..\component\Can\Implementation\Can.c	 11038  
; ..\component\Can\Implementation\Can.c	 11039  MD_Can_NoneVolatilePointerCast:
; ..\component\Can\Implementation\Can.c	 11040  PRQA message 0312
; ..\component\Can\Implementation\Can.c	 11041    Reason: Cast to none volatile pointer.
; ..\component\Can\Implementation\Can.c	 11042    Risk: Incorrect multiple context access.
; ..\component\Can\Implementation\Can.c	 11043    Prevention: Code inspection checks that the value is not multiple accessed.
; ..\component\Can\Implementation\Can.c	 11044  
; ..\component\Can\Implementation\Can.c	 11045  MD_Can_HwAccess:
; ..\component\Can\Implementation\Can.c	 11046  PRQA message 0303
; ..\component\Can\Implementation\Can.c	 11047    Reason: Hardware access needs cast between a pointer to volatile object and an integral type.
; ..\component\Can\Implementation\Can.c	 11048    Risk: Access of unknown memory.
; ..\component\Can\Implementation\Can.c	 11049    Prevention: Runtime tests.
; ..\component\Can\Implementation\Can.c	 11050  
; ..\component\Can\Implementation\Can.c	 11051  MD_Can_MixedSigns:
; ..\component\Can\Implementation\Can.c	 11052  PRQA message 4393, 4394
; ..\component\Can\Implementation\Can.c	 11053    Reason: Casting from signed to unsigned types and vice versa is needed as different types are intentionally used.
; ..\component\Can\Implementation\Can.c	 11054    Risk: Value is changed during cast.
; ..\component\Can\Implementation\Can.c	 11055    Prevention: Code inspection and test of different variants in the component test.
; ..\component\Can\Implementation\Can.c	 11056  
; ..\component\Can\Implementation\Can.c	 11057  MD_Can_IntegerCast:
; ..\component\Can\Implementation\Can.c	 11058  PRQA message 4391, 4398, 4399, 4491
; ..\component\Can\Implementation\Can.c	 11059    Reason: Explicit cast to a different integer type.
; ..\component\Can\Implementation\Can.c	 11060    Risk: Value is changed during cast.
; ..\component\Can\Implementation\Can.c	 11061    Prevention: Code inspection and test of different variants in the component test.
; ..\component\Can\Implementation\Can.c	 11062  
; ..\component\Can\Implementation\Can.c	 11063  MD_Can_CompilerAbstraction:
; ..\component\Can\Implementation\Can.c	 11064  PRQA message 0342
; ..\component\Can\Implementation\Can.c	 11065    Reason: Glue operator used for compiler abstraction.
; ..\component\Can\Implementation\Can.c	 11066    Risk: Only K&R compiler support glue operator.
; ..\component\Can\Implementation\Can.c	 11067    Prevention: Compile test show whether compiler accept glue operator.
; ..\component\Can\Implementation\Can.c	 11068  
; ..\component\Can\Implementation\Can.c	 11069  MD_Can_NoElseAfterIf:
; ..\component\Can\Implementation\Can.c	 11070  PRQA message 2004
; ..\component\Can\Implementation\Can.c	 11071    Reason: No default handling needed for if-else-if here.
; ..\component\Can\Implementation\Can.c	 11072    Risk: Missing default handling.
; ..\component\Can\Implementation\Can.c	 11073    Prevention: Code inspection and test of different variants in the component test.
; ..\component\Can\Implementation\Can.c	 11074  
; ..\component\Can\Implementation\Can.c	 11075  MD_Can_IncompleteForLoop:
; ..\component\Can\Implementation\Can.c	 11076  PRQA message 3418
; ..\component\Can\Implementation\Can.c	 11077    Reason: Comma operator in for-loop header is used to get a compact code.
; ..\component\Can\Implementation\Can.c	 11078    Risk: Uninitialized variable.
; ..\component\Can\Implementation\Can.c	 11079    Prevention: Code inspection and test of different variants in the component test.
; ..\component\Can\Implementation\Can.c	 11080  
; ..\component\Can\Implementation\Can.c	 11081  
; ..\component\Can\Implementation\Can.c	 11082  MD_Can_HL_UndefTypes:
; ..\component\Can\Implementation\Can.c	 11083  ID 0841
; ..\component\Can\Implementation\Can.c	 11084    Reason: CBD types defined for CAN driver usage but should be not seen in other modules to avoid MSR-CBD mixture problems.
; ..\component\Can\Implementation\Can.c	 11085    Risk: None
; ..\component\Can\Implementation\Can.c	 11086    Prevention: None
; ..\component\Can\Implementation\Can.c	 11087  
; ..\component\Can\Implementation\Can.c	 11088  
; ..\component\Can\Implementation\Can.c	 11089  MD_Can_0404_LL:
; ..\component\Can\Implementation\Can.c	 11090  Misra Rule 13.2
; ..\component\Can\Implementation\Can.c	 11091    Reason:  Byte swap macro used.
; ..\component\Can\Implementation\Can.c	 11092    Risk: None
; ..\component\Can\Implementation\Can.c	 11093    Prevention: Code inspection assuring that there is no other access to the data during several accesses than by the swap macro.
; ..\component\Can\Implementation\Can.c	 11094  
; ..\component\Can\Implementation\Can.c	 11095  MD_Can_1891_LL:
; ..\component\Can\Implementation\Can.c	 11096  Misra Rule 10.8
; ..\component\Can\Implementation\Can.c	 11097    Reason: Due to configuration specific types.
; ..\component\Can\Implementation\Can.c	 11098    Risk: None
; ..\component\Can\Implementation\Can.c	 11099    Prevention: Code inspection.
; ..\component\Can\Implementation\Can.c	 11100  
; ..\component\Can\Implementation\Can.c	 11101  MD_Can_3305_LL:
; ..\component\Can\Implementation\Can.c	 11102  Misra Rule 0.0
; ..\component\Can\Implementation\Can.c	 11103    Reason: Generic access macro for normal and extended CAN-IDs
; ..\component\Can\Implementation\Can.c	 11104    Risk: Memory access exception error.
; ..\component\Can\Implementation\Can.c	 11105    Prevention: Code inspection. Alignment is checked for each specific platform.
; ..\component\Can\Implementation\Can.c	 11106  
; ..\component\Can\Implementation\Can.c	 11107  MD_Can_2842_DynamicRevision_LL:
; ..\component\Can\Implementation\Can.c	 11108  PRQA message 2842
; ..\component\Can\Implementation\Can.c	 11109    Reason: get the value from extern variable defined in the generated data
; ..\component\Can\Implementation\Can.c	 11110    Risk: None
; ..\component\Can\Implementation\Can.c	 11111    Prevention: None
; ..\component\Can\Implementation\Can.c	 11112  
; ..\component\Can\Implementation\Can.c	 11113  MD_Can_1006_inlineASM:
; ..\component\Can\Implementation\Can.c	 11114  Misra Rule 1.1
; ..\component\Can\Implementation\Can.c	 11115    Reason: Improve performance by using (platform specific) inline assembler.
; ..\component\Can\Implementation\Can.c	 11116    Risk: None
; ..\component\Can\Implementation\Can.c	 11117    Prevention: None
; ..\component\Can\Implementation\Can.c	 11118  
; ..\component\Can\Implementation\Can.c	 11119  MD_Can_0777_LL:
; ..\component\Can\Implementation\Can.c	 11120  Misra Rule 5.1
; ..\component\Can\Implementation\Can.c	 11121    Reason: Identifiers rely on the significance of more than 31 characters.
; ..\component\Can\Implementation\Can.c	 11122    Risk: compile or linker error
; ..\component\Can\Implementation\Can.c	 11123    Prevention: None
; ..\component\Can\Implementation\Can.c	 11124  
; ..\component\Can\Implementation\Can.c	 11125  MD_Can_0306_HWaccess_LL:
; ..\component\Can\Implementation\Can.c	 11126  Misra Rule 11.3
; ..\component\Can\Implementation\Can.c	 11127    Reason: Hardware access need pointer to CAN Message RAM.
; ..\component\Can\Implementation\Can.c	 11128    Risk: Access of unknown memory.
; ..\component\Can\Implementation\Can.c	 11129    Prevention: Runtime tests.
; ..\component\Can\Implementation\Can.c	 11130  
; ..\component\Can\Implementation\Can.c	 11131  MD_Can_4558_RHsideEffect:
; ..\component\Can\Implementation\Can.c	 11132  Misra Rule 10.1
; ..\component\Can\Implementation\Can.c	 11133    Reason: Right hand side evaluation does not need to take place in the case where the left hand side evaluates to false.
; ..\component\Can\Implementation\Can.c	 11134    Risk: None
; ..\component\Can\Implementation\Can.c	 11135    Prevention: None
; ..\component\Can\Implementation\Can.c	 11136  
; ..\component\Can\Implementation\Can.c	 11137  MD_Can_3325_LL:
; ..\component\Can\Implementation\Can.c	 11138  Misra Rule 14.1
; ..\component\Can\Implementation\Can.c	 11139    Reason: Configuration or platform specific dependent constant control expression and thus unreachable code.
; ..\component\Can\Implementation\Can.c	 11140    Risk: Incorrect behavior depend on settings.
; ..\component\Can\Implementation\Can.c	 11141    Prevention: Code inspection and test of the different variants in the component test.
; ..\component\Can\Implementation\Can.c	 11142  
; ..\component\Can\Implementation\Can.c	 11143  MD_Can_0635:
; ..\component\Can\Implementation\Can.c	 11144  Misra Rule 6.4
; ..\component\Can\Implementation\Can.c	 11145    Reason: Using unsigned int as approved by MISRA
; ..\component\Can\Implementation\Can.c	 11146    Risk: None
; ..\component\Can\Implementation\Can.c	 11147    Prevention: Code inspection and test of the different variants in the component test.
; ..\component\Can\Implementation\Can.c	 11148  
; ..\component\Can\Implementation\Can.c	 11149  MD_Can_3431_LL:
; ..\component\Can\Implementation\Can.c	 11150  Misra Rule 19.4
; ..\component\Can\Implementation\Can.c	 11151    Reason: This control statement definition is explicitly the intention here.
; ..\component\Can\Implementation\Can.c	 11152    Risk: None
; ..\component\Can\Implementation\Can.c	 11153    Prevention: None
; ..\component\Can\Implementation\Can.c	 11154  
; ..\component\Can\Implementation\Can.c	 11155  MD_Can_3614_LL:
; ..\component\Can\Implementation\Can.c	 11156  Preprocessor
; ..\component\Can\Implementation\Can.c	 11157    Reason: Defined within a block due to code repetition mechanism.
; ..\component\Can\Implementation\Can.c	 11158    Risk: None
; ..\component\Can\Implementation\Can.c	 11159    Prevention: Code inspection, compile tests and runtime tests.
; ..\component\Can\Implementation\Can.c	 11160  
; ..\component\Can\Implementation\Can.c	 11161  MD_Can_3684:
; ..\component\Can\Implementation\Can.c	 11162  Misra Rule 8.12
; ..\component\Can\Implementation\Can.c	 11163    Reason: Arrays declared without size, because size depends on configuration and is unknown here, especially for linktime tables.
; ..\component\Can\Implementation\Can.c	 11164    Risk: Data access outside table.
; ..\component\Can\Implementation\Can.c	 11165    Prevention: Code inspection and test of the different variants in the component test.
; ..\component\Can\Implementation\Can.c	 11166  
; ..\component\Can\Implementation\Can.c	 11167  MD_Can_2982_LL:
; ..\component\Can\Implementation\Can.c	 11168  Major
; ..\component\Can\Implementation\Can.c	 11169    Reason: Preset with default value or read to reset the hardware.
; ..\component\Can\Implementation\Can.c	 11170    Risk:   None
; ..\component\Can\Implementation\Can.c	 11171    Prevention: None
; ..\component\Can\Implementation\Can.c	 11172  
; ..\component\Can\Implementation\Can.c	 11173  MD_Can_3203_LL:
; ..\component\Can\Implementation\Can.c	 11174  Redundancy
; ..\component\Can\Implementation\Can.c	 11175    Reason: Used for hardware access due to reset at read.
; ..\component\Can\Implementation\Can.c	 11176    Risk:   None
; ..\component\Can\Implementation\Can.c	 11177    Prevention: None
; ..\component\Can\Implementation\Can.c	 11178  
; ..\component\Can\Implementation\Can.c	 11179  MD_Can_0488_LL:
; ..\component\Can\Implementation\Can.c	 11180  Misra Rule 17.4
; ..\component\Can\Implementation\Can.c	 11181    Reason: performing pointer arithmetic
; ..\component\Can\Implementation\Can.c	 11182    Risk: Segmentation faults or storage violations
; ..\component\Can\Implementation\Can.c	 11183    Prevention: Code review and runtime tests
; ..\component\Can\Implementation\Can.c	 11184    
; ..\component\Can\Implementation\Can.c	 11185  MD_Can_0841:
; ..\component\Can\Implementation\Can.c	 11186  Misra Rule 19.6
; ..\component\Can\Implementation\Can.c	 11187    Reason: Rarely used and always for test purpose.
; ..\component\Can\Implementation\Can.c	 11188    Risk: None.
; ..\component\Can\Implementation\Can.c	 11189    Prevention: Code inspection and multiple configuration aspects used in component test.
; ..\component\Can\Implementation\Can.c	 11190  
; ..\component\Can\Implementation\Can.c	 11191  */
; ..\component\Can\Implementation\Can.c	 11192  
; ..\component\Can\Implementation\Can.c	 11193  /****************************************************************************/
; ..\component\Can\Implementation\Can.c	 11194  /*  Silent deviations                                                       */
; ..\component\Can\Implementation\Can.c	 11195  /****************************************************************************/
; ..\component\Can\Implementation\Can.c	 11196  /* SBSW_JUSTIFICATION_BEGIN
; ..\component\Can\Implementation\Can.c	 11197  
; ..\component\Can\Implementation\Can.c	 11198  \ID SBSW_CAN_HL01
; ..\component\Can\Implementation\Can.c	 11199   \DESCRIPTION Write access to CanModeTransitionRequest with controller as index. Controller index is checked against sizeof CanModeTransitionRequest in Can_SetControllerMode(), Can_RamCheckExecute(), Can_MainFunction_Mode(), Can_Init() and CanHL_ReInit().
; ..\component\Can\Implementation\Can.c	 11200   \COUNTERMEASURE \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11201  
; ..\component\Can\Implementation\Can.c	 11202  \ID SBSW_CAN_HL02
; ..\component\Can\Implementation\Can.c	 11203   \DESCRIPTION Write access to CanLogStatus with controller as index. Controller index is checked against sizeof CanLogStatus in Can_SetControllerMode(), CanHL_ErrorHandling(), Can_RamCheckEnableController(), Can_MainFunction_Mode(), Can_Init() and CanHL_ReInit().
; ..\component\Can\Implementation\Can.c	 11204   \COUNTERMEASURE \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11205  
; ..\component\Can\Implementation\Can.c	 11206  \ID SBSW_CAN_HL04
; ..\component\Can\Implementation\Can.c	 11207   \DESCRIPTION Write access to CanActiveSendState with activeSendObject as index. activeSendObject is checked against size of ActiveSendObject in Can_CleanUpSendState(), CanHL_WritePrepare(), CanHL_InitTxFullCAN(), CanHL_InitTxBasicCAN(), CanHL_TxTaskCancelationHandling(), CanHL_TxConfirmation() and Can_CancelTx().
; ..\component\Can\Implementation\Can.c	 11208   \COUNTERMEASURE \R [CM_CAN_HL03]
; ..\component\Can\Implementation\Can.c	 11209  
; ..\component\Can\Implementation\Can.c	 11210  \ID SBSW_CAN_HL05
; ..\component\Can\Implementation\Can.c	 11211   \DESCRIPTION Write access to CanActiveSendPdu with activeSendObject as index. activeSendObject is checked against size of ActiveSendObject.
; ..\component\Can\Implementation\Can.c	 11212   \COUNTERMEASURE \R [CM_CAN_HL03]
; ..\component\Can\Implementation\Can.c	 11213  
; ..\component\Can\Implementation\Can.c	 11214  \ID SBSW_CAN_HL06
; ..\component\Can\Implementation\Can.c	 11215   \DESCRIPTION Call Can_GenericPrecopy() and CanIf_RxIndication() with parameter RX Queue data pointer. The data pointer is only used for read access and it is always a valid pointer (module local defined).
; ..\component\Can\Implementation\Can.c	 11216   \COUNTERMEASURE \R [CM_CAN_HL25]
; ..\component\Can\Implementation\Can.c	 11217  
; ..\component\Can\Implementation\Can.c	 11218  \ID SBSW_CAN_HL07
; ..\component\Can\Implementation\Can.c	 11219   \DESCRIPTION Call Can_GenericPrecopy() and CanIf_RxIndication() with parameter Rx Struct data pointer. The data pointer is only used for read access. Parameter is of type P2CONST in API.
; ..\component\Can\Implementation\Can.c	 11220   \COUNTERMEASURE \N [CM_CAN_HL31]
; ..\component\Can\Implementation\Can.c	 11221  
; ..\component\Can\Implementation\Can.c	 11222  \ID SBSW_CAN_HL08
; ..\component\Can\Implementation\Can.c	 11223   \DESCRIPTION Write access to CanIsBusOff with controller as index. Controller index is checked against sizeof CanIsBusOff in Can_SetControllerMode(), CanHL_ErrorHandling() and Can_Init().
; ..\component\Can\Implementation\Can.c	 11224   \COUNTERMEASURE \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11225  
; ..\component\Can\Implementation\Can.c	 11226  \ID SBSW_CAN_HL09
; ..\component\Can\Implementation\Can.c	 11227   \DESCRIPTION Write access to CanIsWakeup with controller as index. Controller index is checked against sizeof CanIsWakeup in CanHL_WakeUpHandling(), Can_CheckWakeup(), reinitialization and Can_Init().
; ..\component\Can\Implementation\Can.c	 11228   \COUNTERMEASURE \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11229  
; ..\component\Can\Implementation\Can.c	 11230  \ID SBSW_CAN_HL10
; ..\component\Can\Implementation\Can.c	 11231   \DESCRIPTION Write access to VersionInfo pointer within function Can_GetVersionInfo()
; ..\component\Can\Implementation\Can.c	 11232   \COUNTERMEASURE \N caller of Can_GetVersionInfo() has to ensure that VersionInfo pointer is valid. (global description available)
; ..\component\Can\Implementation\Can.c	 11233  
; ..\component\Can\Implementation\Can.c	 11234  \ID SBSW_CAN_HL11
; ..\component\Can\Implementation\Can.c	 11235   \DESCRIPTION Write access to CanLastInitObject with controller as index. Controller index is checked against sizeof CanLastInitObject in CanHL_ReInit(), Can_ChangeBaudrate(), Can_SetBaudrate() and Can_Init().
; ..\component\Can\Implementation\Can.c	 11236   \COUNTERMEASURE \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11237  
; ..\component\Can\Implementation\Can.c	 11238  \ID SBSW_CAN_HL12
; ..\component\Can\Implementation\Can.c	 11239   \DESCRIPTION Write access to CanInterruptCounter with controller as index. Controller index is checked against sizeof CanInterruptCounter in Can_Init(), Can_EnableControllerInterrupts() and Can_DisableControllerInterrupts()
; ..\component\Can\Implementation\Can.c	 11240   \COUNTERMEASURE \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11241  
; ..\component\Can\Implementation\Can.c	 11242  \ID SBSW_CAN_HL16
; ..\component\Can\Implementation\Can.c	 11243   \DESCRIPTION Call CanLL_CanInterruptDisable() with parameter CanInterruptOldStatus as pointer (compiler secures used type in function declaration fitting to given pointer parameter type).
; ..\component\Can\Implementation\Can.c	 11244   \COUNTERMEASURE \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11245  
; ..\component\Can\Implementation\Can.c	 11246  \ID SBSW_CAN_HL18
; ..\component\Can\Implementation\Can.c	 11247   \DESCRIPTION Write access to CanRxQueueBuffer with queue write index. Write index is checked against size of CanRxQueueBuffer.
; ..\component\Can\Implementation\Can.c	 11248   \COUNTERMEASURE \R [CM_CAN_HL24]
; ..\component\Can\Implementation\Can.c	 11249  
; ..\component\Can\Implementation\Can.c	 11250  \ID SBSW_CAN_HL19
; ..\component\Can\Implementation\Can.c	 11251   \DESCRIPTION Write access to CanRxQueueBuffer.data with queue write index and data index. Write index is checked against size of CanRxQueueBuffer. (see also generator CM_CAN_HL04 qualified use case CSL02)
; ..\component\Can\Implementation\Can.c	 11252   \COUNTERMEASURE \R [CM_CAN_HL24]
; ..\component\Can\Implementation\Can.c	 11253                   \R [CM_CAN_HL17]
; ..\component\Can\Implementation\Can.c	 11254  
; ..\component\Can\Implementation\Can.c	 11255  \ID SBSW_CAN_HL20
; ..\component\Can\Implementation\Can.c	 11256   \DESCRIPTION Write access to CanMirrorModeState with controller as index. Controller is checked against size of CanMirrorModeState.
; ..\component\Can\Implementation\Can.c	 11257   \COUNTERMEASURE \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11258  
; ..\component\Can\Implementation\Can.c	 11259  \ID SBSW_CAN_HL22
; ..\component\Can\Implementation\Can.c	 11260   \DESCRIPTION Write access to ActiveSendData with activeSendData + length as index. Index is checked against size of table.
; ..\component\Can\Implementation\Can.c	 11261   \COUNTERMEASURE \R [CM_CAN_HL20]
; ..\component\Can\Implementation\Can.c	 11262  
; ..\component\Can\Implementation\Can.c	 11263  \ID SBSW_CAN_HL23
; ..\component\Can\Implementation\Can.c	 11264   \DESCRIPTION Write access to ActiveSendObject stuct with activeSendObject as index. activeSendObject is checked against size of CanActiveSendObject.
; ..\component\Can\Implementation\Can.c	 11265   \COUNTERMEASURE \R [CM_CAN_HL03]
; ..\component\Can\Implementation\Can.c	 11266  
; ..\component\Can\Implementation\Can.c	 11267  \ID SBSW_CAN_HL24
; ..\component\Can\Implementation\Can.c	 11268   \DESCRIPTION Call Appl_GenericPreTransmit() with parameter PduInfoPtr_var pointer (module local defined).
; ..\component\Can\Implementation\Can.c	 11269   \COUNTERMEASURE \N The pointer is static and always valid.
; ..\component\Can\Implementation\Can.c	 11270  
; ..\component\Can\Implementation\Can.c	 11271  \ID SBSW_CAN_HL25
; ..\component\Can\Implementation\Can.c	 11272   \DESCRIPTION Call CanIf_CancelTxConfirmation() with parameter CanActiveSendObject.PduInfo[activeSendObject] as pointer with activeSendObject as index. activeSendObject is checked against size of CanActiveSendObject.
; ..\component\Can\Implementation\Can.c	 11273   \COUNTERMEASURE \R [CM_CAN_HL03]
; ..\component\Can\Implementation\Can.c	 11274  
; ..\component\Can\Implementation\Can.c	 11275  \ID SBSW_CAN_HL26
; ..\component\Can\Implementation\Can.c	 11276   \DESCRIPTION Call CanHL_RxBasicMsgReceivedBegin(), CanHL_RxMsgReceivedNotification() and CanHL_RxBasicMsgReceivedEnd() with parameter rxBasicPara pointer (module local defined).
; ..\component\Can\Implementation\Can.c	 11277   \COUNTERMEASURE \N The pointer is static and always valid.
; ..\component\Can\Implementation\Can.c	 11278  
; ..\component\Can\Implementation\Can.c	 11279  \ID SBSW_CAN_HL27
; ..\component\Can\Implementation\Can.c	 11280   \DESCRIPTION Call CanHL_RxFullMsgReceivedBegin(), CanHL_RxFullReceivedNotification() and CanHL_RxFullMsgReceivedEnd() with parameter rxFullPara pointer (module local defined).
; ..\component\Can\Implementation\Can.c	 11281   \COUNTERMEASURE \N The pointer is static and always valid.
; ..\component\Can\Implementation\Can.c	 11282  
; ..\component\Can\Implementation\Can.c	 11283  \ID SBSW_CAN_HL29
; ..\component\Can\Implementation\Can.c	 11284   \DESCRIPTION Write access to rxBasicPara (module local defined).
; ..\component\Can\Implementation\Can.c	 11285   \COUNTERMEASURE \N The structure is static and always valid.
; ..\component\Can\Implementation\Can.c	 11286  
; ..\component\Can\Implementation\Can.c	 11287  \ID SBSW_CAN_HL30
; ..\component\Can\Implementation\Can.c	 11288   \DESCRIPTION Write access to rxFullPara (module local defined).
; ..\component\Can\Implementation\Can.c	 11289   \COUNTERMEASURE \N The structure is static and always valid.
; ..\component\Can\Implementation\Can.c	 11290  
; ..\component\Can\Implementation\Can.c	 11291  \ID SBSW_CAN_HL31
; ..\component\Can\Implementation\Can.c	 11292   \DESCRIPTION Call Initialization subroutines with initPara pointer as parameter (local defined).
; ..\component\Can\Implementation\Can.c	 11293   \COUNTERMEASURE \N The structure is static and always valid (pointer to a local stack variable)
; ..\component\Can\Implementation\Can.c	 11294  
; ..\component\Can\Implementation\Can.c	 11295  \ID SBSW_CAN_HL32
; ..\component\Can\Implementation\Can.c	 11296   \DESCRIPTION Call Appl_GenericConfirmation and CanHL_SetCanPduInfo with canPdu pointer as parameter (local defined).
; ..\component\Can\Implementation\Can.c	 11297   \COUNTERMEASURE \N The structure is static and always valid.
; ..\component\Can\Implementation\Can.c	 11298  
; ..\component\Can\Implementation\Can.c	 11299  \ID SBSW_CAN_HL33
; ..\component\Can\Implementation\Can.c	 11300   \DESCRIPTION Write access to CanBusOffCounter with controller as index. Controller index is checked against sizeof CanBusOffCounter in Can_SetControllerMode(), CanHL_ErrorHandling() and Can_Init().
; ..\component\Can\Implementation\Can.c	 11301   \COUNTERMEASURE \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11302  
; ..\component\Can\Implementation\Can.c	 11303  \ID SBSW_CAN_HL34
; ..\component\Can\Implementation\Can.c	 11304   \DESCRIPTION Write access to CanMailboxState with mailbox handle as index. Index secured by ComStackLib [CM_CAN_HL29] and [CM_CAN_HL30] and checked against size of CanMailboxState.
; ..\component\Can\Implementation\Can.c	 11305   \COUNTERMEASURE \R [CM_CAN_HL28]
; ..\component\Can\Implementation\Can.c	 11306  
; ..\component\Can\Implementation\Can.c	 11307  \ID SBSW_CAN_HL35
; ..\component\Can\Implementation\Can.c	 11308   \DESCRIPTION Call with pointer to CAN cell register for write and read access.
; ..\component\Can\Implementation\Can.c	 11309   \COUNTERMEASURE \N Caller ensures validity of pointer parameter.
; ..\component\Can\Implementation\Can.c	 11310  
; ..\component\Can\Implementation\Can.c	 11311  \ID SBSW_CAN_HL36
; ..\component\Can\Implementation\Can.c	 11312   \DESCRIPTION Write access to initPara structure as pointer (local defined).
; ..\component\Can\Implementation\Can.c	 11313   \COUNTERMEASURE \N The structure is static and always valid.
; ..\component\Can\Implementation\Can.c	 11314  
; ..\component\Can\Implementation\Can.c	 11315  \ID SBSW_CAN_HL37
; ..\component\Can\Implementation\Can.c	 11316   \DESCRIPTION Call GetElapsedValue with timer value pointers as parameter (module local defined).
; ..\component\Can\Implementation\Can.c	 11317   \COUNTERMEASURE \N The timer values are static and always valid.
; ..\component\Can\Implementation\Can.c	 11318  
; ..\component\Can\Implementation\Can.c	 11319  \ID SBSW_CAN_HL38
; ..\component\Can\Implementation\Can.c	 11320   \DESCRIPTION Call GetCounterValue with timer value (LoopTimeout) pointers as parameter. Controller index is checked against size of ControllerData, kCanLoopXXX as index in LoopTimeout table is always smaller than the dimension of the table given as static user type in ComStackLib and checked against this value.
; ..\component\Can\Implementation\Can.c	 11321   \COUNTERMEASURE \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11322                   \R [CM_CAN_HL22]
; ..\component\Can\Implementation\Can.c	 11323  
; ..\component\Can\Implementation\Can.c	 11324  \ID SBSW_CAN_HL39
; ..\component\Can\Implementation\Can.c	 11325   \DESCRIPTION Undefine preprocessor switch to stimulate user defined feature (only test purpose).
; ..\component\Can\Implementation\Can.c	 11326   \COUNTERMEASURE \N Redefinement activates a none documented feature.
; ..\component\Can\Implementation\Can.c	 11327  
; ..\component\Can\Implementation\Can.c	 11328  \ID SBSW_CAN_HL40
; ..\component\Can\Implementation\Can.c	 11329   \DESCRIPTION Write access to CanLogStatus with controller as index. Controller is secured by qualified use-case CSL03 of ComStackLib.
; ..\component\Can\Implementation\Can.c	 11330   \COUNTERMEASURE \N [CM_CAN_HL02]
; ..\component\Can\Implementation\Can.c	 11331  
; ..\component\Can\Implementation\Can.c	 11332  \ID SBSW_CAN_HL41
; ..\component\Can\Implementation\Can.c	 11333   \DESCRIPTION Write access to CanActiveSendState with activeSendObject as index. activeSendObject is temporary stored in a list of [1,3] elements where each element is initialized to a valid value and always written with size check before.
; ..\component\Can\Implementation\Can.c	 11334   \COUNTERMEASURE \R [CM_CAN_HL03]
; ..\component\Can\Implementation\Can.c	 11335  
; ..\component\Can\Implementation\Can.c	 11336  \ID SBSW_CAN_HL42
; ..\component\Can\Implementation\Can.c	 11337   \DESCRIPTION Write access to txPara (module local defined).
; ..\component\Can\Implementation\Can.c	 11338   \COUNTERMEASURE \N The structure is static and always valid.
; ..\component\Can\Implementation\Can.c	 11339  
; ..\component\Can\Implementation\Can.c	 11340  \ID SBSW_CAN_HL43
; ..\component\Can\Implementation\Can.c	 11341   \DESCRIPTION Write access to taskPara (module local defined).
; ..\component\Can\Implementation\Can.c	 11342   \COUNTERMEASURE \N The structure is static and always valid.
; ..\component\Can\Implementation\Can.c	 11343  
; ..\component\Can\Implementation\Can.c	 11344  \ID SBSW_CAN_HL44
; ..\component\Can\Implementation\Can.c	 11345   \DESCRIPTION Call task subroutines with taskPara pointer as parameter (local defined).
; ..\component\Can\Implementation\Can.c	 11346   \COUNTERMEASURE \N The structure is static and always valid (pointer to a local stack variable)
; ..\component\Can\Implementation\Can.c	 11347  
; ..\component\Can\Implementation\Can.c	 11348  \ID SBSW_CAN_HL45
; ..\component\Can\Implementation\Can.c	 11349   \DESCRIPTION Call confirmation subroutines with txConfPara pointer as parameter (local defined).
; ..\component\Can\Implementation\Can.c	 11350   \COUNTERMEASURE \N The structure is static and always valid (pointer to a local stack variable)
; ..\component\Can\Implementation\Can.c	 11351  
; ..\component\Can\Implementation\Can.c	 11352  \ID SBSW_CAN_HL46
; ..\component\Can\Implementation\Can.c	 11353   \DESCRIPTION Write access to txConfPara (module local defined).
; ..\component\Can\Implementation\Can.c	 11354   \COUNTERMEASURE \N The structure is static and always valid.
; ..\component\Can\Implementation\Can.c	 11355  
; ..\component\Can\Implementation\Can.c	 11356  \ID SBSW_CAN_HL47
; ..\component\Can\Implementation\Can.c	 11357   \DESCRIPTION Call cancellation subroutines with txCancellationPara pointer as parameter (local defined).
; ..\component\Can\Implementation\Can.c	 11358   \COUNTERMEASURE \N The structure is static and always valid (pointer to a local stack variable)
; ..\component\Can\Implementation\Can.c	 11359  
; ..\component\Can\Implementation\Can.c	 11360  \ID SBSW_CAN_HL48
; ..\component\Can\Implementation\Can.c	 11361   \DESCRIPTION Write access to txCancellationPara (module local defined).
; ..\component\Can\Implementation\Can.c	 11362   \COUNTERMEASURE \N The structure is static and always valid.
; ..\component\Can\Implementation\Can.c	 11363  
; ..\component\Can\Implementation\Can.c	 11364  \ID SBSW_CAN_HL49
; ..\component\Can\Implementation\Can.c	 11365   \DESCRIPTION Call transmit subroutines with txPara pointer as parameter (local defined).
; ..\component\Can\Implementation\Can.c	 11366   \COUNTERMEASURE \N The structure is static and always valid (pointer to a local stack variable)
; ..\component\Can\Implementation\Can.c	 11367  
; ..\component\Can\Implementation\Can.c	 11368  \ID SBSW_CAN_HL50
; ..\component\Can\Implementation\Can.c	 11369   \DESCRIPTION Write access to TxHwFifo member FillCount, WriteIndex and ReadIndex with Mailbox member TxHwFifo as Index. Index is checked against size of TxHwFifo array.
; ..\component\Can\Implementation\Can.c	 11370   \COUNTERMEASURE \R [CM_CAN_HL32]
; ..\component\Can\Implementation\Can.c	 11371  
; ..\component\Can\Implementation\Can.c	 11372  \ID SBSW_CAN_HL51
; ..\component\Can\Implementation\Can.c	 11373   \DESCRIPTION Write access to ControllerModePtr pointer within function Can_GetControllerMode()
; ..\component\Can\Implementation\Can.c	 11374   \COUNTERMEASURE \N caller of Can_GetControllerMode() has to ensure that ControllerModePtr pointer is valid. (global description available)
; ..\component\Can\Implementation\Can.c	 11375  
; ..\component\Can\Implementation\Can.c	 11376  \ID SBSW_CAN_HL52
; ..\component\Can\Implementation\Can.c	 11377   \DESCRIPTION Write access to ErrorStatePtr pointer within function Can_GetControllerErrorState()
; ..\component\Can\Implementation\Can.c	 11378   \COUNTERMEASURE \N caller of Can_GetControllerErrorState() has to ensure that ErrorStatePtr pointer is valid. (global description available)
; ..\component\Can\Implementation\Can.c	 11379  
; ..\component\Can\Implementation\Can.c	 11380  \ID SBSW_CAN_HL53
; ..\component\Can\Implementation\Can.c	 11381   \DESCRIPTION Write access to TxErrorCounterPtr pointer within function Can_GetControllerTxErrorCounter()
; ..\component\Can\Implementation\Can.c	 11382   \COUNTERMEASURE \N caller of Can_GetControllerTxErrorCounter() has to ensure that TxErrorCounterPtr pointer is valid. (global description available)
; ..\component\Can\Implementation\Can.c	 11383  
; ..\component\Can\Implementation\Can.c	 11384  \ID SBSW_CAN_HL54
; ..\component\Can\Implementation\Can.c	 11385   \DESCRIPTION Write access to RxErrorCounterPtr pointer within function Can_GetControllerRxErrorCounter()
; ..\component\Can\Implementation\Can.c	 11386   \COUNTERMEASURE \N caller of Can_GetControllerRxErrorCounter() has to ensure that RxErrorCounterPtr pointer is valid. (global description available)
; ..\component\Can\Implementation\Can.c	 11387  
; ..\component\Can\Implementation\Can.c	 11388  \ID SBSW_CAN_HL55
; ..\component\Can\Implementation\Can.c	 11389   \DESCRIPTION A ComStackLib generated variable is accessed.
; ..\component\Can\Implementation\Can.c	 11390   \COUNTERMEASURE \N The variable is written using a generated macro of the CSL. It immediately dereferences the variables address without pointer arithmetic.
; ..\component\Can\Implementation\Can.c	 11391  
; ..\component\Can\Implementation\Can.c	 11392  
; ..\component\Can\Implementation\Can.c	 11393  \ID SBSW_CAN_LL_100
; ..\component\Can\Implementation\Can.c	 11394   \DESCRIPTION       Accessing the MCAN Registers via the channel specific Base Address and a valid static (typedef) offset which is valid.
; ..\component\Can\Implementation\Can.c	 11395   \COUNTERMEASURE \S The Base Address is assured via user review (see Safety Manual SMI-64562)
; ..\component\Can\Implementation\Can.c	 11396                   \R [CM_CAN_LL_100]
; ..\component\Can\Implementation\Can.c	 11397                   \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11398  
; ..\component\Can\Implementation\Can.c	 11399  \ID SBSW_CAN_LL_101
; ..\component\Can\Implementation\Can.c	 11400   \DESCRIPTION       The channel parameter and timer value is used as index for array access.
; ..\component\Can\Implementation\Can.c	 11401   \COUNTERMEASURE \R [CM_CAN_HL22]
; ..\component\Can\Implementation\Can.c	 11402                   \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11403  
; ..\component\Can\Implementation\Can.c	 11404  \ID SBSW_CAN_LL_102
; ..\component\Can\Implementation\Can.c	 11405   \DESCRIPTION       The channel parameter (assured via the caller software) and timer index (assured via error directive) used for array access.
; ..\component\Can\Implementation\Can.c	 11406   \COUNTERMEASURE \R [CM_CAN_LL_102]
; ..\component\Can\Implementation\Can.c	 11407  
; ..\component\Can\Implementation\Can.c	 11408  \ID SBSW_CAN_LL_103
; ..\component\Can\Implementation\Can.c	 11409   \DESCRIPTION       Pointer access to the Message RAM (assured via a runtime check).
; ..\component\Can\Implementation\Can.c	 11410   \COUNTERMEASURE \R [CM_CAN_LL_103]
; ..\component\Can\Implementation\Can.c	 11411                   \R [CM_CAN_LL_112]
; ..\component\Can\Implementation\Can.c	 11412  
; ..\component\Can\Implementation\Can.c	 11413  \ID SBSW_CAN_LL_104
; ..\component\Can\Implementation\Can.c	 11414   \DESCRIPTION       The dimension values used for the variable access are assured with the loop end condition and the modulo operation (bit operator ampersand).
; ..\component\Can\Implementation\Can.c	 11415   \COUNTERMEASURE \R [CM_CAN_LL_104]
; ..\component\Can\Implementation\Can.c	 11416                   \R [CM_CAN_LL_105]
; ..\component\Can\Implementation\Can.c	 11417  
; ..\component\Can\Implementation\Can.c	 11418  \ID SBSW_CAN_LL_106
; ..\component\Can\Implementation\Can.c	 11419   \DESCRIPTION       The array access is assured using a constant index.
; ..\component\Can\Implementation\Can.c	 11420   \COUNTERMEASURE \N Constant index assures correct access.
; ..\component\Can\Implementation\Can.c	 11421  
; ..\component\Can\Implementation\Can.c	 11422  \ID SBSW_CAN_LL_107
; ..\component\Can\Implementation\Can.c	 11423   \DESCRIPTION       The dimension values used for the variable access are assured with a limited index.
; ..\component\Can\Implementation\Can.c	 11424   \COUNTERMEASURE \R [CM_CAN_LL_107]
; ..\component\Can\Implementation\Can.c	 11425  
; ..\component\Can\Implementation\Can.c	 11426  \ID SBSW_CAN_LL_108
; ..\component\Can\Implementation\Can.c	 11427   \DESCRIPTION       Initialization within the address range of the Message RAM (assured via  user review, see Safety Manual), the channel is assured via Core/ComStackLib.
; ..\component\Can\Implementation\Can.c	 11428   \COUNTERMEASURE \S Message RAM begin and end address must be verified by the user (see Safety Manual SMI-64561), the number of CAN channels must be verified together with the Base Address (see Safety Manual SMI-64562).
; ..\component\Can\Implementation\Can.c	 11429  
; ..\component\Can\Implementation\Can.c	 11430  \ID SBSW_CAN_LL_109
; ..\component\Can\Implementation\Can.c	 11431   \DESCRIPTION       Write access to Init/Basic/Full structures.
; ..\component\Can\Implementation\Can.c	 11432   \COUNTERMEASURE \R [CM_CAN_LL_109]
; ..\component\Can\Implementation\Can.c	 11433  
; ..\component\Can\Implementation\Can.c	 11434   \ID SBSW_CAN_LL_110
; ..\component\Can\Implementation\Can.c	 11435   \DESCRIPTION       Call Initialization subroutines with initInfo pointer as parameter.
; ..\component\Can\Implementation\Can.c	 11436   \COUNTERMEASURE \S The structure is static and has to be assured with a review and thus it is always valid (pointer to a local stack variable even already assured by the caller).
; ..\component\Can\Implementation\Can.c	 11437  
; ..\component\Can\Implementation\Can.c	 11438  \ID SBSW_CAN_LL_111
; ..\component\Can\Implementation\Can.c	 11439   \DESCRIPTION       The channel parameter is provided (assured via a runtime check).
; ..\component\Can\Implementation\Can.c	 11440   \COUNTERMEASURE \R [CM_CAN_LL_111]
; ..\component\Can\Implementation\Can.c	 11441  
; ..\component\Can\Implementation\Can.c	 11442  \ID SBSW_CAN_LL_112
; ..\component\Can\Implementation\Can.c	 11443   \DESCRIPTION       The channel parameter is used as index for array access.
; ..\component\Can\Implementation\Can.c	 11444   \COUNTERMEASURE \R [CM_CAN_HL01]
; ..\component\Can\Implementation\Can.c	 11445  
; ..\component\Can\Implementation\Can.c	 11446  \ID SBSW_CAN_LL_113
; ..\component\Can\Implementation\Can.c	 11447   \DESCRIPTION       Local variable assignment.
; ..\component\Can\Implementation\Can.c	 11448   \COUNTERMEASURE \N The local variable is always available.
; ..\component\Can\Implementation\Can.c	 11449  
; ..\component\Can\Implementation\Can.c	 11450  \ID SBSW_CAN_LL_114
; ..\component\Can\Implementation\Can.c	 11451   \DESCRIPTION       Local array variable assignment.
; ..\component\Can\Implementation\Can.c	 11452   \COUNTERMEASURE \N The array index cannot become greater than 16 and 4*16 elements are always available with CAN_FD_FULL.
; ..\component\Can\Implementation\Can.c	 11453  
; ..\component\Can\Implementation\Can.c	 11454  
; ..\component\Can\Implementation\Can.c	 11455  
; ..\component\Can\Implementation\Can.c	 11456  \ID SBSW_CAN_LL_118
; ..\component\Can\Implementation\Can.c	 11457   \DESCRIPTION       Assembler instruction is inserted.
; ..\component\Can\Implementation\Can.c	 11458   \COUNTERMEASURE \N Always valid because there is no memory access.
; ..\component\Can\Implementation\Can.c	 11459  
; ..\component\Can\Implementation\Can.c	 11460  \ID SBSW_CAN_LL_119
; ..\component\Can\Implementation\Can.c	 11461   \DESCRIPTION Write access via pointer to interrupt controller register.
; ..\component\Can\Implementation\Can.c	 11462   \COUNTERMEASURE \N In case of SafeBSW 'OS interrupt control' has to be enabled and this code is never active. This is ensured by a MSSV check and compiler error directive.
; ..\component\Can\Implementation\Can.c	 11463  
; ..\component\Can\Implementation\Can.c	 11464  \ID SBSW_CAN_LL_120
; ..\component\Can\Implementation\Can.c	 11465   \DESCRIPTION       Accessing the Global CAN registers via subsystem specific base address. The hardware structure is assured by review. The table access is executed using ComStackLib (Qualified use-case CSL01).
; ..\component\Can\Implementation\Can.c	 11466   \COUNTERMEASURE \S The Base Address is assured via user review (see Safety Manual SMI-224606).
; ..\component\Can\Implementation\Can.c	 11467  
; ..\component\Can\Implementation\Can.c	 11468  \ID SBSW_CAN_LL_121
; ..\component\Can\Implementation\Can.c	 11469   \DESCRIPTION Call a function with pointer to retVal.
; ..\component\Can\Implementation\Can.c	 11470   \COUNTERMEASURE \N The pointer has a static type and always references a local variable.
; ..\component\Can\Implementation\Can.c	 11471   
; ..\component\Can\Implementation\Can.c	 11472  \ID SBSW_CAN_LL_122
; ..\component\Can\Implementation\Can.c	 11473   \DESCRIPTION Write access via pointer to CanInterruptOldStatus (compiler secures used type in function declaration fitting to given pointer parameter type).
; ..\component\Can\Implementation\Can.c	 11474   \COUNTERMEASURE \N This local function is only called with valid pointers.
; ..\component\Can\Implementation\Can.c	 11475  
; ..\component\Can\Implementation\Can.c	 11476  \ID SBSW_CAN_LL_123
; ..\component\Can\Implementation\Can.c	 11477   \DESCRIPTION Read access via pointer to interrupt controller register.
; ..\component\Can\Implementation\Can.c	 11478   \COUNTERMEASURE \N In case of SafeBSW 'OS interrupt control' has to be enabled and this code is never active. This is ensured by a MSSV check and compiler error directive.
; ..\component\Can\Implementation\Can.c	 11479  
; ..\component\Can\Implementation\Can.c	 11480  
; ..\component\Can\Implementation\Can.c	 11481  
; ..\component\Can\Implementation\Can.c	 11482  SBSW_JUSTIFICATION_END */
; ..\component\Can\Implementation\Can.c	 11483  
; ..\component\Can\Implementation\Can.c	 11484  /* Counter measurement description
; ..\component\Can\Implementation\Can.c	 11485  
; ..\component\Can\Implementation\Can.c	 11486  \CM CM_CAN_HL01 A runtime check ensures controller index is always smaller than number of elements in arrays with controller amount as dimension (Qualified use-case CSL01 of ComStackLib size of ControllerData).
; ..\component\Can\Implementation\Can.c	 11487  \CM CM_CAN_HL02 Qualified use-case CSL03 of ComStackLib (CanMailbox.ControllerConfigIdx is always in range of controller ControllerData)
; ..\component\Can\Implementation\Can.c	 11488  \CM CM_CAN_HL03 A runtime check ensures activeSendObject index is in valid range for Can_ActiveSendObject table (Qualified use-case CSL01 of ComStackLib - Can_ActiveSendObject size is extended by CAN_MULTIPLEXED_TX_MAX within generator to allow an access to logObjHandle+CAN_MULTIPLEXED_TX_MAX).
; ..\component\Can\Implementation\Can.c	 11489  \CM CM_CAN_HL17 A runtime check ensures DLC index is always smaller than the dimension of CanRxQueueBuffer.data.
; ..\component\Can\Implementation\Can.c	 11490  \CM CM_CAN_HL18 A runtime check ensures HRH values is always in range of start stop index of the given mailbox type. (Qualified use-case CSL03 of ComStackLib - start-stop index fit to mailbox entrys)
; ..\component\Can\Implementation\Can.c	 11491  \CM CM_CAN_HL20 A runtime check ensures size of ActiveSendData (dataByte). For CAN-FD it is checked against the size of the table. For none CAN-FD size is checked against 8 as defined.
; ..\component\Can\Implementation\Can.c	 11492  \CM CM_CAN_HL22 A runtime check ensures source index for LoopTimeout array is always smaller than the dimension of LoopTimeout.
; ..\component\Can\Implementation\Can.c	 11493  \CM CM_CAN_HL24 A runtime check ensures RxQueue write index is always smaller than the dimension of RxQueue (Qualified use-case CSL01 of ComStackLib).
; ..\component\Can\Implementation\Can.c	 11494  \CM CM_CAN_HL25 A runtime check ensures RxQueue read index is always smaller than the dimension of RxQueue (Qualified use-case CSL01 of ComStackLib).
; ..\component\Can\Implementation\Can.c	 11495  \CM CM_CAN_HL28 A runtime check ensures htrh index is always smaller than the dimension of CanMailboxState (Qualified use-case CSL01 of ComStackLib).
; ..\component\Can\Implementation\Can.c	 11496  \CM CM_CAN_HL29 Qualified use-case CSL02 of ComStackLib (size of CanMailboxState == size of CanMailbox) 
; ..\component\Can\Implementation\Can.c	 11497  \CM CM_CAN_HL30 Qualified use-case CSL03 of ComStackLib (CanMailbox - CanController Start/Stop HtrhIndex).
; ..\component\Can\Implementation\Can.c	 11498  \CM CM_CAN_HL31 valid mailbox data area is assigned to rxStruct.pChipData pointer (Has to be given by LL implementation part).
; ..\component\Can\Implementation\Can.c	 11499  \CM CM_CAN_HL32 A runtime check ensures TxHwFifo index is always smaller than the dimension of TxHwFifo (Qualified use-case CSL01 of ComStackLib).
; ..\component\Can\Implementation\Can.c	 11500  
; ..\component\Can\Implementation\Can.c	 11501  
; ..\component\Can\Implementation\Can.c	 11502  \CM CM_CAN_LL_100 A runtime check ensures that the controller index is always smaller than number of elements in base address array (Qualified use-case CSL01 of ComStackLib size of ControllerData).
; ..\component\Can\Implementation\Can.c	 11503  \CM CM_CAN_LL_102 A runtime check ensures controller index is always smaller than the number of elements in arrays using controller amount as dimension (Qualified use-case CSL01 of ComStackLib size of ControllerData).
; ..\component\Can\Implementation\Can.c	 11504  \CM CM_CAN_LL_103 A runtime check ensures pointer access is always in the correct memory area.
; ..\component\Can\Implementation\Can.c	 11505  \CM CM_CAN_LL_104 Using the bit operator "&" assures the maximum length of the index to guarantee that the dimension is sufficient.
; ..\component\Can\Implementation\Can.c	 11506  \CM CM_CAN_LL_105 The loop end condition guarantees that the dimension is sufficient.
; ..\component\Can\Implementation\Can.c	 11507  \CM CM_CAN_LL_107 The limited index ('0' or '1') guarantees that the dimension is sufficient.
; ..\component\Can\Implementation\Can.c	 11508  \CM CM_CAN_LL_109 The static structure(element) address is assured via a fix typedef and thus always valid.
; ..\component\Can\Implementation\Can.c	 11509  \CM CM_CAN_LL_111 A runtime check ensures that the channel parameter is always in the correct range.
; ..\component\Can\Implementation\Can.c	 11510  \CM CM_CAN_LL_112 A runtime check ensures that the generated table has the correct size (Qualified use-case CSL01 of ComStackLib size of Can_ShmAdr).
; ..\component\Can\Implementation\Can.c	 11511  
; ..\component\Can\Implementation\Can.c	 11512  */
; ..\component\Can\Implementation\Can.c	 11513  
; ..\component\Can\Implementation\Can.c	 11514  /****************************************************************************/
; ..\component\Can\Implementation\Can.c	 11515  /*  Coverage Justification                                                  */
; ..\component\Can\Implementation\Can.c	 11516  /****************************************************************************/
; ..\component\Can\Implementation\Can.c	 11517  /* START_COVERAGE_JUSTIFICATION
; ..\component\Can\Implementation\Can.c	 11518  
; ..\component\Can\Implementation\Can.c	 11519  \ID COV_CAN_COMPATIBILITY
; ..\component\Can\Implementation\Can.c	 11520    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11521    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11522    \ACCEPT TX xf xf
; ..\component\Can\Implementation\Can.c	 11523    \ACCEPT XF tf tf
; ..\component\Can\Implementation\Can.c	 11524    \REASON The condition checks whether a switch is defined and conditionally assigns a default value. This is used to ensure compatibility to older AUTOSAR/Component versions. 
; ..\component\Can\Implementation\Can.c	 11525  
; ..\component\Can\Implementation\Can.c	 11526  \ID COV_CAN_INTERNAL
; ..\component\Can\Implementation\Can.c	 11527    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11528    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11529    \REASON This switch is always active within CAN driver context. Secure visibility of internal interface and cannot be stimulated to off while test. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11530  
; ..\component\Can\Implementation\Can.c	 11531  \ID COV_CAN_CANCEL_SW_STIMULATION
; ..\component\Can\Implementation\Can.c	 11532    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11533    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11534    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11535    \ACCEPT XX
; ..\component\Can\Implementation\Can.c	 11536    \ACCEPT TF tf xf
; ..\component\Can\Implementation\Can.c	 11537    \REASON It is not possible to stimulate a sw cancellation while the message is already start to send when hw cancellation is active. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11538  
; ..\component\Can\Implementation\Can.c	 11539  \ID COV_CAN_AMD_RUNTIME_MEASUREMENT
; ..\component\Can\Implementation\Can.c	 11540    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11541    \REASON The feature AMD Runtime Measurement is not supported for SafeBSW. A MSSV plugin enforces this configuration for SafeBSW.
; ..\component\Can\Implementation\Can.c	 11542  
; ..\component\Can\Implementation\Can.c	 11543  \ID COV_CAN_FINALMAGICNUMBER
; ..\component\Can\Implementation\Can.c	 11544    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11545    \REASON Switch is always true is OK here no side effect will occur when switch is false verified by review.
; ..\component\Can\Implementation\Can.c	 11546  
; ..\component\Can\Implementation\Can.c	 11547  \ID COV_CAN_SAFE_BSW_EXCLUSION
; ..\component\Can\Implementation\Can.c	 11548    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 11549    \REASON SafeBsw restricted feature will not be enforced to be deactivated or activated.
; ..\component\Can\Implementation\Can.c	 11550  
; ..\component\Can\Implementation\Can.c	 11551  \ID COV_CAN_BUSOFF_NOT_IN_ALL_CONFIG
; ..\component\Can\Implementation\Can.c	 11552    \ACCEPT X
; ..\component\Can\Implementation\Can.c	 11553    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11554    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11555    \ACCEPT TF tf tx
; ..\component\Can\Implementation\Can.c	 11556    \ACCEPT TX tx tx
; ..\component\Can\Implementation\Can.c	 11557    \REASON BUSOFF not stimulated in each configruation. The behavior does not depend on each configuration variant but TCASE-274 takes long runtime and will not be executed for each configuration.   
; ..\component\Can\Implementation\Can.c	 11558  
; ..\component\Can\Implementation\Can.c	 11559  \ID COV_CAN_WAKEUP_CHANNEL_NOT_IN_ALL_CONFIG
; ..\component\Can\Implementation\Can.c	 11560    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11561    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11562    \REASON Wakeup may be always activated or deactivated depend on configuration. Not all configurations contain activated or deactivated wakeup for at least one controller, but is sufficiantly tested in some configuations with both settings.
; ..\component\Can\Implementation\Can.c	 11563  
; ..\component\Can\Implementation\Can.c	 11564  \ID COV_IMPLICITE_TXCANCEL
; ..\component\Can\Implementation\Can.c	 11565    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11566    \REASON In some configurations there will be no recancellation but for this case there is no active code (empty else), so this is not really a test case.
; ..\component\Can\Implementation\Can.c	 11567  
; ..\component\Can\Implementation\Can.c	 11568  ---------------- LL ------------------
; ..\component\Can\Implementation\Can.c	 11569  
; ..\component\Can\Implementation\Can.c	 11570  \ID COV_CAN_MISRA
; ..\component\Can\Implementation\Can.c	 11571    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11572    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11573    \REASON only used for MISRA analysis not active in production code.
; ..\component\Can\Implementation\Can.c	 11574  
; ..\component\Can\Implementation\Can.c	 11575  \ID COV_CAN_MICROSAR_VERSION
; ..\component\Can\Implementation\Can.c	 11576    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11577    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11578    \REASON The feature is supported different for MicroSar4 and MicroSar3.  The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11579  
; ..\component\Can\Implementation\Can.c	 11580  \ID COV_CAN_MULTI_ECU_CONFIG
; ..\component\Can\Implementation\Can.c	 11581    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11582    \REASON The feature is supported different for MicroSar4 and MicroSar3.  The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11583  
; ..\component\Can\Implementation\Can.c	 11584  \ID COV_CAN_GEN_HW_START_STOP_IDX
; ..\component\Can\Implementation\Can.c	 11585    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11586    \REASON The feature GEN_HW_START_STOP is always supported for SafeBSW but may be not used in MSR3. A MSSV plugin enforces this configuration for SafeBSW.
; ..\component\Can\Implementation\Can.c	 11587  
; ..\component\Can\Implementation\Can.c	 11588  \ID COV_CAN_PARTIAL_NETWORK
; ..\component\Can\Implementation\Can.c	 11589    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11590    \REASON The feature Partial Network is not supported for SafeBSW but be used in MSR3. A MSSV plugin enforces this configuration for SafeBSW.
; ..\component\Can\Implementation\Can.c	 11591  
; ..\component\Can\Implementation\Can.c	 11592  \ID COV_CAN_MULTIPLE_BASICCAN_TX
; ..\component\Can\Implementation\Can.c	 11593    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11594    \ACCEPT TF tf tf
; ..\component\Can\Implementation\Can.c	 11595    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11596  
; ..\component\Can\Implementation\Can.c	 11597  \ID COV_CAN_SLEEP_SUPPORT
; ..\component\Can\Implementation\Can.c	 11598    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11599    \REASON The feature is platform specific - always IN-active.
; ..\component\Can\Implementation\Can.c	 11600  
; ..\component\Can\Implementation\Can.c	 11601  \ID COV_CAN_WAKEUP_SUPPORT
; ..\component\Can\Implementation\Can.c	 11602    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11603    \REASON The feature is platform specific - always IN-active.
; ..\component\Can\Implementation\Can.c	 11604  
; ..\component\Can\Implementation\Can.c	 11605  \ID COV_CAN_EMULATE_SLEEP
; ..\component\Can\Implementation\Can.c	 11606    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11607    \ACCEPT TX tf tx
; ..\component\Can\Implementation\Can.c	 11608    \ACCEPT TX tx tx
; ..\component\Can\Implementation\Can.c	 11609    \ACCEPT TX xf tx
; ..\component\Can\Implementation\Can.c	 11610    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11611    \REASON The feature Emulated Sleep is always supported for SafeBSW but used in MSR3. A MSSV plugin enforces this configuration for SafeBSW.
; ..\component\Can\Implementation\Can.c	 11612  
; ..\component\Can\Implementation\Can.c	 11613  \ID COV_CAN_TX_POLLING
; ..\component\Can\Implementation\Can.c	 11614    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11615    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11616  
; ..\component\Can\Implementation\Can.c	 11617  \ID COV_CAN_RX_POLLING
; ..\component\Can\Implementation\Can.c	 11618    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11619    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11620  
; ..\component\Can\Implementation\Can.c	 11621  \ID COV_CAN_RX_BASICCAN_POLLING
; ..\component\Can\Implementation\Can.c	 11622    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11623    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11624  
; ..\component\Can\Implementation\Can.c	 11625  \ID COV_CAN_RX_FULLCAN_POLLING
; ..\component\Can\Implementation\Can.c	 11626    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11627    \REASON The feature configuration specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11628  
; ..\component\Can\Implementation\Can.c	 11629  \ID COV_CAN_ERROR_POLLING
; ..\component\Can\Implementation\Can.c	 11630    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11631    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11632  
; ..\component\Can\Implementation\Can.c	 11633  \ID COV_CAN_WAKEUP_POLLING
; ..\component\Can\Implementation\Can.c	 11634    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11635    \REASON The feature is platform specific - fully NOT supported.
; ..\component\Can\Implementation\Can.c	 11636  
; ..\component\Can\Implementation\Can.c	 11637  \ID COV_CAN_INDIVIDUAL_POLLING
; ..\component\Can\Implementation\Can.c	 11638    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11639    \REASON The feature is platform and Project specific.
; ..\component\Can\Implementation\Can.c	 11640  
; ..\component\Can\Implementation\Can.c	 11641  \ID COV_CAN_TX_POLLING_OR_CANCEL_IN_HW_TASK
; ..\component\Can\Implementation\Can.c	 11642    \ACCEPT TF tf tf tx
; ..\component\Can\Implementation\Can.c	 11643    \ACCEPT TF tf tf xf
; ..\component\Can\Implementation\Can.c	 11644    \REASON The feature is platform specific - C_HL_ENABLE_CANCEL_IN_HW_TASK is always true or false.
; ..\component\Can\Implementation\Can.c	 11645  
; ..\component\Can\Implementation\Can.c	 11646  \ID COV_CAN_GENERIC_CONFIRMATION_API2
; ..\component\Can\Implementation\Can.c	 11647    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11648    \REASON The feature is platform and Project specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11649  
; ..\component\Can\Implementation\Can.c	 11650  \ID COV_CAN_FD_SUPPORT
; ..\component\Can\Implementation\Can.c	 11651    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11652    \REASON The feature is platform and Project specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11653  
; ..\component\Can\Implementation\Can.c	 11654  \ID COV_CAN_MULTIPLE_BASICCAN
; ..\component\Can\Implementation\Can.c	 11655    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11656    \REASON The feature is platform and Project specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11657  
; ..\component\Can\Implementation\Can.c	 11658  \ID COV_CAN_TX_FULLCAN_OBJECTS
; ..\component\Can\Implementation\Can.c	 11659    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11660    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11661  
; ..\component\Can\Implementation\Can.c	 11662  \ID COV_CAN_RX_FULLCAN_OBJECTS
; ..\component\Can\Implementation\Can.c	 11663    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11664    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11665  
; ..\component\Can\Implementation\Can.c	 11666  \ID COV_CAN_HW_TRANSMIT_CANCELLATION
; ..\component\Can\Implementation\Can.c	 11667    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11668    \REASON The feature is platform specific - fully NOT supported.
; ..\component\Can\Implementation\Can.c	 11669  
; ..\component\Can\Implementation\Can.c	 11670  \ID COV_CAN_CANCEL_IN_HW
; ..\component\Can\Implementation\Can.c	 11671    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11672    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11673    \ACCEPT TF xf tf
; ..\component\Can\Implementation\Can.c	 11674    \ACCEPT XF xf tf
; ..\component\Can\Implementation\Can.c	 11675    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 11676    \ACCEPT TF tf xf
; ..\component\Can\Implementation\Can.c	 11677    \REASON The feature is platform specific - (temporarily) not supported.
; ..\component\Can\Implementation\Can.c	 11678  
; ..\component\Can\Implementation\Can.c	 11679  \ID COV_CAN_HARDWARE_CANCELLATION
; ..\component\Can\Implementation\Can.c	 11680    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11681    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11682  
; ..\component\Can\Implementation\Can.c	 11683  \ID COV_CAN_EXTENDED_ID
; ..\component\Can\Implementation\Can.c	 11684    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11685    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11686  
; ..\component\Can\Implementation\Can.c	 11687  \ID COV_CAN_MIXED_ID
; ..\component\Can\Implementation\Can.c	 11688    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11689    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11690  
; ..\component\Can\Implementation\Can.c	 11691  \ID COV_CAN_OVERRUN_NOTIFICATION
; ..\component\Can\Implementation\Can.c	 11692    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11693    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11694  
; ..\component\Can\Implementation\Can.c	 11695  \ID COV_CAN_MULTIPLEXED_TRANSMISSION
; ..\component\Can\Implementation\Can.c	 11696    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11697    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11698  
; ..\component\Can\Implementation\Can.c	 11699  \ID COV_CAN_RX_QUEUE
; ..\component\Can\Implementation\Can.c	 11700    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11701    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11702  
; ..\component\Can\Implementation\Can.c	 11703  \ID COV_CAN_TX_HW_FIFO
; ..\component\Can\Implementation\Can.c	 11704    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11705    \REASON The feature is platform specific - fully NOT supported.
; ..\component\Can\Implementation\Can.c	 11706  
; ..\component\Can\Implementation\Can.c	 11707  \ID COV_CAN_TXINDIRECTIONHWTOLOG
; ..\component\Can\Implementation\Can.c	 11708    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11709    \REASON The feature is platform specific - always deactivated.
; ..\component\Can\Implementation\Can.c	 11710  
; ..\component\Can\Implementation\Can.c	 11711  \ID COV_CAN_HW_LAYOUT_TXBASIC_FIRST
; ..\component\Can\Implementation\Can.c	 11712    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11713    \REASON The feature is platform specific - always deactivated.
; ..\component\Can\Implementation\Can.c	 11714  
; ..\component\Can\Implementation\Can.c	 11715  \ID COV_CAN_TX_FULLCAN_HWHANDLE_REVERSE
; ..\component\Can\Implementation\Can.c	 11716    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11717    \REASON The feature is platform specific - always deactivated.
; ..\component\Can\Implementation\Can.c	 11718  
; ..\component\Can\Implementation\Can.c	 11719  \ID COV_CAN_RX_FULLCAN_HWHANDLE_REVERSE
; ..\component\Can\Implementation\Can.c	 11720    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11721    \REASON The feature is platform specific - always deactivated.
; ..\component\Can\Implementation\Can.c	 11722  
; ..\component\Can\Implementation\Can.c	 11723  \ID COV_CAN_BASICCAN_HWHANDLE_REVERSE
; ..\component\Can\Implementation\Can.c	 11724    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11725    \REASON The feature is platform specific - always deactivated.
; ..\component\Can\Implementation\Can.c	 11726  
; ..\component\Can\Implementation\Can.c	 11727  \ID COV_CAN_EXTENDED_STATUS
; ..\component\Can\Implementation\Can.c	 11728    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11729    \REASON The feature is platform specific - always active.
; ..\component\Can\Implementation\Can.c	 11730  
; ..\component\Can\Implementation\Can.c	 11731  \ID COV_CAN_OVERRUN_IN_STATUS
; ..\component\Can\Implementation\Can.c	 11732    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11733    \REASON The feature is platform specific - always activated.
; ..\component\Can\Implementation\Can.c	 11734  
; ..\component\Can\Implementation\Can.c	 11735  \ID COV_CAN_RxBasicMsgReceivedBegin
; ..\component\Can\Implementation\Can.c	 11736    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11737    \REASON The feature is platform specific - always active.
; ..\component\Can\Implementation\Can.c	 11738  
; ..\component\Can\Implementation\Can.c	 11739  \ID COV_CAN_RxFullMsgReceivedBegin
; ..\component\Can\Implementation\Can.c	 11740    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11741    \REASON The feature is platform specific - always active.
; ..\component\Can\Implementation\Can.c	 11742  
; ..\component\Can\Implementation\Can.c	 11743  \ID COV_CAN_HW_EXIT_TRANSMIT
; ..\component\Can\Implementation\Can.c	 11744    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11745    \REASON The feature is platform specific - always active.
; ..\component\Can\Implementation\Can.c	 11746  
; ..\component\Can\Implementation\Can.c	 11747  
; ..\component\Can\Implementation\Can.c	 11748  \ID COV_CAN_LL_HARDWARE_BEHAVIOUR
; ..\component\Can\Implementation\Can.c	 11749    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11750    \ACCEPT XF xf xx
; ..\component\Can\Implementation\Can.c	 11751    \ACCEPT XX xx xx
; ..\component\Can\Implementation\Can.c	 11752    \ACCEPT XX xx xx xx
; ..\component\Can\Implementation\Can.c	 11753    \ACCEPT XF xf xx xx
; ..\component\Can\Implementation\Can.c	 11754    \ACCEPT XF tf xf xf
; ..\component\Can\Implementation\Can.c	 11755    \ACCEPT XF tf xf
; ..\component\Can\Implementation\Can.c	 11756    \REASON The condition checks for hardware failures that cannot be stimulated. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11757  
; ..\component\Can\Implementation\Can.c	 11758  
; ..\component\Can\Implementation\Can.c	 11759  \ID COV_CAN_HARDWARE_FAILURE
; ..\component\Can\Implementation\Can.c	 11760    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11761    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11762    \ACCEPT XF tf xf
; ..\component\Can\Implementation\Can.c	 11763    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 11764    \ACCEPT XF tx xf
; ..\component\Can\Implementation\Can.c	 11765    \ACCEPT XF xf xx
; ..\component\Can\Implementation\Can.c	 11766    \ACCEPT XF xf xx xx
; ..\component\Can\Implementation\Can.c	 11767    \ACCEPT XF xf xf xf xf
; ..\component\Can\Implementation\Can.c	 11768    \ACCEPT XF tx tx tx tx
; ..\component\Can\Implementation\Can.c	 11769    \ACCEPT XF tf xf xf
; ..\component\Can\Implementation\Can.c	 11770    \ACCEPT XF xf xf xf  
; ..\component\Can\Implementation\Can.c	 11771    \ACCEPT TF tf xf
; ..\component\Can\Implementation\Can.c	 11772    \ACCEPT TF tf tx
; ..\component\Can\Implementation\Can.c	 11773    \ACCEPT TF tf tx tx
; ..\component\Can\Implementation\Can.c	 11774    \ACCEPT XF xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf
; ..\component\Can\Implementation\Can.c	 11775    \ACCEPT XF xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf xf
; ..\component\Can\Implementation\Can.c	 11776    \REASON The condition checks for hardware failures that cannot be stimulated. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11777  
; ..\component\Can\Implementation\Can.c	 11778  \ID COV_CAN_GENDATA_FAILURE
; ..\component\Can\Implementation\Can.c	 11779    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11780    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11781    \ACCEPT XX
; ..\component\Can\Implementation\Can.c	 11782    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 11783    \ACCEPT XF tx tx
; ..\component\Can\Implementation\Can.c	 11784    \ACCEPT XF tx xf
; ..\component\Can\Implementation\Can.c	 11785    \ACCEPT XF xf xx
; ..\component\Can\Implementation\Can.c	 11786    \ACCEPT XF tx tx tx tx 
; ..\component\Can\Implementation\Can.c	 11787    \ACCEPT TF tf xf
; ..\component\Can\Implementation\Can.c	 11788    \ACCEPT TF xf tf
; ..\component\Can\Implementation\Can.c	 11789    \ACCEPT TF xf tf xf tf
; ..\component\Can\Implementation\Can.c	 11790    \REASON The condition checks for generated data failures that cannot be simulated. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11791  
; ..\component\Can\Implementation\Can.c	 11792  \ID COV_CAN_GENDATA_NOT_IN_ALL_CONFIG
; ..\component\Can\Implementation\Can.c	 11793    \ACCEPT X
; ..\component\Can\Implementation\Can.c	 11794    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11795    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11796    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11797    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 11798    \ACCEPT XF xf xx
; ..\component\Can\Implementation\Can.c	 11799    \ACCEPT TF tf tx
; ..\component\Can\Implementation\Can.c	 11800    \ACCEPT TF tf xf
; ..\component\Can\Implementation\Can.c	 11801    \ACCEPT TF tf tf xf xf
; ..\component\Can\Implementation\Can.c	 11802    \ACCEPT TF tf tf tf xf
; ..\component\Can\Implementation\Can.c	 11803    \ACCEPT TF tf xf xf tf
; ..\component\Can\Implementation\Can.c	 11804    \ACCEPT TF tf xf tf xf
; ..\component\Can\Implementation\Can.c	 11805    \ACCEPT TF xf tf xf xf
; ..\component\Can\Implementation\Can.c	 11806    \ACCEPT TF xf tf tf tf
; ..\component\Can\Implementation\Can.c	 11807    \ACCEPT TF xf tf tf xf
; ..\component\Can\Implementation\Can.c	 11808    \ACCEPT TF xf xf tf xf
; ..\component\Can\Implementation\Can.c	 11809    \ACCEPT TF xf xf xf tf
; ..\component\Can\Implementation\Can.c	 11810    \ACCEPT XF xf xx xf xf
; ..\component\Can\Implementation\Can.c	 11811    \ACCEPT XF xf xx xx xx
; ..\component\Can\Implementation\Can.c	 11812    \REASON Generated data does not contain all data sets but checked in code. Not encapsulated with preprocessor switch to simplify code.
; ..\component\Can\Implementation\Can.c	 11813  
; ..\component\Can\Implementation\Can.c	 11814  \ID COV_CAN_OS_USAGE
; ..\component\Can\Implementation\Can.c	 11815    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11816    \ACCEPT TX xf tx
; ..\component\Can\Implementation\Can.c	 11817    \ACCEPT TX tx xf
; ..\component\Can\Implementation\Can.c	 11818    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11819    \ACCEPT XF xf tx
; ..\component\Can\Implementation\Can.c	 11820    \ACCEPT XF tx xf
; ..\component\Can\Implementation\Can.c	 11821    \ACCEPT XF tf tf
; ..\component\Can\Implementation\Can.c	 11822    \ACCEPT XF xf tf
; ..\component\Can\Implementation\Can.c	 11823    \ACCEPT TF tx tf
; ..\component\Can\Implementation\Can.c	 11824    \ACCEPT TF xf xf
; ..\component\Can\Implementation\Can.c	 11825    \REASON not all OS types used in component test. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11826  
; ..\component\Can\Implementation\Can.c	 11827  \ID COV_CAN_LOCK_ISR_BY_APPL
; ..\component\Can\Implementation\Can.c	 11828    \ACCEPT TX tf tf
; ..\component\Can\Implementation\Can.c	 11829    \ACCEPT TF xf tf 
; ..\component\Can\Implementation\Can.c	 11830    \REASON CAN interrupts never locked by application only within tests. It is not part of the component test to check application code. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11831  
; ..\component\Can\Implementation\Can.c	 11832  \ID COV_CAN_RAM_CHECK
; ..\component\Can\Implementation\Can.c	 11833    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11834    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11835  
; ..\component\Can\Implementation\Can.c	 11836  \ID COV_CAN_RAM_CHECK_EXTENDED
; ..\component\Can\Implementation\Can.c	 11837    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11838    \REASON The feature is platform specific - fully NOT supported.
; ..\component\Can\Implementation\Can.c	 11839  
; ..\component\Can\Implementation\Can.c	 11840  \ID COV_CAN_TIMEOUT_DURATION
; ..\component\Can\Implementation\Can.c	 11841    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11842    \REASON Hardware loop time out is platform specific never reached.
; ..\component\Can\Implementation\Can.c	 11843  
; ..\component\Can\Implementation\Can.c	 11844  \ID COV_CAN_TRANSITION_REQUEST
; ..\component\Can\Implementation\Can.c	 11845    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11846    \ACCEPT TF tf tf
; ..\component\Can\Implementation\Can.c	 11847    \ACCEPT X
; ..\component\Can\Implementation\Can.c	 11848    \ACCEPT XX
; ..\component\Can\Implementation\Can.c	 11849    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11850    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11851    \ACCEPT TX tx tx
; ..\component\Can\Implementation\Can.c	 11852    \REASON Mode transition is platform specific always true or false.
; ..\component\Can\Implementation\Can.c	 11853  
; ..\component\Can\Implementation\Can.c	 11854  \ID COV_CAN_TRANSITION_PROCESSED
; ..\component\Can\Implementation\Can.c	 11855    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11856    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11857    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11858    \REASON StartProcessed are only called in the case where the asynchronous mode change did go to normal mode when requested. This is timing dependent and depends on the configured baud rate. The code is verified by code inspection. 
; ..\component\Can\Implementation\Can.c	 11859  
; ..\component\Can\Implementation\Can.c	 11860  \ID COV_CAN_TRANSITION_REQUEST_WAKEUP
; ..\component\Can\Implementation\Can.c	 11861    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11862    \ACCEPT TF tf tf
; ..\component\Can\Implementation\Can.c	 11863    \REASON Mode transition is platform specific always true or false.
; ..\component\Can\Implementation\Can.c	 11864  
; ..\component\Can\Implementation\Can.c	 11865  \ID COV_CAN_TRANSITION_REQUEST_SLEEP
; ..\component\Can\Implementation\Can.c	 11866    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11867    \ACCEPT TF tf tf
; ..\component\Can\Implementation\Can.c	 11868    \REASON Mode transition is platform specific always true or false.
; ..\component\Can\Implementation\Can.c	 11869  
; ..\component\Can\Implementation\Can.c	 11870  \ID COV_CAN_BASICCAN_SEARCH_LINEAR
; ..\component\Can\Implementation\Can.c	 11871    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11872    \ACCEPT TF tx tf
; ..\component\Can\Implementation\Can.c	 11873    \REASON Received BasicCAN mailbox is always a valid object and found while search.
; ..\component\Can\Implementation\Can.c	 11874  
; ..\component\Can\Implementation\Can.c	 11875  \ID COV_CAN_FULLCAN_SEARCH_LINEAR
; ..\component\Can\Implementation\Can.c	 11876    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11877    \ACCEPT TF tx tf
; ..\component\Can\Implementation\Can.c	 11878    \REASON Received FullCAN mailbox is always a valid object and found while search.
; ..\component\Can\Implementation\Can.c	 11879  
; ..\component\Can\Implementation\Can.c	 11880  \ID COV_CAN_RAM_CHECK_NO_STIMULATION
; ..\component\Can\Implementation\Can.c	 11881    \ACCEPT X
; ..\component\Can\Implementation\Can.c	 11882    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11883    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11884    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 11885    \REASON some configurations do not stimulate RamCheck by test suite, to check the standard CAN driver behaviour.
; ..\component\Can\Implementation\Can.c	 11886  
; ..\component\Can\Implementation\Can.c	 11887  \ID COV_CAN_HWOBJINDIVPOLLING
; ..\component\Can\Implementation\Can.c	 11888    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11889    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11890    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11891    \REASON Not all configurations stimulate this (e.g. Individual polling is set but all objects are polled). 
; ..\component\Can\Implementation\Can.c	 11892   
; ..\component\Can\Implementation\Can.c	 11893  \ID COV_CAN_SAFE_BSW
; ..\component\Can\Implementation\Can.c	 11894    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11895    \REASON The feature is platform specific - fully supported.
; ..\component\Can\Implementation\Can.c	 11896  
; ..\component\Can\Implementation\Can.c	 11897  \ID COV_CAN_OSCAT_CONFIG_CHECK
; ..\component\Can\Implementation\Can.c	 11898    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11899    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11900    \ACCEPT XF tx xf
; ..\component\Can\Implementation\Can.c	 11901    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 11902    \REASON The 'osdISrCan_xx' define is only available in case OSEK OS is used. Only used to verify correct configuration and does not influence the runtime code.
; ..\component\Can\Implementation\Can.c	 11903  
; ..\component\Can\Implementation\Can.c	 11904  \ID COV_CAN_MCAN_SAFETY_CHECK
; ..\component\Can\Implementation\Can.c	 11905    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11906    \REASON The condition checks for unexpected behaviour that cannot be stimulated. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11907  
; ..\component\Can\Implementation\Can.c	 11908  \ID COV_CAN_MCAN_NOT_SUPPORTED
; ..\component\Can\Implementation\Can.c	 11909    \ACCEPT XF tx xf xx
; ..\component\Can\Implementation\Can.c	 11910    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11911    \REASON The condition checks for unexpected behaviour that cannot be stimulated. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11912  
; ..\component\Can\Implementation\Can.c	 11913  \ID COV_CAN_VERSION_CHECK
; ..\component\Can\Implementation\Can.c	 11914    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11915    \REASON Only allowed resp. requested for a specific MCAN Revision 
; ..\component\Can\Implementation\Can.c	 11916    
; ..\component\Can\Implementation\Can.c	 11917  \ID COV_CAN_HW_SPECIFIC
; ..\component\Can\Implementation\Can.c	 11918    \ACCEPT XX
; ..\component\Can\Implementation\Can.c	 11919    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11920    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11921    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11922    \ACCEPT XF xf xf xf xf
; ..\component\Can\Implementation\Can.c	 11923    \ACCEPT XF xf xx xf xf
; ..\component\Can\Implementation\Can.c	 11924    \ACCEPT TF tf tf xf xf
; ..\component\Can\Implementation\Can.c	 11925    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 11926    \ACCEPT XF xf xx
; ..\component\Can\Implementation\Can.c	 11927    \ACCEPT XF tx 
; ..\component\Can\Implementation\Can.c	 11928    \ACCEPT XF xf xx xf
; ..\component\Can\Implementation\Can.c	 11929    \ACCEPT TF xf tf
; ..\component\Can\Implementation\Can.c	 11930    \ACCEPT TF tx tf
; ..\component\Can\Implementation\Can.c	 11931    \ACCEPT TF tf tx
; ..\component\Can\Implementation\Can.c	 11932    \ACCEPT TX tx tx
; ..\component\Can\Implementation\Can.c	 11933    \ACCEPT TX tx xf
; ..\component\Can\Implementation\Can.c	 11934    \ACCEPT TX xf
; ..\component\Can\Implementation\Can.c	 11935    \ACCEPT TF tf tf xf
; ..\component\Can\Implementation\Can.c	 11936    \ACCEPT TF tx tf xf 
; ..\component\Can\Implementation\Can.c	 11937    \ACCEPT TX tx xf xf
; ..\component\Can\Implementation\Can.c	 11938    \ACCEPT TF tx tf xf xf
; ..\component\Can\Implementation\Can.c	 11939    \REASON The condition checks for revision/hardware specific defines which do not change. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11940  
; ..\component\Can\Implementation\Can.c	 11941  \ID COV_CAN_HW_SPECIFIC_FUNCTIONALITY
; ..\component\Can\Implementation\Can.c	 11942    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11943    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11944    \ACCEPT TX xf xf tx
; ..\component\Can\Implementation\Can.c	 11945    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 11946    \ACCEPT XF xf tf
; ..\component\Can\Implementation\Can.c	 11947    \ACCEPT XF xf xf xf xf
; ..\component\Can\Implementation\Can.c	 11948    \ACCEPT TX xf tx
; ..\component\Can\Implementation\Can.c	 11949    \ACCEPT TX tx xf
; ..\component\Can\Implementation\Can.c	 11950    \ACCEPT TX tx xf xf
; ..\component\Can\Implementation\Can.c	 11951    \ACCEPT TX xf xf xf tx
; ..\component\Can\Implementation\Can.c	 11952    \ACCEPT TX xf xf tx xf
; ..\component\Can\Implementation\Can.c	 11953    \REASON The condition checks for hardware specific functionality which do not change. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11954    
; ..\component\Can\Implementation\Can.c	 11955  \ID COV_CAN_OS_INT_CONTROL
; ..\component\Can\Implementation\Can.c	 11956    \ACCEPT TF
; ..\component\Can\Implementation\Can.c	 11957    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11958    \REASON The condition checks for hardware specific functionality which do not change. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11959  
; ..\component\Can\Implementation\Can.c	 11960  \ID COV_CAN_OS_INT_SOURCE
; ..\component\Can\Implementation\Can.c	 11961    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11962    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11963    \REASON The condition checks if the interrupts should be restored. This depends on if the configuration uses interrupts or not. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11964  
; ..\component\Can\Implementation\Can.c	 11965  \ID COV_CAN_NOT_IN_ALL_CFG_AND_HW_SPECIFIC
; ..\component\Can\Implementation\Can.c	 11966    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 11967    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11968    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 11969    \ACCEPT TX tx tx
; ..\component\Can\Implementation\Can.c	 11970    \ACCEPT XF xf xx
; ..\component\Can\Implementation\Can.c	 11971    \ACCEPT X
; ..\component\Can\Implementation\Can.c	 11972    \REASON The condition checks as well for timing as also for revision/hardware specific defines which do not change. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11973  
; ..\component\Can\Implementation\Can.c	 11974  \ID COV_CAN_GENDATA_TX_NOT_IN_ALL_CONFIG
; ..\component\Can\Implementation\Can.c	 11975    \ACCEPT X
; ..\component\Can\Implementation\Can.c	 11976    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 11977    \ACCEPT TF tf tx tf
; ..\component\Can\Implementation\Can.c	 11978    \ACCEPT TF tx tf tf
; ..\component\Can\Implementation\Can.c	 11979    \ACCEPT TF tx tf tx
; ..\component\Can\Implementation\Can.c	 11980    \ACCEPT TF tx tx tf
; ..\component\Can\Implementation\Can.c	 11981    \ACCEPT TF tf tx
; ..\component\Can\Implementation\Can.c	 11982    \ACCEPT TF tx tf
; ..\component\Can\Implementation\Can.c	 11983    \ACCEPT TF tx tx tf tf
; ..\component\Can\Implementation\Can.c	 11984    \ACCEPT TF tf tf tx tf
; ..\component\Can\Implementation\Can.c	 11985    \ACCEPT TF tf tf tx tx tf
; ..\component\Can\Implementation\Can.c	 11986    \ACCEPT TF tx tf tx tf
; ..\component\Can\Implementation\Can.c	 11987    \ACCEPT TF tf tx tx
; ..\component\Can\Implementation\Can.c	 11988    \ACCEPT TF tf tx tx tf
; ..\component\Can\Implementation\Can.c	 11989    \ACCEPT TF tf tf tx
; ..\component\Can\Implementation\Can.c	 11990    \REASON No BasicCAN  The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 11991  
; ..\component\Can\Implementation\Can.c	 11992  \ID COV_CAN_DISABLE_RX_MAILBOX
; ..\component\Can\Implementation\Can.c	 11993    \ACCEPT TF tf xf tx
; ..\component\Can\Implementation\Can.c	 11994    \ACCEPT TF tf xf tf
; ..\component\Can\Implementation\Can.c	 11995    \ACCEPT TF tx xx tf
; ..\component\Can\Implementation\Can.c	 11996    \ACCEPT TF xf tf tx
; ..\component\Can\Implementation\Can.c	 11997    \ACCEPT TX tx xx tx
; ..\component\Can\Implementation\Can.c	 11998    \ACCEPT TF tx tf tf tx
; ..\component\Can\Implementation\Can.c	 11999    \ACCEPT TF tf tx tf tf
; ..\component\Can\Implementation\Can.c	 12000    \ACCEPT TF tf tx xf xx
; ..\component\Can\Implementation\Can.c	 12001    \ACCEPT TF xf xx tf tf
; ..\component\Can\Implementation\Can.c	 12002    \ACCEPT TX tx tx xx xx
; ..\component\Can\Implementation\Can.c	 12003    \ACCEPT TX tx xx
; ..\component\Can\Implementation\Can.c	 12004    \ACCEPT TF tf xf
; ..\component\Can\Implementation\Can.c	 12005    \ACCEPT TF xf tf
; ..\component\Can\Implementation\Can.c	 12006    \ACCEPT XF tf xf
; ..\component\Can\Implementation\Can.c	 12007    \ACCEPT XF xf xx
; ..\component\Can\Implementation\Can.c	 12008    \ACCEPT XX xx xx
; ..\component\Can\Implementation\Can.c	 12009    \REASON The condition checks whether the filter belongs to the corrupt mailbox. This depends on the mailbox configuration. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 12010  
; ..\component\Can\Implementation\Can.c	 12011  \ID COV_CAN_INTERRUPT
; ..\component\Can\Implementation\Can.c	 12012    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 12013    \REASON The condition checks whether an interrupt has occured AND that the interrupt is enabled in HW. The condition occurs in interrupt context. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 12014  
; ..\component\Can\Implementation\Can.c	 12015  \ID COV_CAN_TX_INTERRUPT
; ..\component\Can\Implementation\Can.c	 12016    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 12017    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 12018    \REASON The condition checks whether an TX interrupt has occured AND that the interrupt is enabled in HW. The condition occurs in  TX interrupt and should therefore not be false when tx interrupt is enabled. "XF" acceptance is due to "IndivPollALL" configurations, where interrupts are enabled but no TX interrupt is expected. The deviation is correct and is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 12019  
; ..\component\Can\Implementation\Can.c	 12020  \ID COV_CAN_ISR_PROTOTYPE
; ..\component\Can\Implementation\Can.c	 12021    \ACCEPT TX xf xf
; ..\component\Can\Implementation\Can.c	 12022    \REASON The condition checks whether the ISR prototype is disabled by user config and is used to reassure that the ISR prototype is enabled if not explicitly disabled. Deviations are correct and assured with code inspection.
; ..\component\Can\Implementation\Can.c	 12023  
; ..\component\Can\Implementation\Can.c	 12024  \ID COV_CAN_BUSOFFNOTIFICATION
; ..\component\Can\Implementation\Can.c	 12025    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 12026  \REASON The condition checks if a bus-off notification is already sent to the application. This is timing depended and related to unexpected behavior, therefore, it cannot be stimulated. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 12027  
; ..\component\Can\Implementation\Can.c	 12028  \ID COV_CAN_CHANNEL_USED
; ..\component\Can\Implementation\Can.c	 12029    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 12030    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 12031    \REASON The test is executed with a defined channels. Due to variant handling, a channel can be defined, however, not used. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 12032    
; ..\component\Can\Implementation\Can.c	 12033  \ID COV_CAN_CBD_COMPATIBILITY
; ..\component\Can\Implementation\Can.c	 12034    \ACCEPT TX tf tf
; ..\component\Can\Implementation\Can.c	 12035    \REASON The condition checks whether interrupt or polling handling is requested. This is used to ensure compatibility to CANbedded. 
; ..\component\Can\Implementation\Can.c	 12036  
; ..\component\Can\Implementation\Can.c	 12037  \ID COV_CAN_ERRATUM_OFF
; ..\component\Can\Implementation\Can.c	 12038    \ACCEPT XX
; ..\component\Can\Implementation\Can.c	 12039    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 12040    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 12041    \ACCEPT XF xf xf xf
; ..\component\Can\Implementation\Can.c	 12042    \REASON Specific Errata only used for specific MCAN Revisions. If the Revision is not under test then the erratum is always inactive.
; ..\component\Can\Implementation\Can.c	 12043  
; ..\component\Can\Implementation\Can.c	 12044  \ID COV_CAN_START_SEQ_ERRATAS
; ..\component\Can\Implementation\Can.c	 12045    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 12046    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 12047    \REASON Specific to MCAN revision and Erratas. The start sequence is different depending on the Erratas.
; ..\component\Can\Implementation\Can.c	 12048  
; ..\component\Can\Implementation\Can.c	 12049  \ID COV_CAN_CPUTYPE
; ..\component\Can\Implementation\Can.c	 12050    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 12051    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 12052    \REASON Feature depends on the platform specific invariant endianness
; ..\component\Can\Implementation\Can.c	 12053  
; ..\component\Can\Implementation\Can.c	 12054  \ID COV_CAN_EQUAL_CHANNEL_LAYOUT
; ..\component\Can\Implementation\Can.c	 12055    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 12056    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 12057    \ACCEPT XF tx tf xf xf xf xf 
; ..\component\Can\Implementation\Can.c	 12058    \ACCEPT TX tx xf xf xf
; ..\component\Can\Implementation\Can.c	 12059    \ACCEPT TF tf xf xf xf
; ..\component\Can\Implementation\Can.c	 12060    \ACCEPT XF xf xf xf xf
; ..\component\Can\Implementation\Can.c	 12061    \REASON The test is executed on defined channels. The channel layout is equal for each channel.
; ..\component\Can\Implementation\Can.c	 12062  
; ..\component\Can\Implementation\Can.c	 12063  \ID COV_CAN_DEFINED_CHANNELS
; ..\component\Can\Implementation\Can.c	 12064    \ACCEPT XF tx tf xf xf xf xf 
; ..\component\Can\Implementation\Can.c	 12065    \REASON The tests are extecuted on specific channels and does not cover all available channels in the hardware. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 12066  
; ..\component\Can\Implementation\Can.c	 12067  \ID COV_CAN_DERIVATIVE_SWITCH
; ..\component\Can\Implementation\Can.c	 12068    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 12069    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 12070    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 12071    \REASON Only one derivative can be tested for one time. To check supported derivatives, please look for the "Equivalent Hardware Checklist"
; ..\component\Can\Implementation\Can.c	 12072  
; ..\component\Can\Implementation\Can.c	 12073  \ID COV_CAN_COMPILER_SWITCH
; ..\component\Can\Implementation\Can.c	 12074    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 12075    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 12076    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 12077    \ACCEPT TX tx xf
; ..\component\Can\Implementation\Can.c	 12078    \ACCEPT TX xf tx
; ..\component\Can\Implementation\Can.c	 12079    \REASON Only one compiler can be tested for one time.
; ..\component\Can\Implementation\Can.c	 12080  
; ..\component\Can\Implementation\Can.c	 12081  \ID COV_CAN_GENTOOL_SPECIFIC
; ..\component\Can\Implementation\Can.c	 12082    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 12083    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 12084    \ACCEPT XF xf xf
; ..\component\Can\Implementation\Can.c	 12085    \ACCEPT XF xf xx
; ..\component\Can\Implementation\Can.c	 12086    \ACCEPT TF xf tf
; ..\component\Can\Implementation\Can.c	 12087    \ACCEPT TX tx tx
; ..\component\Can\Implementation\Can.c	 12088    \ACCEPT  TX tx xf xf
; ..\component\Can\Implementation\Can.c	 12089    \REASON Feature is only relevant for a specific generation tool (e.g. GENy, CFG5, ...)
; ..\component\Can\Implementation\Can.c	 12090  
; ..\component\Can\Implementation\Can.c	 12091  \ID COV_CAN_SICANFD_KEY_FAILURE
; ..\component\Can\Implementation\Can.c	 12092    \ACCEPT TX
; ..\component\Can\Implementation\Can.c	 12093    \REASON The condition checks if static key described in HW manual for SICANFD is accepted. Failure cannot be stimulated. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 12094    
; ..\component\Can\Implementation\Can.c	 12095  \ID COV_CAN_PENDING_TX_REQUEST
; ..\component\Can\Implementation\Can.c	 12096    \ACCEPT XF
; ..\component\Can\Implementation\Can.c	 12097    \REASON The condition checks if there are any pending TX requests when Stop mode is called. Test of functionality is performed with debugger. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 12098  
; ..\component\Can\Implementation\Can.c	 12099  \ID COV_CAN_SAFE_BSW_EXCLUSION_LL
; ..\component\Can\Implementation\Can.c	 12100    \ACCEPT XF xf
; ..\component\Can\Implementation\Can.c	 12101    \REASON SafeBsw restricted feature will not be enforced to be deactivated or activated.
; ..\component\Can\Implementation\Can.c	 12102  
; ..\component\Can\Implementation\Can.c	 12103  \ID COV_CAN_PROTECTED_WRITE_LL
; ..\component\Can\Implementation\Can.c	 12104    \ACCEPT XX
; ..\component\Can\Implementation\Can.c	 12105    \REASON The feature is platform specific. The code is verified by code inspection.
; ..\component\Can\Implementation\Can.c	 12106  
; ..\component\Can\Implementation\Can.c	 12107  END_COVERAGE_JUSTIFICATION */ 
; ..\component\Can\Implementation\Can.c	 12108  
; ..\component\Can\Implementation\Can.c	 12109  
; ..\component\Can\Implementation\Can.c	 12110  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12111  
; ..\component\Can\Implementation\Can.c	 12112  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12113  
; ..\component\Can\Implementation\Can.c	 12114  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12115  
; ..\component\Can\Implementation\Can.c	 12116  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12117  
; ..\component\Can\Implementation\Can.c	 12118  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12119  
; ..\component\Can\Implementation\Can.c	 12120  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12121  
; ..\component\Can\Implementation\Can.c	 12122  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12123  
; ..\component\Can\Implementation\Can.c	 12124  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12125  
; ..\component\Can\Implementation\Can.c	 12126  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12127  
; ..\component\Can\Implementation\Can.c	 12128  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12129  
; ..\component\Can\Implementation\Can.c	 12130  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12131  
; ..\component\Can\Implementation\Can.c	 12132  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12133  
; ..\component\Can\Implementation\Can.c	 12134  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12135  
; ..\component\Can\Implementation\Can.c	 12136  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12137  
; ..\component\Can\Implementation\Can.c	 12138  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12139  
; ..\component\Can\Implementation\Can.c	 12140  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12141  
; ..\component\Can\Implementation\Can.c	 12142  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12143  
; ..\component\Can\Implementation\Can.c	 12144  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12145  
; ..\component\Can\Implementation\Can.c	 12146  /* Kernbauer Version: 1.16 Konfiguration: DrvCan_TricoreMcanAsr Erzeugungsgangnummer: 701 */
; ..\component\Can\Implementation\Can.c	 12147  

	; Module end
