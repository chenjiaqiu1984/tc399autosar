	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 21092262 SN 73118428"
	.compiler_invocation	"ctc --dep-file=component\\EcuM\\Implementation\\.EcuM.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc39xb -D__CPU_TC39XB__ --core=tc1.6.2 --iso=99 -DBRS_COMP_TASKING -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\testdemo\\taskingdemo\\demo001 -ID:\\Zonal\\demo011\\tasking\\component\\PduR -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Generator -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Com -ID:\\Zonal\\demo011\\tasking\\component\\Com\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Com\\DaVinciCfg_VASE -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Com\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\ComM -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Det -ID:\\Zonal\\demo011\\tasking\\component\\Det\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Det\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\demo011\\tasking\\appl -ID:\\Zonal\\demo011\\tasking\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\Components -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\ContractPhase -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\inc -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\appl\\Include -ID:\\Zonal\\demo011\\tasking\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\appl\\Source\\swc_test -ID:\\Zonal\\demo011\\tasking\\component -ID:\\Zonal\\demo011\\tasking\\component\\_Common -ID:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os\\TC39xQ -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Os\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug -ID:\\Zonal\\demo011\\tasking\\Debug\\appl -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\Debug\\component -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\src -g2 --make-target=component\\EcuM\\Implementation\\EcuM.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o component\\EcuM\\Implementation\\EcuM.src ..\\component\\EcuM\\Implementation\\EcuM.c"
	.compiler_name		"ctc"
	;source	'..\\component\\EcuM\\Implementation\\EcuM.c'

	
$TC162
	
	.sdecl	'.text.EcuM.EcuM_InternalGetShutdownTargetAndMode',code,cluster('EcuM_InternalGetShutdownTargetAndMode')
	.sect	'.text.EcuM.EcuM_InternalGetShutdownTargetAndMode'
	.align	2
	

; ..\component\EcuM\Implementation\EcuM.c	     1  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	     2   *  COPYRIGHT
; ..\component\EcuM\Implementation\EcuM.c	     3   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\EcuM\Implementation\EcuM.c	     4   *  \verbatim
; ..\component\EcuM\Implementation\EcuM.c	     5   *  Copyright (c) 2020 by Vector Informatik GmbH.                                                  All rights reserved.
; ..\component\EcuM\Implementation\EcuM.c	     6   *
; ..\component\EcuM\Implementation\EcuM.c	     7   *                This software is copyright protected and proprietary to Vector Informatik GmbH.
; ..\component\EcuM\Implementation\EcuM.c	     8   *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
; ..\component\EcuM\Implementation\EcuM.c	     9   *                All other rights remain with Vector Informatik GmbH.
; ..\component\EcuM\Implementation\EcuM.c	    10   *  \endverbatim
; ..\component\EcuM\Implementation\EcuM.c	    11   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\EcuM\Implementation\EcuM.c	    12   *  FILE DESCRIPTION
; ..\component\EcuM\Implementation\EcuM.c	    13   *  -----------------------------------------------------------------------------------------------------------------*/
; ..\component\EcuM\Implementation\EcuM.c	    14  /**        \file  EcuM.c
; ..\component\EcuM\Implementation\EcuM.c	    15   *        \brief  MICROSAR ECU State Manager
; ..\component\EcuM\Implementation\EcuM.c	    16   *
; ..\component\EcuM\Implementation\EcuM.c	    17   *      \details  The ECU State Manager is responsible for
; ..\component\EcuM\Implementation\EcuM.c	    18   *                  - initialization of some BSW Modules which are needed to start the OS
; ..\component\EcuM\Implementation\EcuM.c	    19   *                  - configuration of the entire ECU for sleep mode
; ..\component\EcuM\Implementation\EcuM.c	    20   *                  - fast and systematic wakeup behavior
; ..\component\EcuM\Implementation\EcuM.c	    21   *                  - shutdown of the ECU
; ..\component\EcuM\Implementation\EcuM.c	    22   *
; ..\component\EcuM\Implementation\EcuM.c	    23   *                To be very independent of different system designs e.g. different Modules to initialize,
; ..\component\EcuM\Implementation\EcuM.c	    24   *                external/internal Watchdog, etc., the ECU State Manager provides over a mechanism named "callouts"
; ..\component\EcuM\Implementation\EcuM.c	    25   *                a way to adapt the startup and shutdown behavior. The system designer must fill the proper code into
; ..\component\EcuM\Implementation\EcuM.c	    26   *                the callouts.
; ..\component\EcuM\Implementation\EcuM.c	    27   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	    28  
; ..\component\EcuM\Implementation\EcuM.c	    29  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	    30   *  REVISION HISTORY
; ..\component\EcuM\Implementation\EcuM.c	    31   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\EcuM\Implementation\EcuM.c	    32   *  Refer to the module's header file.
; ..\component\EcuM\Implementation\EcuM.c	    33   *
; ..\component\EcuM\Implementation\EcuM.c	    34   *  FILE VERSION
; ..\component\EcuM\Implementation\EcuM.c	    35   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\EcuM\Implementation\EcuM.c	    36   *  Refer to the VERSION CHECK below.
; ..\component\EcuM\Implementation\EcuM.c	    37   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	    38  
; ..\component\EcuM\Implementation\EcuM.c	    39  #define ECUM_SOURCE
; ..\component\EcuM\Implementation\EcuM.c	    40  #define ECUM_C
; ..\component\EcuM\Implementation\EcuM.c	    41  
; ..\component\EcuM\Implementation\EcuM.c	    42  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	    43   *  INCLUDES
; ..\component\EcuM\Implementation\EcuM.c	    44   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	    45  
; ..\component\EcuM\Implementation\EcuM.c	    46  #include "EcuM.h"
; ..\component\EcuM\Implementation\EcuM.c	    47  
; ..\component\EcuM\Implementation\EcuM.c	    48  #define ECUM_PRIVATE_CFG_INCLUDE
; ..\component\EcuM\Implementation\EcuM.c	    49  #include "EcuM_PrivateCfg.h"
; ..\component\EcuM\Implementation\EcuM.c	    50  #undef ECUM_PRIVATE_CFG_INCLUDE /* PRQA S 0841 */ /* MD_MSR_Undef */
; ..\component\EcuM\Implementation\EcuM.c	    51  
; ..\component\EcuM\Implementation\EcuM.c	    52  #include "BswM.h"
; ..\component\EcuM\Implementation\EcuM.c	    53  #include "BswM_EcuM.h"
; ..\component\EcuM\Implementation\EcuM.c	    54  
; ..\component\EcuM\Implementation\EcuM.c	    55  #include "Rte_EcuM.h"
; ..\component\EcuM\Implementation\EcuM.c	    56  #include "Rte_Main.h"
; ..\component\EcuM\Implementation\EcuM.c	    57  #include "SchM_EcuM.h"
; ..\component\EcuM\Implementation\EcuM.c	    58  
; ..\component\EcuM\Implementation\EcuM.c	    59  #if((ECUM_CHANNELOFWAKEUPSOURCELIST == STD_ON) ||(ECUM_PNCOFCOMMPNCS == STD_ON) || (ECUM_SUPPORT_COMM == STD_ON)) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	    60  # include "ComM.h"
; ..\component\EcuM\Implementation\EcuM.c	    61  # include "ComM_EcuMBswM.h"
; ..\component\EcuM\Implementation\EcuM.c	    62  #endif
; ..\component\EcuM\Implementation\EcuM.c	    63  
; ..\component\EcuM\Implementation\EcuM.c	    64  #include "EcuM_Error.h"
; ..\component\EcuM\Implementation\EcuM.c	    65  
; ..\component\EcuM\Implementation\EcuM.c	    66  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	    67   *  VERSION CHECK
; ..\component\EcuM\Implementation\EcuM.c	    68   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	    69  /* vendor specific version information is BCD coded */
; ..\component\EcuM\Implementation\EcuM.c	    70  #if (  (ECUM_SW_MAJOR_VERSION != (0x10u)) \ 
; ..\component\EcuM\Implementation\EcuM.c	    71      || (ECUM_SW_MINOR_VERSION != (0x00u)) \ 
; ..\component\EcuM\Implementation\EcuM.c	    72      || (ECUM_SW_PATCH_VERSION != (0x02u)) )
; ..\component\EcuM\Implementation\EcuM.c	    73  # error "Vendor specific version numbers of EcuM.c and EcuM.h are inconsistent"
; ..\component\EcuM\Implementation\EcuM.c	    74  #endif
; ..\component\EcuM\Implementation\EcuM.c	    75  
; ..\component\EcuM\Implementation\EcuM.c	    76  /* AUTOSAR version information check has to match definition in header file */
; ..\component\EcuM\Implementation\EcuM.c	    77  #if (  (ECUM_AR_RELEASE_MAJOR_VERSION    != (0x04u)) \ 
; ..\component\EcuM\Implementation\EcuM.c	    78      || (ECUM_AR_RELEASE_MINOR_VERSION    != (0x00u)) \ 
; ..\component\EcuM\Implementation\EcuM.c	    79      || (ECUM_AR_RELEASE_REVISION_VERSION != (0x03u)) )
; ..\component\EcuM\Implementation\EcuM.c	    80  # error "AUTOSAR Specification Version numbers of EcuM.c and EcuM.h are inconsistent!"
; ..\component\EcuM\Implementation\EcuM.c	    81  #endif
; ..\component\EcuM\Implementation\EcuM.c	    82  
; ..\component\EcuM\Implementation\EcuM.c	    83  /* vendor specific version information is BCD coded */
; ..\component\EcuM\Implementation\EcuM.c	    84  #if (  (ECUM_CBK_SW_MAJOR_VERSION != (0x10u)) \ 
; ..\component\EcuM\Implementation\EcuM.c	    85      || (ECUM_CBK_SW_MINOR_VERSION != (0x00u)) \ 
; ..\component\EcuM\Implementation\EcuM.c	    86      || (ECUM_CBK_SW_PATCH_VERSION != (0x02u)) )
; ..\component\EcuM\Implementation\EcuM.c	    87  # error "Vendor specific version numbers of EcuM.c and EcuM_Cbk.h are inconsistent"
; ..\component\EcuM\Implementation\EcuM.c	    88  #endif
; ..\component\EcuM\Implementation\EcuM.c	    89  
; ..\component\EcuM\Implementation\EcuM.c	    90  /* AUTOSAR version information check has to match definition in the Callback header file */
; ..\component\EcuM\Implementation\EcuM.c	    91  #if (  (ECUM_CBK_AR_RELEASE_MAJOR_VERSION    != (0x04u)) \ 
; ..\component\EcuM\Implementation\EcuM.c	    92      || (ECUM_CBK_AR_RELEASE_MINOR_VERSION    != (0x00u)) \ 
; ..\component\EcuM\Implementation\EcuM.c	    93      || (ECUM_CBK_AR_RELEASE_REVISION_VERSION != (0x03u)) )
; ..\component\EcuM\Implementation\EcuM.c	    94  # error "AUTOSAR Specification Version numbers of EcuM.c and EcuM_Cbk.h are inconsistent!"
; ..\component\EcuM\Implementation\EcuM.c	    95  #endif
; ..\component\EcuM\Implementation\EcuM.c	    96  
; ..\component\EcuM\Implementation\EcuM.c	    97  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	    98   *  PRE-COMPILE CHECKS
; ..\component\EcuM\Implementation\EcuM.c	    99   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   100  #if (ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	   101  # if (ECUM_NUMBER_OF_CORES != EcuM_GetSizeOfCoreStatus())
; ..\component\EcuM\Implementation\EcuM.c	   102  #  error "Number of cores is not equal to the Core status array."
; ..\component\EcuM\Implementation\EcuM.c	   103  # endif
; ..\component\EcuM\Implementation\EcuM.c	   104  #endif
; ..\component\EcuM\Implementation\EcuM.c	   105  
; ..\component\EcuM\Implementation\EcuM.c	   106  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   107   *  LOCAL CONSTANT MACROS
; ..\component\EcuM\Implementation\EcuM.c	   108   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   109  /* Define that indicates that no timeout is active for a wakeup source */
; ..\component\EcuM\Implementation\EcuM.c	   110  #define ECUM_NO_VALIDATION_TIMEOUT        (0x00u)
; ..\component\EcuM\Implementation\EcuM.c	   111  
; ..\component\EcuM\Implementation\EcuM.c	   112  /* MAGIC Numbers to determine whether the restart was intended or not */
; ..\component\EcuM\Implementation\EcuM.c	   113  #define ECUM_MAGIC_ONE                    (0x5Au)
; ..\component\EcuM\Implementation\EcuM.c	   114  #define ECUM_MAGIC_TWO                    (0xA5u)
; ..\component\EcuM\Implementation\EcuM.c	   115  
; ..\component\EcuM\Implementation\EcuM.c	   116  /* Defines used as parameters for the routine EcuM_EnterSleep */
; ..\component\EcuM\Implementation\EcuM.c	   117  #define ECUM_ENTER_HALT                   (uint8)0x00u
; ..\component\EcuM\Implementation\EcuM.c	   118  #define ECUM_ENTER_POLL                   (uint8)0x01u
; ..\component\EcuM\Implementation\EcuM.c	   119  
; ..\component\EcuM\Implementation\EcuM.c	   120  /* Defines to indicate the current status of one core */
; ..\component\EcuM\Implementation\EcuM.c	   121  #define ECUM_CORESTATUS_RUN               (0x00u)
; ..\component\EcuM\Implementation\EcuM.c	   122  #define ECUM_CORESTATUS_SLEEP             (0x01u)
; ..\component\EcuM\Implementation\EcuM.c	   123  #define ECUM_CORESTATUS_OFF               (0x02u)
; ..\component\EcuM\Implementation\EcuM.c	   124  
; ..\component\EcuM\Implementation\EcuM.c	   125  #if ((ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON) || (ECUM_CHECKWAKEUPTIMEOFWAKEUPSOURCELIST == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	   126  # define ECUM_TIMEOUTOFWAKEUPSOURCELIST   STD_ON
; ..\component\EcuM\Implementation\EcuM.c	   127  #else
; ..\component\EcuM\Implementation\EcuM.c	   128  # define ECUM_TIMEOUTOFWAKEUPSOURCELIST   STD_OFF
; ..\component\EcuM\Implementation\EcuM.c	   129  #endif
; ..\component\EcuM\Implementation\EcuM.c	   130  
; ..\component\EcuM\Implementation\EcuM.c	   131  #if ((ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON) && (ECUM_CHECKWAKEUPTIMEOFWAKEUPSOURCELIST == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	   132  # define ECUM_COMBINEDPENDINGWAKEUPS      ((EcuM_PendingWakeups) | (EcuM_PendingCheckWakeups))
; ..\component\EcuM\Implementation\EcuM.c	   133  #elif (ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   134  # define ECUM_COMBINEDPENDINGWAKEUPS      (EcuM_PendingWakeups)
; ..\component\EcuM\Implementation\EcuM.c	   135  #elif (ECUM_CHECKWAKEUPTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   136  # define ECUM_COMBINEDPENDINGWAKEUPS      (EcuM_PendingCheckWakeups)
; ..\component\EcuM\Implementation\EcuM.c	   137  #endif
; ..\component\EcuM\Implementation\EcuM.c	   138  
; ..\component\EcuM\Implementation\EcuM.c	   139  #if ((ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON) || (ECUM_CHECKWAKEUPTIMEOFWAKEUPSOURCELIST == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	   140  # define ECUM_COMBINEDWAKEUPS             ((ECUM_COMBINEDPENDINGWAKEUPS) | (EcuM_ValidatedWakeups))
; ..\component\EcuM\Implementation\EcuM.c	   141  #else
; ..\component\EcuM\Implementation\EcuM.c	   142  # define ECUM_COMBINEDWAKEUPS             (EcuM_ValidatedWakeups)
; ..\component\EcuM\Implementation\EcuM.c	   143  #endif
; ..\component\EcuM\Implementation\EcuM.c	   144  
; ..\component\EcuM\Implementation\EcuM.c	   145  #if(ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   146  
; ..\component\EcuM\Implementation\EcuM.c	   147  # define ECUM_TIMER_NOT_SET               (0xFFFFu)
; ..\component\EcuM\Implementation\EcuM.c	   148  # define ECUM_TIMER_EXPIRED               (0x00u)
; ..\component\EcuM\Implementation\EcuM.c	   149  
; ..\component\EcuM\Implementation\EcuM.c	   150  # if(ECUM_SUPPORT_DEM == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   151  #  define ECUM_DEM_SHUT_DOWN               (0x00u)
; ..\component\EcuM\Implementation\EcuM.c	   152  #  define ECUM_DEM_INITIALIZED             (0x01u)
; ..\component\EcuM\Implementation\EcuM.c	   153  # endif
; ..\component\EcuM\Implementation\EcuM.c	   154  #endif
; ..\component\EcuM\Implementation\EcuM.c	   155  
; ..\component\EcuM\Implementation\EcuM.c	   156  #if(ECUM_FIXED_BEHAVIOR == STD_ON || ECUM_MODE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   157  /* Defines for RUN/POST RUN request handling  */
; ..\component\EcuM\Implementation\EcuM.c	   158  # define ECUM_USER_REQUEST_RUN_MASK       (0x01u)
; ..\component\EcuM\Implementation\EcuM.c	   159  # define ECUM_USER_REQUEST_POST_RUN_MASK  (0x02u)
; ..\component\EcuM\Implementation\EcuM.c	   160  #endif
; ..\component\EcuM\Implementation\EcuM.c	   161  
; ..\component\EcuM\Implementation\EcuM.c	   162  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   163   *  LOCAL FUNCTION MACROS
; ..\component\EcuM\Implementation\EcuM.c	   164   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   165  #define EcuM_EnterCriticalArea_0()        SchM_Enter_EcuM_ECUM_EXCLUSIVE_AREA_0()   /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   166  #define EcuM_LeaveCriticalArea_0()        SchM_Exit_EcuM_ECUM_EXCLUSIVE_AREA_0()    /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   167  
; ..\component\EcuM\Implementation\EcuM.c	   168  #if(ECUM_NUMBER_OF_CORES > 1)
; ..\component\EcuM\Implementation\EcuM.c	   169  # define EcuM_EnterCriticalArea_1()        SchM_Enter_EcuM_ECUM_EXCLUSIVE_AREA_1()   /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   170  # define EcuM_LeaveCriticalArea_1()        SchM_Exit_EcuM_ECUM_EXCLUSIVE_AREA_1()    /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   171  #endif
; ..\component\EcuM\Implementation\EcuM.c	   172  
; ..\component\EcuM\Implementation\EcuM.c	   173  #if(ECUM_ALARM_CLOCK_PRESENT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   174  
; ..\component\EcuM\Implementation\EcuM.c	   175  # define ECUM_ALARM_NOT_ACTIVE             (0xFFFFFFFFu)
; ..\component\EcuM\Implementation\EcuM.c	   176  
; ..\component\EcuM\Implementation\EcuM.c	   177  # if(ECUM_ATOMIC_VARIABLE_ACCESS < 32u)
; ..\component\EcuM\Implementation\EcuM.c	   178  #  define EcuM_EnterCriticalArea_2()       SchM_Enter_EcuM_ECUM_EXCLUSIVE_AREA_2()   /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   179  #  define EcuM_LeaveCriticalArea_2()       SchM_Exit_EcuM_ECUM_EXCLUSIVE_AREA_2()    /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   180  # else
; ..\component\EcuM\Implementation\EcuM.c	   181  #  define EcuM_EnterCriticalArea_2()
; ..\component\EcuM\Implementation\EcuM.c	   182  #  define EcuM_LeaveCriticalArea_2()
; ..\component\EcuM\Implementation\EcuM.c	   183  # endif
; ..\component\EcuM\Implementation\EcuM.c	   184  #endif
; ..\component\EcuM\Implementation\EcuM.c	   185  
; ..\component\EcuM\Implementation\EcuM.c	   186  #define EcuM_EnterCriticalArea_3()         SchM_Enter_EcuM_ECUM_EXCLUSIVE_AREA_3()   /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   187  #define EcuM_LeaveCriticalArea_3()         SchM_Exit_EcuM_ECUM_EXCLUSIVE_AREA_3()    /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   188  
; ..\component\EcuM\Implementation\EcuM.c	   189  /* Only in case that access on a 32bit variable is non atomic and a critical area is needed to access such variables */
; ..\component\EcuM\Implementation\EcuM.c	   190  #if(ECUM_ATOMIC_VARIABLE_ACCESS < 32u)
; ..\component\EcuM\Implementation\EcuM.c	   191  # define EcuM_EnterAtomicAccess_0()       EcuM_EnterCriticalArea_0()                /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   192  # define EcuM_LeaveAtomicAccess_0()       EcuM_LeaveCriticalArea_0()                /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   193  #else
; ..\component\EcuM\Implementation\EcuM.c	   194  # define EcuM_EnterAtomicAccess_0()
; ..\component\EcuM\Implementation\EcuM.c	   195  # define EcuM_LeaveAtomicAccess_0()
; ..\component\EcuM\Implementation\EcuM.c	   196  #endif
; ..\component\EcuM\Implementation\EcuM.c	   197  
; ..\component\EcuM\Implementation\EcuM.c	   198  /* Calling Macros to avoid "unreferenced parameter" compiler error, if compiled without DEV_ERROR_DETECT */
; ..\component\EcuM\Implementation\EcuM.c	   199  #if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   200  # define ECUM_FUNC_CALL_REQUEST_RUN(ApiId, User, mask)        (EcuM_InternalRequestRUN((ApiId), (User), (mask))) /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   201  # define ECUM_FUNC_CALL_RELEASE_RUN(ApiId, User, mask)        (EcuM_InternalReleaseRUN((ApiId), (User), (mask))) /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   202  #else
; ..\component\EcuM\Implementation\EcuM.c	   203  # define ECUM_FUNC_CALL_REQUEST_RUN(ApiId, User, mask)        (EcuM_InternalRequestRUN((User), (mask)))  /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   204  # define ECUM_FUNC_CALL_RELEASE_RUN(ApiId, User, mask)        (EcuM_InternalReleaseRUN((User), (mask)))  /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   205  #endif
; ..\component\EcuM\Implementation\EcuM.c	   206  
; ..\component\EcuM\Implementation\EcuM.c	   207  #if((ECUM_NUMBER_OF_CORES > 1u) && (ECUM_RESOURCEOFPARTITIONDATA == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	   208  # define ECUM_SLEEP_RESOURCE                                  EcuM_InternalGetPartitionIdx()
; ..\component\EcuM\Implementation\EcuM.c	   209  #else
; ..\component\EcuM\Implementation\EcuM.c	   210  # define ECUM_SLEEP_RESOURCE                                  ECUM_OS_RESOURCE
; ..\component\EcuM\Implementation\EcuM.c	   211  #endif
; ..\component\EcuM\Implementation\EcuM.c	   212  
; ..\component\EcuM\Implementation\EcuM.c	   213  #if(ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE)
; ..\component\EcuM\Implementation\EcuM.c	   214  # define ECUM_GLOBAL_CFG_PTR                                  EcuM_GlobalPBConfig_Ptr
; ..\component\EcuM\Implementation\EcuM.c	   215  #elif(ECUM_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   216  # define ECUM_GLOBAL_CFG_PTR                                  EcuM_GlobalPCConfig_Ptr
; ..\component\EcuM\Implementation\EcuM.c	   217  #endif
; ..\component\EcuM\Implementation\EcuM.c	   218  
; ..\component\EcuM\Implementation\EcuM.c	   219  #if ((ECUM_INCLUDE_NVRAM_MGR == STD_ON) && (ECUM_FIXED_BEHAVIOR == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	   220  # define ECUM_NVM_WRITEALL_IDLE                               (0x00u)
; ..\component\EcuM\Implementation\EcuM.c	   221  # define ECUM_NVM_WRITEALL_REQUIRED                           (0x01u)
; ..\component\EcuM\Implementation\EcuM.c	   222  # define ECUM_NVM_WRITEALL_STARTED                            (0x02u)
; ..\component\EcuM\Implementation\EcuM.c	   223  # define ECUM_NVM_WRITEALL_CANCELED                           (0x03u)
; ..\component\EcuM\Implementation\EcuM.c	   224  #endif
; ..\component\EcuM\Implementation\EcuM.c	   225  
; ..\component\EcuM\Implementation\EcuM.c	   226  #define ECUM_DRIVERINITLIST_ZERO                              EcuM_AL_DriverInitZero
; ..\component\EcuM\Implementation\EcuM.c	   227  #define ECUM_DRIVERINITLIST_ONE                               EcuM_GetFunctionOfDriverInitOne(0u)
; ..\component\EcuM\Implementation\EcuM.c	   228  #define ECUM_DRIVERRESTART_LIST                               EcuM_GetFunctionOfDriverRestartList(0u)
; ..\component\EcuM\Implementation\EcuM.c	   229  
; ..\component\EcuM\Implementation\EcuM.c	   230  #if(ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   231  # define ECUM_DRIVERINITLIST_TWO                              EcuM_GetFunctionOfDriverInitTwo(0u)
; ..\component\EcuM\Implementation\EcuM.c	   232  # define ECUM_DRIVERINITLIST_THREE                            EcuM_GetFunctionOfDriverInitThree(0u)
; ..\component\EcuM\Implementation\EcuM.c	   233  #endif
; ..\component\EcuM\Implementation\EcuM.c	   234  
; ..\component\EcuM\Implementation\EcuM.c	   235  #if (((ECUM_FIXED_BEHAVIOR == STD_ON) && (ECUM_SUPPORT_RTE_MODE_SWITCH == STD_ON)) || ECUM_MODE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   236  # define ECUM_RTE_SWITCH(MODE)                                (void)Rte_Switch_currentMode_currentMode((MODE)) /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\EcuM\Implementation\EcuM.c	   237  #else
; ..\component\EcuM\Implementation\EcuM.c	   238  # define ECUM_RTE_SWITCH(MODE)
; ..\component\EcuM\Implementation\EcuM.c	   239  #endif
; ..\component\EcuM\Implementation\EcuM.c	   240  
; ..\component\EcuM\Implementation\EcuM.c	   241  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   242   *  LOCAL DATA TYPES AND STRUCTURES
; ..\component\EcuM\Implementation\EcuM.c	   243   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   244  
; ..\component\EcuM\Implementation\EcuM.c	   245  #if !defined (ECUM_LOCAL) /* COV_ECUM_LOCAL */
; ..\component\EcuM\Implementation\EcuM.c	   246  # define ECUM_LOCAL static
; ..\component\EcuM\Implementation\EcuM.c	   247  #endif
; ..\component\EcuM\Implementation\EcuM.c	   248  
; ..\component\EcuM\Implementation\EcuM.c	   249  #if !defined (ECUM_LOCAL_INLINE) /* COV_ECUM_LOCAL_INLINE */
; ..\component\EcuM\Implementation\EcuM.c	   250  # define ECUM_LOCAL_INLINE LOCAL_INLINE
; ..\component\EcuM\Implementation\EcuM.c	   251  #endif
; ..\component\EcuM\Implementation\EcuM.c	   252  
; ..\component\EcuM\Implementation\EcuM.c	   253  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   254   *  LOCAL DATA PROTOTYPES
; ..\component\EcuM\Implementation\EcuM.c	   255   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   256  
; ..\component\EcuM\Implementation\EcuM.c	   257  #define ECUM_START_SEC_VAR_NOINIT_8BIT
; ..\component\EcuM\Implementation\EcuM.c	   258  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\EcuM\Implementation\EcuM.c	   259  
; ..\component\EcuM\Implementation\EcuM.c	   260  /* Selected sleep/reset for shutdown phase */
; ..\component\EcuM\Implementation\EcuM.c	   261  ECUM_LOCAL VAR(uint8, ECUM_VAR_NOINIT) EcuM_CurrentShutdownMode;
; ..\component\EcuM\Implementation\EcuM.c	   262  
; ..\component\EcuM\Implementation\EcuM.c	   263  /* Selected shutdown target for shutdown phase */
; ..\component\EcuM\Implementation\EcuM.c	   264  ECUM_LOCAL VAR(EcuM_StateType, ECUM_VAR_NOINIT) EcuM_CurrentShutdownTarget;
; ..\component\EcuM\Implementation\EcuM.c	   265  
; ..\component\EcuM\Implementation\EcuM.c	   266  /* Selected shutdown target for shutdown phase */
; ..\component\EcuM\Implementation\EcuM.c	   267  ECUM_LOCAL VAR(EcuM_StateType, ECUM_VAR_NOINIT) EcuM_LastShutdownTarget; /* PRQA S 3218 */ /* MD_EcuM_3218 */
; ..\component\EcuM\Implementation\EcuM.c	   268  
; ..\component\EcuM\Implementation\EcuM.c	   269  /* Get the last sleep/reset shutdownmode */
; ..\component\EcuM\Implementation\EcuM.c	   270  ECUM_LOCAL VAR(uint8, ECUM_VAR_NOINIT) EcuM_LastShutdownMode; /* PRQA S 3218 */ /* MD_EcuM_3218 */
; ..\component\EcuM\Implementation\EcuM.c	   271  
; ..\component\EcuM\Implementation\EcuM.c	   272  #if (ECUM_SHUTDOWNCAUSECOUNT != 0u)
; ..\component\EcuM\Implementation\EcuM.c	   273  /* Selected shutdown cause for next shutdown */
; ..\component\EcuM\Implementation\EcuM.c	   274  ECUM_LOCAL VAR(uint8, ECUM_VAR_NOINIT) EcuM_ShutdownCause;
; ..\component\EcuM\Implementation\EcuM.c	   275  #endif
; ..\component\EcuM\Implementation\EcuM.c	   276  
; ..\component\EcuM\Implementation\EcuM.c	   277  #if (ECUM_MODE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   278  /* Current Rte State to notify during MainFunction */
; ..\component\EcuM\Implementation\EcuM.c	   279  ECUM_LOCAL VAR(Rte_ModeType_EcuM_Mode, ECUM_VAR_NOINIT) EcuM_RteStateBuffer;
; ..\component\EcuM\Implementation\EcuM.c	   280  #endif
; ..\component\EcuM\Implementation\EcuM.c	   281  
; ..\component\EcuM\Implementation\EcuM.c	   282  /* Select the BootTarget for the next BootSequence */
; ..\component\EcuM\Implementation\EcuM.c	   283  ECUM_LOCAL VAR(EcuM_BootTargetType, ECUM_VAR_NOINIT) EcuM_CurrentBootTarget;
; ..\component\EcuM\Implementation\EcuM.c	   284  
; ..\component\EcuM\Implementation\EcuM.c	   285  #if(ECUM_ALARM_CLOCK_PRESENT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   286  /* Two variables to indicate the reason of a restart */
; ..\component\EcuM\Implementation\EcuM.c	   287  ECUM_LOCAL VAR(uint8, ECUM_VAR_NOINIT) EcuM_IntendedRestartID_One;
; ..\component\EcuM\Implementation\EcuM.c	   288  ECUM_LOCAL VAR(uint8, ECUM_VAR_NOINIT) EcuM_IntendedRestartID_Two;
; ..\component\EcuM\Implementation\EcuM.c	   289  #endif
; ..\component\EcuM\Implementation\EcuM.c	   290  
; ..\component\EcuM\Implementation\EcuM.c	   291  #define ECUM_STOP_SEC_VAR_NOINIT_8BIT
; ..\component\EcuM\Implementation\EcuM.c	   292  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\EcuM\Implementation\EcuM.c	   293  
; ..\component\EcuM\Implementation\EcuM.c	   294  #define ECUM_START_SEC_VAR_NOINIT_32BIT
; ..\component\EcuM\Implementation\EcuM.c	   295  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\EcuM\Implementation\EcuM.c	   296  
; ..\component\EcuM\Implementation\EcuM.c	   297  /* Variable to store the validated wakeup event which was responsible for wakeup up the ECU */
; ..\component\EcuM\Implementation\EcuM.c	   298  ECUM_LOCAL VAR(EcuM_WakeupSourceType, ECUM_VAR_NOINIT) EcuM_ValidatedWakeups;
; ..\component\EcuM\Implementation\EcuM.c	   299  
; ..\component\EcuM\Implementation\EcuM.c	   300  #if(ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   301  /* Variable which stores information about enabled wakeup interrupts */
; ..\component\EcuM\Implementation\EcuM.c	   302  ECUM_LOCAL VAR(EcuM_WakeupSourceType, ECUM_VAR_NOINIT) EcuM_EnabledWakeups;
; ..\component\EcuM\Implementation\EcuM.c	   303  #endif
; ..\component\EcuM\Implementation\EcuM.c	   304  
; ..\component\EcuM\Implementation\EcuM.c	   305  /* Variable to store wakeups that occur during the startup before BswM is initialized */
; ..\component\EcuM\Implementation\EcuM.c	   306  ECUM_LOCAL VAR(EcuM_WakeupSourceType, ECUM_VAR_NOINIT) EcuM_BswM_BufferedWakeups;
; ..\component\EcuM\Implementation\EcuM.c	   307  
; ..\component\EcuM\Implementation\EcuM.c	   308  #if (ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   309  
; ..\component\EcuM\Implementation\EcuM.c	   310  /* Saves all wakeup events which are not validated yet */
; ..\component\EcuM\Implementation\EcuM.c	   311  ECUM_LOCAL VAR(EcuM_WakeupSourceType, ECUM_VAR_NOINIT) EcuM_PendingWakeups;
; ..\component\EcuM\Implementation\EcuM.c	   312  
; ..\component\EcuM\Implementation\EcuM.c	   313  /* Variable to store the cleared wakeup event with still active wakeup sources */
; ..\component\EcuM\Implementation\EcuM.c	   314  ECUM_LOCAL VAR(EcuM_WakeupSourceType, ECUM_VAR_NOINIT) EcuM_ClearedPendingWakeups;
; ..\component\EcuM\Implementation\EcuM.c	   315  
; ..\component\EcuM\Implementation\EcuM.c	   316  #endif
; ..\component\EcuM\Implementation\EcuM.c	   317  
; ..\component\EcuM\Implementation\EcuM.c	   318  #if (ECUM_TIMEOUTOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   319  
; ..\component\EcuM\Implementation\EcuM.c	   320  /* Saves all wakeup events where the validation is expired */
; ..\component\EcuM\Implementation\EcuM.c	   321  ECUM_LOCAL VAR(EcuM_WakeupSourceType, ECUM_VAR_NOINIT) EcuM_ExpiredWakeups;
; ..\component\EcuM\Implementation\EcuM.c	   322  
; ..\component\EcuM\Implementation\EcuM.c	   323  #endif
; ..\component\EcuM\Implementation\EcuM.c	   324  
; ..\component\EcuM\Implementation\EcuM.c	   325  #if (ECUM_CHECKWAKEUPTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   326  
; ..\component\EcuM\Implementation\EcuM.c	   327  /* Saves all wakeup events which are occurred asynchronous */
; ..\component\EcuM\Implementation\EcuM.c	   328  ECUM_LOCAL VAR(EcuM_WakeupSourceType, ECUM_VAR_NOINIT) EcuM_PendingCheckWakeups;
; ..\component\EcuM\Implementation\EcuM.c	   329  
; ..\component\EcuM\Implementation\EcuM.c	   330  # if(ECUM_DEFERRED_BSWM_NOTIFICATION == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   331  ECUM_LOCAL VAR(EcuM_WakeupSourceType, ECUM_VAR_NOINIT) EcuM_ExpiredCheckWakeups;
; ..\component\EcuM\Implementation\EcuM.c	   332  # endif
; ..\component\EcuM\Implementation\EcuM.c	   333  
; ..\component\EcuM\Implementation\EcuM.c	   334  #endif
; ..\component\EcuM\Implementation\EcuM.c	   335  
; ..\component\EcuM\Implementation\EcuM.c	   336  #if((ECUM_CHANNELOFWAKEUPSOURCELIST == STD_ON) || (ECUM_PNCOFCOMMPNCS == STD_ON)) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	   337  
; ..\component\EcuM\Implementation\EcuM.c	   338  /* Variable to store wakeups that occur during the startup before ComM is initialized */
; ..\component\EcuM\Implementation\EcuM.c	   339  ECUM_LOCAL VAR(EcuM_WakeupSourceType, ECUM_VAR_NOINIT) EcuM_ComM_BufferedWakeups;
; ..\component\EcuM\Implementation\EcuM.c	   340  
; ..\component\EcuM\Implementation\EcuM.c	   341  #endif
; ..\component\EcuM\Implementation\EcuM.c	   342  
; ..\component\EcuM\Implementation\EcuM.c	   343  #if(ECUM_ALARM_CLOCK_PRESENT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   344  /* This is the absolute time since the battery connect */
; ..\component\EcuM\Implementation\EcuM.c	   345  ECUM_LOCAL VAR(uint32, ECUM_VAR_NOINIT) EcuM_Clock;
; ..\component\EcuM\Implementation\EcuM.c	   346  
; ..\component\EcuM\Implementation\EcuM.c	   347  /* This is the time of the next occurring alarm timer */
; ..\component\EcuM\Implementation\EcuM.c	   348  ECUM_LOCAL VAR(uint32, ECUM_VAR_NOINIT) EcuM_MasterAlarm;
; ..\component\EcuM\Implementation\EcuM.c	   349  #endif
; ..\component\EcuM\Implementation\EcuM.c	   350  
; ..\component\EcuM\Implementation\EcuM.c	   351  #define ECUM_STOP_SEC_VAR_NOINIT_32BIT
; ..\component\EcuM\Implementation\EcuM.c	   352  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\EcuM\Implementation\EcuM.c	   353  
; ..\component\EcuM\Implementation\EcuM.c	   354  /* configuration pointer of the module */
; ..\component\EcuM\Implementation\EcuM.c	   355  #if((ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE) || (ECUM_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	   356  
; ..\component\EcuM\Implementation\EcuM.c	   357  # define ECUM_START_SEC_VAR_NOINIT_UNSPECIFIED
; ..\component\EcuM\Implementation\EcuM.c	   358  # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\EcuM\Implementation\EcuM.c	   359  
; ..\component\EcuM\Implementation\EcuM.c	   360  # if(ECUM_USE_INIT_POINTER == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   361  P2CONST(EcuM_PbConfigType, ECUM_VAR_NOINIT, ECUM_PBCFG) EcuM_ConfigDataPtr; /* PRQA S 1514 */ /* MD_EcuM_1514 */
; ..\component\EcuM\Implementation\EcuM.c	   362  # endif
; ..\component\EcuM\Implementation\EcuM.c	   363  
; ..\component\EcuM\Implementation\EcuM.c	   364  # if (ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE)
; ..\component\EcuM\Implementation\EcuM.c	   365  P2CONST(EcuM_GlobalConfigType, ECUM_VAR_NOINIT, ECUM_PBCFG) EcuM_GlobalPBConfig_Ptr;
; ..\component\EcuM\Implementation\EcuM.c	   366  #  if(ECUM_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   367  P2CONST(EcuM_GlobalPCConfigType, ECUM_VAR_NOINIT, ECUM_CONST) EcuM_GlobalPCConfig_Ptr;
; ..\component\EcuM\Implementation\EcuM.c	   368  #  endif
; ..\component\EcuM\Implementation\EcuM.c	   369  # else
; ..\component\EcuM\Implementation\EcuM.c	   370  P2CONST(EcuM_GlobalConfigType, ECUM_VAR_NOINIT, ECUM_CONST) EcuM_GlobalPCConfig_Ptr;
; ..\component\EcuM\Implementation\EcuM.c	   371  # endif
; ..\component\EcuM\Implementation\EcuM.c	   372  
; ..\component\EcuM\Implementation\EcuM.c	   373  # define ECUM_STOP_SEC_VAR_NOINIT_UNSPECIFIED
; ..\component\EcuM\Implementation\EcuM.c	   374  # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\EcuM\Implementation\EcuM.c	   375  
; ..\component\EcuM\Implementation\EcuM.c	   376  #endif
; ..\component\EcuM\Implementation\EcuM.c	   377  
; ..\component\EcuM\Implementation\EcuM.c	   378  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   379   *  GLOBAL DATA
; ..\component\EcuM\Implementation\EcuM.c	   380   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   381  
; ..\component\EcuM\Implementation\EcuM.c	   382  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   383   *  LOCAL FUNCTION PROTOTYPES
; ..\component\EcuM\Implementation\EcuM.c	   384   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   385  
; ..\component\EcuM\Implementation\EcuM.c	   386  #define ECUM_START_SEC_CODE
; ..\component\EcuM\Implementation\EcuM.c	   387  #include "MemMap.h"      /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\EcuM\Implementation\EcuM.c	   388  
; ..\component\EcuM\Implementation\EcuM.c	   389   /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   390   *  EcuM_InternalGetShutdownTargetAndMode
; ..\component\EcuM\Implementation\EcuM.c	   391   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   392  /*! \brief      Returns EcuM_CurrentShutdownTarget and EcuM_CurrentShutdownMode
; ..\component\EcuM\Implementation\EcuM.c	   393   *  \details    Encapsulates EcuM_CurrentShutdownTarget and EcuM_CurrentShutdownMode into an exclusive area
; ..\component\EcuM\Implementation\EcuM.c	   394                  for concurrent access
; ..\component\EcuM\Implementation\EcuM.c	   395   *  \param[out] target Current shutdown target
; ..\component\EcuM\Implementation\EcuM.c	   396   *  \param[out] mode Current shutdown mode
; ..\component\EcuM\Implementation\EcuM.c	   397   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   398   *  \context    TASK
; ..\component\EcuM\Implementation\EcuM.c	   399   *  \reentrant  TRUE
; ..\component\EcuM\Implementation\EcuM.c	   400   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   401  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalGetShutdownTargetAndMode(EcuM_StateType* target, uint8* mode);
; ..\component\EcuM\Implementation\EcuM.c	   402  
; ..\component\EcuM\Implementation\EcuM.c	   403  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   404  *  EcuM_InternalSetShutdownTargetAndMode()
; ..\component\EcuM\Implementation\EcuM.c	   405  **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   406  /*! \brief     Sets EcuM_CurrentShutdownTarget and EcuM_CurrentShutdownMode
; ..\component\EcuM\Implementation\EcuM.c	   407  *  \details    Encapsulates EcuM_CurrentShutdownTarget and EcuM_CurrentShutdownMode into an exclusive area
; ..\component\EcuM\Implementation\EcuM.c	   408                 for concurrent access
; ..\component\EcuM\Implementation\EcuM.c	   409  *  \param[in]  target New shutdown target
; ..\component\EcuM\Implementation\EcuM.c	   410  *  \param[in]  mode New shutdown mode
; ..\component\EcuM\Implementation\EcuM.c	   411  *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   412  *  \context    TASK
; ..\component\EcuM\Implementation\EcuM.c	   413  *  \reentrant  TRUE
; ..\component\EcuM\Implementation\EcuM.c	   414  **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   415  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalSetShutdownTargetAndMode(EcuM_StateType target, uint8 mode);
; ..\component\EcuM\Implementation\EcuM.c	   416  
; ..\component\EcuM\Implementation\EcuM.c	   417  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   418   *  EcuM_GetShiftCount
; ..\component\EcuM\Implementation\EcuM.c	   419   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   420  /*! \brief      Calculates an array position.
; ..\component\EcuM\Implementation\EcuM.c	   421   *  \details    Transforms the bit position of the passed wakeup source to a numerical value which can be used as an
; ..\component\EcuM\Implementation\EcuM.c	   422   *              index to access an array.
; ..\component\EcuM\Implementation\EcuM.c	   423   *  \param[in]  Wakeup source parameter.
; ..\component\EcuM\Implementation\EcuM.c	   424   *  \return     Bit position of the wakeup source bitmask.
; ..\component\EcuM\Implementation\EcuM.c	   425   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   426   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   427   *  \reentrant  TRUE
; ..\component\EcuM\Implementation\EcuM.c	   428   *  \note       The method expects that exactly one bit of the parameter is set.
; ..\component\EcuM\Implementation\EcuM.c	   429   *              In the case that more than one bit is set, the source with the lowest id will be returned.
; ..\component\EcuM\Implementation\EcuM.c	   430   *              In the case that no bit is set, 32u will be returned. The caller has to ensure that this will not lead
; ..\component\EcuM\Implementation\EcuM.c	   431   *              to an access out of bounds.
; ..\component\EcuM\Implementation\EcuM.c	   432   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   433  ECUM_LOCAL FUNC(uint8, ECUM_CODE) EcuM_GetShiftCount(VAR(EcuM_WakeupSourceType, AUTOMATIC) x);
; ..\component\EcuM\Implementation\EcuM.c	   434  
; ..\component\EcuM\Implementation\EcuM.c	   435  #if(ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON || ECUM_CHECKWAKEUPTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   436  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   437   *  EcuM_InternalWakeupValidation
; ..\component\EcuM\Implementation\EcuM.c	   438   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   439  /*! \brief      Handles the wakeup validation protocol.
; ..\component\EcuM\Implementation\EcuM.c	   440   *  \details    Handles the wakeup validation and is invoked by the EcuM_MainFunction. Each configured wake-up source
; ..\component\EcuM\Implementation\EcuM.c	   441   *              is checked inside this function for necessary validation.
; ..\component\EcuM\Implementation\EcuM.c	   442   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   443   *  \context    TASK
; ..\component\EcuM\Implementation\EcuM.c	   444   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   445   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   446  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalWakeupValidation(void);
; ..\component\EcuM\Implementation\EcuM.c	   447  #endif
; ..\component\EcuM\Implementation\EcuM.c	   448  
; ..\component\EcuM\Implementation\EcuM.c	   449  #if(ECUM_CHANNELOFWAKEUPSOURCELIST == STD_ON || ECUM_PNCOFCOMMPNCS == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	   450  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   451   *  EcuM_InternalComMNotifications
; ..\component\EcuM\Implementation\EcuM.c	   452   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   453  /*! \brief      Handles ComM PNC wakeup notifications.
; ..\component\EcuM\Implementation\EcuM.c	   454   *  \details    Notifies the ComM about valid wakeup events of PNC wakeup sources.
; ..\component\EcuM\Implementation\EcuM.c	   455   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   456   *  \context    TASK
; ..\component\EcuM\Implementation\EcuM.c	   457   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   458   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   459  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalComMNotifications(void);
; ..\component\EcuM\Implementation\EcuM.c	   460  #endif
; ..\component\EcuM\Implementation\EcuM.c	   461  
; ..\component\EcuM\Implementation\EcuM.c	   462  #if(ECUM_PNCOFCOMMPNCS == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	   463  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   464   *  EcuM_InternalComMPNCNotification
; ..\component\EcuM\Implementation\EcuM.c	   465   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   466  /*! \brief      Handles buffered ComM notifications.
; ..\component\EcuM\Implementation\EcuM.c	   467   *  \details    Notifies the ComM about valid wakeup events during the early startup phase, where the ComM is not
; ..\component\EcuM\Implementation\EcuM.c	   468   *              initialized.
; ..\component\EcuM\Implementation\EcuM.c	   469   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   470   *  \context    TASK
; ..\component\EcuM\Implementation\EcuM.c	   471   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   472   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   473  ECUM_LOCAL FUNC(void, ECUM_CODE) EcuM_InternalComMPNCNotification(uint8_least sourceIDx);
; ..\component\EcuM\Implementation\EcuM.c	   474  #endif
; ..\component\EcuM\Implementation\EcuM.c	   475  
; ..\component\EcuM\Implementation\EcuM.c	   476  #if (ECUM_DEFERRED_BSWM_NOTIFICATION == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   477  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   478   *  EcuM_InternalBswMNotifications
; ..\component\EcuM\Implementation\EcuM.c	   479   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   480  /*! \brief      Handles buffered BswM notifications.
; ..\component\EcuM\Implementation\EcuM.c	   481   *  \details    Notifies the BswM about deferred wakeup events.
; ..\component\EcuM\Implementation\EcuM.c	   482   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   483   *  \context    TASK
; ..\component\EcuM\Implementation\EcuM.c	   484   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   485   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   486  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalBswMNotifications(void);
; ..\component\EcuM\Implementation\EcuM.c	   487  #endif
; ..\component\EcuM\Implementation\EcuM.c	   488  
; ..\component\EcuM\Implementation\EcuM.c	   489  #if (ECUM_PARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   490  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   491   *  EcuM_InternalGetPartitionIdx()
; ..\component\EcuM\Implementation\EcuM.c	   492   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   493  /*! \brief      Return the current partition index.
; ..\component\EcuM\Implementation\EcuM.c	   494   *  \details    Determine which EcuM / BswM partition instance corresponds to the current OS application.
; ..\component\EcuM\Implementation\EcuM.c	   495   *  \return     Index of the EcuM / BswM partition instance.
; ..\component\EcuM\Implementation\EcuM.c	   496   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   497   *  \context    ANY
; ..\component\EcuM\Implementation\EcuM.c	   498   *  \reentrant  TRUE
; ..\component\EcuM\Implementation\EcuM.c	   499   *  \note       The method returns the size of EcuM_GetPartitionIdx in case that no partition was found.
; ..\component\EcuM\Implementation\EcuM.c	   500   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   501  ECUM_LOCAL FUNC(EcuM_SizeOfPartitionDataType, ECUM_CODE) EcuM_InternalGetPartitionIdx(void);
; ..\component\EcuM\Implementation\EcuM.c	   502  #endif
; ..\component\EcuM\Implementation\EcuM.c	   503  
; ..\component\EcuM\Implementation\EcuM.c	   504  #if (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   505  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   506   *  EcuM_EnterSleep
; ..\component\EcuM\Implementation\EcuM.c	   507   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   508  /*! \brief      Initiate the sleep phase.
; ..\component\EcuM\Implementation\EcuM.c	   509   *  \details    Prepares the ECU for the upcoming sleep phase and invokes either the polling sleep mode or the halt
; ..\component\EcuM\Implementation\EcuM.c	   510   *              mode, depending on the parameter SuspendMode.
; ..\component\EcuM\Implementation\EcuM.c	   511   *  \param[in]  SuspendMode             Can be either ECUM_ENTER_POLL or ECUM_ENTER_HALT.
; ..\component\EcuM\Implementation\EcuM.c	   512   *  \return     E_NOT_OK - error
; ..\component\EcuM\Implementation\EcuM.c	   513   *  \return     E_OK     - success
; ..\component\EcuM\Implementation\EcuM.c	   514   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   515   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   516   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   517   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   518  ECUM_LOCAL FUNC(Std_ReturnType, ECUM_CODE) EcuM_EnterSleep(VAR(uint8, AUTOMATIC) SuspendMode);
; ..\component\EcuM\Implementation\EcuM.c	   519  
; ..\component\EcuM\Implementation\EcuM.c	   520  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   521   *  EcuM_InternalEnterHaltMode()
; ..\component\EcuM\Implementation\EcuM.c	   522   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   523  /*! \brief      Enter a halt sleep mode.
; ..\component\EcuM\Implementation\EcuM.c	   524   *  \details    Sets the ECU in a halt mode during a sleep phase.
; ..\component\EcuM\Implementation\EcuM.c	   525   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   526   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   527   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   528   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   529  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalEnterHaltMode(void);
; ..\component\EcuM\Implementation\EcuM.c	   530  
; ..\component\EcuM\Implementation\EcuM.c	   531  # if(ECUM_POLLINGOFSLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   532  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   533   *  EcuM_InternalEnterPollingMode()
; ..\component\EcuM\Implementation\EcuM.c	   534   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   535  /*! \brief      Enter a polling sleep mode.
; ..\component\EcuM\Implementation\EcuM.c	   536   *  \details    Sets the ECU in a sleep mode which polls cyclically for occurred wake-up events.
; ..\component\EcuM\Implementation\EcuM.c	   537   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   538   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   539   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   540   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   541  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalEnterPollingMode(void);
; ..\component\EcuM\Implementation\EcuM.c	   542  # endif
; ..\component\EcuM\Implementation\EcuM.c	   543  
; ..\component\EcuM\Implementation\EcuM.c	   544  # if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	   545  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   546   *  EcuM_EnterSleepOnSlave
; ..\component\EcuM\Implementation\EcuM.c	   547   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   548  /*! \brief      Set a slave core to sleep.
; ..\component\EcuM\Implementation\EcuM.c	   549   *  \details    Sets a slave core to sleep and signals it to the master core.
; ..\component\EcuM\Implementation\EcuM.c	   550   *  \param[in]  CoreID                  ID of the current running core
; ..\component\EcuM\Implementation\EcuM.c	   551   *  \return     E_NOT_OK - error
; ..\component\EcuM\Implementation\EcuM.c	   552   *  \return     E_OK     - success
; ..\component\EcuM\Implementation\EcuM.c	   553   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   554   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   555   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   556   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   557  ECUM_LOCAL_INLINE FUNC(Std_ReturnType, ECUM_CODE) EcuM_EnterSleepOnSlave(CoreIdType CoreID);
; ..\component\EcuM\Implementation\EcuM.c	   558  # endif
; ..\component\EcuM\Implementation\EcuM.c	   559  #endif
; ..\component\EcuM\Implementation\EcuM.c	   560  
; ..\component\EcuM\Implementation\EcuM.c	   561  #if(ECUM_SLAVE_CORE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   562  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   563   *  EcuM_ShutdownSynchronization
; ..\component\EcuM\Implementation\EcuM.c	   564   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   565  /*! \brief      Synchronizes all EcuM instances during shutdown.
; ..\component\EcuM\Implementation\EcuM.c	   566   *  \details    The EcuM master instance which handles the shutdown waits for all other EcuM instances till they
; ..\component\EcuM\Implementation\EcuM.c	   567                  reached the state shutdown.
; ..\component\EcuM\Implementation\EcuM.c	   568   *  \param[in]  ShutdownState           Target state which shall be reached by all instances.
; ..\component\EcuM\Implementation\EcuM.c	   569   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   570   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   571   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   572   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   573  ECUM_LOCAL FUNC(void, ECUM_CODE) EcuM_ShutdownSynchronization(EcuM_CoreStatusType ShutdownState);
; ..\component\EcuM\Implementation\EcuM.c	   574  #endif
; ..\component\EcuM\Implementation\EcuM.c	   575  
; ..\component\EcuM\Implementation\EcuM.c	   576  #if((ECUM_POSTBUILD_VARIANT_SUPPORT == STD_ON) || (ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE))
; ..\component\EcuM\Implementation\EcuM.c	   577  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   578   *  EcuM_InternalDeterminePbConfiguration()
; ..\component\EcuM\Implementation\EcuM.c	   579   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   580  /*! \brief      Determine the configuration pointer.
; ..\component\EcuM\Implementation\EcuM.c	   581   *  \details    Determines the current configuration pointer and performs some validity checks.
; ..\component\EcuM\Implementation\EcuM.c	   582   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   583   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   584   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   585   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   586  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalDeterminePbConfiguration(void);
; ..\component\EcuM\Implementation\EcuM.c	   587  #endif
; ..\component\EcuM\Implementation\EcuM.c	   588  
; ..\component\EcuM\Implementation\EcuM.c	   589  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   590   *  EcuM_InternalClearWakeupEvent()
; ..\component\EcuM\Implementation\EcuM.c	   591   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   592  /*! \brief      Clear wake-up events.
; ..\component\EcuM\Implementation\EcuM.c	   593   *  \details    Clears the passed wakeup source(s) in the EcuM_ValidatedWakeups, EcuM_PendingWakeups,
; ..\component\EcuM\Implementation\EcuM.c	   594   *              EcuM_PendingCheckWakeups and EcuM_ExpiredWakeups variables.
; ..\component\EcuM\Implementation\EcuM.c	   595   *  \param[in]  WakeupSource            Wakeup event(s) which should be cleared.
; ..\component\EcuM\Implementation\EcuM.c	   596   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   597   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   598   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   599   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   600  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalClearWakeupEvent(
; ..\component\EcuM\Implementation\EcuM.c	   601  VAR(EcuM_WakeupSourceType, AUTOMATIC) WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	   602  
; ..\component\EcuM\Implementation\EcuM.c	   603  #if(ECUM_ALARM_CLOCK_PRESENT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   604  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   605   *  EcuM_InternalClearAlarms()
; ..\component\EcuM\Implementation\EcuM.c	   606   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   607  /*! \brief      Clear all wake-up alarms.
; ..\component\EcuM\Implementation\EcuM.c	   608   *  \details    Clears the wake-up alarm of each configured alarmclock user.
; ..\component\EcuM\Implementation\EcuM.c	   609   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   610   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   611   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   612   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   613  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalClearAlarms(void);
; ..\component\EcuM\Implementation\EcuM.c	   614  
; ..\component\EcuM\Implementation\EcuM.c	   615  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   616   *  EcuM_UpdateMasterAlarm
; ..\component\EcuM\Implementation\EcuM.c	   617   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   618  /*! \brief      Updates the master alarm with next wake-up alarm.
; ..\component\EcuM\Implementation\EcuM.c	   619   *  \details    Determines which users alarm time is the next and uses it for the master alarm.
; ..\component\EcuM\Implementation\EcuM.c	   620   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   621   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   622   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   623   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   624  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_UpdateMasterAlarm(void);
; ..\component\EcuM\Implementation\EcuM.c	   625  #endif
; ..\component\EcuM\Implementation\EcuM.c	   626  
; ..\component\EcuM\Implementation\EcuM.c	   627  #if(ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   628  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   629   *  EcuM_ActEnterRun()
; ..\component\EcuM\Implementation\EcuM.c	   630   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   631  /*! \brief      Actions on transition to RUN state.
; ..\component\EcuM\Implementation\EcuM.c	   632   *  \details    Called in the transition to the RUN state and performs all the necessary actions.
; ..\component\EcuM\Implementation\EcuM.c	   633   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   634   *  \context    TASK
; ..\component\EcuM\Implementation\EcuM.c	   635   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   636   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   637  ECUM_LOCAL FUNC(void, ECUM_CODE) EcuM_ActEnterRun(void);
; ..\component\EcuM\Implementation\EcuM.c	   638  
; ..\component\EcuM\Implementation\EcuM.c	   639  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   640   *  EcuM_Statemachine()
; ..\component\EcuM\Implementation\EcuM.c	   641   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   642  /*! \brief      Triggers the EcuM Statemachine.
; ..\component\EcuM\Implementation\EcuM.c	   643   *  \details    Triggers the EcuM Statemachine and performs necessary actions.
; ..\component\EcuM\Implementation\EcuM.c	   644   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   645   *  \context    TASK
; ..\component\EcuM\Implementation\EcuM.c	   646   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   647   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   648  ECUM_LOCAL FUNC(void, ECUM_CODE) EcuM_Statemachine(void);
; ..\component\EcuM\Implementation\EcuM.c	   649  
; ..\component\EcuM\Implementation\EcuM.c	   650  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   651   *  EcuM_InternalGoDown()
; ..\component\EcuM\Implementation\EcuM.c	   652   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   653  /*! \brief      Initiates the shutdown process.
; ..\component\EcuM\Implementation\EcuM.c	   654   *  \details    Initiates the shutdown process. It de-initializes the SchM, BswM and shuts down the OS.
; ..\component\EcuM\Implementation\EcuM.c	   655   *  \return     E_NOT_OK - error
; ..\component\EcuM\Implementation\EcuM.c	   656   *  \return     E_OK     - success
; ..\component\EcuM\Implementation\EcuM.c	   657   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   658   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   659   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   660   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   661  ECUM_LOCAL_INLINE FUNC(Std_ReturnType, ECUM_CODE) EcuM_InternalGoDown(void);
; ..\component\EcuM\Implementation\EcuM.c	   662  
; ..\component\EcuM\Implementation\EcuM.c	   663  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   664   *  EcuM_InternalKillAllRequests()
; ..\component\EcuM\Implementation\EcuM.c	   665   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   666  /*! \brief      Kills all RUN or POST_RUN requests.
; ..\component\EcuM\Implementation\EcuM.c	   667   *  \details    Kills RUN or POST_RUN requests, requested by any user. The aim of this function is to
; ..\component\EcuM\Implementation\EcuM.c	   668   *              enforce a fast shutdown.
; ..\component\EcuM\Implementation\EcuM.c	   669   *  \param[in]  mask                    ECUM_USER_REQUEST_POST_RUN_MASK or ECUM_USER_REQUEST_RUN_MASK
; ..\component\EcuM\Implementation\EcuM.c	   670   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   671   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   672   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   673   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   674  ECUM_LOCAL FUNC(void, ECUM_CODE) EcuM_InternalKillAllRequests(uint8 mask);
; ..\component\EcuM\Implementation\EcuM.c	   675  
; ..\component\EcuM\Implementation\EcuM.c	   676  # if(ECUM_SUPPORT_COMM == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   677  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   678   *  EcuM_QryComMRunRequest()
; ..\component\EcuM\Implementation\EcuM.c	   679   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   680  /*! \brief      Polls the state of all ComM Channels.
; ..\component\EcuM\Implementation\EcuM.c	   681   *  \details    Polls the state of all ComM channels and returns true if at least on channel still needs
; ..\component\EcuM\Implementation\EcuM.c	   682   *              communication.
; ..\component\EcuM\Implementation\EcuM.c	   683   *  \return     TRUE - At least one channel needs communication
; ..\component\EcuM\Implementation\EcuM.c	   684   *  \return     FALSE - No channel needs communication
; ..\component\EcuM\Implementation\EcuM.c	   685   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   686   *  \context    TASK
; ..\component\EcuM\Implementation\EcuM.c	   687   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   688   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   689  ECUM_LOCAL FUNC(boolean, ECUM_CODE) EcuM_QryComMRunRequest(void);
; ..\component\EcuM\Implementation\EcuM.c	   690  # endif
; ..\component\EcuM\Implementation\EcuM.c	   691  
; ..\component\EcuM\Implementation\EcuM.c	   692  # if (ECUM_INCLUDE_NVRAM_MGR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   693  #  if (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   694  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   695   *  EcuM_WaitOnNvMCancelWriteAll()
; ..\component\EcuM\Implementation\EcuM.c	   696   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   697  /*! \brief      Monitors the status of the NvM write.
; ..\component\EcuM\Implementation\EcuM.c	   698   *  \details    Triggers the NvM_CancelWriteAll and monitors the corresponding timer. If the timer
; ..\component\EcuM\Implementation\EcuM.c	   699   *              expires the API NvM_KillWriteAll is invoked.
; ..\component\EcuM\Implementation\EcuM.c	   700   *  \return     TRUE - stay in current state
; ..\component\EcuM\Implementation\EcuM.c	   701   *  \return     FALSE - switch to the next state
; ..\component\EcuM\Implementation\EcuM.c	   702   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   703   *  \context    TASK
; ..\component\EcuM\Implementation\EcuM.c	   704   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   705   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   706  ECUM_LOCAL_INLINE boolean EcuM_WaitOnNvMCancelWriteAll(void);
; ..\component\EcuM\Implementation\EcuM.c	   707  #  endif
; ..\component\EcuM\Implementation\EcuM.c	   708  
; ..\component\EcuM\Implementation\EcuM.c	   709  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   710   *  EcuM_WaitOnNvMWriteAll()
; ..\component\EcuM\Implementation\EcuM.c	   711   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   712  /*! \brief      Monitors the status of the NvM write.
; ..\component\EcuM\Implementation\EcuM.c	   713   *  \details    Triggers the NvM_WriteAll and monitors the corresponding timer. If the timer expires the
; ..\component\EcuM\Implementation\EcuM.c	   714   *              callout to signal a NvM timeout is invoked.
; ..\component\EcuM\Implementation\EcuM.c	   715   *  \return     TRUE - stay in current state
; ..\component\EcuM\Implementation\EcuM.c	   716   *  \return     FALSE - switch to the next state
; ..\component\EcuM\Implementation\EcuM.c	   717   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   718   *  \context    TASK
; ..\component\EcuM\Implementation\EcuM.c	   719   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   720   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   721  ECUM_LOCAL boolean EcuM_WaitOnNvMWriteAll(void);
; ..\component\EcuM\Implementation\EcuM.c	   722  # endif
; ..\component\EcuM\Implementation\EcuM.c	   723  #endif
; ..\component\EcuM\Implementation\EcuM.c	   724  
; ..\component\EcuM\Implementation\EcuM.c	   725  #if((ECUM_FIXED_BEHAVIOR == STD_ON) ||(ECUM_MODE_HANDLING == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	   726  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   727   *  EcuM_InternalRequestRUN()
; ..\component\EcuM\Implementation\EcuM.c	   728   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   729  /*! \brief      Requests RUN or POST_RUN.
; ..\component\EcuM\Implementation\EcuM.c	   730   *  \details    Requests RUN or POST_RUN requests, requested by a specific user.
; ..\component\EcuM\Implementation\EcuM.c	   731   *  \param[in]  ApiId                   Parameter can be either ECUM_SID_REQUEST_POST_RUN or ECUM_SID_REQUEST_RUN.
; ..\component\EcuM\Implementation\EcuM.c	   732   *  \param[in]  User                    The user which wants to request RUN or POST_RUN.
; ..\component\EcuM\Implementation\EcuM.c	   733   *  \param[in]  mask                    ECUM_USER_REQUEST_POST_RUN_MASK or ECUM_USER_REQUEST_RUN_MASK
; ..\component\EcuM\Implementation\EcuM.c	   734   *  \return     E_NOT_OK - error
; ..\component\EcuM\Implementation\EcuM.c	   735   *  \return     E_OK     - success
; ..\component\EcuM\Implementation\EcuM.c	   736   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   737   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   738   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   739   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   740  ECUM_LOCAL FUNC(Std_ReturnType, ECUM_CODE) EcuM_InternalRequestRUN(uint8 ApiId, EcuM_UserType User, uint8 mask);
; ..\component\EcuM\Implementation\EcuM.c	   741  
; ..\component\EcuM\Implementation\EcuM.c	   742  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   743   *  EcuM_InternalReleaseRUN()
; ..\component\EcuM\Implementation\EcuM.c	   744   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   745  /*! \brief      Releases RUN or POST_RUN.
; ..\component\EcuM\Implementation\EcuM.c	   746   *  \details    Releases RUN or POST_RUN requests, requested by a specific user.
; ..\component\EcuM\Implementation\EcuM.c	   747   *  \param[in]  ApiId                   Parameter can be either ECUM_SID_RELEASE_POST_RUN or ECUM_SID_RELEASE_RUN
; ..\component\EcuM\Implementation\EcuM.c	   748   *  \param[in]  User                    The user which wants to release RUN or POST_RUN.
; ..\component\EcuM\Implementation\EcuM.c	   749   *  \param[in]  mask                    ECUM_USER_REQUEST_POST_RUN_MASK or ECUM_USER_REQUEST_RUN_MASK
; ..\component\EcuM\Implementation\EcuM.c	   750   *  \return     E_NOT_OK - error
; ..\component\EcuM\Implementation\EcuM.c	   751   *  \return     E_OK     - success
; ..\component\EcuM\Implementation\EcuM.c	   752   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   753   *  \context    TASK|ISR
; ..\component\EcuM\Implementation\EcuM.c	   754   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   755   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   756  ECUM_LOCAL FUNC(Std_ReturnType, ECUM_CODE) EcuM_InternalReleaseRUN(uint8 ApiId, EcuM_UserType User, uint8 mask);
; ..\component\EcuM\Implementation\EcuM.c	   757  #endif
; ..\component\EcuM\Implementation\EcuM.c	   758  
; ..\component\EcuM\Implementation\EcuM.c	   759  #if(ECUM_MODE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   760  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   761   *  EcuM_InternalRteFeedbackCheck()
; ..\component\EcuM\Implementation\EcuM.c	   762   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   763  /*! \brief      Checks the Rte acknowledge.
; ..\component\EcuM\Implementation\EcuM.c	   764   *  \details    Checks if the Rte has acknowledged the last mode switch.
; ..\component\EcuM\Implementation\EcuM.c	   765   *  \pre        -
; ..\component\EcuM\Implementation\EcuM.c	   766   *  \context    TASK
; ..\component\EcuM\Implementation\EcuM.c	   767   *  \reentrant  FALSE
; ..\component\EcuM\Implementation\EcuM.c	   768   *********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   769  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalRteFeedbackCheck(void);
; ..\component\EcuM\Implementation\EcuM.c	   770  #endif
; ..\component\EcuM\Implementation\EcuM.c	   771  
; ..\component\EcuM\Implementation\EcuM.c	   772  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   773   *  LOCAL FUNCTIONS
; ..\component\EcuM\Implementation\EcuM.c	   774   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   775  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   776   *  EcuM_InternalGetShutdownTargetAndMode()
; ..\component\EcuM\Implementation\EcuM.c	   777   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   778   /*!
; ..\component\EcuM\Implementation\EcuM.c	   779   *
; ..\component\EcuM\Implementation\EcuM.c	   780   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	   781   *
; ..\component\EcuM\Implementation\EcuM.c	   782   *
; ..\component\EcuM\Implementation\EcuM.c	   783   */
; ..\component\EcuM\Implementation\EcuM.c	   784  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalGetShutdownTargetAndMode(EcuM_StateType* target, uint8* mode)
; Function EcuM_InternalGetShutdownTargetAndMode
.L116:
EcuM_InternalGetShutdownTargetAndMode:	.type	func
	mov.aa	a15,a4
.L490:
	mov.aa	a12,a5
.L492:

; ..\component\EcuM\Implementation\EcuM.c	   785  {
; ..\component\EcuM\Implementation\EcuM.c	   786    EcuM_EnterCriticalArea_3();
	call	SuspendAllInterrupts
.L489:

; ..\component\EcuM\Implementation\EcuM.c	   787    *target = EcuM_CurrentShutdownTarget; /* SBSW_ECUM_POINTERACCESS_SHUTDOWNTARGET */
	movh.a	a2,#@his(EcuM_CurrentShutdownTarget)
	ld.bu	d15,[a2]@los(EcuM_CurrentShutdownTarget)
.L810:
	st.b	[a15],d15
.L811:

; ..\component\EcuM\Implementation\EcuM.c	   788    *mode = EcuM_CurrentShutdownMode; /* SBSW_ECUM_POINTERACCESS_SHUTDOWNTARGET */
	movh.a	a15,#@his(EcuM_CurrentShutdownMode)
.L491:
	ld.bu	d15,[a15]@los(EcuM_CurrentShutdownMode)
.L812:
	st.b	[a12],d15
.L813:

; ..\component\EcuM\Implementation\EcuM.c	   789    EcuM_LeaveCriticalArea_3();
	j	ResumeAllInterrupts
.L471:
	
__EcuM_InternalGetShutdownTargetAndMode_function_end:
	.size	EcuM_InternalGetShutdownTargetAndMode,__EcuM_InternalGetShutdownTargetAndMode_function_end-EcuM_InternalGetShutdownTargetAndMode
.L305:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_InternalSetShutdownTargetAndMode',code,cluster('EcuM_InternalSetShutdownTargetAndMode')
	.sect	'.text.EcuM.EcuM_InternalSetShutdownTargetAndMode'
	.align	2
	

; ..\component\EcuM\Implementation\EcuM.c	   790  }
; ..\component\EcuM\Implementation\EcuM.c	   791  
; ..\component\EcuM\Implementation\EcuM.c	   792  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   793  *  EcuM_InternalSetShutdownTargetAndMode()
; ..\component\EcuM\Implementation\EcuM.c	   794  **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   795  /*!
; ..\component\EcuM\Implementation\EcuM.c	   796  *
; ..\component\EcuM\Implementation\EcuM.c	   797  * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	   798   *
; ..\component\EcuM\Implementation\EcuM.c	   799   *
; ..\component\EcuM\Implementation\EcuM.c	   800  */
; ..\component\EcuM\Implementation\EcuM.c	   801  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalSetShutdownTargetAndMode(EcuM_StateType target, uint8 mode)
; Function EcuM_InternalSetShutdownTargetAndMode
.L118:
EcuM_InternalSetShutdownTargetAndMode:	.type	func
	mov	d15,d4
.L494:

; ..\component\EcuM\Implementation\EcuM.c	   802  {
; ..\component\EcuM\Implementation\EcuM.c	   803    EcuM_EnterCriticalArea_3();
	mov	d8,d5
	call	SuspendAllInterrupts
.L493:

; ..\component\EcuM\Implementation\EcuM.c	   804    EcuM_CurrentShutdownTarget = target;
	movh.a	a15,#@his(EcuM_CurrentShutdownTarget)
.L818:
	st.b	[a15]@los(EcuM_CurrentShutdownTarget),d15
.L819:

; ..\component\EcuM\Implementation\EcuM.c	   805    EcuM_CurrentShutdownMode = mode;
	movh.a	a15,#@his(EcuM_CurrentShutdownMode)
.L820:
	st.b	[a15]@los(EcuM_CurrentShutdownMode),d8
.L821:

; ..\component\EcuM\Implementation\EcuM.c	   806    EcuM_LeaveCriticalArea_3();
	j	ResumeAllInterrupts
.L475:
	
__EcuM_InternalSetShutdownTargetAndMode_function_end:
	.size	EcuM_InternalSetShutdownTargetAndMode,__EcuM_InternalSetShutdownTargetAndMode_function_end-EcuM_InternalSetShutdownTargetAndMode
.L310:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_GetShiftCount',code,cluster('EcuM_GetShiftCount')
	.sect	'.text.EcuM.EcuM_GetShiftCount'
	.align	2
	

; ..\component\EcuM\Implementation\EcuM.c	   807  }
; ..\component\EcuM\Implementation\EcuM.c	   808  
; ..\component\EcuM\Implementation\EcuM.c	   809  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   810   *  EcuM_GetShiftCount()
; ..\component\EcuM\Implementation\EcuM.c	   811   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   812  /*!
; ..\component\EcuM\Implementation\EcuM.c	   813   *
; ..\component\EcuM\Implementation\EcuM.c	   814   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	   815   *
; ..\component\EcuM\Implementation\EcuM.c	   816   *
; ..\component\EcuM\Implementation\EcuM.c	   817   *
; ..\component\EcuM\Implementation\EcuM.c	   818   */
; ..\component\EcuM\Implementation\EcuM.c	   819  ECUM_LOCAL FUNC(uint8, ECUM_CODE) EcuM_GetShiftCount(EcuM_WakeupSourceType x)
; Function EcuM_GetShiftCount
.L120:
EcuM_GetShiftCount:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	   820  {
; ..\component\EcuM\Implementation\EcuM.c	   821    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	   822    uint8 retval = 0;
	mov	d2,#0
.L495:

; ..\component\EcuM\Implementation\EcuM.c	   823    EcuM_WakeupSourceType xlocal = x;
; ..\component\EcuM\Implementation\EcuM.c	   824  
; ..\component\EcuM\Implementation\EcuM.c	   825    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	   826    xlocal = xlocal - (EcuM_WakeupSourceType) 1u;
; ..\component\EcuM\Implementation\EcuM.c	   827  
; ..\component\EcuM\Implementation\EcuM.c	   828    /* #30 Shift the passed parameter in single steps till the LSB of the passed parameter is set (1). The iteration steps
; ..\component\EcuM\Implementation\EcuM.c	   829     * represent the wanted shiftcount. */
; ..\component\EcuM\Implementation\EcuM.c	   830    while ((xlocal & 1u) != 0u)
	add	d4,#-1
	j	.L2
.L3:

; ..\component\EcuM\Implementation\EcuM.c	   831    {
; ..\component\EcuM\Implementation\EcuM.c	   832      retval++;
	add	d2,#1
.L496:
	extr.u	d2,d2,#0,#8
.L497:

; ..\component\EcuM\Implementation\EcuM.c	   833      /* Right shift with unsigned value is handled as a logical shift in ISO C99 - 0 is inserted as MSB. */
; ..\component\EcuM\Implementation\EcuM.c	   834      xlocal >>= 1u;
	sh	d4,#-1
.L2:
	jnz.t	d4:0,.L3
.L826:

; ..\component\EcuM\Implementation\EcuM.c	   835    }
; ..\component\EcuM\Implementation\EcuM.c	   836  
; ..\component\EcuM\Implementation\EcuM.c	   837    return retval;
; ..\component\EcuM\Implementation\EcuM.c	   838  } /* End of EcuM_GetShiftCount() */
	ret
.L478:
	
__EcuM_GetShiftCount_function_end:
	.size	EcuM_GetShiftCount,__EcuM_GetShiftCount_function_end-EcuM_GetShiftCount
.L315:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_InternalComMNotifications',code,cluster('EcuM_InternalComMNotifications')
	.sect	'.text.EcuM.EcuM_InternalComMNotifications'
	.align	2
	

; ..\component\EcuM\Implementation\EcuM.c	   839  
; ..\component\EcuM\Implementation\EcuM.c	   840  #if (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   841  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	   842   *  EcuM_EnterSleep()
; ..\component\EcuM\Implementation\EcuM.c	   843   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	   844  /*!
; ..\component\EcuM\Implementation\EcuM.c	   845   *
; ..\component\EcuM\Implementation\EcuM.c	   846   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	   847   *
; ..\component\EcuM\Implementation\EcuM.c	   848   *
; ..\component\EcuM\Implementation\EcuM.c	   849   *
; ..\component\EcuM\Implementation\EcuM.c	   850   *
; ..\component\EcuM\Implementation\EcuM.c	   851   *
; ..\component\EcuM\Implementation\EcuM.c	   852   *
; ..\component\EcuM\Implementation\EcuM.c	   853   *
; ..\component\EcuM\Implementation\EcuM.c	   854   *
; ..\component\EcuM\Implementation\EcuM.c	   855   *
; ..\component\EcuM\Implementation\EcuM.c	   856   *
; ..\component\EcuM\Implementation\EcuM.c	   857   *
; ..\component\EcuM\Implementation\EcuM.c	   858   *
; ..\component\EcuM\Implementation\EcuM.c	   859   *
; ..\component\EcuM\Implementation\EcuM.c	   860   *
; ..\component\EcuM\Implementation\EcuM.c	   861   *
; ..\component\EcuM\Implementation\EcuM.c	   862   *
; ..\component\EcuM\Implementation\EcuM.c	   863   *
; ..\component\EcuM\Implementation\EcuM.c	   864   *
; ..\component\EcuM\Implementation\EcuM.c	   865   *
; ..\component\EcuM\Implementation\EcuM.c	   866   *
; ..\component\EcuM\Implementation\EcuM.c	   867   *
; ..\component\EcuM\Implementation\EcuM.c	   868   *
; ..\component\EcuM\Implementation\EcuM.c	   869   *
; ..\component\EcuM\Implementation\EcuM.c	   870   *
; ..\component\EcuM\Implementation\EcuM.c	   871   *
; ..\component\EcuM\Implementation\EcuM.c	   872   *
; ..\component\EcuM\Implementation\EcuM.c	   873   *
; ..\component\EcuM\Implementation\EcuM.c	   874   *
; ..\component\EcuM\Implementation\EcuM.c	   875   *
; ..\component\EcuM\Implementation\EcuM.c	   876   */
; ..\component\EcuM\Implementation\EcuM.c	   877  ECUM_LOCAL FUNC(Std_ReturnType, ECUM_CODE) EcuM_EnterSleep(VAR(uint8, AUTOMATIC) SuspendMode)
; ..\component\EcuM\Implementation\EcuM.c	   878  {
; ..\component\EcuM\Implementation\EcuM.c	   879    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	   880    Std_ReturnType retval;
; ..\component\EcuM\Implementation\EcuM.c	   881    EcuM_StateType localShutdownTarget;
; ..\component\EcuM\Implementation\EcuM.c	   882    uint8 localShutdownMode;
; ..\component\EcuM\Implementation\EcuM.c	   883  
; ..\component\EcuM\Implementation\EcuM.c	   884    EcuM_InternalGetShutdownTargetAndMode(&localShutdownTarget, &localShutdownMode); /* SBSW_ECUM_POINTER_TO_LOCAL_VARIABLES */
; ..\component\EcuM\Implementation\EcuM.c	   885  
; ..\component\EcuM\Implementation\EcuM.c	   886  # if (ECUM_POLLINGOFSLEEPMODELIST == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	   887    ECUM_DUMMY_STATEMENT(SuspendMode); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	   888  # endif
; ..\component\EcuM\Implementation\EcuM.c	   889    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	   890    /* #30 Check if Shutdown Target is set correctly (ECUM_STATE_SLEEP). */
; ..\component\EcuM\Implementation\EcuM.c	   891    if (localShutdownTarget == ECUM_STATE_SLEEP)
; ..\component\EcuM\Implementation\EcuM.c	   892    {
; ..\component\EcuM\Implementation\EcuM.c	   893  # if(ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	   894      EcuM_SetModuleState(ECUM_STATE_GO_SLEEP); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	   895  # endif
; ..\component\EcuM\Implementation\EcuM.c	   896  
; ..\component\EcuM\Implementation\EcuM.c	   897      /* #31 If the Alarm Clock Feature is enabled, activate the GPT EnableWakeup feature, start the timer and set the GPT Mode to Sleep. */
; ..\component\EcuM\Implementation\EcuM.c	   898  # if (ECUM_ALARM_CLOCK_PRESENT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   899      EcuM_GptSetSleep((Gpt_ChannelType)EcuM_GetGptChannel(), GPT_MODE_SLEEP);
; ..\component\EcuM\Implementation\EcuM.c	   900  # endif
; ..\component\EcuM\Implementation\EcuM.c	   901  
; ..\component\EcuM\Implementation\EcuM.c	   902  # if (ECUM_ISDEF_WAKEUPSOURCEOFSLEEPMODELIST == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	   903      /* #32 Disable wakeup sources which are not active during this sleep mode and are still active from last sleepmode. */
; ..\component\EcuM\Implementation\EcuM.c	   904      if ((EcuM_EnabledWakeups & (~EcuM_GetWakeupSourceOfSleepModeList(localShutdownMode))) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	   905      {
; ..\component\EcuM\Implementation\EcuM.c	   906        EcuM_DisableWakeupSources(EcuM_EnabledWakeups & (~EcuM_GetWakeupSourceOfSleepModeList(localShutdownMode)));
; ..\component\EcuM\Implementation\EcuM.c	   907      }
; ..\component\EcuM\Implementation\EcuM.c	   908  # endif
; ..\component\EcuM\Implementation\EcuM.c	   909  
; ..\component\EcuM\Implementation\EcuM.c	   910      /* #33 Enable the wakeup sources of the current sleep mode for the upcoming sleep phase. */
; ..\component\EcuM\Implementation\EcuM.c	   911  
; ..\component\EcuM\Implementation\EcuM.c	   912      /*  The wakeup sources can be derived from the EcuM_SleepModeList, the correct entry of the list is
; ..\component\EcuM\Implementation\EcuM.c	   913       *  selected by the currently configured EcuM_ShutdownMode. */
; ..\component\EcuM\Implementation\EcuM.c	   914  
; ..\component\EcuM\Implementation\EcuM.c	   915      EcuM_EnableWakeupSources(EcuM_GetWakeupSourceOfSleepModeList(localShutdownMode) & (~EcuM_EnabledWakeups));
; ..\component\EcuM\Implementation\EcuM.c	   916      EcuM_EnabledWakeups = EcuM_GetWakeupSourceOfSleepModeList(localShutdownMode);
; ..\component\EcuM\Implementation\EcuM.c	   917  
; ..\component\EcuM\Implementation\EcuM.c	   918      /* #34 Notify the BswM about the enabled wakeup sources. */
; ..\component\EcuM\Implementation\EcuM.c	   919      BswM_EcuM_CurrentWakeup(EcuM_EnabledWakeups, ECUM_WKSTATUS_ENABLED);
; ..\component\EcuM\Implementation\EcuM.c	   920  
; ..\component\EcuM\Implementation\EcuM.c	   921      /* #35 Block the scheduler to avoid interruption of the sleep phase by other tasks. */
; ..\component\EcuM\Implementation\EcuM.c	   922      (void)GetResource(ECUM_SLEEP_RESOURCE);
; ..\component\EcuM\Implementation\EcuM.c	   923  
; ..\component\EcuM\Implementation\EcuM.c	   924      /* #36 In case of a multicore Ecu set the core status of the BSW core to sleep and wait till all other slave cores
; ..\component\EcuM\Implementation\EcuM.c	   925       *  are also in sleep. */
; ..\component\EcuM\Implementation\EcuM.c	   926  # if (ECUM_SLAVE_CORE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   927      EcuM_SetCoreStatusValue(ECUM_CORE_ID_BSW, ECUM_CORESTATUS_SLEEP); /* SBSW_SETCORESTATUS_BSWCOREID */
; ..\component\EcuM\Implementation\EcuM.c	   928      EcuM_ShutdownSynchronization(ECUM_CORESTATUS_SLEEP);
; ..\component\EcuM\Implementation\EcuM.c	   929  # endif
; ..\component\EcuM\Implementation\EcuM.c	   930  
; ..\component\EcuM\Implementation\EcuM.c	   931      /* #37 Suspend all interrupts here to do not miss an interrupt till the call of Mcu_SetMode. The interrupts will be unlocked again by
; ..\component\EcuM\Implementation\EcuM.c	   932       *     the Mcu during entering of the sleep mode. */
; ..\component\EcuM\Implementation\EcuM.c	   933      EcuM_GlobalSuspend();
; ..\component\EcuM\Implementation\EcuM.c	   934  
; ..\component\EcuM\Implementation\EcuM.c	   935      /* #38 Check for occurrence of wakeup events in the EnterSleep sequence before interrupts have been locked. */
; ..\component\EcuM\Implementation\EcuM.c	   936      if (ECUM_COMBINEDWAKEUPS == (EcuM_WakeupSourceType) ECUM_WKSOURCE_NONE)
; ..\component\EcuM\Implementation\EcuM.c	   937      {
; ..\component\EcuM\Implementation\EcuM.c	   938  # if(ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	   939        /* #40 In case of no occurred wakeup event, continue the sleep handling. */
; ..\component\EcuM\Implementation\EcuM.c	   940        EcuM_SetModuleState(ECUM_STATE_SLEEP); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	   941  # endif
; ..\component\EcuM\Implementation\EcuM.c	   942  
; ..\component\EcuM\Implementation\EcuM.c	   943        /* Store the LastShutdownTarget and LastShutdownMode. */
; ..\component\EcuM\Implementation\EcuM.c	   944        EcuM_LastShutdownTarget = localShutdownTarget;
; ..\component\EcuM\Implementation\EcuM.c	   945        EcuM_LastShutdownMode = localShutdownMode;
; ..\component\EcuM\Implementation\EcuM.c	   946  
; ..\component\EcuM\Implementation\EcuM.c	   947  # if(ECUM_POLLINGOFSLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   948        /* Check if EcuM_EnterSleep is called by EcuM_GoPoll or EcuM_GoHalt. */
; ..\component\EcuM\Implementation\EcuM.c	   949        if (SuspendMode == ECUM_ENTER_POLL)
; ..\component\EcuM\Implementation\EcuM.c	   950        {
; ..\component\EcuM\Implementation\EcuM.c	   951          EcuM_InternalEnterPollingMode();
; ..\component\EcuM\Implementation\EcuM.c	   952        }
; ..\component\EcuM\Implementation\EcuM.c	   953        else
; ..\component\EcuM\Implementation\EcuM.c	   954  # endif
; ..\component\EcuM\Implementation\EcuM.c	   955        {
; ..\component\EcuM\Implementation\EcuM.c	   956          EcuM_InternalEnterHaltMode();
; ..\component\EcuM\Implementation\EcuM.c	   957        }
; ..\component\EcuM\Implementation\EcuM.c	   958      }
; ..\component\EcuM\Implementation\EcuM.c	   959      else
; ..\component\EcuM\Implementation\EcuM.c	   960      {
; ..\component\EcuM\Implementation\EcuM.c	   961        /* #39 In case of an occurred wakeup event, continue with the wakeup restart sequence. */
; ..\component\EcuM\Implementation\EcuM.c	   962        EcuM_GlobalRestore();
; ..\component\EcuM\Implementation\EcuM.c	   963      }
; ..\component\EcuM\Implementation\EcuM.c	   964  # if(ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	   965      EcuM_SetModuleState(ECUM_STATE_WAKEUP_ONE); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	   966  # endif
; ..\component\EcuM\Implementation\EcuM.c	   967  
; ..\component\EcuM\Implementation\EcuM.c	   968      /* #41 Restore the Mcu normal mode with suspended interrupts (requirement of the Mcu_SetMode API). */
; ..\component\EcuM\Implementation\EcuM.c	   969      EcuM_GlobalSuspend();
; ..\component\EcuM\Implementation\EcuM.c	   970  
; ..\component\EcuM\Implementation\EcuM.c	   971      EcuM_McuSetMode((Mcu_ModeType) EcuM_GetNormalMcuMode());
; ..\component\EcuM\Implementation\EcuM.c	   972  
; ..\component\EcuM\Implementation\EcuM.c	   973      EcuM_GlobalRestore();
; ..\component\EcuM\Implementation\EcuM.c	   974  
; ..\component\EcuM\Implementation\EcuM.c	   975      /* #42 In case the Alarm Clock Feature is enabled, activate the GPT EnableNotification feature and set the
; ..\component\EcuM\Implementation\EcuM.c	   976       *      GPT Mode to Normal. */
; ..\component\EcuM\Implementation\EcuM.c	   977  # if (ECUM_ALARM_CLOCK_PRESENT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   978  
; ..\component\EcuM\Implementation\EcuM.c	   979      EcuM_GptSetNormal((Gpt_ChannelType)EcuM_GetGptChannel(), GPT_MODE_NORMAL);
; ..\component\EcuM\Implementation\EcuM.c	   980  
; ..\component\EcuM\Implementation\EcuM.c	   981      /* #43 Clear all further User Alarms. */
; ..\component\EcuM\Implementation\EcuM.c	   982      EcuM_InternalClearAlarms();
; ..\component\EcuM\Implementation\EcuM.c	   983  
; ..\component\EcuM\Implementation\EcuM.c	   984  # endif
; ..\component\EcuM\Implementation\EcuM.c	   985  
; ..\component\EcuM\Implementation\EcuM.c	   986      /* #50 Transit to RUN if at least one source is already validated. */
; ..\component\EcuM\Implementation\EcuM.c	   987  # if(ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   988      if (EcuM_ValidatedWakeups != 0u)
; ..\component\EcuM\Implementation\EcuM.c	   989  # endif
; ..\component\EcuM\Implementation\EcuM.c	   990      {
; ..\component\EcuM\Implementation\EcuM.c	   991        /* #51 Disable all sources that were active during the current sleepmode.
; ..\component\EcuM\Implementation\EcuM.c	   992         *     Notify all sources which are not validated yet to the BswM as ECUM_WKSTATUS_NONE. */
; ..\component\EcuM\Implementation\EcuM.c	   993        EcuM_DisableWakeupSources(EcuM_EnabledWakeups);
; ..\component\EcuM\Implementation\EcuM.c	   994  
; ..\component\EcuM\Implementation\EcuM.c	   995        BswM_EcuM_CurrentWakeup((EcuM_EnabledWakeups & (~ECUM_COMBINEDWAKEUPS)), ECUM_WKSTATUS_NONE);
; ..\component\EcuM\Implementation\EcuM.c	   996  
; ..\component\EcuM\Implementation\EcuM.c	   997        /* #52 If the BswM deferred notification is active, notify the validated wakeup events to BswM here. */
; ..\component\EcuM\Implementation\EcuM.c	   998  # if (ECUM_DEFERRED_BSWM_NOTIFICATION == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	   999        EcuM_BswM_BufferedWakeups = 0u;
; ..\component\EcuM\Implementation\EcuM.c	  1000        BswM_EcuM_CurrentWakeup(EcuM_ValidatedWakeups, ECUM_WKSTATUS_VALIDATED);
; ..\component\EcuM\Implementation\EcuM.c	  1001  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1002  
; ..\component\EcuM\Implementation\EcuM.c	  1003        EcuM_EnabledWakeups = 0u;
; ..\component\EcuM\Implementation\EcuM.c	  1004  
; ..\component\EcuM\Implementation\EcuM.c	  1005  # if(ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  1006        /* Transit the EcuM state to run */
; ..\component\EcuM\Implementation\EcuM.c	  1007        EcuM_SetModuleState(ECUM_STATE_RUN); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  1008  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1009      }
; ..\component\EcuM\Implementation\EcuM.c	  1010  # if(ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1011      /* #55 Transit to WAKEUP_VALIDATION if no wakeup source is validated. */
; ..\component\EcuM\Implementation\EcuM.c	  1012      else
; ..\component\EcuM\Implementation\EcuM.c	  1013      {
; ..\component\EcuM\Implementation\EcuM.c	  1014        EcuM_EnterCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1015  
; ..\component\EcuM\Implementation\EcuM.c	  1016        if((EcuM_EnabledWakeups & EcuM_PendingWakeups) != 0u )
; ..\component\EcuM\Implementation\EcuM.c	  1017        {
; ..\component\EcuM\Implementation\EcuM.c	  1018          /* #56 Disable only sources which where enabled and a wake-up event occurred, but leave the other sources
; ..\component\EcuM\Implementation\EcuM.c	  1019           * armed for later wakeups. */
; ..\component\EcuM\Implementation\EcuM.c	  1020          EcuM_DisableWakeupSources((EcuM_WakeupSourceType)(EcuM_EnabledWakeups & EcuM_PendingWakeups));
; ..\component\EcuM\Implementation\EcuM.c	  1021          EcuM_EnabledWakeups &= (~EcuM_PendingWakeups);
; ..\component\EcuM\Implementation\EcuM.c	  1022        }
; ..\component\EcuM\Implementation\EcuM.c	  1023  
; ..\component\EcuM\Implementation\EcuM.c	  1024        EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1025  
; ..\component\EcuM\Implementation\EcuM.c	  1026        /* #57 If the BswM deferred notification is active, notify the pending wakeup events to BswM here. */
; ..\component\EcuM\Implementation\EcuM.c	  1027  #  if (ECUM_DEFERRED_BSWM_NOTIFICATION == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1028        BswM_EcuM_CurrentWakeup(EcuM_PendingWakeups, ECUM_WKSTATUS_PENDING);
; ..\component\EcuM\Implementation\EcuM.c	  1029  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  1030  #  if(ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  1031        EcuM_SetModuleState(ECUM_STATE_WAKEUP_VALIDATION); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  1032  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1033      }
; ..\component\EcuM\Implementation\EcuM.c	  1034  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1035  
; ..\component\EcuM\Implementation\EcuM.c	  1036      /* #60 Re-initialize necessary modules (EcuM_AL_DriverRestartList()). */
; ..\component\EcuM\Implementation\EcuM.c	  1037      ECUM_DRIVERRESTART_LIST(); /* SBSW_ECUM_FUNCTIONPOINTER_CALL */
; ..\component\EcuM\Implementation\EcuM.c	  1038  
; ..\component\EcuM\Implementation\EcuM.c	  1039      /* #61 Unlock the scheduler to continue task scheduling. */
; ..\component\EcuM\Implementation\EcuM.c	  1040      (void)ReleaseResource(ECUM_SLEEP_RESOURCE);
; ..\component\EcuM\Implementation\EcuM.c	  1041  
; ..\component\EcuM\Implementation\EcuM.c	  1042      /* #62 In case of a multicore Ecu set the core status of the BSW core to run again to continue running of the slave cores. */
; ..\component\EcuM\Implementation\EcuM.c	  1043  # if (ECUM_SLAVE_CORE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1044      EcuM_EnterCriticalArea_1();
; ..\component\EcuM\Implementation\EcuM.c	  1045  
; ..\component\EcuM\Implementation\EcuM.c	  1046      EcuM_SetCoreStatusValue(ECUM_CORE_ID_BSW, ECUM_CORESTATUS_RUN); /* SBSW_SETCORESTATUS_BSWCOREID */
; ..\component\EcuM\Implementation\EcuM.c	  1047  
; ..\component\EcuM\Implementation\EcuM.c	  1048      EcuM_LeaveCriticalArea_1();
; ..\component\EcuM\Implementation\EcuM.c	  1049  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1050  
; ..\component\EcuM\Implementation\EcuM.c	  1051      retval = E_OK;
; ..\component\EcuM\Implementation\EcuM.c	  1052    }
; ..\component\EcuM\Implementation\EcuM.c	  1053    else
; ..\component\EcuM\Implementation\EcuM.c	  1054    {
; ..\component\EcuM\Implementation\EcuM.c	  1055      retval = E_NOT_OK;
; ..\component\EcuM\Implementation\EcuM.c	  1056    }
; ..\component\EcuM\Implementation\EcuM.c	  1057  
; ..\component\EcuM\Implementation\EcuM.c	  1058    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  1059  
; ..\component\EcuM\Implementation\EcuM.c	  1060  } /* PRQA S 6050 */ /* MD_MSR_STCAL */
; ..\component\EcuM\Implementation\EcuM.c	  1061  
; ..\component\EcuM\Implementation\EcuM.c	  1062  # if (ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  1063  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1064   *  EcuM_EnterSleepOnSlave()
; ..\component\EcuM\Implementation\EcuM.c	  1065   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1066  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1067   *
; ..\component\EcuM\Implementation\EcuM.c	  1068   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1069   *
; ..\component\EcuM\Implementation\EcuM.c	  1070   *
; ..\component\EcuM\Implementation\EcuM.c	  1071   *
; ..\component\EcuM\Implementation\EcuM.c	  1072   *
; ..\component\EcuM\Implementation\EcuM.c	  1073   *
; ..\component\EcuM\Implementation\EcuM.c	  1074   *
; ..\component\EcuM\Implementation\EcuM.c	  1075   *
; ..\component\EcuM\Implementation\EcuM.c	  1076   *
; ..\component\EcuM\Implementation\EcuM.c	  1077   *
; ..\component\EcuM\Implementation\EcuM.c	  1078   *
; ..\component\EcuM\Implementation\EcuM.c	  1079   *
; ..\component\EcuM\Implementation\EcuM.c	  1080   *
; ..\component\EcuM\Implementation\EcuM.c	  1081   *
; ..\component\EcuM\Implementation\EcuM.c	  1082   */
; ..\component\EcuM\Implementation\EcuM.c	  1083  ECUM_LOCAL_INLINE FUNC(Std_ReturnType, ECUM_CODE) EcuM_EnterSleepOnSlave(CoreIdType CoreID)
; ..\component\EcuM\Implementation\EcuM.c	  1084  {
; ..\component\EcuM\Implementation\EcuM.c	  1085  #  if(ECUM_SLAVE_CORE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1086    boolean WaitOnMaster = TRUE;
; ..\component\EcuM\Implementation\EcuM.c	  1087  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  1088  
; ..\component\EcuM\Implementation\EcuM.c	  1089  #  if(ECUM_RESOURCEOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1090    EcuM_SizeOfPartitionDataType applicationIdx = EcuM_InternalGetPartitionIdx();
; ..\component\EcuM\Implementation\EcuM.c	  1091    /* #60 Block the scheduler to avoid interruption of the sleep phase by other tasks. */
; ..\component\EcuM\Implementation\EcuM.c	  1092    if ((applicationIdx < EcuM_GetSizeOfPartitionData() )
; ..\component\EcuM\Implementation\EcuM.c	  1093      /* In case of a non-EcuM partition, Resource handling is not existent */
; ..\component\EcuM\Implementation\EcuM.c	  1094  #   if(ECUM_ISDEF_ECUMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  1095      && (EcuM_IsEcuMPartitionOfPartitionData(applicationIdx))
; ..\component\EcuM\Implementation\EcuM.c	  1096  #   endif
; ..\component\EcuM\Implementation\EcuM.c	  1097      )
; ..\component\EcuM\Implementation\EcuM.c	  1098    {
; ..\component\EcuM\Implementation\EcuM.c	  1099      (void)GetResource(EcuM_GetResourceOfPartitionData(applicationIdx));
; ..\component\EcuM\Implementation\EcuM.c	  1100  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  1101  
; ..\component\EcuM\Implementation\EcuM.c	  1102  #  if(ECUM_SLAVE_CORE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1103      /* #30 Set the status of this slave core to sleep for synchronization with the BSW core. */
; ..\component\EcuM\Implementation\EcuM.c	  1104      EcuM_EnterCriticalArea_1();
; ..\component\EcuM\Implementation\EcuM.c	  1105      EcuM_SetCoreStatusValue(CoreID, ECUM_CORESTATUS_SLEEP); /* SBSW_SETCORESTATUS_OSCOREID */
; ..\component\EcuM\Implementation\EcuM.c	  1106      EcuM_LeaveCriticalArea_1();
; ..\component\EcuM\Implementation\EcuM.c	  1107  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  1108  
; ..\component\EcuM\Implementation\EcuM.c	  1109      EcuM_GlobalSuspend();
; ..\component\EcuM\Implementation\EcuM.c	  1110  
; ..\component\EcuM\Implementation\EcuM.c	  1111      /* #31 Suspend all interrupts here to do not miss an interrupt till the call of Mcu_SetMode. The interrupts will be unlocked again by
; ..\component\EcuM\Implementation\EcuM.c	  1112       *     the Mcu during entering of the sleep mode.
; ..\component\EcuM\Implementation\EcuM.c	  1113       *     Because the Mcu does potentially not use the OS functionality to lock interrupts it is necessary to restore the interrupts
; ..\component\EcuM\Implementation\EcuM.c	  1114       *     after returning from Mcu_SetMode to bring the interrupt setting of the OS in a consistent state.
; ..\component\EcuM\Implementation\EcuM.c	  1115  
; ..\component\EcuM\Implementation\EcuM.c	  1116       *     Mcu_SetMode is called in a loop till at least one wakeup source is set. This is done to prevent waking up caused by
; ..\component\EcuM\Implementation\EcuM.c	  1117       *     unwanted events e.g. EMC spikes. */
; ..\component\EcuM\Implementation\EcuM.c	  1118      do
; ..\component\EcuM\Implementation\EcuM.c	  1119      {
; ..\component\EcuM\Implementation\EcuM.c	  1120  
; ..\component\EcuM\Implementation\EcuM.c	  1121        EcuM_McuSetMode(EcuM_GetMcuModeOfSleepModeList(EcuM_CurrentShutdownMode));
; ..\component\EcuM\Implementation\EcuM.c	  1122  
; ..\component\EcuM\Implementation\EcuM.c	  1123        /* Do a GlobalRestore followed by a GlobalSuspend, to be in a defined interrupt state for the new call of Mcu_SetMode. */
; ..\component\EcuM\Implementation\EcuM.c	  1124        EcuM_GlobalRestore();
; ..\component\EcuM\Implementation\EcuM.c	  1125  
; ..\component\EcuM\Implementation\EcuM.c	  1126        EcuM_GlobalSuspend();
; ..\component\EcuM\Implementation\EcuM.c	  1127  
; ..\component\EcuM\Implementation\EcuM.c	  1128      } while (ECUM_COMBINEDWAKEUPS == (EcuM_WakeupSourceType)ECUM_WKSOURCE_NONE);
; ..\component\EcuM\Implementation\EcuM.c	  1129  
; ..\component\EcuM\Implementation\EcuM.c	  1130      EcuM_GlobalRestore();
; ..\component\EcuM\Implementation\EcuM.c	  1131  
; ..\component\EcuM\Implementation\EcuM.c	  1132  #  if(ECUM_SLAVE_CORE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1133      /* #32 Wait till the Master Core has switched back to Run. */
; ..\component\EcuM\Implementation\EcuM.c	  1134      do
; ..\component\EcuM\Implementation\EcuM.c	  1135      {
; ..\component\EcuM\Implementation\EcuM.c	  1136        EcuM_EnterCriticalArea_1();
; ..\component\EcuM\Implementation\EcuM.c	  1137  
; ..\component\EcuM\Implementation\EcuM.c	  1138        if (EcuM_GetCoreStatusValue(ECUM_CORE_ID_BSW) == ECUM_CORESTATUS_RUN)
; ..\component\EcuM\Implementation\EcuM.c	  1139        {
; ..\component\EcuM\Implementation\EcuM.c	  1140          WaitOnMaster = FALSE;
; ..\component\EcuM\Implementation\EcuM.c	  1141        }
; ..\component\EcuM\Implementation\EcuM.c	  1142        EcuM_LeaveCriticalArea_1();
; ..\component\EcuM\Implementation\EcuM.c	  1143      } while (WaitOnMaster == TRUE);
; ..\component\EcuM\Implementation\EcuM.c	  1144  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  1145  
; ..\component\EcuM\Implementation\EcuM.c	  1146  #  if(ECUM_SLAVE_CORE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1147      EcuM_SetCoreStatusValue(CoreID, ECUM_CORESTATUS_RUN); /* SBSW_SETCORESTATUS_OSCOREID */
; ..\component\EcuM\Implementation\EcuM.c	  1148  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  1149  
; ..\component\EcuM\Implementation\EcuM.c	  1150      /* #40 Restore the Mcu Normal Mode. */
; ..\component\EcuM\Implementation\EcuM.c	  1151      EcuM_GlobalSuspend();
; ..\component\EcuM\Implementation\EcuM.c	  1152  
; ..\component\EcuM\Implementation\EcuM.c	  1153      EcuM_McuSetMode((Mcu_ModeType)EcuM_GetNormalMcuMode());
; ..\component\EcuM\Implementation\EcuM.c	  1154  
; ..\component\EcuM\Implementation\EcuM.c	  1155      EcuM_GlobalRestore();
; ..\component\EcuM\Implementation\EcuM.c	  1156  
; ..\component\EcuM\Implementation\EcuM.c	  1157  #  if(ECUM_RESOURCEOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1158      /* #61 Unlock the scheduler to continue task scheduling. */
; ..\component\EcuM\Implementation\EcuM.c	  1159      (void)ReleaseResource(EcuM_GetResourceOfPartitionData(applicationIdx));
; ..\component\EcuM\Implementation\EcuM.c	  1160    }
; ..\component\EcuM\Implementation\EcuM.c	  1161  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  1162  
; ..\component\EcuM\Implementation\EcuM.c	  1163  #if ((ECUM_RESOURCEOFPARTITIONDATA == STD_OFF) && (ECUM_SLAVE_CORE_HANDLING == STD_OFF))
; ..\component\EcuM\Implementation\EcuM.c	  1164    ECUM_DUMMY_STATEMENT(CoreID); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  1165  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1166  
; ..\component\EcuM\Implementation\EcuM.c	  1167    return E_OK;
; ..\component\EcuM\Implementation\EcuM.c	  1168  } /* PRQA S 6050 */ /* MD_MSR_STCAL */
; ..\component\EcuM\Implementation\EcuM.c	  1169  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1170  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1171  
; ..\component\EcuM\Implementation\EcuM.c	  1172  #if(ECUM_SLAVE_CORE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1173  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1174   *  EcuM_ShutdownSynchronization()
; ..\component\EcuM\Implementation\EcuM.c	  1175   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1176  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1177   *
; ..\component\EcuM\Implementation\EcuM.c	  1178   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1179   *
; ..\component\EcuM\Implementation\EcuM.c	  1180   *
; ..\component\EcuM\Implementation\EcuM.c	  1181   *
; ..\component\EcuM\Implementation\EcuM.c	  1182   */
; ..\component\EcuM\Implementation\EcuM.c	  1183  ECUM_LOCAL FUNC(void, ECUM_CODE) EcuM_ShutdownSynchronization(EcuM_CoreStatusType ShutdownState)
; ..\component\EcuM\Implementation\EcuM.c	  1184  {
; ..\component\EcuM\Implementation\EcuM.c	  1185    uint8_least loopCount;
; ..\component\EcuM\Implementation\EcuM.c	  1186    boolean EcuMWaitForSlaves;
; ..\component\EcuM\Implementation\EcuM.c	  1187  
; ..\component\EcuM\Implementation\EcuM.c	  1188    /* #30 Wait till all Slave Cores have switched back to the requested state. */
; ..\component\EcuM\Implementation\EcuM.c	  1189    do
; ..\component\EcuM\Implementation\EcuM.c	  1190    {
; ..\component\EcuM\Implementation\EcuM.c	  1191      EcuM_WaitForSlaveCores();
; ..\component\EcuM\Implementation\EcuM.c	  1192  
; ..\component\EcuM\Implementation\EcuM.c	  1193      EcuMWaitForSlaves = FALSE;
; ..\component\EcuM\Implementation\EcuM.c	  1194  
; ..\component\EcuM\Implementation\EcuM.c	  1195      EcuM_EnterCriticalArea_1();
; ..\component\EcuM\Implementation\EcuM.c	  1196  
; ..\component\EcuM\Implementation\EcuM.c	  1197      /* #31 Iterate over all cores and check for each core if it has reached the requested state. */
; ..\component\EcuM\Implementation\EcuM.c	  1198      for (loopCount = 0u; loopCount < ECUM_NUMBER_OF_CORES; loopCount++)
; ..\component\EcuM\Implementation\EcuM.c	  1199      {
; ..\component\EcuM\Implementation\EcuM.c	  1200        if (EcuM_GetCoreStatusValue(loopCount) != ShutdownState)
; ..\component\EcuM\Implementation\EcuM.c	  1201        {
; ..\component\EcuM\Implementation\EcuM.c	  1202          EcuMWaitForSlaves = TRUE;
; ..\component\EcuM\Implementation\EcuM.c	  1203          break;
; ..\component\EcuM\Implementation\EcuM.c	  1204        }
; ..\component\EcuM\Implementation\EcuM.c	  1205      }
; ..\component\EcuM\Implementation\EcuM.c	  1206  
; ..\component\EcuM\Implementation\EcuM.c	  1207      EcuM_LeaveCriticalArea_1();
; ..\component\EcuM\Implementation\EcuM.c	  1208  
; ..\component\EcuM\Implementation\EcuM.c	  1209    }
; ..\component\EcuM\Implementation\EcuM.c	  1210    while (EcuMWaitForSlaves == TRUE);
; ..\component\EcuM\Implementation\EcuM.c	  1211  }
; ..\component\EcuM\Implementation\EcuM.c	  1212  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1213  
; ..\component\EcuM\Implementation\EcuM.c	  1214  #if(ECUM_ALARM_CLOCK_PRESENT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1215  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1216   *  EcuM_UpdateMasterAlarm()
; ..\component\EcuM\Implementation\EcuM.c	  1217   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1218  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1219   *
; ..\component\EcuM\Implementation\EcuM.c	  1220   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1221   *
; ..\component\EcuM\Implementation\EcuM.c	  1222   *
; ..\component\EcuM\Implementation\EcuM.c	  1223   *
; ..\component\EcuM\Implementation\EcuM.c	  1224   */
; ..\component\EcuM\Implementation\EcuM.c	  1225  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_UpdateMasterAlarm(void)
; ..\component\EcuM\Implementation\EcuM.c	  1226  {
; ..\component\EcuM\Implementation\EcuM.c	  1227    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1228    uint8_least loopCount;
; ..\component\EcuM\Implementation\EcuM.c	  1229  
; ..\component\EcuM\Implementation\EcuM.c	  1230    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1231    /* Set the MasterAlarm to ECUM_ALARM_NOT_ACTIVE at beginning to mark it as not active. */
; ..\component\EcuM\Implementation\EcuM.c	  1232    EcuM_MasterAlarm = ECUM_ALARM_NOT_ACTIVE;
; ..\component\EcuM\Implementation\EcuM.c	  1233  
; ..\component\EcuM\Implementation\EcuM.c	  1234    /* #31 Iterate over all users and check if one users alarm is smaller than the current MasterAlarm. If smaller, update
; ..\component\EcuM\Implementation\EcuM.c	  1235     *     the current MasterAlarm. */
; ..\component\EcuM\Implementation\EcuM.c	  1236    for (loopCount = 0u; loopCount < EcuM_GetSizeOfAlarmClockTimeOut(); loopCount++)
; ..\component\EcuM\Implementation\EcuM.c	  1237    {
; ..\component\EcuM\Implementation\EcuM.c	  1238      if ((EcuM_GetAlarmClockTimeOut(loopCount) > EcuM_Clock)
; ..\component\EcuM\Implementation\EcuM.c	  1239          && (EcuM_GetAlarmClockTimeOut(loopCount) < EcuM_MasterAlarm))
; ..\component\EcuM\Implementation\EcuM.c	  1240      {
; ..\component\EcuM\Implementation\EcuM.c	  1241        EcuM_MasterAlarm = EcuM_GetAlarmClockTimeOut(loopCount);
; ..\component\EcuM\Implementation\EcuM.c	  1242      }
; ..\component\EcuM\Implementation\EcuM.c	  1243    }
; ..\component\EcuM\Implementation\EcuM.c	  1244  
; ..\component\EcuM\Implementation\EcuM.c	  1245  }
; ..\component\EcuM\Implementation\EcuM.c	  1246  
; ..\component\EcuM\Implementation\EcuM.c	  1247  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1248   *  EcuM_InternalClearAlarms()
; ..\component\EcuM\Implementation\EcuM.c	  1249   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1250  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1251   *
; ..\component\EcuM\Implementation\EcuM.c	  1252   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1253   *
; ..\component\EcuM\Implementation\EcuM.c	  1254   *
; ..\component\EcuM\Implementation\EcuM.c	  1255   */
; ..\component\EcuM\Implementation\EcuM.c	  1256  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalClearAlarms(void)
; ..\component\EcuM\Implementation\EcuM.c	  1257  {
; ..\component\EcuM\Implementation\EcuM.c	  1258    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1259    uint8_least loopCount;
; ..\component\EcuM\Implementation\EcuM.c	  1260  
; ..\component\EcuM\Implementation\EcuM.c	  1261    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1262    /* #30 Clear all user alarm clocks. */
; ..\component\EcuM\Implementation\EcuM.c	  1263    for (loopCount = 0u; loopCount < EcuM_GetSizeOfAlarmClockTimeOut(); loopCount++)
; ..\component\EcuM\Implementation\EcuM.c	  1264    {
; ..\component\EcuM\Implementation\EcuM.c	  1265      EcuM_SetAlarmClockTimeOut(loopCount, 0u); /* SBSW_ECUM_ACCESSALARMCLOCK */
; ..\component\EcuM\Implementation\EcuM.c	  1266    }
; ..\component\EcuM\Implementation\EcuM.c	  1267  
; ..\component\EcuM\Implementation\EcuM.c	  1268  }
; ..\component\EcuM\Implementation\EcuM.c	  1269  
; ..\component\EcuM\Implementation\EcuM.c	  1270  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1271  
; ..\component\EcuM\Implementation\EcuM.c	  1272  #if(ECUM_CHANNELOFWAKEUPSOURCELIST == STD_ON || ECUM_PNCOFCOMMPNCS == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	  1273  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1274   *  EcuM_InternalComMNotifications()
; ..\component\EcuM\Implementation\EcuM.c	  1275   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1276  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1277   *
; ..\component\EcuM\Implementation\EcuM.c	  1278   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1279   *
; ..\component\EcuM\Implementation\EcuM.c	  1280   *
; ..\component\EcuM\Implementation\EcuM.c	  1281   *
; ..\component\EcuM\Implementation\EcuM.c	  1282   *
; ..\component\EcuM\Implementation\EcuM.c	  1283   */
; ..\component\EcuM\Implementation\EcuM.c	  1284  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalComMNotifications(void)
; Function EcuM_InternalComMNotifications
.L122:
EcuM_InternalComMNotifications:	.type	func
	sub.a	a10,#8
.L498:

; ..\component\EcuM\Implementation\EcuM.c	  1285  {
; ..\component\EcuM\Implementation\EcuM.c	  1286    /* Store the init status of the ComM in the variable ComMStatus */
; ..\component\EcuM\Implementation\EcuM.c	  1287    ComM_InitStatusType ComMStatus;
; ..\component\EcuM\Implementation\EcuM.c	  1288    (void) ComM_GetStatus(&ComMStatus); /* SBSW_ECUM_ADRESSPARAMETER_TOCOMM */
	mov.aa	a4,a10
	call	ComM_GetStatus
.L831:

; ..\component\EcuM\Implementation\EcuM.c	  1289  
; ..\component\EcuM\Implementation\EcuM.c	  1290    /* #20 If the ComM is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  1291    if (ComMStatus == COMM_INIT)
	ld.bu	d15,[a10]
.L832:
	jne	d15,#1,.L5
.L484:

; ..\component\EcuM\Implementation\EcuM.c	  1292    {
; ..\component\EcuM\Implementation\EcuM.c	  1293      /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1294      uint8_least sourceID;
; ..\component\EcuM\Implementation\EcuM.c	  1295  
; ..\component\EcuM\Implementation\EcuM.c	  1296      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1297      /**
; ..\component\EcuM\Implementation\EcuM.c	  1298       * Iteration over wakeup sources starts with the highest ID because normally the ASR standard sources with the
; ..\component\EcuM\Implementation\EcuM.c	  1299       * lower IDs have no reference to a ComM channel.
; ..\component\EcuM\Implementation\EcuM.c	  1300       * Initialization of the variable with ECUM_MAX_WAKEUP_SOURCES and decrement at the beginning of the loop is
; ..\component\EcuM\Implementation\EcuM.c	  1301       * to prevent an overflow of the loopCounter.
; ..\component\EcuM\Implementation\EcuM.c	  1302       */
; ..\component\EcuM\Implementation\EcuM.c	  1303  
; ..\component\EcuM\Implementation\EcuM.c	  1304      sourceID = EcuM_GetSizeOfWakeupSourceList();
; ..\component\EcuM\Implementation\EcuM.c	  1305  
; ..\component\EcuM\Implementation\EcuM.c	  1306      /* #30 Check if there are buffered wakeups for notifying the ComM about validated wakeup sources. */
; ..\component\EcuM\Implementation\EcuM.c	  1307      while ((EcuM_ComM_BufferedWakeups != 0u) && (sourceID > 0u)) /* COV_ECUM_01 */
; ..\component\EcuM\Implementation\EcuM.c	  1308      {
; ..\component\EcuM\Implementation\EcuM.c	  1309        sourceID--;
; ..\component\EcuM\Implementation\EcuM.c	  1310  
; ..\component\EcuM\Implementation\EcuM.c	  1311        /* #31 Notify all buffered wakeup sources to ComM. */
; ..\component\EcuM\Implementation\EcuM.c	  1312        if ((((EcuM_WakeupSourceType)1u << (EcuM_WakeupSourceType)sourceID) & EcuM_ComM_BufferedWakeups) != 0u) /* COV_ECUM_04 */
	mov	d15,#6
	movh.a	a15,#@his(EcuM_ComM_BufferedWakeups)
.L499:
	mov	d9,#1
	lea	a15,[a15]@los(EcuM_ComM_BufferedWakeups)
.L833:

; ..\component\EcuM\Implementation\EcuM.c	  1313        {
; ..\component\EcuM\Implementation\EcuM.c	  1314  # if (ECUM_CHANNELOFWAKEUPSOURCELIST == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM_DEPENDENCY */
; ..\component\EcuM\Implementation\EcuM.c	  1315  #  if (ECUM_PNCOFCOMMPNCS == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	  1316          if(EcuM_GetChannelOfWakeupSourceList(sourceID) != 0xFFu)
; ..\component\EcuM\Implementation\EcuM.c	  1317  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  1318          {
; ..\component\EcuM\Implementation\EcuM.c	  1319            ComM_EcuM_WakeUpIndication(EcuM_GetChannelOfWakeupSourceList(sourceID));
; ..\component\EcuM\Implementation\EcuM.c	  1320          }
; ..\component\EcuM\Implementation\EcuM.c	  1321  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1322  
; ..\component\EcuM\Implementation\EcuM.c	  1323  # if (ECUM_PNCOFCOMMPNCS == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	  1324          if(EcuM_GetComMPNCsStartIdxOfWakeupSourceList(sourceID) != ECUM_NO_COMMPNCSSTARTIDXOFWAKEUPSOURCELIST)
; ..\component\EcuM\Implementation\EcuM.c	  1325          {
; ..\component\EcuM\Implementation\EcuM.c	  1326            EcuM_InternalComMPNCNotification(sourceID);
; ..\component\EcuM\Implementation\EcuM.c	  1327          }
; ..\component\EcuM\Implementation\EcuM.c	  1328  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1329  
; ..\component\EcuM\Implementation\EcuM.c	  1330          EcuM_ComM_BufferedWakeups &= (EcuM_WakeupSourceType) (~((EcuM_WakeupSourceType)1u << (EcuM_WakeupSourceType)sourceID));
	mov	d10,#-1
	j	.L6
.L7:
	add	d15,#-1
.L834:
	sh	d8,d9,d15
.L835:
	and	d0,d8
.L836:
	jeq	d0,#0,.L8
.L837:
	movh.a	a2,#@his(EcuM_WakeupSourceList)
	lea	a2,[a2]@los(EcuM_WakeupSourceList)
	addsc.a	a2,a2,d15,#0
	ld.bu	d4,[a2]
	call	ComM_EcuM_WakeUpIndication
.L838:
	ld.w	d0,[a15]
.L839:
	xor	d8,d10
.L840:
	and	d0,d8
	st.w	[a15],d0
.L8:
.L6:
	ld.w	d0,[a15]
.L841:
	jeq	d0,#0,.L9
.L842:
	jne	d15,#0,.L7
.L9:
.L5:

; ..\component\EcuM\Implementation\EcuM.c	  1331        }
; ..\component\EcuM\Implementation\EcuM.c	  1332      }
; ..\component\EcuM\Implementation\EcuM.c	  1333    }
; ..\component\EcuM\Implementation\EcuM.c	  1334  }
	ret
.L482:
	
__EcuM_InternalComMNotifications_function_end:
	.size	EcuM_InternalComMNotifications,__EcuM_InternalComMNotifications_function_end-EcuM_InternalComMNotifications
.L320:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_InternalClearWakeupEvent',code,cluster('EcuM_InternalClearWakeupEvent')
	.sect	'.text.EcuM.EcuM_InternalClearWakeupEvent'
	.align	2
	

; ..\component\EcuM\Implementation\EcuM.c	  1335  
; ..\component\EcuM\Implementation\EcuM.c	  1336  # if(ECUM_PNCOFCOMMPNCS == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	  1337  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1338   *  EcuM_InternalComMPNCNotification()
; ..\component\EcuM\Implementation\EcuM.c	  1339   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1340  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1341   *
; ..\component\EcuM\Implementation\EcuM.c	  1342   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1343   *
; ..\component\EcuM\Implementation\EcuM.c	  1344   *
; ..\component\EcuM\Implementation\EcuM.c	  1345   */
; ..\component\EcuM\Implementation\EcuM.c	  1346  ECUM_LOCAL FUNC(void, ECUM_CODE) EcuM_InternalComMPNCNotification(uint8_least sourceIDx)
; ..\component\EcuM\Implementation\EcuM.c	  1347  {
; ..\component\EcuM\Implementation\EcuM.c	  1348    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1349    uint8_least i;
; ..\component\EcuM\Implementation\EcuM.c	  1350  
; ..\component\EcuM\Implementation\EcuM.c	  1351    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1352    /* #30 Notify all PNCs which belong to a wakeup source to ComM. */
; ..\component\EcuM\Implementation\EcuM.c	  1353    for(i = EcuM_GetComMPNCsStartIdxOfWakeupSourceList(sourceIDx); i < EcuM_GetComMPNCsEndIdxOfWakeupSourceList(sourceIDx); i++)
; ..\component\EcuM\Implementation\EcuM.c	  1354    {
; ..\component\EcuM\Implementation\EcuM.c	  1355      ComM_EcuM_PNCWakeUpIndication(EcuM_GetPNCOfComMPNCs(i));
; ..\component\EcuM\Implementation\EcuM.c	  1356    }
; ..\component\EcuM\Implementation\EcuM.c	  1357  }
; ..\component\EcuM\Implementation\EcuM.c	  1358  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1359  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1360  
; ..\component\EcuM\Implementation\EcuM.c	  1361  #if(ECUM_DEFERRED_BSWM_NOTIFICATION == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1362  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1363   *  EcuM_InternalBswMNotifications()
; ..\component\EcuM\Implementation\EcuM.c	  1364   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1365  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1366   *
; ..\component\EcuM\Implementation\EcuM.c	  1367   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1368   *
; ..\component\EcuM\Implementation\EcuM.c	  1369   *
; ..\component\EcuM\Implementation\EcuM.c	  1370   *
; ..\component\EcuM\Implementation\EcuM.c	  1371   */
; ..\component\EcuM\Implementation\EcuM.c	  1372  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalBswMNotifications(void)
; ..\component\EcuM\Implementation\EcuM.c	  1373  {
; ..\component\EcuM\Implementation\EcuM.c	  1374    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1375    EcuM_WakeupSourceType bufferedWupSource;
; ..\component\EcuM\Implementation\EcuM.c	  1376  
; ..\component\EcuM\Implementation\EcuM.c	  1377    /* #30 Check for buffered / deferred BswM notifications and if existent, notify them to BswM. */
; ..\component\EcuM\Implementation\EcuM.c	  1378    EcuM_EnterCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1379    bufferedWupSource = EcuM_BswM_BufferedWakeups;
; ..\component\EcuM\Implementation\EcuM.c	  1380    EcuM_BswM_BufferedWakeups = ECUM_WKSOURCE_NONE;
; ..\component\EcuM\Implementation\EcuM.c	  1381    EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1382  
; ..\component\EcuM\Implementation\EcuM.c	  1383    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1384  
; ..\component\EcuM\Implementation\EcuM.c	  1385      /* #31 First notify expired and pending checkwakeups, then pending wakeups to consider changes of validated wakeups caused by an interrupt */
; ..\component\EcuM\Implementation\EcuM.c	  1386  # if (ECUM_CHECKWAKEUPTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1387      if ((bufferedWupSource & EcuM_ExpiredCheckWakeups) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  1388      {
; ..\component\EcuM\Implementation\EcuM.c	  1389        BswM_EcuM_CurrentWakeup(bufferedWupSource & EcuM_ExpiredCheckWakeups, ECUM_WKSTATUS_EXPIRED);
; ..\component\EcuM\Implementation\EcuM.c	  1390      }
; ..\component\EcuM\Implementation\EcuM.c	  1391      if ((bufferedWupSource & EcuM_PendingCheckWakeups) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  1392      {
; ..\component\EcuM\Implementation\EcuM.c	  1393        BswM_EcuM_CurrentWakeup(bufferedWupSource & EcuM_PendingCheckWakeups, ECUM_WKSTATUS_CHECKWAKEUP);
; ..\component\EcuM\Implementation\EcuM.c	  1394      }
; ..\component\EcuM\Implementation\EcuM.c	  1395  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1396  
; ..\component\EcuM\Implementation\EcuM.c	  1397  # if (ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1398      if ((bufferedWupSource & EcuM_PendingWakeups) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  1399      {
; ..\component\EcuM\Implementation\EcuM.c	  1400        BswM_EcuM_CurrentWakeup(bufferedWupSource & EcuM_PendingWakeups, ECUM_WKSTATUS_PENDING);
; ..\component\EcuM\Implementation\EcuM.c	  1401      }
; ..\component\EcuM\Implementation\EcuM.c	  1402  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1403  
; ..\component\EcuM\Implementation\EcuM.c	  1404      if ((bufferedWupSource & EcuM_ValidatedWakeups) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  1405      {
; ..\component\EcuM\Implementation\EcuM.c	  1406        BswM_EcuM_CurrentWakeup(bufferedWupSource & EcuM_ValidatedWakeups, ECUM_WKSTATUS_VALIDATED);
; ..\component\EcuM\Implementation\EcuM.c	  1407      }
; ..\component\EcuM\Implementation\EcuM.c	  1408  
; ..\component\EcuM\Implementation\EcuM.c	  1409  }
; ..\component\EcuM\Implementation\EcuM.c	  1410  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1411  
; ..\component\EcuM\Implementation\EcuM.c	  1412  #if (ECUM_PARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1413  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1414   *  EcuM_InternalGetPartitionIdx()
; ..\component\EcuM\Implementation\EcuM.c	  1415   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1416  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1417   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1418   *
; ..\component\EcuM\Implementation\EcuM.c	  1419   *
; ..\component\EcuM\Implementation\EcuM.c	  1420   *
; ..\component\EcuM\Implementation\EcuM.c	  1421   *
; ..\component\EcuM\Implementation\EcuM.c	  1422   */
; ..\component\EcuM\Implementation\EcuM.c	  1423  ECUM_LOCAL FUNC(EcuM_SizeOfPartitionDataType, ECUM_CODE) EcuM_InternalGetPartitionIdx(void)
; ..\component\EcuM\Implementation\EcuM.c	  1424  {
; ..\component\EcuM\Implementation\EcuM.c	  1425    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1426    EcuM_SizeOfPartitionDataType partitionIndex = EcuM_GetSizeOfPartitionData();
; ..\component\EcuM\Implementation\EcuM.c	  1427    ApplicationType applicationId = GetCurrentApplicationID();
; ..\component\EcuM\Implementation\EcuM.c	  1428  
; ..\component\EcuM\Implementation\EcuM.c	  1429      /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1430    /* #20 Check if the returned applicationId is a valid one. */
; ..\component\EcuM\Implementation\EcuM.c	  1431    if (applicationId >= EcuM_GetSizeOfPartitionData())
; ..\component\EcuM\Implementation\EcuM.c	  1432    {
; ..\component\EcuM\Implementation\EcuM.c	  1433      EcuM_ErrorHook(ECUM_E_HOOK_INVALID_APPLICATIONID);
; ..\component\EcuM\Implementation\EcuM.c	  1434    }
; ..\component\EcuM\Implementation\EcuM.c	  1435    else
; ..\component\EcuM\Implementation\EcuM.c	  1436    {
; ..\component\EcuM\Implementation\EcuM.c	  1437    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1438      /* #21 Iterate over all EcuM instances and return the partition index of the one which fits to the current application. */
; ..\component\EcuM\Implementation\EcuM.c	  1439      for(partitionIndex = 0u; partitionIndex < EcuM_GetSizeOfPartitionData(); partitionIndex++) /* COV_ECUM_PARTITIONID */
; ..\component\EcuM\Implementation\EcuM.c	  1440      {
; ..\component\EcuM\Implementation\EcuM.c	  1441        if(applicationId == EcuM_GetApplicationOfPartitionData(partitionIndex))
; ..\component\EcuM\Implementation\EcuM.c	  1442        {
; ..\component\EcuM\Implementation\EcuM.c	  1443          break;
; ..\component\EcuM\Implementation\EcuM.c	  1444        }
; ..\component\EcuM\Implementation\EcuM.c	  1445      }
; ..\component\EcuM\Implementation\EcuM.c	  1446    }
; ..\component\EcuM\Implementation\EcuM.c	  1447    /* #22 Return EcuM_GetSizeOfPartitionData() in case that no partition was found, if the partition was found, return the partitionIndex. */
; ..\component\EcuM\Implementation\EcuM.c	  1448    return partitionIndex;
; ..\component\EcuM\Implementation\EcuM.c	  1449  }
; ..\component\EcuM\Implementation\EcuM.c	  1450  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1451  
; ..\component\EcuM\Implementation\EcuM.c	  1452  #if(ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON || ECUM_CHECKWAKEUPTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1453  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1454   *  EcuM_InternalWakeupValidation()
; ..\component\EcuM\Implementation\EcuM.c	  1455   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1456  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1457   *
; ..\component\EcuM\Implementation\EcuM.c	  1458   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1459   *
; ..\component\EcuM\Implementation\EcuM.c	  1460   *
; ..\component\EcuM\Implementation\EcuM.c	  1461   *
; ..\component\EcuM\Implementation\EcuM.c	  1462   *
; ..\component\EcuM\Implementation\EcuM.c	  1463   *
; ..\component\EcuM\Implementation\EcuM.c	  1464   *
; ..\component\EcuM\Implementation\EcuM.c	  1465   *
; ..\component\EcuM\Implementation\EcuM.c	  1466   *
; ..\component\EcuM\Implementation\EcuM.c	  1467   *
; ..\component\EcuM\Implementation\EcuM.c	  1468   *
; ..\component\EcuM\Implementation\EcuM.c	  1469   *
; ..\component\EcuM\Implementation\EcuM.c	  1470   *
; ..\component\EcuM\Implementation\EcuM.c	  1471   *
; ..\component\EcuM\Implementation\EcuM.c	  1472   *
; ..\component\EcuM\Implementation\EcuM.c	  1473   *
; ..\component\EcuM\Implementation\EcuM.c	  1474   *
; ..\component\EcuM\Implementation\EcuM.c	  1475   *
; ..\component\EcuM\Implementation\EcuM.c	  1476   *
; ..\component\EcuM\Implementation\EcuM.c	  1477   *
; ..\component\EcuM\Implementation\EcuM.c	  1478   *
; ..\component\EcuM\Implementation\EcuM.c	  1479   *
; ..\component\EcuM\Implementation\EcuM.c	  1480   *
; ..\component\EcuM\Implementation\EcuM.c	  1481   *
; ..\component\EcuM\Implementation\EcuM.c	  1482   *
; ..\component\EcuM\Implementation\EcuM.c	  1483   *
; ..\component\EcuM\Implementation\EcuM.c	  1484   *
; ..\component\EcuM\Implementation\EcuM.c	  1485   *
; ..\component\EcuM\Implementation\EcuM.c	  1486   */
; ..\component\EcuM\Implementation\EcuM.c	  1487  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalWakeupValidation(void)
; ..\component\EcuM\Implementation\EcuM.c	  1488  {
; ..\component\EcuM\Implementation\EcuM.c	  1489    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1490    /* Variable for shifting of the single wake-up sources */
; ..\component\EcuM\Implementation\EcuM.c	  1491    EcuM_WakeupSourceType WupSource = 32u;
; ..\component\EcuM\Implementation\EcuM.c	  1492    uint8_least loopCount;
; ..\component\EcuM\Implementation\EcuM.c	  1493  
; ..\component\EcuM\Implementation\EcuM.c	  1494    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1495    EcuM_EnterCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1496    /* #30 Iterate over all pending wakeup sources. */
; ..\component\EcuM\Implementation\EcuM.c	  1497    for (loopCount = 5u; loopCount < EcuM_GetSizeOfWakeupSourceList(); loopCount++)
; ..\component\EcuM\Implementation\EcuM.c	  1498    {
; ..\component\EcuM\Implementation\EcuM.c	  1499  
; ..\component\EcuM\Implementation\EcuM.c	  1500  # if (ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1501      /* Check if the current iterated source needs validation caused by a pending event. */
; ..\component\EcuM\Implementation\EcuM.c	  1502      if ((WupSource & (EcuM_PendingWakeups)) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  1503      {
; ..\component\EcuM\Implementation\EcuM.c	  1504        /* Check if the current iterated source is not already started. */
; ..\component\EcuM\Implementation\EcuM.c	  1505        if ( EcuM_GetValidationTimeoutTable(loopCount) > 0u)
; ..\component\EcuM\Implementation\EcuM.c	  1506        {
; ..\component\EcuM\Implementation\EcuM.c	  1507          /* #33 Decrement the sources timeout value. */
; ..\component\EcuM\Implementation\EcuM.c	  1508          EcuM_DecValidationTimeoutTable(loopCount); /* SBSW_ECUM_ACCESSVALTABLE */
; ..\component\EcuM\Implementation\EcuM.c	  1509  
; ..\component\EcuM\Implementation\EcuM.c	  1510          /* In the context of EcuM_CheckValidation, an API could be called which also uses this CriticalArea. */
; ..\component\EcuM\Implementation\EcuM.c	  1511          EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1512  
; ..\component\EcuM\Implementation\EcuM.c	  1513          /* #35 Execute user-specific code to initiate a wakeup validation for this source (EcuM_CheckValidation()). */
; ..\component\EcuM\Implementation\EcuM.c	  1514          EcuM_CheckValidation(WupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1515  
; ..\component\EcuM\Implementation\EcuM.c	  1516          EcuM_EnterCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1517  
; ..\component\EcuM\Implementation\EcuM.c	  1518          /* #36 Check if no Timeout occurred after the decrement, and the source is not validated in context of check validation. */
; ..\component\EcuM\Implementation\EcuM.c	  1519          if ((EcuM_GetValidationTimeoutTable(loopCount) == 0u) && ((WupSource & EcuM_PendingWakeups) != 0u))
; ..\component\EcuM\Implementation\EcuM.c	  1520          {
; ..\component\EcuM\Implementation\EcuM.c	  1521            /* Timeout occurred for the current source */
; ..\component\EcuM\Implementation\EcuM.c	  1522  
; ..\component\EcuM\Implementation\EcuM.c	  1523            /* #37 Mark this source as an expired wakeup source. */
; ..\component\EcuM\Implementation\EcuM.c	  1524            EcuM_ExpiredWakeups |= WupSource;
; ..\component\EcuM\Implementation\EcuM.c	  1525  
; ..\component\EcuM\Implementation\EcuM.c	  1526            /* #38 Remove this source from the pending wakeup sources list. */
; ..\component\EcuM\Implementation\EcuM.c	  1527            EcuM_PendingWakeups &= (~WupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1528  
; ..\component\EcuM\Implementation\EcuM.c	  1529            /* #39 Report this source as an expired source to the BswM. */
; ..\component\EcuM\Implementation\EcuM.c	  1530            BswM_EcuM_CurrentWakeup(WupSource, ECUM_WKSTATUS_EXPIRED);
; ..\component\EcuM\Implementation\EcuM.c	  1531  
; ..\component\EcuM\Implementation\EcuM.c	  1532            EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1533  
; ..\component\EcuM\Implementation\EcuM.c	  1534            /* #40 Execute user-specific code to stop the sources wakeup validation (EcuM_StopWakeupSources()). */
; ..\component\EcuM\Implementation\EcuM.c	  1535            EcuM_StopWakeupSources(WupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1536  
; ..\component\EcuM\Implementation\EcuM.c	  1537            EcuM_EnterCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1538          }
; ..\component\EcuM\Implementation\EcuM.c	  1539  
; ..\component\EcuM\Implementation\EcuM.c	  1540        }
; ..\component\EcuM\Implementation\EcuM.c	  1541        /* This wake-up source is not started yet. */
; ..\component\EcuM\Implementation\EcuM.c	  1542        else
; ..\component\EcuM\Implementation\EcuM.c	  1543        {
; ..\component\EcuM\Implementation\EcuM.c	  1544  #  if(ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1545  
; ..\component\EcuM\Implementation\EcuM.c	  1546          if((EcuM_EnabledWakeups & WupSource) != 0u) /* COV_ECUM_05 */
; ..\component\EcuM\Implementation\EcuM.c	  1547          {
; ..\component\EcuM\Implementation\EcuM.c	  1548            /* #41 Disable a source which is still enabled from last sleep mode. */
; ..\component\EcuM\Implementation\EcuM.c	  1549            EcuM_DisableWakeupSources(WupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1550            EcuM_EnabledWakeups &= ~(WupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1551          }
; ..\component\EcuM\Implementation\EcuM.c	  1552  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  1553  
; ..\component\EcuM\Implementation\EcuM.c	  1554          /* #42 Set the configured timeout for the current source. */
; ..\component\EcuM\Implementation\EcuM.c	  1555          EcuM_SetValidationTimeoutTable(loopCount, EcuM_GetValidationTimeOfWakeupSourceList(loopCount)); /* SBSW_ECUM_ACCESSVALTABLE */
; ..\component\EcuM\Implementation\EcuM.c	  1556  
; ..\component\EcuM\Implementation\EcuM.c	  1557          EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1558  
; ..\component\EcuM\Implementation\EcuM.c	  1559          /* #43 Execute user-specific code to start the sources wakeup validation (EcuM_StartWakeupSources()). */
; ..\component\EcuM\Implementation\EcuM.c	  1560          EcuM_StartWakeupSources(WupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1561  
; ..\component\EcuM\Implementation\EcuM.c	  1562          /* #36 Check if no Timeout occurred after the decrement, and the source is not validated in context of check validation. */
; ..\component\EcuM\Implementation\EcuM.c	  1563          EcuM_CheckValidation(WupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1564  
; ..\component\EcuM\Implementation\EcuM.c	  1565          EcuM_EnterCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1566        }
; ..\component\EcuM\Implementation\EcuM.c	  1567      }
; ..\component\EcuM\Implementation\EcuM.c	  1568      /* #44 Check if a wakeup source was cleared during validation by EcuM_ClearWakeupEvents. */
; ..\component\EcuM\Implementation\EcuM.c	  1569      else if ((WupSource & (EcuM_ClearedPendingWakeups)) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  1570      {
; ..\component\EcuM\Implementation\EcuM.c	  1571        /* #45 Remove this source from the cleared pending wakeup sources list. */
; ..\component\EcuM\Implementation\EcuM.c	  1572        EcuM_ClearedPendingWakeups &= ~(WupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1573  
; ..\component\EcuM\Implementation\EcuM.c	  1574        EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1575  
; ..\component\EcuM\Implementation\EcuM.c	  1576        /* #40 Execute user-specific code to stop the sources wakeup validation (EcuM_StopWakeupSources()). */
; ..\component\EcuM\Implementation\EcuM.c	  1577        EcuM_StopWakeupSources(WupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1578  
; ..\component\EcuM\Implementation\EcuM.c	  1579        EcuM_EnterCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1580      }
; ..\component\EcuM\Implementation\EcuM.c	  1581      else
; ..\component\EcuM\Implementation\EcuM.c	  1582  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1583  
; ..\component\EcuM\Implementation\EcuM.c	  1584  # if(ECUM_CHECKWAKEUPTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1585      /* #46 Iterate over all pending check wakeup sources. */
; ..\component\EcuM\Implementation\EcuM.c	  1586      if ((WupSource & (EcuM_PendingCheckWakeups)) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  1587      {
; ..\component\EcuM\Implementation\EcuM.c	  1588        /* #47 Check if the timeout of the current iterated source is already started. */
; ..\component\EcuM\Implementation\EcuM.c	  1589        if (EcuM_GetValidationTimeoutTable(loopCount) > 0u)
; ..\component\EcuM\Implementation\EcuM.c	  1590        {
; ..\component\EcuM\Implementation\EcuM.c	  1591          /* #48 Decrement the current validation timeout value. */
; ..\component\EcuM\Implementation\EcuM.c	  1592          EcuM_DecValidationTimeoutTable(loopCount); /* SBSW_ECUM_ACCESSVALTABLE */
; ..\component\EcuM\Implementation\EcuM.c	  1593  
; ..\component\EcuM\Implementation\EcuM.c	  1594          /* #49 Check if the current sources check wakeup timeout has occurred. */
; ..\component\EcuM\Implementation\EcuM.c	  1595          if (EcuM_GetValidationTimeoutTable(loopCount) == 0u)
; ..\component\EcuM\Implementation\EcuM.c	  1596          {
; ..\component\EcuM\Implementation\EcuM.c	  1597            /* #50 Remove the source from the pending check wakeup variable and add it to the expired variable. */
; ..\component\EcuM\Implementation\EcuM.c	  1598            EcuM_PendingCheckWakeups &= (~WupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1599  
; ..\component\EcuM\Implementation\EcuM.c	  1600            EcuM_ExpiredWakeups |= WupSource;
; ..\component\EcuM\Implementation\EcuM.c	  1601  
; ..\component\EcuM\Implementation\EcuM.c	  1602            /* #39 Report this source as an expired source to the BswM. */
; ..\component\EcuM\Implementation\EcuM.c	  1603            BswM_EcuM_CurrentWakeup(WupSource, ECUM_WKSTATUS_EXPIRED);
; ..\component\EcuM\Implementation\EcuM.c	  1604  
; ..\component\EcuM\Implementation\EcuM.c	  1605          }
; ..\component\EcuM\Implementation\EcuM.c	  1606        }
; ..\component\EcuM\Implementation\EcuM.c	  1607        else
; ..\component\EcuM\Implementation\EcuM.c	  1608        {
; ..\component\EcuM\Implementation\EcuM.c	  1609          /* #51 Set the configured check wakeup timeout for the current source to the ValidationTimeoutTable. */
; ..\component\EcuM\Implementation\EcuM.c	  1610          EcuM_SetValidationTimeoutTable(loopCount, EcuM_GetCheckWakeupTimeOfWakeupSourceList(loopCount)); /* SBSW_ECUM_ACCESSVALTABLE */
; ..\component\EcuM\Implementation\EcuM.c	  1611        }
; ..\component\EcuM\Implementation\EcuM.c	  1612      }
; ..\component\EcuM\Implementation\EcuM.c	  1613      else
; ..\component\EcuM\Implementation\EcuM.c	  1614  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1615      {
; ..\component\EcuM\Implementation\EcuM.c	  1616        /* Source is neither a pending wakeup source nor a pending check wakeup source */
; ..\component\EcuM\Implementation\EcuM.c	  1617      }
; ..\component\EcuM\Implementation\EcuM.c	  1618  
; ..\component\EcuM\Implementation\EcuM.c	  1619      /* Are there any other pending wake-ups? */
; ..\component\EcuM\Implementation\EcuM.c	  1620  # if(ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1621      if ( (ECUM_COMBINEDPENDINGWAKEUPS | EcuM_ClearedPendingWakeups) == 0u )
; ..\component\EcuM\Implementation\EcuM.c	  1622  # else
; ..\component\EcuM\Implementation\EcuM.c	  1623      if (ECUM_COMBINEDPENDINGWAKEUPS == 0u )
; ..\component\EcuM\Implementation\EcuM.c	  1624  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1625      {
; ..\component\EcuM\Implementation\EcuM.c	  1626        /* No, leave loop */
; ..\component\EcuM\Implementation\EcuM.c	  1627        break; /* PRQA S 0771 */ /* MD_EcuM_0771 */
; ..\component\EcuM\Implementation\EcuM.c	  1628      }
; ..\component\EcuM\Implementation\EcuM.c	  1629  
; ..\component\EcuM\Implementation\EcuM.c	  1630      /* Calculate the Id of the wakeup source. The current index marks the bit-position. */
; ..\component\EcuM\Implementation\EcuM.c	  1631      WupSource <<= 1u;
; ..\component\EcuM\Implementation\EcuM.c	  1632  
; ..\component\EcuM\Implementation\EcuM.c	  1633    }
; ..\component\EcuM\Implementation\EcuM.c	  1634    EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  1635  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\EcuM\Implementation\EcuM.c	  1636  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1637  
; ..\component\EcuM\Implementation\EcuM.c	  1638  #if (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1639  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1640   *  EcuM_InternalEnterHaltMode()
; ..\component\EcuM\Implementation\EcuM.c	  1641   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1642  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1643   *
; ..\component\EcuM\Implementation\EcuM.c	  1644   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1645   *
; ..\component\EcuM\Implementation\EcuM.c	  1646   *
; ..\component\EcuM\Implementation\EcuM.c	  1647   *
; ..\component\EcuM\Implementation\EcuM.c	  1648   *
; ..\component\EcuM\Implementation\EcuM.c	  1649   *
; ..\component\EcuM\Implementation\EcuM.c	  1650   *
; ..\component\EcuM\Implementation\EcuM.c	  1651   *
; ..\component\EcuM\Implementation\EcuM.c	  1652   *
; ..\component\EcuM\Implementation\EcuM.c	  1653   */
; ..\component\EcuM\Implementation\EcuM.c	  1654  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalEnterHaltMode(void)
; ..\component\EcuM\Implementation\EcuM.c	  1655  {
; ..\component\EcuM\Implementation\EcuM.c	  1656  
; ..\component\EcuM\Implementation\EcuM.c	  1657    /* #30 Create a RamHash via the Callout routine, this is used after wakeup for validation of Ram data. */
; ..\component\EcuM\Implementation\EcuM.c	  1658    EcuM_GenerateRamHash();
; ..\component\EcuM\Implementation\EcuM.c	  1659  
; ..\component\EcuM\Implementation\EcuM.c	  1660    do
; ..\component\EcuM\Implementation\EcuM.c	  1661    {
; ..\component\EcuM\Implementation\EcuM.c	  1662      /* #31 Set the McuMode for the current sleep phase, in this function call the Ecu is not executing code any more. */
; ..\component\EcuM\Implementation\EcuM.c	  1663      /* #32 After an occurred Interrupt the Mcu starts again and control goes back to the EcuM. */
; ..\component\EcuM\Implementation\EcuM.c	  1664      EcuM_McuSetMode(EcuM_GetMcuModeOfSleepModeList(EcuM_CurrentShutdownMode));
; ..\component\EcuM\Implementation\EcuM.c	  1665  
; ..\component\EcuM\Implementation\EcuM.c	  1666      /* #33 Do a global restore to be in a defined status after Mcu_SetMode. */
; ..\component\EcuM\Implementation\EcuM.c	  1667      EcuM_GlobalRestore();
; ..\component\EcuM\Implementation\EcuM.c	  1668  
; ..\component\EcuM\Implementation\EcuM.c	  1669      /* #34 GlobalSuspend is needed for the new call of Mcu_SetMode. It is called at this place to do not miss any wakeup events. */
; ..\component\EcuM\Implementation\EcuM.c	  1670      EcuM_GlobalSuspend();
; ..\component\EcuM\Implementation\EcuM.c	  1671  
; ..\component\EcuM\Implementation\EcuM.c	  1672      /* #35 If no pending or validated wakeup is stored, the EcuM transits back to sleep again. */
; ..\component\EcuM\Implementation\EcuM.c	  1673    }
; ..\component\EcuM\Implementation\EcuM.c	  1674    while (ECUM_COMBINEDWAKEUPS == ECUM_WKSOURCE_NONE);
; ..\component\EcuM\Implementation\EcuM.c	  1675  
; ..\component\EcuM\Implementation\EcuM.c	  1676    /* #36 Else check the former generated RamHash and call the EcuM_ErrorHook in case of an error. */
; ..\component\EcuM\Implementation\EcuM.c	  1677    if ( EcuM_CheckRamHash() == 0u)
; ..\component\EcuM\Implementation\EcuM.c	  1678    {
; ..\component\EcuM\Implementation\EcuM.c	  1679      /* Dem is not called because of the possibility of writing into damaged NVRAM blocks */
; ..\component\EcuM\Implementation\EcuM.c	  1680      EcuM_ErrorHook(ECUM_E_HOOK_RAM_CHECK_FAILED);
; ..\component\EcuM\Implementation\EcuM.c	  1681    }
; ..\component\EcuM\Implementation\EcuM.c	  1682  
; ..\component\EcuM\Implementation\EcuM.c	  1683    EcuM_GlobalRestore();
; ..\component\EcuM\Implementation\EcuM.c	  1684  } /* PRQA S 6050 */ /* MD_MSR_STCAL */
; ..\component\EcuM\Implementation\EcuM.c	  1685  
; ..\component\EcuM\Implementation\EcuM.c	  1686  # if(ECUM_POLLINGOFSLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1687  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1688   *  EcuM_InternalEnterPollingMode()
; ..\component\EcuM\Implementation\EcuM.c	  1689   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1690  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1691   *
; ..\component\EcuM\Implementation\EcuM.c	  1692   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1693   *
; ..\component\EcuM\Implementation\EcuM.c	  1694   *
; ..\component\EcuM\Implementation\EcuM.c	  1695   *
; ..\component\EcuM\Implementation\EcuM.c	  1696   *
; ..\component\EcuM\Implementation\EcuM.c	  1697   *
; ..\component\EcuM\Implementation\EcuM.c	  1698   *
; ..\component\EcuM\Implementation\EcuM.c	  1699   */
; ..\component\EcuM\Implementation\EcuM.c	  1700  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalEnterPollingMode(void)
; ..\component\EcuM\Implementation\EcuM.c	  1701  {
; ..\component\EcuM\Implementation\EcuM.c	  1702    uint8_least loopCount;
; ..\component\EcuM\Implementation\EcuM.c	  1703    uint8 localShutdownMode;
; ..\component\EcuM\Implementation\EcuM.c	  1704    EcuM_StateType unused;
; ..\component\EcuM\Implementation\EcuM.c	  1705  
; ..\component\EcuM\Implementation\EcuM.c	  1706    EcuM_InternalGetShutdownTargetAndMode(&unused, &localShutdownMode); /* SBSW_ECUM_POINTER_TO_LOCAL_VARIABLES */
; ..\component\EcuM\Implementation\EcuM.c	  1707  
; ..\component\EcuM\Implementation\EcuM.c	  1708    /* #20 Set the McuMode for the current sleep phase */
; ..\component\EcuM\Implementation\EcuM.c	  1709    EcuM_McuSetMode(EcuM_GetMcuModeOfSleepModeList(localShutdownMode));
; ..\component\EcuM\Implementation\EcuM.c	  1710  
; ..\component\EcuM\Implementation\EcuM.c	  1711    EcuM_GlobalRestore();
; ..\component\EcuM\Implementation\EcuM.c	  1712  
; ..\component\EcuM\Implementation\EcuM.c	  1713    /* #30 Do the following cyclically as long as no wakeup source is pending or validated:*/
; ..\component\EcuM\Implementation\EcuM.c	  1714  
; ..\component\EcuM\Implementation\EcuM.c	  1715    while (ECUM_COMBINEDWAKEUPS == ECUM_WKSOURCE_NONE)
; ..\component\EcuM\Implementation\EcuM.c	  1716    {
; ..\component\EcuM\Implementation\EcuM.c	  1717      /* #31 Call of EcuM_SleepActivity to control the polling sleep phase. */
; ..\component\EcuM\Implementation\EcuM.c	  1718      EcuM_SleepActivity();
; ..\component\EcuM\Implementation\EcuM.c	  1719  
; ..\component\EcuM\Implementation\EcuM.c	  1720      for (loopCount = 0u; loopCount < EcuM_GetSizeOfWakeupSourceList(); loopCount++)
; ..\component\EcuM\Implementation\EcuM.c	  1721      {
; ..\component\EcuM\Implementation\EcuM.c	  1722  
; ..\component\EcuM\Implementation\EcuM.c	  1723        if ((((EcuM_WakeupSourceType)1u << (EcuM_WakeupSourceType)loopCount) &
; ..\component\EcuM\Implementation\EcuM.c	  1724             (EcuM_GetWakeupSourceOfSleepModeList(localShutdownMode))) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  1725        {
; ..\component\EcuM\Implementation\EcuM.c	  1726          /*  #32 Call CheckWakeup for sources which are active during this sleep phase and configured as polling
; ..\component\EcuM\Implementation\EcuM.c	  1727           *      wakeup sources. */
; ..\component\EcuM\Implementation\EcuM.c	  1728          if (EcuM_IsPollingOfWakeupSourceList(loopCount))
; ..\component\EcuM\Implementation\EcuM.c	  1729          {
; ..\component\EcuM\Implementation\EcuM.c	  1730            EcuM_CheckWakeup(((EcuM_WakeupSourceType)1u << (EcuM_WakeupSourceType)loopCount));
; ..\component\EcuM\Implementation\EcuM.c	  1731          }
; ..\component\EcuM\Implementation\EcuM.c	  1732        }
; ..\component\EcuM\Implementation\EcuM.c	  1733      }
; ..\component\EcuM\Implementation\EcuM.c	  1734    }
; ..\component\EcuM\Implementation\EcuM.c	  1735  }
; ..\component\EcuM\Implementation\EcuM.c	  1736  
; ..\component\EcuM\Implementation\EcuM.c	  1737  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1738  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1739  
; ..\component\EcuM\Implementation\EcuM.c	  1740  #if((ECUM_POSTBUILD_VARIANT_SUPPORT == STD_ON) || (ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE))
; ..\component\EcuM\Implementation\EcuM.c	  1741  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1742   *  EcuM_InternalDeterminePbConfiguration()
; ..\component\EcuM\Implementation\EcuM.c	  1743   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1744  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1745   *
; ..\component\EcuM\Implementation\EcuM.c	  1746   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1747   *
; ..\component\EcuM\Implementation\EcuM.c	  1748   *
; ..\component\EcuM\Implementation\EcuM.c	  1749   *
; ..\component\EcuM\Implementation\EcuM.c	  1750   *
; ..\component\EcuM\Implementation\EcuM.c	  1751   *
; ..\component\EcuM\Implementation\EcuM.c	  1752   *
; ..\component\EcuM\Implementation\EcuM.c	  1753   *
; ..\component\EcuM\Implementation\EcuM.c	  1754   *
; ..\component\EcuM\Implementation\EcuM.c	  1755   */
; ..\component\EcuM\Implementation\EcuM.c	  1756  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalDeterminePbConfiguration(void)
; ..\component\EcuM\Implementation\EcuM.c	  1757  {
; ..\component\EcuM\Implementation\EcuM.c	  1758    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1759    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  1760    uint8 ecumErrorId = ECUM_NO_BSWERROR;
; ..\component\EcuM\Implementation\EcuM.c	  1761  
; ..\component\EcuM\Implementation\EcuM.c	  1762  # if(ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE)
; ..\component\EcuM\Implementation\EcuM.c	  1763    /* Get the pointer to initialization structure of the EcuM */
; ..\component\EcuM\Implementation\EcuM.c	  1764    EcuM_GlobalPBConfig_Ptr = (P2CONST(EcuM_GlobalConfigType, AUTOMATIC, ECUM_PBCFG))EcuM_DeterminePbConfiguration();
; ..\component\EcuM\Implementation\EcuM.c	  1765  
; ..\component\EcuM\Implementation\EcuM.c	  1766  # else
; ..\component\EcuM\Implementation\EcuM.c	  1767    EcuM_GlobalPCConfig_Ptr = EcuM_DeterminePbConfiguration();
; ..\component\EcuM\Implementation\EcuM.c	  1768  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1769    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1770    /* #31 Check the global config pointer for NullPointer. */
; ..\component\EcuM\Implementation\EcuM.c	  1771    if (NULL_PTR == ECUM_GLOBAL_CFG_PTR)
; ..\component\EcuM\Implementation\EcuM.c	  1772    {
; ..\component\EcuM\Implementation\EcuM.c	  1773      errorId = ECUM_E_NULL_POINTER;
; ..\component\EcuM\Implementation\EcuM.c	  1774    }
; ..\component\EcuM\Implementation\EcuM.c	  1775  # if(ECUM_USE_INIT_POINTER == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1776    else
; ..\component\EcuM\Implementation\EcuM.c	  1777    {
; ..\component\EcuM\Implementation\EcuM.c	  1778      EcuM_ConfigDataPtr = ECUM_GLOBAL_CFG_PTR->CfgPtr_EcuM_Init;
; ..\component\EcuM\Implementation\EcuM.c	  1779      /* #32 Check the EcuM configuration for NullPointer. */
; ..\component\EcuM\Implementation\EcuM.c	  1780      if (EcuM_ConfigDataPtr == NULL_PTR)
; ..\component\EcuM\Implementation\EcuM.c	  1781      {
; ..\component\EcuM\Implementation\EcuM.c	  1782  #  if (ECUM_USE_ECUM_BSW_ERROR_HOOK == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1783        ecumErrorId = ECUM_BSWERROR_NULLPTR;
; ..\component\EcuM\Implementation\EcuM.c	  1784  #  else
; ..\component\EcuM\Implementation\EcuM.c	  1785        errorId = ECUM_E_NULL_POINTER;
; ..\component\EcuM\Implementation\EcuM.c	  1786  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  1787      }
; ..\component\EcuM\Implementation\EcuM.c	  1788      else
; ..\component\EcuM\Implementation\EcuM.c	  1789      {
; ..\component\EcuM\Implementation\EcuM.c	  1790  
; ..\component\EcuM\Implementation\EcuM.c	  1791  #  if(ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE)
; ..\component\EcuM\Implementation\EcuM.c	  1792  
; ..\component\EcuM\Implementation\EcuM.c	  1793        /* #40 Check consistency of Postbuild-Loadable configuration data. */
; ..\component\EcuM\Implementation\EcuM.c	  1794        if((EcuM_GetEcuM_CRCHash_Lower() != ECUM_PRECOMPILE_CRC_HASH_LOWER) ||
; ..\component\EcuM\Implementation\EcuM.c	  1795            (EcuM_GetEcuM_CRCHash_Upper() != ECUM_PRECOMPILE_CRC_HASH_UPPER))
; ..\component\EcuM\Implementation\EcuM.c	  1796        {
; ..\component\EcuM\Implementation\EcuM.c	  1797          /* #41 In case of an inconsistent configuration, the user has to choose the modality how the ECU is stopped (Via EcuM_ErrorHook). */
; ..\component\EcuM\Implementation\EcuM.c	  1798          EcuM_ErrorHook(ECUM_E_HOOK_CONFIGURATION_DATA_INCONSISTENT);
; ..\component\EcuM\Implementation\EcuM.c	  1799        }
; ..\component\EcuM\Implementation\EcuM.c	  1800  
; ..\component\EcuM\Implementation\EcuM.c	  1801  #   if(ECUM_USE_ECUM_BSW_ERROR_HOOK == STD_ON) /* COV_ECUM_02 */
; ..\component\EcuM\Implementation\EcuM.c	  1802        /* #42 Check the modules generator version and notify a fail (call of EcuM_BswErrorHook). */
; ..\component\EcuM\Implementation\EcuM.c	  1803        if(EcuM_GetGeneratorCompatibilityVersion() != ECUM_GENERATOR_COMPATIBILITY_VERSION)
; ..\component\EcuM\Implementation\EcuM.c	  1804        {
; ..\component\EcuM\Implementation\EcuM.c	  1805          ecumErrorId = ECUM_BSWERROR_COMPATIBILITYVERSION;
; ..\component\EcuM\Implementation\EcuM.c	  1806        }
; ..\component\EcuM\Implementation\EcuM.c	  1807  
; ..\component\EcuM\Implementation\EcuM.c	  1808        /* #43 Check the modules magic number and notify a fail (call of EcuM_BswErrorHook). */
; ..\component\EcuM\Implementation\EcuM.c	  1809        if(EcuM_GetFinalMagicNumber() != ECUM_FINAL_MAGIC_NUMBER)
; ..\component\EcuM\Implementation\EcuM.c	  1810        {
; ..\component\EcuM\Implementation\EcuM.c	  1811          ecumErrorId = ECUM_BSWERROR_MAGICNUMBER;
; ..\component\EcuM\Implementation\EcuM.c	  1812        }
; ..\component\EcuM\Implementation\EcuM.c	  1813  #   endif /* (ECUM_USE_ECUM_BSW_ERROR_HOOK == STD_ON) */
; ..\component\EcuM\Implementation\EcuM.c	  1814  #   if(ECUM_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1815        EcuM_GlobalPCConfig_Ptr = &EcuM_GlobalPcConfig[EcuM_GlobalPBConfig_Ptr->EcuM_GlobalConfig_Index];
; ..\component\EcuM\Implementation\EcuM.c	  1816  #   endif
; ..\component\EcuM\Implementation\EcuM.c	  1817  #  endif /* (ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE) */
; ..\component\EcuM\Implementation\EcuM.c	  1818      }
; ..\component\EcuM\Implementation\EcuM.c	  1819    }
; ..\component\EcuM\Implementation\EcuM.c	  1820  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1821  
; ..\component\EcuM\Implementation\EcuM.c	  1822  # if (ECUM_USE_ECUM_BSW_ERROR_HOOK == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1823    if(ecumErrorId != ECUM_NO_BSWERROR)
; ..\component\EcuM\Implementation\EcuM.c	  1824    {
; ..\component\EcuM\Implementation\EcuM.c	  1825      EcuM_BswErrorHook(ECUM_MODULE_ID, ecumErrorId);
; ..\component\EcuM\Implementation\EcuM.c	  1826    }
; ..\component\EcuM\Implementation\EcuM.c	  1827  # else
; ..\component\EcuM\Implementation\EcuM.c	  1828    ECUM_DUMMY_STATEMENT(ecumErrorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  1829  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1830  
; ..\component\EcuM\Implementation\EcuM.c	  1831  # if (ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1832    if(errorId != ECUM_E_NO_ERROR)
; ..\component\EcuM\Implementation\EcuM.c	  1833    {
; ..\component\EcuM\Implementation\EcuM.c	  1834      EcuM_Det_ReportError(ECUM_SID_INIT, errorId);
; ..\component\EcuM\Implementation\EcuM.c	  1835    }
; ..\component\EcuM\Implementation\EcuM.c	  1836  # else
; ..\component\EcuM\Implementation\EcuM.c	  1837    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  1838  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1839  
; ..\component\EcuM\Implementation\EcuM.c	  1840  }
; ..\component\EcuM\Implementation\EcuM.c	  1841  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1842  
; ..\component\EcuM\Implementation\EcuM.c	  1843  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1844   *  EcuM_InternalClearWakeupEvent()
; ..\component\EcuM\Implementation\EcuM.c	  1845   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1846  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1847   *
; ..\component\EcuM\Implementation\EcuM.c	  1848   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1849   *
; ..\component\EcuM\Implementation\EcuM.c	  1850   *
; ..\component\EcuM\Implementation\EcuM.c	  1851   */
; ..\component\EcuM\Implementation\EcuM.c	  1852  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalClearWakeupEvent(
; Function EcuM_InternalClearWakeupEvent
.L124:
EcuM_InternalClearWakeupEvent:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  1853      VAR(EcuM_WakeupSourceType, AUTOMATIC) WakeupSource)
; ..\component\EcuM\Implementation\EcuM.c	  1854  {
; ..\component\EcuM\Implementation\EcuM.c	  1855    /* Clear the passed source in the validated wakeups variable. */
; ..\component\EcuM\Implementation\EcuM.c	  1856    EcuM_ValidatedWakeups &= (EcuM_WakeupSourceType) (~WakeupSource);
	mov	d15,#-1
	movh.a	a15,#@his(EcuM_ValidatedWakeups)
.L847:
	xor	d4,d15
	ld.w	d15,[a15]@los(EcuM_ValidatedWakeups)
.L500:
	and	d15,d4
	fcall	.cocofun_4
.L848:

; ..\component\EcuM\Implementation\EcuM.c	  1857  
; ..\component\EcuM\Implementation\EcuM.c	  1858    /* Clear the passed source in the buffered BswM wakeups variable. */
; ..\component\EcuM\Implementation\EcuM.c	  1859    EcuM_BswM_BufferedWakeups &= (EcuM_WakeupSourceType) (~WakeupSource);
	and	d15,d4
	st.w	[a15]@los(EcuM_BswM_BufferedWakeups),d15
.L849:

; ..\component\EcuM\Implementation\EcuM.c	  1860  
; ..\component\EcuM\Implementation\EcuM.c	  1861  #if (ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1862    /* Clear the passed source in the pending wakeups variable. - If wakeup validation is configured. */
; ..\component\EcuM\Implementation\EcuM.c	  1863    EcuM_PendingWakeups &= (EcuM_WakeupSourceType) (~WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1864  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1865  
; ..\component\EcuM\Implementation\EcuM.c	  1866  #if (ECUM_TIMEOUTOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1867    /* Clear the passed source in the expired wakeups variable. - If wakeup validation is configured. */
; ..\component\EcuM\Implementation\EcuM.c	  1868    EcuM_ExpiredWakeups &= (EcuM_WakeupSourceType) (~WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1869  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1870  
; ..\component\EcuM\Implementation\EcuM.c	  1871  #if (ECUM_CHECKWAKEUPTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1872    /* Clear the passed source in the pending checkwakeups variable. - If checkwakeup validation is configured. */
; ..\component\EcuM\Implementation\EcuM.c	  1873    EcuM_PendingCheckWakeups &= (EcuM_WakeupSourceType) (~WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1874  
; ..\component\EcuM\Implementation\EcuM.c	  1875  # if (ECUM_DEFERRED_BSWM_NOTIFICATION == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1876    EcuM_ExpiredCheckWakeups &= (EcuM_WakeupSourceType) (~WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  1877  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1878  
; ..\component\EcuM\Implementation\EcuM.c	  1879  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1880  
; ..\component\EcuM\Implementation\EcuM.c	  1881  #if(ECUM_CHANNELOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1882    /* Clear the passed source in the buffered ComM wakeups variable. - If a source with relation to a ComM Channel is configured. */
; ..\component\EcuM\Implementation\EcuM.c	  1883    EcuM_ComM_BufferedWakeups &= (EcuM_WakeupSourceType) (~WakeupSource);
	fcall	.cocofun_5
.L850:
	and	d15,d4
	st.w	[a15]@los(EcuM_ComM_BufferedWakeups),d15
.L851:

; ..\component\EcuM\Implementation\EcuM.c	  1884  #endif
; ..\component\EcuM\Implementation\EcuM.c	  1885  
; ..\component\EcuM\Implementation\EcuM.c	  1886  }
	ret
.L486:
	
__EcuM_InternalClearWakeupEvent_function_end:
	.size	EcuM_InternalClearWakeupEvent,__EcuM_InternalClearWakeupEvent_function_end-EcuM_InternalClearWakeupEvent
.L325:
	; End of function
	
	.sdecl	'.text.EcuM..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.EcuM..cocofun_5'
	.align	2
; Function .cocofun_5
.L126:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0
	movh.a	a15,#@his(EcuM_ComM_BufferedWakeups)
	ld.w	d15,[a15]@los(EcuM_ComM_BufferedWakeups)
.L876:
	fret
.L350:
	; End of function
	.sdecl	'.text.EcuM..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.EcuM..cocofun_4'
	.align	2
; Function .cocofun_4
.L128:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	st.w	[a15]@los(EcuM_ValidatedWakeups),d15
.L870:
	movh.a	a15,#@his(EcuM_BswM_BufferedWakeups)
	ld.w	d15,[a15]@los(EcuM_BswM_BufferedWakeups)
.L871:
	fret
.L345:
	; End of function
	.sdecl	'.text.EcuM.EcuM_MainFunction',code,cluster('EcuM_MainFunction')
	.sect	'.text.EcuM.EcuM_MainFunction'
	.align	2
	
	.global	EcuM_MainFunction

; ..\component\EcuM\Implementation\EcuM.c	  1887  
; ..\component\EcuM\Implementation\EcuM.c	  1888  #if(ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1889  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1890   *  EcuM_ActEnterRun()
; ..\component\EcuM\Implementation\EcuM.c	  1891   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1892  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1893   *
; ..\component\EcuM\Implementation\EcuM.c	  1894   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1895   *
; ..\component\EcuM\Implementation\EcuM.c	  1896   *
; ..\component\EcuM\Implementation\EcuM.c	  1897   *
; ..\component\EcuM\Implementation\EcuM.c	  1898   *
; ..\component\EcuM\Implementation\EcuM.c	  1899   *
; ..\component\EcuM\Implementation\EcuM.c	  1900   *
; ..\component\EcuM\Implementation\EcuM.c	  1901   *
; ..\component\EcuM\Implementation\EcuM.c	  1902   */
; ..\component\EcuM\Implementation\EcuM.c	  1903  ECUM_LOCAL FUNC(void, ECUM_CODE) EcuM_ActEnterRun(void)
; ..\component\EcuM\Implementation\EcuM.c	  1904  {
; ..\component\EcuM\Implementation\EcuM.c	  1905    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1906  # if(ECUM_COMM_COMALLOWEDLIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1907    uint8_least loopCount;
; ..\component\EcuM\Implementation\EcuM.c	  1908  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1909  
; ..\component\EcuM\Implementation\EcuM.c	  1910    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1911    /* #20 Set the EcuM State to ECUM_STATE_APP_RUN. */
; ..\component\EcuM\Implementation\EcuM.c	  1912    EcuM_SetModuleState(ECUM_STATE_APP_RUN); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  1913  
; ..\component\EcuM\Implementation\EcuM.c	  1914    /* #21 Execute user-specific code during transition to Run (EcuM_OnEnterRun()). */
; ..\component\EcuM\Implementation\EcuM.c	  1915    EcuM_OnEnterRun();
; ..\component\EcuM\Implementation\EcuM.c	  1916  
; ..\component\EcuM\Implementation\EcuM.c	  1917  # if(ECUM_COMM_COMALLOWEDLIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1918    /* #22 Set communication of all configured ComM channels to allowed when enter run state. */
; ..\component\EcuM\Implementation\EcuM.c	  1919    for (loopCount = 0u; loopCount < EcuM_GetSizeOfComM_ComAllowedList(); loopCount++)
; ..\component\EcuM\Implementation\EcuM.c	  1920    {
; ..\component\EcuM\Implementation\EcuM.c	  1921      ComM_CommunicationAllowed(EcuM_GetComM_ComAllowedList(loopCount), TRUE);
; ..\component\EcuM\Implementation\EcuM.c	  1922    }
; ..\component\EcuM\Implementation\EcuM.c	  1923  # endif
; ..\component\EcuM\Implementation\EcuM.c	  1924  
; ..\component\EcuM\Implementation\EcuM.c	  1925    /* #23 Set the self run request timer. */
; ..\component\EcuM\Implementation\EcuM.c	  1926    EcuM_SetTimer((uint16)EcuM_GetSelfRunRequestTimeout()); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  1927  
; ..\component\EcuM\Implementation\EcuM.c	  1928    /* #24 Notify the state ECUM_STATE_APP_RUN to BswM. */
; ..\component\EcuM\Implementation\EcuM.c	  1929    BswM_EcuM_CurrentState( ECUM_STATE_APP_RUN);
; ..\component\EcuM\Implementation\EcuM.c	  1930  
; ..\component\EcuM\Implementation\EcuM.c	  1931    /* #25 Trigger the RTE Mode Switch to RUN. */
; ..\component\EcuM\Implementation\EcuM.c	  1932    ECUM_RTE_SWITCH(RTE_MODE_EcuM_Mode_RUN);
; ..\component\EcuM\Implementation\EcuM.c	  1933  }
; ..\component\EcuM\Implementation\EcuM.c	  1934  
; ..\component\EcuM\Implementation\EcuM.c	  1935  # if (ECUM_INCLUDE_NVRAM_MGR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1936  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  1937   *  EcuM_WaitOnNvMWriteAll()
; ..\component\EcuM\Implementation\EcuM.c	  1938   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  1939  /*!
; ..\component\EcuM\Implementation\EcuM.c	  1940   *
; ..\component\EcuM\Implementation\EcuM.c	  1941   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  1942   *
; ..\component\EcuM\Implementation\EcuM.c	  1943   *
; ..\component\EcuM\Implementation\EcuM.c	  1944   *
; ..\component\EcuM\Implementation\EcuM.c	  1945   *
; ..\component\EcuM\Implementation\EcuM.c	  1946   *
; ..\component\EcuM\Implementation\EcuM.c	  1947   *
; ..\component\EcuM\Implementation\EcuM.c	  1948   *
; ..\component\EcuM\Implementation\EcuM.c	  1949   *
; ..\component\EcuM\Implementation\EcuM.c	  1950   *
; ..\component\EcuM\Implementation\EcuM.c	  1951   *
; ..\component\EcuM\Implementation\EcuM.c	  1952   *
; ..\component\EcuM\Implementation\EcuM.c	  1953   *
; ..\component\EcuM\Implementation\EcuM.c	  1954   *
; ..\component\EcuM\Implementation\EcuM.c	  1955   */
; ..\component\EcuM\Implementation\EcuM.c	  1956  ECUM_LOCAL boolean EcuM_WaitOnNvMWriteAll(void)
; ..\component\EcuM\Implementation\EcuM.c	  1957  {
; ..\component\EcuM\Implementation\EcuM.c	  1958    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1959    boolean retVal = FALSE;
; ..\component\EcuM\Implementation\EcuM.c	  1960  
; ..\component\EcuM\Implementation\EcuM.c	  1961    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  1962    /* #30 In case the WriteAll Status is Idle: */
; ..\component\EcuM\Implementation\EcuM.c	  1963    if ( EcuM_GetNvMWriteAllStatus() == ECUM_NVM_WRITEALL_IDLE)
; ..\component\EcuM\Implementation\EcuM.c	  1964    {
; ..\component\EcuM\Implementation\EcuM.c	  1965      /* #31 NvM_WriteAll has already finished - Stop timer. */
; ..\component\EcuM\Implementation\EcuM.c	  1966      EcuM_SetTimer(ECUM_TIMER_NOT_SET); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  1967    }
; ..\component\EcuM\Implementation\EcuM.c	  1968    /* #40 In case the WriteAll Status is Required: */
; ..\component\EcuM\Implementation\EcuM.c	  1969    else if ( EcuM_GetNvMWriteAllStatus() == ECUM_NVM_WRITEALL_REQUIRED)
; ..\component\EcuM\Implementation\EcuM.c	  1970    {
; ..\component\EcuM\Implementation\EcuM.c	  1971      /* #41 Set the WriteAll Status to started.*/
; ..\component\EcuM\Implementation\EcuM.c	  1972      EcuM_SetNvMWriteAllStatus(ECUM_NVM_WRITEALL_STARTED); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  1973      /* #42 Set the internal timer to monitor a WriteAll timeout. */
; ..\component\EcuM\Implementation\EcuM.c	  1974      EcuM_SetTimer(EcuM_GetNvMWriteAllTimeout()); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  1975      /* #43 Trigger the NvM_WriteAll(). */
; ..\component\EcuM\Implementation\EcuM.c	  1976      NvM_WriteAll();
; ..\component\EcuM\Implementation\EcuM.c	  1977      retVal = TRUE;
; ..\component\EcuM\Implementation\EcuM.c	  1978    }
; ..\component\EcuM\Implementation\EcuM.c	  1979    /* #50 In case the WriteAll Status is Expired: */
; ..\component\EcuM\Implementation\EcuM.c	  1980    else if ( EcuM_GetTimer() == ECUM_TIMER_EXPIRED)
; ..\component\EcuM\Implementation\EcuM.c	  1981    {
; ..\component\EcuM\Implementation\EcuM.c	  1982      /* #51 Execute user-specific code to react on a failed WriteAll (EcuM_OnFailedNvmWriteAllJobReaction()). */
; ..\component\EcuM\Implementation\EcuM.c	  1983      EcuM_OnFailedNvmWriteAllJobReaction();
; ..\component\EcuM\Implementation\EcuM.c	  1984      /* #52 Stop the internal timer to monitor a timeout. */
; ..\component\EcuM\Implementation\EcuM.c	  1985      EcuM_SetTimer(ECUM_TIMER_NOT_SET); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  1986      /* #53 Set the WriteAll Status to Idle. */
; ..\component\EcuM\Implementation\EcuM.c	  1987      EcuM_SetNvMWriteAllStatus(ECUM_NVM_WRITEALL_IDLE); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  1988    }
; ..\component\EcuM\Implementation\EcuM.c	  1989    /* #60 In case the WriteAll Status is Expired: */
; ..\component\EcuM\Implementation\EcuM.c	  1990    else
; ..\component\EcuM\Implementation\EcuM.c	  1991    {
; ..\component\EcuM\Implementation\EcuM.c	  1992      /* #61 WriteAll is still in progress and timer not expired - Wait for NvM job end notification. */
; ..\component\EcuM\Implementation\EcuM.c	  1993      retVal = TRUE;
; ..\component\EcuM\Implementation\EcuM.c	  1994    }
; ..\component\EcuM\Implementation\EcuM.c	  1995    return retVal;
; ..\component\EcuM\Implementation\EcuM.c	  1996  }
; ..\component\EcuM\Implementation\EcuM.c	  1997  
; ..\component\EcuM\Implementation\EcuM.c	  1998  #  if(ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  1999  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2000   *  EcuM_WaitOnNvMCancelWriteAll()
; ..\component\EcuM\Implementation\EcuM.c	  2001   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2002  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2003   *
; ..\component\EcuM\Implementation\EcuM.c	  2004   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2005   *
; ..\component\EcuM\Implementation\EcuM.c	  2006   *
; ..\component\EcuM\Implementation\EcuM.c	  2007   *
; ..\component\EcuM\Implementation\EcuM.c	  2008   *
; ..\component\EcuM\Implementation\EcuM.c	  2009   *
; ..\component\EcuM\Implementation\EcuM.c	  2010   *
; ..\component\EcuM\Implementation\EcuM.c	  2011   *
; ..\component\EcuM\Implementation\EcuM.c	  2012   *
; ..\component\EcuM\Implementation\EcuM.c	  2013   *
; ..\component\EcuM\Implementation\EcuM.c	  2014   *
; ..\component\EcuM\Implementation\EcuM.c	  2015   *
; ..\component\EcuM\Implementation\EcuM.c	  2016   *
; ..\component\EcuM\Implementation\EcuM.c	  2017   *
; ..\component\EcuM\Implementation\EcuM.c	  2018   */
; ..\component\EcuM\Implementation\EcuM.c	  2019  ECUM_LOCAL_INLINE boolean EcuM_WaitOnNvMCancelWriteAll(void)
; ..\component\EcuM\Implementation\EcuM.c	  2020  {
; ..\component\EcuM\Implementation\EcuM.c	  2021    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2022    boolean retVal = FALSE;
; ..\component\EcuM\Implementation\EcuM.c	  2023  
; ..\component\EcuM\Implementation\EcuM.c	  2024    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2025    /* #30 In case the WriteAll Status is Idle: */
; ..\component\EcuM\Implementation\EcuM.c	  2026    if ( EcuM_GetNvMWriteAllStatus() == ECUM_NVM_WRITEALL_IDLE)
; ..\component\EcuM\Implementation\EcuM.c	  2027    {
; ..\component\EcuM\Implementation\EcuM.c	  2028      /* #31 NvM_WriteAll has already finished - Stop timer. */
; ..\component\EcuM\Implementation\EcuM.c	  2029      EcuM_SetTimer(ECUM_TIMER_NOT_SET); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2030    }
; ..\component\EcuM\Implementation\EcuM.c	  2031    /* #40 In case the WriteAll Status is Started: */
; ..\component\EcuM\Implementation\EcuM.c	  2032    else
; ..\component\EcuM\Implementation\EcuM.c	  2033  #   if(ECUM_NVMCANCELWRITEALLTIMEOUT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2034    if ( EcuM_GetNvMWriteAllStatus() == ECUM_NVM_WRITEALL_STARTED)
; ..\component\EcuM\Implementation\EcuM.c	  2035  #   endif
; ..\component\EcuM\Implementation\EcuM.c	  2036    {
; ..\component\EcuM\Implementation\EcuM.c	  2037      /* #41 Set the WriteAll Status to canceled. */
; ..\component\EcuM\Implementation\EcuM.c	  2038      EcuM_SetNvMWriteAllStatus(ECUM_NVM_WRITEALL_CANCELED); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2039  
; ..\component\EcuM\Implementation\EcuM.c	  2040      /* #42 Set the internal timer to monitor a CancelWriteAll timeout. */
; ..\component\EcuM\Implementation\EcuM.c	  2041  #   if(ECUM_NVMCANCELWRITEALLTIMEOUT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2042      EcuM_SetTimer(EcuM_GetNvMCancelWriteAllTimeout()); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2043      retVal = TRUE;
; ..\component\EcuM\Implementation\EcuM.c	  2044  #   else
; ..\component\EcuM\Implementation\EcuM.c	  2045      EcuM_SetTimer(ECUM_TIMER_NOT_SET); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2046  #   endif
; ..\component\EcuM\Implementation\EcuM.c	  2047  
; ..\component\EcuM\Implementation\EcuM.c	  2048      /* #43 Trigger the NvM_CancelWriteAll(). */
; ..\component\EcuM\Implementation\EcuM.c	  2049      NvM_CancelWriteAll();
; ..\component\EcuM\Implementation\EcuM.c	  2050    }
; ..\component\EcuM\Implementation\EcuM.c	  2051    /* #50 In case the WriteAll Status is Expired: */
; ..\component\EcuM\Implementation\EcuM.c	  2052  #   if(ECUM_NVMCANCELWRITEALLTIMEOUT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2053    else if ( EcuM_GetTimer() == ECUM_TIMER_EXPIRED)
; ..\component\EcuM\Implementation\EcuM.c	  2054    {
; ..\component\EcuM\Implementation\EcuM.c	  2055      /* #51 EcuM shall call the KillWriteAll(MICROSAR extension) API to force an abort of the job. */
; ..\component\EcuM\Implementation\EcuM.c	  2056      NvM_KillWriteAll();
; ..\component\EcuM\Implementation\EcuM.c	  2057      /* #52 Stop the internal timer to monitor a timeout. */
; ..\component\EcuM\Implementation\EcuM.c	  2058      EcuM_SetTimer(ECUM_TIMER_NOT_SET); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2059      /* #53 Set the WriteAll Status to required, to re-trigger a WriteAll for the next shutdown. */
; ..\component\EcuM\Implementation\EcuM.c	  2060      EcuM_SetNvMWriteAllStatus(ECUM_NVM_WRITEALL_REQUIRED); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2061    }
; ..\component\EcuM\Implementation\EcuM.c	  2062    /* #60 In case the WriteAll Status is Canceled: */
; ..\component\EcuM\Implementation\EcuM.c	  2063    else if ( EcuM_GetNvMWriteAllStatus() == ECUM_NVM_WRITEALL_CANCELED)
; ..\component\EcuM\Implementation\EcuM.c	  2064    {
; ..\component\EcuM\Implementation\EcuM.c	  2065      /* #61 NvM has not finished yet, remain in this state. */
; ..\component\EcuM\Implementation\EcuM.c	  2066      retVal = TRUE;
; ..\component\EcuM\Implementation\EcuM.c	  2067    }
; ..\component\EcuM\Implementation\EcuM.c	  2068    else
; ..\component\EcuM\Implementation\EcuM.c	  2069    {
; ..\component\EcuM\Implementation\EcuM.c	  2070      /* Nothing to do */
; ..\component\EcuM\Implementation\EcuM.c	  2071    }
; ..\component\EcuM\Implementation\EcuM.c	  2072  #   endif
; ..\component\EcuM\Implementation\EcuM.c	  2073    return retVal;
; ..\component\EcuM\Implementation\EcuM.c	  2074  }
; ..\component\EcuM\Implementation\EcuM.c	  2075  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2076  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2077  
; ..\component\EcuM\Implementation\EcuM.c	  2078  # if(ECUM_SUPPORT_COMM == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2079  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2080   *  EcuM_QryComMRunRequest()
; ..\component\EcuM\Implementation\EcuM.c	  2081   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2082  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2083   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2084   *
; ..\component\EcuM\Implementation\EcuM.c	  2085   *
; ..\component\EcuM\Implementation\EcuM.c	  2086   */
; ..\component\EcuM\Implementation\EcuM.c	  2087  ECUM_LOCAL FUNC(boolean, ECUM_CODE) EcuM_QryComMRunRequest(void)
; ..\component\EcuM\Implementation\EcuM.c	  2088  {
; ..\component\EcuM\Implementation\EcuM.c	  2089    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2090    uint8_least loopCount;
; ..\component\EcuM\Implementation\EcuM.c	  2091    boolean retVal = FALSE;
; ..\component\EcuM\Implementation\EcuM.c	  2092    ComM_StateType currentState;
; ..\component\EcuM\Implementation\EcuM.c	  2093  
; ..\component\EcuM\Implementation\EcuM.c	  2094    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2095    /* Iterate over all configured ComM Channels. */
; ..\component\EcuM\Implementation\EcuM.c	  2096    for (loopCount = 0u; loopCount < EcuM_GetSizeOfComMChannels(); loopCount++)
; ..\component\EcuM\Implementation\EcuM.c	  2097    {
; ..\component\EcuM\Implementation\EcuM.c	  2098      /*  Get the state of every channel and check if the request was successful (E_OK). */
; ..\component\EcuM\Implementation\EcuM.c	  2099      if (E_OK == ComM_GetState((NetworkHandleType) EcuM_GetComMChannels(loopCount), &currentState)) /* SBSW_ECUM_ADRESSPARAMETER_TOCOMM */
; ..\component\EcuM\Implementation\EcuM.c	  2100      {
; ..\component\EcuM\Implementation\EcuM.c	  2101        /* If at least one channel is not COMM_NO_COM_NO_PENDING_REQUEST the function returns and EcuM has to stay in Run State. */
; ..\component\EcuM\Implementation\EcuM.c	  2102        if (currentState != COMM_NO_COM_NO_PENDING_REQUEST)
; ..\component\EcuM\Implementation\EcuM.c	  2103        {
; ..\component\EcuM\Implementation\EcuM.c	  2104          retVal = TRUE;
; ..\component\EcuM\Implementation\EcuM.c	  2105          break;
; ..\component\EcuM\Implementation\EcuM.c	  2106        }
; ..\component\EcuM\Implementation\EcuM.c	  2107      }
; ..\component\EcuM\Implementation\EcuM.c	  2108    }
; ..\component\EcuM\Implementation\EcuM.c	  2109    return retVal;
; ..\component\EcuM\Implementation\EcuM.c	  2110  }
; ..\component\EcuM\Implementation\EcuM.c	  2111  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2112  
; ..\component\EcuM\Implementation\EcuM.c	  2113  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2114   *  EcuM_Statemachine
; ..\component\EcuM\Implementation\EcuM.c	  2115   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2116  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2117   *
; ..\component\EcuM\Implementation\EcuM.c	  2118   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2119   *
; ..\component\EcuM\Implementation\EcuM.c	  2120   *
; ..\component\EcuM\Implementation\EcuM.c	  2121   *
; ..\component\EcuM\Implementation\EcuM.c	  2122   *
; ..\component\EcuM\Implementation\EcuM.c	  2123   */
; ..\component\EcuM\Implementation\EcuM.c	  2124  ECUM_LOCAL FUNC(void, ECUM_CODE) EcuM_Statemachine(void)
; ..\component\EcuM\Implementation\EcuM.c	  2125  {
; ..\component\EcuM\Implementation\EcuM.c	  2126  # if(ECUM_COMM_COMALLOWEDLIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2127    uint8_least loopCount;
; ..\component\EcuM\Implementation\EcuM.c	  2128  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2129  
; ..\component\EcuM\Implementation\EcuM.c	  2130    switch ( EcuM_GetModuleState())
; ..\component\EcuM\Implementation\EcuM.c	  2131    {
; ..\component\EcuM\Implementation\EcuM.c	  2132      /*******************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2133       *  ECUM_STATE_STARTUP
; ..\component\EcuM\Implementation\EcuM.c	  2134       ******************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2135      case ECUM_STATE_STARTUP_TWO:
; ..\component\EcuM\Implementation\EcuM.c	  2136  # if ( ECUM_SUPPORT_RTE_MODE_SWITCH_ACK == STD_ON )
; ..\component\EcuM\Implementation\EcuM.c	  2137      if (Rte_SwitchAck_EcuM_currentMode_currentMode() != RTE_E_NO_DATA)
; ..\component\EcuM\Implementation\EcuM.c	  2138  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2139      {
; ..\component\EcuM\Implementation\EcuM.c	  2140        if (EcuM_ValidatedWakeups != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2141        {
; ..\component\EcuM\Implementation\EcuM.c	  2142          EcuM_ActEnterRun();
; ..\component\EcuM\Implementation\EcuM.c	  2143        }
; ..\component\EcuM\Implementation\EcuM.c	  2144        else
; ..\component\EcuM\Implementation\EcuM.c	  2145        {
; ..\component\EcuM\Implementation\EcuM.c	  2146          /* no validated wake up event notified, change to wakeup validation */
; ..\component\EcuM\Implementation\EcuM.c	  2147          EcuM_SetModuleState(ECUM_STATE_WAKEUP_VALIDATION); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2148          BswM_EcuM_CurrentState( ECUM_STATE_WAKEUP_VALIDATION);
; ..\component\EcuM\Implementation\EcuM.c	  2149          ECUM_RTE_SWITCH(RTE_MODE_EcuM_Mode_SLEEP);
; ..\component\EcuM\Implementation\EcuM.c	  2150        }
; ..\component\EcuM\Implementation\EcuM.c	  2151      }
; ..\component\EcuM\Implementation\EcuM.c	  2152      break;
; ..\component\EcuM\Implementation\EcuM.c	  2153  
; ..\component\EcuM\Implementation\EcuM.c	  2154      /*******************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2155       *  ECUM_STATE_RUN
; ..\component\EcuM\Implementation\EcuM.c	  2156       ******************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2157      case ECUM_STATE_APP_RUN:
; ..\component\EcuM\Implementation\EcuM.c	  2158  
; ..\component\EcuM\Implementation\EcuM.c	  2159        /*
; ..\component\EcuM\Implementation\EcuM.c	  2160         * Critical section is necessary to prevent interruption between polling of ComM channel state and clearing of
; ..\component\EcuM\Implementation\EcuM.c	  2161         * wakeup events. An interruption could cause losing of wakeup events.
; ..\component\EcuM\Implementation\EcuM.c	  2162         * \trace DSGN-EcuM2048
; ..\component\EcuM\Implementation\EcuM.c	  2163         */
; ..\component\EcuM\Implementation\EcuM.c	  2164        EcuM_EnterCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  2165  
; ..\component\EcuM\Implementation\EcuM.c	  2166      /* PRQA S 3415 6 */ /* MD_EcuM_3415 */
; ..\component\EcuM\Implementation\EcuM.c	  2167      if ((EcuM_GetRunRequestCounter() == 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2168  # if (ECUM_SUPPORT_RTE_MODE_SWITCH_ACK == STD_ON )
; ..\component\EcuM\Implementation\EcuM.c	  2169          && (Rte_SwitchAck_EcuM_currentMode_currentMode() != RTE_E_NO_DATA)
; ..\component\EcuM\Implementation\EcuM.c	  2170  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2171  # if(ECUM_SUPPORT_COMM == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2172          && (EcuM_QryComMRunRequest() == FALSE)
; ..\component\EcuM\Implementation\EcuM.c	  2173  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2174  # if(ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST)
; ..\component\EcuM\Implementation\EcuM.c	  2175          && (EcuM_PendingWakeups == 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2176  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2177          && (EcuM_GetTimer() == 0u))
; ..\component\EcuM\Implementation\EcuM.c	  2178      {
; ..\component\EcuM\Implementation\EcuM.c	  2179        /* No pending wakeup is present - wakeups can be cleared */
; ..\component\EcuM\Implementation\EcuM.c	  2180        EcuM_ClearWakeupEvent(ECUM_WKSOURCE_ALL_SOURCES);
; ..\component\EcuM\Implementation\EcuM.c	  2181  
; ..\component\EcuM\Implementation\EcuM.c	  2182        EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  2183  
; ..\component\EcuM\Implementation\EcuM.c	  2184  # if(ECUM_COMM_COMALLOWEDLIST== STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2185        /* Set communication of all ComM channels to not allowed when leaving run state */
; ..\component\EcuM\Implementation\EcuM.c	  2186        for (loopCount = 0u; loopCount < EcuM_GetSizeOfComM_ComAllowedList(); loopCount++)
; ..\component\EcuM\Implementation\EcuM.c	  2187        {
; ..\component\EcuM\Implementation\EcuM.c	  2188          ComM_CommunicationAllowed(EcuM_GetComM_ComAllowedList(loopCount), FALSE);
; ..\component\EcuM\Implementation\EcuM.c	  2189        }
; ..\component\EcuM\Implementation\EcuM.c	  2190  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2191  
; ..\component\EcuM\Implementation\EcuM.c	  2192        EcuM_OnExitRun();
; ..\component\EcuM\Implementation\EcuM.c	  2193  
; ..\component\EcuM\Implementation\EcuM.c	  2194        /* Transit to PostRun */
; ..\component\EcuM\Implementation\EcuM.c	  2195        EcuM_SetModuleState(ECUM_STATE_APP_POST_RUN); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2196  
; ..\component\EcuM\Implementation\EcuM.c	  2197        BswM_EcuM_CurrentState( ECUM_STATE_APP_POST_RUN);
; ..\component\EcuM\Implementation\EcuM.c	  2198        ECUM_RTE_SWITCH(RTE_MODE_EcuM_Mode_POST_RUN);
; ..\component\EcuM\Implementation\EcuM.c	  2199      }
; ..\component\EcuM\Implementation\EcuM.c	  2200      else
; ..\component\EcuM\Implementation\EcuM.c	  2201      {
; ..\component\EcuM\Implementation\EcuM.c	  2202        EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  2203      }
; ..\component\EcuM\Implementation\EcuM.c	  2204      break;
; ..\component\EcuM\Implementation\EcuM.c	  2205  
; ..\component\EcuM\Implementation\EcuM.c	  2206      /*******************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2207       *  ECUM_STATE_POST_RUN
; ..\component\EcuM\Implementation\EcuM.c	  2208       ******************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2209      case ECUM_STATE_APP_POST_RUN:
; ..\component\EcuM\Implementation\EcuM.c	  2210  
; ..\component\EcuM\Implementation\EcuM.c	  2211  # if ( ECUM_SUPPORT_RTE_MODE_SWITCH_ACK == STD_ON )
; ..\component\EcuM\Implementation\EcuM.c	  2212      if (Rte_SwitchAck_EcuM_currentMode_currentMode() != RTE_E_NO_DATA)
; ..\component\EcuM\Implementation\EcuM.c	  2213  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2214      {
; ..\component\EcuM\Implementation\EcuM.c	  2215        /* PRQA S 3415 3 */ /* MD_EcuM_3415 */
; ..\component\EcuM\Implementation\EcuM.c	  2216        if ((EcuM_ValidatedWakeups != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2217  # if(ECUM_SUPPORT_COMM == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2218            || (EcuM_QryComMRunRequest() == TRUE)
; ..\component\EcuM\Implementation\EcuM.c	  2219  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2220            || (EcuM_GetRunRequestCounter() != 0u))
; ..\component\EcuM\Implementation\EcuM.c	  2221        {
; ..\component\EcuM\Implementation\EcuM.c	  2222          /* Transit to Run */
; ..\component\EcuM\Implementation\EcuM.c	  2223          EcuM_ActEnterRun();
; ..\component\EcuM\Implementation\EcuM.c	  2224        }
; ..\component\EcuM\Implementation\EcuM.c	  2225        else if ( EcuM_GetPostRunRequestCounter() == 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2226        {
; ..\component\EcuM\Implementation\EcuM.c	  2227          /* Transit to PrepShutdown */
; ..\component\EcuM\Implementation\EcuM.c	  2228          EcuM_OnExitPostRun();
; ..\component\EcuM\Implementation\EcuM.c	  2229  
; ..\component\EcuM\Implementation\EcuM.c	  2230  # if (ECUM_INCLUDE_NVRAM_MGR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2231          /* Mark that NvM_WriteAll must be performed, caused by pending data */
; ..\component\EcuM\Implementation\EcuM.c	  2232          EcuM_SetNvMWriteAllStatus(ECUM_NVM_WRITEALL_REQUIRED); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2233  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2234          /* Transit to Prep Shutdown */
; ..\component\EcuM\Implementation\EcuM.c	  2235          EcuM_SetModuleState(ECUM_STATE_PREP_SHUTDOWN); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2236  
; ..\component\EcuM\Implementation\EcuM.c	  2237          BswM_EcuM_CurrentState( ECUM_STATE_PREP_SHUTDOWN);
; ..\component\EcuM\Implementation\EcuM.c	  2238        }
; ..\component\EcuM\Implementation\EcuM.c	  2239        else
; ..\component\EcuM\Implementation\EcuM.c	  2240        {
; ..\component\EcuM\Implementation\EcuM.c	  2241          /* Nothing to do */
; ..\component\EcuM\Implementation\EcuM.c	  2242        }
; ..\component\EcuM\Implementation\EcuM.c	  2243      }
; ..\component\EcuM\Implementation\EcuM.c	  2244      break;
; ..\component\EcuM\Implementation\EcuM.c	  2245  
; ..\component\EcuM\Implementation\EcuM.c	  2246      /*******************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2247       *  ECUM_STATE_PREP_SHUTDOWN
; ..\component\EcuM\Implementation\EcuM.c	  2248       ******************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2249      case ECUM_STATE_PREP_SHUTDOWN:
; ..\component\EcuM\Implementation\EcuM.c	  2250  
; ..\component\EcuM\Implementation\EcuM.c	  2251      EcuM_OnPrepShutdown();
; ..\component\EcuM\Implementation\EcuM.c	  2252  # if (ECUM_SUPPORT_DEM == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2253      Dem_Shutdown();
; ..\component\EcuM\Implementation\EcuM.c	  2254      EcuM_SetDemStatus(ECUM_DEM_SHUT_DOWN); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2255  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2256  # if (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2257      if (EcuM_CurrentShutdownTarget == ECUM_STATE_SLEEP)
; ..\component\EcuM\Implementation\EcuM.c	  2258      {
; ..\component\EcuM\Implementation\EcuM.c	  2259        /* Transit to Go Sleep */
; ..\component\EcuM\Implementation\EcuM.c	  2260        EcuM_SetModuleState(ECUM_STATE_GO_SLEEP); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2261        EcuM_OnGoSleep();
; ..\component\EcuM\Implementation\EcuM.c	  2262        BswM_EcuM_CurrentState( ECUM_STATE_GO_SLEEP);
; ..\component\EcuM\Implementation\EcuM.c	  2263        ECUM_RTE_SWITCH(RTE_MODE_EcuM_Mode_SLEEP);
; ..\component\EcuM\Implementation\EcuM.c	  2264      }
; ..\component\EcuM\Implementation\EcuM.c	  2265      else /* target is ECUM_STATE_OFF or ECUM_STATE_RESET */
; ..\component\EcuM\Implementation\EcuM.c	  2266  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2267      {
; ..\component\EcuM\Implementation\EcuM.c	  2268        /* Transit to Go Off */
; ..\component\EcuM\Implementation\EcuM.c	  2269        EcuM_SetModuleState(ECUM_STATE_GO_OFF_ONE); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2270        EcuM_OnGoOffOne();
; ..\component\EcuM\Implementation\EcuM.c	  2271        BswM_EcuM_CurrentState( ECUM_STATE_GO_OFF_ONE);
; ..\component\EcuM\Implementation\EcuM.c	  2272        ECUM_RTE_SWITCH(RTE_MODE_EcuM_Mode_SHUTDOWN);
; ..\component\EcuM\Implementation\EcuM.c	  2273      }
; ..\component\EcuM\Implementation\EcuM.c	  2274      break;
; ..\component\EcuM\Implementation\EcuM.c	  2275  # if (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2276      /*******************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2277       *  ECUM_STATE_GO_SLEEP
; ..\component\EcuM\Implementation\EcuM.c	  2278       ******************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2279      case ECUM_STATE_GO_SLEEP:
; ..\component\EcuM\Implementation\EcuM.c	  2280  
; ..\component\EcuM\Implementation\EcuM.c	  2281  #  if (ECUM_SUPPORT_RTE_MODE_SWITCH_ACK == STD_ON )
; ..\component\EcuM\Implementation\EcuM.c	  2282      if (Rte_SwitchAck_EcuM_currentMode_currentMode() != RTE_E_NO_DATA)
; ..\component\EcuM\Implementation\EcuM.c	  2283  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2284      {
; ..\component\EcuM\Implementation\EcuM.c	  2285        if (ECUM_COMBINEDWAKEUPS != ECUM_WKSOURCE_NONE)
; ..\component\EcuM\Implementation\EcuM.c	  2286        {
; ..\component\EcuM\Implementation\EcuM.c	  2287  #  if (ECUM_INCLUDE_NVRAM_MGR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2288          (void) EcuM_WaitOnNvMCancelWriteAll();
; ..\component\EcuM\Implementation\EcuM.c	  2289  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2290  
; ..\component\EcuM\Implementation\EcuM.c	  2291          /* Transit to wakeup Validation */
; ..\component\EcuM\Implementation\EcuM.c	  2292          EcuM_SetModuleState(ECUM_STATE_WAKEUP_VALIDATION); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2293          BswM_EcuM_CurrentState( ECUM_STATE_WAKEUP_VALIDATION);
; ..\component\EcuM\Implementation\EcuM.c	  2294        }
; ..\component\EcuM\Implementation\EcuM.c	  2295  #  if (ECUM_INCLUDE_NVRAM_MGR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2296        else if (EcuM_WaitOnNvMWriteAll() == TRUE)
; ..\component\EcuM\Implementation\EcuM.c	  2297        {
; ..\component\EcuM\Implementation\EcuM.c	  2298          /* Wait for Write All */
; ..\component\EcuM\Implementation\EcuM.c	  2299        }
; ..\component\EcuM\Implementation\EcuM.c	  2300  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2301        else
; ..\component\EcuM\Implementation\EcuM.c	  2302        {
; ..\component\EcuM\Implementation\EcuM.c	  2303          /* Transit to Sleep */
; ..\component\EcuM\Implementation\EcuM.c	  2304          EcuM_SetModuleState(ECUM_STATE_SLEEP); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2305          BswM_EcuM_CurrentState( ECUM_STATE_SLEEP);
; ..\component\EcuM\Implementation\EcuM.c	  2306        }
; ..\component\EcuM\Implementation\EcuM.c	  2307      }
; ..\component\EcuM\Implementation\EcuM.c	  2308      break;
; ..\component\EcuM\Implementation\EcuM.c	  2309  
; ..\component\EcuM\Implementation\EcuM.c	  2310      /*******************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2311       *  ECUM_STATE_SLEEP
; ..\component\EcuM\Implementation\EcuM.c	  2312       ******************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2313      case ECUM_STATE_SLEEP:
; ..\component\EcuM\Implementation\EcuM.c	  2314  
; ..\component\EcuM\Implementation\EcuM.c	  2315      EcuM_SetKillAllInProgress(0u); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2316  
; ..\component\EcuM\Implementation\EcuM.c	  2317  #  if (ECUM_POLLINGOFSLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2318      if(EcuM_IsPollingOfSleepModeList(EcuM_CurrentShutdownMode))
; ..\component\EcuM\Implementation\EcuM.c	  2319      {
; ..\component\EcuM\Implementation\EcuM.c	  2320        (void)EcuM_EnterSleep(ECUM_ENTER_POLL);
; ..\component\EcuM\Implementation\EcuM.c	  2321      }
; ..\component\EcuM\Implementation\EcuM.c	  2322      else
; ..\component\EcuM\Implementation\EcuM.c	  2323  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2324      {
; ..\component\EcuM\Implementation\EcuM.c	  2325        (void) EcuM_EnterSleep( ECUM_ENTER_HALT);
; ..\component\EcuM\Implementation\EcuM.c	  2326      }
; ..\component\EcuM\Implementation\EcuM.c	  2327  
; ..\component\EcuM\Implementation\EcuM.c	  2328      /* Transit to wakeup validation */
; ..\component\EcuM\Implementation\EcuM.c	  2329      EcuM_SetModuleState(ECUM_STATE_WAKEUP_VALIDATION); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2330      BswM_EcuM_CurrentState( ECUM_STATE_WAKEUP_VALIDATION);
; ..\component\EcuM\Implementation\EcuM.c	  2331  
; ..\component\EcuM\Implementation\EcuM.c	  2332      break;
; ..\component\EcuM\Implementation\EcuM.c	  2333  # endif /* (ECUM_SLEEPMODELIST == STD_ON) */
; ..\component\EcuM\Implementation\EcuM.c	  2334  
; ..\component\EcuM\Implementation\EcuM.c	  2335      /*******************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2336       *  ECUM_STATE_WAKEUP_VALIDATION
; ..\component\EcuM\Implementation\EcuM.c	  2337       ******************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2338      case ECUM_STATE_WAKEUP_VALIDATION:
; ..\component\EcuM\Implementation\EcuM.c	  2339  
; ..\component\EcuM\Implementation\EcuM.c	  2340  # if(ECUM_TIMEOUTOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2341      if ((EcuM_ValidatedWakeups != 0u) || (ECUM_COMBINEDPENDINGWAKEUPS == 0u))
; ..\component\EcuM\Implementation\EcuM.c	  2342  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2343      {
; ..\component\EcuM\Implementation\EcuM.c	  2344        /* Transit to wakeup reaction */
; ..\component\EcuM\Implementation\EcuM.c	  2345        EcuM_SetModuleState(ECUM_STATE_WAKEUP_REACTION); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2346        EcuM_OnWakeupReaction();
; ..\component\EcuM\Implementation\EcuM.c	  2347        BswM_EcuM_CurrentState( ECUM_STATE_WAKEUP_REACTION);
; ..\component\EcuM\Implementation\EcuM.c	  2348      }
; ..\component\EcuM\Implementation\EcuM.c	  2349  # if ( (ECUM_INCLUDE_NVRAM_MGR == STD_ON) && (ECUM_TIMEOUTOFWAKEUPSOURCELIST == STD_ON) && (ECUM_NVMCANCELWRITEALLTIMEOUT == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  2350      else
; ..\component\EcuM\Implementation\EcuM.c	  2351      {
; ..\component\EcuM\Implementation\EcuM.c	  2352        (void) EcuM_WaitOnNvMCancelWriteAll();
; ..\component\EcuM\Implementation\EcuM.c	  2353      }
; ..\component\EcuM\Implementation\EcuM.c	  2354  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2355      break;
; ..\component\EcuM\Implementation\EcuM.c	  2356  
; ..\component\EcuM\Implementation\EcuM.c	  2357      /*******************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2358       *  ECUM_STATE_WAKEUP_REACTION
; ..\component\EcuM\Implementation\EcuM.c	  2359       ******************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2360      case ECUM_STATE_WAKEUP_REACTION:
; ..\component\EcuM\Implementation\EcuM.c	  2361  
; ..\component\EcuM\Implementation\EcuM.c	  2362  # if ((ECUM_INCLUDE_NVRAM_MGR == STD_ON) && (ECUM_NVMCANCELWRITEALLTIMEOUT == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  2363      if (EcuM_WaitOnNvMCancelWriteAll() == TRUE)
; ..\component\EcuM\Implementation\EcuM.c	  2364      {
; ..\component\EcuM\Implementation\EcuM.c	  2365        /* Wait for Cancel WriteAll */
; ..\component\EcuM\Implementation\EcuM.c	  2366      }
; ..\component\EcuM\Implementation\EcuM.c	  2367      else
; ..\component\EcuM\Implementation\EcuM.c	  2368  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2369      {
; ..\component\EcuM\Implementation\EcuM.c	  2370        if (EcuM_ValidatedWakeups != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2371        {
; ..\component\EcuM\Implementation\EcuM.c	  2372  # if (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2373  #  if (ECUM_TIMEOUTOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2374  
; ..\component\EcuM\Implementation\EcuM.c	  2375          /* Disable all sources that were active during the last sleepmode */
; ..\component\EcuM\Implementation\EcuM.c	  2376          EcuM_DisableWakeupSources(EcuM_EnabledWakeups);
; ..\component\EcuM\Implementation\EcuM.c	  2377  
; ..\component\EcuM\Implementation\EcuM.c	  2378          BswM_EcuM_CurrentWakeup(EcuM_EnabledWakeups & (~ECUM_COMBINEDWAKEUPS), ECUM_WKSTATUS_NONE);
; ..\component\EcuM\Implementation\EcuM.c	  2379          EcuM_EnabledWakeups = 0u;
; ..\component\EcuM\Implementation\EcuM.c	  2380  
; ..\component\EcuM\Implementation\EcuM.c	  2381  #  endif /* (ECUM_TIMEOUTOFWAKEUPSOURCELIST == STD_ON) */
; ..\component\EcuM\Implementation\EcuM.c	  2382  # endif /* (ECUM_SLEEPMODELIST == STD_ON) */
; ..\component\EcuM\Implementation\EcuM.c	  2383  
; ..\component\EcuM\Implementation\EcuM.c	  2384  # if (ECUM_SUPPORT_DEM == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2385          Dem_Init( ECUM_DEM_CONFIG_POINTER); /* SBSW_ECUM_DEM_FUNCTIONCALL_POINTER */
; ..\component\EcuM\Implementation\EcuM.c	  2386          EcuM_SetDemStatus(ECUM_DEM_INITIALIZED); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2387  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2388  
; ..\component\EcuM\Implementation\EcuM.c	  2389          EcuM_ActEnterRun();
; ..\component\EcuM\Implementation\EcuM.c	  2390        }
; ..\component\EcuM\Implementation\EcuM.c	  2391        else
; ..\component\EcuM\Implementation\EcuM.c	  2392        {
; ..\component\EcuM\Implementation\EcuM.c	  2393          /* Transit to Wake Sleep */
; ..\component\EcuM\Implementation\EcuM.c	  2394          EcuM_SetModuleState(ECUM_STATE_WAKEUP_WAKESLEEP); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2395          BswM_EcuM_CurrentState( ECUM_STATE_WAKEUP_WAKESLEEP);
; ..\component\EcuM\Implementation\EcuM.c	  2396          ECUM_RTE_SWITCH(RTE_MODE_EcuM_Mode_WAKE_SLEEP);
; ..\component\EcuM\Implementation\EcuM.c	  2397  
; ..\component\EcuM\Implementation\EcuM.c	  2398  # if (ECUM_SUPPORT_DEM == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2399          if ( EcuM_GetDemStatus() == ECUM_DEM_INITIALIZED)
; ..\component\EcuM\Implementation\EcuM.c	  2400          {
; ..\component\EcuM\Implementation\EcuM.c	  2401            Dem_Shutdown();
; ..\component\EcuM\Implementation\EcuM.c	  2402            EcuM_SetDemStatus(ECUM_DEM_SHUT_DOWN); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2403          }
; ..\component\EcuM\Implementation\EcuM.c	  2404  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2405        }
; ..\component\EcuM\Implementation\EcuM.c	  2406      }
; ..\component\EcuM\Implementation\EcuM.c	  2407      break;
; ..\component\EcuM\Implementation\EcuM.c	  2408  
; ..\component\EcuM\Implementation\EcuM.c	  2409      /*******************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2410       *  ECUM_STATE_WAKE_SLEEP
; ..\component\EcuM\Implementation\EcuM.c	  2411       ******************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2412      case ECUM_STATE_WAKEUP_WAKESLEEP:
; ..\component\EcuM\Implementation\EcuM.c	  2413  
; ..\component\EcuM\Implementation\EcuM.c	  2414  # if (ECUM_SUPPORT_RTE_MODE_SWITCH_ACK == STD_ON )
; ..\component\EcuM\Implementation\EcuM.c	  2415      if (Rte_SwitchAck_EcuM_currentMode_currentMode() != RTE_E_NO_DATA)
; ..\component\EcuM\Implementation\EcuM.c	  2416  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2417      {
; ..\component\EcuM\Implementation\EcuM.c	  2418  
; ..\component\EcuM\Implementation\EcuM.c	  2419  # if (ECUM_INCLUDE_NVRAM_MGR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2420        EcuM_SetNvMWriteAllStatus(ECUM_NVM_WRITEALL_REQUIRED); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2421  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2422  
; ..\component\EcuM\Implementation\EcuM.c	  2423  # if (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2424        if (EcuM_CurrentShutdownTarget == ECUM_STATE_SLEEP)
; ..\component\EcuM\Implementation\EcuM.c	  2425        {
; ..\component\EcuM\Implementation\EcuM.c	  2426          /* Transit to Go Sleep */
; ..\component\EcuM\Implementation\EcuM.c	  2427          EcuM_SetModuleState(ECUM_STATE_GO_SLEEP); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2428          EcuM_OnGoSleep();
; ..\component\EcuM\Implementation\EcuM.c	  2429          BswM_EcuM_CurrentState( ECUM_STATE_GO_SLEEP);
; ..\component\EcuM\Implementation\EcuM.c	  2430          ECUM_RTE_SWITCH(RTE_MODE_EcuM_Mode_SLEEP);
; ..\component\EcuM\Implementation\EcuM.c	  2431        }
; ..\component\EcuM\Implementation\EcuM.c	  2432        else
; ..\component\EcuM\Implementation\EcuM.c	  2433  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2434        { /* target is ECUM_STATE_OFF or ECUM_STATE_RESET */
; ..\component\EcuM\Implementation\EcuM.c	  2435          /* Transit to Go Off One */
; ..\component\EcuM\Implementation\EcuM.c	  2436          EcuM_SetModuleState(ECUM_STATE_GO_OFF_ONE); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2437          EcuM_OnGoOffOne();
; ..\component\EcuM\Implementation\EcuM.c	  2438          BswM_EcuM_CurrentState( ECUM_STATE_GO_OFF_ONE);
; ..\component\EcuM\Implementation\EcuM.c	  2439          ECUM_RTE_SWITCH(RTE_MODE_EcuM_Mode_SHUTDOWN);
; ..\component\EcuM\Implementation\EcuM.c	  2440        }
; ..\component\EcuM\Implementation\EcuM.c	  2441      }
; ..\component\EcuM\Implementation\EcuM.c	  2442      break;
; ..\component\EcuM\Implementation\EcuM.c	  2443  
; ..\component\EcuM\Implementation\EcuM.c	  2444      /*******************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2445       *  ECUM_STATE_GO_OFF_ONE
; ..\component\EcuM\Implementation\EcuM.c	  2446       ******************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2447      case ECUM_STATE_GO_OFF_ONE:
; ..\component\EcuM\Implementation\EcuM.c	  2448  
; ..\component\EcuM\Implementation\EcuM.c	  2449      /* Do not cancel GoOff in state machine -> EcuM will perform reset in case of wakeup */
; ..\component\EcuM\Implementation\EcuM.c	  2450  # if ( ECUM_SUPPORT_RTE_MODE_SWITCH_ACK == STD_ON )
; ..\component\EcuM\Implementation\EcuM.c	  2451      if (Rte_SwitchAck_EcuM_currentMode_currentMode() != RTE_E_NO_DATA)
; ..\component\EcuM\Implementation\EcuM.c	  2452  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2453      {
; ..\component\EcuM\Implementation\EcuM.c	  2454  # if (ECUM_INCLUDE_NVRAM_MGR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2455        if ( EcuM_GetNvMWriteAllStatus() == ECUM_NVM_WRITEALL_REQUIRED)
; ..\component\EcuM\Implementation\EcuM.c	  2456  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2457        {
; ..\component\EcuM\Implementation\EcuM.c	  2458  # if(ECUM_SUPPORT_RTE == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2459          (void) Rte_Stop();
; ..\component\EcuM\Implementation\EcuM.c	  2460  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2461  
; ..\component\EcuM\Implementation\EcuM.c	  2462  # if(ECUM_SUPPORT_COMM == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2463          ComM_DeInit();
; ..\component\EcuM\Implementation\EcuM.c	  2464  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2465        }
; ..\component\EcuM\Implementation\EcuM.c	  2466  
; ..\component\EcuM\Implementation\EcuM.c	  2467  # if (ECUM_INCLUDE_NVRAM_MGR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2468        if (EcuM_WaitOnNvMWriteAll() == FALSE)
; ..\component\EcuM\Implementation\EcuM.c	  2469  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2470        {
; ..\component\EcuM\Implementation\EcuM.c	  2471          (void) EcuM_InternalGoDown();
; ..\component\EcuM\Implementation\EcuM.c	  2472  
; ..\component\EcuM\Implementation\EcuM.c	  2473          /* Transit to Error State, if EcuM_GoDown returns */
; ..\component\EcuM\Implementation\EcuM.c	  2474          EcuM_SetModuleState(ECUM_STATE_ERROR); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2475        }
; ..\component\EcuM\Implementation\EcuM.c	  2476      }
; ..\component\EcuM\Implementation\EcuM.c	  2477      break;
; ..\component\EcuM\Implementation\EcuM.c	  2478  
; ..\component\EcuM\Implementation\EcuM.c	  2479      /*******************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2480       *  ECUM_STATE_ERROR
; ..\component\EcuM\Implementation\EcuM.c	  2481       ******************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2482      default:
; ..\component\EcuM\Implementation\EcuM.c	  2483      /* error - unknown case */
; ..\component\EcuM\Implementation\EcuM.c	  2484      EcuM_ErrorHook(ECUM_E_HOOK_WRONG_ECUM_USAGE);
; ..\component\EcuM\Implementation\EcuM.c	  2485      break;
; ..\component\EcuM\Implementation\EcuM.c	  2486    }
; ..\component\EcuM\Implementation\EcuM.c	  2487  } /* PRQA S 6030, 6050 */ /* MD_MSR_STCYC, MD_MSR_STCAL */
; ..\component\EcuM\Implementation\EcuM.c	  2488  
; ..\component\EcuM\Implementation\EcuM.c	  2489  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2490   *  EcuM_InternalKillAllRequests
; ..\component\EcuM\Implementation\EcuM.c	  2491   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2492  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2493   *
; ..\component\EcuM\Implementation\EcuM.c	  2494   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2495   *
; ..\component\EcuM\Implementation\EcuM.c	  2496   *
; ..\component\EcuM\Implementation\EcuM.c	  2497   *
; ..\component\EcuM\Implementation\EcuM.c	  2498   *
; ..\component\EcuM\Implementation\EcuM.c	  2499   *
; ..\component\EcuM\Implementation\EcuM.c	  2500   *
; ..\component\EcuM\Implementation\EcuM.c	  2501   */
; ..\component\EcuM\Implementation\EcuM.c	  2502  ECUM_LOCAL FUNC(void, ECUM_CODE) EcuM_InternalKillAllRequests(uint8 mask)
; ..\component\EcuM\Implementation\EcuM.c	  2503  {
; ..\component\EcuM\Implementation\EcuM.c	  2504    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2505    EcuM_UserTableIterType user;
; ..\component\EcuM\Implementation\EcuM.c	  2506  
; ..\component\EcuM\Implementation\EcuM.c	  2507    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2508    /* #30 Set the internal flag-variable to indicate that KillAll is in progress. */
; ..\component\EcuM\Implementation\EcuM.c	  2509    EcuM_SetKillAllInProgress((EcuM_KillAllInProgressType)(EcuM_GetKillAllInProgress() | mask)); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2510  
; ..\component\EcuM\Implementation\EcuM.c	  2511    /* #31 Remove the run request flags for each user. */
; ..\component\EcuM\Implementation\EcuM.c	  2512    for (user = 0u; user < EcuM_GetSizeOfUserTable(); user++)
; ..\component\EcuM\Implementation\EcuM.c	  2513    {
; ..\component\EcuM\Implementation\EcuM.c	  2514      EcuM_SetUserTable(user, (EcuM_UserType)(EcuM_GetUserTable(user) & (EcuM_UserType)(~mask))); /* SBSW_ECUM_ACCESSUSERTABLE */
; ..\component\EcuM\Implementation\EcuM.c	  2515    }
; ..\component\EcuM\Implementation\EcuM.c	  2516  
; ..\component\EcuM\Implementation\EcuM.c	  2517    if (mask == ECUM_USER_REQUEST_RUN_MASK)
; ..\component\EcuM\Implementation\EcuM.c	  2518    {
; ..\component\EcuM\Implementation\EcuM.c	  2519      EcuM_SetRunRequestCounter(0u); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2520  
; ..\component\EcuM\Implementation\EcuM.c	  2521      /* #33 Clear all wake-up events which are relevant to keep the ECU awake. */
; ..\component\EcuM\Implementation\EcuM.c	  2522      EcuM_InternalClearWakeupEvent( ECUM_WKSOURCE_ALL_SOURCES);
; ..\component\EcuM\Implementation\EcuM.c	  2523  
; ..\component\EcuM\Implementation\EcuM.c	  2524      if ( EcuM_GetModuleState() == ECUM_STATE_APP_RUN)
; ..\component\EcuM\Implementation\EcuM.c	  2525      {
; ..\component\EcuM\Implementation\EcuM.c	  2526        /* #35 In case of EcuM in state run, stop the EcuM self run request timeout. */
; ..\component\EcuM\Implementation\EcuM.c	  2527        EcuM_SetTimer((uint16)ECUM_TIMER_EXPIRED); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2528      }
; ..\component\EcuM\Implementation\EcuM.c	  2529  
; ..\component\EcuM\Implementation\EcuM.c	  2530      /* #40 Report to the Dem that all RunRequests are killed - If the corresponding Dem event is configured. */
; ..\component\EcuM\Implementation\EcuM.c	  2531  # if defined(ECUM_E_ALL_RUN_REQUESTS_KILLED)
; ..\component\EcuM\Implementation\EcuM.c	  2532      Dem_ReportErrorStatus(ECUM_E_ALL_RUN_REQUESTS_KILLED, DEM_EVENT_STATUS_FAILED);
; ..\component\EcuM\Implementation\EcuM.c	  2533  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2534    }
; ..\component\EcuM\Implementation\EcuM.c	  2535    else
; ..\component\EcuM\Implementation\EcuM.c	  2536    {
; ..\component\EcuM\Implementation\EcuM.c	  2537      EcuM_SetPostRunRequestCounter(0u); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2538    }
; ..\component\EcuM\Implementation\EcuM.c	  2539  
; ..\component\EcuM\Implementation\EcuM.c	  2540  }
; ..\component\EcuM\Implementation\EcuM.c	  2541  #endif
; ..\component\EcuM\Implementation\EcuM.c	  2542  
; ..\component\EcuM\Implementation\EcuM.c	  2543  #if((ECUM_MODE_HANDLING == STD_ON) || (ECUM_FIXED_BEHAVIOR == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  2544  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2545   *  EcuM_InternalRequestRUN
; ..\component\EcuM\Implementation\EcuM.c	  2546   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2547  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2548   *
; ..\component\EcuM\Implementation\EcuM.c	  2549   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2550   *
; ..\component\EcuM\Implementation\EcuM.c	  2551   *
; ..\component\EcuM\Implementation\EcuM.c	  2552   *
; ..\component\EcuM\Implementation\EcuM.c	  2553   *
; ..\component\EcuM\Implementation\EcuM.c	  2554   *
; ..\component\EcuM\Implementation\EcuM.c	  2555   *
; ..\component\EcuM\Implementation\EcuM.c	  2556   */
; ..\component\EcuM\Implementation\EcuM.c	  2557  ECUM_LOCAL FUNC(Std_ReturnType, ECUM_CODE) EcuM_InternalRequestRUN(uint8 ApiId, EcuM_UserType User, uint8 mask)
; ..\component\EcuM\Implementation\EcuM.c	  2558  {
; ..\component\EcuM\Implementation\EcuM.c	  2559    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2560    Std_ReturnType retval = E_NOT_OK;
; ..\component\EcuM\Implementation\EcuM.c	  2561    uint8 errorId = ECUM_E_INVALID_PAR; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  2562  
; ..\component\EcuM\Implementation\EcuM.c	  2563    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2564    /* #20 Check the EcuM state and if the passed user parameter is valid. */
; ..\component\EcuM\Implementation\EcuM.c	  2565  # if(ECUM_USERTABLE == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2566  #  if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2567    if (EcuM_GetModuleState() <= ECUM_STATE_STARTUP_TWO)
; ..\component\EcuM\Implementation\EcuM.c	  2568    {
; ..\component\EcuM\Implementation\EcuM.c	  2569      errorId = ECUM_E_UNINIT;
; ..\component\EcuM\Implementation\EcuM.c	  2570    }
; ..\component\EcuM\Implementation\EcuM.c	  2571    else if (User >= EcuM_GetSizeOfUserTable())
; ..\component\EcuM\Implementation\EcuM.c	  2572    {
; ..\component\EcuM\Implementation\EcuM.c	  2573      /* error ECUM_E_INVALID_PAR is already set during initialization */
; ..\component\EcuM\Implementation\EcuM.c	  2574    }
; ..\component\EcuM\Implementation\EcuM.c	  2575    else
; ..\component\EcuM\Implementation\EcuM.c	  2576  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2577    {
; ..\component\EcuM\Implementation\EcuM.c	  2578      /* #21 Check if the user has already RUN state requested. */
; ..\component\EcuM\Implementation\EcuM.c	  2579      if ((EcuM_GetUserTable(User) & (EcuM_UserType) mask) != (EcuM_UserType) 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2580      {
; ..\component\EcuM\Implementation\EcuM.c	  2581        /* User has already request run: report error over DET */
; ..\component\EcuM\Implementation\EcuM.c	  2582        errorId = ECUM_E_MULTIPLE_RUN_REQUESTS;
; ..\component\EcuM\Implementation\EcuM.c	  2583      }
; ..\component\EcuM\Implementation\EcuM.c	  2584  
; ..\component\EcuM\Implementation\EcuM.c	  2585  #  if(ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2586      /* #22 Check if KillAll is in progress. */
; ..\component\EcuM\Implementation\EcuM.c	  2587      else if ((EcuM_GetKillAllInProgress() & mask) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2588      {
; ..\component\EcuM\Implementation\EcuM.c	  2589        /* killall is in progress, don't allow new RUN requests */
; ..\component\EcuM\Implementation\EcuM.c	  2590      }
; ..\component\EcuM\Implementation\EcuM.c	  2591  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2592  
; ..\component\EcuM\Implementation\EcuM.c	  2593      else
; ..\component\EcuM\Implementation\EcuM.c	  2594      {
; ..\component\EcuM\Implementation\EcuM.c	  2595        /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2596        /* #30 Set the users run requested flag and increment the counter. */
; ..\component\EcuM\Implementation\EcuM.c	  2597        EcuM_SetUserTable(User, (EcuM_UserType)(EcuM_GetUserTable(User) | (EcuM_UserType)mask)); /* SBSW_ECUM_ACCESSUSERTABLE */
; ..\component\EcuM\Implementation\EcuM.c	  2598  
; ..\component\EcuM\Implementation\EcuM.c	  2599        if ((mask & (uint8) ECUM_USER_REQUEST_RUN_MASK) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2600        {
; ..\component\EcuM\Implementation\EcuM.c	  2601  #  if(ECUM_MODE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2602          if(EcuM_GetRunRequestCounter() == 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2603          {
; ..\component\EcuM\Implementation\EcuM.c	  2604            /* In case of no run request was active before, notify the BswM about the requested run state. */
; ..\component\EcuM\Implementation\EcuM.c	  2605            BswM_EcuM_RequestedState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_REQUESTED);
; ..\component\EcuM\Implementation\EcuM.c	  2606          }
; ..\component\EcuM\Implementation\EcuM.c	  2607  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2608  
; ..\component\EcuM\Implementation\EcuM.c	  2609          EcuM_IncRunRequestCounter(); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2610        }
; ..\component\EcuM\Implementation\EcuM.c	  2611        else
; ..\component\EcuM\Implementation\EcuM.c	  2612        {
; ..\component\EcuM\Implementation\EcuM.c	  2613  #  if(ECUM_MODE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2614          if(EcuM_GetPostRunRequestCounter() == 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2615          {
; ..\component\EcuM\Implementation\EcuM.c	  2616            /* In case of no post run request was active before, notify the BswM about the requested post run state. */
; ..\component\EcuM\Implementation\EcuM.c	  2617            BswM_EcuM_RequestedState(ECUM_STATE_APP_POST_RUN, ECUM_RUNSTATUS_REQUESTED);
; ..\component\EcuM\Implementation\EcuM.c	  2618          }
; ..\component\EcuM\Implementation\EcuM.c	  2619  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2620  
; ..\component\EcuM\Implementation\EcuM.c	  2621          EcuM_IncPostRunRequestCounter(); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2622        }
; ..\component\EcuM\Implementation\EcuM.c	  2623        retval = E_OK;
; ..\component\EcuM\Implementation\EcuM.c	  2624        errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  2625      }
; ..\component\EcuM\Implementation\EcuM.c	  2626    }
; ..\component\EcuM\Implementation\EcuM.c	  2627  # else
; ..\component\EcuM\Implementation\EcuM.c	  2628    ECUM_DUMMY_STATEMENT(ApiId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  2629    ECUM_DUMMY_STATEMENT(User); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  2630    ECUM_DUMMY_STATEMENT(mask); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  2631  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2632    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2633  # if (ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2634  #  if(ECUM_USERTABLE == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2635    if (errorId != ECUM_E_NO_ERROR)
; ..\component\EcuM\Implementation\EcuM.c	  2636  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2637    {
; ..\component\EcuM\Implementation\EcuM.c	  2638      EcuM_Det_ReportError(ApiId, errorId);
; ..\component\EcuM\Implementation\EcuM.c	  2639    }
; ..\component\EcuM\Implementation\EcuM.c	  2640  # else
; ..\component\EcuM\Implementation\EcuM.c	  2641    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  2642    ECUM_DUMMY_STATEMENT(ApiId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  2643  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2644  
; ..\component\EcuM\Implementation\EcuM.c	  2645    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  2646  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\EcuM\Implementation\EcuM.c	  2647  
; ..\component\EcuM\Implementation\EcuM.c	  2648  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2649   *  EcuM_InternalReleaseRUN
; ..\component\EcuM\Implementation\EcuM.c	  2650   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2651  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2652   *
; ..\component\EcuM\Implementation\EcuM.c	  2653   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2654   *
; ..\component\EcuM\Implementation\EcuM.c	  2655   *
; ..\component\EcuM\Implementation\EcuM.c	  2656   *
; ..\component\EcuM\Implementation\EcuM.c	  2657   *
; ..\component\EcuM\Implementation\EcuM.c	  2658   *
; ..\component\EcuM\Implementation\EcuM.c	  2659   */
; ..\component\EcuM\Implementation\EcuM.c	  2660  ECUM_LOCAL FUNC(Std_ReturnType, ECUM_CODE) EcuM_InternalReleaseRUN(uint8 ApiId, EcuM_UserType User, uint8 mask)
; ..\component\EcuM\Implementation\EcuM.c	  2661  {
; ..\component\EcuM\Implementation\EcuM.c	  2662    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2663    Std_ReturnType retval = E_NOT_OK;
; ..\component\EcuM\Implementation\EcuM.c	  2664    uint8 errorId = ECUM_E_INVALID_PAR; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  2665  
; ..\component\EcuM\Implementation\EcuM.c	  2666    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2667    /* #20 Check the EcuM state and if the passed user parameter is valid. */
; ..\component\EcuM\Implementation\EcuM.c	  2668  # if(ECUM_USERTABLE == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2669  #  if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2670    if (EcuM_GetModuleState() <= ECUM_STATE_STARTUP_TWO)
; ..\component\EcuM\Implementation\EcuM.c	  2671    {
; ..\component\EcuM\Implementation\EcuM.c	  2672      errorId = ECUM_E_UNINIT;
; ..\component\EcuM\Implementation\EcuM.c	  2673    }
; ..\component\EcuM\Implementation\EcuM.c	  2674  
; ..\component\EcuM\Implementation\EcuM.c	  2675    else if (User >= EcuM_GetSizeOfUserTable())
; ..\component\EcuM\Implementation\EcuM.c	  2676    {
; ..\component\EcuM\Implementation\EcuM.c	  2677      /* error ECUM_E_INVALID_PAR is already set during initialization */
; ..\component\EcuM\Implementation\EcuM.c	  2678    }
; ..\component\EcuM\Implementation\EcuM.c	  2679    else
; ..\component\EcuM\Implementation\EcuM.c	  2680  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2681    {
; ..\component\EcuM\Implementation\EcuM.c	  2682      /* #21 Check that the user has not already RUN state requested. */
; ..\component\EcuM\Implementation\EcuM.c	  2683      if ((EcuM_GetUserTable(User) & (EcuM_UserType) mask) == (EcuM_UserType) 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2684      {
; ..\component\EcuM\Implementation\EcuM.c	  2685        /* User has not request run: report error over DET */
; ..\component\EcuM\Implementation\EcuM.c	  2686        errorId = ECUM_E_MISMATCHED_RUN_RELEASE;
; ..\component\EcuM\Implementation\EcuM.c	  2687      }
; ..\component\EcuM\Implementation\EcuM.c	  2688      else
; ..\component\EcuM\Implementation\EcuM.c	  2689      {
; ..\component\EcuM\Implementation\EcuM.c	  2690        /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2691        /* #30 Clear the users run requested flag and decrement the counter. */
; ..\component\EcuM\Implementation\EcuM.c	  2692        EcuM_SetUserTable(User, (EcuM_UserType)(EcuM_GetUserTable(User) & (EcuM_UserType)(~mask))); /* SBSW_ECUM_ACCESSUSERTABLE */
; ..\component\EcuM\Implementation\EcuM.c	  2693  
; ..\component\EcuM\Implementation\EcuM.c	  2694        if ((mask & (uint8) ECUM_USER_REQUEST_RUN_MASK) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  2695        {
; ..\component\EcuM\Implementation\EcuM.c	  2696  #  if(ECUM_MODE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2697          if(EcuM_GetRunRequestCounter() == 1u)
; ..\component\EcuM\Implementation\EcuM.c	  2698          {
; ..\component\EcuM\Implementation\EcuM.c	  2699            /* In case that the last run request was released, notify the BswM about the released run state. */
; ..\component\EcuM\Implementation\EcuM.c	  2700            BswM_EcuM_RequestedState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_RELEASED);
; ..\component\EcuM\Implementation\EcuM.c	  2701          }
; ..\component\EcuM\Implementation\EcuM.c	  2702  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2703          EcuM_DecRunRequestCounter(); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2704        }
; ..\component\EcuM\Implementation\EcuM.c	  2705        else
; ..\component\EcuM\Implementation\EcuM.c	  2706        {
; ..\component\EcuM\Implementation\EcuM.c	  2707  #  if(ECUM_MODE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2708          if(EcuM_GetPostRunRequestCounter() == 1u)
; ..\component\EcuM\Implementation\EcuM.c	  2709          {
; ..\component\EcuM\Implementation\EcuM.c	  2710            /* In case that the last post run request was released, notify the BswM about the released post run state. */
; ..\component\EcuM\Implementation\EcuM.c	  2711            BswM_EcuM_RequestedState(ECUM_STATE_APP_POST_RUN, ECUM_RUNSTATUS_RELEASED);
; ..\component\EcuM\Implementation\EcuM.c	  2712          }
; ..\component\EcuM\Implementation\EcuM.c	  2713  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2714          EcuM_DecPostRunRequestCounter(); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2715        }
; ..\component\EcuM\Implementation\EcuM.c	  2716        retval = E_OK;
; ..\component\EcuM\Implementation\EcuM.c	  2717        errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  2718      }
; ..\component\EcuM\Implementation\EcuM.c	  2719    }
; ..\component\EcuM\Implementation\EcuM.c	  2720  # else
; ..\component\EcuM\Implementation\EcuM.c	  2721    ECUM_DUMMY_STATEMENT(ApiId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  2722    ECUM_DUMMY_STATEMENT(User); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  2723    ECUM_DUMMY_STATEMENT(mask); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  2724  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2725    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2726  # if (ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2727  #  if(ECUM_USERTABLE == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2728    if (errorId != ECUM_E_NO_ERROR)
; ..\component\EcuM\Implementation\EcuM.c	  2729  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2730    {
; ..\component\EcuM\Implementation\EcuM.c	  2731      EcuM_Det_ReportError(ApiId, errorId);
; ..\component\EcuM\Implementation\EcuM.c	  2732    }
; ..\component\EcuM\Implementation\EcuM.c	  2733  # else
; ..\component\EcuM\Implementation\EcuM.c	  2734    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  2735    ECUM_DUMMY_STATEMENT(ApiId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  2736  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2737  
; ..\component\EcuM\Implementation\EcuM.c	  2738    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  2739  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\EcuM\Implementation\EcuM.c	  2740  #endif
; ..\component\EcuM\Implementation\EcuM.c	  2741  
; ..\component\EcuM\Implementation\EcuM.c	  2742  #if(ECUM_MODE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2743  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2744   *  EcuM_InternalRteFeedbackCheck
; ..\component\EcuM\Implementation\EcuM.c	  2745   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2746  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2747   *
; ..\component\EcuM\Implementation\EcuM.c	  2748   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2749   *
; ..\component\EcuM\Implementation\EcuM.c	  2750   *
; ..\component\EcuM\Implementation\EcuM.c	  2751   *
; ..\component\EcuM\Implementation\EcuM.c	  2752   *
; ..\component\EcuM\Implementation\EcuM.c	  2753   *
; ..\component\EcuM\Implementation\EcuM.c	  2754   */
; ..\component\EcuM\Implementation\EcuM.c	  2755  ECUM_LOCAL_INLINE FUNC(void, ECUM_CODE) EcuM_InternalRteFeedbackCheck(void)
; ..\component\EcuM\Implementation\EcuM.c	  2756  {
; ..\component\EcuM\Implementation\EcuM.c	  2757    if(EcuM_RteStateBuffer != RTE_TRANSITION_EcuM_Mode)
; ..\component\EcuM\Implementation\EcuM.c	  2758    {
; ..\component\EcuM\Implementation\EcuM.c	  2759      ECUM_RTE_SWITCH(EcuM_RteStateBuffer);
; ..\component\EcuM\Implementation\EcuM.c	  2760      EcuM_RteStateBuffer = RTE_TRANSITION_EcuM_Mode;
; ..\component\EcuM\Implementation\EcuM.c	  2761    }
; ..\component\EcuM\Implementation\EcuM.c	  2762  
; ..\component\EcuM\Implementation\EcuM.c	  2763    if (Rte_SwitchAck_EcuM_currentMode_currentMode() != RTE_E_NO_DATA)
; ..\component\EcuM\Implementation\EcuM.c	  2764    {
; ..\component\EcuM\Implementation\EcuM.c	  2765      EcuM_SetBswMCurrentModuleState(EcuM_GetBswMRequestedModuleState()); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2766      BswM_EcuM_CurrentState(EcuM_GetBswMCurrentModuleState());
; ..\component\EcuM\Implementation\EcuM.c	  2767    }
; ..\component\EcuM\Implementation\EcuM.c	  2768  }
; ..\component\EcuM\Implementation\EcuM.c	  2769  #endif
; ..\component\EcuM\Implementation\EcuM.c	  2770  
; ..\component\EcuM\Implementation\EcuM.c	  2771  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2772   *  GLOBAL FUNCTIONS
; ..\component\EcuM\Implementation\EcuM.c	  2773   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2774  #if((ECUM_MODE_HANDLING == STD_ON) || (ECUM_FIXED_BEHAVIOR == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  2775  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2776   *  EcuM_RequestRUN
; ..\component\EcuM\Implementation\EcuM.c	  2777   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2778  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2779   *
; ..\component\EcuM\Implementation\EcuM.c	  2780   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2781   *
; ..\component\EcuM\Implementation\EcuM.c	  2782   *
; ..\component\EcuM\Implementation\EcuM.c	  2783   */
; ..\component\EcuM\Implementation\EcuM.c	  2784  FUNC(Std_ReturnType, ECUM_CODE) EcuM_RequestRUN(EcuM_UserType User) /* PRQA S 1330 */ /* MD_EcuM_1330 */
; ..\component\EcuM\Implementation\EcuM.c	  2785  {
; ..\component\EcuM\Implementation\EcuM.c	  2786    return EcuM_InternalRequestRUN( ECUM_SID_REQUEST_RUN, User, ECUM_USER_REQUEST_RUN_MASK);
; ..\component\EcuM\Implementation\EcuM.c	  2787  } /* End of EcuM_RequestRUN() */
; ..\component\EcuM\Implementation\EcuM.c	  2788  
; ..\component\EcuM\Implementation\EcuM.c	  2789  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2790   *  EcuM_ReleaseRUN
; ..\component\EcuM\Implementation\EcuM.c	  2791   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2792  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2793   *
; ..\component\EcuM\Implementation\EcuM.c	  2794   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2795   *
; ..\component\EcuM\Implementation\EcuM.c	  2796   *
; ..\component\EcuM\Implementation\EcuM.c	  2797   */
; ..\component\EcuM\Implementation\EcuM.c	  2798  FUNC(Std_ReturnType, ECUM_CODE) EcuM_ReleaseRUN(EcuM_UserType User) /* PRQA S 1330 */ /* MD_EcuM_1330 */
; ..\component\EcuM\Implementation\EcuM.c	  2799  {
; ..\component\EcuM\Implementation\EcuM.c	  2800    return EcuM_InternalReleaseRUN( ECUM_SID_RELEASE_RUN, User, ECUM_USER_REQUEST_RUN_MASK);
; ..\component\EcuM\Implementation\EcuM.c	  2801  } /* End of EcuM_ReleaseRUN() */
; ..\component\EcuM\Implementation\EcuM.c	  2802  
; ..\component\EcuM\Implementation\EcuM.c	  2803  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2804   *  EcuM_RequestPOST_RUN
; ..\component\EcuM\Implementation\EcuM.c	  2805   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2806  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2807   *
; ..\component\EcuM\Implementation\EcuM.c	  2808   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2809   *
; ..\component\EcuM\Implementation\EcuM.c	  2810   *
; ..\component\EcuM\Implementation\EcuM.c	  2811   */
; ..\component\EcuM\Implementation\EcuM.c	  2812  FUNC(Std_ReturnType, ECUM_CODE) EcuM_RequestPOST_RUN(EcuM_UserType User) /* PRQA S 1330 */ /* MD_EcuM_1330 */
; ..\component\EcuM\Implementation\EcuM.c	  2813  {
; ..\component\EcuM\Implementation\EcuM.c	  2814    return EcuM_InternalRequestRUN( ECUM_SID_REQUEST_POST_RUN, User, ECUM_USER_REQUEST_POST_RUN_MASK);
; ..\component\EcuM\Implementation\EcuM.c	  2815  } /* End of EcuM_RequestPOST_RUN() */
; ..\component\EcuM\Implementation\EcuM.c	  2816  
; ..\component\EcuM\Implementation\EcuM.c	  2817  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2818   *  EcuM_ReleasePOST_RUN
; ..\component\EcuM\Implementation\EcuM.c	  2819   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2820  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2821   *
; ..\component\EcuM\Implementation\EcuM.c	  2822   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2823   *
; ..\component\EcuM\Implementation\EcuM.c	  2824   *
; ..\component\EcuM\Implementation\EcuM.c	  2825   */
; ..\component\EcuM\Implementation\EcuM.c	  2826  FUNC(Std_ReturnType, ECUM_CODE) EcuM_ReleasePOST_RUN(EcuM_UserType User) /* PRQA S 1330 */ /* MD_EcuM_1330 */
; ..\component\EcuM\Implementation\EcuM.c	  2827  {
; ..\component\EcuM\Implementation\EcuM.c	  2828    return EcuM_InternalReleaseRUN( ECUM_SID_RELEASE_POST_RUN, User, ECUM_USER_REQUEST_POST_RUN_MASK);
; ..\component\EcuM\Implementation\EcuM.c	  2829  } /* End of EcuM_ReleasePOST_RUN() */
; ..\component\EcuM\Implementation\EcuM.c	  2830  #endif /* ((ECUM_MODE_HANDLING == STD_ON) || (ECUM_FIXED_BEHAVIOR == STD_ON)) */
; ..\component\EcuM\Implementation\EcuM.c	  2831  
; ..\component\EcuM\Implementation\EcuM.c	  2832  #if(ECUM_MODE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2833  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2834   *
; ..\component\EcuM\Implementation\EcuM.c	  2835   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2836   *
; ..\component\EcuM\Implementation\EcuM.c	  2837   *
; ..\component\EcuM\Implementation\EcuM.c	  2838   *
; ..\component\EcuM\Implementation\EcuM.c	  2839   *
; ..\component\EcuM\Implementation\EcuM.c	  2840   *
; ..\component\EcuM\Implementation\EcuM.c	  2841   */
; ..\component\EcuM\Implementation\EcuM.c	  2842  FUNC(void, ECUM_CODE) EcuM_SetState(EcuM_StateType state)
; ..\component\EcuM\Implementation\EcuM.c	  2843  {
; ..\component\EcuM\Implementation\EcuM.c	  2844    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2845    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  2846    Rte_ModeType_EcuM_Mode mode = 0;
; ..\component\EcuM\Implementation\EcuM.c	  2847  
; ..\component\EcuM\Implementation\EcuM.c	  2848    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2849    /* Check the EcuM state. */
; ..\component\EcuM\Implementation\EcuM.c	  2850  # if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2851    if (EcuM_GetModuleState() <= ECUM_STATE_STARTUP_TWO)
; ..\component\EcuM\Implementation\EcuM.c	  2852    {
; ..\component\EcuM\Implementation\EcuM.c	  2853      errorId = ECUM_E_UNINIT;
; ..\component\EcuM\Implementation\EcuM.c	  2854    }
; ..\component\EcuM\Implementation\EcuM.c	  2855    else if ((EcuM_GetBswMCurrentModuleState() != EcuM_GetBswMRequestedModuleState())
; ..\component\EcuM\Implementation\EcuM.c	  2856          && (state != EcuM_GetBswMRequestedModuleState()))
; ..\component\EcuM\Implementation\EcuM.c	  2857    {
; ..\component\EcuM\Implementation\EcuM.c	  2858      errorId = ECUM_E_INVALID_STATEREQUEST;
; ..\component\EcuM\Implementation\EcuM.c	  2859    }
; ..\component\EcuM\Implementation\EcuM.c	  2860    else
; ..\component\EcuM\Implementation\EcuM.c	  2861  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2862    {
; ..\component\EcuM\Implementation\EcuM.c	  2863      /* #21 Check if the passed parameter state is in a valid range and map it to the corresponding mode.
; ..\component\EcuM\Implementation\EcuM.c	  2864       *     In case of passed parameter ECUM_STATE_SHUTDOWN or ECUM_STATE_SLEEP the mode which fits to the current
; ..\component\EcuM\Implementation\EcuM.c	  2865       *     shutdown target is used as mode parameter. */
; ..\component\EcuM\Implementation\EcuM.c	  2866      switch (state)
; ..\component\EcuM\Implementation\EcuM.c	  2867      {
; ..\component\EcuM\Implementation\EcuM.c	  2868        case ECUM_STATE_STARTUP:
; ..\component\EcuM\Implementation\EcuM.c	  2869        mode = RTE_MODE_EcuM_Mode_STARTUP;
; ..\component\EcuM\Implementation\EcuM.c	  2870        break;
; ..\component\EcuM\Implementation\EcuM.c	  2871  
; ..\component\EcuM\Implementation\EcuM.c	  2872        case ECUM_STATE_APP_RUN:
; ..\component\EcuM\Implementation\EcuM.c	  2873        mode = RTE_MODE_EcuM_Mode_RUN;
; ..\component\EcuM\Implementation\EcuM.c	  2874        break;
; ..\component\EcuM\Implementation\EcuM.c	  2875  
; ..\component\EcuM\Implementation\EcuM.c	  2876        case ECUM_STATE_APP_POST_RUN:
; ..\component\EcuM\Implementation\EcuM.c	  2877        mode = RTE_MODE_EcuM_Mode_POST_RUN;
; ..\component\EcuM\Implementation\EcuM.c	  2878        break;
; ..\component\EcuM\Implementation\EcuM.c	  2879  
; ..\component\EcuM\Implementation\EcuM.c	  2880        case ECUM_STATE_SHUTDOWN:
; ..\component\EcuM\Implementation\EcuM.c	  2881          /* Fall through because SHUTDOWN and SLEEP are handled in the same way. */
; ..\component\EcuM\Implementation\EcuM.c	  2882  
; ..\component\EcuM\Implementation\EcuM.c	  2883        case ECUM_STATE_SLEEP:
; ..\component\EcuM\Implementation\EcuM.c	  2884        if(EcuM_CurrentShutdownTarget == ECUM_STATE_SLEEP)
; ..\component\EcuM\Implementation\EcuM.c	  2885        {
; ..\component\EcuM\Implementation\EcuM.c	  2886          mode = RTE_MODE_EcuM_Mode_SLEEP;
; ..\component\EcuM\Implementation\EcuM.c	  2887        }
; ..\component\EcuM\Implementation\EcuM.c	  2888        else
; ..\component\EcuM\Implementation\EcuM.c	  2889        {
; ..\component\EcuM\Implementation\EcuM.c	  2890          mode = RTE_MODE_EcuM_Mode_SHUTDOWN;
; ..\component\EcuM\Implementation\EcuM.c	  2891        }
; ..\component\EcuM\Implementation\EcuM.c	  2892        break;
; ..\component\EcuM\Implementation\EcuM.c	  2893  
; ..\component\EcuM\Implementation\EcuM.c	  2894        default:
; ..\component\EcuM\Implementation\EcuM.c	  2895        errorId = ECUM_E_STATE_PAR_OUT_OF_RANGE;
; ..\component\EcuM\Implementation\EcuM.c	  2896        ECUM_DUMMY_STATEMENT(mode); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  2897        break;
; ..\component\EcuM\Implementation\EcuM.c	  2898      }
; ..\component\EcuM\Implementation\EcuM.c	  2899      if (errorId == ECUM_E_NO_ERROR)
; ..\component\EcuM\Implementation\EcuM.c	  2900      {
; ..\component\EcuM\Implementation\EcuM.c	  2901        /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2902        /* #30 Store the passed mode to notify the Rte during next MainFunction about the mode switch. */
; ..\component\EcuM\Implementation\EcuM.c	  2903        EcuM_RteStateBuffer = mode;
; ..\component\EcuM\Implementation\EcuM.c	  2904  
; ..\component\EcuM\Implementation\EcuM.c	  2905  
; ..\component\EcuM\Implementation\EcuM.c	  2906        EcuM_SetBswMRequestedModuleState(state); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  2907      }
; ..\component\EcuM\Implementation\EcuM.c	  2908    }
; ..\component\EcuM\Implementation\EcuM.c	  2909  
; ..\component\EcuM\Implementation\EcuM.c	  2910    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2911  # if (ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2912    if (errorId != ECUM_E_NO_ERROR)
; ..\component\EcuM\Implementation\EcuM.c	  2913    {
; ..\component\EcuM\Implementation\EcuM.c	  2914      EcuM_Det_ReportError(ECUM_SID_SET_STATE, errorId);
; ..\component\EcuM\Implementation\EcuM.c	  2915    }
; ..\component\EcuM\Implementation\EcuM.c	  2916  # else
; ..\component\EcuM\Implementation\EcuM.c	  2917    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  2918  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2919  } /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\EcuM\Implementation\EcuM.c	  2920  #endif
; ..\component\EcuM\Implementation\EcuM.c	  2921  
; ..\component\EcuM\Implementation\EcuM.c	  2922  #if(ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2923  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2924   *  EcuM_KillAllRUNRequests
; ..\component\EcuM\Implementation\EcuM.c	  2925   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2926  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2927   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2928   *
; ..\component\EcuM\Implementation\EcuM.c	  2929   *
; ..\component\EcuM\Implementation\EcuM.c	  2930   */
; ..\component\EcuM\Implementation\EcuM.c	  2931  FUNC(void, ECUM_CODE) EcuM_KillAllRUNRequests(void)
; ..\component\EcuM\Implementation\EcuM.c	  2932  {
; ..\component\EcuM\Implementation\EcuM.c	  2933    EcuM_InternalKillAllRequests(ECUM_USER_REQUEST_RUN_MASK);
; ..\component\EcuM\Implementation\EcuM.c	  2934  }
; ..\component\EcuM\Implementation\EcuM.c	  2935  
; ..\component\EcuM\Implementation\EcuM.c	  2936  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2937   *  EcuM_KillAllPostRUNRequests
; ..\component\EcuM\Implementation\EcuM.c	  2938   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2939  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2940   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2941   *
; ..\component\EcuM\Implementation\EcuM.c	  2942   *
; ..\component\EcuM\Implementation\EcuM.c	  2943   */
; ..\component\EcuM\Implementation\EcuM.c	  2944  FUNC(void, ECUM_CODE) EcuM_KillAllPostRUNRequests(void)
; ..\component\EcuM\Implementation\EcuM.c	  2945  {
; ..\component\EcuM\Implementation\EcuM.c	  2946    EcuM_InternalKillAllRequests(ECUM_USER_REQUEST_POST_RUN_MASK);
; ..\component\EcuM\Implementation\EcuM.c	  2947  }
; ..\component\EcuM\Implementation\EcuM.c	  2948  #endif /* ECUM_FIXED_BEHAVIOR == STD_ON */
; ..\component\EcuM\Implementation\EcuM.c	  2949  
; ..\component\EcuM\Implementation\EcuM.c	  2950  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  2951   *  EcuM_MainFunction
; ..\component\EcuM\Implementation\EcuM.c	  2952   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  2953  /*!
; ..\component\EcuM\Implementation\EcuM.c	  2954   *
; ..\component\EcuM\Implementation\EcuM.c	  2955   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  2956   *
; ..\component\EcuM\Implementation\EcuM.c	  2957   *
; ..\component\EcuM\Implementation\EcuM.c	  2958   *
; ..\component\EcuM\Implementation\EcuM.c	  2959   *
; ..\component\EcuM\Implementation\EcuM.c	  2960   *
; ..\component\EcuM\Implementation\EcuM.c	  2961   *
; ..\component\EcuM\Implementation\EcuM.c	  2962   *
; ..\component\EcuM\Implementation\EcuM.c	  2963   *
; ..\component\EcuM\Implementation\EcuM.c	  2964   *
; ..\component\EcuM\Implementation\EcuM.c	  2965   *
; ..\component\EcuM\Implementation\EcuM.c	  2966   *
; ..\component\EcuM\Implementation\EcuM.c	  2967   *
; ..\component\EcuM\Implementation\EcuM.c	  2968   *
; ..\component\EcuM\Implementation\EcuM.c	  2969   *
; ..\component\EcuM\Implementation\EcuM.c	  2970   *
; ..\component\EcuM\Implementation\EcuM.c	  2971   *
; ..\component\EcuM\Implementation\EcuM.c	  2972   *
; ..\component\EcuM\Implementation\EcuM.c	  2973   */
; ..\component\EcuM\Implementation\EcuM.c	  2974  FUNC(void, ECUM_CODE) EcuM_MainFunction(void)
; Function EcuM_MainFunction
.L130:
EcuM_MainFunction:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  2975  {
; ..\component\EcuM\Implementation\EcuM.c	  2976    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2977  #if(ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2978    EcuM_StateType lastState;
; ..\component\EcuM\Implementation\EcuM.c	  2979  #endif
; ..\component\EcuM\Implementation\EcuM.c	  2980  
; ..\component\EcuM\Implementation\EcuM.c	  2981  #if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  2982    CoreIdType coreID = GetCoreID();
; ..\component\EcuM\Implementation\EcuM.c	  2983  
; ..\component\EcuM\Implementation\EcuM.c	  2984  # if(ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2985  #  if(ECUM_ISDEF_ECUMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  2986    EcuM_SizeOfPartitionDataType applicationIdx = EcuM_InternalGetPartitionIdx();
; ..\component\EcuM\Implementation\EcuM.c	  2987  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  2988  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2989  
; ..\component\EcuM\Implementation\EcuM.c	  2990    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  2991    /* #20 In case of a multi core ECU: Check if the returned coreId is invalid. If it is invalid, call the EcuM_ErrorHook. */
; ..\component\EcuM\Implementation\EcuM.c	  2992  # if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  2993    if (coreID >= EcuM_GetSizeOfCoreStatus())
; ..\component\EcuM\Implementation\EcuM.c	  2994    {
; ..\component\EcuM\Implementation\EcuM.c	  2995      EcuM_ErrorHook(ECUM_E_HOOK_INVALID_COREID);
; ..\component\EcuM\Implementation\EcuM.c	  2996    }
; ..\component\EcuM\Implementation\EcuM.c	  2997    else
; ..\component\EcuM\Implementation\EcuM.c	  2998  # endif
; ..\component\EcuM\Implementation\EcuM.c	  2999  
; ..\component\EcuM\Implementation\EcuM.c	  3000      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3001  
; ..\component\EcuM\Implementation\EcuM.c	  3002      if ((coreID == ECUM_CORE_ID_BSW)
; ..\component\EcuM\Implementation\EcuM.c	  3003  # if(ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3004  #  if(ECUM_ISDEF_ECUMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  3005        && (applicationIdx < EcuM_GetSizeOfPartitionData())
; ..\component\EcuM\Implementation\EcuM.c	  3006        && (EcuM_IsEcuMPartitionOfPartitionData(applicationIdx))
; ..\component\EcuM\Implementation\EcuM.c	  3007  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  3008  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3009        )
; ..\component\EcuM\Implementation\EcuM.c	  3010      {
; ..\component\EcuM\Implementation\EcuM.c	  3011  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3012  
; ..\component\EcuM\Implementation\EcuM.c	  3013  #if(ECUM_CHANNELOFWAKEUPSOURCELIST == STD_ON || ECUM_PNCOFCOMMPNCS == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	  3014        /* #30 Check for buffered ComM notifications and if existent, notify them to ComM. */
; ..\component\EcuM\Implementation\EcuM.c	  3015        if (EcuM_ComM_BufferedWakeups != 0u)
	fcall	.cocofun_5
.L804:
	jeq	d15,#0,.L10
.L805:

; ..\component\EcuM\Implementation\EcuM.c	  3016        {
; ..\component\EcuM\Implementation\EcuM.c	  3017          EcuM_InternalComMNotifications();
	j	EcuM_InternalComMNotifications
.L10:

; ..\component\EcuM\Implementation\EcuM.c	  3018        }
; ..\component\EcuM\Implementation\EcuM.c	  3019  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3020  
; ..\component\EcuM\Implementation\EcuM.c	  3021  #if ( ECUM_TIMEOUTOFWAKEUPSOURCELIST == STD_ON )
; ..\component\EcuM\Implementation\EcuM.c	  3022        /* #31 Check for occurred wakeup events and if existent, perform the wakeup validation procedure. */
; ..\component\EcuM\Implementation\EcuM.c	  3023        if ((ECUM_COMBINEDPENDINGWAKEUPS != ECUM_WKSOURCE_NONE)
; ..\component\EcuM\Implementation\EcuM.c	  3024  # if(ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3025            || (EcuM_ClearedPendingWakeups != ECUM_WKSOURCE_NONE)
; ..\component\EcuM\Implementation\EcuM.c	  3026  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3027        )
; ..\component\EcuM\Implementation\EcuM.c	  3028        {
; ..\component\EcuM\Implementation\EcuM.c	  3029          EcuM_InternalWakeupValidation();
; ..\component\EcuM\Implementation\EcuM.c	  3030        }
; ..\component\EcuM\Implementation\EcuM.c	  3031  
; ..\component\EcuM\Implementation\EcuM.c	  3032  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3033  
; ..\component\EcuM\Implementation\EcuM.c	  3034  #if (ECUM_DEFERRED_BSWM_NOTIFICATION == STD_ON) || (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3035  
; ..\component\EcuM\Implementation\EcuM.c	  3036  # if (ECUM_DEFERRED_BSWM_NOTIFICATION == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3037        if(EcuM_BswM_BufferedWakeups != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  3038  
; ..\component\EcuM\Implementation\EcuM.c	  3039        {
; ..\component\EcuM\Implementation\EcuM.c	  3040          EcuM_InternalBswMNotifications();
; ..\component\EcuM\Implementation\EcuM.c	  3041        }
; ..\component\EcuM\Implementation\EcuM.c	  3042  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3043  
; ..\component\EcuM\Implementation\EcuM.c	  3044  # if(ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  3045  #  if (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3046  #   if (ECUM_TIMEOUTOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3047  
; ..\component\EcuM\Implementation\EcuM.c	  3048        /* #40 Only in case of EcuM Flex: Check if the module is in state WAKEUP_VALIDATION. */
; ..\component\EcuM\Implementation\EcuM.c	  3049        if ( EcuM_GetModuleState() == ECUM_STATE_WAKEUP_VALIDATION)
; ..\component\EcuM\Implementation\EcuM.c	  3050        {
; ..\component\EcuM\Implementation\EcuM.c	  3051          if (EcuM_ValidatedWakeups != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  3052          {
; ..\component\EcuM\Implementation\EcuM.c	  3053            /* #42 Disable all sources that were active during the last sleepmode. */
; ..\component\EcuM\Implementation\EcuM.c	  3054            EcuM_DisableWakeupSources(EcuM_EnabledWakeups);
; ..\component\EcuM\Implementation\EcuM.c	  3055  
; ..\component\EcuM\Implementation\EcuM.c	  3056            /* #43 Notify the BswM about the disabling of wakeup sources (ECUM_WKSTATUS_NONE). */
; ..\component\EcuM\Implementation\EcuM.c	  3057            BswM_EcuM_CurrentWakeup(EcuM_EnabledWakeups & (~ECUM_COMBINEDWAKEUPS), ECUM_WKSTATUS_NONE);
; ..\component\EcuM\Implementation\EcuM.c	  3058            EcuM_EnabledWakeups = 0u;
; ..\component\EcuM\Implementation\EcuM.c	  3059  
; ..\component\EcuM\Implementation\EcuM.c	  3060            /* #44 Set the EcuM Flex module state to APP_RUN. */
; ..\component\EcuM\Implementation\EcuM.c	  3061            EcuM_SetModuleState(ECUM_STATE_RUN); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  3062          }
; ..\component\EcuM\Implementation\EcuM.c	  3063  
; ..\component\EcuM\Implementation\EcuM.c	  3064          /* In case that the EcuM has detected an expired wakeup source, the BswM is responsible to set the EcuM in a
; ..\component\EcuM\Implementation\EcuM.c	  3065           * sleep mode again */
; ..\component\EcuM\Implementation\EcuM.c	  3066        }
; ..\component\EcuM\Implementation\EcuM.c	  3067  
; ..\component\EcuM\Implementation\EcuM.c	  3068  #   endif /* (ECUM_TIMEOUTOFWAKEUPSOURCELIST == STD_ON) */
; ..\component\EcuM\Implementation\EcuM.c	  3069  #  endif /* (ECUM_SLEEPMODELIST == STD_ON) */
; ..\component\EcuM\Implementation\EcuM.c	  3070  # endif /* (ECUM_FIXED_BEHAVIOR != STD_ON) */
; ..\component\EcuM\Implementation\EcuM.c	  3071  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3072  
; ..\component\EcuM\Implementation\EcuM.c	  3073  #if(ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3074        /* #51 Decrement the EcuM_Timer in each MainFunction. EcuM_Timer is used for NvM or for Self Run Request Timeout. */
; ..\component\EcuM\Implementation\EcuM.c	  3075        if ((EcuM_GetTimer() != ECUM_TIMER_NOT_SET) && (EcuM_GetTimer() > ECUM_TIMER_EXPIRED))
; ..\component\EcuM\Implementation\EcuM.c	  3076        {
; ..\component\EcuM\Implementation\EcuM.c	  3077          EcuM_DecTimer(); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  3078        }
; ..\component\EcuM\Implementation\EcuM.c	  3079  
; ..\component\EcuM\Implementation\EcuM.c	  3080        /* #52 Call the state machine as long as a state change is performed. */
; ..\component\EcuM\Implementation\EcuM.c	  3081        do
; ..\component\EcuM\Implementation\EcuM.c	  3082        {
; ..\component\EcuM\Implementation\EcuM.c	  3083          lastState = EcuM_GetModuleState();
; ..\component\EcuM\Implementation\EcuM.c	  3084          EcuM_Statemachine();
; ..\component\EcuM\Implementation\EcuM.c	  3085        }
; ..\component\EcuM\Implementation\EcuM.c	  3086        while (lastState != EcuM_GetModuleState());
; ..\component\EcuM\Implementation\EcuM.c	  3087  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3088  
; ..\component\EcuM\Implementation\EcuM.c	  3089  #if(ECUM_MODE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3090        if(EcuM_GetBswMCurrentModuleState() != EcuM_GetBswMRequestedModuleState())
; ..\component\EcuM\Implementation\EcuM.c	  3091        {
; ..\component\EcuM\Implementation\EcuM.c	  3092          EcuM_InternalRteFeedbackCheck();
; ..\component\EcuM\Implementation\EcuM.c	  3093        }
; ..\component\EcuM\Implementation\EcuM.c	  3094  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3095  
; ..\component\EcuM\Implementation\EcuM.c	  3096  #if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  3097      } /* (GetCoreID() >= ECUM_CORE_ID_BSW) */
; ..\component\EcuM\Implementation\EcuM.c	  3098      else
; ..\component\EcuM\Implementation\EcuM.c	  3099      {
; ..\component\EcuM\Implementation\EcuM.c	  3100  # if(ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  3101        if ((EcuM_GetModuleState() == ECUM_STATE_GO_OFF_ONE)
; ..\component\EcuM\Implementation\EcuM.c	  3102  #  if(ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3103            || (EcuM_GetModuleState() == ECUM_STATE_GO_SLEEP)
; ..\component\EcuM\Implementation\EcuM.c	  3104  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  3105        )
; ..\component\EcuM\Implementation\EcuM.c	  3106  # elif (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3107      if ((EcuM_GetModuleState() == ECUM_STATE_GO_SLEEP)
; ..\component\EcuM\Implementation\EcuM.c	  3108          || (EcuM_GetModuleState() == ECUM_STATE_SLEEP))
; ..\component\EcuM\Implementation\EcuM.c	  3109  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3110        {
; ..\component\EcuM\Implementation\EcuM.c	  3111  # if(ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  3112          /* #60 In case of EcuM Flex: Handle the complete shutdown process for a slave core. */
; ..\component\EcuM\Implementation\EcuM.c	  3113          (void) EcuM_GoToSelectedShutdownTarget();
; ..\component\EcuM\Implementation\EcuM.c	  3114  # elif (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3115          /* #61 In case of EcuM Fixed: Handle the sleep sequence for a slave core. */
; ..\component\EcuM\Implementation\EcuM.c	  3116          (void)EcuM_EnterSleepOnSlave(coreID);
; ..\component\EcuM\Implementation\EcuM.c	  3117  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3118        }
; ..\component\EcuM\Implementation\EcuM.c	  3119      }
; ..\component\EcuM\Implementation\EcuM.c	  3120  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3121  } /* PRQA S 6050 */ /* MD_MSR_STCAL */
	ret
.L470:
	
__EcuM_MainFunction_function_end:
	.size	EcuM_MainFunction,__EcuM_MainFunction_function_end-EcuM_MainFunction
.L300:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_Init',code,cluster('EcuM_Init')
	.sect	'.text.EcuM.EcuM_Init'
	.align	2
	
	.global	EcuM_Init

; ..\component\EcuM\Implementation\EcuM.c	  3122  
; ..\component\EcuM\Implementation\EcuM.c	  3123  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  3124   *  EcuM_Init
; ..\component\EcuM\Implementation\EcuM.c	  3125   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  3126  /*!
; ..\component\EcuM\Implementation\EcuM.c	  3127   *
; ..\component\EcuM\Implementation\EcuM.c	  3128   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  3129   *
; ..\component\EcuM\Implementation\EcuM.c	  3130   *
; ..\component\EcuM\Implementation\EcuM.c	  3131   *
; ..\component\EcuM\Implementation\EcuM.c	  3132   *
; ..\component\EcuM\Implementation\EcuM.c	  3133   *
; ..\component\EcuM\Implementation\EcuM.c	  3134   *
; ..\component\EcuM\Implementation\EcuM.c	  3135   *
; ..\component\EcuM\Implementation\EcuM.c	  3136   *
; ..\component\EcuM\Implementation\EcuM.c	  3137   *
; ..\component\EcuM\Implementation\EcuM.c	  3138   *
; ..\component\EcuM\Implementation\EcuM.c	  3139   *
; ..\component\EcuM\Implementation\EcuM.c	  3140   *
; ..\component\EcuM\Implementation\EcuM.c	  3141   *
; ..\component\EcuM\Implementation\EcuM.c	  3142   *
; ..\component\EcuM\Implementation\EcuM.c	  3143   *
; ..\component\EcuM\Implementation\EcuM.c	  3144   */
; ..\component\EcuM\Implementation\EcuM.c	  3145  FUNC(void, ECUM_CODE) EcuM_Init(void)
; Function EcuM_Init
.L132:
EcuM_Init:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  3146  {
; ..\component\EcuM\Implementation\EcuM.c	  3147    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3148    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  3149  
; ..\component\EcuM\Implementation\EcuM.c	  3150  #if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  3151    CoreIdType coreID = GetCoreID();
; ..\component\EcuM\Implementation\EcuM.c	  3152  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3153  
; ..\component\EcuM\Implementation\EcuM.c	  3154  #if((ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE) || (ECUM_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  3155    /* Only call GetCoreID in the case of a multicore System */
; ..\component\EcuM\Implementation\EcuM.c	  3156  # if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  3157    if (coreID == ECUM_CORE_ID_STARTUP)
; ..\component\EcuM\Implementation\EcuM.c	  3158  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3159    {
; ..\component\EcuM\Implementation\EcuM.c	  3160      /* #20 Initialize the global config pointer prior the call of EcuM_DeterminePbConfiguration for usage in DriverInitZero. */
; ..\component\EcuM\Implementation\EcuM.c	  3161      ECUM_GLOBAL_CFG_PTR = ECUM_FIRST_CONFIG_STRUCTURE;
; ..\component\EcuM\Implementation\EcuM.c	  3162    }
; ..\component\EcuM\Implementation\EcuM.c	  3163  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3164  
; ..\component\EcuM\Implementation\EcuM.c	  3165    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3166  #if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  3167    /* #21 Check if the returned coreId is a valid one. */
; ..\component\EcuM\Implementation\EcuM.c	  3168  # if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3169    if (coreID >= EcuM_GetSizeOfCoreStatus())
; ..\component\EcuM\Implementation\EcuM.c	  3170    {
; ..\component\EcuM\Implementation\EcuM.c	  3171      EcuM_ErrorHook(ECUM_E_HOOK_INVALID_COREID);
; ..\component\EcuM\Implementation\EcuM.c	  3172    }
; ..\component\EcuM\Implementation\EcuM.c	  3173    /* Runtime check that configured Bsw Core Id fits into CoreStatus Array */
; ..\component\EcuM\Implementation\EcuM.c	  3174    else if (ECUM_CORE_ID_BSW >= EcuM_GetSizeOfCoreStatus())
; ..\component\EcuM\Implementation\EcuM.c	  3175    {
; ..\component\EcuM\Implementation\EcuM.c	  3176      errorId = ECUM_E_INVALID_GEN_DATA;
; ..\component\EcuM\Implementation\EcuM.c	  3177    }
; ..\component\EcuM\Implementation\EcuM.c	  3178    else
; ..\component\EcuM\Implementation\EcuM.c	  3179  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3180  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3181    {
; ..\component\EcuM\Implementation\EcuM.c	  3182    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3183  #if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  3184      if (coreID == ECUM_CORE_ID_BSW)
; ..\component\EcuM\Implementation\EcuM.c	  3185  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3186      {
; ..\component\EcuM\Implementation\EcuM.c	  3187  #if ((ECUM_TIMEOUTOFWAKEUPSOURCELIST == STD_ON) || (ECUM_REASONOFWAKEUPSOURCELIST == STD_ON) \ 
; ..\component\EcuM\Implementation\EcuM.c	  3188    || (ECUM_FIXED_BEHAVIOR == STD_ON) || (ECUM_MODE_HANDLING == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  3189        uint8_least loopCount;
; ..\component\EcuM\Implementation\EcuM.c	  3190  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3191  
; ..\component\EcuM\Implementation\EcuM.c	  3192        /* Set the current state of the EcuM to STARTUP */
; ..\component\EcuM\Implementation\EcuM.c	  3193        EcuM_SetModuleState(ECUM_STATE_STARTUP); /* SBSW_ECUM_CSL_VAR_ACCESS */
	movh.a	a15,#@his(EcuM_ModuleState)
	mov	d15,#16
	st.b	[a15]@los(EcuM_ModuleState),d15
.L596:

; ..\component\EcuM\Implementation\EcuM.c	  3194  
; ..\component\EcuM\Implementation\EcuM.c	  3195        /* #30 Set the interrupts on ECUs with programmable interrupts (EcuM_AL_SetProgrammableInterrupts). */
; ..\component\EcuM\Implementation\EcuM.c	  3196        EcuM_AL_SetProgrammableInterrupts();
	call	EcuM_AL_SetProgrammableInterrupts
.L597:

; ..\component\EcuM\Implementation\EcuM.c	  3197  
; ..\component\EcuM\Implementation\EcuM.c	  3198        /* #31 Initialize BSW that do not use PostBuild parameters (DriverInitListZero). */
; ..\component\EcuM\Implementation\EcuM.c	  3199        ECUM_DRIVERINITLIST_ZERO();
	call	EcuM_AL_DriverInitZero
.L598:

; ..\component\EcuM\Implementation\EcuM.c	  3200  
; ..\component\EcuM\Implementation\EcuM.c	  3201  #if((ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE) || (ECUM_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  3202        /* #32 Determine the current configuration variant and set the global config pointer. */
; ..\component\EcuM\Implementation\EcuM.c	  3203  # if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  3204        if(coreID == ECUM_CORE_ID_STARTUP) /* PRQA S 2991, 2992, 2995, 2996 */ /* MD_EcuM_2991_2992_2995_2996 */ /* COV_ECUM_COREID_STARTUP */
; ..\component\EcuM\Implementation\EcuM.c	  3205  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3206        {
; ..\component\EcuM\Implementation\EcuM.c	  3207          EcuM_InternalDeterminePbConfiguration(); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\EcuM\Implementation\EcuM.c	  3208        }
; ..\component\EcuM\Implementation\EcuM.c	  3209  #endif /* ((ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE) || (ECUM_POSTBUILD_VARIANT_SUPPORT == STD_ON)) */
; ..\component\EcuM\Implementation\EcuM.c	  3210  
; ..\component\EcuM\Implementation\EcuM.c	  3211        /* Clear wakeups from all sources */
; ..\component\EcuM\Implementation\EcuM.c	  3212        EcuM_InternalClearWakeupEvent( ECUM_WKSOURCE_ALL_SOURCES);
	mov	d4,#-1
	call	EcuM_InternalClearWakeupEvent
.L599:

; ..\component\EcuM\Implementation\EcuM.c	  3213  
; ..\component\EcuM\Implementation\EcuM.c	  3214  #if(ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3215        EcuM_EnabledWakeups = 0u;
; ..\component\EcuM\Implementation\EcuM.c	  3216  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3217  
; ..\component\EcuM\Implementation\EcuM.c	  3218  #if (ECUM_SHUTDOWNCAUSECOUNT != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  3219        EcuM_ShutdownCause = EcuMConf_EcuMShutdownCause_ECUM_CAUSE_UNKNOWN;
	movh.a	a2,#@his(EcuM_ShutdownCause)
.L600:
	mov	d15,#0
	st.b	[a2]@los(EcuM_ShutdownCause),d15
.L601:

; ..\component\EcuM\Implementation\EcuM.c	  3220  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3221  
; ..\component\EcuM\Implementation\EcuM.c	  3222        EcuM_CurrentBootTarget = ECUM_BOOT_TARGET_OEM_BOOTLOADER;
	movh.a	a2,#@his(EcuM_CurrentBootTarget)
.L602:
	mov	d15,#1
	st.b	[a2]@los(EcuM_CurrentBootTarget),d15
.L603:

; ..\component\EcuM\Implementation\EcuM.c	  3223  
; ..\component\EcuM\Implementation\EcuM.c	  3224  #if (ECUM_TIMEOUTOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3225  
; ..\component\EcuM\Implementation\EcuM.c	  3226  # if(ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3227        /* Clear also all ClearedPendingWakeups in case of active WakeupValidationList */
; ..\component\EcuM\Implementation\EcuM.c	  3228        EcuM_ClearedPendingWakeups = 0u;
; ..\component\EcuM\Implementation\EcuM.c	  3229  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3230  
; ..\component\EcuM\Implementation\EcuM.c	  3231        /* Reset all wakeup validation timeouts */
; ..\component\EcuM\Implementation\EcuM.c	  3232        for (loopCount = 0u; loopCount < EcuM_GetSizeOfWakeupSourceList(); loopCount++) /* PRQA S 2812 */ /* MD_EcuM_2812 */
; ..\component\EcuM\Implementation\EcuM.c	  3233        {
; ..\component\EcuM\Implementation\EcuM.c	  3234          EcuM_SetValidationTimeoutTable(loopCount, ECUM_NO_VALIDATION_TIMEOUT); /* SBSW_ECUM_ACCESSVALTABLE */
; ..\component\EcuM\Implementation\EcuM.c	  3235        }
; ..\component\EcuM\Implementation\EcuM.c	  3236  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3237  
; ..\component\EcuM\Implementation\EcuM.c	  3238        /* Set the current state of the EcuM */
; ..\component\EcuM\Implementation\EcuM.c	  3239        EcuM_SetModuleState(ECUM_STATE_STARTUP_ONE); /* SBSW_ECUM_CSL_VAR_ACCESS */
	mov	d15,#17
	st.b	[a15]@los(EcuM_ModuleState),d15
.L604:

; ..\component\EcuM\Implementation\EcuM.c	  3240  
; ..\component\EcuM\Implementation\EcuM.c	  3241  #if (ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3242        EcuM_SetTimer(ECUM_TIMER_NOT_SET); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  3243  
; ..\component\EcuM\Implementation\EcuM.c	  3244        EcuM_SetKillAllInProgress(0u); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  3245  
; ..\component\EcuM\Implementation\EcuM.c	  3246  # if(ECUM_SUPPORT_DEM == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3247        EcuM_SetDemStatus(ECUM_DEM_INITIALIZED); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  3248  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3249  
; ..\component\EcuM\Implementation\EcuM.c	  3250  # if(ECUM_INCLUDE_NVRAM_MGR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3251        EcuM_SetNvMWriteAllStatus(ECUM_NVM_WRITEALL_IDLE); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  3252  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3253  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3254  
; ..\component\EcuM\Implementation\EcuM.c	  3255  #if ((ECUM_FIXED_BEHAVIOR == STD_ON) || (ECUM_MODE_HANDLING == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  3256        EcuM_SetRunRequestCounter(0u); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  3257        EcuM_SetPostRunRequestCounter(0u); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  3258  # if(ECUM_USERTABLE == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3259        for (loopCount = 0u; loopCount < EcuM_GetSizeOfUserTable(); loopCount++)
; ..\component\EcuM\Implementation\EcuM.c	  3260        {
; ..\component\EcuM\Implementation\EcuM.c	  3261          EcuM_SetUserTable(loopCount, 0u); /* SBSW_ECUM_ACCESSUSERTABLE */
; ..\component\EcuM\Implementation\EcuM.c	  3262        }
; ..\component\EcuM\Implementation\EcuM.c	  3263  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3264  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3265  
; ..\component\EcuM\Implementation\EcuM.c	  3266  #if(ECUM_MODE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3267        /* Initialize the Requested state with shutdown to be different to the requested state. */
; ..\component\EcuM\Implementation\EcuM.c	  3268        EcuM_SetBswMCurrentModuleState(ECUM_STATE_SHUTDOWN); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  3269        /* Initialize the Requested state with startup to begin RTE synchronization directly after initialization. */
; ..\component\EcuM\Implementation\EcuM.c	  3270        EcuM_SetBswMRequestedModuleState(ECUM_STATE_STARTUP); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  3271        /* Initialize the RteStateBuffer state with RTE_TRANSITION_EcuM_Mode to begin RTE synchronization directly after initialization. */
; ..\component\EcuM\Implementation\EcuM.c	  3272        EcuM_RteStateBuffer = RTE_TRANSITION_EcuM_Mode;
; ..\component\EcuM\Implementation\EcuM.c	  3273  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3274  
; ..\component\EcuM\Implementation\EcuM.c	  3275  
; ..\component\EcuM\Implementation\EcuM.c	  3276        /* #34 Initialize BSW that use PostBuild parameters (DriverInitListOne). */
; ..\component\EcuM\Implementation\EcuM.c	  3277        ECUM_DRIVERINITLIST_ONE(); /* SBSW_ECUM_FUNCTIONPOINTER_CALL */ /* PRQA S 2812 */ /* MD_EcuM_2812 */
	movh.a	a15,#@his(EcuM_DriverInitOne)
	ld.a	a15,[a15]@los(EcuM_DriverInitOne)
.L605:
	calli	a15
.L606:

; ..\component\EcuM\Implementation\EcuM.c	  3278  
; ..\component\EcuM\Implementation\EcuM.c	  3279        /* Reset all AlarmClocks if the Feature is enabled */
; ..\component\EcuM\Implementation\EcuM.c	  3280  #if(ECUM_ALARM_CLOCK_PRESENT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3281  
; ..\component\EcuM\Implementation\EcuM.c	  3282        /* Initialize the Clock only in the case that RAM content is not available after startup */
; ..\component\EcuM\Implementation\EcuM.c	  3283        if ((EcuM_IntendedRestartID_One != ECUM_MAGIC_ONE) || (EcuM_IntendedRestartID_Two != ECUM_MAGIC_TWO)) /* COV_ECUM_RESTARTID */
; ..\component\EcuM\Implementation\EcuM.c	  3284        {
; ..\component\EcuM\Implementation\EcuM.c	  3285          EcuM_Clock = 0u;
; ..\component\EcuM\Implementation\EcuM.c	  3286        }
; ..\component\EcuM\Implementation\EcuM.c	  3287  
; ..\component\EcuM\Implementation\EcuM.c	  3288        EcuM_InternalClearAlarms();
; ..\component\EcuM\Implementation\EcuM.c	  3289  
; ..\component\EcuM\Implementation\EcuM.c	  3290        /* Initialize the EcuM_MasterAlarm that stores the information about the next alarm clock time */
; ..\component\EcuM\Implementation\EcuM.c	  3291        EcuM_MasterAlarm = 0xFFFFFFFFu;
; ..\component\EcuM\Implementation\EcuM.c	  3292  
; ..\component\EcuM\Implementation\EcuM.c	  3293  #endif /* #if(ECUM_ALARM_CLOCK_PRESENT == STD_ON) */
; ..\component\EcuM\Implementation\EcuM.c	  3294  
; ..\component\EcuM\Implementation\EcuM.c	  3295  #if(ECUM_REASONOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3296        /* #50 Map the Mcu reset reason from the last occurred shutdown. */
; ..\component\EcuM\Implementation\EcuM.c	  3297        {
; ..\component\EcuM\Implementation\EcuM.c	  3298          VAR(Mcu_ResetType, AUTOMATIC) resetReason;
; ..\component\EcuM\Implementation\EcuM.c	  3299  
; ..\component\EcuM\Implementation\EcuM.c	  3300          resetReason = Mcu_GetResetReason();
; ..\component\EcuM\Implementation\EcuM.c	  3301  
; ..\component\EcuM\Implementation\EcuM.c	  3302          for (loopCount = 0u; loopCount < EcuM_GetSizeOfWakeupSourceList(); loopCount++)
; ..\component\EcuM\Implementation\EcuM.c	  3303          {
; ..\component\EcuM\Implementation\EcuM.c	  3304            /* Determine a wakeup source that fits to the MCU wakeup source that is responsible for the reset */
; ..\component\EcuM\Implementation\EcuM.c	  3305            if ((EcuM_GetReasonOfWakeupSourceList(loopCount)) == resetReason)
; ..\component\EcuM\Implementation\EcuM.c	  3306            {
; ..\component\EcuM\Implementation\EcuM.c	  3307              /* Set this wakeup source as a validated wakeup event */
; ..\component\EcuM\Implementation\EcuM.c	  3308              EcuM_ValidatedWakeups |= (((EcuM_WakeupSourceType)1u << (EcuM_WakeupSourceType)loopCount));
; ..\component\EcuM\Implementation\EcuM.c	  3309  
; ..\component\EcuM\Implementation\EcuM.c	  3310              /* Store this source in the BufferedWakeups to validate it at the end of EcuM_StartupTwo */
; ..\component\EcuM\Implementation\EcuM.c	  3311              EcuM_BswM_BufferedWakeups |= (((EcuM_WakeupSourceType)1u << (EcuM_WakeupSourceType)loopCount));
; ..\component\EcuM\Implementation\EcuM.c	  3312              break;
; ..\component\EcuM\Implementation\EcuM.c	  3313            }
; ..\component\EcuM\Implementation\EcuM.c	  3314            /* If Hardware can not detect a specific wakeup source, the source ECUM_WKSOURCE_RESET shall be reported. */
; ..\component\EcuM\Implementation\EcuM.c	  3315            if (loopCount == (EcuM_GetSizeOfWakeupSourceList() - 1u))
; ..\component\EcuM\Implementation\EcuM.c	  3316            {
; ..\component\EcuM\Implementation\EcuM.c	  3317              EcuM_ValidatedWakeups |= ECUM_WKSOURCE_RESET;
; ..\component\EcuM\Implementation\EcuM.c	  3318  
; ..\component\EcuM\Implementation\EcuM.c	  3319              /* Store this source in the BufferedWakeups to validate it at the end of EcuM_StartupTwo */
; ..\component\EcuM\Implementation\EcuM.c	  3320              EcuM_BswM_BufferedWakeups |= ECUM_WKSOURCE_RESET;
; ..\component\EcuM\Implementation\EcuM.c	  3321            }
; ..\component\EcuM\Implementation\EcuM.c	  3322          }
; ..\component\EcuM\Implementation\EcuM.c	  3323        }
; ..\component\EcuM\Implementation\EcuM.c	  3324  
; ..\component\EcuM\Implementation\EcuM.c	  3325  #else
; ..\component\EcuM\Implementation\EcuM.c	  3326        EcuM_ValidatedWakeups |= ECUM_WKSOURCE_RESET;
	movh.a	a15,#@his(EcuM_ValidatedWakeups)
	ld.w	d15,[a15]@los(EcuM_ValidatedWakeups)
.L607:
	or	d15,#2
	fcall	.cocofun_4
.L608:

; ..\component\EcuM\Implementation\EcuM.c	  3327  
; ..\component\EcuM\Implementation\EcuM.c	  3328        /* Store this source in the BufferedWakeups to validate it at the end of EcuM_StartupTwo */
; ..\component\EcuM\Implementation\EcuM.c	  3329        EcuM_BswM_BufferedWakeups |= ECUM_WKSOURCE_RESET;
	or	d15,#2
	st.w	[a15]@los(EcuM_BswM_BufferedWakeups),d15
.L609:

; ..\component\EcuM\Implementation\EcuM.c	  3330  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3331  
; ..\component\EcuM\Implementation\EcuM.c	  3332        /* Select the shutdown target to the configured default shutdowntarget
; ..\component\EcuM\Implementation\EcuM.c	  3333         The current state is not a legal state for the API EcuM_SelectShutdownTarget. To avoid errors at the uninit check,
; ..\component\EcuM\Implementation\EcuM.c	  3334         the global variables must be set directly at this place.
; ..\component\EcuM\Implementation\EcuM.c	  3335         Direct access to shutdown target and mode has to be used instead of EcuM_InternalSetShutdownTargetAndMode,
; ..\component\EcuM\Implementation\EcuM.c	  3336         because the OS is not initialized yet so the exclusive areas will not yet function. */
; ..\component\EcuM\Implementation\EcuM.c	  3337        EcuM_CurrentShutdownTarget = EcuM_GetDefaultShutdownTarget();
	mov	d15,#128
	movh.a	a15,#@his(EcuM_CurrentShutdownTarget)
.L610:

; ..\component\EcuM\Implementation\EcuM.c	  3338        EcuM_CurrentShutdownMode = EcuM_GetDefaultShutdownMode();
; ..\component\EcuM\Implementation\EcuM.c	  3339      }
; ..\component\EcuM\Implementation\EcuM.c	  3340  #if (ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  3341      else
; ..\component\EcuM\Implementation\EcuM.c	  3342      {
; ..\component\EcuM\Implementation\EcuM.c	  3343        /* #40 Call DriverInitListZero also on a slave core to initialize BSW that do not use PostBuild parameters. */
; ..\component\EcuM\Implementation\EcuM.c	  3344        ECUM_DRIVERINITLIST_ZERO();
; ..\component\EcuM\Implementation\EcuM.c	  3345  
; ..\component\EcuM\Implementation\EcuM.c	  3346  # if((ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE) || (ECUM_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  3347        if(coreID == ECUM_CORE_ID_STARTUP) /* PRQA S 2992, 2996 */ /* MD_EcuM_2991_2992_2995_2996 */ /* COV_ECUM_COREID_STARTUP */
; ..\component\EcuM\Implementation\EcuM.c	  3348        {
; ..\component\EcuM\Implementation\EcuM.c	  3349          EcuM_InternalDeterminePbConfiguration(); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\EcuM\Implementation\EcuM.c	  3350        }
; ..\component\EcuM\Implementation\EcuM.c	  3351  # endif /* ((ECUM_CONFIGURATION_VARIANT == ECUM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE) || (ECUM_POSTBUILD_VARIANT_SUPPORT == STD_ON)) */
; ..\component\EcuM\Implementation\EcuM.c	  3352        /* #41 Call DriverInitListOne also on a slave core to initialize BSW that use PostBuild parameters.  */
; ..\component\EcuM\Implementation\EcuM.c	  3353        ECUM_DRIVERINITLIST_ONE(); /* SBSW_ECUM_FUNCTIONPOINTER_CALL */ /* PRQA S 2812 */ /* MD_EcuM_2812 */
; ..\component\EcuM\Implementation\EcuM.c	  3354      }
; ..\component\EcuM\Implementation\EcuM.c	  3355  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3356  
; ..\component\EcuM\Implementation\EcuM.c	  3357  #if (ECUM_SLAVE_CORE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3358      EcuM_SetCoreStatusValue(coreID, ECUM_CORESTATUS_RUN); /* SBSW_SETCORESTATUS_OSCOREID */
; ..\component\EcuM\Implementation\EcuM.c	  3359  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3360  
; ..\component\EcuM\Implementation\EcuM.c	  3361      /* #51 Start the AUTOSAR OS with the corresponding default appMode. */
; ..\component\EcuM\Implementation\EcuM.c	  3362      EcuM_StartOS( EcuM_GetDefaultAppMode());
	mov	d4,#1
	st.b	[a15]@los(EcuM_CurrentShutdownTarget),d15
.L611:
	mov	d15,#0
	movh.a	a15,#@his(EcuM_CurrentShutdownMode)
.L612:
	st.b	[a15]@los(EcuM_CurrentShutdownMode),d15
.L613:
	j	EcuM_StartOS
.L402:
	
__EcuM_Init_function_end:
	.size	EcuM_Init,__EcuM_Init_function_end-EcuM_Init
.L205:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_Shutdown',code,cluster('EcuM_Shutdown')
	.sect	'.text.EcuM.EcuM_Shutdown'
	.align	2
	
	.global	EcuM_Shutdown

; ..\component\EcuM\Implementation\EcuM.c	  3363    }
; ..\component\EcuM\Implementation\EcuM.c	  3364  
; ..\component\EcuM\Implementation\EcuM.c	  3365    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3366  #if((ECUM_DEV_ERROR_REPORT == STD_ON) && (ECUM_NUMBER_OF_CORES > 1u))
; ..\component\EcuM\Implementation\EcuM.c	  3367    if (errorId != ECUM_E_NO_ERROR)
; ..\component\EcuM\Implementation\EcuM.c	  3368    {
; ..\component\EcuM\Implementation\EcuM.c	  3369      EcuM_Det_ReportError(ECUM_SID_INIT, errorId);
; ..\component\EcuM\Implementation\EcuM.c	  3370    }
; ..\component\EcuM\Implementation\EcuM.c	  3371  #else
; ..\component\EcuM\Implementation\EcuM.c	  3372    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3373  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3374  
; ..\component\EcuM\Implementation\EcuM.c	  3375  } /* PRQA S 6010, 6030, 6050, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STCAL, MD_MSR_STMIF */
; ..\component\EcuM\Implementation\EcuM.c	  3376  
; ..\component\EcuM\Implementation\EcuM.c	  3377  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  3378   *  EcuM_Shutdown
; ..\component\EcuM\Implementation\EcuM.c	  3379   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  3380  /*!
; ..\component\EcuM\Implementation\EcuM.c	  3381   *
; ..\component\EcuM\Implementation\EcuM.c	  3382   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  3383   *
; ..\component\EcuM\Implementation\EcuM.c	  3384   *
; ..\component\EcuM\Implementation\EcuM.c	  3385   *
; ..\component\EcuM\Implementation\EcuM.c	  3386   *
; ..\component\EcuM\Implementation\EcuM.c	  3387   *
; ..\component\EcuM\Implementation\EcuM.c	  3388   *
; ..\component\EcuM\Implementation\EcuM.c	  3389   *
; ..\component\EcuM\Implementation\EcuM.c	  3390   *
; ..\component\EcuM\Implementation\EcuM.c	  3391   *
; ..\component\EcuM\Implementation\EcuM.c	  3392   *
; ..\component\EcuM\Implementation\EcuM.c	  3393   */
; ..\component\EcuM\Implementation\EcuM.c	  3394  FUNC(void, ECUM_CODE) EcuM_Shutdown(void)
; Function EcuM_Shutdown
.L134:
EcuM_Shutdown:	.type	func
	sub.a	a10,#8
.L501:

; ..\component\EcuM\Implementation\EcuM.c	  3395  {
; ..\component\EcuM\Implementation\EcuM.c	  3396    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3397    uint8 errorId = ECUM_E_NO_ERROR;
	fcall	.cocofun_6
.L503:

; ..\component\EcuM\Implementation\EcuM.c	  3398    EcuM_StateType localShutdownTarget;
; ..\component\EcuM\Implementation\EcuM.c	  3399    uint8 localShutdownMode;
; ..\component\EcuM\Implementation\EcuM.c	  3400  
; ..\component\EcuM\Implementation\EcuM.c	  3401    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3402  #if(ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3403    if ( EcuM_GetModuleState() != ECUM_STATE_GO_OFF_ONE)
	mov	d15,#77
.L618:
	jeq	d15,d0,.L11
.L619:

; ..\component\EcuM\Implementation\EcuM.c	  3404    {
; ..\component\EcuM\Implementation\EcuM.c	  3405      errorId = ECUM_E_MODULE_NOT_IN_PREPSHUTDOWN;
	mov	d8,#33
	j	.L12
.L11:

; ..\component\EcuM\Implementation\EcuM.c	  3406    }
; ..\component\EcuM\Implementation\EcuM.c	  3407    else
; ..\component\EcuM\Implementation\EcuM.c	  3408  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3409    {
; ..\component\EcuM\Implementation\EcuM.c	  3410      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3411      /* #20 Set the current state of the EcuM to ECUM_STATE_GO_OFF_TWO. */
; ..\component\EcuM\Implementation\EcuM.c	  3412      EcuM_SetModuleState(ECUM_STATE_GO_OFF_TWO); /* SBSW_ECUM_CSL_VAR_ACCESS */
	mov	d15,#78
	st.b	[a15],d15
.L620:

; ..\component\EcuM\Implementation\EcuM.c	  3413  
; ..\component\EcuM\Implementation\EcuM.c	  3414      /* #21 Execute user-specific code shortly before shutdown (EcuM_OnGoOffTwo()). */
; ..\component\EcuM\Implementation\EcuM.c	  3415      EcuM_OnGoOffTwo();
	call	EcuM_OnGoOffTwo
.L621:

; ..\component\EcuM\Implementation\EcuM.c	  3416  
; ..\component\EcuM\Implementation\EcuM.c	  3417      /* #22 Save the value of the current shutdown target for usage after a restart. */
; ..\component\EcuM\Implementation\EcuM.c	  3418      EcuM_InternalGetShutdownTargetAndMode(&localShutdownTarget, &localShutdownMode); /* SBSW_ECUM_POINTER_TO_LOCAL_VARIABLES */
	mov.aa	a4,a10
.L622:
	lea	a5,[a10]1
	call	EcuM_InternalGetShutdownTargetAndMode
.L623:

; ..\component\EcuM\Implementation\EcuM.c	  3419      EcuM_LastShutdownTarget = localShutdownTarget;
; ..\component\EcuM\Implementation\EcuM.c	  3420      EcuM_LastShutdownMode = localShutdownMode;
; ..\component\EcuM\Implementation\EcuM.c	  3421  
; ..\component\EcuM\Implementation\EcuM.c	  3422  #if(ECUM_ALARM_CLOCK_PRESENT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3423      /* #23 Set an internal variable to indicate after a restart that RAM content is still available. */
; ..\component\EcuM\Implementation\EcuM.c	  3424      EcuM_IntendedRestartID_One = (uint8) ECUM_MAGIC_ONE;
; ..\component\EcuM\Implementation\EcuM.c	  3425      EcuM_IntendedRestartID_Two = (uint8) ECUM_MAGIC_TWO;
; ..\component\EcuM\Implementation\EcuM.c	  3426  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3427  
; ..\component\EcuM\Implementation\EcuM.c	  3428      /* #30 Differ between shutdown targets. */
; ..\component\EcuM\Implementation\EcuM.c	  3429      switch (localShutdownTarget)
; ..\component\EcuM\Implementation\EcuM.c	  3430      {
; ..\component\EcuM\Implementation\EcuM.c	  3431        case ECUM_STATE_RESET:
; ..\component\EcuM\Implementation\EcuM.c	  3432          /* #31 Call EcuM_AL_Reset in case of shutdown Target ECUM_STATE_RESET. */
; ..\component\EcuM\Implementation\EcuM.c	  3433          EcuM_AL_Reset(localShutdownMode);
; ..\component\EcuM\Implementation\EcuM.c	  3434          break;
; ..\component\EcuM\Implementation\EcuM.c	  3435  
; ..\component\EcuM\Implementation\EcuM.c	  3436        case ECUM_STATE_OFF:
	mov	d15,#128
	movh.a	a15,#@his(EcuM_LastShutdownTarget)
.L624:
	ld.bu	d0,[a10]
.L625:
	st.b	[a15]@los(EcuM_LastShutdownTarget),d0
.L626:
	movh.a	a15,#@his(EcuM_LastShutdownMode)
.L627:
	ld.bu	d4,[a10]1
.L628:
	st.b	[a15]@los(EcuM_LastShutdownMode),d4
.L629:
	jeq	d15,d0,.L13
.L630:
	mov	d15,#144
	jne	d15,d0,.L15
.L631:
	call	EcuM_AL_Reset
.L632:
	j	.L16
.L13:

; ..\component\EcuM\Implementation\EcuM.c	  3437          /* #32 Call EcuM_AL_SwitchOff in case of shutdown Target ECUM_STATE_OFF. */
; ..\component\EcuM\Implementation\EcuM.c	  3438          EcuM_AL_SwitchOff();
	call	EcuM_AL_SwitchOff
.L633:

; ..\component\EcuM\Implementation\EcuM.c	  3439          break;
	j	.L17

; ..\component\EcuM\Implementation\EcuM.c	  3440  
; ..\component\EcuM\Implementation\EcuM.c	  3441        default: /* COV_ECUM_03 */
.L15:

; ..\component\EcuM\Implementation\EcuM.c	  3442          /* #33 Call the Det in the case of ECUM_STATE_SLEEP or any else wrong parameter. */
; ..\component\EcuM\Implementation\EcuM.c	  3443          errorId = ECUM_E_STATE_PAR_OUT_OF_RANGE;
	mov	d8,#22

; ..\component\EcuM\Implementation\EcuM.c	  3444          break;
; ..\component\EcuM\Implementation\EcuM.c	  3445      }
; ..\component\EcuM\Implementation\EcuM.c	  3446    }
.L17:
.L16:
.L12:

; ..\component\EcuM\Implementation\EcuM.c	  3447  
; ..\component\EcuM\Implementation\EcuM.c	  3448    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3449  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3450    if (errorId != ECUM_E_NO_ERROR)
	jeq	d8,#0,.L18
.L634:

; ..\component\EcuM\Implementation\EcuM.c	  3451    {
; ..\component\EcuM\Implementation\EcuM.c	  3452      EcuM_Det_ReportError(ECUM_SID_SHUTDOWN, errorId);
	fcall	.cocofun_1
.L504:
	mov	d6,#2
.L505:
	mov	d7,d8
.L506:
	j	Det_ReportError
.L18:

; ..\component\EcuM\Implementation\EcuM.c	  3453    }
; ..\component\EcuM\Implementation\EcuM.c	  3454  #else
; ..\component\EcuM\Implementation\EcuM.c	  3455    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3456  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3457  }
	ret
.L403:
	
__EcuM_Shutdown_function_end:
	.size	EcuM_Shutdown,__EcuM_Shutdown_function_end-EcuM_Shutdown
.L210:
	; End of function
	
	.sdecl	'.text.EcuM..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.EcuM..cocofun_6'
	.align	2
; Function .cocofun_6
.L136:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0
	mov	d8,#0
	movh.a	a15,#@his(EcuM_ModuleState)
.L502:
	lea	a15,[a15]@los(EcuM_ModuleState)
	ld.bu	d0,[a15]
.L881:
	fret
.L355:
	; End of function
	.sdecl	'.text.EcuM..cocofun_1',code,cluster('.cocofun_1')
	.sect	'.text.EcuM..cocofun_1'
	.align	2
; Function .cocofun_1
.L138:
.cocofun_1:	.type	func
; Function body .cocofun_1, coco_iter:0
	mov	d4,#10
.L520:
	mov	d5,#0
	fret
.L330:
	; End of function
	.sdecl	'.text.EcuM.EcuM_SelectShutdownTarget',code,cluster('EcuM_SelectShutdownTarget')
	.sect	'.text.EcuM.EcuM_SelectShutdownTarget'
	.align	2
	
	.global	EcuM_SelectShutdownTarget

; ..\component\EcuM\Implementation\EcuM.c	  3458  
; ..\component\EcuM\Implementation\EcuM.c	  3459  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  3460   *  EcuM_SelectShutdownTarget
; ..\component\EcuM\Implementation\EcuM.c	  3461   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  3462  /*!
; ..\component\EcuM\Implementation\EcuM.c	  3463   *
; ..\component\EcuM\Implementation\EcuM.c	  3464   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  3465   *
; ..\component\EcuM\Implementation\EcuM.c	  3466   *
; ..\component\EcuM\Implementation\EcuM.c	  3467   *
; ..\component\EcuM\Implementation\EcuM.c	  3468   *
; ..\component\EcuM\Implementation\EcuM.c	  3469   *
; ..\component\EcuM\Implementation\EcuM.c	  3470   *
; ..\component\EcuM\Implementation\EcuM.c	  3471   */
; ..\component\EcuM\Implementation\EcuM.c	  3472  FUNC(Std_ReturnType, ECUM_CODE) EcuM_SelectShutdownTarget(VAR(EcuM_StateType, AUTOMATIC) targetState,
; Function EcuM_SelectShutdownTarget
.L140:
EcuM_SelectShutdownTarget:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  3473  VAR(EcuM_ModeType, AUTOMATIC) resetSleepMode)
; ..\component\EcuM\Implementation\EcuM.c	  3474  {
; ..\component\EcuM\Implementation\EcuM.c	  3475    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3476    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  3477    Std_ReturnType retval;
; ..\component\EcuM\Implementation\EcuM.c	  3478  
; ..\component\EcuM\Implementation\EcuM.c	  3479    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3480    /* #21 Check the current state of the EcuM. */
; ..\component\EcuM\Implementation\EcuM.c	  3481  #if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3482    if ((EcuM_GetModuleState() < ECUM_STATE_STARTUP_TWO) || (EcuM_GetModuleState() > ECUM_STATE_APP_RUN))
	mov	d8,#0
	fcall	.cocofun_2
.L639:
	jlt.u	d0,d15,.L19
.L640:
	mov	d15,#50
.L641:
	jge.u	d15,d0,.L20
.L19:

; ..\component\EcuM\Implementation\EcuM.c	  3483    {
; ..\component\EcuM\Implementation\EcuM.c	  3484      errorId = ECUM_E_MODULE_NOT_IN_RUN_STATE;
	mov	d8,#34
	j	.L21
.L20:

; ..\component\EcuM\Implementation\EcuM.c	  3485      retval = E_NOT_OK;
; ..\component\EcuM\Implementation\EcuM.c	  3486    }
; ..\component\EcuM\Implementation\EcuM.c	  3487    else
; ..\component\EcuM\Implementation\EcuM.c	  3488    /* #22 Check if the parameters targetState and resetSleepMode are in a valid range.  */
; ..\component\EcuM\Implementation\EcuM.c	  3489    /* if (STATE == RESET AND ResetMode in Range) OR
; ..\component\EcuM\Implementation\EcuM.c	  3490     *     STATE == SLEEP AND SleepMode in Range) OR
; ..\component\EcuM\Implementation\EcuM.c	  3491     *     STATE == OFF)
; ..\component\EcuM\Implementation\EcuM.c	  3492     */
; ..\component\EcuM\Implementation\EcuM.c	  3493  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3494    if (
; ..\component\EcuM\Implementation\EcuM.c	  3495        /* Check for a valid state parameter */
; ..\component\EcuM\Implementation\EcuM.c	  3496        ((targetState != (EcuM_StateType) ECUM_STATE_OFF) && (targetState != (EcuM_StateType) ECUM_STATE_RESET)
	mov	d15,#128
.L642:
	jeq	d15,d4,.L22
.L643:
	mov	d15,#144
.L644:
	jeq	d15,d4,.L23
.L645:

; ..\component\EcuM\Implementation\EcuM.c	  3497            && (targetState != (EcuM_StateType) ECUM_STATE_SLEEP))
	mov	d15,#80
.L646:
	jne	d15,d4,.L24
.L23:
.L22:

; ..\component\EcuM\Implementation\EcuM.c	  3498  #if(ECUM_RESETMODECOUNT != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  3499        ||
; ..\component\EcuM\Implementation\EcuM.c	  3500        /* Check for a valid reset mode parameter */
; ..\component\EcuM\Implementation\EcuM.c	  3501        ((targetState == (EcuM_StateType) ECUM_STATE_RESET) && (resetSleepMode >= ECUM_RESETMODECOUNT))
	mov	d15,#144
.L647:
	jne	d15,d4,.L25
.L648:
	jlt.u	d5,#4,.L26
.L24:

; ..\component\EcuM\Implementation\EcuM.c	  3502  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3503  #if(ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3504        ||
; ..\component\EcuM\Implementation\EcuM.c	  3505        /* Check for a valid sleep mode parameter */
; ..\component\EcuM\Implementation\EcuM.c	  3506        ((targetState == (EcuM_StateType) ECUM_STATE_SLEEP) && (resetSleepMode >= EcuM_GetSizeOfSleepModeList()))
; ..\component\EcuM\Implementation\EcuM.c	  3507  # if(ECUM_VALIDOFSLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3508        ||
; ..\component\EcuM\Implementation\EcuM.c	  3509        /* Check if this sleep mode is active in this variant */
; ..\component\EcuM\Implementation\EcuM.c	  3510        (!EcuM_IsValidOfSleepModeList(resetSleepMode))
; ..\component\EcuM\Implementation\EcuM.c	  3511  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3512  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3513    )
; ..\component\EcuM\Implementation\EcuM.c	  3514    {
; ..\component\EcuM\Implementation\EcuM.c	  3515      errorId = ECUM_E_STATE_PAR_OUT_OF_RANGE;
	mov	d8,#22
.L21:

; ..\component\EcuM\Implementation\EcuM.c	  3516      retval = E_NOT_OK;
	mov	d15,#1
	j	.L27
.L26:
.L25:

; ..\component\EcuM\Implementation\EcuM.c	  3517    }
; ..\component\EcuM\Implementation\EcuM.c	  3518    else
; ..\component\EcuM\Implementation\EcuM.c	  3519    {
; ..\component\EcuM\Implementation\EcuM.c	  3520      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3521      if (targetState == ECUM_STATE_OFF)
	mov	d15,#128
.L649:
	jne	d15,d4,.L28
.L650:

; ..\component\EcuM\Implementation\EcuM.c	  3522      {
; ..\component\EcuM\Implementation\EcuM.c	  3523        /* #30 Set the state of the current shutdown target. */
; ..\component\EcuM\Implementation\EcuM.c	  3524        /* #31 In case of ECUM_STATE_OFF ignore the resetSleepMode parameter and set the current shutdown mode to 0. */
; ..\component\EcuM\Implementation\EcuM.c	  3525        EcuM_InternalSetShutdownTargetAndMode(targetState, 0u);
	mov	d4,d15
.L510:
	mov	d5,#0
.L28:

; ..\component\EcuM\Implementation\EcuM.c	  3526      }
; ..\component\EcuM\Implementation\EcuM.c	  3527      else
; ..\component\EcuM\Implementation\EcuM.c	  3528      {
; ..\component\EcuM\Implementation\EcuM.c	  3529        /* #30 Set the state of the current shutdown target. */
; ..\component\EcuM\Implementation\EcuM.c	  3530        /* #32 In case of ECUM_STATE_SLEEP / ECUM_STATE_RESET set the current shutdown mode to parameters value. */
; ..\component\EcuM\Implementation\EcuM.c	  3531        EcuM_InternalSetShutdownTargetAndMode(targetState, resetSleepMode);
	call	EcuM_InternalSetShutdownTargetAndMode
.L509:

; ..\component\EcuM\Implementation\EcuM.c	  3532      }
; ..\component\EcuM\Implementation\EcuM.c	  3533  
; ..\component\EcuM\Implementation\EcuM.c	  3534      retval = E_OK;
	mov	d15,#0
.L27:

; ..\component\EcuM\Implementation\EcuM.c	  3535    }
; ..\component\EcuM\Implementation\EcuM.c	  3536  
; ..\component\EcuM\Implementation\EcuM.c	  3537    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3538  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3539    if (errorId != ECUM_E_NO_ERROR)
	jeq	d8,#0,.L30
.L651:

; ..\component\EcuM\Implementation\EcuM.c	  3540    {
; ..\component\EcuM\Implementation\EcuM.c	  3541      EcuM_Det_ReportError(ECUM_SID_SELECT_SHUTDOWN_TARGET, errorId);
	fcall	.cocofun_1
	mov	d6,#6
	mov	d7,d8
	call	Det_ReportError
.L30:

; ..\component\EcuM\Implementation\EcuM.c	  3542    }
; ..\component\EcuM\Implementation\EcuM.c	  3543  #else
; ..\component\EcuM\Implementation\EcuM.c	  3544    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3545  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3546  
; ..\component\EcuM\Implementation\EcuM.c	  3547    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  3548  }
	mov	d2,d15
	ret
.L408:
	
__EcuM_SelectShutdownTarget_function_end:
	.size	EcuM_SelectShutdownTarget,__EcuM_SelectShutdownTarget_function_end-EcuM_SelectShutdownTarget
.L215:
	; End of function
	
	.sdecl	'.text.EcuM..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.EcuM..cocofun_2'
	.align	2
; Function .cocofun_2
.L142:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0
	fcall	.cocofun_9
.L508:
	mov	d15,#18
.L518:
	fret
.L335:
	; End of function
	.sdecl	'.text.EcuM..cocofun_9',code,cluster('.cocofun_9')
	.sect	'.text.EcuM..cocofun_9'
	.align	2
; Function .cocofun_9
.L144:
.cocofun_9:	.type	func
; Function body .cocofun_9, coco_iter:1
	movh.a	a15,#@his(EcuM_ModuleState)
.L507:
	ld.bu	d0,[a15]@los(EcuM_ModuleState)
.L895:
	fret
.L370:
	; End of function
	.sdecl	'.text.EcuM.EcuM_GetShutdownTarget',code,cluster('EcuM_GetShutdownTarget')
	.sect	'.text.EcuM.EcuM_GetShutdownTarget'
	.align	2
	
	.global	EcuM_GetShutdownTarget

; ..\component\EcuM\Implementation\EcuM.c	  3549  
; ..\component\EcuM\Implementation\EcuM.c	  3550  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  3551   *  EcuM_GetShutdownTarget
; ..\component\EcuM\Implementation\EcuM.c	  3552   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  3553  /*!
; ..\component\EcuM\Implementation\EcuM.c	  3554   *
; ..\component\EcuM\Implementation\EcuM.c	  3555   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  3556   *
; ..\component\EcuM\Implementation\EcuM.c	  3557   *
; ..\component\EcuM\Implementation\EcuM.c	  3558   *
; ..\component\EcuM\Implementation\EcuM.c	  3559   *
; ..\component\EcuM\Implementation\EcuM.c	  3560   */
; ..\component\EcuM\Implementation\EcuM.c	  3561  FUNC(Std_ReturnType, ECUM_CODE) EcuM_GetShutdownTarget(
; Function EcuM_GetShutdownTarget
.L146:
EcuM_GetShutdownTarget:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  3562  P2VAR(EcuM_StateType, AUTOMATIC, ECUM_APPL_DATA) target,
; ..\component\EcuM\Implementation\EcuM.c	  3563  P2VAR(EcuM_ModeType, AUTOMATIC, ECUM_APPL_DATA) resetSleepMode)
; ..\component\EcuM\Implementation\EcuM.c	  3564  {
; ..\component\EcuM\Implementation\EcuM.c	  3565    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3566    Std_ReturnType retval = E_NOT_OK;
	mov	d8,#1
.L511:

; ..\component\EcuM\Implementation\EcuM.c	  3567    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  3568  
; ..\component\EcuM\Implementation\EcuM.c	  3569    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3570    /* #21 Check the current state of the EcuM. */
; ..\component\EcuM\Implementation\EcuM.c	  3571  #if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3572    if(EcuM_GetModuleState() < ECUM_STATE_STARTUP_TWO)
	mov	d15,#0
	fcall	.cocofun_9
.L656:
	mov	d1,#18
.L512:
	jge.u	d0,d1,.L32
.L657:

; ..\component\EcuM\Implementation\EcuM.c	  3573    {
; ..\component\EcuM\Implementation\EcuM.c	  3574      errorId = ECUM_E_UNINIT;
	mov	d15,#16
	j	.L33
.L32:

; ..\component\EcuM\Implementation\EcuM.c	  3575    }
; ..\component\EcuM\Implementation\EcuM.c	  3576    else
; ..\component\EcuM\Implementation\EcuM.c	  3577  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3578    /* #22 Check that the passed parameters are not NULL_PTR. */
; ..\component\EcuM\Implementation\EcuM.c	  3579    if ((NULL_PTR == target) || (NULL_PTR == resetSleepMode))
	mov.a	a15,#0
.L658:
	jeq.a	a15,a4,.L34
.L659:
	jne.a	a15,a5,.L35
.L34:

; ..\component\EcuM\Implementation\EcuM.c	  3580    {
; ..\component\EcuM\Implementation\EcuM.c	  3581      errorId = ECUM_E_NULL_POINTER;
	mov	d15,d1
	j	.L36
.L35:

; ..\component\EcuM\Implementation\EcuM.c	  3582    }
; ..\component\EcuM\Implementation\EcuM.c	  3583    else
; ..\component\EcuM\Implementation\EcuM.c	  3584    {
; ..\component\EcuM\Implementation\EcuM.c	  3585      /* #30 Store the current shutdown target and current resetSleepMode in the passed parameters. */
; ..\component\EcuM\Implementation\EcuM.c	  3586      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3587      EcuM_InternalGetShutdownTargetAndMode(target, resetSleepMode); /* SBSW_ECUM_POINTER_TO_LOCAL_VARIABLES */
	call	EcuM_InternalGetShutdownTargetAndMode
.L513:

; ..\component\EcuM\Implementation\EcuM.c	  3588      retval = E_OK;
	mov	d8,#0
.L36:
.L33:

; ..\component\EcuM\Implementation\EcuM.c	  3589    }
; ..\component\EcuM\Implementation\EcuM.c	  3590  
; ..\component\EcuM\Implementation\EcuM.c	  3591    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3592  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3593    if(errorId != ECUM_E_NO_ERROR)
	jeq	d15,#0,.L37
.L660:

; ..\component\EcuM\Implementation\EcuM.c	  3594    {
; ..\component\EcuM\Implementation\EcuM.c	  3595      EcuM_Det_ReportError(ECUM_SID_GET_SHUTDOWN_TARGET, errorId);
	fcall	.cocofun_1
.L514:
	mov	d6,#9
.L515:
	mov	d7,d15
	call	Det_ReportError
.L37:

; ..\component\EcuM\Implementation\EcuM.c	  3596    }
; ..\component\EcuM\Implementation\EcuM.c	  3597  #else
; ..\component\EcuM\Implementation\EcuM.c	  3598    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3599  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3600  
; ..\component\EcuM\Implementation\EcuM.c	  3601    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  3602  }
	mov	d2,d8
	ret
.L414:
	
__EcuM_GetShutdownTarget_function_end:
	.size	EcuM_GetShutdownTarget,__EcuM_GetShutdownTarget_function_end-EcuM_GetShutdownTarget
.L220:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_GetLastShutdownTarget',code,cluster('EcuM_GetLastShutdownTarget')
	.sect	'.text.EcuM.EcuM_GetLastShutdownTarget'
	.align	2
	
	.global	EcuM_GetLastShutdownTarget

; ..\component\EcuM\Implementation\EcuM.c	  3603  
; ..\component\EcuM\Implementation\EcuM.c	  3604  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  3605   *  EcuM_GetLastShutdownTarget
; ..\component\EcuM\Implementation\EcuM.c	  3606   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  3607  /*!
; ..\component\EcuM\Implementation\EcuM.c	  3608   *
; ..\component\EcuM\Implementation\EcuM.c	  3609   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  3610   *
; ..\component\EcuM\Implementation\EcuM.c	  3611   *
; ..\component\EcuM\Implementation\EcuM.c	  3612   *
; ..\component\EcuM\Implementation\EcuM.c	  3613   *
; ..\component\EcuM\Implementation\EcuM.c	  3614   */
; ..\component\EcuM\Implementation\EcuM.c	  3615  FUNC(Std_ReturnType, ECUM_CODE) EcuM_GetLastShutdownTarget(P2VAR(EcuM_StateType, AUTOMATIC, ECUM_APPL_DATA) target,
; Function EcuM_GetLastShutdownTarget
.L148:
EcuM_GetLastShutdownTarget:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  3616  P2VAR(EcuM_ModeType, AUTOMATIC, ECUM_APPL_DATA) resetSleepMode)
; ..\component\EcuM\Implementation\EcuM.c	  3617  {
; ..\component\EcuM\Implementation\EcuM.c	  3618    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3619    Std_ReturnType retval = E_NOT_OK;
	mov	d8,#1
.L516:

; ..\component\EcuM\Implementation\EcuM.c	  3620    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  3621  
; ..\component\EcuM\Implementation\EcuM.c	  3622    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3623    /* #21 Check the current state of the EcuM. */
; ..\component\EcuM\Implementation\EcuM.c	  3624  #if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3625    if(EcuM_GetModuleState() < ECUM_STATE_STARTUP_TWO)
	mov	d7,#0
	fcall	.cocofun_2
.L517:
	jge.u	d0,d15,.L39
.L665:

; ..\component\EcuM\Implementation\EcuM.c	  3626    {
; ..\component\EcuM\Implementation\EcuM.c	  3627      errorId = ECUM_E_UNINIT;
	mov	d7,#16
	j	.L40
.L39:

; ..\component\EcuM\Implementation\EcuM.c	  3628    }
; ..\component\EcuM\Implementation\EcuM.c	  3629    else
; ..\component\EcuM\Implementation\EcuM.c	  3630  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3631    /* #22 Check that the passed parameters is not a NULL_PTR. */
; ..\component\EcuM\Implementation\EcuM.c	  3632    if ((NULL_PTR == target) || (NULL_PTR == resetSleepMode))
	mov.a	a15,#0
.L666:
	jeq.a	a15,a4,.L41
.L667:
	jne.a	a15,a5,.L42
.L41:

; ..\component\EcuM\Implementation\EcuM.c	  3633    {
; ..\component\EcuM\Implementation\EcuM.c	  3634      errorId = ECUM_E_NULL_POINTER;
	mov	d7,d15
	j	.L43
.L42:

; ..\component\EcuM\Implementation\EcuM.c	  3635    }
; ..\component\EcuM\Implementation\EcuM.c	  3636    else
; ..\component\EcuM\Implementation\EcuM.c	  3637    {
; ..\component\EcuM\Implementation\EcuM.c	  3638      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3639      /* #30 Return the values of last shutdown target and mode. */
; ..\component\EcuM\Implementation\EcuM.c	  3640      /* Set the target parameter to the value of the current ShutdownTarget */
; ..\component\EcuM\Implementation\EcuM.c	  3641      *target = EcuM_LastShutdownTarget;  /* SBSW_ECUM_POINTERACCESS_SHUTDOWNTARGET */
	movh.a	a15,#@his(EcuM_LastShutdownTarget)
	ld.bu	d15,[a15]@los(EcuM_LastShutdownTarget)
.L519:
	st.b	[a4],d15
.L668:

; ..\component\EcuM\Implementation\EcuM.c	  3642      /* Reset and Sleep share the same variable for the selected mode. In case of ECUM_STATE_OFF the variable was set to 0 */
; ..\component\EcuM\Implementation\EcuM.c	  3643      *resetSleepMode = EcuM_LastShutdownMode;  /* SBSW_ECUM_POINTERACCESS_SHUTDOWNTARGET */
	movh.a	a15,#@his(EcuM_LastShutdownMode)
.L669:

; ..\component\EcuM\Implementation\EcuM.c	  3644  
; ..\component\EcuM\Implementation\EcuM.c	  3645      retval = E_OK;
	mov	d8,#0
	ld.bu	d15,[a15]@los(EcuM_LastShutdownMode)
.L670:
	st.b	[a5],d15
.L43:
.L40:

; ..\component\EcuM\Implementation\EcuM.c	  3646    }
; ..\component\EcuM\Implementation\EcuM.c	  3647  
; ..\component\EcuM\Implementation\EcuM.c	  3648    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3649  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3650    if(errorId != ECUM_E_NO_ERROR)
	jeq	d7,#0,.L44
.L671:

; ..\component\EcuM\Implementation\EcuM.c	  3651    {
; ..\component\EcuM\Implementation\EcuM.c	  3652      EcuM_Det_ReportError(ECUM_SID_GET_LAST_SHUTDOWN_TARGET, errorId);
	fcall	.cocofun_1
	mov	d6,#8
	call	Det_ReportError
.L44:

; ..\component\EcuM\Implementation\EcuM.c	  3653    }
; ..\component\EcuM\Implementation\EcuM.c	  3654  #else
; ..\component\EcuM\Implementation\EcuM.c	  3655    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3656  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3657  
; ..\component\EcuM\Implementation\EcuM.c	  3658    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  3659  }
	mov	d2,d8
	ret
.L421:
	
__EcuM_GetLastShutdownTarget_function_end:
	.size	EcuM_GetLastShutdownTarget,__EcuM_GetLastShutdownTarget_function_end-EcuM_GetLastShutdownTarget
.L225:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_SelectShutdownCause',code,cluster('EcuM_SelectShutdownCause')
	.sect	'.text.EcuM.EcuM_SelectShutdownCause'
	.align	2
	
	.global	EcuM_SelectShutdownCause

; ..\component\EcuM\Implementation\EcuM.c	  3660  
; ..\component\EcuM\Implementation\EcuM.c	  3661  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  3662   *  EcuM_SelectShutdownCause
; ..\component\EcuM\Implementation\EcuM.c	  3663   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  3664  /*!
; ..\component\EcuM\Implementation\EcuM.c	  3665   *
; ..\component\EcuM\Implementation\EcuM.c	  3666   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  3667   *
; ..\component\EcuM\Implementation\EcuM.c	  3668   *
; ..\component\EcuM\Implementation\EcuM.c	  3669   *
; ..\component\EcuM\Implementation\EcuM.c	  3670   *
; ..\component\EcuM\Implementation\EcuM.c	  3671   */
; ..\component\EcuM\Implementation\EcuM.c	  3672  FUNC(Std_ReturnType, ECUM_CODE) EcuM_SelectShutdownCause(VAR(EcuM_ShutdownCauseType, AUTOMATIC) shutdownCause)
; Function EcuM_SelectShutdownCause
.L150:
EcuM_SelectShutdownCause:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  3673  {
; ..\component\EcuM\Implementation\EcuM.c	  3674    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3675    Std_ReturnType retval = E_NOT_OK;
	mov	d8,#1
.L522:

; ..\component\EcuM\Implementation\EcuM.c	  3676    uint8 errorId = ECUM_E_INVALID_PAR; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  3677  
; ..\component\EcuM\Implementation\EcuM.c	  3678    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3679    /* #20 Check if the module is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  3680  #if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3681    if ( EcuM_GetModuleState() < ECUM_STATE_STARTUP_TWO)
	mov	d7,#19
	fcall	.cocofun_2
.L676:
	jge.u	d0,d15,.L46
.L677:

; ..\component\EcuM\Implementation\EcuM.c	  3682    {
; ..\component\EcuM\Implementation\EcuM.c	  3683      errorId = ECUM_E_UNINIT;
	mov	d7,#16
	j	.L47
.L46:

; ..\component\EcuM\Implementation\EcuM.c	  3684    }
; ..\component\EcuM\Implementation\EcuM.c	  3685    else
; ..\component\EcuM\Implementation\EcuM.c	  3686  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3687    {
; ..\component\EcuM\Implementation\EcuM.c	  3688  #if (ECUM_SHUTDOWNCAUSECOUNT != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  3689    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3690    /* #21 Check if the given cause parameter is in the range of configured shutdown causes. */
; ..\component\EcuM\Implementation\EcuM.c	  3691    if (shutdownCause < ECUM_SHUTDOWNCAUSECOUNT)
	jge.u	d4,#4,.L48
.L678:

; ..\component\EcuM\Implementation\EcuM.c	  3692    {
; ..\component\EcuM\Implementation\EcuM.c	  3693  
; ..\component\EcuM\Implementation\EcuM.c	  3694      /* #30 Set the EcuM_ShutdownCause variable to the value of the parameter cause. */
; ..\component\EcuM\Implementation\EcuM.c	  3695      EcuM_ShutdownCause = shutdownCause;
; ..\component\EcuM\Implementation\EcuM.c	  3696      retval = E_OK;
	mov	d8,#0
	movh.a	a15,#@his(EcuM_ShutdownCause)
.L679:

; ..\component\EcuM\Implementation\EcuM.c	  3697      errorId = ECUM_E_NO_ERROR;
	mov	d7,d8
	st.b	[a15]@los(EcuM_ShutdownCause),d4
.L48:
.L47:

; ..\component\EcuM\Implementation\EcuM.c	  3698    }
; ..\component\EcuM\Implementation\EcuM.c	  3699  #else
; ..\component\EcuM\Implementation\EcuM.c	  3700    ECUM_DUMMY_STATEMENT(shutdownCause); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3701  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3702    }
; ..\component\EcuM\Implementation\EcuM.c	  3703  
; ..\component\EcuM\Implementation\EcuM.c	  3704    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3705  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3706  # if (ECUM_SHUTDOWNCAUSECOUNT != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  3707    if (errorId != ECUM_E_NO_ERROR)
	jeq	d7,#0,.L49
.L680:

; ..\component\EcuM\Implementation\EcuM.c	  3708  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3709    {
; ..\component\EcuM\Implementation\EcuM.c	  3710      EcuM_Det_ReportError(ECUM_SID_SELECT_SHUTDOWN_CAUSE, errorId);
	fcall	.cocofun_1
.L521:
	mov	d6,#27
	call	Det_ReportError
.L49:

; ..\component\EcuM\Implementation\EcuM.c	  3711    }
; ..\component\EcuM\Implementation\EcuM.c	  3712  #else
; ..\component\EcuM\Implementation\EcuM.c	  3713    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3714  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3715  
; ..\component\EcuM\Implementation\EcuM.c	  3716    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  3717  }
	mov	d2,d8
	ret
.L426:
	
__EcuM_SelectShutdownCause_function_end:
	.size	EcuM_SelectShutdownCause,__EcuM_SelectShutdownCause_function_end-EcuM_SelectShutdownCause
.L230:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_GetShutdownCause',code,cluster('EcuM_GetShutdownCause')
	.sect	'.text.EcuM.EcuM_GetShutdownCause'
	.align	2
	
	.global	EcuM_GetShutdownCause

; ..\component\EcuM\Implementation\EcuM.c	  3718  
; ..\component\EcuM\Implementation\EcuM.c	  3719  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  3720   *  EcuM_GetShutdownCause
; ..\component\EcuM\Implementation\EcuM.c	  3721   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  3722  /*!
; ..\component\EcuM\Implementation\EcuM.c	  3723   *
; ..\component\EcuM\Implementation\EcuM.c	  3724   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  3725   *
; ..\component\EcuM\Implementation\EcuM.c	  3726   *
; ..\component\EcuM\Implementation\EcuM.c	  3727   *
; ..\component\EcuM\Implementation\EcuM.c	  3728   *
; ..\component\EcuM\Implementation\EcuM.c	  3729   *
; ..\component\EcuM\Implementation\EcuM.c	  3730   */
; ..\component\EcuM\Implementation\EcuM.c	  3731  FUNC(Std_ReturnType, ECUM_CODE) EcuM_GetShutdownCause(P2VAR(EcuM_ShutdownCauseType, AUTOMATIC, ECUM_APPL_DATA) shutdownCause) /* PRQA S 3673 */ /* MD_EcuM_3673 */
; Function EcuM_GetShutdownCause
.L152:
EcuM_GetShutdownCause:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  3732  {
; ..\component\EcuM\Implementation\EcuM.c	  3733    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3734    Std_ReturnType retval = E_NOT_OK;
; ..\component\EcuM\Implementation\EcuM.c	  3735    uint8 errorId = ECUM_E_INVALID_PAR; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  3736  
; ..\component\EcuM\Implementation\EcuM.c	  3737    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3738    /* #20 Check if the module is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  3739  #if (ECUM_SHUTDOWNCAUSECOUNT != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  3740  # if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3741    if(EcuM_GetModuleState() < ECUM_STATE_STARTUP_TWO)
	mov	d8,#1
	fcall	.cocofun_2
.L523:
	jge.u	d0,d15,.L51
.L685:

; ..\component\EcuM\Implementation\EcuM.c	  3742    {
; ..\component\EcuM\Implementation\EcuM.c	  3743      errorId = ECUM_E_UNINIT;
	mov	d7,#16
	j	.L52
.L51:

; ..\component\EcuM\Implementation\EcuM.c	  3744    }
; ..\component\EcuM\Implementation\EcuM.c	  3745    else
; ..\component\EcuM\Implementation\EcuM.c	  3746  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3747    /* #21 Check that the passed parameter is not a NULL_PTR. */
; ..\component\EcuM\Implementation\EcuM.c	  3748    if(NULL_PTR == shutdownCause)
	mov.a	a15,#0
.L686:
	jne.a	a15,a4,.L53
.L687:

; ..\component\EcuM\Implementation\EcuM.c	  3749    {
; ..\component\EcuM\Implementation\EcuM.c	  3750      errorId = ECUM_E_NULL_POINTER;
	mov	d7,d15
	j	.L54
.L53:

; ..\component\EcuM\Implementation\EcuM.c	  3751    }
; ..\component\EcuM\Implementation\EcuM.c	  3752    else
; ..\component\EcuM\Implementation\EcuM.c	  3753    {
; ..\component\EcuM\Implementation\EcuM.c	  3754      /* #30 Set the pointer to EcuM_ShutdownCause and set the return value E_OK. */
; ..\component\EcuM\Implementation\EcuM.c	  3755      *shutdownCause = EcuM_ShutdownCause; /* SBSW_ECUM_POINTERACCESS_SHUTDOWNCAUSE */
; ..\component\EcuM\Implementation\EcuM.c	  3756      retval = E_OK;
	mov	d8,#0
	movh.a	a15,#@his(EcuM_ShutdownCause)
.L688:

; ..\component\EcuM\Implementation\EcuM.c	  3757      errorId = ECUM_E_NO_ERROR;
	mov	d7,d8
	ld.bu	d15,[a15]@los(EcuM_ShutdownCause)
.L524:
	st.b	[a4],d15
.L54:
.L52:

; ..\component\EcuM\Implementation\EcuM.c	  3758    }
; ..\component\EcuM\Implementation\EcuM.c	  3759  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3760    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3761  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3762  # if (ECUM_SHUTDOWNCAUSECOUNT != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  3763    if (errorId != ECUM_E_NO_ERROR)
	jeq	d7,#0,.L55
.L689:

; ..\component\EcuM\Implementation\EcuM.c	  3764  # endif
; ..\component\EcuM\Implementation\EcuM.c	  3765    {
; ..\component\EcuM\Implementation\EcuM.c	  3766      /* #40 If an error has occurred, call the Det with the corresponding errorId. */
; ..\component\EcuM\Implementation\EcuM.c	  3767      EcuM_Det_ReportError(ECUM_SID_GET_SHUTDOWN_CAUSE, errorId);
	fcall	.cocofun_1
	mov	d6,#28
	call	Det_ReportError
.L55:

; ..\component\EcuM\Implementation\EcuM.c	  3768    }
; ..\component\EcuM\Implementation\EcuM.c	  3769  #else
; ..\component\EcuM\Implementation\EcuM.c	  3770    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3771  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3772  
; ..\component\EcuM\Implementation\EcuM.c	  3773  #if (ECUM_SHUTDOWNCAUSECOUNT == 0u)
; ..\component\EcuM\Implementation\EcuM.c	  3774    ECUM_DUMMY_STATEMENT(shutdownCause); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3775  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3776  
; ..\component\EcuM\Implementation\EcuM.c	  3777    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  3778  }
	mov	d2,d8
	ret
.L430:
	
__EcuM_GetShutdownCause_function_end:
	.size	EcuM_GetShutdownCause,__EcuM_GetShutdownCause_function_end-EcuM_GetShutdownCause
.L235:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_GetPendingWakeupEvents',code,cluster('EcuM_GetPendingWakeupEvents')
	.sect	'.text.EcuM.EcuM_GetPendingWakeupEvents'
	.align	2
	
	.global	EcuM_GetPendingWakeupEvents

; ..\component\EcuM\Implementation\EcuM.c	  3779  
; ..\component\EcuM\Implementation\EcuM.c	  3780  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  3781   *  EcuM_GetPendingWakeupEvents
; ..\component\EcuM\Implementation\EcuM.c	  3782   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  3783  /*!
; ..\component\EcuM\Implementation\EcuM.c	  3784   *
; ..\component\EcuM\Implementation\EcuM.c	  3785   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  3786   *
; ..\component\EcuM\Implementation\EcuM.c	  3787   *
; ..\component\EcuM\Implementation\EcuM.c	  3788   *
; ..\component\EcuM\Implementation\EcuM.c	  3789   *
; ..\component\EcuM\Implementation\EcuM.c	  3790   */
; ..\component\EcuM\Implementation\EcuM.c	  3791  FUNC(EcuM_WakeupSourceType, ECUM_CODE) EcuM_GetPendingWakeupEvents(void)
; Function EcuM_GetPendingWakeupEvents
.L154:
EcuM_GetPendingWakeupEvents:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  3792  {
; ..\component\EcuM\Implementation\EcuM.c	  3793    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3794    uint8 errorId = ECUM_E_NO_ERROR;
	fcall	.cocofun_3
.L716:

; ..\component\EcuM\Implementation\EcuM.c	  3795    EcuM_WakeupSourceType retval = ECUM_WKSOURCE_NONE; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  3796  
; ..\component\EcuM\Implementation\EcuM.c	  3797    /* #20 Check if the module is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  3798  #if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3799    if ( EcuM_GetModuleState() < ECUM_STATE_STARTUP_ONE)
; ..\component\EcuM\Implementation\EcuM.c	  3800    {
; ..\component\EcuM\Implementation\EcuM.c	  3801      errorId = ECUM_E_UNINIT;
; ..\component\EcuM\Implementation\EcuM.c	  3802    }
; ..\component\EcuM\Implementation\EcuM.c	  3803    else
; ..\component\EcuM\Implementation\EcuM.c	  3804  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3805    {
; ..\component\EcuM\Implementation\EcuM.c	  3806      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3807  #if (ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3808      /* Access must be done in a critical area because the Validated Wakeups can change while the possible non-atomic
; ..\component\EcuM\Implementation\EcuM.c	  3809       access on the EcuM_PendingWakeups */
; ..\component\EcuM\Implementation\EcuM.c	  3810      EcuM_EnterAtomicAccess_0();
; ..\component\EcuM\Implementation\EcuM.c	  3811  
; ..\component\EcuM\Implementation\EcuM.c	  3812      /* #31 Set the pending wakeups as return value. */
; ..\component\EcuM\Implementation\EcuM.c	  3813      retval = EcuM_PendingWakeups;
; ..\component\EcuM\Implementation\EcuM.c	  3814  
; ..\component\EcuM\Implementation\EcuM.c	  3815      EcuM_LeaveAtomicAccess_0();
; ..\component\EcuM\Implementation\EcuM.c	  3816  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3817    }
; ..\component\EcuM\Implementation\EcuM.c	  3818    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3819  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3820    if (errorId != ECUM_E_NO_ERROR)
	jeq	d7,#0,.L58
.L717:

; ..\component\EcuM\Implementation\EcuM.c	  3821    {
; ..\component\EcuM\Implementation\EcuM.c	  3822      /* If an error has occurred, call the Det with the corresponding errorId. */
; ..\component\EcuM\Implementation\EcuM.c	  3823      EcuM_Det_ReportError(ECUM_SID_GET_PENDING_WAKEUP_EVENTS, errorId);
	fcall	.cocofun_1
.L526:
	mov	d6,#13
	call	Det_ReportError
.L58:

; ..\component\EcuM\Implementation\EcuM.c	  3824    }
; ..\component\EcuM\Implementation\EcuM.c	  3825  #else
; ..\component\EcuM\Implementation\EcuM.c	  3826    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3827  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3828  
; ..\component\EcuM\Implementation\EcuM.c	  3829    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  3830  }
	mov	d2,#0
	ret
.L442:
	
__EcuM_GetPendingWakeupEvents_function_end:
	.size	EcuM_GetPendingWakeupEvents,__EcuM_GetPendingWakeupEvents_function_end-EcuM_GetPendingWakeupEvents
.L250:
	; End of function
	
	.sdecl	'.text.EcuM..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.EcuM..cocofun_3'
	.align	2
; Function .cocofun_3
.L156:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	mov	d7,#0
	movh.a	a15,#@his(EcuM_ModuleState)
.L525:
	ld.bu	d15,[a15]@los(EcuM_ModuleState)
.L864:
	ge.u	d15,d15,#17
.L865:
	sel	d7,d15,d7,#16
	fret
.L340:
	; End of function
	.sdecl	'.text.EcuM.EcuM_ClearWakeupEvent',code,cluster('EcuM_ClearWakeupEvent')
	.sect	'.text.EcuM.EcuM_ClearWakeupEvent'
	.align	2
	
	.global	EcuM_ClearWakeupEvent

; ..\component\EcuM\Implementation\EcuM.c	  3831  
; ..\component\EcuM\Implementation\EcuM.c	  3832  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  3833   *  EcuM_ClearWakeupEvent
; ..\component\EcuM\Implementation\EcuM.c	  3834   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  3835  /*!
; ..\component\EcuM\Implementation\EcuM.c	  3836   *
; ..\component\EcuM\Implementation\EcuM.c	  3837   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  3838   *
; ..\component\EcuM\Implementation\EcuM.c	  3839   *
; ..\component\EcuM\Implementation\EcuM.c	  3840   *
; ..\component\EcuM\Implementation\EcuM.c	  3841   *
; ..\component\EcuM\Implementation\EcuM.c	  3842   *
; ..\component\EcuM\Implementation\EcuM.c	  3843   */
; ..\component\EcuM\Implementation\EcuM.c	  3844  FUNC(void, ECUM_CODE) EcuM_ClearWakeupEvent(VAR(EcuM_WakeupSourceType, AUTOMATIC) WakeupSource)
; Function EcuM_ClearWakeupEvent
.L158:
EcuM_ClearWakeupEvent:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  3845  {
; ..\component\EcuM\Implementation\EcuM.c	  3846    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3847    uint8 errorId = ECUM_E_NO_ERROR;
	mov	d8,d4
	fcall	.cocofun_7
.L694:

; ..\component\EcuM\Implementation\EcuM.c	  3848  
; ..\component\EcuM\Implementation\EcuM.c	  3849    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3850    /* #20 Check if the module is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  3851  #if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3852    if ( EcuM_GetModuleState() < ECUM_STATE_STARTUP_ONE)
	mov	d15,#17
.L695:
	jge.u	d0,d15,.L60
.L696:

; ..\component\EcuM\Implementation\EcuM.c	  3853    {
; ..\component\EcuM\Implementation\EcuM.c	  3854      errorId = ECUM_E_UNINIT;
	mov	d9,#16
	j	.L61
.L60:

; ..\component\EcuM\Implementation\EcuM.c	  3855    }
; ..\component\EcuM\Implementation\EcuM.c	  3856    else
; ..\component\EcuM\Implementation\EcuM.c	  3857  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3858    {
; ..\component\EcuM\Implementation\EcuM.c	  3859      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3860      /* #30 Disable all Interrupts while this operation to avoid access on this variables, access could be non-atomic. */
; ..\component\EcuM\Implementation\EcuM.c	  3861      EcuM_EnterCriticalArea_0();
	call	SuspendAllInterrupts
.L528:

; ..\component\EcuM\Implementation\EcuM.c	  3862  
; ..\component\EcuM\Implementation\EcuM.c	  3863  #if (ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3864      EcuM_ClearedPendingWakeups |= (EcuM_PendingWakeups & WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  3865  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3866  
; ..\component\EcuM\Implementation\EcuM.c	  3867      EcuM_InternalClearWakeupEvent(WakeupSource);
	mov	d4,d8
	call	EcuM_InternalClearWakeupEvent
.L697:

; ..\component\EcuM\Implementation\EcuM.c	  3868  
; ..\component\EcuM\Implementation\EcuM.c	  3869      if ( EcuM_GetModuleState() > ECUM_STATE_STARTUP_ONE)
	ld.bu	d0,[a15]
.L698:
	jge.u	d15,d0,.L62
.L699:

; ..\component\EcuM\Implementation\EcuM.c	  3870      {
; ..\component\EcuM\Implementation\EcuM.c	  3871        BswM_EcuM_CurrentWakeup(WakeupSource, ECUM_WKSTATUS_NONE);
	mov	d5,#0
	mov	d4,d8
	call	BswM_EcuM_CurrentWakeup
.L62:

; ..\component\EcuM\Implementation\EcuM.c	  3872      }
; ..\component\EcuM\Implementation\EcuM.c	  3873  
; ..\component\EcuM\Implementation\EcuM.c	  3874      /* Restore all Interrupts */
; ..\component\EcuM\Implementation\EcuM.c	  3875      EcuM_LeaveCriticalArea_0();
	call	ResumeAllInterrupts
.L61:

; ..\component\EcuM\Implementation\EcuM.c	  3876    }
; ..\component\EcuM\Implementation\EcuM.c	  3877  
; ..\component\EcuM\Implementation\EcuM.c	  3878    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3879  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3880    if (errorId != ECUM_E_NO_ERROR)
	jeq	d9,#0,.L63
.L700:

; ..\component\EcuM\Implementation\EcuM.c	  3881    {
; ..\component\EcuM\Implementation\EcuM.c	  3882      EcuM_Det_ReportError(ECUM_SID_CLEAR_WAKEUP_EVENT, errorId);
	fcall	.cocofun_1
	mov	d6,#22
	mov	d7,d9
.L529:
	j	Det_ReportError
.L63:

; ..\component\EcuM\Implementation\EcuM.c	  3883    }
; ..\component\EcuM\Implementation\EcuM.c	  3884  #else
; ..\component\EcuM\Implementation\EcuM.c	  3885    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3886  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3887  }
	ret
.L435:
	
__EcuM_ClearWakeupEvent_function_end:
	.size	EcuM_ClearWakeupEvent,__EcuM_ClearWakeupEvent_function_end-EcuM_ClearWakeupEvent
.L240:
	; End of function
	
	.sdecl	'.text.EcuM..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.EcuM..cocofun_7'
	.align	2
; Function .cocofun_7
.L160:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	mov	d9,#0
	movh.a	a15,#@his(EcuM_ModuleState)
.L527:
	lea	a15,[a15]@los(EcuM_ModuleState)
	ld.bu	d0,[a15]
.L886:
	fret
.L360:
	; End of function
	.sdecl	'.text.EcuM.EcuM_ClearValidatedWakeupEvent',code,cluster('EcuM_ClearValidatedWakeupEvent')
	.sect	'.text.EcuM.EcuM_ClearValidatedWakeupEvent'
	.align	2
	
	.global	EcuM_ClearValidatedWakeupEvent

; ..\component\EcuM\Implementation\EcuM.c	  3888  
; ..\component\EcuM\Implementation\EcuM.c	  3889  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  3890   *  EcuM_ClearValidatedWakeupEvent
; ..\component\EcuM\Implementation\EcuM.c	  3891   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  3892  /*!
; ..\component\EcuM\Implementation\EcuM.c	  3893   *
; ..\component\EcuM\Implementation\EcuM.c	  3894   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  3895   *
; ..\component\EcuM\Implementation\EcuM.c	  3896   *
; ..\component\EcuM\Implementation\EcuM.c	  3897   *
; ..\component\EcuM\Implementation\EcuM.c	  3898   *
; ..\component\EcuM\Implementation\EcuM.c	  3899   *
; ..\component\EcuM\Implementation\EcuM.c	  3900   */
; ..\component\EcuM\Implementation\EcuM.c	  3901  FUNC(void, ECUM_CODE) EcuM_ClearValidatedWakeupEvent(VAR(EcuM_WakeupSourceType, AUTOMATIC) WakeupSource)
; Function EcuM_ClearValidatedWakeupEvent
.L162:
EcuM_ClearValidatedWakeupEvent:	.type	func
	mov	d8,d4
.L533:

; ..\component\EcuM\Implementation\EcuM.c	  3902  {
; ..\component\EcuM\Implementation\EcuM.c	  3903    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3904    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  3905  
; ..\component\EcuM\Implementation\EcuM.c	  3906    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3907    /* #20 Check if the module is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  3908  #if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3909    if ( EcuM_GetModuleState() < ECUM_STATE_STARTUP_ONE)
	mov	d15,#0
	fcall	.cocofun_9
.L705:
	mov	d1,#17
.L706:
	jge.u	d0,d1,.L64
.L707:

; ..\component\EcuM\Implementation\EcuM.c	  3910    {
; ..\component\EcuM\Implementation\EcuM.c	  3911      errorId = ECUM_E_UNINIT;
	mov	d15,#16
	j	.L65
.L64:

; ..\component\EcuM\Implementation\EcuM.c	  3912    }
; ..\component\EcuM\Implementation\EcuM.c	  3913    else
; ..\component\EcuM\Implementation\EcuM.c	  3914  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3915    {
; ..\component\EcuM\Implementation\EcuM.c	  3916      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3917      /* #30 Disable all Interrupts while accessing EcuM_ValidatedWakeups, access could be non-atomic. */
; ..\component\EcuM\Implementation\EcuM.c	  3918      EcuM_EnterCriticalArea_0();
	call	SuspendAllInterrupts
.L530:

; ..\component\EcuM\Implementation\EcuM.c	  3919  
; ..\component\EcuM\Implementation\EcuM.c	  3920      EcuM_ValidatedWakeups &= (EcuM_WakeupSourceType) (~WakeupSource);
	mov	d1,#-1
	movh.a	a15,#@his(EcuM_ValidatedWakeups)
.L708:
	xor	d1,d8
	ld.w	d0,[a15]@los(EcuM_ValidatedWakeups)
.L709:

; ..\component\EcuM\Implementation\EcuM.c	  3921  
; ..\component\EcuM\Implementation\EcuM.c	  3922      /* #31 Clear all passed validated wakeup events and notify them to the BswM, Interrupts has to be still disabled to
; ..\component\EcuM\Implementation\EcuM.c	  3923       *     avoid inconsistencies. */
; ..\component\EcuM\Implementation\EcuM.c	  3924  #if (ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3925      BswM_EcuM_CurrentWakeup((WakeupSource & (~EcuM_PendingWakeups)), ECUM_WKSTATUS_NONE);
; ..\component\EcuM\Implementation\EcuM.c	  3926  #else
; ..\component\EcuM\Implementation\EcuM.c	  3927      BswM_EcuM_CurrentWakeup((WakeupSource), ECUM_WKSTATUS_NONE);
	mov	d4,d8
.L531:
	and	d0,d1
	st.w	[a15]@los(EcuM_ValidatedWakeups),d0
.L710:
	mov	d5,#0
	call	BswM_EcuM_CurrentWakeup
.L532:

; ..\component\EcuM\Implementation\EcuM.c	  3928  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3929  
; ..\component\EcuM\Implementation\EcuM.c	  3930      /* Restore all Interrupts */
; ..\component\EcuM\Implementation\EcuM.c	  3931      EcuM_LeaveCriticalArea_0();
	call	ResumeAllInterrupts
.L65:

; ..\component\EcuM\Implementation\EcuM.c	  3932    }
; ..\component\EcuM\Implementation\EcuM.c	  3933  
; ..\component\EcuM\Implementation\EcuM.c	  3934    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3935  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3936    if (errorId != ECUM_E_NO_ERROR)
	jeq	d15,#0,.L66
.L711:

; ..\component\EcuM\Implementation\EcuM.c	  3937    {
; ..\component\EcuM\Implementation\EcuM.c	  3938      EcuM_Det_ReportError(ECUM_SID_CLEAR_VALIDATED_WAKEUP_EVENT, errorId);
	fcall	.cocofun_1
	mov	d6,#48
	mov	d7,d15
.L534:
	j	Det_ReportError
.L66:

; ..\component\EcuM\Implementation\EcuM.c	  3939    }
; ..\component\EcuM\Implementation\EcuM.c	  3940  #else
; ..\component\EcuM\Implementation\EcuM.c	  3941    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3942  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3943  }
	ret
.L439:
	
__EcuM_ClearValidatedWakeupEvent_function_end:
	.size	EcuM_ClearValidatedWakeupEvent,__EcuM_ClearValidatedWakeupEvent_function_end-EcuM_ClearValidatedWakeupEvent
.L245:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_GetValidatedWakeupEvents',code,cluster('EcuM_GetValidatedWakeupEvents')
	.sect	'.text.EcuM.EcuM_GetValidatedWakeupEvents'
	.align	2
	
	.global	EcuM_GetValidatedWakeupEvents

; ..\component\EcuM\Implementation\EcuM.c	  3944  
; ..\component\EcuM\Implementation\EcuM.c	  3945  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  3946   *  EcuM_GetValidatedWakeupEvents
; ..\component\EcuM\Implementation\EcuM.c	  3947   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  3948  /*!
; ..\component\EcuM\Implementation\EcuM.c	  3949   *
; ..\component\EcuM\Implementation\EcuM.c	  3950   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  3951   *
; ..\component\EcuM\Implementation\EcuM.c	  3952   *
; ..\component\EcuM\Implementation\EcuM.c	  3953   *
; ..\component\EcuM\Implementation\EcuM.c	  3954   *
; ..\component\EcuM\Implementation\EcuM.c	  3955   */
; ..\component\EcuM\Implementation\EcuM.c	  3956  FUNC(EcuM_WakeupSourceType, ECUM_CODE) EcuM_GetValidatedWakeupEvents(void)
; Function EcuM_GetValidatedWakeupEvents
.L164:
EcuM_GetValidatedWakeupEvents:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  3957  {
; ..\component\EcuM\Implementation\EcuM.c	  3958    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3959    uint8 errorId = ECUM_E_NO_ERROR;
	mov	d7,#0
.L535:

; ..\component\EcuM\Implementation\EcuM.c	  3960    EcuM_WakeupSourceType retval = ECUM_WKSOURCE_NONE; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  3961  
; ..\component\EcuM\Implementation\EcuM.c	  3962    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3963    /* #20 Check if the module is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  3964    /* If this routine is called and the module is not initialized, return ECUM_WKSOURCE_NONE */
; ..\component\EcuM\Implementation\EcuM.c	  3965  #if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3966    if ( EcuM_GetModuleState() < ECUM_STATE_STARTUP_ONE)
	mov	d8,d7
	fcall	.cocofun_9
.L722:
	mov	d15,#17
.L723:
	jge.u	d0,d15,.L67
.L724:

; ..\component\EcuM\Implementation\EcuM.c	  3967    {
; ..\component\EcuM\Implementation\EcuM.c	  3968      errorId = ECUM_E_UNINIT;
	mov	d7,#16
	j	.L68
.L67:

; ..\component\EcuM\Implementation\EcuM.c	  3969    }
; ..\component\EcuM\Implementation\EcuM.c	  3970    else
; ..\component\EcuM\Implementation\EcuM.c	  3971  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3972    {
; ..\component\EcuM\Implementation\EcuM.c	  3973      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3974      /* #30 Disable all Interrupts while accessing EcuM_ValidatedWakeups, access could be non-atomic. */
; ..\component\EcuM\Implementation\EcuM.c	  3975      EcuM_EnterAtomicAccess_0();
; ..\component\EcuM\Implementation\EcuM.c	  3976  
; ..\component\EcuM\Implementation\EcuM.c	  3977      /* #31 Set the validated wakeups as return value. */
; ..\component\EcuM\Implementation\EcuM.c	  3978      retval = EcuM_ValidatedWakeups;
	movh.a	a15,#@his(EcuM_ValidatedWakeups)
	ld.w	d8,[a15]@los(EcuM_ValidatedWakeups)
.L68:

; ..\component\EcuM\Implementation\EcuM.c	  3979  
; ..\component\EcuM\Implementation\EcuM.c	  3980      EcuM_LeaveAtomicAccess_0();
; ..\component\EcuM\Implementation\EcuM.c	  3981    }
; ..\component\EcuM\Implementation\EcuM.c	  3982  
; ..\component\EcuM\Implementation\EcuM.c	  3983    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  3984  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  3985    if (errorId != ECUM_E_NO_ERROR)
	jeq	d7,#0,.L69
.L725:

; ..\component\EcuM\Implementation\EcuM.c	  3986    {
; ..\component\EcuM\Implementation\EcuM.c	  3987      EcuM_Det_ReportError(ECUM_SID_GET_VALIDATED_WAKEUP_EVENTS, errorId);
	fcall	.cocofun_1
	mov	d6,#21
	call	Det_ReportError
.L69:

; ..\component\EcuM\Implementation\EcuM.c	  3988    }
; ..\component\EcuM\Implementation\EcuM.c	  3989  #else
; ..\component\EcuM\Implementation\EcuM.c	  3990    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  3991  #endif
; ..\component\EcuM\Implementation\EcuM.c	  3992  
; ..\component\EcuM\Implementation\EcuM.c	  3993    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  3994  }
	mov	d2,d8
	ret
.L445:
	
__EcuM_GetValidatedWakeupEvents_function_end:
	.size	EcuM_GetValidatedWakeupEvents,__EcuM_GetValidatedWakeupEvents_function_end-EcuM_GetValidatedWakeupEvents
.L255:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_GetExpiredWakeupEvents',code,cluster('EcuM_GetExpiredWakeupEvents')
	.sect	'.text.EcuM.EcuM_GetExpiredWakeupEvents'
	.align	2
	
	.global	EcuM_GetExpiredWakeupEvents

; ..\component\EcuM\Implementation\EcuM.c	  3995  
; ..\component\EcuM\Implementation\EcuM.c	  3996  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  3997   *  EcuM_GetExpiredWakeupEvents
; ..\component\EcuM\Implementation\EcuM.c	  3998   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  3999  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4000   *
; ..\component\EcuM\Implementation\EcuM.c	  4001   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4002   *
; ..\component\EcuM\Implementation\EcuM.c	  4003   *
; ..\component\EcuM\Implementation\EcuM.c	  4004   *
; ..\component\EcuM\Implementation\EcuM.c	  4005   *
; ..\component\EcuM\Implementation\EcuM.c	  4006   */
; ..\component\EcuM\Implementation\EcuM.c	  4007  FUNC(EcuM_WakeupSourceType, ECUM_CODE) EcuM_GetExpiredWakeupEvents(void)
; Function EcuM_GetExpiredWakeupEvents
.L166:
EcuM_GetExpiredWakeupEvents:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  4008  {
; ..\component\EcuM\Implementation\EcuM.c	  4009    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4010    uint8 errorId = ECUM_E_NO_ERROR;
	fcall	.cocofun_3
.L536:

; ..\component\EcuM\Implementation\EcuM.c	  4011    EcuM_WakeupSourceType retval = ECUM_WKSOURCE_NONE; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  4012  
; ..\component\EcuM\Implementation\EcuM.c	  4013    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4014    /* #20 Check if the module is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  4015  #if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4016    if ( EcuM_GetModuleState() < ECUM_STATE_STARTUP_ONE)
; ..\component\EcuM\Implementation\EcuM.c	  4017    {
; ..\component\EcuM\Implementation\EcuM.c	  4018      errorId = ECUM_E_UNINIT;
; ..\component\EcuM\Implementation\EcuM.c	  4019    }
; ..\component\EcuM\Implementation\EcuM.c	  4020    else
; ..\component\EcuM\Implementation\EcuM.c	  4021  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4022    {
; ..\component\EcuM\Implementation\EcuM.c	  4023      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4024  #if (ECUM_TIMEOUTOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4025      /* #30 Disable all Interrupts while accessing EcuM_ExpiredWakeups, access could be non-atomic. */
; ..\component\EcuM\Implementation\EcuM.c	  4026      /* Access must be done in  a critical area because the Validated Wakeups can change while the possible non-atomic
; ..\component\EcuM\Implementation\EcuM.c	  4027       access on the EcuM_ExpiredWakeups */
; ..\component\EcuM\Implementation\EcuM.c	  4028      EcuM_EnterAtomicAccess_0();
; ..\component\EcuM\Implementation\EcuM.c	  4029  
; ..\component\EcuM\Implementation\EcuM.c	  4030      /* #31 Set the expired wakeups as return value. */
; ..\component\EcuM\Implementation\EcuM.c	  4031      retval = EcuM_ExpiredWakeups;
; ..\component\EcuM\Implementation\EcuM.c	  4032  
; ..\component\EcuM\Implementation\EcuM.c	  4033      EcuM_LeaveAtomicAccess_0();
; ..\component\EcuM\Implementation\EcuM.c	  4034  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4035    }
; ..\component\EcuM\Implementation\EcuM.c	  4036  
; ..\component\EcuM\Implementation\EcuM.c	  4037    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4038  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4039    if (errorId != ECUM_E_NO_ERROR)
	jeq	d7,#0,.L72
.L730:

; ..\component\EcuM\Implementation\EcuM.c	  4040    {
; ..\component\EcuM\Implementation\EcuM.c	  4041      EcuM_Det_ReportError(ECUM_SID_GET_EXPIRED_WAKEUP_EVENTS, errorId);
	fcall	.cocofun_1
	mov	d6,#25
	call	Det_ReportError
.L72:

; ..\component\EcuM\Implementation\EcuM.c	  4042    }
; ..\component\EcuM\Implementation\EcuM.c	  4043  #else
; ..\component\EcuM\Implementation\EcuM.c	  4044    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  4045  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4046  
; ..\component\EcuM\Implementation\EcuM.c	  4047    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  4048  }
	mov	d2,#0
	ret
.L448:
	
__EcuM_GetExpiredWakeupEvents_function_end:
	.size	EcuM_GetExpiredWakeupEvents,__EcuM_GetExpiredWakeupEvents_function_end-EcuM_GetExpiredWakeupEvents
.L260:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_GetBootTarget',code,cluster('EcuM_GetBootTarget')
	.sect	'.text.EcuM.EcuM_GetBootTarget'
	.align	2
	
	.global	EcuM_GetBootTarget

; ..\component\EcuM\Implementation\EcuM.c	  4049  
; ..\component\EcuM\Implementation\EcuM.c	  4050  #if (ECUM_CHECKWAKEUPTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4051  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  4052   *  EcuM_StartCheckWakeup
; ..\component\EcuM\Implementation\EcuM.c	  4053   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  4054  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4055   *
; ..\component\EcuM\Implementation\EcuM.c	  4056   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4057   *
; ..\component\EcuM\Implementation\EcuM.c	  4058   *
; ..\component\EcuM\Implementation\EcuM.c	  4059   *
; ..\component\EcuM\Implementation\EcuM.c	  4060   *
; ..\component\EcuM\Implementation\EcuM.c	  4061   *
; ..\component\EcuM\Implementation\EcuM.c	  4062   */
; ..\component\EcuM\Implementation\EcuM.c	  4063  FUNC(void, ECUM_CODE) EcuM_StartCheckWakeup(EcuM_WakeupSourceType WakeupSource)
; ..\component\EcuM\Implementation\EcuM.c	  4064  {
; ..\component\EcuM\Implementation\EcuM.c	  4065    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4066    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  4067    uint8 ShiftCount;
; ..\component\EcuM\Implementation\EcuM.c	  4068  
; ..\component\EcuM\Implementation\EcuM.c	  4069    ShiftCount = EcuM_GetShiftCount(WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  4070    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4071    /* #20 Check if the wakeup source parameter is a single bitmask and in a valid range. */
; ..\component\EcuM\Implementation\EcuM.c	  4072    if ((((EcuM_WakeupSourceType) 0u) != (((WakeupSource) - ((EcuM_WakeupSourceType) 1u)) & WakeupSource))
; ..\component\EcuM\Implementation\EcuM.c	  4073        || ((ShiftCount) >= (EcuM_GetMaxWakeupSourceCount()))
; ..\component\EcuM\Implementation\EcuM.c	  4074  # if(ECUM_VALIDOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4075        || (!EcuM_IsValidOfWakeupSourceList(ShiftCount))
; ..\component\EcuM\Implementation\EcuM.c	  4076  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4077    )
; ..\component\EcuM\Implementation\EcuM.c	  4078    {
; ..\component\EcuM\Implementation\EcuM.c	  4079      errorId = ECUM_E_UNKNOWN_WAKEUP_SOURCE;
; ..\component\EcuM\Implementation\EcuM.c	  4080    }
; ..\component\EcuM\Implementation\EcuM.c	  4081    else
; ..\component\EcuM\Implementation\EcuM.c	  4082    {
; ..\component\EcuM\Implementation\EcuM.c	  4083      if ( EcuM_GetCheckWakeupTimeOfWakeupSourceList(ShiftCount) > 0u)
; ..\component\EcuM\Implementation\EcuM.c	  4084      {
; ..\component\EcuM\Implementation\EcuM.c	  4085        /* #30 Disable all Interrupts while accessing EcuM_PendingCheckWakeups, access could be non-atomic. */
; ..\component\EcuM\Implementation\EcuM.c	  4086        EcuM_EnterCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  4087  
; ..\component\EcuM\Implementation\EcuM.c	  4088        /* #31 Mark that the wakeup source has an unapproved CheckWakeup call. */
; ..\component\EcuM\Implementation\EcuM.c	  4089        EcuM_PendingCheckWakeups |= WakeupSource;
; ..\component\EcuM\Implementation\EcuM.c	  4090  
; ..\component\EcuM\Implementation\EcuM.c	  4091  # if (ECUM_DEFERRED_BSWM_NOTIFICATION == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4092          EcuM_BswM_BufferedWakeups |= (EcuM_WakeupSourceType)(WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  4093  # else
; ..\component\EcuM\Implementation\EcuM.c	  4094          /* #35 Report the new state of the source to the BswM only in a state where BswM is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  4095          if(EcuM_GetModuleState() > ECUM_STATE_STARTUP_TWO)
; ..\component\EcuM\Implementation\EcuM.c	  4096          {
; ..\component\EcuM\Implementation\EcuM.c	  4097            BswM_EcuM_CurrentWakeup(WakeupSource, ECUM_WKSTATUS_CHECKWAKEUP);
; ..\component\EcuM\Implementation\EcuM.c	  4098          }
; ..\component\EcuM\Implementation\EcuM.c	  4099  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4100  
; ..\component\EcuM\Implementation\EcuM.c	  4101        EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  4102      }
; ..\component\EcuM\Implementation\EcuM.c	  4103    }
; ..\component\EcuM\Implementation\EcuM.c	  4104  
; ..\component\EcuM\Implementation\EcuM.c	  4105    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4106  # if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4107    if ( errorId != ECUM_E_NO_ERROR )
; ..\component\EcuM\Implementation\EcuM.c	  4108    {
; ..\component\EcuM\Implementation\EcuM.c	  4109      EcuM_Det_ReportError( ECUM_SID_START_CHECK_WAKEUP, errorId );
; ..\component\EcuM\Implementation\EcuM.c	  4110    }
; ..\component\EcuM\Implementation\EcuM.c	  4111  # else
; ..\component\EcuM\Implementation\EcuM.c	  4112    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  4113  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4114  }
; ..\component\EcuM\Implementation\EcuM.c	  4115  
; ..\component\EcuM\Implementation\EcuM.c	  4116  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  4117   *  EcuM_EndCheckWakeup
; ..\component\EcuM\Implementation\EcuM.c	  4118   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  4119  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4120   *
; ..\component\EcuM\Implementation\EcuM.c	  4121   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4122   *
; ..\component\EcuM\Implementation\EcuM.c	  4123   *
; ..\component\EcuM\Implementation\EcuM.c	  4124   *
; ..\component\EcuM\Implementation\EcuM.c	  4125   *
; ..\component\EcuM\Implementation\EcuM.c	  4126   *
; ..\component\EcuM\Implementation\EcuM.c	  4127   *
; ..\component\EcuM\Implementation\EcuM.c	  4128   */
; ..\component\EcuM\Implementation\EcuM.c	  4129  
; ..\component\EcuM\Implementation\EcuM.c	  4130  FUNC(void, ECUM_CODE) EcuM_EndCheckWakeup(EcuM_WakeupSourceType WakeupSource)
; ..\component\EcuM\Implementation\EcuM.c	  4131  {
; ..\component\EcuM\Implementation\EcuM.c	  4132    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4133    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  4134    uint8 ShiftCount;
; ..\component\EcuM\Implementation\EcuM.c	  4135  
; ..\component\EcuM\Implementation\EcuM.c	  4136    /* Get the Index of the wakeup source */
; ..\component\EcuM\Implementation\EcuM.c	  4137    ShiftCount = EcuM_GetShiftCount(WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  4138  
; ..\component\EcuM\Implementation\EcuM.c	  4139    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4140    /* #20 Check if the wakeup source parameter is a single bitmask and in a valid range. */
; ..\component\EcuM\Implementation\EcuM.c	  4141    if ((((EcuM_WakeupSourceType) 0u) != (((WakeupSource) - ((EcuM_WakeupSourceType) 1u)) & WakeupSource))
; ..\component\EcuM\Implementation\EcuM.c	  4142        || ((ShiftCount) >= (EcuM_GetSizeOfWakeupSourceList()))
; ..\component\EcuM\Implementation\EcuM.c	  4143  # if(ECUM_VALIDOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4144        || (!EcuM_IsValidOfWakeupSourceList(ShiftCount))
; ..\component\EcuM\Implementation\EcuM.c	  4145  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4146    )
; ..\component\EcuM\Implementation\EcuM.c	  4147    {
; ..\component\EcuM\Implementation\EcuM.c	  4148      errorId = ECUM_E_UNKNOWN_WAKEUP_SOURCE;
; ..\component\EcuM\Implementation\EcuM.c	  4149    }
; ..\component\EcuM\Implementation\EcuM.c	  4150    else
; ..\component\EcuM\Implementation\EcuM.c	  4151    {
; ..\component\EcuM\Implementation\EcuM.c	  4152      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4153      if ( EcuM_GetCheckWakeupTimeOfWakeupSourceList(ShiftCount) != ECUM_NO_VALIDATION_TIMEOUT)
; ..\component\EcuM\Implementation\EcuM.c	  4154      {
; ..\component\EcuM\Implementation\EcuM.c	  4155        EcuM_EnterCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  4156  
; ..\component\EcuM\Implementation\EcuM.c	  4157        /* #31 Remove this wakeup source from the list of unapproved CheckWakeup calls. */
; ..\component\EcuM\Implementation\EcuM.c	  4158        EcuM_PendingCheckWakeups &= (~WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  4159  
; ..\component\EcuM\Implementation\EcuM.c	  4160        /* #32 Notify the wakeup event as an expired source to the BswM, Interrupts has to be still disabled to avoid inconsistencies. */
; ..\component\EcuM\Implementation\EcuM.c	  4161  # if (ECUM_DEFERRED_BSWM_NOTIFICATION == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4162          EcuM_ExpiredCheckWakeups |= WakeupSource;
; ..\component\EcuM\Implementation\EcuM.c	  4163          EcuM_BswM_BufferedWakeups |= (EcuM_WakeupSourceType)(WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  4164  # else
; ..\component\EcuM\Implementation\EcuM.c	  4165          /* #35 Report the new state of the source to the BswM only in a state where BswM is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  4166          if(EcuM_GetModuleState() > ECUM_STATE_STARTUP_TWO)
; ..\component\EcuM\Implementation\EcuM.c	  4167          {
; ..\component\EcuM\Implementation\EcuM.c	  4168            BswM_EcuM_CurrentWakeup(WakeupSource, ECUM_WKSTATUS_EXPIRED);
; ..\component\EcuM\Implementation\EcuM.c	  4169          }
; ..\component\EcuM\Implementation\EcuM.c	  4170  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4171        EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  4172  
; ..\component\EcuM\Implementation\EcuM.c	  4173        /* #33 Stop the check wakeup timer for this source. */
; ..\component\EcuM\Implementation\EcuM.c	  4174        EcuM_SetValidationTimeoutTable(ShiftCount, ECUM_NO_VALIDATION_TIMEOUT); /* SBSW_ECUM_ACCESSVALTABLE */
; ..\component\EcuM\Implementation\EcuM.c	  4175      }
; ..\component\EcuM\Implementation\EcuM.c	  4176    }
; ..\component\EcuM\Implementation\EcuM.c	  4177  
; ..\component\EcuM\Implementation\EcuM.c	  4178    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4179  # if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4180    if ( errorId != ECUM_E_NO_ERROR )
; ..\component\EcuM\Implementation\EcuM.c	  4181    {
; ..\component\EcuM\Implementation\EcuM.c	  4182      EcuM_Det_ReportError( ECUM_SID_END_CHECK_WAKEUP, errorId );
; ..\component\EcuM\Implementation\EcuM.c	  4183    }
; ..\component\EcuM\Implementation\EcuM.c	  4184  # else
; ..\component\EcuM\Implementation\EcuM.c	  4185    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  4186  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4187  }
; ..\component\EcuM\Implementation\EcuM.c	  4188  
; ..\component\EcuM\Implementation\EcuM.c	  4189  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4190  
; ..\component\EcuM\Implementation\EcuM.c	  4191  #if(ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4192  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  4193   *  EcuM_CB_NfyNvMJobEnd
; ..\component\EcuM\Implementation\EcuM.c	  4194   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  4195  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4196   *
; ..\component\EcuM\Implementation\EcuM.c	  4197   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4198   *
; ..\component\EcuM\Implementation\EcuM.c	  4199   *
; ..\component\EcuM\Implementation\EcuM.c	  4200   *
; ..\component\EcuM\Implementation\EcuM.c	  4201   *
; ..\component\EcuM\Implementation\EcuM.c	  4202   *
; ..\component\EcuM\Implementation\EcuM.c	  4203   */
; ..\component\EcuM\Implementation\EcuM.c	  4204  # if (ECUM_INCLUDE_NVRAM_MGR ==STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4205  FUNC(void, ECUM_CODE) EcuM_CB_NfyNvMJobEnd(uint8 ServiceID, NvM_RequestResultType JobResult)
; ..\component\EcuM\Implementation\EcuM.c	  4206  {
; ..\component\EcuM\Implementation\EcuM.c	  4207    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4208    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  4209  
; ..\component\EcuM\Implementation\EcuM.c	  4210    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4211    /* #20 Check if the module is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  4212  #  if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4213    if (EcuM_GetModuleState() < (EcuM_StateType) ECUM_STATE_STARTUP_TWO)
; ..\component\EcuM\Implementation\EcuM.c	  4214    {
; ..\component\EcuM\Implementation\EcuM.c	  4215      errorId = ECUM_E_UNINIT;
; ..\component\EcuM\Implementation\EcuM.c	  4216    }
; ..\component\EcuM\Implementation\EcuM.c	  4217    else
; ..\component\EcuM\Implementation\EcuM.c	  4218  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4219    {
; ..\component\EcuM\Implementation\EcuM.c	  4220      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4221      /* dummy assignment to prevent compiler warnings on most of the compilers. */
; ..\component\EcuM\Implementation\EcuM.c	  4222      ECUM_DUMMY_STATEMENT(JobResult); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  4223  
; ..\component\EcuM\Implementation\EcuM.c	  4224      /* #30 This Callback is only relevant for the service NvM_WriteAll(). */
; ..\component\EcuM\Implementation\EcuM.c	  4225      if ((uint8) NVM_WRITE_ALL == ServiceID)
; ..\component\EcuM\Implementation\EcuM.c	  4226      {
; ..\component\EcuM\Implementation\EcuM.c	  4227        /* #31 In case that the state of NvM is ECUM_NVM_WRITEALL_CANCELED, set the NvM status to required. */
; ..\component\EcuM\Implementation\EcuM.c	  4228  #  if(ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4229        if ( EcuM_GetNvMWriteAllStatus() == ECUM_NVM_WRITEALL_CANCELED)
; ..\component\EcuM\Implementation\EcuM.c	  4230        {
; ..\component\EcuM\Implementation\EcuM.c	  4231          EcuM_SetNvMWriteAllStatus(ECUM_NVM_WRITEALL_REQUIRED); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  4232        }
; ..\component\EcuM\Implementation\EcuM.c	  4233        /* #32 In case that the state of NvM is not ECUM_NVM_WRITEALL_CANCELED, set the NvM status to idle. */
; ..\component\EcuM\Implementation\EcuM.c	  4234        else
; ..\component\EcuM\Implementation\EcuM.c	  4235  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4236        {
; ..\component\EcuM\Implementation\EcuM.c	  4237          EcuM_SetNvMWriteAllStatus(ECUM_NVM_WRITEALL_IDLE); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  4238        }
; ..\component\EcuM\Implementation\EcuM.c	  4239      }
; ..\component\EcuM\Implementation\EcuM.c	  4240    }
; ..\component\EcuM\Implementation\EcuM.c	  4241  
; ..\component\EcuM\Implementation\EcuM.c	  4242    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4243  #  if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4244    if (errorId != ECUM_E_NO_ERROR)
; ..\component\EcuM\Implementation\EcuM.c	  4245    {
; ..\component\EcuM\Implementation\EcuM.c	  4246      EcuM_Det_ReportError(ECUM_SID_CB_NFY_NVM_JOB_END, errorId);
; ..\component\EcuM\Implementation\EcuM.c	  4247    }
; ..\component\EcuM\Implementation\EcuM.c	  4248  #  else
; ..\component\EcuM\Implementation\EcuM.c	  4249    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  4250  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4251  
; ..\component\EcuM\Implementation\EcuM.c	  4252    return;
; ..\component\EcuM\Implementation\EcuM.c	  4253  }
; ..\component\EcuM\Implementation\EcuM.c	  4254  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4255  
; ..\component\EcuM\Implementation\EcuM.c	  4256  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  4257   *  EcuM_GetStateWrapper
; ..\component\EcuM\Implementation\EcuM.c	  4258   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  4259  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4260   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4261   *
; ..\component\EcuM\Implementation\EcuM.c	  4262   *
; ..\component\EcuM\Implementation\EcuM.c	  4263   */
; ..\component\EcuM\Implementation\EcuM.c	  4264  /* PRQA S 1330 1 */ /* MD_EcuM_1330 */
; ..\component\EcuM\Implementation\EcuM.c	  4265  FUNC(Std_ReturnType, ECUM_CODE) EcuM_GetStateWrapper(EcuM_UserType user,
; ..\component\EcuM\Implementation\EcuM.c	  4266      P2VAR(EcuM_StateType, AUTOMATIC, ECUM_APPL_DATA) state)
; ..\component\EcuM\Implementation\EcuM.c	  4267  {
; ..\component\EcuM\Implementation\EcuM.c	  4268  
; ..\component\EcuM\Implementation\EcuM.c	  4269    /* dummy assignment to prevent compiler warnings on most of the compilers. */
; ..\component\EcuM\Implementation\EcuM.c	  4270    ECUM_DUMMY_STATEMENT(user); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  4271  
; ..\component\EcuM\Implementation\EcuM.c	  4272    return EcuM_GetState(state); /* SBSW_ECUM_POINTERACCESS_STATE */
; ..\component\EcuM\Implementation\EcuM.c	  4273  }
; ..\component\EcuM\Implementation\EcuM.c	  4274  
; ..\component\EcuM\Implementation\EcuM.c	  4275  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  4276   *  EcuM_GetState
; ..\component\EcuM\Implementation\EcuM.c	  4277   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  4278  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4279   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4280   *
; ..\component\EcuM\Implementation\EcuM.c	  4281   *
; ..\component\EcuM\Implementation\EcuM.c	  4282   *
; ..\component\EcuM\Implementation\EcuM.c	  4283   */
; ..\component\EcuM\Implementation\EcuM.c	  4284  FUNC(Std_ReturnType, ECUM_CODE) EcuM_GetState(P2VAR(EcuM_StateType, AUTOMATIC, ECUM_APPL_DATA) state)
; ..\component\EcuM\Implementation\EcuM.c	  4285  {
; ..\component\EcuM\Implementation\EcuM.c	  4286    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4287    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  4288    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  4289  
; ..\component\EcuM\Implementation\EcuM.c	  4290    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4291    /* #20 Check that the parameter is not a NULL_PTR. */
; ..\component\EcuM\Implementation\EcuM.c	  4292  # if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4293    if (NULL_PTR == state)
; ..\component\EcuM\Implementation\EcuM.c	  4294    {
; ..\component\EcuM\Implementation\EcuM.c	  4295      errorId = ECUM_E_NULL_POINTER;
; ..\component\EcuM\Implementation\EcuM.c	  4296    }
; ..\component\EcuM\Implementation\EcuM.c	  4297    else
; ..\component\EcuM\Implementation\EcuM.c	  4298  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4299    {
; ..\component\EcuM\Implementation\EcuM.c	  4300      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4301      /* #30 Pass the current state to the pointer. */
; ..\component\EcuM\Implementation\EcuM.c	  4302      *state = EcuM_GetModuleState(); /* SBSW_ECUM_POINTERACCESS_STATE */
; ..\component\EcuM\Implementation\EcuM.c	  4303      retval = E_OK;
; ..\component\EcuM\Implementation\EcuM.c	  4304    }
; ..\component\EcuM\Implementation\EcuM.c	  4305  
; ..\component\EcuM\Implementation\EcuM.c	  4306    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4307  # if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4308    if (errorId != ECUM_E_NO_ERROR)
; ..\component\EcuM\Implementation\EcuM.c	  4309    {
; ..\component\EcuM\Implementation\EcuM.c	  4310      EcuM_Det_ReportError(ECUM_SID_GET_STATE, errorId);
; ..\component\EcuM\Implementation\EcuM.c	  4311    }
; ..\component\EcuM\Implementation\EcuM.c	  4312  # else
; ..\component\EcuM\Implementation\EcuM.c	  4313    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  4314  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4315  
; ..\component\EcuM\Implementation\EcuM.c	  4316    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  4317  }
; ..\component\EcuM\Implementation\EcuM.c	  4318  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4319  
; ..\component\EcuM\Implementation\EcuM.c	  4320  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  4321   *  EcuM_GetBootTarget
; ..\component\EcuM\Implementation\EcuM.c	  4322   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  4323  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4324   *
; ..\component\EcuM\Implementation\EcuM.c	  4325   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4326   *
; ..\component\EcuM\Implementation\EcuM.c	  4327   *
; ..\component\EcuM\Implementation\EcuM.c	  4328   *
; ..\component\EcuM\Implementation\EcuM.c	  4329   */
; ..\component\EcuM\Implementation\EcuM.c	  4330  FUNC(Std_ReturnType, ECUM_CODE) EcuM_GetBootTarget(P2VAR(EcuM_BootTargetType, AUTOMATIC, ECUM_APPL_DATA) BootTarget)
; Function EcuM_GetBootTarget
.L168:
EcuM_GetBootTarget:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  4331  {
; ..\component\EcuM\Implementation\EcuM.c	  4332    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4333    uint8 errorId = ECUM_E_NO_ERROR;
	mov	d7,#0
.L537:

; ..\component\EcuM\Implementation\EcuM.c	  4334    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  4335  
; ..\component\EcuM\Implementation\EcuM.c	  4336    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4337    /* #20 Check init state of the module and that parameter is not a NULL_PTR. */
; ..\component\EcuM\Implementation\EcuM.c	  4338  #if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4339    if(EcuM_GetModuleState() < ECUM_STATE_STARTUP_TWO)
	mov	d8,#1
	fcall	.cocofun_2
.L538:
	jge.u	d0,d15,.L74
.L735:

; ..\component\EcuM\Implementation\EcuM.c	  4340    {
; ..\component\EcuM\Implementation\EcuM.c	  4341      errorId = ECUM_E_UNINIT;
	mov	d7,#16
	j	.L75
.L74:

; ..\component\EcuM\Implementation\EcuM.c	  4342    }
; ..\component\EcuM\Implementation\EcuM.c	  4343  
; ..\component\EcuM\Implementation\EcuM.c	  4344    /* Check if the given pointer is a NULL_POINTER */
; ..\component\EcuM\Implementation\EcuM.c	  4345    else if(NULL_PTR == BootTarget)
	mov.a	a15,#0
.L736:
	jne.a	a15,a4,.L76
.L737:

; ..\component\EcuM\Implementation\EcuM.c	  4346    {
; ..\component\EcuM\Implementation\EcuM.c	  4347      errorId = ECUM_E_NULL_POINTER;
	mov	d7,d15
	j	.L77
.L76:

; ..\component\EcuM\Implementation\EcuM.c	  4348    }
; ..\component\EcuM\Implementation\EcuM.c	  4349    else
; ..\component\EcuM\Implementation\EcuM.c	  4350  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4351    {
; ..\component\EcuM\Implementation\EcuM.c	  4352      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4353      /* #30 Pass the current boot target to the pointer. */
; ..\component\EcuM\Implementation\EcuM.c	  4354      *BootTarget = EcuM_CurrentBootTarget; /* SBSW_ECUM_POINTERACCESS_BOOTTARGET */
	movh.a	a15,#@his(EcuM_CurrentBootTarget)
.L738:

; ..\component\EcuM\Implementation\EcuM.c	  4355      retval = E_OK;
	mov	d8,#0
	ld.bu	d15,[a15]@los(EcuM_CurrentBootTarget)
.L539:
	st.b	[a4],d15
.L77:
.L75:

; ..\component\EcuM\Implementation\EcuM.c	  4356    }
; ..\component\EcuM\Implementation\EcuM.c	  4357  
; ..\component\EcuM\Implementation\EcuM.c	  4358    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4359  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4360    if (errorId != ECUM_E_NO_ERROR)
	jeq	d7,#0,.L78
.L739:

; ..\component\EcuM\Implementation\EcuM.c	  4361    {
; ..\component\EcuM\Implementation\EcuM.c	  4362      EcuM_Det_ReportError(ECUM_SID_GET_BOOT_TARGET, errorId);
	fcall	.cocofun_1
	mov	d6,#19
	call	Det_ReportError
.L78:

; ..\component\EcuM\Implementation\EcuM.c	  4363    }
; ..\component\EcuM\Implementation\EcuM.c	  4364  #else
; ..\component\EcuM\Implementation\EcuM.c	  4365    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  4366  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4367  
; ..\component\EcuM\Implementation\EcuM.c	  4368    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  4369  }
	mov	d2,d8
	ret
.L450:
	
__EcuM_GetBootTarget_function_end:
	.size	EcuM_GetBootTarget,__EcuM_GetBootTarget_function_end-EcuM_GetBootTarget
.L265:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_SelectBootTarget',code,cluster('EcuM_SelectBootTarget')
	.sect	'.text.EcuM.EcuM_SelectBootTarget'
	.align	2
	
	.global	EcuM_SelectBootTarget

; ..\component\EcuM\Implementation\EcuM.c	  4370  
; ..\component\EcuM\Implementation\EcuM.c	  4371  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  4372   *  EcuM_SelectBootTarget
; ..\component\EcuM\Implementation\EcuM.c	  4373   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  4374  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4375   *
; ..\component\EcuM\Implementation\EcuM.c	  4376   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4377   *
; ..\component\EcuM\Implementation\EcuM.c	  4378   *
; ..\component\EcuM\Implementation\EcuM.c	  4379   *
; ..\component\EcuM\Implementation\EcuM.c	  4380   */
; ..\component\EcuM\Implementation\EcuM.c	  4381  FUNC(Std_ReturnType, ECUM_CODE) EcuM_SelectBootTarget(VAR(EcuM_BootTargetType, AUTOMATIC) BootTarget)
; Function EcuM_SelectBootTarget
.L170:
EcuM_SelectBootTarget:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  4382  {
; ..\component\EcuM\Implementation\EcuM.c	  4383    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4384    uint8 errorId = ECUM_E_NO_ERROR;
	mov	d7,#0
.L541:

; ..\component\EcuM\Implementation\EcuM.c	  4385    Std_ReturnType retval = E_NOT_OK;
; ..\component\EcuM\Implementation\EcuM.c	  4386  
; ..\component\EcuM\Implementation\EcuM.c	  4387    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4388    /* #20 Check init state of the module and that parameter is not a NULL_PTR. */
; ..\component\EcuM\Implementation\EcuM.c	  4389  #if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4390    if ( EcuM_GetModuleState() < ECUM_STATE_STARTUP_TWO)
	mov	d8,#1
	fcall	.cocofun_2
.L744:
	jge.u	d0,d15,.L80
.L745:

; ..\component\EcuM\Implementation\EcuM.c	  4391    {
; ..\component\EcuM\Implementation\EcuM.c	  4392      errorId = ECUM_E_UNINIT;
	mov	d7,#16
	j	.L81
.L80:

; ..\component\EcuM\Implementation\EcuM.c	  4393    }
; ..\component\EcuM\Implementation\EcuM.c	  4394    else
; ..\component\EcuM\Implementation\EcuM.c	  4395  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4396    {
; ..\component\EcuM\Implementation\EcuM.c	  4397      if((BootTarget != ECUM_BOOT_TARGET_APP)            &&
	jeq	d4,#0,.L82
.L746:

; ..\component\EcuM\Implementation\EcuM.c	  4398         (BootTarget != ECUM_BOOT_TARGET_OEM_BOOTLOADER) &&
	jeq	d4,#1,.L83
.L747:

; ..\component\EcuM\Implementation\EcuM.c	  4399         (BootTarget != ECUM_BOOT_TARGET_SYS_BOOTLOADER))
	jeq	d4,#2,.L84
.L748:

; ..\component\EcuM\Implementation\EcuM.c	  4400      {
; ..\component\EcuM\Implementation\EcuM.c	  4401        errorId = ECUM_E_INVALID_PAR;
	mov	d7,#19
	j	.L85
.L84:
.L83:
.L82:

; ..\component\EcuM\Implementation\EcuM.c	  4402      }
; ..\component\EcuM\Implementation\EcuM.c	  4403      else
; ..\component\EcuM\Implementation\EcuM.c	  4404      {
; ..\component\EcuM\Implementation\EcuM.c	  4405        /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4406        /* #30 Save the value of the passed parameter as current boot target. */
; ..\component\EcuM\Implementation\EcuM.c	  4407        EcuM_CurrentBootTarget = BootTarget;
; ..\component\EcuM\Implementation\EcuM.c	  4408        retval = E_OK;
	mov	d8,#0
	movh.a	a15,#@his(EcuM_CurrentBootTarget)
.L749:
	st.b	[a15]@los(EcuM_CurrentBootTarget),d4
.L85:
.L81:

; ..\component\EcuM\Implementation\EcuM.c	  4409      }
; ..\component\EcuM\Implementation\EcuM.c	  4410    }
; ..\component\EcuM\Implementation\EcuM.c	  4411  
; ..\component\EcuM\Implementation\EcuM.c	  4412    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4413  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4414    if (errorId != ECUM_E_NO_ERROR)
	jeq	d7,#0,.L86
.L750:

; ..\component\EcuM\Implementation\EcuM.c	  4415    {
; ..\component\EcuM\Implementation\EcuM.c	  4416      EcuM_Det_ReportError(ECUM_SID_SELECT_BOOT_TARGET, errorId);
	fcall	.cocofun_1
.L540:
	mov	d6,d15
	call	Det_ReportError
.L86:

; ..\component\EcuM\Implementation\EcuM.c	  4417    }
; ..\component\EcuM\Implementation\EcuM.c	  4418  #else
; ..\component\EcuM\Implementation\EcuM.c	  4419    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  4420  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4421  
; ..\component\EcuM\Implementation\EcuM.c	  4422    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  4423  }
	mov	d2,d8
	ret
.L455:
	
__EcuM_SelectBootTarget_function_end:
	.size	EcuM_SelectBootTarget,__EcuM_SelectBootTarget_function_end-EcuM_SelectBootTarget
.L270:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_StartupTwo',code,cluster('EcuM_StartupTwo')
	.sect	'.text.EcuM.EcuM_StartupTwo'
	.align	2
	
	.global	EcuM_StartupTwo

; ..\component\EcuM\Implementation\EcuM.c	  4424  
; ..\component\EcuM\Implementation\EcuM.c	  4425  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  4426   *  EcuM_StartupTwo
; ..\component\EcuM\Implementation\EcuM.c	  4427   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  4428  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4429   *
; ..\component\EcuM\Implementation\EcuM.c	  4430   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4431   *
; ..\component\EcuM\Implementation\EcuM.c	  4432   *
; ..\component\EcuM\Implementation\EcuM.c	  4433   *
; ..\component\EcuM\Implementation\EcuM.c	  4434   *
; ..\component\EcuM\Implementation\EcuM.c	  4435   *
; ..\component\EcuM\Implementation\EcuM.c	  4436   *
; ..\component\EcuM\Implementation\EcuM.c	  4437   *
; ..\component\EcuM\Implementation\EcuM.c	  4438   *
; ..\component\EcuM\Implementation\EcuM.c	  4439   *
; ..\component\EcuM\Implementation\EcuM.c	  4440   *
; ..\component\EcuM\Implementation\EcuM.c	  4441   *
; ..\component\EcuM\Implementation\EcuM.c	  4442   *
; ..\component\EcuM\Implementation\EcuM.c	  4443   *
; ..\component\EcuM\Implementation\EcuM.c	  4444   *
; ..\component\EcuM\Implementation\EcuM.c	  4445   *
; ..\component\EcuM\Implementation\EcuM.c	  4446   *
; ..\component\EcuM\Implementation\EcuM.c	  4447   *
; ..\component\EcuM\Implementation\EcuM.c	  4448   *
; ..\component\EcuM\Implementation\EcuM.c	  4449   *
; ..\component\EcuM\Implementation\EcuM.c	  4450   */
; ..\component\EcuM\Implementation\EcuM.c	  4451  FUNC(void, ECUM_CODE) EcuM_StartupTwo(void)
; Function EcuM_StartupTwo
.L172:
EcuM_StartupTwo:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  4452  {
; ..\component\EcuM\Implementation\EcuM.c	  4453  
; ..\component\EcuM\Implementation\EcuM.c	  4454  #if (((ECUM_PARTITIONDATA == STD_ON)) || (ECUM_NUMBER_OF_CORES > 1u))
; ..\component\EcuM\Implementation\EcuM.c	  4455  # if ((ECUM_BSWMPARTITIONOFPARTITIONDATA == STD_ON) || (ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  4456    EcuM_SizeOfPartitionDataType applicationIdx = EcuM_InternalGetPartitionIdx();
; ..\component\EcuM\Implementation\EcuM.c	  4457  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4458  
; ..\component\EcuM\Implementation\EcuM.c	  4459    if ((GetCoreID() == ECUM_CORE_ID_BSW)
; ..\component\EcuM\Implementation\EcuM.c	  4460  # if(ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4461  #  if(ECUM_ISDEF_ECUMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  4462      && (applicationIdx < EcuM_GetSizeOfPartitionData())
; ..\component\EcuM\Implementation\EcuM.c	  4463      && (EcuM_IsEcuMPartitionOfPartitionData(applicationIdx))
; ..\component\EcuM\Implementation\EcuM.c	  4464  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4465  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4466      )
; ..\component\EcuM\Implementation\EcuM.c	  4467  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4468    {
; ..\component\EcuM\Implementation\EcuM.c	  4469      /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4470      uint8 errorId = ECUM_E_NO_ERROR;
	fcall	.cocofun_6
.L542:

; ..\component\EcuM\Implementation\EcuM.c	  4471  
; ..\component\EcuM\Implementation\EcuM.c	  4472      /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4473      /* #20 Check the init state of the module. */
; ..\component\EcuM\Implementation\EcuM.c	  4474  #if(ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4475      if ( EcuM_GetModuleState() != ECUM_STATE_STARTUP_ONE)
	mov	d15,#17
.L755:
	jeq	d15,d0,.L88
.L756:

; ..\component\EcuM\Implementation\EcuM.c	  4476      {
; ..\component\EcuM\Implementation\EcuM.c	  4477        errorId = ECUM_E_MODULE_NOT_IN_STARTUP;
	mov	d8,#32
	j	.L89
.L88:

; ..\component\EcuM\Implementation\EcuM.c	  4478      }
; ..\component\EcuM\Implementation\EcuM.c	  4479      else
; ..\component\EcuM\Implementation\EcuM.c	  4480  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4481      {
; ..\component\EcuM\Implementation\EcuM.c	  4482        /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4483  
; ..\component\EcuM\Implementation\EcuM.c	  4484        /* #31 In case the Alarm Clock feature is configured, configure the GPT to run in Normal Mode. */
; ..\component\EcuM\Implementation\EcuM.c	  4485  #if(ECUM_ALARM_CLOCK_PRESENT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4486        EcuM_GptStartClock((Gpt_ChannelType)EcuM_GetGptChannel(), GPT_MODE_NORMAL, (Gpt_ValueType)EcuM_GetGptValue());
; ..\component\EcuM\Implementation\EcuM.c	  4487  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4488  
; ..\component\EcuM\Implementation\EcuM.c	  4489        /* #32 Initialization of the schedule Manager. */
; ..\component\EcuM\Implementation\EcuM.c	  4490        SchM_Init(ECUM_SCHM_CONFIG_POINTER); /* SBSW_ECUM_FUNCTIONCALL_POINTER */
	call	SchM_Init
.L757:

; ..\component\EcuM\Implementation\EcuM.c	  4491  
; ..\component\EcuM\Implementation\EcuM.c	  4492        /* #33 Initialization of the BswM. */
; ..\component\EcuM\Implementation\EcuM.c	  4493        BswM_Init(ECUM_BSWM_CONFIG_POINTER); /* SBSW_ECUM_FUNCTIONCALL_POINTER */
	mov.a	a4,#0
	call	BswM_Init
.L758:

; ..\component\EcuM\Implementation\EcuM.c	  4494  
; ..\component\EcuM\Implementation\EcuM.c	  4495  #if(ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4496        EcuM_SetModuleState(ECUM_STATE_STARTUP_TWO); /* SBSW_ECUM_CSL_VAR_ACCESS */
; ..\component\EcuM\Implementation\EcuM.c	  4497  
; ..\component\EcuM\Implementation\EcuM.c	  4498        /* #34 Initialize BSW that does not need NvM Data (DriverInitListTwo). */
; ..\component\EcuM\Implementation\EcuM.c	  4499        ECUM_DRIVERINITLIST_TWO(); /* SBSW_ECUM_FUNCTIONPOINTER_CALL */
; ..\component\EcuM\Implementation\EcuM.c	  4500  
; ..\component\EcuM\Implementation\EcuM.c	  4501        /* #35 Execute user-specific code prior the Rte is started (EcuM_OnRTEStartup()). */
; ..\component\EcuM\Implementation\EcuM.c	  4502        EcuM_OnRTEStartup();
; ..\component\EcuM\Implementation\EcuM.c	  4503  
; ..\component\EcuM\Implementation\EcuM.c	  4504  # if(ECUM_SUPPORT_RTE == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4505        /* #36 Start the AUTOSAR Rte. */
; ..\component\EcuM\Implementation\EcuM.c	  4506        (void) Rte_Start();
; ..\component\EcuM\Implementation\EcuM.c	  4507  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4508        /* #37 Initialize BSW that needs NvM Data (DriverInitListThree).*/
; ..\component\EcuM\Implementation\EcuM.c	  4509        ECUM_DRIVERINITLIST_THREE(); /* SBSW_ECUM_FUNCTIONPOINTER_CALL */
; ..\component\EcuM\Implementation\EcuM.c	  4510  
; ..\component\EcuM\Implementation\EcuM.c	  4511  #else
; ..\component\EcuM\Implementation\EcuM.c	  4512        /* #38 Only relevant for EcuM Flex: From this point the EcuM is in the UP phase. */
; ..\component\EcuM\Implementation\EcuM.c	  4513        EcuM_SetModuleState(ECUM_STATE_RUN); /* SBSW_ECUM_CSL_VAR_ACCESS */
	mov	d15,#48
	st.b	[a15],d15
.L759:

; ..\component\EcuM\Implementation\EcuM.c	  4514  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4515  
; ..\component\EcuM\Implementation\EcuM.c	  4516        /* #39 Check if there are wakeups stored in the EcuM_BswM_BufferedWakeups variable and in that case notify them to BswM. */
; ..\component\EcuM\Implementation\EcuM.c	  4517        EcuM_EnterCriticalArea_0();
	call	SuspendAllInterrupts
.L760:

; ..\component\EcuM\Implementation\EcuM.c	  4518  
; ..\component\EcuM\Implementation\EcuM.c	  4519        if (EcuM_ValidatedWakeups != 0u)
	movh.a	a15,#@his(EcuM_ValidatedWakeups)
	lea	a15,[a15]@los(EcuM_ValidatedWakeups)
	ld.w	d15,[a15]
.L761:
	jeq	d15,#0,.L90
.L762:

; ..\component\EcuM\Implementation\EcuM.c	  4520        {
; ..\component\EcuM\Implementation\EcuM.c	  4521          BswM_EcuM_CurrentWakeup((EcuM_BswM_BufferedWakeups & EcuM_ValidatedWakeups), ECUM_WKSTATUS_VALIDATED);
	movh.a	a12,#@his(EcuM_BswM_BufferedWakeups)
	ld.w	d4,[a12]@los(EcuM_BswM_BufferedWakeups)
.L763:
	mov	d5,#2
.L764:
	and	d4,d15
	call	BswM_EcuM_CurrentWakeup
.L765:

; ..\component\EcuM\Implementation\EcuM.c	  4522          EcuM_BswM_BufferedWakeups &= (~EcuM_ValidatedWakeups);
	mov	d15,#-1
	ld.w	d1,[a15]
.L766:
	ld.w	d0,[a12]@los(EcuM_BswM_BufferedWakeups)
.L767:
	xor	d1,d15
.L768:
	and	d0,d1
	st.w	[a12]@los(EcuM_BswM_BufferedWakeups),d0
.L90:

; ..\component\EcuM\Implementation\EcuM.c	  4523        }
; ..\component\EcuM\Implementation\EcuM.c	  4524  
; ..\component\EcuM\Implementation\EcuM.c	  4525        EcuM_LeaveCriticalArea_0();
	call	ResumeAllInterrupts
.L89:

; ..\component\EcuM\Implementation\EcuM.c	  4526  
; ..\component\EcuM\Implementation\EcuM.c	  4527  #if(ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4528        /* #41 Only relevant for EcuM Fixed: Call the EcuM_StateMachine at the end of EcuM_StartupTwo to perform a startup in wakeup Validation or Run State. */
; ..\component\EcuM\Implementation\EcuM.c	  4529        EcuM_Statemachine();
; ..\component\EcuM\Implementation\EcuM.c	  4530  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4531      }
; ..\component\EcuM\Implementation\EcuM.c	  4532  
; ..\component\EcuM\Implementation\EcuM.c	  4533      /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4534  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4535      if (errorId != ECUM_E_NO_ERROR)
	jeq	d8,#0,.L91
.L769:

; ..\component\EcuM\Implementation\EcuM.c	  4536      {
; ..\component\EcuM\Implementation\EcuM.c	  4537        EcuM_Det_ReportError(ECUM_SID_STARTUP_TWO, errorId);
	fcall	.cocofun_1
	mov	d6,#26
	mov	d7,d8
.L543:
	j	Det_ReportError
.L91:

; ..\component\EcuM\Implementation\EcuM.c	  4538      }
; ..\component\EcuM\Implementation\EcuM.c	  4539  #else
; ..\component\EcuM\Implementation\EcuM.c	  4540      ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  4541  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4542    }
; ..\component\EcuM\Implementation\EcuM.c	  4543  
; ..\component\EcuM\Implementation\EcuM.c	  4544  #if ((ECUM_BSWMPARTITIONOFPARTITIONDATA == STD_ON) || (ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON) || (ECUM_NUMBER_OF_CORES > 1))
; ..\component\EcuM\Implementation\EcuM.c	  4545    else
; ..\component\EcuM\Implementation\EcuM.c	  4546    {
; ..\component\EcuM\Implementation\EcuM.c	  4547  # if ((ECUM_BSWMPARTITIONOFPARTITIONDATA == STD_ON) || (ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  4548      if(applicationIdx < EcuM_GetSizeOfPartitionData())
; ..\component\EcuM\Implementation\EcuM.c	  4549      {
; ..\component\EcuM\Implementation\EcuM.c	  4550  #  if(ECUM_ISDEF_ECUMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  4551        if(EcuM_IsEcuMPartitionOfPartitionData(applicationIdx))
; ..\component\EcuM\Implementation\EcuM.c	  4552  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4553        {
; ..\component\EcuM\Implementation\EcuM.c	  4554          /* #32 Initialization of the schedule Manager. */
; ..\component\EcuM\Implementation\EcuM.c	  4555          SchM_Init(ECUM_SCHM_CONFIG_POINTER); /* SBSW_ECUM_FUNCTIONCALL_POINTER */
; ..\component\EcuM\Implementation\EcuM.c	  4556        }
; ..\component\EcuM\Implementation\EcuM.c	  4557  
; ..\component\EcuM\Implementation\EcuM.c	  4558  #  if(ECUM_BSWMPARTITIONOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4559  #   if(ECUM_ISDEF_BSWMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  4560        if(EcuM_IsBswMPartitionOfPartitionData(applicationIdx))
; ..\component\EcuM\Implementation\EcuM.c	  4561  #   endif
; ..\component\EcuM\Implementation\EcuM.c	  4562        {
; ..\component\EcuM\Implementation\EcuM.c	  4563          /* #33 Initialization of the BswM. */
; ..\component\EcuM\Implementation\EcuM.c	  4564          BswM_Init( ECUM_BSWM_CONFIG_POINTER); /* SBSW_ECUM_FUNCTIONCALL_POINTER */
; ..\component\EcuM\Implementation\EcuM.c	  4565        }
; ..\component\EcuM\Implementation\EcuM.c	  4566  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4567  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4568  
; ..\component\EcuM\Implementation\EcuM.c	  4569  # if(ECUM_FIXED_BEHAVIOR == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4570      /* #35 Execute user-specific code prior the Rte is started (EcuM_OnRTEStartup()). */
; ..\component\EcuM\Implementation\EcuM.c	  4571      EcuM_OnRTEStartup();
; ..\component\EcuM\Implementation\EcuM.c	  4572  
; ..\component\EcuM\Implementation\EcuM.c	  4573  #  if(ECUM_SUPPORT_RTE == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4574      /* #36 Start the AUTOSAR Rte. */
; ..\component\EcuM\Implementation\EcuM.c	  4575      (void)Rte_Start();
; ..\component\EcuM\Implementation\EcuM.c	  4576  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4577  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4578  
; ..\component\EcuM\Implementation\EcuM.c	  4579  # if ((ECUM_BSWMPARTITIONOFPARTITIONDATA == STD_ON) || (ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  4580      }
; ..\component\EcuM\Implementation\EcuM.c	  4581  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4582    }
; ..\component\EcuM\Implementation\EcuM.c	  4583  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4584  } /* PRQA S 6050 */ /* MD_MSR_STCAL */
	ret
.L459:
	
__EcuM_StartupTwo_function_end:
	.size	EcuM_StartupTwo,__EcuM_StartupTwo_function_end-EcuM_StartupTwo
.L275:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_SetWakeupEvent',code,cluster('EcuM_SetWakeupEvent')
	.sect	'.text.EcuM.EcuM_SetWakeupEvent'
	.align	2
	
	.global	EcuM_SetWakeupEvent

; ..\component\EcuM\Implementation\EcuM.c	  4585  
; ..\component\EcuM\Implementation\EcuM.c	  4586  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  4587   *  EcuM_SetWakeupEvent
; ..\component\EcuM\Implementation\EcuM.c	  4588   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  4589  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4590   *
; ..\component\EcuM\Implementation\EcuM.c	  4591   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4592   *
; ..\component\EcuM\Implementation\EcuM.c	  4593   *
; ..\component\EcuM\Implementation\EcuM.c	  4594   *
; ..\component\EcuM\Implementation\EcuM.c	  4595   *
; ..\component\EcuM\Implementation\EcuM.c	  4596   *
; ..\component\EcuM\Implementation\EcuM.c	  4597   *
; ..\component\EcuM\Implementation\EcuM.c	  4598   *
; ..\component\EcuM\Implementation\EcuM.c	  4599   *
; ..\component\EcuM\Implementation\EcuM.c	  4600   *
; ..\component\EcuM\Implementation\EcuM.c	  4601   *
; ..\component\EcuM\Implementation\EcuM.c	  4602   *
; ..\component\EcuM\Implementation\EcuM.c	  4603   */
; ..\component\EcuM\Implementation\EcuM.c	  4604  FUNC(void, ECUM_CODE) EcuM_SetWakeupEvent(VAR(EcuM_WakeupSourceType, AUTOMATIC) WakeupSource)
; Function EcuM_SetWakeupEvent
.L174:
EcuM_SetWakeupEvent:	.type	func
	mov	d8,d4
.L545:

; ..\component\EcuM\Implementation\EcuM.c	  4605  {
; ..\component\EcuM\Implementation\EcuM.c	  4606    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4607    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  4608    uint8 Shiftcount;
; ..\component\EcuM\Implementation\EcuM.c	  4609  
; ..\component\EcuM\Implementation\EcuM.c	  4610    Shiftcount = EcuM_GetShiftCount(WakeupSource);
	mov	d15,#0
	call	EcuM_GetShiftCount
.L544:

; ..\component\EcuM\Implementation\EcuM.c	  4611  
; ..\component\EcuM\Implementation\EcuM.c	  4612    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4613    /* #20 Check if the wakeup source parameter is a single bitmask and in a valid range. */
; ..\component\EcuM\Implementation\EcuM.c	  4614    /* Check if that source is in the field of possible wakeup sources. Additional there is a check that only one bit is set
; ..\component\EcuM\Implementation\EcuM.c	  4615     *  if(<Only one wakeup source> AND < WakeupSource is less than MaxWakeupSources>
; ..\component\EcuM\Implementation\EcuM.c	  4616     */
; ..\component\EcuM\Implementation\EcuM.c	  4617    if ((((EcuM_WakeupSourceType) 0u) != (((WakeupSource) - ((EcuM_WakeupSourceType) 1u)) & WakeupSource))
	add	d0,d8,#-1
.L588:
	and	d0,d8
.L589:
	jne	d0,#0,.L92
.L590:

; ..\component\EcuM\Implementation\EcuM.c	  4618        || ((Shiftcount) >= (EcuM_GetMaxWakeupSourceCount()))
	jlt.u	d2,#6,.L93
.L92:

; ..\component\EcuM\Implementation\EcuM.c	  4619  #if(ECUM_VALIDOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4620        || (!EcuM_IsValidOfWakeupSourceList(Shiftcount))
; ..\component\EcuM\Implementation\EcuM.c	  4621  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4622        )
; ..\component\EcuM\Implementation\EcuM.c	  4623    {
; ..\component\EcuM\Implementation\EcuM.c	  4624      /* Throw a DET error if error reporting is active */
; ..\component\EcuM\Implementation\EcuM.c	  4625      errorId = ECUM_E_UNKNOWN_WAKEUP_SOURCE;
	mov	d15,#23
	j	.L94
.L93:

; ..\component\EcuM\Implementation\EcuM.c	  4626    }
; ..\component\EcuM\Implementation\EcuM.c	  4627    else
; ..\component\EcuM\Implementation\EcuM.c	  4628    {
; ..\component\EcuM\Implementation\EcuM.c	  4629    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4630  #if(ECUM_CHECKWAKEUPTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4631      /* Enter a critical area to avoid access on this procedure on another context */
; ..\component\EcuM\Implementation\EcuM.c	  4632      EcuM_EnterCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  4633  
; ..\component\EcuM\Implementation\EcuM.c	  4634      /* #30 Remove the current source from the pending check wakeup bit mask. */
; ..\component\EcuM\Implementation\EcuM.c	  4635      EcuM_PendingCheckWakeups &= (EcuM_WakeupSourceType) (~WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  4636  
; ..\component\EcuM\Implementation\EcuM.c	  4637      EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  4638  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4639  
; ..\component\EcuM\Implementation\EcuM.c	  4640  #if (ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4641      /* Enter a critical area to avoid access on this procedure on another context */
; ..\component\EcuM\Implementation\EcuM.c	  4642      EcuM_EnterCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  4643  
; ..\component\EcuM\Implementation\EcuM.c	  4644      /* #31 Check if WakeupValidation is not already active for that source. */
; ..\component\EcuM\Implementation\EcuM.c	  4645      if ((EcuM_PendingWakeups & WakeupSource) == 0u)
; ..\component\EcuM\Implementation\EcuM.c	  4646      {
; ..\component\EcuM\Implementation\EcuM.c	  4647        EcuM_ClearedPendingWakeups &= (EcuM_WakeupSourceType) (~WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  4648  
; ..\component\EcuM\Implementation\EcuM.c	  4649        /* #33 Check if validation is configured for that current source.
; ..\component\EcuM\Implementation\EcuM.c	  4650         * it is not necessary in the following case: - The value of EcuMValidationTimeout is NULL. */
; ..\component\EcuM\Implementation\EcuM.c	  4651        if ((EcuM_GetValidationTimeOfWakeupSourceList(Shiftcount) != 0u))
; ..\component\EcuM\Implementation\EcuM.c	  4652        {
; ..\component\EcuM\Implementation\EcuM.c	  4653          /* #34 Add this source to the global pending wakeups variable. */
; ..\component\EcuM\Implementation\EcuM.c	  4654          EcuM_PendingWakeups |= WakeupSource;
; ..\component\EcuM\Implementation\EcuM.c	  4655  
; ..\component\EcuM\Implementation\EcuM.c	  4656  # if (ECUM_DEFERRED_BSWM_NOTIFICATION == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4657          EcuM_BswM_BufferedWakeups |= (EcuM_WakeupSourceType)(WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  4658  # else
; ..\component\EcuM\Implementation\EcuM.c	  4659          /* #35 Report the new state of the source to the BswM only in a state where BswM is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  4660          if(EcuM_GetModuleState() > ECUM_STATE_STARTUP_TWO)
; ..\component\EcuM\Implementation\EcuM.c	  4661          {
; ..\component\EcuM\Implementation\EcuM.c	  4662            BswM_EcuM_CurrentWakeup(WakeupSource, ECUM_WKSTATUS_PENDING);
; ..\component\EcuM\Implementation\EcuM.c	  4663          }
; ..\component\EcuM\Implementation\EcuM.c	  4664  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4665  
; ..\component\EcuM\Implementation\EcuM.c	  4666          /* The timer itself is set with the next call of the EcuM_MainFunction */
; ..\component\EcuM\Implementation\EcuM.c	  4667          EcuM_SetValidationTimeoutTable(Shiftcount, ECUM_NO_VALIDATION_TIMEOUT); /* SBSW_ECUM_ACCESSVALTABLE */
; ..\component\EcuM\Implementation\EcuM.c	  4668  
; ..\component\EcuM\Implementation\EcuM.c	  4669          EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  4670        }
; ..\component\EcuM\Implementation\EcuM.c	  4671        else
; ..\component\EcuM\Implementation\EcuM.c	  4672  
; ..\component\EcuM\Implementation\EcuM.c	  4673  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4674        {
; ..\component\EcuM\Implementation\EcuM.c	  4675  #if (ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4676          /* Because in EcuM_ValidatedWakeupEvent a critical section is entered, the section must be left before */
; ..\component\EcuM\Implementation\EcuM.c	  4677          EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  4678  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4679  
; ..\component\EcuM\Implementation\EcuM.c	  4680          /* Validation is not necessary for the current source */
; ..\component\EcuM\Implementation\EcuM.c	  4681          /* #40 Call EcuM_ValidateWakeupEvent directly to validate that source. */
; ..\component\EcuM\Implementation\EcuM.c	  4682          EcuM_ValidateWakeupEvent(WakeupSource);
	mov	d4,d8
	call	EcuM_ValidateWakeupEvent
.L94:

; ..\component\EcuM\Implementation\EcuM.c	  4683        }
; ..\component\EcuM\Implementation\EcuM.c	  4684  
; ..\component\EcuM\Implementation\EcuM.c	  4685  #if (ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4686      }
; ..\component\EcuM\Implementation\EcuM.c	  4687      else
; ..\component\EcuM\Implementation\EcuM.c	  4688      {
; ..\component\EcuM\Implementation\EcuM.c	  4689        EcuM_LeaveCriticalArea_0();
; ..\component\EcuM\Implementation\EcuM.c	  4690        /* Wakeup validation for this source is already active at the moment */
; ..\component\EcuM\Implementation\EcuM.c	  4691      }
; ..\component\EcuM\Implementation\EcuM.c	  4692  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4693    }
; ..\component\EcuM\Implementation\EcuM.c	  4694  
; ..\component\EcuM\Implementation\EcuM.c	  4695    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4696  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4697    if (errorId != ECUM_E_NO_ERROR)
	jeq	d15,#0,.L95
.L591:

; ..\component\EcuM\Implementation\EcuM.c	  4698    {
; ..\component\EcuM\Implementation\EcuM.c	  4699      EcuM_Det_ReportError(ECUM_SID_SET_WAKEUP_EVENT, errorId);
	fcall	.cocofun_1
	mov	d6,#12
	mov	d7,d15
.L546:
	j	Det_ReportError
.L95:

; ..\component\EcuM\Implementation\EcuM.c	  4700    }
; ..\component\EcuM\Implementation\EcuM.c	  4701  #else
; ..\component\EcuM\Implementation\EcuM.c	  4702    ECUM_DUMMY_STATEMENT( errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  4703  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4704  }
	ret
.L398:
	
__EcuM_SetWakeupEvent_function_end:
	.size	EcuM_SetWakeupEvent,__EcuM_SetWakeupEvent_function_end-EcuM_SetWakeupEvent
.L200:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_ValidateWakeupEvent',code,cluster('EcuM_ValidateWakeupEvent')
	.sect	'.text.EcuM.EcuM_ValidateWakeupEvent'
	.align	2
	
	.global	EcuM_ValidateWakeupEvent

; ..\component\EcuM\Implementation\EcuM.c	  4705  
; ..\component\EcuM\Implementation\EcuM.c	  4706  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  4707   *  EcuM_ValidateWakeupEvent
; ..\component\EcuM\Implementation\EcuM.c	  4708   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  4709  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4710   *
; ..\component\EcuM\Implementation\EcuM.c	  4711   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4712   *
; ..\component\EcuM\Implementation\EcuM.c	  4713   *
; ..\component\EcuM\Implementation\EcuM.c	  4714   *
; ..\component\EcuM\Implementation\EcuM.c	  4715   *
; ..\component\EcuM\Implementation\EcuM.c	  4716   *
; ..\component\EcuM\Implementation\EcuM.c	  4717   *
; ..\component\EcuM\Implementation\EcuM.c	  4718   *
; ..\component\EcuM\Implementation\EcuM.c	  4719   *
; ..\component\EcuM\Implementation\EcuM.c	  4720   *
; ..\component\EcuM\Implementation\EcuM.c	  4721   *
; ..\component\EcuM\Implementation\EcuM.c	  4722   *
; ..\component\EcuM\Implementation\EcuM.c	  4723   *
; ..\component\EcuM\Implementation\EcuM.c	  4724   *
; ..\component\EcuM\Implementation\EcuM.c	  4725   *
; ..\component\EcuM\Implementation\EcuM.c	  4726   *
; ..\component\EcuM\Implementation\EcuM.c	  4727   */
; ..\component\EcuM\Implementation\EcuM.c	  4728  FUNC(void, ECUM_CODE) EcuM_ValidateWakeupEvent(VAR(EcuM_WakeupSourceType, AUTOMATIC) WakeupSource)
; Function EcuM_ValidateWakeupEvent
.L176:
EcuM_ValidateWakeupEvent:	.type	func
	mov	d8,d4
	sub.a	a10,#8
.L547:

; ..\component\EcuM\Implementation\EcuM.c	  4729  {
; ..\component\EcuM\Implementation\EcuM.c	  4730    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4731    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  4732    uint8 Shiftcount = EcuM_GetShiftCount(WakeupSource);
	mov	d9,#0
	call	EcuM_GetShiftCount
.L548:
	mov	d10,d2
.L550:

; ..\component\EcuM\Implementation\EcuM.c	  4733  
; ..\component\EcuM\Implementation\EcuM.c	  4734    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4735    /* #20 Check if the wakeup source parameter is a single bitmask and in a valid range. */
; ..\component\EcuM\Implementation\EcuM.c	  4736    /* Check if that source is in the field of possible wakeup sources. Additional there is a check that only one bit is set */
; ..\component\EcuM\Implementation\EcuM.c	  4737    if ((((EcuM_WakeupSourceType) 0u) != (((WakeupSource) - ((EcuM_WakeupSourceType) 1u)) & WakeupSource))
	add	d15,d8,#-1
.L561:
	and	d0,d15,d8
.L562:
	jne	d0,#0,.L96
.L563:

; ..\component\EcuM\Implementation\EcuM.c	  4738        || ((Shiftcount) >= (EcuM_GetMaxWakeupSourceCount()))
	jlt.u	d10,#6,.L97
.L96:

; ..\component\EcuM\Implementation\EcuM.c	  4739  #if(ECUM_VALIDOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4740        || (!EcuM_IsValidOfWakeupSourceList(Shiftcount))
; ..\component\EcuM\Implementation\EcuM.c	  4741  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4742        )
; ..\component\EcuM\Implementation\EcuM.c	  4743    {
; ..\component\EcuM\Implementation\EcuM.c	  4744      errorId = ECUM_E_UNKNOWN_WAKEUP_SOURCE;
	mov	d9,#23
	j	.L98
.L97:

; ..\component\EcuM\Implementation\EcuM.c	  4745    }
; ..\component\EcuM\Implementation\EcuM.c	  4746    else
; ..\component\EcuM\Implementation\EcuM.c	  4747    {
; ..\component\EcuM\Implementation\EcuM.c	  4748      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4749      /* Enter a critical area to avoid access on this procedure on another context */
; ..\component\EcuM\Implementation\EcuM.c	  4750      EcuM_EnterCriticalArea_0();
	call	SuspendAllInterrupts
.L564:

; ..\component\EcuM\Implementation\EcuM.c	  4751  
; ..\component\EcuM\Implementation\EcuM.c	  4752      /* #30 Check if that WakeupEvent has to be validated in the following two cases:
; ..\component\EcuM\Implementation\EcuM.c	  4753       * > Always if the WakeupSource is a ComChannel or a ComM PNC.
; ..\component\EcuM\Implementation\EcuM.c	  4754       * > For any other sources only if the Phase is != UP
; ..\component\EcuM\Implementation\EcuM.c	  4755       */
; ..\component\EcuM\Implementation\EcuM.c	  4756  #if(ECUM_NONCHANNEL_WAKEUP_RUN == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  4757  # if(ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  4758      if ((EcuM_GetModuleState() != ECUM_STATE_RUN)
	fcall	.cocofun_9
.L549:
	mov	d15,#48
.L565:
	jne	d15,d0,.L99
.L566:

; ..\component\EcuM\Implementation\EcuM.c	  4759  # else
; ..\component\EcuM\Implementation\EcuM.c	  4760      if ((EcuM_GetModuleState() != ECUM_STATE_APP_RUN)
; ..\component\EcuM\Implementation\EcuM.c	  4761  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4762  
; ..\component\EcuM\Implementation\EcuM.c	  4763  # if (ECUM_CHANNELOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4764          || (EcuM_GetChannelOfWakeupSourceList(Shiftcount) != 0xFFu)
	fcall	.cocofun_8
	ld.bu	d1,[a15]
.L567:
	mov	d15,#255
.L568:
	jeq	d15,d1,.L100
.L99:
	fcall	.cocofun_8
.L569:

; ..\component\EcuM\Implementation\EcuM.c	  4765  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4766  # if (ECUM_PNCOFCOMMPNCS == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	  4767          || (EcuM_GetComMPNCsStartIdxOfWakeupSourceList(Shiftcount) != ECUM_NO_COMMPNCSSTARTIDXOFWAKEUPSOURCELIST)
; ..\component\EcuM\Implementation\EcuM.c	  4768  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4769      )
; ..\component\EcuM\Implementation\EcuM.c	  4770  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4771      {
; ..\component\EcuM\Implementation\EcuM.c	  4772        /* #33 Mark the wakeup source as a validated wakeup source. */
; ..\component\EcuM\Implementation\EcuM.c	  4773        EcuM_ValidatedWakeups |= (EcuM_WakeupSourceType)(WakeupSource);
	movh.a	a2,#@his(EcuM_ValidatedWakeups)
	ld.w	d15,[a2]@los(EcuM_ValidatedWakeups)
.L570:
	or	d15,d8
	st.w	[a2]@los(EcuM_ValidatedWakeups),d15
.L571:

; ..\component\EcuM\Implementation\EcuM.c	  4774  
; ..\component\EcuM\Implementation\EcuM.c	  4775        /* #34 Check if the BswM notification is configured as Deferred. */
; ..\component\EcuM\Implementation\EcuM.c	  4776  #if (ECUM_DEFERRED_BSWM_NOTIFICATION == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4777        /* #35 In case of deferred notification: Mark the wakeup source as a validated wakeup source buffered for the BswM notification. */
; ..\component\EcuM\Implementation\EcuM.c	  4778        EcuM_BswM_BufferedWakeups |= (EcuM_WakeupSourceType)(WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  4779  #else
; ..\component\EcuM\Implementation\EcuM.c	  4780        /* #36 In case of no deferred notification: Report the new state of the source to the BswM only in a state where BswM is initialized. */
; ..\component\EcuM\Implementation\EcuM.c	  4781        if(EcuM_GetModuleState() > ECUM_STATE_STARTUP_TWO)
	mov	d15,#18
.L572:
	jge.u	d15,d0,.L101
.L573:

; ..\component\EcuM\Implementation\EcuM.c	  4782        {
; ..\component\EcuM\Implementation\EcuM.c	  4783          BswM_EcuM_CurrentWakeup(WakeupSource, ECUM_WKSTATUS_VALIDATED);
	mov	d5,#2
	mov	d4,d8
	call	BswM_EcuM_CurrentWakeup
.L574:
	j	.L102
.L101:

; ..\component\EcuM\Implementation\EcuM.c	  4784        }
; ..\component\EcuM\Implementation\EcuM.c	  4785        else
; ..\component\EcuM\Implementation\EcuM.c	  4786        {
; ..\component\EcuM\Implementation\EcuM.c	  4787          /* #37 If BswM is not initialized: Mark the wakeup source as a validated wakeup buffered for later BswM notification. */
; ..\component\EcuM\Implementation\EcuM.c	  4788          EcuM_BswM_BufferedWakeups |= (EcuM_WakeupSourceType)(WakeupSource);
	movh.a	a2,#@his(EcuM_BswM_BufferedWakeups)
	ld.w	d15,[a2]@los(EcuM_BswM_BufferedWakeups)
.L575:
	or	d15,d8
	st.w	[a2]@los(EcuM_BswM_BufferedWakeups),d15
.L102:

; ..\component\EcuM\Implementation\EcuM.c	  4789        }
; ..\component\EcuM\Implementation\EcuM.c	  4790  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4791  
; ..\component\EcuM\Implementation\EcuM.c	  4792  #if ((ECUM_CHANNELOFWAKEUPSOURCELIST == STD_ON) || (ECUM_PNCOFCOMMPNCS == STD_ON)) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	  4793  # if(((ECUM_CHANNELOFWAKEUPSOURCELIST == STD_ON) && (ECUM_PNCOFCOMMPNCS == STD_ON))) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	  4794        if ((EcuM_GetChannelOfWakeupSourceList(Shiftcount) != 0xFFu)
; ..\component\EcuM\Implementation\EcuM.c	  4795            || (EcuM_GetComMPNCsStartIdxOfWakeupSourceList(Shiftcount) != ECUM_NO_COMMPNCSSTARTIDXOFWAKEUPSOURCELIST))
; ..\component\EcuM\Implementation\EcuM.c	  4796  # elif (ECUM_CHANNELOFWAKEUPSOURCELIST == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM_DEPENDENCY */
; ..\component\EcuM\Implementation\EcuM.c	  4797        if (EcuM_GetChannelOfWakeupSourceList(Shiftcount) != 0xFFu)
	ld.bu	d0,[a15]
.L576:
	mov	d15,#255
.L577:
	jeq	d15,d0,.L103
.L396:

; ..\component\EcuM\Implementation\EcuM.c	  4798  # else
; ..\component\EcuM\Implementation\EcuM.c	  4799        if (EcuM_GetComMPNCsStartIdxOfWakeupSourceList(Shiftcount) != ECUM_NO_COMMPNCSSTARTIDXOFWAKEUPSOURCELIST)
; ..\component\EcuM\Implementation\EcuM.c	  4800  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4801        {
; ..\component\EcuM\Implementation\EcuM.c	  4802          /* #40 Request the init status of the ComM. */
; ..\component\EcuM\Implementation\EcuM.c	  4803          VAR(ComM_InitStatusType, AUTOMATIC) ComMStatus;
; ..\component\EcuM\Implementation\EcuM.c	  4804          (void)ComM_GetStatus(&ComMStatus); /* SBSW_ECUM_ADRESSPARAMETER_TOCOMM */
	mov.aa	a4,a10
	call	ComM_GetStatus
.L578:

; ..\component\EcuM\Implementation\EcuM.c	  4805  
; ..\component\EcuM\Implementation\EcuM.c	  4806          /* #41 In case the ComM is initialized: Report the new state of the source to the ComM. */
; ..\component\EcuM\Implementation\EcuM.c	  4807          if(ComMStatus == COMM_INIT)
	ld.bu	d15,[a10]
.L579:
	jne	d15,#1,.L104
.L580:

; ..\component\EcuM\Implementation\EcuM.c	  4808          {
; ..\component\EcuM\Implementation\EcuM.c	  4809  # if (ECUM_CHANNELOFWAKEUPSOURCELIST == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM_DEPENDENCY */
; ..\component\EcuM\Implementation\EcuM.c	  4810  #  if (ECUM_PNCOFCOMMPNCS == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	  4811            if(EcuM_GetChannelOfWakeupSourceList(Shiftcount) != 0xFFu)
; ..\component\EcuM\Implementation\EcuM.c	  4812  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4813            {
; ..\component\EcuM\Implementation\EcuM.c	  4814              ComM_EcuM_WakeUpIndication(EcuM_GetChannelOfWakeupSourceList(Shiftcount));
	ld.bu	d4,[a15]
	call	ComM_EcuM_WakeUpIndication
.L581:
	j	.L105
.L104:

; ..\component\EcuM\Implementation\EcuM.c	  4815            }
; ..\component\EcuM\Implementation\EcuM.c	  4816  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4817  # if(ECUM_PNCOFCOMMPNCS == STD_ON) /* COV_ECUM_PNCOFCOMMPNCS_QM */
; ..\component\EcuM\Implementation\EcuM.c	  4818            if(EcuM_GetComMPNCsStartIdxOfWakeupSourceList(Shiftcount) != ECUM_NO_COMMPNCSSTARTIDXOFWAKEUPSOURCELIST)
; ..\component\EcuM\Implementation\EcuM.c	  4819            {
; ..\component\EcuM\Implementation\EcuM.c	  4820              EcuM_InternalComMPNCNotification(Shiftcount);
; ..\component\EcuM\Implementation\EcuM.c	  4821            }
; ..\component\EcuM\Implementation\EcuM.c	  4822  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4823          }
; ..\component\EcuM\Implementation\EcuM.c	  4824          /* #42 In case the ComM is not initialized: Mark the wakeup source as a validated wakeup buffered for later ComM notification. */
; ..\component\EcuM\Implementation\EcuM.c	  4825          else
; ..\component\EcuM\Implementation\EcuM.c	  4826          {
; ..\component\EcuM\Implementation\EcuM.c	  4827            EcuM_ComM_BufferedWakeups |= (EcuM_WakeupSourceType)(WakeupSource);
	fcall	.cocofun_5
.L582:
	or	d8,d15
	st.w	[a15]@los(EcuM_ComM_BufferedWakeups),d8
.L105:
.L103:
.L100:

; ..\component\EcuM\Implementation\EcuM.c	  4828          }
; ..\component\EcuM\Implementation\EcuM.c	  4829        }
; ..\component\EcuM\Implementation\EcuM.c	  4830  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4831      }
; ..\component\EcuM\Implementation\EcuM.c	  4832  
; ..\component\EcuM\Implementation\EcuM.c	  4833  #if (ECUM_VALIDATIONTIMEOFWAKEUPSOURCELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4834      /* #50 Remove the wakeup source from the pending wakeup sources. */
; ..\component\EcuM\Implementation\EcuM.c	  4835      EcuM_PendingWakeups &= (EcuM_WakeupSourceType) (~WakeupSource);
; ..\component\EcuM\Implementation\EcuM.c	  4836  
; ..\component\EcuM\Implementation\EcuM.c	  4837      /* #51 Set the Timeout Table of this source to NO_TIMEOUT_SET to mark it as inactive. */
; ..\component\EcuM\Implementation\EcuM.c	  4838      EcuM_SetValidationTimeoutTable(Shiftcount, ECUM_NO_VALIDATION_TIMEOUT); /* SBSW_ECUM_ACCESSVALTABLE */
; ..\component\EcuM\Implementation\EcuM.c	  4839  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4840  
; ..\component\EcuM\Implementation\EcuM.c	  4841      EcuM_LeaveCriticalArea_0();
	call	ResumeAllInterrupts
.L98:

; ..\component\EcuM\Implementation\EcuM.c	  4842    }
; ..\component\EcuM\Implementation\EcuM.c	  4843  
; ..\component\EcuM\Implementation\EcuM.c	  4844    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4845  #if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4846    if (errorId != ECUM_E_NO_ERROR)
	jeq	d9,#0,.L106
.L583:

; ..\component\EcuM\Implementation\EcuM.c	  4847    {
; ..\component\EcuM\Implementation\EcuM.c	  4848      EcuM_Det_ReportError(ECUM_SID_VALIDATE_WAKEUP_EVENT, errorId);
	fcall	.cocofun_1
	mov	d6,#20
	mov	d7,d9
.L551:
	j	Det_ReportError
.L106:

; ..\component\EcuM\Implementation\EcuM.c	  4849    }
; ..\component\EcuM\Implementation\EcuM.c	  4850  #else
; ..\component\EcuM\Implementation\EcuM.c	  4851    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  4852  #endif
; ..\component\EcuM\Implementation\EcuM.c	  4853  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	ret
.L389:
	
__EcuM_ValidateWakeupEvent_function_end:
	.size	EcuM_ValidateWakeupEvent,__EcuM_ValidateWakeupEvent_function_end-EcuM_ValidateWakeupEvent
.L195:
	; End of function
	
	.sdecl	'.text.EcuM..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.EcuM..cocofun_8'
	.align	2
; Function .cocofun_8
.L178:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:0
	movh.a	a15,#@his(EcuM_WakeupSourceList)
	lea	a15,[a15]@los(EcuM_WakeupSourceList)
	addsc.a	a15,a15,d10,#0
	fret
.L365:
	; End of function
	.sdecl	'.text.EcuM.EcuM_GoHalt',code,cluster('EcuM_GoHalt')
	.sect	'.text.EcuM.EcuM_GoHalt'
	.align	2
	
	.global	EcuM_GoHalt

; ..\component\EcuM\Implementation\EcuM.c	  4854  
; ..\component\EcuM\Implementation\EcuM.c	  4855  #if(ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  4856  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  4857   *  EcuM_GoHalt
; ..\component\EcuM\Implementation\EcuM.c	  4858   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  4859  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4860   *
; ..\component\EcuM\Implementation\EcuM.c	  4861   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4862   *
; ..\component\EcuM\Implementation\EcuM.c	  4863   *
; ..\component\EcuM\Implementation\EcuM.c	  4864   *
; ..\component\EcuM\Implementation\EcuM.c	  4865   *
; ..\component\EcuM\Implementation\EcuM.c	  4866   *
; ..\component\EcuM\Implementation\EcuM.c	  4867   *
; ..\component\EcuM\Implementation\EcuM.c	  4868   *
; ..\component\EcuM\Implementation\EcuM.c	  4869   */
; ..\component\EcuM\Implementation\EcuM.c	  4870  FUNC(Std_ReturnType, ECUM_CODE) EcuM_GoHalt(void)
; Function EcuM_GoHalt
.L180:
EcuM_GoHalt:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  4871  {
; ..\component\EcuM\Implementation\EcuM.c	  4872    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4873    Std_ReturnType retVal = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  4874  
; ..\component\EcuM\Implementation\EcuM.c	  4875  # if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  4876    CoreIdType coreID = GetCoreID();
; ..\component\EcuM\Implementation\EcuM.c	  4877  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4878  
; ..\component\EcuM\Implementation\EcuM.c	  4879  # if(ECUM_SLEEPMODELIST == STD_ON) && (ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4880  #  if(ECUM_ISDEF_ECUMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  4881    EcuM_SizeOfPartitionDataType applicationIdx = EcuM_InternalGetPartitionIdx();
; ..\component\EcuM\Implementation\EcuM.c	  4882  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4883  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4884  
; ..\component\EcuM\Implementation\EcuM.c	  4885    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4886  # if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  4887    /* #20 In case of a multicore ECU: Check if the returned coreId is a valid one. */
; ..\component\EcuM\Implementation\EcuM.c	  4888  #  if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4889    if (coreID >= EcuM_GetSizeOfCoreStatus())
; ..\component\EcuM\Implementation\EcuM.c	  4890    {
; ..\component\EcuM\Implementation\EcuM.c	  4891      EcuM_ErrorHook(ECUM_E_HOOK_INVALID_COREID);
; ..\component\EcuM\Implementation\EcuM.c	  4892    }
; ..\component\EcuM\Implementation\EcuM.c	  4893    else
; ..\component\EcuM\Implementation\EcuM.c	  4894  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4895  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4896    {
; ..\component\EcuM\Implementation\EcuM.c	  4897      /* #21 Check if at least one sleepmode is configured. */
; ..\component\EcuM\Implementation\EcuM.c	  4898  # if(ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4899      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4900  #  if(ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4901  #   if(ECUM_ISDEF_ECUMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  4902      /* #22 In case of multiple partitions: Check if the current partition is an EcuM partition. */
; ..\component\EcuM\Implementation\EcuM.c	  4903     if((applicationIdx < EcuM_GetSizeOfPartitionData())
; ..\component\EcuM\Implementation\EcuM.c	  4904        && (EcuM_IsEcuMPartitionOfPartitionData(applicationIdx))
; ..\component\EcuM\Implementation\EcuM.c	  4905        )
; ..\component\EcuM\Implementation\EcuM.c	  4906  #   endif
; ..\component\EcuM\Implementation\EcuM.c	  4907  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4908      {
; ..\component\EcuM\Implementation\EcuM.c	  4909        /* #30 On multicore ECUs check on which core this API was called. */
; ..\component\EcuM\Implementation\EcuM.c	  4910  #  if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  4911        if (coreID != ECUM_CORE_ID_BSW)
; ..\component\EcuM\Implementation\EcuM.c	  4912        {
; ..\component\EcuM\Implementation\EcuM.c	  4913          /* #31 In case of a slave core, call the internal API to enter the sleep mode on a slave core. */
; ..\component\EcuM\Implementation\EcuM.c	  4914          retVal = EcuM_EnterSleepOnSlave(coreID);
; ..\component\EcuM\Implementation\EcuM.c	  4915        }
; ..\component\EcuM\Implementation\EcuM.c	  4916        else
; ..\component\EcuM\Implementation\EcuM.c	  4917  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4918        {
; ..\component\EcuM\Implementation\EcuM.c	  4919          /* #32 In case of a BSW core, call the internal API to enter the sleep mode on the BSW core. */
; ..\component\EcuM\Implementation\EcuM.c	  4920          retVal = EcuM_EnterSleep( ECUM_ENTER_HALT);
; ..\component\EcuM\Implementation\EcuM.c	  4921        }
; ..\component\EcuM\Implementation\EcuM.c	  4922      }
; ..\component\EcuM\Implementation\EcuM.c	  4923  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4924    }
; ..\component\EcuM\Implementation\EcuM.c	  4925    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4926  # if((ECUM_DEV_ERROR_REPORT == STD_ON) && (ECUM_SLEEPMODELIST == STD_OFF))
; ..\component\EcuM\Implementation\EcuM.c	  4927    {
; ..\component\EcuM\Implementation\EcuM.c	  4928      EcuM_Det_ReportError(ECUM_SID_GO_HALT, ECUM_E_NO_SLEEPMODE_CONFIGURED);
	fcall	.cocofun_1
	mov	d6,#32
	mov	d7,#35
	call	Det_ReportError
.L774:

; ..\component\EcuM\Implementation\EcuM.c	  4929    }
; ..\component\EcuM\Implementation\EcuM.c	  4930  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4931  
; ..\component\EcuM\Implementation\EcuM.c	  4932    return retVal;
; ..\component\EcuM\Implementation\EcuM.c	  4933  }
	mov	d2,#1
	ret
.L461:
	
__EcuM_GoHalt_function_end:
	.size	EcuM_GoHalt,__EcuM_GoHalt_function_end-EcuM_GoHalt
.L280:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_GoPoll',code,cluster('EcuM_GoPoll')
	.sect	'.text.EcuM.EcuM_GoPoll'
	.align	2
	
	.global	EcuM_GoPoll

; ..\component\EcuM\Implementation\EcuM.c	  4934  
; ..\component\EcuM\Implementation\EcuM.c	  4935  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  4936   *  EcuM_GoPoll
; ..\component\EcuM\Implementation\EcuM.c	  4937   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  4938  /*!
; ..\component\EcuM\Implementation\EcuM.c	  4939   *
; ..\component\EcuM\Implementation\EcuM.c	  4940   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  4941   *
; ..\component\EcuM\Implementation\EcuM.c	  4942   *
; ..\component\EcuM\Implementation\EcuM.c	  4943   *
; ..\component\EcuM\Implementation\EcuM.c	  4944   *
; ..\component\EcuM\Implementation\EcuM.c	  4945   *
; ..\component\EcuM\Implementation\EcuM.c	  4946   *
; ..\component\EcuM\Implementation\EcuM.c	  4947   *
; ..\component\EcuM\Implementation\EcuM.c	  4948   */
; ..\component\EcuM\Implementation\EcuM.c	  4949  FUNC(Std_ReturnType, ECUM_CODE) EcuM_GoPoll(void)
; Function EcuM_GoPoll
.L182:
EcuM_GoPoll:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  4950  {
; ..\component\EcuM\Implementation\EcuM.c	  4951    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4952    Std_ReturnType retVal = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  4953  
; ..\component\EcuM\Implementation\EcuM.c	  4954  # if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  4955    CoreIdType coreID = GetCoreID();
; ..\component\EcuM\Implementation\EcuM.c	  4956  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4957  
; ..\component\EcuM\Implementation\EcuM.c	  4958  # if(ECUM_SLEEPMODELIST == STD_ON) && (ECUM_POLLINGOFSLEEPMODELIST == STD_ON) && (ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4959  #  if(ECUM_ISDEF_ECUMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  4960    EcuM_SizeOfPartitionDataType applicationIdx = EcuM_InternalGetPartitionIdx();
; ..\component\EcuM\Implementation\EcuM.c	  4961  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4962  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4963  
; ..\component\EcuM\Implementation\EcuM.c	  4964    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4965  # if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  4966    /* #20 In case of a multicore ECU: Check if the returned coreId is a valid one. */
; ..\component\EcuM\Implementation\EcuM.c	  4967  #  if (ECUM_DEV_ERROR_DETECT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4968    if (coreID >= EcuM_GetSizeOfCoreStatus())
; ..\component\EcuM\Implementation\EcuM.c	  4969    {
; ..\component\EcuM\Implementation\EcuM.c	  4970      EcuM_ErrorHook(ECUM_E_HOOK_INVALID_COREID);
; ..\component\EcuM\Implementation\EcuM.c	  4971    }
; ..\component\EcuM\Implementation\EcuM.c	  4972    else
; ..\component\EcuM\Implementation\EcuM.c	  4973  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4974  # endif
; ..\component\EcuM\Implementation\EcuM.c	  4975  
; ..\component\EcuM\Implementation\EcuM.c	  4976    {
; ..\component\EcuM\Implementation\EcuM.c	  4977      /* #22 Check if at least one sleepmode is configured. */
; ..\component\EcuM\Implementation\EcuM.c	  4978  # if ((ECUM_SLEEPMODELIST == STD_ON) && (ECUM_POLLINGOFSLEEPMODELIST == STD_ON))
; ..\component\EcuM\Implementation\EcuM.c	  4979    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  4980  #  if(ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  4981  #   if(ECUM_ISDEF_ECUMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  4982      /* #21 In case of multiple partitions: Check if the current partition is an EcuM partition. */
; ..\component\EcuM\Implementation\EcuM.c	  4983      if((applicationIdx < EcuM_GetSizeOfPartitionData())
; ..\component\EcuM\Implementation\EcuM.c	  4984         && (EcuM_IsEcuMPartitionOfPartitionData(applicationIdx))
; ..\component\EcuM\Implementation\EcuM.c	  4985         )
; ..\component\EcuM\Implementation\EcuM.c	  4986  #   endif
; ..\component\EcuM\Implementation\EcuM.c	  4987  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4988      {
; ..\component\EcuM\Implementation\EcuM.c	  4989        /* #30 On multicore ECUs check on which core this API was called. */
; ..\component\EcuM\Implementation\EcuM.c	  4990  #  if(ECUM_NUMBER_OF_CORES > 1u)
; ..\component\EcuM\Implementation\EcuM.c	  4991        if (coreID != ECUM_CORE_ID_BSW)
; ..\component\EcuM\Implementation\EcuM.c	  4992        {
; ..\component\EcuM\Implementation\EcuM.c	  4993          /* #31 In case of a slave core, call the internal API to enter the sleep mode on a slave core. */
; ..\component\EcuM\Implementation\EcuM.c	  4994          retVal = EcuM_EnterSleepOnSlave(coreID);
; ..\component\EcuM\Implementation\EcuM.c	  4995        }
; ..\component\EcuM\Implementation\EcuM.c	  4996        else
; ..\component\EcuM\Implementation\EcuM.c	  4997  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  4998        {
; ..\component\EcuM\Implementation\EcuM.c	  4999          /* #32 In case of a BSW core, call the internal API to enter the sleep mode on the BSW core. */
; ..\component\EcuM\Implementation\EcuM.c	  5000          retVal = EcuM_EnterSleep( ECUM_ENTER_POLL);
; ..\component\EcuM\Implementation\EcuM.c	  5001        }
; ..\component\EcuM\Implementation\EcuM.c	  5002      }
; ..\component\EcuM\Implementation\EcuM.c	  5003  # endif
; ..\component\EcuM\Implementation\EcuM.c	  5004    }
; ..\component\EcuM\Implementation\EcuM.c	  5005    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5006  # if((ECUM_DEV_ERROR_REPORT == STD_ON) && ((ECUM_SLEEPMODELIST == STD_OFF) || (ECUM_POLLINGOFSLEEPMODELIST == STD_OFF)))
; ..\component\EcuM\Implementation\EcuM.c	  5007    {
; ..\component\EcuM\Implementation\EcuM.c	  5008      EcuM_Det_ReportError(ECUM_SID_GO_POLL, ECUM_E_NO_SLEEPMODE_CONFIGURED);
	fcall	.cocofun_1
	mov	d6,#33
	mov	d7,#35
	call	Det_ReportError
.L779:

; ..\component\EcuM\Implementation\EcuM.c	  5009    }
; ..\component\EcuM\Implementation\EcuM.c	  5010  # endif
; ..\component\EcuM\Implementation\EcuM.c	  5011  
; ..\component\EcuM\Implementation\EcuM.c	  5012    return retVal;
; ..\component\EcuM\Implementation\EcuM.c	  5013  }
	mov	d2,#1
	ret
.L462:
	
__EcuM_GoPoll_function_end:
	.size	EcuM_GoPoll,__EcuM_GoPoll_function_end-EcuM_GoPoll
.L285:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_GoToSelectedShutdownTarget',code,cluster('EcuM_GoToSelectedShutdownTarget')
	.sect	'.text.EcuM.EcuM_GoToSelectedShutdownTarget'
	.align	2
	
	.global	EcuM_GoToSelectedShutdownTarget

; ..\component\EcuM\Implementation\EcuM.c	  5014  
; ..\component\EcuM\Implementation\EcuM.c	  5015  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  5016   *  EcuM_GoToSelectedShutdownTarget
; ..\component\EcuM\Implementation\EcuM.c	  5017   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  5018  /*!
; ..\component\EcuM\Implementation\EcuM.c	  5019   *
; ..\component\EcuM\Implementation\EcuM.c	  5020   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  5021   *
; ..\component\EcuM\Implementation\EcuM.c	  5022   *
; ..\component\EcuM\Implementation\EcuM.c	  5023   *
; ..\component\EcuM\Implementation\EcuM.c	  5024   *
; ..\component\EcuM\Implementation\EcuM.c	  5025   */
; ..\component\EcuM\Implementation\EcuM.c	  5026  FUNC(Std_ReturnType, ECUM_CODE) EcuM_GoToSelectedShutdownTarget(void)
; Function EcuM_GoToSelectedShutdownTarget
.L184:
EcuM_GoToSelectedShutdownTarget:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  5027  {
; ..\component\EcuM\Implementation\EcuM.c	  5028    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5029    Std_ReturnType retVal;
; ..\component\EcuM\Implementation\EcuM.c	  5030  # if (ECUM_SLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  5031    EcuM_StateType localShutdownTarget;
; ..\component\EcuM\Implementation\EcuM.c	  5032    uint8 localShutdownMode;
; ..\component\EcuM\Implementation\EcuM.c	  5033  
; ..\component\EcuM\Implementation\EcuM.c	  5034    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5035    EcuM_InternalGetShutdownTargetAndMode(&localShutdownTarget, &localShutdownMode); /* SBSW_ECUM_POINTER_TO_LOCAL_VARIABLES */
; ..\component\EcuM\Implementation\EcuM.c	  5036    /* Check if the current shutdown target is set to Sleep, Reset or Off. */
; ..\component\EcuM\Implementation\EcuM.c	  5037    if (localShutdownTarget == ECUM_STATE_SLEEP)
; ..\component\EcuM\Implementation\EcuM.c	  5038    {
; ..\component\EcuM\Implementation\EcuM.c	  5039  #  if (ECUM_POLLINGOFSLEEPMODELIST == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  5040      /*  In case of Sleep differ if the current sleepmode needs polling or not. */
; ..\component\EcuM\Implementation\EcuM.c	  5041      if (EcuM_IsPollingOfSleepModeList(localShutdownMode))
; ..\component\EcuM\Implementation\EcuM.c	  5042      {
; ..\component\EcuM\Implementation\EcuM.c	  5043        /* In case the sleepmode needs polling, call the corresponding EcuM API. */
; ..\component\EcuM\Implementation\EcuM.c	  5044        retVal = EcuM_GoPoll();
; ..\component\EcuM\Implementation\EcuM.c	  5045      }
; ..\component\EcuM\Implementation\EcuM.c	  5046      else
; ..\component\EcuM\Implementation\EcuM.c	  5047  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  5048      {
; ..\component\EcuM\Implementation\EcuM.c	  5049        /* In case the sleepmode does not need polling, call the corresponding EcuM API. */
; ..\component\EcuM\Implementation\EcuM.c	  5050        retVal = EcuM_GoHalt();
; ..\component\EcuM\Implementation\EcuM.c	  5051      }
; ..\component\EcuM\Implementation\EcuM.c	  5052    }
; ..\component\EcuM\Implementation\EcuM.c	  5053    else
; ..\component\EcuM\Implementation\EcuM.c	  5054  # endif
; ..\component\EcuM\Implementation\EcuM.c	  5055    {
; ..\component\EcuM\Implementation\EcuM.c	  5056      /* In case of Off / Reset, call the corresponding EcuM API. */
; ..\component\EcuM\Implementation\EcuM.c	  5057      retVal = EcuM_GoDown( ECUM_MODULE_ID);
	mov	d4,#10
	j	EcuM_GoDown
.L463:
	
__EcuM_GoToSelectedShutdownTarget_function_end:
	.size	EcuM_GoToSelectedShutdownTarget,__EcuM_GoToSelectedShutdownTarget_function_end-EcuM_GoToSelectedShutdownTarget
.L290:
	; End of function
	
	.sdecl	'.text.EcuM.EcuM_GoDown',code,cluster('EcuM_GoDown')
	.sect	'.text.EcuM.EcuM_GoDown'
	.align	2
	
	.global	EcuM_GoDown

; ..\component\EcuM\Implementation\EcuM.c	  5058    }
; ..\component\EcuM\Implementation\EcuM.c	  5059  
; ..\component\EcuM\Implementation\EcuM.c	  5060    return retVal;
; ..\component\EcuM\Implementation\EcuM.c	  5061  }
; ..\component\EcuM\Implementation\EcuM.c	  5062  #endif
; ..\component\EcuM\Implementation\EcuM.c	  5063  
; ..\component\EcuM\Implementation\EcuM.c	  5064  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  5065   *  EcuM_GoDown
; ..\component\EcuM\Implementation\EcuM.c	  5066   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  5067  /*!
; ..\component\EcuM\Implementation\EcuM.c	  5068   *
; ..\component\EcuM\Implementation\EcuM.c	  5069   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  5070   *
; ..\component\EcuM\Implementation\EcuM.c	  5071   *
; ..\component\EcuM\Implementation\EcuM.c	  5072   *
; ..\component\EcuM\Implementation\EcuM.c	  5073   *
; ..\component\EcuM\Implementation\EcuM.c	  5074   *
; ..\component\EcuM\Implementation\EcuM.c	  5075   *
; ..\component\EcuM\Implementation\EcuM.c	  5076   *
; ..\component\EcuM\Implementation\EcuM.c	  5077   *
; ..\component\EcuM\Implementation\EcuM.c	  5078   *
; ..\component\EcuM\Implementation\EcuM.c	  5079   *
; ..\component\EcuM\Implementation\EcuM.c	  5080   *
; ..\component\EcuM\Implementation\EcuM.c	  5081   *
; ..\component\EcuM\Implementation\EcuM.c	  5082   *
; ..\component\EcuM\Implementation\EcuM.c	  5083   *
; ..\component\EcuM\Implementation\EcuM.c	  5084   *
; ..\component\EcuM\Implementation\EcuM.c	  5085   *
; ..\component\EcuM\Implementation\EcuM.c	  5086   */
; ..\component\EcuM\Implementation\EcuM.c	  5087  #if(ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  5088  FUNC(Std_ReturnType, ECUM_CODE) EcuM_GoDown(VAR(uint16, AUTOMATIC) caller)
; Function EcuM_GoDown
.L186:
EcuM_GoDown:	.type	func

; ..\component\EcuM\Implementation\EcuM.c	  5089  #else
; ..\component\EcuM\Implementation\EcuM.c	  5090  ECUM_LOCAL_INLINE FUNC(Std_ReturnType, ECUM_CODE) EcuM_InternalGoDown(void)
; ..\component\EcuM\Implementation\EcuM.c	  5091  #endif
; ..\component\EcuM\Implementation\EcuM.c	  5092  {
; ..\component\EcuM\Implementation\EcuM.c	  5093    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5094    Std_ReturnType retVal = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  5095    uint8 errorId = ECUM_E_NO_ERROR;
	mov	d8,#1
	fcall	.cocofun_7
.L788:

; ..\component\EcuM\Implementation\EcuM.c	  5096  
; ..\component\EcuM\Implementation\EcuM.c	  5097  #if(ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  5098    EcuM_SizeOfPartitionDataType applicationIdx = EcuM_InternalGetPartitionIdx();
; ..\component\EcuM\Implementation\EcuM.c	  5099    if ((GetCoreID() == ECUM_CORE_ID_BSW )
; ..\component\EcuM\Implementation\EcuM.c	  5100  # if(ECUM_ISDEF_ECUMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  5101          && (applicationIdx < EcuM_GetSizeOfPartitionData())
; ..\component\EcuM\Implementation\EcuM.c	  5102          && (EcuM_IsEcuMPartitionOfPartitionData(applicationIdx))
; ..\component\EcuM\Implementation\EcuM.c	  5103  # endif
; ..\component\EcuM\Implementation\EcuM.c	  5104      )
; ..\component\EcuM\Implementation\EcuM.c	  5105  #endif
; ..\component\EcuM\Implementation\EcuM.c	  5106    {
; ..\component\EcuM\Implementation\EcuM.c	  5107  
; ..\component\EcuM\Implementation\EcuM.c	  5108  #if (ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  5109      /* Separate checks are necessary because of compiler warnings if ECUM_GODOWNALLOWEDOFFLEXUSER is not available */
; ..\component\EcuM\Implementation\EcuM.c	  5110  # if (ECUM_GODOWNALLOWEDOFFLEXUSER == STD_ON) /* COV_ECUM_GODOWNALLOWEDOFFLEXUSER_QM */
; ..\component\EcuM\Implementation\EcuM.c	  5111      VAR(uint8_least, AUTOMATIC) LoopCount;
; ..\component\EcuM\Implementation\EcuM.c	  5112  # else
; ..\component\EcuM\Implementation\EcuM.c	  5113      /* dummy assignment to prevent compiler warnings on most of the compilers. */
; ..\component\EcuM\Implementation\EcuM.c	  5114      ECUM_DUMMY_STATEMENT(caller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  5115  # endif
; ..\component\EcuM\Implementation\EcuM.c	  5116  #endif
; ..\component\EcuM\Implementation\EcuM.c	  5117  
; ..\component\EcuM\Implementation\EcuM.c	  5118      /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5119      /* #20 Check if the EcuM is in the correct state to proceed a shutdown. */
; ..\component\EcuM\Implementation\EcuM.c	  5120  #if (ECUM_DEV_ERROR_DETECT == STD_ON && ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  5121      if ( EcuM_GetModuleState() != ECUM_STATE_RUN)
	mov	d15,#48
.L789:
	jeq	d15,d0,.L110
.L790:

; ..\component\EcuM\Implementation\EcuM.c	  5122      {
; ..\component\EcuM\Implementation\EcuM.c	  5123        errorId = ECUM_E_MODULE_NOT_IN_RUN_STATE;
	mov	d9,#34
	j	.L111
.L110:

; ..\component\EcuM\Implementation\EcuM.c	  5124      }
; ..\component\EcuM\Implementation\EcuM.c	  5125      else
; ..\component\EcuM\Implementation\EcuM.c	  5126  #endif
; ..\component\EcuM\Implementation\EcuM.c	  5127      {
; ..\component\EcuM\Implementation\EcuM.c	  5128        /* #21 In the case of defensive behavior: Check if the passed caller is allowed to shut down the ECU. */
; ..\component\EcuM\Implementation\EcuM.c	  5129  
; ..\component\EcuM\Implementation\EcuM.c	  5130        /* Check if the defensive behavior is active at the moment, and than check if the current caller is one of the allowed
; ..\component\EcuM\Implementation\EcuM.c	  5131         * Users for a shutdown call.*/
; ..\component\EcuM\Implementation\EcuM.c	  5132  #if (ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  5133        /* Separate checks are necessary because of compiler warnings if ECUM_GODOWNALLOWEDOFFLEXUSER is not available */
; ..\component\EcuM\Implementation\EcuM.c	  5134  # if (ECUM_GODOWNALLOWEDOFFLEXUSER == STD_ON) /* COV_ECUM_GODOWNALLOWEDOFFLEXUSER_QM */
; ..\component\EcuM\Implementation\EcuM.c	  5135  
; ..\component\EcuM\Implementation\EcuM.c	  5136        for(LoopCount = 0u; LoopCount < EcuM_GetSizeOfFlexUser(); LoopCount++)
; ..\component\EcuM\Implementation\EcuM.c	  5137        {
; ..\component\EcuM\Implementation\EcuM.c	  5138          /* Iterate over all configured EcuM Flex users and try to find the passed caller id. */
; ..\component\EcuM\Implementation\EcuM.c	  5139          if((EcuM_GetModuleIdOfFlexUser(LoopCount) == caller)
; ..\component\EcuM\Implementation\EcuM.c	  5140  #  if(ECUM_ISDEF_GODOWNALLOWEDOFFLEXUSER == STD_OFF) /* COV_ECUM_GODOWNALLOWEDOFFLEXUSER_QM_DEPENDENCY */
; ..\component\EcuM\Implementation\EcuM.c	  5141              && (EcuM_IsGoDownAllowedOfFlexUser(LoopCount))
; ..\component\EcuM\Implementation\EcuM.c	  5142  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  5143          )
; ..\component\EcuM\Implementation\EcuM.c	  5144          {
; ..\component\EcuM\Implementation\EcuM.c	  5145            retVal = E_OK;
; ..\component\EcuM\Implementation\EcuM.c	  5146            break;
; ..\component\EcuM\Implementation\EcuM.c	  5147          }
; ..\component\EcuM\Implementation\EcuM.c	  5148        }
; ..\component\EcuM\Implementation\EcuM.c	  5149  
; ..\component\EcuM\Implementation\EcuM.c	  5150        if(retVal == E_NOT_OK)
; ..\component\EcuM\Implementation\EcuM.c	  5151        {
; ..\component\EcuM\Implementation\EcuM.c	  5152          /* If no user was found and the corresponding Dem event is configured, report the error to the Dem. */
; ..\component\EcuM\Implementation\EcuM.c	  5153  #  if defined(ECUM_E_IMPROPER_CALLER) /* COV_ECUM_GODOWNALLOWEDOFFLEXUSER_QM_DEPENDENCY */
; ..\component\EcuM\Implementation\EcuM.c	  5154          Dem_ReportErrorStatus(ECUM_E_IMPROPER_CALLER, DEM_EVENT_STATUS_FAILED);
; ..\component\EcuM\Implementation\EcuM.c	  5155  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  5156        }
; ..\component\EcuM\Implementation\EcuM.c	  5157  
; ..\component\EcuM\Implementation\EcuM.c	  5158        /* Start the OffPreOS Sequence if checking for valid caller was not necessary or the check was true */
; ..\component\EcuM\Implementation\EcuM.c	  5159        else
; ..\component\EcuM\Implementation\EcuM.c	  5160  # else
; ..\component\EcuM\Implementation\EcuM.c	  5161        retVal = E_OK;
	mov	d8,#0
.L791:

; ..\component\EcuM\Implementation\EcuM.c	  5162  # endif /* ECUM_GODOWNALLOWEDOFFLEXUSER == STD_ON) */
; ..\component\EcuM\Implementation\EcuM.c	  5163  
; ..\component\EcuM\Implementation\EcuM.c	  5164  #else
; ..\component\EcuM\Implementation\EcuM.c	  5165        retVal = E_OK;
; ..\component\EcuM\Implementation\EcuM.c	  5166  #endif /* (ECUM_FIXED_BEHAVIOR != STD_ON */
; ..\component\EcuM\Implementation\EcuM.c	  5167        {
; ..\component\EcuM\Implementation\EcuM.c	  5168          /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5169  
; ..\component\EcuM\Implementation\EcuM.c	  5170  #if(ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  5171          EcuM_SetModuleState(ECUM_STATE_GO_OFF_ONE); /* SBSW_ECUM_CSL_VAR_ACCESS */
	mov	d15,#77
	st.b	[a15],d15
.L792:

; ..\component\EcuM\Implementation\EcuM.c	  5172  
; ..\component\EcuM\Implementation\EcuM.c	  5173          /* #30 Execute user-specific code shortly before Deinitialize BswM and SchM (EcuM_OnGoOffOne()).*/
; ..\component\EcuM\Implementation\EcuM.c	  5174          EcuM_OnGoOffOne();
	call	EcuM_OnGoOffOne
.L552:

; ..\component\EcuM\Implementation\EcuM.c	  5175  #endif
; ..\component\EcuM\Implementation\EcuM.c	  5176  
; ..\component\EcuM\Implementation\EcuM.c	  5177          /* 31 Synchronize different cores with EcuM instances in case of Multicore. */
; ..\component\EcuM\Implementation\EcuM.c	  5178  #if(ECUM_SLAVE_CORE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  5179          EcuM_SetCoreStatusValue(ECUM_CORE_ID_BSW, ECUM_CORESTATUS_OFF); /* SBSW_SETCORESTATUS_BSWCOREID */
; ..\component\EcuM\Implementation\EcuM.c	  5180          EcuM_ShutdownSynchronization(ECUM_CORESTATUS_OFF);
; ..\component\EcuM\Implementation\EcuM.c	  5181  #endif
; ..\component\EcuM\Implementation\EcuM.c	  5182  
; ..\component\EcuM\Implementation\EcuM.c	  5183          /* #32 Deinitialize the BswM and the SchM. */
; ..\component\EcuM\Implementation\EcuM.c	  5184          BswM_Deinit();
	call	BswM_Deinit
.L793:

; ..\component\EcuM\Implementation\EcuM.c	  5185          SchM_Deinit();
	call	SchM_Deinit
.L794:

; ..\component\EcuM\Implementation\EcuM.c	  5186  
; ..\component\EcuM\Implementation\EcuM.c	  5187          /* #33 Only if the CurrentShutdownTarget is OFF, the EcuM checks again for pending wakeups. */
; ..\component\EcuM\Implementation\EcuM.c	  5188          if (EcuM_CurrentShutdownTarget == ECUM_STATE_OFF)
	movh.a	a15,#@his(EcuM_CurrentShutdownTarget)
	ld.bu	d0,[a15]@los(EcuM_CurrentShutdownTarget)
.L795:
	mov	d15,#128
.L796:
	jne	d15,d0,.L112
.L797:

; ..\component\EcuM\Implementation\EcuM.c	  5189          {
; ..\component\EcuM\Implementation\EcuM.c	  5190            /* Check if there are pending Wakeups, if so, set the shutdown target to Reset. */
; ..\component\EcuM\Implementation\EcuM.c	  5191            EcuM_EnterCriticalArea_0();
	call	SuspendAllInterrupts
.L798:

; ..\component\EcuM\Implementation\EcuM.c	  5192  
; ..\component\EcuM\Implementation\EcuM.c	  5193            if (ECUM_COMBINEDWAKEUPS != ECUM_WKSOURCE_NONE)
; ..\component\EcuM\Implementation\EcuM.c	  5194            {
; ..\component\EcuM\Implementation\EcuM.c	  5195              /* #34 In case of a detected pending wakeup, set the ShutdownTarget to reset and change the mode to ECUM_RESET_WAKEUP. */
; ..\component\EcuM\Implementation\EcuM.c	  5196  #if defined(EcuMConf_EcuMResetMode_ECUM_RESET_WAKEUP)
; ..\component\EcuM\Implementation\EcuM.c	  5197              /*APTIV PATCH*/
; ..\component\EcuM\Implementation\EcuM.c	  5198  			//EcuM_InternalSetShutdownTargetAndMode(ECUM_STATE_RESET, EcuMConf_EcuMResetMode_ECUM_RESET_WAKEUP);
; ..\component\EcuM\Implementation\EcuM.c	  5199  #else
; ..\component\EcuM\Implementation\EcuM.c	  5200              /* EcuMConf_EcuMResetMode_ECUM_RESET_WAKEUP is not configured. Set EcuM_CurrentShutdownMode to a not used mode.*/
; ..\component\EcuM\Implementation\EcuM.c	  5201              EcuM_InternalSetShutdownTargetAndMode(ECUM_STATE_RESET, 0xFFu);
; ..\component\EcuM\Implementation\EcuM.c	  5202  #endif
; ..\component\EcuM\Implementation\EcuM.c	  5203            }
; ..\component\EcuM\Implementation\EcuM.c	  5204  
; ..\component\EcuM\Implementation\EcuM.c	  5205            EcuM_LeaveCriticalArea_0();
	call	ResumeAllInterrupts
.L112:

; ..\component\EcuM\Implementation\EcuM.c	  5206          }
; ..\component\EcuM\Implementation\EcuM.c	  5207  
; ..\component\EcuM\Implementation\EcuM.c	  5208          /* #35 Shut down the ASR OS, the routine expects an ErrorCode (E_OK) as parameter. */
; ..\component\EcuM\Implementation\EcuM.c	  5209          EcuM_ShutdownOS(E_OK);
	mov	d4,#0
	call	EcuM_ShutdownOS
.L111:

; ..\component\EcuM\Implementation\EcuM.c	  5210        }
; ..\component\EcuM\Implementation\EcuM.c	  5211      }
; ..\component\EcuM\Implementation\EcuM.c	  5212  
; ..\component\EcuM\Implementation\EcuM.c	  5213      /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5214  #if (ECUM_DEV_ERROR_REPORT == STD_ON && ECUM_FIXED_BEHAVIOR == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  5215      if (errorId != ECUM_E_NO_ERROR)
	jeq	d9,#0,.L113
.L799:

; ..\component\EcuM\Implementation\EcuM.c	  5216      {
; ..\component\EcuM\Implementation\EcuM.c	  5217        EcuM_Det_ReportError(ECUM_SID_GO_DOWN, errorId);
	fcall	.cocofun_1
	mov	d6,#31
	mov	d7,d9
	call	Det_ReportError
.L113:

; ..\component\EcuM\Implementation\EcuM.c	  5218      }
; ..\component\EcuM\Implementation\EcuM.c	  5219  #else
; ..\component\EcuM\Implementation\EcuM.c	  5220      ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  5221  #endif
; ..\component\EcuM\Implementation\EcuM.c	  5222  
; ..\component\EcuM\Implementation\EcuM.c	  5223    }
; ..\component\EcuM\Implementation\EcuM.c	  5224  #if(ECUM_ECUMPARTITIONOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  5225    else
; ..\component\EcuM\Implementation\EcuM.c	  5226    {
; ..\component\EcuM\Implementation\EcuM.c	  5227      /* #40 Check if the current partition is configured for EcuM or BswM. */
; ..\component\EcuM\Implementation\EcuM.c	  5228      if(applicationIdx < EcuM_GetSizeOfPartitionData())
; ..\component\EcuM\Implementation\EcuM.c	  5229      {
; ..\component\EcuM\Implementation\EcuM.c	  5230  #  if(ECUM_ISDEF_ECUMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  5231        if(EcuM_IsEcuMPartitionOfPartitionData(applicationIdx))
; ..\component\EcuM\Implementation\EcuM.c	  5232  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  5233        {
; ..\component\EcuM\Implementation\EcuM.c	  5234          /* #41 Execute user-specific code shortly before Deinitialize BswM and SchM (EcuM_OnGoOffOne()). */
; ..\component\EcuM\Implementation\EcuM.c	  5235          EcuM_OnGoOffOne();
; ..\component\EcuM\Implementation\EcuM.c	  5236        }
; ..\component\EcuM\Implementation\EcuM.c	  5237  
; ..\component\EcuM\Implementation\EcuM.c	  5238  #  if(ECUM_BSWMPARTITIONOFPARTITIONDATA == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  5239  #   if(ECUM_ISDEF_BSWMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  5240        if(EcuM_IsBswMPartitionOfPartitionData(applicationIdx))
; ..\component\EcuM\Implementation\EcuM.c	  5241  #   endif
; ..\component\EcuM\Implementation\EcuM.c	  5242        {
; ..\component\EcuM\Implementation\EcuM.c	  5243          /* #42 Deinitialize the BswM on the slave core. */
; ..\component\EcuM\Implementation\EcuM.c	  5244          BswM_Deinit();
; ..\component\EcuM\Implementation\EcuM.c	  5245        }
; ..\component\EcuM\Implementation\EcuM.c	  5246  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  5247  
; ..\component\EcuM\Implementation\EcuM.c	  5248  #  if(ECUM_ISDEF_ECUMPARTITIONOFPARTITIONDATA == STD_OFF)
; ..\component\EcuM\Implementation\EcuM.c	  5249        if(EcuM_IsEcuMPartitionOfPartitionData(applicationIdx))
; ..\component\EcuM\Implementation\EcuM.c	  5250  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  5251        {
; ..\component\EcuM\Implementation\EcuM.c	  5252          /* #43 Deinitialize the SchM on the slave core. */
; ..\component\EcuM\Implementation\EcuM.c	  5253          SchM_Deinit();
; ..\component\EcuM\Implementation\EcuM.c	  5254  
; ..\component\EcuM\Implementation\EcuM.c	  5255  #  if(ECUM_SLAVE_CORE_HANDLING == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  5256          {
; ..\component\EcuM\Implementation\EcuM.c	  5257            CoreIdType coreID = GetCoreID();
; ..\component\EcuM\Implementation\EcuM.c	  5258            EcuM_EnterCriticalArea_1();
; ..\component\EcuM\Implementation\EcuM.c	  5259            EcuM_SetCoreStatusValue(coreID, ECUM_CORESTATUS_OFF); /* SBSW_SETCORESTATUS_OSCOREID */
; ..\component\EcuM\Implementation\EcuM.c	  5260            EcuM_LeaveCriticalArea_1();
; ..\component\EcuM\Implementation\EcuM.c	  5261          }
; ..\component\EcuM\Implementation\EcuM.c	  5262  #  endif
; ..\component\EcuM\Implementation\EcuM.c	  5263        }
; ..\component\EcuM\Implementation\EcuM.c	  5264      }
; ..\component\EcuM\Implementation\EcuM.c	  5265    }
; ..\component\EcuM\Implementation\EcuM.c	  5266  #endif
; ..\component\EcuM\Implementation\EcuM.c	  5267  
; ..\component\EcuM\Implementation\EcuM.c	  5268    /* The return only occurs if retval = E_OK, because of the call of ShutdownOS does never return.  */
; ..\component\EcuM\Implementation\EcuM.c	  5269    return retVal;
; ..\component\EcuM\Implementation\EcuM.c	  5270  } /* PRQA S 6050, 6080 */ /* MD_MSR_STCAL, MD_MSR_STMIF */
	mov	d2,d8
	ret
.L465:
	
__EcuM_GoDown_function_end:
	.size	EcuM_GoDown,__EcuM_GoDown_function_end-EcuM_GoDown
.L295:
	; End of function
	
	.sdecl	'.bss.EcuM.EcuM_CurrentShutdownMode',data,cluster('EcuM_CurrentShutdownMode')
	.sect	'.bss.EcuM.EcuM_CurrentShutdownMode'
EcuM_CurrentShutdownMode:	.type	object
	.size	EcuM_CurrentShutdownMode,1
	.space	1
	.sdecl	'.bss.EcuM.EcuM_CurrentShutdownTarget',data,cluster('EcuM_CurrentShutdownTarget')
	.sect	'.bss.EcuM.EcuM_CurrentShutdownTarget'
EcuM_CurrentShutdownTarget:	.type	object
	.size	EcuM_CurrentShutdownTarget,1
	.space	1
	.sdecl	'.bss.EcuM.EcuM_LastShutdownTarget',data,cluster('EcuM_LastShutdownTarget')
	.sect	'.bss.EcuM.EcuM_LastShutdownTarget'
EcuM_LastShutdownTarget:	.type	object
	.size	EcuM_LastShutdownTarget,1
	.space	1
	.sdecl	'.bss.EcuM.EcuM_LastShutdownMode',data,cluster('EcuM_LastShutdownMode')
	.sect	'.bss.EcuM.EcuM_LastShutdownMode'
EcuM_LastShutdownMode:	.type	object
	.size	EcuM_LastShutdownMode,1
	.space	1
	.sdecl	'.bss.EcuM.EcuM_ShutdownCause',data,cluster('EcuM_ShutdownCause')
	.sect	'.bss.EcuM.EcuM_ShutdownCause'
EcuM_ShutdownCause:	.type	object
	.size	EcuM_ShutdownCause,1
	.space	1
	.sdecl	'.bss.EcuM.EcuM_CurrentBootTarget',data,cluster('EcuM_CurrentBootTarget')
	.sect	'.bss.EcuM.EcuM_CurrentBootTarget'
EcuM_CurrentBootTarget:	.type	object
	.size	EcuM_CurrentBootTarget,1
	.space	1
	.sdecl	'.bss.EcuM.EcuM_ValidatedWakeups',data,cluster('EcuM_ValidatedWakeups')
	.sect	'.bss.EcuM.EcuM_ValidatedWakeups'
	.align	2
EcuM_ValidatedWakeups:	.type	object
	.size	EcuM_ValidatedWakeups,4
	.space	4
	.sdecl	'.bss.EcuM.EcuM_BswM_BufferedWakeups',data,cluster('EcuM_BswM_BufferedWakeups')
	.sect	'.bss.EcuM.EcuM_BswM_BufferedWakeups'
	.align	2
EcuM_BswM_BufferedWakeups:	.type	object
	.size	EcuM_BswM_BufferedWakeups,4
	.space	4
	.sdecl	'.bss.EcuM.EcuM_ComM_BufferedWakeups',data,cluster('EcuM_ComM_BufferedWakeups')
	.sect	'.bss.EcuM.EcuM_ComM_BufferedWakeups'
	.align	2
EcuM_ComM_BufferedWakeups:	.type	object
	.size	EcuM_ComM_BufferedWakeups,4
	.space	4
	.calls	'EcuM_InternalGetShutdownTargetAndMode','SuspendAllInterrupts'
	.calls	'EcuM_InternalGetShutdownTargetAndMode','ResumeAllInterrupts'
	.calls	'EcuM_InternalSetShutdownTargetAndMode','SuspendAllInterrupts'
	.calls	'EcuM_InternalSetShutdownTargetAndMode','ResumeAllInterrupts'
	.calls	'EcuM_InternalComMNotifications','ComM_GetStatus'
	.calls	'EcuM_InternalComMNotifications','ComM_EcuM_WakeUpIndication'
	.calls	'EcuM_MainFunction','EcuM_InternalComMNotifications'
	.calls	'EcuM_Init','EcuM_AL_SetProgrammableInterrupts'
	.calls	'EcuM_Init','EcuM_AL_DriverInitZero'
	.calls	'EcuM_Init','EcuM_InternalClearWakeupEvent'
	.calls	'EcuM_Init','__INDIRECT__'
	.calls	'EcuM_Init','EcuM_StartOS'
	.calls	'EcuM_Shutdown','EcuM_OnGoOffTwo'
	.calls	'EcuM_Shutdown','EcuM_InternalGetShutdownTargetAndMode'
	.calls	'EcuM_Shutdown','EcuM_AL_Reset'
	.calls	'EcuM_Shutdown','EcuM_AL_SwitchOff'
	.calls	'EcuM_Shutdown','Det_ReportError'
	.calls	'EcuM_SelectShutdownTarget','EcuM_InternalSetShutdownTargetAndMode'
	.calls	'EcuM_SelectShutdownTarget','Det_ReportError'
	.calls	'EcuM_GetShutdownTarget','EcuM_InternalGetShutdownTargetAndMode'
	.calls	'EcuM_GetShutdownTarget','Det_ReportError'
	.calls	'EcuM_GetLastShutdownTarget','Det_ReportError'
	.calls	'EcuM_SelectShutdownCause','Det_ReportError'
	.calls	'EcuM_GetShutdownCause','Det_ReportError'
	.calls	'EcuM_GetPendingWakeupEvents','Det_ReportError'
	.calls	'EcuM_ClearWakeupEvent','SuspendAllInterrupts'
	.calls	'EcuM_ClearWakeupEvent','EcuM_InternalClearWakeupEvent'
	.calls	'EcuM_ClearWakeupEvent','BswM_EcuM_CurrentWakeup'
	.calls	'EcuM_ClearWakeupEvent','ResumeAllInterrupts'
	.calls	'EcuM_ClearWakeupEvent','Det_ReportError'
	.calls	'EcuM_ClearValidatedWakeupEvent','SuspendAllInterrupts'
	.calls	'EcuM_ClearValidatedWakeupEvent','BswM_EcuM_CurrentWakeup'
	.calls	'EcuM_ClearValidatedWakeupEvent','ResumeAllInterrupts'
	.calls	'EcuM_ClearValidatedWakeupEvent','Det_ReportError'
	.calls	'EcuM_GetValidatedWakeupEvents','Det_ReportError'
	.calls	'EcuM_GetExpiredWakeupEvents','Det_ReportError'
	.calls	'EcuM_GetBootTarget','Det_ReportError'
	.calls	'EcuM_SelectBootTarget','Det_ReportError'
	.calls	'EcuM_StartupTwo','SchM_Init'
	.calls	'EcuM_StartupTwo','BswM_Init'
	.calls	'EcuM_StartupTwo','SuspendAllInterrupts'
	.calls	'EcuM_StartupTwo','BswM_EcuM_CurrentWakeup'
	.calls	'EcuM_StartupTwo','ResumeAllInterrupts'
	.calls	'EcuM_StartupTwo','Det_ReportError'
	.calls	'EcuM_SetWakeupEvent','EcuM_GetShiftCount'
	.calls	'EcuM_SetWakeupEvent','EcuM_ValidateWakeupEvent'
	.calls	'EcuM_SetWakeupEvent','Det_ReportError'
	.calls	'EcuM_ValidateWakeupEvent','EcuM_GetShiftCount'
	.calls	'EcuM_ValidateWakeupEvent','SuspendAllInterrupts'
	.calls	'EcuM_ValidateWakeupEvent','BswM_EcuM_CurrentWakeup'
	.calls	'EcuM_ValidateWakeupEvent','ComM_GetStatus'
	.calls	'EcuM_ValidateWakeupEvent','ComM_EcuM_WakeUpIndication'
	.calls	'EcuM_ValidateWakeupEvent','ResumeAllInterrupts'
	.calls	'EcuM_ValidateWakeupEvent','Det_ReportError'
	.calls	'EcuM_GoHalt','Det_ReportError'
	.calls	'EcuM_GoPoll','Det_ReportError'
	.calls	'EcuM_GoToSelectedShutdownTarget','EcuM_GoDown'
	.calls	'EcuM_GoDown','EcuM_OnGoOffOne'
	.calls	'EcuM_GoDown','BswM_Deinit'
	.calls	'EcuM_GoDown','SchM_Deinit'
	.calls	'EcuM_GoDown','SuspendAllInterrupts'
	.calls	'EcuM_GoDown','ResumeAllInterrupts'
	.calls	'EcuM_GoDown','EcuM_ShutdownOS'
	.calls	'EcuM_GoDown','Det_ReportError'
	.calls	'EcuM_InternalClearWakeupEvent','.cocofun_4'
	.calls	'EcuM_InternalClearWakeupEvent','.cocofun_5'
	.calls	'EcuM_MainFunction','.cocofun_5'
	.calls	'EcuM_Init','.cocofun_4'
	.calls	'EcuM_Shutdown','.cocofun_6'
	.calls	'EcuM_Shutdown','.cocofun_1'
	.calls	'EcuM_SelectShutdownTarget','.cocofun_2'
	.calls	'EcuM_SelectShutdownTarget','.cocofun_1'
	.calls	'.cocofun_2','.cocofun_9'
	.calls	'EcuM_GetShutdownTarget','.cocofun_9'
	.calls	'EcuM_GetShutdownTarget','.cocofun_1'
	.calls	'EcuM_GetLastShutdownTarget','.cocofun_2'
	.calls	'EcuM_GetLastShutdownTarget','.cocofun_1'
	.calls	'EcuM_SelectShutdownCause','.cocofun_2'
	.calls	'EcuM_SelectShutdownCause','.cocofun_1'
	.calls	'EcuM_GetShutdownCause','.cocofun_2'
	.calls	'EcuM_GetShutdownCause','.cocofun_1'
	.calls	'EcuM_GetPendingWakeupEvents','.cocofun_3'
	.calls	'EcuM_GetPendingWakeupEvents','.cocofun_1'
	.calls	'EcuM_ClearWakeupEvent','.cocofun_7'
	.calls	'EcuM_ClearWakeupEvent','.cocofun_1'
	.calls	'EcuM_ClearValidatedWakeupEvent','.cocofun_9'
	.calls	'EcuM_ClearValidatedWakeupEvent','.cocofun_1'
	.calls	'EcuM_GetValidatedWakeupEvents','.cocofun_9'
	.calls	'EcuM_GetValidatedWakeupEvents','.cocofun_1'
	.calls	'EcuM_GetExpiredWakeupEvents','.cocofun_3'
	.calls	'EcuM_GetExpiredWakeupEvents','.cocofun_1'
	.calls	'EcuM_GetBootTarget','.cocofun_2'
	.calls	'EcuM_GetBootTarget','.cocofun_1'
	.calls	'EcuM_SelectBootTarget','.cocofun_2'
	.calls	'EcuM_SelectBootTarget','.cocofun_1'
	.calls	'EcuM_StartupTwo','.cocofun_6'
	.calls	'EcuM_StartupTwo','.cocofun_1'
	.calls	'EcuM_SetWakeupEvent','.cocofun_1'
	.calls	'EcuM_ValidateWakeupEvent','.cocofun_9'
	.calls	'EcuM_ValidateWakeupEvent','.cocofun_8'
	.calls	'EcuM_ValidateWakeupEvent','.cocofun_5'
	.calls	'EcuM_ValidateWakeupEvent','.cocofun_1'
	.calls	'EcuM_GoHalt','.cocofun_1'
	.calls	'EcuM_GoPoll','.cocofun_1'
	.calls	'EcuM_GoDown','.cocofun_7'
	.calls	'EcuM_GoDown','.cocofun_1'
	.calls	'EcuM_InternalGetShutdownTargetAndMode','',0
	.calls	'EcuM_InternalSetShutdownTargetAndMode','',0
	.calls	'EcuM_GetShiftCount','',0
	.calls	'EcuM_InternalComMNotifications','',8
	.calls	'EcuM_InternalClearWakeupEvent','',0
	.calls	'.cocofun_5','',0
	.calls	'.cocofun_4','',0
	.calls	'EcuM_MainFunction','',0
	.calls	'EcuM_Init','',0
	.calls	'EcuM_Shutdown','',8
	.calls	'.cocofun_6','',0
	.calls	'.cocofun_1','',0
	.calls	'EcuM_SelectShutdownTarget','',0
	.calls	'.cocofun_2','',0
	.calls	'.cocofun_9','',0
	.calls	'EcuM_GetShutdownTarget','',0
	.calls	'EcuM_GetLastShutdownTarget','',0
	.calls	'EcuM_SelectShutdownCause','',0
	.calls	'EcuM_GetShutdownCause','',0
	.calls	'EcuM_GetPendingWakeupEvents','',0
	.calls	'.cocofun_3','',0
	.calls	'EcuM_ClearWakeupEvent','',0
	.calls	'.cocofun_7','',0
	.calls	'EcuM_ClearValidatedWakeupEvent','',0
	.calls	'EcuM_GetValidatedWakeupEvents','',0
	.calls	'EcuM_GetExpiredWakeupEvents','',0
	.calls	'EcuM_GetBootTarget','',0
	.calls	'EcuM_SelectBootTarget','',0
	.calls	'EcuM_StartupTwo','',0
	.calls	'EcuM_SetWakeupEvent','',0
	.calls	'EcuM_ValidateWakeupEvent','',8
	.calls	'.cocofun_8','',0
	.calls	'EcuM_GoHalt','',0
	.calls	'EcuM_GoPoll','',0
	.calls	'EcuM_GoToSelectedShutdownTarget','',0
	.extern	Det_ReportError
	.extern	SuspendAllInterrupts
	.extern	ResumeAllInterrupts
	.extern	EcuM_DriverInitOne
	.extern	EcuM_WakeupSourceList
	.extern	EcuM_ModuleState
	.extern	EcuM_AL_SetProgrammableInterrupts
	.extern	EcuM_StartOS
	.extern	EcuM_ShutdownOS
	.extern	EcuM_AL_SwitchOff
	.extern	EcuM_AL_Reset
	.extern	EcuM_OnGoOffOne
	.extern	EcuM_OnGoOffTwo
	.extern	EcuM_AL_DriverInitZero
	.extern	ComM_GetStatus
	.extern	ComM_EcuM_WakeUpIndication
	.extern	BswM_EcuM_CurrentWakeup
	.extern	BswM_Init
	.extern	BswM_Deinit
	.extern	SchM_Init
	.extern	SchM_Deinit
	.extern	__INDIRECT__
	.calls	'EcuM_GoDown','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L188:
	.word	17231
	.half	3
	.word	.L189
	.byte	4
.L187:
	.byte	1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L190
	.byte	2
	.byte	'int',0,4,5,3
	.word	133
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	140
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	182
	.byte	7
	.word	182
	.byte	8
	.byte	'__cmpswapw',0
	.word	198
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	203
	.byte	9
	.byte	'value',0
	.word	182
	.byte	9
	.byte	'compare',0
	.word	182
	.byte	0
.L393:
	.byte	2
	.byte	'unsigned char',0,1,8
.L466:
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'Det_ReportError',0,1,154,2,32
	.word	260
	.byte	1,1,1,1,11
	.byte	'ModuleId',0,1,154,2,56
	.word	277
	.byte	11
	.byte	'InstanceId',0,1,154,2,72
	.word	260
	.byte	11
	.byte	'ApiId',0,1,154,2,90
	.word	260
	.byte	11
	.byte	'ErrorId',0,1,154,2,103
	.word	260
	.byte	0
.L390:
	.byte	2
	.byte	'unsigned long int',0,4,7
.L415:
	.byte	7
	.word	260
.L417:
	.byte	7
	.word	260
.L431:
	.byte	7
	.word	260
.L451:
	.byte	7
	.word	260
	.byte	12
	.byte	'SuspendAllInterrupts',0,2,222,10,21,1,1,1,1,12
	.byte	'ResumeAllInterrupts',0,2,241,10,21,1,1,1,1,12
	.byte	'EcuM_AL_SetProgrammableInterrupts',0,3,213,2,23,1,1,1,1,13
	.byte	'EcuM_StartOS',0,3,226,2,23,1,1,1,1,11
	.byte	'appMode',0,3,226,2,48
	.word	260
	.byte	0,13
	.byte	'EcuM_ShutdownOS',0,3,221,3,23,1,1,1,1,11
	.byte	'ErrCode',0,3,221,3,54
	.word	260
	.byte	0,12
	.byte	'EcuM_AL_SwitchOff',0,3,233,3,23,1,1,1,1,13
	.byte	'EcuM_AL_Reset',0,3,246,3,23,1,1,1,1,11
	.byte	'Reset',0,3,246,3,52
	.word	260
	.byte	0,12
	.byte	'EcuM_OnGoOffOne',0,3,231,4,23,1,1,1,1,12
	.byte	'EcuM_OnGoOffTwo',0,3,244,4,23,1,1,1,1,12
	.byte	'EcuM_AL_DriverInitZero',0,3,141,6,30,1,1,1,1,7
	.word	260
	.byte	10
	.byte	'ComM_GetStatus',0,4,199,2,40
	.word	260
	.byte	1,1,1,1,11
	.byte	'Status',0,4,199,2,108
	.word	773
	.byte	0,13
	.byte	'ComM_EcuM_WakeUpIndication',0,5,97,30,1,1,1,1,11
	.byte	'Channel',0,5,97,75
	.word	260
	.byte	0,13
	.byte	'BswM_EcuM_CurrentWakeup',0,6,94,30,1,1,1,1,11
	.byte	'source',0,6,94,76
	.word	399
	.byte	11
	.byte	'state',0,6,94,105
	.word	260
	.byte	0,14
	.byte	'sBswM_PCConfigType',0,8,196,10,16,1,15
	.byte	'BswM_PCConfigNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,3
	.word	937
	.byte	7
	.word	995
	.byte	13
	.byte	'BswM_Init',0,7,159,2,30,1,1,1,1,11
	.byte	'ConfigPtr',0,7,159,2,92
	.word	1000
	.byte	0,12
	.byte	'BswM_Deinit',0,7,174,2,30,1,1,1,1,12
	.byte	'SchM_Init',0,9,34,22,1,1,1,1,12
	.byte	'SchM_Deinit',0,9,35,22,1,1,1,1
.L473:
	.byte	7
	.word	260
	.byte	16
	.byte	'__INDIRECT__',0,10,1,1,1,1,1,17,1,7
	.word	1128
	.byte	18
	.byte	'__codeptr',0,10,1,1
	.word	1130
	.byte	18
	.byte	'boolean',0,11,101,31
	.word	260
	.byte	18
	.byte	'uint8',0,11,104,31
	.word	260
	.byte	18
	.byte	'uint16',0,11,106,31
	.word	277
	.byte	2
	.byte	'long int',0,4,5,18
	.byte	'sint32',0,11,107,31
	.word	1198
	.byte	18
	.byte	'uint32',0,11,108,31
	.word	399
	.byte	18
	.byte	'uint8_least',0,11,111,31
	.word	260
	.byte	2
	.byte	'unsigned long long int',0,8,7,18
	.byte	'uint64',0,11,121,30
	.word	1260
	.byte	18
	.byte	'StatusType',0,12,127,23
	.word	260
	.byte	18
	.byte	'Std_ReturnType',0,12,132,1,15
	.word	260
	.byte	18
	.byte	'PduLengthType',0,13,65,15
	.word	260
	.byte	18
	.byte	'SduDataPtrType',0,14,196,1,54
	.word	1103
	.byte	18
	.byte	'NetworkHandleType',0,14,215,1,22
	.word	260
	.byte	19,14,219,1,9,1,20
	.byte	'TP_DATACONF',0,0,20
	.byte	'TP_DATARETRY',0,1,20
	.byte	'TP_CONFPENDING',0,2,0,18
	.byte	'TpDataStateType',0,14,226,1,3
	.word	1417
	.byte	14
	.byte	'sDet_PCConfigType',0,15,238,1,16,1,15
	.byte	'Det_PCConfigNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'Det_PCConfigType',0,15,241,1,3
	.word	1495
	.byte	18
	.byte	'ComM_InhibitionStatusType',0,16,37,15
	.word	260
	.byte	18
	.byte	'BswM_ESH_Mode',0,16,52,15
	.word	260
	.byte	18
	.byte	'BswM_ESH_RunRequest',0,16,55,15
	.word	260
	.byte	18
	.byte	'ComM_ModeType',0,16,58,15
	.word	260
	.byte	18
	.byte	'EcuM_BootTargetType',0,16,61,15
	.word	260
	.byte	18
	.byte	'EcuM_ModeType',0,16,64,15
	.word	260
	.byte	18
	.byte	'EcuM_ShutdownCauseType',0,16,67,15
	.word	260
	.byte	18
	.byte	'EcuM_StateType',0,16,70,15
	.word	260
	.byte	18
	.byte	'EcuM_WakeupSourceType',0,17,58,17
	.word	399
	.byte	18
	.byte	'EcuM_WakeupStateType',0,17,107,15
	.word	260
	.byte	18
	.byte	'EcuM_ResetType',0,17,128,1,23
	.word	260
	.byte	21,1,1,7
	.word	1870
	.byte	18
	.byte	'EcuM_DriverFuncType',0,18,201,2,9
	.word	1873
	.byte	18
	.byte	'EcuM_DefaultAppModeType',0,18,237,2,16
	.word	399
	.byte	18
	.byte	'EcuM_NormalMcuModeType',0,18,255,2,16
	.word	399
	.byte	18
	.byte	'EcuM_ChannelOfWakeupSourceListType',0,18,136,3,15
	.word	260
	.byte	14
	.byte	'sEcuM_DriverInitOneType',0,18,152,3,16,4,15
	.byte	'FunctionOfDriverInitOne',0
	.word	1878
	.byte	4,2,35,0,0,18
	.byte	'EcuM_DriverInitOneType',0,18,155,3,3
	.word	2016
	.byte	7
	.word	1870
	.byte	14
	.byte	'sEcuM_WakeupSourceListType',0,18,158,3,16,1,15
	.byte	'ChannelOfWakeupSourceList',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'EcuM_WakeupSourceListType',0,18,161,3,3
	.word	2117
	.byte	14
	.byte	'sEcuM_PCConfigType',0,18,200,3,16,1,15
	.byte	'EcuM_PCConfigNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'EcuM_PCConfigType',0,18,203,3,3
	.word	2221
	.byte	19,19,147,1,9,1,20
	.byte	'Default_Init_Task',0,0,20
	.byte	'Default_Init_Task_Trusted',0,1,20
	.byte	'IdleTask_OsCore0',0,2,20
	.byte	'bsw_task',0,3,20
	.byte	'swc_init',0,4,20
	.byte	'swc_task',0,5,20
	.byte	'INVALID_TASK',0,6,20
	.byte	'OS_TASKID_COUNT',0,6,0,18
	.byte	'TaskType',0,19,157,1,3
	.word	2306
	.byte	18
	.byte	'Os_Hal_AddressType',0,20,61,16
	.word	399
	.byte	22,64
	.word	399
	.byte	23,15,0,14
	.byte	'Os_ExceptionContextType_Tag',0,21,71,8,160,1,15
	.byte	'AddressRegisters',0
	.word	2491
	.byte	64,2,35,0,15
	.byte	'DataRegisters',0
	.word	2491
	.byte	64,2,35,64,15
	.byte	'Ra',0
	.word	399
	.byte	4,3,35,128,1,15
	.byte	'Psw',0
	.word	399
	.byte	4,3,35,132,1,15
	.byte	'ExceptionSource',0
	.word	399
	.byte	4,3,35,136,1,15
	.byte	'Pcpn',0
	.word	399
	.byte	4,3,35,140,1,15
	.byte	'Pie',0
	.word	399
	.byte	4,3,35,144,1,15
	.byte	'MpuRegionForStackLow',0
	.word	399
	.byte	4,3,35,148,1,15
	.byte	'MpuRegionForStackUpper',0
	.word	399
	.byte	4,3,35,152,1,15
	.byte	'RawPCXI',0
	.word	399
	.byte	4,3,35,156,1,0,18
	.byte	'Os_ExceptionContextType',0,20,66,44
	.word	2500
	.byte	18
	.byte	'AppModeType',0,22,216,1,16
	.word	260
	.byte	18
	.byte	'Os_InterruptSourceIdType',0,22,238,1,16
	.word	399
	.byte	18
	.byte	'Os_ExceptionSourceIdType',0,22,246,1,16
	.word	399
	.byte	19,22,161,2,9,1,20
	.byte	'RUNNING',0,0,20
	.byte	'READY',0,1,20
	.byte	'WAITING',0,2,20
	.byte	'SUSPENDED',0,3,0,18
	.byte	'TaskStateType',0,22,175,2,3
	.word	2869
	.byte	18
	.byte	'EventMaskType',0,22,182,2,16
	.word	1260
	.byte	18
	.byte	'Os_TickType',0,22,200,2,19
	.word	399
	.byte	18
	.byte	'TickType',0,22,206,2,21
	.word	399
	.byte	24,22,220,2,9,12,15
	.byte	'maxallowedvalue',0
	.word	399
	.byte	4,2,35,0,15
	.byte	'ticksperbase',0
	.word	399
	.byte	4,2,35,4,15
	.byte	'mincycle',0
	.word	399
	.byte	4,2,35,8,0,18
	.byte	'AlarmBaseType',0,22,228,2,2
	.word	3001
	.byte	19,22,128,3,9,1,20
	.byte	'APPLICATION_TERMINATED',0,0,20
	.byte	'APPLICATION_RESTARTING',0,1,20
	.byte	'APPLICATION_ACCESSIBLE',0,2,0,18
	.byte	'ApplicationStateType',0,22,133,3,3
	.word	3096
	.byte	19,22,177,3,9,1,20
	.byte	'OSServiceId_GetApplicationID',0,0,20
	.byte	'OSServiceId_GetISRID',0,1,20
	.byte	'OSServiceId_CallTrustedFunction',0,2,20
	.byte	'OSServiceId_CheckISRMemoryAccess',0,3,20
	.byte	'OSServiceId_CheckTaskMemoryAccess',0,4,20
	.byte	'OSServiceId_CheckObjectAccess',0,5,20
	.byte	'OSServiceId_CheckObjectOwnership',0,6,20
	.byte	'OSServiceId_StartScheduleTableRel',0,7,20
	.byte	'OSServiceId_StartScheduleTableAbs',0,8,20
	.byte	'OSServiceId_StopScheduleTable',0,9,20
	.byte	'OSServiceId_NextScheduleTable',0,10,20
	.byte	'OSServiceId_StartScheduleTableSynchron',0,11,20
	.byte	'OSServiceId_SyncScheduleTable',0,12,20
	.byte	'OSServiceId_SetScheduleTableAsync',0,13,20
	.byte	'OSServiceId_GetScheduleTableStatus',0,14,20
	.byte	'OSServiceId_IncrementCounter',0,15,20
	.byte	'OSServiceId_GetCounterValue',0,16,20
	.byte	'OSServiceId_GetElapsedValue',0,17,20
	.byte	'OSServiceId_TerminateApplication',0,18,20
	.byte	'OSServiceId_AllowAccess',0,19,20
	.byte	'OSServiceId_GetApplicationState',0,20,20
	.byte	'OSServiceId_GetNumberOfActivatedCores',0,21,20
	.byte	'OSServiceId_GetCoreID',0,22,20
	.byte	'OSServiceId_StartCore',0,23,20
	.byte	'OSServiceId_StartNonAutosarCore',0,24,20
	.byte	'OSServiceId_GetSpinlock',0,25,20
	.byte	'OSServiceId_ReleaseSpinlock',0,26,20
	.byte	'OSServiceId_TryToGetSpinlock',0,27,20
	.byte	'OSServiceId_ShutdownAllCores',0,28,20
	.byte	'OSServiceId_ControlIdle',0,29,20
	.byte	'OSServiceId_IocSend',0,30,20
	.byte	'OSServiceId_IocWrite',0,31,20
	.byte	'OSServiceId_IocSendGroup',0,32,20
	.byte	'OSServiceId_IocWriteGroup',0,33,20
	.byte	'OSServiceId_IocReceive',0,34,20
	.byte	'OSServiceId_IocRead',0,35,20
	.byte	'OSServiceId_IocReceiveGroup',0,36,20
	.byte	'OSServiceId_IocReadGroup',0,37,20
	.byte	'OSServiceId_IocEmptyQueue',0,38,20
	.byte	'OSServiceId_GetCurrentApplicationID',0,39,20
	.byte	'OSServiceId_GetExceptionContext',0,160,1,20
	.byte	'OSServiceId_SetExceptionContext',0,161,1,20
	.byte	'OSServiceId_CallNonTrustedFunction',0,162,1,20
	.byte	'OSServiceId_AppKill',0,163,1,20
	.byte	'OSServiceId_AlarmActionSetEvent',0,164,1,20
	.byte	'OSServiceId_AlarmActionActivateTask',0,165,1,20
	.byte	'OSServiceId_AlarmActionIncrementCounter',0,166,1,20
	.byte	'OSServiceId_AlarmActionCallback',0,167,1,20
	.byte	'OSServiceId_TimerIsr',0,168,1,20
	.byte	'OSServiceId_IsrWrapper',0,169,1,20
	.byte	'OSServiceId_GetTaskStackUsage',0,170,1,20
	.byte	'OSServiceId_GetISRStackUsage',0,171,1,20
	.byte	'OSServiceId_GetKernelStackUsage',0,172,1,20
	.byte	'OSServiceId_GetStartupHookStackUsage',0,173,1,20
	.byte	'OSServiceId_GetErrorHookStackUsage',0,174,1,20
	.byte	'OSServiceId_GetShutdownHookStackUsage',0,175,1,20
	.byte	'OSServiceId_GetProtectionHookStackUsage',0,176,1,20
	.byte	'OSServiceId_GetSemaphore',0,177,1,20
	.byte	'OSServiceId_ReleaseSemaphore',0,178,1,20
	.byte	'OSServiceId_ScheduleTableActivateTask',0,179,1,20
	.byte	'OSServiceId_ScheduleTableSetEvent',0,180,1,20
	.byte	'OSServiceId_DisableInterruptSource',0,181,1,20
	.byte	'OSServiceId_EnableInterruptSource',0,182,1,20
	.byte	'OSServiceId_ClearPendingInterrupt',0,183,1,20
	.byte	'OSServiceId_GetUnhandledIrq',0,184,1,20
	.byte	'OSServiceId_GetUnhandledExc',0,185,1,20
	.byte	'OSServiceId_HookCallCallback',0,186,1,20
	.byte	'OSServiceId_IsInterruptSourceEnabled',0,187,1,20
	.byte	'OSServiceId_IsInterruptPending',0,188,1,20
	.byte	'OSServiceId_CallFastTrustedFunction',0,189,1,20
	.byte	'OSServiceId_BarrierSynchronize',0,190,1,20
	.byte	'OSServiceId_InitialEnableInterruptSources',0,191,1,20
	.byte	'OSServiceId_GetCoreStartState',0,192,1,20
	.byte	'OSServiceId_StartOS',0,208,1,20
	.byte	'OSServiceId_GetActiveApplicationMode',0,210,1,20
	.byte	'OSServiceId_DisableAllInterrupts',0,211,1,20
	.byte	'OSServiceId_EnableAllInterrupts',0,212,1,20
	.byte	'OSServiceId_SuspendAllInterrupts',0,213,1,20
	.byte	'OSServiceId_ResumeAllInterrupts',0,214,1,20
	.byte	'OSServiceId_SuspendOSInterrupts',0,215,1,20
	.byte	'OSServiceId_ResumeOSInterrupts',0,216,1,20
	.byte	'OSServiceId_ActivateTask',0,217,1,20
	.byte	'OSServiceId_TerminateTask',0,218,1,20
	.byte	'OSServiceId_ChainTask',0,219,1,20
	.byte	'OSServiceId_GetTaskID',0,220,1,20
	.byte	'OSServiceId_GetTaskState',0,221,1,20
	.byte	'OSServiceId_Schedule',0,222,1,20
	.byte	'OSServiceId_SetEvent',0,223,1,20
	.byte	'OSServiceId_ClearEvent',0,224,1,20
	.byte	'OSServiceId_GetEvent',0,225,1,20
	.byte	'OSServiceId_WaitEvent',0,226,1,20
	.byte	'OSServiceId_GetAlarmBase',0,227,1,20
	.byte	'OSServiceId_GetAlarm',0,228,1,20
	.byte	'OSServiceId_SetRelAlarm',0,229,1,20
	.byte	'OSServiceId_SetAbsAlarm',0,230,1,20
	.byte	'OSServiceId_CancelAlarm',0,231,1,20
	.byte	'OSServiceId_GetResource',0,232,1,20
	.byte	'OSServiceId_ReleaseResource',0,233,1,20
	.byte	'OSSERVICEID_COUNT',0,255,1,0,18
	.byte	'OSServiceIdType',0,22,156,4,3
	.word	3208
	.byte	19,22,172,4,9,2,20
	.byte	'OS_STATUS_OK',0,0,20
	.byte	'OS_STATUS_CALLEVEL',0,2,20
	.byte	'OS_STATUS_LIMIT',0,4,20
	.byte	'OS_STATUS_RESOURCE',0,6,20
	.byte	'OS_STATUS_SERVICEID',0,9,20
	.byte	'OS_STATUS_ILLEGAL_ADDRESS',0,10,20
	.byte	'OS_STATUS_MISSINGEND',0,11,20
	.byte	'OS_STATUS_DISABLEDINT',0,12,20
	.byte	'OS_STATUS_STACKFAULT',0,13,20
	.byte	'OS_STATUS_PROTECTION_MEMORY',0,14,20
	.byte	'OS_STATUS_PROTECTION_TIME',0,15,20
	.byte	'OS_STATUS_PROTECTION_ARRIVAL',0,16,20
	.byte	'OS_STATUS_PROTECTION_LOCKED',0,17,20
	.byte	'OS_STATUS_PROTECTION_EXCEPTION',0,18,20
	.byte	'OS_STATUS_INTERFERENCE_DEADLOCK',0,19,20
	.byte	'OS_STATUS_NESTING_DEADLOCK',0,20,20
	.byte	'OS_STATUS_SPINLOCK',0,21,20
	.byte	'OS_STATUS_CORE',0,22,20
	.byte	'OS_STATUS_OVERFLOW',0,245,1,20
	.byte	'OS_STATUS_KILL_KERNEL_OBJ',0,246,1,20
	.byte	'OS_STATUS_NO_RESTARTTASK',0,247,1,20
	.byte	'OS_STATUS_CALL_NOT_ALLOWED',0,248,1,20
	.byte	'OS_STATUS_FUNCTION_UNAVAILABLE',0,249,1,20
	.byte	'OS_STATUS_PROTECTION_SYSCALL',0,250,1,20
	.byte	'OS_STATUS_PROTECTION_IRQ',0,251,1,20
	.byte	'OS_STATUS_API_ERROR',0,252,1,20
	.byte	'OS_STATUS_ASSERTION',0,253,1,20
	.byte	'OS_STATUS_OVERLOAD',0,254,1,20
	.byte	'OS_STATUS_ACCESSRIGHTS_1',0,129,2,20
	.byte	'OS_STATUS_CALLEVEL_SHARED_STACK',0,130,2,20
	.byte	'OS_STATUS_ID_1',0,131,2,20
	.byte	'OS_STATUS_UNLOCKED',0,133,2,20
	.byte	'OS_STATUS_STATE_1',0,135,2,20
	.byte	'OS_STATUS_VALUE_IS_ZERO_1',0,136,2,20
	.byte	'OS_STATUS_CORE_CROSS_DATA',0,150,2,20
	.byte	'OS_STATUS_PARAM_POINTER_1',0,151,2,20
	.byte	'OS_STATUS_STACKUSAGE_DISABLED_BY_CONFIG',0,241,3,20
	.byte	'OS_STATUS_NO_BARRIER_PARTICIPANT',0,242,3,20
	.byte	'OS_STATUS_UNIMPLEMENTED_CLEARPENDING',0,243,3,20
	.byte	'OS_STATUS_NO_NTFSTACK_POOL_EMPTY',0,244,3,20
	.byte	'OS_STATUS_ACCESSRIGHTS_2',0,129,4,20
	.byte	'OS_STATUS_CALLEVEL_CROSS_CORE_SYNC',0,130,4,20
	.byte	'OS_STATUS_ID_2',0,131,4,20
	.byte	'OS_STATUS_NOFUNC_1',0,133,4,20
	.byte	'OS_STATUS_STATE_2',0,135,4,20
	.byte	'OS_STATUS_VALUE_IS_ZERO_2',0,136,4,20
	.byte	'OS_STATUS_PARAM_POINTER_2',0,151,4,20
	.byte	'OS_STATUS_EVENT_DISABLED_BY_CONFIG',0,241,5,20
	.byte	'OS_STATUS_UNIMPLEMENTED_EXCEPTIONCONTEXT',0,243,5,20
	.byte	'OS_STATUS_NO_NTFSTACK_APPLIMIT_EXCEEDED',0,244,5,20
	.byte	'OS_STATUS_NOTACCESSIBLE_1',0,129,6,20
	.byte	'OS_STATUS_ID_TYPE_1',0,131,6,20
	.byte	'OS_STATUS_NOFUNC_2',0,133,6,20
	.byte	'OS_STATUS_STATE_STOPPED',0,135,6,20
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_1',0,136,6,20
	.byte	'OS_STATUS_PARAM_POINTER_3',0,151,6,20
	.byte	'OS_STATUS_NOTACCESSIBLE_2',0,129,8,20
	.byte	'OS_STATUS_ID_DIFFERENT_COUNTER',0,131,8,20
	.byte	'OS_STATUS_SPINLOCK_ORDER',0,133,8,20
	.byte	'OS_STATUS_STATE_RUNNING',0,135,8,20
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_2',0,136,8,20
	.byte	'OS_STATUS_NOEXTENDEDTASK_1',0,129,10,20
	.byte	'OS_STATUS_ID_DIFFERENT_SYNC',0,131,10,20
	.byte	'OS_STATUS_STOPPED_1',0,133,10,20
	.byte	'OS_STATUS_STATE_NEXTED',0,135,10,20
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_3',0,136,10,20
	.byte	'OS_STATUS_NOEXTENDEDTASK_2',0,129,12,20
	.byte	'OS_STATUS_HOOK_NOT_AVAILABLE',0,131,12,20
	.byte	'OS_STATUS_NOT_STOPPED_2',0,133,12,20
	.byte	'OS_STATUS_STATE_WAITING',0,135,12,20
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_1',0,136,12,20
	.byte	'OS_STATUS_NOEXTENDEDTASK_CALLER',0,129,14,20
	.byte	'OS_STATUS_NEXTED_1',0,133,14,20
	.byte	'OS_STATUS_STATE_NO_RESTART',0,135,14,20
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_2',0,136,14,20
	.byte	'OS_STATUS_LOCKED',0,129,16,20
	.byte	'OS_STATUS_KILLING_IS_DISABLED',0,133,16,20
	.byte	'OS_STATUS_STATE_ALREADY_TERMINATED',0,135,16,20
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_1',0,136,16,20
	.byte	'OS_STATUS_PRIORITY',0,129,18,20
	.byte	'OS_STATUS_ORDER',0,133,18,20
	.byte	'OS_STATUS_STATE_RESTARTING_NO_MEMBER',0,135,18,20
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_2',0,136,18,20
	.byte	'OS_STATUS_NOT_THE_OWNER_1',0,129,20,20
	.byte	'OS_STATUS_STATE_ALREADY_RESTARTING',0,135,20,20
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_3',0,136,20,20
	.byte	'OS_STATUS_VALUE_IS_NOT_BOOLEAN',0,136,22,0,18
	.byte	'Os_StatusType',0,22,232,5,3
	.word	6378
	.byte	24,22,133,6,9,4,15
	.byte	'Service',0
	.word	3208
	.byte	1,2,35,0,15
	.byte	'Error',0
	.word	260
	.byte	1,2,35,1,15
	.byte	'DetailedError',0
	.word	6378
	.byte	2,2,35,2,0,18
	.byte	'Os_ErrorInformationType',0,22,143,6,3
	.word	8908
	.byte	19,22,175,6,9,1,20
	.byte	'SCHEDULETABLE_STOPPED',0,0,20
	.byte	'SCHEDULETABLE_NEXT',0,1,20
	.byte	'SCHEDULETABLE_WAITING',0,2,20
	.byte	'SCHEDULETABLE_RUNNING',0,3,20
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,18
	.byte	'ScheduleTableStatusType',0,22,192,6,3
	.word	9003
	.byte	18
	.byte	'Os_AccessCheckAddress',0,22,199,6,29
	.word	399
	.byte	19,22,211,6,9,1,20
	.byte	'OS_MEM_ACCESS_TYPE_NON',0,0,20
	.byte	'OS_MEM_ACCESS_TYPE_R',0,1,20
	.byte	'OS_MEM_ACCESS_TYPE_READ',0,1,20
	.byte	'OS_MEM_ACCESS_TYPE_W',0,2,20
	.byte	'OS_MEM_ACCESS_TYPE_WRITE',0,2,20
	.byte	'OS_MEM_ACCESS_TYPE_RW',0,3,20
	.byte	'OS_MEM_ACCESS_TYPE_EXECUTE',0,4,20
	.byte	'OS_MEM_ACCESS_TYPE_X',0,4,20
	.byte	'OS_MEM_ACCESS_TYPE_RX',0,5,20
	.byte	'OS_MEM_ACCESS_TYPE_WX',0,6,20
	.byte	'OS_MEM_ACCESS_TYPE_RWX',0,7,20
	.byte	'OS_MEM_ACCESS_TYPE_S',0,8,20
	.byte	'OS_MEM_ACCESS_TYPE_STACK',0,8,20
	.byte	'OS_MEM_ACCESS_TYPE_RS',0,9,20
	.byte	'OS_MEM_ACCESS_TYPE_WS',0,10,20
	.byte	'OS_MEM_ACCESS_TYPE_RWS',0,11,20
	.byte	'OS_MEM_ACCESS_TYPE_XS',0,12,20
	.byte	'OS_MEM_ACCESS_TYPE_RXS',0,13,20
	.byte	'OS_MEM_ACCESS_TYPE_WXS',0,14,20
	.byte	'OS_MEM_ACCESS_TYPE_RWXS',0,15,0,18
	.byte	'Os_MemAccessType',0,22,233,6,3
	.word	9207
	.byte	18
	.byte	'unsigned_int',0,23,75,22
	.word	182
	.byte	18
	.byte	'Mcu_ExternalClockConfigType',0,24,212,1,18
	.word	399
	.byte	18
	.byte	'Mcu_ClockType',0,24,217,1,18
	.word	399
	.byte	18
	.byte	'Mcu_RamSectionType',0,24,222,1,18
	.word	399
	.byte	25
	.byte	'void',0,7
	.word	9845
	.byte	18
	.byte	'Mcu_RamBaseAdrType',0,24,233,1,18
	.word	9851
	.byte	18
	.byte	'Mcu_RamSizeType',0,24,237,1,18
	.word	399
	.byte	18
	.byte	'Mcu_RamWriteSizeType',0,24,241,1,18
	.word	399
	.byte	18
	.byte	'Mcu_RamPrstDatType',0,24,245,1,19
	.word	1260
	.byte	24,24,226,2,9,4,26
	.byte	'Insel',0,1
	.word	260
	.byte	2,6,2,35,0,26
	.byte	'SysPllPDiv',0,1
	.word	260
	.byte	3,3,2,35,0,26
	.byte	'SysPllNDiv',0,2
	.word	277
	.byte	7,4,2,35,0,26
	.byte	'SysPllK2Div',0,1
	.word	260
	.byte	3,1,2,35,1,26
	.byte	'FmPllEn',0,1
	.word	260
	.byte	1,0,2,35,1,26
	.byte	'ModulationAmplitude',0,2
	.word	277
	.byte	16,0,2,35,2,0,18
	.byte	'Mcu_SystemPllConfigType',0,24,235,2,3
	.word	9967
	.byte	24,24,243,2,9,4,26
	.byte	'PerPllNDiv',0,1
	.word	260
	.byte	7,1,2,35,0,26
	.byte	'PerPllPDiv',0,2
	.word	277
	.byte	3,6,2,35,0,26
	.byte	'PerPllK2Div',0,1
	.word	260
	.byte	3,3,2,35,1,26
	.byte	'PerPllK3Div',0,1
	.word	260
	.byte	3,0,2,35,1,26
	.byte	'K3DivByPass',0,1
	.word	260
	.byte	1,7,2,35,2,26
	.byte	'Reserved',0,2
	.word	277
	.byte	15,0,2,35,2,0,18
	.byte	'Mcu_PeripheralPllConfigType',0,24,251,2,3
	.word	10141
	.byte	22,24
	.word	399
	.byte	23,5,0,24,24,131,3,9,40,15
	.byte	'Ccucon0',0
	.word	399
	.byte	4,2,35,0,15
	.byte	'Ccucon1',0
	.word	399
	.byte	4,2,35,4,15
	.byte	'Ccucon2',0
	.word	399
	.byte	4,2,35,8,15
	.byte	'Ccucon5',0
	.word	399
	.byte	4,2,35,12,15
	.byte	'CcuconCpu',0
	.word	10318
	.byte	24,2,35,16,0,18
	.byte	'Mcu_PllDistributionConfigType',0,24,143,3,3
	.word	10327
	.byte	3
	.word	10327
	.byte	7
	.word	10460
	.byte	24,24,151,3,9,44,15
	.byte	'SystemPllCfg',0
	.word	9967
	.byte	4,2,35,0,15
	.byte	'PeripheralPllCfg',0
	.word	10141
	.byte	4,2,35,4,15
	.byte	'SysPllK2DivStepUpChangeDelay',0
	.word	399
	.byte	4,2,35,8,15
	.byte	'SysPllK2DivStepDownChangeDelay',0
	.word	399
	.byte	4,2,35,12,15
	.byte	'PeripheralPllK2StepUpChangeDelay',0
	.word	399
	.byte	4,2,35,16,15
	.byte	'PeripheralPllK2StepDownChangeDelay',0
	.word	399
	.byte	4,2,35,20,15
	.byte	'PeripheralPllK3StepUpChangeDelay',0
	.word	399
	.byte	4,2,35,24,15
	.byte	'PeripheralPllK3StepDownChangeDelay',0
	.word	399
	.byte	4,2,35,28,15
	.byte	'PllDistributionCfgPtr',0
	.word	10465
	.byte	4,2,35,32,15
	.byte	'ExternalClockCfg',0
	.word	399
	.byte	4,2,35,36,15
	.byte	'BackupFreqKDiv',0
	.word	277
	.byte	2,2,35,40,15
	.byte	'ConvCtrlBlockConf',0
	.word	260
	.byte	1,2,35,42,0,18
	.byte	'Mcu_ClockConfigType',0,24,177,3,3
	.word	10470
	.byte	24,24,184,3,9,28,15
	.byte	'RamBaseAdrPtr',0
	.word	9856
	.byte	4,2,35,0,15
	.byte	'RamSize',0
	.word	399
	.byte	4,2,35,4,15
	.byte	'RamPrstData',0
	.word	1260
	.byte	8,2,35,8,15
	.byte	'RamData',0
	.word	1260
	.byte	8,2,35,16,15
	.byte	'RamWriteSize',0
	.word	399
	.byte	4,2,35,24,0,18
	.byte	'Mcu_RamConfigType',0,24,193,3,3
	.word	10912
	.byte	7
	.word	9845
	.byte	24,24,201,3,9,4,26
	.byte	'McuMode',0,1
	.word	260
	.byte	3,5,2,35,0,26
	.byte	'EvrcLowPowerMode',0,1
	.word	260
	.byte	1,4,2,35,0,26
	.byte	'Reserved',0,4
	.word	182
	.byte	28,0,2,35,0,0,18
	.byte	'Mcu_ModeEvrcCtrlType',0,24,206,3,3
	.word	11051
	.byte	24,24,223,3,9,28,15
	.byte	'MaxModeEvrcCtrl',0
	.word	11051
	.byte	4,2,35,0,15
	.byte	'Pmswcr0',0
	.word	399
	.byte	4,2,35,4,15
	.byte	'Pmswcr3',0
	.word	399
	.byte	4,2,35,8,15
	.byte	'Pmswcr4',0
	.word	399
	.byte	4,2,35,12,15
	.byte	'Pmswcr5',0
	.word	399
	.byte	4,2,35,16,15
	.byte	'Evruvmon',0
	.word	399
	.byte	4,2,35,20,15
	.byte	'EvrmonCtrl',0
	.word	399
	.byte	4,2,35,24,0,18
	.byte	'Mcu_LowPowerModeType',0,24,242,3,3
	.word	11155
	.byte	24,24,250,3,9,8,15
	.byte	'GtmCmuExtClockNum',0
	.word	399
	.byte	4,2,35,0,15
	.byte	'GtmCmuExtClockDen',0
	.word	399
	.byte	4,2,35,4,0,18
	.byte	'Mcu_GtmExtClkType',0,24,128,4,3
	.word	11323
	.byte	22,32
	.word	399
	.byte	23,7,0,22,24
	.word	11323
	.byte	23,2,0,24,24,135,4,9,76,15
	.byte	'GtmCmuClockEnable',0
	.word	399
	.byte	4,2,35,0,15
	.byte	'GtmCmuGlobalNumerator',0
	.word	399
	.byte	4,2,35,4,15
	.byte	'GtmCmuGlobalDenominator',0
	.word	399
	.byte	4,2,35,8,15
	.byte	'GtmCmuConfClkCtrl',0
	.word	11411
	.byte	32,2,35,12,15
	.byte	'GtmCmuFixedClkCtrl',0
	.word	399
	.byte	4,2,35,44,15
	.byte	'GtmCmuClsInDiv',0
	.word	399
	.byte	4,2,35,48,15
	.byte	'GtmEclkCtrl',0
	.word	11420
	.byte	24,2,35,52,0,18
	.byte	'Mcu_GtmClockSettingType',0,24,151,4,3
	.word	11429
	.byte	24,24,158,4,9,12,15
	.byte	'GtmCcmCfg',0
	.word	399
	.byte	4,2,35,0,15
	.byte	'GtmCcmConfClockCfg',0
	.word	399
	.byte	4,2,35,4,15
	.byte	'GtmCcmFixedClockCfg',0
	.word	399
	.byte	4,2,35,8,0,18
	.byte	'Mcu_GtmClusterConfigType',0,24,166,4,3
	.word	11660
	.byte	24,24,173,4,9,8,15
	.byte	'TomTgcIntTrigRstCn0',0
	.word	399
	.byte	4,2,35,0,15
	.byte	'TomTgcActTb',0
	.word	399
	.byte	4,2,35,4,0,18
	.byte	'Mcu_GtmTomConfigType',0,24,188,4,3
	.word	11777
	.byte	24,24,195,4,9,8,15
	.byte	'AtomAgcIntTrigRstCn0',0
	.word	399
	.byte	4,2,35,0,15
	.byte	'AtomAgcActTb',0
	.word	399
	.byte	4,2,35,4,0,18
	.byte	'Mcu_GtmAtomConfigType',0,24,210,4,3
	.word	11864
	.byte	24,24,217,4,9,8,15
	.byte	'GtmAdcTrigOut0',0
	.word	399
	.byte	4,2,35,0,15
	.byte	'GtmAdcTrigOut1',0
	.word	399
	.byte	4,2,35,4,0,18
	.byte	'Mcu_GtmAdcTrigType',0,24,221,4,3
	.word	11954
	.byte	24,24,225,4,9,8,15
	.byte	'GtmDsadcTrigOut0',0
	.word	399
	.byte	4,2,35,0,15
	.byte	'GtmDsadcTrigOut1',0
	.word	399
	.byte	4,2,35,4,0,18
	.byte	'Mcu_GtmDsadcTrigType',0,24,229,4,3
	.word	12037
	.byte	3
	.word	11429
	.byte	7
	.word	12126
	.byte	3
	.word	11660
	.byte	7
	.word	12136
	.byte	22,96
	.word	11777
	.byte	23,11,0,22,96
	.word	11864
	.byte	23,11,0,22,40
	.word	11954
	.byte	23,4,0,22,32
	.word	12037
	.byte	23,3,0,22,136,1
	.word	399
	.byte	23,33,0,24,24,237,4,9,204,4,15
	.byte	'GtmClockCfgPtr',0
	.word	12131
	.byte	4,2,35,0,15
	.byte	'GtmClusterCfgPtr',0
	.word	12141
	.byte	4,2,35,4,15
	.byte	'GtmTomCfg',0
	.word	12146
	.byte	96,2,35,8,15
	.byte	'GtmAtomCfg',0
	.word	12155
	.byte	96,2,35,104,15
	.byte	'GtmAdcTrigCfg',0
	.word	12164
	.byte	40,3,35,200,1,15
	.byte	'GtmDsadcTrigCfg',0
	.word	12173
	.byte	32,3,35,240,1,15
	.byte	'GtmToutSelCfg',0
	.word	12182
	.byte	136,1,3,35,144,2,15
	.byte	'GtmToutSelCfgMsk',0
	.word	12182
	.byte	136,1,3,35,152,3,15
	.byte	'GtmTimInSelCfg',0
	.word	11411
	.byte	32,3,35,160,4,15
	.byte	'GtmTbuCfg',0
	.word	399
	.byte	4,3,35,192,4,15
	.byte	'GtmTomModuleUsage',0
	.word	277
	.byte	2,3,35,196,4,15
	.byte	'GtmAtomModuleUsage',0
	.word	277
	.byte	2,3,35,198,4,15
	.byte	'IsGtmSleepModeEnabled',0
	.word	260
	.byte	1,3,35,200,4,0,18
	.byte	'Mcu_GtmConfigType',0,24,137,5,3
	.word	12192
	.byte	22,4
	.word	2016
	.byte	23,0,0,3
	.word	12553
	.byte	27
	.byte	'EcuM_DriverInitOne',0,3,144,2,50
	.word	12562
	.byte	1,1,22,6
	.word	2117
	.byte	23,5,0,3
	.word	12597
	.byte	27
	.byte	'EcuM_WakeupSourceList',0,3,164,2,53
	.word	12606
	.byte	1,1,27
	.byte	'EcuM_ModuleState',0,3,177,2,45
	.word	260
	.byte	1,1,18
	.byte	'ComM_InitStatusType',0,25,82,15
	.word	260
	.byte	18
	.byte	'ComM_PncUserOfUserType',0,26,136,4,17
	.word	260
	.byte	18
	.byte	'ComM_UserReqFullComType',0,26,160,4,15
	.word	260
	.byte	14
	.byte	'sComM_ChannelType',0,26,176,4,16,1,15
	.byte	'ComM_ChannelNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'ComM_ChannelType',0,26,179,4,3
	.word	12765
	.byte	14
	.byte	'sComM_ChannelPbType',0,26,182,4,16,1,15
	.byte	'ComM_ChannelPbNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'ComM_ChannelPbType',0,26,185,4,3
	.word	12847
	.byte	14
	.byte	'sComM_UserType',0,26,188,4,16,1,15
	.byte	'PncUserOfUser',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'ComM_UserType',0,26,191,4,3
	.word	12935
	.byte	14
	.byte	'sComM_UserByteMaskType',0,26,194,4,16,1,15
	.byte	'ComM_UserByteMaskNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'ComM_UserByteMaskType',0,26,197,4,3
	.word	13003
	.byte	14
	.byte	'sComM_PCConfigType',0,26,233,4,16,1,15
	.byte	'ComM_PCConfigNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'ComM_PCConfigType',0,26,236,4,3
	.word	13100
	.byte	18
	.byte	'CanSM_BswMCurrentStateType',0,27,65,15
	.word	260
	.byte	18
	.byte	'BswM_ActionListsIterType',0,8,183,6,21
	.word	260
	.byte	18
	.byte	'BswM_ImmediateUserIterType',0,8,207,6,21
	.word	260
	.byte	18
	.byte	'BswM_ActionListQueueType',0,8,136,7,15
	.word	260
	.byte	18
	.byte	'BswM_RulesIdxOfDeferredRulesType',0,8,154,7,15
	.word	260
	.byte	18
	.byte	'BswM_ForcedActionListPriorityType',0,8,157,7,15
	.word	260
	.byte	18
	.byte	'BswM_ExternalIdOfGenericMappingType',0,8,160,7,16
	.word	399
	.byte	18
	.byte	'BswM_ImmediateUserEndIdxOfGenericMappingType',0,8,163,7,15
	.word	260
	.byte	18
	.byte	'BswM_ImmediateUserStartIdxOfGenericMappingType',0,8,166,7,15
	.word	260
	.byte	18
	.byte	'BswM_MaskedBitsOfImmediateUserType',0,8,172,7,15
	.word	260
	.byte	18
	.byte	'BswM_RulesIndEndIdxOfImmediateUserType',0,8,178,7,15
	.word	260
	.byte	18
	.byte	'BswM_RulesIndStartIdxOfImmediateUserType',0,8,181,7,15
	.word	260
	.byte	18
	.byte	'BswM_InitializedType',0,8,187,7,17
	.word	260
	.byte	18
	.byte	'BswM_ModeRequestQueueType',0,8,190,7,15
	.word	260
	.byte	18
	.byte	'BswM_PCPartitionConfigIdxOfPartitionIdentifiersType',0,8,193,7,15
	.word	260
	.byte	18
	.byte	'BswM_PartitionSNVOfPartitionIdentifiersType',0,8,196,7,16
	.word	399
	.byte	18
	.byte	'BswM_QueueSemaphoreType',0,8,199,7,15
	.word	260
	.byte	18
	.byte	'BswM_QueueWrittenType',0,8,202,7,17
	.word	260
	.byte	18
	.byte	'BswM_RuleStatesType',0,8,205,7,15
	.word	260
	.byte	18
	.byte	'BswM_IdOfRulesType',0,8,208,7,15
	.word	260
	.byte	18
	.byte	'BswM_RuleStatesIdxOfRulesType',0,8,214,7,15
	.word	260
	.byte	18
	.byte	'BswM_RulesIndType',0,8,217,7,15
	.word	260
	.byte	18
	.byte	'BswM_TimerStateType',0,8,152,8,15
	.word	260
	.byte	18
	.byte	'BswM_TimerValueType',0,8,155,8,16
	.word	399
	.byte	18
	.byte	'BswM_ModeType',0,8,168,8,16
	.word	277
	.byte	18
	.byte	'BswM_HandleType',0,8,169,8,15
	.word	260
	.byte	28,1,1,5
	.word	260
	.byte	0,7
	.word	14178
	.byte	18
	.byte	'BswM_InitGenVarAndInitALType',0,8,170,8,9
	.word	14187
	.byte	29
	.word	260
	.byte	1,1,5
	.word	260
	.byte	0,7
	.word	14230
	.byte	18
	.byte	'BswM_RuleTableFctPtrType',0,8,171,8,9
	.word	14243
	.byte	7
	.word	14230
	.byte	18
	.byte	'BswM_ActionListFuncType',0,8,172,8,9
	.word	14282
	.byte	18
	.byte	'BswM_PartitionFunctionType',0,8,174,8,9
	.word	1873
	.byte	14
	.byte	'sBswM_ActionListsType',0,8,187,8,16,4,15
	.byte	'FctPtrOfActionLists',0
	.word	14287
	.byte	4,2,35,0,0,18
	.byte	'BswM_ActionListsType',0,8,190,8,3
	.word	14356
	.byte	7
	.word	14230
	.byte	14
	.byte	'sBswM_CanSMChannelMappingType',0,8,193,8,16,1,15
	.byte	'BswM_CanSMChannelMappingNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'BswM_CanSMChannelMappingType',0,8,196,8,3
	.word	14449
	.byte	14
	.byte	'sBswM_ComMChannelMappingType',0,8,199,8,16,1,15
	.byte	'BswM_ComMChannelMappingNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'BswM_ComMChannelMappingType',0,8,202,8,3
	.word	14567
	.byte	14
	.byte	'sBswM_DeferredRulesType',0,8,205,8,16,1,15
	.byte	'RulesIdxOfDeferredRules',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'BswM_DeferredRulesType',0,8,208,8,3
	.word	14682
	.byte	14
	.byte	'sBswM_GenericMappingType',0,8,211,8,16,8,15
	.byte	'ExternalIdOfGenericMapping',0
	.word	399
	.byte	4,2,35,0,15
	.byte	'ImmediateUserEndIdxOfGenericMapping',0
	.word	260
	.byte	1,2,35,4,15
	.byte	'ImmediateUserStartIdxOfGenericMapping',0
	.word	260
	.byte	1,2,35,5,15
	.byte	'InitValueOfGenericMapping',0
	.word	277
	.byte	2,2,35,6,0,18
	.byte	'BswM_GenericMappingType',0,8,217,8,3
	.word	14778
	.byte	14
	.byte	'sBswM_ImmediateUserType',0,8,220,8,16,4,15
	.byte	'MaskedBitsOfImmediateUser',0
	.word	260
	.byte	1,2,35,0,15
	.byte	'RulesIndEndIdxOfImmediateUser',0
	.word	260
	.byte	1,2,35,1,15
	.byte	'RulesIndStartIdxOfImmediateUser',0
	.word	260
	.byte	1,2,35,2,0,18
	.byte	'BswM_ImmediateUserType',0,8,225,8,3
	.word	15006
	.byte	14
	.byte	'sBswM_PartitionIdentifiersType',0,8,228,8,16,6,15
	.byte	'PartitionSNVOfPartitionIdentifiers',0
	.word	399
	.byte	4,2,35,0,15
	.byte	'PCPartitionConfigIdxOfPartitionIdentifiers',0
	.word	260
	.byte	1,2,35,4,0,18
	.byte	'BswM_PartitionIdentifiersType',0,8,232,8,3
	.word	15184
	.byte	14
	.byte	'sBswM_RulesType',0,8,235,8,16,8,15
	.byte	'IdOfRules',0
	.word	260
	.byte	1,2,35,0,15
	.byte	'RuleStatesIdxOfRules',0
	.word	260
	.byte	1,2,35,1,15
	.byte	'FctPtrOfRules',0
	.word	14248
	.byte	4,2,35,4,0,18
	.byte	'BswM_RulesType',0,8,240,8,3
	.word	15357
	.byte	7
	.word	14230
	.byte	14
	.byte	'BswM_ActionListQueueStructSTag',0,8,252,8,16,20,15
	.byte	'AL_ESH_AL_RunToPostRun',0
	.word	260
	.byte	1,2,35,0,15
	.byte	'AL_ESH_AL_WaitForNvMToShutdown',0
	.word	260
	.byte	1,2,35,1,15
	.byte	'AL_ESH_AL_WakeupToPrep',0
	.word	260
	.byte	1,2,35,2,15
	.byte	'AL_ESH_AL_WaitForNvMWakeup',0
	.word	260
	.byte	1,2,35,3,15
	.byte	'AL_ESH_AL_WakeupToRun',0
	.word	260
	.byte	1,2,35,4,15
	.byte	'AL_ESH_AL_InitToWakeup',0
	.word	260
	.byte	1,2,35,5,15
	.byte	'AL_ESH_AL_PostRunToPrepShutdown',0
	.word	260
	.byte	1,2,35,6,15
	.byte	'AL_ESH_AL_ESH_PostRunToPrepCheck',0
	.word	260
	.byte	1,2,35,7,15
	.byte	'AL_ESH_AL_PostRunToRun',0
	.word	260
	.byte	1,2,35,8,15
	.byte	'AL_ESH_AL_ExitPostRun',0
	.word	260
	.byte	1,2,35,9,15
	.byte	'AL_ESH_AL_PrepShutdownToWaitForNvM',0
	.word	260
	.byte	1,2,35,10,15
	.byte	'AL_INIT_AL_Initialize',0
	.word	260
	.byte	1,2,35,11,15
	.byte	'AL_CC_AL_CN_testCANFDdbc_9817eee0_TX_Disable',0
	.word	260
	.byte	1,2,35,12,15
	.byte	'AL_CC_AL_CN_testCANFDdbc_9817eee0_TX_EnableNoinit',0
	.word	260
	.byte	1,2,35,13,15
	.byte	'AL_CC_AL_CN_testCANFDdbc_9817eee0_Disable_DM',0
	.word	260
	.byte	1,2,35,14,15
	.byte	'AL_CC_AL_CN_testCANFDdbc_9817eee0_Enable_DM',0
	.word	260
	.byte	1,2,35,15,15
	.byte	'AL_CC_AL_CN_testCANFDdbc_9817eee0_RX_Disable',0
	.word	260
	.byte	1,2,35,16,15
	.byte	'AL_CC_AL_CN_testCANFDdbc_9817eee0_RX_EnableNoinit',0
	.word	260
	.byte	1,2,35,17,15
	.byte	'AL_ESH_AL_ExitRun',0
	.word	260
	.byte	1,2,35,18,0,18
	.byte	'BswM_ActionListQueueStructSType',0,8,145,9,3
	.word	15481
	.byte	14
	.byte	'BswM_RuleStatesStructSTag',0,8,148,9,16,16,15
	.byte	'R_ESH_RunToPostRun',0
	.word	260
	.byte	1,2,35,0,15
	.byte	'R_ESH_WaitToShutdown',0
	.word	260
	.byte	1,2,35,1,15
	.byte	'R_ESH_WakeupToPrep',0
	.word	260
	.byte	1,2,35,2,15
	.byte	'R_ESH_WaitToWakeup',0
	.word	260
	.byte	1,2,35,3,15
	.byte	'R_ESH_WakeupToRun',0
	.word	260
	.byte	1,2,35,4,15
	.byte	'R_ESH_InitToWakeup',0
	.word	260
	.byte	1,2,35,5,15
	.byte	'R_ESH_PostRunToPrepNested',0
	.word	260
	.byte	1,2,35,6,15
	.byte	'R_ESH_PostRunNested',0
	.word	260
	.byte	1,2,35,7,15
	.byte	'R_ESH_PostRun',0
	.word	260
	.byte	1,2,35,8,15
	.byte	'R_ESH_PrepToWait',0
	.word	260
	.byte	1,2,35,9,15
	.byte	'R_CC_CN_testCANFDdbc_9817eee0_TX',0
	.word	260
	.byte	1,2,35,10,15
	.byte	'R_CC_CN_testCANFDdbc_9817eee0_RX_DM',0
	.word	260
	.byte	1,2,35,11,15
	.byte	'R_CC_CN_testCANFDdbc_9817eee0_RX',0
	.word	260
	.byte	1,2,35,12,15
	.byte	'R_ESH_RunToPostRunNested',0
	.word	260
	.byte	1,2,35,13,0,18
	.byte	'BswM_RuleStatesStructSType',0,8,164,9,3
	.word	16344
	.byte	14
	.byte	'BswM_TimerStateStructSTag',0,8,167,9,16,1,15
	.byte	'MRP_ESH_SelfRunRequestTimer',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'BswM_TimerStateStructSType',0,8,170,9,3
	.word	16858
	.byte	14
	.byte	'BswM_TimerValueStructSTag',0,8,173,9,16,4,15
	.byte	'MRP_ESH_SelfRunRequestTimer',0
	.word	399
	.byte	4,2,35,0,0,18
	.byte	'BswM_TimerValueStructSType',0,8,176,9,3
	.word	16964
	.byte	14
	.byte	'sBswM_PCPartitionConfigType',0,8,178,10,16,1,15
	.byte	'BswM_PCPartitionConfigNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,18
	.byte	'BswM_PCPartitionConfigType',0,8,181,10,3
	.word	17070
	.byte	18
	.byte	'BswM_PCConfigType',0,8,199,10,3
	.word	937
	.byte	18
	.byte	'BswM_ConfigType',0,8,201,10,27
	.word	937
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L189:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,11
	.byte	5,0,3,8,58,15,59,15,57,15,73,19,0,0,12,46,0,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,13,46,1
	.byte	3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,14,19,1,3,8,58,15,59,15,57,15,11,15,0,0,15,13,0,3,8
	.byte	73,19,11,15,56,9,0,0,16,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,17,21,0,54,15,0,0,18,22,0,3,8
	.byte	58,15,59,15,57,15,73,19,0,0,19,4,1,58,15,59,15,57,15,11,15,0,0,20,40,0,3,8,28,13,0,0,21,21,0,54,15,39
	.byte	12,0,0,22,1,1,11,15,73,19,0,0,23,33,0,47,15,0,0,24,19,1,58,15,59,15,57,15,11,15,0,0,25,59,0,3,8,0,0,26
	.byte	13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,27,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,28,21,1
	.byte	54,15,39,12,0,0,29,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L190:
	.word	.L554-.L553
.L553:
	.half	3
	.word	.L556-.L555
.L555:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\appl\\GenData',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\ComM\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\BswM\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc',0
	.byte	'D:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\inc',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\CanSM\\Implementation',0,0
	.byte	'Det.h',0,1,0,0
	.byte	'Os.h',0,2,0,0
	.byte	'EcuM_PrivateCfg.h',0,3,0,0
	.byte	'ComM.h',0,4,0,0
	.byte	'ComM_EcuMBswM.h',0,4,0,0
	.byte	'BswM_EcuM.h',0,5,0,0
	.byte	'BswM.h',0,5,0,0
	.byte	'BswM_Cfg.h',0,3,0,0
	.byte	'Rte_Main.h',0,3,0,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0
	.byte	'Platform_Types.h',0,6,0,0
	.byte	'Std_Types.h',0,6,0,0
	.byte	'ComStack_Cfg.h',0,3,0,0
	.byte	'ComStack_Types.h',0,6,0,0
	.byte	'Det_Cfg.h',0,3,0,0
	.byte	'Rte_Type.h',0,3,0,0
	.byte	'EcuM_Generated_Types.h',0,3,0,0
	.byte	'EcuM_Cfg.h',0,3,0,0
	.byte	'Os_Types_Lcfg.h',0,3,0,0
	.byte	'Os_Hal_Os_Types.h',0,2,0,0
	.byte	'Os_Hal_OsInt.h',0,2,0,0
	.byte	'Os_Types.h',0,2,0,0
	.byte	'Mcal_Compiler.h',0,7,0,0
	.byte	'Mcu.h',0,8,0,0
	.byte	'ComM_Types.h',0,4,0,0
	.byte	'ComM_Cfg.h',0,3,0,0
	.byte	'CanSM_BswM.h',0,9,0,0,0
.L556:
.L554:
	.sdecl	'.debug_info',debug,cluster('EcuM_ValidateWakeupEvent')
	.sect	'.debug_info'
.L191:
	.word	296
	.half	3
	.word	.L192
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L194,.L193
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_ValidateWakeupEvent',0,1,248,36,23,1,1,1
	.word	.L176,.L389,.L175
	.byte	4
	.byte	'WakeupSource',0,1,248,36,86
	.word	.L390,.L391
	.byte	5
	.word	.L392
	.byte	6
	.byte	'errorId',0,1,251,36,9
	.word	.L393,.L394
	.byte	6
	.byte	'Shiftcount',0,1,252,36,9
	.word	.L393,.L395
	.byte	7
	.word	.L396,.L100
	.byte	6
	.byte	'ComMStatus',0,1,195,37,45
	.word	.L393,.L397
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_ValidateWakeupEvent')
	.sect	'.debug_abbrev'
.L192:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_ValidateWakeupEvent')
	.sect	'.debug_line'
.L193:
	.word	.L558-.L557
.L557:
	.half	3
	.word	.L560-.L559
.L559:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L560:
	.byte	5,23,7,0,5,2
	.word	.L176
	.byte	3,247,36,1,5,17,9
	.half	.L547-.L176
	.byte	3,3,1,5,41,3,1,1,5,20,9
	.half	.L548-.L547
	.byte	1,5,57,9
	.half	.L550-.L548
	.byte	3,5,1,5,89,9
	.half	.L561-.L550
	.byte	1,5,7,9
	.half	.L562-.L561
	.byte	1,5,24,7,9
	.half	.L563-.L562
	.byte	3,1,1,5,13,7,9
	.half	.L96-.L563
	.byte	3,6,1,5,43,1,5,5,9
	.half	.L97-.L96
	.byte	3,6,1,5,10,9
	.half	.L564-.L97
	.byte	3,8,1,5,35,9
	.half	.L549-.L564
	.byte	1,5,9,9
	.half	.L565-.L549
	.byte	1,5,13,7,9
	.half	.L566-.L565
	.byte	3,6,1,5,62,9
	.half	.L567-.L566
	.byte	1,5,59,9
	.half	.L568-.L567
	.byte	1,5,13,7,9
	.half	.L99-.L568
	.byte	1,5,7,9
	.half	.L569-.L99
	.byte	3,9,1,5,29,9
	.half	.L570-.L569
	.byte	1,5,34,9
	.half	.L571-.L570
	.byte	3,8,1,5,7,9
	.half	.L572-.L571
	.byte	1,5,47,7,9
	.half	.L573-.L572
	.byte	3,2,1,5,71,9
	.half	.L574-.L573
	.byte	1,5,9,9
	.half	.L101-.L574
	.byte	3,5,1,5,35,9
	.half	.L575-.L101
	.byte	1,5,11,9
	.half	.L102-.L575
	.byte	3,9,1,5,60,9
	.half	.L576-.L102
	.byte	1,5,7,9
	.half	.L577-.L576
	.byte	1,5,31,7,9
	.half	.L396-.L577
	.byte	3,7,1,5,12,9
	.half	.L578-.L396
	.byte	3,3,1,5,9,9
	.half	.L579-.L578
	.byte	1,5,40,7,9
	.half	.L580-.L579
	.byte	3,7,1,5,86,9
	.half	.L581-.L580
	.byte	1,5,11,9
	.half	.L104-.L581
	.byte	3,13,1,5,37,9
	.half	.L582-.L104
	.byte	1,5,5,9
	.half	.L100-.L582
	.byte	3,14,1,5,3,9
	.half	.L98-.L100
	.byte	3,5,1,5,5,7,9
	.half	.L583-.L98
	.byte	3,2,1,5,1,9
	.half	.L106-.L583
	.byte	3,5,1,7,9
	.half	.L195-.L106
	.byte	0,1,1
.L558:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_ValidateWakeupEvent')
	.sect	'.debug_ranges'
.L194:
	.word	-1,.L176,0,.L195-.L176,0,0
.L392:
	.word	-1,.L176,0,.L389-.L176,-1,.L178,0,.L365-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_SetWakeupEvent')
	.sect	'.debug_info'
.L196:
	.word	261
	.half	3
	.word	.L197
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L199,.L198
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_SetWakeupEvent',0,1,252,35,23,1,1,1
	.word	.L174,.L398,.L173
	.byte	4
	.byte	'WakeupSource',0,1,252,35,81
	.word	.L390,.L399
	.byte	5
	.word	.L174,.L398
	.byte	6
	.byte	'errorId',0,1,255,35,9
	.word	.L393,.L400
	.byte	6
	.byte	'Shiftcount',0,1,128,36,9
	.word	.L393,.L401
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_SetWakeupEvent')
	.sect	'.debug_abbrev'
.L197:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_SetWakeupEvent')
	.sect	'.debug_line'
.L198:
	.word	.L585-.L584
.L584:
	.half	3
	.word	.L587-.L586
.L586:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L587:
	.byte	5,23,7,0,5,2
	.word	.L174
	.byte	3,251,35,1,5,17,9
	.half	.L545-.L174
	.byte	3,3,1,5,35,3,3,1,5,57,9
	.half	.L544-.L545
	.byte	3,7,1,5,89,9
	.half	.L588-.L544
	.byte	1,5,7,9
	.half	.L589-.L588
	.byte	1,5,24,7,9
	.half	.L590-.L589
	.byte	3,1,1,5,13,7,9
	.half	.L92-.L590
	.byte	3,7,1,5,43,1,5,34,9
	.half	.L93-.L92
	.byte	3,57,1,5,3,9
	.half	.L94-.L93
	.byte	3,15,1,5,5,7,9
	.half	.L591-.L94
	.byte	3,2,1,5,1,9
	.half	.L95-.L591
	.byte	3,5,1,7,9
	.half	.L200-.L95
	.byte	0,1,1
.L585:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_SetWakeupEvent')
	.sect	'.debug_ranges'
.L199:
	.word	-1,.L174,0,.L200-.L174,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_Init')
	.sect	'.debug_info'
.L201:
	.word	179
	.half	3
	.word	.L202
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L204,.L203
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_Init',0,1,201,24,23,1,1,1
	.word	.L132,.L402,.L131
	.byte	4
	.word	.L132,.L402
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_Init')
	.sect	'.debug_abbrev'
.L202:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_Init')
	.sect	'.debug_line'
.L203:
	.word	.L593-.L592
.L592:
	.half	3
	.word	.L595-.L594
.L594:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L595:
	.byte	5,7,7,0,5,2
	.word	.L132
	.byte	3,248,24,1,5,40,9
	.half	.L596-.L132
	.byte	3,3,1,5,31,9
	.half	.L597-.L596
	.byte	3,3,1,5,38,9
	.half	.L598-.L597
	.byte	3,13,1,5,7,9
	.half	.L599-.L598
	.byte	3,7,1,5,28,9
	.half	.L600-.L599
	.byte	1,5,26,1,5,7,9
	.half	.L601-.L600
	.byte	3,3,1,5,32,9
	.half	.L602-.L601
	.byte	1,5,30,1,5,7,9
	.half	.L603-.L602
	.byte	3,17,1,9
	.half	.L604-.L603
	.byte	3,38,1,5,30,9
	.half	.L605-.L604
	.byte	1,5,7,9
	.half	.L606-.L605
	.byte	3,49,1,5,29,9
	.half	.L607-.L606
	.byte	1,5,33,9
	.half	.L608-.L607
	.byte	3,3,1,5,36,9
	.half	.L609-.L608
	.byte	3,8,1,5,7,1,5,19,9
	.half	.L610-.L609
	.byte	3,25,1,5,34,3,103,1,9
	.half	.L611-.L610
	.byte	3,1,1,5,7,1,5,32,9
	.half	.L612-.L611
	.byte	1,5,19,9
	.half	.L613-.L612
	.byte	3,24,1,5,1,7,9
	.half	.L205-.L613
	.byte	3,13,0,1,1
.L593:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_Init')
	.sect	'.debug_ranges'
.L204:
	.word	-1,.L132,0,.L205-.L132,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_Shutdown')
	.sect	'.debug_info'
.L206:
	.word	265
	.half	3
	.word	.L207
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L209,.L208
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_Shutdown',0,1,194,26,23,1,1,1
	.word	.L134,.L403,.L133
	.byte	4
	.word	.L404
	.byte	5
	.byte	'errorId',0,1,197,26,9
	.word	.L393,.L405
	.byte	5
	.byte	'localShutdownTarget',0,1,198,26,18
	.word	.L393,.L406
	.byte	5
	.byte	'localShutdownMode',0,1,199,26,9
	.word	.L393,.L407
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_Shutdown')
	.sect	'.debug_abbrev'
.L207:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,85,6,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_Shutdown')
	.sect	'.debug_line'
.L208:
	.word	.L615-.L614
.L614:
	.half	3
	.word	.L617-.L616
.L616:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L617:
	.byte	5,23,7,0,5,2
	.word	.L134
	.byte	3,193,26,1,5,17,9
	.half	.L501-.L134
	.byte	3,3,1,5,33,9
	.half	.L503-.L501
	.byte	3,6,1,5,3,9
	.half	.L618-.L503
	.byte	1,5,13,7,9
	.half	.L619-.L618
	.byte	3,2,1,5,48,1,5,5,9
	.half	.L11-.L619
	.byte	3,7,1,5,20,9
	.half	.L620-.L11
	.byte	3,3,1,5,44,9
	.half	.L621-.L620
	.byte	3,3,1,5,66,9
	.half	.L622-.L621
	.byte	1,5,12,9
	.half	.L623-.L622
	.byte	3,18,1,5,5,3,111,1,5,31,9
	.half	.L624-.L623
	.byte	1,5,29,9
	.half	.L625-.L624
	.byte	1,5,5,9
	.half	.L626-.L625
	.byte	3,1,1,5,29,9
	.half	.L627-.L626
	.byte	1,5,27,9
	.half	.L628-.L627
	.byte	1,5,12,9
	.half	.L629-.L628
	.byte	3,16,1,7,9
	.half	.L630-.L629
	.byte	3,123,1,5,23,9
	.half	.L631-.L630
	.byte	3,2,1,5,9,9
	.half	.L632-.L631
	.byte	3,1,1,5,26,9
	.half	.L13-.L632
	.byte	3,4,1,5,9,9
	.half	.L633-.L13
	.byte	3,1,1,5,17,9
	.half	.L15-.L633
	.byte	3,4,1,5,3,9
	.half	.L12-.L15
	.byte	3,7,1,5,5,7,9
	.half	.L634-.L12
	.byte	3,2,1,5,1,9
	.half	.L18-.L634
	.byte	3,5,1,7,9
	.half	.L210-.L18
	.byte	0,1,1
.L615:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_Shutdown')
	.sect	'.debug_ranges'
.L209:
	.word	-1,.L134,0,.L210-.L134,0,0
.L404:
	.word	-1,.L134,0,.L403-.L134,-1,.L136,0,.L355-.L136,-1,.L138,0,.L330-.L138,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_SelectShutdownTarget')
	.sect	'.debug_info'
.L211:
	.word	290
	.half	3
	.word	.L212
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L214,.L213
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_SelectShutdownTarget',0,1,144,27,33
	.word	.L393
	.byte	1,1,1
	.word	.L140,.L408,.L139
	.byte	4
	.byte	'targetState',0,1,144,27,90
	.word	.L393,.L409
	.byte	4
	.byte	'resetSleepMode',0,1,145,27,31
	.word	.L393,.L410
	.byte	5
	.word	.L411
	.byte	6
	.byte	'errorId',0,1,148,27,9
	.word	.L393,.L412
	.byte	6
	.byte	'retval',0,1,149,27,18
	.word	.L393,.L413
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_SelectShutdownTarget')
	.sect	'.debug_abbrev'
.L212:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_SelectShutdownTarget')
	.sect	'.debug_line'
.L213:
	.word	.L636-.L635
.L635:
	.half	3
	.word	.L638-.L637
.L637:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L638:
	.byte	5,17,7,0,5,2
	.word	.L140
	.byte	3,147,27,1,5,8,3,6,1,5,7,9
	.half	.L639-.L140
	.byte	1,5,84,7,9
	.half	.L640-.L639
	.byte	1,5,82,9
	.half	.L641-.L640
	.byte	1,5,13,7,9
	.half	.L19-.L641
	.byte	3,2,1,5,45,1,5,24,9
	.half	.L20-.L19
	.byte	3,12,1,5,8,9
	.half	.L642-.L20
	.byte	1,5,76,7,9
	.half	.L643-.L642
	.byte	1,5,73,9
	.half	.L644-.L643
	.byte	1,5,30,7,9
	.half	.L645-.L644
	.byte	3,1,1,5,27,9
	.half	.L646-.L645
	.byte	1,5,24,7,9
	.half	.L22-.L646
	.byte	3,4,1,5,8,9
	.half	.L647-.L22
	.byte	1,5,78,7,9
	.half	.L648-.L647
	.byte	1,5,13,7,9
	.half	.L24-.L648
	.byte	3,14,1,5,12,9
	.half	.L21-.L24
	.byte	3,1,1,5,44,3,127,1,5,24,9
	.half	.L25-.L21
	.byte	3,6,1,5,5,9
	.half	.L649-.L25
	.byte	1,5,45,7,9
	.half	.L650-.L649
	.byte	3,4,1,5,58,9
	.half	.L510-.L650
	.byte	1,9
	.half	.L28-.L510
	.byte	3,6,1,5,12,9
	.half	.L509-.L28
	.byte	3,3,1,5,3,9
	.half	.L27-.L509
	.byte	3,5,1,5,5,7,9
	.half	.L651-.L27
	.byte	3,2,1,5,3,9
	.half	.L30-.L651
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L215-.L30
	.byte	0,1,1
.L636:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_SelectShutdownTarget')
	.sect	'.debug_ranges'
.L214:
	.word	-1,.L140,0,.L215-.L140,0,0
.L411:
	.word	-1,.L140,0,.L408-.L140,-1,.L142,0,.L335-.L142,-1,.L144,0,.L370-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_GetShutdownTarget')
	.sect	'.debug_info'
.L216:
	.word	286
	.half	3
	.word	.L217
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L219,.L218
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_GetShutdownTarget',0,1,233,27,33
	.word	.L393
	.byte	1,1,1
	.word	.L146,.L414,.L145
	.byte	4
	.byte	'target',0,1,234,27,50
	.word	.L415,.L416
	.byte	4
	.byte	'resetSleepMode',0,1,235,27,49
	.word	.L417,.L418
	.byte	5
	.word	.L146,.L414
	.byte	6
	.byte	'retval',0,1,238,27,18
	.word	.L393,.L419
	.byte	6
	.byte	'errorId',0,1,239,27,9
	.word	.L393,.L420
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_GetShutdownTarget')
	.sect	'.debug_abbrev'
.L217:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_GetShutdownTarget')
	.sect	'.debug_line'
.L218:
	.word	.L653-.L652
.L652:
	.half	3
	.word	.L655-.L654
.L654:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L655:
	.byte	5,25,7,0,5,2
	.word	.L146
	.byte	3,237,27,1,5,17,9
	.half	.L511-.L146
	.byte	3,1,1,5,6,3,5,1,5,30,9
	.half	.L656-.L511
	.byte	1,5,3,9
	.half	.L512-.L656
	.byte	1,5,13,7,9
	.half	.L657-.L512
	.byte	3,2,1,5,28,1,5,8,9
	.half	.L32-.L657
	.byte	3,5,1,5,7,9
	.half	.L658-.L32
	.byte	1,5,41,7,9
	.half	.L659-.L658
	.byte	1,5,13,7,9
	.half	.L34-.L659
	.byte	3,2,1,5,34,1,5,51,9
	.half	.L35-.L34
	.byte	3,6,1,5,12,9
	.half	.L513-.L35
	.byte	3,1,1,5,3,9
	.half	.L33-.L513
	.byte	3,5,1,5,5,7,9
	.half	.L660-.L33
	.byte	3,2,1,5,3,9
	.half	.L37-.L660
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L220-.L37
	.byte	0,1,1
.L653:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_GetShutdownTarget')
	.sect	'.debug_ranges'
.L219:
	.word	-1,.L146,0,.L220-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_GetLastShutdownTarget')
	.sect	'.debug_info'
.L221:
	.word	290
	.half	3
	.word	.L222
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L224,.L223
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_GetLastShutdownTarget',0,1,159,28,33
	.word	.L393
	.byte	1,1,1
	.word	.L148,.L421,.L147
	.byte	4
	.byte	'target',0,1,159,28,109
	.word	.L415,.L422
	.byte	4
	.byte	'resetSleepMode',0,1,160,28,49
	.word	.L417,.L423
	.byte	5
	.word	.L148,.L421
	.byte	6
	.byte	'retval',0,1,163,28,18
	.word	.L393,.L424
	.byte	6
	.byte	'errorId',0,1,164,28,9
	.word	.L393,.L425
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_GetLastShutdownTarget')
	.sect	'.debug_abbrev'
.L222:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_GetLastShutdownTarget')
	.sect	'.debug_line'
.L223:
	.word	.L662-.L661
.L661:
	.half	3
	.word	.L664-.L663
.L663:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L664:
	.byte	5,25,7,0,5,2
	.word	.L148
	.byte	3,162,28,1,5,17,9
	.half	.L516-.L148
	.byte	3,1,1,5,6,3,5,1,5,3,9
	.half	.L517-.L516
	.byte	1,5,13,7,9
	.half	.L665-.L517
	.byte	3,2,1,5,28,1,5,8,9
	.half	.L39-.L665
	.byte	3,5,1,5,7,9
	.half	.L666-.L39
	.byte	1,5,41,7,9
	.half	.L667-.L666
	.byte	1,5,13,7,9
	.half	.L41-.L667
	.byte	3,2,1,5,34,1,5,15,9
	.half	.L42-.L41
	.byte	3,7,1,5,13,9
	.half	.L519-.L42
	.byte	1,5,23,9
	.half	.L668-.L519
	.byte	3,2,1,5,12,9
	.half	.L669-.L668
	.byte	3,2,1,5,23,3,126,1,5,21,9
	.half	.L670-.L669
	.byte	1,5,3,9
	.half	.L40-.L670
	.byte	3,7,1,5,5,7,9
	.half	.L671-.L40
	.byte	3,2,1,5,3,9
	.half	.L44-.L671
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L225-.L44
	.byte	0,1,1
.L662:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_GetLastShutdownTarget')
	.sect	'.debug_ranges'
.L224:
	.word	-1,.L148,0,.L225-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_SelectShutdownCause')
	.sect	'.debug_info'
.L226:
	.word	267
	.half	3
	.word	.L227
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L229,.L228
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_SelectShutdownCause',0,1,216,28,33
	.word	.L393
	.byte	1,1,1
	.word	.L150,.L426,.L149
	.byte	4
	.byte	'shutdownCause',0,1,216,28,97
	.word	.L393,.L427
	.byte	5
	.word	.L150,.L426
	.byte	6
	.byte	'retval',0,1,219,28,18
	.word	.L393,.L428
	.byte	6
	.byte	'errorId',0,1,220,28,9
	.word	.L393,.L429
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_SelectShutdownCause')
	.sect	'.debug_abbrev'
.L227:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_SelectShutdownCause')
	.sect	'.debug_line'
.L228:
	.word	.L673-.L672
.L672:
	.half	3
	.word	.L675-.L674
.L674:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L675:
	.byte	5,25,7,0,5,2
	.word	.L150
	.byte	3,218,28,1,5,17,9
	.half	.L522-.L150
	.byte	3,1,1,5,8,3,5,1,5,3,9
	.half	.L676-.L522
	.byte	1,5,13,7,9
	.half	.L677-.L676
	.byte	3,2,1,5,28,1,5,3,9
	.half	.L46-.L677
	.byte	3,8,1,5,12,7,9
	.half	.L678-.L46
	.byte	3,5,1,5,5,3,127,1,5,13,9
	.half	.L679-.L678
	.byte	3,2,1,5,24,3,126,1,5,3,9
	.half	.L47-.L679
	.byte	3,12,1,5,5,7,9
	.half	.L680-.L47
	.byte	3,3,1,5,3,9
	.half	.L49-.L680
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L230-.L49
	.byte	0,1,1
.L673:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_SelectShutdownCause')
	.sect	'.debug_ranges'
.L229:
	.word	-1,.L150,0,.L230-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_GetShutdownCause')
	.sect	'.debug_info'
.L231:
	.word	264
	.half	3
	.word	.L232
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L234,.L233
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_GetShutdownCause',0,1,147,29,33
	.word	.L393
	.byte	1,1,1
	.word	.L152,.L430,.L151
	.byte	4
	.byte	'shutdownCause',0,1,147,29,112
	.word	.L431,.L432
	.byte	5
	.word	.L152,.L430
	.byte	6
	.byte	'retval',0,1,150,29,18
	.word	.L393,.L433
	.byte	6
	.byte	'errorId',0,1,151,29,9
	.word	.L393,.L434
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_GetShutdownCause')
	.sect	'.debug_abbrev'
.L232:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_GetShutdownCause')
	.sect	'.debug_line'
.L233:
	.word	.L682-.L681
.L681:
	.half	3
	.word	.L684-.L683
.L683:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L684:
	.byte	5,25,7,0,5,2
	.word	.L152
	.byte	3,149,29,1,5,6,3,7,1,5,3,9
	.half	.L523-.L152
	.byte	1,5,13,7,9
	.half	.L685-.L523
	.byte	3,2,1,5,28,1,5,6,9
	.half	.L51-.L685
	.byte	3,5,1,5,3,9
	.half	.L686-.L51
	.byte	1,5,13,7,9
	.half	.L687-.L686
	.byte	3,2,1,5,34,1,5,12,9
	.half	.L53-.L687
	.byte	3,6,1,5,22,3,127,1,5,13,9
	.half	.L688-.L53
	.byte	3,2,1,5,22,3,126,1,5,20,9
	.half	.L524-.L688
	.byte	1,5,3,9
	.half	.L52-.L524
	.byte	3,8,1,5,5,7,9
	.half	.L689-.L52
	.byte	3,4,1,5,3,9
	.half	.L55-.L689
	.byte	3,10,1,5,1,3,1,1,7,9
	.half	.L235-.L55
	.byte	0,1,1
.L682:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_GetShutdownCause')
	.sect	'.debug_ranges'
.L234:
	.word	-1,.L152,0,.L235-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_ClearWakeupEvent')
	.sect	'.debug_info'
.L236:
	.word	235
	.half	3
	.word	.L237
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L239,.L238
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_ClearWakeupEvent',0,1,132,30,23,1,1,1
	.word	.L158,.L435,.L157
	.byte	4
	.byte	'WakeupSource',0,1,132,30,83
	.word	.L390,.L436
	.byte	5
	.word	.L437
	.byte	6
	.byte	'errorId',0,1,135,30,9
	.word	.L393,.L438
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_ClearWakeupEvent')
	.sect	'.debug_abbrev'
.L237:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_ClearWakeupEvent')
	.sect	'.debug_line'
.L238:
	.word	.L691-.L690
.L690:
	.half	3
	.word	.L693-.L692
.L692:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L693:
	.byte	5,23,7,0,5,2
	.word	.L158
	.byte	3,131,30,1,5,17,3,3,1,5,32,9
	.half	.L694-.L158
	.byte	3,5,1,5,3,9
	.half	.L695-.L694
	.byte	1,5,13,7,9
	.half	.L696-.L695
	.byte	3,2,1,5,28,1,5,5,9
	.half	.L60-.L696
	.byte	3,7,1,5,35,9
	.half	.L528-.L60
	.byte	3,6,1,5,10,9
	.half	.L697-.L528
	.byte	3,2,1,5,5,9
	.half	.L698-.L697
	.byte	1,5,45,7,9
	.half	.L699-.L698
	.byte	3,2,1,5,5,9
	.half	.L62-.L699
	.byte	3,4,1,5,3,9
	.half	.L61-.L62
	.byte	3,5,1,5,5,7,9
	.half	.L700-.L61
	.byte	3,2,1,5,1,9
	.half	.L63-.L700
	.byte	3,5,1,7,9
	.half	.L240-.L63
	.byte	0,1,1
.L691:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_ClearWakeupEvent')
	.sect	'.debug_ranges'
.L239:
	.word	-1,.L158,0,.L240-.L158,0,0
.L437:
	.word	-1,.L158,0,.L435-.L158,-1,.L160,0,.L360-.L160,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_ClearValidatedWakeupEvent')
	.sect	'.debug_info'
.L241:
	.word	248
	.half	3
	.word	.L242
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L244,.L243
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_ClearValidatedWakeupEvent',0,1,189,30,23,1,1,1
	.word	.L162,.L439,.L161
	.byte	4
	.byte	'WakeupSource',0,1,189,30,92
	.word	.L390,.L440
	.byte	5
	.word	.L162,.L439
	.byte	6
	.byte	'errorId',0,1,192,30,9
	.word	.L393,.L441
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_ClearValidatedWakeupEvent')
	.sect	'.debug_abbrev'
.L242:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_ClearValidatedWakeupEvent')
	.sect	'.debug_line'
.L243:
	.word	.L702-.L701
.L701:
	.half	3
	.word	.L704-.L703
.L703:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L704:
	.byte	5,23,7,0,5,2
	.word	.L162
	.byte	3,188,30,1,5,17,9
	.half	.L533-.L162
	.byte	3,3,1,5,8,3,5,1,5,32,9
	.half	.L705-.L533
	.byte	1,5,3,9
	.half	.L706-.L705
	.byte	1,5,13,7,9
	.half	.L707-.L706
	.byte	3,2,1,5,28,1,5,5,9
	.half	.L64-.L707
	.byte	3,7,1,5,55,9
	.half	.L530-.L64
	.byte	3,2,1,5,5,1,5,55,9
	.half	.L708-.L530
	.byte	1,5,5,1,5,45,9
	.half	.L709-.L708
	.byte	3,7,1,5,27,9
	.half	.L531-.L709
	.byte	3,121,1,5,45,9
	.half	.L710-.L531
	.byte	3,7,1,5,5,9
	.half	.L532-.L710
	.byte	3,4,1,5,3,9
	.half	.L65-.L532
	.byte	3,5,1,5,5,7,9
	.half	.L711-.L65
	.byte	3,2,1,5,1,9
	.half	.L66-.L711
	.byte	3,5,1,7,9
	.half	.L245-.L66
	.byte	0,1,1
.L702:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_ClearValidatedWakeupEvent')
	.sect	'.debug_ranges'
.L244:
	.word	-1,.L162,0,.L245-.L162,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_GetPendingWakeupEvents')
	.sect	'.debug_info'
.L246:
	.word	219
	.half	3
	.word	.L247
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L249,.L248
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_GetPendingWakeupEvents',0,1,207,29,40
	.word	.L390
	.byte	1,1,1
	.word	.L154,.L442,.L153
	.byte	4
	.word	.L443
	.byte	5
	.byte	'errorId',0,1,210,29,9
	.word	.L393,.L444
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_GetPendingWakeupEvents')
	.sect	'.debug_abbrev'
.L247:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,85,6,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_GetPendingWakeupEvents')
	.sect	'.debug_line'
.L248:
	.word	.L713-.L712
.L712:
	.half	3
	.word	.L715-.L714
.L714:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L715:
	.byte	5,17,7,0,5,2
	.word	.L154
	.byte	3,209,29,1,5,3,9
	.half	.L716-.L154
	.byte	3,26,1,5,5,7,9
	.half	.L717-.L716
	.byte	3,3,1,5,10,9
	.half	.L58-.L717
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L250-.L58
	.byte	0,1,1
.L713:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_GetPendingWakeupEvents')
	.sect	'.debug_ranges'
.L249:
	.word	-1,.L154,0,.L250-.L154,0,0
.L443:
	.word	-1,.L154,0,.L442-.L154,-1,.L156,0,.L340-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_GetValidatedWakeupEvents')
	.sect	'.debug_info'
.L251:
	.word	245
	.half	3
	.word	.L252
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L254,.L253
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_GetValidatedWakeupEvents',0,1,244,30,40
	.word	.L390
	.byte	1,1,1
	.word	.L164,.L445,.L163
	.byte	4
	.word	.L164,.L445
	.byte	5
	.byte	'errorId',0,1,247,30,9
	.word	.L393,.L446
	.byte	5
	.byte	'retval',0,1,248,30,25
	.word	.L390,.L447
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_GetValidatedWakeupEvents')
	.sect	'.debug_abbrev'
.L252:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_GetValidatedWakeupEvents')
	.sect	'.debug_line'
.L253:
	.word	.L719-.L718
.L718:
	.half	3
	.word	.L721-.L720
.L720:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L721:
	.byte	5,17,7,0,5,2
	.word	.L164
	.byte	3,246,30,1,5,32,9
	.half	.L535-.L164
	.byte	3,1,1,5,8,3,6,1,5,32,9
	.half	.L722-.L535
	.byte	1,5,3,9
	.half	.L723-.L722
	.byte	1,5,13,7,9
	.half	.L724-.L723
	.byte	3,2,1,5,28,1,5,14,9
	.half	.L67-.L724
	.byte	3,10,1,5,3,9
	.half	.L68-.L67
	.byte	3,7,1,5,5,7,9
	.half	.L725-.L68
	.byte	3,2,1,5,3,9
	.half	.L69-.L725
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L255-.L69
	.byte	0,1,1
.L719:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_GetValidatedWakeupEvents')
	.sect	'.debug_ranges'
.L254:
	.word	-1,.L164,0,.L255-.L164,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_GetExpiredWakeupEvents')
	.sect	'.debug_info'
.L256:
	.word	223
	.half	3
	.word	.L257
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L259,.L258
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_GetExpiredWakeupEvents',0,1,167,31,40
	.word	.L390
	.byte	1,1,1
	.word	.L166,.L448,.L165
	.byte	4
	.word	.L166,.L448
	.byte	5
	.byte	'errorId',0,1,170,31,9
	.word	.L393,.L449
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_GetExpiredWakeupEvents')
	.sect	'.debug_abbrev'
.L257:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_GetExpiredWakeupEvents')
	.sect	'.debug_line'
.L258:
	.word	.L727-.L726
.L726:
	.half	3
	.word	.L729-.L728
.L728:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L729:
	.byte	5,17,7,0,5,2
	.word	.L166
	.byte	3,169,31,1,5,3,9
	.half	.L536-.L166
	.byte	3,29,1,5,5,7,9
	.half	.L730-.L536
	.byte	3,2,1,5,10,9
	.half	.L72-.L730
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L260-.L72
	.byte	0,1,1
.L727:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_GetExpiredWakeupEvents')
	.sect	'.debug_ranges'
.L259:
	.word	-1,.L166,0,.L260-.L166,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_GetBootTarget')
	.sect	'.debug_info'
.L261:
	.word	258
	.half	3
	.word	.L262
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L264,.L263
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_GetBootTarget',0,1,234,33,33
	.word	.L393
	.byte	1,1,1
	.word	.L168,.L450,.L167
	.byte	4
	.byte	'BootTarget',0,1,234,33,106
	.word	.L451,.L452
	.byte	5
	.word	.L168,.L450
	.byte	6
	.byte	'errorId',0,1,237,33,9
	.word	.L393,.L453
	.byte	6
	.byte	'retval',0,1,238,33,18
	.word	.L393,.L454
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_GetBootTarget')
	.sect	'.debug_abbrev'
.L262:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_GetBootTarget')
	.sect	'.debug_line'
.L263:
	.word	.L732-.L731
.L731:
	.half	3
	.word	.L734-.L733
.L733:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L734:
	.byte	5,17,7,0,5,2
	.word	.L168
	.byte	3,236,33,1,5,25,9
	.half	.L537-.L168
	.byte	3,1,1,5,6,3,5,1,5,3,9
	.half	.L538-.L537
	.byte	1,5,13,7,9
	.half	.L735-.L538
	.byte	3,2,1,5,28,1,5,11,9
	.half	.L74-.L735
	.byte	3,4,1,5,8,9
	.half	.L736-.L74
	.byte	1,5,13,7,9
	.half	.L737-.L736
	.byte	3,2,1,5,34,1,5,19,9
	.half	.L76-.L737
	.byte	3,7,1,5,12,9
	.half	.L738-.L76
	.byte	3,1,1,5,19,3,127,1,5,17,9
	.half	.L539-.L738
	.byte	1,5,3,9
	.half	.L75-.L539
	.byte	3,6,1,5,5,7,9
	.half	.L739-.L75
	.byte	3,2,1,5,3,9
	.half	.L78-.L739
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L265-.L78
	.byte	0,1,1
.L732:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_GetBootTarget')
	.sect	'.debug_ranges'
.L264:
	.word	-1,.L168,0,.L265-.L168,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_SelectBootTarget')
	.sect	'.debug_info'
.L266:
	.word	261
	.half	3
	.word	.L267
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L269,.L268
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_SelectBootTarget',0,1,157,34,33
	.word	.L393
	.byte	1,1,1
	.word	.L170,.L455,.L169
	.byte	4
	.byte	'BootTarget',0,1,157,34,91
	.word	.L393,.L456
	.byte	5
	.word	.L170,.L455
	.byte	6
	.byte	'errorId',0,1,160,34,9
	.word	.L393,.L457
	.byte	6
	.byte	'retval',0,1,161,34,18
	.word	.L393,.L458
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_SelectBootTarget')
	.sect	'.debug_abbrev'
.L267:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_SelectBootTarget')
	.sect	'.debug_line'
.L268:
	.word	.L741-.L740
.L740:
	.half	3
	.word	.L743-.L742
.L742:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L743:
	.byte	5,17,7,0,5,2
	.word	.L170
	.byte	3,159,34,1,5,25,9
	.half	.L541-.L170
	.byte	3,1,1,5,8,3,5,1,5,3,9
	.half	.L744-.L541
	.byte	1,5,13,7,9
	.half	.L745-.L744
	.byte	3,2,1,5,28,1,5,8,9
	.half	.L80-.L745
	.byte	3,5,1,5,20,7,9
	.half	.L746-.L80
	.byte	3,1,1,7,9
	.half	.L747-.L746
	.byte	3,1,1,5,15,7,9
	.half	.L748-.L747
	.byte	3,2,1,5,35,1,5,14,9
	.half	.L82-.L748
	.byte	3,7,1,5,7,3,127,1,5,30,9
	.half	.L749-.L82
	.byte	1,5,3,9
	.half	.L81-.L749
	.byte	3,7,1,5,5,7,9
	.half	.L750-.L81
	.byte	3,2,1,5,3,9
	.half	.L86-.L750
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L270-.L86
	.byte	0,1,1
.L741:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_SelectBootTarget')
	.sect	'.debug_ranges'
.L269:
	.word	-1,.L170,0,.L270-.L170,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_StartupTwo')
	.sect	'.debug_info'
.L271:
	.word	217
	.half	3
	.word	.L272
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L274,.L273
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_StartupTwo',0,1,227,34,23,1,1,1
	.word	.L172,.L459,.L171
	.byte	4
	.word	.L172,.L459
	.byte	4
	.word	.L172,.L91
	.byte	5
	.byte	'errorId',0,1,246,34,11
	.word	.L393,.L460
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_StartupTwo')
	.sect	'.debug_abbrev'
.L272:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_StartupTwo')
	.sect	'.debug_line'
.L273:
	.word	.L752-.L751
.L751:
	.half	3
	.word	.L754-.L753
.L753:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L754:
	.byte	5,19,7,0,5,2
	.word	.L172
	.byte	3,245,34,1,5,35,9
	.half	.L542-.L172
	.byte	3,5,1,5,5,9
	.half	.L755-.L542
	.byte	1,5,15,7,9
	.half	.L756-.L755
	.byte	3,2,1,5,45,1,5,16,9
	.half	.L88-.L756
	.byte	3,13,1,5,17,9
	.half	.L757-.L88
	.byte	3,3,1,5,7,9
	.half	.L758-.L757
	.byte	3,20,1,9
	.half	.L759-.L758
	.byte	3,4,1,5,11,9
	.half	.L760-.L759
	.byte	3,2,1,5,7,9
	.half	.L761-.L760
	.byte	1,5,34,7,9
	.half	.L762-.L761
	.byte	3,2,1,5,86,9
	.half	.L763-.L762
	.byte	1,5,60,9
	.half	.L764-.L763
	.byte	1,5,86,1,5,39,9
	.half	.L765-.L764
	.byte	3,1,1,5,40,1,5,9,9
	.half	.L766-.L765
	.byte	1,5,39,9
	.half	.L767-.L766
	.byte	1,5,35,9
	.half	.L768-.L767
	.byte	1,5,7,9
	.half	.L90-.L768
	.byte	3,3,1,5,5,9
	.half	.L89-.L90
	.byte	3,10,1,5,7,7,9
	.half	.L769-.L89
	.byte	3,2,1,5,1,9
	.half	.L91-.L769
	.byte	3,47,1,7,9
	.half	.L275-.L91
	.byte	0,1,1
.L752:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_StartupTwo')
	.sect	'.debug_ranges'
.L274:
	.word	-1,.L172,0,.L275-.L172,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_GoHalt')
	.sect	'.debug_info'
.L276:
	.word	185
	.half	3
	.word	.L277
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L279,.L278
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_GoHalt',0,1,134,38,33
	.word	.L393
	.byte	1,1,1
	.word	.L180,.L461,.L179
	.byte	4
	.word	.L180,.L461
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_GoHalt')
	.sect	'.debug_abbrev'
.L277:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_GoHalt')
	.sect	'.debug_line'
.L278:
	.word	.L771-.L770
.L770:
	.half	3
	.word	.L773-.L772
.L772:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L773:
	.byte	5,5,7,0,5,2
	.word	.L180
	.byte	3,191,38,1,5,10,9
	.half	.L774-.L180
	.byte	3,4,1,5,1,3,1,1,7,9
	.half	.L280-.L774
	.byte	0,1,1
.L771:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_GoHalt')
	.sect	'.debug_ranges'
.L279:
	.word	-1,.L180,0,.L280-.L180,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_GoPoll')
	.sect	'.debug_info'
.L281:
	.word	185
	.half	3
	.word	.L282
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L284,.L283
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_GoPoll',0,1,213,38,33
	.word	.L393
	.byte	1,1,1
	.word	.L182,.L462,.L181
	.byte	4
	.word	.L182,.L462
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_GoPoll')
	.sect	'.debug_abbrev'
.L282:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_GoPoll')
	.sect	'.debug_line'
.L283:
	.word	.L776-.L775
.L775:
	.half	3
	.word	.L778-.L777
.L777:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L778:
	.byte	5,5,7,0,5,2
	.word	.L182
	.byte	3,143,39,1,5,10,9
	.half	.L779-.L182
	.byte	3,4,1,5,1,3,1,1,7,9
	.half	.L285-.L779
	.byte	0,1,1
.L776:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_GoPoll')
	.sect	'.debug_ranges'
.L284:
	.word	-1,.L182,0,.L285-.L182,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_GoToSelectedShutdownTarget')
	.sect	'.debug_info'
.L286:
	.word	226
	.half	3
	.word	.L287
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L289,.L288
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_GoToSelectedShutdownTarget',0,1,162,39,33
	.word	.L393
	.byte	1,1,1
	.word	.L184,.L463,.L183
	.byte	4
	.word	.L184,.L463
	.byte	5
	.byte	'retVal',0,1,165,39,18
	.word	.L393,.L464
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_GoToSelectedShutdownTarget')
	.sect	'.debug_abbrev'
.L287:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_GoToSelectedShutdownTarget')
	.sect	'.debug_line'
.L288:
	.word	.L781-.L780
.L780:
	.half	3
	.word	.L783-.L782
.L782:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L783:
	.byte	5,27,7,0,5,2
	.word	.L184
	.byte	3,192,39,1,5,1,9
	.half	.L290-.L184
	.byte	3,4,0,1,1
.L781:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_GoToSelectedShutdownTarget')
	.sect	'.debug_ranges'
.L289:
	.word	-1,.L184,0,.L290-.L184,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_GoDown')
	.sect	'.debug_info'
.L291:
	.word	247
	.half	3
	.word	.L292
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L294,.L293
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_GoDown',0,1,224,39,33
	.word	.L393
	.byte	1,1,1
	.word	.L186,.L465,.L185
	.byte	4
	.byte	'caller',0,1,224,39,68
	.word	.L466,.L467
	.byte	5
	.word	.L186,.L465
	.byte	6
	.byte	'retVal',0,1,230,39,18
	.word	.L393,.L468
	.byte	6
	.byte	'errorId',0,1,231,39,9
	.word	.L393,.L469
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_GoDown')
	.sect	'.debug_abbrev'
.L292:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_GoDown')
	.sect	'.debug_line'
.L293:
	.word	.L785-.L784
.L784:
	.half	3
	.word	.L787-.L786
.L786:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L787:
	.byte	5,25,7,0,5,2
	.word	.L186
	.byte	3,229,39,1,5,17,3,1,1,5,35,9
	.half	.L788-.L186
	.byte	3,26,1,5,5,9
	.half	.L789-.L788
	.byte	1,5,15,7,9
	.half	.L790-.L789
	.byte	3,2,1,5,47,1,5,14,9
	.half	.L110-.L790
	.byte	3,38,1,5,9,9
	.half	.L791-.L110
	.byte	3,10,1,5,24,9
	.half	.L792-.L791
	.byte	3,3,1,5,20,9
	.half	.L552-.L792
	.byte	3,10,1,9
	.half	.L793-.L552
	.byte	3,1,1,5,13,9
	.half	.L794-.L793
	.byte	3,3,1,5,43,9
	.half	.L795-.L794
	.byte	1,5,9,9
	.half	.L796-.L795
	.byte	1,5,11,7,9
	.half	.L797-.L796
	.byte	3,3,1,9
	.half	.L798-.L797
	.byte	3,14,1,5,25,9
	.half	.L112-.L798
	.byte	3,4,1,5,5,9
	.half	.L111-.L112
	.byte	3,6,1,5,7,7,9
	.half	.L799-.L111
	.byte	3,2,1,5,3,9
	.half	.L113-.L799
	.byte	3,52,1,5,1,3,1,1,7,9
	.half	.L295-.L113
	.byte	0,1,1
.L785:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_GoDown')
	.sect	'.debug_ranges'
.L294:
	.word	-1,.L186,0,.L295-.L186,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_MainFunction')
	.sect	'.debug_info'
.L296:
	.word	187
	.half	3
	.word	.L297
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L299,.L298
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_MainFunction',0,1,158,23,23,1,1,1
	.word	.L130,.L470,.L129
	.byte	4
	.word	.L130,.L470
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_MainFunction')
	.sect	'.debug_abbrev'
.L297:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_MainFunction')
	.sect	'.debug_line'
.L298:
	.word	.L801-.L800
.L800:
	.half	3
	.word	.L803-.L802
.L802:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L803:
	.byte	5,11,7,0,5,2
	.word	.L130
	.byte	3,198,23,1,5,7,9
	.half	.L804-.L130
	.byte	1,5,39,7,9
	.half	.L805-.L804
	.byte	3,2,1,5,1,7,9
	.half	.L10-.L805
	.byte	3,232,0,1,7,9
	.half	.L300-.L10
	.byte	0,1,1
.L801:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_MainFunction')
	.sect	'.debug_ranges'
.L299:
	.word	-1,.L130,0,.L300-.L130,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_InternalGetShutdownTargetAndMode')
	.sect	'.debug_info'
.L301:
	.word	244
	.half	3
	.word	.L302
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L304,.L303
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_InternalGetShutdownTargetAndMode',0,1,144,6,41,1,1
	.word	.L116,.L471,.L115
	.byte	4
	.byte	'target',0,1,144,6,95
	.word	.L415,.L472
	.byte	4
	.byte	'mode',0,1,144,6,110
	.word	.L473,.L474
	.byte	5
	.word	.L116,.L471
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_InternalGetShutdownTargetAndMode')
	.sect	'.debug_abbrev'
.L302:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_InternalGetShutdownTargetAndMode')
	.sect	'.debug_line'
.L303:
	.word	.L807-.L806
.L806:
	.half	3
	.word	.L809-.L808
.L808:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L809:
	.byte	5,41,7,0,5,2
	.word	.L116
	.byte	3,143,6,1,5,3,9
	.half	.L492-.L116
	.byte	3,2,1,5,13,9
	.half	.L489-.L492
	.byte	3,1,1,5,11,9
	.half	.L810-.L489
	.byte	1,9
	.half	.L811-.L810
	.byte	3,1,1,5,9,9
	.half	.L812-.L811
	.byte	1,5,3,9
	.half	.L813-.L812
	.byte	3,1,1,5,1,7,9
	.half	.L305-.L813
	.byte	3,1,0,1,1
.L807:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_InternalGetShutdownTargetAndMode')
	.sect	'.debug_ranges'
.L304:
	.word	-1,.L116,0,.L305-.L116,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_InternalSetShutdownTargetAndMode')
	.sect	'.debug_info'
.L306:
	.word	244
	.half	3
	.word	.L307
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L309,.L308
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_InternalSetShutdownTargetAndMode',0,1,161,6,41,1,1
	.word	.L118,.L475,.L117
	.byte	4
	.byte	'target',0,1,161,6,94
	.word	.L393,.L476
	.byte	4
	.byte	'mode',0,1,161,6,108
	.word	.L393,.L477
	.byte	5
	.word	.L118,.L475
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_InternalSetShutdownTargetAndMode')
	.sect	'.debug_abbrev'
.L307:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_InternalSetShutdownTargetAndMode')
	.sect	'.debug_line'
.L308:
	.word	.L815-.L814
.L814:
	.half	3
	.word	.L817-.L816
.L816:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L817:
	.byte	5,41,7,0,5,2
	.word	.L118
	.byte	3,160,6,1,5,3,9
	.half	.L494-.L118
	.byte	3,2,1,9
	.half	.L493-.L494
	.byte	3,1,1,5,30,9
	.half	.L818-.L493
	.byte	1,5,3,9
	.half	.L819-.L818
	.byte	3,1,1,5,28,9
	.half	.L820-.L819
	.byte	1,5,3,9
	.half	.L821-.L820
	.byte	3,1,1,5,1,7,9
	.half	.L310-.L821
	.byte	3,1,0,1,1
.L815:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_InternalSetShutdownTargetAndMode')
	.sect	'.debug_ranges'
.L309:
	.word	-1,.L118,0,.L310-.L118,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_GetShiftCount')
	.sect	'.debug_info'
.L311:
	.word	247
	.half	3
	.word	.L312
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L314,.L313
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_GetShiftCount',0,1,179,6,35
	.word	.L393
	.byte	1,1
	.word	.L120,.L478,.L119
	.byte	4
	.byte	'x',0,1,179,6,76
	.word	.L390,.L479
	.byte	5
	.word	.L120,.L478
	.byte	6
	.byte	'retval',0,1,182,6,9
	.word	.L393,.L480
	.byte	6
	.byte	'xlocal',0,1,183,6,25
	.word	.L390,.L481
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_GetShiftCount')
	.sect	'.debug_abbrev'
.L312:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_GetShiftCount')
	.sect	'.debug_line'
.L313:
	.word	.L823-.L822
.L822:
	.half	3
	.word	.L825-.L824
.L824:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L825:
	.byte	5,16,7,0,5,2
	.word	.L120
	.byte	3,181,6,1,5,19,9
	.half	.L495-.L120
	.byte	3,4,1,5,29,3,4,1,5,11,9
	.half	.L3-.L495
	.byte	3,2,1,5,12,9
	.half	.L497-.L3
	.byte	3,2,1,5,29,9
	.half	.L2-.L497
	.byte	3,124,1,5,1,7,9
	.half	.L826-.L2
	.byte	3,8,1,7,9
	.half	.L315-.L826
	.byte	0,1,1
.L823:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_GetShiftCount')
	.sect	'.debug_ranges'
.L314:
	.word	-1,.L120,0,.L315-.L120,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_InternalComMNotifications')
	.sect	'.debug_info'
.L316:
	.word	256
	.half	3
	.word	.L317
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L319,.L318
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_InternalComMNotifications',0,1,132,10,41,1,1
	.word	.L122,.L482,.L121
	.byte	4
	.word	.L122,.L482
	.byte	5
	.byte	'ComMStatus',0,1,135,10,23
	.word	.L393,.L483
	.byte	4
	.word	.L484,.L5
	.byte	5
	.byte	'sourceID',0,1,142,10,17
	.word	.L393,.L485
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_InternalComMNotifications')
	.sect	'.debug_abbrev'
.L317:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_InternalComMNotifications')
	.sect	'.debug_line'
.L318:
	.word	.L828-.L827
.L827:
	.half	3
	.word	.L830-.L829
.L829:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L830:
	.byte	5,41,7,0,5,2
	.word	.L122
	.byte	3,131,10,1,5,26,9
	.half	.L498-.L122
	.byte	3,4,1,5,7,9
	.half	.L831-.L498
	.byte	3,3,1,5,3,9
	.half	.L832-.L831
	.byte	1,5,14,7,9
	.half	.L484-.L832
	.byte	3,13,1,5,77,3,8,1,5,13,9
	.half	.L499-.L484
	.byte	1,5,77,1,5,63,9
	.half	.L833-.L499
	.byte	3,18,1,5,64,3,105,1,5,15,9
	.half	.L7-.L833
	.byte	3,2,1,5,39,9
	.half	.L834-.L7
	.byte	3,3,1,5,75,9
	.half	.L835-.L834
	.byte	1,5,7,9
	.half	.L836-.L835
	.byte	1,5,38,7,9
	.half	.L837-.L836
	.byte	3,7,1,5,9,9
	.half	.L838-.L837
	.byte	3,11,1,5,63,9
	.half	.L839-.L838
	.byte	1,5,35,9
	.half	.L840-.L839
	.byte	1,5,13,9
	.half	.L6-.L840
	.byte	3,105,1,5,12,9
	.half	.L841-.L6
	.byte	1,5,59,7,9
	.half	.L842-.L841
	.byte	1,5,1,7,9
	.half	.L5-.L842
	.byte	3,27,1,7,9
	.half	.L320-.L5
	.byte	0,1,1
.L828:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_InternalComMNotifications')
	.sect	'.debug_ranges'
.L319:
	.word	-1,.L122,0,.L320-.L122,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_InternalClearWakeupEvent')
	.sect	'.debug_info'
.L321:
	.word	220
	.half	3
	.word	.L322
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L324,.L323
	.byte	2
	.word	.L187
	.byte	3
	.byte	'EcuM_InternalClearWakeupEvent',0,1,188,14,41,1,1
	.word	.L124,.L486,.L123
	.byte	4
	.byte	'WakeupSource',0,1,189,14,43
	.word	.L390,.L487
	.byte	5
	.word	.L488
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_InternalClearWakeupEvent')
	.sect	'.debug_abbrev'
.L322:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('EcuM_InternalClearWakeupEvent')
	.sect	'.debug_line'
.L323:
	.word	.L844-.L843
.L843:
	.half	3
	.word	.L846-.L845
.L845:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L846:
	.byte	5,53,7,0,5,2
	.word	.L124
	.byte	3,191,14,1,5,3,1,5,53,9
	.half	.L847-.L124
	.byte	1,5,3,1,5,25,9
	.half	.L500-.L847
	.byte	1,5,29,9
	.half	.L848-.L500
	.byte	3,3,1,5,3,9
	.half	.L849-.L848
	.byte	3,24,1,5,29,9
	.half	.L850-.L849
	.byte	1,5,1,9
	.half	.L851-.L850
	.byte	3,3,1,7,9
	.half	.L325-.L851
	.byte	0,1,1
.L844:
	.sdecl	'.debug_ranges',debug,cluster('EcuM_InternalClearWakeupEvent')
	.sect	'.debug_ranges'
.L324:
	.word	-1,.L124,0,.L325-.L124,0,0
.L488:
	.word	-1,.L124,0,.L486-.L124,-1,.L126,0,.L350-.L126,-1,.L128,0,.L345-.L128,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_1')
	.sect	'.debug_info'
.L326:
	.word	168
	.half	3
	.word	.L327
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L329,.L328
	.byte	2
	.word	.L187
	.byte	3
	.byte	'.cocofun_1',0,1,194,26,23,1
	.word	.L138,.L330,.L137
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_1')
	.sect	'.debug_abbrev'
.L327:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_1')
	.sect	'.debug_line'
.L328:
	.word	.L853-.L852
.L852:
	.half	3
	.word	.L855-.L854
.L854:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L855:
	.byte	5,5,7,0,5,2
	.word	.L138
	.byte	3,251,26,1,9
	.half	.L330-.L138
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,212,27,1,9
	.half	.L520-.L138
	.byte	3,167,127,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,138,28,1,9
	.half	.L520-.L138
	.byte	3,241,126,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,195,28,1,9
	.half	.L520-.L138
	.byte	3,184,126,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,253,28,1,9
	.half	.L520-.L138
	.byte	3,254,125,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,182,29,1,9
	.half	.L520-.L138
	.byte	3,197,125,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,238,29,1,9
	.half	.L520-.L138
	.byte	3,141,125,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,169,30,1,9
	.half	.L520-.L138
	.byte	3,210,124,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,225,30,1,9
	.half	.L520-.L138
	.byte	3,154,124,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,146,31,1,9
	.half	.L520-.L138
	.byte	3,233,123,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,200,31,1,9
	.half	.L520-.L138
	.byte	3,179,123,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,137,34,1,9
	.half	.L520-.L138
	.byte	3,242,120,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,191,34,1,9
	.half	.L520-.L138
	.byte	3,188,120,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,7,0,5,2
	.word	.L138
	.byte	3,184,35,1,5,5,9
	.half	.L520-.L138
	.byte	3,195,119,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,218,36,1,9
	.half	.L520-.L138
	.byte	3,161,118,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,239,37,1,9
	.half	.L520-.L138
	.byte	3,140,117,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,191,38,1,9
	.half	.L520-.L138
	.byte	3,188,116,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,5,0,5,2
	.word	.L138
	.byte	3,143,39,1,9
	.half	.L520-.L138
	.byte	3,236,115,1,7,9
	.half	.L330-.L520
	.byte	0,1,1,5,7,0,5,2
	.word	.L138
	.byte	3,224,40,1,5,5,9
	.half	.L520-.L138
	.byte	3,155,114,1,7,9
	.half	.L330-.L520
	.byte	0,1,1
.L853:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_1')
	.sect	'.debug_ranges'
.L329:
	.word	-1,.L138,0,.L330-.L138,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L331:
	.word	168
	.half	3
	.word	.L332
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L334,.L333
	.byte	2
	.word	.L187
	.byte	3
	.byte	'.cocofun_2',0,1,144,27,33,1
	.word	.L142,.L335,.L141
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L332:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L333:
	.word	.L857-.L856
.L856:
	.half	3
	.word	.L859-.L858
.L858:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L859:
	.byte	5,8,7,0,5,2
	.word	.L142
	.byte	3,153,27,1,5,32,9
	.half	.L508-.L142
	.byte	1,9
	.half	.L335-.L508
	.byte	0,1,1,5,8,0,5,2
	.word	.L142
	.byte	3,153,27,1,5,30,9
	.half	.L508-.L142
	.byte	3,143,1,1,5,32,9
	.half	.L518-.L508
	.byte	3,241,126,1,7,9
	.half	.L335-.L518
	.byte	0,1,1,5,8,0,5,2
	.word	.L142
	.byte	3,153,27,1,5,32,9
	.half	.L508-.L142
	.byte	3,199,1,1,9
	.half	.L518-.L508
	.byte	3,185,126,1,7,9
	.half	.L335-.L518
	.byte	0,1,1,5,8,0,5,2
	.word	.L142
	.byte	3,153,27,1,5,30,9
	.half	.L508-.L142
	.byte	3,131,2,1,5,32,9
	.half	.L518-.L508
	.byte	3,253,125,1,7,9
	.half	.L335-.L518
	.byte	0,1,1,5,8,0,5,2
	.word	.L142
	.byte	3,153,27,1,5,30,9
	.half	.L508-.L142
	.byte	3,217,6,1,5,32,9
	.half	.L518-.L508
	.byte	3,167,121,1,7,9
	.half	.L335-.L518
	.byte	0,1,1,5,8,0,5,2
	.word	.L142
	.byte	3,153,27,1,5,32,9
	.half	.L508-.L142
	.byte	3,140,7,1,9
	.half	.L518-.L508
	.byte	3,244,120,1,7,9
	.half	.L335-.L518
	.byte	0,1,1
.L857:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L334:
	.word	-1,.L142,0,.L335-.L142,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L336:
	.word	168
	.half	3
	.word	.L337
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L339,.L338
	.byte	2
	.word	.L187
	.byte	3
	.byte	'.cocofun_3',0,1,207,29,40,1
	.word	.L156,.L340,.L155
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L337:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L338:
	.word	.L861-.L860
.L860:
	.half	3
	.word	.L863-.L862
.L862:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L863:
	.byte	5,17,7,0,5,2
	.word	.L156
	.byte	3,209,29,1,5,8,3,5,1,5,3,9
	.half	.L864-.L156
	.byte	1,5,13,9
	.half	.L865-.L864
	.byte	3,2,1,9
	.half	.L340-.L865
	.byte	0,1,1,5,17,0,5,2
	.word	.L156
	.byte	3,169,31,1,5,8,3,6,1,5,3,9
	.half	.L864-.L156
	.byte	1,5,13,9
	.half	.L865-.L864
	.byte	3,2,1,3,167,126,1,7,9
	.half	.L340-.L865
	.byte	0,1,1
.L861:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L339:
	.word	-1,.L156,0,.L340-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L341:
	.word	168
	.half	3
	.word	.L342
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L344,.L343
	.byte	2
	.word	.L187
	.byte	3
	.byte	'.cocofun_4',0,1,188,14,41,1
	.word	.L128,.L345,.L127
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L342:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L343:
	.word	.L867-.L866
.L866:
	.half	3
	.word	.L869-.L868
.L868:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L869:
	.byte	5,25,7,0,5,2
	.word	.L128
	.byte	3,191,14,1,5,3,9
	.half	.L870-.L128
	.byte	3,3,1,9
	.half	.L345-.L870
	.byte	0,1,1,5,29,0,5,2
	.word	.L128
	.byte	3,253,25,1,5,7,9
	.half	.L870-.L128
	.byte	3,3,1,5,3,9
	.half	.L871-.L870
	.byte	3,194,116,1,7,9
	.half	.L345-.L871
	.byte	0,1,1
.L867:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L344:
	.word	-1,.L128,0,.L345-.L128,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L346:
	.word	168
	.half	3
	.word	.L347
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L349,.L348
	.byte	2
	.word	.L187
	.byte	3
	.byte	'.cocofun_5',0,1,188,14,41,1
	.word	.L126,.L350,.L125
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L347:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L348:
	.word	.L873-.L872
.L872:
	.half	3
	.word	.L875-.L874
.L874:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L875:
	.byte	5,3,7,0,5,2
	.word	.L126
	.byte	3,218,14,1,9
	.half	.L350-.L126
	.byte	0,1,1,5,11,0,5,2
	.word	.L126
	.byte	3,198,23,1,5,3,9
	.half	.L876-.L126
	.byte	3,148,119,1,7,9
	.half	.L350-.L876
	.byte	0,1,1,5,11,0,5,2
	.word	.L126
	.byte	3,218,37,1,5,3,9
	.half	.L876-.L126
	.byte	3,128,105,1,7,9
	.half	.L350-.L876
	.byte	0,1,1
.L873:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L349:
	.word	-1,.L126,0,.L350-.L126,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L351:
	.word	168
	.half	3
	.word	.L352
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L354,.L353
	.byte	2
	.word	.L187
	.byte	3
	.byte	'.cocofun_6',0,1,194,26,23,1
	.word	.L136,.L355,.L135
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L352:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L353:
	.word	.L878-.L877
.L877:
	.half	3
	.word	.L880-.L879
.L879:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L880:
	.byte	5,17,7,0,5,2
	.word	.L136
	.byte	3,196,26,1,5,8,3,6,1,9
	.half	.L355-.L136
	.byte	0,1,1,5,19,0,5,2
	.word	.L136
	.byte	3,245,34,1,5,10,3,5,1,5,8,9
	.half	.L881-.L136
	.byte	3,208,119,1,7,9
	.half	.L355-.L881
	.byte	0,1,1
.L878:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L354:
	.word	-1,.L136,0,.L355-.L136,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L356:
	.word	168
	.half	3
	.word	.L357
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L359,.L358
	.byte	2
	.word	.L187
	.byte	3
	.byte	'.cocofun_7',0,1,132,30,23,1
	.word	.L160,.L360,.L159
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L357:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L358:
	.word	.L883-.L882
.L882:
	.half	3
	.word	.L885-.L884
.L884:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L885:
	.byte	5,17,7,0,5,2
	.word	.L160
	.byte	3,134,30,1,5,8,3,5,1,9
	.half	.L360-.L160
	.byte	0,1,1,5,17,0,5,2
	.word	.L160
	.byte	3,230,39,1,5,10,3,26,1,5,8,9
	.half	.L886-.L160
	.byte	3,139,118,1,7,9
	.half	.L360-.L886
	.byte	0,1,1
.L883:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L359:
	.word	-1,.L160,0,.L360-.L160,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L361:
	.word	168
	.half	3
	.word	.L362
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L364,.L363
	.byte	2
	.word	.L187
	.byte	3
	.byte	'.cocofun_8',0,1,248,36,23,1
	.word	.L178,.L365,.L177
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L362:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L363:
	.word	.L888-.L887
.L887:
	.half	3
	.word	.L890-.L889
.L889:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L890:
	.byte	5,13,7,0,5,2
	.word	.L178
	.byte	3,155,37,1,9
	.half	.L365-.L178
	.byte	0,1,1,5,13,0,5,2
	.word	.L178
	.byte	3,155,37,1,9
	.half	.L365-.L178
	.byte	0,1,1
.L888:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L364:
	.word	-1,.L178,0,.L365-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_9')
	.sect	'.debug_info'
.L366:
	.word	168
	.half	3
	.word	.L367
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L369,.L368
	.byte	2
	.word	.L187
	.byte	3
	.byte	'.cocofun_9',0,1,144,27,33,1
	.word	.L144,.L370,.L143
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_9')
	.sect	'.debug_abbrev'
.L367:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_9')
	.sect	'.debug_line'
.L368:
	.word	.L892-.L891
.L891:
	.half	3
	.word	.L894-.L893
.L893:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0,0,0,0,0
.L894:
	.byte	5,8,7,0,5,2
	.word	.L144
	.byte	3,153,27,1,9
	.half	.L370-.L144
	.byte	0,1,1,5,6,0,5,2
	.word	.L144
	.byte	3,168,28,1,5,8,9
	.half	.L895-.L144
	.byte	3,241,126,1,7,9
	.half	.L370-.L895
	.byte	0,1,1,5,8,0,5,2
	.word	.L144
	.byte	3,224,28,1,9
	.half	.L895-.L144
	.byte	3,185,126,1,7,9
	.half	.L370-.L895
	.byte	0,1,1,5,6,0,5,2
	.word	.L144
	.byte	3,156,29,1,5,8,9
	.half	.L895-.L144
	.byte	3,253,125,1,7,9
	.half	.L370-.L895
	.byte	0,1,1,5,6,0,5,2
	.word	.L144
	.byte	3,242,33,1,5,8,9
	.half	.L895-.L144
	.byte	3,167,121,1,7,9
	.half	.L370-.L895
	.byte	0,1,1,5,8,0,5,2
	.word	.L144
	.byte	3,165,34,1,9
	.half	.L895-.L144
	.byte	3,244,120,1,7,9
	.half	.L370-.L895
	.byte	0,1,1,5,6,0,5,2
	.word	.L144
	.byte	3,243,27,1,5,8,9
	.half	.L895-.L144
	.byte	3,166,127,1,7,9
	.half	.L370-.L895
	.byte	0,1,1,5,8,0,5,2
	.word	.L144
	.byte	3,196,30,1,9
	.half	.L895-.L144
	.byte	3,213,124,1,7,9
	.half	.L370-.L895
	.byte	0,1,1,5,8,0,5,2
	.word	.L144
	.byte	3,253,30,1,9
	.half	.L895-.L144
	.byte	3,156,124,1,7,9
	.half	.L370-.L895
	.byte	0,1,1,5,10,0,5,2
	.word	.L144
	.byte	3,149,37,1,5,8,9
	.half	.L895-.L144
	.byte	3,132,118,1,7,9
	.half	.L370-.L895
	.byte	0,1,1
.L892:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_9')
	.sect	'.debug_ranges'
.L369:
	.word	-1,.L144,0,.L370-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_CurrentShutdownMode')
	.sect	'.debug_info'
.L371:
	.word	171
	.half	3
	.word	.L372
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L187
	.byte	3
	.byte	'EcuM_CurrentShutdownMode',0,10,133,2,40
	.word	.L393
	.byte	5,3
	.word	EcuM_CurrentShutdownMode
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_CurrentShutdownMode')
	.sect	'.debug_abbrev'
.L372:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_CurrentShutdownTarget')
	.sect	'.debug_info'
.L373:
	.word	173
	.half	3
	.word	.L374
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L187
	.byte	3
	.byte	'EcuM_CurrentShutdownTarget',0,10,136,2,49
	.word	.L393
	.byte	5,3
	.word	EcuM_CurrentShutdownTarget
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_CurrentShutdownTarget')
	.sect	'.debug_abbrev'
.L374:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_LastShutdownTarget')
	.sect	'.debug_info'
.L375:
	.word	170
	.half	3
	.word	.L376
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L187
	.byte	3
	.byte	'EcuM_LastShutdownTarget',0,10,139,2,49
	.word	.L393
	.byte	5,3
	.word	EcuM_LastShutdownTarget
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_LastShutdownTarget')
	.sect	'.debug_abbrev'
.L376:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_LastShutdownMode')
	.sect	'.debug_info'
.L377:
	.word	168
	.half	3
	.word	.L378
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L187
	.byte	3
	.byte	'EcuM_LastShutdownMode',0,10,142,2,40
	.word	.L393
	.byte	5,3
	.word	EcuM_LastShutdownMode
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_LastShutdownMode')
	.sect	'.debug_abbrev'
.L378:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_ShutdownCause')
	.sect	'.debug_info'
.L379:
	.word	165
	.half	3
	.word	.L380
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L187
	.byte	3
	.byte	'EcuM_ShutdownCause',0,10,146,2,40
	.word	.L393
	.byte	5,3
	.word	EcuM_ShutdownCause
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_ShutdownCause')
	.sect	'.debug_abbrev'
.L380:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_CurrentBootTarget')
	.sect	'.debug_info'
.L381:
	.word	169
	.half	3
	.word	.L382
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L187
	.byte	3
	.byte	'EcuM_CurrentBootTarget',0,10,155,2,54
	.word	.L393
	.byte	5,3
	.word	EcuM_CurrentBootTarget
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_CurrentBootTarget')
	.sect	'.debug_abbrev'
.L382:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_ValidatedWakeups')
	.sect	'.debug_info'
.L383:
	.word	168
	.half	3
	.word	.L384
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L187
	.byte	3
	.byte	'EcuM_ValidatedWakeups',0,10,170,2,56
	.word	.L390
	.byte	5,3
	.word	EcuM_ValidatedWakeups
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_ValidatedWakeups')
	.sect	'.debug_abbrev'
.L384:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_BswM_BufferedWakeups')
	.sect	'.debug_info'
.L385:
	.word	172
	.half	3
	.word	.L386
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L187
	.byte	3
	.byte	'EcuM_BswM_BufferedWakeups',0,10,178,2,56
	.word	.L390
	.byte	5,3
	.word	EcuM_BswM_BufferedWakeups
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_BswM_BufferedWakeups')
	.sect	'.debug_abbrev'
.L386:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('EcuM_ComM_BufferedWakeups')
	.sect	'.debug_info'
.L387:
	.word	172
	.half	3
	.word	.L388
	.byte	4,1
	.byte	'..\\component\\EcuM\\Implementation\\EcuM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L187
	.byte	3
	.byte	'EcuM_ComM_BufferedWakeups',0,10,211,2,56
	.word	.L390
	.byte	5,3
	.word	EcuM_ComM_BufferedWakeups
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('EcuM_ComM_BufferedWakeups')
	.sect	'.debug_abbrev'
.L388:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_1')
	.sect	'.debug_loc'
.L137:
	.word	-1,.L138,0,.L330-.L138
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L141:
	.word	-1,.L142,0,.L335-.L142
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L155:
	.word	-1,.L156,0,.L340-.L156
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L127:
	.word	-1,.L128,0,.L345-.L128
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L125:
	.word	-1,.L126,0,.L350-.L126
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L135:
	.word	-1,.L136,0,.L355-.L136
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L159:
	.word	-1,.L160,0,.L360-.L160
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L177:
	.word	-1,.L178,0,.L365-.L178
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_9')
	.sect	'.debug_loc'
.L143:
	.word	-1,.L144,0,.L370-.L144
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_ClearValidatedWakeupEvent')
	.sect	'.debug_loc'
.L161:
	.word	-1,.L162,0,.L439-.L162
	.half	2
	.byte	138,0
	.word	0,0
.L440:
	.word	-1,.L162,.L507-.L162,.L370-.L162
	.half	1
	.byte	88
	.word	.L507-.L162,.L370-.L162
	.half	1
	.byte	84
	.word	0,.L530-.L162
	.half	1
	.byte	84
	.word	.L531-.L162,.L532-.L162
	.half	1
	.byte	84
	.word	.L138-.L162,.L330-.L162
	.half	1
	.byte	88
	.word	.L533-.L162,.L439-.L162
	.half	1
	.byte	88
	.word	0,0
.L441:
	.word	-1,.L162,.L507-.L162,.L370-.L162
	.half	1
	.byte	95
	.word	.L138-.L162,.L330-.L162
	.half	1
	.byte	95
	.word	.L533-.L162,.L439-.L162
	.half	1
	.byte	95
	.word	.L534-.L162,.L66-.L162
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_ClearWakeupEvent')
	.sect	'.debug_loc'
.L157:
	.word	-1,.L158,0,.L435-.L158
	.half	2
	.byte	138,0
	.word	0,0
.L436:
	.word	-1,.L158,.L527-.L158,.L360-.L158
	.half	1
	.byte	88
	.word	.L527-.L158,.L360-.L158
	.half	1
	.byte	84
	.word	0,.L528-.L158
	.half	1
	.byte	84
	.word	.L138-.L158,.L330-.L158
	.half	1
	.byte	88
	.word	0,.L435-.L158
	.half	1
	.byte	88
	.word	0,0
.L438:
	.word	-1,.L158,.L527-.L158,.L360-.L158
	.half	1
	.byte	89
	.word	.L138-.L158,.L330-.L158
	.half	1
	.byte	89
	.word	0,.L435-.L158
	.half	1
	.byte	89
	.word	.L529-.L158,.L63-.L158
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_GetBootTarget')
	.sect	'.debug_loc'
.L452:
	.word	-1,.L168,.L507-.L168,.L370-.L168
	.half	1
	.byte	100
	.word	.L508-.L168,.L335-.L168
	.half	1
	.byte	100
	.word	.L138-.L168,.L330-.L168
	.half	1
	.byte	100
	.word	0,.L78-.L168
	.half	1
	.byte	100
	.word	0,0
.L167:
	.word	-1,.L168,0,.L450-.L168
	.half	2
	.byte	138,0
	.word	0,0
.L453:
	.word	-1,.L168,.L537-.L168,.L538-.L168
	.half	1
	.byte	87
	.word	.L507-.L168,.L370-.L168
	.half	1
	.byte	87
	.word	.L508-.L168,.L335-.L168
	.half	1
	.byte	87
	.word	.L518-.L168,.L335-.L168
	.half	1
	.byte	95
	.word	.L538-.L168,.L539-.L168
	.half	1
	.byte	95
	.word	.L520-.L168,.L330-.L168
	.half	1
	.byte	87
	.word	.L75-.L168,.L78-.L168
	.half	1
	.byte	87
	.word	0,0
.L454:
	.word	-1,.L168,.L507-.L168,.L370-.L168
	.half	1
	.byte	88
	.word	.L508-.L168,.L335-.L168
	.half	1
	.byte	88
	.word	.L138-.L168,.L330-.L168
	.half	1
	.byte	88
	.word	.L537-.L168,.L450-.L168
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_GetExpiredWakeupEvents')
	.sect	'.debug_loc'
.L165:
	.word	-1,.L166,0,.L448-.L166
	.half	2
	.byte	138,0
	.word	0,0
.L449:
	.word	-1,.L166,.L156-.L166,.L340-.L166
	.half	1
	.byte	87
	.word	.L138-.L166,.L330-.L166
	.half	1
	.byte	87
	.word	.L536-.L166,.L72-.L166
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_GetLastShutdownTarget')
	.sect	'.debug_loc'
.L147:
	.word	-1,.L148,0,.L421-.L148
	.half	2
	.byte	138,0
	.word	0,0
.L425:
	.word	-1,.L148,.L516-.L148,.L517-.L148
	.half	1
	.byte	87
	.word	.L507-.L148,.L370-.L148
	.half	1
	.byte	87
	.word	.L508-.L148,.L335-.L148
	.half	1
	.byte	87
	.word	.L518-.L148,.L335-.L148
	.half	1
	.byte	95
	.word	.L517-.L148,.L519-.L148
	.half	1
	.byte	95
	.word	.L520-.L148,.L330-.L148
	.half	1
	.byte	87
	.word	.L40-.L148,.L44-.L148
	.half	1
	.byte	87
	.word	0,0
.L423:
	.word	-1,.L148,.L507-.L148,.L370-.L148
	.half	1
	.byte	101
	.word	.L508-.L148,.L335-.L148
	.half	1
	.byte	101
	.word	.L138-.L148,.L330-.L148
	.half	1
	.byte	101
	.word	0,.L44-.L148
	.half	1
	.byte	101
	.word	0,0
.L424:
	.word	-1,.L148,.L507-.L148,.L370-.L148
	.half	1
	.byte	88
	.word	.L508-.L148,.L335-.L148
	.half	1
	.byte	88
	.word	.L138-.L148,.L330-.L148
	.half	1
	.byte	88
	.word	.L516-.L148,.L421-.L148
	.half	1
	.byte	88
	.word	0,0
.L422:
	.word	-1,.L148,.L507-.L148,.L370-.L148
	.half	1
	.byte	100
	.word	.L508-.L148,.L335-.L148
	.half	1
	.byte	100
	.word	.L138-.L148,.L330-.L148
	.half	1
	.byte	100
	.word	0,.L44-.L148
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_GetPendingWakeupEvents')
	.sect	'.debug_loc'
.L153:
	.word	-1,.L154,0,.L442-.L154
	.half	2
	.byte	138,0
	.word	0,0
.L444:
	.word	-1,.L154,.L525-.L154,.L340-.L154
	.half	1
	.byte	87
	.word	.L138-.L154,.L330-.L154
	.half	1
	.byte	87
	.word	.L526-.L154,.L58-.L154
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_GetShiftCount')
	.sect	'.debug_loc'
.L119:
	.word	-1,.L120,0,.L478-.L120
	.half	2
	.byte	138,0
	.word	0,0
.L480:
	.word	-1,.L120,.L495-.L120,.L496-.L120
	.half	1
	.byte	82
	.word	.L497-.L120,.L478-.L120
	.half	1
	.byte	82
	.word	0,0
.L479:
	.word	-1,.L120,0,.L3-.L120
	.half	1
	.byte	84
	.word	0,0
.L481:
	.word	-1,.L120,.L495-.L120,.L478-.L120
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_GetShutdownCause')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L152,0,.L430-.L152
	.half	2
	.byte	138,0
	.word	0,0
.L434:
	.word	-1,.L152,.L518-.L152,.L335-.L152
	.half	1
	.byte	95
	.word	.L523-.L152,.L524-.L152
	.half	1
	.byte	95
	.word	.L138-.L152,.L330-.L152
	.half	1
	.byte	87
	.word	.L524-.L152,.L55-.L152
	.half	1
	.byte	87
	.word	0,0
.L433:
	.word	-1,.L152,.L507-.L152,.L370-.L152
	.half	1
	.byte	88
	.word	.L508-.L152,.L335-.L152
	.half	1
	.byte	88
	.word	.L138-.L152,.L330-.L152
	.half	1
	.byte	88
	.word	0,.L430-.L152
	.half	1
	.byte	88
	.word	0,0
.L432:
	.word	-1,.L152,.L507-.L152,.L370-.L152
	.half	1
	.byte	100
	.word	.L508-.L152,.L335-.L152
	.half	1
	.byte	100
	.word	.L138-.L152,.L330-.L152
	.half	1
	.byte	100
	.word	0,.L55-.L152
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_GetShutdownTarget')
	.sect	'.debug_loc'
.L145:
	.word	-1,.L146,0,.L414-.L146
	.half	2
	.byte	138,0
	.word	0,0
.L420:
	.word	-1,.L146,.L507-.L146,.L370-.L146
	.half	1
	.byte	95
	.word	.L511-.L146,.L512-.L146
	.half	1
	.byte	95
	.word	.L512-.L146,.L513-.L146
	.half	1
	.byte	81
	.word	.L33-.L146,.L514-.L146
	.half	1
	.byte	95
	.word	.L515-.L146,.L37-.L146
	.half	1
	.byte	95
	.word	0,0
.L418:
	.word	-1,.L146,.L507-.L146,.L370-.L146
	.half	1
	.byte	101
	.word	0,.L513-.L146
	.half	1
	.byte	101
	.word	0,0
.L419:
	.word	-1,.L146,.L507-.L146,.L370-.L146
	.half	1
	.byte	88
	.word	.L138-.L146,.L330-.L146
	.half	1
	.byte	88
	.word	.L511-.L146,.L414-.L146
	.half	1
	.byte	88
	.word	0,0
.L416:
	.word	-1,.L146,.L507-.L146,.L370-.L146
	.half	1
	.byte	100
	.word	0,.L513-.L146
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_GetValidatedWakeupEvents')
	.sect	'.debug_loc'
.L163:
	.word	-1,.L164,0,.L445-.L164
	.half	2
	.byte	138,0
	.word	0,0
.L446:
	.word	-1,.L164,.L507-.L164,.L370-.L164
	.half	1
	.byte	87
	.word	.L138-.L164,.L330-.L164
	.half	1
	.byte	87
	.word	.L535-.L164,.L69-.L164
	.half	1
	.byte	87
	.word	0,0
.L447:
	.word	-1,.L164,.L507-.L164,.L370-.L164
	.half	1
	.byte	88
	.word	.L138-.L164,.L330-.L164
	.half	1
	.byte	88
	.word	.L535-.L164,.L445-.L164
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_GoDown')
	.sect	'.debug_loc'
.L185:
	.word	-1,.L186,0,.L465-.L186
	.half	2
	.byte	138,0
	.word	0,0
.L467:
	.word	-1,.L186,.L160-.L186,.L360-.L186
	.half	1
	.byte	84
	.word	0,.L552-.L186
	.half	1
	.byte	84
	.word	0,0
.L469:
	.word	-1,.L186,.L160-.L186,.L360-.L186
	.half	1
	.byte	89
	.word	.L138-.L186,.L330-.L186
	.half	1
	.byte	89
	.word	0,.L465-.L186
	.half	1
	.byte	89
	.word	0,0
.L468:
	.word	-1,.L186,.L160-.L186,.L360-.L186
	.half	1
	.byte	88
	.word	.L138-.L186,.L330-.L186
	.half	1
	.byte	88
	.word	0,.L465-.L186
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_GoHalt')
	.sect	'.debug_loc'
.L179:
	.word	-1,.L180,0,.L461-.L180
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_GoPoll')
	.sect	'.debug_loc'
.L181:
	.word	-1,.L182,0,.L462-.L182
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_GoToSelectedShutdownTarget')
	.sect	'.debug_loc'
.L183:
	.word	-1,.L184,0,.L463-.L184
	.half	2
	.byte	138,0
	.word	0,0
.L464:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_Init')
	.sect	'.debug_loc'
.L131:
	.word	-1,.L132,0,.L402-.L132
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_InternalClearWakeupEvent')
	.sect	'.debug_loc'
.L123:
	.word	-1,.L124,0,.L486-.L124
	.half	2
	.byte	138,0
	.word	0,0
.L487:
	.word	-1,.L124,0,.L500-.L124
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_InternalComMNotifications')
	.sect	'.debug_loc'
.L483:
	.word	-1,.L122,0,.L482-.L122
	.half	2
	.byte	145,120
	.word	0,0
.L121:
	.word	-1,.L122,0,.L498-.L122
	.half	2
	.byte	138,0
	.word	.L498-.L122,.L482-.L122
	.half	2
	.byte	138,8
	.word	.L482-.L122,.L482-.L122
	.half	2
	.byte	138,0
	.word	0,0
.L485:
	.word	-1,.L122,.L499-.L122,.L5-.L122
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_InternalGetShutdownTargetAndMode')
	.sect	'.debug_loc'
.L115:
	.word	-1,.L116,0,.L471-.L116
	.half	2
	.byte	138,0
	.word	0,0
.L474:
	.word	-1,.L116,0,.L489-.L116
	.half	1
	.byte	101
	.word	.L492-.L116,.L471-.L116
	.half	1
	.byte	108
	.word	0,0
.L472:
	.word	-1,.L116,0,.L489-.L116
	.half	1
	.byte	100
	.word	.L490-.L116,.L491-.L116
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_InternalSetShutdownTargetAndMode')
	.sect	'.debug_loc'
.L117:
	.word	-1,.L118,0,.L475-.L118
	.half	2
	.byte	138,0
	.word	0,0
.L477:
	.word	-1,.L118,0,.L493-.L118
	.half	1
	.byte	85
	.word	.L493-.L118,.L475-.L118
	.half	1
	.byte	88
	.word	0,0
.L476:
	.word	-1,.L118,0,.L493-.L118
	.half	1
	.byte	84
	.word	.L494-.L118,.L475-.L118
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_MainFunction')
	.sect	'.debug_loc'
.L129:
	.word	-1,.L130,0,.L470-.L130
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_SelectBootTarget')
	.sect	'.debug_loc'
.L456:
	.word	-1,.L170,.L507-.L170,.L370-.L170
	.half	1
	.byte	84
	.word	.L508-.L170,.L335-.L170
	.half	1
	.byte	84
	.word	0,.L540-.L170
	.half	1
	.byte	84
	.word	.L138-.L170,.L520-.L170
	.half	1
	.byte	84
	.word	0,0
.L169:
	.word	-1,.L170,0,.L455-.L170
	.half	2
	.byte	138,0
	.word	0,0
.L457:
	.word	-1,.L170,.L507-.L170,.L370-.L170
	.half	1
	.byte	87
	.word	.L508-.L170,.L335-.L170
	.half	1
	.byte	87
	.word	.L138-.L170,.L330-.L170
	.half	1
	.byte	87
	.word	.L541-.L170,.L86-.L170
	.half	1
	.byte	87
	.word	0,0
.L458:
	.word	-1,.L170,.L507-.L170,.L370-.L170
	.half	1
	.byte	88
	.word	.L508-.L170,.L335-.L170
	.half	1
	.byte	88
	.word	.L138-.L170,.L330-.L170
	.half	1
	.byte	88
	.word	.L541-.L170,.L455-.L170
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_SelectShutdownCause')
	.sect	'.debug_loc'
.L149:
	.word	-1,.L150,0,.L426-.L150
	.half	2
	.byte	138,0
	.word	0,0
.L429:
	.word	-1,.L150,.L507-.L150,.L370-.L150
	.half	1
	.byte	87
	.word	.L508-.L150,.L335-.L150
	.half	1
	.byte	87
	.word	.L138-.L150,.L330-.L150
	.half	1
	.byte	87
	.word	.L522-.L150,.L49-.L150
	.half	1
	.byte	87
	.word	0,0
.L428:
	.word	-1,.L150,.L507-.L150,.L370-.L150
	.half	1
	.byte	88
	.word	.L508-.L150,.L335-.L150
	.half	1
	.byte	88
	.word	.L138-.L150,.L330-.L150
	.half	1
	.byte	88
	.word	.L522-.L150,.L426-.L150
	.half	1
	.byte	88
	.word	0,0
.L427:
	.word	-1,.L150,.L507-.L150,.L370-.L150
	.half	1
	.byte	84
	.word	.L508-.L150,.L335-.L150
	.half	1
	.byte	84
	.word	0,.L521-.L150
	.half	1
	.byte	84
	.word	.L138-.L150,.L520-.L150
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_SelectShutdownTarget')
	.sect	'.debug_loc'
.L139:
	.word	-1,.L140,0,.L408-.L140
	.half	2
	.byte	138,0
	.word	0,0
.L412:
	.word	-1,.L140,.L507-.L140,.L370-.L140
	.half	1
	.byte	88
	.word	.L508-.L140,.L335-.L140
	.half	1
	.byte	88
	.word	.L138-.L140,.L330-.L140
	.half	1
	.byte	88
	.word	0,.L408-.L140
	.half	1
	.byte	88
	.word	0,0
.L410:
	.word	-1,.L140,.L507-.L140,.L370-.L140
	.half	1
	.byte	85
	.word	.L508-.L140,.L335-.L140
	.half	1
	.byte	85
	.word	0,.L509-.L140
	.half	1
	.byte	85
	.word	0,0
.L413:
	.word	-1,.L140,.L138-.L140,.L330-.L140
	.half	1
	.byte	95
	.word	.L27-.L140,.L408-.L140
	.half	1
	.byte	95
	.word	0,0
.L409:
	.word	-1,.L140,.L507-.L140,.L370-.L140
	.half	1
	.byte	84
	.word	.L508-.L140,.L335-.L140
	.half	1
	.byte	84
	.word	0,.L510-.L140
	.half	1
	.byte	84
	.word	.L28-.L140,.L509-.L140
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_SetWakeupEvent')
	.sect	'.debug_loc'
.L173:
	.word	-1,.L174,0,.L398-.L174
	.half	2
	.byte	138,0
	.word	0,0
.L401:
	.word	-1,.L174,.L544-.L174,.L94-.L174
	.half	1
	.byte	82
	.word	0,0
.L399:
	.word	-1,.L174,0,.L544-.L174
	.half	1
	.byte	84
	.word	.L138-.L174,.L330-.L174
	.half	1
	.byte	88
	.word	.L545-.L174,.L398-.L174
	.half	1
	.byte	88
	.word	0,0
.L400:
	.word	-1,.L174,.L138-.L174,.L330-.L174
	.half	1
	.byte	95
	.word	.L544-.L174,.L398-.L174
	.half	1
	.byte	95
	.word	.L546-.L174,.L95-.L174
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_Shutdown')
	.sect	'.debug_loc'
.L133:
	.word	-1,.L134,0,.L501-.L134
	.half	2
	.byte	138,0
	.word	.L501-.L134,.L18-.L134
	.half	2
	.byte	138,8
	.word	.L18-.L134,.L18-.L134
	.half	2
	.byte	138,0
	.word	.L18-.L134,.L403-.L134
	.half	2
	.byte	138,8
	.word	.L403-.L134,.L403-.L134
	.half	2
	.byte	138,0
	.word	0,0
.L405:
	.word	-1,.L134,.L502-.L134,.L355-.L134
	.half	1
	.byte	88
	.word	.L503-.L134,.L504-.L134
	.half	1
	.byte	88
	.word	.L138-.L134,.L330-.L134
	.half	1
	.byte	88
	.word	.L505-.L134,.L403-.L134
	.half	1
	.byte	88
	.word	.L506-.L134,.L18-.L134
	.half	1
	.byte	87
	.word	0,0
.L407:
	.word	-1,.L134,.L136-.L134,.L355-.L134
	.half	2
	.byte	145,121
	.word	0,.L504-.L134
	.half	2
	.byte	145,121
	.word	.L138-.L134,.L330-.L134
	.half	2
	.byte	145,121
	.word	.L505-.L134,.L403-.L134
	.half	2
	.byte	145,121
	.word	0,0
.L406:
	.word	-1,.L134,.L136-.L134,.L355-.L134
	.half	2
	.byte	145,120
	.word	0,.L504-.L134
	.half	2
	.byte	145,120
	.word	.L138-.L134,.L330-.L134
	.half	2
	.byte	145,120
	.word	.L505-.L134,.L403-.L134
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_StartupTwo')
	.sect	'.debug_loc'
.L171:
	.word	-1,.L172,0,.L459-.L172
	.half	2
	.byte	138,0
	.word	0,0
.L460:
	.word	-1,.L172,.L136-.L172,.L355-.L172
	.half	1
	.byte	88
	.word	.L138-.L172,.L330-.L172
	.half	1
	.byte	88
	.word	.L542-.L172,.L459-.L172
	.half	1
	.byte	88
	.word	.L543-.L172,.L91-.L172
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('EcuM_ValidateWakeupEvent')
	.sect	'.debug_loc'
.L397:
	.word	-1,.L176,.L144-.L176,.L370-.L176
	.half	2
	.byte	145,120
	.word	.L178-.L176,.L365-.L176
	.half	2
	.byte	145,120
	.word	.L126-.L176,.L350-.L176
	.half	2
	.byte	145,120
	.word	.L138-.L176,.L330-.L176
	.half	2
	.byte	145,120
	.word	0,.L389-.L176
	.half	2
	.byte	145,120
	.word	0,0
.L175:
	.word	-1,.L176,0,.L547-.L176
	.half	2
	.byte	138,0
	.word	.L547-.L176,.L106-.L176
	.half	2
	.byte	138,8
	.word	.L106-.L176,.L106-.L176
	.half	2
	.byte	138,0
	.word	.L106-.L176,.L389-.L176
	.half	2
	.byte	138,8
	.word	.L389-.L176,.L389-.L176
	.half	2
	.byte	138,0
	.word	0,0
.L395:
	.word	-1,.L176,.L548-.L176,.L549-.L176
	.half	1
	.byte	82
	.word	.L144-.L176,.L370-.L176
	.half	1
	.byte	90
	.word	.L178-.L176,.L365-.L176
	.half	1
	.byte	90
	.word	.L126-.L176,.L350-.L176
	.half	1
	.byte	90
	.word	.L138-.L176,.L330-.L176
	.half	1
	.byte	90
	.word	.L550-.L176,.L389-.L176
	.half	1
	.byte	90
	.word	0,0
.L391:
	.word	-1,.L176,0,.L548-.L176
	.half	1
	.byte	84
	.word	.L144-.L176,.L370-.L176
	.half	1
	.byte	88
	.word	.L178-.L176,.L365-.L176
	.half	1
	.byte	88
	.word	.L126-.L176,.L350-.L176
	.half	1
	.byte	88
	.word	.L547-.L176,.L100-.L176
	.half	1
	.byte	88
	.word	0,0
.L394:
	.word	-1,.L176,.L144-.L176,.L370-.L176
	.half	1
	.byte	89
	.word	.L178-.L176,.L365-.L176
	.half	1
	.byte	89
	.word	.L126-.L176,.L350-.L176
	.half	1
	.byte	89
	.word	.L138-.L176,.L330-.L176
	.half	1
	.byte	89
	.word	.L548-.L176,.L389-.L176
	.half	1
	.byte	89
	.word	.L551-.L176,.L106-.L176
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L896:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('EcuM_InternalGetShutdownTargetAndMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L116,.L471-.L116
	.sdecl	'.debug_frame',debug,cluster('EcuM_InternalSetShutdownTargetAndMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L118,.L475-.L118
	.sdecl	'.debug_frame',debug,cluster('EcuM_GetShiftCount')
	.sect	'.debug_frame'
	.word	24
	.word	.L896,.L120,.L478-.L120
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('EcuM_InternalComMNotifications')
	.sect	'.debug_frame'
	.word	36
	.word	.L896,.L122,.L482-.L122
	.byte	4
	.word	(.L498-.L122)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L482-.L498)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('EcuM_InternalClearWakeupEvent')
	.sect	'.debug_frame'
	.word	24
	.word	.L896,.L124,.L486-.L124
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('EcuM_MainFunction')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L130,.L470-.L130
	.sdecl	'.debug_frame',debug,cluster('EcuM_Init')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L132,.L402-.L132
	.sdecl	'.debug_frame',debug,cluster('EcuM_Shutdown')
	.sect	'.debug_frame'
	.word	52
	.word	.L896,.L134,.L403-.L134
	.byte	4
	.word	(.L501-.L134)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L18-.L501)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L403-.L18)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('EcuM_SelectShutdownTarget')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L140,.L408-.L140
	.sdecl	'.debug_frame',debug,cluster('EcuM_GetShutdownTarget')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L146,.L414-.L146
	.sdecl	'.debug_frame',debug,cluster('EcuM_GetLastShutdownTarget')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L148,.L421-.L148
	.sdecl	'.debug_frame',debug,cluster('EcuM_SelectShutdownCause')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L150,.L426-.L150
	.sdecl	'.debug_frame',debug,cluster('EcuM_GetShutdownCause')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L152,.L430-.L152
	.sdecl	'.debug_frame',debug,cluster('EcuM_GetPendingWakeupEvents')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L154,.L442-.L154
	.sdecl	'.debug_frame',debug,cluster('EcuM_ClearWakeupEvent')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L158,.L435-.L158
	.sdecl	'.debug_frame',debug,cluster('EcuM_ClearValidatedWakeupEvent')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L162,.L439-.L162
	.sdecl	'.debug_frame',debug,cluster('EcuM_GetValidatedWakeupEvents')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L164,.L445-.L164
	.sdecl	'.debug_frame',debug,cluster('EcuM_GetExpiredWakeupEvents')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L166,.L448-.L166
	.sdecl	'.debug_frame',debug,cluster('EcuM_GetBootTarget')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L168,.L450-.L168
	.sdecl	'.debug_frame',debug,cluster('EcuM_SelectBootTarget')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L170,.L455-.L170
	.sdecl	'.debug_frame',debug,cluster('EcuM_StartupTwo')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L172,.L459-.L172
	.sdecl	'.debug_frame',debug,cluster('EcuM_SetWakeupEvent')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L174,.L398-.L174
	.sdecl	'.debug_frame',debug,cluster('EcuM_ValidateWakeupEvent')
	.sect	'.debug_frame'
	.word	52
	.word	.L896,.L176,.L389-.L176
	.byte	4
	.word	(.L547-.L176)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L106-.L547)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L389-.L106)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('EcuM_GoHalt')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L180,.L461-.L180
	.sdecl	'.debug_frame',debug,cluster('EcuM_GoPoll')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L182,.L462-.L182
	.sdecl	'.debug_frame',debug,cluster('EcuM_GoToSelectedShutdownTarget')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L184,.L463-.L184
	.sdecl	'.debug_frame',debug,cluster('EcuM_GoDown')
	.sect	'.debug_frame'
	.word	12
	.word	.L896,.L186,.L465-.L186
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L897:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L897,.L126,.L350-.L126
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L897,.L128,.L345-.L128
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L897,.L136,.L355-.L136
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_1')
	.sect	'.debug_frame'
	.word	24
	.word	.L897,.L138,.L330-.L138
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L897,.L142,.L335-.L142
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_9')
	.sect	'.debug_frame'
	.word	24
	.word	.L897,.L144,.L370-.L144
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L897,.L156,.L340-.L156
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L897,.L160,.L360-.L160
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L897,.L178,.L365-.L178
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\component\EcuM\Implementation\EcuM.c	  5271  
; ..\component\EcuM\Implementation\EcuM.c	  5272  #if(ECUM_ALARM_CLOCK_PRESENT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  5273  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  5274   *  EcuM_SetAbsWakeupAlarm
; ..\component\EcuM\Implementation\EcuM.c	  5275   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  5276  /*!
; ..\component\EcuM\Implementation\EcuM.c	  5277   *
; ..\component\EcuM\Implementation\EcuM.c	  5278   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  5279   *
; ..\component\EcuM\Implementation\EcuM.c	  5280   *
; ..\component\EcuM\Implementation\EcuM.c	  5281   *
; ..\component\EcuM\Implementation\EcuM.c	  5282   *
; ..\component\EcuM\Implementation\EcuM.c	  5283   *
; ..\component\EcuM\Implementation\EcuM.c	  5284   *
; ..\component\EcuM\Implementation\EcuM.c	  5285   */
; ..\component\EcuM\Implementation\EcuM.c	  5286  FUNC(Std_ReturnType, ECUM_CODE) EcuM_SetAbsWakeupAlarm(VAR(EcuM_UserType, AUTOMATIC) user,
; ..\component\EcuM\Implementation\EcuM.c	  5287      VAR(EcuM_TimeType, AUTOMATIC) sec)
; ..\component\EcuM\Implementation\EcuM.c	  5288  {
; ..\component\EcuM\Implementation\EcuM.c	  5289    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5290    Std_ReturnType retval = E_NOT_OK;
; ..\component\EcuM\Implementation\EcuM.c	  5291    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  5292    uint8 AlarmClockUser;
; ..\component\EcuM\Implementation\EcuM.c	  5293  
; ..\component\EcuM\Implementation\EcuM.c	  5294    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5295    /* #20 Check if the calling user is in the range of valid users. */
; ..\component\EcuM\Implementation\EcuM.c	  5296    if ((user >= EcuM_GetSizeOfFlexUser()) || (EcuM_GetAlarmClockIdOfFlexUser(user) == 0xFFu))
; ..\component\EcuM\Implementation\EcuM.c	  5297    {
; ..\component\EcuM\Implementation\EcuM.c	  5298      errorId = ECUM_E_INVALID_PAR;
; ..\component\EcuM\Implementation\EcuM.c	  5299    }
; ..\component\EcuM\Implementation\EcuM.c	  5300    else
; ..\component\EcuM\Implementation\EcuM.c	  5301    {
; ..\component\EcuM\Implementation\EcuM.c	  5302      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5303  
; ..\component\EcuM\Implementation\EcuM.c	  5304      /* Get the AlarmClock Id of this User */
; ..\component\EcuM\Implementation\EcuM.c	  5305      AlarmClockUser = EcuM_GetAlarmClockIdOfFlexUser(user);
; ..\component\EcuM\Implementation\EcuM.c	  5306  
; ..\component\EcuM\Implementation\EcuM.c	  5307      /* #21 Check that no earlier alarm is already active. */
; ..\component\EcuM\Implementation\EcuM.c	  5308      if ((EcuM_GetAlarmClockTimeOut(AlarmClockUser) <= sec)
; ..\component\EcuM\Implementation\EcuM.c	  5309          && (EcuM_GetAlarmClockTimeOut(AlarmClockUser) != 0u))
; ..\component\EcuM\Implementation\EcuM.c	  5310      {
; ..\component\EcuM\Implementation\EcuM.c	  5311        retval = E_EARLIER_ACTIVE;
; ..\component\EcuM\Implementation\EcuM.c	  5312      }
; ..\component\EcuM\Implementation\EcuM.c	  5313  
; ..\component\EcuM\Implementation\EcuM.c	  5314      /* #22 Check that that the new alarm is in the future. */
; ..\component\EcuM\Implementation\EcuM.c	  5315      else if (sec <= EcuM_Clock)
; ..\component\EcuM\Implementation\EcuM.c	  5316      {
; ..\component\EcuM\Implementation\EcuM.c	  5317        retval = E_PAST;
; ..\component\EcuM\Implementation\EcuM.c	  5318      }
; ..\component\EcuM\Implementation\EcuM.c	  5319  
; ..\component\EcuM\Implementation\EcuM.c	  5320      else
; ..\component\EcuM\Implementation\EcuM.c	  5321      {
; ..\component\EcuM\Implementation\EcuM.c	  5322        /* #30 Save the time of the users AlarmClock. */
; ..\component\EcuM\Implementation\EcuM.c	  5323        EcuM_SetAlarmClockTimeOut(AlarmClockUser, sec); /* SBSW_ECUM_ACCESSALARMCLOCK */
; ..\component\EcuM\Implementation\EcuM.c	  5324  
; ..\component\EcuM\Implementation\EcuM.c	  5325        /* #31 Update the EcuM_MasterAlarm if the new Alarm is earlier than a previous one. */
; ..\component\EcuM\Implementation\EcuM.c	  5326        EcuM_UpdateMasterAlarm();
; ..\component\EcuM\Implementation\EcuM.c	  5327  
; ..\component\EcuM\Implementation\EcuM.c	  5328        retval = E_OK;
; ..\component\EcuM\Implementation\EcuM.c	  5329      }
; ..\component\EcuM\Implementation\EcuM.c	  5330    }
; ..\component\EcuM\Implementation\EcuM.c	  5331  
; ..\component\EcuM\Implementation\EcuM.c	  5332    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5333  # if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  5334    if (errorId != ECUM_E_NO_ERROR)
; ..\component\EcuM\Implementation\EcuM.c	  5335    {
; ..\component\EcuM\Implementation\EcuM.c	  5336      EcuM_Det_ReportError(ECUM_SID_SET_ABS_WAKEUP_ALARM, errorId);
; ..\component\EcuM\Implementation\EcuM.c	  5337    }
; ..\component\EcuM\Implementation\EcuM.c	  5338  # else
; ..\component\EcuM\Implementation\EcuM.c	  5339    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  5340  # endif
; ..\component\EcuM\Implementation\EcuM.c	  5341  
; ..\component\EcuM\Implementation\EcuM.c	  5342  
; ..\component\EcuM\Implementation\EcuM.c	  5343    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  5344  }
; ..\component\EcuM\Implementation\EcuM.c	  5345  
; ..\component\EcuM\Implementation\EcuM.c	  5346  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  5347   *  EcuM_SetRelWakeupAlarm
; ..\component\EcuM\Implementation\EcuM.c	  5348   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  5349  /*!
; ..\component\EcuM\Implementation\EcuM.c	  5350   *
; ..\component\EcuM\Implementation\EcuM.c	  5351   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  5352   *
; ..\component\EcuM\Implementation\EcuM.c	  5353   *
; ..\component\EcuM\Implementation\EcuM.c	  5354   */
; ..\component\EcuM\Implementation\EcuM.c	  5355  FUNC(Std_ReturnType, ECUM_CODE) EcuM_SetRelWakeupAlarm(VAR(EcuM_UserType, AUTOMATIC) user,
; ..\component\EcuM\Implementation\EcuM.c	  5356      VAR(EcuM_TimeType, AUTOMATIC) sec)
; ..\component\EcuM\Implementation\EcuM.c	  5357  {
; ..\component\EcuM\Implementation\EcuM.c	  5358    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5359    /* #10 Add the passed time to the EcuM Clock Time and pass the amount to the API EcuM_SetAbsWakeupAlarm. */
; ..\component\EcuM\Implementation\EcuM.c	  5360    return EcuM_SetAbsWakeupAlarm(user, sec + EcuM_Clock);
; ..\component\EcuM\Implementation\EcuM.c	  5361  }
; ..\component\EcuM\Implementation\EcuM.c	  5362  
; ..\component\EcuM\Implementation\EcuM.c	  5363  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  5364   *  EcuM_AbortWakeupAlarm
; ..\component\EcuM\Implementation\EcuM.c	  5365   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  5366  /*!
; ..\component\EcuM\Implementation\EcuM.c	  5367   *
; ..\component\EcuM\Implementation\EcuM.c	  5368   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  5369   *
; ..\component\EcuM\Implementation\EcuM.c	  5370   *
; ..\component\EcuM\Implementation\EcuM.c	  5371   *
; ..\component\EcuM\Implementation\EcuM.c	  5372   *
; ..\component\EcuM\Implementation\EcuM.c	  5373   *
; ..\component\EcuM\Implementation\EcuM.c	  5374   */
; ..\component\EcuM\Implementation\EcuM.c	  5375  FUNC(Std_ReturnType, ECUM_CODE) EcuM_AbortWakeupAlarm(VAR(EcuM_UserType, AUTOMATIC) user)
; ..\component\EcuM\Implementation\EcuM.c	  5376  {
; ..\component\EcuM\Implementation\EcuM.c	  5377    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5378    Std_ReturnType retval = E_NOT_OK;
; ..\component\EcuM\Implementation\EcuM.c	  5379    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  5380    uint8 AlarmClockUser;
; ..\component\EcuM\Implementation\EcuM.c	  5381  
; ..\component\EcuM\Implementation\EcuM.c	  5382    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5383    /* #20 Check if the calling user is in the range of valid users. */
; ..\component\EcuM\Implementation\EcuM.c	  5384    if ((user >= EcuM_GetSizeOfFlexUser()) || (EcuM_GetAlarmClockIdOfFlexUser(user) == 0xFFu))
; ..\component\EcuM\Implementation\EcuM.c	  5385    {
; ..\component\EcuM\Implementation\EcuM.c	  5386      errorId = ECUM_E_INVALID_PAR;
; ..\component\EcuM\Implementation\EcuM.c	  5387    }
; ..\component\EcuM\Implementation\EcuM.c	  5388    else
; ..\component\EcuM\Implementation\EcuM.c	  5389    {
; ..\component\EcuM\Implementation\EcuM.c	  5390      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5391      AlarmClockUser = EcuM_GetAlarmClockIdOfFlexUser(user);
; ..\component\EcuM\Implementation\EcuM.c	  5392      /* #21 Check for an active alarm clock set by this user. */
; ..\component\EcuM\Implementation\EcuM.c	  5393      if (EcuM_GetAlarmClockTimeOut(AlarmClockUser) != 0u)
; ..\component\EcuM\Implementation\EcuM.c	  5394      {
; ..\component\EcuM\Implementation\EcuM.c	  5395        /* #22 Set the current alarm clock of this user to 0. */
; ..\component\EcuM\Implementation\EcuM.c	  5396        EcuM_SetAlarmClockTimeOut(AlarmClockUser, 0u); /* SBSW_ECUM_ACCESSALARMCLOCK */
; ..\component\EcuM\Implementation\EcuM.c	  5397  
; ..\component\EcuM\Implementation\EcuM.c	  5398        /* #23 Update the next alarm time via EcuM_UpdateMasterAlarm. */
; ..\component\EcuM\Implementation\EcuM.c	  5399        EcuM_UpdateMasterAlarm();
; ..\component\EcuM\Implementation\EcuM.c	  5400  
; ..\component\EcuM\Implementation\EcuM.c	  5401        retval = E_OK;
; ..\component\EcuM\Implementation\EcuM.c	  5402      }
; ..\component\EcuM\Implementation\EcuM.c	  5403      else
; ..\component\EcuM\Implementation\EcuM.c	  5404      {
; ..\component\EcuM\Implementation\EcuM.c	  5405        retval = E_NOT_ACTIVE;
; ..\component\EcuM\Implementation\EcuM.c	  5406      }
; ..\component\EcuM\Implementation\EcuM.c	  5407    }
; ..\component\EcuM\Implementation\EcuM.c	  5408  
; ..\component\EcuM\Implementation\EcuM.c	  5409    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5410  # if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  5411    if (errorId != ECUM_E_NO_ERROR)
; ..\component\EcuM\Implementation\EcuM.c	  5412    {
; ..\component\EcuM\Implementation\EcuM.c	  5413      EcuM_Det_ReportError(ECUM_SID_ABORT_WAKEUP_ALARM, errorId);
; ..\component\EcuM\Implementation\EcuM.c	  5414    }
; ..\component\EcuM\Implementation\EcuM.c	  5415  # else
; ..\component\EcuM\Implementation\EcuM.c	  5416    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  5417  # endif
; ..\component\EcuM\Implementation\EcuM.c	  5418  
; ..\component\EcuM\Implementation\EcuM.c	  5419    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  5420  }
; ..\component\EcuM\Implementation\EcuM.c	  5421  
; ..\component\EcuM\Implementation\EcuM.c	  5422  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  5423   *  EcuM_GetCurrentTime
; ..\component\EcuM\Implementation\EcuM.c	  5424   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  5425  /*!
; ..\component\EcuM\Implementation\EcuM.c	  5426   *
; ..\component\EcuM\Implementation\EcuM.c	  5427   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  5428   *
; ..\component\EcuM\Implementation\EcuM.c	  5429   *
; ..\component\EcuM\Implementation\EcuM.c	  5430   *
; ..\component\EcuM\Implementation\EcuM.c	  5431   */
; ..\component\EcuM\Implementation\EcuM.c	  5432  FUNC(Std_ReturnType, ECUM_CODE) EcuM_GetCurrentTime(P2VAR(EcuM_TimeType, AUTOMATIC, ECUM_APPL_DATA) sec)
; ..\component\EcuM\Implementation\EcuM.c	  5433  {
; ..\component\EcuM\Implementation\EcuM.c	  5434    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5435    Std_ReturnType retval = E_NOT_OK;
; ..\component\EcuM\Implementation\EcuM.c	  5436  
; ..\component\EcuM\Implementation\EcuM.c	  5437    /* #20 Check that the passed pointer is not a Null Pointer. */
; ..\component\EcuM\Implementation\EcuM.c	  5438    if(sec != NULL_PTR)
; ..\component\EcuM\Implementation\EcuM.c	  5439    {
; ..\component\EcuM\Implementation\EcuM.c	  5440      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5441      EcuM_EnterCriticalArea_2();
; ..\component\EcuM\Implementation\EcuM.c	  5442      /* #30 Pass the current EcuM Time to the pointer. */
; ..\component\EcuM\Implementation\EcuM.c	  5443      *sec = EcuM_Clock; /* SBSW_ECUM_POINTERACCESS_TIME */
; ..\component\EcuM\Implementation\EcuM.c	  5444      EcuM_LeaveCriticalArea_2();
; ..\component\EcuM\Implementation\EcuM.c	  5445  
; ..\component\EcuM\Implementation\EcuM.c	  5446      retval = E_OK;
; ..\component\EcuM\Implementation\EcuM.c	  5447    }
; ..\component\EcuM\Implementation\EcuM.c	  5448    else
; ..\component\EcuM\Implementation\EcuM.c	  5449    {
; ..\component\EcuM\Implementation\EcuM.c	  5450      /* Null Pointer was given as parameter and leads to an error return. */
; ..\component\EcuM\Implementation\EcuM.c	  5451    }
; ..\component\EcuM\Implementation\EcuM.c	  5452  
; ..\component\EcuM\Implementation\EcuM.c	  5453    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  5454  }
; ..\component\EcuM\Implementation\EcuM.c	  5455  
; ..\component\EcuM\Implementation\EcuM.c	  5456  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  5457   *  EcuM_GetWakeupTime
; ..\component\EcuM\Implementation\EcuM.c	  5458   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  5459  /*!
; ..\component\EcuM\Implementation\EcuM.c	  5460   *
; ..\component\EcuM\Implementation\EcuM.c	  5461   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  5462   *
; ..\component\EcuM\Implementation\EcuM.c	  5463   *
; ..\component\EcuM\Implementation\EcuM.c	  5464   *
; ..\component\EcuM\Implementation\EcuM.c	  5465   */
; ..\component\EcuM\Implementation\EcuM.c	  5466  FUNC(Std_ReturnType, ECUM_CODE) EcuM_GetWakeupTime(P2VAR(EcuM_TimeType, AUTOMATIC, ECUM_APPL_DATA) sec)
; ..\component\EcuM\Implementation\EcuM.c	  5467  {
; ..\component\EcuM\Implementation\EcuM.c	  5468    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5469    Std_ReturnType retval = E_NOT_OK;
; ..\component\EcuM\Implementation\EcuM.c	  5470  
; ..\component\EcuM\Implementation\EcuM.c	  5471    /* #20 Check that the passed pointer is not a Null Pointer. */
; ..\component\EcuM\Implementation\EcuM.c	  5472    if(sec != NULL_PTR)
; ..\component\EcuM\Implementation\EcuM.c	  5473    {
; ..\component\EcuM\Implementation\EcuM.c	  5474      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5475      EcuM_EnterCriticalArea_2();
; ..\component\EcuM\Implementation\EcuM.c	  5476      /* #30 Pass the current EcuM Alarm Time to the pointer. */
; ..\component\EcuM\Implementation\EcuM.c	  5477      *sec = EcuM_MasterAlarm; /* SBSW_ECUM_POINTERACCESS_TIME */
; ..\component\EcuM\Implementation\EcuM.c	  5478      EcuM_LeaveCriticalArea_2();
; ..\component\EcuM\Implementation\EcuM.c	  5479  
; ..\component\EcuM\Implementation\EcuM.c	  5480      retval = E_OK;
; ..\component\EcuM\Implementation\EcuM.c	  5481    }
; ..\component\EcuM\Implementation\EcuM.c	  5482    else
; ..\component\EcuM\Implementation\EcuM.c	  5483    {
; ..\component\EcuM\Implementation\EcuM.c	  5484      /* Null Pointer was given as parameter and leads to an error return. */
; ..\component\EcuM\Implementation\EcuM.c	  5485    }
; ..\component\EcuM\Implementation\EcuM.c	  5486  
; ..\component\EcuM\Implementation\EcuM.c	  5487    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  5488  }
; ..\component\EcuM\Implementation\EcuM.c	  5489  
; ..\component\EcuM\Implementation\EcuM.c	  5490  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  5491   *  EcuM_SetClock
; ..\component\EcuM\Implementation\EcuM.c	  5492   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  5493  /*!
; ..\component\EcuM\Implementation\EcuM.c	  5494   *
; ..\component\EcuM\Implementation\EcuM.c	  5495   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  5496   *
; ..\component\EcuM\Implementation\EcuM.c	  5497   *
; ..\component\EcuM\Implementation\EcuM.c	  5498   *
; ..\component\EcuM\Implementation\EcuM.c	  5499   */
; ..\component\EcuM\Implementation\EcuM.c	  5500  FUNC(Std_ReturnType, ECUM_CODE) EcuM_SetClock(VAR(EcuM_UserType, AUTOMATIC) user,
; ..\component\EcuM\Implementation\EcuM.c	  5501      VAR(EcuM_TimeType, AUTOMATIC) sec)
; ..\component\EcuM\Implementation\EcuM.c	  5502  {
; ..\component\EcuM\Implementation\EcuM.c	  5503    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5504    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\EcuM\Implementation\EcuM.c	  5505  
; ..\component\EcuM\Implementation\EcuM.c	  5506    /* #20 Check that the calling user is valid and allowed to set the EcuM Time. */
; ..\component\EcuM\Implementation\EcuM.c	  5507    if ((user < EcuM_GetSizeOfFlexUser()) && EcuM_IsSetClockAllowedOfFlexUser(user))
; ..\component\EcuM\Implementation\EcuM.c	  5508    {
; ..\component\EcuM\Implementation\EcuM.c	  5509      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5510      EcuM_EnterCriticalArea_2();
; ..\component\EcuM\Implementation\EcuM.c	  5511      /* #30 Set the EcuM Time to the passed time parameter. */
; ..\component\EcuM\Implementation\EcuM.c	  5512      EcuM_Clock = sec;
; ..\component\EcuM\Implementation\EcuM.c	  5513      EcuM_LeaveCriticalArea_2();
; ..\component\EcuM\Implementation\EcuM.c	  5514      retval = E_OK;
; ..\component\EcuM\Implementation\EcuM.c	  5515    }
; ..\component\EcuM\Implementation\EcuM.c	  5516    else
; ..\component\EcuM\Implementation\EcuM.c	  5517    {
; ..\component\EcuM\Implementation\EcuM.c	  5518      retval = E_NOT_ALLOWED;
; ..\component\EcuM\Implementation\EcuM.c	  5519    }
; ..\component\EcuM\Implementation\EcuM.c	  5520  
; ..\component\EcuM\Implementation\EcuM.c	  5521    return retval;
; ..\component\EcuM\Implementation\EcuM.c	  5522  }
; ..\component\EcuM\Implementation\EcuM.c	  5523  
; ..\component\EcuM\Implementation\EcuM.c	  5524  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  5525   *  EcuM_AlarmCheckWakeup
; ..\component\EcuM\Implementation\EcuM.c	  5526   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  5527  /*!
; ..\component\EcuM\Implementation\EcuM.c	  5528   *
; ..\component\EcuM\Implementation\EcuM.c	  5529   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  5530   *
; ..\component\EcuM\Implementation\EcuM.c	  5531   *
; ..\component\EcuM\Implementation\EcuM.c	  5532   *
; ..\component\EcuM\Implementation\EcuM.c	  5533   */
; ..\component\EcuM\Implementation\EcuM.c	  5534  FUNC(void, ECUM_CODE) EcuM_AlarmCheckWakeup(void)
; ..\component\EcuM\Implementation\EcuM.c	  5535  {
; ..\component\EcuM\Implementation\EcuM.c	  5536    /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5537    /* #20 Increment the current EcuM Time. */
; ..\component\EcuM\Implementation\EcuM.c	  5538    EcuM_Clock++;
; ..\component\EcuM\Implementation\EcuM.c	  5539  
; ..\component\EcuM\Implementation\EcuM.c	  5540    /* #30 If the EcuM Time has reached the Alarm time, a wakeup event shall be set. */
; ..\component\EcuM\Implementation\EcuM.c	  5541    if (EcuM_MasterAlarm == EcuM_Clock)
; ..\component\EcuM\Implementation\EcuM.c	  5542    {
; ..\component\EcuM\Implementation\EcuM.c	  5543      EcuM_SetWakeupEvent(ECUM_ALARM_WKSOURCE);
; ..\component\EcuM\Implementation\EcuM.c	  5544  
; ..\component\EcuM\Implementation\EcuM.c	  5545      EcuM_InternalClearAlarms();
; ..\component\EcuM\Implementation\EcuM.c	  5546    }
; ..\component\EcuM\Implementation\EcuM.c	  5547  }
; ..\component\EcuM\Implementation\EcuM.c	  5548  #endif /* (ECUM_ALARM_CLOCK_PRESENT == STD_ON) */
; ..\component\EcuM\Implementation\EcuM.c	  5549  
; ..\component\EcuM\Implementation\EcuM.c	  5550  #if (ECUM_VERSION_INFO_API == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  5551  /***********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  5552   *  EcuM_GetVersionInfo
; ..\component\EcuM\Implementation\EcuM.c	  5553   **********************************************************************************************************************/
; ..\component\EcuM\Implementation\EcuM.c	  5554  /*!
; ..\component\EcuM\Implementation\EcuM.c	  5555   *
; ..\component\EcuM\Implementation\EcuM.c	  5556   * Internal comment removed.
; ..\component\EcuM\Implementation\EcuM.c	  5557   *
; ..\component\EcuM\Implementation\EcuM.c	  5558   *
; ..\component\EcuM\Implementation\EcuM.c	  5559   *
; ..\component\EcuM\Implementation\EcuM.c	  5560   */
; ..\component\EcuM\Implementation\EcuM.c	  5561  FUNC(void, ECUM_CODE) EcuM_GetVersionInfo(P2VAR(Std_VersionInfoType, AUTOMATIC, ECUM_APPL_DATA) versioninfo)
; ..\component\EcuM\Implementation\EcuM.c	  5562  {
; ..\component\EcuM\Implementation\EcuM.c	  5563    /* ----- Local Variables ---------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5564    uint8 errorId = ECUM_E_NO_ERROR;
; ..\component\EcuM\Implementation\EcuM.c	  5565  
; ..\component\EcuM\Implementation\EcuM.c	  5566    /* ----- Development Error Checks ------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5567    /* #20 Check that the passed parameter is not a Null Pointer. */
; ..\component\EcuM\Implementation\EcuM.c	  5568    if (NULL_PTR == versioninfo)
; ..\component\EcuM\Implementation\EcuM.c	  5569    {
; ..\component\EcuM\Implementation\EcuM.c	  5570      errorId = ECUM_E_NULL_POINTER;
; ..\component\EcuM\Implementation\EcuM.c	  5571    }
; ..\component\EcuM\Implementation\EcuM.c	  5572    else
; ..\component\EcuM\Implementation\EcuM.c	  5573    {
; ..\component\EcuM\Implementation\EcuM.c	  5574      /* ----- Implementation ----------------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5575      /* #30 Pass the EcuM version info from component header to the Std_VersionInfoType Pointer. */
; ..\component\EcuM\Implementation\EcuM.c	  5576  
; ..\component\EcuM\Implementation\EcuM.c	  5577      versioninfo->vendorID = (uint16)ECUM_VENDOR_ID;  /* SBSW_ECUM_POINTERACCESS_VERSIONINFO */
; ..\component\EcuM\Implementation\EcuM.c	  5578      versioninfo->moduleID = (uint16)ECUM_MODULE_ID;  /* SBSW_ECUM_POINTERACCESS_VERSIONINFO */
; ..\component\EcuM\Implementation\EcuM.c	  5579  
; ..\component\EcuM\Implementation\EcuM.c	  5580      versioninfo->sw_major_version = (uint8)ECUM_SW_MAJOR_VERSION;  /* SBSW_ECUM_POINTERACCESS_VERSIONINFO */
; ..\component\EcuM\Implementation\EcuM.c	  5581      versioninfo->sw_minor_version = (uint8)ECUM_SW_MINOR_VERSION;  /* SBSW_ECUM_POINTERACCESS_VERSIONINFO */
; ..\component\EcuM\Implementation\EcuM.c	  5582      versioninfo->sw_patch_version = (uint8)ECUM_SW_PATCH_VERSION;  /* SBSW_ECUM_POINTERACCESS_VERSIONINFO */
; ..\component\EcuM\Implementation\EcuM.c	  5583    }
; ..\component\EcuM\Implementation\EcuM.c	  5584  
; ..\component\EcuM\Implementation\EcuM.c	  5585    /* ----- Development Error Report --------------------------------------- */
; ..\component\EcuM\Implementation\EcuM.c	  5586  # if(ECUM_DEV_ERROR_REPORT == STD_ON)
; ..\component\EcuM\Implementation\EcuM.c	  5587    if (errorId != ECUM_E_NO_ERROR)
; ..\component\EcuM\Implementation\EcuM.c	  5588    {
; ..\component\EcuM\Implementation\EcuM.c	  5589      EcuM_Det_ReportError(ECUM_SID_GET_VERSION_INFO, errorId);
; ..\component\EcuM\Implementation\EcuM.c	  5590    }
; ..\component\EcuM\Implementation\EcuM.c	  5591  # else
; ..\component\EcuM\Implementation\EcuM.c	  5592    ECUM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\EcuM\Implementation\EcuM.c	  5593  # endif
; ..\component\EcuM\Implementation\EcuM.c	  5594  }
; ..\component\EcuM\Implementation\EcuM.c	  5595  #endif /* (ECUM_VERSION_INFO_API == STD_ON) */
; ..\component\EcuM\Implementation\EcuM.c	  5596  
; ..\component\EcuM\Implementation\EcuM.c	  5597  #define ECUM_STOP_SEC_CODE
; ..\component\EcuM\Implementation\EcuM.c	  5598  #include "MemMap.h"      /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\EcuM\Implementation\EcuM.c	  5599  
; ..\component\EcuM\Implementation\EcuM.c	  5600  /* Justification for module-specific MISRA deviations:
; ..\component\EcuM\Implementation\EcuM.c	  5601  *
; ..\component\EcuM\Implementation\EcuM.c	  5602       MD_EcuM_0771:
; ..\component\EcuM\Implementation\EcuM.c	  5603       Reason:     Multiple break used for optimize code runtime.
; ..\component\EcuM\Implementation\EcuM.c	  5604       Risk:       Relevant fragments of code not executed.
; ..\component\EcuM\Implementation\EcuM.c	  5605       Prevention: Covered by code review.
; ..\component\EcuM\Implementation\EcuM.c	  5606  
; ..\component\EcuM\Implementation\EcuM.c	  5607       MD_EcuM_0779:
; ..\component\EcuM\Implementation\EcuM.c	  5608       Reason:     Dependend on the variant name, init functions are not always unique within the first 31 characters.
; ..\component\EcuM\Implementation\EcuM.c	  5609       Risk:       There is no risk as such statements have no effect on the code.
; ..\component\EcuM\Implementation\EcuM.c	  5610       Prevention: Covered by code review.
; ..\component\EcuM\Implementation\EcuM.c	  5611  
; ..\component\EcuM\Implementation\EcuM.c	  5612       MD_EcuM_0841:
; ..\component\EcuM\Implementation\EcuM.c	  5613       Reason:     EcuM_PrivateCfg.h must not be used outside EcuM.
; ..\component\EcuM\Implementation\EcuM.c	  5614       Risk:       #undef of wrong identifier.
; ..\component\EcuM\Implementation\EcuM.c	  5615       Prevention: Covered by code review or Compiler Error in case an undefined identifier is used.
; ..\component\EcuM\Implementation\EcuM.c	  5616  
; ..\component\EcuM\Implementation\EcuM.c	  5617       MD_EcuM_1330:
; ..\component\EcuM\Implementation\EcuM.c	  5618       Reason:     Parameter names differ from declaration because the Rte does currently not use the correct ASR parameter names.
; ..\component\EcuM\Implementation\EcuM.c	  5619       Risk:       No risk, parameter names are not relevant.
; ..\component\EcuM\Implementation\EcuM.c	  5620       Prevention: Covered by code review.
; ..\component\EcuM\Implementation\EcuM.c	  5621  
; ..\component\EcuM\Implementation\EcuM.c	  5622       MD_EcuM_1514:
; ..\component\EcuM\Implementation\EcuM.c	  5623       Reason:     EcuM_ConfigDataPtr is a Global Config Pointer and cannot be made static.
; ..\component\EcuM\Implementation\EcuM.c	  5624       Risk:       No Risk.
; ..\component\EcuM\Implementation\EcuM.c	  5625       Prevention: Covered by code review.
; ..\component\EcuM\Implementation\EcuM.c	  5626  
; ..\component\EcuM\Implementation\EcuM.c	  5627       MD_EcuM_1533:
; ..\component\EcuM\Implementation\EcuM.c	  5628       Reason:     The value of the object is generated, therefore cannot be moved to the static file EcuM.c.
; ..\component\EcuM\Implementation\EcuM.c	  5629       Risk:       No Risk.
; ..\component\EcuM\Implementation\EcuM.c	  5630       Prevention: Covered by code review.
; ..\component\EcuM\Implementation\EcuM.c	  5631  
; ..\component\EcuM\Implementation\EcuM.c	  5632       MD_EcuM_2812:
; ..\component\EcuM\Implementation\EcuM.c	  5633       Reason:     EcuM_ConfigDataPtr is initiaized in a non trivial way.
; ..\component\EcuM\Implementation\EcuM.c	  5634       Risk:       Dereferencing a NULL pointer.
; ..\component\EcuM\Implementation\EcuM.c	  5635       Prevention: Covered by code review.
; ..\component\EcuM\Implementation\EcuM.c	  5636  
; ..\component\EcuM\Implementation\EcuM.c	  5637       MD_EcuM_2991_2992_2995_2996:
; ..\component\EcuM\Implementation\EcuM.c	  5638       Reason:     During runtime of EcuM_Init it must be detected if the Autosar startup core is also the BSW core. In case that ECUM_CORE_ID_STARTUP
; ..\component\EcuM\Implementation\EcuM.c	  5639                   and ECUM_CORE_ID_BSW are configured to the same value this is not coverable.
; ..\component\EcuM\Implementation\EcuM.c	  5640       Risk:       There is no risk, most compilers will optimize these.
; ..\component\EcuM\Implementation\EcuM.c	  5641       Prevention: Covered by code review.
; ..\component\EcuM\Implementation\EcuM.c	  5642  
; ..\component\EcuM\Implementation\EcuM.c	  5643       MD_EcuM_3206:
; ..\component\EcuM\Implementation\EcuM.c	  5644       Reason:     Empty implementation. Dummy statements can only be used when a define ECUM_USE_DUMMY_STATEMENT is ON.
; ..\component\EcuM\Implementation\EcuM.c	  5645       Risk:       No risk.
; ..\component\EcuM\Implementation\EcuM.c	  5646       Prevention: Covered by code review.
; ..\component\EcuM\Implementation\EcuM.c	  5647  
; ..\component\EcuM\Implementation\EcuM.c	  5648       MD_EcuM_3218:
; ..\component\EcuM\Implementation\EcuM.c	  5649       Reason:     Not all compilers can cope with static const at function scope.
; ..\component\EcuM\Implementation\EcuM.c	  5650       Risk:       Developer is tempted to use static const variables in other functions although it is not designated.
; ..\component\EcuM\Implementation\EcuM.c	  5651       Prevention: Assert that the variables are used in one function only during review.
; ..\component\EcuM\Implementation\EcuM.c	  5652  
; ..\component\EcuM\Implementation\EcuM.c	  5653       MD_EcuM_3415:
; ..\component\EcuM\Implementation\EcuM.c	  5654       Reason:     Parameter check or function call at right hand of || or && is defined to have no side-effects.
; ..\component\EcuM\Implementation\EcuM.c	  5655       Risk:       Called functions have no side effects.
; ..\component\EcuM\Implementation\EcuM.c	  5656       Prevention: Covered by code review.
; ..\component\EcuM\Implementation\EcuM.c	  5657  
; ..\component\EcuM\Implementation\EcuM.c	  5658       MD_EcuM_3449_3451:
; ..\component\EcuM\Implementation\EcuM.c	  5659       Reason:     Schedulable entities are declared by the RTE and also by the BSW modules.
; ..\component\EcuM\Implementation\EcuM.c	  5660       Risk:       No functional risk.
; ..\component\EcuM\Implementation\EcuM.c	  5661       Prevention: Not required.
; ..\component\EcuM\Implementation\EcuM.c	  5662  
; ..\component\EcuM\Implementation\EcuM.c	  5663       MD_EcuM_3673:
; ..\component\EcuM\Implementation\EcuM.c	  5664       Reason:     API should not be called in this configuration but is available to prevent compiler errors.
; ..\component\EcuM\Implementation\EcuM.c	  5665       Risk:       No functional risk.
; ..\component\EcuM\Implementation\EcuM.c	  5666       Prevention: Covered by code review.
; ..\component\EcuM\Implementation\EcuM.c	  5667  
; ..\component\EcuM\Implementation\EcuM.c	  5668   */
; ..\component\EcuM\Implementation\EcuM.c	  5669  
; ..\component\EcuM\Implementation\EcuM.c	  5670  /* SBSW_JUSTIFICATION_BEGIN
; ..\component\EcuM\Implementation\EcuM.c	  5671  
; ..\component\EcuM\Implementation\EcuM.c	  5672  \ID SBSW_ECUM_ACCESSVALTABLE
; ..\component\EcuM\Implementation\EcuM.c	  5673   \DESCRIPTION Access of ValidationTimeoutTable (via indirection over WakeupSourceList) with same index using ComStackLib
; ..\component\EcuM\Implementation\EcuM.c	  5674   \COUNTERMEASURE \N Qualified use-case CSL02 of ComStackLib
; ..\component\EcuM\Implementation\EcuM.c	  5675  
; ..\component\EcuM\Implementation\EcuM.c	  5676  \ID SBSW_ECUM_ACCESSALARMCLOCK
; ..\component\EcuM\Implementation\EcuM.c	  5677   \DESCRIPTION Access of AlarmClockTimeOut using ComStackLib
; ..\component\EcuM\Implementation\EcuM.c	  5678   \COUNTERMEASURE \N Qualified use-case CSL01 of ComStackLib
; ..\component\EcuM\Implementation\EcuM.c	  5679  
; ..\component\EcuM\Implementation\EcuM.c	  5680  \ID SBSW_ECUM_ACCESSUSERTABLE
; ..\component\EcuM\Implementation\EcuM.c	  5681   \DESCRIPTION Access of UserTable using ComStackLib
; ..\component\EcuM\Implementation\EcuM.c	  5682   \COUNTERMEASURE \N Qualified use-case CSL01 of ComStackLib
; ..\component\EcuM\Implementation\EcuM.c	  5683  
; ..\component\EcuM\Implementation\EcuM.c	  5684  \ID SBSW_ECUM_POINTERACCESS_VERSIONINFO
; ..\component\EcuM\Implementation\EcuM.c	  5685   \DESCRIPTION The function writes to the 'version' pointer parameter.
; ..\component\EcuM\Implementation\EcuM.c	  5686   \COUNTERMEASURE \N The caller has to guarantee that the pointer is valid.
; ..\component\EcuM\Implementation\EcuM.c	  5687  
; ..\component\EcuM\Implementation\EcuM.c	  5688  \ID SBSW_ECUM_POINTERACCESS_SHUTDOWNTARGET
; ..\component\EcuM\Implementation\EcuM.c	  5689   \DESCRIPTION The function writes to the 'target' and to 'resetSleepMode' pointer parameters.
; ..\component\EcuM\Implementation\EcuM.c	  5690   \COUNTERMEASURE \N The caller has to guarantee that the pointers are valid.
; ..\component\EcuM\Implementation\EcuM.c	  5691  
; ..\component\EcuM\Implementation\EcuM.c	  5692  \ID SBSW_ECUM_POINTERACCESS_SHUTDOWNCAUSE
; ..\component\EcuM\Implementation\EcuM.c	  5693   \DESCRIPTION The function writes to the 'shutdownCause' pointer parameter.
; ..\component\EcuM\Implementation\EcuM.c	  5694   \COUNTERMEASURE \N The caller has to guarantee that the pointer is valid.
; ..\component\EcuM\Implementation\EcuM.c	  5695  
; ..\component\EcuM\Implementation\EcuM.c	  5696  \ID SBSW_ECUM_POINTERACCESS_BOOTTARGET
; ..\component\EcuM\Implementation\EcuM.c	  5697   \DESCRIPTION The function writes to the 'BootTarget' pointer parameter.
; ..\component\EcuM\Implementation\EcuM.c	  5698   \COUNTERMEASURE \N The caller has to guarantee that the pointer is valid.
; ..\component\EcuM\Implementation\EcuM.c	  5699  
; ..\component\EcuM\Implementation\EcuM.c	  5700  \ID SBSW_ECUM_POINTERACCESS_TIME
; ..\component\EcuM\Implementation\EcuM.c	  5701   \DESCRIPTION The function writes to the 'time' pointer parameter.
; ..\component\EcuM\Implementation\EcuM.c	  5702   \COUNTERMEASURE \N The caller has to guarantee that the pointer is valid.
; ..\component\EcuM\Implementation\EcuM.c	  5703  
; ..\component\EcuM\Implementation\EcuM.c	  5704  \ID SBSW_ECUM_POINTERACCESS_STATE
; ..\component\EcuM\Implementation\EcuM.c	  5705   \DESCRIPTION The function writes to the 'state' pointer parameter.
; ..\component\EcuM\Implementation\EcuM.c	  5706   \COUNTERMEASURE \N The caller has to guarantee that the pointer is valid.
; ..\component\EcuM\Implementation\EcuM.c	  5707  
; ..\component\EcuM\Implementation\EcuM.c	  5708  \ID SBSW_ECUM_FUNCTIONPOINTER_CALL
; ..\component\EcuM\Implementation\EcuM.c	  5709   \DESCRIPTION Call to a generated driver init function via a function pointer.
; ..\component\EcuM\Implementation\EcuM.c	  5710   \COUNTERMEASURE \S User verifies generated functions (SMI-8) and performs adequate integration (SMI-4).
; ..\component\EcuM\Implementation\EcuM.c	  5711  
; ..\component\EcuM\Implementation\EcuM.c	  5712  \ID SBSW_ECUM_ADRESSPARAMETER_TOCOMM
; ..\component\EcuM\Implementation\EcuM.c	  5713   \DESCRIPTION The variable 'ComMStatus' is passed to the API ComM_GetState.
; ..\component\EcuM\Implementation\EcuM.c	  5714   \COUNTERMEASURE \N The passed parameter is declared locally and is trusted.
; ..\component\EcuM\Implementation\EcuM.c	  5715  
; ..\component\EcuM\Implementation\EcuM.c	  5716  \ID SBSW_ECUM_ADRESSPARAMETER_TOOS
; ..\component\EcuM\Implementation\EcuM.c	  5717   \DESCRIPTION The variable 'status' is passed to the API StartCore.
; ..\component\EcuM\Implementation\EcuM.c	  5718   \COUNTERMEASURE \N The passed parameter is declared locally and is trusted.
; ..\component\EcuM\Implementation\EcuM.c	  5719  
; ..\component\EcuM\Implementation\EcuM.c	  5720  \ID SBSW_SETCORESTATUS_BSWCOREID
; ..\component\EcuM\Implementation\EcuM.c	  5721   \DESCRIPTION The define 'ECUM_CORE_ID_BSW' is used to write to the array 'CoreStatus'.
; ..\component\EcuM\Implementation\EcuM.c	  5722   \COUNTERMEASURE \N It is assured via preprocessor error directive that 'ECUM_CORE_ID_BSW' is in range of the array.
; ..\component\EcuM\Implementation\EcuM.c	  5723  
; ..\component\EcuM\Implementation\EcuM.c	  5724  \ID SBSW_SETCORESTATUS_OSCOREID
; ..\component\EcuM\Implementation\EcuM.c	  5725   \DESCRIPTION Access of CoreStatus using ComStackLib.
; ..\component\EcuM\Implementation\EcuM.c	  5726   \COUNTERMEASURE \N Qualified use-case CSL01 of ComStackLib
; ..\component\EcuM\Implementation\EcuM.c	  5727  
; ..\component\EcuM\Implementation\EcuM.c	  5728  \ID SBSW_ECUM_FUNCTIONCALL_POINTER
; ..\component\EcuM\Implementation\EcuM.c	  5729   \DESCRIPTION Pass pointer parameter to SchM and BswM initialization functions.
; ..\component\EcuM\Implementation\EcuM.c	  5730   \COUNTERMEASURE \S Check that ECUM_SCHM_CONFIG_POINTER and ECUM_BSWM_CONFIG_POINTER contain a valid pointer to
; ..\component\EcuM\Implementation\EcuM.c	  5731                      initialize those modules.
; ..\component\EcuM\Implementation\EcuM.c	  5732  
; ..\component\EcuM\Implementation\EcuM.c	  5733  \ID SBSW_ECUM_DEM_FUNCTIONCALL_POINTER
; ..\component\EcuM\Implementation\EcuM.c	  5734   \DESCRIPTION Pass pointer parameter to Dem initialization functions.
; ..\component\EcuM\Implementation\EcuM.c	  5735   \COUNTERMEASURE \S Check that ECUM_DEM_CONFIG_POINTER contain a valid pointer to initialize this module.
; ..\component\EcuM\Implementation\EcuM.c	  5736  
; ..\component\EcuM\Implementation\EcuM.c	  5737  \ID SBSW_ECUM_CSL_VAR_ACCESS
; ..\component\EcuM\Implementation\EcuM.c	  5738   \DESCRIPTION A ComStackLib generated variable is accessed.
; ..\component\EcuM\Implementation\EcuM.c	  5739   \COUNTERMEASURE \N The variable is written using a generated macro of the CSL. It immediately dereferences the variables address without pointer arithmetic.
; ..\component\EcuM\Implementation\EcuM.c	  5740  
; ..\component\EcuM\Implementation\EcuM.c	  5741  \ID SBSW_ECUM_POINTER_TO_LOCAL_VARIABLES
; ..\component\EcuM\Implementation\EcuM.c	  5742   \DESCRIPTION The function is called with pointers to local variables as output data.
; ..\component\EcuM\Implementation\EcuM.c	  5743   \COUNTERMEASURE \N The caller has to guarantee that the pointer is valid.
; ..\component\EcuM\Implementation\EcuM.c	  5744  
; ..\component\EcuM\Implementation\EcuM.c	  5745  SBSW_JUSTIFICATION_END */
; ..\component\EcuM\Implementation\EcuM.c	  5746  
; ..\component\EcuM\Implementation\EcuM.c	  5747  
; ..\component\EcuM\Implementation\EcuM.c	  5748  /* COV_JUSTIFICATION_BEGIN
; ..\component\EcuM\Implementation\EcuM.c	  5749  
; ..\component\EcuM\Implementation\EcuM.c	  5750  \ID COV_ECUM_LOCAL
; ..\component\EcuM\Implementation\EcuM.c	  5751    \ACCEPT XF
; ..\component\EcuM\Implementation\EcuM.c	  5752    \REASON Ensures that ECUM_LOCAL is always be set.
; ..\component\EcuM\Implementation\EcuM.c	  5753  
; ..\component\EcuM\Implementation\EcuM.c	  5754  \ID COV_ECUM_LOCAL_INLINE
; ..\component\EcuM\Implementation\EcuM.c	  5755    \ACCEPT XF
; ..\component\EcuM\Implementation\EcuM.c	  5756    \REASON Ensures that ECUM_LOCAL_INLINE is always be set.
; ..\component\EcuM\Implementation\EcuM.c	  5757  
; ..\component\EcuM\Implementation\EcuM.c	  5758  \ID COV_ECUM_ERRORS
; ..\component\EcuM\Implementation\EcuM.c	  5759    \ACCEPT TX
; ..\component\EcuM\Implementation\EcuM.c	  5760    \REASON Ensures that errors are always defined.
; ..\component\EcuM\Implementation\EcuM.c	  5761  
; ..\component\EcuM\Implementation\EcuM.c	  5762  \ID COV_ECUM_01
; ..\component\EcuM\Implementation\EcuM.c	  5763    \ACCEPT  TF tf tx
; ..\component\EcuM\Implementation\EcuM.c	  5764    \REASON  It is only possible to cover this line in configurations with more than one wakeup source with a referenced
; ..\component\EcuM\Implementation\EcuM.c	  5765             ComM channel.
; ..\component\EcuM\Implementation\EcuM.c	  5766  
; ..\component\EcuM\Implementation\EcuM.c	  5767  \ID COV_ECUM_02
; ..\component\EcuM\Implementation\EcuM.c	  5768    \ACCEPT  TX
; ..\component\EcuM\Implementation\EcuM.c	  5769    \REASON  This switch is generated by CSL and is currently always active if EcuM is available.
; ..\component\EcuM\Implementation\EcuM.c	  5770  
; ..\component\EcuM\Implementation\EcuM.c	  5771  \ID COV_ECUM_03
; ..\component\EcuM\Implementation\EcuM.c	  5772    \ACCEPT  XX
; ..\component\EcuM\Implementation\EcuM.c	  5773    \REASON  The default case in EcuM_Shutdown is not reachable if the DET is enabled.
; ..\component\EcuM\Implementation\EcuM.c	  5774  
; ..\component\EcuM\Implementation\EcuM.c	  5775  \ID COV_ECUM_04
; ..\component\EcuM\Implementation\EcuM.c	  5776    \ACCEPT  TX
; ..\component\EcuM\Implementation\EcuM.c	  5777    \REASON  This line can only be covered if the source which was responsible for a wakeup is part of the current sleepmode.
; ..\component\EcuM\Implementation\EcuM.c	  5778  
; ..\component\EcuM\Implementation\EcuM.c	  5779  \ID COV_ECUM_05
; ..\component\EcuM\Implementation\EcuM.c	  5780    \ACCEPT  XF
; ..\component\EcuM\Implementation\EcuM.c	  5781    \REASON  Two wakeup sources with configured validation timeout must be configured to the same sleepmode.
; ..\component\EcuM\Implementation\EcuM.c	  5782  
; ..\component\EcuM\Implementation\EcuM.c	  5783  \ID COV_ECUM_RESTARTID
; ..\component\EcuM\Implementation\EcuM.c	  5784    \ACCEPT  TF tf xf
; ..\component\EcuM\Implementation\EcuM.c	  5785    \REASON  The magic number check for reinitialized RAM content is performed with two different numbers for safety reasons
; ..\component\EcuM\Implementation\EcuM.c	  5786             but it is sufficient that either both of them are valid or both are not valid.
; ..\component\EcuM\Implementation\EcuM.c	  5787  
; ..\component\EcuM\Implementation\EcuM.c	  5788  \ID COV_ECUM_CALLOUT
; ..\component\EcuM\Implementation\EcuM.c	  5789    \ACCEPT  XX
; ..\component\EcuM\Implementation\EcuM.c	  5790    \ACCEPT  TX
; ..\component\EcuM\Implementation\EcuM.c	  5791    \ACCEPT  TF tf xf
; ..\component\EcuM\Implementation\EcuM.c	  5792    \ACCEPT  TX tx xx
; ..\component\EcuM\Implementation\EcuM.c	  5793    \REASON  Some callout functions are not called by the static code of the EcuM and so they are not coverable.
; ..\component\EcuM\Implementation\EcuM.c	  5794  
; ..\component\EcuM\Implementation\EcuM.c	  5795  \ID COV_ECUM_COREID_STARTUP
; ..\component\EcuM\Implementation\EcuM.c	  5796    \ACCEPT  XF
; ..\component\EcuM\Implementation\EcuM.c	  5797    \ACCEPT  TX
; ..\component\EcuM\Implementation\EcuM.c	  5798    \REASON  During runtime of EcuM_Init it must be detected if the Autosar startup core is also the BSW core. In case that ECUM_CORE_ID_STARTUP and ECUM_CORE_ID_BSW are configured
; ..\component\EcuM\Implementation\EcuM.c	  5799             to the same value this is not coverable.
; ..\component\EcuM\Implementation\EcuM.c	  5800  
; ..\component\EcuM\Implementation\EcuM.c	  5801  \ID COV_ECUM_PARTITIONID
; ..\component\EcuM\Implementation\EcuM.c	  5802    \ACCEPT  TX
; ..\component\EcuM\Implementation\EcuM.c	  5803    \REASON  The condition in the for loop is never met since there always is a matching entry to a valid application ID, which triggers the break.
; ..\component\EcuM\Implementation\EcuM.c	  5804             Invalid application IDs are not handled in this loop.
; ..\component\EcuM\Implementation\EcuM.c	  5805  
; ..\component\EcuM\Implementation\EcuM.c	  5806  \ID COV_ECUM_PNCOFCOMMPNCS_QM
; ..\component\EcuM\Implementation\EcuM.c	  5807    \ACCEPT  TF tf xf tf
; ..\component\EcuM\Implementation\EcuM.c	  5808    \ACCEPT  XF tx xf
; ..\component\EcuM\Implementation\EcuM.c	  5809    \ACCEPT  TF tf xf
; ..\component\EcuM\Implementation\EcuM.c	  5810    \ACCEPT  XF
; ..\component\EcuM\Implementation\EcuM.c	  5811    \REASON  The feature switch ECUM_PNCOFCOMMPNCS is only valid for QM configurations.
; ..\component\EcuM\Implementation\EcuM.c	  5812  
; ..\component\EcuM\Implementation\EcuM.c	  5813  \ID COV_ECUM_PNCOFCOMMPNCS_QM_DEPENDENCY
; ..\component\EcuM\Implementation\EcuM.c	  5814    \ACCEPT  TX
; ..\component\EcuM\Implementation\EcuM.c	  5815    \REASON  Due to the QM feature ECUM_PNCOFCOMMPNCS this switch cannot be covered completely.
; ..\component\EcuM\Implementation\EcuM.c	  5816  
; ..\component\EcuM\Implementation\EcuM.c	  5817  \ID COV_ECUM_GODOWNALLOWEDOFFLEXUSER_QM
; ..\component\EcuM\Implementation\EcuM.c	  5818    \ACCEPT  XF
; ..\component\EcuM\Implementation\EcuM.c	  5819    \REASON  The feature 'Go Down Allowed Of Flex User' is only relevant in QM configurations.
; ..\component\EcuM\Implementation\EcuM.c	  5820  
; ..\component\EcuM\Implementation\EcuM.c	  5821  \ID COV_ECUM_GODOWNALLOWEDOFFLEXUSER_QM_DEPENDENCY
; ..\component\EcuM\Implementation\EcuM.c	  5822    \ACCEPT  XX
; ..\component\EcuM\Implementation\EcuM.c	  5823    \REASON  Due to previous exlusion of the 'Go Down Allowed Of Flex User' feature, this switch cannot be covered completely.
; ..\component\EcuM\Implementation\EcuM.c	  5824  
; ..\component\EcuM\Implementation\EcuM.c	  5825  COV_JUSTIFICATION_END */
; ..\component\EcuM\Implementation\EcuM.c	  5826  
; ..\component\EcuM\Implementation\EcuM.c	  5827  
; ..\component\EcuM\Implementation\EcuM.c	  5828  
; ..\component\EcuM\Implementation\EcuM.c	  5829  
; ..\component\EcuM\Implementation\EcuM.c	  5830  /**********************************************************************************************************************
; ..\component\EcuM\Implementation\EcuM.c	  5831   *  END OF FILE: ECUM.C
; ..\component\EcuM\Implementation\EcuM.c	  5832   *********************************************************************************************************************/

	; Module end
