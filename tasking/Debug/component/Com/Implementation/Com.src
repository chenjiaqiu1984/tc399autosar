	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 21092262 SN 73118428"
	.compiler_invocation	"ctc --dep-file=component\\Com\\Implementation\\.Com.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc39xb -D__CPU_TC39XB__ --core=tc1.6.2 --iso=99 -DBRS_COMP_TASKING -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\testdemo\\taskingdemo\\demo001 -ID:\\Zonal\\demo011\\tasking\\component\\PduR -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Generator -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Com -ID:\\Zonal\\demo011\\tasking\\component\\Com\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Com\\DaVinciCfg_VASE -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Com\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\ComM -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Det -ID:\\Zonal\\demo011\\tasking\\component\\Det\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Det\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\demo011\\tasking\\appl -ID:\\Zonal\\demo011\\tasking\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\Components -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\ContractPhase -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\inc -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\appl\\Include -ID:\\Zonal\\demo011\\tasking\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\appl\\Source\\swc_test -ID:\\Zonal\\demo011\\tasking\\component -ID:\\Zonal\\demo011\\tasking\\component\\_Common -ID:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os\\TC39xQ -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Os\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug -ID:\\Zonal\\demo011\\tasking\\Debug\\appl -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\Debug\\component -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\src -g2 --make-target=component\\Com\\Implementation\\Com.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o component\\Com\\Implementation\\Com.src ..\\component\\Com\\Implementation\\Com.c"
	.compiler_name		"ctc"
	;source	'..\\component\\Com\\Implementation\\Com.c'

	
$TC162
	
	.sdecl	'.text.Com.Com_Init',code,cluster('Com_Init')
	.sect	'.text.Com.Com_Init'
	.align	2
	
	.global	Com_Init

; ..\component\Com\Implementation\Com.c	     1  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	     2   *  COPYRIGHT
; ..\component\Com\Implementation\Com.c	     3   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\Com\Implementation\Com.c	     4   *  \verbatim
; ..\component\Com\Implementation\Com.c	     5   *  Copyright (c) 2020 by Vector Informatik GmbH.                                                  All rights reserved.
; ..\component\Com\Implementation\Com.c	     6   *
; ..\component\Com\Implementation\Com.c	     7   *                This software is copyright protected and proprietary to Vector Informatik GmbH.
; ..\component\Com\Implementation\Com.c	     8   *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
; ..\component\Com\Implementation\Com.c	     9   *                All other rights remain with Vector Informatik GmbH.
; ..\component\Com\Implementation\Com.c	    10   *  \endverbatim
; ..\component\Com\Implementation\Com.c	    11   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\Com\Implementation\Com.c	    12   *  FILE DESCRIPTION
; ..\component\Com\Implementation\Com.c	    13   *  -----------------------------------------------------------------------------------------------------------------*/
; ..\component\Com\Implementation\Com.c	    14  /*!        \file  Com.c
; ..\component\Com\Implementation\Com.c	    15   *        \brief  MICROSAR Communication source file
; ..\component\Com\Implementation\Com.c	    16   *
; ..\component\Com\Implementation\Com.c	    17   *      \details  This is the implementation of the MICROSAR Communication module.
; ..\component\Com\Implementation\Com.c	    18   *                The basic software module is based on the AUTOSAR Communication specification.
; ..\component\Com\Implementation\Com.c	    19   *
; ..\component\Com\Implementation\Com.c	    20   *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	    21  
; ..\component\Com\Implementation\Com.c	    22  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	    23   *  REVISION HISTORY
; ..\component\Com\Implementation\Com.c	    24   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\Com\Implementation\Com.c	    25   *  Refer to the module's header file.
; ..\component\Com\Implementation\Com.c	    26   *
; ..\component\Com\Implementation\Com.c	    27   *  FILE VERSION
; ..\component\Com\Implementation\Com.c	    28   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\Com\Implementation\Com.c	    29   *  Refer to the VERSION CHECK below.
; ..\component\Com\Implementation\Com.c	    30   *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	    31  
; ..\component\Com\Implementation\Com.c	    32  /*! this define can be used to mock an API with a redefine. */
; ..\component\Com\Implementation\Com.c	    33  #define COM_SOURCE
; ..\component\Com\Implementation\Com.c	    34  /*! compatibility define for COM_SOURCE. */
; ..\component\Com\Implementation\Com.c	    35  #define V_IL_ASRCOMCFG5_COMPONENT_SOURCE
; ..\component\Com\Implementation\Com.c	    36  
; ..\component\Com\Implementation\Com.c	    37  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	    38     LOCAL MISRA / PCLINT JUSTIFICATION
; ..\component\Com\Implementation\Com.c	    39  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	    40  /* *INDENT-OFF* */
; ..\component\Com\Implementation\Com.c	    41  /* PRQA  S 0777 EOF */ /* MD_MSR_Rule5.1_0777 */
; ..\component\Com\Implementation\Com.c	    42  /* PRQA  S 2880 EOF */ /* MD_MSR_Unreachable */
; ..\component\Com\Implementation\Com.c	    43   /* *INDENT-ON* */
; ..\component\Com\Implementation\Com.c	    44  
; ..\component\Com\Implementation\Com.c	    45  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	    46    INCLUDES
; ..\component\Com\Implementation\Com.c	    47  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	    48  #include "Com.h"
; ..\component\Com\Implementation\Com.c	    49  #include "Com_Lcfg.h"
; ..\component\Com\Implementation\Com.c	    50  #if(COM_USE_INIT_POINTER == STD_ON)
; ..\component\Com\Implementation\Com.c	    51  # include "EcuM_Error.h"
; ..\component\Com\Implementation\Com.c	    52  #endif
; ..\component\Com\Implementation\Com.c	    53  #include "SchM_Com.h"
; ..\component\Com\Implementation\Com.c	    54  
; ..\component\Com\Implementation\Com.c	    55  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	    56    VERSION CHECK
; ..\component\Com\Implementation\Com.c	    57  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	    58  #if ((COM_SW_MAJOR_VERSION != 19u) || (COM_SW_MINOR_VERSION != 0u) || (COM_SW_PATCH_VERSION != 0u))
; ..\component\Com\Implementation\Com.c	    59  # error "Vendor specific version numbers of Com.c and Com.h are inconsistent"
; ..\component\Com\Implementation\Com.c	    60  #endif
; ..\component\Com\Implementation\Com.c	    61  
; ..\component\Com\Implementation\Com.c	    62  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	    63    LOCAL CONSTANT MACROS
; ..\component\Com\Implementation\Com.c	    64  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	    65  
; ..\component\Com\Implementation\Com.c	    66  /*!
; ..\component\Com\Implementation\Com.c	    67    \defgroup  Com_GetConstValueXIntXXOffsets Com XInt Value Offsets
; ..\component\Com\Implementation\Com.c	    68    \brief  These defines are used to calculate the filter specific offset to Com_GetConstValueXIntXX.
; ..\component\Com\Implementation\Com.c	    69    \details  -
; ..\component\Com\Implementation\Com.c	    70      \pre      -
; ..\component\Com\Implementation\Com.c	    71      \{
; ..\component\Com\Implementation\Com.c	    72  */
; ..\component\Com\Implementation\Com.c	    73  #define COM_SIGNAL_F_PARAM_MASK           0u  /**< the offset to get the mask value */
; ..\component\Com\Implementation\Com.c	    74  #define COM_SIGNAL_F_PARAM_X              1u  /**< the offset to get the x value */
; ..\component\Com\Implementation\Com.c	    75  #define COM_SIGNAL_F_PARAM_MIN            0u  /**< the offset to get the min value */
; ..\component\Com\Implementation\Com.c	    76  #define COM_SIGNAL_F_PARAM_MAX            1u  /**< the offset to get the max value */
; ..\component\Com\Implementation\Com.c	    77  /*!
; ..\component\Com\Implementation\Com.c	    78    \}
; ..\component\Com\Implementation\Com.c	    79  */
; ..\component\Com\Implementation\Com.c	    80  
; ..\component\Com\Implementation\Com.c	    81  
; ..\component\Com\Implementation\Com.c	    82  
; ..\component\Com\Implementation\Com.c	    83  
; ..\component\Com\Implementation\Com.c	    84  
; ..\component\Com\Implementation\Com.c	    85  #if (COM_GWTXPDUDESCRIPTIONINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	    86  typedef enum
; ..\component\Com\Implementation\Com.c	    87  {
; ..\component\Com\Implementation\Com.c	    88    COM_TRANSMIT_TRIGGER_NOTFULFILLED,
; ..\component\Com\Implementation\Com.c	    89    COM_TRANSMIT_TRIGGER,
; ..\component\Com\Implementation\Com.c	    90    COM_TRANSMIT_TRIGGERWITHOUTREP
; ..\component\Com\Implementation\Com.c	    91  } Com_GwDescriptionTriggerType;
; ..\component\Com\Implementation\Com.c	    92  #endif
; ..\component\Com\Implementation\Com.c	    93  
; ..\component\Com\Implementation\Com.c	    94  #if (COM_GWTXPDUDESCRIPTIONINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	    95  /*!
; ..\component\Com\Implementation\Com.c	    96    \defgroup  Com_IsGwDestinationDescriptionTypeX Bit Flags
; ..\component\Com\Implementation\Com.c	    97    \brief  These bit masks are used to retrieve the desired property out of GwDestinationDescriptionType
; ..\component\Com\Implementation\Com.c	    98    \details  -
; ..\component\Com\Implementation\Com.c	    99      \pre      -
; ..\component\Com\Implementation\Com.c	   100      \{
; ..\component\Com\Implementation\Com.c	   101  */
; ..\component\Com\Implementation\Com.c	   102  # define COM_IMMEDIATE_MASK_TYPEOFGWDESCRIPTIONACCESSINFO      8u/**< bit mask to retrieve the immediate flag */
; ..\component\Com\Implementation\Com.c	   103  # define COM_TRIGGERED_MASK_TYPEOFGWDESCRIPTIONACCESSINFO      4u/**< bit mask to retrieve the triggered flag */
; ..\component\Com\Implementation\Com.c	   104  # define COM_ONCHANGE_MASK_TYPEOFGWDESCRIPTIONACCESSINFO       2u/**< bit mask to retrieve the onchange flag */
; ..\component\Com\Implementation\Com.c	   105  # define COM_WITHOUTREP_MASK_TYPEOFGWDESCRIPTIONACCESSINFO     1u/**< bit mask to retrieve the without repetition flag */
; ..\component\Com\Implementation\Com.c	   106  /*!
; ..\component\Com\Implementation\Com.c	   107    \}
; ..\component\Com\Implementation\Com.c	   108  */
; ..\component\Com\Implementation\Com.c	   109  #endif
; ..\component\Com\Implementation\Com.c	   110  
; ..\component\Com\Implementation\Com.c	   111  
; ..\component\Com\Implementation\Com.c	   112  
; ..\component\Com\Implementation\Com.c	   113  
; ..\component\Com\Implementation\Com.c	   114  
; ..\component\Com\Implementation\Com.c	   115  
; ..\component\Com\Implementation\Com.c	   116  #if (COM_TXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   117  /*!
; ..\component\Com\Implementation\Com.c	   118    \defgroup  Com_SigGrpEventFlagBits  Com Tx Signal Group Event Flags
; ..\component\Com\Implementation\Com.c	   119    \brief  These defines are used to get and set flags in Com_SigGrpEventFlag.
; ..\component\Com\Implementation\Com.c	   120    \details  -
; ..\component\Com\Implementation\Com.c	   121    \pre      -
; ..\component\Com\Implementation\Com.c	   122      \{
; ..\component\Com\Implementation\Com.c	   123  */
; ..\component\Com\Implementation\Com.c	   124  # define COM_TX_SIGIF_GROUPEVENTFLAG        1u  /**< indicates a trigger (trigger flag)*/
; ..\component\Com\Implementation\Com.c	   125  # define COM_TX_SIGIF_GROUPREPETITION       2u  /**< indicates repetitions (repetition flag)*/
; ..\component\Com\Implementation\Com.c	   126  # define COM_TX_SIGIF_GROUPEVENTREPETITION  3u  /**< indicates a trigger with repetition */
; ..\component\Com\Implementation\Com.c	   127  # define COM_TX_SIGIF_TRIGGERED_BIT          1u
; ..\component\Com\Implementation\Com.c	   128  # define COM_TX_SIGIF_WITHOUT_REPETITION_BIT 2u
; ..\component\Com\Implementation\Com.c	   129  # define COM_TX_SIGIF_ON_CHANGE_BIT          4u
; ..\component\Com\Implementation\Com.c	   130  /*!
; ..\component\Com\Implementation\Com.c	   131    \}
; ..\component\Com\Implementation\Com.c	   132  */
; ..\component\Com\Implementation\Com.c	   133  #endif
; ..\component\Com\Implementation\Com.c	   134  
; ..\component\Com\Implementation\Com.c	   135  
; ..\component\Com\Implementation\Com.c	   136  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   137    LOCAL FUNCTION MACROS
; ..\component\Com\Implementation\Com.c	   138  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   139  #if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   140  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   141    Com_LMgt_RxIpduDmActive
; ..\component\Com\Implementation\Com.c	   142  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   143  /*! \brief        This function evaluates the Deadline Monitoring state of the Rx I-Pdu.
; ..\component\Com\Implementation\Com.c	   144      \details      -
; ..\component\Com\Implementation\Com.c	   145      \pre          -
; ..\component\Com\Implementation\Com.c	   146      \param[in]    ComRxToutObjtId  ID of Rx Timeout object.
; ..\component\Com\Implementation\Com.c	   147      \return       boolean
; ..\component\Com\Implementation\Com.c	   148                    true:   The Deadline Monitoring is enabled for at least one mapped I-Pdu Group
; ..\component\Com\Implementation\Com.c	   149                    false:  The Deadline Monitoring is disabled for all mapped I-Pdu Groups
; ..\component\Com\Implementation\Com.c	   150  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   151  # define Com_LMgt_RxIpduDmActive(ComRxToutObjtId)       ((Com_GetRxPduDmState(ComRxToutObjtId) & COM_ACTIVE_RXPDUDMSTATE) == COM_ACTIVE_RXPDUDMSTATE)
; ..\component\Com\Implementation\Com.c	   152  
; ..\component\Com\Implementation\Com.c	   153  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   154    Com_LMgt_ActivateRxIpduDm
; ..\component\Com\Implementation\Com.c	   155  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   156  /*! \brief        This function enables the Deadline Monitoring for the Rx I-Pdu.
; ..\component\Com\Implementation\Com.c	   157      \details      -
; ..\component\Com\Implementation\Com.c	   158      \pre          -
; ..\component\Com\Implementation\Com.c	   159      \param[in]    ComRxToutObjtId  ID of Rx Timeout object.
; ..\component\Com\Implementation\Com.c	   160  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   161  # define Com_LMgt_ActivateRxIpduDm(ComRxToutObjtId)        Com_SetRxPduDmState(ComRxToutObjtId, COM_ACTIVE_RXPDUDMSTATE)
; ..\component\Com\Implementation\Com.c	   162  
; ..\component\Com\Implementation\Com.c	   163  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   164    Com_LMgt_DeactivateRxIpduDm
; ..\component\Com\Implementation\Com.c	   165  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   166  /*! \brief        This function disables the Deadline Monitoring for the Rx I-Pdu.
; ..\component\Com\Implementation\Com.c	   167                    To avoid data inconsistency ensure the Deadline Monitoring is
; ..\component\Com\Implementation\Com.c	   168                    enabled for the Rx I-Pdu by calling Com_LMgt_RxIpduDmActive().
; ..\component\Com\Implementation\Com.c	   169      \details      -
; ..\component\Com\Implementation\Com.c	   170      \pre          -
; ..\component\Com\Implementation\Com.c	   171      \param[in]    ComRxToutObjtId  ID of Rx Timeout object.
; ..\component\Com\Implementation\Com.c	   172  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   173  # define Com_LMgt_DeactivateRxIpduDm(ComRxToutObjtId)  Com_SetRxPduDmState((ComRxToutObjtId), COM_INACTIVE_RXPDUDMSTATE)
; ..\component\Com\Implementation\Com.c	   174  
; ..\component\Com\Implementation\Com.c	   175  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   176    Com_LMgt_HasTimeoutOccurred
; ..\component\Com\Implementation\Com.c	   177  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   178  /*! \brief        This function evaluates if a Timeout has occurred.
; ..\component\Com\Implementation\Com.c	   179      \details      -
; ..\component\Com\Implementation\Com.c	   180      \pre          -
; ..\component\Com\Implementation\Com.c	   181      \param[in]    ComRxToutObjtId  ID of Rx Timeout object.
; ..\component\Com\Implementation\Com.c	   182      \return       boolean
; ..\component\Com\Implementation\Com.c	   183                    true:   A timeout has occurred.
; ..\component\Com\Implementation\Com.c	   184                    false:  No timeout has occurred.
; ..\component\Com\Implementation\Com.c	   185  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   186  # define Com_LMgt_HasTimeoutOccurred(ComRxToutObjtId)  (boolean) ((COM_OCCURRED_RXPDUDMSTATE == Com_GetRxPduDmState(ComRxToutObjtId)) ? TRUE : FALSE)
; ..\component\Com\Implementation\Com.c	   187  
; ..\component\Com\Implementation\Com.c	   188  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   189    Com_LMgt_TimeoutOccurred
; ..\component\Com\Implementation\Com.c	   190  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   191  /*! \brief        This function sets the Rx Deadline Monitoring State to Occurred.
; ..\component\Com\Implementation\Com.c	   192      \details      -
; ..\component\Com\Implementation\Com.c	   193      \pre          -
; ..\component\Com\Implementation\Com.c	   194      \param[in]    ComRxToutObjtId  ID of Rx Timeout object.
; ..\component\Com\Implementation\Com.c	   195  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   196  # define Com_LMgt_TimeoutOccurred(ComRxToutObjtId)  Com_SetRxPduDmState((ComRxToutObjtId), COM_OCCURRED_RXPDUDMSTATE)
; ..\component\Com\Implementation\Com.c	   197  
; ..\component\Com\Implementation\Com.c	   198  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   199    Com_LMgt_RemoveOccurredFlag
; ..\component\Com\Implementation\Com.c	   200  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   201  /*! \brief        This function removes the OCCURRED flag form the Rx Deadline Monitoring State.
; ..\component\Com\Implementation\Com.c	   202      \details      -
; ..\component\Com\Implementation\Com.c	   203      \pre          -
; ..\component\Com\Implementation\Com.c	   204      \param[in]    ComRxToutObjtId  ID of Rx Timeout object.
; ..\component\Com\Implementation\Com.c	   205  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   206  # define Com_LMgt_RemoveOccurredFlag(ComRxToutObjtId)  Com_SetRxPduDmState((ComRxToutObjtId), (Com_GetRxPduDmState(ComRxToutObjtId) & COM_CLEAR_OCCURRED_FLAG_RXPDUDMSTATE))
; ..\component\Com\Implementation\Com.c	   207  
; ..\component\Com\Implementation\Com.c	   208  #endif
; ..\component\Com\Implementation\Com.c	   209  
; ..\component\Com\Implementation\Com.c	   210  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   211    Com_Signal_BitOffsetFromBitPos
; ..\component\Com\Implementation\Com.c	   212  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   213  /*! \brief        This function converts an absolute signal position to the corresponding bit offset in byte.
; ..\component\Com\Implementation\Com.c	   214      \details      -
; ..\component\Com\Implementation\Com.c	   215      \pre          -
; ..\component\Com\Implementation\Com.c	   216      \param[in]    pos  absolute bit position
; ..\component\Com\Implementation\Com.c	   217      \return       uint8
; ..\component\Com\Implementation\Com.c	   218                      bit index in the byte, where the signal starts (0..7)
; ..\component\Com\Implementation\Com.c	   219  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   220  #define Com_Signal_BitOffsetFromBitPos(pos)  (COM_CAST2UINT8((pos) & 7u))
; ..\component\Com\Implementation\Com.c	   221  
; ..\component\Com\Implementation\Com.c	   222  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   223    Com_NBITNBYTE_GetEndiannesIndex
; ..\component\Com\Implementation\Com.c	   224  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   225  /*! \brief        This method return negative Index if bus signal is big endian, otherwise index is returned.
; ..\component\Com\Implementation\Com.c	   226      \details      -
; ..\component\Com\Implementation\Com.c	   227      \pre          -
; ..\component\Com\Implementation\Com.c	   228      \param[in]    bufferIndex         TxBuffer index
; ..\component\Com\Implementation\Com.c	   229      \param[in]    isBusBigEndian      flag, if bus is big endian.
; ..\component\Com\Implementation\Com.c	   230      \return       bufferIndex         if bus is little endian
; ..\component\Com\Implementation\Com.c	   231                    (- bufferIndex)     if bus is big endian.
; ..\component\Com\Implementation\Com.c	   232   ****************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   233  #define Com_NBITNBYTE_GetEndiannesIndex(bufferIndex, isBusBigEndian) (((isBusBigEndian) == TRUE) ? (-(bufferIndex)) : (bufferIndex))
; ..\component\Com\Implementation\Com.c	   234  
; ..\component\Com\Implementation\Com.c	   235  
; ..\component\Com\Implementation\Com.c	   236  
; ..\component\Com\Implementation\Com.c	   237  
; ..\component\Com\Implementation\Com.c	   238  
; ..\component\Com\Implementation\Com.c	   239  
; ..\component\Com\Implementation\Com.c	   240  #if (COM_GWTXPDUDESCRIPTIONINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   241  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   242    Com_IsGwDestinationDescriptionTypeImmediate
; ..\component\Com\Implementation\Com.c	   243  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   244  /*! \brief        This function checks if the type of the gateway description is immediate.
; ..\component\Com\Implementation\Com.c	   245      \details      -
; ..\component\Com\Implementation\Com.c	   246      \pre          -
; ..\component\Com\Implementation\Com.c	   247      \param[in]    DescriptionType - Type of description
; ..\component\Com\Implementation\Com.c	   248      \return       boolean
; ..\component\Com\Implementation\Com.c	   249                      TRUE if type of description is immediate.
; ..\component\Com\Implementation\Com.c	   250                      FALSE otherwise
; ..\component\Com\Implementation\Com.c	   251  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   252  # define Com_IsGwDestinationDescriptionTypeImmediate(DescriptionType)       (boolean) ((((DescriptionType) & COM_IMMEDIATE_MASK_TYPEOFGWDESCRIPTIONACCESSINFO) == COM_IMMEDIATE_MASK_TYPEOFGWDESCRIPTIONACCESSINFO) ? TRUE : FALSE)
; ..\component\Com\Implementation\Com.c	   253  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   254    Com_IsGwDestinationDescriptionTypeTriggered
; ..\component\Com\Implementation\Com.c	   255  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   256  /*! \brief        This function checks if the description has a TRIGGERED* transferProperty
; ..\component\Com\Implementation\Com.c	   257      \details      -
; ..\component\Com\Implementation\Com.c	   258      \pre          -
; ..\component\Com\Implementation\Com.c	   259      \param[in]    DescriptionType - Type of description
; ..\component\Com\Implementation\Com.c	   260      \return       boolean
; ..\component\Com\Implementation\Com.c	   261                      TRUE if a TRIGGERED* transferProperty is configured
; ..\component\Com\Implementation\Com.c	   262                      FALSE otherwise
; ..\component\Com\Implementation\Com.c	   263  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   264  # define Com_IsGwDestinationDescriptionTypeTriggered(DescriptionType)       (((DescriptionType) & COM_TRIGGERED_MASK_TYPEOFGWDESCRIPTIONACCESSINFO) == COM_TRIGGERED_MASK_TYPEOFGWDESCRIPTIONACCESSINFO)
; ..\component\Com\Implementation\Com.c	   265  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   266    Com_IsGwDestinationDescriptionTypeOnChange
; ..\component\Com\Implementation\Com.c	   267  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   268  /*! \brief        This function checks if the description has an ONCHANGE* transferProperty
; ..\component\Com\Implementation\Com.c	   269      \details      -
; ..\component\Com\Implementation\Com.c	   270      \pre          -
; ..\component\Com\Implementation\Com.c	   271      \param[in]    DescriptionType - Type of description
; ..\component\Com\Implementation\Com.c	   272      \return       boolean
; ..\component\Com\Implementation\Com.c	   273                      TRUE if an ONCHANGE* transferProperty is configured
; ..\component\Com\Implementation\Com.c	   274                      FALSE otherwise
; ..\component\Com\Implementation\Com.c	   275  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   276  # define Com_IsGwDestinationDescriptionTypeOnChange(DescriptionType)        (((DescriptionType) & COM_ONCHANGE_MASK_TYPEOFGWDESCRIPTIONACCESSINFO) == COM_ONCHANGE_MASK_TYPEOFGWDESCRIPTIONACCESSINFO)
; ..\component\Com\Implementation\Com.c	   277  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   278    Com_IsGwDestinationDescriptionTypeWithoutRepetion
; ..\component\Com\Implementation\Com.c	   279  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   280  /*! \brief        This function checks if the description has an WITHOUTREPETITION* transferProperty
; ..\component\Com\Implementation\Com.c	   281      \details      -
; ..\component\Com\Implementation\Com.c	   282      \pre          -
; ..\component\Com\Implementation\Com.c	   283      \param[in]    DescriptionType - Type of description
; ..\component\Com\Implementation\Com.c	   284      \return       boolean
; ..\component\Com\Implementation\Com.c	   285                      TRUE if a WITHOUTREPETITION* transferProperty is configured
; ..\component\Com\Implementation\Com.c	   286                      FALSE otherwise
; ..\component\Com\Implementation\Com.c	   287  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   288  # define Com_IsGwDestinationDescriptionTypeWithoutRepetion(DescriptionType)  (((DescriptionType) & COM_WITHOUTREP_MASK_TYPEOFGWDESCRIPTIONACCESSINFO) == COM_WITHOUTREP_MASK_TYPEOFGWDESCRIPTIONACCESSINFO)
; ..\component\Com\Implementation\Com.c	   289  #endif
; ..\component\Com\Implementation\Com.c	   290  
; ..\component\Com\Implementation\Com.c	   291  #if (COM_GWTIMEOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   292  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   293    Com_GwTout_TimeoutHasOccurred
; ..\component\Com\Implementation\Com.c	   294  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   295  /*! \brief        This function checks if a gateway timeout has occurred
; ..\component\Com\Implementation\Com.c	   296      \details      -
; ..\component\Com\Implementation\Com.c	   297      \pre          -
; ..\component\Com\Implementation\Com.c	   298      \param[in]    gwToutId - Index of GwTimeoutInfo
; ..\component\Com\Implementation\Com.c	   299      \return       boolean
; ..\component\Com\Implementation\Com.c	   300                      true if timeout counter is zero
; ..\component\Com\Implementation\Com.c	   301                      false otherwise
; ..\component\Com\Implementation\Com.c	   302  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   303  # define Com_GwTout_TimeoutHasOccurred(gwToutId)  (Com_GetGwRoutingTimeoutCounter(gwToutId) == 0u)
; ..\component\Com\Implementation\Com.c	   304  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   305    Com_GwTout_TimeoutIsActive
; ..\component\Com\Implementation\Com.c	   306  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   307  /*! \brief        This function checks if a gateway timer is still active
; ..\component\Com\Implementation\Com.c	   308      \details      -
; ..\component\Com\Implementation\Com.c	   309      \pre          -
; ..\component\Com\Implementation\Com.c	   310      \param[in]    gwToutId - Index of GwTimeoutInfo
; ..\component\Com\Implementation\Com.c	   311      \return       boolean
; ..\component\Com\Implementation\Com.c	   312                      true if timeout counter is greater than zero
; ..\component\Com\Implementation\Com.c	   313                      false otherwise
; ..\component\Com\Implementation\Com.c	   314  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   315  # define Com_GwTout_TimeoutIsActive(gwToutId)     (Com_GetGwRoutingTimeoutCounter(gwToutId) > 0u)
; ..\component\Com\Implementation\Com.c	   316  #endif
; ..\component\Com\Implementation\Com.c	   317  
; ..\component\Com\Implementation\Com.c	   318  
; ..\component\Com\Implementation\Com.c	   319  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   320    Com_TxModeHdlr_IsPeriodicTxMode
; ..\component\Com\Implementation\Com.c	   321  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   322  /*! \brief    This function checks if the current tx mode of the passed Tx ComIPdu is periodic
; ..\component\Com\Implementation\Com.c	   323      \details  -
; ..\component\Com\Implementation\Com.c	   324      \pre      -
; ..\component\Com\Implementation\Com.c	   325      \return   boolean
; ..\component\Com\Implementation\Com.c	   326                  TRUE if current tx mode is periodic
; ..\component\Com\Implementation\Com.c	   327                  FALSE otherwise
; ..\component\Com\Implementation\Com.c	   328  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   329  #if ((COM_PERIODICOFTXMODETRUE == STD_ON) && (COM_PERIODICOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	   330  # define Com_TxModeHdlr_IsPeriodicTxMode(TxPduId)           ((Com_IsCurrentTxMode(TxPduId)) ? (Com_IsPeriodicOfTxModeTrue(Com_GetTxModeTrueIdxOfTxModeInfo(TxPduId))) : (Com_IsPeriodicOfTxModeFalse(Com_GetTxModeFalseIdxOfTxModeInfo(TxPduId))))
; ..\component\Com\Implementation\Com.c	   331  #elif (COM_PERIODICOFTXMODETRUE == STD_ON)
; ..\component\Com\Implementation\Com.c	   332  # define Com_TxModeHdlr_IsPeriodicTxMode(TxPduId)           ((Com_IsCurrentTxMode(TxPduId)) ? (Com_IsPeriodicOfTxModeTrue(Com_GetTxModeTrueIdxOfTxModeInfo(TxPduId))) : FALSE)
; ..\component\Com\Implementation\Com.c	   333  #elif (COM_PERIODICOFTXMODEFALSE == STD_ON)
; ..\component\Com\Implementation\Com.c	   334  # define Com_TxModeHdlr_IsPeriodicTxMode(TxPduId)           ((Com_IsCurrentTxMode(TxPduId)) ? FALSE : (Com_IsPeriodicOfTxModeFalse(Com_GetTxModeFalseIdxOfTxModeInfo(TxPduId))))
; ..\component\Com\Implementation\Com.c	   335  #endif
; ..\component\Com\Implementation\Com.c	   336  
; ..\component\Com\Implementation\Com.c	   337  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   338    Com_TxModeHdlr_GetCurrentTimePeriod
; ..\component\Com\Implementation\Com.c	   339  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   340  /*! \brief    This function returns the configured time period of the current tx mode.
; ..\component\Com\Implementation\Com.c	   341      \details  -
; ..\component\Com\Implementation\Com.c	   342      \pre      -
; ..\component\Com\Implementation\Com.c	   343      \return   uint8
; ..\component\Com\Implementation\Com.c	   344                  configured time period of the current tx mode.
; ..\component\Com\Implementation\Com.c	   345  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   346  #if ((COM_PERIODICOFTXMODETRUE == STD_ON) && (COM_PERIODICOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	   347  # define Com_TxModeHdlr_GetCurrentTimePeriod(TxPduId)           ((Com_IsCurrentTxMode(TxPduId)) ? (Com_GetTimePeriodOfTxModeTrue(Com_GetTxModeTrueIdxOfTxModeInfo(TxPduId))) : (Com_GetTimePeriodOfTxModeFalse(Com_GetTxModeFalseIdxOfTxModeInfo(TxPduId))))
; ..\component\Com\Implementation\Com.c	   348  #elif (COM_PERIODICOFTXMODETRUE == STD_ON)
; ..\component\Com\Implementation\Com.c	   349  # define Com_TxModeHdlr_GetCurrentTimePeriod(TxPduId)           ((Com_IsCurrentTxMode(TxPduId)) ? (Com_GetTimePeriodOfTxModeTrue(Com_GetTxModeTrueIdxOfTxModeInfo(TxPduId))) : 0u)
; ..\component\Com\Implementation\Com.c	   350  #elif (COM_PERIODICOFTXMODEFALSE == STD_ON)
; ..\component\Com\Implementation\Com.c	   351  # define Com_TxModeHdlr_GetCurrentTimePeriod(TxPduId)           ((Com_IsCurrentTxMode(TxPduId)) ? 0u : (Com_GetTimePeriodOfTxModeFalse(Com_GetTxModeFalseIdxOfTxModeInfo(TxPduId))))
; ..\component\Com\Implementation\Com.c	   352  #endif
; ..\component\Com\Implementation\Com.c	   353  
; ..\component\Com\Implementation\Com.c	   354  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   355    Com_TxModeHdlr_GetCurrentTimeOffset
; ..\component\Com\Implementation\Com.c	   356  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   357  /*! \brief    This function returns the configured time offset (time between the start of the I-PDU by
; ..\component\Com\Implementation\Com.c	   358   *            Com_IpduGroupControl and the first transmission request) of the current tx mode.
; ..\component\Com\Implementation\Com.c	   359      \details  -
; ..\component\Com\Implementation\Com.c	   360      \pre      -
; ..\component\Com\Implementation\Com.c	   361      \return   uint8
; ..\component\Com\Implementation\Com.c	   362                  configured time offset of the current tx mode.
; ..\component\Com\Implementation\Com.c	   363  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   364  #if ((COM_TIMEOFFSETOFTXMODETRUE == STD_ON) && (COM_TIMEOFFSETOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	   365  # define Com_TxModeHdlr_GetCurrentTimeOffset(TxPduId)           ((Com_IsCurrentTxMode(TxPduId)) ? (Com_GetTimeOffsetOfTxModeTrue(Com_GetTxModeTrueIdxOfTxModeInfo(TxPduId))) : (Com_GetTimeOffsetOfTxModeFalse(Com_GetTxModeFalseIdxOfTxModeInfo(TxPduId))))
; ..\component\Com\Implementation\Com.c	   366  #elif (COM_TIMEOFFSETOFTXMODETRUE == STD_ON)
; ..\component\Com\Implementation\Com.c	   367  # define Com_TxModeHdlr_GetCurrentTimeOffset(TxPduId)           ((Com_IsCurrentTxMode(TxPduId)) ? (Com_GetTimeOffsetOfTxModeTrue(Com_GetTxModeTrueIdxOfTxModeInfo(TxPduId))) : 1u)
; ..\component\Com\Implementation\Com.c	   368  #elif (COM_TIMEOFFSETOFTXMODEFALSE == STD_ON)
; ..\component\Com\Implementation\Com.c	   369  # define Com_TxModeHdlr_GetCurrentTimeOffset(TxPduId)           ((Com_IsCurrentTxMode(TxPduId)) ? 1u : (Com_GetTimeOffsetOfTxModeFalse(Com_GetTxModeFalseIdxOfTxModeInfo(TxPduId))))
; ..\component\Com\Implementation\Com.c	   370  #else
; ..\component\Com\Implementation\Com.c	   371  # define Com_TxModeHdlr_GetCurrentTimeOffset(TxPduId)           1u
; ..\component\Com\Implementation\Com.c	   372  #endif
; ..\component\Com\Implementation\Com.c	   373  
; ..\component\Com\Implementation\Com.c	   374  
; ..\component\Com\Implementation\Com.c	   375  #if (COM_ARRAYACCESSUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   376  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   377    Com_TxSigIf_IsTxSigGrpInfoTriggered
; ..\component\Com\Implementation\Com.c	   378  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   379  /*! \brief        This function checks if the transferProperty of the provided signal group can trigger a transmission (
; ..\component\Com\Implementation\Com.c	   380   *                not PENDING).
; ..\component\Com\Implementation\Com.c	   381   *  \details      -
; ..\component\Com\Implementation\Com.c	   382      \pre          -
; ..\component\Com\Implementation\Com.c	   383      \param[in]    ComTxSigGrpInfoObj - Id of SignalGroup
; ..\component\Com\Implementation\Com.c	   384      \return       boolean
; ..\component\Com\Implementation\Com.c	   385                      TRUE if no SignalGroup can trigger transmission
; ..\component\Com\Implementation\Com.c	   386                      FALSE otherwise
; ..\component\Com\Implementation\Com.c	   387  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   388  # define Com_TxSigIf_IsTxSigGrpInfoTriggered(ComTxSigGrpInfoObj)  ((Com_GetTransferPropertyOfTxSigGrpInfo(ComTxSigGrpInfoObj) & COM_TX_SIGIF_TRIGGERED_BIT) == COM_TX_SIGIF_TRIGGERED_BIT)
; ..\component\Com\Implementation\Com.c	   389  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   390    Com_TxSigIf_IsTxSigGrpInfoOnChange
; ..\component\Com\Implementation\Com.c	   391  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   392  /*! \brief        This function checks if provided signal group has any *ON_CHANGE transferProperty.
; ..\component\Com\Implementation\Com.c	   393   *  \details      -
; ..\component\Com\Implementation\Com.c	   394      \pre          -
; ..\component\Com\Implementation\Com.c	   395      \param[in]    ComTxSigGrpInfoObj - Id of SignalGroup
; ..\component\Com\Implementation\Com.c	   396      \return       boolean
; ..\component\Com\Implementation\Com.c	   397                      TRUE if no SignalGroup has ON-CHANGE transferProperty.
; ..\component\Com\Implementation\Com.c	   398                      FALSE otherwise
; ..\component\Com\Implementation\Com.c	   399  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   400  # define Com_TxSigIf_IsTxSigGrpInfoOnChange(ComTxSigGrpInfoObj)  ((Com_GetTransferPropertyOfTxSigGrpInfo(ComTxSigGrpInfoObj) & COM_TX_SIGIF_ON_CHANGE_BIT) == COM_TX_SIGIF_ON_CHANGE_BIT)
; ..\component\Com\Implementation\Com.c	   401  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   402    Com_TxSigIf_IsTxSigGrpInfoWithoutRepetition
; ..\component\Com\Implementation\Com.c	   403  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   404  /*! \brief        This function checks if provided signal group does not permit repetitive transmission (transferProperty is
; ..\component\Com\Implementation\Com.c	   405   *                is *WITHOUTREPETITION) .
; ..\component\Com\Implementation\Com.c	   406   *  \details      -
; ..\component\Com\Implementation\Com.c	   407      \pre          -
; ..\component\Com\Implementation\Com.c	   408      \param[in]    ComTxSigGrpInfoObj - Id of SignalGroup
; ..\component\Com\Implementation\Com.c	   409      \return       boolean
; ..\component\Com\Implementation\Com.c	   410                      TRUE if no SignalGroup does not permit repetitive transmission.
; ..\component\Com\Implementation\Com.c	   411                      FALSE otherwise
; ..\component\Com\Implementation\Com.c	   412  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   413  # define Com_TxSigIf_IsTxSigGrpInfoWithoutRepetition(ComTxSigGrpInfoObj)  ((Com_GetTransferPropertyOfTxSigGrpInfo(ComTxSigGrpInfoObj) & COM_TX_SIGIF_WITHOUT_REPETITION_BIT) == COM_TX_SIGIF_WITHOUT_REPETITION_BIT)
; ..\component\Com\Implementation\Com.c	   414  #endif
; ..\component\Com\Implementation\Com.c	   415  
; ..\component\Com\Implementation\Com.c	   416  
; ..\component\Com\Implementation\Com.c	   417  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   418    LOCAL DATA TYPES AND STRUCTURES
; ..\component\Com\Implementation\Com.c	   419  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   420  
; ..\component\Com\Implementation\Com.c	   421  
; ..\component\Com\Implementation\Com.c	   422  
; ..\component\Com\Implementation\Com.c	   423  #if (COM_EXISTS_SINT8_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   424  /*! \brief    Union used for sign extension
; ..\component\Com\Implementation\Com.c	   425      \details  -
; ..\component\Com\Implementation\Com.c	   426      \pre      -
; ..\component\Com\Implementation\Com.c	   427  */
; ..\component\Com\Implementation\Com.c	   428  typedef union uSignExt8Bit      /* PRQA S 3213 */ /* MD_Com_3213 */
; ..\component\Com\Implementation\Com.c	   429  {                               /* PRQA S 0750 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	   430    uint8 unsignedAccess;
; ..\component\Com\Implementation\Com.c	   431    sint8 signedAccess;
; ..\component\Com\Implementation\Com.c	   432  } uSignExt8BitType;
; ..\component\Com\Implementation\Com.c	   433  #endif
; ..\component\Com\Implementation\Com.c	   434  
; ..\component\Com\Implementation\Com.c	   435  #if (COM_EXISTS_SINT16_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   436  /*! \brief    Union used for sign extension
; ..\component\Com\Implementation\Com.c	   437      \details  -
; ..\component\Com\Implementation\Com.c	   438      \pre      -
; ..\component\Com\Implementation\Com.c	   439   */
; ..\component\Com\Implementation\Com.c	   440  typedef union uSignExt16Bit     /* PRQA S 3213 */ /* MD_Com_3213 */
; ..\component\Com\Implementation\Com.c	   441  {                               /* PRQA S 0750 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	   442    uint8 unsignedAccess[2];
; ..\component\Com\Implementation\Com.c	   443    sint16 signedAccess;
; ..\component\Com\Implementation\Com.c	   444  } uSignExt16BitType;
; ..\component\Com\Implementation\Com.c	   445  #endif
; ..\component\Com\Implementation\Com.c	   446  
; ..\component\Com\Implementation\Com.c	   447  #if (COM_EXISTS_SINT32_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   448  /*! \brief    Union used for sign extension
; ..\component\Com\Implementation\Com.c	   449      \details  -
; ..\component\Com\Implementation\Com.c	   450      \pre      -
; ..\component\Com\Implementation\Com.c	   451  */
; ..\component\Com\Implementation\Com.c	   452  typedef union uSignExt32Bit     /* PRQA S 3213 */ /* MD_Com_3213 */
; ..\component\Com\Implementation\Com.c	   453  {                               /* PRQA S 0750 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	   454    uint8 unsignedAccess[4];
; ..\component\Com\Implementation\Com.c	   455    sint32 signedAccess;
; ..\component\Com\Implementation\Com.c	   456  } uSignExt32BitType;
; ..\component\Com\Implementation\Com.c	   457  #endif
; ..\component\Com\Implementation\Com.c	   458  
; ..\component\Com\Implementation\Com.c	   459  #if (COM_EXISTS_SINT64_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   460  /*! \brief    Union used for sign extension
; ..\component\Com\Implementation\Com.c	   461      \details  -
; ..\component\Com\Implementation\Com.c	   462      \pre      -
; ..\component\Com\Implementation\Com.c	   463  */
; ..\component\Com\Implementation\Com.c	   464  typedef union uSignExt64Bit     /* PRQA S 3213 */ /* MD_Com_3213 */
; ..\component\Com\Implementation\Com.c	   465  {                               /* PRQA S 0750 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	   466    uint8 unsignedAccess[8];
; ..\component\Com\Implementation\Com.c	   467    sint64 signedAccess;
; ..\component\Com\Implementation\Com.c	   468  } uSignExt64BitType;
; ..\component\Com\Implementation\Com.c	   469  #endif
; ..\component\Com\Implementation\Com.c	   470  
; ..\component\Com\Implementation\Com.c	   471  
; ..\component\Com\Implementation\Com.c	   472  
; ..\component\Com\Implementation\Com.c	   473  
; ..\component\Com\Implementation\Com.c	   474  
; ..\component\Com\Implementation\Com.c	   475  
; ..\component\Com\Implementation\Com.c	   476  /*! \brief  type to indicate the process state.
; ..\component\Com\Implementation\Com.c	   477      \details  -
; ..\component\Com\Implementation\Com.c	   478      \pre      -
; ..\component\Com\Implementation\Com.c	   479  */
; ..\component\Com\Implementation\Com.c	   480  typedef enum
; ..\component\Com\Implementation\Com.c	   481  {
; ..\component\Com\Implementation\Com.c	   482    VALID,                        /* PRQA S 3205 */ /* MD_Com_3205 */
; ..\component\Com\Implementation\Com.c	   483    INVALID,                      /* PRQA S 3205 */ /* MD_Com_3205 */
; ..\component\Com\Implementation\Com.c	   484    FILTERED                      /* PRQA S 3205 */ /* MD_Com_3205 */
; ..\component\Com\Implementation\Com.c	   485  } Com_RxSigProcessState;        /* PRQA S 3205 */ /* MD_Com_3205 */
; ..\component\Com\Implementation\Com.c	   486  
; ..\component\Com\Implementation\Com.c	   487  /*!
; ..\component\Com\Implementation\Com.c	   488      \brief    Struct used for caching function ptr callbacks.
; ..\component\Com\Implementation\Com.c	   489      \details  -
; ..\component\Com\Implementation\Com.c	   490      \pre      -
; ..\component\Com\Implementation\Com.c	   491   */
; ..\component\Com\Implementation\Com.c	   492  typedef struct
; ..\component\Com\Implementation\Com.c	   493  {
; ..\component\Com\Implementation\Com.c	   494    P2VAR(uint32, AUTOMATIC, COM_APPL_VAR) ptrToCache;
; ..\component\Com\Implementation\Com.c	   495    uint32 cacheIndex;
; ..\component\Com\Implementation\Com.c	   496    uint32 cacheSize;
; ..\component\Com\Implementation\Com.c	   497  } FctPtrCacheStrct;             /* PRQA S 3205 */ /* MD_Com_3205 */
; ..\component\Com\Implementation\Com.c	   498  
; ..\component\Com\Implementation\Com.c	   499  
; ..\component\Com\Implementation\Com.c	   500  
; ..\component\Com\Implementation\Com.c	   501  
; ..\component\Com\Implementation\Com.c	   502  
; ..\component\Com\Implementation\Com.c	   503  
; ..\component\Com\Implementation\Com.c	   504  
; ..\component\Com\Implementation\Com.c	   505  
; ..\component\Com\Implementation\Com.c	   506  
; ..\component\Com\Implementation\Com.c	   507  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   508    LOCAL DATA PROTOTYPES
; ..\component\Com\Implementation\Com.c	   509  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   510  
; ..\component\Com\Implementation\Com.c	   511  
; ..\component\Com\Implementation\Com.c	   512  
; ..\component\Com\Implementation\Com.c	   513  
; ..\component\Com\Implementation\Com.c	   514  
; ..\component\Com\Implementation\Com.c	   515  
; ..\component\Com\Implementation\Com.c	   516  
; ..\component\Com\Implementation\Com.c	   517  
; ..\component\Com\Implementation\Com.c	   518  
; ..\component\Com\Implementation\Com.c	   519  
; ..\component\Com\Implementation\Com.c	   520  
; ..\component\Com\Implementation\Com.c	   521  
; ..\component\Com\Implementation\Com.c	   522  
; ..\component\Com\Implementation\Com.c	   523  
; ..\component\Com\Implementation\Com.c	   524  
; ..\component\Com\Implementation\Com.c	   525  
; ..\component\Com\Implementation\Com.c	   526  
; ..\component\Com\Implementation\Com.c	   527  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   528    GLOBAL DATA PROTOTYPES
; ..\component\Com\Implementation\Com.c	   529  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   530  
; ..\component\Com\Implementation\Com.c	   531  #if(COM_USE_INIT_POINTER == STD_ON)
; ..\component\Com\Implementation\Com.c	   532  # define COM_START_SEC_VAR_ZERO_INIT_UNSPECIFIED
; ..\component\Com\Implementation\Com.c	   533  # include "MemMap.h"    /* PRQA S 5087 */       /* MD_MSR_MemMap */
; ..\component\Com\Implementation\Com.c	   534  
; ..\component\Com\Implementation\Com.c	   535  P2CONST(Com_ConfigType, COM_VAR_ZERO_INIT, COM_PBCFG) Com_ConfigDataPtr = NULL_PTR;     /* PRQA S 1504 */ /* MD_MSR_Rule8.7 */
; ..\component\Com\Implementation\Com.c	   536  
; ..\component\Com\Implementation\Com.c	   537  # define COM_STOP_SEC_VAR_ZERO_INIT_UNSPECIFIED
; ..\component\Com\Implementation\Com.c	   538  # include "MemMap.h"    /* PRQA S 5087 */       /* MD_MSR_MemMap */
; ..\component\Com\Implementation\Com.c	   539  #endif
; ..\component\Com\Implementation\Com.c	   540  
; ..\component\Com\Implementation\Com.c	   541  
; ..\component\Com\Implementation\Com.c	   542  
; ..\component\Com\Implementation\Com.c	   543  
; ..\component\Com\Implementation\Com.c	   544  
; ..\component\Com\Implementation\Com.c	   545  
; ..\component\Com\Implementation\Com.c	   546  
; ..\component\Com\Implementation\Com.c	   547  
; ..\component\Com\Implementation\Com.c	   548  
; ..\component\Com\Implementation\Com.c	   549  
; ..\component\Com\Implementation\Com.c	   550  
; ..\component\Com\Implementation\Com.c	   551  
; ..\component\Com\Implementation\Com.c	   552  
; ..\component\Com\Implementation\Com.c	   553  
; ..\component\Com\Implementation\Com.c	   554  
; ..\component\Com\Implementation\Com.c	   555  
; ..\component\Com\Implementation\Com.c	   556  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   557    LOCAL FUNCTION PROTOTYPES
; ..\component\Com\Implementation\Com.c	   558  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   559  #define COM_START_SEC_CODE
; ..\component\Com\Implementation\Com.c	   560  #include "MemMap.h"    /* PRQA S 5087 */        /* MD_MSR_MemMap */
; ..\component\Com\Implementation\Com.c	   561  
; ..\component\Com\Implementation\Com.c	   562  
; ..\component\Com\Implementation\Com.c	   563  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   564  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   565    Com_ActivateRxComIPdu
; ..\component\Com\Implementation\Com.c	   566  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   567  /*! \brief        This function activates Rx ComIPdu's and optionally initializes the ComIPdu.
; ..\component\Com\Implementation\Com.c	   568      \details      -
; ..\component\Com\Implementation\Com.c	   569      \pre          -
; ..\component\Com\Implementation\Com.c	   570      \param[in]    rxPduIdx   - ID of Rx ComIPdu
; ..\component\Com\Implementation\Com.c	   571      \param[in]    initialize - True, if belonging buffer shall be initialized
; ..\component\Com\Implementation\Com.c	   572      \context      TASK
; ..\component\Com\Implementation\Com.c	   573  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   574  LOCAL_INLINE FUNC(void, COM_CODE) Com_ActivateRxComIPdu(Com_RxPduInfoIterType rxPduIdx, boolean initialize);
; ..\component\Com\Implementation\Com.c	   575  #endif
; ..\component\Com\Implementation\Com.c	   576  
; ..\component\Com\Implementation\Com.c	   577  #if (COM_ALWAYSACTIVERXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	   578  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   579    Com_ActivateAlwaysOnRxComIPdus
; ..\component\Com\Implementation\Com.c	   580  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   581  /*! \brief    This function activates Rx ComIPdu's without an assigned ComIPduGroup
; ..\component\Com\Implementation\Com.c	   582      \details  -
; ..\component\Com\Implementation\Com.c	   583      \pre      -
; ..\component\Com\Implementation\Com.c	   584      \context  TASK
; ..\component\Com\Implementation\Com.c	   585  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   586  LOCAL_INLINE FUNC(void, COM_CODE) Com_ActivateAlwaysOnRxComIPdus(void);
; ..\component\Com\Implementation\Com.c	   587  #endif
; ..\component\Com\Implementation\Com.c	   588  
; ..\component\Com\Implementation\Com.c	   589  #if (COM_ALWAYSACTIVETXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	   590  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   591    Com_ActivateAlwaysOnTxComIPdus
; ..\component\Com\Implementation\Com.c	   592  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   593  /*! \brief    This function activates Tx ComIPdu's without an assigned ComIPduGroup
; ..\component\Com\Implementation\Com.c	   594      \details  -
; ..\component\Com\Implementation\Com.c	   595      \pre      -
; ..\component\Com\Implementation\Com.c	   596      \context  TASK
; ..\component\Com\Implementation\Com.c	   597  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   598  LOCAL_INLINE FUNC(void, COM_CODE) Com_ActivateAlwaysOnTxComIPdus(void);
; ..\component\Com\Implementation\Com.c	   599  #endif
; ..\component\Com\Implementation\Com.c	   600  
; ..\component\Com\Implementation\Com.c	   601  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   602  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   603    Com_ActivateTxComIPdu
; ..\component\Com\Implementation\Com.c	   604  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   605  /*! \brief        This function activates Tx ComIPdu's and optionally initializes the ComIPdu.
; ..\component\Com\Implementation\Com.c	   606      \details      -
; ..\component\Com\Implementation\Com.c	   607      \pre          -
; ..\component\Com\Implementation\Com.c	   608      \param[in]    ComTxPduId   - ID of Tx ComIPdu
; ..\component\Com\Implementation\Com.c	   609      \param[in]    initialize - True, if belonging buffer shall be initialized
; ..\component\Com\Implementation\Com.c	   610      \context      TASK
; ..\component\Com\Implementation\Com.c	   611  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   612  LOCAL_INLINE FUNC(void, COM_CODE) Com_ActivateTxComIPdu(Com_TxPduInfoIterType ComTxPduId, boolean initialize);
; ..\component\Com\Implementation\Com.c	   613  #endif
; ..\component\Com\Implementation\Com.c	   614  
; ..\component\Com\Implementation\Com.c	   615  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   616  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   617    Com_LMgt_InitRxIpdu
; ..\component\Com\Implementation\Com.c	   618  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   619  /*! \brief        This function initializes a rx I-PDU.
; ..\component\Com\Implementation\Com.c	   620      \details      -
; ..\component\Com\Implementation\Com.c	   621      \pre          -
; ..\component\Com\Implementation\Com.c	   622      \param[in]    ComPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	   623      \context      TASK
; ..\component\Com\Implementation\Com.c	   624  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   625  LOCAL_INLINE FUNC(void, COM_CODE) Com_LMgt_InitRxIpdu(PduIdType ComPduId);
; ..\component\Com\Implementation\Com.c	   626  #endif
; ..\component\Com\Implementation\Com.c	   627  
; ..\component\Com\Implementation\Com.c	   628  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   629  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   630    Com_LMgt_InitTxIpdu
; ..\component\Com\Implementation\Com.c	   631  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   632  /*! \brief        This function initializes a tx I-PDU.
; ..\component\Com\Implementation\Com.c	   633      \details      -
; ..\component\Com\Implementation\Com.c	   634      \pre          -
; ..\component\Com\Implementation\Com.c	   635      \param[in]    ComPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	   636      \context      TASK
; ..\component\Com\Implementation\Com.c	   637  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   638  LOCAL_INLINE FUNC(void, COM_CODE) Com_LMgt_InitTxIpdu(Com_TxPduInfoIterType ComPduId);
; ..\component\Com\Implementation\Com.c	   639  #endif
; ..\component\Com\Implementation\Com.c	   640  
; ..\component\Com\Implementation\Com.c	   641  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   642  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   643    Com_LMgt_DeactivateRxPdu
; ..\component\Com\Implementation\Com.c	   644  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   645  /*! \brief        This function deactivates the given Rx I-PDU.
; ..\component\Com\Implementation\Com.c	   646      \details      -
; ..\component\Com\Implementation\Com.c	   647      \pre          -
; ..\component\Com\Implementation\Com.c	   648      \param[in]    ComPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	   649      \context      TASK
; ..\component\Com\Implementation\Com.c	   650  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   651  LOCAL_INLINE FUNC(void, COM_CODE) Com_LMgt_DeactivateRxPdu(PduIdType ComPduId);
; ..\component\Com\Implementation\Com.c	   652  #endif
; ..\component\Com\Implementation\Com.c	   653  
; ..\component\Com\Implementation\Com.c	   654  #if (COM_ACTIVATABLERXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	   655  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   656    Com_IpduGroupControl_UpdateRxComIPduState
; ..\component\Com\Implementation\Com.c	   657  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   658  /*! \brief        This function evaluates requested active state of the I-PDU
; ..\component\Com\Implementation\Com.c	   659      \details      -
; ..\component\Com\Implementation\Com.c	   660      \pre          -
; ..\component\Com\Implementation\Com.c	   661      \param[in]    ipduGroupVector I-PDU group vector containing the activation state (stopped = 0/ started = 1)
; ..\component\Com\Implementation\Com.c	   662                                for all I-PDU groups.
; ..\component\Com\Implementation\Com.c	   663      \param[in]    initialize      flag to request initialization of the I-PDUs which are newly started
; ..\component\Com\Implementation\Com.c	   664      \trace        SPEC-2736840, SPEC-2736847
; ..\component\Com\Implementation\Com.c	   665      \context      TASK
; ..\component\Com\Implementation\Com.c	   666  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   667  LOCAL_INLINE FUNC(void, COM_CODE) Com_IpduGroupControl_UpdateRxComIPduState(Com_IpduGroupVector ipduGroupVector, boolean initialize);
; ..\component\Com\Implementation\Com.c	   668  #endif
; ..\component\Com\Implementation\Com.c	   669  
; ..\component\Com\Implementation\Com.c	   670  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   671  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   672    Com_DeactivateRxComIPdu
; ..\component\Com\Implementation\Com.c	   673  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   674  /*! \brief        This function deactivates the given Rx ComIPdu
; ..\component\Com\Implementation\Com.c	   675      \details      -
; ..\component\Com\Implementation\Com.c	   676      \pre          -
; ..\component\Com\Implementation\Com.c	   677      \param[in]    ComRxPduId  ComIPdu  handle id
; ..\component\Com\Implementation\Com.c	   678      \context      TASK
; ..\component\Com\Implementation\Com.c	   679  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   680  LOCAL_INLINE FUNC(void, COM_CODE) Com_DeactivateRxComIPdu(Com_RxPduInfoIterType ComRxPduId);
; ..\component\Com\Implementation\Com.c	   681  #endif
; ..\component\Com\Implementation\Com.c	   682  
; ..\component\Com\Implementation\Com.c	   683  #if (COM_RXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   684  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   685    Com_SetRxPduGrpStateToStop
; ..\component\Com\Implementation\Com.c	   686  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   687  /*! \brief        This function sets the Rx-PDU-Group-State to FALSE, if the state of all referenced IPDU groups is
; ..\component\Com\Implementation\Com.c	   688   *                equal to COM_INACTIVE_IPDUGROUPSTATE
; ..\component\Com\Implementation\Com.c	   689      \details      -
; ..\component\Com\Implementation\Com.c	   690      \pre          -
; ..\component\Com\Implementation\Com.c	   691      \param[in]    subIpduGroupId  ComIPduGroup handle id
; ..\component\Com\Implementation\Com.c	   692      \context      TASK
; ..\component\Com\Implementation\Com.c	   693  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   694  LOCAL_INLINE FUNC(void, COM_CODE) Com_SetRxPduGrpStateToStop(Com_IpduGroupIdType subIpduGroupId);
; ..\component\Com\Implementation\Com.c	   695  #endif
; ..\component\Com\Implementation\Com.c	   696  
; ..\component\Com\Implementation\Com.c	   697  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   698  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   699    Com_DeactivateTxComIPdu
; ..\component\Com\Implementation\Com.c	   700  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   701  /*! \brief      This function deactivates the given Tx ComIPdu
; ..\component\Com\Implementation\Com.c	   702      \details    -
; ..\component\Com\Implementation\Com.c	   703      \param[in]  txPduId  ComIPdu  handle id
; ..\component\Com\Implementation\Com.c	   704      \pre        Com_TxIPduGroup_EnterExclusiveArea has been called before
; ..\component\Com\Implementation\Com.c	   705      \context    TASK
; ..\component\Com\Implementation\Com.c	   706  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   707  LOCAL_INLINE FUNC(void, COM_CODE) Com_DeactivateTxComIPdu(Com_TxPduInfoIterType txPduId);
; ..\component\Com\Implementation\Com.c	   708  
; ..\component\Com\Implementation\Com.c	   709  #endif
; ..\component\Com\Implementation\Com.c	   710  
; ..\component\Com\Implementation\Com.c	   711  #if (COM_TXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   712  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   713    Com_SetTxPduGrpStateToStop
; ..\component\Com\Implementation\Com.c	   714  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   715  /*! \brief        This function sets the Tx-PDU-Group-State to FALSE, if the state of all referenced IPDU groups is
; ..\component\Com\Implementation\Com.c	   716   *                equal to COM_INACTIVE_IPDUGROUPSTATE
; ..\component\Com\Implementation\Com.c	   717      \details      -
; ..\component\Com\Implementation\Com.c	   718      \pre          -
; ..\component\Com\Implementation\Com.c	   719      \param[in]    subIpduGroupId  ComIPduGroup handle id
; ..\component\Com\Implementation\Com.c	   720      \context      TASK
; ..\component\Com\Implementation\Com.c	   721  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   722  LOCAL_INLINE FUNC(void, COM_CODE) Com_SetTxPduGrpStateToStop(Com_IpduGroupIdType subIpduGroupId);
; ..\component\Com\Implementation\Com.c	   723  #endif
; ..\component\Com\Implementation\Com.c	   724  
; ..\component\Com\Implementation\Com.c	   725  #if ((COM_PDUGRPVECTOR == STD_ON) && (COM_TXPDUINFO == STD_ON) && (COM_ACTIVATABLETXCOMIPDUS == STD_ON))
; ..\component\Com\Implementation\Com.c	   726  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   727   Com_IpduGroupControl_SetRequestedActiveState
; ..\component\Com\Implementation\Com.c	   728  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   729  /*! \brief        This function sets the requested active state if needed.
; ..\component\Com\Implementation\Com.c	   730      \details      -
; ..\component\Com\Implementation\Com.c	   731      \pre          -
; ..\component\Com\Implementation\Com.c	   732      \param[in]    ComTxPduId              ID of the I-PDU
; ..\component\Com\Implementation\Com.c	   733      \param[in]    initialize              flag to request initialization of the I-PDUs which are newly started
; ..\component\Com\Implementation\Com.c	   734      \param[in]    bRequestedActiveState   Active state of the I-PDU
; ..\component\Com\Implementation\Com.c	   735      \trace        SPEC-2736840
; ..\component\Com\Implementation\Com.c	   736      \context      TASK
; ..\component\Com\Implementation\Com.c	   737  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   738  LOCAL_INLINE FUNC(void, COM_CODE) Com_IpduGroupControl_SetRequestedActiveState(Com_TxPduInfoIterType ComTxPduId, boolean initialize, boolean bRequestedActiveState);
; ..\component\Com\Implementation\Com.c	   739  
; ..\component\Com\Implementation\Com.c	   740  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   741    Com_IpduGroupControl_EvaluateActiveState
; ..\component\Com\Implementation\Com.c	   742  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   743  /*! \brief        This function evaluates requested active state of the I-PDU
; ..\component\Com\Implementation\Com.c	   744      \details      -
; ..\component\Com\Implementation\Com.c	   745      \pre          -
; ..\component\Com\Implementation\Com.c	   746      \param[in]    ComTxPduId          ID of the I-PDU
; ..\component\Com\Implementation\Com.c	   747      \param[in]    ipduGroupVector     I-PDU group vector containing the activation state (stopped = 0/ started = 1)
; ..\component\Com\Implementation\Com.c	   748                                        for all I-PDU groups.
; ..\component\Com\Implementation\Com.c	   749      \return       bRequestedActiveState   Active state of the I-PDU. An I-PDU is active if and only if at least one I-PDU group is active it belongs to.
; ..\component\Com\Implementation\Com.c	   750      \context      TASK
; ..\component\Com\Implementation\Com.c	   751  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   752  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_IpduGroupControl_EvaluateActiveState(Com_IpduGroupVector ipduGroupVector, Com_TxPduInfoIterType ComTxPduId);
; ..\component\Com\Implementation\Com.c	   753  
; ..\component\Com\Implementation\Com.c	   754  #endif
; ..\component\Com\Implementation\Com.c	   755  
; ..\component\Com\Implementation\Com.c	   756  #if ((COM_RXTOUTINFO == STD_ON) && (COM_PDUGRPVECTOR == STD_ON) && (COM_ACTIVATABLERXCOMIPDUS == STD_ON))
; ..\component\Com\Implementation\Com.c	   757  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   758    Com_ReceptionDMControl_EvaluateActiveState
; ..\component\Com\Implementation\Com.c	   759  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   760  /*! \brief        This function evaluates requested active state of the I-PDU
; ..\component\Com\Implementation\Com.c	   761      \details      -
; ..\component\Com\Implementation\Com.c	   762      \pre          -
; ..\component\Com\Implementation\Com.c	   763      \param[in]    ComRxPduId          ID of the I-PDU
; ..\component\Com\Implementation\Com.c	   764      \param[in]    ipduGroupVector     ipduGroupVector I-PDU group vector containing the requested deadline monitoring state
; ..\component\Com\Implementation\Com.c	   765                                    (disabled = 0/ enabled = 1) for all I-PDU groups.
; ..\component\Com\Implementation\Com.c	   766      \return       bRequestedActiveState   Active state of the I-PDU. An I-PDU is active if and only if at least one I-PDU group is active it belongs to.
; ..\component\Com\Implementation\Com.c	   767      \context      TASK
; ..\component\Com\Implementation\Com.c	   768  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   769  LOCAL_INLINE FUNC(Com_RxPduDmStateType, COM_CODE) Com_ReceptionDMControl_EvaluateActiveState(Com_IpduGroupVector ipduGroupVector, Com_RxPduInfoIterType ComRxPduId);
; ..\component\Com\Implementation\Com.c	   770  #endif
; ..\component\Com\Implementation\Com.c	   771  
; ..\component\Com\Implementation\Com.c	   772  #if ((COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON) && (COM_PDUGRPVECTOR == STD_ON))
; ..\component\Com\Implementation\Com.c	   773  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   774    Com_ReceptionDMControl_SetDmState
; ..\component\Com\Implementation\Com.c	   775  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   776  /*! \brief        This service enables or disables I-PDU group Deadline Monitoring. The group Deadline Monitoring is started
; ..\component\Com\Implementation\Com.c	   777   *                on activation. All I-PDUs, that have not changed their deadline monitoring state, are not processed.
; ..\component\Com\Implementation\Com.c	   778      \details      -
; ..\component\Com\Implementation\Com.c	   779      \pre          -
; ..\component\Com\Implementation\Com.c	   780      \param[in]    ComRxPduId -  ID of the RX-PDU
; ..\component\Com\Implementation\Com.c	   781      \param[in]    bRequestedActiveState - true if at least one of the IPDU-Groups of ComRxPduId is active
; ..\component\Com\Implementation\Com.c	   782      \trace        SPEC-2736873, SPEC-2736875, SPEC-2736872
; ..\component\Com\Implementation\Com.c	   783      \context      TASK
; ..\component\Com\Implementation\Com.c	   784  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   785  LOCAL_INLINE FUNC(void, COM_CODE) Com_ReceptionDMControl_SetDmState(Com_RxPduInfoIterType ComRxPduId, Com_RxPduDmStateType bRequestedActiveState);
; ..\component\Com\Implementation\Com.c	   786  #endif
; ..\component\Com\Implementation\Com.c	   787  
; ..\component\Com\Implementation\Com.c	   788  #if (COM_RXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   789  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   790    Com_IpduGroupStartRx
; ..\component\Com\Implementation\Com.c	   791  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   792  /*! \brief        Starts a preconfigured I-PDU Rx-subgroup.
; ..\component\Com\Implementation\Com.c	   793      \details      -
; ..\component\Com\Implementation\Com.c	   794      \pre          -
; ..\component\Com\Implementation\Com.c	   795      \param[in]    subIpduGroupId ID of I-PDU subgroup to be started
; ..\component\Com\Implementation\Com.c	   796      \param[in]    Initialize  Flag to request initialization of the data in the I-PDUs of this I-PDU group
; ..\component\Com\Implementation\Com.c	   797      \context      TASK
; ..\component\Com\Implementation\Com.c	   798      \warning      A call to Com_IpduGroupStartRx shall not be interrupted by another call to Com_IpduGroupStart, Com_EnableReceptionDM,
; ..\component\Com\Implementation\Com.c	   799                    Com_DisableReceptionDM or a call to Com_IpduGroupStop.
; ..\component\Com\Implementation\Com.c	   800  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   801  LOCAL_INLINE FUNC(void, COM_CODE) Com_IpduGroupStartRx(Com_IpduGroupIdType subIpduGroupId, boolean Initialize);
; ..\component\Com\Implementation\Com.c	   802  #endif
; ..\component\Com\Implementation\Com.c	   803  
; ..\component\Com\Implementation\Com.c	   804  #if (COM_TXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   805  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   806    Com_IpduGroupStartTx
; ..\component\Com\Implementation\Com.c	   807  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   808  /*! \brief        Starts a preconfigured I-PDU Tx-subgroup.
; ..\component\Com\Implementation\Com.c	   809      \details      -
; ..\component\Com\Implementation\Com.c	   810      \pre          -
; ..\component\Com\Implementation\Com.c	   811      \param[in]    subIpduGroupId ID of I-PDU subgroup to be started
; ..\component\Com\Implementation\Com.c	   812      \param[in]    Initialize  Flag to request initialization of the data in the I-PDUs of this I-PDU group
; ..\component\Com\Implementation\Com.c	   813      \context      TASK
; ..\component\Com\Implementation\Com.c	   814      \warning      A call to Com_IpduGroupStartTx shall not be interrupted by another call to Com_IpduGroupStart, Com_EnableReceptionDM,
; ..\component\Com\Implementation\Com.c	   815                    Com_DisableReceptionDM or a call to Com_IpduGroupStop.
; ..\component\Com\Implementation\Com.c	   816  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   817  LOCAL_INLINE FUNC(void, COM_CODE) Com_IpduGroupStartTx(Com_IpduGroupIdType subIpduGroupId, boolean Initialize);
; ..\component\Com\Implementation\Com.c	   818  #endif
; ..\component\Com\Implementation\Com.c	   819  
; ..\component\Com\Implementation\Com.c	   820  #if ((COM_RXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON) && (COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	   821  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   822    Com_EnableReceptionDMsubGroup
; ..\component\Com\Implementation\Com.c	   823  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   824  /*! \brief        Enables the reception deadline monitoring for the I-PDUs within the given I-PDU subgroup.
; ..\component\Com\Implementation\Com.c	   825      \details      -
; ..\component\Com\Implementation\Com.c	   826      \pre          -
; ..\component\Com\Implementation\Com.c	   827      \param[in]    subIpduGroupId ID of I-PDU subgroup where reception DM shall be enabled.
; ..\component\Com\Implementation\Com.c	   828      \context      TASK
; ..\component\Com\Implementation\Com.c	   829      \warning      A call to Com_EnableReceptionDMsubGroup shall not be interrupted by another call to Com_EnableReceptionDM,
; ..\component\Com\Implementation\Com.c	   830                    Com_IpduGroupStop, Com_DisableReceptionDM or a call to Com_IpduGroupStart.
; ..\component\Com\Implementation\Com.c	   831  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   832  LOCAL_INLINE FUNC(void, COM_CODE) Com_EnableReceptionDMsubGroup(Com_IpduGroupIdType subIpduGroupId);
; ..\component\Com\Implementation\Com.c	   833  
; ..\component\Com\Implementation\Com.c	   834  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   835    Com_DisableReceptionDMsubGroup
; ..\component\Com\Implementation\Com.c	   836  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   837  /*! \brief        Disables the reception deadline monitoring for the I-PDUs within the given I-PDU subgroup.
; ..\component\Com\Implementation\Com.c	   838      \details      -
; ..\component\Com\Implementation\Com.c	   839      \pre          -
; ..\component\Com\Implementation\Com.c	   840      \param[in]    subIpduGroupId ID of I-PDU subgroup where reception DM shall be disabled.
; ..\component\Com\Implementation\Com.c	   841      \context      TASK
; ..\component\Com\Implementation\Com.c	   842      \warning      A call to Com_DisableReceptionDMsubGroup shall not be interrupted by another call to Com_DisableReceptionDM, Com_IpduGroupStop,
; ..\component\Com\Implementation\Com.c	   843                    Com_EnableReceptionDM or a call to Com_IpduGroupStart.
; ..\component\Com\Implementation\Com.c	   844  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   845  LOCAL_INLINE FUNC(void, COM_CODE) Com_DisableReceptionDMsubGroup(Com_IpduGroupIdType subIpduGroupId);
; ..\component\Com\Implementation\Com.c	   846  #endif
; ..\component\Com\Implementation\Com.c	   847  
; ..\component\Com\Implementation\Com.c	   848  #if (COM_IPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   849  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   850    Com_IpduGroupStopSubGroup
; ..\component\Com\Implementation\Com.c	   851  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   852  /*! \brief        Stops a preconfigured I-PDU subgroup.
; ..\component\Com\Implementation\Com.c	   853                    For example, cyclic I-PDUs will be stopped after the call of Com_IpduGroupStop().
; ..\component\Com\Implementation\Com.c	   854      \details      -
; ..\component\Com\Implementation\Com.c	   855      \pre          -
; ..\component\Com\Implementation\Com.c	   856      \param[in]    subIpduGroupId ID of I-PDU subgroup to be stopped
; ..\component\Com\Implementation\Com.c	   857      \context      TASK
; ..\component\Com\Implementation\Com.c	   858      \warning      A call to Com_IpduGroupStopSubGroup shall not be interrupted by another call to Com_IpduGroupStop, Com_EnableReceptionDM,
; ..\component\Com\Implementation\Com.c	   859                    Com_DisableReceptionDM or a call to Com_IpduGroupStart.
; ..\component\Com\Implementation\Com.c	   860  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   861  LOCAL_INLINE FUNC(void, COM_CODE) Com_IpduGroupStopSubGroup(Com_IpduGroupIdType subIpduGroupId);
; ..\component\Com\Implementation\Com.c	   862  #endif
; ..\component\Com\Implementation\Com.c	   863  
; ..\component\Com\Implementation\Com.c	   864  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   865  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   866    Com_InitTx
; ..\component\Com\Implementation\Com.c	   867  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   868  /*! \brief    This function initializes Tx IPdus and related parameters.
; ..\component\Com\Implementation\Com.c	   869      \details  -
; ..\component\Com\Implementation\Com.c	   870      \pre      -
; ..\component\Com\Implementation\Com.c	   871      \context  TASK
; ..\component\Com\Implementation\Com.c	   872      \warning  Com_InitTx shall not pre-empt any COM function.
; ..\component\Com\Implementation\Com.c	   873                The rest of the system must guarantee that Com_InitTx is not called in such a way.
; ..\component\Com\Implementation\Com.c	   874  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   875  LOCAL_INLINE FUNC(void, COM_CODE) Com_InitTx(void);
; ..\component\Com\Implementation\Com.c	   876  #endif
; ..\component\Com\Implementation\Com.c	   877  
; ..\component\Com\Implementation\Com.c	   878  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   879  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   880    Com_InitRx
; ..\component\Com\Implementation\Com.c	   881  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   882  /*! \brief    This function initializes Rx IPdus and related parameters.
; ..\component\Com\Implementation\Com.c	   883      \details  -
; ..\component\Com\Implementation\Com.c	   884      \pre      -
; ..\component\Com\Implementation\Com.c	   885      \context  TASK
; ..\component\Com\Implementation\Com.c	   886      \warning  Com_InitRx shall not pre-empt any COM function.
; ..\component\Com\Implementation\Com.c	   887                The rest of the system must guarantee that Com_InitRx is not called in such a way.
; ..\component\Com\Implementation\Com.c	   888  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   889  LOCAL_INLINE FUNC(void, COM_CODE) Com_InitRx(void);
; ..\component\Com\Implementation\Com.c	   890  #endif
; ..\component\Com\Implementation\Com.c	   891  
; ..\component\Com\Implementation\Com.c	   892  
; ..\component\Com\Implementation\Com.c	   893  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   894  
; ..\component\Com\Implementation\Com.c	   895  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	   896  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   897    Com_RxIPduGroup_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	   898  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   899  /*! \brief    This function enters the rx IPduGroups exclusive area.
; ..\component\Com\Implementation\Com.c	   900      \details  -
; ..\component\Com\Implementation\Com.c	   901      \pre      -
; ..\component\Com\Implementation\Com.c	   902      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	   903      \context  TASK
; ..\component\Com\Implementation\Com.c	   904  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   905  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxIPduGroup_EnterExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	   906  
; ..\component\Com\Implementation\Com.c	   907  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   908    Com_RxIPduGroup_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	   909  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   910  /*! \brief    This function exits the rx IPduGroups exclusive area.
; ..\component\Com\Implementation\Com.c	   911      \details  -
; ..\component\Com\Implementation\Com.c	   912      \pre      -
; ..\component\Com\Implementation\Com.c	   913      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	   914      \context  TASK
; ..\component\Com\Implementation\Com.c	   915  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   916  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxIPduGroup_ExitExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	   917  
; ..\component\Com\Implementation\Com.c	   918  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   919    Com_RxIPduGroup_ThresholdCheck
; ..\component\Com\Implementation\Com.c	   920  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   921  /*! \brief    This function checks if the ISR Lock must be opened
; ..\component\Com\Implementation\Com.c	   922      \details  -
; ..\component\Com\Implementation\Com.c	   923      \pre      -
; ..\component\Com\Implementation\Com.c	   924      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	   925      \context  TASK
; ..\component\Com\Implementation\Com.c	   926  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   927  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxIPduGroup_ThresholdCheck(void);
; ..\component\Com\Implementation\Com.c	   928  
; ..\component\Com\Implementation\Com.c	   929  #endif
; ..\component\Com\Implementation\Com.c	   930  
; ..\component\Com\Implementation\Com.c	   931  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   932  
; ..\component\Com\Implementation\Com.c	   933  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	   934  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   935    Com_TxIPduGroup_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	   936  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   937  /*! \brief    This function enters the tx IPduGroups exclusive area.
; ..\component\Com\Implementation\Com.c	   938      \details  -
; ..\component\Com\Implementation\Com.c	   939      \pre      -
; ..\component\Com\Implementation\Com.c	   940      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	   941      \context  TASK
; ..\component\Com\Implementation\Com.c	   942  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   943  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxIPduGroup_EnterExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	   944  
; ..\component\Com\Implementation\Com.c	   945  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   946    Com_TxIPduGroup_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	   947  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   948  /*! \brief    This function exits the tx IPduGroups exclusive area.
; ..\component\Com\Implementation\Com.c	   949      \details  -
; ..\component\Com\Implementation\Com.c	   950      \pre      -
; ..\component\Com\Implementation\Com.c	   951      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	   952      \context  TASK
; ..\component\Com\Implementation\Com.c	   953  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   954  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxIPduGroup_ExitExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	   955  
; ..\component\Com\Implementation\Com.c	   956  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   957    Com_TxIPduGroup_ThresholdCheck
; ..\component\Com\Implementation\Com.c	   958  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   959  /*! \brief    This function checks if the ISR Lock must be opened
; ..\component\Com\Implementation\Com.c	   960      \details  -
; ..\component\Com\Implementation\Com.c	   961      \pre      -
; ..\component\Com\Implementation\Com.c	   962      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	   963      \context  TASK
; ..\component\Com\Implementation\Com.c	   964  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   965  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxIPduGroup_ThresholdCheck(void);
; ..\component\Com\Implementation\Com.c	   966  
; ..\component\Com\Implementation\Com.c	   967  #endif
; ..\component\Com\Implementation\Com.c	   968  
; ..\component\Com\Implementation\Com.c	   969  
; ..\component\Com\Implementation\Com.c	   970  #if (COM_TXSIGGRPINFOINDENDIDXOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	   971  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   972    Com_SignalGroup_InitTxIpdu
; ..\component\Com\Implementation\Com.c	   973  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   974  /*! \brief        This function initializes a tx I-PDU in Com_Signal.
; ..\component\Com\Implementation\Com.c	   975      \details      -
; ..\component\Com\Implementation\Com.c	   976      \pre          -
; ..\component\Com\Implementation\Com.c	   977      \param[in]    ComPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	   978      \context      TASK
; ..\component\Com\Implementation\Com.c	   979  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   980  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGroup_InitTxIpdu(Com_TxPduInfoIterType ComPduId);
; ..\component\Com\Implementation\Com.c	   981  #endif
; ..\component\Com\Implementation\Com.c	   982  
; ..\component\Com\Implementation\Com.c	   983  #if ((COM_FILTERINFOUSEDOFTXSIGINFO == STD_ON) || (COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	   984  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	   985    Com_TxSignal_EvaluateFilter
; ..\component\Com\Implementation\Com.c	   986  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   987  /*! \brief        This function evaluates the state of the signal and group signal filters.
; ..\component\Com\Implementation\Com.c	   988      \details      -
; ..\component\Com\Implementation\Com.c	   989      \pre          -
; ..\component\Com\Implementation\Com.c	   990      \param[in]    idxTxSigInfo        Index of TxSigInfo
; ..\component\Com\Implementation\Com.c	   991      \param[in]    idxFilterInfo       Index of filter information table
; ..\component\Com\Implementation\Com.c	   992      \param[in]    newValuePtr         Pointer to the memory where the new signal value is located
; ..\component\Com\Implementation\Com.c	   993      \return       boolean             TRUE, if filter condition is passed, FALSE otherwise.
; ..\component\Com\Implementation\Com.c	   994      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	   995  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	   996  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_TxSignal_EvaluateFilter(Com_SignalIdType idxTxSigInfo, uint32 idxFilterInfo, P2CONST(void, AUTOMATIC, AUTOMATIC) newValuePtr);
; ..\component\Com\Implementation\Com.c	   997  #endif
; ..\component\Com\Implementation\Com.c	   998  
; ..\component\Com\Implementation\Com.c	   999  #if (COM_TXBUFFERUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  1000  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1001    Com_Signal_WriteSignal
; ..\component\Com\Implementation\Com.c	  1002  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1003  /*! \brief        This method writes a signal to the TxIPdu buffer or group signal to shadow buffer.
; ..\component\Com\Implementation\Com.c	  1004      \details      -
; ..\component\Com\Implementation\Com.c	  1005      \pre          -
; ..\component\Com\Implementation\Com.c	  1006      \param[in]    SignalId            ID of the signal or group signal to be written to
; ..\component\Com\Implementation\Com.c	  1007      \param[in]    SignalApplSourcePtr Pointer to application memory where the signal is located
; ..\component\Com\Implementation\Com.c	  1008      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1009      \note         Interrupts must have been locked by the calling function. This function does not provide a sign
; ..\component\Com\Implementation\Com.c	  1010                    conversion to be compatible with gateway use case.
; ..\component\Com\Implementation\Com.c	  1011  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1012  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_WriteSignal(Com_SignalIdType SignalId, P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) SignalApplSourcePtr);
; ..\component\Com\Implementation\Com.c	  1013  #endif
; ..\component\Com\Implementation\Com.c	  1014  
; ..\component\Com\Implementation\Com.c	  1015  #if (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  1016  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1017    Com_Signal_ReadSignalApplTypeSpecific
; ..\component\Com\Implementation\Com.c	  1018  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1019  /*! \brief        This method reads the signal value ApplType specific form the source buffer.
; ..\component\Com\Implementation\Com.c	  1020      \details      -
; ..\component\Com\Implementation\Com.c	  1021      \pre          -
; ..\component\Com\Implementation\Com.c	  1022      \param[in]    rxAccessInfoId     ID of the Rx AccessInfo
; ..\component\Com\Implementation\Com.c	  1023      \param[out]   SignalApplDestPtr  Pointer where the signal is written to
; ..\component\Com\Implementation\Com.c	  1024      \param[in]    SignalBusSourcePtr Pointer to the first byte of the signal in the source memory
; ..\component\Com\Implementation\Com.c	  1025      \param[in]    destLength         length of the destination buffer in bytes.
; ..\component\Com\Implementation\Com.c	  1026      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1027  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1028  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignalApplTypeSpecific(Com_RxAccessInfoIterType rxAccessInfoId,
; ..\component\Com\Implementation\Com.c	  1029                                                                          P2VAR(uint8, AUTOMATIC, COM_APPL_VAR) SignalApplDestPtr,
; ..\component\Com\Implementation\Com.c	  1030                                                                          P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr, uint32 destLength);
; ..\component\Com\Implementation\Com.c	  1031  #endif
; ..\component\Com\Implementation\Com.c	  1032  
; ..\component\Com\Implementation\Com.c	  1033  #if (COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  1034  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1035    Com_ReadGroupSignalFromShadowBuffer
; ..\component\Com\Implementation\Com.c	  1036  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1037  /*! \brief        This function copies the value of the shadow buffer to the related ComGroupSignal buffer.
; ..\component\Com\Implementation\Com.c	  1038      \details      -
; ..\component\Com\Implementation\Com.c	  1039      \pre          -
; ..\component\Com\Implementation\Com.c	  1040      \param[in]    idxRxAccessInfo Index of RxAccessInfo.
; ..\component\Com\Implementation\Com.c	  1041      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1042  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1043  LOCAL_INLINE FUNC(void, COM_CODE) Com_ReadGroupSignalFromShadowBuffer(Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  1044  #endif
; ..\component\Com\Implementation\Com.c	  1045  
; ..\component\Com\Implementation\Com.c	  1046  #if(COM_BUFFERUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  1047  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1048    Com_Signal_SetRxSigBufferValue
; ..\component\Com\Implementation\Com.c	  1049  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1050  /*! \brief        This function copies the Simple ApplType dependent constant source value to the destination buffer RxSigBufferBuffer.
; ..\component\Com\Implementation\Com.c	  1051      \details      -
; ..\component\Com\Implementation\Com.c	  1052      \pre          -
; ..\component\Com\Implementation\Com.c	  1053      \param[in]    idxRxAccessInfo   Index of RxAccessInfo
; ..\component\Com\Implementation\Com.c	  1054      \param[in]    idxDestValue      Destination index of the buffer RxSigBufferBuffer
; ..\component\Com\Implementation\Com.c	  1055      \param[in]    idxSrcValue       Source index of constant source value
; ..\component\Com\Implementation\Com.c	  1056      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1057  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1058  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_SetRxSigBufferValue(Com_RxAccessInfoIterType idxRxAccessInfo, uint32_least idxDestValue, uint32_least idxSrcValue);
; ..\component\Com\Implementation\Com.c	  1059  #endif
; ..\component\Com\Implementation\Com.c	  1060  
; ..\component\Com\Implementation\Com.c	  1061  #if(COM_RXSIGBUFFERARRAYBASEDBUFFERUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  1062  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1063    Com_Signal_SetRxSigBufferArrayBasedValue
; ..\component\Com\Implementation\Com.c	  1064  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1065  /*! \brief        This function copies the ArrayBased ApplType dependent constant source value to the destination buffer
; ..\component\Com\Implementation\Com.c	  1066                    RxSigBufferArrayBased.
; ..\component\Com\Implementation\Com.c	  1067      \details      -
; ..\component\Com\Implementation\Com.c	  1068      \pre          -
; ..\component\Com\Implementation\Com.c	  1069      \param[in]    idxRxAccessInfo   Index of RxAccessInfo
; ..\component\Com\Implementation\Com.c	  1070      \param[in]    idxDestValue      Destination index of the buffer RxSigBufferBuffer
; ..\component\Com\Implementation\Com.c	  1071      \param[in]    idxSrcValue       Source index of constant source value
; ..\component\Com\Implementation\Com.c	  1072      \param[in]    length            Valid amount of bytes to be copied.
; ..\component\Com\Implementation\Com.c	  1073      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1074  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1075  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_SetRxSigBufferArrayBasedValue(Com_RxAccessInfoIterType idxRxAccessInfo, Com_RxSigBufferArrayBasedIterType idxDestValue,
; ..\component\Com\Implementation\Com.c	  1076                                                                             Com_ConstValueArrayBasedIterType idxSrcValue, PduLengthType length);
; ..\component\Com\Implementation\Com.c	  1077  #endif
; ..\component\Com\Implementation\Com.c	  1078  
; ..\component\Com\Implementation\Com.c	  1079  #if ((CPU_BYTE_ORDER == LOW_BYTE_FIRST) && (COM_EXISTS_NBITNBYTE_BUSACCOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1080  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1081    Com_Signal_ReadSignal_LB_NBITNBYTE
; ..\component\Com\Implementation\Com.c	  1082  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1083  /*! \brief        This method reads a signal from the indicated buffer (i.e. ipdu buffer or shadow buffer)
; ..\component\Com\Implementation\Com.c	  1084                    Unused bits are set to 0.
; ..\component\Com\Implementation\Com.c	  1085      \details      -
; ..\component\Com\Implementation\Com.c	  1086      \pre          -
; ..\component\Com\Implementation\Com.c	  1087      \param[in]    SignalId            ID of the signal to be read
; ..\component\Com\Implementation\Com.c	  1088      \param[out]   SignalApplDestPtr   Pointer where the signal is written to
; ..\component\Com\Implementation\Com.c	  1089      \param[in]    SignalBusSourcePtr  Pointer to the first byte of the signal in the source memory
; ..\component\Com\Implementation\Com.c	  1090      \param[in]    signalStartBit      bit index in the byte, where the signal starts (0..7)
; ..\component\Com\Implementation\Com.c	  1091      \param[in]    destLength          destination buffer length
; ..\component\Com\Implementation\Com.c	  1092      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1093  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1094  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignal_LB_NBITNBYTE(Com_RxAccessInfoIterType SignalId, P2VAR(uint8, AUTOMATIC, COM_APPL_VAR) SignalApplDestPtr,
; ..\component\Com\Implementation\Com.c	  1095                                                                       P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr, Com_BitPositionOfRxAccessInfoType signalStartBit, uint32 destLength);
; ..\component\Com\Implementation\Com.c	  1096  #endif
; ..\component\Com\Implementation\Com.c	  1097  
; ..\component\Com\Implementation\Com.c	  1098  #if ((CPU_BYTE_ORDER == LOW_BYTE_FIRST) && (COM_EXISTS_NBITNBYTE_SW_BUSACCOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1099  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1100    Com_Signal_ReadSignal_LB_SW_NBITNBYTE
; ..\component\Com\Implementation\Com.c	  1101  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1102  /*! \brief        This method reads a signal from the indicated buffer (i.e. ipdu buffer or shadow buffer)
; ..\component\Com\Implementation\Com.c	  1103                    Unused bits are set to 0. Endianness is converted from BigEndian(BUS) to LittleEndian (ECU).
; ..\component\Com\Implementation\Com.c	  1104      \details      -
; ..\component\Com\Implementation\Com.c	  1105      \pre          -
; ..\component\Com\Implementation\Com.c	  1106      \param[in]    SignalId        ID of the signal to be read
; ..\component\Com\Implementation\Com.c	  1107      \param[out]   SignalApplDestPtr   Pointer where the signal is written to
; ..\component\Com\Implementation\Com.c	  1108      \param[in]    SignalBusSourcePtr  Pointer to the first byte (least significant) of the signal in the source memory
; ..\component\Com\Implementation\Com.c	  1109      \param[in]    signalStartBit  bit index in the byte, where the signal starts (0..7) (LSB)
; ..\component\Com\Implementation\Com.c	  1110      \param[in]    destLength      destination buffer length
; ..\component\Com\Implementation\Com.c	  1111      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1112  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1113  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignal_LB_SW_NBITNBYTE(Com_RxAccessInfoIterType SignalId, P2VAR(uint8, AUTOMATIC, COM_APPL_VAR) SignalApplDestPtr,
; ..\component\Com\Implementation\Com.c	  1114                                                                          P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr,
; ..\component\Com\Implementation\Com.c	  1115                                                                          Com_BitPositionOfRxAccessInfoType signalStartBit, uint32 destLength);
; ..\component\Com\Implementation\Com.c	  1116  #endif
; ..\component\Com\Implementation\Com.c	  1117  
; ..\component\Com\Implementation\Com.c	  1118  #if ((CPU_BYTE_ORDER == HIGH_BYTE_FIRST) && (COM_EXISTS_NBITNBYTE_BUSACCOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1119  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1120    Com_Signal_ReadSignal_HB_NBITNBYTE
; ..\component\Com\Implementation\Com.c	  1121  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1122  /*! \brief        This method reads a signal from the indicated buffer (i.e. ipdu buffer or shadow buffer)
; ..\component\Com\Implementation\Com.c	  1123                    Unused bits are set to 0.
; ..\component\Com\Implementation\Com.c	  1124      \details      -
; ..\component\Com\Implementation\Com.c	  1125      \pre          -
; ..\component\Com\Implementation\Com.c	  1126      \param[in]    rxAccessInfoId      ID of the signal to be read
; ..\component\Com\Implementation\Com.c	  1127      \param[out]   SignalApplDestPtr   Pointer where the signal is written to
; ..\component\Com\Implementation\Com.c	  1128      \param[in]    SignalBusSourcePtr  Pointer to the first byte of the signal in the source memory
; ..\component\Com\Implementation\Com.c	  1129      \param[in]    signalStartBit  bit index in the byte, where the signal starts (0..7)
; ..\component\Com\Implementation\Com.c	  1130      \param[in]    destLength      destination buffer length
; ..\component\Com\Implementation\Com.c	  1131      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1132  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1133  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignal_HB_NBITNBYTE(Com_RxAccessInfoIterType rxAccessInfoId, P2VAR(uint8, AUTOMATIC, COM_APPL_VAR) SignalApplDestPtr,
; ..\component\Com\Implementation\Com.c	  1134                                                                       P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr, Com_BitPositionOfRxAccessInfoType signalStartBit, uint32 destLength);
; ..\component\Com\Implementation\Com.c	  1135  #endif
; ..\component\Com\Implementation\Com.c	  1136  
; ..\component\Com\Implementation\Com.c	  1137  #if ((CPU_BYTE_ORDER == HIGH_BYTE_FIRST) && (COM_EXISTS_NBITNBYTE_SW_BUSACCOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1138  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1139    Com_Signal_ReadSignal_HB_SW_NBITNBYTE
; ..\component\Com\Implementation\Com.c	  1140  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1141  /*! \brief        This method reads a signal from the indicated buffer (i.e. ipdu buffer or shadow buffer)
; ..\component\Com\Implementation\Com.c	  1142                    Unused bits are set to 0. Endianness conversion is performed.
; ..\component\Com\Implementation\Com.c	  1143      \details      -
; ..\component\Com\Implementation\Com.c	  1144      \pre          -
; ..\component\Com\Implementation\Com.c	  1145      \param[in]    rxAccessInfoId      ID of the signal to be read
; ..\component\Com\Implementation\Com.c	  1146      \param[out]   SignalApplDestPtr   Pointer where the signal is written to
; ..\component\Com\Implementation\Com.c	  1147      \param[in]    SignalBusSourcePtr  Pointer to the first byte of the signal in the source memory
; ..\component\Com\Implementation\Com.c	  1148      \param[in]    signalStartBit  bit index in the byte, where the signal starts (0..7)
; ..\component\Com\Implementation\Com.c	  1149      \param[in]    destLength      destination buffer length
; ..\component\Com\Implementation\Com.c	  1150      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1151  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1152  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignal_HB_SW_NBITNBYTE(Com_RxAccessInfoIterType rxAccessInfoId, P2VAR(uint8, AUTOMATIC, COM_APPL_VAR) SignalApplDestPtr,
; ..\component\Com\Implementation\Com.c	  1153                                                                          P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr, Com_BitPositionOfRxAccessInfoType signalStartBit,
; ..\component\Com\Implementation\Com.c	  1154                                                                          uint32 destLength);
; ..\component\Com\Implementation\Com.c	  1155  #endif
; ..\component\Com\Implementation\Com.c	  1156  
; ..\component\Com\Implementation\Com.c	  1157  #if ((COM_TXBUFFERUSEDOFTXSIGINFO == STD_ON)  && ((COM_EXISTS_NBYTE_BUSACCOFTXSIGINFO == STD_ON) || (COM_EXISTS_NBYTE_SW_BUSACCOFTXSIGINFO == STD_ON) || (COM_EXISTS_ARRAY_BASED_BUSACCOFTXSIGINFO == STD_ON)))
; ..\component\Com\Implementation\Com.c	  1158  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1159    Com_Signal_GetTxBufferLength
; ..\component\Com\Implementation\Com.c	  1160  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1161  /*! \brief        This method returns the Tx Buffer Length of the Signal in bytes.
; ..\component\Com\Implementation\Com.c	  1162      \details      -
; ..\component\Com\Implementation\Com.c	  1163      \pre          -
; ..\component\Com\Implementation\Com.c	  1164      \param[in]    SignalId            ID of the signal to be written to
; ..\component\Com\Implementation\Com.c	  1165      \return       Com_TxBufferLengthOfTxSigInfoType
; ..\component\Com\Implementation\Com.c	  1166      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1167  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1168  LOCAL_INLINE FUNC(Com_TxBufferLengthOfTxSigInfoType, COM_CODE) Com_Signal_GetTxBufferLength(Com_SignalIdType SignalId);
; ..\component\Com\Implementation\Com.c	  1169  #endif
; ..\component\Com\Implementation\Com.c	  1170  
; ..\component\Com\Implementation\Com.c	  1171  #if ((COM_TXBUFFERUSEDOFTXSIGINFO == STD_ON) && (CPU_BYTE_ORDER == HIGH_BYTE_FIRST))
; ..\component\Com\Implementation\Com.c	  1172  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1173    Com_Signal_getLSBSignalApplSourcePtr
; ..\component\Com\Implementation\Com.c	  1174  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1175  /*! \brief        This method returns the LSB pointer to application memory where the signal is located. This function should
; ..\component\Com\Implementation\Com.c	  1176   *                only be used if the configured byte order equals high byte order.
; ..\component\Com\Implementation\Com.c	  1177      \details      -
; ..\component\Com\Implementation\Com.c	  1178      \pre          -
; ..\component\Com\Implementation\Com.c	  1179      \param[in]    SignalApplSourcePtr Pointer to application memory where the signal is located
; ..\component\Com\Implementation\Com.c	  1180      \param[in]    SignalId Id of Signal
; ..\component\Com\Implementation\Com.c	  1181      \return       const uint8*
; ..\component\Com\Implementation\Com.c	  1182      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1183  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1184  LOCAL_INLINE FUNC(P2CONST(uint8, AUTOMATIC, COM_APPL_DATA), COM_CODE) Com_Signal_getLSBSignalApplSourcePtr(Com_SignalIdType SignalId, P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) SignalApplSourcePtr);
; ..\component\Com\Implementation\Com.c	  1185  #endif
; ..\component\Com\Implementation\Com.c	  1186  
; ..\component\Com\Implementation\Com.c	  1187  #if ((COM_TXBUFFERUSEDOFTXSIGINFO == STD_ON) && ((COM_EXISTS_NBITNBYTE_BUSACCOFTXSIGINFO == STD_ON) || (COM_EXISTS_NBITNBYTE_SW_BUSACCOFTXSIGINFO == STD_ON)))
; ..\component\Com\Implementation\Com.c	  1188  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1189    Com_Signal_WriteSignal_NBITNBYTE
; ..\component\Com\Implementation\Com.c	  1190  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1191  /*! \brief            This method writes a signal to the indicated buffer (i.e. ipdu buffer or shadow buffer)
; ..\component\Com\Implementation\Com.c	  1192      \details          -
; ..\component\Com\Implementation\Com.c	  1193      \pre              -
; ..\component\Com\Implementation\Com.c	  1194      \param[in]        SignalId
; ..\component\Com\Implementation\Com.c	  1195      \param[in,out]    SignalBusDestPtr    Valid pointer to TxBuffer, where the source signal is written to. Pointer has always
; ..\component\Com\Implementation\Com.c	  1196                                            to point on LSB.
; ..\component\Com\Implementation\Com.c	  1197      \param[in]        SignalApplSourcePtr Pointer to application memory where the signal is located
; ..\component\Com\Implementation\Com.c	  1198      \param[in]        signalStartBit      bit index in the byte, where the signal starts (0..7)
; ..\component\Com\Implementation\Com.c	  1199      \param[in]        isBusBigEndian      flag, if bus is big endian.
; ..\component\Com\Implementation\Com.c	  1200      \context          TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1201  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1202  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_WriteSignal_NBITNBYTE(Com_SignalIdType SignalId,
; ..\component\Com\Implementation\Com.c	  1203                                                                     P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) SignalApplSourcePtr,
; ..\component\Com\Implementation\Com.c	  1204                                                                     Com_BitPositionOfTxSigInfoType signalStartBit, P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusDestPtr, boolean isBusBigEndian);
; ..\component\Com\Implementation\Com.c	  1205  #endif
; ..\component\Com\Implementation\Com.c	  1206  
; ..\component\Com\Implementation\Com.c	  1207  
; ..\component\Com\Implementation\Com.c	  1208  
; ..\component\Com\Implementation\Com.c	  1209  
; ..\component\Com\Implementation\Com.c	  1210  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  1211  #if (COM_FILTERINFO_UINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  1212  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1213  *  Com_Signal_UInt8_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  1214  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1215  /*!
; ..\component\Com\Implementation\Com.c	  1216      \brief        This method evaluated the the filter state appl type specific
; ..\component\Com\Implementation\Com.c	  1217      \details      -
; ..\component\Com\Implementation\Com.c	  1218      \pre          -
; ..\component\Com\Implementation\Com.c	  1219      \param[in]    idxFilterInfo    index of related filter info
; ..\component\Com\Implementation\Com.c	  1220      \param[in]    newValue         new value
; ..\component\Com\Implementation\Com.c	  1221      \param[in]    oldValue         old value
; ..\component\Com\Implementation\Com.c	  1222      \param[in]    timeOutOccurred  indicates whether a timeout occured
; ..\component\Com\Implementation\Com.c	  1223      \trace        SPEC-2736780
; ..\component\Com\Implementation\Com.c	  1224      \return       boolean
; ..\component\Com\Implementation\Com.c	  1225  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1226  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt8_EvaluateFilter(Com_FilterInfo_UInt8IterType idxFilterInfo, uint8 newValue, uint8 oldValue, boolean timeOutOccurred);
; ..\component\Com\Implementation\Com.c	  1227  #endif
; ..\component\Com\Implementation\Com.c	  1228  
; ..\component\Com\Implementation\Com.c	  1229  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  1230  #if (COM_FILTERINFO_SINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  1231  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1232  *  Com_Signal_SInt8_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  1233  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1234  /*!
; ..\component\Com\Implementation\Com.c	  1235      \brief        This method evaluated the the filter state appl type specific
; ..\component\Com\Implementation\Com.c	  1236      \details      -
; ..\component\Com\Implementation\Com.c	  1237      \pre          -
; ..\component\Com\Implementation\Com.c	  1238      \param[in]    idxFilterInfo    index of related filter info
; ..\component\Com\Implementation\Com.c	  1239      \param[in]    newValue         new value
; ..\component\Com\Implementation\Com.c	  1240      \param[in]    oldValue         old value
; ..\component\Com\Implementation\Com.c	  1241      \param[in]    timeOutOccurred  indicates whether a timeout occured
; ..\component\Com\Implementation\Com.c	  1242      \trace        SPEC-2736780
; ..\component\Com\Implementation\Com.c	  1243      \return       boolean
; ..\component\Com\Implementation\Com.c	  1244  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1245  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt8_EvaluateFilter(Com_FilterInfo_SInt8IterType idxFilterInfo, sint8 newValue, sint8 oldValue, boolean timeOutOccurred);
; ..\component\Com\Implementation\Com.c	  1246  #endif
; ..\component\Com\Implementation\Com.c	  1247  
; ..\component\Com\Implementation\Com.c	  1248  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  1249  #if (COM_FILTERINFO_UINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  1250  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1251  *  Com_Signal_UInt16_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  1252  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1253  /*!
; ..\component\Com\Implementation\Com.c	  1254      \brief        This method evaluated the the filter state appl type specific
; ..\component\Com\Implementation\Com.c	  1255      \details      -
; ..\component\Com\Implementation\Com.c	  1256      \pre          -
; ..\component\Com\Implementation\Com.c	  1257      \param[in]    idxFilterInfo    index of related filter info
; ..\component\Com\Implementation\Com.c	  1258      \param[in]    newValue         new value
; ..\component\Com\Implementation\Com.c	  1259      \param[in]    oldValue         old value
; ..\component\Com\Implementation\Com.c	  1260      \param[in]    timeOutOccurred  indicates whether a timeout occured
; ..\component\Com\Implementation\Com.c	  1261      \trace        SPEC-2736780
; ..\component\Com\Implementation\Com.c	  1262      \return       boolean
; ..\component\Com\Implementation\Com.c	  1263  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1264  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt16_EvaluateFilter(Com_FilterInfo_UInt16IterType idxFilterInfo, uint16 newValue, uint16 oldValue, boolean timeOutOccurred);
; ..\component\Com\Implementation\Com.c	  1265  #endif
; ..\component\Com\Implementation\Com.c	  1266  
; ..\component\Com\Implementation\Com.c	  1267  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  1268  #if (COM_FILTERINFO_SINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  1269  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1270  *  Com_Signal_SInt16_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  1271  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1272  /*!
; ..\component\Com\Implementation\Com.c	  1273      \brief        This method evaluated the the filter state appl type specific
; ..\component\Com\Implementation\Com.c	  1274      \details      -
; ..\component\Com\Implementation\Com.c	  1275      \pre          -
; ..\component\Com\Implementation\Com.c	  1276      \param[in]    idxFilterInfo    index of related filter info
; ..\component\Com\Implementation\Com.c	  1277      \param[in]    newValue         new value
; ..\component\Com\Implementation\Com.c	  1278      \param[in]    oldValue         old value
; ..\component\Com\Implementation\Com.c	  1279      \param[in]    timeOutOccurred  indicates whether a timeout occured
; ..\component\Com\Implementation\Com.c	  1280      \trace        SPEC-2736780
; ..\component\Com\Implementation\Com.c	  1281      \return       boolean
; ..\component\Com\Implementation\Com.c	  1282  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1283  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt16_EvaluateFilter(Com_FilterInfo_SInt16IterType idxFilterInfo, sint16 newValue, sint16 oldValue, boolean timeOutOccurred);
; ..\component\Com\Implementation\Com.c	  1284  #endif
; ..\component\Com\Implementation\Com.c	  1285  
; ..\component\Com\Implementation\Com.c	  1286  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  1287  #if (COM_FILTERINFO_UINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  1288  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1289  *  Com_Signal_UInt32_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  1290  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1291  /*!
; ..\component\Com\Implementation\Com.c	  1292      \brief        This method evaluated the the filter state appl type specific
; ..\component\Com\Implementation\Com.c	  1293      \details      -
; ..\component\Com\Implementation\Com.c	  1294      \pre          -
; ..\component\Com\Implementation\Com.c	  1295      \param[in]    idxFilterInfo    index of related filter info
; ..\component\Com\Implementation\Com.c	  1296      \param[in]    newValue         new value
; ..\component\Com\Implementation\Com.c	  1297      \param[in]    oldValue         old value
; ..\component\Com\Implementation\Com.c	  1298      \param[in]    timeOutOccurred  indicates whether a timeout occured
; ..\component\Com\Implementation\Com.c	  1299      \trace        SPEC-2736780
; ..\component\Com\Implementation\Com.c	  1300      \return       boolean
; ..\component\Com\Implementation\Com.c	  1301  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1302  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt32_EvaluateFilter(Com_FilterInfo_UInt32IterType idxFilterInfo, uint32 newValue, uint32 oldValue, boolean timeOutOccurred);
; ..\component\Com\Implementation\Com.c	  1303  #endif
; ..\component\Com\Implementation\Com.c	  1304  
; ..\component\Com\Implementation\Com.c	  1305  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  1306  #if (COM_FILTERINFO_SINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  1307  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1308  *  Com_Signal_SInt32_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  1309  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1310  /*!
; ..\component\Com\Implementation\Com.c	  1311      \brief        This method evaluated the the filter state appl type specific
; ..\component\Com\Implementation\Com.c	  1312      \details      -
; ..\component\Com\Implementation\Com.c	  1313      \pre          -
; ..\component\Com\Implementation\Com.c	  1314      \param[in]    idxFilterInfo    index of related filter info
; ..\component\Com\Implementation\Com.c	  1315      \param[in]    newValue         new value
; ..\component\Com\Implementation\Com.c	  1316      \param[in]    oldValue         old value
; ..\component\Com\Implementation\Com.c	  1317      \param[in]    timeOutOccurred  indicates whether a timeout occured
; ..\component\Com\Implementation\Com.c	  1318      \trace        SPEC-2736780
; ..\component\Com\Implementation\Com.c	  1319      \return       boolean
; ..\component\Com\Implementation\Com.c	  1320  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1321  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt32_EvaluateFilter(Com_FilterInfo_SInt32IterType idxFilterInfo, sint32 newValue, sint32 oldValue, boolean timeOutOccurred);
; ..\component\Com\Implementation\Com.c	  1322  #endif
; ..\component\Com\Implementation\Com.c	  1323  
; ..\component\Com\Implementation\Com.c	  1324  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  1325  #if (COM_FILTERINFO_UINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  1326  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1327  *  Com_Signal_UInt64_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  1328  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1329  /*!
; ..\component\Com\Implementation\Com.c	  1330      \brief        This method evaluated the the filter state appl type specific
; ..\component\Com\Implementation\Com.c	  1331      \details      -
; ..\component\Com\Implementation\Com.c	  1332      \pre          -
; ..\component\Com\Implementation\Com.c	  1333      \param[in]    idxFilterInfo    index of related filter info
; ..\component\Com\Implementation\Com.c	  1334      \param[in]    newValue         new value
; ..\component\Com\Implementation\Com.c	  1335      \param[in]    oldValue         old value
; ..\component\Com\Implementation\Com.c	  1336      \param[in]    timeOutOccurred  indicates whether a timeout occured
; ..\component\Com\Implementation\Com.c	  1337      \trace        SPEC-2736780
; ..\component\Com\Implementation\Com.c	  1338      \return       boolean
; ..\component\Com\Implementation\Com.c	  1339  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1340  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt64_EvaluateFilter(Com_FilterInfo_UInt64IterType idxFilterInfo, uint64 newValue, uint64 oldValue, boolean timeOutOccurred);
; ..\component\Com\Implementation\Com.c	  1341  #endif
; ..\component\Com\Implementation\Com.c	  1342  
; ..\component\Com\Implementation\Com.c	  1343  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  1344  #if (COM_FILTERINFO_SINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  1345  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1346  *  Com_Signal_SInt64_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  1347  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1348  /*!
; ..\component\Com\Implementation\Com.c	  1349      \brief        This method evaluated the the filter state appl type specific
; ..\component\Com\Implementation\Com.c	  1350      \details      -
; ..\component\Com\Implementation\Com.c	  1351      \pre          -
; ..\component\Com\Implementation\Com.c	  1352      \param[in]    idxFilterInfo    index of related filter info
; ..\component\Com\Implementation\Com.c	  1353      \param[in]    newValue         new value
; ..\component\Com\Implementation\Com.c	  1354      \param[in]    oldValue         old value
; ..\component\Com\Implementation\Com.c	  1355      \param[in]    timeOutOccurred  indicates whether a timeout occured
; ..\component\Com\Implementation\Com.c	  1356      \trace        SPEC-2736780
; ..\component\Com\Implementation\Com.c	  1357      \return       boolean
; ..\component\Com\Implementation\Com.c	  1358  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1359  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt64_EvaluateFilter(Com_FilterInfo_SInt64IterType idxFilterInfo, sint64 newValue, sint64 oldValue, boolean timeOutOccurred);
; ..\component\Com\Implementation\Com.c	  1360  #endif
; ..\component\Com\Implementation\Com.c	  1361  
; ..\component\Com\Implementation\Com.c	  1362  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  1363  #if (COM_FILTERINFO_FLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  1364  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1365  *  Com_Signal_Float32_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  1366  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1367  /*!
; ..\component\Com\Implementation\Com.c	  1368      \brief        This method evaluated the the filter state appl type specific
; ..\component\Com\Implementation\Com.c	  1369      \details      -
; ..\component\Com\Implementation\Com.c	  1370      \pre          -
; ..\component\Com\Implementation\Com.c	  1371      \param[in]    idxFilterInfo    index of related filter info
; ..\component\Com\Implementation\Com.c	  1372      \param[in]    newValue         new value
; ..\component\Com\Implementation\Com.c	  1373      \param[in]    oldValue         old value
; ..\component\Com\Implementation\Com.c	  1374      \param[in]    timeOutOccurred  indicates whether a timeout occured
; ..\component\Com\Implementation\Com.c	  1375      \trace        SPEC-2736780
; ..\component\Com\Implementation\Com.c	  1376      \return       boolean
; ..\component\Com\Implementation\Com.c	  1377  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1378  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_Float32_EvaluateFilter(Com_FilterInfo_Float32IterType idxFilterInfo, float32 newValue, float32 oldValue, boolean timeOutOccurred);
; ..\component\Com\Implementation\Com.c	  1379  #endif
; ..\component\Com\Implementation\Com.c	  1380  
; ..\component\Com\Implementation\Com.c	  1381  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  1382  #if (COM_FILTERINFO_FLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  1383  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1384  *  Com_Signal_Float64_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  1385  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1386  /*!
; ..\component\Com\Implementation\Com.c	  1387      \brief        This method evaluated the the filter state appl type specific
; ..\component\Com\Implementation\Com.c	  1388      \details      -
; ..\component\Com\Implementation\Com.c	  1389      \pre          -
; ..\component\Com\Implementation\Com.c	  1390      \param[in]    idxFilterInfo    index of related filter info
; ..\component\Com\Implementation\Com.c	  1391      \param[in]    newValue         new value
; ..\component\Com\Implementation\Com.c	  1392      \param[in]    oldValue         old value
; ..\component\Com\Implementation\Com.c	  1393      \param[in]    timeOutOccurred  indicates whether a timeout occured
; ..\component\Com\Implementation\Com.c	  1394      \trace        SPEC-2736780
; ..\component\Com\Implementation\Com.c	  1395      \return       boolean
; ..\component\Com\Implementation\Com.c	  1396  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1397  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_Float64_EvaluateFilter(Com_FilterInfo_Float64IterType idxFilterInfo, float64 newValue, float64 oldValue, boolean timeOutOccurred);
; ..\component\Com\Implementation\Com.c	  1398  #endif
; ..\component\Com\Implementation\Com.c	  1399  
; ..\component\Com\Implementation\Com.c	  1400  
; ..\component\Com\Implementation\Com.c	  1401  #if (COM_FILTERINFO_UINT8_N == STD_ON)
; ..\component\Com\Implementation\Com.c	  1402  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1403  *  Com_Signal_UInt8_N_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  1404  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1405  /*! \brief        This method evaluated the the filter state appl type specific
; ..\component\Com\Implementation\Com.c	  1406      \details      -
; ..\component\Com\Implementation\Com.c	  1407      \pre          -
; ..\component\Com\Implementation\Com.c	  1408      \param[in]    idxFilterInfo    index of related filter info
; ..\component\Com\Implementation\Com.c	  1409      \param[in]    newValuePtr      pointer to new value
; ..\component\Com\Implementation\Com.c	  1410      \param[in]    oldValuePtr      pointer old value
; ..\component\Com\Implementation\Com.c	  1411      \param[in]    length           number bytes to be evaluated.
; ..\component\Com\Implementation\Com.c	  1412      \param[in]    timeOutOccurred  indicates whether a timeout occured
; ..\component\Com\Implementation\Com.c	  1413      \return       boolean
; ..\component\Com\Implementation\Com.c	  1414  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1415  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt8_N_EvaluateFilter(Com_FilterInfo_UInt8_NIterType idxFilterInfo, P2CONST(uint8, AUTOMATIC, AUTOMATIC) newValuePtr,
; ..\component\Com\Implementation\Com.c	  1416                                                                         P2CONST(uint8, AUTOMATIC, AUTOMATIC) oldValuePtr, PduLengthType length, boolean timeOutOccurred);
; ..\component\Com\Implementation\Com.c	  1417  #endif
; ..\component\Com\Implementation\Com.c	  1418  
; ..\component\Com\Implementation\Com.c	  1419  
; ..\component\Com\Implementation\Com.c	  1420  
; ..\component\Com\Implementation\Com.c	  1421  #if ((COM_SIGNEXTREQUIREDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT8_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1422  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1423  *  Com_Signal_ReadSignalSignExtension_SINT8
; ..\component\Com\Implementation\Com.c	  1424  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1425  /*!
; ..\component\Com\Implementation\Com.c	  1426      \brief            This method performs the Sign extension for signals
; ..\component\Com\Implementation\Com.c	  1427      \details          -
; ..\component\Com\Implementation\Com.c	  1428      \pre              -
; ..\component\Com\Implementation\Com.c	  1429      \param[in]        idxAccessInfo     index of ComSignal
; ..\component\Com\Implementation\Com.c	  1430      \param[in,out]    signExtValue      ApplType specific stack value that will be sign extended
; ..\component\Com\Implementation\Com.c	  1431  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1432  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignalSignExtension_SINT8(Com_RxAccessInfoIterType idxAccessInfo, P2VAR(uSignExt8BitType, AUTOMATIC, COM_APPL_VAR) signExtValue);      /* PRQA S 0750 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	  1433  #endif
; ..\component\Com\Implementation\Com.c	  1434  #if ((COM_SIGNEXTREQUIREDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT16_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1435  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1436  *  Com_Signal_ReadSignalSignExtension_SINT16
; ..\component\Com\Implementation\Com.c	  1437  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1438  /*!
; ..\component\Com\Implementation\Com.c	  1439      \brief            This method performs the Sign extension for signals
; ..\component\Com\Implementation\Com.c	  1440      \details          -
; ..\component\Com\Implementation\Com.c	  1441      \pre              -
; ..\component\Com\Implementation\Com.c	  1442      \param[in]        idxAccessInfo     index of ComSignal
; ..\component\Com\Implementation\Com.c	  1443      \param[in,out]    signExtValue      ApplType specific stack value that will be sign extended
; ..\component\Com\Implementation\Com.c	  1444  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1445  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignalSignExtension_SINT16(Com_RxAccessInfoIterType idxAccessInfo, P2VAR(uSignExt16BitType, AUTOMATIC, COM_APPL_VAR) signExtValue);    /* PRQA S 0750 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	  1446  #endif
; ..\component\Com\Implementation\Com.c	  1447  #if ((COM_SIGNEXTREQUIREDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT32_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1448  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1449  *  Com_Signal_ReadSignalSignExtension_SINT32
; ..\component\Com\Implementation\Com.c	  1450  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1451  /*!
; ..\component\Com\Implementation\Com.c	  1452      \brief            This method performs the Sign extension for signals
; ..\component\Com\Implementation\Com.c	  1453      \details          -
; ..\component\Com\Implementation\Com.c	  1454      \pre              -
; ..\component\Com\Implementation\Com.c	  1455      \param[in]        idxAccessInfo     index of ComSignal
; ..\component\Com\Implementation\Com.c	  1456      \param[in,out]    signExtValue      ApplType specific stack value that will be sign extended
; ..\component\Com\Implementation\Com.c	  1457  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1458  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignalSignExtension_SINT32(Com_RxAccessInfoIterType idxAccessInfo, P2VAR(uSignExt32BitType, AUTOMATIC, COM_APPL_VAR) signExtValue);    /* PRQA S 0750 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	  1459  #endif
; ..\component\Com\Implementation\Com.c	  1460  #if ((COM_SIGNEXTREQUIREDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT64_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1461  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1462  *  Com_Signal_ReadSignalSignExtension_SINT64
; ..\component\Com\Implementation\Com.c	  1463  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1464  /*!
; ..\component\Com\Implementation\Com.c	  1465      \brief            This method performs the Sign extension for signals
; ..\component\Com\Implementation\Com.c	  1466      \details          -
; ..\component\Com\Implementation\Com.c	  1467      \pre              -
; ..\component\Com\Implementation\Com.c	  1468      \param[in]        idxAccessInfo     index of ComSignal
; ..\component\Com\Implementation\Com.c	  1469      \param[in,out]    signExtValue      ApplType specific stack value that will be sign extended
; ..\component\Com\Implementation\Com.c	  1470  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1471  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignalSignExtension_SINT64(Com_RxAccessInfoIterType idxAccessInfo, P2VAR(uSignExt64BitType, AUTOMATIC, COM_APPL_VAR) signExtValue);    /* PRQA S 0750 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	  1472  #endif
; ..\component\Com\Implementation\Com.c	  1473  
; ..\component\Com\Implementation\Com.c	  1474  /* jet: ComSignalReadSignal snippet */
; ..\component\Com\Implementation\Com.c	  1475  #if ((COM_EXISTS_UINT8_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1476  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1477  *  Com_Signal_ReadSignal_UInt8
; ..\component\Com\Implementation\Com.c	  1478  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1479  /*!
; ..\component\Com\Implementation\Com.c	  1480      \brief        Reads the related Signal value from the passed PDU buffer.
; ..\component\Com\Implementation\Com.c	  1481      \details      -
; ..\component\Com\Implementation\Com.c	  1482      \pre          -
; ..\component\Com\Implementation\Com.c	  1483      \param[in]    idxRxAccessInfo      index of ComSignal.
; ..\component\Com\Implementation\Com.c	  1484      \param[in]    SignalBusSourcePtr buffer the value is read from.
; ..\component\Com\Implementation\Com.c	  1485      \return       ApplType specific read value
; ..\component\Com\Implementation\Com.c	  1486  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1487  LOCAL_INLINE FUNC(uint8, COM_CODE) Com_Signal_ReadSignal_UInt8(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr);
; ..\component\Com\Implementation\Com.c	  1488  #endif
; ..\component\Com\Implementation\Com.c	  1489  /* jet: ComSignalReadSignal snippet */
; ..\component\Com\Implementation\Com.c	  1490  #if ((COM_EXISTS_SINT8_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1491  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1492  *  Com_Signal_ReadSignal_SInt8
; ..\component\Com\Implementation\Com.c	  1493  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1494  /*!
; ..\component\Com\Implementation\Com.c	  1495      \brief        Reads the related Signal value from the passed PDU buffer.
; ..\component\Com\Implementation\Com.c	  1496      \details      -
; ..\component\Com\Implementation\Com.c	  1497      \pre          -
; ..\component\Com\Implementation\Com.c	  1498      \param[in]    idxRxAccessInfo      index of ComSignal.
; ..\component\Com\Implementation\Com.c	  1499      \param[in]    SignalBusSourcePtr buffer the value is read from.
; ..\component\Com\Implementation\Com.c	  1500      \return       ApplType specific read value
; ..\component\Com\Implementation\Com.c	  1501  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1502  LOCAL_INLINE FUNC(sint8, COM_CODE) Com_Signal_ReadSignal_SInt8(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr);
; ..\component\Com\Implementation\Com.c	  1503  #endif
; ..\component\Com\Implementation\Com.c	  1504  /* jet: ComSignalReadSignal snippet */
; ..\component\Com\Implementation\Com.c	  1505  #if ((COM_EXISTS_UINT16_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1506  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1507  *  Com_Signal_ReadSignal_UInt16
; ..\component\Com\Implementation\Com.c	  1508  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1509  /*!
; ..\component\Com\Implementation\Com.c	  1510      \brief        Reads the related Signal value from the passed PDU buffer.
; ..\component\Com\Implementation\Com.c	  1511      \details      -
; ..\component\Com\Implementation\Com.c	  1512      \pre          -
; ..\component\Com\Implementation\Com.c	  1513      \param[in]    idxRxAccessInfo      index of ComSignal.
; ..\component\Com\Implementation\Com.c	  1514      \param[in]    SignalBusSourcePtr buffer the value is read from.
; ..\component\Com\Implementation\Com.c	  1515      \return       ApplType specific read value
; ..\component\Com\Implementation\Com.c	  1516  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1517  LOCAL_INLINE FUNC(uint16, COM_CODE) Com_Signal_ReadSignal_UInt16(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr);
; ..\component\Com\Implementation\Com.c	  1518  #endif
; ..\component\Com\Implementation\Com.c	  1519  /* jet: ComSignalReadSignal snippet */
; ..\component\Com\Implementation\Com.c	  1520  #if ((COM_EXISTS_SINT16_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1521  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1522  *  Com_Signal_ReadSignal_SInt16
; ..\component\Com\Implementation\Com.c	  1523  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1524  /*!
; ..\component\Com\Implementation\Com.c	  1525      \brief        Reads the related Signal value from the passed PDU buffer.
; ..\component\Com\Implementation\Com.c	  1526      \details      -
; ..\component\Com\Implementation\Com.c	  1527      \pre          -
; ..\component\Com\Implementation\Com.c	  1528      \param[in]    idxRxAccessInfo      index of ComSignal.
; ..\component\Com\Implementation\Com.c	  1529      \param[in]    SignalBusSourcePtr buffer the value is read from.
; ..\component\Com\Implementation\Com.c	  1530      \return       ApplType specific read value
; ..\component\Com\Implementation\Com.c	  1531  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1532  LOCAL_INLINE FUNC(sint16, COM_CODE) Com_Signal_ReadSignal_SInt16(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr);
; ..\component\Com\Implementation\Com.c	  1533  #endif
; ..\component\Com\Implementation\Com.c	  1534  /* jet: ComSignalReadSignal snippet */
; ..\component\Com\Implementation\Com.c	  1535  #if ((COM_EXISTS_UINT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1536  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1537  *  Com_Signal_ReadSignal_UInt32
; ..\component\Com\Implementation\Com.c	  1538  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1539  /*!
; ..\component\Com\Implementation\Com.c	  1540      \brief        Reads the related Signal value from the passed PDU buffer.
; ..\component\Com\Implementation\Com.c	  1541      \details      -
; ..\component\Com\Implementation\Com.c	  1542      \pre          -
; ..\component\Com\Implementation\Com.c	  1543      \param[in]    idxRxAccessInfo      index of ComSignal.
; ..\component\Com\Implementation\Com.c	  1544      \param[in]    SignalBusSourcePtr buffer the value is read from.
; ..\component\Com\Implementation\Com.c	  1545      \return       ApplType specific read value
; ..\component\Com\Implementation\Com.c	  1546  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1547  LOCAL_INLINE FUNC(uint32, COM_CODE) Com_Signal_ReadSignal_UInt32(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr);
; ..\component\Com\Implementation\Com.c	  1548  #endif
; ..\component\Com\Implementation\Com.c	  1549  /* jet: ComSignalReadSignal snippet */
; ..\component\Com\Implementation\Com.c	  1550  #if ((COM_EXISTS_SINT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1551  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1552  *  Com_Signal_ReadSignal_SInt32
; ..\component\Com\Implementation\Com.c	  1553  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1554  /*!
; ..\component\Com\Implementation\Com.c	  1555      \brief        Reads the related Signal value from the passed PDU buffer.
; ..\component\Com\Implementation\Com.c	  1556      \details      -
; ..\component\Com\Implementation\Com.c	  1557      \pre          -
; ..\component\Com\Implementation\Com.c	  1558      \param[in]    idxRxAccessInfo      index of ComSignal.
; ..\component\Com\Implementation\Com.c	  1559      \param[in]    SignalBusSourcePtr buffer the value is read from.
; ..\component\Com\Implementation\Com.c	  1560      \return       ApplType specific read value
; ..\component\Com\Implementation\Com.c	  1561  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1562  LOCAL_INLINE FUNC(sint32, COM_CODE) Com_Signal_ReadSignal_SInt32(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr);
; ..\component\Com\Implementation\Com.c	  1563  #endif
; ..\component\Com\Implementation\Com.c	  1564  /* jet: ComSignalReadSignal snippet */
; ..\component\Com\Implementation\Com.c	  1565  #if ((COM_EXISTS_UINT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1566  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1567  *  Com_Signal_ReadSignal_UInt64
; ..\component\Com\Implementation\Com.c	  1568  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1569  /*!
; ..\component\Com\Implementation\Com.c	  1570      \brief        Reads the related Signal value from the passed PDU buffer.
; ..\component\Com\Implementation\Com.c	  1571      \details      -
; ..\component\Com\Implementation\Com.c	  1572      \pre          -
; ..\component\Com\Implementation\Com.c	  1573      \param[in]    idxRxAccessInfo      index of ComSignal.
; ..\component\Com\Implementation\Com.c	  1574      \param[in]    SignalBusSourcePtr buffer the value is read from.
; ..\component\Com\Implementation\Com.c	  1575      \return       ApplType specific read value
; ..\component\Com\Implementation\Com.c	  1576  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1577  LOCAL_INLINE FUNC(uint64, COM_CODE) Com_Signal_ReadSignal_UInt64(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr);
; ..\component\Com\Implementation\Com.c	  1578  #endif
; ..\component\Com\Implementation\Com.c	  1579  /* jet: ComSignalReadSignal snippet */
; ..\component\Com\Implementation\Com.c	  1580  #if ((COM_EXISTS_SINT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1581  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1582  *  Com_Signal_ReadSignal_SInt64
; ..\component\Com\Implementation\Com.c	  1583  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1584  /*!
; ..\component\Com\Implementation\Com.c	  1585      \brief        Reads the related Signal value from the passed PDU buffer.
; ..\component\Com\Implementation\Com.c	  1586      \details      -
; ..\component\Com\Implementation\Com.c	  1587      \pre          -
; ..\component\Com\Implementation\Com.c	  1588      \param[in]    idxRxAccessInfo      index of ComSignal.
; ..\component\Com\Implementation\Com.c	  1589      \param[in]    SignalBusSourcePtr buffer the value is read from.
; ..\component\Com\Implementation\Com.c	  1590      \return       ApplType specific read value
; ..\component\Com\Implementation\Com.c	  1591  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1592  LOCAL_INLINE FUNC(sint64, COM_CODE) Com_Signal_ReadSignal_SInt64(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr);
; ..\component\Com\Implementation\Com.c	  1593  #endif
; ..\component\Com\Implementation\Com.c	  1594  /* jet: ComSignalReadSignal snippet */
; ..\component\Com\Implementation\Com.c	  1595  #if ((COM_EXISTS_FLOAT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1596  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1597  *  Com_Signal_ReadSignal_Float32
; ..\component\Com\Implementation\Com.c	  1598  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1599  /*!
; ..\component\Com\Implementation\Com.c	  1600      \brief        Reads the related Signal value from the passed PDU buffer.
; ..\component\Com\Implementation\Com.c	  1601      \details      -
; ..\component\Com\Implementation\Com.c	  1602      \pre          -
; ..\component\Com\Implementation\Com.c	  1603      \param[in]    idxRxAccessInfo      index of ComSignal.
; ..\component\Com\Implementation\Com.c	  1604      \param[in]    SignalBusSourcePtr buffer the value is read from.
; ..\component\Com\Implementation\Com.c	  1605      \return       ApplType specific read value
; ..\component\Com\Implementation\Com.c	  1606  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1607  LOCAL_INLINE FUNC(float32, COM_CODE) Com_Signal_ReadSignal_Float32(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr);
; ..\component\Com\Implementation\Com.c	  1608  #endif
; ..\component\Com\Implementation\Com.c	  1609  /* jet: ComSignalReadSignal snippet */
; ..\component\Com\Implementation\Com.c	  1610  #if ((COM_EXISTS_FLOAT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1611  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1612  *  Com_Signal_ReadSignal_Float64
; ..\component\Com\Implementation\Com.c	  1613  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1614  /*!
; ..\component\Com\Implementation\Com.c	  1615      \brief        Reads the related Signal value from the passed PDU buffer.
; ..\component\Com\Implementation\Com.c	  1616      \details      -
; ..\component\Com\Implementation\Com.c	  1617      \pre          -
; ..\component\Com\Implementation\Com.c	  1618      \param[in]    idxRxAccessInfo      index of ComSignal.
; ..\component\Com\Implementation\Com.c	  1619      \param[in]    SignalBusSourcePtr buffer the value is read from.
; ..\component\Com\Implementation\Com.c	  1620      \return       ApplType specific read value
; ..\component\Com\Implementation\Com.c	  1621  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1622  LOCAL_INLINE FUNC(float64, COM_CODE) Com_Signal_ReadSignal_Float64(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr);
; ..\component\Com\Implementation\Com.c	  1623  #endif
; ..\component\Com\Implementation\Com.c	  1624  
; ..\component\Com\Implementation\Com.c	  1625  
; ..\component\Com\Implementation\Com.c	  1626  
; ..\component\Com\Implementation\Com.c	  1627  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  1628  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT8 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT8 == STD_ON))
; ..\component\Com\Implementation\Com.c	  1629  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1630  *  Com_Signal_UInt8_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  1631  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1632  /*!
; ..\component\Com\Implementation\Com.c	  1633      \brief        Checks if the new value is within the configured range.
; ..\component\Com\Implementation\Com.c	  1634      \details      -
; ..\component\Com\Implementation\Com.c	  1635      \pre          -
; ..\component\Com\Implementation\Com.c	  1636      \param[in]    idxFilterInfo      index of filter info
; ..\component\Com\Implementation\Com.c	  1637      \param[in]    newValue           new value
; ..\component\Com\Implementation\Com.c	  1638      \return       filter result
; ..\component\Com\Implementation\Com.c	  1639  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1640  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt8_NewIsWithIn(Com_FilterInfo_UInt8IterType idxFilterInfo, uint8 newValue);
; ..\component\Com\Implementation\Com.c	  1641  #endif
; ..\component\Com\Implementation\Com.c	  1642  
; ..\component\Com\Implementation\Com.c	  1643  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  1644  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT8 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT8 == STD_ON))
; ..\component\Com\Implementation\Com.c	  1645  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1646  *  Com_Signal_SInt8_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  1647  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1648  /*!
; ..\component\Com\Implementation\Com.c	  1649      \brief        Checks if the new value is within the configured range.
; ..\component\Com\Implementation\Com.c	  1650      \details      -
; ..\component\Com\Implementation\Com.c	  1651      \pre          -
; ..\component\Com\Implementation\Com.c	  1652      \param[in]    idxFilterInfo      index of filter info
; ..\component\Com\Implementation\Com.c	  1653      \param[in]    newValue           new value
; ..\component\Com\Implementation\Com.c	  1654      \return       filter result
; ..\component\Com\Implementation\Com.c	  1655  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1656  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt8_NewIsWithIn(Com_FilterInfo_SInt8IterType idxFilterInfo, sint8 newValue);
; ..\component\Com\Implementation\Com.c	  1657  #endif
; ..\component\Com\Implementation\Com.c	  1658  
; ..\component\Com\Implementation\Com.c	  1659  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  1660  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT16 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT16 == STD_ON))
; ..\component\Com\Implementation\Com.c	  1661  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1662  *  Com_Signal_UInt16_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  1663  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1664  /*!
; ..\component\Com\Implementation\Com.c	  1665      \brief        Checks if the new value is within the configured range.
; ..\component\Com\Implementation\Com.c	  1666      \details      -
; ..\component\Com\Implementation\Com.c	  1667      \pre          -
; ..\component\Com\Implementation\Com.c	  1668      \param[in]    idxFilterInfo      index of filter info
; ..\component\Com\Implementation\Com.c	  1669      \param[in]    newValue           new value
; ..\component\Com\Implementation\Com.c	  1670      \return       filter result
; ..\component\Com\Implementation\Com.c	  1671  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1672  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt16_NewIsWithIn(Com_FilterInfo_UInt16IterType idxFilterInfo, uint16 newValue);
; ..\component\Com\Implementation\Com.c	  1673  #endif
; ..\component\Com\Implementation\Com.c	  1674  
; ..\component\Com\Implementation\Com.c	  1675  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  1676  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT16 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT16 == STD_ON))
; ..\component\Com\Implementation\Com.c	  1677  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1678  *  Com_Signal_SInt16_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  1679  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1680  /*!
; ..\component\Com\Implementation\Com.c	  1681      \brief        Checks if the new value is within the configured range.
; ..\component\Com\Implementation\Com.c	  1682      \details      -
; ..\component\Com\Implementation\Com.c	  1683      \pre          -
; ..\component\Com\Implementation\Com.c	  1684      \param[in]    idxFilterInfo      index of filter info
; ..\component\Com\Implementation\Com.c	  1685      \param[in]    newValue           new value
; ..\component\Com\Implementation\Com.c	  1686      \return       filter result
; ..\component\Com\Implementation\Com.c	  1687  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1688  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt16_NewIsWithIn(Com_FilterInfo_SInt16IterType idxFilterInfo, sint16 newValue);
; ..\component\Com\Implementation\Com.c	  1689  #endif
; ..\component\Com\Implementation\Com.c	  1690  
; ..\component\Com\Implementation\Com.c	  1691  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  1692  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT32 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT32 == STD_ON))
; ..\component\Com\Implementation\Com.c	  1693  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1694  *  Com_Signal_UInt32_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  1695  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1696  /*!
; ..\component\Com\Implementation\Com.c	  1697      \brief        Checks if the new value is within the configured range.
; ..\component\Com\Implementation\Com.c	  1698      \details      -
; ..\component\Com\Implementation\Com.c	  1699      \pre          -
; ..\component\Com\Implementation\Com.c	  1700      \param[in]    idxFilterInfo      index of filter info
; ..\component\Com\Implementation\Com.c	  1701      \param[in]    newValue           new value
; ..\component\Com\Implementation\Com.c	  1702      \return       filter result
; ..\component\Com\Implementation\Com.c	  1703  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1704  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt32_NewIsWithIn(Com_FilterInfo_UInt32IterType idxFilterInfo, uint32 newValue);
; ..\component\Com\Implementation\Com.c	  1705  #endif
; ..\component\Com\Implementation\Com.c	  1706  
; ..\component\Com\Implementation\Com.c	  1707  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  1708  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT32 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT32 == STD_ON))
; ..\component\Com\Implementation\Com.c	  1709  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1710  *  Com_Signal_SInt32_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  1711  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1712  /*!
; ..\component\Com\Implementation\Com.c	  1713      \brief        Checks if the new value is within the configured range.
; ..\component\Com\Implementation\Com.c	  1714      \details      -
; ..\component\Com\Implementation\Com.c	  1715      \pre          -
; ..\component\Com\Implementation\Com.c	  1716      \param[in]    idxFilterInfo      index of filter info
; ..\component\Com\Implementation\Com.c	  1717      \param[in]    newValue           new value
; ..\component\Com\Implementation\Com.c	  1718      \return       filter result
; ..\component\Com\Implementation\Com.c	  1719  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1720  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt32_NewIsWithIn(Com_FilterInfo_SInt32IterType idxFilterInfo, sint32 newValue);
; ..\component\Com\Implementation\Com.c	  1721  #endif
; ..\component\Com\Implementation\Com.c	  1722  
; ..\component\Com\Implementation\Com.c	  1723  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  1724  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT64 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT64 == STD_ON))
; ..\component\Com\Implementation\Com.c	  1725  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1726  *  Com_Signal_UInt64_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  1727  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1728  /*!
; ..\component\Com\Implementation\Com.c	  1729      \brief        Checks if the new value is within the configured range.
; ..\component\Com\Implementation\Com.c	  1730      \details      -
; ..\component\Com\Implementation\Com.c	  1731      \pre          -
; ..\component\Com\Implementation\Com.c	  1732      \param[in]    idxFilterInfo      index of filter info
; ..\component\Com\Implementation\Com.c	  1733      \param[in]    newValue           new value
; ..\component\Com\Implementation\Com.c	  1734      \return       filter result
; ..\component\Com\Implementation\Com.c	  1735  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1736  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt64_NewIsWithIn(Com_FilterInfo_UInt64IterType idxFilterInfo, uint64 newValue);
; ..\component\Com\Implementation\Com.c	  1737  #endif
; ..\component\Com\Implementation\Com.c	  1738  
; ..\component\Com\Implementation\Com.c	  1739  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  1740  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT64 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT64 == STD_ON))
; ..\component\Com\Implementation\Com.c	  1741  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1742  *  Com_Signal_SInt64_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  1743  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1744  /*!
; ..\component\Com\Implementation\Com.c	  1745      \brief        Checks if the new value is within the configured range.
; ..\component\Com\Implementation\Com.c	  1746      \details      -
; ..\component\Com\Implementation\Com.c	  1747      \pre          -
; ..\component\Com\Implementation\Com.c	  1748      \param[in]    idxFilterInfo      index of filter info
; ..\component\Com\Implementation\Com.c	  1749      \param[in]    newValue           new value
; ..\component\Com\Implementation\Com.c	  1750      \return       filter result
; ..\component\Com\Implementation\Com.c	  1751  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1752  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt64_NewIsWithIn(Com_FilterInfo_SInt64IterType idxFilterInfo, sint64 newValue);
; ..\component\Com\Implementation\Com.c	  1753  #endif
; ..\component\Com\Implementation\Com.c	  1754  
; ..\component\Com\Implementation\Com.c	  1755  
; ..\component\Com\Implementation\Com.c	  1756  
; ..\component\Com\Implementation\Com.c	  1757  
; ..\component\Com\Implementation\Com.c	  1758  #if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  1759  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1760    Com_RxDlMon_MainFunctionRx
; ..\component\Com\Implementation\Com.c	  1761  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1762  /*! \brief    This function initiates the Rx Deadline Monitoring processing.
; ..\component\Com\Implementation\Com.c	  1763      \details  -
; ..\component\Com\Implementation\Com.c	  1764      \pre      -
; ..\component\Com\Implementation\Com.c	  1765      \trace    SPEC-2736949
; ..\component\Com\Implementation\Com.c	  1766      \context  TASK
; ..\component\Com\Implementation\Com.c	  1767  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1768  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_MainFunctionRx(void);
; ..\component\Com\Implementation\Com.c	  1769  
; ..\component\Com\Implementation\Com.c	  1770  
; ..\component\Com\Implementation\Com.c	  1771  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	  1772  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1773    Com_RxDlMon_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	  1774  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1775  /*! \brief    This function enters the rx deadline monitoring exclusive area.
; ..\component\Com\Implementation\Com.c	  1776      \details  -
; ..\component\Com\Implementation\Com.c	  1777      \pre      -
; ..\component\Com\Implementation\Com.c	  1778      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  1779      \context  TASK
; ..\component\Com\Implementation\Com.c	  1780  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1781  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_EnterExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	  1782  
; ..\component\Com\Implementation\Com.c	  1783  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1784    Com_RxDlMon_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	  1785  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1786  /*! \brief    This function exits the rx deadline monitoring exclusive area.
; ..\component\Com\Implementation\Com.c	  1787      \details  -
; ..\component\Com\Implementation\Com.c	  1788      \pre      -
; ..\component\Com\Implementation\Com.c	  1789      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  1790      \context  TASK
; ..\component\Com\Implementation\Com.c	  1791  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1792  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_ExitExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	  1793  
; ..\component\Com\Implementation\Com.c	  1794  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1795    Com_RxDlMon_ThresholdCheck
; ..\component\Com\Implementation\Com.c	  1796  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1797  /*! \brief    This function checks if the ISR Lock must be opened
; ..\component\Com\Implementation\Com.c	  1798      \details  -
; ..\component\Com\Implementation\Com.c	  1799      \pre      -
; ..\component\Com\Implementation\Com.c	  1800      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  1801      \context  TASK
; ..\component\Com\Implementation\Com.c	  1802  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1803  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_ThresholdCheck(void);
; ..\component\Com\Implementation\Com.c	  1804  
; ..\component\Com\Implementation\Com.c	  1805  #endif
; ..\component\Com\Implementation\Com.c	  1806  
; ..\component\Com\Implementation\Com.c	  1807  #if (COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  1808  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1809    Com_RxDlMon_InitRxIpdu
; ..\component\Com\Implementation\Com.c	  1810  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1811  /*! \brief        This function initializes the Rx deadline monitoring parameters of the passed Rx ComIPdu
; ..\component\Com\Implementation\Com.c	  1812      \details      -
; ..\component\Com\Implementation\Com.c	  1813      \pre          -
; ..\component\Com\Implementation\Com.c	  1814      \param[in]    ComPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	  1815      \context      TASK
; ..\component\Com\Implementation\Com.c	  1816  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1817  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_InitRxIpdu(PduIdType ComPduId);
; ..\component\Com\Implementation\Com.c	  1818  #endif
; ..\component\Com\Implementation\Com.c	  1819  
; ..\component\Com\Implementation\Com.c	  1820  #if (COM_RXTOUTINFOUSEDOFRXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  1821  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1822    Com_RxDlMon_SigEvent
; ..\component\Com\Implementation\Com.c	  1823  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1824  /*! \brief        This function reloads the timeout counter value of the passed Rx ComSignal
; ..\component\Com\Implementation\Com.c	  1825      \details      -
; ..\component\Com\Implementation\Com.c	  1826      \pre          -
; ..\component\Com\Implementation\Com.c	  1827      \param[in]    idxRxSigInfo Handle Id of Rx ComSignal
; ..\component\Com\Implementation\Com.c	  1828      \trace        SPEC-2736869
; ..\component\Com\Implementation\Com.c	  1829      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1830  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1831  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_SigEvent(Com_RxSigInfoIterType idxRxSigInfo);
; ..\component\Com\Implementation\Com.c	  1832  #endif
; ..\component\Com\Implementation\Com.c	  1833  
; ..\component\Com\Implementation\Com.c	  1834  #if (COM_RXTOUTINFOUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  1835  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1836    Com_RxDlMon_SigGrpEvent
; ..\component\Com\Implementation\Com.c	  1837  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1838  /*! \brief        This function reloads the timeout counter value of the passed Rx ComSignalGroup
; ..\component\Com\Implementation\Com.c	  1839      \details      -
; ..\component\Com\Implementation\Com.c	  1840      \pre          -
; ..\component\Com\Implementation\Com.c	  1841      \param[in]    idxRxSigGrpInfo Handle Id of Rx ComSignalGroup
; ..\component\Com\Implementation\Com.c	  1842      \trace        SPEC-2736869
; ..\component\Com\Implementation\Com.c	  1843      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  1844  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1845  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_SigGrpEvent(Com_RxSigGrpInfoIterType idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	  1846  #endif
; ..\component\Com\Implementation\Com.c	  1847  
; ..\component\Com\Implementation\Com.c	  1848  #if (COM_RXACCESSINFOREPLACESIGINDENDIDXOFRXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  1849  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1850    Com_RxDlMon_SignalTimeoutAction
; ..\component\Com\Implementation\Com.c	  1851  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1852  /*! \brief        This function sets all related ComSignal replace values of passed timeout pdu.
; ..\component\Com\Implementation\Com.c	  1853      \details      -
; ..\component\Com\Implementation\Com.c	  1854      \pre          -
; ..\component\Com\Implementation\Com.c	  1855      \param[in]    idxRxTOutInfo RxToutInfo handle id
; ..\component\Com\Implementation\Com.c	  1856      \context      TASK
; ..\component\Com\Implementation\Com.c	  1857  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1858  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_SignalTimeoutAction(Com_SizeOfRxTOutInfoType idxRxTOutInfo);
; ..\component\Com\Implementation\Com.c	  1859  #endif
; ..\component\Com\Implementation\Com.c	  1860  
; ..\component\Com\Implementation\Com.c	  1861  #if (COM_RXACCESSINFOREPLACEGRPSIGINDENDIDXOFRXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  1862  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1863    Com_RxDlMon_GroupSignalTimeoutAction
; ..\component\Com\Implementation\Com.c	  1864  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1865  /*! \brief        This function sets all related ComGroupSignal replace values of passed timeout pdu.
; ..\component\Com\Implementation\Com.c	  1866      \details      -
; ..\component\Com\Implementation\Com.c	  1867      \pre          -
; ..\component\Com\Implementation\Com.c	  1868      \param[in]    idxRxTOutInfo RxToutInfo handle id
; ..\component\Com\Implementation\Com.c	  1869      \context      TASK
; ..\component\Com\Implementation\Com.c	  1870  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1871  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_GroupSignalTimeoutAction(Com_SizeOfRxTOutInfoType idxRxTOutInfo);
; ..\component\Com\Implementation\Com.c	  1872  #endif
; ..\component\Com\Implementation\Com.c	  1873  
; ..\component\Com\Implementation\Com.c	  1874  #if (COM_CBKRXTOUTFUNCPTRINDUSEDOFRXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  1875  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1876    Com_RxDlMon_CallTimeOutNotifications
; ..\component\Com\Implementation\Com.c	  1877  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1878  /*! \brief        This function calls the related timeout notification functions.
; ..\component\Com\Implementation\Com.c	  1879      \details      -
; ..\component\Com\Implementation\Com.c	  1880      \pre          -
; ..\component\Com\Implementation\Com.c	  1881      \param[in]    idxRxTOutInfo RxToutInfo handle id
; ..\component\Com\Implementation\Com.c	  1882      \context      TASK
; ..\component\Com\Implementation\Com.c	  1883  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1884  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_CallTimeOutNotifications(Com_SizeOfRxTOutInfoType idxRxTOutInfo);
; ..\component\Com\Implementation\Com.c	  1885  #endif
; ..\component\Com\Implementation\Com.c	  1886  
; ..\component\Com\Implementation\Com.c	  1887  
; ..\component\Com\Implementation\Com.c	  1888  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  1889  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT8_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1890  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1891    Com_RxInv_Sig_UInt8_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  1892  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1893  /*!
; ..\component\Com\Implementation\Com.c	  1894   * \brief       Checks if the received value is an invalid value
; ..\component\Com\Implementation\Com.c	  1895   * \details     -
; ..\component\Com\Implementation\Com.c	  1896   * \pre         -
; ..\component\Com\Implementation\Com.c	  1897   * \param[in]   idxRxAccessInfo   index of Rx SigInfo
; ..\component\Com\Implementation\Com.c	  1898   * \param[in]   tmpNewValue       received value
; ..\component\Com\Implementation\Com.c	  1899   * \return      Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  1900  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1901  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_UInt8_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, uint8 tmpNewValue);
; ..\component\Com\Implementation\Com.c	  1902  #endif
; ..\component\Com\Implementation\Com.c	  1903  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  1904  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT8_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1905  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1906    Com_RxInv_Sig_SInt8_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  1907  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1908  /*!
; ..\component\Com\Implementation\Com.c	  1909   * \brief       Checks if the received value is an invalid value
; ..\component\Com\Implementation\Com.c	  1910   * \details     -
; ..\component\Com\Implementation\Com.c	  1911   * \pre         -
; ..\component\Com\Implementation\Com.c	  1912   * \param[in]   idxRxAccessInfo   index of Rx SigInfo
; ..\component\Com\Implementation\Com.c	  1913   * \param[in]   tmpNewValue       received value
; ..\component\Com\Implementation\Com.c	  1914   * \return      Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  1915  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1916  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_SInt8_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, sint8 tmpNewValue);
; ..\component\Com\Implementation\Com.c	  1917  #endif
; ..\component\Com\Implementation\Com.c	  1918  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  1919  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT16_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1920  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1921    Com_RxInv_Sig_UInt16_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  1922  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1923  /*!
; ..\component\Com\Implementation\Com.c	  1924   * \brief       Checks if the received value is an invalid value
; ..\component\Com\Implementation\Com.c	  1925   * \details     -
; ..\component\Com\Implementation\Com.c	  1926   * \pre         -
; ..\component\Com\Implementation\Com.c	  1927   * \param[in]   idxRxAccessInfo   index of Rx SigInfo
; ..\component\Com\Implementation\Com.c	  1928   * \param[in]   tmpNewValue       received value
; ..\component\Com\Implementation\Com.c	  1929   * \return      Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  1930  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1931  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_UInt16_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, uint16 tmpNewValue);
; ..\component\Com\Implementation\Com.c	  1932  #endif
; ..\component\Com\Implementation\Com.c	  1933  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  1934  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT16_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1935  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1936    Com_RxInv_Sig_SInt16_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  1937  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1938  /*!
; ..\component\Com\Implementation\Com.c	  1939   * \brief       Checks if the received value is an invalid value
; ..\component\Com\Implementation\Com.c	  1940   * \details     -
; ..\component\Com\Implementation\Com.c	  1941   * \pre         -
; ..\component\Com\Implementation\Com.c	  1942   * \param[in]   idxRxAccessInfo   index of Rx SigInfo
; ..\component\Com\Implementation\Com.c	  1943   * \param[in]   tmpNewValue       received value
; ..\component\Com\Implementation\Com.c	  1944   * \return      Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  1945  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1946  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_SInt16_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, sint16 tmpNewValue);
; ..\component\Com\Implementation\Com.c	  1947  #endif
; ..\component\Com\Implementation\Com.c	  1948  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  1949  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT32_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1950  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1951    Com_RxInv_Sig_UInt32_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  1952  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1953  /*!
; ..\component\Com\Implementation\Com.c	  1954   * \brief       Checks if the received value is an invalid value
; ..\component\Com\Implementation\Com.c	  1955   * \details     -
; ..\component\Com\Implementation\Com.c	  1956   * \pre         -
; ..\component\Com\Implementation\Com.c	  1957   * \param[in]   idxRxAccessInfo   index of Rx SigInfo
; ..\component\Com\Implementation\Com.c	  1958   * \param[in]   tmpNewValue       received value
; ..\component\Com\Implementation\Com.c	  1959   * \return      Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  1960  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1961  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_UInt32_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, uint32 tmpNewValue);
; ..\component\Com\Implementation\Com.c	  1962  #endif
; ..\component\Com\Implementation\Com.c	  1963  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  1964  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT32_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1965  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1966    Com_RxInv_Sig_SInt32_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  1967  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1968  /*!
; ..\component\Com\Implementation\Com.c	  1969   * \brief       Checks if the received value is an invalid value
; ..\component\Com\Implementation\Com.c	  1970   * \details     -
; ..\component\Com\Implementation\Com.c	  1971   * \pre         -
; ..\component\Com\Implementation\Com.c	  1972   * \param[in]   idxRxAccessInfo   index of Rx SigInfo
; ..\component\Com\Implementation\Com.c	  1973   * \param[in]   tmpNewValue       received value
; ..\component\Com\Implementation\Com.c	  1974   * \return      Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  1975  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1976  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_SInt32_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, sint32 tmpNewValue);
; ..\component\Com\Implementation\Com.c	  1977  #endif
; ..\component\Com\Implementation\Com.c	  1978  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  1979  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT64_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1980  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1981    Com_RxInv_Sig_UInt64_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  1982  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1983  /*!
; ..\component\Com\Implementation\Com.c	  1984   * \brief       Checks if the received value is an invalid value
; ..\component\Com\Implementation\Com.c	  1985   * \details     -
; ..\component\Com\Implementation\Com.c	  1986   * \pre         -
; ..\component\Com\Implementation\Com.c	  1987   * \param[in]   idxRxAccessInfo   index of Rx SigInfo
; ..\component\Com\Implementation\Com.c	  1988   * \param[in]   tmpNewValue       received value
; ..\component\Com\Implementation\Com.c	  1989   * \return      Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  1990  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1991  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_UInt64_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, uint64 tmpNewValue);
; ..\component\Com\Implementation\Com.c	  1992  #endif
; ..\component\Com\Implementation\Com.c	  1993  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  1994  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT64_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  1995  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  1996    Com_RxInv_Sig_SInt64_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  1997  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  1998  /*!
; ..\component\Com\Implementation\Com.c	  1999   * \brief       Checks if the received value is an invalid value
; ..\component\Com\Implementation\Com.c	  2000   * \details     -
; ..\component\Com\Implementation\Com.c	  2001   * \pre         -
; ..\component\Com\Implementation\Com.c	  2002   * \param[in]   idxRxAccessInfo   index of Rx SigInfo
; ..\component\Com\Implementation\Com.c	  2003   * \param[in]   tmpNewValue       received value
; ..\component\Com\Implementation\Com.c	  2004   * \return      Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  2005  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2006  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_SInt64_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, sint64 tmpNewValue);
; ..\component\Com\Implementation\Com.c	  2007  #endif
; ..\component\Com\Implementation\Com.c	  2008  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  2009  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_FLOAT32_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2010  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2011    Com_RxInv_Sig_Float32_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  2012  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2013  /*!
; ..\component\Com\Implementation\Com.c	  2014   * \brief       Checks if the received value is an invalid value
; ..\component\Com\Implementation\Com.c	  2015   * \details     -
; ..\component\Com\Implementation\Com.c	  2016   * \pre         -
; ..\component\Com\Implementation\Com.c	  2017   * \param[in]   idxRxAccessInfo   index of Rx SigInfo
; ..\component\Com\Implementation\Com.c	  2018   * \param[in]   tmpNewValue       received value
; ..\component\Com\Implementation\Com.c	  2019   * \return      Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  2020  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2021  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_Float32_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, float32 tmpNewValue);
; ..\component\Com\Implementation\Com.c	  2022  #endif
; ..\component\Com\Implementation\Com.c	  2023  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  2024  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_FLOAT64_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2025  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2026    Com_RxInv_Sig_Float64_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  2027  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2028  /*!
; ..\component\Com\Implementation\Com.c	  2029   * \brief       Checks if the received value is an invalid value
; ..\component\Com\Implementation\Com.c	  2030   * \details     -
; ..\component\Com\Implementation\Com.c	  2031   * \pre         -
; ..\component\Com\Implementation\Com.c	  2032   * \param[in]   idxRxAccessInfo   index of Rx SigInfo
; ..\component\Com\Implementation\Com.c	  2033   * \param[in]   tmpNewValue       received value
; ..\component\Com\Implementation\Com.c	  2034   * \return      Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  2035  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2036  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_Float64_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, float64 tmpNewValue);
; ..\component\Com\Implementation\Com.c	  2037  #endif
; ..\component\Com\Implementation\Com.c	  2038  
; ..\component\Com\Implementation\Com.c	  2039  #if ((COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT8_N_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2040  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2041    Com_RxInv_Sig_UInt8_N_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  2042  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2043  /*!
; ..\component\Com\Implementation\Com.c	  2044   * \brief         Checks if the received value is an invalid value
; ..\component\Com\Implementation\Com.c	  2045   * \details       -
; ..\component\Com\Implementation\Com.c	  2046   * \pre           -
; ..\component\Com\Implementation\Com.c	  2047   * \param[in]     idxRxAccessInfo index of Rx AccessInfo
; ..\component\Com\Implementation\Com.c	  2048   * \param[in]     newValue pointer to new value
; ..\component\Com\Implementation\Com.c	  2049   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  2050  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2051  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_UInt8_N_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, AUTOMATIC) newValue);
; ..\component\Com\Implementation\Com.c	  2052  #endif
; ..\component\Com\Implementation\Com.c	  2053  
; ..\component\Com\Implementation\Com.c	  2054  
; ..\component\Com\Implementation\Com.c	  2055  #if ((COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON) && (COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2056  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2057    Com_RxInv_Sig_UInt8_Dyn_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  2058  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2059  /*!
; ..\component\Com\Implementation\Com.c	  2060   * \brief         Checks if the received value is an invalid value
; ..\component\Com\Implementation\Com.c	  2061   * \details       -
; ..\component\Com\Implementation\Com.c	  2062   * \pre           -
; ..\component\Com\Implementation\Com.c	  2063   * \param[in]     idxRxAccessInfo index of Rx AccessInfo
; ..\component\Com\Implementation\Com.c	  2064   * \param[in]     newValue pointer to new value
; ..\component\Com\Implementation\Com.c	  2065   * \param[in]     sduLength new dynamic length
; ..\component\Com\Implementation\Com.c	  2066   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  2067  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2068  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_UInt8_Dyn_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, AUTOMATIC) newValue,
; ..\component\Com\Implementation\Com.c	  2069                                                                                                  PduLengthType sduLength);
; ..\component\Com\Implementation\Com.c	  2070  #endif
; ..\component\Com\Implementation\Com.c	  2071  
; ..\component\Com\Implementation\Com.c	  2072  
; ..\component\Com\Implementation\Com.c	  2073  #if (COM_INVEVENTOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2074  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2075    Com_RxInv_SigGrp
; ..\component\Com\Implementation\Com.c	  2076  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2077  /*! \brief             This function evaluates whether any new value of the a ComGroupSignals is an invalid value
; ..\component\Com\Implementation\Com.c	  2078      \details           -
; ..\component\Com\Implementation\Com.c	  2079      \pre               -
; ..\component\Com\Implementation\Com.c	  2080      \param[in]         idxRxSigGrpInfo index of Rx SigGrpInfo
; ..\component\Com\Implementation\Com.c	  2081      \param[in,out]     fctPtrCacheStrctPtr  pointer containing all function pointer cache informations (location, size index)
; ..\component\Com\Implementation\Com.c	  2082      \param[in]         sduLength Length of Sdu
; ..\component\Com\Implementation\Com.c	  2083      \return            Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  2084      \context           TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2085  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2086  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_SigGrp(Com_RxSigGrpInfoIterType idxRxSigGrpInfo, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr,
; ..\component\Com\Implementation\Com.c	  2087                                                                      PduLengthType sduLength);
; ..\component\Com\Implementation\Com.c	  2088  #endif
; ..\component\Com\Implementation\Com.c	  2089  
; ..\component\Com\Implementation\Com.c	  2090  #if (COM_INVEVENTOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2091  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2092    Com_RxInv_GrpSigHasInvalidValue
; ..\component\Com\Implementation\Com.c	  2093  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2094  /*! \brief        This function checks if an invalid value has been assigned to the group signal
; ..\component\Com\Implementation\Com.c	  2095      \details      -
; ..\component\Com\Implementation\Com.c	  2096      \pre          -
; ..\component\Com\Implementation\Com.c	  2097      \param[in]    idxRxAccessInfo Index of group signal
; ..\component\Com\Implementation\Com.c	  2098      \param[in]    sduLength  Length of the received Sdu
; ..\component\Com\Implementation\Com.c	  2099      \return       Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  2100      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2101  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2102  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_GrpSigHasInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, PduLengthType sduLength);
; ..\component\Com\Implementation\Com.c	  2103  #endif
; ..\component\Com\Implementation\Com.c	  2104  
; ..\component\Com\Implementation\Com.c	  2105  #if (COM_INVEVENTOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2106  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2107    Com_RxInv_SigGrpPerfomInvalidAction
; ..\component\Com\Implementation\Com.c	  2108  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2109  /*! \brief             This function performs the configured invalid action (replace/notify)
; ..\component\Com\Implementation\Com.c	  2110      \details           -
; ..\component\Com\Implementation\Com.c	  2111      \pre               -
; ..\component\Com\Implementation\Com.c	  2112      \param[in]         idxRxSigGrpInfo - Index of RxSigGrpInfo
; ..\component\Com\Implementation\Com.c	  2113      \param[in,out]     fctPtrCacheStrctPtr -  Pointer containing all information of function pointer cache (size, location, index)
; ..\component\Com\Implementation\Com.c	  2114  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2115  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxInv_SigGrpPerfomInvalidAction(Com_RxSigGrpInfoIterType idxRxSigGrpInfo, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr);
; ..\component\Com\Implementation\Com.c	  2116  #endif
; ..\component\Com\Implementation\Com.c	  2117  
; ..\component\Com\Implementation\Com.c	  2118  #if (((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) || (COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFRXACCESSINFO == STD_ON)) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2119  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2120    Com_RxInv_Sig_PerformInvalidAction
; ..\component\Com\Implementation\Com.c	  2121  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2122  /*! \brief            This function performs the configured invalid action (replace/notify)
; ..\component\Com\Implementation\Com.c	  2123      \details          -
; ..\component\Com\Implementation\Com.c	  2124      \pre              -
; ..\component\Com\Implementation\Com.c	  2125      \param[in]        idxRxSigInfo - Index of RxSigInfo
; ..\component\Com\Implementation\Com.c	  2126      \param[in,out]    fctPtrCacheStrctPtr - Pointer to function pointer struct containing all cache managment attributes
; ..\component\Com\Implementation\Com.c	  2127                                      (Cache location, size, index).
; ..\component\Com\Implementation\Com.c	  2128  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2129  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxInv_Sig_PerformInvalidAction(Com_RxSigInfoIterType idxRxSigInfo, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr);
; ..\component\Com\Implementation\Com.c	  2130  #endif
; ..\component\Com\Implementation\Com.c	  2131  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2132  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2133    Com_RxIndication_Processing
; ..\component\Com\Implementation\Com.c	  2134  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2135  /*! \brief        This function is called by Com_RxIndication_Processing after an I-PDU has been received.
; ..\component\Com\Implementation\Com.c	  2136      \details      -
; ..\component\Com\Implementation\Com.c	  2137      \pre          -
; ..\component\Com\Implementation\Com.c	  2138      \param[in]    RxPduId      ID of I-PDU that has been received. Identifies the data that has been received.
; ..\component\Com\Implementation\Com.c	  2139                                 Range: 0..(maximum number of I-PDU IDs received by AUTOSAR COM) - 1
; ..\component\Com\Implementation\Com.c	  2140      \param[in]    PduInfoPtr   Payload information of the received I-PDU (pointer to data and data length).
; ..\component\Com\Implementation\Com.c	  2141      \return       TRUE         If Pdu was processed
; ..\component\Com\Implementation\Com.c	  2142                    FALSE        otherwise
; ..\component\Com\Implementation\Com.c	  2143      \trace        SPEC-2736845, SPEC-2736846
; ..\component\Com\Implementation\Com.c	  2144      \trace        CREQ-103160
; ..\component\Com\Implementation\Com.c	  2145      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2146  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2147  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_RxIndication_Processing(PduIdType RxPduId, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr);
; ..\component\Com\Implementation\Com.c	  2148  #endif
; ..\component\Com\Implementation\Com.c	  2149  
; ..\component\Com\Implementation\Com.c	  2150  #if (COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2151  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2152    Com_TpRxIndication_Processing
; ..\component\Com\Implementation\Com.c	  2153  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2154  /*! \brief    This function is called by Com_TpRxIndication after a TP I-PDU has been received.
; ..\component\Com\Implementation\Com.c	  2155      \details  -
; ..\component\Com\Implementation\Com.c	  2156      \pre      -
; ..\component\Com\Implementation\Com.c	  2157      \param[in]    PduId      ID of I-PDU that has been received. Identifies the data that has been received.
; ..\component\Com\Implementation\Com.c	  2158                               Range: 0..(maximum number of I-PDU IDs received by AUTOSAR COM) - 1
; ..\component\Com\Implementation\Com.c	  2159      \param[in]    Result     Indicates whether the message was received successfully.
; ..\component\Com\Implementation\Com.c	  2160      \context  TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2161  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2162  LOCAL_INLINE FUNC(void, COM_CODE) Com_TpRxIndication_Processing(PduIdType PduId, Std_ReturnType Result);
; ..\component\Com\Implementation\Com.c	  2163  #endif
; ..\component\Com\Implementation\Com.c	  2164  
; ..\component\Com\Implementation\Com.c	  2165  #if (COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2166  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2167    Com_ResetRxTpConnection
; ..\component\Com\Implementation\Com.c	  2168  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2169  /*! \brief        This function is called to reset the Rx TP connection.
; ..\component\Com\Implementation\Com.c	  2170      \details      -
; ..\component\Com\Implementation\Com.c	  2171      \pre          -
; ..\component\Com\Implementation\Com.c	  2172      \param[in]    PduId      ID of I-PDU whose TP connection shall be reset.
; ..\component\Com\Implementation\Com.c	  2173      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2174  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2175  LOCAL_INLINE FUNC(void, COM_CODE) Com_ResetRxTpConnection(PduIdType PduId);
; ..\component\Com\Implementation\Com.c	  2176  #endif
; ..\component\Com\Implementation\Com.c	  2177  
; ..\component\Com\Implementation\Com.c	  2178  #if (COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2179  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2180    Com_CopyRxData_Processing
; ..\component\Com\Implementation\Com.c	  2181  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2182  /*! \brief        This function is called by the lower layer to hand a received TP segment to Com.
; ..\component\Com\Implementation\Com.c	  2183                    The Com copies the received segment in his internal tp buffer.
; ..\component\Com\Implementation\Com.c	  2184      \details      -
; ..\component\Com\Implementation\Com.c	  2185      \pre          -
; ..\component\Com\Implementation\Com.c	  2186      \param[in]    PduId              ID of AUTOSAR COM I-PDU that has been received. Identifies the data that has been received.
; ..\component\Com\Implementation\Com.c	  2187      \param[in]    PduInfoPointer     Payload information of the received TP segment (pointer to data and data length).
; ..\component\Com\Implementation\Com.c	  2188      \param[out]   RxBufferSizePtr    The Com returns in this value the remaining TP buffer size to the lower layer.
; ..\component\Com\Implementation\Com.c	  2189      \return       BufReq_ReturnType  BUFREQ_OK:       Connection has been accepted.
; ..\component\Com\Implementation\Com.c	  2190                                                        RxBufferSizePtr indicates the available receive buffer.
; ..\component\Com\Implementation\Com.c	  2191                                       BUFREQ_E_NOT_OK: Connection has been rejected.
; ..\component\Com\Implementation\Com.c	  2192                                                        RxBufferSizePtr remains unchanged.
; ..\component\Com\Implementation\Com.c	  2193      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2194      \synchronous  TRUE
; ..\component\Com\Implementation\Com.c	  2195      \reentrant    TRUE, for different Handles
; ..\component\Com\Implementation\Com.c	  2196  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2197  LOCAL_INLINE FUNC(BufReq_ReturnType, COM_CODE) Com_CopyRxData_Processing(PduIdType PduId, CONSTP2VAR(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPointer,
; ..\component\Com\Implementation\Com.c	  2198                                                                           P2VAR(PduLengthType, AUTOMATIC, COM_APPL_VAR) RxBufferSizePtr);
; ..\component\Com\Implementation\Com.c	  2199  #endif
; ..\component\Com\Implementation\Com.c	  2200  #if ((COM_RECEIVE_SIGNAL_MACRO_API == STD_OFF) && (COM_RXACCESSINFO == STD_ON) && ((COM_BUFFERUSEDOFRXACCESSINFO == STD_ON) || (COM_RXSIGBUFFERARRAYBASEDBUFFERUSEDOFRXACCESSINFO == STD_ON)))  /* COV_COM_VAR_ELISA_STD_OFF_TF_tx_tf_tf_tf */
; ..\component\Com\Implementation\Com.c	  2201  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2202    Com_ReceiveSignal_GetRxSigBuffer
; ..\component\Com\Implementation\Com.c	  2203  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2204  /*! \brief        The function Com_ReceiveSignal_GetRxSigBuffer updates the signal data referenced by SignalDataPtr
; ..\component\Com\Implementation\Com.c	  2205                    with the data in the signal object identified by SignalId.
; ..\component\Com\Implementation\Com.c	  2206      \details      -
; ..\component\Com\Implementation\Com.c	  2207      \pre          -
; ..\component\Com\Implementation\Com.c	  2208      \param[in]    idxRxAccessInfo             Id of signal or group signal to be received.
; ..\component\Com\Implementation\Com.c	  2209      \param[out]   SignalDataPtr               Reference to the signal data in which to store the received data.
; ..\component\Com\Implementation\Com.c	  2210      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2211  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2212  LOCAL_INLINE FUNC(void, COM_CODE) Com_ReceiveSignal_GetRxSigBuffer(Com_SignalIdType idxRxAccessInfo, P2VAR(void, AUTOMATIC, COM_APPL_VAR) SignalDataPtr);
; ..\component\Com\Implementation\Com.c	  2213  #endif
; ..\component\Com\Implementation\Com.c	  2214  
; ..\component\Com\Implementation\Com.c	  2215  #if (COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2216  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2217    Com_ReadSignalGroupData
; ..\component\Com\Implementation\Com.c	  2218  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2219  /*! \brief        The function Com_ReadSignalGroupData copies the received signal group to the shadow buffer.
; ..\component\Com\Implementation\Com.c	  2220      \details      -
; ..\component\Com\Implementation\Com.c	  2221      \pre          -
; ..\component\Com\Implementation\Com.c	  2222      \param[in]    SignalGroupId               Id of signal group to be received.
; ..\component\Com\Implementation\Com.c	  2223      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2224  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2225  LOCAL_INLINE FUNC(void, COM_CODE) Com_ReadSignalGroupData(Com_SignalGroupIdType SignalGroupId);
; ..\component\Com\Implementation\Com.c	  2226  #endif
; ..\component\Com\Implementation\Com.c	  2227  
; ..\component\Com\Implementation\Com.c	  2228  #if ((COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2229  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2230    Com_GetRxDynamicLength
; ..\component\Com\Implementation\Com.c	  2231  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2232  /*! \brief        This function returns the current dynamic signal length, dependent on the passed SDU length.
; ..\component\Com\Implementation\Com.c	  2233      \details      -
; ..\component\Com\Implementation\Com.c	  2234      \pre          -
; ..\component\Com\Implementation\Com.c	  2235      \param[in]    sduLength                   SDU length
; ..\component\Com\Implementation\Com.c	  2236      \param[in]    rxAccessInfoIdx             RxAccessInfo index
; ..\component\Com\Implementation\Com.c	  2237      \return       PduLengthType               current dynamic signal length.
; ..\component\Com\Implementation\Com.c	  2238      \trace        SPEC-2736904
; ..\component\Com\Implementation\Com.c	  2239  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2240  LOCAL_INLINE FUNC(PduLengthType, COM_CODE) Com_GetRxDynamicLength(PduLengthType sduLength, Com_RxAccessInfoIterType rxAccessInfoIdx);
; ..\component\Com\Implementation\Com.c	  2241  #endif
; ..\component\Com\Implementation\Com.c	  2242  
; ..\component\Com\Implementation\Com.c	  2243  #if (COM_GWINFOENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2244  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2245    Com_SignalGw_InitRxIpdu
; ..\component\Com\Implementation\Com.c	  2246  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2247  /*! \brief        This function initializes a rx I-PDU in Com_SignalGw.
; ..\component\Com\Implementation\Com.c	  2248      \details      -
; ..\component\Com\Implementation\Com.c	  2249      \pre          -
; ..\component\Com\Implementation\Com.c	  2250      \param[in]    ComPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	  2251      \context      TASK
; ..\component\Com\Implementation\Com.c	  2252  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2253  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGw_InitRxIpdu(PduIdType ComPduId);
; ..\component\Com\Implementation\Com.c	  2254  #endif
; ..\component\Com\Implementation\Com.c	  2255  
; ..\component\Com\Implementation\Com.c	  2256  #if (COM_GWINFOUSEDOFRXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2257  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2258    Com_SignalGw_SigEvent
; ..\component\Com\Implementation\Com.c	  2259  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2260  /*! \brief        This function sets a signal routing event flag for the passed ComSignal.
; ..\component\Com\Implementation\Com.c	  2261      \details      -
; ..\component\Com\Implementation\Com.c	  2262      \pre          -
; ..\component\Com\Implementation\Com.c	  2263      \param[in]    idxRxSigInfo Index of RxSigInfo
; ..\component\Com\Implementation\Com.c	  2264      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2265  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2266  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGw_SigEvent(Com_RxSigInfoIterType idxRxSigInfo);
; ..\component\Com\Implementation\Com.c	  2267  #endif
; ..\component\Com\Implementation\Com.c	  2268  
; ..\component\Com\Implementation\Com.c	  2269  #if (COM_GWINFOUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2270  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2271    Com_SignalGw_SigGrpEvent
; ..\component\Com\Implementation\Com.c	  2272  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2273  /*! \brief        This function sets a signal routing event flag for the passed ComSignalGroup.
; ..\component\Com\Implementation\Com.c	  2274      \details      -
; ..\component\Com\Implementation\Com.c	  2275      \pre          -
; ..\component\Com\Implementation\Com.c	  2276      \param[in]    idxRxSigGrpInfo Index of RxSigGrpInfo
; ..\component\Com\Implementation\Com.c	  2277      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2278  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2279  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGw_SigGrpEvent(Com_RxSigGrpInfoIterType idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	  2280  #endif
; ..\component\Com\Implementation\Com.c	  2281  
; ..\component\Com\Implementation\Com.c	  2282  #if (COM_GWSIGMAPPINGENDIDXOFGWINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2283  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2284    Com_MainFunction_SignalRoutings
; ..\component\Com\Implementation\Com.c	  2285  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2286  /*! \brief        This function processes the routing of the passed ComSignal GwInfo.
; ..\component\Com\Implementation\Com.c	  2287      \details      -
; ..\component\Com\Implementation\Com.c	  2288      \pre          -
; ..\component\Com\Implementation\Com.c	  2289      \param[in]    idxGwInfo  Index of GwInfo
; ..\component\Com\Implementation\Com.c	  2290      \context      TASK
; ..\component\Com\Implementation\Com.c	  2291  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2292  LOCAL_INLINE FUNC(void, COM_CODE) Com_MainFunction_SignalRoutings(Com_GwInfoIterType idxGwInfo);
; ..\component\Com\Implementation\Com.c	  2293  #endif
; ..\component\Com\Implementation\Com.c	  2294  
; ..\component\Com\Implementation\Com.c	  2295  #if (COM_GWSIGGRPMAPPINGENDIDXOFGWINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2296  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2297    Com_MainFunction_SignalGroupRoutings
; ..\component\Com\Implementation\Com.c	  2298  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2299  /*! \brief        This function processes the routing of the passed ComSignalGroup GwInfo
; ..\component\Com\Implementation\Com.c	  2300      \details      -
; ..\component\Com\Implementation\Com.c	  2301      \pre          -
; ..\component\Com\Implementation\Com.c	  2302      \param[in]    idxGwInfo  Index of GwInfo
; ..\component\Com\Implementation\Com.c	  2303      \context      TASK
; ..\component\Com\Implementation\Com.c	  2304  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2305  LOCAL_INLINE FUNC(void, COM_CODE) Com_MainFunction_SignalGroupRoutings(Com_GwInfoIterType idxGwInfo);
; ..\component\Com\Implementation\Com.c	  2306  #endif
; ..\component\Com\Implementation\Com.c	  2307  
; ..\component\Com\Implementation\Com.c	  2308  #if (COM_GWINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2309  
; ..\component\Com\Implementation\Com.c	  2310  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	  2311  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2312    Com_SignalGw_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	  2313  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2314  /*! \brief    This function enters the gw signal routing exclusive area.
; ..\component\Com\Implementation\Com.c	  2315      \details  -
; ..\component\Com\Implementation\Com.c	  2316      \pre      -
; ..\component\Com\Implementation\Com.c	  2317      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  2318      \context  TASK
; ..\component\Com\Implementation\Com.c	  2319  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2320  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGw_EnterExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	  2321  
; ..\component\Com\Implementation\Com.c	  2322  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2323    Com_SignalGw_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	  2324  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2325  /*! \brief    This function exits the gw signal routing exclusive area.
; ..\component\Com\Implementation\Com.c	  2326      \details  -
; ..\component\Com\Implementation\Com.c	  2327      \pre      -
; ..\component\Com\Implementation\Com.c	  2328      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  2329      \context  TASK
; ..\component\Com\Implementation\Com.c	  2330  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2331  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGw_ExitExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	  2332  
; ..\component\Com\Implementation\Com.c	  2333  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2334    Com_SignalGw_ThresholdCheck
; ..\component\Com\Implementation\Com.c	  2335  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2336  /*! \brief    This function checks if the ISR Lock must be opened
; ..\component\Com\Implementation\Com.c	  2337      \details  -
; ..\component\Com\Implementation\Com.c	  2338      \pre      -
; ..\component\Com\Implementation\Com.c	  2339      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  2340      \context  TASK
; ..\component\Com\Implementation\Com.c	  2341  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2342  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGw_ThresholdCheck(void);
; ..\component\Com\Implementation\Com.c	  2343  
; ..\component\Com\Implementation\Com.c	  2344  #endif
; ..\component\Com\Implementation\Com.c	  2345  
; ..\component\Com\Implementation\Com.c	  2346  #if (COM_GWEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  2347  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2348    Com_MainFunction_GwDescription
; ..\component\Com\Implementation\Com.c	  2349  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2350  /*! \brief    This function processes deferred gateway description events that are queued in the gateway Event Cache
; ..\component\Com\Implementation\Com.c	  2351   *            in reverse order.
; ..\component\Com\Implementation\Com.c	  2352      \details  -
; ..\component\Com\Implementation\Com.c	  2353      \pre      -
; ..\component\Com\Implementation\Com.c	  2354      \context  TASK
; ..\component\Com\Implementation\Com.c	  2355  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2356  LOCAL_INLINE FUNC(void, COM_CODE) Com_MainFunction_GwDescription(void);
; ..\component\Com\Implementation\Com.c	  2357  #endif
; ..\component\Com\Implementation\Com.c	  2358  
; ..\component\Com\Implementation\Com.c	  2359  #if (COM_GWEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  2360  
; ..\component\Com\Implementation\Com.c	  2361  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	  2362  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2363    Com_GwDescription_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	  2364  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2365  /*! \brief    This function enters the gw description routing exclusive area.
; ..\component\Com\Implementation\Com.c	  2366      \details  -
; ..\component\Com\Implementation\Com.c	  2367      \pre      -
; ..\component\Com\Implementation\Com.c	  2368      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  2369      \context  TASK
; ..\component\Com\Implementation\Com.c	  2370  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2371  LOCAL_INLINE FUNC(void, COM_CODE) Com_GwDescription_EnterExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	  2372  
; ..\component\Com\Implementation\Com.c	  2373  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2374    Com_GwDescription_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	  2375  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2376  /*! \brief    This function exits the gw description routing exclusive area.
; ..\component\Com\Implementation\Com.c	  2377      \details  -
; ..\component\Com\Implementation\Com.c	  2378      \pre      -
; ..\component\Com\Implementation\Com.c	  2379      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  2380      \context  TASK
; ..\component\Com\Implementation\Com.c	  2381  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2382  LOCAL_INLINE FUNC(void, COM_CODE) Com_GwDescription_ExitExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	  2383  
; ..\component\Com\Implementation\Com.c	  2384  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2385    Com_GwDescription_ThresholdCheck
; ..\component\Com\Implementation\Com.c	  2386  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2387  /*! \brief    This function checks if the ISR Lock must be opened
; ..\component\Com\Implementation\Com.c	  2388      \details  -
; ..\component\Com\Implementation\Com.c	  2389      \pre      -
; ..\component\Com\Implementation\Com.c	  2390      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  2391      \context  TASK
; ..\component\Com\Implementation\Com.c	  2392  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2393  LOCAL_INLINE FUNC(void, COM_CODE) Com_GwDescription_ThresholdCheck(void);
; ..\component\Com\Implementation\Com.c	  2394  
; ..\component\Com\Implementation\Com.c	  2395  #endif
; ..\component\Com\Implementation\Com.c	  2396  
; ..\component\Com\Implementation\Com.c	  2397  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2398  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2399    Com_RxProcessing_InitRxIpdu
; ..\component\Com\Implementation\Com.c	  2400  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2401  /*! \brief        This function initializes a rx I-PDU in Com_RxProcessing.
; ..\component\Com\Implementation\Com.c	  2402      \details      -
; ..\component\Com\Implementation\Com.c	  2403      \pre          -
; ..\component\Com\Implementation\Com.c	  2404      \param[in]    ComRxPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	  2405      \context      TASK
; ..\component\Com\Implementation\Com.c	  2406      \trace        SPEC-2736775
; ..\component\Com\Implementation\Com.c	  2407  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2408  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_InitRxIpdu(PduIdType ComRxPduId);
; ..\component\Com\Implementation\Com.c	  2409  #endif
; ..\component\Com\Implementation\Com.c	  2410  
; ..\component\Com\Implementation\Com.c	  2411  #if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2412  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2413    Com_RxDeferredPduProcessing
; ..\component\Com\Implementation\Com.c	  2414  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2415  /*! \brief    This function shall perform the processing of the AUTOSAR COM receive processing that are not directly
; ..\component\Com\Implementation\Com.c	  2416                initiated by the calls from the RTE and PduR.
; ..\component\Com\Implementation\Com.c	  2417      \details  -
; ..\component\Com\Implementation\Com.c	  2418      \pre      -
; ..\component\Com\Implementation\Com.c	  2419      \context  TASK
; ..\component\Com\Implementation\Com.c	  2420  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2421  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDeferredPduProcessing(void);
; ..\component\Com\Implementation\Com.c	  2422  
; ..\component\Com\Implementation\Com.c	  2423  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2424    Com_RxDeferredPduProcessing_IterateOverAllRxPdus
; ..\component\Com\Implementation\Com.c	  2425  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2426  /*! \brief             This function shall perform the processing of the AUTOSAR COM receive processing that are not directly
; ..\component\Com\Implementation\Com.c	  2427                         initiated by the calls from the RTE and PduR. All Rx Pdus are checked, whether a deferred processing is required.
; ..\component\Com\Implementation\Com.c	  2428      \details           -
; ..\component\Com\Implementation\Com.c	  2429      \pre               -
; ..\component\Com\Implementation\Com.c	  2430      \param[in,out]     deferredFctPtrCacheStrct - Deferred function pointer cache which should be processed if ISR Lock will be opened
; ..\component\Com\Implementation\Com.c	  2431      \context           TASK
; ..\component\Com\Implementation\Com.c	  2432  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2433  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDeferredPduProcessing_IterateOverAllRxPdus(P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) deferredFctPtrCacheStrct);
; ..\component\Com\Implementation\Com.c	  2434  #endif
; ..\component\Com\Implementation\Com.c	  2435  
; ..\component\Com\Implementation\Com.c	  2436  #if (COM_RXCBKFUNCPTR == STD_ON)
; ..\component\Com\Implementation\Com.c	  2437  
; ..\component\Com\Implementation\Com.c	  2438  /* jet: ComNotificationCache snippet */
; ..\component\Com\Implementation\Com.c	  2439  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2440    Com_ProcessRxFctPtrCache
; ..\component\Com\Implementation\Com.c	  2441  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2442  /*! \brief             This function calles all Rx cached function pointer.
; ..\component\Com\Implementation\Com.c	  2443      \details           -
; ..\component\Com\Implementation\Com.c	  2444      \pre               -
; ..\component\Com\Implementation\Com.c	  2445      \param[in,out]     fctPtrCacheStrctPtr    Pointert to Struct that contains informations (cache location, cache size, cache index)
; ..\component\Com\Implementation\Com.c	  2446                                                about cache which should be processed.
; ..\component\Com\Implementation\Com.c	  2447      \context           TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2448  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2449  LOCAL_INLINE FUNC(void, COM_CODE) Com_ProcessRxFctPtrCache(P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr);
; ..\component\Com\Implementation\Com.c	  2450  
; ..\component\Com\Implementation\Com.c	  2451  #endif
; ..\component\Com\Implementation\Com.c	  2452  
; ..\component\Com\Implementation\Com.c	  2453  
; ..\component\Com\Implementation\Com.c	  2454  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2455  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2456    Com_RxIndication_ProcessPdu
; ..\component\Com\Implementation\Com.c	  2457  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2458  /*! \brief        This function processes the PDU immediate or copies the received PDU in the deferred buffer, depending
; ..\component\Com\Implementation\Com.c	  2459   *                on the IPdu Signal Processing parameter.
; ..\component\Com\Implementation\Com.c	  2460      \details      -
; ..\component\Com\Implementation\Com.c	  2461      \pre          -
; ..\component\Com\Implementation\Com.c	  2462      \param[in]    ComPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	  2463      \param[in]    PduInfoPtr   contains the SDU buffer and the SDU length
; ..\component\Com\Implementation\Com.c	  2464      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2465  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2466  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxIndication_ProcessPdu(PduIdType ComPduId, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr);
; ..\component\Com\Implementation\Com.c	  2467  #endif
; ..\component\Com\Implementation\Com.c	  2468  
; ..\component\Com\Implementation\Com.c	  2469  #if (COM_RXSIGINFOENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2470  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2471    Com_RxProcessing_RxPduSigEvent
; ..\component\Com\Implementation\Com.c	  2472  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2473  /*! \brief              This function processes all related Rx ComSignals of the received ComIPdu.
; ..\component\Com\Implementation\Com.c	  2474      \details            -
; ..\component\Com\Implementation\Com.c	  2475      \pre                -
; ..\component\Com\Implementation\Com.c	  2476      \param[in]          comRxPduInfoIdx index of the received ComIPdu
; ..\component\Com\Implementation\Com.c	  2477      \param[in]          PduInfoPtr   contains the SDU buffer and the SDU length
; ..\component\Com\Implementation\Com.c	  2478      \param[in,out]      fctPtrCacheStrctPtr contains function ptr cache informations (cache location, size, index)
; ..\component\Com\Implementation\Com.c	  2479      \trace              SPEC-2736871
; ..\component\Com\Implementation\Com.c	  2480      \context            TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2481  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2482  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_RxPduSigEvent(PduIdType comRxPduInfoIdx, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr,
; ..\component\Com\Implementation\Com.c	  2483                                                                   P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr);
; ..\component\Com\Implementation\Com.c	  2484  #endif
; ..\component\Com\Implementation\Com.c	  2485  
; ..\component\Com\Implementation\Com.c	  2486  #if (COM_RXSIGGRPINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2487  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2488    Com_RxProcessing_RxPduSigGrpEvent
; ..\component\Com\Implementation\Com.c	  2489  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2490  /*! \brief              This function processes all related Rx ComSignalGroups of the received ComIPdu.
; ..\component\Com\Implementation\Com.c	  2491      \details            -
; ..\component\Com\Implementation\Com.c	  2492      \pre                -
; ..\component\Com\Implementation\Com.c	  2493      \param[in]          comRxPduInfoIdx index of the received ComIPdu
; ..\component\Com\Implementation\Com.c	  2494      \param[in]          PduInfoPtr   contains the SDU buffer and the SDU length
; ..\component\Com\Implementation\Com.c	  2495      \param[in,out]      fctPtrCacheStrctPtr contains function ptr cache informations (cache location, size, index)
; ..\component\Com\Implementation\Com.c	  2496      \trace              SPEC-2736871, SPEC-2736854
; ..\component\Com\Implementation\Com.c	  2497      \context            TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2498  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2499  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_RxPduSigGrpEvent(PduIdType comRxPduInfoIdx, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr,
; ..\component\Com\Implementation\Com.c	  2500                                                                      P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr);
; ..\component\Com\Implementation\Com.c	  2501  #endif
; ..\component\Com\Implementation\Com.c	  2502  
; ..\component\Com\Implementation\Com.c	  2503  #if (COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2504  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2505    Com_RxProcessing_ReadGrpSignal
; ..\component\Com\Implementation\Com.c	  2506  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2507  /*! \brief        This function extracts the ComGroupSignal data of the passed Sdu data and copies it to the related temp shadow buffer
; ..\component\Com\Implementation\Com.c	  2508      \details      -
; ..\component\Com\Implementation\Com.c	  2509      \pre          -
; ..\component\Com\Implementation\Com.c	  2510      \param[in]    PduInfoPtr contains the SDU buffer and the SDU length
; ..\component\Com\Implementation\Com.c	  2511      \param[in]    idxRxAccessInfo   Rx Group Signal handle
; ..\component\Com\Implementation\Com.c	  2512      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2513  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2514  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_ReadGrpSignal(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  2515  #endif
; ..\component\Com\Implementation\Com.c	  2516  
; ..\component\Com\Implementation\Com.c	  2517  #if ((COM_RXSIGGRPINFOINDENDIDXOFRXPDUINFO == STD_ON) && (COM_FILTEREVENTOFRXSIGGRPINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2518  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2519    Com_RxProcessing_RxSignalGroupFilterCheck
; ..\component\Com\Implementation\Com.c	  2520  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2521  /*! \brief        This function evaluates the filter of the passed ComSignalGroup
; ..\component\Com\Implementation\Com.c	  2522      \details      -
; ..\component\Com\Implementation\Com.c	  2523      \pre          -
; ..\component\Com\Implementation\Com.c	  2524      \param[in]    idxRxSigGrpInfo   Handle Id of ComSignalGroup
; ..\component\Com\Implementation\Com.c	  2525      \return       boolean TRUE if the filter is passed, otherwise FALSE.
; ..\component\Com\Implementation\Com.c	  2526      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2527  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2528  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxProcessing_RxSignalGroupFilterCheck(Com_RxSigGrpInfoIterType idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	  2529  #endif
; ..\component\Com\Implementation\Com.c	  2530  
; ..\component\Com\Implementation\Com.c	  2531  #if (COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2532  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2533    Com_RxProcessing_ExtractToShdwBffr
; ..\component\Com\Implementation\Com.c	  2534  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2535  /*! \brief        This function copies the temp shadow buffer of the passed ComSignalGroup to the shadow buffer.
; ..\component\Com\Implementation\Com.c	  2536      \details      -
; ..\component\Com\Implementation\Com.c	  2537      \pre          -
; ..\component\Com\Implementation\Com.c	  2538      \param[in]    idxRxSigGrpInfo   Handle Id of ComSignalGroup
; ..\component\Com\Implementation\Com.c	  2539      \param[in]    PduInfoPtr        contains the SDU buffer and the SDU length.
; ..\component\Com\Implementation\Com.c	  2540      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2541  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2542  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_ExtractToShdwBffr(Com_RxSigGrpInfoIterType idxRxSigGrpInfo, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr);
; ..\component\Com\Implementation\Com.c	  2543  #endif
; ..\component\Com\Implementation\Com.c	  2544  
; ..\component\Com\Implementation\Com.c	  2545  #if ((COM_RXSIGGRPINFOINDENDIDXOFRXPDUINFO == STD_ON) && (COM_UBMASKUSEDOFRXSIGGRPINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2546  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2547    Com_RxProcessing_CheckSigGrpUB
; ..\component\Com\Implementation\Com.c	  2548  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2549  /*! \brief        This function evaluates if the ComSignalGroup was updated.
; ..\component\Com\Implementation\Com.c	  2550      \details      -
; ..\component\Com\Implementation\Com.c	  2551      \pre          -
; ..\component\Com\Implementation\Com.c	  2552      \param[in]    PduInfoPtr        contains the SDU buffer and the SDU length.
; ..\component\Com\Implementation\Com.c	  2553      \param[in]    idxRxSigGrpInfo   Handle Id of ComSignalGroup
; ..\component\Com\Implementation\Com.c	  2554      \return       boolean TRUE if the ComSignalGroup was updated, otherwise FALSE.
; ..\component\Com\Implementation\Com.c	  2555      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2556  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2557  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_RxProcessing_CheckSigGrpUB(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxSigGrpInfoIterType idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	  2558  #endif
; ..\component\Com\Implementation\Com.c	  2559  
; ..\component\Com\Implementation\Com.c	  2560  #if ((COM_RXSIGINFOENDIDXOFRXPDUINFO == STD_ON) && (COM_UBMASKUSEDOFRXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2561  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2562    Com_RxProcessing_CheckSigUB
; ..\component\Com\Implementation\Com.c	  2563  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2564  /*! \brief        This function evaluates if the ComSignal was updated.
; ..\component\Com\Implementation\Com.c	  2565      \details      -
; ..\component\Com\Implementation\Com.c	  2566      \pre          -
; ..\component\Com\Implementation\Com.c	  2567      \param[in]    idxRxSigInfo       Index of RxSigInfo
; ..\component\Com\Implementation\Com.c	  2568      \param[in]    PduInfoPtr         contains the SDU buffer and the SDU length.
; ..\component\Com\Implementation\Com.c	  2569      \return       boolean TRUE if the ComSignalGroup was updated, otherwise FALSE.
; ..\component\Com\Implementation\Com.c	  2570      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2571  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2572  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_RxProcessing_CheckSigUB(Com_RxSigInfoIterType idxRxSigInfo, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr);
; ..\component\Com\Implementation\Com.c	  2573  #endif
; ..\component\Com\Implementation\Com.c	  2574  
; ..\component\Com\Implementation\Com.c	  2575  #if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2576  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2577    Com_RxProcessDeferredPDU
; ..\component\Com\Implementation\Com.c	  2578  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2579  /*! \brief              This function processes a deferred PDU.
; ..\component\Com\Implementation\Com.c	  2580      \details            -
; ..\component\Com\Implementation\Com.c	  2581      \pre                -
; ..\component\Com\Implementation\Com.c	  2582      \param[in]          idxRxPduInfo                  Index of the PDU that should be processed.
; ..\component\Com\Implementation\Com.c	  2583      \param[in,out]      deferredfctPtrCacheStrctPtr   Pointer to struct,
; ..\component\Com\Implementation\Com.c	  2584                                                        which contains all informations for deferred function pointer caching.
; ..\component\Com\Implementation\Com.c	  2585      \context            TASK
; ..\component\Com\Implementation\Com.c	  2586  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2587  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessDeferredPDU(PduIdType idxRxPduInfo, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) deferredfctPtrCacheStrctPtr);
; ..\component\Com\Implementation\Com.c	  2588  #endif
; ..\component\Com\Implementation\Com.c	  2589  
; ..\component\Com\Implementation\Com.c	  2590  #if (COM_RXSIGGRPINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2591  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2592    Com_RxProcessing_ProcessSigGrpEvent
; ..\component\Com\Implementation\Com.c	  2593  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2594  /*! \brief              This function processes the passed ComSignalGroup.
; ..\component\Com\Implementation\Com.c	  2595      \details            -
; ..\component\Com\Implementation\Com.c	  2596      \pre                -
; ..\component\Com\Implementation\Com.c	  2597      \param[in]          comRxPduInfoIdx     Index of RxPduInfo
; ..\component\Com\Implementation\Com.c	  2598      \param[in]          PduInfoPtr          contains the SDU buffer and the SDU length.
; ..\component\Com\Implementation\Com.c	  2599      \param[in]          idxRxSigGrpInfo     Index of RxSigGrpInfo.
; ..\component\Com\Implementation\Com.c	  2600      \param[in,out]      fctPtrCacheStrctPtr Pointer to function ptr cache containing all informations (location, size, index)
; ..\component\Com\Implementation\Com.c	  2601      \trace              SPEC-2736832, SPEC-2736777, SPEC-2736778
; ..\component\Com\Implementation\Com.c	  2602      \context            TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2603  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2604  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_ProcessSigGrpEvent(PduIdType comRxPduInfoIdx, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxSigGrpInfoIterType idxRxSigGrpInfo,
; ..\component\Com\Implementation\Com.c	  2605                                                                        P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr);
; ..\component\Com\Implementation\Com.c	  2606  #endif
; ..\component\Com\Implementation\Com.c	  2607  
; ..\component\Com\Implementation\Com.c	  2608  #if (COM_RXDEFERREDFCTPTRCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  2609  
; ..\component\Com\Implementation\Com.c	  2610  /* jet: ComCacheOrCallCbkFctPtr snippet */
; ..\component\Com\Implementation\Com.c	  2611  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2612    Com_CacheOrCallRxDeferredCbkFctPtr
; ..\component\Com\Implementation\Com.c	  2613  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2614  /*! \brief              This function caches the the provided index of function pointer
; ..\component\Com\Implementation\Com.c	  2615   *                      in the Rx Deferred function pointer cache. If the cache is full,
; ..\component\Com\Implementation\Com.c	  2616   *                      all cached function pointers are called and the cache is cleared.
; ..\component\Com\Implementation\Com.c	  2617   *   \details           -
; ..\component\Com\Implementation\Com.c	  2618   *   \pre               -
; ..\component\Com\Implementation\Com.c	  2619   *   \param[in]         cbkFuncPtrIdx       Index of function pointer that should be cached or called.
; ..\component\Com\Implementation\Com.c	  2620   *   \param[in,out]     fctPtrCacheStrctPtr Pointer to struct which contains all information about the cache (size, index, location)
; ..\component\Com\Implementation\Com.c	  2621   *   \context           TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2622   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2623  LOCAL_INLINE FUNC(void, COM_CODE) Com_CacheOrCallRxDeferredCbkFctPtr(Com_RxCbkFuncPtrIterType cbkFuncPtrIdx, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr);
; ..\component\Com\Implementation\Com.c	  2624  
; ..\component\Com\Implementation\Com.c	  2625  #endif
; ..\component\Com\Implementation\Com.c	  2626  
; ..\component\Com\Implementation\Com.c	  2627  #if (COM_RXIMMEDIATEFCTPTRCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  2628  
; ..\component\Com\Implementation\Com.c	  2629  /* jet: ComCacheOrCallCbkFctPtr snippet */
; ..\component\Com\Implementation\Com.c	  2630  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2631    Com_CacheOrCallRxImmediateCbkFctPtr
; ..\component\Com\Implementation\Com.c	  2632  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2633  /*! \brief              This function caches the the provided index of function pointer
; ..\component\Com\Implementation\Com.c	  2634   *                      in the Rx Immediate function pointer cache. If the cache is full,
; ..\component\Com\Implementation\Com.c	  2635   *                      all cached function pointers are called and the cache is cleared.
; ..\component\Com\Implementation\Com.c	  2636   *   \details           -
; ..\component\Com\Implementation\Com.c	  2637   *   \pre               -
; ..\component\Com\Implementation\Com.c	  2638   *   \param[in]         cbkFuncPtrIdx       Index of function pointer that should be cached or called.
; ..\component\Com\Implementation\Com.c	  2639   *   \param[in,out]     fctPtrCacheStrctPtr Pointer to struct which contains all information about the cache (size, index, location)
; ..\component\Com\Implementation\Com.c	  2640   *   \context           TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2641   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2642  LOCAL_INLINE FUNC(void, COM_CODE) Com_CacheOrCallRxImmediateCbkFctPtr(Com_RxCbkFuncPtrIterType cbkFuncPtrIdx, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr);
; ..\component\Com\Implementation\Com.c	  2643  
; ..\component\Com\Implementation\Com.c	  2644  #endif
; ..\component\Com\Implementation\Com.c	  2645  
; ..\component\Com\Implementation\Com.c	  2646  #if (COM_RXCBKFUNCPTR == STD_ON)
; ..\component\Com\Implementation\Com.c	  2647  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2648    Com_CacheOrCallRxCbkFctPtr
; ..\component\Com\Implementation\Com.c	  2649  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2650  /*! \brief            This caches or calles the function pointer in immediate or deferred cache.
; ..\component\Com\Implementation\Com.c	  2651      \details          -
; ..\component\Com\Implementation\Com.c	  2652      \pre              -
; ..\component\Com\Implementation\Com.c	  2653      \param[in]        cbkFuncPtrIdx       Index of function pointer that should be cached or called.
; ..\component\Com\Implementation\Com.c	  2654      \param[in]        comRxPduInfoIdx     Pdu Id
; ..\component\Com\Implementation\Com.c	  2655      \param[in,out]    fctPtrCacheStrctPtr contains all information of function pointer cache (location, size, index)
; ..\component\Com\Implementation\Com.c	  2656      \context          TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2657  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2658  LOCAL_INLINE FUNC(void, COM_CODE) Com_CacheOrCallRxCbkFctPtr(Com_RxCbkFuncPtrIterType cbkFuncPtrIdx, PduIdType comRxPduInfoIdx, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr);
; ..\component\Com\Implementation\Com.c	  2659  #endif
; ..\component\Com\Implementation\Com.c	  2660  
; ..\component\Com\Implementation\Com.c	  2661  #if ((COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON) || (COM_ARRAYACCESSUSEDOFRXSIGGRPINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2662  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2663    Com_RxProcessing_ReadSignalGroup
; ..\component\Com\Implementation\Com.c	  2664  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2665  /*! \brief        This function reads the signal group data for a given Signal Group Index from given PDU.
; ..\component\Com\Implementation\Com.c	  2666      \details      -
; ..\component\Com\Implementation\Com.c	  2667      \pre          -
; ..\component\Com\Implementation\Com.c	  2668      \param[in]    PduInfoPtr          contains the SDU buffer and the SDU length.
; ..\component\Com\Implementation\Com.c	  2669      \param[in]    idxRxSigGrpInfo     Index of RxSigGrpInfo.
; ..\component\Com\Implementation\Com.c	  2670      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2671  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2672  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_ReadSignalGroup(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxSigGrpInfoIterType idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	  2673  #endif
; ..\component\Com\Implementation\Com.c	  2674  
; ..\component\Com\Implementation\Com.c	  2675  #if(COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2676  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2677    Com_RxProcessing_EnterExclusiveArea_Deferred
; ..\component\Com\Implementation\Com.c	  2678  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2679  /*! \brief    This function enters the rx deferred exclusive area.
; ..\component\Com\Implementation\Com.c	  2680      \details  -
; ..\component\Com\Implementation\Com.c	  2681      \pre      -
; ..\component\Com\Implementation\Com.c	  2682      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  2683      \context  TASK
; ..\component\Com\Implementation\Com.c	  2684  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2685  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_EnterExclusiveArea_Deferred(void);
; ..\component\Com\Implementation\Com.c	  2686  
; ..\component\Com\Implementation\Com.c	  2687  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2688    Com_RxProcessing_ExitExclusiveArea_Deferred
; ..\component\Com\Implementation\Com.c	  2689  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2690  /*! \brief    This function exits the rx deferred exclusive area.
; ..\component\Com\Implementation\Com.c	  2691      \details  -
; ..\component\Com\Implementation\Com.c	  2692      \pre      -
; ..\component\Com\Implementation\Com.c	  2693      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  2694      \context  TASK
; ..\component\Com\Implementation\Com.c	  2695  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2696  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_ExitExclusiveArea_Deferred(void);
; ..\component\Com\Implementation\Com.c	  2697  
; ..\component\Com\Implementation\Com.c	  2698  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2699    Com_RxProcessing_ThresholdCheck_Deferred
; ..\component\Com\Implementation\Com.c	  2700  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2701  /*! \brief            This function checks if the ISR Lock must be opened
; ..\component\Com\Implementation\Com.c	  2702      \details          -
; ..\component\Com\Implementation\Com.c	  2703      \pre              -
; ..\component\Com\Implementation\Com.c	  2704      \param[in,out]    fctPtrCacheStrctPtr Deferred function pointer cache which should be processed if ISR Lock will be opened.
; ..\component\Com\Implementation\Com.c	  2705      \trace            DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  2706      \context          TASK
; ..\component\Com\Implementation\Com.c	  2707  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2708  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_ThresholdCheck_Deferred(P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr);
; ..\component\Com\Implementation\Com.c	  2709  #endif
; ..\component\Com\Implementation\Com.c	  2710  
; ..\component\Com\Implementation\Com.c	  2711  #if (COM_RXDEFERREDEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  2712  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2713    Com_RxIndication_CacheDeferredEvent
; ..\component\Com\Implementation\Com.c	  2714  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2715  /*! \brief        This function caches the ID of the received Rx deferred PDU to avoid the iteration through all
; ..\component\Com\Implementation\Com.c	  2716   *                RxPdus while processing deferred IPdus
; ..\component\Com\Implementation\Com.c	  2717      \details      -
; ..\component\Com\Implementation\Com.c	  2718      \pre          -
; ..\component\Com\Implementation\Com.c	  2719      \param[in]    ComPduId            Rx ComIPdu handle Id
; ..\component\Com\Implementation\Com.c	  2720      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2721  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2722  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxIndication_CacheDeferredEvent(Com_RxDeferredEventCacheType ComPduId);
; ..\component\Com\Implementation\Com.c	  2723  #endif
; ..\component\Com\Implementation\Com.c	  2724  
; ..\component\Com\Implementation\Com.c	  2725  #if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2726  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2727    Com_RxProcessing_IsDeferredProcessingRequested
; ..\component\Com\Implementation\Com.c	  2728  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2729  /*! \brief        This function checks if the PduGroup that belongs to the PduId is active and if the Pdu with given Id has
; ..\component\Com\Implementation\Com.c	  2730   *                been received.
; ..\component\Com\Implementation\Com.c	  2731      \details      -
; ..\component\Com\Implementation\Com.c	  2732      \pre          -
; ..\component\Com\Implementation\Com.c	  2733      \param[in]    idxRxPduInfo            Rx ComIPdu handle Id
; ..\component\Com\Implementation\Com.c	  2734      \return       boolean
; ..\component\Com\Implementation\Com.c	  2735                      FALSE if sanity check fails, otherwise TRUE.
; ..\component\Com\Implementation\Com.c	  2736      \context      TASK
; ..\component\Com\Implementation\Com.c	  2737  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2738  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_RxProcessing_IsDeferredProcessingRequested(Com_SizeOfRxPduInfoType idxRxPduInfo);
; ..\component\Com\Implementation\Com.c	  2739  #endif
; ..\component\Com\Implementation\Com.c	  2740  
; ..\component\Com\Implementation\Com.c	  2741  #if (COM_GWEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  2742  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2743    Com_RxIndication_CacheDeferredDescriptionGwEvent
; ..\component\Com\Implementation\Com.c	  2744  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2745  /*! \brief        This function caches a deferred gateway description event.
; ..\component\Com\Implementation\Com.c	  2746      \details      -
; ..\component\Com\Implementation\Com.c	  2747      \pre          -
; ..\component\Com\Implementation\Com.c	  2748      \param[in]    ComPduId            Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	  2749      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2750  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2751  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxIndication_CacheDeferredDescriptionGwEvent(PduIdType ComPduId);
; ..\component\Com\Implementation\Com.c	  2752  #endif
; ..\component\Com\Implementation\Com.c	  2753  
; ..\component\Com\Implementation\Com.c	  2754  #if (COM_GWTXPDUDESCRIPTIONINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2755  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2756    Com_RxProcessing_GwDescriptionEvent
; ..\component\Com\Implementation\Com.c	  2757  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2758  /*! \brief        This function handles the gateway description events and initiates the transmission if the conditions of
; ..\component\Com\Implementation\Com.c	  2759   *                the configured transfer properties are satisfied.
; ..\component\Com\Implementation\Com.c	  2760      \details      -
; ..\component\Com\Implementation\Com.c	  2761      \pre          -
; ..\component\Com\Implementation\Com.c	  2762      \param[in]    rxComPduId          Handle of the rx I-PDU.
; ..\component\Com\Implementation\Com.c	  2763      \param[in]    PduInfoPtr          contains the SDU buffer and the SDU length
; ..\component\Com\Implementation\Com.c	  2764      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2765  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2766  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_GwDescriptionEvent(PduIdType rxComPduId, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr);
; ..\component\Com\Implementation\Com.c	  2767  
; ..\component\Com\Implementation\Com.c	  2768  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2769    Com_RxProcessing_ProcessDestinationDescription
; ..\component\Com\Implementation\Com.c	  2770  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2771  /*! \brief        This function processes a gateway destination description. More precisely, it copies the configured bits
; ..\component\Com\Implementation\Com.c	  2772   *                from the source to destination buffer if the transfer property conditions are satisfied.
; ..\component\Com\Implementation\Com.c	  2773      \details      -
; ..\component\Com\Implementation\Com.c	  2774      \pre          -
; ..\component\Com\Implementation\Com.c	  2775      \param[in]    rxPduBuffer          Buffer of rxPdu that is received on gateway description event.
; ..\component\Com\Implementation\Com.c	  2776      \param[in]    gwDescrAccessIdx     Index of Com_GwDescriptionAccessInfo, which contains all informations of the description
; ..\component\Com\Implementation\Com.c	  2777      \return       Com_GwDescriptionTriggerType
; ..\component\Com\Implementation\Com.c	  2778                        COM_TRANSMIT_TRIGGER_NOTFULFILLED  transfer property conditions are not fulfilled
; ..\component\Com\Implementation\Com.c	  2779                        COM_TRANSMIT_TRIGGER               transfer property conditions are fulfilled and repetitions
; ..\component\Com\Implementation\Com.c	  2780                                                           are required
; ..\component\Com\Implementation\Com.c	  2781                        COM_TRANSMIT_TRIGGERWITHOUTREP     transfer property conditions are fulfilled and repetitions
; ..\component\Com\Implementation\Com.c	  2782                                                           are not required
; ..\component\Com\Implementation\Com.c	  2783      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2784      \trace        CREQ-115135
; ..\component\Com\Implementation\Com.c	  2785  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2786  LOCAL_INLINE FUNC(Com_GwDescriptionTriggerType, COM_CODE) Com_RxProcessing_ProcessDestinationDescription(P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) rxPduBuffer,
; ..\component\Com\Implementation\Com.c	  2787                                                                                                           Com_GwDescriptionAccessInfoEndIdxOfGwTxPduDescriptionInfoType gwDescrAccessIdx);
; ..\component\Com\Implementation\Com.c	  2788  
; ..\component\Com\Implementation\Com.c	  2789  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2790    Com_GwDescriptionCopyBuffer
; ..\component\Com\Implementation\Com.c	  2791  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2792  /*! \brief        This function copies the received content from source to destination buffer.
; ..\component\Com\Implementation\Com.c	  2793      \details      -
; ..\component\Com\Implementation\Com.c	  2794      \pre          -
; ..\component\Com\Implementation\Com.c	  2795      \param[in]    rxPduBuffer          Buffer of rxPdu that is received on gateway description event.
; ..\component\Com\Implementation\Com.c	  2796      \param[in]    gwDescrAccessIdx     Index of Com_GwDescriptionAccessInfo, which contains all informations of the description
; ..\component\Com\Implementation\Com.c	  2797      \return       boolean
; ..\component\Com\Implementation\Com.c	  2798                      TRUE                 if content of destination buffer has changed.
; ..\component\Com\Implementation\Com.c	  2799                      FALSE                otherwise
; ..\component\Com\Implementation\Com.c	  2800      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2801  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2802  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_GwDescriptionCopyBuffer(P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) rxPduBuffer, Com_GwDescriptionAccessInfoEndIdxOfGwTxPduDescriptionInfoType gwDescrAccessIdx);
; ..\component\Com\Implementation\Com.c	  2803  
; ..\component\Com\Implementation\Com.c	  2804  # if ((COM_DIRECTOFTXMODETRUE == STD_ON) || (COM_DIRECTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	  2805  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2806    Com_RxProcessing_GwDescriptionTransmit
; ..\component\Com\Implementation\Com.c	  2807  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2808  /*! \brief        This function initiates the transmission of txPdu on gateway description event
; ..\component\Com\Implementation\Com.c	  2809      \details      -
; ..\component\Com\Implementation\Com.c	  2810      \pre          -
; ..\component\Com\Implementation\Com.c	  2811      \param[in]    txPduID                 Valid ID of TxPdu that should be sent
; ..\component\Com\Implementation\Com.c	  2812      \param[in]    isImmediate             true, if TxPdu should be sent immediately, otherwise transmission will be triggered
; ..\component\Com\Implementation\Com.c	  2813                                            in next main function cycle
; ..\component\Com\Implementation\Com.c	  2814      \param[in]    withoutRepetitionFlag   true, if no repetitions are required
; ..\component\Com\Implementation\Com.c	  2815      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2816   *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2817  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_GwDescriptionTransmit(PduIdType txPduID, boolean isImmediate, boolean withoutRepetitionFlag);
; ..\component\Com\Implementation\Com.c	  2818  # endif
; ..\component\Com\Implementation\Com.c	  2819  #endif
; ..\component\Com\Implementation\Com.c	  2820  
; ..\component\Com\Implementation\Com.c	  2821  #if (COM_EXISTS_DIRECT_COPYTYPEOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2822  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2823    Com_GwDescription_DirectCopy
; ..\component\Com\Implementation\Com.c	  2824  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2825  /*! \brief            This function directly copies the content from source to destination buffer.
; ..\component\Com\Implementation\Com.c	  2826      \details          -
; ..\component\Com\Implementation\Com.c	  2827      \param[in]        gwDescrAccessIdx          Gateway description access idx.
; ..\component\Com\Implementation\Com.c	  2828      \param[in]        sourceBuffer              Received source buffer referenced by source description.
; ..\component\Com\Implementation\Com.c	  2829      \param[in,out]    destinationBuffer         Tx Buffer where the received content is copied to.
; ..\component\Com\Implementation\Com.c	  2830      \param[in]        txBufferLength            Length of destinationBuffer
; ..\component\Com\Implementation\Com.c	  2831      \return           boolean
; ..\component\Com\Implementation\Com.c	  2832                          TRUE   if any bytes of destination have changed
; ..\component\Com\Implementation\Com.c	  2833                          FALSE  otherwise
; ..\component\Com\Implementation\Com.c	  2834      \pre              Caller has to ensure that sourceBuffer and destinationBuffer point to start byte of source and destination description.
; ..\component\Com\Implementation\Com.c	  2835      \context          TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2836  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2837  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_GwDescription_DirectCopy(Com_GwDescriptionAccessInfoEndIdxOfGwTxPduDescriptionInfoType gwDescrAccessIdx,
; ..\component\Com\Implementation\Com.c	  2838                                                                    P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) sourceBuffer,
; ..\component\Com\Implementation\Com.c	  2839                                                                    P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) destinationBuffer, Com_TxBufferLengthOfGwDescriptionAccessInfoType txBufferLength);
; ..\component\Com\Implementation\Com.c	  2840  #endif
; ..\component\Com\Implementation\Com.c	  2841  
; ..\component\Com\Implementation\Com.c	  2842  #if (COM_EXISTS_RIGHTSHIFT_COPYTYPEOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2843  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2844    Com_GwDescription_RightShiftCopy
; ..\component\Com\Implementation\Com.c	  2845  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2846  /*! \brief              This function shifts the content of source buffer to the right and copies it to the destination buffer.
; ..\component\Com\Implementation\Com.c	  2847      \details            -
; ..\component\Com\Implementation\Com.c	  2848      \param[in]          sourceBuffer              Source buffer.
; ..\component\Com\Implementation\Com.c	  2849      \param[in,out]      destinationBuffer         Destination buffer.
; ..\component\Com\Implementation\Com.c	  2850      \param[in]          destinationBufferSize     Size of Destination Buffer.
; ..\component\Com\Implementation\Com.c	  2851      \param[in]          sourceStartBitIndex       Bit index within byte zero of source, where the content starts.
; ..\component\Com\Implementation\Com.c	  2852      \param[in]          bitOffset                 Offset to be shifted right.
; ..\component\Com\Implementation\Com.c	  2853      \param[in]          bitLength                 Number of bits to be copied.
; ..\component\Com\Implementation\Com.c	  2854      \param[in]          isBigEndian               true, if GwDescription is type of BIG_ENDIAN
; ..\component\Com\Implementation\Com.c	  2855      \return             boolean
; ..\component\Com\Implementation\Com.c	  2856                            TRUE                    if any bytes of destination have changed
; ..\component\Com\Implementation\Com.c	  2857                            FALSE                   otherwise
; ..\component\Com\Implementation\Com.c	  2858      \pre                For BigEndian description routing, caller has to ensure that sourceBuffer and destinationBuffer
; ..\component\Com\Implementation\Com.c	  2859                          point to end byte of source and destination description. For LittleEndian description routing,
; ..\component\Com\Implementation\Com.c	  2860                          caller has to ensure that sourceBuffer and destinationBuffer point to start byte of source
; ..\component\Com\Implementation\Com.c	  2861                          and destination description.
; ..\component\Com\Implementation\Com.c	  2862      \context            TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2863  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2864  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_GwDescription_RightShiftCopy(P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) sourceBuffer,
; ..\component\Com\Implementation\Com.c	  2865                                                                        P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) destinationBuffer,
; ..\component\Com\Implementation\Com.c	  2866                                                                        uint16 destinationBufferSize, uint8 sourceStartBitIndex, uint8 bitOffset, uint16 bitLength, boolean isBigEndian);
; ..\component\Com\Implementation\Com.c	  2867  #endif
; ..\component\Com\Implementation\Com.c	  2868  
; ..\component\Com\Implementation\Com.c	  2869  #if (COM_EXISTS_LEFTSHIFT_COPYTYPEOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2870  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2871    Com_GwDescription_LeftShiftCopy
; ..\component\Com\Implementation\Com.c	  2872  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2873  /*! \brief            This function shifts the content of source buffer to the left and copies it to the destination buffer.
; ..\component\Com\Implementation\Com.c	  2874      \details          -
; ..\component\Com\Implementation\Com.c	  2875      \param[in]        sourceBuffer              Source buffer.
; ..\component\Com\Implementation\Com.c	  2876      \param[in,out]    destinationBuffer         Destination buffer.
; ..\component\Com\Implementation\Com.c	  2877      \param[in]        destinationBufferSize     Size of Destination Buffer.
; ..\component\Com\Implementation\Com.c	  2878      \param[in]        sourceStartBitIndex       Bit index within byte zero of source, where the content starts.
; ..\component\Com\Implementation\Com.c	  2879      \param[in]        bitOffset                 Offset to be shifted left.
; ..\component\Com\Implementation\Com.c	  2880      \param[in]        bitLength                 Number of bits to be copied.
; ..\component\Com\Implementation\Com.c	  2881      \param[in]        isBigEndian               true, if GwDescription is type of BIG_ENDIAN
; ..\component\Com\Implementation\Com.c	  2882      \return           boolean
; ..\component\Com\Implementation\Com.c	  2883                          TRUE                    if any bytes of destination have changed
; ..\component\Com\Implementation\Com.c	  2884                          FALSE                   otherwise
; ..\component\Com\Implementation\Com.c	  2885      \pre              For BigEndian description routing, caller has to ensure that sourceBuffer and destinationBuffer
; ..\component\Com\Implementation\Com.c	  2886                        point to end byte of source and destination description. For LittleEndian description routing,
; ..\component\Com\Implementation\Com.c	  2887                        caller has to ensure that sourceBuffer and destinationBuffer point to start byte of source and
; ..\component\Com\Implementation\Com.c	  2888                        destination description.
; ..\component\Com\Implementation\Com.c	  2889      \context          TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2890  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2891  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_GwDescription_LeftShiftCopy(P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) sourceBuffer,
; ..\component\Com\Implementation\Com.c	  2892                                                                       P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) destinationBuffer,
; ..\component\Com\Implementation\Com.c	  2893                                                                       uint16 destinationBufferSize, uint8 sourceStartBitIndex, uint8 bitOffset, uint16 bitLength, boolean isBigEndian);
; ..\component\Com\Implementation\Com.c	  2894  #endif
; ..\component\Com\Implementation\Com.c	  2895  
; ..\component\Com\Implementation\Com.c	  2896  #if (COM_RXUBMASKUSEDOFGWDESCRIPTIONACCESSINFO  == STD_ON)
; ..\component\Com\Implementation\Com.c	  2897  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2898    Com_RxProcessing_CheckGwDescriptionUB
; ..\component\Com\Implementation\Com.c	  2899  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2900  /*! \brief        This function evaluates if the source description was updated.
; ..\component\Com\Implementation\Com.c	  2901      \details      -
; ..\component\Com\Implementation\Com.c	  2902      \pre          -
; ..\component\Com\Implementation\Com.c	  2903      \param[in]    gwDescrAccessIdx        Index of RxSigInfo
; ..\component\Com\Implementation\Com.c	  2904      \param[in]    PduInfoPtr              contains the SDU buffer and the SDU length.
; ..\component\Com\Implementation\Com.c	  2905      \return       boolean
; ..\component\Com\Implementation\Com.c	  2906                      TRUE                  if the source description was updated
; ..\component\Com\Implementation\Com.c	  2907                      FALSE                 otherwise
; ..\component\Com\Implementation\Com.c	  2908      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  2909  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2910  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_RxProcessing_CheckGwDescriptionUB(Com_GwDescriptionAccessInfoEndIdxOfGwTxPduDescriptionInfoType gwDescrAccessIdx,
; ..\component\Com\Implementation\Com.c	  2911                                                                             P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr);
; ..\component\Com\Implementation\Com.c	  2912  #endif
; ..\component\Com\Implementation\Com.c	  2913  
; ..\component\Com\Implementation\Com.c	  2914  #if (COM_RXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  2915  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2916    Com_RxSignalProcessing
; ..\component\Com\Implementation\Com.c	  2917  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2918  /*! \brief        This function processes the reception of one specific Rx Access Info event.
; ..\component\Com\Implementation\Com.c	  2919      \details      -
; ..\component\Com\Implementation\Com.c	  2920      \pre          -
; ..\component\Com\Implementation\Com.c	  2921      \param[in]    PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  2922      \param[in]    idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  2923      \return       Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  2924                            VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  2925                            INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  2926                            FILTERED    the signal value is does not pass the filter
; ..\component\Com\Implementation\Com.c	  2927  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2928  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIdxOfRxSigInfoType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  2929  #endif
; ..\component\Com\Implementation\Com.c	  2930  
; ..\component\Com\Implementation\Com.c	  2931  
; ..\component\Com\Implementation\Com.c	  2932  #if ((COM_EXISTS_UINT8_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2933  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2934  *  Com_RxSignalProcessing_UINT8
; ..\component\Com\Implementation\Com.c	  2935  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2936  /*!
; ..\component\Com\Implementation\Com.c	  2937   * \brief         This method reads the signal value from the PDU buffer performs the invalid check and evaluates the filter state
; ..\component\Com\Implementation\Com.c	  2938   *                and updates the internal signal buffer if value is valid.
; ..\component\Com\Implementation\Com.c	  2939   * \details       -
; ..\component\Com\Implementation\Com.c	  2940   * \pre           -
; ..\component\Com\Implementation\Com.c	  2941   * \param[in]     PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  2942   * \param[in]     idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  2943   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  2944   *                        VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  2945   *                        INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  2946   *                        FILTERED    the signal value does not pass the filter
; ..\component\Com\Implementation\Com.c	  2947   * \trace         SPEC-2736777
; ..\component\Com\Implementation\Com.c	  2948   * \trace         SPEC-2736778
; ..\component\Com\Implementation\Com.c	  2949  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2950  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_UINT8(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  2951  #endif
; ..\component\Com\Implementation\Com.c	  2952  
; ..\component\Com\Implementation\Com.c	  2953  #if ((COM_EXISTS_SINT8_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2954  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2955  *  Com_RxSignalProcessing_SINT8
; ..\component\Com\Implementation\Com.c	  2956  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2957  /*!
; ..\component\Com\Implementation\Com.c	  2958   * \brief         This method reads the signal value from the PDU buffer performs the invalid check and evaluates the filter state
; ..\component\Com\Implementation\Com.c	  2959   *                and updates the internal signal buffer if value is valid.
; ..\component\Com\Implementation\Com.c	  2960   * \details       -
; ..\component\Com\Implementation\Com.c	  2961   * \pre           -
; ..\component\Com\Implementation\Com.c	  2962   * \param[in]     PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  2963   * \param[in]     idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  2964   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  2965   *                        VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  2966   *                        INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  2967   *                        FILTERED    the signal value does not pass the filter
; ..\component\Com\Implementation\Com.c	  2968   * \trace         SPEC-2736777
; ..\component\Com\Implementation\Com.c	  2969   * \trace         SPEC-2736778
; ..\component\Com\Implementation\Com.c	  2970  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2971  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_SINT8(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  2972  #endif
; ..\component\Com\Implementation\Com.c	  2973  
; ..\component\Com\Implementation\Com.c	  2974  #if ((COM_EXISTS_UINT16_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2975  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2976  *  Com_RxSignalProcessing_UINT16
; ..\component\Com\Implementation\Com.c	  2977  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2978  /*!
; ..\component\Com\Implementation\Com.c	  2979   * \brief         This method reads the signal value from the PDU buffer performs the invalid check and evaluates the filter state
; ..\component\Com\Implementation\Com.c	  2980   *                and updates the internal signal buffer if value is valid.
; ..\component\Com\Implementation\Com.c	  2981   * \details       -
; ..\component\Com\Implementation\Com.c	  2982   * \pre           -
; ..\component\Com\Implementation\Com.c	  2983   * \param[in]     PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  2984   * \param[in]     idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  2985   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  2986   *                        VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  2987   *                        INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  2988   *                        FILTERED    the signal value does not pass the filter
; ..\component\Com\Implementation\Com.c	  2989   * \trace         SPEC-2736777
; ..\component\Com\Implementation\Com.c	  2990   * \trace         SPEC-2736778
; ..\component\Com\Implementation\Com.c	  2991  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2992  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_UINT16(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  2993  #endif
; ..\component\Com\Implementation\Com.c	  2994  
; ..\component\Com\Implementation\Com.c	  2995  #if ((COM_EXISTS_SINT16_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  2996  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  2997  *  Com_RxSignalProcessing_SINT16
; ..\component\Com\Implementation\Com.c	  2998  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  2999  /*!
; ..\component\Com\Implementation\Com.c	  3000   * \brief         This method reads the signal value from the PDU buffer performs the invalid check and evaluates the filter state
; ..\component\Com\Implementation\Com.c	  3001   *                and updates the internal signal buffer if value is valid.
; ..\component\Com\Implementation\Com.c	  3002   * \details       -
; ..\component\Com\Implementation\Com.c	  3003   * \pre           -
; ..\component\Com\Implementation\Com.c	  3004   * \param[in]     PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  3005   * \param[in]     idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  3006   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  3007   *                        VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  3008   *                        INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  3009   *                        FILTERED    the signal value does not pass the filter
; ..\component\Com\Implementation\Com.c	  3010   * \trace         SPEC-2736777
; ..\component\Com\Implementation\Com.c	  3011   * \trace         SPEC-2736778
; ..\component\Com\Implementation\Com.c	  3012  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3013  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_SINT16(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  3014  #endif
; ..\component\Com\Implementation\Com.c	  3015  
; ..\component\Com\Implementation\Com.c	  3016  #if ((COM_EXISTS_UINT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3017  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3018  *  Com_RxSignalProcessing_UINT32
; ..\component\Com\Implementation\Com.c	  3019  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3020  /*!
; ..\component\Com\Implementation\Com.c	  3021   * \brief         This method reads the signal value from the PDU buffer performs the invalid check and evaluates the filter state
; ..\component\Com\Implementation\Com.c	  3022   *                and updates the internal signal buffer if value is valid.
; ..\component\Com\Implementation\Com.c	  3023   * \details       -
; ..\component\Com\Implementation\Com.c	  3024   * \pre           -
; ..\component\Com\Implementation\Com.c	  3025   * \param[in]     PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  3026   * \param[in]     idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  3027   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  3028   *                        VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  3029   *                        INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  3030   *                        FILTERED    the signal value does not pass the filter
; ..\component\Com\Implementation\Com.c	  3031   * \trace         SPEC-2736777
; ..\component\Com\Implementation\Com.c	  3032   * \trace         SPEC-2736778
; ..\component\Com\Implementation\Com.c	  3033  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3034  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_UINT32(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  3035  #endif
; ..\component\Com\Implementation\Com.c	  3036  
; ..\component\Com\Implementation\Com.c	  3037  #if ((COM_EXISTS_SINT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3038  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3039  *  Com_RxSignalProcessing_SINT32
; ..\component\Com\Implementation\Com.c	  3040  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3041  /*!
; ..\component\Com\Implementation\Com.c	  3042   * \brief         This method reads the signal value from the PDU buffer performs the invalid check and evaluates the filter state
; ..\component\Com\Implementation\Com.c	  3043   *                and updates the internal signal buffer if value is valid.
; ..\component\Com\Implementation\Com.c	  3044   * \details       -
; ..\component\Com\Implementation\Com.c	  3045   * \pre           -
; ..\component\Com\Implementation\Com.c	  3046   * \param[in]     PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  3047   * \param[in]     idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  3048   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  3049   *                        VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  3050   *                        INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  3051   *                        FILTERED    the signal value does not pass the filter
; ..\component\Com\Implementation\Com.c	  3052   * \trace         SPEC-2736777
; ..\component\Com\Implementation\Com.c	  3053   * \trace         SPEC-2736778
; ..\component\Com\Implementation\Com.c	  3054  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3055  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_SINT32(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  3056  #endif
; ..\component\Com\Implementation\Com.c	  3057  
; ..\component\Com\Implementation\Com.c	  3058  #if ((COM_EXISTS_UINT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3059  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3060  *  Com_RxSignalProcessing_UINT64
; ..\component\Com\Implementation\Com.c	  3061  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3062  /*!
; ..\component\Com\Implementation\Com.c	  3063   * \brief         This method reads the signal value from the PDU buffer performs the invalid check and evaluates the filter state
; ..\component\Com\Implementation\Com.c	  3064   *                and updates the internal signal buffer if value is valid.
; ..\component\Com\Implementation\Com.c	  3065   * \details       -
; ..\component\Com\Implementation\Com.c	  3066   * \pre           -
; ..\component\Com\Implementation\Com.c	  3067   * \param[in]     PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  3068   * \param[in]     idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  3069   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  3070   *                        VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  3071   *                        INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  3072   *                        FILTERED    the signal value does not pass the filter
; ..\component\Com\Implementation\Com.c	  3073   * \trace         SPEC-2736777
; ..\component\Com\Implementation\Com.c	  3074   * \trace         SPEC-2736778
; ..\component\Com\Implementation\Com.c	  3075  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3076  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_UINT64(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  3077  #endif
; ..\component\Com\Implementation\Com.c	  3078  
; ..\component\Com\Implementation\Com.c	  3079  #if ((COM_EXISTS_SINT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3080  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3081  *  Com_RxSignalProcessing_SINT64
; ..\component\Com\Implementation\Com.c	  3082  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3083  /*!
; ..\component\Com\Implementation\Com.c	  3084   * \brief         This method reads the signal value from the PDU buffer performs the invalid check and evaluates the filter state
; ..\component\Com\Implementation\Com.c	  3085   *                and updates the internal signal buffer if value is valid.
; ..\component\Com\Implementation\Com.c	  3086   * \details       -
; ..\component\Com\Implementation\Com.c	  3087   * \pre           -
; ..\component\Com\Implementation\Com.c	  3088   * \param[in]     PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  3089   * \param[in]     idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  3090   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  3091   *                        VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  3092   *                        INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  3093   *                        FILTERED    the signal value does not pass the filter
; ..\component\Com\Implementation\Com.c	  3094   * \trace         SPEC-2736777
; ..\component\Com\Implementation\Com.c	  3095   * \trace         SPEC-2736778
; ..\component\Com\Implementation\Com.c	  3096  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3097  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_SINT64(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  3098  #endif
; ..\component\Com\Implementation\Com.c	  3099  
; ..\component\Com\Implementation\Com.c	  3100  #if ((COM_EXISTS_FLOAT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3101  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3102  *  Com_RxSignalProcessing_FLOAT32
; ..\component\Com\Implementation\Com.c	  3103  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3104  /*!
; ..\component\Com\Implementation\Com.c	  3105   * \brief         This method reads the signal value from the PDU buffer performs the invalid check and evaluates the filter state
; ..\component\Com\Implementation\Com.c	  3106   *                and updates the internal signal buffer if value is valid.
; ..\component\Com\Implementation\Com.c	  3107   * \details       -
; ..\component\Com\Implementation\Com.c	  3108   * \pre           -
; ..\component\Com\Implementation\Com.c	  3109   * \param[in]     PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  3110   * \param[in]     idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  3111   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  3112   *                        VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  3113   *                        INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  3114   *                        FILTERED    the signal value does not pass the filter
; ..\component\Com\Implementation\Com.c	  3115   * \trace         SPEC-2736777
; ..\component\Com\Implementation\Com.c	  3116   * \trace         SPEC-2736778
; ..\component\Com\Implementation\Com.c	  3117  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3118  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_FLOAT32(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  3119  #endif
; ..\component\Com\Implementation\Com.c	  3120  
; ..\component\Com\Implementation\Com.c	  3121  #if ((COM_EXISTS_FLOAT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3122  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3123  *  Com_RxSignalProcessing_FLOAT64
; ..\component\Com\Implementation\Com.c	  3124  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3125  /*!
; ..\component\Com\Implementation\Com.c	  3126   * \brief         This method reads the signal value from the PDU buffer performs the invalid check and evaluates the filter state
; ..\component\Com\Implementation\Com.c	  3127   *                and updates the internal signal buffer if value is valid.
; ..\component\Com\Implementation\Com.c	  3128   * \details       -
; ..\component\Com\Implementation\Com.c	  3129   * \pre           -
; ..\component\Com\Implementation\Com.c	  3130   * \param[in]     PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  3131   * \param[in]     idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  3132   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  3133   *                        VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  3134   *                        INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  3135   *                        FILTERED    the signal value does not pass the filter
; ..\component\Com\Implementation\Com.c	  3136   * \trace         SPEC-2736777
; ..\component\Com\Implementation\Com.c	  3137   * \trace         SPEC-2736778
; ..\component\Com\Implementation\Com.c	  3138  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3139  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_FLOAT64(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  3140  #endif
; ..\component\Com\Implementation\Com.c	  3141  #if((COM_EXISTS_UINT8_N_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3142  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3143  *  Com_RxSignalProcessing_UINT8_N
; ..\component\Com\Implementation\Com.c	  3144  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3145  /*!
; ..\component\Com\Implementation\Com.c	  3146   * \brief         This method reads the signal value from the PDU buffer performs the invalid check and evaluates the filter state
; ..\component\Com\Implementation\Com.c	  3147   *                and updates the internal signal buffer if value is valid.
; ..\component\Com\Implementation\Com.c	  3148   * \details       -
; ..\component\Com\Implementation\Com.c	  3149   * \pre           -
; ..\component\Com\Implementation\Com.c	  3150   * \param[in]     PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  3151   * \param[in]     idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  3152   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  3153   *                        VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  3154   *                        INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  3155   *                        FILTERED    the signal value is does not pass the filter
; ..\component\Com\Implementation\Com.c	  3156   * \trace         SPEC-2736777
; ..\component\Com\Implementation\Com.c	  3157   * \trace         SPEC-2736778
; ..\component\Com\Implementation\Com.c	  3158  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3159  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_UINT8_N(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  3160  #endif
; ..\component\Com\Implementation\Com.c	  3161  
; ..\component\Com\Implementation\Com.c	  3162  #if ((COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3163  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3164  *  Com_RxSignalProcessing_UINT8_DYN
; ..\component\Com\Implementation\Com.c	  3165  *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3166  /*!
; ..\component\Com\Implementation\Com.c	  3167   * \brief         This method reads the signal value from the PDU buffer performs the invalid check and evaluates the filter state
; ..\component\Com\Implementation\Com.c	  3168   *                and updates the internal signal buffer if value is valid.
; ..\component\Com\Implementation\Com.c	  3169   * \details       -
; ..\component\Com\Implementation\Com.c	  3170   * \pre           -
; ..\component\Com\Implementation\Com.c	  3171   * \param[in]     PduInfoPtr              received PDU.
; ..\component\Com\Implementation\Com.c	  3172   * \param[in]     idxRxAccessInfo         Rx Access Info index.
; ..\component\Com\Implementation\Com.c	  3173   * \return        Com_RxSigProcessState
; ..\component\Com\Implementation\Com.c	  3174   *                        VALID       the signal value is valid
; ..\component\Com\Implementation\Com.c	  3175   *                        INVALID     the signal value is invalid
; ..\component\Com\Implementation\Com.c	  3176   *                        FILTERED    the signal value is does not pass the filter
; ..\component\Com\Implementation\Com.c	  3177   * \trace         SPEC-2736777
; ..\component\Com\Implementation\Com.c	  3178   * \trace         SPEC-2736778
; ..\component\Com\Implementation\Com.c	  3179  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3180  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_UINT8_DYN(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  3181  #endif
; ..\component\Com\Implementation\Com.c	  3182  
; ..\component\Com\Implementation\Com.c	  3183  #if (COM_TXBUFFERUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3184  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3185    Com_TxBuffer_InitTxIpdu
; ..\component\Com\Implementation\Com.c	  3186  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3187  /*! \brief        This function initializes a tx I-PDU in Com_TxBuffer.
; ..\component\Com\Implementation\Com.c	  3188      \details      -
; ..\component\Com\Implementation\Com.c	  3189      \pre          -
; ..\component\Com\Implementation\Com.c	  3190      \param[in]    ComPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	  3191      \context      TASK
; ..\component\Com\Implementation\Com.c	  3192  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3193  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxBuffer_InitTxIpdu(Com_TxPduInfoIterType ComPduId);
; ..\component\Com\Implementation\Com.c	  3194  #endif
; ..\component\Com\Implementation\Com.c	  3195  
; ..\component\Com\Implementation\Com.c	  3196  #if (COM_CONSTVALUEUINT8UBCLEARMASKENDIDXOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3197  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3198    Com_TxBuffer_ClearUpdateBits
; ..\component\Com\Implementation\Com.c	  3199  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3200  /*! \brief        This method sets the update bits to 0.
; ..\component\Com\Implementation\Com.c	  3201      \details      -
; ..\component\Com\Implementation\Com.c	  3202      \pre          -
; ..\component\Com\Implementation\Com.c	  3203      \param[in]    ComTxPduId    ID of Tx I-PDU.
; ..\component\Com\Implementation\Com.c	  3204      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3205  ***********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3206  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxBuffer_ClearUpdateBits(PduIdType ComTxPduId);
; ..\component\Com\Implementation\Com.c	  3207  #endif
; ..\component\Com\Implementation\Com.c	  3208  
; ..\component\Com\Implementation\Com.c	  3209  #if (COM_TXSIGGRPMASK == STD_ON)
; ..\component\Com\Implementation\Com.c	  3210  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3211    Com_TxBuffer_WriteSignalGroup
; ..\component\Com\Implementation\Com.c	  3212  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3213  /*! \brief        This method reads from the signal group buffer and writes the data to the Idpu buffer.
; ..\component\Com\Implementation\Com.c	  3214      \details      -
; ..\component\Com\Implementation\Com.c	  3215      \pre          -
; ..\component\Com\Implementation\Com.c	  3216      \param[in]    SignalGroupId  ID of Tx signal group.
; ..\component\Com\Implementation\Com.c	  3217      \param[in]    ShadowBufferPtr Reference to the signal group buffer.
; ..\component\Com\Implementation\Com.c	  3218      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3219  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3220  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxBuffer_WriteSignalGroup(Com_SignalGroupIdType SignalGroupId, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) ShadowBufferPtr);
; ..\component\Com\Implementation\Com.c	  3221  #endif
; ..\component\Com\Implementation\Com.c	  3222  
; ..\component\Com\Implementation\Com.c	  3223  #if (COM_TXTOUTCNT == STD_ON)
; ..\component\Com\Implementation\Com.c	  3224  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3225    Com_TxDlMon_Init
; ..\component\Com\Implementation\Com.c	  3226  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3227  /*! \brief    This function initializes the Com_TxDlMon.
; ..\component\Com\Implementation\Com.c	  3228      \details  -
; ..\component\Com\Implementation\Com.c	  3229      \pre      -
; ..\component\Com\Implementation\Com.c	  3230      \context  TASK
; ..\component\Com\Implementation\Com.c	  3231  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3232  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_Init(void);
; ..\component\Com\Implementation\Com.c	  3233  #endif
; ..\component\Com\Implementation\Com.c	  3234  
; ..\component\Com\Implementation\Com.c	  3235  #if (COM_TXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3236  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3237    Com_TxDlMon_MainFunctionTx
; ..\component\Com\Implementation\Com.c	  3238  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3239  /*! \brief    This function performs the Tx Deadline Monitoring.
; ..\component\Com\Implementation\Com.c	  3240      \details  -
; ..\component\Com\Implementation\Com.c	  3241      \pre      -
; ..\component\Com\Implementation\Com.c	  3242      \trace    SPEC-2736820
; ..\component\Com\Implementation\Com.c	  3243      \context  TASK
; ..\component\Com\Implementation\Com.c	  3244  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3245  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_MainFunctionTx(void);
; ..\component\Com\Implementation\Com.c	  3246  #endif
; ..\component\Com\Implementation\Com.c	  3247  
; ..\component\Com\Implementation\Com.c	  3248  #if(COM_TXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3249  
; ..\component\Com\Implementation\Com.c	  3250  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	  3251  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3252    Com_TxDlMon_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	  3253  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3254  /*! \brief    This function enters the tx deadline monitoring exclusive area.
; ..\component\Com\Implementation\Com.c	  3255      \details  -
; ..\component\Com\Implementation\Com.c	  3256      \pre      -
; ..\component\Com\Implementation\Com.c	  3257      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  3258      \context  TASK
; ..\component\Com\Implementation\Com.c	  3259  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3260  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_EnterExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	  3261  
; ..\component\Com\Implementation\Com.c	  3262  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3263    Com_TxDlMon_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	  3264  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3265  /*! \brief    This function exits the tx deadline monitoring exclusive area.
; ..\component\Com\Implementation\Com.c	  3266      \details  -
; ..\component\Com\Implementation\Com.c	  3267      \pre      -
; ..\component\Com\Implementation\Com.c	  3268      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  3269      \context  TASK
; ..\component\Com\Implementation\Com.c	  3270  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3271  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_ExitExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	  3272  
; ..\component\Com\Implementation\Com.c	  3273  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3274    Com_TxDlMon_ThresholdCheck
; ..\component\Com\Implementation\Com.c	  3275  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3276  /*! \brief    This function checks if the ISR Lock must be opened
; ..\component\Com\Implementation\Com.c	  3277      \details  -
; ..\component\Com\Implementation\Com.c	  3278      \pre      -
; ..\component\Com\Implementation\Com.c	  3279      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  3280      \context  TASK
; ..\component\Com\Implementation\Com.c	  3281  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3282  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_ThresholdCheck(void);
; ..\component\Com\Implementation\Com.c	  3283  
; ..\component\Com\Implementation\Com.c	  3284  #endif
; ..\component\Com\Implementation\Com.c	  3285  
; ..\component\Com\Implementation\Com.c	  3286  #if (COM_TXTOUTINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3287  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3288    Com_TxDlMon_TxConfirmation
; ..\component\Com\Implementation\Com.c	  3289  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3290  /*! \brief        This function stops the tx deadline monitoring after a succesful transmission.
; ..\component\Com\Implementation\Com.c	  3291      \details      -
; ..\component\Com\Implementation\Com.c	  3292      \pre          -
; ..\component\Com\Implementation\Com.c	  3293      \param[in]    TxPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	  3294      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3295  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3296  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_TxConfirmation(PduIdType TxPduId);
; ..\component\Com\Implementation\Com.c	  3297  #endif
; ..\component\Com\Implementation\Com.c	  3298  
; ..\component\Com\Implementation\Com.c	  3299  #if (COM_TXTOUTINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3300  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3301    Com_TxDlMon_IPduGroupStart
; ..\component\Com\Implementation\Com.c	  3302  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3303  /*! \brief        This function initializes the tx timeout values of the passed tx I-PDU
; ..\component\Com\Implementation\Com.c	  3304      \details      -
; ..\component\Com\Implementation\Com.c	  3305      \pre          -
; ..\component\Com\Implementation\Com.c	  3306      \param[in]    TxPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	  3307      \context      TASK
; ..\component\Com\Implementation\Com.c	  3308  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3309  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_IPduGroupStart(Com_TxPduInfoIterType TxPduId);
; ..\component\Com\Implementation\Com.c	  3310  #endif
; ..\component\Com\Implementation\Com.c	  3311  
; ..\component\Com\Implementation\Com.c	  3312  #if (COM_EXISTS_NORMAL_MODEOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3313  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3314    Com_TxDlMon_SwitchIpduTxMode
; ..\component\Com\Implementation\Com.c	  3315  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3316  /*! \brief        This function reset the tx timeout counter of the passed tx I-PDU
; ..\component\Com\Implementation\Com.c	  3317      \details      -
; ..\component\Com\Implementation\Com.c	  3318      \pre          -
; ..\component\Com\Implementation\Com.c	  3319      \param[in]    TxPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	  3320      \trace        SPEC-2736879
; ..\component\Com\Implementation\Com.c	  3321      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3322  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3323  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_SwitchIpduTxMode(PduIdType TxPduId);
; ..\component\Com\Implementation\Com.c	  3324  #endif
; ..\component\Com\Implementation\Com.c	  3325  
; ..\component\Com\Implementation\Com.c	  3326  #if (COM_CBKTXTOUTFUNCPTRINDUSEDOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3327  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3328    Com_TxDlMon_TxCallCbkTout
; ..\component\Com\Implementation\Com.c	  3329  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3330  /*! \brief        This function calls the TxTout callback functions.
; ..\component\Com\Implementation\Com.c	  3331   *  \details      -
; ..\component\Com\Implementation\Com.c	  3332      \pre          -
; ..\component\Com\Implementation\Com.c	  3333      \param[in]    idxTxTOutInfo  Index of TxTOutInfo
; ..\component\Com\Implementation\Com.c	  3334      \context      TASK
; ..\component\Com\Implementation\Com.c	  3335  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3336  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_TxCallCbkTout(Com_SizeOfTxTOutInfoType idxTxTOutInfo);
; ..\component\Com\Implementation\Com.c	  3337  #endif
; ..\component\Com\Implementation\Com.c	  3338  
; ..\component\Com\Implementation\Com.c	  3339  #if (COM_GWTIMEOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3340  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3341    Com_GwTout_HandleCounter
; ..\component\Com\Implementation\Com.c	  3342  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3343  /*! \brief    This function handles the GW timeout counter. On a timeout event the cyclic transmission is stopped.
; ..\component\Com\Implementation\Com.c	  3344      \details  -
; ..\component\Com\Implementation\Com.c	  3345      \pre      -
; ..\component\Com\Implementation\Com.c	  3346      \context  TASK
; ..\component\Com\Implementation\Com.c	  3347  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3348  LOCAL_INLINE FUNC(void, COM_CODE) Com_GwTout_HandleCounter(void);
; ..\component\Com\Implementation\Com.c	  3349  
; ..\component\Com\Implementation\Com.c	  3350  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3351    Com_GwTout_InitCounter
; ..\component\Com\Implementation\Com.c	  3352  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3353  /*! \brief        This function initializes the GW timeout counter for a given Pdu. On a timeout event
; ..\component\Com\Implementation\Com.c	  3354                    the cyclic transmission is stopped.
; ..\component\Com\Implementation\Com.c	  3355   *  \details      -
; ..\component\Com\Implementation\Com.c	  3356      \pre          -
; ..\component\Com\Implementation\Com.c	  3357      \param[in]    ComPduId    ComIPdu handle id
; ..\component\Com\Implementation\Com.c	  3358      \context      TASK
; ..\component\Com\Implementation\Com.c	  3359  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3360  LOCAL_INLINE FUNC(void, COM_CODE) Com_GwTout_InitCounter(PduIdType ComPduId);
; ..\component\Com\Implementation\Com.c	  3361  #endif
; ..\component\Com\Implementation\Com.c	  3362  #if ((COM_INVVALUEUSEDOFTXSIGINFO == STD_ON) || (COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3363  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3364    Com_InvalidateSignal_SendSignal
; ..\component\Com\Implementation\Com.c	  3365  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3366  /*! \brief        This function calls Com_SendSignal according to the configured ApplType.
; ..\component\Com\Implementation\Com.c	  3367      \details      -
; ..\component\Com\Implementation\Com.c	  3368      \pre          -
; ..\component\Com\Implementation\Com.c	  3369      \param[in]    idxTxSigInfo ID of signal or group signal to be invalidated.
; ..\component\Com\Implementation\Com.c	  3370      \return       uint8
; ..\component\Com\Implementation\Com.c	  3371                      E_OK                        service has been accepted
; ..\component\Com\Implementation\Com.c	  3372                      COM_SERVICE_NOT_AVAILABLE   corresponding I-PDU group was stopped
; ..\component\Com\Implementation\Com.c	  3373                                                  (or service failed due to development error)
; ..\component\Com\Implementation\Com.c	  3374      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3375  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3376  LOCAL_INLINE FUNC(uint8, COM_CODE) Com_InvalidateSignal_SendSignal(Com_SignalIdType idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	  3377  #endif
; ..\component\Com\Implementation\Com.c	  3378  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3379  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3380    Com_TxLLIf_InitTxIpdu
; ..\component\Com\Implementation\Com.c	  3381  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3382  /*! \brief        This function initializes a tx I-PDU in Com_TxLLIf.
; ..\component\Com\Implementation\Com.c	  3383      \details      -
; ..\component\Com\Implementation\Com.c	  3384      \pre          -
; ..\component\Com\Implementation\Com.c	  3385      \param[in]    ComPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	  3386      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3387  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3388  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxLLIf_InitTxIpdu(Com_TxPduInfoIterType ComPduId);
; ..\component\Com\Implementation\Com.c	  3389  
; ..\component\Com\Implementation\Com.c	  3390  # if ((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) || (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON) || (COM_EXISTS_TRANSMIT_CLRUBOFTXPDUINFO == STD_ON) || (COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3391  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3392  Com_TxLLIf_SetTxAttributes
; ..\component\Com\Implementation\Com.c	  3393  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3394  /*! \brief        This function adjusts Tx-Parameter like Update-Bit, Delay Time Counter, Tp Connection State and
; ..\component\Com\Implementation\Com.c	  3395   *                Com_WaitingForConfirmation Parameter if the status of transmit request has been accepted.
; ..\component\Com\Implementation\Com.c	  3396      \details      -
; ..\component\Com\Implementation\Com.c	  3397      \pre          -
; ..\component\Com\Implementation\Com.c	  3398      \param[in]    status        Status if transmit request has been accepted or not
; ..\component\Com\Implementation\Com.c	  3399      \param[in]    ComTxPduId    Valid ID of Tx I-PDU to be transmitted.
; ..\component\Com\Implementation\Com.c	  3400      \trace        SPEC-2736857, SPEC-2736858, SPEC-2736898
; ..\component\Com\Implementation\Com.c	  3401      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3402  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3403  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxLLIf_SetTxAttributes(PduIdType ComTxPduId, Std_ReturnType status);
; ..\component\Com\Implementation\Com.c	  3404  # endif
; ..\component\Com\Implementation\Com.c	  3405  #endif
; ..\component\Com\Implementation\Com.c	  3406  
; ..\component\Com\Implementation\Com.c	  3407  #if ((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) && (COM_CANCELLATIONSUPPORTOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3408  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3409    Com_TxLLIf_CancelTransmit
; ..\component\Com\Implementation\Com.c	  3410  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3411  /*! \brief        This function wraps the call of PduR_ComCancelTransmit(), if configured, for the given Tx I-PDU.
; ..\component\Com\Implementation\Com.c	  3412                    If required, the ID is converted to the PduR handle space.
; ..\component\Com\Implementation\Com.c	  3413      \details      -
; ..\component\Com\Implementation\Com.c	  3414      \pre          -
; ..\component\Com\Implementation\Com.c	  3415      \param[in]    ComTxPduId    ID of I-PDU to be transmitted.
; ..\component\Com\Implementation\Com.c	  3416      \context      TASK
; ..\component\Com\Implementation\Com.c	  3417  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3418  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxLLIf_CancelTransmit(PduIdType ComTxPduId);
; ..\component\Com\Implementation\Com.c	  3419  #endif
; ..\component\Com\Implementation\Com.c	  3420  
; ..\component\Com\Implementation\Com.c	  3421  #if (COM_TXPDUCALLOUTFUNCPTRUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3422  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3423    Com_TxLLIf_GetTxPduCalloutFuncPtr
; ..\component\Com\Implementation\Com.c	  3424  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3425  /*! \brief            This function returns the result of Tx Pdu Callout.
; ..\component\Com\Implementation\Com.c	  3426      \details          -
; ..\component\Com\Implementation\Com.c	  3427      \pre              -
; ..\component\Com\Implementation\Com.c	  3428      \param[in]        ComTxPduId    ID of I-PDU to be transmitted.
; ..\component\Com\Implementation\Com.c	  3429      \param[in,out]    PduInfo       Pointer to the SDU buffer and the SDU length.
; ..\component\Com\Implementation\Com.c	  3430      \return           boolean       callout result
; ..\component\Com\Implementation\Com.c	  3431      \context          TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3432      \trace            CREQ-103167
; ..\component\Com\Implementation\Com.c	  3433  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3434  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_TxLLIf_GetTxPduCalloutFuncPtr(PduIdType ComTxPduId, P2VAR(PduInfoType, AUTOMATIC, AUTOMATIC) PduInfo);
; ..\component\Com\Implementation\Com.c	  3435  #endif
; ..\component\Com\Implementation\Com.c	  3436  
; ..\component\Com\Implementation\Com.c	  3437  #if (COM_TRIGGER_TRANSMIT_API == STD_ON)
; ..\component\Com\Implementation\Com.c	  3438  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3439    Com_TriggerTransmit_Process
; ..\component\Com\Implementation\Com.c	  3440  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3441  /*! \brief            Within this function, the upper layer module
; ..\component\Com\Implementation\Com.c	  3442                        (called module) shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and
; ..\component\Com\Implementation\Com.c	  3443                        update the length of the actual copied data in PduInfoPtr->SduLength.
; ..\component\Com\Implementation\Com.c	  3444      \details          -
; ..\component\Com\Implementation\Com.c	  3445      \pre              -
; ..\component\Com\Implementation\Com.c	  3446      \param[in]        TxPduId      ID of the SDU that is requested to be transmitted.
; ..\component\Com\Implementation\Com.c	  3447      \param[in,out]    PduInfoPtr   Contains a pointer to a buffer (SduDataPtr) to where the SDU
; ..\component\Com\Implementation\Com.c	  3448                                   data shall be copied, and the available buffer size in SduLengh.
; ..\component\Com\Implementation\Com.c	  3449                                   On return, the service will indicate the length of the copied SDU
; ..\component\Com\Implementation\Com.c	  3450                                   data in SduLength.
; ..\component\Com\Implementation\Com.c	  3451      \return           E_OK       SDU has been copied and SduLength indicates the number of copied bytes.
; ..\component\Com\Implementation\Com.c	  3452      \return           E_NOT_OK   No data has been copied, because
; ..\component\Com\Implementation\Com.c	  3453                                   Com is not initialized
; ..\component\Com\Implementation\Com.c	  3454                                   or TxPduId is not valid
; ..\component\Com\Implementation\Com.c	  3455                                   or PduInfoPtr is NULL_PTR
; ..\component\Com\Implementation\Com.c	  3456                                   or SduDataPtr is NULL_PTR
; ..\component\Com\Implementation\Com.c	  3457                                   or SduLength is to small.
; ..\component\Com\Implementation\Com.c	  3458      \trace            CREQ-103166
; ..\component\Com\Implementation\Com.c	  3459      \trace            SPEC-2737060
; ..\component\Com\Implementation\Com.c	  3460      \context          TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3461  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3462  LOCAL_INLINE FUNC(Std_ReturnType, COM_CODE) Com_TriggerTransmit_Process(PduIdType TxPduId, P2VAR(PduInfoType, AUTOMATIC, COM_APPL_VAR) PduInfoPtr);
; ..\component\Com\Implementation\Com.c	  3463  #endif
; ..\component\Com\Implementation\Com.c	  3464  
; ..\component\Com\Implementation\Com.c	  3465  #if((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) || (COM_TX_CONFIRMATION_API == STD_ON))
; ..\component\Com\Implementation\Com.c	  3466  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3467    Com_TxConfirmation_Process
; ..\component\Com\Implementation\Com.c	  3468  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3469  /*! \brief        The lower layer communication interface module confirms the transmission of an I-PDU.
; ..\component\Com\Implementation\Com.c	  3470      \details      -
; ..\component\Com\Implementation\Com.c	  3471      \pre          -
; ..\component\Com\Implementation\Com.c	  3472      \param[in]    TxPduId       ID of the I-PDU that has been transmitted.
; ..\component\Com\Implementation\Com.c	  3473      \trace        SPEC-2736844
; ..\component\Com\Implementation\Com.c	  3474      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3475  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3476  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxConfirmation_Process(PduIdType TxPduId);
; ..\component\Com\Implementation\Com.c	  3477  #endif
; ..\component\Com\Implementation\Com.c	  3478  
; ..\component\Com\Implementation\Com.c	  3479  #if (COM_TXBUFFERMETADATAUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3480  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3481    Com_TxLLIf_CpyInitMetaDataToBffr
; ..\component\Com\Implementation\Com.c	  3482  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3483  /*! \brief        This function copies the initial meta data to TxBuffer.
; ..\component\Com\Implementation\Com.c	  3484      \details      -
; ..\component\Com\Implementation\Com.c	  3485      \pre          -
; ..\component\Com\Implementation\Com.c	  3486      \param[in]    ComTxPduId    ID of I-PDU to be transmitted.
; ..\component\Com\Implementation\Com.c	  3487      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3488  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3489  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxLLIf_CpyInitMetaDataToBffr(PduIdType ComTxPduId);
; ..\component\Com\Implementation\Com.c	  3490  #endif
; ..\component\Com\Implementation\Com.c	  3491  
; ..\component\Com\Implementation\Com.c	  3492  #if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3493  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3494    Com_ResetTxTpConnection
; ..\component\Com\Implementation\Com.c	  3495  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3496  /*! \brief        This function resets the TxTP state machine
; ..\component\Com\Implementation\Com.c	  3497      \details      -
; ..\component\Com\Implementation\Com.c	  3498      \pre          -
; ..\component\Com\Implementation\Com.c	  3499      \param[in]    PduId    ID of I-PDU whose TP connection shall be reset.
; ..\component\Com\Implementation\Com.c	  3500      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3501  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3502  FUNC(void, COM_CODE) Com_ResetTxTpConnection(PduIdType PduId);
; ..\component\Com\Implementation\Com.c	  3503  #endif
; ..\component\Com\Implementation\Com.c	  3504  
; ..\component\Com\Implementation\Com.c	  3505  #if (COM_TXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3506  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3507    Com_TxModeHdlr_InitTxIpdu
; ..\component\Com\Implementation\Com.c	  3508  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3509  /*! \brief        This function initializes a Tx I-PDU in Com_TxModeHdlr.
; ..\component\Com\Implementation\Com.c	  3510      \details      -
; ..\component\Com\Implementation\Com.c	  3511      \pre          -
; ..\component\Com\Implementation\Com.c	  3512      \param[in]    ComPduId Handle of the Tx I-PDU.
; ..\component\Com\Implementation\Com.c	  3513      \trace        SPEC-2736775
; ..\component\Com\Implementation\Com.c	  3514      \context      TASK
; ..\component\Com\Implementation\Com.c	  3515  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3516  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_InitTxIpdu(PduIdType ComPduId);
; ..\component\Com\Implementation\Com.c	  3517  
; ..\component\Com\Implementation\Com.c	  3518  # if ((COM_PERIODICOFTXMODETRUE == STD_ON) || (COM_PERIODICOFTXMODEFALSE == STD_ON) || (COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON) || (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3519  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3520    Com_TxModeHdlr_MainFunctionTx_CycleCounter
; ..\component\Com\Implementation\Com.c	  3521  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3522  /*! \brief    This function iterates over all Tx ComIPdus and processes the cyclic transmission.
; ..\component\Com\Implementation\Com.c	  3523      \details  -
; ..\component\Com\Implementation\Com.c	  3524      \pre      -
; ..\component\Com\Implementation\Com.c	  3525      \context  TASK
; ..\component\Com\Implementation\Com.c	  3526  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3527  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_MainFunctionTx_CycleCounter(void);
; ..\component\Com\Implementation\Com.c	  3528  
; ..\component\Com\Implementation\Com.c	  3529  
; ..\component\Com\Implementation\Com.c	  3530  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	  3531  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3532    Com_TxModeHdlr_EnterExclusiveArea_CycleCounter
; ..\component\Com\Implementation\Com.c	  3533  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3534  /*! \brief    This function enters the tx cyclic processing exclusive area.
; ..\component\Com\Implementation\Com.c	  3535      \details  -
; ..\component\Com\Implementation\Com.c	  3536      \pre      -
; ..\component\Com\Implementation\Com.c	  3537      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  3538      \context  TASK
; ..\component\Com\Implementation\Com.c	  3539  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3540  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_EnterExclusiveArea_CycleCounter(void);
; ..\component\Com\Implementation\Com.c	  3541  
; ..\component\Com\Implementation\Com.c	  3542  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3543    Com_TxModeHdlr_ExitExclusiveArea_CycleCounter
; ..\component\Com\Implementation\Com.c	  3544  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3545  /*! \brief    This function exits the tx cyclic processing exclusive area.
; ..\component\Com\Implementation\Com.c	  3546      \details  -
; ..\component\Com\Implementation\Com.c	  3547      \pre      -
; ..\component\Com\Implementation\Com.c	  3548      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  3549      \context  TASK
; ..\component\Com\Implementation\Com.c	  3550  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3551  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_ExitExclusiveArea_CycleCounter(void);
; ..\component\Com\Implementation\Com.c	  3552  
; ..\component\Com\Implementation\Com.c	  3553  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3554    Com_TxModeHdlr_ThresholdCheck_CycleCounter
; ..\component\Com\Implementation\Com.c	  3555  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3556  /*! \brief    This function checks if the ISR Lock must be opened
; ..\component\Com\Implementation\Com.c	  3557      \details  -
; ..\component\Com\Implementation\Com.c	  3558      \pre      -
; ..\component\Com\Implementation\Com.c	  3559      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  3560      \context  TASK
; ..\component\Com\Implementation\Com.c	  3561  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3562  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_ThresholdCheck_CycleCounter(void);
; ..\component\Com\Implementation\Com.c	  3563  
; ..\component\Com\Implementation\Com.c	  3564  # endif
; ..\component\Com\Implementation\Com.c	  3565  
; ..\component\Com\Implementation\Com.c	  3566  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3567    Com_TxModeHdlr_MainFunctionTx_Transmit
; ..\component\Com\Implementation\Com.c	  3568  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3569  /*! \brief    This function iterates over all Tx ComIPdus and process the related transmit requests.
; ..\component\Com\Implementation\Com.c	  3570      \details  -
; ..\component\Com\Implementation\Com.c	  3571      \pre      -
; ..\component\Com\Implementation\Com.c	  3572      \context  TASK
; ..\component\Com\Implementation\Com.c	  3573  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3574  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_MainFunctionTx_Transmit(void);
; ..\component\Com\Implementation\Com.c	  3575  
; ..\component\Com\Implementation\Com.c	  3576  
; ..\component\Com\Implementation\Com.c	  3577  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	  3578  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3579    Com_TxModeHdlr_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	  3580  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3581  /*! \brief    This function enters the tx processing exclusive area.
; ..\component\Com\Implementation\Com.c	  3582      \details  -
; ..\component\Com\Implementation\Com.c	  3583      \pre      -
; ..\component\Com\Implementation\Com.c	  3584      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  3585      \context  TASK
; ..\component\Com\Implementation\Com.c	  3586  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3587  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_EnterExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	  3588  
; ..\component\Com\Implementation\Com.c	  3589  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3590    Com_TxModeHdlr_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	  3591  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3592  /*! \brief    This function exits the tx processing exclusive area.
; ..\component\Com\Implementation\Com.c	  3593      \details  -
; ..\component\Com\Implementation\Com.c	  3594      \pre      -
; ..\component\Com\Implementation\Com.c	  3595      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  3596      \context  TASK
; ..\component\Com\Implementation\Com.c	  3597  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3598  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_ExitExclusiveArea(void);
; ..\component\Com\Implementation\Com.c	  3599  
; ..\component\Com\Implementation\Com.c	  3600  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3601    Com_TxModeHdlr_ThresholdCheck
; ..\component\Com\Implementation\Com.c	  3602  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3603  /*! \brief    This function checks if the ISR Lock must be opened
; ..\component\Com\Implementation\Com.c	  3604      \details  -
; ..\component\Com\Implementation\Com.c	  3605      \pre      -
; ..\component\Com\Implementation\Com.c	  3606      \trace    DSGN-COM_ISRTHRESHOLD_CONCEPT
; ..\component\Com\Implementation\Com.c	  3607      \context  TASK
; ..\component\Com\Implementation\Com.c	  3608  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3609  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_ThresholdCheck(void);
; ..\component\Com\Implementation\Com.c	  3610  
; ..\component\Com\Implementation\Com.c	  3611  
; ..\component\Com\Implementation\Com.c	  3612  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3613    Com_TxModeHdlr_MainFunctionTx_ProcessTransmit
; ..\component\Com\Implementation\Com.c	  3614  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3615  /*! \brief        This function process the transmit requests of provided ComTxPduId.
; ..\component\Com\Implementation\Com.c	  3616      \details      -
; ..\component\Com\Implementation\Com.c	  3617      \pre          -
; ..\component\Com\Implementation\Com.c	  3618      \param[in]    ComTxPduId    ID of Tx I-PDU.
; ..\component\Com\Implementation\Com.c	  3619      \context      TASK
; ..\component\Com\Implementation\Com.c	  3620  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3621  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_MainFunctionTx_ProcessTransmit(PduIdType ComTxPduId);
; ..\component\Com\Implementation\Com.c	  3622  
; ..\component\Com\Implementation\Com.c	  3623  # if ((COM_MINIMUMDELAYOFTXMODEINFO == STD_ON) || (COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	  3624  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3625    Com_TxModeHdlr_Confirmation
; ..\component\Com\Implementation\Com.c	  3626  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3627  /*! \brief        This method serves to start the delay time counter of the dependent I-PDU.
; ..\component\Com\Implementation\Com.c	  3628      \details      -
; ..\component\Com\Implementation\Com.c	  3629      \pre          -
; ..\component\Com\Implementation\Com.c	  3630      \param[in]    ComTxPduId    ID of Tx I-PDU.
; ..\component\Com\Implementation\Com.c	  3631      \return       TRUE:   report the confirmation to the upper layer
; ..\component\Com\Implementation\Com.c	  3632                    FALSE:  don't report the confirmation (used in Direct N-Times transmissions)
; ..\component\Com\Implementation\Com.c	  3633      \trace        SPEC-2736859
; ..\component\Com\Implementation\Com.c	  3634      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3635  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3636  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_TxModeHdlr_Confirmation(CONST(PduIdType, AUTOMATIC) ComTxPduId);
; ..\component\Com\Implementation\Com.c	  3637  # endif
; ..\component\Com\Implementation\Com.c	  3638  
; ..\component\Com\Implementation\Com.c	  3639  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3640    Com_TxModeHdlr_InitTxMode
; ..\component\Com\Implementation\Com.c	  3641  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3642  /*! \brief        This method initializes the transmission mode parameters (e.g. cycle counter). It is called each time
; ..\component\Com\Implementation\Com.c	  3643                    the active tx mode changes.
; ..\component\Com\Implementation\Com.c	  3644      \details      -
; ..\component\Com\Implementation\Com.c	  3645      \pre          -
; ..\component\Com\Implementation\Com.c	  3646      \param[in]    ComTxPduId    ID of Tx I-PDU.
; ..\component\Com\Implementation\Com.c	  3647      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3648  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3649  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_InitTxMode(CONST(PduIdType, AUTOMATIC) ComTxPduId);
; ..\component\Com\Implementation\Com.c	  3650  
; ..\component\Com\Implementation\Com.c	  3651  # if (COM_TXFILTERINITSTATEUSEDOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3652  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3653    Com_TxModeHdlr_UpdateTMS
; ..\component\Com\Implementation\Com.c	  3654  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3655  /*! \brief        This method manages the I-PDU transmission mode selection.
; ..\component\Com\Implementation\Com.c	  3656      \details      -
; ..\component\Com\Implementation\Com.c	  3657      \pre          -
; ..\component\Com\Implementation\Com.c	  3658      \param[in]    idxTxModeInfo    ID of Tx I-PDU.
; ..\component\Com\Implementation\Com.c	  3659      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3660      \trace        SPEC-2736812
; ..\component\Com\Implementation\Com.c	  3661      \trace        SPEC-2736813
; ..\component\Com\Implementation\Com.c	  3662      \trace        SPEC-2736814
; ..\component\Com\Implementation\Com.c	  3663  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3664  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_UpdateTMS(CONST(PduIdType, AUTOMATIC) idxTxModeInfo);
; ..\component\Com\Implementation\Com.c	  3665  # endif
; ..\component\Com\Implementation\Com.c	  3666  
; ..\component\Com\Implementation\Com.c	  3667  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3668    Com_TxModeHdlr_StopTxIpdus
; ..\component\Com\Implementation\Com.c	  3669  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3670  /*! \brief        This method cancels outstanding transmission requests of an I-PDU and reloads the time offset counter.
; ..\component\Com\Implementation\Com.c	  3671      \details      -
; ..\component\Com\Implementation\Com.c	  3672      \pre          -
; ..\component\Com\Implementation\Com.c	  3673      \param[in]    ComTxPduId  ID of Tx I-PDU.
; ..\component\Com\Implementation\Com.c	  3674      \trace        SPEC-2736842
; ..\component\Com\Implementation\Com.c	  3675      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3676  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3677  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_StopTxIpdus(CONST(PduIdType, AUTOMATIC) ComTxPduId);
; ..\component\Com\Implementation\Com.c	  3678  #endif
; ..\component\Com\Implementation\Com.c	  3679  
; ..\component\Com\Implementation\Com.c	  3680  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3681  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3682    Com_TxModeHdlr_TriggerIpduSendOnceDeferred
; ..\component\Com\Implementation\Com.c	  3683  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3684  /*! \brief        This method sets the internal transmit request flag and the I-PDU is transmitted once.
; ..\component\Com\Implementation\Com.c	  3685                    The I-PDU Transmit request is performed with the next call of Com_TxModeHdlr_MainFunction.
; ..\component\Com\Implementation\Com.c	  3686      \details      -
; ..\component\Com\Implementation\Com.c	  3687      \pre          -
; ..\component\Com\Implementation\Com.c	  3688      \param[in]    ComTxPduId  ID of Tx I-PDU.
; ..\component\Com\Implementation\Com.c	  3689      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3690  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3691  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_TriggerIpduSendOnceDeferred(CONST(PduIdType, AUTOMATIC) ComTxPduId);
; ..\component\Com\Implementation\Com.c	  3692  #endif
; ..\component\Com\Implementation\Com.c	  3693  
; ..\component\Com\Implementation\Com.c	  3694  #if ((COM_PERIODICOFTXMODETRUE == STD_ON) || (COM_PERIODICOFTXMODEFALSE == STD_ON) || (COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON) || (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3695  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3696    Com_TxModeHdlr_SetTransmitRequestAndCycleCnt
; ..\component\Com\Implementation\Com.c	  3697  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3698  /*! \brief        This function processes the cyclic transmission for the passed ComTxPdu.
; ..\component\Com\Implementation\Com.c	  3699      \details      -
; ..\component\Com\Implementation\Com.c	  3700      \pre          -
; ..\component\Com\Implementation\Com.c	  3701      \param[in]    ComTxPduId ID of Tx I-PDU.
; ..\component\Com\Implementation\Com.c	  3702      \context      TASK
; ..\component\Com\Implementation\Com.c	  3703      \trace        SPEC-2736819
; ..\component\Com\Implementation\Com.c	  3704  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3705  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_SetTransmitRequestAndCycleCnt(PduIdType ComTxPduId);
; ..\component\Com\Implementation\Com.c	  3706  #endif
; ..\component\Com\Implementation\Com.c	  3707  
; ..\component\Com\Implementation\Com.c	  3708  #if ((COM_CBKTXACKDEFFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)||(COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3709  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3710    Com_TxNHdlr_InitTxIpdu
; ..\component\Com\Implementation\Com.c	  3711  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3712  /*! \brief        This function initializes a tx I-PDU in Com_TxNHdlr.
; ..\component\Com\Implementation\Com.c	  3713      \details      -
; ..\component\Com\Implementation\Com.c	  3714      \pre          -
; ..\component\Com\Implementation\Com.c	  3715      \param[in]    ComPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	  3716      \context      TASK
; ..\component\Com\Implementation\Com.c	  3717  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3718  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxNHdlr_InitTxIpdu(Com_TxPduInfoIterType ComPduId);
; ..\component\Com\Implementation\Com.c	  3719  #endif
; ..\component\Com\Implementation\Com.c	  3720  
; ..\component\Com\Implementation\Com.c	  3721  #if (COM_CBKTXACKDEFFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3722  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3723    Com_TxNHdlr_MainFunctionTx
; ..\component\Com\Implementation\Com.c	  3724  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3725  /*! \brief    This function calls all deferred Tx notification functions.
; ..\component\Com\Implementation\Com.c	  3726      \details  -
; ..\component\Com\Implementation\Com.c	  3727      \pre      -
; ..\component\Com\Implementation\Com.c	  3728      \context  TASK
; ..\component\Com\Implementation\Com.c	  3729  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3730  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxNHdlr_MainFunctionTx(void);
; ..\component\Com\Implementation\Com.c	  3731  #endif
; ..\component\Com\Implementation\Com.c	  3732  
; ..\component\Com\Implementation\Com.c	  3733  #if (COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3734  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3735    Com_TxNHdlr_StopTxIpdu
; ..\component\Com\Implementation\Com.c	  3736  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3737  /*! \brief        This function calls all error notifications of the passed ComIPdu if a transmit of the PDU was not confirmed yet.
; ..\component\Com\Implementation\Com.c	  3738      \details      -
; ..\component\Com\Implementation\Com.c	  3739      \pre          -
; ..\component\Com\Implementation\Com.c	  3740      \param[in]    ComPduId Handle of the I-PDU.
; ..\component\Com\Implementation\Com.c	  3741      \trace        SPEC-2736843
; ..\component\Com\Implementation\Com.c	  3742      \context      TASK
; ..\component\Com\Implementation\Com.c	  3743  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3744  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxNHdlr_StopTxIpdu(Com_TxPduInfoIterType ComPduId);
; ..\component\Com\Implementation\Com.c	  3745  #endif
; ..\component\Com\Implementation\Com.c	  3746  
; ..\component\Com\Implementation\Com.c	  3747  #if ((COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)|| (COM_CBKTXACKIMFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)|| (COM_CBKTXACKDEFFUNCPTRINDUSEDOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3748  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3749    Com_TxNHdlr_Confirmation
; ..\component\Com\Implementation\Com.c	  3750  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3751  /*! \brief        This method sets the internal confirmation flag or calls the confirmation callback function.
; ..\component\Com\Implementation\Com.c	  3752      \details      -
; ..\component\Com\Implementation\Com.c	  3753      \pre          -
; ..\component\Com\Implementation\Com.c	  3754      \param[in]    ComPduId    ID of Tx I-PDU.
; ..\component\Com\Implementation\Com.c	  3755      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3756  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3757  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxNHdlr_Confirmation(PduIdType ComPduId);
; ..\component\Com\Implementation\Com.c	  3758  #endif
; ..\component\Com\Implementation\Com.c	  3759  
; ..\component\Com\Implementation\Com.c	  3760  #if ((COM_TXFILTERINITVALUEARRAYBASEDFILTERINITVALUEUSEDOFTXSIGINFO == STD_ON) || (COM_FILTERINITVALUEIDXOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3761  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3762    Com_GetOldValuePtr
; ..\component\Com\Implementation\Com.c	  3763  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3764  /*! \brief        This method delivers a pointer to Com_TxFilterOldValueX according to Com_GetFilterInitValueIdxOfTxSigInfo(idxTxSigInfo)
; ..\component\Com\Implementation\Com.c	  3765      \details      -
; ..\component\Com\Implementation\Com.c	  3766      \pre          -
; ..\component\Com\Implementation\Com.c	  3767      \param[in]    idxTxSigInfo      Index of Tx Signal Info
; ..\component\Com\Implementation\Com.c	  3768      \return       P2CONST(void, AUTOMATIC, AUTOMATIC), COM_CODE)
; ..\component\Com\Implementation\Com.c	  3769      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3770  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3771  LOCAL_INLINE FUNC(P2CONST(void, AUTOMATIC, AUTOMATIC), COM_CODE) Com_GetOldValuePtr(Com_SignalIdType idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	  3772  #endif
; ..\component\Com\Implementation\Com.c	  3773  
; ..\component\Com\Implementation\Com.c	  3774  #if ((COM_TXFILTERINITVALUEARRAYBASEDFILTERINITVALUEUSEDOFTXSIGINFO == STD_ON) || (COM_FILTERINITVALUEIDXOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3775  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3776    Com_SetTxFilterOldValueX
; ..\component\Com\Implementation\Com.c	  3777  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3778  /*! \brief        This method sets the Com_TxFilterOldValueX
; ..\component\Com\Implementation\Com.c	  3779      \details      -
; ..\component\Com\Implementation\Com.c	  3780      \pre          -
; ..\component\Com\Implementation\Com.c	  3781      \param[in]    idxTxSigInfo      Index of Tx Signal Info
; ..\component\Com\Implementation\Com.c	  3782      \param[in]    SignalDataPtr     Reference to the signal data to be transmitted.
; ..\component\Com\Implementation\Com.c	  3783      \param[in]    Length        Length of the dynamic length signal.
; ..\component\Com\Implementation\Com.c	  3784      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3785  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3786  LOCAL_INLINE FUNC(void, COM_CODE) Com_SetTxFilterOldValueX(Com_SignalIdType idxTxSigInfo, P2CONST(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr, uint16 Length);
; ..\component\Com\Implementation\Com.c	  3787  #endif
; ..\component\Com\Implementation\Com.c	  3788  
; ..\component\Com\Implementation\Com.c	  3789  
; ..\component\Com\Implementation\Com.c	  3790  #if ((COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3791  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3792    Com_SendSignal_EvaluateTriggerConditionAndRequestTransmit
; ..\component\Com\Implementation\Com.c	  3793  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3794  /*! \brief        This method evaluates the trigger conditions according to the configured transferProperty and
; ..\component\Com\Implementation\Com.c	  3795                    and the currently active TxModeMode. On valid trigger conditions either a transmit request is set or
; ..\component\Com\Implementation\Com.c	  3796                    the signal group flag is set to indicate a possible transmit.
; ..\component\Com\Implementation\Com.c	  3797      \details      -
; ..\component\Com\Implementation\Com.c	  3798      \pre          -
; ..\component\Com\Implementation\Com.c	  3799      \param[in]    idxTxPduInfo      Index of TxPduInfo
; ..\component\Com\Implementation\Com.c	  3800      \param[in]    idxTxSigInfo      Index of TxSigInfo
; ..\component\Com\Implementation\Com.c	  3801      \param[in]    newValuePtr       reference to the new signal value
; ..\component\Com\Implementation\Com.c	  3802      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3803  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3804  LOCAL_INLINE FUNC(void, COM_CODE) Com_SendSignal_EvaluateTriggerConditionAndRequestTransmit(Com_SignalIdType idxTxSigInfo, P2CONST(void, AUTOMATIC, AUTOMATIC) newValuePtr, PduIdType idxTxPduInfo);
; ..\component\Com\Implementation\Com.c	  3805  #endif
; ..\component\Com\Implementation\Com.c	  3806  
; ..\component\Com\Implementation\Com.c	  3807  #if (COM_TXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3808  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3809    Com_SendSignal_WriteSignal
; ..\component\Com\Implementation\Com.c	  3810  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3811  /*! \brief        This method updates the signal or group signal object identified by SignalId
; ..\component\Com\Implementation\Com.c	  3812                    with the signal data referenced by the SignalDataPtr parameter. The Length parameter is evaluated for
; ..\component\Com\Implementation\Com.c	  3813                    dynamic length signals.
; ..\component\Com\Implementation\Com.c	  3814      \details      -
; ..\component\Com\Implementation\Com.c	  3815      \pre          -
; ..\component\Com\Implementation\Com.c	  3816      \param[in]    idxTxPduInfo    Index of Tx Signal Info +
; ..\component\Com\Implementation\Com.c	  3817      \param[in]    idxTxSigInfo    Reference to the signal data to be transmitted.+
; ..\component\Com\Implementation\Com.c	  3818      \param[in]    Length          Signal length, only required for dynamic length signals.
; ..\component\Com\Implementation\Com.c	  3819      \param[in]    SignalDataPtr
; ..\component\Com\Implementation\Com.c	  3820      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3821  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3822  LOCAL_INLINE FUNC(void, COM_CODE) Com_SendSignal_WriteSignal(Com_SignalIdType idxTxSigInfo, P2CONST(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr, uint16 Length, PduIdType idxTxPduInfo);
; ..\component\Com\Implementation\Com.c	  3823  #endif
; ..\component\Com\Implementation\Com.c	  3824  
; ..\component\Com\Implementation\Com.c	  3825  #if (COM_TXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3826  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3827    Com_SendSignalGroup_TriggerEventProcessing
; ..\component\Com\Implementation\Com.c	  3828  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3829  /*! \brief        This method sets the internal transmit request flag and the I-PDU is transmitted once or multiple.
; ..\component\Com\Implementation\Com.c	  3830      \details      -
; ..\component\Com\Implementation\Com.c	  3831      \pre          -
; ..\component\Com\Implementation\Com.c	  3832      \param[in]    idxTxSigGrpInfo
; ..\component\Com\Implementation\Com.c	  3833      \param[in]    idxTxPduInfo
; ..\component\Com\Implementation\Com.c	  3834      \return       E_OK                        if service is accepted.
; ..\component\Com\Implementation\Com.c	  3835                    COM_SERVICE_NOT_AVAILABLE   corresponding I-PDU group was stopped
; ..\component\Com\Implementation\Com.c	  3836      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3837  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3838  LOCAL_INLINE FUNC(uint8, COM_CODE) Com_SendSignalGroup_TriggerEventProcessing(
; ..\component\Com\Implementation\Com.c	  3839  # if ((COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  3840                                                                                 Com_SignalIdType idxTxSigGrpInfo,
; ..\component\Com\Implementation\Com.c	  3841  # endif
; ..\component\Com\Implementation\Com.c	  3842                                                                                 PduIdType idxTxPduInfo);
; ..\component\Com\Implementation\Com.c	  3843  #endif
; ..\component\Com\Implementation\Com.c	  3844  
; ..\component\Com\Implementation\Com.c	  3845  #if ( (COM_TXSIGGRPINFOUSEDOFTXSIGINFO == STD_ON) && ((COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON)))
; ..\component\Com\Implementation\Com.c	  3846  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3847    Com_SendSignal_SetSigGrpEventFlag
; ..\component\Com\Implementation\Com.c	  3848  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3849  /*! \brief        This method wraps the function Com_SetSigGrpEventFlag in dependency of the input parameter TriggerWithoutRepetition
; ..\component\Com\Implementation\Com.c	  3850      \details      -
; ..\component\Com\Implementation\Com.c	  3851      \pre          -
; ..\component\Com\Implementation\Com.c	  3852      \param[in]    TriggerWithoutRepetition      TRUE if signal or group signal has any '*_WITHOUT_REPETITION' transfer property
; ..\component\Com\Implementation\Com.c	  3853      \param[in]    idxTxSigGrpInfo               Index of the Tx SigGrpInfo
; ..\component\Com\Implementation\Com.c	  3854      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3855  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3856  LOCAL_INLINE FUNC(void, COM_CODE) Com_SendSignal_SetSigGrpEventFlag(Com_TxSigGrpInfoIdxOfTxSigInfoType idxTxSigGrpInfo, boolean TriggerWithoutRepetition);
; ..\component\Com\Implementation\Com.c	  3857  #endif
; ..\component\Com\Implementation\Com.c	  3858  
; ..\component\Com\Implementation\Com.c	  3859  #if (COM_TXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3860  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3861    Com_SendSignalGroup_Processing
; ..\component\Com\Implementation\Com.c	  3862  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3863  /*! \brief        The service Com_SendSignalGroup_Processing copies the content of the associated shadow buffer to
; ..\component\Com\Implementation\Com.c	  3864                    the associated I-PDU buffer.
; ..\component\Com\Implementation\Com.c	  3865                    Prior to this call, all group signals should be updated in the shadow buffer
; ..\component\Com\Implementation\Com.c	  3866                    by the call of Com_SendSignal.
; ..\component\Com\Implementation\Com.c	  3867      \details      -
; ..\component\Com\Implementation\Com.c	  3868      \pre          -
; ..\component\Com\Implementation\Com.c	  3869      \param[in]    idxTxSigGrpInfo    ID of signal group to be send.
; ..\component\Com\Implementation\Com.c	  3870      \param[in]    ShadowBufferPtr    Pointer to Shadow Buffer
; ..\component\Com\Implementation\Com.c	  3871      \return       uint8
; ..\component\Com\Implementation\Com.c	  3872                      E_OK                        service has been accepted
; ..\component\Com\Implementation\Com.c	  3873                      COM_SERVICE_NOT_AVAILABLE   corresponding I-PDU group was stopped
; ..\component\Com\Implementation\Com.c	  3874                                                  (or service failed due to development error)
; ..\component\Com\Implementation\Com.c	  3875      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3876  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3877  LOCAL_INLINE FUNC(uint8, COM_CODE) Com_SendSignalGroup_Processing(Com_SignalIdType idxTxSigGrpInfo, P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) ShadowBufferPtr);
; ..\component\Com\Implementation\Com.c	  3878  #endif
; ..\component\Com\Implementation\Com.c	  3879  
; ..\component\Com\Implementation\Com.c	  3880  #if (COM_TXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3881  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3882    Com_SendSignal_Processing
; ..\component\Com\Implementation\Com.c	  3883  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3884  /*! \brief        The function Com_SendSignal_Processing updates the signal or group signal object
; ..\component\Com\Implementation\Com.c	  3885                    with the signal data referenced by the SignalDataPtr parameter. The Length parameter is evaluated for
; ..\component\Com\Implementation\Com.c	  3886                    dynamic length signals.
; ..\component\Com\Implementation\Com.c	  3887      \details      -
; ..\component\Com\Implementation\Com.c	  3888      \pre          -
; ..\component\Com\Implementation\Com.c	  3889      \param[in]    SignalDataPtr Reference to the signal data to be transmitted.
; ..\component\Com\Implementation\Com.c	  3890      \param[in]    Length        Length of the dynamic length signal.
; ..\component\Com\Implementation\Com.c	  3891      \param[in]    idxTxSigInfo  Index of signal or group signal to be sent.
; ..\component\Com\Implementation\Com.c	  3892      \return       uint8
; ..\component\Com\Implementation\Com.c	  3893                      E_OK                        service has been accepted
; ..\component\Com\Implementation\Com.c	  3894                      COM_SERVICE_NOT_AVAILABLE   corresponding I-PDU group was stopped
; ..\component\Com\Implementation\Com.c	  3895                                                  (or service failed due to development error)
; ..\component\Com\Implementation\Com.c	  3896                      COM_BUSY                    in case the TP-Buffer is locked for large data types handling
; ..\component\Com\Implementation\Com.c	  3897      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3898      \trace        SPEC-2736898, SPEC-2736899
; ..\component\Com\Implementation\Com.c	  3899      \warning      If the method is used on a microcontroller like the Tms320 DSP and the datatype uint8 is unsigned short
; ..\component\Com\Implementation\Com.c	  3900                    the 8 MSB bits of the variable shall never be set.
; ..\component\Com\Implementation\Com.c	  3901                    If the method is used on a microcontroller like the S12X and the datatype is uint16, sint16, uint32
; ..\component\Com\Implementation\Com.c	  3902                    or sint32 the SignalDataPtr must be word aligned.
; ..\component\Com\Implementation\Com.c	  3903  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3904  LOCAL_INLINE FUNC(uint8, COM_CODE) Com_SendSignal_Processing(Com_SignalIdType idxTxSigInfo, P2CONST(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr, uint16 Length);
; ..\component\Com\Implementation\Com.c	  3905  #endif
; ..\component\Com\Implementation\Com.c	  3906  
; ..\component\Com\Implementation\Com.c	  3907  #if (COM_FILTERINFOUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3908  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3909    Com_SendSignal_CheckFilter
; ..\component\Com\Implementation\Com.c	  3910  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3911  /*! \brief        If the Tx-Signal is configured to be filtered, this function evaluates the filters and updates the filter
; ..\component\Com\Implementation\Com.c	  3912   *                state.
; ..\component\Com\Implementation\Com.c	  3913      \details      -
; ..\component\Com\Implementation\Com.c	  3914      \pre          -
; ..\component\Com\Implementation\Com.c	  3915      \param[in]    idxTxSigInfo  ID of the Tx signal.
; ..\component\Com\Implementation\Com.c	  3916      \param[in]    newValuePtr Pointer to the new value
; ..\component\Com\Implementation\Com.c	  3917      \param[in]    idxTxPduInfo  ID of Tx I-PDU.
; ..\component\Com\Implementation\Com.c	  3918      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3919  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3920  LOCAL_INLINE FUNC(void, COM_CODE) Com_SendSignal_CheckFilter(Com_SignalIdType idxTxSigInfo, P2CONST(void, AUTOMATIC, AUTOMATIC) newValuePtr, PduIdType idxTxPduInfo);
; ..\component\Com\Implementation\Com.c	  3921  #endif
; ..\component\Com\Implementation\Com.c	  3922  
; ..\component\Com\Implementation\Com.c	  3923  #if ((COM_ARRAYACCESSUSEDOFTXSIGGRPINFO == STD_ON) && ((COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON)) && ((COM_TXSIGGRPONCHANGEMASKONCHANGEUSEDOFTXSIGGRPINFO == STD_ON) || (COM_TXSIGGRPONCHANGEMASKONCHANGEWITHOUTREPUSEDOFTXSIGGRPINFO == STD_ON)))
; ..\component\Com\Implementation\Com.c	  3924  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3925    Com_SendSignalGroupArrayHasChanged
; ..\component\Com\Implementation\Com.c	  3926  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3927  /*! \brief        This function checks if the content of the SignalGroup in the group array  has changed.
; ..\component\Com\Implementation\Com.c	  3928      \details      -
; ..\component\Com\Implementation\Com.c	  3929      \pre          -
; ..\component\Com\Implementation\Com.c	  3930      \param[in]    SignalGroupArrayPtr         Reference to the signal group array
; ..\component\Com\Implementation\Com.c	  3931      \param[in]    maskPtr                     Pointer to OnChange Mask
; ..\component\Com\Implementation\Com.c	  3932      \param[in]    pIpduBuf                    Pointer to iPduBuffer
; ..\component\Com\Implementation\Com.c	  3933      \param[in]    MaskLength                  Length of the mask
; ..\component\Com\Implementation\Com.c	  3934      \return       uint8
; ..\component\Com\Implementation\Com.c	  3935                      true                        if content has changed
; ..\component\Com\Implementation\Com.c	  3936                      false                       otherwise
; ..\component\Com\Implementation\Com.c	  3937      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3938  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3939  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_SendSignalGroupArrayHasChanged(P2CONST(uint8, AUTOMATIC, COM_APPL_VAR) SignalGroupArrayPtr,
; ..\component\Com\Implementation\Com.c	  3940                                                                          P2CONST(uint8, AUTOMATIC, COM_PBCFG) maskPtr, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) pIpduBuf, uint32 MaskLength);
; ..\component\Com\Implementation\Com.c	  3941  #endif
; ..\component\Com\Implementation\Com.c	  3942  
; ..\component\Com\Implementation\Com.c	  3943  #if(COM_SIGGRPARRAYFILTERINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3944  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3945    Com_EvaluateSigGrpArrFilterProcessing
; ..\component\Com\Implementation\Com.c	  3946  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3947  /*! \brief        This function evaluates the filter bytewise for SignalGroups with ArrayAccess enabled.
; ..\component\Com\Implementation\Com.c	  3948      \details      -
; ..\component\Com\Implementation\Com.c	  3949      \pre          -
; ..\component\Com\Implementation\Com.c	  3950      \param[in]    idxFilterInfo               Index of related SignalGroup Array filter info
; ..\component\Com\Implementation\Com.c	  3951      \param[in]    maskPtr                     Pointer to the configured filter mask
; ..\component\Com\Implementation\Com.c	  3952      \param[in]    filterValueXPtr             Pointer to the configured filter value X
; ..\component\Com\Implementation\Com.c	  3953      \param[in]    newValuePtr                 Reference to the signal group array.
; ..\component\Com\Implementation\Com.c	  3954      \param[in]    maskLength                  Length of the mask
; ..\component\Com\Implementation\Com.c	  3955      \return       boolean                     TRUE, if filter condition is passed, FALSE otherwise.
; ..\component\Com\Implementation\Com.c	  3956      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3957  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3958  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_EvaluateSigGrpArrFilterProcessing(Com_SigGrpArrayFilterInfoIterType idxFilterInfo,
; ..\component\Com\Implementation\Com.c	  3959                                                                             P2CONST(uint8, AUTOMATIC, COM_PBCFG) maskPtr,
; ..\component\Com\Implementation\Com.c	  3960                                                                             P2CONST(uint8, AUTOMATIC, COM_PBCFG) filterValueXPtr,
; ..\component\Com\Implementation\Com.c	  3961                                                                             P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) newValuePtr, uint32 maskLength);
; ..\component\Com\Implementation\Com.c	  3962  #endif
; ..\component\Com\Implementation\Com.c	  3963  
; ..\component\Com\Implementation\Com.c	  3964  #if(COM_SIGGRPARRAYFILTERINFOUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3965  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3966    Com_EvaluateSigGrpArrFilter
; ..\component\Com\Implementation\Com.c	  3967  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3968  /*! \brief        This function updates the filter state value.
; ..\component\Com\Implementation\Com.c	  3969      \details      -
; ..\component\Com\Implementation\Com.c	  3970      \pre          -
; ..\component\Com\Implementation\Com.c	  3971      \param[in]    idxFilterInfo               Index of related SignalGroup Array filter info
; ..\component\Com\Implementation\Com.c	  3972      \param[in]    newValuePtr                 Reference to the signal group array.
; ..\component\Com\Implementation\Com.c	  3973      \return       boolean                     TRUE, if filter condition is passed, FALSE otherwise.
; ..\component\Com\Implementation\Com.c	  3974      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3975  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3976  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_EvaluateSigGrpArrFilter(Com_SigGrpArrayFilterInfoIterType idxFilterInfo, P2CONST(uint8, AUTOMATIC, COM_APPL_VAR) newValuePtr);
; ..\component\Com\Implementation\Com.c	  3977  #endif
; ..\component\Com\Implementation\Com.c	  3978  
; ..\component\Com\Implementation\Com.c	  3979  #if (COM_ARRAYACCESSUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  3980  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  3981    Com_SendSignalGroupArray_Processing
; ..\component\Com\Implementation\Com.c	  3982  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3983  /*! \brief        The service Com_SendSignalGroupArray copies the content of the provided SignalGroupArrayPtr to the
; ..\component\Com\Implementation\Com.c	  3984   *                associated I-PDU. The provided data shall correspond to the array representation of the signal group.
; ..\component\Com\Implementation\Com.c	  3985      \details      -
; ..\component\Com\Implementation\Com.c	  3986      \param[in]    SignalGroupId               Id of signal group to be sent.
; ..\component\Com\Implementation\Com.c	  3987      \param[in]    SignalGroupArrayPtr         Reference to the signal group array.
; ..\component\Com\Implementation\Com.c	  3988      \return       uint8
; ..\component\Com\Implementation\Com.c	  3989                      E_OK                        service has been accepted
; ..\component\Com\Implementation\Com.c	  3990                      COM_SERVICE_NOT_AVAILABLE   corresponding I-PDU group was stopped (or service failed due to development
; ..\component\Com\Implementation\Com.c	  3991                                                  error)
; ..\component\Com\Implementation\Com.c	  3992                      COM_BUSY                    in case the TP-Buffer is locked for large data types handling
; ..\component\Com\Implementation\Com.c	  3993      \context      TASK|ISR2
; ..\component\Com\Implementation\Com.c	  3994      \pre          The configuration switch ComEnableSignalGroupArrayApi has to be enabled.
; ..\component\Com\Implementation\Com.c	  3995  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  3996  LOCAL_INLINE FUNC(uint8, COM_CODE) Com_SendSignalGroupArray_Processing(Com_SignalGroupIdType SignalGroupId, P2CONST(uint8, AUTOMATIC, COM_APPL_VAR) SignalGroupArrayPtr);
; ..\component\Com\Implementation\Com.c	  3997  #endif
; ..\component\Com\Implementation\Com.c	  3998  
; ..\component\Com\Implementation\Com.c	  3999  #if (((COM_EXISTS_FLOAT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)) || ((COM_EXISTS_FLOAT32_APPLTYPEOFTXSIGINFO == STD_ON) && (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_FLOAT32 == STD_ON)))
; ..\component\Com\Implementation\Com.c	  4000  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4001    Com_CalculateFloat32AbsValue
; ..\component\Com\Implementation\Com.c	  4002  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4003  /*! \brief        This function calculates the absolute value of a float32 value.
; ..\component\Com\Implementation\Com.c	  4004      \details      -
; ..\component\Com\Implementation\Com.c	  4005      \pre          -
; ..\component\Com\Implementation\Com.c	  4006      \param[in]    value                       value for which the absolute value is calculated.
; ..\component\Com\Implementation\Com.c	  4007      \return       positive float32 value
; ..\component\Com\Implementation\Com.c	  4008  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4009  LOCAL_INLINE FUNC(float32, COM_CODE) Com_CalculateFloat32AbsValue(float32 value);
; ..\component\Com\Implementation\Com.c	  4010  #endif
; ..\component\Com\Implementation\Com.c	  4011  
; ..\component\Com\Implementation\Com.c	  4012  #if (((COM_EXISTS_FLOAT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)) || ((COM_EXISTS_FLOAT64_APPLTYPEOFTXSIGINFO == STD_ON) && (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_FLOAT64 == STD_ON)))
; ..\component\Com\Implementation\Com.c	  4013  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4014    Com_CalculateFloat64AbsValue
; ..\component\Com\Implementation\Com.c	  4015  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4016  /*! \brief        This function calculates the absolute value of a float64 value.
; ..\component\Com\Implementation\Com.c	  4017      \details      -
; ..\component\Com\Implementation\Com.c	  4018      \pre          -
; ..\component\Com\Implementation\Com.c	  4019      \param[in]    value                       value for which the absolute value is calculated.
; ..\component\Com\Implementation\Com.c	  4020      \return       positive float64 value
; ..\component\Com\Implementation\Com.c	  4021  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4022  LOCAL_INLINE FUNC(float64, COM_CODE) Com_CalculateFloat64AbsValue(float64 value);
; ..\component\Com\Implementation\Com.c	  4023  #endif
; ..\component\Com\Implementation\Com.c	  4024  
; ..\component\Com\Implementation\Com.c	  4025  #if (((COM_EXISTS_FLOAT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)) || ((COM_EXISTS_FLOAT32_APPLTYPEOFTXSIGINFO == STD_ON) && (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_FLOAT32 == STD_ON)))
; ..\component\Com\Implementation\Com.c	  4026  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4027    Com_CompareFloat32Values
; ..\component\Com\Implementation\Com.c	  4028  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4029  /*! \brief        This function compares two float32 values with each other.
; ..\component\Com\Implementation\Com.c	  4030      \details      -
; ..\component\Com\Implementation\Com.c	  4031      \pre          -
; ..\component\Com\Implementation\Com.c	  4032      \param[in]    firstValue                  first float32 value.
; ..\component\Com\Implementation\Com.c	  4033      \param[in]    scndValue                   second float32 value.
; ..\component\Com\Implementation\Com.c	  4034      \return       TRUE                        if difference is smaller than COM_FLT_EPSILON.
; ..\component\Com\Implementation\Com.c	  4035                    FALSE                       Otherwise.
; ..\component\Com\Implementation\Com.c	  4036  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4037  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_CompareFloat32Values(float32 firstValue, float32 scndValue);
; ..\component\Com\Implementation\Com.c	  4038  #endif
; ..\component\Com\Implementation\Com.c	  4039  
; ..\component\Com\Implementation\Com.c	  4040  #if (((COM_EXISTS_FLOAT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)) || ((COM_EXISTS_FLOAT64_APPLTYPEOFTXSIGINFO == STD_ON) && (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_FLOAT64 == STD_ON)))
; ..\component\Com\Implementation\Com.c	  4041  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4042    Com_CompareFloat64Values
; ..\component\Com\Implementation\Com.c	  4043  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4044  /*! \brief        This function compares two float64 values with each other.
; ..\component\Com\Implementation\Com.c	  4045      \details      -
; ..\component\Com\Implementation\Com.c	  4046      \pre          -
; ..\component\Com\Implementation\Com.c	  4047      \param[in]    firstValue                  first float64 value.
; ..\component\Com\Implementation\Com.c	  4048      \param[in]    scndValue                   second float64 value.
; ..\component\Com\Implementation\Com.c	  4049      \return       TRUE                        if difference is smaller than COM_FLT_EPSILON.
; ..\component\Com\Implementation\Com.c	  4050                    FALSE                       Otherwise.
; ..\component\Com\Implementation\Com.c	  4051  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4052  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_CompareFloat64Values(float64 firstValue, float64 scndValue);
; ..\component\Com\Implementation\Com.c	  4053  #endif
; ..\component\Com\Implementation\Com.c	  4054  
; ..\component\Com\Implementation\Com.c	  4055  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4056    LOCAL FUNCTIONS
; ..\component\Com\Implementation\Com.c	  4057  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4058  
; ..\component\Com\Implementation\Com.c	  4059  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4060  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4061    Com_LMgt_DeactivateRxPdu
; ..\component\Com\Implementation\Com.c	  4062  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4063  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4064   *
; ..\component\Com\Implementation\Com.c	  4065   *
; ..\component\Com\Implementation\Com.c	  4066   *
; ..\component\Com\Implementation\Com.c	  4067  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4068  LOCAL_INLINE FUNC(void, COM_CODE) Com_LMgt_DeactivateRxPdu(PduIdType ComPduId)
; ..\component\Com\Implementation\Com.c	  4069  {
; ..\component\Com\Implementation\Com.c	  4070  # if (COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4071    {
; ..\component\Com\Implementation\Com.c	  4072      /* #10 Iterate over all related timeout handling state machines and deactivate timeout handling */
; ..\component\Com\Implementation\Com.c	  4073      Com_RxTOutInfoIndStartIdxOfRxPduInfoType idxRxTOutInfoInd = Com_GetRxTOutInfoIndStartIdxOfRxPduInfo(ComPduId);
; ..\component\Com\Implementation\Com.c	  4074      for(; idxRxTOutInfoInd < Com_GetRxTOutInfoIndEndIdxOfRxPduInfo(ComPduId); idxRxTOutInfoInd++)
; ..\component\Com\Implementation\Com.c	  4075      {
; ..\component\Com\Implementation\Com.c	  4076        Com_LMgt_DeactivateRxIpduDm(Com_GetRxTOutInfoInd(idxRxTOutInfoInd));      /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  4077      }
; ..\component\Com\Implementation\Com.c	  4078    }
; ..\component\Com\Implementation\Com.c	  4079  # endif
; ..\component\Com\Implementation\Com.c	  4080  
; ..\component\Com\Implementation\Com.c	  4081    /* #20 Deactivate the Pdu Group state of the passed ComIPdu */
; ..\component\Com\Implementation\Com.c	  4082    Com_SetRxPduGrpActive(ComPduId, FALSE);       /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	  4083  }
; ..\component\Com\Implementation\Com.c	  4084  #endif
; ..\component\Com\Implementation\Com.c	  4085  
; ..\component\Com\Implementation\Com.c	  4086  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4087  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4088    Com_LMgt_InitRxIpdu
; ..\component\Com\Implementation\Com.c	  4089  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4090  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4091   *
; ..\component\Com\Implementation\Com.c	  4092   *
; ..\component\Com\Implementation\Com.c	  4093   *
; ..\component\Com\Implementation\Com.c	  4094   *
; ..\component\Com\Implementation\Com.c	  4095   *
; ..\component\Com\Implementation\Com.c	  4096  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4097  LOCAL_INLINE FUNC(void, COM_CODE) Com_LMgt_InitRxIpdu(PduIdType ComPduId)
; ..\component\Com\Implementation\Com.c	  4098  {
; ..\component\Com\Implementation\Com.c	  4099    /* #10 Initialize the signal buffers */
; ..\component\Com\Implementation\Com.c	  4100    Com_RxProcessing_InitRxIpdu(ComPduId);
; ..\component\Com\Implementation\Com.c	  4101  # if (COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4102    /* #20 Initialize the Rx Timeout handling parameters */
; ..\component\Com\Implementation\Com.c	  4103    Com_RxDlMon_InitRxIpdu(ComPduId);
; ..\component\Com\Implementation\Com.c	  4104  # endif
; ..\component\Com\Implementation\Com.c	  4105  # if (COM_GWINFOENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4106    /* #30 Initialize the Signal Gateway parameters */
; ..\component\Com\Implementation\Com.c	  4107    Com_SignalGw_InitRxIpdu(ComPduId);
; ..\component\Com\Implementation\Com.c	  4108  # endif
; ..\component\Com\Implementation\Com.c	  4109  
; ..\component\Com\Implementation\Com.c	  4110  # if (COM_DEFERREDGWMAPPINGINFOUSEDOFRXPDUINFO == STD_ON)       /* COV_COM_VAR_ELISA_STD_OFF_XF */
; ..\component\Com\Implementation\Com.c	  4111    /* #50 If generated description routing code is used and the ComIPdu is a deferred gateway description source ComIPdu, reset the gwMappingEvent flag */
; ..\component\Com\Implementation\Com.c	  4112    if(Com_IsDeferredGwMappingInfoUsedOfRxPduInfo(ComPduId))
; ..\component\Com\Implementation\Com.c	  4113    {
; ..\component\Com\Implementation\Com.c	  4114      Com_SetDeferredGwMappingEvent(Com_GetDeferredGwMappingInfoIdxOfRxPduInfo(ComPduId), 0);     /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  4115    }
; ..\component\Com\Implementation\Com.c	  4116  # endif
; ..\component\Com\Implementation\Com.c	  4117  
; ..\component\Com\Implementation\Com.c	  4118  }
; ..\component\Com\Implementation\Com.c	  4119  #endif
; ..\component\Com\Implementation\Com.c	  4120  
; ..\component\Com\Implementation\Com.c	  4121  
; ..\component\Com\Implementation\Com.c	  4122  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4123  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4124    Com_LMgt_InitTxIpdu
; ..\component\Com\Implementation\Com.c	  4125  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4126  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4127   *
; ..\component\Com\Implementation\Com.c	  4128   *
; ..\component\Com\Implementation\Com.c	  4129   *
; ..\component\Com\Implementation\Com.c	  4130   *
; ..\component\Com\Implementation\Com.c	  4131   *
; ..\component\Com\Implementation\Com.c	  4132   *
; ..\component\Com\Implementation\Com.c	  4133  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4134  LOCAL_INLINE FUNC(void, COM_CODE) Com_LMgt_InitTxIpdu(Com_TxPduInfoIterType ComPduId)
; ..\component\Com\Implementation\Com.c	  4135  {
; ..\component\Com\Implementation\Com.c	  4136  # if (COM_TXSIGGRPINFOINDENDIDXOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4137    /* #10 Initialize SignalGroup parameters */
; ..\component\Com\Implementation\Com.c	  4138    Com_SignalGroup_InitTxIpdu(ComPduId);
; ..\component\Com\Implementation\Com.c	  4139  # endif
; ..\component\Com\Implementation\Com.c	  4140  
; ..\component\Com\Implementation\Com.c	  4141    /* #20 Initialize ComIPdu length */
; ..\component\Com\Implementation\Com.c	  4142    Com_TxLLIf_InitTxIpdu(ComPduId);
; ..\component\Com\Implementation\Com.c	  4143  
; ..\component\Com\Implementation\Com.c	  4144  # if (COM_TXBUFFERUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4145    /* #30 Initialize the ComIPdu TxBuffer */
; ..\component\Com\Implementation\Com.c	  4146    Com_TxBuffer_InitTxIpdu(ComPduId);
; ..\component\Com\Implementation\Com.c	  4147  # endif
; ..\component\Com\Implementation\Com.c	  4148  
; ..\component\Com\Implementation\Com.c	  4149    /* #40 Initialize filter states and Tx mode parameter */
; ..\component\Com\Implementation\Com.c	  4150    Com_TxModeHdlr_InitTxIpdu((PduIdType) ComPduId);
; ..\component\Com\Implementation\Com.c	  4151  
; ..\component\Com\Implementation\Com.c	  4152  # if ((COM_CBKTXACKDEFFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)||(COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  4153    /* #50 Initialize HandleDeferred and WaitForConfirmation flags */
; ..\component\Com\Implementation\Com.c	  4154    Com_TxNHdlr_InitTxIpdu(ComPduId);
; ..\component\Com\Implementation\Com.c	  4155  # endif
; ..\component\Com\Implementation\Com.c	  4156  }
; ..\component\Com\Implementation\Com.c	  4157  #endif
; ..\component\Com\Implementation\Com.c	  4158  
; ..\component\Com\Implementation\Com.c	  4159  
; ..\component\Com\Implementation\Com.c	  4160  #if (COM_ALWAYSACTIVERXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	  4161  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4162    Com_ActivateAlwaysOnRxComIPdus
; ..\component\Com\Implementation\Com.c	  4163  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4164  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4165   *
; ..\component\Com\Implementation\Com.c	  4166   *-
; ..\component\Com\Implementation\Com.c	  4167  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4168  LOCAL_INLINE FUNC(void, COM_CODE) Com_ActivateAlwaysOnRxComIPdus(void)
; ..\component\Com\Implementation\Com.c	  4169  {
; ..\component\Com\Implementation\Com.c	  4170    Com_AlwaysActiveRxComIPdusIterType idx;
; ..\component\Com\Implementation\Com.c	  4171  
; ..\component\Com\Implementation\Com.c	  4172    /* #10 Iterate over all Rx ComIPdus and activate Rx ComIPdu */
; ..\component\Com\Implementation\Com.c	  4173    for(idx = 0; idx < Com_GetSizeOfAlwaysActiveRxComIPdus(); idx++)
; ..\component\Com\Implementation\Com.c	  4174    {
; ..\component\Com\Implementation\Com.c	  4175      Com_ActivateRxComIPdu(Com_GetRxPduInfoIdxOfAlwaysActiveRxComIPdus(idx), TRUE);
; ..\component\Com\Implementation\Com.c	  4176    }
; ..\component\Com\Implementation\Com.c	  4177  }
; ..\component\Com\Implementation\Com.c	  4178  #endif
; ..\component\Com\Implementation\Com.c	  4179  
; ..\component\Com\Implementation\Com.c	  4180  #if (COM_ALWAYSACTIVETXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	  4181  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4182    Com_ActivateAlwaysOnTxComIPdus
; ..\component\Com\Implementation\Com.c	  4183  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4184  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4185   *
; ..\component\Com\Implementation\Com.c	  4186   *-
; ..\component\Com\Implementation\Com.c	  4187  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4188  LOCAL_INLINE FUNC(void, COM_CODE) Com_ActivateAlwaysOnTxComIPdus(void)
; ..\component\Com\Implementation\Com.c	  4189  {
; ..\component\Com\Implementation\Com.c	  4190    Com_AlwaysActiveTxComIPdusIterType idx;
; ..\component\Com\Implementation\Com.c	  4191  
; ..\component\Com\Implementation\Com.c	  4192    /* #10 Iterate over all Tx ComIPdus and activate Tx ComIPdu */
; ..\component\Com\Implementation\Com.c	  4193    for(idx = 0; idx < Com_GetSizeOfAlwaysActiveTxComIPdus(); idx++)
; ..\component\Com\Implementation\Com.c	  4194    {
; ..\component\Com\Implementation\Com.c	  4195      Com_ActivateTxComIPdu(Com_GetTxPduInfoIdxOfAlwaysActiveTxComIPdus(idx), TRUE);
; ..\component\Com\Implementation\Com.c	  4196    }
; ..\component\Com\Implementation\Com.c	  4197  }
; ..\component\Com\Implementation\Com.c	  4198  #endif
; ..\component\Com\Implementation\Com.c	  4199  
; ..\component\Com\Implementation\Com.c	  4200  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4201  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4202    Com_ActivateRxComIPdu
; ..\component\Com\Implementation\Com.c	  4203  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4204  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4205   *
; ..\component\Com\Implementation\Com.c	  4206   *
; ..\component\Com\Implementation\Com.c	  4207   *
; ..\component\Com\Implementation\Com.c	  4208   *
; ..\component\Com\Implementation\Com.c	  4209   *
; ..\component\Com\Implementation\Com.c	  4210   *
; ..\component\Com\Implementation\Com.c	  4211  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4212  LOCAL_INLINE FUNC(void, COM_CODE) Com_ActivateRxComIPdu(Com_RxPduInfoIterType rxPduIdx, boolean initialize)
; ..\component\Com\Implementation\Com.c	  4213  {
; ..\component\Com\Implementation\Com.c	  4214    /* Start Rx I-PDU */
; ..\component\Com\Implementation\Com.c	  4215    /* #10 If the ComIPdu should be initialized, initialize the Rx ComIPdu parameters */
; ..\component\Com\Implementation\Com.c	  4216    if(initialize == TRUE)        /* COV_COM_UPDATE_IPDU_STATE */
; ..\component\Com\Implementation\Com.c	  4217    {
; ..\component\Com\Implementation\Com.c	  4218      /* COM614 If a previously stopped I-PDU gets started by the operation specified in COM613 and the parameter initialize is set to true, then the function Com_IpduGroupControl shall (re-)initialize this I-PDU before it is started. */
; ..\component\Com\Implementation\Com.c	  4219      Com_LMgt_InitRxIpdu((PduIdType) rxPduIdx);
; ..\component\Com\Implementation\Com.c	  4220    }
; ..\component\Com\Implementation\Com.c	  4221  
; ..\component\Com\Implementation\Com.c	  4222  # if (COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4223    /* #20 If the ComIPdu is a TP Pdu initialize the TP Pdu parameters */
; ..\component\Com\Implementation\Com.c	  4224    if(Com_GetTypeOfRxPduInfo(rxPduIdx) == COM_TP_TYPEOFRXPDUINFO)        /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  4225    {
; ..\component\Com\Implementation\Com.c	  4226      Com_ResetRxTpConnection((PduIdType) rxPduIdx);
; ..\component\Com\Implementation\Com.c	  4227    }
; ..\component\Com\Implementation\Com.c	  4228  # endif
; ..\component\Com\Implementation\Com.c	  4229  
; ..\component\Com\Implementation\Com.c	  4230  # if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4231    /* #30 If the Rx ComIPdu is handled deferred, reset the "Handle Deferred" flag */
; ..\component\Com\Implementation\Com.c	  4232    if(Com_IsHandleRxPduDeferredUsedOfRxPduInfo(rxPduIdx))        /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  4233    {
; ..\component\Com\Implementation\Com.c	  4234      Com_SetHandleRxPduDeferred(Com_GetHandleRxPduDeferredIdxOfRxPduInfo(rxPduIdx), 0);  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  4235    }
; ..\component\Com\Implementation\Com.c	  4236  # endif
; ..\component\Com\Implementation\Com.c	  4237  
; ..\component\Com\Implementation\Com.c	  4238    /* #40 Set the state of the Rx ComIPdu to active */
; ..\component\Com\Implementation\Com.c	  4239    Com_SetRxPduGrpActive(rxPduIdx, TRUE);        /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4240  # if (COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4241    {
; ..\component\Com\Implementation\Com.c	  4242      /* #50 Iterate over all related Rx timeout state machines and set them to active */
; ..\component\Com\Implementation\Com.c	  4243      /* \trace SPEC-2736840 */
; ..\component\Com\Implementation\Com.c	  4244      Com_RxTOutInfoIndStartIdxOfRxPduInfoType idxRxTOutInfoInd = Com_GetRxTOutInfoIndStartIdxOfRxPduInfo(rxPduIdx);
; ..\component\Com\Implementation\Com.c	  4245      for(; idxRxTOutInfoInd < Com_GetRxTOutInfoIndEndIdxOfRxPduInfo(rxPduIdx); idxRxTOutInfoInd++)
; ..\component\Com\Implementation\Com.c	  4246      {
; ..\component\Com\Implementation\Com.c	  4247        Com_LMgt_ActivateRxIpduDm(Com_GetRxTOutInfoInd(idxRxTOutInfoInd));        /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  4248      }
; ..\component\Com\Implementation\Com.c	  4249    }
; ..\component\Com\Implementation\Com.c	  4250  # endif
; ..\component\Com\Implementation\Com.c	  4251  }
; ..\component\Com\Implementation\Com.c	  4252  #endif
; ..\component\Com\Implementation\Com.c	  4253  
; ..\component\Com\Implementation\Com.c	  4254  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4255  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4256    Com_ActivateTxComIPdu
; ..\component\Com\Implementation\Com.c	  4257  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4258  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4259   *
; ..\component\Com\Implementation\Com.c	  4260   *
; ..\component\Com\Implementation\Com.c	  4261   *
; ..\component\Com\Implementation\Com.c	  4262   *
; ..\component\Com\Implementation\Com.c	  4263   *
; ..\component\Com\Implementation\Com.c	  4264   *
; ..\component\Com\Implementation\Com.c	  4265   *
; ..\component\Com\Implementation\Com.c	  4266  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4267  LOCAL_INLINE FUNC(void, COM_CODE) Com_ActivateTxComIPdu(Com_TxPduInfoIterType ComTxPduId, boolean initialize)
; ..\component\Com\Implementation\Com.c	  4268  {
; ..\component\Com\Implementation\Com.c	  4269    /* Start Tx I-PDU */
; ..\component\Com\Implementation\Com.c	  4270    /* #30 If the ComIPdu should be initialized, initialize the Tx ComIPdu parameters */
; ..\component\Com\Implementation\Com.c	  4271    if(initialize == TRUE)        /* COV_COM_NO_IPDUGROUPS */
; ..\component\Com\Implementation\Com.c	  4272    {
; ..\component\Com\Implementation\Com.c	  4273      /* COM614 If a previously stopped I-PDU gets started by the operation specified in COM613 and the parameter initialize is set to true, then the function Com_IpduGroupControl shall (re-)initialize this I-PDU before it is started. */
; ..\component\Com\Implementation\Com.c	  4274      Com_LMgt_InitTxIpdu(ComTxPduId);
; ..\component\Com\Implementation\Com.c	  4275    }
; ..\component\Com\Implementation\Com.c	  4276  
; ..\component\Com\Implementation\Com.c	  4277  # if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4278    if(Com_IsTxTpInfoUsedOfTxPduInfo(ComTxPduId)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  4279    {
; ..\component\Com\Implementation\Com.c	  4280      Com_ResetTxTpConnection((PduIdType) ComTxPduId);
; ..\component\Com\Implementation\Com.c	  4281    }
; ..\component\Com\Implementation\Com.c	  4282  # endif
; ..\component\Com\Implementation\Com.c	  4283  
; ..\component\Com\Implementation\Com.c	  4284  # if (COM_TXTOUTINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4285    /* #40 Start the Tx deadline monitoring */
; ..\component\Com\Implementation\Com.c	  4286    /* \trace SPEC-2736840 */
; ..\component\Com\Implementation\Com.c	  4287    Com_TxDlMon_IPduGroupStart(ComTxPduId);
; ..\component\Com\Implementation\Com.c	  4288  # endif
; ..\component\Com\Implementation\Com.c	  4289    /* #45 Initialize gateway counter */
; ..\component\Com\Implementation\Com.c	  4290  # if (COM_GWTIMEOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4291    Com_GwTout_InitCounter((PduIdType) ComTxPduId);
; ..\component\Com\Implementation\Com.c	  4292  # endif
; ..\component\Com\Implementation\Com.c	  4293  # if (COM_CONSTVALUEUINT8UBCLEARMASKENDIDXOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4294    /* #50 Clear all Update Bits */
; ..\component\Com\Implementation\Com.c	  4295    Com_TxBuffer_ClearUpdateBits((PduIdType) ComTxPduId);
; ..\component\Com\Implementation\Com.c	  4296  # endif
; ..\component\Com\Implementation\Com.c	  4297    /* #60 Set the Tx ComIPdu Group state to active */
; ..\component\Com\Implementation\Com.c	  4298    Com_SetTxPduGrpActive(ComTxPduId, TRUE);      /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4299  }
; ..\component\Com\Implementation\Com.c	  4300  #endif
; ..\component\Com\Implementation\Com.c	  4301  
; ..\component\Com\Implementation\Com.c	  4302  #if (COM_ACTIVATABLERXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	  4303  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4304    Com_IpduGroupControl_UpdateRxComIPduState
; ..\component\Com\Implementation\Com.c	  4305  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4306  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4307   *
; ..\component\Com\Implementation\Com.c	  4308   *
; ..\component\Com\Implementation\Com.c	  4309   *
; ..\component\Com\Implementation\Com.c	  4310   *
; ..\component\Com\Implementation\Com.c	  4311   *
; ..\component\Com\Implementation\Com.c	  4312   *
; ..\component\Com\Implementation\Com.c	  4313   *
; ..\component\Com\Implementation\Com.c	  4314  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4315  LOCAL_INLINE FUNC(void, COM_CODE) Com_IpduGroupControl_UpdateRxComIPduState(Com_IpduGroupVector ipduGroupVector, boolean initialize)    /* PRQA S 3673, 3677 */ /* MD_MSR_Rule8.13, MD_Com_3677 */
; ..\component\Com\Implementation\Com.c	  4316  {
; ..\component\Com\Implementation\Com.c	  4317    Com_ActivatableRxComIPdusIterType idx;
; ..\component\Com\Implementation\Com.c	  4318  
; ..\component\Com\Implementation\Com.c	  4319    Com_RxIPduGroup_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4320  
; ..\component\Com\Implementation\Com.c	  4321    /* #10 Iterate over all Rx ComIPdus and evaluate the current state */
; ..\component\Com\Implementation\Com.c	  4322    for(idx = 0; idx < Com_GetSizeOfActivatableRxComIPdus(); idx++)
; ..\component\Com\Implementation\Com.c	  4323    {
; ..\component\Com\Implementation\Com.c	  4324      Com_RxPduInfoIterType ComRxPduId = Com_GetRxPduInfoIdxOfActivatableRxComIPdus(idx);
; ..\component\Com\Implementation\Com.c	  4325  
; ..\component\Com\Implementation\Com.c	  4326      /* Evaluate requested active state of the I-PDU */
; ..\component\Com\Implementation\Com.c	  4327      boolean bRequestedActiveState = FALSE;
; ..\component\Com\Implementation\Com.c	  4328      Com_PduGrpVectorEndIdxOfRxPduInfoType pduGrpVectorIdx = Com_GetPduGrpVectorStartIdxOfRxPduInfo(ComRxPduId);
; ..\component\Com\Implementation\Com.c	  4329      {
; ..\component\Com\Implementation\Com.c	  4330        /* #20 Iterate over all related ComIPduGroups of the current ComRxPdu */
; ..\component\Com\Implementation\Com.c	  4331        uint8_least iByteIndex = 0;
; ..\component\Com\Implementation\Com.c	  4332        for(; (pduGrpVectorIdx < Com_GetPduGrpVectorEndIdxOfRxPduInfo(ComRxPduId)) && (bRequestedActiveState == FALSE); pduGrpVectorIdx++)        /* COV_COM_IPDU_GROUP_STATE_ACTIVE */
; ..\component\Com\Implementation\Com.c	  4333        {
; ..\component\Com\Implementation\Com.c	  4334          /* #30 If at least one related ComIPduGroup is active the requested state is active */
; ..\component\Com\Implementation\Com.c	  4335          if((ipduGroupVector[iByteIndex] & Com_GetPduGrpVector(pduGrpVectorIdx)) != 0u)
; ..\component\Com\Implementation\Com.c	  4336          {
; ..\component\Com\Implementation\Com.c	  4337            /* An I-PDU is active if and only if at least one I-PDU group is active it belongs to */
; ..\component\Com\Implementation\Com.c	  4338            bRequestedActiveState = TRUE;
; ..\component\Com\Implementation\Com.c	  4339          }
; ..\component\Com\Implementation\Com.c	  4340          iByteIndex++;   /* PRQA S 2982 */ /* MD_Com_2982_Loop */
; ..\component\Com\Implementation\Com.c	  4341        }
; ..\component\Com\Implementation\Com.c	  4342      }
; ..\component\Com\Implementation\Com.c	  4343      /* COM615 For all I-PDUs that do not change their activation state, the function Com_IpduGroupControl shall do nothing. */
; ..\component\Com\Implementation\Com.c	  4344      /* #40 If the requested state is not equal to the current state */
; ..\component\Com\Implementation\Com.c	  4345      if((Com_IsRxPduGrpActive(ComRxPduId)) != bRequestedActiveState)
; ..\component\Com\Implementation\Com.c	  4346      {
; ..\component\Com\Implementation\Com.c	  4347        /* COM613 Second, the function Com_IpduGroupControl shall start or stop all I-PDUs that change theire activation state because of this call of Com_IpduGroupControl respectively. */
; ..\component\Com\Implementation\Com.c	  4348        /* #50 If the requested state is activated, activate Rx ComIPdu and optionally initialze the ComIPdu */
; ..\component\Com\Implementation\Com.c	  4349        if(bRequestedActiveState != FALSE)
; ..\component\Com\Implementation\Com.c	  4350        {
; ..\component\Com\Implementation\Com.c	  4351          /* Start Rx I-PDU */
; ..\component\Com\Implementation\Com.c	  4352          Com_ActivateRxComIPdu(ComRxPduId, initialize);
; ..\component\Com\Implementation\Com.c	  4353        }
; ..\component\Com\Implementation\Com.c	  4354        /* #90 Otherwise set the Rx ComIPdu state to inactive and deactivate all related Rx Timeout state machines */
; ..\component\Com\Implementation\Com.c	  4355        else      /* \trace SPEC-2736847 */
; ..\component\Com\Implementation\Com.c	  4356        {
; ..\component\Com\Implementation\Com.c	  4357          Com_DeactivateRxComIPdu(ComRxPduId);
; ..\component\Com\Implementation\Com.c	  4358        }
; ..\component\Com\Implementation\Com.c	  4359      }
; ..\component\Com\Implementation\Com.c	  4360      Com_RxIPduGroup_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	  4361    }
; ..\component\Com\Implementation\Com.c	  4362    Com_RxIPduGroup_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4363  }
; ..\component\Com\Implementation\Com.c	  4364  #endif
; ..\component\Com\Implementation\Com.c	  4365  
; ..\component\Com\Implementation\Com.c	  4366  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4367  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4368    Com_DeactivateRxComIPdu
; ..\component\Com\Implementation\Com.c	  4369  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4370  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4371   *
; ..\component\Com\Implementation\Com.c	  4372   *
; ..\component\Com\Implementation\Com.c	  4373   *
; ..\component\Com\Implementation\Com.c	  4374  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4375  LOCAL_INLINE FUNC(void, COM_CODE) Com_DeactivateRxComIPdu(Com_RxPduInfoIterType ComRxPduId)
; ..\component\Com\Implementation\Com.c	  4376  {
; ..\component\Com\Implementation\Com.c	  4377    /* #10 Set RxPduGrpActivate State to FALSE */
; ..\component\Com\Implementation\Com.c	  4378    Com_SetRxPduGrpActive(ComRxPduId, FALSE);     /* PRQA S 2842 */ /* MD_Com_2842 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4379  # if (COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4380    {
; ..\component\Com\Implementation\Com.c	  4381      /* - #20 Deactivate Rx Deadline Monitoring */
; ..\component\Com\Implementation\Com.c	  4382      Com_RxTOutInfoIndStartIdxOfRxPduInfoType idxRxTOutInfoInd = Com_GetRxTOutInfoIndStartIdxOfRxPduInfo(ComRxPduId);
; ..\component\Com\Implementation\Com.c	  4383      for(; idxRxTOutInfoInd < Com_GetRxTOutInfoIndEndIdxOfRxPduInfo(ComRxPduId); idxRxTOutInfoInd++)
; ..\component\Com\Implementation\Com.c	  4384      {
; ..\component\Com\Implementation\Com.c	  4385        Com_LMgt_DeactivateRxIpduDm(Com_GetRxTOutInfoInd(idxRxTOutInfoInd));      /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  4386      }
; ..\component\Com\Implementation\Com.c	  4387    }
; ..\component\Com\Implementation\Com.c	  4388  # endif
; ..\component\Com\Implementation\Com.c	  4389  }
; ..\component\Com\Implementation\Com.c	  4390  #endif
; ..\component\Com\Implementation\Com.c	  4391  
; ..\component\Com\Implementation\Com.c	  4392  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4393  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4394    Com_DeactivateTxComIPdu
; ..\component\Com\Implementation\Com.c	  4395  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4396  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4397   *
; ..\component\Com\Implementation\Com.c	  4398   *
; ..\component\Com\Implementation\Com.c	  4399   *
; ..\component\Com\Implementation\Com.c	  4400   *
; ..\component\Com\Implementation\Com.c	  4401   *
; ..\component\Com\Implementation\Com.c	  4402  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4403  LOCAL_INLINE FUNC(void, COM_CODE) Com_DeactivateTxComIPdu(Com_TxPduInfoIterType txPduId)
; ..\component\Com\Implementation\Com.c	  4404  {
; ..\component\Com\Implementation\Com.c	  4405    /* #50 Set the Tx Mode related parameters to the initial value */
; ..\component\Com\Implementation\Com.c	  4406    Com_TxModeHdlr_StopTxIpdus((PduIdType) txPduId);
; ..\component\Com\Implementation\Com.c	  4407  # if (COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4408    /* #60 If the transmission of a ComIPdu was not confirmed, set WaitForConfirmation flags to the initial value and call any configured error notification */
; ..\component\Com\Implementation\Com.c	  4409    if(Com_IsWaitingForConfirmation(txPduId))
; ..\component\Com\Implementation\Com.c	  4410    {
; ..\component\Com\Implementation\Com.c	  4411      Com_TxIPduGroup_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4412  
; ..\component\Com\Implementation\Com.c	  4413      Com_TxNHdlr_StopTxIpdu(txPduId);
; ..\component\Com\Implementation\Com.c	  4414  
; ..\component\Com\Implementation\Com.c	  4415      Com_TxIPduGroup_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4416    }
; ..\component\Com\Implementation\Com.c	  4417  # endif
; ..\component\Com\Implementation\Com.c	  4418  # if (COM_CBKTXACKDEFFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4419    /* #65 Clear HandleTxPduDeffered flag */
; ..\component\Com\Implementation\Com.c	  4420    Com_SetHandleTxPduDeferred(txPduId, FALSE);   /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	  4421  # endif
; ..\component\Com\Implementation\Com.c	  4422  
; ..\component\Com\Implementation\Com.c	  4423  # if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4424    if(Com_IsTxTpInfoUsedOfTxPduInfo(txPduId))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  4425    {
; ..\component\Com\Implementation\Com.c	  4426      Com_ResetTxTpConnection((PduIdType) txPduId);
; ..\component\Com\Implementation\Com.c	  4427    }
; ..\component\Com\Implementation\Com.c	  4428  # endif
; ..\component\Com\Implementation\Com.c	  4429  
; ..\component\Com\Implementation\Com.c	  4430    /* #70 Set the Tx ComIPdu Group state to inactive */
; ..\component\Com\Implementation\Com.c	  4431    Com_SetTxPduGrpActive((PduIdType) txPduId, FALSE);    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4432  }
; ..\component\Com\Implementation\Com.c	  4433  #endif
; ..\component\Com\Implementation\Com.c	  4434  
; ..\component\Com\Implementation\Com.c	  4435  #if (COM_RXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4436  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4437    Com_SetRxPduGrpStateToStop
; ..\component\Com\Implementation\Com.c	  4438  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4439  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4440   *
; ..\component\Com\Implementation\Com.c	  4441   *
; ..\component\Com\Implementation\Com.c	  4442   *
; ..\component\Com\Implementation\Com.c	  4443   *
; ..\component\Com\Implementation\Com.c	  4444   *
; ..\component\Com\Implementation\Com.c	  4445  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4446  LOCAL_INLINE FUNC(void, COM_CODE) Com_SetRxPduGrpStateToStop(Com_IpduGroupIdType subIpduGroupId)
; ..\component\Com\Implementation\Com.c	  4447  {
; ..\component\Com\Implementation\Com.c	  4448    /* #10 Iterate over all related Rx ComIPdu of the passed ComIPduGroup */
; ..\component\Com\Implementation\Com.c	  4449    Com_RxPduInfoIndEndIdxOfIPduGroupInfoType rxPduIndId = Com_GetRxPduInfoIndStartIdxOfIPduGroupInfo(subIpduGroupId);
; ..\component\Com\Implementation\Com.c	  4450  
; ..\component\Com\Implementation\Com.c	  4451    Com_RxIPduGroup_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4452    for(; rxPduIndId < Com_GetRxPduInfoIndEndIdxOfIPduGroupInfo(subIpduGroupId); rxPduIndId++)
; ..\component\Com\Implementation\Com.c	  4453    {
; ..\component\Com\Implementation\Com.c	  4454      boolean canBeStopped = TRUE;
; ..\component\Com\Implementation\Com.c	  4455      Com_RxPduInfoIndType rxPduId = Com_GetRxPduInfoInd(rxPduIndId);
; ..\component\Com\Implementation\Com.c	  4456  
; ..\component\Com\Implementation\Com.c	  4457      /* #20 Iterate over all related ComIPdu Groups */
; ..\component\Com\Implementation\Com.c	  4458      Com_IPduGroupInfoOfRxPduInfoIndEndIdxOfRxPduInfoType referencedIPduGroupInd = Com_GetIPduGroupInfoOfRxPduInfoIndStartIdxOfRxPduInfo(rxPduId);
; ..\component\Com\Implementation\Com.c	  4459      for(; referencedIPduGroupInd < Com_GetIPduGroupInfoOfRxPduInfoIndEndIdxOfRxPduInfo(rxPduId); referencedIPduGroupInd++)
; ..\component\Com\Implementation\Com.c	  4460      {
; ..\component\Com\Implementation\Com.c	  4461        Com_IPduGroupInfoOfRxPduInfoIndType referencedIPduGroup = Com_GetIPduGroupInfoOfRxPduInfoInd(referencedIPduGroupInd);
; ..\component\Com\Implementation\Com.c	  4462        /* #30 If at least one related ComIPdu Group is active, the ComIPdu remains active */
; ..\component\Com\Implementation\Com.c	  4463        if(Com_GetIPduGroupState(referencedIPduGroup) != COM_INACTIVE_IPDUGROUPSTATE)     /* COV_COM_IPDU_GROUP_ASR3_XF */
; ..\component\Com\Implementation\Com.c	  4464        {
; ..\component\Com\Implementation\Com.c	  4465          canBeStopped = FALSE;
; ..\component\Com\Implementation\Com.c	  4466          break;
; ..\component\Com\Implementation\Com.c	  4467        }
; ..\component\Com\Implementation\Com.c	  4468      }
; ..\component\Com\Implementation\Com.c	  4469      /* #40 If all related ComIPdu Groups are stopped the ComIPdu Group state is set to inactive */
; ..\component\Com\Implementation\Com.c	  4470      if(canBeStopped == TRUE)    /* COV_COM_IPDU_GROUP_ASR3_TX */
; ..\component\Com\Implementation\Com.c	  4471      {
; ..\component\Com\Implementation\Com.c	  4472        Com_DeactivateRxComIPdu(rxPduId);
; ..\component\Com\Implementation\Com.c	  4473      }
; ..\component\Com\Implementation\Com.c	  4474  
; ..\component\Com\Implementation\Com.c	  4475      Com_RxIPduGroup_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	  4476    }
; ..\component\Com\Implementation\Com.c	  4477    Com_RxIPduGroup_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4478  }
; ..\component\Com\Implementation\Com.c	  4479  #endif
; ..\component\Com\Implementation\Com.c	  4480  
; ..\component\Com\Implementation\Com.c	  4481  #if (COM_TXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4482  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4483    Com_SetTxPduGrpStateToStop
; ..\component\Com\Implementation\Com.c	  4484  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4485  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4486   *
; ..\component\Com\Implementation\Com.c	  4487   *
; ..\component\Com\Implementation\Com.c	  4488   *
; ..\component\Com\Implementation\Com.c	  4489   *
; ..\component\Com\Implementation\Com.c	  4490   *
; ..\component\Com\Implementation\Com.c	  4491  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4492  LOCAL_INLINE FUNC(void, COM_CODE) Com_SetTxPduGrpStateToStop(Com_IpduGroupIdType subIpduGroupId)
; ..\component\Com\Implementation\Com.c	  4493  {
; ..\component\Com\Implementation\Com.c	  4494    Com_TxPduInfoIndEndIdxOfIPduGroupInfoType txPduIndId = Com_GetTxPduInfoIndStartIdxOfIPduGroupInfo(subIpduGroupId);
; ..\component\Com\Implementation\Com.c	  4495  
; ..\component\Com\Implementation\Com.c	  4496    Com_TxIPduGroup_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4497    /* #10 Iterate over all related Tx ComIPdu of the passed ComIPduGroup */
; ..\component\Com\Implementation\Com.c	  4498    for(; txPduIndId < Com_GetTxPduInfoIndEndIdxOfIPduGroupInfo(subIpduGroupId); txPduIndId++)
; ..\component\Com\Implementation\Com.c	  4499    {
; ..\component\Com\Implementation\Com.c	  4500      boolean canBeStopped = TRUE;
; ..\component\Com\Implementation\Com.c	  4501      Com_TxPduInfoIndType txPduId = Com_GetTxPduInfoInd(txPduIndId);
; ..\component\Com\Implementation\Com.c	  4502  
; ..\component\Com\Implementation\Com.c	  4503      /* #20 Iterate over all related ComIPdu Groups */
; ..\component\Com\Implementation\Com.c	  4504      Com_IPduGroupInfoOfTxPduInfoIndEndIdxOfTxPduInfoType referencedIPduGroupInd = Com_GetIPduGroupInfoOfTxPduInfoIndStartIdxOfTxPduInfo(txPduId);
; ..\component\Com\Implementation\Com.c	  4505      for(; referencedIPduGroupInd < Com_GetIPduGroupInfoOfTxPduInfoIndEndIdxOfTxPduInfo(txPduId); referencedIPduGroupInd++)
; ..\component\Com\Implementation\Com.c	  4506      {
; ..\component\Com\Implementation\Com.c	  4507        Com_IPduGroupInfoOfTxPduInfoIndType referencedIPduGroup = Com_GetIPduGroupInfoOfTxPduInfoInd(referencedIPduGroupInd);
; ..\component\Com\Implementation\Com.c	  4508        /* #30 If at least one related ComIPdu Group is active, the ComIPdu remains active */
; ..\component\Com\Implementation\Com.c	  4509        if(Com_GetIPduGroupState(referencedIPduGroup) != COM_INACTIVE_IPDUGROUPSTATE)
; ..\component\Com\Implementation\Com.c	  4510        {
; ..\component\Com\Implementation\Com.c	  4511          canBeStopped = FALSE;
; ..\component\Com\Implementation\Com.c	  4512          break;
; ..\component\Com\Implementation\Com.c	  4513        }
; ..\component\Com\Implementation\Com.c	  4514      }
; ..\component\Com\Implementation\Com.c	  4515      /* #40 If all related ComIPdu Groups are stopped, deactivate TxComIPdu */
; ..\component\Com\Implementation\Com.c	  4516      if(canBeStopped == TRUE)
; ..\component\Com\Implementation\Com.c	  4517      {
; ..\component\Com\Implementation\Com.c	  4518        Com_DeactivateTxComIPdu(txPduId);
; ..\component\Com\Implementation\Com.c	  4519      }
; ..\component\Com\Implementation\Com.c	  4520      Com_TxIPduGroup_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	  4521    }
; ..\component\Com\Implementation\Com.c	  4522    Com_TxIPduGroup_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4523  }
; ..\component\Com\Implementation\Com.c	  4524  #endif
; ..\component\Com\Implementation\Com.c	  4525  
; ..\component\Com\Implementation\Com.c	  4526  #if ((COM_PDUGRPVECTOR == STD_ON) && (COM_TXPDUINFO == STD_ON) && (COM_ACTIVATABLETXCOMIPDUS == STD_ON))
; ..\component\Com\Implementation\Com.c	  4527  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4528   Com_IpduGroupControl_SetRequestedActiveState
; ..\component\Com\Implementation\Com.c	  4529  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4530  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4531   *
; ..\component\Com\Implementation\Com.c	  4532   *
; ..\component\Com\Implementation\Com.c	  4533   *
; ..\component\Com\Implementation\Com.c	  4534   *
; ..\component\Com\Implementation\Com.c	  4535  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4536  LOCAL_INLINE FUNC(void, COM_CODE) Com_IpduGroupControl_SetRequestedActiveState(Com_TxPduInfoIterType ComTxPduId, boolean initialize, boolean bRequestedActiveState)
; ..\component\Com\Implementation\Com.c	  4537  {
; ..\component\Com\Implementation\Com.c	  4538    /* #10 If the requested state is not equal to the current state */
; ..\component\Com\Implementation\Com.c	  4539    if((Com_IsTxPduGrpActive(ComTxPduId)) != bRequestedActiveState)
; ..\component\Com\Implementation\Com.c	  4540    {
; ..\component\Com\Implementation\Com.c	  4541      /* COM613 Second, the function Com_IpduGroupControl shall start or stop all I-PDUs that change theire activation state because of this call of Com_IpduGroupControl respectively. */
; ..\component\Com\Implementation\Com.c	  4542      /* #20 If the requested state is activated, activate and optionally initialize Tx ComIPdu */
; ..\component\Com\Implementation\Com.c	  4543      if(bRequestedActiveState == TRUE)
; ..\component\Com\Implementation\Com.c	  4544      {
; ..\component\Com\Implementation\Com.c	  4545        /* Start Tx I-PDU */
; ..\component\Com\Implementation\Com.c	  4546        Com_ActivateTxComIPdu(ComTxPduId, initialize);
; ..\component\Com\Implementation\Com.c	  4547      }
; ..\component\Com\Implementation\Com.c	  4548      /* #30 Otherwise stop the Tx ComIPdu, set the Tx ComIPdu state to inactive and clear HandleTxPduDeffered flag */
; ..\component\Com\Implementation\Com.c	  4549      else
; ..\component\Com\Implementation\Com.c	  4550      {
; ..\component\Com\Implementation\Com.c	  4551        Com_DeactivateTxComIPdu(ComTxPduId);
; ..\component\Com\Implementation\Com.c	  4552      }
; ..\component\Com\Implementation\Com.c	  4553    }
; ..\component\Com\Implementation\Com.c	  4554  }
; ..\component\Com\Implementation\Com.c	  4555  
; ..\component\Com\Implementation\Com.c	  4556  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4557    Com_IpduGroupControl_EvaluateActiveState
; ..\component\Com\Implementation\Com.c	  4558  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4559  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4560   *
; ..\component\Com\Implementation\Com.c	  4561   *
; ..\component\Com\Implementation\Com.c	  4562  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4563  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_IpduGroupControl_EvaluateActiveState(Com_IpduGroupVector ipduGroupVector, Com_TxPduInfoIterType ComTxPduId)    /* PRQA S 3673, 3677 */ /* MD_MSR_Rule8.13, MD_Com_3677 */
; ..\component\Com\Implementation\Com.c	  4564  {
; ..\component\Com\Implementation\Com.c	  4565    boolean bRequestedActiveState = FALSE;
; ..\component\Com\Implementation\Com.c	  4566    Com_PduGrpVectorEndIdxOfTxPduInfoType pduGrpVectorIdx = Com_GetPduGrpVectorStartIdxOfTxPduInfo(ComTxPduId);
; ..\component\Com\Implementation\Com.c	  4567    /* #10 Iterate over all ComIPdu related ComIPduGroup states and evaluate the current state of the passed ComIPdu */
; ..\component\Com\Implementation\Com.c	  4568    uint8_least iByteIndex = 0;
; ..\component\Com\Implementation\Com.c	  4569    for(; ((pduGrpVectorIdx < Com_GetPduGrpVectorEndIdxOfTxPduInfo(ComTxPduId)) && (bRequestedActiveState == FALSE)); pduGrpVectorIdx++)  /* COV_COM_IPDU_GROUP_STATE_ACTIVE */
; ..\component\Com\Implementation\Com.c	  4570    {
; ..\component\Com\Implementation\Com.c	  4571      if((ipduGroupVector[iByteIndex] & Com_GetPduGrpVector(pduGrpVectorIdx)) != 0u)
; ..\component\Com\Implementation\Com.c	  4572      {
; ..\component\Com\Implementation\Com.c	  4573        /* An I-PDU is active if and only if at least one I-PDU group is active it belongs to */
; ..\component\Com\Implementation\Com.c	  4574        bRequestedActiveState = TRUE;
; ..\component\Com\Implementation\Com.c	  4575      }
; ..\component\Com\Implementation\Com.c	  4576      iByteIndex++;       /* PRQA S 2983 */ /* MD_Com_2983 */
; ..\component\Com\Implementation\Com.c	  4577    }
; ..\component\Com\Implementation\Com.c	  4578    return bRequestedActiveState;
; ..\component\Com\Implementation\Com.c	  4579  }
; ..\component\Com\Implementation\Com.c	  4580  
; ..\component\Com\Implementation\Com.c	  4581  #endif
; ..\component\Com\Implementation\Com.c	  4582  
; ..\component\Com\Implementation\Com.c	  4583  #if ((COM_RXTOUTINFO == STD_ON) && (COM_PDUGRPVECTOR == STD_ON) && (COM_ACTIVATABLERXCOMIPDUS == STD_ON))
; ..\component\Com\Implementation\Com.c	  4584  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4585    Com_ReceptionDMControl_EvaluateActiveState
; ..\component\Com\Implementation\Com.c	  4586  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4587  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4588   *
; ..\component\Com\Implementation\Com.c	  4589   *
; ..\component\Com\Implementation\Com.c	  4590  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4591  LOCAL_INLINE FUNC(Com_RxPduDmStateType, COM_CODE) Com_ReceptionDMControl_EvaluateActiveState(Com_IpduGroupVector ipduGroupVector, Com_RxPduInfoIterType ComRxPduId)     /* PRQA S 3673, 3677 */ /* MD_MSR_Rule8.13, MD_Com_3677 */
; ..\component\Com\Implementation\Com.c	  4592  {
; ..\component\Com\Implementation\Com.c	  4593    Com_RxPduDmStateType bRequestedActiveState = COM_INACTIVE_RXPDUDMSTATE;
; ..\component\Com\Implementation\Com.c	  4594    Com_PduGrpVectorEndIdxOfRxPduInfoType pduGrpVectorIdx = Com_GetPduGrpVectorStartIdxOfRxPduInfo(ComRxPduId);
; ..\component\Com\Implementation\Com.c	  4595  
; ..\component\Com\Implementation\Com.c	  4596    /* #10 Iterate over all ComIPdu related ComIPduGroup states and evaluate the current reception deadline monitoring state of the passed ComIPdu */
; ..\component\Com\Implementation\Com.c	  4597    uint8_least iByteIndex = 0;
; ..\component\Com\Implementation\Com.c	  4598    for(; ((pduGrpVectorIdx < Com_GetPduGrpVectorEndIdxOfRxPduInfo(ComRxPduId)) && (bRequestedActiveState == COM_INACTIVE_RXPDUDMSTATE)); pduGrpVectorIdx++)      /* COV_COM_IPDU_GROUP_STATE_ACTIVE */
; ..\component\Com\Implementation\Com.c	  4599    {
; ..\component\Com\Implementation\Com.c	  4600      if((ipduGroupVector[iByteIndex] & Com_GetPduGrpVector(pduGrpVectorIdx)) != 0u)
; ..\component\Com\Implementation\Com.c	  4601      {
; ..\component\Com\Implementation\Com.c	  4602        /* An I-PDU is active if and only if at least one I-PDU group is active it belongs to */
; ..\component\Com\Implementation\Com.c	  4603        bRequestedActiveState = COM_ACTIVE_RXPDUDMSTATE;
; ..\component\Com\Implementation\Com.c	  4604      }
; ..\component\Com\Implementation\Com.c	  4605      iByteIndex++;
; ..\component\Com\Implementation\Com.c	  4606    }
; ..\component\Com\Implementation\Com.c	  4607    return bRequestedActiveState;
; ..\component\Com\Implementation\Com.c	  4608  }
; ..\component\Com\Implementation\Com.c	  4609  #endif
; ..\component\Com\Implementation\Com.c	  4610  
; ..\component\Com\Implementation\Com.c	  4611  #if ((COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON) && (COM_PDUGRPVECTOR == STD_ON))
; ..\component\Com\Implementation\Com.c	  4612  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4613    Com_ReceptionDMControl_SetDmState
; ..\component\Com\Implementation\Com.c	  4614  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4615  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4616   *
; ..\component\Com\Implementation\Com.c	  4617   *
; ..\component\Com\Implementation\Com.c	  4618   *
; ..\component\Com\Implementation\Com.c	  4619   *
; ..\component\Com\Implementation\Com.c	  4620   *
; ..\component\Com\Implementation\Com.c	  4621  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4622  LOCAL_INLINE FUNC(void, COM_CODE) Com_ReceptionDMControl_SetDmState(Com_RxPduInfoIterType ComRxPduId, Com_RxPduDmStateType bRequestedActiveState)
; ..\component\Com\Implementation\Com.c	  4623  {
; ..\component\Com\Implementation\Com.c	  4624  
; ..\component\Com\Implementation\Com.c	  4625    Com_RxTOutInfoIndStartIdxOfRxPduInfoType idxRxTOutInfoInd = Com_GetRxTOutInfoIndStartIdxOfRxPduInfo(ComRxPduId);
; ..\component\Com\Implementation\Com.c	  4626    /* #10 Iterate over all ComIPdu related reception deadline monitoring states */
; ..\component\Com\Implementation\Com.c	  4627    for(; idxRxTOutInfoInd < Com_GetRxTOutInfoIndEndIdxOfRxPduInfo(ComRxPduId); idxRxTOutInfoInd++)
; ..\component\Com\Implementation\Com.c	  4628    {
; ..\component\Com\Implementation\Com.c	  4629      /* COM618 For all I-PDUs that do not change their deadline monitoring state the function, Com_ReceptionDMControl shall do nothing. */
; ..\component\Com\Implementation\Com.c	  4630      Com_RxTOutInfoIndType idxRxTOutInfo = Com_GetRxTOutInfoInd(idxRxTOutInfoInd);
; ..\component\Com\Implementation\Com.c	  4631      /* #20 If the current state differs the passed state */
; ..\component\Com\Implementation\Com.c	  4632      /* \trace SPEC-2736873 */ /* \trace SPEC-2736875 */
; ..\component\Com\Implementation\Com.c	  4633      if((Com_GetRxPduDmState(idxRxTOutInfo) & COM_PURE_DM_STATE_MASK_RXPDUDMSTATE) != bRequestedActiveState)
; ..\component\Com\Implementation\Com.c	  4634      {
; ..\component\Com\Implementation\Com.c	  4635        /* COM617 Second, the function Com_ReceptionDMControl shall start or stop the reception deadline monitoring for all I-PDUs that change their reception deadline monitoring state because of this call of Com_ReceptionDMControl respectively. */
; ..\component\Com\Implementation\Com.c	  4636  
; ..\component\Com\Implementation\Com.c	  4637        /* Start Deadline Monitoring */
; ..\component\Com\Implementation\Com.c	  4638        /* #30 If the passed state is ACTIVE, set the timeout counter to the first timeout value */
; ..\component\Com\Implementation\Com.c	  4639        /* \trace SPEC-2736872 */
; ..\component\Com\Implementation\Com.c	  4640        if(bRequestedActiveState == COM_ACTIVE_RXPDUDMSTATE)
; ..\component\Com\Implementation\Com.c	  4641        {
; ..\component\Com\Implementation\Com.c	  4642          Com_SetRxTOutCnt(idxRxTOutInfo, Com_GetFirstFactorOfRxTOutInfo(idxRxTOutInfo)); /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4643        }
; ..\component\Com\Implementation\Com.c	  4644        /* #40 Set the timeout state to the passed state */
; ..\component\Com\Implementation\Com.c	  4645        Com_SetRxPduDmState(idxRxTOutInfo, bRequestedActiveState);        /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4646      }
; ..\component\Com\Implementation\Com.c	  4647    }
; ..\component\Com\Implementation\Com.c	  4648  }
; ..\component\Com\Implementation\Com.c	  4649  #endif
; ..\component\Com\Implementation\Com.c	  4650  
; ..\component\Com\Implementation\Com.c	  4651  #if (COM_RXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4652  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4653    Com_IpduGroupStartRx
; ..\component\Com\Implementation\Com.c	  4654  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4655  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4656   *
; ..\component\Com\Implementation\Com.c	  4657   *
; ..\component\Com\Implementation\Com.c	  4658   *
; ..\component\Com\Implementation\Com.c	  4659  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4660  LOCAL_INLINE FUNC(void, COM_CODE) Com_IpduGroupStartRx(Com_IpduGroupIdType subIpduGroupId, boolean Initialize)
; ..\component\Com\Implementation\Com.c	  4661  {
; ..\component\Com\Implementation\Com.c	  4662    /* #10 Iterate over all related Rx ComIPdus */
; ..\component\Com\Implementation\Com.c	  4663    Com_RxPduInfoIndEndIdxOfIPduGroupInfoType rxPduIndId = Com_GetRxPduInfoIndStartIdxOfIPduGroupInfo(subIpduGroupId);
; ..\component\Com\Implementation\Com.c	  4664  
; ..\component\Com\Implementation\Com.c	  4665    Com_RxIPduGroup_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4666  
; ..\component\Com\Implementation\Com.c	  4667    for(; rxPduIndId < Com_GetRxPduInfoIndEndIdxOfIPduGroupInfo(subIpduGroupId); rxPduIndId++)
; ..\component\Com\Implementation\Com.c	  4668    {
; ..\component\Com\Implementation\Com.c	  4669      Com_RxPduInfoIndType rxPduId = Com_GetRxPduInfoInd(rxPduIndId);
; ..\component\Com\Implementation\Com.c	  4670      /* #20 If the Rx ComIPdu is inactive, activate and optionally initialize the Rx ComIPdu */
; ..\component\Com\Implementation\Com.c	  4671      if(!Com_IsRxPduGrpActive(rxPduId))  /* COV_COM_IPDU_GROUP_ASR3_TX */
; ..\component\Com\Implementation\Com.c	  4672      {
; ..\component\Com\Implementation\Com.c	  4673        /* Start Rx I-PDU */
; ..\component\Com\Implementation\Com.c	  4674        Com_ActivateRxComIPdu(rxPduId, Initialize);
; ..\component\Com\Implementation\Com.c	  4675      }
; ..\component\Com\Implementation\Com.c	  4676      Com_RxIPduGroup_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	  4677    }
; ..\component\Com\Implementation\Com.c	  4678    Com_RxIPduGroup_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4679  }
; ..\component\Com\Implementation\Com.c	  4680  #endif
; ..\component\Com\Implementation\Com.c	  4681  
; ..\component\Com\Implementation\Com.c	  4682  #if (COM_TXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4683  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4684    Com_IpduGroupStartTx
; ..\component\Com\Implementation\Com.c	  4685  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4686  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4687   *
; ..\component\Com\Implementation\Com.c	  4688   *
; ..\component\Com\Implementation\Com.c	  4689   *
; ..\component\Com\Implementation\Com.c	  4690   *
; ..\component\Com\Implementation\Com.c	  4691  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4692  LOCAL_INLINE FUNC(void, COM_CODE) Com_IpduGroupStartTx(Com_IpduGroupIdType subIpduGroupId, boolean Initialize)
; ..\component\Com\Implementation\Com.c	  4693  {
; ..\component\Com\Implementation\Com.c	  4694    /* #10 Iterate over all related Tx ComIPdus */
; ..\component\Com\Implementation\Com.c	  4695    Com_TxPduInfoIndEndIdxOfIPduGroupInfoType txPduIndId = Com_GetTxPduInfoIndStartIdxOfIPduGroupInfo(subIpduGroupId);
; ..\component\Com\Implementation\Com.c	  4696  
; ..\component\Com\Implementation\Com.c	  4697    Com_TxIPduGroup_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4698  
; ..\component\Com\Implementation\Com.c	  4699    for(; txPduIndId < Com_GetTxPduInfoIndEndIdxOfIPduGroupInfo(subIpduGroupId); txPduIndId++)
; ..\component\Com\Implementation\Com.c	  4700    {
; ..\component\Com\Implementation\Com.c	  4701      Com_TxPduInfoIndType txPduId = Com_GetTxPduInfoInd(txPduIndId);
; ..\component\Com\Implementation\Com.c	  4702      /* #20 If the ComIPdu state is inactive */
; ..\component\Com\Implementation\Com.c	  4703      if(!Com_IsTxPduGrpActive(txPduId))
; ..\component\Com\Implementation\Com.c	  4704      {
; ..\component\Com\Implementation\Com.c	  4705        /* #30 Activate and optionally initialize the Tx ComIPdu */
; ..\component\Com\Implementation\Com.c	  4706        Com_ActivateTxComIPdu(txPduId, Initialize);
; ..\component\Com\Implementation\Com.c	  4707      }
; ..\component\Com\Implementation\Com.c	  4708  
; ..\component\Com\Implementation\Com.c	  4709      Com_TxIPduGroup_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	  4710    }
; ..\component\Com\Implementation\Com.c	  4711  
; ..\component\Com\Implementation\Com.c	  4712    Com_TxIPduGroup_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4713  }
; ..\component\Com\Implementation\Com.c	  4714  #endif
; ..\component\Com\Implementation\Com.c	  4715  
; ..\component\Com\Implementation\Com.c	  4716  #if ((COM_RXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON) && (COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  4717  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4718    Com_EnableReceptionDMsubGroup
; ..\component\Com\Implementation\Com.c	  4719  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4720  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4721   *
; ..\component\Com\Implementation\Com.c	  4722   *
; ..\component\Com\Implementation\Com.c	  4723   *
; ..\component\Com\Implementation\Com.c	  4724   *
; ..\component\Com\Implementation\Com.c	  4725   *
; ..\component\Com\Implementation\Com.c	  4726  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4727  LOCAL_INLINE FUNC(void, COM_CODE) Com_EnableReceptionDMsubGroup(Com_IpduGroupIdType subIpduGroupId)
; ..\component\Com\Implementation\Com.c	  4728  {
; ..\component\Com\Implementation\Com.c	  4729    /* #10 If the current deadline monitoring state is DMINACTIVE set the state to DMACTIVE */
; ..\component\Com\Implementation\Com.c	  4730    if(Com_GetIPduGroupState(subIpduGroupId) == COM_ACTIVE_DMINACTIVE_IPDUGROUPSTATE)
; ..\component\Com\Implementation\Com.c	  4731    {
; ..\component\Com\Implementation\Com.c	  4732      Com_SetIPduGroupState(subIpduGroupId, COM_ACTIVE_DMACTIVE_IPDUGROUPSTATE);  /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4733      {
; ..\component\Com\Implementation\Com.c	  4734        /* #20 Iterate over all related Rx ComIPdus */
; ..\component\Com\Implementation\Com.c	  4735        Com_RxPduInfoIndEndIdxOfIPduGroupInfoType rxPduIndId = Com_GetRxPduInfoIndStartIdxOfIPduGroupInfo(subIpduGroupId);
; ..\component\Com\Implementation\Com.c	  4736        for(; rxPduIndId < Com_GetRxPduInfoIndEndIdxOfIPduGroupInfo(subIpduGroupId); rxPduIndId++)
; ..\component\Com\Implementation\Com.c	  4737        {
; ..\component\Com\Implementation\Com.c	  4738          Com_RxPduInfoIndType rxPduId = Com_GetRxPduInfoInd(rxPduIndId);
; ..\component\Com\Implementation\Com.c	  4739          /* #30 Iterate over all related Rx deadline monitoring state machines */
; ..\component\Com\Implementation\Com.c	  4740          Com_RxTOutInfoIndStartIdxOfRxPduInfoType idxRxTOutInfoInd = Com_GetRxTOutInfoIndStartIdxOfRxPduInfo(rxPduId);
; ..\component\Com\Implementation\Com.c	  4741          for(; idxRxTOutInfoInd < Com_GetRxTOutInfoIndEndIdxOfRxPduInfo(rxPduId); idxRxTOutInfoInd++)
; ..\component\Com\Implementation\Com.c	  4742          {
; ..\component\Com\Implementation\Com.c	  4743            Com_RxTOutInfoIndType idxRxTOutInfo = Com_GetRxTOutInfoInd(idxRxTOutInfoInd);
; ..\component\Com\Implementation\Com.c	  4744            /* #40 If the Rx deadline monitoring is INACTIVE, activate the Rx deadline monitoring */
; ..\component\Com\Implementation\Com.c	  4745            if((Com_GetRxPduDmState(idxRxTOutInfo) & COM_PURE_DM_STATE_MASK_RXPDUDMSTATE) == COM_INACTIVE_RXPDUDMSTATE)   /* COV_COM_IPDU_GROUP_DM_ASR3_TX */
; ..\component\Com\Implementation\Com.c	  4746            {
; ..\component\Com\Implementation\Com.c	  4747              Com_SetRxTOutCnt(idxRxTOutInfo, Com_GetFirstFactorOfRxTOutInfo(idxRxTOutInfo));     /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4748              Com_SetRxPduDmState(idxRxTOutInfo, COM_ACTIVE_RXPDUDMSTATE);        /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4749            }
; ..\component\Com\Implementation\Com.c	  4750          }
; ..\component\Com\Implementation\Com.c	  4751        }
; ..\component\Com\Implementation\Com.c	  4752      }
; ..\component\Com\Implementation\Com.c	  4753    }
; ..\component\Com\Implementation\Com.c	  4754  }
; ..\component\Com\Implementation\Com.c	  4755  #endif
; ..\component\Com\Implementation\Com.c	  4756  
; ..\component\Com\Implementation\Com.c	  4757  #if ((COM_RXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON) && (COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  4758  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4759    Com_DisableReceptionDMsubGroup
; ..\component\Com\Implementation\Com.c	  4760  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4761  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4762   *
; ..\component\Com\Implementation\Com.c	  4763   *
; ..\component\Com\Implementation\Com.c	  4764   *
; ..\component\Com\Implementation\Com.c	  4765   *
; ..\component\Com\Implementation\Com.c	  4766   *
; ..\component\Com\Implementation\Com.c	  4767   *
; ..\component\Com\Implementation\Com.c	  4768   *
; ..\component\Com\Implementation\Com.c	  4769  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4770  LOCAL_INLINE FUNC(void, COM_CODE) Com_DisableReceptionDMsubGroup(Com_IpduGroupIdType subIpduGroupId)
; ..\component\Com\Implementation\Com.c	  4771  {
; ..\component\Com\Implementation\Com.c	  4772    /* #10 If the current deadline monitoring state is DMACTIVE set the state to DMINACTIVE */
; ..\component\Com\Implementation\Com.c	  4773    if(Com_GetIPduGroupState(subIpduGroupId) == COM_ACTIVE_DMACTIVE_IPDUGROUPSTATE)
; ..\component\Com\Implementation\Com.c	  4774    {
; ..\component\Com\Implementation\Com.c	  4775      Com_SetIPduGroupState(subIpduGroupId, COM_ACTIVE_DMINACTIVE_IPDUGROUPSTATE);        /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4776      {
; ..\component\Com\Implementation\Com.c	  4777        /* #20 Iterate over all related Rx ComIPdus */
; ..\component\Com\Implementation\Com.c	  4778        Com_RxPduInfoIndEndIdxOfIPduGroupInfoType rxPduIndId = Com_GetRxPduInfoIndStartIdxOfIPduGroupInfo(subIpduGroupId);
; ..\component\Com\Implementation\Com.c	  4779        for(; rxPduIndId < Com_GetRxPduInfoIndEndIdxOfIPduGroupInfo(subIpduGroupId); rxPduIndId++)
; ..\component\Com\Implementation\Com.c	  4780        {
; ..\component\Com\Implementation\Com.c	  4781          boolean canBeStopped = TRUE;
; ..\component\Com\Implementation\Com.c	  4782          Com_RxPduInfoIndType rxPduId = Com_GetRxPduInfoInd(rxPduIndId);
; ..\component\Com\Implementation\Com.c	  4783          /* #30 Iterate over all related ComIPduGroups */
; ..\component\Com\Implementation\Com.c	  4784          Com_IPduGroupInfoOfRxPduInfoIndEndIdxOfRxPduInfoType referencedIPduGroupInd = Com_GetIPduGroupInfoOfRxPduInfoIndStartIdxOfRxPduInfo(rxPduId);
; ..\component\Com\Implementation\Com.c	  4785          for(; referencedIPduGroupInd < Com_GetIPduGroupInfoOfRxPduInfoIndEndIdxOfRxPduInfo(rxPduId); referencedIPduGroupInd++)
; ..\component\Com\Implementation\Com.c	  4786          {
; ..\component\Com\Implementation\Com.c	  4787            /* #40 If at least one ComIPduGroup state is DMACTIVE the deadline monitoring states remain active */
; ..\component\Com\Implementation\Com.c	  4788            Com_IPduGroupInfoOfRxPduInfoIndType referencedIPduGroup = Com_GetIPduGroupInfoOfRxPduInfoInd(referencedIPduGroupInd);
; ..\component\Com\Implementation\Com.c	  4789            if(Com_GetIPduGroupState(referencedIPduGroup) == COM_ACTIVE_DMACTIVE_IPDUGROUPSTATE)
; ..\component\Com\Implementation\Com.c	  4790            {
; ..\component\Com\Implementation\Com.c	  4791              canBeStopped = FALSE;
; ..\component\Com\Implementation\Com.c	  4792              break;
; ..\component\Com\Implementation\Com.c	  4793            }
; ..\component\Com\Implementation\Com.c	  4794          }
; ..\component\Com\Implementation\Com.c	  4795          /* #50 If all ComIPduGroups are in state DMINACTIVE */
; ..\component\Com\Implementation\Com.c	  4796          if(canBeStopped == TRUE)
; ..\component\Com\Implementation\Com.c	  4797          {
; ..\component\Com\Implementation\Com.c	  4798            /* #60 Iterate all Rx deadline monitoring states and deactivate them */
; ..\component\Com\Implementation\Com.c	  4799            Com_RxTOutInfoIndStartIdxOfRxPduInfoType idxRxTOutInfoInd = Com_GetRxTOutInfoIndStartIdxOfRxPduInfo(rxPduId);
; ..\component\Com\Implementation\Com.c	  4800            for(; idxRxTOutInfoInd < Com_GetRxTOutInfoIndEndIdxOfRxPduInfo(rxPduId); idxRxTOutInfoInd++)
; ..\component\Com\Implementation\Com.c	  4801            {
; ..\component\Com\Implementation\Com.c	  4802              Com_LMgt_DeactivateRxIpduDm(Com_GetRxTOutInfoInd(idxRxTOutInfoInd));        /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  4803            }
; ..\component\Com\Implementation\Com.c	  4804          }
; ..\component\Com\Implementation\Com.c	  4805        }
; ..\component\Com\Implementation\Com.c	  4806      }
; ..\component\Com\Implementation\Com.c	  4807    }
; ..\component\Com\Implementation\Com.c	  4808  }
; ..\component\Com\Implementation\Com.c	  4809  #endif
; ..\component\Com\Implementation\Com.c	  4810  
; ..\component\Com\Implementation\Com.c	  4811  #if (COM_IPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4812  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4813    Com_IpduGroupStopSubGroup
; ..\component\Com\Implementation\Com.c	  4814  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4815  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4816   *
; ..\component\Com\Implementation\Com.c	  4817   *
; ..\component\Com\Implementation\Com.c	  4818  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4819  LOCAL_INLINE FUNC(void, COM_CODE) Com_IpduGroupStopSubGroup(Com_IpduGroupIdType subIpduGroupId)
; ..\component\Com\Implementation\Com.c	  4820  {
; ..\component\Com\Implementation\Com.c	  4821    /* #10 If the ComIPduGroup is ACTIVE set the ComIPduGroup to INACTIVE and stop its SubIPduGroups */
; ..\component\Com\Implementation\Com.c	  4822    if(Com_GetIPduGroupState(subIpduGroupId) != COM_INACTIVE_IPDUGROUPSTATE)
; ..\component\Com\Implementation\Com.c	  4823    {
; ..\component\Com\Implementation\Com.c	  4824      Com_SetIPduGroupState(subIpduGroupId, COM_INACTIVE_IPDUGROUPSTATE); /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4825  # if (COM_RXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4826      Com_SetRxPduGrpStateToStop(subIpduGroupId);
; ..\component\Com\Implementation\Com.c	  4827  # endif
; ..\component\Com\Implementation\Com.c	  4828  # if (COM_TXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4829      Com_SetTxPduGrpStateToStop(subIpduGroupId);
; ..\component\Com\Implementation\Com.c	  4830  # endif
; ..\component\Com\Implementation\Com.c	  4831    }
; ..\component\Com\Implementation\Com.c	  4832  }
; ..\component\Com\Implementation\Com.c	  4833  #endif
; ..\component\Com\Implementation\Com.c	  4834  
; ..\component\Com\Implementation\Com.c	  4835  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4836  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4837    Com_InitTx
; ..\component\Com\Implementation\Com.c	  4838  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4839  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4840   *
; ..\component\Com\Implementation\Com.c	  4841   *    -
; ..\component\Com\Implementation\Com.c	  4842  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4843  LOCAL_INLINE FUNC(void, COM_CODE) Com_InitTx(void)
; ..\component\Com\Implementation\Com.c	  4844  {
; ..\component\Com\Implementation\Com.c	  4845    Com_TxPduInfoIterType ComTxPduId = 0u;
; ..\component\Com\Implementation\Com.c	  4846    /* #10 Iterate over all Tx ComIPdus and initialize all related parameters */
; ..\component\Com\Implementation\Com.c	  4847    for(; ComTxPduId < Com_GetSizeOfTxPduInfo(); ComTxPduId++)
; ..\component\Com\Implementation\Com.c	  4848    {
; ..\component\Com\Implementation\Com.c	  4849  # if (COM_INVALIDHNDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4850      if(!Com_IsInvalidHndOfTxPduInfo(ComTxPduId))
; ..\component\Com\Implementation\Com.c	  4851  # endif
; ..\component\Com\Implementation\Com.c	  4852      {
; ..\component\Com\Implementation\Com.c	  4853  # if ((COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	  4854        Com_SetRepCnt(ComTxPduId, 0u);    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4855        Com_SetRepCycleCnt(ComTxPduId, 0u);       /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4856  # endif
; ..\component\Com\Implementation\Com.c	  4857        Com_LMgt_InitTxIpdu(ComTxPduId);
; ..\component\Com\Implementation\Com.c	  4858        /* The Ipdu must be activated after all initialization tasks of this Ipdu! */
; ..\component\Com\Implementation\Com.c	  4859  
; ..\component\Com\Implementation\Com.c	  4860  # if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4861        if(Com_IsTxTpInfoUsedOfTxPduInfo(ComTxPduId))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  4862        {
; ..\component\Com\Implementation\Com.c	  4863          Com_ResetTxTpConnection((PduIdType) ComTxPduId);
; ..\component\Com\Implementation\Com.c	  4864        }
; ..\component\Com\Implementation\Com.c	  4865  # endif
; ..\component\Com\Implementation\Com.c	  4866  
; ..\component\Com\Implementation\Com.c	  4867        Com_SetTxPduGrpActive(ComTxPduId, FALSE); /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  4868      }
; ..\component\Com\Implementation\Com.c	  4869    }
; ..\component\Com\Implementation\Com.c	  4870  }
; ..\component\Com\Implementation\Com.c	  4871  #endif
; ..\component\Com\Implementation\Com.c	  4872  
; ..\component\Com\Implementation\Com.c	  4873  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4874  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4875    Com_InitRx
; ..\component\Com\Implementation\Com.c	  4876  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4877  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4878   *
; ..\component\Com\Implementation\Com.c	  4879   *
; ..\component\Com\Implementation\Com.c	  4880  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4881  LOCAL_INLINE FUNC(void, COM_CODE) Com_InitRx(void)
; ..\component\Com\Implementation\Com.c	  4882  {
; ..\component\Com\Implementation\Com.c	  4883    Com_RxPduInfoIterType ComRxPduId = 0u;
; ..\component\Com\Implementation\Com.c	  4884    /* #10 Iterate over all Rx ComIPdus and initialize all related parameters */
; ..\component\Com\Implementation\Com.c	  4885    for(; ComRxPduId < Com_GetSizeOfRxPduInfo(); ComRxPduId++)
; ..\component\Com\Implementation\Com.c	  4886    {
; ..\component\Com\Implementation\Com.c	  4887  # if (COM_INVALIDHNDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4888      if(!Com_IsInvalidHndOfRxPduInfo(ComRxPduId))
; ..\component\Com\Implementation\Com.c	  4889  # endif
; ..\component\Com\Implementation\Com.c	  4890      {
; ..\component\Com\Implementation\Com.c	  4891        Com_LMgt_InitRxIpdu((PduIdType) ComRxPduId);
; ..\component\Com\Implementation\Com.c	  4892  
; ..\component\Com\Implementation\Com.c	  4893        /* The IPdu must be deactivated after all initialization tasks of this IPdu! */
; ..\component\Com\Implementation\Com.c	  4894        Com_LMgt_DeactivateRxPdu((PduIdType) ComRxPduId);
; ..\component\Com\Implementation\Com.c	  4895      }
; ..\component\Com\Implementation\Com.c	  4896    }
; ..\component\Com\Implementation\Com.c	  4897  }
; ..\component\Com\Implementation\Com.c	  4898  #endif
; ..\component\Com\Implementation\Com.c	  4899  
; ..\component\Com\Implementation\Com.c	  4900  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4901  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	  4902  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4903    Com_RxIPduGroup_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	  4904  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4905  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4906   *
; ..\component\Com\Implementation\Com.c	  4907   *
; ..\component\Com\Implementation\Com.c	  4908  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4909  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxIPduGroup_EnterExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	  4910  {
; ..\component\Com\Implementation\Com.c	  4911    /* #10 Enter the rx IPduGroups exclusive area */
; ..\component\Com\Implementation\Com.c	  4912    SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  4913  }
; ..\component\Com\Implementation\Com.c	  4914  
; ..\component\Com\Implementation\Com.c	  4915  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4916    Com_RxIPduGroup_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	  4917  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4918  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4919   *
; ..\component\Com\Implementation\Com.c	  4920   *
; ..\component\Com\Implementation\Com.c	  4921   *
; ..\component\Com\Implementation\Com.c	  4922  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4923  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxIPduGroup_ExitExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	  4924  {
; ..\component\Com\Implementation\Com.c	  4925    /* #05 Reload the counter with the threshold value */
; ..\component\Com\Implementation\Com.c	  4926    Com_SetRxIPduGroupISRLockCounter(Com_GetRxIPduGroupISRLockThreshold());       /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	  4927    /* #10 Exit the rx IPduGroups exclusive area */
; ..\component\Com\Implementation\Com.c	  4928    SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  4929  }
; ..\component\Com\Implementation\Com.c	  4930  
; ..\component\Com\Implementation\Com.c	  4931  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4932    Com_RxIPduGroup_ThresholdCheck
; ..\component\Com\Implementation\Com.c	  4933  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4934  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4935   *
; ..\component\Com\Implementation\Com.c	  4936   *
; ..\component\Com\Implementation\Com.c	  4937   *
; ..\component\Com\Implementation\Com.c	  4938  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4939  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxIPduGroup_ThresholdCheck(void)
; ..\component\Com\Implementation\Com.c	  4940  {
; ..\component\Com\Implementation\Com.c	  4941    if(Com_GetRxIPduGroupISRLockCounter() > 0u)   /* COV_COM_THRESHOLD_TX */
; ..\component\Com\Implementation\Com.c	  4942    {
; ..\component\Com\Implementation\Com.c	  4943      Com_DecRxIPduGroupISRLockCounter(); /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	  4944    }
; ..\component\Com\Implementation\Com.c	  4945    else
; ..\component\Com\Implementation\Com.c	  4946    {
; ..\component\Com\Implementation\Com.c	  4947      Com_RxIPduGroup_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4948      Com_RxIPduGroup_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  4949    }
; ..\component\Com\Implementation\Com.c	  4950  }
; ..\component\Com\Implementation\Com.c	  4951  
; ..\component\Com\Implementation\Com.c	  4952  #endif
; ..\component\Com\Implementation\Com.c	  4953  
; ..\component\Com\Implementation\Com.c	  4954  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  4955  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	  4956  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4957    Com_TxIPduGroup_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	  4958  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4959  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4960   *
; ..\component\Com\Implementation\Com.c	  4961   *
; ..\component\Com\Implementation\Com.c	  4962  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4963  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxIPduGroup_EnterExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	  4964  {
; ..\component\Com\Implementation\Com.c	  4965    /* #10 Enter the tx IPduGroups exclusive area */
; ..\component\Com\Implementation\Com.c	  4966    SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	  4967  }
; ..\component\Com\Implementation\Com.c	  4968  
; ..\component\Com\Implementation\Com.c	  4969  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4970    Com_TxIPduGroup_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	  4971  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4972  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4973   *
; ..\component\Com\Implementation\Com.c	  4974   *
; ..\component\Com\Implementation\Com.c	  4975   *
; ..\component\Com\Implementation\Com.c	  4976  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4977  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxIPduGroup_ExitExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	  4978  {
; ..\component\Com\Implementation\Com.c	  4979    /* #05 Reload the counter with the threshold value */
; ..\component\Com\Implementation\Com.c	  4980    Com_SetTxIPduGroupISRLockCounter(Com_GetTxIPduGroupISRLockThreshold());       /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	  4981    /* #10 Exit the tx IPduGroups exclusive area */
; ..\component\Com\Implementation\Com.c	  4982    SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	  4983  }
; ..\component\Com\Implementation\Com.c	  4984  
; ..\component\Com\Implementation\Com.c	  4985  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  4986    Com_TxIPduGroup_ThresholdCheck
; ..\component\Com\Implementation\Com.c	  4987  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4988  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  4989   *
; ..\component\Com\Implementation\Com.c	  4990   *
; ..\component\Com\Implementation\Com.c	  4991   *
; ..\component\Com\Implementation\Com.c	  4992  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  4993  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxIPduGroup_ThresholdCheck(void)
; ..\component\Com\Implementation\Com.c	  4994  {
; ..\component\Com\Implementation\Com.c	  4995    if(Com_GetTxIPduGroupISRLockCounter() > 0u)   /* COV_COM_THRESHOLD_TX */
; ..\component\Com\Implementation\Com.c	  4996    {
; ..\component\Com\Implementation\Com.c	  4997      Com_DecTxIPduGroupISRLockCounter(); /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	  4998    }
; ..\component\Com\Implementation\Com.c	  4999    else
; ..\component\Com\Implementation\Com.c	  5000    {
; ..\component\Com\Implementation\Com.c	  5001      Com_TxIPduGroup_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  5002      Com_TxIPduGroup_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  5003    }
; ..\component\Com\Implementation\Com.c	  5004  }
; ..\component\Com\Implementation\Com.c	  5005  
; ..\component\Com\Implementation\Com.c	  5006  #endif
; ..\component\Com\Implementation\Com.c	  5007  
; ..\component\Com\Implementation\Com.c	  5008  #if (COM_TXSIGGRPINFOINDENDIDXOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5009  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5010    Com_SignalGroup_InitTxIpdu
; ..\component\Com\Implementation\Com.c	  5011  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5012  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5013   *
; ..\component\Com\Implementation\Com.c	  5014   *
; ..\component\Com\Implementation\Com.c	  5015   *
; ..\component\Com\Implementation\Com.c	  5016  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5017  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGroup_InitTxIpdu(Com_TxPduInfoIterType ComPduId)
; ..\component\Com\Implementation\Com.c	  5018  {
; ..\component\Com\Implementation\Com.c	  5019    /* COM484: initialize Tx shadow buffer */
; ..\component\Com\Implementation\Com.c	  5020    /* #10 Initialize all related Tx ComSignalGroup shadow buffer of the passed ComIPdu */
; ..\component\Com\Implementation\Com.c	  5021    Com_TxSigGrpInfoIndEndIdxOfTxPduInfoType idxTxSigGrpInfoInd = Com_GetTxSigGrpInfoIndStartIdxOfTxPduInfo(ComPduId);
; ..\component\Com\Implementation\Com.c	  5022    for(; idxTxSigGrpInfoInd < Com_GetTxSigGrpInfoIndEndIdxOfTxPduInfo(ComPduId); idxTxSigGrpInfoInd++)
; ..\component\Com\Implementation\Com.c	  5023    {
; ..\component\Com\Implementation\Com.c	  5024      Com_TxSigGrpInfoIndType sigGrpHnd = Com_GetTxSigGrpInfoInd(idxTxSigGrpInfoInd);
; ..\component\Com\Implementation\Com.c	  5025  
; ..\component\Com\Implementation\Com.c	  5026  # if (COM_TXBUFFERUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5027      if(Com_IsTxBufferUsedOfTxSigGrpInfo(sigGrpHnd))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  5028      {
; ..\component\Com\Implementation\Com.c	  5029        /* Com_TxBuffer_IpduInitValue contains the initial values for all I-PDUs. It is only required to copy the initial values that are relevant for the signal group buffer. */
; ..\component\Com\Implementation\Com.c	  5030        VStdMemCpyRomToRam(Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxSigGrpInfo(sigGrpHnd)), Com_GetAddrTxPduInitValue(Com_GetTxPduInitValueStartIdxOfTxPduInfo(ComPduId) + Com_GetPduOffsetOfTxSigGrpInfo(sigGrpHnd)), (uint16_least) Com_GetTxBufferLengthOfTxSigGrpInfo(sigGrpHnd));      /* PRQA S 0315, 2985 */ /* MD_MSR_VStdLibCopy, MD_Com_2985_2986 */ /* SBSW_COM_MEM_CPY_2RAM */
; ..\component\Com\Implementation\Com.c	  5031      }
; ..\component\Com\Implementation\Com.c	  5032  # endif
; ..\component\Com\Implementation\Com.c	  5033  
; ..\component\Com\Implementation\Com.c	  5034      /* #20 Clear the ComSignalGroup event flag */
; ..\component\Com\Implementation\Com.c	  5035      Com_SetSigGrpEventFlag(sigGrpHnd, 0u);      /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  5036    }
; ..\component\Com\Implementation\Com.c	  5037  }
; ..\component\Com\Implementation\Com.c	  5038  #endif
; ..\component\Com\Implementation\Com.c	  5039  
; ..\component\Com\Implementation\Com.c	  5040  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT8 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT8 == STD_ON))
; ..\component\Com\Implementation\Com.c	  5041  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  5042  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5043    Com_Signal_UInt8_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  5044  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5045  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5046   *
; ..\component\Com\Implementation\Com.c	  5047   *
; ..\component\Com\Implementation\Com.c	  5048  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5049  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt8_NewIsWithIn(Com_FilterInfo_UInt8IterType idxFilterInfo, uint8 newValue)
; ..\component\Com\Implementation\Com.c	  5050  {
; ..\component\Com\Implementation\Com.c	  5051    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5052  
; ..\component\Com\Implementation\Com.c	  5053    uint8 filterMin = Com_GetFilterMinOfFilterInfo_UInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5054    uint8 filterMax = Com_GetFilterMaxOfFilterInfo_UInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5055  
; ..\component\Com\Implementation\Com.c	  5056    if((filterMin <= newValue) && (newValue <= filterMax))
; ..\component\Com\Implementation\Com.c	  5057    {
; ..\component\Com\Implementation\Com.c	  5058      filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5059    }
; ..\component\Com\Implementation\Com.c	  5060  
; ..\component\Com\Implementation\Com.c	  5061    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5062    return filterState;
; ..\component\Com\Implementation\Com.c	  5063  }
; ..\component\Com\Implementation\Com.c	  5064  #endif
; ..\component\Com\Implementation\Com.c	  5065  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT8 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT8 == STD_ON))
; ..\component\Com\Implementation\Com.c	  5066  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  5067  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5068    Com_Signal_SInt8_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  5069  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5070  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5071   *
; ..\component\Com\Implementation\Com.c	  5072   *
; ..\component\Com\Implementation\Com.c	  5073  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5074  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt8_NewIsWithIn(Com_FilterInfo_SInt8IterType idxFilterInfo, sint8 newValue)
; ..\component\Com\Implementation\Com.c	  5075  {
; ..\component\Com\Implementation\Com.c	  5076    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5077  
; ..\component\Com\Implementation\Com.c	  5078    sint8 filterMin = Com_GetFilterMinOfFilterInfo_SInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5079    sint8 filterMax = Com_GetFilterMaxOfFilterInfo_SInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5080  
; ..\component\Com\Implementation\Com.c	  5081    if((filterMin <= newValue) && (newValue <= filterMax))
; ..\component\Com\Implementation\Com.c	  5082    {
; ..\component\Com\Implementation\Com.c	  5083      filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5084    }
; ..\component\Com\Implementation\Com.c	  5085  
; ..\component\Com\Implementation\Com.c	  5086    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5087    return filterState;
; ..\component\Com\Implementation\Com.c	  5088  }
; ..\component\Com\Implementation\Com.c	  5089  #endif
; ..\component\Com\Implementation\Com.c	  5090  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT16 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT16 == STD_ON))
; ..\component\Com\Implementation\Com.c	  5091  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  5092  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5093    Com_Signal_UInt16_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  5094  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5095  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5096   *
; ..\component\Com\Implementation\Com.c	  5097   *
; ..\component\Com\Implementation\Com.c	  5098  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5099  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt16_NewIsWithIn(Com_FilterInfo_UInt16IterType idxFilterInfo, uint16 newValue)
; ..\component\Com\Implementation\Com.c	  5100  {
; ..\component\Com\Implementation\Com.c	  5101    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5102  
; ..\component\Com\Implementation\Com.c	  5103    uint16 filterMin = Com_GetFilterMinOfFilterInfo_UInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5104    uint16 filterMax = Com_GetFilterMaxOfFilterInfo_UInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5105  
; ..\component\Com\Implementation\Com.c	  5106    if((filterMin <= newValue) && (newValue <= filterMax))
; ..\component\Com\Implementation\Com.c	  5107    {
; ..\component\Com\Implementation\Com.c	  5108      filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5109    }
; ..\component\Com\Implementation\Com.c	  5110  
; ..\component\Com\Implementation\Com.c	  5111    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5112    return filterState;
; ..\component\Com\Implementation\Com.c	  5113  }
; ..\component\Com\Implementation\Com.c	  5114  #endif
; ..\component\Com\Implementation\Com.c	  5115  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT16 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT16 == STD_ON))
; ..\component\Com\Implementation\Com.c	  5116  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  5117  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5118    Com_Signal_SInt16_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  5119  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5120  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5121   *
; ..\component\Com\Implementation\Com.c	  5122   *
; ..\component\Com\Implementation\Com.c	  5123  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5124  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt16_NewIsWithIn(Com_FilterInfo_SInt16IterType idxFilterInfo, sint16 newValue)
; ..\component\Com\Implementation\Com.c	  5125  {
; ..\component\Com\Implementation\Com.c	  5126    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5127  
; ..\component\Com\Implementation\Com.c	  5128    sint16 filterMin = Com_GetFilterMinOfFilterInfo_SInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5129    sint16 filterMax = Com_GetFilterMaxOfFilterInfo_SInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5130  
; ..\component\Com\Implementation\Com.c	  5131    if((filterMin <= newValue) && (newValue <= filterMax))
; ..\component\Com\Implementation\Com.c	  5132    {
; ..\component\Com\Implementation\Com.c	  5133      filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5134    }
; ..\component\Com\Implementation\Com.c	  5135  
; ..\component\Com\Implementation\Com.c	  5136    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5137    return filterState;
; ..\component\Com\Implementation\Com.c	  5138  }
; ..\component\Com\Implementation\Com.c	  5139  #endif
; ..\component\Com\Implementation\Com.c	  5140  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT32 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT32 == STD_ON))
; ..\component\Com\Implementation\Com.c	  5141  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  5142  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5143    Com_Signal_UInt32_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  5144  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5145  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5146   *
; ..\component\Com\Implementation\Com.c	  5147   *
; ..\component\Com\Implementation\Com.c	  5148  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5149  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt32_NewIsWithIn(Com_FilterInfo_UInt32IterType idxFilterInfo, uint32 newValue)
; ..\component\Com\Implementation\Com.c	  5150  {
; ..\component\Com\Implementation\Com.c	  5151    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5152  
; ..\component\Com\Implementation\Com.c	  5153    uint32 filterMin = Com_GetFilterMinOfFilterInfo_UInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5154    uint32 filterMax = Com_GetFilterMaxOfFilterInfo_UInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5155  
; ..\component\Com\Implementation\Com.c	  5156    if((filterMin <= newValue) && (newValue <= filterMax))
; ..\component\Com\Implementation\Com.c	  5157    {
; ..\component\Com\Implementation\Com.c	  5158      filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5159    }
; ..\component\Com\Implementation\Com.c	  5160  
; ..\component\Com\Implementation\Com.c	  5161    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5162    return filterState;
; ..\component\Com\Implementation\Com.c	  5163  }
; ..\component\Com\Implementation\Com.c	  5164  #endif
; ..\component\Com\Implementation\Com.c	  5165  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT32 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT32 == STD_ON))
; ..\component\Com\Implementation\Com.c	  5166  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  5167  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5168    Com_Signal_SInt32_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  5169  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5170  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5171   *
; ..\component\Com\Implementation\Com.c	  5172   *
; ..\component\Com\Implementation\Com.c	  5173  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5174  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt32_NewIsWithIn(Com_FilterInfo_SInt32IterType idxFilterInfo, sint32 newValue)
; ..\component\Com\Implementation\Com.c	  5175  {
; ..\component\Com\Implementation\Com.c	  5176    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5177  
; ..\component\Com\Implementation\Com.c	  5178    sint32 filterMin = Com_GetFilterMinOfFilterInfo_SInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5179    sint32 filterMax = Com_GetFilterMaxOfFilterInfo_SInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5180  
; ..\component\Com\Implementation\Com.c	  5181    if((filterMin <= newValue) && (newValue <= filterMax))
; ..\component\Com\Implementation\Com.c	  5182    {
; ..\component\Com\Implementation\Com.c	  5183      filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5184    }
; ..\component\Com\Implementation\Com.c	  5185  
; ..\component\Com\Implementation\Com.c	  5186    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5187    return filterState;
; ..\component\Com\Implementation\Com.c	  5188  }
; ..\component\Com\Implementation\Com.c	  5189  #endif
; ..\component\Com\Implementation\Com.c	  5190  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT64 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT64 == STD_ON))
; ..\component\Com\Implementation\Com.c	  5191  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  5192  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5193    Com_Signal_UInt64_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  5194  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5195  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5196   *
; ..\component\Com\Implementation\Com.c	  5197   *
; ..\component\Com\Implementation\Com.c	  5198  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5199  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt64_NewIsWithIn(Com_FilterInfo_UInt64IterType idxFilterInfo, uint64 newValue)
; ..\component\Com\Implementation\Com.c	  5200  {
; ..\component\Com\Implementation\Com.c	  5201    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5202  
; ..\component\Com\Implementation\Com.c	  5203    uint64 filterMin = Com_GetFilterMinOfFilterInfo_UInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5204    uint64 filterMax = Com_GetFilterMaxOfFilterInfo_UInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5205  
; ..\component\Com\Implementation\Com.c	  5206    if((filterMin <= newValue) && (newValue <= filterMax))
; ..\component\Com\Implementation\Com.c	  5207    {
; ..\component\Com\Implementation\Com.c	  5208      filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5209    }
; ..\component\Com\Implementation\Com.c	  5210  
; ..\component\Com\Implementation\Com.c	  5211    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5212    return filterState;
; ..\component\Com\Implementation\Com.c	  5213  }
; ..\component\Com\Implementation\Com.c	  5214  #endif
; ..\component\Com\Implementation\Com.c	  5215  #if   ((COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT64 == STD_ON) || (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT64 == STD_ON))
; ..\component\Com\Implementation\Com.c	  5216  /* jet: ComSignalNewIsWithIn snippet */
; ..\component\Com\Implementation\Com.c	  5217  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5218    Com_Signal_SInt64_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  5219  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5220  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5221   *
; ..\component\Com\Implementation\Com.c	  5222   *
; ..\component\Com\Implementation\Com.c	  5223  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5224  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt64_NewIsWithIn(Com_FilterInfo_SInt64IterType idxFilterInfo, sint64 newValue)
; ..\component\Com\Implementation\Com.c	  5225  {
; ..\component\Com\Implementation\Com.c	  5226    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5227  
; ..\component\Com\Implementation\Com.c	  5228    sint64 filterMin = Com_GetFilterMinOfFilterInfo_SInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5229    sint64 filterMax = Com_GetFilterMaxOfFilterInfo_SInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5230  
; ..\component\Com\Implementation\Com.c	  5231    if((filterMin <= newValue) && (newValue <= filterMax))
; ..\component\Com\Implementation\Com.c	  5232    {
; ..\component\Com\Implementation\Com.c	  5233      filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5234    }
; ..\component\Com\Implementation\Com.c	  5235  
; ..\component\Com\Implementation\Com.c	  5236    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5237    return filterState;
; ..\component\Com\Implementation\Com.c	  5238  }
; ..\component\Com\Implementation\Com.c	  5239  #endif
; ..\component\Com\Implementation\Com.c	  5240  
; ..\component\Com\Implementation\Com.c	  5241  
; ..\component\Com\Implementation\Com.c	  5242  
; ..\component\Com\Implementation\Com.c	  5243  
; ..\component\Com\Implementation\Com.c	  5244  #if (COM_FILTERINFO_UINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5245  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  5246  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5247    Com_Signal_UInt8_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  5248  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5249  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5250   *
; ..\component\Com\Implementation\Com.c	  5251   *
; ..\component\Com\Implementation\Com.c	  5252  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5253  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt8_EvaluateFilter(Com_FilterInfo_UInt8IterType idxFilterInfo, uint8 newValue, uint8 oldValue, boolean timeOutOccurred)       /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	  5254  {
; ..\component\Com\Implementation\Com.c	  5255    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5256  
; ..\component\Com\Implementation\Com.c	  5257    switch (Com_GetFilterAlgoOfFilterInfo_UInt8(idxFilterInfo))
; ..\component\Com\Implementation\Com.c	  5258    {
; ..\component\Com\Implementation\Com.c	  5259  # if (COM_EXISTS_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_UINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5260      case COM_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_UINT8:
; ..\component\Com\Implementation\Com.c	  5261      {
; ..\component\Com\Implementation\Com.c	  5262        uint8 filterMask = Com_GetFilterMaskOfFilterInfo_UInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5263        uint8 filterX = Com_GetFilterXOfFilterInfo_UInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5264        if((uint8) (((uint8) newValue) & filterMask) != filterX)  /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5265        {
; ..\component\Com\Implementation\Com.c	  5266          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5267        }
; ..\component\Com\Implementation\Com.c	  5268        break;
; ..\component\Com\Implementation\Com.c	  5269      }
; ..\component\Com\Implementation\Com.c	  5270  # endif
; ..\component\Com\Implementation\Com.c	  5271  # if (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_UINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5272      case COM_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_UINT8:
; ..\component\Com\Implementation\Com.c	  5273      {
; ..\component\Com\Implementation\Com.c	  5274  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5275        if(timeOutOccurred == FALSE)      /* COV_COM_MASKED_NEW_DIFFERS_MASKED_OLD_TX */ /* \trace SPEC-2736780 */
; ..\component\Com\Implementation\Com.c	  5276  #  endif
; ..\component\Com\Implementation\Com.c	  5277        {
; ..\component\Com\Implementation\Com.c	  5278          uint8 filterMask = Com_GetFilterMaskOfFilterInfo_UInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5279          if((((uint8) newValue) & filterMask) != (((uint8) oldValue) & filterMask))      /* PRQA S 2985 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  5280          {
; ..\component\Com\Implementation\Com.c	  5281            filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5282          }
; ..\component\Com\Implementation\Com.c	  5283        }
; ..\component\Com\Implementation\Com.c	  5284  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5285        else
; ..\component\Com\Implementation\Com.c	  5286        {
; ..\component\Com\Implementation\Com.c	  5287          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5288        }
; ..\component\Com\Implementation\Com.c	  5289  #  endif
; ..\component\Com\Implementation\Com.c	  5290        break;
; ..\component\Com\Implementation\Com.c	  5291      }
; ..\component\Com\Implementation\Com.c	  5292  # endif
; ..\component\Com\Implementation\Com.c	  5293  # if (COM_EXISTS_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_UINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5294      case COM_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_UINT8:
; ..\component\Com\Implementation\Com.c	  5295      {
; ..\component\Com\Implementation\Com.c	  5296        uint8 filterMask = Com_GetFilterMaskOfFilterInfo_UInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5297        uint8 filterX = Com_GetFilterXOfFilterInfo_UInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5298        if((uint8) (((uint8) newValue) & filterMask) == filterX)  /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5299        {
; ..\component\Com\Implementation\Com.c	  5300          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5301        }
; ..\component\Com\Implementation\Com.c	  5302        break;
; ..\component\Com\Implementation\Com.c	  5303      }
; ..\component\Com\Implementation\Com.c	  5304  # endif
; ..\component\Com\Implementation\Com.c	  5305  # if (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5306      case COM_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT8:
; ..\component\Com\Implementation\Com.c	  5307      {
; ..\component\Com\Implementation\Com.c	  5308        if(Com_Signal_UInt8_NewIsWithIn(idxFilterInfo, newValue) == FALSE)
; ..\component\Com\Implementation\Com.c	  5309        {
; ..\component\Com\Implementation\Com.c	  5310          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5311        }
; ..\component\Com\Implementation\Com.c	  5312        break;
; ..\component\Com\Implementation\Com.c	  5313      }
; ..\component\Com\Implementation\Com.c	  5314  # endif
; ..\component\Com\Implementation\Com.c	  5315  # if (COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5316      case COM_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT8:
; ..\component\Com\Implementation\Com.c	  5317      {
; ..\component\Com\Implementation\Com.c	  5318        filterState = Com_Signal_UInt8_NewIsWithIn(idxFilterInfo, newValue);
; ..\component\Com\Implementation\Com.c	  5319        break;
; ..\component\Com\Implementation\Com.c	  5320      }
; ..\component\Com\Implementation\Com.c	  5321  # endif
; ..\component\Com\Implementation\Com.c	  5322  # if (COM_EXISTS_NEVER_FILTERALGOOFFILTERINFO_UINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5323      case COM_NEVER_FILTERALGOOFFILTERINFO_UINT8:
; ..\component\Com\Implementation\Com.c	  5324      {
; ..\component\Com\Implementation\Com.c	  5325        filterState = FALSE;
; ..\component\Com\Implementation\Com.c	  5326        break;
; ..\component\Com\Implementation\Com.c	  5327      }
; ..\component\Com\Implementation\Com.c	  5328  # endif
; ..\component\Com\Implementation\Com.c	  5329      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  5330        break;
; ..\component\Com\Implementation\Com.c	  5331    }
; ..\component\Com\Implementation\Com.c	  5332  
; ..\component\Com\Implementation\Com.c	  5333    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5334    COM_DUMMY_STATEMENT(newValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5335    COM_DUMMY_STATEMENT(oldValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5336    COM_DUMMY_STATEMENT(timeOutOccurred); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5337  
; ..\component\Com\Implementation\Com.c	  5338    return filterState;
; ..\component\Com\Implementation\Com.c	  5339  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  5340  #endif
; ..\component\Com\Implementation\Com.c	  5341  #if (COM_FILTERINFO_SINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5342  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  5343  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5344    Com_Signal_SInt8_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  5345  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5346  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5347   *
; ..\component\Com\Implementation\Com.c	  5348   *
; ..\component\Com\Implementation\Com.c	  5349  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5350  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt8_EvaluateFilter(Com_FilterInfo_SInt8IterType idxFilterInfo, sint8 newValue, sint8 oldValue, boolean timeOutOccurred)       /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	  5351  {
; ..\component\Com\Implementation\Com.c	  5352    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5353  
; ..\component\Com\Implementation\Com.c	  5354    switch (Com_GetFilterAlgoOfFilterInfo_SInt8(idxFilterInfo))
; ..\component\Com\Implementation\Com.c	  5355    {
; ..\component\Com\Implementation\Com.c	  5356  # if (COM_EXISTS_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_SINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5357      case COM_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_SINT8:
; ..\component\Com\Implementation\Com.c	  5358      {
; ..\component\Com\Implementation\Com.c	  5359        uint8 filterMask = Com_GetFilterMaskOfFilterInfo_SInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5360        sint8 filterX = Com_GetFilterXOfFilterInfo_SInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5361        if((sint8) (((uint8) newValue) & filterMask) != filterX)  /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5362        {
; ..\component\Com\Implementation\Com.c	  5363          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5364        }
; ..\component\Com\Implementation\Com.c	  5365        break;
; ..\component\Com\Implementation\Com.c	  5366      }
; ..\component\Com\Implementation\Com.c	  5367  # endif
; ..\component\Com\Implementation\Com.c	  5368  # if (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_SINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5369      case COM_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_SINT8:
; ..\component\Com\Implementation\Com.c	  5370      {
; ..\component\Com\Implementation\Com.c	  5371  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5372        if(timeOutOccurred == FALSE)      /* COV_COM_MASKED_NEW_DIFFERS_MASKED_OLD_TX */ /* \trace SPEC-2736780 */
; ..\component\Com\Implementation\Com.c	  5373  #  endif
; ..\component\Com\Implementation\Com.c	  5374        {
; ..\component\Com\Implementation\Com.c	  5375          uint8 filterMask = Com_GetFilterMaskOfFilterInfo_SInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5376          if((((uint8) newValue) & filterMask) != (((uint8) oldValue) & filterMask))      /* PRQA S 2985 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  5377          {
; ..\component\Com\Implementation\Com.c	  5378            filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5379          }
; ..\component\Com\Implementation\Com.c	  5380        }
; ..\component\Com\Implementation\Com.c	  5381  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5382        else
; ..\component\Com\Implementation\Com.c	  5383        {
; ..\component\Com\Implementation\Com.c	  5384          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5385        }
; ..\component\Com\Implementation\Com.c	  5386  #  endif
; ..\component\Com\Implementation\Com.c	  5387        break;
; ..\component\Com\Implementation\Com.c	  5388      }
; ..\component\Com\Implementation\Com.c	  5389  # endif
; ..\component\Com\Implementation\Com.c	  5390  # if (COM_EXISTS_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_SINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5391      case COM_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_SINT8:
; ..\component\Com\Implementation\Com.c	  5392      {
; ..\component\Com\Implementation\Com.c	  5393        uint8 filterMask = Com_GetFilterMaskOfFilterInfo_SInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5394        sint8 filterX = Com_GetFilterXOfFilterInfo_SInt8(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5395        if((sint8) (((uint8) newValue) & filterMask) == filterX)  /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5396        {
; ..\component\Com\Implementation\Com.c	  5397          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5398        }
; ..\component\Com\Implementation\Com.c	  5399        break;
; ..\component\Com\Implementation\Com.c	  5400      }
; ..\component\Com\Implementation\Com.c	  5401  # endif
; ..\component\Com\Implementation\Com.c	  5402  # if (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5403      case COM_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT8:
; ..\component\Com\Implementation\Com.c	  5404      {
; ..\component\Com\Implementation\Com.c	  5405        if(Com_Signal_SInt8_NewIsWithIn(idxFilterInfo, newValue) == FALSE)
; ..\component\Com\Implementation\Com.c	  5406        {
; ..\component\Com\Implementation\Com.c	  5407          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5408        }
; ..\component\Com\Implementation\Com.c	  5409        break;
; ..\component\Com\Implementation\Com.c	  5410      }
; ..\component\Com\Implementation\Com.c	  5411  # endif
; ..\component\Com\Implementation\Com.c	  5412  # if (COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5413      case COM_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT8:
; ..\component\Com\Implementation\Com.c	  5414      {
; ..\component\Com\Implementation\Com.c	  5415        filterState = Com_Signal_SInt8_NewIsWithIn(idxFilterInfo, newValue);
; ..\component\Com\Implementation\Com.c	  5416        break;
; ..\component\Com\Implementation\Com.c	  5417      }
; ..\component\Com\Implementation\Com.c	  5418  # endif
; ..\component\Com\Implementation\Com.c	  5419  # if (COM_EXISTS_NEVER_FILTERALGOOFFILTERINFO_SINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5420      case COM_NEVER_FILTERALGOOFFILTERINFO_SINT8:
; ..\component\Com\Implementation\Com.c	  5421      {
; ..\component\Com\Implementation\Com.c	  5422        filterState = FALSE;
; ..\component\Com\Implementation\Com.c	  5423        break;
; ..\component\Com\Implementation\Com.c	  5424      }
; ..\component\Com\Implementation\Com.c	  5425  # endif
; ..\component\Com\Implementation\Com.c	  5426      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  5427        break;
; ..\component\Com\Implementation\Com.c	  5428    }
; ..\component\Com\Implementation\Com.c	  5429  
; ..\component\Com\Implementation\Com.c	  5430    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5431    COM_DUMMY_STATEMENT(newValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5432    COM_DUMMY_STATEMENT(oldValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5433    COM_DUMMY_STATEMENT(timeOutOccurred); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5434  
; ..\component\Com\Implementation\Com.c	  5435    return filterState;
; ..\component\Com\Implementation\Com.c	  5436  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  5437  #endif
; ..\component\Com\Implementation\Com.c	  5438  #if (COM_FILTERINFO_UINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5439  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  5440  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5441    Com_Signal_UInt16_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  5442  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5443  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5444   *
; ..\component\Com\Implementation\Com.c	  5445   *
; ..\component\Com\Implementation\Com.c	  5446  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5447  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt16_EvaluateFilter(Com_FilterInfo_UInt16IterType idxFilterInfo, uint16 newValue, uint16 oldValue, boolean timeOutOccurred)   /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	  5448  {
; ..\component\Com\Implementation\Com.c	  5449    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5450  
; ..\component\Com\Implementation\Com.c	  5451    switch (Com_GetFilterAlgoOfFilterInfo_UInt16(idxFilterInfo))
; ..\component\Com\Implementation\Com.c	  5452    {
; ..\component\Com\Implementation\Com.c	  5453  # if (COM_EXISTS_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_UINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5454      case COM_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_UINT16:
; ..\component\Com\Implementation\Com.c	  5455      {
; ..\component\Com\Implementation\Com.c	  5456        uint16 filterMask = Com_GetFilterMaskOfFilterInfo_UInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5457        uint16 filterX = Com_GetFilterXOfFilterInfo_UInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5458        if((uint16) (((uint16) newValue) & filterMask) != filterX)        /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5459        {
; ..\component\Com\Implementation\Com.c	  5460          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5461        }
; ..\component\Com\Implementation\Com.c	  5462        break;
; ..\component\Com\Implementation\Com.c	  5463      }
; ..\component\Com\Implementation\Com.c	  5464  # endif
; ..\component\Com\Implementation\Com.c	  5465  # if (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_UINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5466      case COM_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_UINT16:
; ..\component\Com\Implementation\Com.c	  5467      {
; ..\component\Com\Implementation\Com.c	  5468  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5469        if(timeOutOccurred == FALSE)      /* COV_COM_MASKED_NEW_DIFFERS_MASKED_OLD_TX */ /* \trace SPEC-2736780 */
; ..\component\Com\Implementation\Com.c	  5470  #  endif
; ..\component\Com\Implementation\Com.c	  5471        {
; ..\component\Com\Implementation\Com.c	  5472          uint16 filterMask = Com_GetFilterMaskOfFilterInfo_UInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5473          if((((uint16) newValue) & filterMask) != (((uint16) oldValue) & filterMask))    /* PRQA S 2985 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  5474          {
; ..\component\Com\Implementation\Com.c	  5475            filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5476          }
; ..\component\Com\Implementation\Com.c	  5477        }
; ..\component\Com\Implementation\Com.c	  5478  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5479        else
; ..\component\Com\Implementation\Com.c	  5480        {
; ..\component\Com\Implementation\Com.c	  5481          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5482        }
; ..\component\Com\Implementation\Com.c	  5483  #  endif
; ..\component\Com\Implementation\Com.c	  5484        break;
; ..\component\Com\Implementation\Com.c	  5485      }
; ..\component\Com\Implementation\Com.c	  5486  # endif
; ..\component\Com\Implementation\Com.c	  5487  # if (COM_EXISTS_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_UINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5488      case COM_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_UINT16:
; ..\component\Com\Implementation\Com.c	  5489      {
; ..\component\Com\Implementation\Com.c	  5490        uint16 filterMask = Com_GetFilterMaskOfFilterInfo_UInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5491        uint16 filterX = Com_GetFilterXOfFilterInfo_UInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5492        if((uint16) (((uint16) newValue) & filterMask) == filterX)        /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5493        {
; ..\component\Com\Implementation\Com.c	  5494          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5495        }
; ..\component\Com\Implementation\Com.c	  5496        break;
; ..\component\Com\Implementation\Com.c	  5497      }
; ..\component\Com\Implementation\Com.c	  5498  # endif
; ..\component\Com\Implementation\Com.c	  5499  # if (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5500      case COM_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT16:
; ..\component\Com\Implementation\Com.c	  5501      {
; ..\component\Com\Implementation\Com.c	  5502        if(Com_Signal_UInt16_NewIsWithIn(idxFilterInfo, newValue) == FALSE)
; ..\component\Com\Implementation\Com.c	  5503        {
; ..\component\Com\Implementation\Com.c	  5504          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5505        }
; ..\component\Com\Implementation\Com.c	  5506        break;
; ..\component\Com\Implementation\Com.c	  5507      }
; ..\component\Com\Implementation\Com.c	  5508  # endif
; ..\component\Com\Implementation\Com.c	  5509  # if (COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5510      case COM_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT16:
; ..\component\Com\Implementation\Com.c	  5511      {
; ..\component\Com\Implementation\Com.c	  5512        filterState = Com_Signal_UInt16_NewIsWithIn(idxFilterInfo, newValue);
; ..\component\Com\Implementation\Com.c	  5513        break;
; ..\component\Com\Implementation\Com.c	  5514      }
; ..\component\Com\Implementation\Com.c	  5515  # endif
; ..\component\Com\Implementation\Com.c	  5516  # if (COM_EXISTS_NEVER_FILTERALGOOFFILTERINFO_UINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5517      case COM_NEVER_FILTERALGOOFFILTERINFO_UINT16:
; ..\component\Com\Implementation\Com.c	  5518      {
; ..\component\Com\Implementation\Com.c	  5519        filterState = FALSE;
; ..\component\Com\Implementation\Com.c	  5520        break;
; ..\component\Com\Implementation\Com.c	  5521      }
; ..\component\Com\Implementation\Com.c	  5522  # endif
; ..\component\Com\Implementation\Com.c	  5523      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  5524        break;
; ..\component\Com\Implementation\Com.c	  5525    }
; ..\component\Com\Implementation\Com.c	  5526  
; ..\component\Com\Implementation\Com.c	  5527    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5528    COM_DUMMY_STATEMENT(newValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5529    COM_DUMMY_STATEMENT(oldValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5530    COM_DUMMY_STATEMENT(timeOutOccurred); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5531  
; ..\component\Com\Implementation\Com.c	  5532    return filterState;
; ..\component\Com\Implementation\Com.c	  5533  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  5534  #endif
; ..\component\Com\Implementation\Com.c	  5535  #if (COM_FILTERINFO_SINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5536  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  5537  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5538    Com_Signal_SInt16_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  5539  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5540  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5541   *
; ..\component\Com\Implementation\Com.c	  5542   *
; ..\component\Com\Implementation\Com.c	  5543  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5544  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt16_EvaluateFilter(Com_FilterInfo_SInt16IterType idxFilterInfo, sint16 newValue, sint16 oldValue, boolean timeOutOccurred)   /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	  5545  {
; ..\component\Com\Implementation\Com.c	  5546    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5547  
; ..\component\Com\Implementation\Com.c	  5548    switch (Com_GetFilterAlgoOfFilterInfo_SInt16(idxFilterInfo))
; ..\component\Com\Implementation\Com.c	  5549    {
; ..\component\Com\Implementation\Com.c	  5550  # if (COM_EXISTS_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_SINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5551      case COM_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_SINT16:
; ..\component\Com\Implementation\Com.c	  5552      {
; ..\component\Com\Implementation\Com.c	  5553        uint16 filterMask = Com_GetFilterMaskOfFilterInfo_SInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5554        sint16 filterX = Com_GetFilterXOfFilterInfo_SInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5555        if((sint16) (((uint16) newValue) & filterMask) != filterX)        /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5556        {
; ..\component\Com\Implementation\Com.c	  5557          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5558        }
; ..\component\Com\Implementation\Com.c	  5559        break;
; ..\component\Com\Implementation\Com.c	  5560      }
; ..\component\Com\Implementation\Com.c	  5561  # endif
; ..\component\Com\Implementation\Com.c	  5562  # if (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_SINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5563      case COM_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_SINT16:
; ..\component\Com\Implementation\Com.c	  5564      {
; ..\component\Com\Implementation\Com.c	  5565  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5566        if(timeOutOccurred == FALSE)      /* COV_COM_MASKED_NEW_DIFFERS_MASKED_OLD_TX */ /* \trace SPEC-2736780 */
; ..\component\Com\Implementation\Com.c	  5567  #  endif
; ..\component\Com\Implementation\Com.c	  5568        {
; ..\component\Com\Implementation\Com.c	  5569          uint16 filterMask = Com_GetFilterMaskOfFilterInfo_SInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5570          if((((uint16) newValue) & filterMask) != (((uint16) oldValue) & filterMask))    /* PRQA S 2985 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  5571          {
; ..\component\Com\Implementation\Com.c	  5572            filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5573          }
; ..\component\Com\Implementation\Com.c	  5574        }
; ..\component\Com\Implementation\Com.c	  5575  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5576        else
; ..\component\Com\Implementation\Com.c	  5577        {
; ..\component\Com\Implementation\Com.c	  5578          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5579        }
; ..\component\Com\Implementation\Com.c	  5580  #  endif
; ..\component\Com\Implementation\Com.c	  5581        break;
; ..\component\Com\Implementation\Com.c	  5582      }
; ..\component\Com\Implementation\Com.c	  5583  # endif
; ..\component\Com\Implementation\Com.c	  5584  # if (COM_EXISTS_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_SINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5585      case COM_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_SINT16:
; ..\component\Com\Implementation\Com.c	  5586      {
; ..\component\Com\Implementation\Com.c	  5587        uint16 filterMask = Com_GetFilterMaskOfFilterInfo_SInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5588        sint16 filterX = Com_GetFilterXOfFilterInfo_SInt16(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5589        if((sint16) (((uint16) newValue) & filterMask) == filterX)        /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5590        {
; ..\component\Com\Implementation\Com.c	  5591          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5592        }
; ..\component\Com\Implementation\Com.c	  5593        break;
; ..\component\Com\Implementation\Com.c	  5594      }
; ..\component\Com\Implementation\Com.c	  5595  # endif
; ..\component\Com\Implementation\Com.c	  5596  # if (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5597      case COM_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT16:
; ..\component\Com\Implementation\Com.c	  5598      {
; ..\component\Com\Implementation\Com.c	  5599        if(Com_Signal_SInt16_NewIsWithIn(idxFilterInfo, newValue) == FALSE)
; ..\component\Com\Implementation\Com.c	  5600        {
; ..\component\Com\Implementation\Com.c	  5601          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5602        }
; ..\component\Com\Implementation\Com.c	  5603        break;
; ..\component\Com\Implementation\Com.c	  5604      }
; ..\component\Com\Implementation\Com.c	  5605  # endif
; ..\component\Com\Implementation\Com.c	  5606  # if (COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5607      case COM_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT16:
; ..\component\Com\Implementation\Com.c	  5608      {
; ..\component\Com\Implementation\Com.c	  5609        filterState = Com_Signal_SInt16_NewIsWithIn(idxFilterInfo, newValue);
; ..\component\Com\Implementation\Com.c	  5610        break;
; ..\component\Com\Implementation\Com.c	  5611      }
; ..\component\Com\Implementation\Com.c	  5612  # endif
; ..\component\Com\Implementation\Com.c	  5613  # if (COM_EXISTS_NEVER_FILTERALGOOFFILTERINFO_SINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5614      case COM_NEVER_FILTERALGOOFFILTERINFO_SINT16:
; ..\component\Com\Implementation\Com.c	  5615      {
; ..\component\Com\Implementation\Com.c	  5616        filterState = FALSE;
; ..\component\Com\Implementation\Com.c	  5617        break;
; ..\component\Com\Implementation\Com.c	  5618      }
; ..\component\Com\Implementation\Com.c	  5619  # endif
; ..\component\Com\Implementation\Com.c	  5620      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  5621        break;
; ..\component\Com\Implementation\Com.c	  5622    }
; ..\component\Com\Implementation\Com.c	  5623  
; ..\component\Com\Implementation\Com.c	  5624    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5625    COM_DUMMY_STATEMENT(newValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5626    COM_DUMMY_STATEMENT(oldValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5627    COM_DUMMY_STATEMENT(timeOutOccurred); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5628  
; ..\component\Com\Implementation\Com.c	  5629    return filterState;
; ..\component\Com\Implementation\Com.c	  5630  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  5631  #endif
; ..\component\Com\Implementation\Com.c	  5632  #if (COM_FILTERINFO_UINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5633  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  5634  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5635    Com_Signal_UInt32_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  5636  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5637  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5638   *
; ..\component\Com\Implementation\Com.c	  5639   *
; ..\component\Com\Implementation\Com.c	  5640  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5641  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt32_EvaluateFilter(Com_FilterInfo_UInt32IterType idxFilterInfo, uint32 newValue, uint32 oldValue, boolean timeOutOccurred)   /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	  5642  {
; ..\component\Com\Implementation\Com.c	  5643    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5644  
; ..\component\Com\Implementation\Com.c	  5645    switch (Com_GetFilterAlgoOfFilterInfo_UInt32(idxFilterInfo))
; ..\component\Com\Implementation\Com.c	  5646    {
; ..\component\Com\Implementation\Com.c	  5647  # if (COM_EXISTS_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_UINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5648      case COM_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_UINT32:
; ..\component\Com\Implementation\Com.c	  5649      {
; ..\component\Com\Implementation\Com.c	  5650        uint32 filterMask = Com_GetFilterMaskOfFilterInfo_UInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5651        uint32 filterX = Com_GetFilterXOfFilterInfo_UInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5652        if((uint32) (((uint32) newValue) & filterMask) != filterX)        /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5653        {
; ..\component\Com\Implementation\Com.c	  5654          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5655        }
; ..\component\Com\Implementation\Com.c	  5656        break;
; ..\component\Com\Implementation\Com.c	  5657      }
; ..\component\Com\Implementation\Com.c	  5658  # endif
; ..\component\Com\Implementation\Com.c	  5659  # if (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_UINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5660      case COM_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_UINT32:
; ..\component\Com\Implementation\Com.c	  5661      {
; ..\component\Com\Implementation\Com.c	  5662  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5663        if(timeOutOccurred == FALSE)      /* COV_COM_MASKED_NEW_DIFFERS_MASKED_OLD_TX */ /* \trace SPEC-2736780 */
; ..\component\Com\Implementation\Com.c	  5664  #  endif
; ..\component\Com\Implementation\Com.c	  5665        {
; ..\component\Com\Implementation\Com.c	  5666          uint32 filterMask = Com_GetFilterMaskOfFilterInfo_UInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5667          if((((uint32) newValue) & filterMask) != (((uint32) oldValue) & filterMask))    /* PRQA S 2985 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  5668          {
; ..\component\Com\Implementation\Com.c	  5669            filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5670          }
; ..\component\Com\Implementation\Com.c	  5671        }
; ..\component\Com\Implementation\Com.c	  5672  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5673        else
; ..\component\Com\Implementation\Com.c	  5674        {
; ..\component\Com\Implementation\Com.c	  5675          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5676        }
; ..\component\Com\Implementation\Com.c	  5677  #  endif
; ..\component\Com\Implementation\Com.c	  5678        break;
; ..\component\Com\Implementation\Com.c	  5679      }
; ..\component\Com\Implementation\Com.c	  5680  # endif
; ..\component\Com\Implementation\Com.c	  5681  # if (COM_EXISTS_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_UINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5682      case COM_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_UINT32:
; ..\component\Com\Implementation\Com.c	  5683      {
; ..\component\Com\Implementation\Com.c	  5684        uint32 filterMask = Com_GetFilterMaskOfFilterInfo_UInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5685        uint32 filterX = Com_GetFilterXOfFilterInfo_UInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5686        if((uint32) (((uint32) newValue) & filterMask) == filterX)        /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5687        {
; ..\component\Com\Implementation\Com.c	  5688          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5689        }
; ..\component\Com\Implementation\Com.c	  5690        break;
; ..\component\Com\Implementation\Com.c	  5691      }
; ..\component\Com\Implementation\Com.c	  5692  # endif
; ..\component\Com\Implementation\Com.c	  5693  # if (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5694      case COM_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT32:
; ..\component\Com\Implementation\Com.c	  5695      {
; ..\component\Com\Implementation\Com.c	  5696        if(Com_Signal_UInt32_NewIsWithIn(idxFilterInfo, newValue) == FALSE)
; ..\component\Com\Implementation\Com.c	  5697        {
; ..\component\Com\Implementation\Com.c	  5698          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5699        }
; ..\component\Com\Implementation\Com.c	  5700        break;
; ..\component\Com\Implementation\Com.c	  5701      }
; ..\component\Com\Implementation\Com.c	  5702  # endif
; ..\component\Com\Implementation\Com.c	  5703  # if (COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5704      case COM_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT32:
; ..\component\Com\Implementation\Com.c	  5705      {
; ..\component\Com\Implementation\Com.c	  5706        filterState = Com_Signal_UInt32_NewIsWithIn(idxFilterInfo, newValue);
; ..\component\Com\Implementation\Com.c	  5707        break;
; ..\component\Com\Implementation\Com.c	  5708      }
; ..\component\Com\Implementation\Com.c	  5709  # endif
; ..\component\Com\Implementation\Com.c	  5710  # if (COM_EXISTS_NEVER_FILTERALGOOFFILTERINFO_UINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5711      case COM_NEVER_FILTERALGOOFFILTERINFO_UINT32:
; ..\component\Com\Implementation\Com.c	  5712      {
; ..\component\Com\Implementation\Com.c	  5713        filterState = FALSE;
; ..\component\Com\Implementation\Com.c	  5714        break;
; ..\component\Com\Implementation\Com.c	  5715      }
; ..\component\Com\Implementation\Com.c	  5716  # endif
; ..\component\Com\Implementation\Com.c	  5717      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  5718        break;
; ..\component\Com\Implementation\Com.c	  5719    }
; ..\component\Com\Implementation\Com.c	  5720  
; ..\component\Com\Implementation\Com.c	  5721    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5722    COM_DUMMY_STATEMENT(newValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5723    COM_DUMMY_STATEMENT(oldValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5724    COM_DUMMY_STATEMENT(timeOutOccurred); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5725  
; ..\component\Com\Implementation\Com.c	  5726    return filterState;
; ..\component\Com\Implementation\Com.c	  5727  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  5728  #endif
; ..\component\Com\Implementation\Com.c	  5729  #if (COM_FILTERINFO_SINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5730  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  5731  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5732    Com_Signal_SInt32_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  5733  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5734  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5735   *
; ..\component\Com\Implementation\Com.c	  5736   *
; ..\component\Com\Implementation\Com.c	  5737  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5738  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt32_EvaluateFilter(Com_FilterInfo_SInt32IterType idxFilterInfo, sint32 newValue, sint32 oldValue, boolean timeOutOccurred)   /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	  5739  {
; ..\component\Com\Implementation\Com.c	  5740    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5741  
; ..\component\Com\Implementation\Com.c	  5742    switch (Com_GetFilterAlgoOfFilterInfo_SInt32(idxFilterInfo))
; ..\component\Com\Implementation\Com.c	  5743    {
; ..\component\Com\Implementation\Com.c	  5744  # if (COM_EXISTS_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_SINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5745      case COM_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_SINT32:
; ..\component\Com\Implementation\Com.c	  5746      {
; ..\component\Com\Implementation\Com.c	  5747        uint32 filterMask = Com_GetFilterMaskOfFilterInfo_SInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5748        sint32 filterX = Com_GetFilterXOfFilterInfo_SInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5749        if((sint32) (((uint32) newValue) & filterMask) != filterX)        /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5750        {
; ..\component\Com\Implementation\Com.c	  5751          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5752        }
; ..\component\Com\Implementation\Com.c	  5753        break;
; ..\component\Com\Implementation\Com.c	  5754      }
; ..\component\Com\Implementation\Com.c	  5755  # endif
; ..\component\Com\Implementation\Com.c	  5756  # if (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_SINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5757      case COM_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_SINT32:
; ..\component\Com\Implementation\Com.c	  5758      {
; ..\component\Com\Implementation\Com.c	  5759  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5760        if(timeOutOccurred == FALSE)      /* COV_COM_MASKED_NEW_DIFFERS_MASKED_OLD_TX */ /* \trace SPEC-2736780 */
; ..\component\Com\Implementation\Com.c	  5761  #  endif
; ..\component\Com\Implementation\Com.c	  5762        {
; ..\component\Com\Implementation\Com.c	  5763          uint32 filterMask = Com_GetFilterMaskOfFilterInfo_SInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5764          if((((uint32) newValue) & filterMask) != (((uint32) oldValue) & filterMask))    /* PRQA S 2985 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  5765          {
; ..\component\Com\Implementation\Com.c	  5766            filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5767          }
; ..\component\Com\Implementation\Com.c	  5768        }
; ..\component\Com\Implementation\Com.c	  5769  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5770        else
; ..\component\Com\Implementation\Com.c	  5771        {
; ..\component\Com\Implementation\Com.c	  5772          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5773        }
; ..\component\Com\Implementation\Com.c	  5774  #  endif
; ..\component\Com\Implementation\Com.c	  5775        break;
; ..\component\Com\Implementation\Com.c	  5776      }
; ..\component\Com\Implementation\Com.c	  5777  # endif
; ..\component\Com\Implementation\Com.c	  5778  # if (COM_EXISTS_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_SINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5779      case COM_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_SINT32:
; ..\component\Com\Implementation\Com.c	  5780      {
; ..\component\Com\Implementation\Com.c	  5781        uint32 filterMask = Com_GetFilterMaskOfFilterInfo_SInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5782        sint32 filterX = Com_GetFilterXOfFilterInfo_SInt32(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5783        if((sint32) (((uint32) newValue) & filterMask) == filterX)        /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5784        {
; ..\component\Com\Implementation\Com.c	  5785          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5786        }
; ..\component\Com\Implementation\Com.c	  5787        break;
; ..\component\Com\Implementation\Com.c	  5788      }
; ..\component\Com\Implementation\Com.c	  5789  # endif
; ..\component\Com\Implementation\Com.c	  5790  # if (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5791      case COM_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT32:
; ..\component\Com\Implementation\Com.c	  5792      {
; ..\component\Com\Implementation\Com.c	  5793        if(Com_Signal_SInt32_NewIsWithIn(idxFilterInfo, newValue) == FALSE)
; ..\component\Com\Implementation\Com.c	  5794        {
; ..\component\Com\Implementation\Com.c	  5795          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5796        }
; ..\component\Com\Implementation\Com.c	  5797        break;
; ..\component\Com\Implementation\Com.c	  5798      }
; ..\component\Com\Implementation\Com.c	  5799  # endif
; ..\component\Com\Implementation\Com.c	  5800  # if (COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5801      case COM_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT32:
; ..\component\Com\Implementation\Com.c	  5802      {
; ..\component\Com\Implementation\Com.c	  5803        filterState = Com_Signal_SInt32_NewIsWithIn(idxFilterInfo, newValue);
; ..\component\Com\Implementation\Com.c	  5804        break;
; ..\component\Com\Implementation\Com.c	  5805      }
; ..\component\Com\Implementation\Com.c	  5806  # endif
; ..\component\Com\Implementation\Com.c	  5807  # if (COM_EXISTS_NEVER_FILTERALGOOFFILTERINFO_SINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5808      case COM_NEVER_FILTERALGOOFFILTERINFO_SINT32:
; ..\component\Com\Implementation\Com.c	  5809      {
; ..\component\Com\Implementation\Com.c	  5810        filterState = FALSE;
; ..\component\Com\Implementation\Com.c	  5811        break;
; ..\component\Com\Implementation\Com.c	  5812      }
; ..\component\Com\Implementation\Com.c	  5813  # endif
; ..\component\Com\Implementation\Com.c	  5814      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  5815        break;
; ..\component\Com\Implementation\Com.c	  5816    }
; ..\component\Com\Implementation\Com.c	  5817  
; ..\component\Com\Implementation\Com.c	  5818    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5819    COM_DUMMY_STATEMENT(newValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5820    COM_DUMMY_STATEMENT(oldValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5821    COM_DUMMY_STATEMENT(timeOutOccurred); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5822  
; ..\component\Com\Implementation\Com.c	  5823    return filterState;
; ..\component\Com\Implementation\Com.c	  5824  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  5825  #endif
; ..\component\Com\Implementation\Com.c	  5826  #if (COM_FILTERINFO_UINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5827  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  5828  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5829    Com_Signal_UInt64_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  5830  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5831  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5832   *
; ..\component\Com\Implementation\Com.c	  5833   *
; ..\component\Com\Implementation\Com.c	  5834  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5835  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt64_EvaluateFilter(Com_FilterInfo_UInt64IterType idxFilterInfo, uint64 newValue, uint64 oldValue, boolean timeOutOccurred)   /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	  5836  {
; ..\component\Com\Implementation\Com.c	  5837    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5838  
; ..\component\Com\Implementation\Com.c	  5839    switch (Com_GetFilterAlgoOfFilterInfo_UInt64(idxFilterInfo))
; ..\component\Com\Implementation\Com.c	  5840    {
; ..\component\Com\Implementation\Com.c	  5841  # if (COM_EXISTS_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_UINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5842      case COM_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_UINT64:
; ..\component\Com\Implementation\Com.c	  5843      {
; ..\component\Com\Implementation\Com.c	  5844        uint64 filterMask = Com_GetFilterMaskOfFilterInfo_UInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5845        uint64 filterX = Com_GetFilterXOfFilterInfo_UInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5846        if((uint64) (((uint64) newValue) & filterMask) != filterX)        /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5847        {
; ..\component\Com\Implementation\Com.c	  5848          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5849        }
; ..\component\Com\Implementation\Com.c	  5850        break;
; ..\component\Com\Implementation\Com.c	  5851      }
; ..\component\Com\Implementation\Com.c	  5852  # endif
; ..\component\Com\Implementation\Com.c	  5853  # if (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_UINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5854      case COM_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_UINT64:
; ..\component\Com\Implementation\Com.c	  5855      {
; ..\component\Com\Implementation\Com.c	  5856  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5857        if(timeOutOccurred == FALSE)      /* COV_COM_MASKED_NEW_DIFFERS_MASKED_OLD_TX */ /* \trace SPEC-2736780 */
; ..\component\Com\Implementation\Com.c	  5858  #  endif
; ..\component\Com\Implementation\Com.c	  5859        {
; ..\component\Com\Implementation\Com.c	  5860          uint64 filterMask = Com_GetFilterMaskOfFilterInfo_UInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5861          if((((uint64) newValue) & filterMask) != (((uint64) oldValue) & filterMask))    /* PRQA S 2985 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  5862          {
; ..\component\Com\Implementation\Com.c	  5863            filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5864          }
; ..\component\Com\Implementation\Com.c	  5865        }
; ..\component\Com\Implementation\Com.c	  5866  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5867        else
; ..\component\Com\Implementation\Com.c	  5868        {
; ..\component\Com\Implementation\Com.c	  5869          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5870        }
; ..\component\Com\Implementation\Com.c	  5871  #  endif
; ..\component\Com\Implementation\Com.c	  5872        break;
; ..\component\Com\Implementation\Com.c	  5873      }
; ..\component\Com\Implementation\Com.c	  5874  # endif
; ..\component\Com\Implementation\Com.c	  5875  # if (COM_EXISTS_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_UINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5876      case COM_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_UINT64:
; ..\component\Com\Implementation\Com.c	  5877      {
; ..\component\Com\Implementation\Com.c	  5878        uint64 filterMask = Com_GetFilterMaskOfFilterInfo_UInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5879        uint64 filterX = Com_GetFilterXOfFilterInfo_UInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5880        if((uint64) (((uint64) newValue) & filterMask) == filterX)        /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5881        {
; ..\component\Com\Implementation\Com.c	  5882          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5883        }
; ..\component\Com\Implementation\Com.c	  5884        break;
; ..\component\Com\Implementation\Com.c	  5885      }
; ..\component\Com\Implementation\Com.c	  5886  # endif
; ..\component\Com\Implementation\Com.c	  5887  # if (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5888      case COM_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_UINT64:
; ..\component\Com\Implementation\Com.c	  5889      {
; ..\component\Com\Implementation\Com.c	  5890        if(Com_Signal_UInt64_NewIsWithIn(idxFilterInfo, newValue) == FALSE)
; ..\component\Com\Implementation\Com.c	  5891        {
; ..\component\Com\Implementation\Com.c	  5892          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5893        }
; ..\component\Com\Implementation\Com.c	  5894        break;
; ..\component\Com\Implementation\Com.c	  5895      }
; ..\component\Com\Implementation\Com.c	  5896  # endif
; ..\component\Com\Implementation\Com.c	  5897  # if (COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5898      case COM_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_UINT64:
; ..\component\Com\Implementation\Com.c	  5899      {
; ..\component\Com\Implementation\Com.c	  5900        filterState = Com_Signal_UInt64_NewIsWithIn(idxFilterInfo, newValue);
; ..\component\Com\Implementation\Com.c	  5901        break;
; ..\component\Com\Implementation\Com.c	  5902      }
; ..\component\Com\Implementation\Com.c	  5903  # endif
; ..\component\Com\Implementation\Com.c	  5904  # if (COM_EXISTS_NEVER_FILTERALGOOFFILTERINFO_UINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5905      case COM_NEVER_FILTERALGOOFFILTERINFO_UINT64:
; ..\component\Com\Implementation\Com.c	  5906      {
; ..\component\Com\Implementation\Com.c	  5907        filterState = FALSE;
; ..\component\Com\Implementation\Com.c	  5908        break;
; ..\component\Com\Implementation\Com.c	  5909      }
; ..\component\Com\Implementation\Com.c	  5910  # endif
; ..\component\Com\Implementation\Com.c	  5911      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  5912        break;
; ..\component\Com\Implementation\Com.c	  5913    }
; ..\component\Com\Implementation\Com.c	  5914  
; ..\component\Com\Implementation\Com.c	  5915    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5916    COM_DUMMY_STATEMENT(newValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5917    COM_DUMMY_STATEMENT(oldValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5918    COM_DUMMY_STATEMENT(timeOutOccurred); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  5919  
; ..\component\Com\Implementation\Com.c	  5920    return filterState;
; ..\component\Com\Implementation\Com.c	  5921  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  5922  #endif
; ..\component\Com\Implementation\Com.c	  5923  #if (COM_FILTERINFO_SINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5924  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  5925  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  5926    Com_Signal_SInt64_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  5927  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5928  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  5929   *
; ..\component\Com\Implementation\Com.c	  5930   *
; ..\component\Com\Implementation\Com.c	  5931  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  5932  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_SInt64_EvaluateFilter(Com_FilterInfo_SInt64IterType idxFilterInfo, sint64 newValue, sint64 oldValue, boolean timeOutOccurred)   /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	  5933  {
; ..\component\Com\Implementation\Com.c	  5934    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  5935  
; ..\component\Com\Implementation\Com.c	  5936    switch (Com_GetFilterAlgoOfFilterInfo_SInt64(idxFilterInfo))
; ..\component\Com\Implementation\Com.c	  5937    {
; ..\component\Com\Implementation\Com.c	  5938  # if (COM_EXISTS_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_SINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5939      case COM_MASKED_NEW_DIFFERS_X_FILTERALGOOFFILTERINFO_SINT64:
; ..\component\Com\Implementation\Com.c	  5940      {
; ..\component\Com\Implementation\Com.c	  5941        uint64 filterMask = Com_GetFilterMaskOfFilterInfo_SInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5942        sint64 filterX = Com_GetFilterXOfFilterInfo_SInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5943        if((sint64) (((uint64) newValue) & filterMask) != filterX)        /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5944        {
; ..\component\Com\Implementation\Com.c	  5945          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5946        }
; ..\component\Com\Implementation\Com.c	  5947        break;
; ..\component\Com\Implementation\Com.c	  5948      }
; ..\component\Com\Implementation\Com.c	  5949  # endif
; ..\component\Com\Implementation\Com.c	  5950  # if (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_SINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5951      case COM_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_SINT64:
; ..\component\Com\Implementation\Com.c	  5952      {
; ..\component\Com\Implementation\Com.c	  5953  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5954        if(timeOutOccurred == FALSE)      /* COV_COM_MASKED_NEW_DIFFERS_MASKED_OLD_TX */ /* \trace SPEC-2736780 */
; ..\component\Com\Implementation\Com.c	  5955  #  endif
; ..\component\Com\Implementation\Com.c	  5956        {
; ..\component\Com\Implementation\Com.c	  5957          uint64 filterMask = Com_GetFilterMaskOfFilterInfo_SInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5958          if((((uint64) newValue) & filterMask) != (((uint64) oldValue) & filterMask))    /* PRQA S 2985 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  5959          {
; ..\component\Com\Implementation\Com.c	  5960            filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5961          }
; ..\component\Com\Implementation\Com.c	  5962        }
; ..\component\Com\Implementation\Com.c	  5963  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  5964        else
; ..\component\Com\Implementation\Com.c	  5965        {
; ..\component\Com\Implementation\Com.c	  5966          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5967        }
; ..\component\Com\Implementation\Com.c	  5968  #  endif
; ..\component\Com\Implementation\Com.c	  5969        break;
; ..\component\Com\Implementation\Com.c	  5970      }
; ..\component\Com\Implementation\Com.c	  5971  # endif
; ..\component\Com\Implementation\Com.c	  5972  # if (COM_EXISTS_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_SINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5973      case COM_MASKED_NEW_EQUALS_X_FILTERALGOOFFILTERINFO_SINT64:
; ..\component\Com\Implementation\Com.c	  5974      {
; ..\component\Com\Implementation\Com.c	  5975        uint64 filterMask = Com_GetFilterMaskOfFilterInfo_SInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5976        sint64 filterX = Com_GetFilterXOfFilterInfo_SInt64(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	  5977        if((sint64) (((uint64) newValue) & filterMask) == filterX)        /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  5978        {
; ..\component\Com\Implementation\Com.c	  5979          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5980        }
; ..\component\Com\Implementation\Com.c	  5981        break;
; ..\component\Com\Implementation\Com.c	  5982      }
; ..\component\Com\Implementation\Com.c	  5983  # endif
; ..\component\Com\Implementation\Com.c	  5984  # if (COM_EXISTS_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5985      case COM_NEW_IS_OUTSIDE_FILTERALGOOFFILTERINFO_SINT64:
; ..\component\Com\Implementation\Com.c	  5986      {
; ..\component\Com\Implementation\Com.c	  5987        if(Com_Signal_SInt64_NewIsWithIn(idxFilterInfo, newValue) == FALSE)
; ..\component\Com\Implementation\Com.c	  5988        {
; ..\component\Com\Implementation\Com.c	  5989          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  5990        }
; ..\component\Com\Implementation\Com.c	  5991        break;
; ..\component\Com\Implementation\Com.c	  5992      }
; ..\component\Com\Implementation\Com.c	  5993  # endif
; ..\component\Com\Implementation\Com.c	  5994  # if (COM_EXISTS_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  5995      case COM_NEW_IS_WITHIN_FILTERALGOOFFILTERINFO_SINT64:
; ..\component\Com\Implementation\Com.c	  5996      {
; ..\component\Com\Implementation\Com.c	  5997        filterState = Com_Signal_SInt64_NewIsWithIn(idxFilterInfo, newValue);
; ..\component\Com\Implementation\Com.c	  5998        break;
; ..\component\Com\Implementation\Com.c	  5999      }
; ..\component\Com\Implementation\Com.c	  6000  # endif
; ..\component\Com\Implementation\Com.c	  6001  # if (COM_EXISTS_NEVER_FILTERALGOOFFILTERINFO_SINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  6002      case COM_NEVER_FILTERALGOOFFILTERINFO_SINT64:
; ..\component\Com\Implementation\Com.c	  6003      {
; ..\component\Com\Implementation\Com.c	  6004        filterState = FALSE;
; ..\component\Com\Implementation\Com.c	  6005        break;
; ..\component\Com\Implementation\Com.c	  6006      }
; ..\component\Com\Implementation\Com.c	  6007  # endif
; ..\component\Com\Implementation\Com.c	  6008      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  6009        break;
; ..\component\Com\Implementation\Com.c	  6010    }
; ..\component\Com\Implementation\Com.c	  6011  
; ..\component\Com\Implementation\Com.c	  6012    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6013    COM_DUMMY_STATEMENT(newValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6014    COM_DUMMY_STATEMENT(oldValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6015    COM_DUMMY_STATEMENT(timeOutOccurred); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6016  
; ..\component\Com\Implementation\Com.c	  6017    return filterState;
; ..\component\Com\Implementation\Com.c	  6018  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  6019  #endif
; ..\component\Com\Implementation\Com.c	  6020  #if (COM_FILTERINFO_FLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  6021  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  6022  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6023    Com_Signal_Float32_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  6024  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6025  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6026   *
; ..\component\Com\Implementation\Com.c	  6027   *
; ..\component\Com\Implementation\Com.c	  6028  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6029  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_Float32_EvaluateFilter(Com_FilterInfo_Float32IterType idxFilterInfo, float32 newValue, float32 oldValue, boolean timeOutOccurred)       /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	  6030  {
; ..\component\Com\Implementation\Com.c	  6031    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  6032  
; ..\component\Com\Implementation\Com.c	  6033    switch (Com_GetFilterAlgoOfFilterInfo_Float32(idxFilterInfo))
; ..\component\Com\Implementation\Com.c	  6034    {
; ..\component\Com\Implementation\Com.c	  6035  # if (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_FLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  6036      case COM_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_FLOAT32:
; ..\component\Com\Implementation\Com.c	  6037      {
; ..\component\Com\Implementation\Com.c	  6038  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6039        if(timeOutOccurred == FALSE)      /* COV_COM_MASKED_NEW_DIFFERS_MASKED_OLD_TX */ /* \trace SPEC-2736780 */
; ..\component\Com\Implementation\Com.c	  6040  #  endif
; ..\component\Com\Implementation\Com.c	  6041        {
; ..\component\Com\Implementation\Com.c	  6042          if(!Com_CompareFloat32Values(newValue, oldValue))
; ..\component\Com\Implementation\Com.c	  6043          {
; ..\component\Com\Implementation\Com.c	  6044            filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  6045          }
; ..\component\Com\Implementation\Com.c	  6046        }
; ..\component\Com\Implementation\Com.c	  6047  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6048        else
; ..\component\Com\Implementation\Com.c	  6049        {
; ..\component\Com\Implementation\Com.c	  6050          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  6051        }
; ..\component\Com\Implementation\Com.c	  6052  #  endif
; ..\component\Com\Implementation\Com.c	  6053        break;
; ..\component\Com\Implementation\Com.c	  6054      }
; ..\component\Com\Implementation\Com.c	  6055  # endif
; ..\component\Com\Implementation\Com.c	  6056  # if (COM_EXISTS_NEVER_FILTERALGOOFFILTERINFO_FLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  6057      case COM_NEVER_FILTERALGOOFFILTERINFO_FLOAT32:
; ..\component\Com\Implementation\Com.c	  6058      {
; ..\component\Com\Implementation\Com.c	  6059        filterState = FALSE;
; ..\component\Com\Implementation\Com.c	  6060        break;
; ..\component\Com\Implementation\Com.c	  6061      }
; ..\component\Com\Implementation\Com.c	  6062  # endif
; ..\component\Com\Implementation\Com.c	  6063      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  6064        break;
; ..\component\Com\Implementation\Com.c	  6065    }
; ..\component\Com\Implementation\Com.c	  6066  
; ..\component\Com\Implementation\Com.c	  6067    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6068    COM_DUMMY_STATEMENT(newValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6069    COM_DUMMY_STATEMENT(oldValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6070    COM_DUMMY_STATEMENT(timeOutOccurred); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6071  
; ..\component\Com\Implementation\Com.c	  6072    return filterState;
; ..\component\Com\Implementation\Com.c	  6073  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  6074  #endif
; ..\component\Com\Implementation\Com.c	  6075  #if (COM_FILTERINFO_FLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  6076  /* jet: ComSignalEvaluateFilter snippet */
; ..\component\Com\Implementation\Com.c	  6077  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6078    Com_Signal_Float64_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  6079  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6080  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6081   *
; ..\component\Com\Implementation\Com.c	  6082   *
; ..\component\Com\Implementation\Com.c	  6083  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6084  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_Float64_EvaluateFilter(Com_FilterInfo_Float64IterType idxFilterInfo, float64 newValue, float64 oldValue, boolean timeOutOccurred)       /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	  6085  {
; ..\component\Com\Implementation\Com.c	  6086    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  6087  
; ..\component\Com\Implementation\Com.c	  6088    switch (Com_GetFilterAlgoOfFilterInfo_Float64(idxFilterInfo))
; ..\component\Com\Implementation\Com.c	  6089    {
; ..\component\Com\Implementation\Com.c	  6090  # if (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_FLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  6091      case COM_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_FLOAT64:
; ..\component\Com\Implementation\Com.c	  6092      {
; ..\component\Com\Implementation\Com.c	  6093  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6094        if(timeOutOccurred == FALSE)      /* COV_COM_MASKED_NEW_DIFFERS_MASKED_OLD_TX */ /* \trace SPEC-2736780 */
; ..\component\Com\Implementation\Com.c	  6095  #  endif
; ..\component\Com\Implementation\Com.c	  6096        {
; ..\component\Com\Implementation\Com.c	  6097          if(!Com_CompareFloat64Values(newValue, oldValue))
; ..\component\Com\Implementation\Com.c	  6098          {
; ..\component\Com\Implementation\Com.c	  6099            filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  6100          }
; ..\component\Com\Implementation\Com.c	  6101        }
; ..\component\Com\Implementation\Com.c	  6102  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6103        else
; ..\component\Com\Implementation\Com.c	  6104        {
; ..\component\Com\Implementation\Com.c	  6105          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  6106        }
; ..\component\Com\Implementation\Com.c	  6107  #  endif
; ..\component\Com\Implementation\Com.c	  6108        break;
; ..\component\Com\Implementation\Com.c	  6109      }
; ..\component\Com\Implementation\Com.c	  6110  # endif
; ..\component\Com\Implementation\Com.c	  6111  # if (COM_EXISTS_NEVER_FILTERALGOOFFILTERINFO_FLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  6112      case COM_NEVER_FILTERALGOOFFILTERINFO_FLOAT64:
; ..\component\Com\Implementation\Com.c	  6113      {
; ..\component\Com\Implementation\Com.c	  6114        filterState = FALSE;
; ..\component\Com\Implementation\Com.c	  6115        break;
; ..\component\Com\Implementation\Com.c	  6116      }
; ..\component\Com\Implementation\Com.c	  6117  # endif
; ..\component\Com\Implementation\Com.c	  6118      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  6119        break;
; ..\component\Com\Implementation\Com.c	  6120    }
; ..\component\Com\Implementation\Com.c	  6121  
; ..\component\Com\Implementation\Com.c	  6122    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6123    COM_DUMMY_STATEMENT(newValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6124    COM_DUMMY_STATEMENT(oldValue);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6125    COM_DUMMY_STATEMENT(timeOutOccurred); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6126  
; ..\component\Com\Implementation\Com.c	  6127    return filterState;
; ..\component\Com\Implementation\Com.c	  6128  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  6129  #endif
; ..\component\Com\Implementation\Com.c	  6130  #if (COM_FILTERINFO_UINT8_N == STD_ON)
; ..\component\Com\Implementation\Com.c	  6131  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6132    Com_Signal_UIn8_N_NewIsWithIn
; ..\component\Com\Implementation\Com.c	  6133  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6134  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6135   *
; ..\component\Com\Implementation\Com.c	  6136   *
; ..\component\Com\Implementation\Com.c	  6137  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6138  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Signal_UInt8_N_EvaluateFilter(Com_FilterInfo_UInt8_NIterType idxFilterInfo, P2CONST(uint8, AUTOMATIC, AUTOMATIC) newValuePtr, P2CONST(uint8, AUTOMATIC, AUTOMATIC) oldValuePtr, PduLengthType length, boolean timeOutOccurred) /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	  6139  {
; ..\component\Com\Implementation\Com.c	  6140    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  6141  
; ..\component\Com\Implementation\Com.c	  6142    switch (Com_GetFilterAlgoOfFilterInfo_UInt8_N(idxFilterInfo))
; ..\component\Com\Implementation\Com.c	  6143    {
; ..\component\Com\Implementation\Com.c	  6144        /* Currently FILTERINFO_UINT8_N only exists when TriggeredOnChange or MASKED_NEW_DIFFERS_MASKED_OLD */
; ..\component\Com\Implementation\Com.c	  6145  # if (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_UINT8_N == STD_ON)        /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	  6146      case COM_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_UINT8_N:
; ..\component\Com\Implementation\Com.c	  6147      {
; ..\component\Com\Implementation\Com.c	  6148  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6149        if(timeOutOccurred == FALSE)
; ..\component\Com\Implementation\Com.c	  6150  #  endif
; ..\component\Com\Implementation\Com.c	  6151        {
; ..\component\Com\Implementation\Com.c	  6152          PduLengthType i = 0;
; ..\component\Com\Implementation\Com.c	  6153          filterState = FALSE;
; ..\component\Com\Implementation\Com.c	  6154          for(; i < length; i++)
; ..\component\Com\Implementation\Com.c	  6155          {
; ..\component\Com\Implementation\Com.c	  6156            if(((P2CONST(uint8, AUTOMATIC, AUTOMATIC)) newValuePtr)[i] != (((P2CONST(uint8, AUTOMATIC, AUTOMATIC)) oldValuePtr)[i]))      /* PRQA S 2822 */ /* MD_Com_oldValuePtrNoNULLPTR */
; ..\component\Com\Implementation\Com.c	  6157            {
; ..\component\Com\Implementation\Com.c	  6158              filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  6159              break;
; ..\component\Com\Implementation\Com.c	  6160            }
; ..\component\Com\Implementation\Com.c	  6161          }
; ..\component\Com\Implementation\Com.c	  6162        }
; ..\component\Com\Implementation\Com.c	  6163  #  if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6164        else
; ..\component\Com\Implementation\Com.c	  6165        {
; ..\component\Com\Implementation\Com.c	  6166          filterState = TRUE;
; ..\component\Com\Implementation\Com.c	  6167        }
; ..\component\Com\Implementation\Com.c	  6168  #  endif
; ..\component\Com\Implementation\Com.c	  6169        break;
; ..\component\Com\Implementation\Com.c	  6170      }
; ..\component\Com\Implementation\Com.c	  6171  # endif
; ..\component\Com\Implementation\Com.c	  6172      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  6173        break;
; ..\component\Com\Implementation\Com.c	  6174    }
; ..\component\Com\Implementation\Com.c	  6175  
; ..\component\Com\Implementation\Com.c	  6176    COM_DUMMY_STATEMENT(timeOutOccurred); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6177    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6178  
; ..\component\Com\Implementation\Com.c	  6179    return filterState;
; ..\component\Com\Implementation\Com.c	  6180  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  6181  #endif
; ..\component\Com\Implementation\Com.c	  6182  
; ..\component\Com\Implementation\Com.c	  6183  
; ..\component\Com\Implementation\Com.c	  6184  #if ((COM_FILTERINFOUSEDOFTXSIGINFO == STD_ON) || (COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6185  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6186    Com_TxSignal_EvaluateFilter
; ..\component\Com\Implementation\Com.c	  6187  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6188  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6189   *
; ..\component\Com\Implementation\Com.c	  6190   *
; ..\component\Com\Implementation\Com.c	  6191  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6192  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_TxSignal_EvaluateFilter(Com_SignalIdType idxTxSigInfo, uint32 idxFilterInfo, P2CONST(void, AUTOMATIC, AUTOMATIC) newValuePtr)
; ..\component\Com\Implementation\Com.c	  6193  {
; ..\component\Com\Implementation\Com.c	  6194    /* #10 Apply the filter state using the filter algorithm of the passed FilterInfo */
; ..\component\Com\Implementation\Com.c	  6195    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  6196    switch (Com_GetApplTypeOfTxSigInfo(idxTxSigInfo))
; ..\component\Com\Implementation\Com.c	  6197    {
; ..\component\Com\Implementation\Com.c	  6198  /* jet: ComSignalEvaluateFilterCase snippet */
; ..\component\Com\Implementation\Com.c	  6199  # if ((COM_FILTERINFO_UINT8 == STD_ON) &&(COM_EXISTS_UINT8_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6200      case (COM_UINT8_APPLTYPEOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6201      {
; ..\component\Com\Implementation\Com.c	  6202        uint8 oldValue = 0;
; ..\component\Com\Implementation\Com.c	  6203  #  if (COM_FILTERINITVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6204        if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  6205        {
; ..\component\Com\Implementation\Com.c	  6206          P2CONST(uint8, AUTOMATIC, AUTOMATIC) oldValuePtr = Com_GetOldValuePtr(idxTxSigInfo);    /* PRQA S 0317 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6207          oldValue = *oldValuePtr;
; ..\component\Com\Implementation\Com.c	  6208        }
; ..\component\Com\Implementation\Com.c	  6209  #  endif
; ..\component\Com\Implementation\Com.c	  6210        filterState = Com_Signal_UInt8_EvaluateFilter((Com_FilterInfo_UInt8IterType) idxFilterInfo, *((P2CONST(uint8, AUTOMATIC, AUTOMATIC)) newValuePtr), oldValue, FALSE);      /* PRQA S 0316 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6211        break;
; ..\component\Com\Implementation\Com.c	  6212      }
; ..\component\Com\Implementation\Com.c	  6213  # endif
; ..\component\Com\Implementation\Com.c	  6214  
; ..\component\Com\Implementation\Com.c	  6215  /* jet: ComSignalEvaluateFilterCase snippet */
; ..\component\Com\Implementation\Com.c	  6216  # if ((COM_FILTERINFO_SINT8 == STD_ON) &&(COM_EXISTS_SINT8_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6217      case (COM_SINT8_APPLTYPEOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6218      {
; ..\component\Com\Implementation\Com.c	  6219        sint8 oldValue = 0;
; ..\component\Com\Implementation\Com.c	  6220  #  if (COM_FILTERINITVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6221        if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  6222        {
; ..\component\Com\Implementation\Com.c	  6223          P2CONST(sint8, AUTOMATIC, AUTOMATIC) oldValuePtr = Com_GetOldValuePtr(idxTxSigInfo);    /* PRQA S 0317 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6224          oldValue = *oldValuePtr;
; ..\component\Com\Implementation\Com.c	  6225        }
; ..\component\Com\Implementation\Com.c	  6226  #  endif
; ..\component\Com\Implementation\Com.c	  6227        filterState = Com_Signal_SInt8_EvaluateFilter((Com_FilterInfo_SInt8IterType) idxFilterInfo, *((P2CONST(sint8, AUTOMATIC, AUTOMATIC)) newValuePtr), oldValue, FALSE);      /* PRQA S 0316 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6228        break;
; ..\component\Com\Implementation\Com.c	  6229      }
; ..\component\Com\Implementation\Com.c	  6230  # endif
; ..\component\Com\Implementation\Com.c	  6231  
; ..\component\Com\Implementation\Com.c	  6232  /* jet: ComSignalEvaluateFilterCase snippet */
; ..\component\Com\Implementation\Com.c	  6233  # if ((COM_FILTERINFO_UINT16 == STD_ON) &&(COM_EXISTS_UINT16_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6234      case (COM_UINT16_APPLTYPEOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6235      {
; ..\component\Com\Implementation\Com.c	  6236        uint16 oldValue = 0;
; ..\component\Com\Implementation\Com.c	  6237  #  if (COM_FILTERINITVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6238        if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  6239        {
; ..\component\Com\Implementation\Com.c	  6240          P2CONST(uint16, AUTOMATIC, AUTOMATIC) oldValuePtr = Com_GetOldValuePtr(idxTxSigInfo);   /* PRQA S 0317 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6241          oldValue = *oldValuePtr;
; ..\component\Com\Implementation\Com.c	  6242        }
; ..\component\Com\Implementation\Com.c	  6243  #  endif
; ..\component\Com\Implementation\Com.c	  6244        filterState = Com_Signal_UInt16_EvaluateFilter((Com_FilterInfo_UInt16IterType) idxFilterInfo, *((P2CONST(uint16, AUTOMATIC, AUTOMATIC)) newValuePtr), oldValue, FALSE);   /* PRQA S 0316 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6245        break;
; ..\component\Com\Implementation\Com.c	  6246      }
; ..\component\Com\Implementation\Com.c	  6247  # endif
; ..\component\Com\Implementation\Com.c	  6248  
; ..\component\Com\Implementation\Com.c	  6249  /* jet: ComSignalEvaluateFilterCase snippet */
; ..\component\Com\Implementation\Com.c	  6250  # if ((COM_FILTERINFO_SINT16 == STD_ON) &&(COM_EXISTS_SINT16_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6251      case (COM_SINT16_APPLTYPEOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6252      {
; ..\component\Com\Implementation\Com.c	  6253        sint16 oldValue = 0;
; ..\component\Com\Implementation\Com.c	  6254  #  if (COM_FILTERINITVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6255        if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  6256        {
; ..\component\Com\Implementation\Com.c	  6257          P2CONST(sint16, AUTOMATIC, AUTOMATIC) oldValuePtr = Com_GetOldValuePtr(idxTxSigInfo);   /* PRQA S 0317 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6258          oldValue = *oldValuePtr;
; ..\component\Com\Implementation\Com.c	  6259        }
; ..\component\Com\Implementation\Com.c	  6260  #  endif
; ..\component\Com\Implementation\Com.c	  6261        filterState = Com_Signal_SInt16_EvaluateFilter((Com_FilterInfo_SInt16IterType) idxFilterInfo, *((P2CONST(sint16, AUTOMATIC, AUTOMATIC)) newValuePtr), oldValue, FALSE);   /* PRQA S 0316 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6262        break;
; ..\component\Com\Implementation\Com.c	  6263      }
; ..\component\Com\Implementation\Com.c	  6264  # endif
; ..\component\Com\Implementation\Com.c	  6265  
; ..\component\Com\Implementation\Com.c	  6266  /* jet: ComSignalEvaluateFilterCase snippet */
; ..\component\Com\Implementation\Com.c	  6267  # if ((COM_FILTERINFO_UINT32 == STD_ON) &&(COM_EXISTS_UINT32_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6268      case (COM_UINT32_APPLTYPEOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6269      {
; ..\component\Com\Implementation\Com.c	  6270        uint32 oldValue = 0;
; ..\component\Com\Implementation\Com.c	  6271  #  if (COM_FILTERINITVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6272        if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  6273        {
; ..\component\Com\Implementation\Com.c	  6274          P2CONST(uint32, AUTOMATIC, AUTOMATIC) oldValuePtr = Com_GetOldValuePtr(idxTxSigInfo);   /* PRQA S 0317 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6275          oldValue = *oldValuePtr;
; ..\component\Com\Implementation\Com.c	  6276        }
; ..\component\Com\Implementation\Com.c	  6277  #  endif
; ..\component\Com\Implementation\Com.c	  6278        filterState = Com_Signal_UInt32_EvaluateFilter((Com_FilterInfo_UInt32IterType) idxFilterInfo, *((P2CONST(uint32, AUTOMATIC, AUTOMATIC)) newValuePtr), oldValue, FALSE);   /* PRQA S 0316 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6279        break;
; ..\component\Com\Implementation\Com.c	  6280      }
; ..\component\Com\Implementation\Com.c	  6281  # endif
; ..\component\Com\Implementation\Com.c	  6282  
; ..\component\Com\Implementation\Com.c	  6283  /* jet: ComSignalEvaluateFilterCase snippet */
; ..\component\Com\Implementation\Com.c	  6284  # if ((COM_FILTERINFO_SINT32 == STD_ON) &&(COM_EXISTS_SINT32_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6285      case (COM_SINT32_APPLTYPEOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6286      {
; ..\component\Com\Implementation\Com.c	  6287        sint32 oldValue = 0;
; ..\component\Com\Implementation\Com.c	  6288  #  if (COM_FILTERINITVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6289        if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  6290        {
; ..\component\Com\Implementation\Com.c	  6291          P2CONST(sint32, AUTOMATIC, AUTOMATIC) oldValuePtr = Com_GetOldValuePtr(idxTxSigInfo);   /* PRQA S 0317 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6292          oldValue = *oldValuePtr;
; ..\component\Com\Implementation\Com.c	  6293        }
; ..\component\Com\Implementation\Com.c	  6294  #  endif
; ..\component\Com\Implementation\Com.c	  6295        filterState = Com_Signal_SInt32_EvaluateFilter((Com_FilterInfo_SInt32IterType) idxFilterInfo, *((P2CONST(sint32, AUTOMATIC, AUTOMATIC)) newValuePtr), oldValue, FALSE);   /* PRQA S 0316 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6296        break;
; ..\component\Com\Implementation\Com.c	  6297      }
; ..\component\Com\Implementation\Com.c	  6298  # endif
; ..\component\Com\Implementation\Com.c	  6299  
; ..\component\Com\Implementation\Com.c	  6300  /* jet: ComSignalEvaluateFilterCase snippet */
; ..\component\Com\Implementation\Com.c	  6301  # if ((COM_FILTERINFO_UINT64 == STD_ON) &&(COM_EXISTS_UINT64_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6302      case (COM_UINT64_APPLTYPEOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6303      {
; ..\component\Com\Implementation\Com.c	  6304        uint64 oldValue = 0;
; ..\component\Com\Implementation\Com.c	  6305  #  if (COM_FILTERINITVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6306        if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  6307        {
; ..\component\Com\Implementation\Com.c	  6308          P2CONST(uint64, AUTOMATIC, AUTOMATIC) oldValuePtr = Com_GetOldValuePtr(idxTxSigInfo);   /* PRQA S 0317 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6309          oldValue = *oldValuePtr;
; ..\component\Com\Implementation\Com.c	  6310        }
; ..\component\Com\Implementation\Com.c	  6311  #  endif
; ..\component\Com\Implementation\Com.c	  6312        filterState = Com_Signal_UInt64_EvaluateFilter((Com_FilterInfo_UInt64IterType) idxFilterInfo, *((P2CONST(uint64, AUTOMATIC, AUTOMATIC)) newValuePtr), oldValue, FALSE);   /* PRQA S 0316 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6313        break;
; ..\component\Com\Implementation\Com.c	  6314      }
; ..\component\Com\Implementation\Com.c	  6315  # endif
; ..\component\Com\Implementation\Com.c	  6316  
; ..\component\Com\Implementation\Com.c	  6317  /* jet: ComSignalEvaluateFilterCase snippet */
; ..\component\Com\Implementation\Com.c	  6318  # if ((COM_FILTERINFO_SINT64 == STD_ON) &&(COM_EXISTS_SINT64_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6319      case (COM_SINT64_APPLTYPEOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6320      {
; ..\component\Com\Implementation\Com.c	  6321        sint64 oldValue = 0;
; ..\component\Com\Implementation\Com.c	  6322  #  if (COM_FILTERINITVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6323        if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  6324        {
; ..\component\Com\Implementation\Com.c	  6325          P2CONST(sint64, AUTOMATIC, AUTOMATIC) oldValuePtr = Com_GetOldValuePtr(idxTxSigInfo);   /* PRQA S 0317 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6326          oldValue = *oldValuePtr;
; ..\component\Com\Implementation\Com.c	  6327        }
; ..\component\Com\Implementation\Com.c	  6328  #  endif
; ..\component\Com\Implementation\Com.c	  6329        filterState = Com_Signal_SInt64_EvaluateFilter((Com_FilterInfo_SInt64IterType) idxFilterInfo, *((P2CONST(sint64, AUTOMATIC, AUTOMATIC)) newValuePtr), oldValue, FALSE);   /* PRQA S 0316 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6330        break;
; ..\component\Com\Implementation\Com.c	  6331      }
; ..\component\Com\Implementation\Com.c	  6332  # endif
; ..\component\Com\Implementation\Com.c	  6333  
; ..\component\Com\Implementation\Com.c	  6334  /* jet: ComSignalEvaluateFilterCase snippet */
; ..\component\Com\Implementation\Com.c	  6335  # if ((COM_FILTERINFO_FLOAT32 == STD_ON) &&(COM_EXISTS_FLOAT32_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6336      case (COM_FLOAT32_APPLTYPEOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6337      {
; ..\component\Com\Implementation\Com.c	  6338        float32 oldValue = 0.0f;
; ..\component\Com\Implementation\Com.c	  6339        if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  6340        {
; ..\component\Com\Implementation\Com.c	  6341          P2CONST(float32, AUTOMATIC, AUTOMATIC) oldValuePtr = Com_GetOldValuePtr(idxTxSigInfo);  /* PRQA S 0317 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6342          oldValue = *oldValuePtr;
; ..\component\Com\Implementation\Com.c	  6343        }
; ..\component\Com\Implementation\Com.c	  6344        filterState = Com_Signal_Float32_EvaluateFilter((Com_FilterInfo_Float32IterType) idxFilterInfo, *((P2CONST(float32, AUTOMATIC, AUTOMATIC)) newValuePtr), oldValue, FALSE);        /* PRQA S 0316 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6345        break;
; ..\component\Com\Implementation\Com.c	  6346      }
; ..\component\Com\Implementation\Com.c	  6347  # endif
; ..\component\Com\Implementation\Com.c	  6348  
; ..\component\Com\Implementation\Com.c	  6349  /* jet: ComSignalEvaluateFilterCase snippet */
; ..\component\Com\Implementation\Com.c	  6350  # if ((COM_FILTERINFO_FLOAT64 == STD_ON) &&(COM_EXISTS_FLOAT64_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6351      case (COM_FLOAT64_APPLTYPEOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6352      {
; ..\component\Com\Implementation\Com.c	  6353        float64 oldValue = 0.0;
; ..\component\Com\Implementation\Com.c	  6354        if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  6355        {
; ..\component\Com\Implementation\Com.c	  6356          P2CONST(float64, AUTOMATIC, AUTOMATIC) oldValuePtr = Com_GetOldValuePtr(idxTxSigInfo);  /* PRQA S 0317 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6357          oldValue = *oldValuePtr;
; ..\component\Com\Implementation\Com.c	  6358        }
; ..\component\Com\Implementation\Com.c	  6359        filterState = Com_Signal_Float64_EvaluateFilter((Com_FilterInfo_Float64IterType) idxFilterInfo, *((P2CONST(float64, AUTOMATIC, AUTOMATIC)) newValuePtr), oldValue, FALSE);        /* PRQA S 0316 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6360        break;
; ..\component\Com\Implementation\Com.c	  6361      }
; ..\component\Com\Implementation\Com.c	  6362  # endif
; ..\component\Com\Implementation\Com.c	  6363  
; ..\component\Com\Implementation\Com.c	  6364  # if ((COM_FILTERINFO_UINT8_N == STD_ON) && (COM_EXISTS_UINT8_N_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6365      case (COM_UINT8_N_APPLTYPEOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6366      {
; ..\component\Com\Implementation\Com.c	  6367        P2CONST(uint8, AUTOMATIC, AUTOMATIC) oldValuePtr = NULL_PTR;
; ..\component\Com\Implementation\Com.c	  6368        /* Currently FILTERINFO_UINT8_N only exists when TriggeredOnChange or MASKED_NEW_DIFFERS_MASKED_OLD */
; ..\component\Com\Implementation\Com.c	  6369  #  if (COM_TXFILTERINITVALUEARRAYBASEDFILTERINITVALUEUSEDOFTXSIGINFO == STD_ON) /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	  6370        if(Com_IsTxFilterInitValueArrayBasedFilterInitValueUsedOfTxSigInfo(idxTxSigInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  6371        {
; ..\component\Com\Implementation\Com.c	  6372          oldValuePtr = Com_GetOldValuePtr(idxTxSigInfo); /* PRQA S 0317 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	  6373        }
; ..\component\Com\Implementation\Com.c	  6374  #  endif
; ..\component\Com\Implementation\Com.c	  6375        filterState = Com_Signal_UInt8_N_EvaluateFilter((Com_FilterInfo_UInt8_NIterType) idxFilterInfo, ((P2CONST(uint8, AUTOMATIC, AUTOMATIC)) newValuePtr), oldValuePtr, (PduLengthType) Com_GetByteLengthOfTxSigInfo(idxTxSigInfo), FALSE);    /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_COMST_PTR */
; ..\component\Com\Implementation\Com.c	  6376        break;
; ..\component\Com\Implementation\Com.c	  6377      }
; ..\component\Com\Implementation\Com.c	  6378  # endif
; ..\component\Com\Implementation\Com.c	  6379      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  6380        break;
; ..\component\Com\Implementation\Com.c	  6381    }
; ..\component\Com\Implementation\Com.c	  6382  
; ..\component\Com\Implementation\Com.c	  6383    COM_DUMMY_STATEMENT(idxFilterInfo);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6384    COM_DUMMY_STATEMENT(newValuePtr);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6385    COM_DUMMY_STATEMENT(idxTxSigInfo);    /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6386  
; ..\component\Com\Implementation\Com.c	  6387    return filterState;
; ..\component\Com\Implementation\Com.c	  6388  }       /* PRQA S 6030, 6050 */ /* MD_MSR_STCYC, MD_MSR_STCAL */
; ..\component\Com\Implementation\Com.c	  6389  #endif
; ..\component\Com\Implementation\Com.c	  6390  
; ..\component\Com\Implementation\Com.c	  6391  #if (COM_TXBUFFERUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6392  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6393    Com_Signal_WriteSignal
; ..\component\Com\Implementation\Com.c	  6394  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6395  /*!
; ..\component\Com\Implementation\Com.c	  6396   * Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6397   *
; ..\component\Com\Implementation\Com.c	  6398   *
; ..\component\Com\Implementation\Com.c	  6399   *
; ..\component\Com\Implementation\Com.c	  6400   *
; ..\component\Com\Implementation\Com.c	  6401   *
; ..\component\Com\Implementation\Com.c	  6402   *
; ..\component\Com\Implementation\Com.c	  6403   *
; ..\component\Com\Implementation\Com.c	  6404   *
; ..\component\Com\Implementation\Com.c	  6405   *
; ..\component\Com\Implementation\Com.c	  6406   *
; ..\component\Com\Implementation\Com.c	  6407   *
; ..\component\Com\Implementation\Com.c	  6408   *
; ..\component\Com\Implementation\Com.c	  6409   *
; ..\component\Com\Implementation\Com.c	  6410   *
; ..\component\Com\Implementation\Com.c	  6411   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6412  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_WriteSignal(Com_SignalIdType SignalId, P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) SignalApplSourcePtr)
; ..\component\Com\Implementation\Com.c	  6413  {
; ..\component\Com\Implementation\Com.c	  6414    P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) SignalApplSourcePtrInternal = SignalApplSourcePtr;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  6415  # if ((COM_EXISTS_NBIT_BUSACCOFTXSIGINFO == STD_ON) || (COM_EXISTS_NBITNBYTE_BUSACCOFTXSIGINFO == STD_ON) || (COM_EXISTS_NBITNBYTE_SW_BUSACCOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6416    Com_BitPositionOfTxSigInfoType signalStartBit = Com_Signal_BitOffsetFromBitPos(Com_GetBitPositionOfTxSigInfo(SignalId));
; ..\component\Com\Implementation\Com.c	  6417  # endif
; ..\component\Com\Implementation\Com.c	  6418  
; ..\component\Com\Implementation\Com.c	  6419  # if (CPU_BYTE_ORDER == HIGH_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  6420    /* #10 Set the source pointer to the least significant byte, if the CPU byte order is HIGH_BYTE_FIRST */
; ..\component\Com\Implementation\Com.c	  6421    SignalApplSourcePtrInternal = Com_Signal_getLSBSignalApplSourcePtr(SignalId, SignalApplSourcePtrInternal);    /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	  6422  # endif
; ..\component\Com\Implementation\Com.c	  6423  
; ..\component\Com\Implementation\Com.c	  6424    /* #20 If the bus access is type is */
; ..\component\Com\Implementation\Com.c	  6425    switch (Com_GetBusAccOfTxSigInfo(SignalId))
; ..\component\Com\Implementation\Com.c	  6426    {
; ..\component\Com\Implementation\Com.c	  6427  # if (COM_EXISTS_NBIT_BUSACCOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6428      case (COM_NBIT_BUSACCOFTXSIGINFO): /* COV_COM_N_BIT_X */
; ..\component\Com\Implementation\Com.c	  6429      {
; ..\component\Com\Implementation\Com.c	  6430        /* #30 NBIT: copy the specific bits from the source pointer to the destination pointer */
; ..\component\Com\Implementation\Com.c	  6431        uint8 signalBusDest = Com_GetTxBuffer(Com_GetTxBufferStartIdxOfTxSigInfo(SignalId));
; ..\component\Com\Implementation\Com.c	  6432  
; ..\component\Com\Implementation\Com.c	  6433        uint8 mask = COM_CAST2UINT8((COM_CAST2UINT8(~(COM_CAST2UINT8(255u << Com_GetBitLengthOfTxSigInfo(SignalId))))) << signalStartBit);
; ..\component\Com\Implementation\Com.c	  6434        signalBusDest &= COM_CAST2UINT8(~mask);
; ..\component\Com\Implementation\Com.c	  6435        signalBusDest |= COM_CAST2UINT8(*SignalApplSourcePtrInternal << signalStartBit) & mask;
; ..\component\Com\Implementation\Com.c	  6436  
; ..\component\Com\Implementation\Com.c	  6437        Com_SetTxBuffer(Com_GetTxBufferStartIdxOfTxSigInfo(SignalId), signalBusDest);     /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  6438        break;
; ..\component\Com\Implementation\Com.c	  6439      }
; ..\component\Com\Implementation\Com.c	  6440  # endif
; ..\component\Com\Implementation\Com.c	  6441  # if (COM_EXISTS_BYTE_BUSACCOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6442      case (COM_BYTE_BUSACCOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6443      {
; ..\component\Com\Implementation\Com.c	  6444        /* #40 BYTE: Set the source pointer to the destination pointer */
; ..\component\Com\Implementation\Com.c	  6445        Com_SetTxBuffer(Com_GetTxBufferStartIdxOfTxSigInfo(SignalId), *SignalApplSourcePtrInternal);      /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  6446        break;
; ..\component\Com\Implementation\Com.c	  6447      }
; ..\component\Com\Implementation\Com.c	  6448  # endif
; ..\component\Com\Implementation\Com.c	  6449  # if (CPU_BYTE_ORDER == LOW_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  6450  #  if ((COM_EXISTS_NBYTE_BUSACCOFTXSIGINFO == STD_ON) || (COM_EXISTS_ARRAY_BASED_BUSACCOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6451  #   if (COM_EXISTS_ARRAY_BASED_BUSACCOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6452      case (COM_ARRAY_BASED_BUSACCOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6453  #   endif
; ..\component\Com\Implementation\Com.c	  6454  #   if (COM_EXISTS_NBYTE_BUSACCOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6455      case (COM_NBYTE_BUSACCOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6456  #   endif
; ..\component\Com\Implementation\Com.c	  6457      {
; ..\component\Com\Implementation\Com.c	  6458        Com_TxBufferEndIdxOfTxSigInfoType i;
; ..\component\Com\Implementation\Com.c	  6459        /* Pointer points to LSB of little endian signal, therefore start index is used */
; ..\component\Com\Implementation\Com.c	  6460        P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusDestPtr = Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxSigInfo(SignalId));
; ..\component\Com\Implementation\Com.c	  6461        /* #50 (NBYTE or ARRAY_BASED) and CPU byte order is LOW_BYTE_FIRST: Copy N source bytes from position I to destination bytes at position I */
; ..\component\Com\Implementation\Com.c	  6462        /* Use-case: UINT8_N or UINT8_DYN */
; ..\component\Com\Implementation\Com.c	  6463      /* *INDENT-OFF* */
; ..\component\Com\Implementation\Com.c	  6464      /* ------------------------------- Intel (appl) to Intel (bus) AND Byte Arrays (Intel Hw) -------------------------
; ..\component\Com\Implementation\Com.c	  6465         - Writing Intel Signals on Intel Hw.
; ..\component\Com\Implementation\Com.c	  6466         - Writing Byte Arrays (no swap):
; ..\component\Com\Implementation\Com.c	  6467         - Writing Intel Byte Arrays */
; ..\component\Com\Implementation\Com.c	  6468      /* *INDENT-ON* */
; ..\component\Com\Implementation\Com.c	  6469        for(i = 0; i < Com_Signal_GetTxBufferLength(SignalId); i++)
; ..\component\Com\Implementation\Com.c	  6470        {
; ..\component\Com\Implementation\Com.c	  6471          SignalBusDestPtr[i] = SignalApplSourcePtrInternal[i];   /* SBSW_COM_TXBUFFER_CSL03 */
; ..\component\Com\Implementation\Com.c	  6472        }
; ..\component\Com\Implementation\Com.c	  6473        break;
; ..\component\Com\Implementation\Com.c	  6474      }
; ..\component\Com\Implementation\Com.c	  6475  #  endif
; ..\component\Com\Implementation\Com.c	  6476  #  if (COM_EXISTS_NBYTE_SW_BUSACCOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6477      case (COM_NBYTE_SW_BUSACCOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6478      {
; ..\component\Com\Implementation\Com.c	  6479      /*------------------------------- Intel (appl) to Motorola (bus)------------------------------------------------*/
; ..\component\Com\Implementation\Com.c	  6480        /* Pointer points to LSB of big endian signal, therefore end index is used */
; ..\component\Com\Implementation\Com.c	  6481        P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusDestPtr = Com_GetAddrTxBuffer(Com_GetTxBufferEndIdxOfTxSigInfo(SignalId) - 1u);
; ..\component\Com\Implementation\Com.c	  6482        /* #60 NBYTE_SW and CPU byte order is LOW_BYTE_FIRST: Copy N source bytes from position I to destination bytes at position -I */
; ..\component\Com\Implementation\Com.c	  6483        sint16_least i;
; ..\component\Com\Implementation\Com.c	  6484        /* ------------------------------- Intel (appl) to Motorola (bus) ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	  6485        for(i = 0; i < ((sint16_least) Com_Signal_GetTxBufferLength(SignalId)); i++)
; ..\component\Com\Implementation\Com.c	  6486        {
; ..\component\Com\Implementation\Com.c	  6487          SignalBusDestPtr[-i] = SignalApplSourcePtrInternal[i];  /* SBSW_COM_TXBUFFER_CSL03 */
; ..\component\Com\Implementation\Com.c	  6488        }
; ..\component\Com\Implementation\Com.c	  6489        break;
; ..\component\Com\Implementation\Com.c	  6490      }
; ..\component\Com\Implementation\Com.c	  6491  #  endif
; ..\component\Com\Implementation\Com.c	  6492  #  if (COM_EXISTS_NBITNBYTE_BUSACCOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6493      case (COM_NBITNBYTE_BUSACCOFTXSIGINFO):    /* COV_COM_NBITNBYTE_X */
; ..\component\Com\Implementation\Com.c	  6494      {
; ..\component\Com\Implementation\Com.c	  6495        /* #70 NBITNBYTE and CPU byte order is LOW_BYTE_FIRST: Copy N bits and N bytes from the source pointer to the destination pointer */
; ..\component\Com\Implementation\Com.c	  6496        /* Pointer points to LSB of little endian signal, therefore start index is used */
; ..\component\Com\Implementation\Com.c	  6497        P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusDestPtr = Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxSigInfo(SignalId));
; ..\component\Com\Implementation\Com.c	  6498        Com_Signal_WriteSignal_NBITNBYTE(SignalId, SignalApplSourcePtrInternal, signalStartBit, SignalBusDestPtr, FALSE); /* SBSW_COM_VALID_PTR_BY_COMSTACK_01 */
; ..\component\Com\Implementation\Com.c	  6499        break;
; ..\component\Com\Implementation\Com.c	  6500      }
; ..\component\Com\Implementation\Com.c	  6501  #  endif
; ..\component\Com\Implementation\Com.c	  6502  #  if (COM_EXISTS_NBITNBYTE_SW_BUSACCOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6503      case (COM_NBITNBYTE_SW_BUSACCOFTXSIGINFO): /* COV_COM_NBITNBYTE_SW_BUSACCOFTXSIGINFO */
; ..\component\Com\Implementation\Com.c	  6504      {
; ..\component\Com\Implementation\Com.c	  6505        /* #80 NBITNBYTE_SW and CPU byte order is LOW_BYTE_FIRST: Copy N bits and N bytes from the source pointer to the destination pointer and perform endianness conversion */
; ..\component\Com\Implementation\Com.c	  6506        /* Pointer points to LSB of big endian signal, therefore end index is used */
; ..\component\Com\Implementation\Com.c	  6507        P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusDestPtr = Com_GetAddrTxBuffer(Com_GetTxBufferEndIdxOfTxSigInfo(SignalId) - 1u);
; ..\component\Com\Implementation\Com.c	  6508        Com_Signal_WriteSignal_NBITNBYTE(SignalId, SignalApplSourcePtrInternal, signalStartBit, SignalBusDestPtr, TRUE);  /* SBSW_COM_VALID_PTR_BY_COMSTACK_01 */
; ..\component\Com\Implementation\Com.c	  6509        break;
; ..\component\Com\Implementation\Com.c	  6510      }
; ..\component\Com\Implementation\Com.c	  6511  #  endif
; ..\component\Com\Implementation\Com.c	  6512  # else /* (CPU_BYTE_ORDER == HIGH_BYTE_FIRST) */
; ..\component\Com\Implementation\Com.c	  6513  #  if ((COM_EXISTS_NBYTE_BUSACCOFTXSIGINFO == STD_ON) || (COM_EXISTS_ARRAY_BASED_BUSACCOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6514  #   if (COM_EXISTS_ARRAY_BASED_BUSACCOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6515      case (COM_ARRAY_BASED_BUSACCOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6516      {
; ..\component\Com\Implementation\Com.c	  6517        /* #90 ARRAY_BASED and CPU byte order is HIGH_BYTE_FIRST: Set the source pointer to the last byte, and copy in reverse order */
; ..\component\Com\Implementation\Com.c	  6518        /* Use-case: UINT8_N or UINT8_DYN */
; ..\component\Com\Implementation\Com.c	  6519        SignalApplSourcePtrInternal = &SignalApplSourcePtrInternal[Com_Signal_GetTxBufferLength(SignalId) - 1u];
; ..\component\Com\Implementation\Com.c	  6520        /* No break required here! */
; ..\component\Com\Implementation\Com.c	  6521      }
; ..\component\Com\Implementation\Com.c	  6522  #   endif
; ..\component\Com\Implementation\Com.c	  6523  #   if (COM_EXISTS_NBYTE_BUSACCOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6524      case (COM_NBYTE_BUSACCOFTXSIGINFO):        /* PRQA S 2003 */ /* MD_Com_2003 */
; ..\component\Com\Implementation\Com.c	  6525  #   endif
; ..\component\Com\Implementation\Com.c	  6526      {
; ..\component\Com\Implementation\Com.c	  6527        /* #100 NBYTE and CPU byte order is HIGH_BYTE_FIRST, copy in reverse order */
; ..\component\Com\Implementation\Com.c	  6528        sint16_least i;
; ..\component\Com\Implementation\Com.c	  6529        /* Pointer points to LSB of big endian signal, pointer points to last byte of actual txBuffer. */
; ..\component\Com\Implementation\Com.c	  6530        P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusDestPtr = Com_GetAddrTxBuffer((Com_GetTxBufferStartIdxOfTxSigInfo(SignalId) + Com_Signal_GetTxBufferLength(SignalId)) - 1u);
; ..\component\Com\Implementation\Com.c	  6531      /* *INDENT-OFF* */
; ..\component\Com\Implementation\Com.c	  6532      /* ---------------------- Motorola (appl) to Motorola (bus) AND Byte Arrays (Motorola Hw)--------------------------
; ..\component\Com\Implementation\Com.c	  6533         - Writing Motorola Signals on Motorola Hw.
; ..\component\Com\Implementation\Com.c	  6534         - Writing Byte Arrays (no swap):
; ..\component\Com\Implementation\Com.c	  6535         - Writing Motorola Byte Arrays
; ..\component\Com\Implementation\Com.c	  6536         - Also allows writing of Intel Byte Arrays (StartBit is not lsb -> is msb in this case) */
; ..\component\Com\Implementation\Com.c	  6537      /* *INDENT-ON* */
; ..\component\Com\Implementation\Com.c	  6538  
; ..\component\Com\Implementation\Com.c	  6539        for(i = 0; i < ((sint16_least) Com_Signal_GetTxBufferLength(SignalId)); i++)
; ..\component\Com\Implementation\Com.c	  6540        {
; ..\component\Com\Implementation\Com.c	  6541          SignalBusDestPtr[-i] = SignalApplSourcePtrInternal[-i]; /* SBSW_COM_TXBUFFER_CSL03 */
; ..\component\Com\Implementation\Com.c	  6542        }
; ..\component\Com\Implementation\Com.c	  6543        break;
; ..\component\Com\Implementation\Com.c	  6544      }
; ..\component\Com\Implementation\Com.c	  6545  #  endif
; ..\component\Com\Implementation\Com.c	  6546  #  if (COM_EXISTS_NBYTE_SW_BUSACCOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6547      case (COM_NBYTE_SW_BUSACCOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6548      {
; ..\component\Com\Implementation\Com.c	  6549        /* ------------------------------- Motorola (appl) to Intel (bus)------------------------------------------------ */
; ..\component\Com\Implementation\Com.c	  6550        /* #130 NBYTE_SW and CPU byte order is HIGH_BYTE_FIRST: Copy source -I to destination I */
; ..\component\Com\Implementation\Com.c	  6551        sint16_least i;
; ..\component\Com\Implementation\Com.c	  6552        P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusDestPtr = Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxSigInfo(SignalId));
; ..\component\Com\Implementation\Com.c	  6553        /* ------------------------------- Motorola (appl) to Intel (bus) ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	  6554        for(i = 0; i < ((sint16_least) Com_Signal_GetTxBufferLength(SignalId)); i++)
; ..\component\Com\Implementation\Com.c	  6555        {
; ..\component\Com\Implementation\Com.c	  6556          SignalBusDestPtr[i] = SignalApplSourcePtrInternal[-i];  /* SBSW_COM_TXBUFFER_CSL03 */
; ..\component\Com\Implementation\Com.c	  6557        }
; ..\component\Com\Implementation\Com.c	  6558        break;
; ..\component\Com\Implementation\Com.c	  6559      }
; ..\component\Com\Implementation\Com.c	  6560  #  endif
; ..\component\Com\Implementation\Com.c	  6561  #  if (COM_EXISTS_NBITNBYTE_BUSACCOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6562      case (COM_NBITNBYTE_BUSACCOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6563      {
; ..\component\Com\Implementation\Com.c	  6564        /* #140 NBITNBYTE and CPU byte order is HIGH_BYTE_FIRST: Copy N bits and N bytes from the source pointer to the destination pointer */
; ..\component\Com\Implementation\Com.c	  6565        P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusDestPtr = Com_GetAddrTxBuffer(Com_GetTxBufferEndIdxOfTxSigInfo(SignalId) - 1u);
; ..\component\Com\Implementation\Com.c	  6566        Com_Signal_WriteSignal_NBITNBYTE(SignalId, SignalApplSourcePtrInternal, signalStartBit, SignalBusDestPtr, TRUE);  /* SBSW_COM_VALID_PTR_BY_COMSTACK_01 */
; ..\component\Com\Implementation\Com.c	  6567        break;
; ..\component\Com\Implementation\Com.c	  6568      }
; ..\component\Com\Implementation\Com.c	  6569  #  endif
; ..\component\Com\Implementation\Com.c	  6570  #  if (COM_EXISTS_NBITNBYTE_SW_BUSACCOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6571      case (COM_NBITNBYTE_SW_BUSACCOFTXSIGINFO):
; ..\component\Com\Implementation\Com.c	  6572      {
; ..\component\Com\Implementation\Com.c	  6573        /* #150 NBITNBYTE_SW and CPU byte order is HIGH_BYTE_FIRST: Copy N bits and N bytes from the source pointer to the destination pointer and perform endianness conversion */
; ..\component\Com\Implementation\Com.c	  6574        P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusDestPtr = Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxSigInfo(SignalId));
; ..\component\Com\Implementation\Com.c	  6575        Com_Signal_WriteSignal_NBITNBYTE(SignalId, SignalApplSourcePtrInternal, signalStartBit, SignalBusDestPtr, FALSE); /* SBSW_COM_VALID_PTR_BY_COMSTACK_01 */
; ..\component\Com\Implementation\Com.c	  6576  
; ..\component\Com\Implementation\Com.c	  6577        break;
; ..\component\Com\Implementation\Com.c	  6578      }
; ..\component\Com\Implementation\Com.c	  6579  #  endif
; ..\component\Com\Implementation\Com.c	  6580  # endif
; ..\component\Com\Implementation\Com.c	  6581      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  6582        break;
; ..\component\Com\Implementation\Com.c	  6583    }
; ..\component\Com\Implementation\Com.c	  6584  }
; ..\component\Com\Implementation\Com.c	  6585  #endif
; ..\component\Com\Implementation\Com.c	  6586  
; ..\component\Com\Implementation\Com.c	  6587  #if (COM_RXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6588  # if ((COM_EXISTS_UINT8_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6589  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6590    Com_Signal_ReadSignal_UInt8
; ..\component\Com\Implementation\Com.c	  6591  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6592  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6593   *
; ..\component\Com\Implementation\Com.c	  6594   *
; ..\component\Com\Implementation\Com.c	  6595   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6596  LOCAL_INLINE FUNC(uint8, COM_CODE) Com_Signal_ReadSignal_UInt8(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr)
; ..\component\Com\Implementation\Com.c	  6597  {
; ..\component\Com\Implementation\Com.c	  6598    uint8 tmpNewValue = 0;
; ..\component\Com\Implementation\Com.c	  6599    Com_Signal_ReadSignalApplTypeSpecific(idxRxAccessInfo, &tmpNewValue, SignalBusSourcePtr, 1);  /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	  6600    return tmpNewValue;
; ..\component\Com\Implementation\Com.c	  6601  }
; ..\component\Com\Implementation\Com.c	  6602  # endif
; ..\component\Com\Implementation\Com.c	  6603  
; ..\component\Com\Implementation\Com.c	  6604  # if ((COM_EXISTS_SINT8_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6605  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6606    Com_Signal_ReadSignal_SInt8
; ..\component\Com\Implementation\Com.c	  6607  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6608  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6609   *
; ..\component\Com\Implementation\Com.c	  6610   *
; ..\component\Com\Implementation\Com.c	  6611   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6612  LOCAL_INLINE FUNC(sint8, COM_CODE) Com_Signal_ReadSignal_SInt8(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr)
; ..\component\Com\Implementation\Com.c	  6613  {
; ..\component\Com\Implementation\Com.c	  6614    uSignExt8BitType tmpNewValue; /* PRQA S 0759 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	  6615    tmpNewValue.signedAccess = 0;
; ..\component\Com\Implementation\Com.c	  6616    Com_Signal_ReadSignalApplTypeSpecific(idxRxAccessInfo, &(tmpNewValue.unsignedAccess), SignalBusSourcePtr, 1); /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	  6617  
; ..\component\Com\Implementation\Com.c	  6618  #  if (COM_SIGNEXTREQUIREDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6619    if(Com_IsSignExtRequiredOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	  6620    {
; ..\component\Com\Implementation\Com.c	  6621      Com_Signal_ReadSignalSignExtension_SINT8(idxRxAccessInfo, &tmpNewValue);    /* SBSW_COM_FCTCALL_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6622    }
; ..\component\Com\Implementation\Com.c	  6623  #  endif
; ..\component\Com\Implementation\Com.c	  6624  
; ..\component\Com\Implementation\Com.c	  6625    return tmpNewValue.signedAccess;
; ..\component\Com\Implementation\Com.c	  6626  }
; ..\component\Com\Implementation\Com.c	  6627  # endif
; ..\component\Com\Implementation\Com.c	  6628  
; ..\component\Com\Implementation\Com.c	  6629  # if ((COM_EXISTS_UINT16_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6630  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6631    Com_Signal_ReadSignal_UInt16
; ..\component\Com\Implementation\Com.c	  6632  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6633  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6634   *
; ..\component\Com\Implementation\Com.c	  6635   *
; ..\component\Com\Implementation\Com.c	  6636   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6637  LOCAL_INLINE FUNC(uint16, COM_CODE) Com_Signal_ReadSignal_UInt16(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr)
; ..\component\Com\Implementation\Com.c	  6638  {
; ..\component\Com\Implementation\Com.c	  6639    uint16 tmpNewValue = 0;
; ..\component\Com\Implementation\Com.c	  6640    uint8 *startBytePtr = &((P2VAR(uint8, AUTOMATIC, COM_APPL_VAR)) & tmpNewValue)[0];
; ..\component\Com\Implementation\Com.c	  6641    Com_Signal_ReadSignalApplTypeSpecific(idxRxAccessInfo, startBytePtr, SignalBusSourcePtr, 2);  /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6642  
; ..\component\Com\Implementation\Com.c	  6643    return tmpNewValue;
; ..\component\Com\Implementation\Com.c	  6644  }
; ..\component\Com\Implementation\Com.c	  6645  # endif
; ..\component\Com\Implementation\Com.c	  6646  
; ..\component\Com\Implementation\Com.c	  6647  # if ((COM_EXISTS_SINT16_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6648  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6649    Com_Signal_ReadSignal_SInt16
; ..\component\Com\Implementation\Com.c	  6650  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6651  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6652   *
; ..\component\Com\Implementation\Com.c	  6653   *
; ..\component\Com\Implementation\Com.c	  6654   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6655  LOCAL_INLINE FUNC(sint16, COM_CODE) Com_Signal_ReadSignal_SInt16(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr)
; ..\component\Com\Implementation\Com.c	  6656  {
; ..\component\Com\Implementation\Com.c	  6657    uSignExt16BitType tmpNewValue;        /* PRQA S 0759 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	  6658    tmpNewValue.signedAccess = 0;
; ..\component\Com\Implementation\Com.c	  6659    Com_Signal_ReadSignalApplTypeSpecific(idxRxAccessInfo, &(tmpNewValue.unsignedAccess[0]), SignalBusSourcePtr, 2);      /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6660  
; ..\component\Com\Implementation\Com.c	  6661  #  if (COM_SIGNEXTREQUIREDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6662    if(Com_IsSignExtRequiredOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	  6663    {
; ..\component\Com\Implementation\Com.c	  6664      Com_Signal_ReadSignalSignExtension_SINT16(idxRxAccessInfo, &tmpNewValue);   /* SBSW_COM_FCTCALL_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6665    }
; ..\component\Com\Implementation\Com.c	  6666  #  endif
; ..\component\Com\Implementation\Com.c	  6667  
; ..\component\Com\Implementation\Com.c	  6668    return tmpNewValue.signedAccess;
; ..\component\Com\Implementation\Com.c	  6669  }
; ..\component\Com\Implementation\Com.c	  6670  # endif
; ..\component\Com\Implementation\Com.c	  6671  
; ..\component\Com\Implementation\Com.c	  6672  # if ((COM_EXISTS_UINT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6673  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6674    Com_Signal_ReadSignal_UInt32
; ..\component\Com\Implementation\Com.c	  6675  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6676  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6677   *
; ..\component\Com\Implementation\Com.c	  6678   *
; ..\component\Com\Implementation\Com.c	  6679   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6680  LOCAL_INLINE FUNC(uint32, COM_CODE) Com_Signal_ReadSignal_UInt32(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr)
; ..\component\Com\Implementation\Com.c	  6681  {
; ..\component\Com\Implementation\Com.c	  6682    uint32 tmpNewValue = 0;
; ..\component\Com\Implementation\Com.c	  6683    uint8 *startBytePtr = &((P2VAR(uint8, AUTOMATIC, COM_APPL_VAR)) & tmpNewValue)[0];
; ..\component\Com\Implementation\Com.c	  6684    Com_Signal_ReadSignalApplTypeSpecific(idxRxAccessInfo, startBytePtr, SignalBusSourcePtr, 4);  /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6685  
; ..\component\Com\Implementation\Com.c	  6686    return tmpNewValue;
; ..\component\Com\Implementation\Com.c	  6687  }
; ..\component\Com\Implementation\Com.c	  6688  # endif
; ..\component\Com\Implementation\Com.c	  6689  
; ..\component\Com\Implementation\Com.c	  6690  # if ((COM_EXISTS_SINT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6691  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6692    Com_Signal_ReadSignal_SInt32
; ..\component\Com\Implementation\Com.c	  6693  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6694  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6695   *
; ..\component\Com\Implementation\Com.c	  6696   *
; ..\component\Com\Implementation\Com.c	  6697   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6698  LOCAL_INLINE FUNC(sint32, COM_CODE) Com_Signal_ReadSignal_SInt32(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr)
; ..\component\Com\Implementation\Com.c	  6699  {
; ..\component\Com\Implementation\Com.c	  6700    uSignExt32BitType tmpNewValue;        /* PRQA S 0759 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	  6701    tmpNewValue.signedAccess = 0;
; ..\component\Com\Implementation\Com.c	  6702  
; ..\component\Com\Implementation\Com.c	  6703    Com_Signal_ReadSignalApplTypeSpecific(idxRxAccessInfo, &(tmpNewValue.unsignedAccess[0]), SignalBusSourcePtr, 4);      /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6704  
; ..\component\Com\Implementation\Com.c	  6705  #  if (COM_SIGNEXTREQUIREDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6706    if(Com_IsSignExtRequiredOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	  6707    {
; ..\component\Com\Implementation\Com.c	  6708      Com_Signal_ReadSignalSignExtension_SINT32(idxRxAccessInfo, &tmpNewValue);   /* SBSW_COM_FCTCALL_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6709    }
; ..\component\Com\Implementation\Com.c	  6710  #  endif
; ..\component\Com\Implementation\Com.c	  6711  
; ..\component\Com\Implementation\Com.c	  6712    return tmpNewValue.signedAccess;
; ..\component\Com\Implementation\Com.c	  6713  }
; ..\component\Com\Implementation\Com.c	  6714  # endif
; ..\component\Com\Implementation\Com.c	  6715  # if ((COM_EXISTS_UINT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6716  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6717    Com_Signal_ReadSignal_UInt64
; ..\component\Com\Implementation\Com.c	  6718  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6719  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6720   *
; ..\component\Com\Implementation\Com.c	  6721   *
; ..\component\Com\Implementation\Com.c	  6722   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6723  LOCAL_INLINE FUNC(uint64, COM_CODE) Com_Signal_ReadSignal_UInt64(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr)
; ..\component\Com\Implementation\Com.c	  6724  {
; ..\component\Com\Implementation\Com.c	  6725    uint64 tmpNewValue = 0;
; ..\component\Com\Implementation\Com.c	  6726    uint8 *startBytePtr = &((P2VAR(uint8, AUTOMATIC, COM_APPL_VAR)) & tmpNewValue)[0];
; ..\component\Com\Implementation\Com.c	  6727    Com_Signal_ReadSignalApplTypeSpecific(idxRxAccessInfo, startBytePtr, SignalBusSourcePtr, 8);  /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6728  
; ..\component\Com\Implementation\Com.c	  6729    return tmpNewValue;
; ..\component\Com\Implementation\Com.c	  6730  }
; ..\component\Com\Implementation\Com.c	  6731  # endif
; ..\component\Com\Implementation\Com.c	  6732  
; ..\component\Com\Implementation\Com.c	  6733  # if ((COM_EXISTS_SINT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6734  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6735    Com_Signal_ReadSignal_SInt64
; ..\component\Com\Implementation\Com.c	  6736  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6737  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6738   *
; ..\component\Com\Implementation\Com.c	  6739   *
; ..\component\Com\Implementation\Com.c	  6740   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6741  LOCAL_INLINE FUNC(sint64, COM_CODE) Com_Signal_ReadSignal_SInt64(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr)
; ..\component\Com\Implementation\Com.c	  6742  {
; ..\component\Com\Implementation\Com.c	  6743    uSignExt64BitType tmpNewValue;        /* PRQA S 0759 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	  6744    tmpNewValue.signedAccess = 0;
; ..\component\Com\Implementation\Com.c	  6745  
; ..\component\Com\Implementation\Com.c	  6746    Com_Signal_ReadSignalApplTypeSpecific(idxRxAccessInfo, &(tmpNewValue.unsignedAccess[0]), SignalBusSourcePtr, 8);      /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6747  
; ..\component\Com\Implementation\Com.c	  6748  #  if (COM_SIGNEXTREQUIREDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6749    if(Com_IsSignExtRequiredOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	  6750    {
; ..\component\Com\Implementation\Com.c	  6751      Com_Signal_ReadSignalSignExtension_SINT64(idxRxAccessInfo, &tmpNewValue);   /* SBSW_COM_FCTCALL_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6752    }
; ..\component\Com\Implementation\Com.c	  6753  #  endif
; ..\component\Com\Implementation\Com.c	  6754  
; ..\component\Com\Implementation\Com.c	  6755    return tmpNewValue.signedAccess;
; ..\component\Com\Implementation\Com.c	  6756  }
; ..\component\Com\Implementation\Com.c	  6757  # endif
; ..\component\Com\Implementation\Com.c	  6758  
; ..\component\Com\Implementation\Com.c	  6759  # if ((COM_EXISTS_FLOAT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6760  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6761    Com_Signal_ReadSignal_Float32
; ..\component\Com\Implementation\Com.c	  6762  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6763  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6764   *
; ..\component\Com\Implementation\Com.c	  6765   *
; ..\component\Com\Implementation\Com.c	  6766   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6767  LOCAL_INLINE FUNC(float32, COM_CODE) Com_Signal_ReadSignal_Float32(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr)
; ..\component\Com\Implementation\Com.c	  6768  {
; ..\component\Com\Implementation\Com.c	  6769    float32 tmpNewValue = 0.0f;
; ..\component\Com\Implementation\Com.c	  6770    uint8 *startBytePtr = &((P2VAR(uint8, AUTOMATIC, COM_APPL_VAR)) & tmpNewValue)[0];
; ..\component\Com\Implementation\Com.c	  6771    Com_Signal_ReadSignalApplTypeSpecific(idxRxAccessInfo, startBytePtr, SignalBusSourcePtr, 4);  /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6772  
; ..\component\Com\Implementation\Com.c	  6773    return tmpNewValue;
; ..\component\Com\Implementation\Com.c	  6774  }
; ..\component\Com\Implementation\Com.c	  6775  # endif
; ..\component\Com\Implementation\Com.c	  6776  
; ..\component\Com\Implementation\Com.c	  6777  # if ((COM_EXISTS_FLOAT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6778  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6779    Com_Signal_ReadSignal_Float64
; ..\component\Com\Implementation\Com.c	  6780  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6781  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6782   *
; ..\component\Com\Implementation\Com.c	  6783   *
; ..\component\Com\Implementation\Com.c	  6784   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6785  LOCAL_INLINE FUNC(float64, COM_CODE) Com_Signal_ReadSignal_Float64(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr)
; ..\component\Com\Implementation\Com.c	  6786  {
; ..\component\Com\Implementation\Com.c	  6787    float64 tmpNewValue = 0.0;
; ..\component\Com\Implementation\Com.c	  6788    uint8 *startBytePtr = &((P2VAR(uint8, AUTOMATIC, COM_APPL_VAR)) & tmpNewValue)[0];
; ..\component\Com\Implementation\Com.c	  6789    Com_Signal_ReadSignalApplTypeSpecific(idxRxAccessInfo, startBytePtr, SignalBusSourcePtr, 8);  /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6790  
; ..\component\Com\Implementation\Com.c	  6791    return tmpNewValue;
; ..\component\Com\Implementation\Com.c	  6792  }
; ..\component\Com\Implementation\Com.c	  6793  # endif
; ..\component\Com\Implementation\Com.c	  6794  
; ..\component\Com\Implementation\Com.c	  6795  # if (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6796  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6797    Com_Signal_ReadSignalApplTypeSpecific
; ..\component\Com\Implementation\Com.c	  6798  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6799  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6800   *
; ..\component\Com\Implementation\Com.c	  6801   *
; ..\component\Com\Implementation\Com.c	  6802   *
; ..\component\Com\Implementation\Com.c	  6803   *
; ..\component\Com\Implementation\Com.c	  6804   *
; ..\component\Com\Implementation\Com.c	  6805   *
; ..\component\Com\Implementation\Com.c	  6806   *
; ..\component\Com\Implementation\Com.c	  6807   *
; ..\component\Com\Implementation\Com.c	  6808   *
; ..\component\Com\Implementation\Com.c	  6809   *
; ..\component\Com\Implementation\Com.c	  6810   *
; ..\component\Com\Implementation\Com.c	  6811   *
; ..\component\Com\Implementation\Com.c	  6812   *
; ..\component\Com\Implementation\Com.c	  6813   *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6814  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignalApplTypeSpecific(Com_RxAccessInfoIterType rxAccessInfoId,
; ..\component\Com\Implementation\Com.c	  6815                                                                          P2VAR(uint8, AUTOMATIC, COM_APPL_VAR) SignalApplDestPtr,
; ..\component\Com\Implementation\Com.c	  6816                                                                          P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr, uint32 destLength)
; ..\component\Com\Implementation\Com.c	  6817  {
; ..\component\Com\Implementation\Com.c	  6818    P2VAR(uint8, AUTOMATIC, COM_APPL_VAR) SignalApplDestPtrIntern = SignalApplDestPtr;
; ..\component\Com\Implementation\Com.c	  6819  #  if ((COM_EXISTS_NBIT_BUSACCOFRXACCESSINFO == STD_ON) || (COM_EXISTS_NBITNBYTE_BUSACCOFRXACCESSINFO == STD_ON) || (COM_EXISTS_NBITNBYTE_SW_BUSACCOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6820    Com_BitPositionOfRxAccessInfoType signalStartBit = Com_Signal_BitOffsetFromBitPos(Com_GetBitPositionOfRxAccessInfo(rxAccessInfoId));
; ..\component\Com\Implementation\Com.c	  6821  #  endif
; ..\component\Com\Implementation\Com.c	  6822  #  if (CPU_BYTE_ORDER == HIGH_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  6823    SignalApplDestPtrIntern = &SignalApplDestPtrIntern[destLength - 1u];
; ..\component\Com\Implementation\Com.c	  6824  #  endif
; ..\component\Com\Implementation\Com.c	  6825    switch (Com_GetBusAccOfRxAccessInfo(rxAccessInfoId))
; ..\component\Com\Implementation\Com.c	  6826    {
; ..\component\Com\Implementation\Com.c	  6827  #  if (COM_EXISTS_NBIT_BUSACCOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6828      case (COM_NBIT_BUSACCOFRXACCESSINFO):
; ..\component\Com\Implementation\Com.c	  6829      {
; ..\component\Com\Implementation\Com.c	  6830        *SignalApplDestPtrIntern = COM_CAST2UINT8((*SignalBusSourcePtr) >> signalStartBit) & COM_CAST2UINT8(255u >> (8u - Com_GetBitLengthOfRxAccessInfo(rxAccessInfoId)));       /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  6831        break;
; ..\component\Com\Implementation\Com.c	  6832      }
; ..\component\Com\Implementation\Com.c	  6833  #  endif
; ..\component\Com\Implementation\Com.c	  6834  #  if (COM_EXISTS_BYTE_BUSACCOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6835      case (COM_BYTE_BUSACCOFRXACCESSINFO):
; ..\component\Com\Implementation\Com.c	  6836      {
; ..\component\Com\Implementation\Com.c	  6837        *SignalApplDestPtrIntern = COM_CAST2UINT8(*SignalBusSourcePtr);   /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  6838        break;
; ..\component\Com\Implementation\Com.c	  6839      }
; ..\component\Com\Implementation\Com.c	  6840  #  endif
; ..\component\Com\Implementation\Com.c	  6841  #  if (CPU_BYTE_ORDER == LOW_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  6842  #   if (COM_EXISTS_NBYTE_BUSACCOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6843      case (COM_NBYTE_BUSACCOFRXACCESSINFO):
; ..\component\Com\Implementation\Com.c	  6844      {
; ..\component\Com\Implementation\Com.c	  6845        VStdLib_MemCpy_s(SignalApplDestPtrIntern, (VStdLib_CntType) destLength, SignalBusSourcePtr, (VStdLib_CntType) Com_GetByteLengthOfRxAccessInfo(rxAccessInfoId));   /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_VSTDLIB_SAFE */
; ..\component\Com\Implementation\Com.c	  6846        break;
; ..\component\Com\Implementation\Com.c	  6847      }
; ..\component\Com\Implementation\Com.c	  6848  #   endif
; ..\component\Com\Implementation\Com.c	  6849  #   if (COM_EXISTS_NBYTE_SW_BUSACCOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6850      case (COM_NBYTE_SW_BUSACCOFRXACCESSINFO):
; ..\component\Com\Implementation\Com.c	  6851      {
; ..\component\Com\Implementation\Com.c	  6852        if(Com_GetByteLengthOfRxAccessInfo(rxAccessInfoId) <= destLength) /* COV_COM_SILENT_TX */
; ..\component\Com\Implementation\Com.c	  6853        {
; ..\component\Com\Implementation\Com.c	  6854          sint16_least i;
; ..\component\Com\Implementation\Com.c	  6855          /* ------------------------------- Motorola (bus) to Intel (appl) -------------------------------------------- */
; ..\component\Com\Implementation\Com.c	  6856          for(i = (((sint16_least) Com_GetByteLengthOfRxAccessInfo(rxAccessInfoId)) - 1); i >= 0; i--)
; ..\component\Com\Implementation\Com.c	  6857          {
; ..\component\Com\Implementation\Com.c	  6858            SignalApplDestPtrIntern[i] = COM_CAST2UINT8(SignalBusSourcePtr[-i]);  /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  6859          }
; ..\component\Com\Implementation\Com.c	  6860        }
; ..\component\Com\Implementation\Com.c	  6861        break;
; ..\component\Com\Implementation\Com.c	  6862      }
; ..\component\Com\Implementation\Com.c	  6863  #   endif
; ..\component\Com\Implementation\Com.c	  6864  #   if (COM_EXISTS_NBITNBYTE_BUSACCOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6865      case (COM_NBITNBYTE_BUSACCOFRXACCESSINFO):
; ..\component\Com\Implementation\Com.c	  6866      {
; ..\component\Com\Implementation\Com.c	  6867        Com_Signal_ReadSignal_LB_NBITNBYTE(rxAccessInfoId, SignalApplDestPtrIntern, SignalBusSourcePtr, signalStartBit, destLength);      /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6868        break;
; ..\component\Com\Implementation\Com.c	  6869      }
; ..\component\Com\Implementation\Com.c	  6870  #   endif
; ..\component\Com\Implementation\Com.c	  6871  #   if (COM_EXISTS_NBITNBYTE_SW_BUSACCOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6872      case (COM_NBITNBYTE_SW_BUSACCOFRXACCESSINFO):
; ..\component\Com\Implementation\Com.c	  6873      {
; ..\component\Com\Implementation\Com.c	  6874        Com_Signal_ReadSignal_LB_SW_NBITNBYTE(rxAccessInfoId, SignalApplDestPtrIntern, SignalBusSourcePtr, signalStartBit, destLength);   /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6875        break;
; ..\component\Com\Implementation\Com.c	  6876      }
; ..\component\Com\Implementation\Com.c	  6877  #   endif
; ..\component\Com\Implementation\Com.c	  6878  #  else/* (CPU_BYTE_ORDER == HIGH_BYTE_FIRST) */
; ..\component\Com\Implementation\Com.c	  6879  #   if (COM_EXISTS_NBYTE_BUSACCOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6880      case (COM_NBYTE_BUSACCOFRXACCESSINFO):
; ..\component\Com\Implementation\Com.c	  6881      {
; ..\component\Com\Implementation\Com.c	  6882        if(Com_GetByteLengthOfRxAccessInfo(rxAccessInfoId) <= destLength) /* COV_COM_SILENT_TX */
; ..\component\Com\Implementation\Com.c	  6883        {
; ..\component\Com\Implementation\Com.c	  6884          sint16_least i;
; ..\component\Com\Implementation\Com.c	  6885          /* ------------------------------- Motorola (bus) to Motorola (appl) -------------------------------------------- */
; ..\component\Com\Implementation\Com.c	  6886          for(i = (((sint16_least) Com_GetByteLengthOfRxAccessInfo(rxAccessInfoId)) - 1); i >= 0; i--)
; ..\component\Com\Implementation\Com.c	  6887          {
; ..\component\Com\Implementation\Com.c	  6888            SignalApplDestPtrIntern[-i] = SignalBusSourcePtr[-i]; /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  6889          }
; ..\component\Com\Implementation\Com.c	  6890        }
; ..\component\Com\Implementation\Com.c	  6891        break;
; ..\component\Com\Implementation\Com.c	  6892      }
; ..\component\Com\Implementation\Com.c	  6893  #   endif
; ..\component\Com\Implementation\Com.c	  6894  #   if (COM_EXISTS_NBYTE_SW_BUSACCOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6895      case (COM_NBYTE_SW_BUSACCOFRXACCESSINFO):
; ..\component\Com\Implementation\Com.c	  6896      {
; ..\component\Com\Implementation\Com.c	  6897        if(Com_GetByteLengthOfRxAccessInfo(rxAccessInfoId) <= destLength) /* COV_COM_SILENT_TX */
; ..\component\Com\Implementation\Com.c	  6898        {
; ..\component\Com\Implementation\Com.c	  6899          sint16_least i;
; ..\component\Com\Implementation\Com.c	  6900          /* ------------------------------- Intel(bus) to Motorola (appl) -------------------------------------------- */
; ..\component\Com\Implementation\Com.c	  6901          for(i = (((sint16_least) Com_GetByteLengthOfRxAccessInfo(rxAccessInfoId)) - 1); i >= 0; i--)
; ..\component\Com\Implementation\Com.c	  6902          {
; ..\component\Com\Implementation\Com.c	  6903            SignalApplDestPtrIntern[-i] = SignalBusSourcePtr[i];  /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  6904          }
; ..\component\Com\Implementation\Com.c	  6905        }
; ..\component\Com\Implementation\Com.c	  6906        break;
; ..\component\Com\Implementation\Com.c	  6907      }
; ..\component\Com\Implementation\Com.c	  6908  #   endif
; ..\component\Com\Implementation\Com.c	  6909  #   if (COM_EXISTS_NBITNBYTE_BUSACCOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6910      case (COM_NBITNBYTE_BUSACCOFRXACCESSINFO):
; ..\component\Com\Implementation\Com.c	  6911      {
; ..\component\Com\Implementation\Com.c	  6912        Com_Signal_ReadSignal_HB_NBITNBYTE(rxAccessInfoId, SignalApplDestPtrIntern, SignalBusSourcePtr, signalStartBit, destLength);      /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6913        break;
; ..\component\Com\Implementation\Com.c	  6914      }
; ..\component\Com\Implementation\Com.c	  6915  #   endif
; ..\component\Com\Implementation\Com.c	  6916  #   if (COM_EXISTS_NBITNBYTE_SW_BUSACCOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  6917      case (COM_NBITNBYTE_SW_BUSACCOFRXACCESSINFO):
; ..\component\Com\Implementation\Com.c	  6918      {
; ..\component\Com\Implementation\Com.c	  6919        Com_Signal_ReadSignal_HB_SW_NBITNBYTE(rxAccessInfoId, SignalApplDestPtrIntern, SignalBusSourcePtr, signalStartBit, destLength);   /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR */
; ..\component\Com\Implementation\Com.c	  6920        break;
; ..\component\Com\Implementation\Com.c	  6921      }
; ..\component\Com\Implementation\Com.c	  6922  #   endif
; ..\component\Com\Implementation\Com.c	  6923  #  endif
; ..\component\Com\Implementation\Com.c	  6924      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  6925        break;
; ..\component\Com\Implementation\Com.c	  6926    }
; ..\component\Com\Implementation\Com.c	  6927    COM_DUMMY_STATEMENT(destLength);      /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  6928  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  6929  # endif
; ..\component\Com\Implementation\Com.c	  6930  
; ..\component\Com\Implementation\Com.c	  6931  # if ((COM_SIGNEXTREQUIREDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT8_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6932  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6933   Com_Signal_ReadSignalSignExtension_SINT8
; ..\component\Com\Implementation\Com.c	  6934  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6935  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6936   *
; ..\component\Com\Implementation\Com.c	  6937   *
; ..\component\Com\Implementation\Com.c	  6938  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6939  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignalSignExtension_SINT8(Com_RxAccessInfoIterType idxAccessInfo, P2VAR(uSignExt8BitType, AUTOMATIC, COM_APPL_VAR) signExtValue)       /* PRQA S 0750 */ /* MD_MSR_Union */
; ..\component\Com\Implementation\Com.c	  6940  {
; ..\component\Com\Implementation\Com.c	  6941    uint8 signMask, msbMask;
; ..\component\Com\Implementation\Com.c	  6942    Com_BitLengthOfRxAccessInfoType tmp = Com_GetBitLengthOfRxAccessInfo(idxAccessInfo) - 1u;
; ..\component\Com\Implementation\Com.c	  6943    uint8 signBitPos = Com_Signal_BitOffsetFromBitPos(tmp);
; ..\component\Com\Implementation\Com.c	  6944  
; ..\component\Com\Implementation\Com.c	  6945    signMask = COM_CAST2UINT8(1u << signBitPos);
; ..\component\Com\Implementation\Com.c	  6946    msbMask = COM_CAST2UINT8(255u << signBitPos);
; ..\component\Com\Implementation\Com.c	  6947  
; ..\component\Com\Implementation\Com.c	  6948    /* #10 if required, perform sign extension */
; ..\component\Com\Implementation\Com.c	  6949    if(0u != (signMask & signExtValue->unsignedAccess))
; ..\component\Com\Implementation\Com.c	  6950    {     /* negative value */
; ..\component\Com\Implementation\Com.c	  6951      signExtValue->unsignedAccess |= msbMask;    /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  6952    }
; ..\component\Com\Implementation\Com.c	  6953  }
; ..\component\Com\Implementation\Com.c	  6954  # endif
; ..\component\Com\Implementation\Com.c	  6955  
; ..\component\Com\Implementation\Com.c	  6956  
; ..\component\Com\Implementation\Com.c	  6957  # if ((COM_SIGNEXTREQUIREDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT16_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  6958  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  6959   Com_Signal_ReadSignalSignExtension_SINT16
; ..\component\Com\Implementation\Com.c	  6960  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6961  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  6962   *
; ..\component\Com\Implementation\Com.c	  6963   *
; ..\component\Com\Implementation\Com.c	  6964  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  6965  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignalSignExtension_SINT16(Com_RxAccessInfoIterType idxAccessInfo, P2VAR(uSignExt16BitType, AUTOMATIC, COM_APPL_VAR) signExtValue)     /* PRQA S 0750, 3673 */ /* MD_MSR_Union, MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	  6966  {
; ..\component\Com\Implementation\Com.c	  6967    uint8 signMask, msbMask;
; ..\component\Com\Implementation\Com.c	  6968    Com_BitLengthOfRxAccessInfoType tmp = Com_GetBitLengthOfRxAccessInfo(idxAccessInfo) - 1u;
; ..\component\Com\Implementation\Com.c	  6969    Com_BitLengthOfRxAccessInfoType signMSBOffset = tmp >> 3u;
; ..\component\Com\Implementation\Com.c	  6970    uint8 signBitPos = Com_Signal_BitOffsetFromBitPos(tmp);
; ..\component\Com\Implementation\Com.c	  6971    uint8 *destPtr;
; ..\component\Com\Implementation\Com.c	  6972  #  if (CPU_BYTE_ORDER == LOW_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  6973    destPtr = &(signExtValue->unsignedAccess[0]);
; ..\component\Com\Implementation\Com.c	  6974  #  endif
; ..\component\Com\Implementation\Com.c	  6975  #  if (CPU_BYTE_ORDER == HIGH_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  6976    destPtr = &(signExtValue->unsignedAccess[1]);
; ..\component\Com\Implementation\Com.c	  6977  #  endif
; ..\component\Com\Implementation\Com.c	  6978  
; ..\component\Com\Implementation\Com.c	  6979    signMask = COM_CAST2UINT8(1u << signBitPos);
; ..\component\Com\Implementation\Com.c	  6980    msbMask = COM_CAST2UINT8(255u << signBitPos);
; ..\component\Com\Implementation\Com.c	  6981    /* #10 if required, perform sign extension */
; ..\component\Com\Implementation\Com.c	  6982  #  if (CPU_BYTE_ORDER == LOW_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  6983    /* Implementation for Intel Plattforms */
; ..\component\Com\Implementation\Com.c	  6984    if(0u != (signMask & destPtr[signMSBOffset]))
; ..\component\Com\Implementation\Com.c	  6985    {     /* negative value */
; ..\component\Com\Implementation\Com.c	  6986      if(0u == signMSBOffset)     /* COV_COM_SIGNMSBOFFSET */
; ..\component\Com\Implementation\Com.c	  6987      {   /* signal smaller or equal 8 bit */
; ..\component\Com\Implementation\Com.c	  6988        *destPtr |= msbMask;      /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  6989        destPtr[1] = 255u;        /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  6990      }
; ..\component\Com\Implementation\Com.c	  6991      else
; ..\component\Com\Implementation\Com.c	  6992      {
; ..\component\Com\Implementation\Com.c	  6993        destPtr[1] |= msbMask;    /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  6994      }
; ..\component\Com\Implementation\Com.c	  6995    }
; ..\component\Com\Implementation\Com.c	  6996  #  else  /* (CPU_BYTE_ORDER == HIGH_BYTE_FIRST) */
; ..\component\Com\Implementation\Com.c	  6997    if(0u != (signMask & destPtr[(Com_BitLengthOfRxAccessInfoType) 0u - signMSBOffset]))  /* PRQA S 2986 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  6998    {     /* negative value */
; ..\component\Com\Implementation\Com.c	  6999      destPtr[(Com_BitLengthOfRxAccessInfoType) 0u - signMSBOffset] |= msbMask;   /* PRQA S 2986 */ /* MD_Com_2985_2986 */ /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  7000      if(0u == signMSBOffset)     /* COV_COM_SIGNMSBOFFSET */
; ..\component\Com\Implementation\Com.c	  7001      {   /* signal smaller or equal 8 bit */
; ..\component\Com\Implementation\Com.c	  7002        destPtr[-1] = 255u;       /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  7003      }
; ..\component\Com\Implementation\Com.c	  7004    }
; ..\component\Com\Implementation\Com.c	  7005  #  endif
; ..\component\Com\Implementation\Com.c	  7006  }
; ..\component\Com\Implementation\Com.c	  7007  # endif
; ..\component\Com\Implementation\Com.c	  7008  
; ..\component\Com\Implementation\Com.c	  7009  # if ((COM_SIGNEXTREQUIREDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT32_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7010  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7011   Com_Signal_ReadSignalSignExtension_SINT32
; ..\component\Com\Implementation\Com.c	  7012  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7013  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7014   *
; ..\component\Com\Implementation\Com.c	  7015   *
; ..\component\Com\Implementation\Com.c	  7016  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7017  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignalSignExtension_SINT32(Com_RxAccessInfoIterType idxAccessInfo, P2VAR(uSignExt32BitType, AUTOMATIC, COM_APPL_VAR) signExtValue)     /* PRQA S 0750, 3673 */ /* MD_MSR_Union, MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	  7018  {
; ..\component\Com\Implementation\Com.c	  7019    uint8 signMask, msbMask;
; ..\component\Com\Implementation\Com.c	  7020    Com_BitLengthOfRxAccessInfoType tmp = Com_GetBitLengthOfRxAccessInfo(idxAccessInfo) - 1u;
; ..\component\Com\Implementation\Com.c	  7021    Com_BitLengthOfRxAccessInfoType signMSBOffset = tmp >> 3u;
; ..\component\Com\Implementation\Com.c	  7022    uint8 signBitPos = Com_Signal_BitOffsetFromBitPos(tmp);
; ..\component\Com\Implementation\Com.c	  7023    uint8 *destPtr;
; ..\component\Com\Implementation\Com.c	  7024  #  if (CPU_BYTE_ORDER == LOW_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  7025    destPtr = &(signExtValue->unsignedAccess[0]);
; ..\component\Com\Implementation\Com.c	  7026  #  endif
; ..\component\Com\Implementation\Com.c	  7027  #  if (CPU_BYTE_ORDER == HIGH_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  7028    destPtr = &(signExtValue->unsignedAccess[3]);
; ..\component\Com\Implementation\Com.c	  7029  #  endif
; ..\component\Com\Implementation\Com.c	  7030  
; ..\component\Com\Implementation\Com.c	  7031    signMask = COM_CAST2UINT8(1u << signBitPos);
; ..\component\Com\Implementation\Com.c	  7032    msbMask = COM_CAST2UINT8(255u << signBitPos);
; ..\component\Com\Implementation\Com.c	  7033  
; ..\component\Com\Implementation\Com.c	  7034    /* #10 if required, perform sign extension */
; ..\component\Com\Implementation\Com.c	  7035  #  if (CPU_BYTE_ORDER == LOW_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  7036    /* Implementation for Intel Plattforms */
; ..\component\Com\Implementation\Com.c	  7037    {
; ..\component\Com\Implementation\Com.c	  7038      sint16_least i;
; ..\component\Com\Implementation\Com.c	  7039      if(0u != (signMask & destPtr[signMSBOffset]))
; ..\component\Com\Implementation\Com.c	  7040      {   /* negative value */
; ..\component\Com\Implementation\Com.c	  7041        destPtr[signMSBOffset] |= msbMask;        /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  7042        for(i = (((sint16_least) signMSBOffset) + 1); i < 4; i++)
; ..\component\Com\Implementation\Com.c	  7043        {
; ..\component\Com\Implementation\Com.c	  7044          destPtr[i] = 255u;      /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  7045        }
; ..\component\Com\Implementation\Com.c	  7046      }
; ..\component\Com\Implementation\Com.c	  7047    }
; ..\component\Com\Implementation\Com.c	  7048  #  else/* (CPU_BYTE_ORDER == HIGH_BYTE_FIRST) */
; ..\component\Com\Implementation\Com.c	  7049    {
; ..\component\Com\Implementation\Com.c	  7050      sint16_least i;
; ..\component\Com\Implementation\Com.c	  7051      if(0u != (signMask & destPtr[0u - signMSBOffset]))  /* PRQA S 2986 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  7052      {   /* negative value */
; ..\component\Com\Implementation\Com.c	  7053        destPtr[0u - signMSBOffset] |= msbMask;   /* PRQA S 2986 */ /* MD_Com_2985_2986 */ /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  7054        for(i = (((sint16_least) signMSBOffset) + 1); i < 4; i++)
; ..\component\Com\Implementation\Com.c	  7055        {
; ..\component\Com\Implementation\Com.c	  7056          destPtr[-i] = 255u;     /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  7057        }
; ..\component\Com\Implementation\Com.c	  7058      }
; ..\component\Com\Implementation\Com.c	  7059    }
; ..\component\Com\Implementation\Com.c	  7060  #  endif
; ..\component\Com\Implementation\Com.c	  7061  }
; ..\component\Com\Implementation\Com.c	  7062  # endif
; ..\component\Com\Implementation\Com.c	  7063  
; ..\component\Com\Implementation\Com.c	  7064  # if ((COM_SIGNEXTREQUIREDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT64_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7065  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7066   Com_Signal_ReadSignalSignExtension_SINT64
; ..\component\Com\Implementation\Com.c	  7067  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7068  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7069   *
; ..\component\Com\Implementation\Com.c	  7070   *
; ..\component\Com\Implementation\Com.c	  7071  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7072  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignalSignExtension_SINT64(Com_RxAccessInfoIterType idxAccessInfo, P2VAR(uSignExt64BitType, AUTOMATIC, COM_APPL_VAR) signExtValue)     /* PRQA S 0750, 3673 */ /* MD_MSR_Union, MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	  7073  {
; ..\component\Com\Implementation\Com.c	  7074    uint8 signMask, msbMask;
; ..\component\Com\Implementation\Com.c	  7075    Com_BitLengthOfRxAccessInfoType tmp = Com_GetBitLengthOfRxAccessInfo(idxAccessInfo) - 1u;
; ..\component\Com\Implementation\Com.c	  7076    Com_BitLengthOfRxAccessInfoType signMSBOffset = tmp >> 3u;
; ..\component\Com\Implementation\Com.c	  7077    uint8 signBitPos = Com_Signal_BitOffsetFromBitPos(tmp);
; ..\component\Com\Implementation\Com.c	  7078    uint8 *destPtr;
; ..\component\Com\Implementation\Com.c	  7079  #  if (CPU_BYTE_ORDER == LOW_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  7080    destPtr = &(signExtValue->unsignedAccess[0]);
; ..\component\Com\Implementation\Com.c	  7081  #  endif
; ..\component\Com\Implementation\Com.c	  7082  #  if (CPU_BYTE_ORDER == HIGH_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  7083    destPtr = &(signExtValue->unsignedAccess[7]);
; ..\component\Com\Implementation\Com.c	  7084  #  endif
; ..\component\Com\Implementation\Com.c	  7085  
; ..\component\Com\Implementation\Com.c	  7086    signMask = COM_CAST2UINT8(1u << signBitPos);
; ..\component\Com\Implementation\Com.c	  7087    msbMask = COM_CAST2UINT8(255u << signBitPos);
; ..\component\Com\Implementation\Com.c	  7088  
; ..\component\Com\Implementation\Com.c	  7089    /* #10 if required, perform sign extension */
; ..\component\Com\Implementation\Com.c	  7090  #  if (CPU_BYTE_ORDER == LOW_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  7091    /* Implementation for Intel Plattforms */
; ..\component\Com\Implementation\Com.c	  7092    {
; ..\component\Com\Implementation\Com.c	  7093      sint16_least i;
; ..\component\Com\Implementation\Com.c	  7094      if(0u != (signMask & destPtr[signMSBOffset]))
; ..\component\Com\Implementation\Com.c	  7095      {   /* negative value */
; ..\component\Com\Implementation\Com.c	  7096        destPtr[signMSBOffset] |= msbMask;        /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  7097        for(i = ((sint16_least) signMSBOffset + 1); i < 8; i++)
; ..\component\Com\Implementation\Com.c	  7098        {
; ..\component\Com\Implementation\Com.c	  7099          destPtr[i] = 255u;      /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  7100        }
; ..\component\Com\Implementation\Com.c	  7101      }
; ..\component\Com\Implementation\Com.c	  7102    }
; ..\component\Com\Implementation\Com.c	  7103  #  else/* (CPU_BYTE_ORDER == HIGH_BYTE_FIRST) */
; ..\component\Com\Implementation\Com.c	  7104    {
; ..\component\Com\Implementation\Com.c	  7105      sint16_least i;
; ..\component\Com\Implementation\Com.c	  7106      if(0u != (signMask & destPtr[0u - signMSBOffset]))  /* PRQA S 2986 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  7107      {   /* negative value */
; ..\component\Com\Implementation\Com.c	  7108        destPtr[0u - signMSBOffset] |= msbMask;   /* PRQA S 2986 */ /* MD_Com_2985_2986 */ /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  7109        for(i = (((sint16_least) signMSBOffset) + 1); i < 8; i++)
; ..\component\Com\Implementation\Com.c	  7110        {
; ..\component\Com\Implementation\Com.c	  7111          destPtr[-i] = 255u;     /* SBSW_COM_WRITEACCESS_STACKPTR_01 */
; ..\component\Com\Implementation\Com.c	  7112        }
; ..\component\Com\Implementation\Com.c	  7113      }
; ..\component\Com\Implementation\Com.c	  7114    }
; ..\component\Com\Implementation\Com.c	  7115  #  endif
; ..\component\Com\Implementation\Com.c	  7116  }
; ..\component\Com\Implementation\Com.c	  7117  # endif
; ..\component\Com\Implementation\Com.c	  7118  
; ..\component\Com\Implementation\Com.c	  7119  # if (COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7120  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7121    Com_ReadGroupSignalFromShadowBuffer
; ..\component\Com\Implementation\Com.c	  7122  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7123  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7124   *
; ..\component\Com\Implementation\Com.c	  7125   *
; ..\component\Com\Implementation\Com.c	  7126  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7127  LOCAL_INLINE FUNC(void, COM_CODE) Com_ReadGroupSignalFromShadowBuffer(Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	  7128  {
; ..\component\Com\Implementation\Com.c	  7129    /* #10 Copy the shadow buffer to the ComGroupSignal buffer, the destination buffer depends on the ComGroupSignal ApplType */
; ..\component\Com\Implementation\Com.c	  7130  
; ..\component\Com\Implementation\Com.c	  7131    /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	  7132    switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	  7133    {
; ..\component\Com\Implementation\Com.c	  7134        /* Hint: Check for Uint8 appl type is needed as signalGroups with Array Access enabled are using the same buffer */
; ..\component\Com\Implementation\Com.c	  7135  #  if ((COM_TMPRXSHDBUFFERUINT8 == STD_ON) && (COM_EXISTS_UINT8_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7136      case COM_UINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7137      {
; ..\component\Com\Implementation\Com.c	  7138        Com_SetRxSigBufferUInt8(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetRxSigBufferUInt8(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)));    /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  7139        break;
; ..\component\Com\Implementation\Com.c	  7140      }
; ..\component\Com\Implementation\Com.c	  7141  #  endif
; ..\component\Com\Implementation\Com.c	  7142  #  if (COM_TMPRXSHDBUFFERSINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7143      case COM_SINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7144      {
; ..\component\Com\Implementation\Com.c	  7145        Com_SetRxSigBufferSInt8(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetRxSigBufferSInt8(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)));    /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  7146        break;
; ..\component\Com\Implementation\Com.c	  7147      }
; ..\component\Com\Implementation\Com.c	  7148  #  endif
; ..\component\Com\Implementation\Com.c	  7149  #  if (COM_TMPRXSHDBUFFERUINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7150      case COM_UINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7151      {
; ..\component\Com\Implementation\Com.c	  7152        Com_SetRxSigBufferUInt16(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetRxSigBufferUInt16(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)));  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  7153        break;
; ..\component\Com\Implementation\Com.c	  7154      }
; ..\component\Com\Implementation\Com.c	  7155  #  endif
; ..\component\Com\Implementation\Com.c	  7156  #  if (COM_TMPRXSHDBUFFERSINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7157      case COM_SINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7158      {
; ..\component\Com\Implementation\Com.c	  7159        Com_SetRxSigBufferSInt16(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetRxSigBufferSInt16(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)));  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  7160        break;
; ..\component\Com\Implementation\Com.c	  7161      }
; ..\component\Com\Implementation\Com.c	  7162  #  endif
; ..\component\Com\Implementation\Com.c	  7163  #  if (COM_TMPRXSHDBUFFERUINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7164      case COM_UINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7165      {
; ..\component\Com\Implementation\Com.c	  7166        Com_SetRxSigBufferUInt32(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetRxSigBufferUInt32(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)));  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  7167        break;
; ..\component\Com\Implementation\Com.c	  7168      }
; ..\component\Com\Implementation\Com.c	  7169  #  endif
; ..\component\Com\Implementation\Com.c	  7170  #  if (COM_TMPRXSHDBUFFERSINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7171      case COM_SINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7172      {
; ..\component\Com\Implementation\Com.c	  7173        Com_SetRxSigBufferSInt32(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetRxSigBufferSInt32(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)));  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  7174        break;
; ..\component\Com\Implementation\Com.c	  7175      }
; ..\component\Com\Implementation\Com.c	  7176  #  endif
; ..\component\Com\Implementation\Com.c	  7177  #  if (COM_TMPRXSHDBUFFERUINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7178      case COM_UINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7179      {
; ..\component\Com\Implementation\Com.c	  7180        Com_SetRxSigBufferUInt64(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetRxSigBufferUInt64(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)));  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  7181        break;
; ..\component\Com\Implementation\Com.c	  7182      }
; ..\component\Com\Implementation\Com.c	  7183  #  endif
; ..\component\Com\Implementation\Com.c	  7184  #  if (COM_TMPRXSHDBUFFERSINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7185      case COM_SINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7186      {
; ..\component\Com\Implementation\Com.c	  7187        Com_SetRxSigBufferSInt64(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetRxSigBufferSInt64(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)));  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  7188        break;
; ..\component\Com\Implementation\Com.c	  7189      }
; ..\component\Com\Implementation\Com.c	  7190  #  endif
; ..\component\Com\Implementation\Com.c	  7191  #  if (COM_TMPRXSHDBUFFERFLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7192      case COM_FLOAT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7193      {
; ..\component\Com\Implementation\Com.c	  7194        Com_SetRxSigBufferFloat32(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetRxSigBufferFloat32(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)));        /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  7195        break;
; ..\component\Com\Implementation\Com.c	  7196      }
; ..\component\Com\Implementation\Com.c	  7197  #  endif
; ..\component\Com\Implementation\Com.c	  7198  #  if (COM_TMPRXSHDBUFFERFLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7199      case COM_FLOAT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7200      {
; ..\component\Com\Implementation\Com.c	  7201        Com_SetRxSigBufferFloat64(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetRxSigBufferFloat64(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)));        /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  7202        break;
; ..\component\Com\Implementation\Com.c	  7203      }
; ..\component\Com\Implementation\Com.c	  7204  #  endif
; ..\component\Com\Implementation\Com.c	  7205  #  if (COM_TMPRXSHDBUFFERARRAYBASED == STD_ON)
; ..\component\Com\Implementation\Com.c	  7206  #   if (COM_EXISTS_UINT8_N_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7207      case COM_UINT8_N_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7208      {
; ..\component\Com\Implementation\Com.c	  7209        VStdMemCpyRamToRam(Com_GetAddrRxSigBufferArrayBased(Com_GetRxSigBufferArrayBasedBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), Com_GetAddrRxSigBufferArrayBased(Com_GetRxSigBufferArrayBasedShdBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), Com_GetRxSigBufferArrayBasedBufferLengthOfRxAccessInfo(idxRxAccessInfo)); /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  7210        break;
; ..\component\Com\Implementation\Com.c	  7211      }
; ..\component\Com\Implementation\Com.c	  7212  #   endif
; ..\component\Com\Implementation\Com.c	  7213  #   if (COM_RXDYNSIGNALTMPLENGTHFORSIGNALGROUPS == STD_ON)
; ..\component\Com\Implementation\Com.c	  7214      case COM_UINT8_DYN_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7215      {
; ..\component\Com\Implementation\Com.c	  7216        PduLengthType dynLength;
; ..\component\Com\Implementation\Com.c	  7217        Com_RxTpInfoIdxOfRxPduInfoType rxTpPduInfoIdx = Com_GetRxTpInfoIdxOfRxPduInfo(Com_GetRxPduInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	  7218        dynLength = Com_GetRxDynSignalTmpLengthForSignalGroups(rxTpPduInfoIdx);
; ..\component\Com\Implementation\Com.c	  7219        if(dynLength <= Com_GetRxSigBufferArrayBasedBufferLengthOfRxAccessInfo(idxRxAccessInfo))  /* COV_COM_SILENT_TX */
; ..\component\Com\Implementation\Com.c	  7220        {
; ..\component\Com\Implementation\Com.c	  7221          Com_SetRxDynSignalLength(rxTpPduInfoIdx, dynLength);    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  7222          VStdMemCpyRamToRam(Com_GetAddrRxSigBufferArrayBased(Com_GetRxSigBufferArrayBasedBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), Com_GetAddrRxSigBufferArrayBased(Com_GetRxSigBufferArrayBasedShdBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), dynLength);     /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7223        }
; ..\component\Com\Implementation\Com.c	  7224        break;
; ..\component\Com\Implementation\Com.c	  7225      }
; ..\component\Com\Implementation\Com.c	  7226  #   endif
; ..\component\Com\Implementation\Com.c	  7227  #  endif
; ..\component\Com\Implementation\Com.c	  7228      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  7229        break;
; ..\component\Com\Implementation\Com.c	  7230    }
; ..\component\Com\Implementation\Com.c	  7231  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  7232  # endif
; ..\component\Com\Implementation\Com.c	  7233  
; ..\component\Com\Implementation\Com.c	  7234  # if (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7235  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7236    Com_Signal_SetRxSigBufferValue
; ..\component\Com\Implementation\Com.c	  7237  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7238  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7239   *
; ..\component\Com\Implementation\Com.c	  7240   *
; ..\component\Com\Implementation\Com.c	  7241  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7242  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_SetRxSigBufferValue(Com_RxAccessInfoIterType idxRxAccessInfo, uint32_least idxDestValue, uint32_least idxSrcValue)
; ..\component\Com\Implementation\Com.c	  7243  {
; ..\component\Com\Implementation\Com.c	  7244    /* #10 Copy the constant value at the position of the passed source index to the passed destination index, the source and destination buffer depends on the ApplType of the passed signal */
; ..\component\Com\Implementation\Com.c	  7245    switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	  7246    {
; ..\component\Com\Implementation\Com.c	  7247  #  if ((COM_RXSIGBUFFERUINT8 == STD_ON) && (COM_EXISTS_UINT8_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7248      case COM_UINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7249      {
; ..\component\Com\Implementation\Com.c	  7250        Com_SetRxSigBufferUInt8(idxDestValue, Com_GetConstValueUInt8(idxSrcValue));       /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	  7251        break;
; ..\component\Com\Implementation\Com.c	  7252      }
; ..\component\Com\Implementation\Com.c	  7253  #  endif
; ..\component\Com\Implementation\Com.c	  7254  #  if (COM_RXSIGBUFFERSINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7255      case COM_SINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7256  
; ..\component\Com\Implementation\Com.c	  7257      {
; ..\component\Com\Implementation\Com.c	  7258        Com_SetRxSigBufferSInt8(idxDestValue, Com_GetConstValueSInt8(idxSrcValue));       /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	  7259        break;
; ..\component\Com\Implementation\Com.c	  7260      }
; ..\component\Com\Implementation\Com.c	  7261  #  endif
; ..\component\Com\Implementation\Com.c	  7262  #  if (COM_RXSIGBUFFERUINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7263      case COM_UINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7264      {
; ..\component\Com\Implementation\Com.c	  7265        Com_SetRxSigBufferUInt16(idxDestValue, Com_GetConstValueUInt16(idxSrcValue));     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	  7266        break;
; ..\component\Com\Implementation\Com.c	  7267      }
; ..\component\Com\Implementation\Com.c	  7268  #  endif
; ..\component\Com\Implementation\Com.c	  7269  #  if (COM_RXSIGBUFFERSINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7270      case COM_SINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7271      {
; ..\component\Com\Implementation\Com.c	  7272        Com_SetRxSigBufferSInt16(idxDestValue, Com_GetConstValueSInt16(idxSrcValue));     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	  7273        break;
; ..\component\Com\Implementation\Com.c	  7274      }
; ..\component\Com\Implementation\Com.c	  7275  #  endif
; ..\component\Com\Implementation\Com.c	  7276  #  if (COM_RXSIGBUFFERUINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7277      case COM_UINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7278      {
; ..\component\Com\Implementation\Com.c	  7279        Com_SetRxSigBufferUInt32(idxDestValue, Com_GetConstValueUInt32(idxSrcValue));     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	  7280        break;
; ..\component\Com\Implementation\Com.c	  7281      }
; ..\component\Com\Implementation\Com.c	  7282  #  endif
; ..\component\Com\Implementation\Com.c	  7283  #  if (COM_RXSIGBUFFERSINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7284      case COM_SINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7285      {
; ..\component\Com\Implementation\Com.c	  7286        Com_SetRxSigBufferSInt32(idxDestValue, Com_GetConstValueSInt32(idxSrcValue));     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	  7287        break;
; ..\component\Com\Implementation\Com.c	  7288      }
; ..\component\Com\Implementation\Com.c	  7289  #  endif
; ..\component\Com\Implementation\Com.c	  7290  #  if (COM_RXSIGBUFFERUINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7291      case COM_UINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7292      {
; ..\component\Com\Implementation\Com.c	  7293        Com_SetRxSigBufferUInt64(idxDestValue, Com_GetConstValueUInt64(idxSrcValue));     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	  7294        break;
; ..\component\Com\Implementation\Com.c	  7295      }
; ..\component\Com\Implementation\Com.c	  7296  #  endif
; ..\component\Com\Implementation\Com.c	  7297  #  if (COM_RXSIGBUFFERSINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7298      case COM_SINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7299      {
; ..\component\Com\Implementation\Com.c	  7300        Com_SetRxSigBufferSInt64(idxDestValue, Com_GetConstValueSInt64(idxSrcValue));     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	  7301        break;
; ..\component\Com\Implementation\Com.c	  7302      }
; ..\component\Com\Implementation\Com.c	  7303  #  endif
; ..\component\Com\Implementation\Com.c	  7304  #  if (COM_RXSIGBUFFERFLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7305      case COM_FLOAT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7306      {
; ..\component\Com\Implementation\Com.c	  7307        Com_SetRxSigBufferFloat32(idxDestValue, Com_GetConstValueFloat32(idxSrcValue));   /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	  7308        break;
; ..\component\Com\Implementation\Com.c	  7309      }
; ..\component\Com\Implementation\Com.c	  7310  #  endif
; ..\component\Com\Implementation\Com.c	  7311  #  if (COM_RXSIGBUFFERFLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  7312      case COM_FLOAT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7313      {
; ..\component\Com\Implementation\Com.c	  7314        Com_SetRxSigBufferFloat64(idxDestValue, Com_GetConstValueFloat64(idxSrcValue));   /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	  7315        break;
; ..\component\Com\Implementation\Com.c	  7316      }
; ..\component\Com\Implementation\Com.c	  7317  #  endif
; ..\component\Com\Implementation\Com.c	  7318      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  7319        break;
; ..\component\Com\Implementation\Com.c	  7320    }
; ..\component\Com\Implementation\Com.c	  7321    COM_DUMMY_STATEMENT(idxDestValue);    /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  7322  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  7323  # endif
; ..\component\Com\Implementation\Com.c	  7324  
; ..\component\Com\Implementation\Com.c	  7325  # if(COM_RXSIGBUFFERARRAYBASEDBUFFERUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7326  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7327    Com_Signal_SetRxSigBufferArrayBasedValue
; ..\component\Com\Implementation\Com.c	  7328  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7329  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7330   *
; ..\component\Com\Implementation\Com.c	  7331   *
; ..\component\Com\Implementation\Com.c	  7332  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7333  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_SetRxSigBufferArrayBasedValue(Com_RxAccessInfoIterType idxRxAccessInfo, Com_RxSigBufferArrayBasedIterType idxDestValue,
; ..\component\Com\Implementation\Com.c	  7334                                                                             Com_ConstValueArrayBasedIterType idxSrcValue, PduLengthType length)
; ..\component\Com\Implementation\Com.c	  7335  {
; ..\component\Com\Implementation\Com.c	  7336    /* #10 Copy the constant value at the position of the passed source index to the passed destination index, the source and destination buffer depends on the ApplType of the passed signal */
; ..\component\Com\Implementation\Com.c	  7337    switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	  7338    {
; ..\component\Com\Implementation\Com.c	  7339  #  if ((COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7340      case COM_UINT8_DYN_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7341      {
; ..\component\Com\Implementation\Com.c	  7342        Com_RxTpInfoIdxOfRxPduInfoType rxTpPduInfoIdx = Com_GetRxTpInfoIdxOfRxPduInfo(Com_GetRxPduInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	  7343        Com_SetRxDynSignalLength(rxTpPduInfoIdx, length); /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  7344  #   if (COM_RXDYNSIGNALTMPLENGTHFORSIGNALGROUPS == STD_ON)
; ..\component\Com\Implementation\Com.c	  7345        Com_SetRxDynSignalTmpLengthForSignalGroups(rxTpPduInfoIdx, length);       /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  7346  #   endif
; ..\component\Com\Implementation\Com.c	  7347  
; ..\component\Com\Implementation\Com.c	  7348        VStdMemCpyRomToRam(Com_GetAddrRxSigBufferArrayBased(idxDestValue), Com_GetAddrConstValueArrayBased(idxSrcValue), length); /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_WRITEACCESS_LENGTH */
; ..\component\Com\Implementation\Com.c	  7349        break;
; ..\component\Com\Implementation\Com.c	  7350      }
; ..\component\Com\Implementation\Com.c	  7351  #  endif
; ..\component\Com\Implementation\Com.c	  7352  #  if ((COM_EXISTS_UINT8_N_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7353      case COM_UINT8_N_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  7354      {
; ..\component\Com\Implementation\Com.c	  7355        VStdMemCpyRomToRam(Com_GetAddrRxSigBufferArrayBased(idxDestValue), Com_GetAddrConstValueArrayBased(idxSrcValue), length); /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_WRITEACCESS_LENGTH */
; ..\component\Com\Implementation\Com.c	  7356        break;
; ..\component\Com\Implementation\Com.c	  7357      }
; ..\component\Com\Implementation\Com.c	  7358  #  endif
; ..\component\Com\Implementation\Com.c	  7359      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  7360        break;
; ..\component\Com\Implementation\Com.c	  7361    }
; ..\component\Com\Implementation\Com.c	  7362    COM_DUMMY_STATEMENT(idxDestValue);    /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  7363  }
; ..\component\Com\Implementation\Com.c	  7364  # endif
; ..\component\Com\Implementation\Com.c	  7365  
; ..\component\Com\Implementation\Com.c	  7366  #endif
; ..\component\Com\Implementation\Com.c	  7367  
; ..\component\Com\Implementation\Com.c	  7368  #if ((CPU_BYTE_ORDER == LOW_BYTE_FIRST) && (COM_EXISTS_NBITNBYTE_BUSACCOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7369  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7370    Com_Signal_ReadSignal_LB_NBITNBYTE
; ..\component\Com\Implementation\Com.c	  7371  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7372  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7373   *
; ..\component\Com\Implementation\Com.c	  7374   *
; ..\component\Com\Implementation\Com.c	  7375   *
; ..\component\Com\Implementation\Com.c	  7376   *
; ..\component\Com\Implementation\Com.c	  7377   *
; ..\component\Com\Implementation\Com.c	  7378  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7379  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignal_LB_NBITNBYTE(Com_RxAccessInfoIterType SignalId, P2VAR(uint8, AUTOMATIC, COM_APPL_VAR) SignalApplDestPtr,
; ..\component\Com\Implementation\Com.c	  7380                                                                       P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr, Com_BitPositionOfRxAccessInfoType signalStartBit, uint32 destLength)
; ..\component\Com\Implementation\Com.c	  7381  {
; ..\component\Com\Implementation\Com.c	  7382    /* #5 This function is used if the CPU byte order is LOW_BYTE_FIRST */
; ..\component\Com\Implementation\Com.c	  7383    uint16_least nFullBytes = 0u;
; ..\component\Com\Implementation\Com.c	  7384    Com_BitLengthOfRxAccessInfoType nBitsToWrite = Com_GetBitLengthOfRxAccessInfo(SignalId);
; ..\component\Com\Implementation\Com.c	  7385    /* ------------------------------- Intel (bus) to Intel (appl) ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	  7386    /* #10 If more than 8 bits have to be copied */
; ..\component\Com\Implementation\Com.c	  7387    if(nBitsToWrite > 8u) /* COV_COM_NBITNBYTE */
; ..\component\Com\Implementation\Com.c	  7388    {
; ..\component\Com\Implementation\Com.c	  7389      sint16_least i;
; ..\component\Com\Implementation\Com.c	  7390      nFullBytes = (uint16_least) (nBitsToWrite >> 3u);   /* PRQA S 4391 */ /* MD_Com_4391 */
; ..\component\Com\Implementation\Com.c	  7391      if(((uint32) nFullBytes) <= destLength)     /* COV_COM_SILENT_TX */
; ..\component\Com\Implementation\Com.c	  7392      {
; ..\component\Com\Implementation\Com.c	  7393        /* #20 Copy all full bytes, byte align the source byte before it is copied */
; ..\component\Com\Implementation\Com.c	  7394        for(i = ((sint16_least) nFullBytes - 1); i >= 0; i--)
; ..\component\Com\Implementation\Com.c	  7395        {
; ..\component\Com\Implementation\Com.c	  7396          SignalApplDestPtr[i] = COM_CAST2UINT8(SignalBusSourcePtr[i] >> signalStartBit); /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7397          SignalApplDestPtr[i] |= COM_CAST2UINT8(SignalBusSourcePtr[i + 1] << (8u - signalStartBit));     /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7398          nBitsToWrite -= 8u;
; ..\component\Com\Implementation\Com.c	  7399        }
; ..\component\Com\Implementation\Com.c	  7400      }
; ..\component\Com\Implementation\Com.c	  7401      else
; ..\component\Com\Implementation\Com.c	  7402      {
; ..\component\Com\Implementation\Com.c	  7403        nFullBytes = 0u;
; ..\component\Com\Implementation\Com.c	  7404      }
; ..\component\Com\Implementation\Com.c	  7405    }
; ..\component\Com\Implementation\Com.c	  7406  
; ..\component\Com\Implementation\Com.c	  7407    /* #30 If the signal not only has full bytes, copy the remaining bits to the destination buffer */
; ..\component\Com\Implementation\Com.c	  7408    if(0u != nBitsToWrite)        /* COV_COM_NBITNBYTE_COPY_REMAININGBITS */
; ..\component\Com\Implementation\Com.c	  7409    {
; ..\component\Com\Implementation\Com.c	  7410      uint8 tmpByte = COM_CAST2UINT8(SignalBusSourcePtr[nFullBytes] >> signalStartBit);
; ..\component\Com\Implementation\Com.c	  7411      uint8 sourceEndByteIdx = COM_CAST2UINT8((signalStartBit + Com_GetBitLengthOfRxAccessInfo(SignalId) - 1u) >> 3u);
; ..\component\Com\Implementation\Com.c	  7412  
; ..\component\Com\Implementation\Com.c	  7413      if(sourceEndByteIdx > (uint8) nFullBytes)   /* COV_COM_NBITNBYTE_BY_UINT8_ONLY */
; ..\component\Com\Implementation\Com.c	  7414      {
; ..\component\Com\Implementation\Com.c	  7415        tmpByte |= COM_CAST2UINT8(SignalBusSourcePtr[nFullBytes + 1u] << (8u - signalStartBit));
; ..\component\Com\Implementation\Com.c	  7416      }
; ..\component\Com\Implementation\Com.c	  7417  
; ..\component\Com\Implementation\Com.c	  7418      SignalApplDestPtr[nFullBytes] = tmpByte & COM_CAST2UINT8(~(COM_CAST2UINT8(255u << nBitsToWrite)));  /* PRQA S 2793, 2842 */ /* MD_Com_2793, MD_Com_2842_SignalApplDestPtr */ /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7419    }
; ..\component\Com\Implementation\Com.c	  7420  }
; ..\component\Com\Implementation\Com.c	  7421  #endif
; ..\component\Com\Implementation\Com.c	  7422  
; ..\component\Com\Implementation\Com.c	  7423  #if ((CPU_BYTE_ORDER == LOW_BYTE_FIRST) && (COM_EXISTS_NBITNBYTE_SW_BUSACCOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7424  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7425    Com_Signal_ReadSignal_LB_SW_NBITNBYTE
; ..\component\Com\Implementation\Com.c	  7426  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7427  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7428   *
; ..\component\Com\Implementation\Com.c	  7429   *
; ..\component\Com\Implementation\Com.c	  7430   *
; ..\component\Com\Implementation\Com.c	  7431   *
; ..\component\Com\Implementation\Com.c	  7432   *
; ..\component\Com\Implementation\Com.c	  7433  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7434  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignal_LB_SW_NBITNBYTE(Com_RxAccessInfoIterType SignalId, P2VAR(uint8, AUTOMATIC, COM_APPL_VAR) SignalApplDestPtr,
; ..\component\Com\Implementation\Com.c	  7435                                                                          P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr,
; ..\component\Com\Implementation\Com.c	  7436                                                                          Com_BitPositionOfRxAccessInfoType signalStartBit, uint32 destLength)
; ..\component\Com\Implementation\Com.c	  7437  {
; ..\component\Com\Implementation\Com.c	  7438    /* #5 This function is used if the CPU byte order is LOW_BYTE_FIRST */
; ..\component\Com\Implementation\Com.c	  7439    sint16_least nFullBytes = 0;
; ..\component\Com\Implementation\Com.c	  7440    Com_BitLengthOfRxAccessInfoType nBitsToWrite = Com_GetBitLengthOfRxAccessInfo(SignalId);
; ..\component\Com\Implementation\Com.c	  7441    /* ------------------------------- Motorola (bus) to Intel (appl) -------------------------------------------- */
; ..\component\Com\Implementation\Com.c	  7442    /* #10 If more than 8 bits have to be copied */
; ..\component\Com\Implementation\Com.c	  7443    if(nBitsToWrite > 8u) /* COV_COM_NBITNBYTE */
; ..\component\Com\Implementation\Com.c	  7444    {
; ..\component\Com\Implementation\Com.c	  7445      sint16_least i;
; ..\component\Com\Implementation\Com.c	  7446      nFullBytes = (sint16_least) (nBitsToWrite >> 3u);   /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  7447      if(((uint32) nFullBytes) <= destLength)     /* COV_COM_SILENT_TX */
; ..\component\Com\Implementation\Com.c	  7448      {
; ..\component\Com\Implementation\Com.c	  7449        for(i = (sint16_least) (nFullBytes - 1); i >= 0; i--)
; ..\component\Com\Implementation\Com.c	  7450        {
; ..\component\Com\Implementation\Com.c	  7451          /* #20 Copy all full bytes, byte align the source byte before it is copied and perform endianess conversion */
; ..\component\Com\Implementation\Com.c	  7452          SignalApplDestPtr[i] = COM_CAST2UINT8(SignalBusSourcePtr[-i] >> signalStartBit);        /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7453          SignalApplDestPtr[i] |= COM_CAST2UINT8(SignalBusSourcePtr[-i - 1] << (8u - signalStartBit));    /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7454          nBitsToWrite -= 8u;
; ..\component\Com\Implementation\Com.c	  7455        }
; ..\component\Com\Implementation\Com.c	  7456      }
; ..\component\Com\Implementation\Com.c	  7457      else
; ..\component\Com\Implementation\Com.c	  7458      {
; ..\component\Com\Implementation\Com.c	  7459        nFullBytes = 0;
; ..\component\Com\Implementation\Com.c	  7460      }
; ..\component\Com\Implementation\Com.c	  7461    }
; ..\component\Com\Implementation\Com.c	  7462  
; ..\component\Com\Implementation\Com.c	  7463    /* #30 If the signal not only has full bytes, copy the remaining bits to the destination buffer and perform endianess conversion */
; ..\component\Com\Implementation\Com.c	  7464    if(0u != nBitsToWrite)        /* COV_COM_NBITNBYTE_COPY_REMAININGBITS */
; ..\component\Com\Implementation\Com.c	  7465    {
; ..\component\Com\Implementation\Com.c	  7466      uint8 tmpByte = COM_CAST2UINT8(SignalBusSourcePtr[0 - nFullBytes] >> signalStartBit);       /* PRQA S 2986 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  7467      uint8 sourceEndByteIdx = COM_CAST2UINT8(Com_GetBytePositionOfRxAccessInfo(SignalId) - Com_GetStartByteInPduPositionOfRxAccessInfo(SignalId));
; ..\component\Com\Implementation\Com.c	  7468  
; ..\component\Com\Implementation\Com.c	  7469      if(sourceEndByteIdx > (uint8) nFullBytes)   /* COV_COM_NBITNBYTE_BY_UINT8_ONLY */
; ..\component\Com\Implementation\Com.c	  7470      {
; ..\component\Com\Implementation\Com.c	  7471        tmpByte |= COM_CAST2UINT8(SignalBusSourcePtr[-1 - nFullBytes] << (8u - signalStartBit));
; ..\component\Com\Implementation\Com.c	  7472      }
; ..\component\Com\Implementation\Com.c	  7473  
; ..\component\Com\Implementation\Com.c	  7474      SignalApplDestPtr[nFullBytes] = tmpByte & COM_CAST2UINT8(~(COM_CAST2UINT8(255u << nBitsToWrite)));  /* PRQA S 2793, 2842 */ /* MD_Com_2793, MD_Com_2842_SignalApplDestPtr */ /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7475    }
; ..\component\Com\Implementation\Com.c	  7476  }
; ..\component\Com\Implementation\Com.c	  7477  #endif
; ..\component\Com\Implementation\Com.c	  7478  
; ..\component\Com\Implementation\Com.c	  7479  #if ((CPU_BYTE_ORDER == HIGH_BYTE_FIRST) && (COM_EXISTS_NBITNBYTE_BUSACCOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7480  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7481    Com_Signal_ReadSignal_HB_NBITNBYTE
; ..\component\Com\Implementation\Com.c	  7482  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7483  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7484   *
; ..\component\Com\Implementation\Com.c	  7485   *
; ..\component\Com\Implementation\Com.c	  7486   *
; ..\component\Com\Implementation\Com.c	  7487   *
; ..\component\Com\Implementation\Com.c	  7488   *
; ..\component\Com\Implementation\Com.c	  7489  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7490  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignal_HB_NBITNBYTE(Com_RxAccessInfoIterType rxAccessInfoId, P2VAR(uint8, AUTOMATIC, COM_APPL_VAR) SignalApplDestPtr,
; ..\component\Com\Implementation\Com.c	  7491                                                                       P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr, Com_BitPositionOfRxAccessInfoType signalStartBit, uint32 destLength)
; ..\component\Com\Implementation\Com.c	  7492  {
; ..\component\Com\Implementation\Com.c	  7493    /* #5 This function is used if the CPU byte order is HIGH_BYTE_FIRST */
; ..\component\Com\Implementation\Com.c	  7494    sint16_least nFullBytes = 0;
; ..\component\Com\Implementation\Com.c	  7495    Com_BitLengthOfRxAccessInfoType nBitsToWrite = Com_GetBitLengthOfRxAccessInfo(rxAccessInfoId);
; ..\component\Com\Implementation\Com.c	  7496    /* ------------------------------- Motorola (bus) to Motorola (appl) ----------------------------------------- */
; ..\component\Com\Implementation\Com.c	  7497    /* #10 If more than 8 bits have to be copied */
; ..\component\Com\Implementation\Com.c	  7498    if(nBitsToWrite > 8u) /* COV_COM_NBITNBYTE */
; ..\component\Com\Implementation\Com.c	  7499    {
; ..\component\Com\Implementation\Com.c	  7500      sint16_least i;
; ..\component\Com\Implementation\Com.c	  7501      nFullBytes = (sint16_least) (nBitsToWrite >> 3u);   /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  7502      if(((uint32) nFullBytes) <= destLength)     /* COV_COM_NBITNBYTE_TX_01 */
; ..\component\Com\Implementation\Com.c	  7503      {
; ..\component\Com\Implementation\Com.c	  7504        for(i = (sint16_least) (nFullBytes - 1); i >= 0; i--)     /* COV_COM_NBITNBYTE_XX */
; ..\component\Com\Implementation\Com.c	  7505        {
; ..\component\Com\Implementation\Com.c	  7506          /* #20 Copy all full bytes, byte align the source byte before it is copied */
; ..\component\Com\Implementation\Com.c	  7507          SignalApplDestPtr[-i] = COM_CAST2UINT8(SignalBusSourcePtr[-i] >> signalStartBit);       /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7508          SignalApplDestPtr[-i] |= COM_CAST2UINT8(SignalBusSourcePtr[-i - 1] << (8u - signalStartBit));   /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7509          nBitsToWrite -= 8u;
; ..\component\Com\Implementation\Com.c	  7510        }
; ..\component\Com\Implementation\Com.c	  7511      }
; ..\component\Com\Implementation\Com.c	  7512      else
; ..\component\Com\Implementation\Com.c	  7513      {
; ..\component\Com\Implementation\Com.c	  7514        nFullBytes = 0;
; ..\component\Com\Implementation\Com.c	  7515      }
; ..\component\Com\Implementation\Com.c	  7516    }
; ..\component\Com\Implementation\Com.c	  7517  
; ..\component\Com\Implementation\Com.c	  7518    /* #30 If the signal not only has full bytes, copy the remaining bits to the destination buffer */
; ..\component\Com\Implementation\Com.c	  7519    if(0u != nBitsToWrite)        /* COV_COM_NBITNBYTE_COPY_REMAININGBITS */
; ..\component\Com\Implementation\Com.c	  7520    {
; ..\component\Com\Implementation\Com.c	  7521      uint8 tmpByte = COM_CAST2UINT8(SignalBusSourcePtr[0 - nFullBytes] >> signalStartBit);       /* PRQA S 2986 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	  7522  
; ..\component\Com\Implementation\Com.c	  7523      uint8 sourceEndByteIdx = COM_CAST2UINT8(Com_GetBytePositionOfRxAccessInfo(rxAccessInfoId) - Com_GetStartByteInPduPositionOfRxAccessInfo(rxAccessInfoId));
; ..\component\Com\Implementation\Com.c	  7524  
; ..\component\Com\Implementation\Com.c	  7525      if(sourceEndByteIdx > (uint8) nFullBytes)   /* COV_COM_NBITNBYTE_BY_UINT8_ONLY */
; ..\component\Com\Implementation\Com.c	  7526      {
; ..\component\Com\Implementation\Com.c	  7527        tmpByte |= COM_CAST2UINT8(SignalBusSourcePtr[-1 - nFullBytes] << (8u - signalStartBit));
; ..\component\Com\Implementation\Com.c	  7528      }
; ..\component\Com\Implementation\Com.c	  7529  
; ..\component\Com\Implementation\Com.c	  7530      SignalApplDestPtr[0 - nFullBytes] = tmpByte & COM_CAST2UINT8(~(COM_CAST2UINT8(255u << nBitsToWrite)));      /* PRQA S 2986, 2793, 2842 */ /* MD_Com_2985_2986, MD_Com_2793, MD_Com_2842_SignalApplDestPtr */ /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7531    }
; ..\component\Com\Implementation\Com.c	  7532  }
; ..\component\Com\Implementation\Com.c	  7533  #endif
; ..\component\Com\Implementation\Com.c	  7534  
; ..\component\Com\Implementation\Com.c	  7535  #if ((CPU_BYTE_ORDER == HIGH_BYTE_FIRST) && (COM_EXISTS_NBITNBYTE_SW_BUSACCOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7536  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7537    Com_Signal_ReadSignal_HB_SW_NBITNBYTE
; ..\component\Com\Implementation\Com.c	  7538  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7539  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7540   *
; ..\component\Com\Implementation\Com.c	  7541   *
; ..\component\Com\Implementation\Com.c	  7542   *
; ..\component\Com\Implementation\Com.c	  7543   *
; ..\component\Com\Implementation\Com.c	  7544   *
; ..\component\Com\Implementation\Com.c	  7545  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7546  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_ReadSignal_HB_SW_NBITNBYTE(Com_RxAccessInfoIterType rxAccessInfoId, P2VAR(uint8, AUTOMATIC, COM_APPL_VAR) SignalApplDestPtr,
; ..\component\Com\Implementation\Com.c	  7547                                                                          P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr, Com_BitPositionOfRxAccessInfoType signalStartBit,
; ..\component\Com\Implementation\Com.c	  7548                                                                          uint32 destLength)
; ..\component\Com\Implementation\Com.c	  7549  {
; ..\component\Com\Implementation\Com.c	  7550    /* #5 This function is used if the CPU byte order is HIGH_BYTE_FIRST */
; ..\component\Com\Implementation\Com.c	  7551    sint16_least nFullBytes = 0;
; ..\component\Com\Implementation\Com.c	  7552    Com_BitLengthOfRxAccessInfoType nBitsToWrite = Com_GetBitLengthOfRxAccessInfo(rxAccessInfoId);
; ..\component\Com\Implementation\Com.c	  7553    /* ------------------------------- Intel (bus) to Motorola (appl) -------------------------------------------- */
; ..\component\Com\Implementation\Com.c	  7554    /* #10 If more than 8 bits have to be copied */
; ..\component\Com\Implementation\Com.c	  7555    if(nBitsToWrite > 8u) /* COV_COM_NBITNBYTE */
; ..\component\Com\Implementation\Com.c	  7556    {
; ..\component\Com\Implementation\Com.c	  7557      sint16_least i;
; ..\component\Com\Implementation\Com.c	  7558      nFullBytes = (sint16_least) (nBitsToWrite >> 3u);   /* PRQA S 4394 */ /* MD_Com_4394 */
; ..\component\Com\Implementation\Com.c	  7559      if(((uint32) nFullBytes) <= destLength)     /* COV_COM_NBITNBYTE_TX_01 */
; ..\component\Com\Implementation\Com.c	  7560      {
; ..\component\Com\Implementation\Com.c	  7561        for(i = (sint16_least) (nFullBytes - 1); i >= 0; i--)     /* COV_COM_NBITNBYTE_XX */
; ..\component\Com\Implementation\Com.c	  7562        {
; ..\component\Com\Implementation\Com.c	  7563          /* #20 Copy all full bytes, byte align the source byte before it is copied and perform endianess conversion */
; ..\component\Com\Implementation\Com.c	  7564          SignalApplDestPtr[-i] = COM_CAST2UINT8(SignalBusSourcePtr[i] >> signalStartBit);        /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7565          SignalApplDestPtr[-i] |= COM_CAST2UINT8(SignalBusSourcePtr[i + 1] << (8u - signalStartBit));    /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7566          nBitsToWrite -= 8u;
; ..\component\Com\Implementation\Com.c	  7567        }
; ..\component\Com\Implementation\Com.c	  7568      }
; ..\component\Com\Implementation\Com.c	  7569      else
; ..\component\Com\Implementation\Com.c	  7570      {
; ..\component\Com\Implementation\Com.c	  7571        nFullBytes = 0;
; ..\component\Com\Implementation\Com.c	  7572      }
; ..\component\Com\Implementation\Com.c	  7573    }
; ..\component\Com\Implementation\Com.c	  7574  
; ..\component\Com\Implementation\Com.c	  7575    /* #30 If the signal not only has full bytes, copy the remaining bits to the destination buffer and perform endianess conversion */
; ..\component\Com\Implementation\Com.c	  7576    if(0u != nBitsToWrite)        /* COV_COM_NBITNBYTE_COPY_REMAININGBITS */
; ..\component\Com\Implementation\Com.c	  7577    {
; ..\component\Com\Implementation\Com.c	  7578      uint8 tmpByte = COM_CAST2UINT8(SignalBusSourcePtr[nFullBytes] >> signalStartBit);
; ..\component\Com\Implementation\Com.c	  7579      uint8 sourceEndByteIdx = COM_CAST2UINT8((signalStartBit + Com_GetBitLengthOfRxAccessInfo(rxAccessInfoId) - 1u) >> 3u);
; ..\component\Com\Implementation\Com.c	  7580  
; ..\component\Com\Implementation\Com.c	  7581      if(sourceEndByteIdx > (uint8) nFullBytes)   /* COV_COM_NBITNBYTE_BY_UINT8_ONLY */
; ..\component\Com\Implementation\Com.c	  7582      {
; ..\component\Com\Implementation\Com.c	  7583        tmpByte |= COM_CAST2UINT8(SignalBusSourcePtr[nFullBytes + 1] << (8u - signalStartBit));
; ..\component\Com\Implementation\Com.c	  7584      }
; ..\component\Com\Implementation\Com.c	  7585  
; ..\component\Com\Implementation\Com.c	  7586      SignalApplDestPtr[0 - nFullBytes] = tmpByte & COM_CAST2UINT8(~(COM_CAST2UINT8(255u << nBitsToWrite)));      /* PRQA S 2986, 2793, 2842 */ /* MD_Com_2985_2986, MD_Com_2793, MD_Com_2842_SignalApplDestPtr */ /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	  7587    }
; ..\component\Com\Implementation\Com.c	  7588  }
; ..\component\Com\Implementation\Com.c	  7589  #endif
; ..\component\Com\Implementation\Com.c	  7590  
; ..\component\Com\Implementation\Com.c	  7591  #if ((COM_TXBUFFERUSEDOFTXSIGINFO == STD_ON)  && ((COM_EXISTS_NBYTE_BUSACCOFTXSIGINFO == STD_ON) || (COM_EXISTS_NBYTE_SW_BUSACCOFTXSIGINFO == STD_ON) || (COM_EXISTS_ARRAY_BASED_BUSACCOFTXSIGINFO == STD_ON)))
; ..\component\Com\Implementation\Com.c	  7592  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7593    Com_Signal_GetTxBufferLength
; ..\component\Com\Implementation\Com.c	  7594  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7595  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7596   *
; ..\component\Com\Implementation\Com.c	  7597   *
; ..\component\Com\Implementation\Com.c	  7598   *
; ..\component\Com\Implementation\Com.c	  7599  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7600  LOCAL_INLINE FUNC(Com_TxBufferLengthOfTxSigInfoType, COM_CODE) Com_Signal_GetTxBufferLength(Com_SignalIdType SignalId)
; ..\component\Com\Implementation\Com.c	  7601  {
; ..\component\Com\Implementation\Com.c	  7602    Com_TxBufferLengthOfTxSigInfoType txBufferLength;
; ..\component\Com\Implementation\Com.c	  7603  # if ((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7604    /* #10 If the passed signal is a dynamic length signal return the current dynamic byte length */
; ..\component\Com\Implementation\Com.c	  7605    if(Com_GetApplTypeOfTxSigInfo(SignalId) == COM_UINT8_DYN_APPLTYPEOFTXSIGINFO) /* COV_COM_UINT8_DYN_APPLTYPE */
; ..\component\Com\Implementation\Com.c	  7606    {
; ..\component\Com\Implementation\Com.c	  7607      Com_TxTpInfoIdxOfTxPduInfoType txTpPduInfoIdx = Com_GetTxTpInfoIdxOfTxPduInfo(Com_GetTxPduInfoIdxOfTxSigInfo(SignalId));
; ..\component\Com\Implementation\Com.c	  7608      txBufferLength = (Com_TxBufferLengthOfTxSigInfoType) Com_GetTxDynSignalLength(txTpPduInfoIdx);
; ..\component\Com\Implementation\Com.c	  7609    }
; ..\component\Com\Implementation\Com.c	  7610    /* #20 Otherwise use the static Tx Buffer Length */
; ..\component\Com\Implementation\Com.c	  7611    else
; ..\component\Com\Implementation\Com.c	  7612  # endif
; ..\component\Com\Implementation\Com.c	  7613    {
; ..\component\Com\Implementation\Com.c	  7614      txBufferLength = Com_GetTxBufferLengthOfTxSigInfo(SignalId);
; ..\component\Com\Implementation\Com.c	  7615    }
; ..\component\Com\Implementation\Com.c	  7616  
; ..\component\Com\Implementation\Com.c	  7617    return txBufferLength;
; ..\component\Com\Implementation\Com.c	  7618  }
; ..\component\Com\Implementation\Com.c	  7619  #endif
; ..\component\Com\Implementation\Com.c	  7620  
; ..\component\Com\Implementation\Com.c	  7621  #if ((COM_TXBUFFERUSEDOFTXSIGINFO == STD_ON) && (CPU_BYTE_ORDER == HIGH_BYTE_FIRST))
; ..\component\Com\Implementation\Com.c	  7622  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7623    Com_Signal_getLSBSignalApplSourcePtr
; ..\component\Com\Implementation\Com.c	  7624  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7625  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7626   *
; ..\component\Com\Implementation\Com.c	  7627   *
; ..\component\Com\Implementation\Com.c	  7628   *
; ..\component\Com\Implementation\Com.c	  7629   *
; ..\component\Com\Implementation\Com.c	  7630   *
; ..\component\Com\Implementation\Com.c	  7631  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7632  LOCAL_INLINE FUNC(P2CONST(uint8, AUTOMATIC, COM_APPL_DATA), COM_CODE) Com_Signal_getLSBSignalApplSourcePtr(Com_SignalIdType SignalId, P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) SignalApplSourcePtr)
; ..\component\Com\Implementation\Com.c	  7633  {
; ..\component\Com\Implementation\Com.c	  7634  
; ..\component\Com\Implementation\Com.c	  7635    /* *INDENT-OFF* */
; ..\component\Com\Implementation\Com.c	  7636    /* Motorola plattform specific implementation
; ..\component\Com\Implementation\Com.c	  7637       We start writing with the lsb (writing from right to left). To do so it is required to know
; ..\component\Com\Implementation\Com.c	  7638       the byte of the lsb. This is not the SignalApplSourcePtr as this one always points to the leftmost
; ..\component\Com\Implementation\Com.c	  7639       byte. For motorola systems, this is the byte of the msb.
; ..\component\Com\Implementation\Com.c	  7640       Reason: Easier code generation + it is easier to start writing with the lsb and counting
; ..\component\Com\Implementation\Com.c	  7641       bits "downwards" to the msb. SignalBusDestPtr points always to the lsb of motorola or intel bus
; ..\component\Com\Implementation\Com.c	  7642       signals. */
; ..\component\Com\Implementation\Com.c	  7643    /* *INDENT-ON* */
; ..\component\Com\Implementation\Com.c	  7644  
; ..\component\Com\Implementation\Com.c	  7645    P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) SignalApplSourcePtrIntern = SignalApplSourcePtr;
; ..\component\Com\Implementation\Com.c	  7646  
; ..\component\Com\Implementation\Com.c	  7647    switch (Com_GetApplTypeOfTxSigInfo(SignalId)) /* PRQA S 3315 */ /* MD_Com_3315 */
; ..\component\Com\Implementation\Com.c	  7648    {
; ..\component\Com\Implementation\Com.c	  7649  # if (COM_EXISTS_UINT16_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7650      case COM_UINT16_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	  7651        SignalApplSourcePtrIntern = &SignalApplSourcePtrIntern[1];
; ..\component\Com\Implementation\Com.c	  7652        break;
; ..\component\Com\Implementation\Com.c	  7653  # endif
; ..\component\Com\Implementation\Com.c	  7654  # if (COM_EXISTS_SINT16_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7655      case COM_SINT16_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	  7656        SignalApplSourcePtrIntern = &SignalApplSourcePtrIntern[1];
; ..\component\Com\Implementation\Com.c	  7657        break;
; ..\component\Com\Implementation\Com.c	  7658  # endif
; ..\component\Com\Implementation\Com.c	  7659  # if (COM_EXISTS_UINT32_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7660      case COM_UINT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	  7661        SignalApplSourcePtrIntern = &SignalApplSourcePtrIntern[3];
; ..\component\Com\Implementation\Com.c	  7662        break;
; ..\component\Com\Implementation\Com.c	  7663  # endif
; ..\component\Com\Implementation\Com.c	  7664  # if (COM_EXISTS_SINT32_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7665      case COM_SINT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	  7666        SignalApplSourcePtrIntern = &SignalApplSourcePtrIntern[3];
; ..\component\Com\Implementation\Com.c	  7667        break;
; ..\component\Com\Implementation\Com.c	  7668  # endif
; ..\component\Com\Implementation\Com.c	  7669  # if (COM_EXISTS_FLOAT32_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7670      case COM_FLOAT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	  7671        SignalApplSourcePtrIntern = &SignalApplSourcePtrIntern[3];
; ..\component\Com\Implementation\Com.c	  7672        break;
; ..\component\Com\Implementation\Com.c	  7673  # endif
; ..\component\Com\Implementation\Com.c	  7674  # if (COM_EXISTS_UINT64_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7675      case COM_UINT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	  7676        SignalApplSourcePtrIntern = &SignalApplSourcePtrIntern[7];
; ..\component\Com\Implementation\Com.c	  7677        break;
; ..\component\Com\Implementation\Com.c	  7678  # endif
; ..\component\Com\Implementation\Com.c	  7679  # if (COM_EXISTS_SINT64_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7680      case COM_SINT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	  7681        SignalApplSourcePtrIntern = &SignalApplSourcePtrIntern[7];
; ..\component\Com\Implementation\Com.c	  7682        break;
; ..\component\Com\Implementation\Com.c	  7683  # endif
; ..\component\Com\Implementation\Com.c	  7684  # if (COM_EXISTS_FLOAT64_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7685      case COM_FLOAT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	  7686        SignalApplSourcePtrIntern = &SignalApplSourcePtrIntern[7];
; ..\component\Com\Implementation\Com.c	  7687        break;
; ..\component\Com\Implementation\Com.c	  7688  # endif
; ..\component\Com\Implementation\Com.c	  7689  # if (COM_EXISTS_SINT8_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7690      case COM_SINT8_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	  7691  # endif
; ..\component\Com\Implementation\Com.c	  7692  # if (COM_EXISTS_UINT8_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7693      case COM_UINT8_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	  7694  # endif
; ..\component\Com\Implementation\Com.c	  7695  # if (COM_EXISTS_UINT8_N_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7696      case COM_UINT8_N_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	  7697  # endif
; ..\component\Com\Implementation\Com.c	  7698  # if (COM_EXISTS_UINT8_DYN_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7699      case COM_UINT8_DYN_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	  7700  # endif
; ..\component\Com\Implementation\Com.c	  7701      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  7702        break;
; ..\component\Com\Implementation\Com.c	  7703    }
; ..\component\Com\Implementation\Com.c	  7704  
; ..\component\Com\Implementation\Com.c	  7705    COM_DUMMY_STATEMENT(SignalId);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  7706  
; ..\component\Com\Implementation\Com.c	  7707    return SignalApplSourcePtrIntern;
; ..\component\Com\Implementation\Com.c	  7708  }
; ..\component\Com\Implementation\Com.c	  7709  #endif
; ..\component\Com\Implementation\Com.c	  7710  
; ..\component\Com\Implementation\Com.c	  7711  #if ((COM_TXBUFFERUSEDOFTXSIGINFO == STD_ON) && ((COM_EXISTS_NBITNBYTE_BUSACCOFTXSIGINFO == STD_ON) || (COM_EXISTS_NBITNBYTE_SW_BUSACCOFTXSIGINFO == STD_ON)))
; ..\component\Com\Implementation\Com.c	  7712  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7713    Com_Signal_WriteSignal_NBITNBYTE
; ..\component\Com\Implementation\Com.c	  7714  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7715  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7716   *
; ..\component\Com\Implementation\Com.c	  7717   *
; ..\component\Com\Implementation\Com.c	  7718   *
; ..\component\Com\Implementation\Com.c	  7719   *
; ..\component\Com\Implementation\Com.c	  7720   *
; ..\component\Com\Implementation\Com.c	  7721   *
; ..\component\Com\Implementation\Com.c	  7722   *
; ..\component\Com\Implementation\Com.c	  7723   ********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7724  LOCAL_INLINE FUNC(void, COM_CODE) Com_Signal_WriteSignal_NBITNBYTE(Com_SignalIdType SignalId,   /* COV_WRITESIGNAL_NBITNBYTE_XX */
; ..\component\Com\Implementation\Com.c	  7725                                                                     P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) SignalApplSourcePtr, Com_BitPositionOfTxSigInfoType signalStartBit,
; ..\component\Com\Implementation\Com.c	  7726                                                                     P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusDestPtr, boolean isBusBigEndian)
; ..\component\Com\Implementation\Com.c	  7727  {
; ..\component\Com\Implementation\Com.c	  7728    uint8 mask;
; ..\component\Com\Implementation\Com.c	  7729    uint8 tmpByte;
; ..\component\Com\Implementation\Com.c	  7730    sint16_least i;
; ..\component\Com\Implementation\Com.c	  7731  
; ..\component\Com\Implementation\Com.c	  7732    uint16 maskCounter = 8u - (uint16) signalStartBit;
; ..\component\Com\Implementation\Com.c	  7733    Com_BitLengthOfTxSigInfoType signalBitCount = Com_GetBitLengthOfTxSigInfo(SignalId);
; ..\component\Com\Implementation\Com.c	  7734  
; ..\component\Com\Implementation\Com.c	  7735    /* #10 Write LSB of the passed signal */
; ..\component\Com\Implementation\Com.c	  7736    *SignalBusDestPtr &= COM_CAST2UINT8(~COM_CAST2UINT8(255u << signalStartBit)); /* SBSW_COM_VALID_PTR_BY_COMSTACK_01 */
; ..\component\Com\Implementation\Com.c	  7737    *SignalBusDestPtr |= COM_CAST2UINT8(*SignalApplSourcePtr << signalStartBit);  /* SBSW_COM_VALID_PTR_BY_COMSTACK_01 */
; ..\component\Com\Implementation\Com.c	  7738  
; ..\component\Com\Implementation\Com.c	  7739    /* #20 If more than 8 bits have to be copied */
; ..\component\Com\Implementation\Com.c	  7740    for(i = 1; i < ((sint16_least) Com_GetTxBufferLengthOfTxSigInfo(SignalId) - 1); i++)  /* COV_WRITESIGNAL_NBITNBYTE_XX */
; ..\component\Com\Implementation\Com.c	  7741    {
; ..\component\Com\Implementation\Com.c	  7742      /* #30 Copy all full bytes, byte align the source byte before it is copied */
; ..\component\Com\Implementation\Com.c	  7743  # if (CPU_BYTE_ORDER == HIGH_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  7744      tmpByte = COM_CAST2UINT8(SignalApplSourcePtr[-i + 1] >> (8u - signalStartBit));
; ..\component\Com\Implementation\Com.c	  7745      tmpByte |= COM_CAST2UINT8(SignalApplSourcePtr[-i] << signalStartBit);
; ..\component\Com\Implementation\Com.c	  7746  # else
; ..\component\Com\Implementation\Com.c	  7747      tmpByte = COM_CAST2UINT8(SignalApplSourcePtr[i - 1] >> (8u - signalStartBit));
; ..\component\Com\Implementation\Com.c	  7748      tmpByte |= COM_CAST2UINT8(SignalApplSourcePtr[i] << signalStartBit);
; ..\component\Com\Implementation\Com.c	  7749  # endif
; ..\component\Com\Implementation\Com.c	  7750  
; ..\component\Com\Implementation\Com.c	  7751  # if ((COM_EXISTS_NBITNBYTE_BUSACCOFTXSIGINFO == STD_ON) && (COM_EXISTS_NBITNBYTE_SW_BUSACCOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7752      /* If little endian and big endian signals exist */
; ..\component\Com\Implementation\Com.c	  7753      SignalBusDestPtr[Com_NBITNBYTE_GetEndiannesIndex(i, isBusBigEndian)] = tmpByte;     /* SBSW_COM_VALID_PTR_BY_COMSTACK_02 */ /* COV_COM_NBITNBYTE_ENDIANNESS */
; ..\component\Com\Implementation\Com.c	  7754  # elif (((CPU_BYTE_ORDER == HIGH_BYTE_FIRST)&&(COM_EXISTS_NBITNBYTE_BUSACCOFTXSIGINFO == STD_ON)) || ((CPU_BYTE_ORDER == LOW_BYTE_FIRST) && (COM_EXISTS_NBITNBYTE_SW_BUSACCOFTXSIGINFO == STD_ON)))
; ..\component\Com\Implementation\Com.c	  7755      /* #40 If bus signal is big endian, write with negative loop index as pointer is pointing to LSB (last byte). */
; ..\component\Com\Implementation\Com.c	  7756      SignalBusDestPtr[-i] = tmpByte;     /* SBSW_COM_VALID_PTR_BY_COMSTACK_02 */
; ..\component\Com\Implementation\Com.c	  7757  # else
; ..\component\Com\Implementation\Com.c	  7758      /* #50 If bus signal is little endian, write with positive loop index as pointer is pointing to LSB (first byte). */
; ..\component\Com\Implementation\Com.c	  7759      SignalBusDestPtr[i] = tmpByte;      /* SBSW_COM_VALID_PTR_BY_COMSTACK_02 */
; ..\component\Com\Implementation\Com.c	  7760  # endif
; ..\component\Com\Implementation\Com.c	  7761      maskCounter += 8u;
; ..\component\Com\Implementation\Com.c	  7762    }
; ..\component\Com\Implementation\Com.c	  7763  
; ..\component\Com\Implementation\Com.c	  7764  # if (CPU_BYTE_ORDER == HIGH_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	  7765    tmpByte = COM_CAST2UINT8(SignalApplSourcePtr[-i + 1] >> (8u - signalStartBit));
; ..\component\Com\Implementation\Com.c	  7766  
; ..\component\Com\Implementation\Com.c	  7767    if(COM_CAST2UINT8(i) <= (COM_CAST2UINT8(signalBitCount - 1u) >> 3u))
; ..\component\Com\Implementation\Com.c	  7768    {
; ..\component\Com\Implementation\Com.c	  7769      tmpByte |= COM_CAST2UINT8(SignalApplSourcePtr[-i] << signalStartBit);
; ..\component\Com\Implementation\Com.c	  7770    }
; ..\component\Com\Implementation\Com.c	  7771  # else
; ..\component\Com\Implementation\Com.c	  7772    tmpByte = COM_CAST2UINT8(SignalApplSourcePtr[i - 1] >> (8u - signalStartBit));
; ..\component\Com\Implementation\Com.c	  7773  
; ..\component\Com\Implementation\Com.c	  7774    if(COM_CAST2UINT8(i) <= (COM_CAST2UINT8(signalBitCount - 1u) >> 3u))
; ..\component\Com\Implementation\Com.c	  7775    {
; ..\component\Com\Implementation\Com.c	  7776      tmpByte |= COM_CAST2UINT8(SignalApplSourcePtr[i] << signalStartBit);
; ..\component\Com\Implementation\Com.c	  7777    }
; ..\component\Com\Implementation\Com.c	  7778  # endif
; ..\component\Com\Implementation\Com.c	  7779  
; ..\component\Com\Implementation\Com.c	  7780    mask = COM_CAST2UINT8(255u >> (8u - (signalBitCount - maskCounter)));
; ..\component\Com\Implementation\Com.c	  7781  
; ..\component\Com\Implementation\Com.c	  7782  # if ((COM_EXISTS_NBITNBYTE_BUSACCOFTXSIGINFO == STD_ON) && (COM_EXISTS_NBITNBYTE_SW_BUSACCOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7783    i = (sint16_least) Com_NBITNBYTE_GetEndiannesIndex(i, isBusBigEndian);        /* COV_COM_NBITNBYTE_ENDIANNESS */
; ..\component\Com\Implementation\Com.c	  7784  # elif (((CPU_BYTE_ORDER == HIGH_BYTE_FIRST)&&(COM_EXISTS_NBITNBYTE_BUSACCOFTXSIGINFO == STD_ON)) || ((CPU_BYTE_ORDER == LOW_BYTE_FIRST) && (COM_EXISTS_NBITNBYTE_SW_BUSACCOFTXSIGINFO == STD_ON)))
; ..\component\Com\Implementation\Com.c	  7785    /* For big endian bus signals */
; ..\component\Com\Implementation\Com.c	  7786    i = -i;
; ..\component\Com\Implementation\Com.c	  7787  # endif
; ..\component\Com\Implementation\Com.c	  7788    /* #60 Copy the remaining bits of last byte to the destination buffer */
; ..\component\Com\Implementation\Com.c	  7789    SignalBusDestPtr[i] = (SignalBusDestPtr[i] & COM_CAST2UINT8(~mask)) | (tmpByte & mask);       /* SBSW_COM_VALID_PTR_BY_COMSTACK_02 */
; ..\component\Com\Implementation\Com.c	  7790  
; ..\component\Com\Implementation\Com.c	  7791    COM_DUMMY_STATEMENT(isBusBigEndian);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  7792  }
; ..\component\Com\Implementation\Com.c	  7793  #endif
; ..\component\Com\Implementation\Com.c	  7794  #if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7795  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7796    Com_RxDlMon_MainFunctionRx
; ..\component\Com\Implementation\Com.c	  7797  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7798  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7799   *
; ..\component\Com\Implementation\Com.c	  7800   *
; ..\component\Com\Implementation\Com.c	  7801   *
; ..\component\Com\Implementation\Com.c	  7802   *
; ..\component\Com\Implementation\Com.c	  7803   *
; ..\component\Com\Implementation\Com.c	  7804   *
; ..\component\Com\Implementation\Com.c	  7805   *
; ..\component\Com\Implementation\Com.c	  7806   *
; ..\component\Com\Implementation\Com.c	  7807  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7808  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_MainFunctionRx(void)
; ..\component\Com\Implementation\Com.c	  7809  {
; ..\component\Com\Implementation\Com.c	  7810    /* Reception Deadline Monitoring.  */
; ..\component\Com\Implementation\Com.c	  7811    Com_SizeOfRxTOutInfoType idxRxTOutInfo;
; ..\component\Com\Implementation\Com.c	  7812  
; ..\component\Com\Implementation\Com.c	  7813    Com_RxDlMon_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  7814    /* #10 Iterate over all Rx deadline monitorings */
; ..\component\Com\Implementation\Com.c	  7815    for(idxRxTOutInfo = 0; idxRxTOutInfo < Com_GetSizeOfRxTOutInfo(); idxRxTOutInfo++)
; ..\component\Com\Implementation\Com.c	  7816    {
; ..\component\Com\Implementation\Com.c	  7817      /* #20 If the Rx deadline monitoring state machine is active and the timeout counter is greater zero, decrement the timeout counter */
; ..\component\Com\Implementation\Com.c	  7818      if(Com_LMgt_RxIpduDmActive(idxRxTOutInfo))
; ..\component\Com\Implementation\Com.c	  7819      {
; ..\component\Com\Implementation\Com.c	  7820        if(0u < Com_GetRxTOutCnt(idxRxTOutInfo))  /* COV_COM_RX_TOUT_CNT */
; ..\component\Com\Implementation\Com.c	  7821        {
; ..\component\Com\Implementation\Com.c	  7822          Com_DecRxTOutCnt(idxRxTOutInfo);        /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  7823  
; ..\component\Com\Implementation\Com.c	  7824          /* #30 If a timeout expired, reload the timeout counter */
; ..\component\Com\Implementation\Com.c	  7825          if(Com_GetRxTOutCnt(idxRxTOutInfo) == 0u)
; ..\component\Com\Implementation\Com.c	  7826          {
; ..\component\Com\Implementation\Com.c	  7827            Com_SetRxTOutCnt(idxRxTOutInfo, Com_GetFactorOfRxTOutInfo(idxRxTOutInfo) - 1u);       /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  7828  
; ..\component\Com\Implementation\Com.c	  7829            /* #40 Set the rx timeout state to timeout occurred */
; ..\component\Com\Implementation\Com.c	  7830            Com_LMgt_TimeoutOccurred(idxRxTOutInfo);      /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  7831  # if (COM_RXACCESSINFOREPLACESIGINDENDIDXOFRXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7832            /* #50 Do the timeout action for related ComSignals */
; ..\component\Com\Implementation\Com.c	  7833            Com_RxDlMon_SignalTimeoutAction(idxRxTOutInfo);
; ..\component\Com\Implementation\Com.c	  7834  # endif
; ..\component\Com\Implementation\Com.c	  7835  # if (COM_RXACCESSINFOREPLACEGRPSIGINDENDIDXOFRXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7836            /* #60 Do the timeout action for related ComSignalGroups */
; ..\component\Com\Implementation\Com.c	  7837            Com_RxDlMon_GroupSignalTimeoutAction(idxRxTOutInfo);
; ..\component\Com\Implementation\Com.c	  7838  # endif
; ..\component\Com\Implementation\Com.c	  7839  
; ..\component\Com\Implementation\Com.c	  7840  # if (COM_CBKRXTOUTFUNCPTRINDUSEDOFRXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7841            /* #70 Call related timeout notification functions */
; ..\component\Com\Implementation\Com.c	  7842            Com_RxDlMon_CallTimeOutNotifications(idxRxTOutInfo);
; ..\component\Com\Implementation\Com.c	  7843  # endif
; ..\component\Com\Implementation\Com.c	  7844  
; ..\component\Com\Implementation\Com.c	  7845          }
; ..\component\Com\Implementation\Com.c	  7846        }
; ..\component\Com\Implementation\Com.c	  7847      }
; ..\component\Com\Implementation\Com.c	  7848      Com_RxDlMon_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	  7849    }
; ..\component\Com\Implementation\Com.c	  7850    Com_RxDlMon_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  7851  }
; ..\component\Com\Implementation\Com.c	  7852  #endif
; ..\component\Com\Implementation\Com.c	  7853  
; ..\component\Com\Implementation\Com.c	  7854  #if(COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7855  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	  7856  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7857    Com_RxDlMon_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	  7858  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7859  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7860   *
; ..\component\Com\Implementation\Com.c	  7861   *
; ..\component\Com\Implementation\Com.c	  7862  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7863  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_EnterExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	  7864  {
; ..\component\Com\Implementation\Com.c	  7865    /* #10 Enter the rx deadline monitoring exclusive area */
; ..\component\Com\Implementation\Com.c	  7866    SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  7867  }
; ..\component\Com\Implementation\Com.c	  7868  
; ..\component\Com\Implementation\Com.c	  7869  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7870    Com_RxDlMon_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	  7871  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7872  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7873   *
; ..\component\Com\Implementation\Com.c	  7874   *
; ..\component\Com\Implementation\Com.c	  7875   *
; ..\component\Com\Implementation\Com.c	  7876  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7877  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_ExitExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	  7878  {
; ..\component\Com\Implementation\Com.c	  7879    /* #05 Reload the counter with the threshold value */
; ..\component\Com\Implementation\Com.c	  7880    Com_SetRxDeadlineMonitoringISRLockCounter(Com_GetRxDeadlineMonitoringISRLockThreshold());     /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	  7881    /* #10 Exit the rx deadline monitoring exclusive area */
; ..\component\Com\Implementation\Com.c	  7882    SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  7883  }
; ..\component\Com\Implementation\Com.c	  7884  
; ..\component\Com\Implementation\Com.c	  7885  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7886    Com_RxDlMon_ThresholdCheck
; ..\component\Com\Implementation\Com.c	  7887  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7888  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7889   *
; ..\component\Com\Implementation\Com.c	  7890   *
; ..\component\Com\Implementation\Com.c	  7891   *
; ..\component\Com\Implementation\Com.c	  7892  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7893  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_ThresholdCheck(void)
; ..\component\Com\Implementation\Com.c	  7894  {
; ..\component\Com\Implementation\Com.c	  7895    if(Com_GetRxDeadlineMonitoringISRLockCounter() > 0u)
; ..\component\Com\Implementation\Com.c	  7896    {
; ..\component\Com\Implementation\Com.c	  7897      Com_DecRxDeadlineMonitoringISRLockCounter();        /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	  7898    }
; ..\component\Com\Implementation\Com.c	  7899    else
; ..\component\Com\Implementation\Com.c	  7900    {
; ..\component\Com\Implementation\Com.c	  7901      Com_RxDlMon_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  7902      Com_RxDlMon_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  7903    }
; ..\component\Com\Implementation\Com.c	  7904  }
; ..\component\Com\Implementation\Com.c	  7905  
; ..\component\Com\Implementation\Com.c	  7906  #endif
; ..\component\Com\Implementation\Com.c	  7907  
; ..\component\Com\Implementation\Com.c	  7908  
; ..\component\Com\Implementation\Com.c	  7909  #if (COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7910  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7911    Com_RxDlMon_InitRxIpdu
; ..\component\Com\Implementation\Com.c	  7912  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7913  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7914   *
; ..\component\Com\Implementation\Com.c	  7915   *
; ..\component\Com\Implementation\Com.c	  7916   *
; ..\component\Com\Implementation\Com.c	  7917  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7918  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_InitRxIpdu(PduIdType ComPduId)
; ..\component\Com\Implementation\Com.c	  7919  {
; ..\component\Com\Implementation\Com.c	  7920    /* #10 Iterate over all related timeout data sets */
; ..\component\Com\Implementation\Com.c	  7921    Com_RxTOutInfoIndStartIdxOfRxPduInfoType idxRxTOutInfoInd = Com_GetRxTOutInfoIndStartIdxOfRxPduInfo(ComPduId);
; ..\component\Com\Implementation\Com.c	  7922    for(; idxRxTOutInfoInd < Com_GetRxTOutInfoIndEndIdxOfRxPduInfo(ComPduId); idxRxTOutInfoInd++)
; ..\component\Com\Implementation\Com.c	  7923    {
; ..\component\Com\Implementation\Com.c	  7924      /* #20 Set the Rx timeout counter value to the first timeout and set the deadline monitoring state machine to ACTIVE */
; ..\component\Com\Implementation\Com.c	  7925      Com_SetRxTOutCnt(Com_GetRxTOutInfoInd(idxRxTOutInfoInd), Com_GetFirstFactorOfRxTOutInfo(Com_GetRxTOutInfoInd(idxRxTOutInfoInd)));   /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  7926      Com_SetRxPduDmState(Com_GetRxTOutInfoInd(idxRxTOutInfoInd), COM_ACTIVE_RXPDUDMSTATE);       /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  7927    }
; ..\component\Com\Implementation\Com.c	  7928  }
; ..\component\Com\Implementation\Com.c	  7929  #endif
; ..\component\Com\Implementation\Com.c	  7930  
; ..\component\Com\Implementation\Com.c	  7931  #if (COM_RXTOUTINFOUSEDOFRXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7932  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7933    Com_RxDlMon_SigEvent
; ..\component\Com\Implementation\Com.c	  7934  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7935  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7936   *
; ..\component\Com\Implementation\Com.c	  7937   *
; ..\component\Com\Implementation\Com.c	  7938  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7939  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_SigEvent(Com_RxSigInfoIterType idxRxSigInfo)
; ..\component\Com\Implementation\Com.c	  7940  {
; ..\component\Com\Implementation\Com.c	  7941    /* #10 If the passed Rx ComSignal has a timeout, reload the timeout value */
; ..\component\Com\Implementation\Com.c	  7942    if(Com_IsRxTOutInfoUsedOfRxSigInfo(idxRxSigInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  7943    {
; ..\component\Com\Implementation\Com.c	  7944      Com_RxTOutInfoIdxOfRxSigInfoType idxRxTOutInfo = Com_GetRxTOutInfoIdxOfRxSigInfo(idxRxSigInfo);
; ..\component\Com\Implementation\Com.c	  7945      Com_SetRxTOutCnt(idxRxTOutInfo, Com_GetFactorOfRxTOutInfo(idxRxTOutInfo));  /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  7946    }
; ..\component\Com\Implementation\Com.c	  7947  }
; ..\component\Com\Implementation\Com.c	  7948  #endif
; ..\component\Com\Implementation\Com.c	  7949  
; ..\component\Com\Implementation\Com.c	  7950  #if (COM_RXTOUTINFOUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7951  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7952    Com_RxDlMon_SigGrpEvent
; ..\component\Com\Implementation\Com.c	  7953  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7954  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7955   *
; ..\component\Com\Implementation\Com.c	  7956   *
; ..\component\Com\Implementation\Com.c	  7957  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7958  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_SigGrpEvent(Com_RxSigGrpInfoIterType idxRxSigGrpInfo)
; ..\component\Com\Implementation\Com.c	  7959  {
; ..\component\Com\Implementation\Com.c	  7960    /* #10 If the passed Rx ComSignalGroup has a timeout, reload the timeout value */
; ..\component\Com\Implementation\Com.c	  7961    if(Com_IsRxTOutInfoUsedOfRxSigGrpInfo(idxRxSigGrpInfo))       /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  7962    {
; ..\component\Com\Implementation\Com.c	  7963      Com_RxTOutInfoIdxOfRxSigGrpInfoType idxRxTOutInfo = Com_GetRxTOutInfoIdxOfRxSigGrpInfo(idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	  7964      Com_SetRxTOutCnt(idxRxTOutInfo, Com_GetFactorOfRxTOutInfo(idxRxTOutInfo));  /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  7965    }
; ..\component\Com\Implementation\Com.c	  7966  }
; ..\component\Com\Implementation\Com.c	  7967  #endif
; ..\component\Com\Implementation\Com.c	  7968  
; ..\component\Com\Implementation\Com.c	  7969  
; ..\component\Com\Implementation\Com.c	  7970  #if (COM_RXACCESSINFOREPLACESIGINDENDIDXOFRXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  7971  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  7972    Com_RxDlMon_SignalTimeoutAction
; ..\component\Com\Implementation\Com.c	  7973  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7974  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  7975   *
; ..\component\Com\Implementation\Com.c	  7976   *
; ..\component\Com\Implementation\Com.c	  7977   *
; ..\component\Com\Implementation\Com.c	  7978   *
; ..\component\Com\Implementation\Com.c	  7979  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  7980  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_SignalTimeoutAction(Com_SizeOfRxTOutInfoType idxRxTOutInfo)
; ..\component\Com\Implementation\Com.c	  7981  {
; ..\component\Com\Implementation\Com.c	  7982    /* #10 Iterate over all related ComSignals with timeout replace value */
; ..\component\Com\Implementation\Com.c	  7983    Com_RxAccessInfoReplaceSigIndEndIdxOfRxTOutInfoType idxRxAccessInfoReplaceSigInd = Com_GetRxAccessInfoReplaceSigIndStartIdxOfRxTOutInfo(idxRxTOutInfo);
; ..\component\Com\Implementation\Com.c	  7984    for(; idxRxAccessInfoReplaceSigInd < Com_GetRxAccessInfoReplaceSigIndEndIdxOfRxTOutInfo(idxRxTOutInfo); idxRxAccessInfoReplaceSigInd++)
; ..\component\Com\Implementation\Com.c	  7985    {
; ..\component\Com\Implementation\Com.c	  7986      /* #20 Set the ComSignal buffer to the timeout replace value */
; ..\component\Com\Implementation\Com.c	  7987      Com_RxAccessInfoIterType idxRxAccessInfo = Com_GetRxAccessInfoReplaceSigInd(idxRxAccessInfoReplaceSigInd);
; ..\component\Com\Implementation\Com.c	  7988  /* jet: SetRxSigBufferValue snippet */
; ..\component\Com\Implementation\Com.c	  7989  # if ((COM_RXDATATIMEOUTSUBSTITUTIONVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7990      if(Com_IsRxDataTimeoutSubstitutionValueUsedOfRxAccessInfo(idxRxAccessInfo) && Com_IsBufferUsedOfRxAccessInfo(idxRxAccessInfo))      /* COV_COM_DLMON_SIGNALTIMEOUTACTION_TX */
; ..\component\Com\Implementation\Com.c	  7991      {
; ..\component\Com\Implementation\Com.c	  7992        Com_Signal_SetRxSigBufferValue(idxRxAccessInfo, Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetRxDataTimeoutSubstitutionValueIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	  7993      }
; ..\component\Com\Implementation\Com.c	  7994  # endif
; ..\component\Com\Implementation\Com.c	  7995  # if ((COM_CONSTVALUEARRAYBASEDRXDATATIMEOUTSUBSTITUTIONVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_RXSIGBUFFERARRAYBASEDBUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  7996      if(Com_IsConstValueArrayBasedRxDataTimeoutSubstitutionValueUsedOfRxAccessInfo(idxRxAccessInfo) && Com_IsRxSigBufferArrayBasedBufferUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_DLMON_SIGNALTIMEOUTACTION_DYN_TX */
; ..\component\Com\Implementation\Com.c	  7997      {
; ..\component\Com\Implementation\Com.c	  7998        Com_Signal_SetRxSigBufferArrayBasedValue(idxRxAccessInfo, Com_GetRxSigBufferArrayBasedBufferStartIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	  7999                                                 Com_GetConstValueArrayBasedRxDataTimeoutSubstitutionValueStartIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	  8000                                                 (PduLengthType) Com_GetConstValueArrayBasedRxDataTimeoutSubstitutionValueLengthOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	  8001      }
; ..\component\Com\Implementation\Com.c	  8002  # endif
; ..\component\Com\Implementation\Com.c	  8003  
; ..\component\Com\Implementation\Com.c	  8004  
; ..\component\Com\Implementation\Com.c	  8005  # if (COM_GWINFOUSEDOFRXACCESSINFO  == STD_ON)
; ..\component\Com\Implementation\Com.c	  8006      /* #30 If the ComSignal is routed, set the related Gateway Event flag to forward the Rx timeout value to Tx side */
; ..\component\Com\Implementation\Com.c	  8007      if(Com_IsGwInfoUsedOfRxAccessInfo(idxRxAccessInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8008      {
; ..\component\Com\Implementation\Com.c	  8009        Com_SetGwEvent(Com_GetGwInfoIdxOfRxAccessInfo(idxRxAccessInfo), TRUE);    /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  8010      }
; ..\component\Com\Implementation\Com.c	  8011  # endif
; ..\component\Com\Implementation\Com.c	  8012    }
; ..\component\Com\Implementation\Com.c	  8013  }
; ..\component\Com\Implementation\Com.c	  8014  #endif
; ..\component\Com\Implementation\Com.c	  8015  
; ..\component\Com\Implementation\Com.c	  8016  
; ..\component\Com\Implementation\Com.c	  8017  #if (COM_RXACCESSINFOREPLACEGRPSIGINDENDIDXOFRXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8018  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8019    Com_RxDlMon_GroupSignalTimeoutAction
; ..\component\Com\Implementation\Com.c	  8020  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8021  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8022   *
; ..\component\Com\Implementation\Com.c	  8023   *
; ..\component\Com\Implementation\Com.c	  8024   *
; ..\component\Com\Implementation\Com.c	  8025   *
; ..\component\Com\Implementation\Com.c	  8026  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8027  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_GroupSignalTimeoutAction(Com_SizeOfRxTOutInfoType idxRxTOutInfo)
; ..\component\Com\Implementation\Com.c	  8028  {
; ..\component\Com\Implementation\Com.c	  8029    /* #10 Iterate over all related ComGroupSignals with timeout replace value */
; ..\component\Com\Implementation\Com.c	  8030    Com_RxAccessInfoReplaceGrpSigIndEndIdxOfRxTOutInfoType idxRxAccessInfoReplaceGrpSigInd = Com_GetRxAccessInfoReplaceGrpSigIndStartIdxOfRxTOutInfo(idxRxTOutInfo);
; ..\component\Com\Implementation\Com.c	  8031    for(; idxRxAccessInfoReplaceGrpSigInd < Com_GetRxAccessInfoReplaceGrpSigIndEndIdxOfRxTOutInfo(idxRxTOutInfo); idxRxAccessInfoReplaceGrpSigInd++)
; ..\component\Com\Implementation\Com.c	  8032    {
; ..\component\Com\Implementation\Com.c	  8033      /* #20 Set the ComGroupSignal shadow buffer to the timeout replace value */
; ..\component\Com\Implementation\Com.c	  8034      Com_RxAccessInfoIterType idxRxAccessInfo = Com_GetRxAccessInfoReplaceGrpSigInd(idxRxAccessInfoReplaceGrpSigInd);
; ..\component\Com\Implementation\Com.c	  8035      /* jet: SetRxSigBufferValue snippet */
; ..\component\Com\Implementation\Com.c	  8036  # if ((COM_RXDATATIMEOUTSUBSTITUTIONVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_SHDBUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8037      if(Com_IsRxDataTimeoutSubstitutionValueUsedOfRxAccessInfo(idxRxAccessInfo) && Com_IsShdBufferUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_DLMON_SIGNALTIMEOUTACTION_TX */
; ..\component\Com\Implementation\Com.c	  8038      {
; ..\component\Com\Implementation\Com.c	  8039        Com_Signal_SetRxSigBufferValue(idxRxAccessInfo, Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetRxDataTimeoutSubstitutionValueIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	  8040      }
; ..\component\Com\Implementation\Com.c	  8041  # endif
; ..\component\Com\Implementation\Com.c	  8042  # if ((COM_CONSTVALUEARRAYBASEDRXDATATIMEOUTSUBSTITUTIONVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_RXSIGBUFFERARRAYBASEDSHDBUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8043      if(Com_IsConstValueArrayBasedRxDataTimeoutSubstitutionValueUsedOfRxAccessInfo(idxRxAccessInfo) && Com_IsRxSigBufferArrayBasedShdBufferUsedOfRxAccessInfo(idxRxAccessInfo))  /* COV_COM_DLMON_SIGNALTIMEOUTACTION_DYN_TX */
; ..\component\Com\Implementation\Com.c	  8044      {
; ..\component\Com\Implementation\Com.c	  8045        Com_Signal_SetRxSigBufferArrayBasedValue(idxRxAccessInfo, Com_GetRxSigBufferArrayBasedShdBufferStartIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	  8046                                                 Com_GetConstValueArrayBasedRxDataTimeoutSubstitutionValueStartIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	  8047                                                 (PduLengthType) Com_GetConstValueArrayBasedRxDataTimeoutSubstitutionValueLengthOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	  8048      }
; ..\component\Com\Implementation\Com.c	  8049  # endif
; ..\component\Com\Implementation\Com.c	  8050  
; ..\component\Com\Implementation\Com.c	  8051  
; ..\component\Com\Implementation\Com.c	  8052  # if (COM_GWINFOUSEDOFRXACCESSINFO  == STD_ON)
; ..\component\Com\Implementation\Com.c	  8053      /* #30 If the ComGroupSignal is routed, set the related Gateway Event flag to forward the Rx timeout value to Tx side */
; ..\component\Com\Implementation\Com.c	  8054      if(Com_IsGwInfoUsedOfRxAccessInfo(idxRxAccessInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8055      {
; ..\component\Com\Implementation\Com.c	  8056        Com_SetGwEvent(Com_GetGwInfoIdxOfRxAccessInfo(idxRxAccessInfo), TRUE);    /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  8057      }
; ..\component\Com\Implementation\Com.c	  8058  # endif
; ..\component\Com\Implementation\Com.c	  8059    }
; ..\component\Com\Implementation\Com.c	  8060  }
; ..\component\Com\Implementation\Com.c	  8061  #endif
; ..\component\Com\Implementation\Com.c	  8062  
; ..\component\Com\Implementation\Com.c	  8063  #if (COM_CBKRXTOUTFUNCPTRINDUSEDOFRXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8064  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8065    Com_RxDlMon_CallTimeOutNotifications
; ..\component\Com\Implementation\Com.c	  8066  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8067  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8068   *
; ..\component\Com\Implementation\Com.c	  8069   *
; ..\component\Com\Implementation\Com.c	  8070  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8071  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDlMon_CallTimeOutNotifications(Com_SizeOfRxTOutInfoType idxRxTOutInfo)
; ..\component\Com\Implementation\Com.c	  8072  {
; ..\component\Com\Implementation\Com.c	  8073    /* #10 Iterate over all related timeout notification functions and call them */
; ..\component\Com\Implementation\Com.c	  8074    Com_CbkRxTOutFuncPtrIndEndIdxOfRxTOutInfoType idxIndRxTOutFuncPtr = Com_GetCbkRxTOutFuncPtrIndStartIdxOfRxTOutInfo(idxRxTOutInfo);
; ..\component\Com\Implementation\Com.c	  8075  
; ..\component\Com\Implementation\Com.c	  8076    Com_RxDlMon_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  8077    for(; idxIndRxTOutFuncPtr < Com_GetCbkRxTOutFuncPtrIndEndIdxOfRxTOutInfo(idxRxTOutInfo); idxIndRxTOutFuncPtr++)
; ..\component\Com\Implementation\Com.c	  8078    {
; ..\component\Com\Implementation\Com.c	  8079      Com_GetCbkRxTOutFuncPtr(Com_GetCbkRxTOutFuncPtrInd(idxIndRxTOutFuncPtr)) ();        /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	  8080    }
; ..\component\Com\Implementation\Com.c	  8081    Com_RxDlMon_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  8082  }
; ..\component\Com\Implementation\Com.c	  8083  #endif
; ..\component\Com\Implementation\Com.c	  8084  
; ..\component\Com\Implementation\Com.c	  8085  #if (((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) || (COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFRXACCESSINFO == STD_ON)) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8086  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8087    Com_RxInv_Sig_PerformInvalidAction
; ..\component\Com\Implementation\Com.c	  8088  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8089  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8090   *
; ..\component\Com\Implementation\Com.c	  8091   *
; ..\component\Com\Implementation\Com.c	  8092  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8093  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxInv_Sig_PerformInvalidAction(Com_RxSigInfoIterType idxRxSigInfo /* COV_COM_PERFORMINVALIDACTION_X */
; ..\component\Com\Implementation\Com.c	  8094                                                                       , P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr)   /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	  8095  {
; ..\component\Com\Implementation\Com.c	  8096    /* #10 If an invalid notification is configured cache or call it, otherwise replace the current value with the initial value */
; ..\component\Com\Implementation\Com.c	  8097    Com_RxAccessInfoIdxOfRxSigInfoType idxRxAccessInfo = Com_GetRxAccessInfoIdxOfRxSigInfo(idxRxSigInfo);
; ..\component\Com\Implementation\Com.c	  8098  # if (COM_RXCBKFUNCPTRINVACKUSEDOFRXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8099    if(Com_IsRxCbkFuncPtrInvAckUsedOfRxSigInfo(idxRxSigInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8100    {
; ..\component\Com\Implementation\Com.c	  8101      Com_CacheOrCallRxCbkFctPtr((Com_RxCbkFuncPtrIterType) Com_GetRxCbkFuncPtrInvAckIdxOfRxSigInfo(idxRxSigInfo), (PduIdType) Com_GetRxPduInfoIdxOfRxAccessInfo(idxRxAccessInfo), fctPtrCacheStrctPtr);  /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	  8102    }
; ..\component\Com\Implementation\Com.c	  8103    else
; ..\component\Com\Implementation\Com.c	  8104  # endif
; ..\component\Com\Implementation\Com.c	  8105    {
; ..\component\Com\Implementation\Com.c	  8106      /* jet: SetRxSigBufferValue snippet */
; ..\component\Com\Implementation\Com.c	  8107  # if ((COM_INITVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8108      if(Com_IsInitValueUsedOfRxAccessInfo(idxRxAccessInfo) && Com_IsBufferUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_PERFORMINVALIDACTION */
; ..\component\Com\Implementation\Com.c	  8109      {
; ..\component\Com\Implementation\Com.c	  8110        Com_Signal_SetRxSigBufferValue(idxRxAccessInfo, Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetInitValueIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	  8111      }
; ..\component\Com\Implementation\Com.c	  8112  # endif
; ..\component\Com\Implementation\Com.c	  8113  # if ((COM_CONSTVALUEARRAYBASEDINITVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_RXSIGBUFFERARRAYBASEDBUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8114      if(Com_IsConstValueArrayBasedInitValueUsedOfRxAccessInfo(idxRxAccessInfo) && Com_IsRxSigBufferArrayBasedBufferUsedOfRxAccessInfo(idxRxAccessInfo))  /* COV_COM_PERFORMINVALIDACTION_ARRAYBASED */
; ..\component\Com\Implementation\Com.c	  8115      {
; ..\component\Com\Implementation\Com.c	  8116        Com_Signal_SetRxSigBufferArrayBasedValue(idxRxAccessInfo, Com_GetRxSigBufferArrayBasedBufferStartIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	  8117                                                 Com_GetConstValueArrayBasedInitValueStartIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	  8118                                                 (PduLengthType) Com_GetConstValueArrayBasedInitValueLengthOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	  8119      }
; ..\component\Com\Implementation\Com.c	  8120  # endif
; ..\component\Com\Implementation\Com.c	  8121  
; ..\component\Com\Implementation\Com.c	  8122  
; ..\component\Com\Implementation\Com.c	  8123      COM_DUMMY_STATEMENT(fctPtrCacheStrctPtr);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  8124    }
; ..\component\Com\Implementation\Com.c	  8125  }
; ..\component\Com\Implementation\Com.c	  8126  #endif
; ..\component\Com\Implementation\Com.c	  8127  
; ..\component\Com\Implementation\Com.c	  8128  
; ..\component\Com\Implementation\Com.c	  8129  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT8_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8130  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  8131  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8132    Com_RxInv_Sig_UInt8_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  8133  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8134  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8135   *
; ..\component\Com\Implementation\Com.c	  8136   *
; ..\component\Com\Implementation\Com.c	  8137  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8138  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_UInt8_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, uint8 tmpNewValue)
; ..\component\Com\Implementation\Com.c	  8139  {
; ..\component\Com\Implementation\Com.c	  8140    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8141  
; ..\component\Com\Implementation\Com.c	  8142    if(Com_IsInvValueUsedOfRxAccessInfo(idxRxAccessInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8143    {
; ..\component\Com\Implementation\Com.c	  8144      if(tmpNewValue == Com_GetConstValueUInt8(Com_GetInvValueIdxOfRxAccessInfo(idxRxAccessInfo)))
; ..\component\Com\Implementation\Com.c	  8145      {
; ..\component\Com\Implementation\Com.c	  8146        processState = INVALID;
; ..\component\Com\Implementation\Com.c	  8147      }
; ..\component\Com\Implementation\Com.c	  8148    }
; ..\component\Com\Implementation\Com.c	  8149    return processState;
; ..\component\Com\Implementation\Com.c	  8150  }
; ..\component\Com\Implementation\Com.c	  8151  #endif
; ..\component\Com\Implementation\Com.c	  8152  
; ..\component\Com\Implementation\Com.c	  8153  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT8_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8154  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  8155  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8156    Com_RxInv_Sig_SInt8_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  8157  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8158  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8159   *
; ..\component\Com\Implementation\Com.c	  8160   *
; ..\component\Com\Implementation\Com.c	  8161  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8162  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_SInt8_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, sint8 tmpNewValue)
; ..\component\Com\Implementation\Com.c	  8163  {
; ..\component\Com\Implementation\Com.c	  8164    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8165  
; ..\component\Com\Implementation\Com.c	  8166    if(Com_IsInvValueUsedOfRxAccessInfo(idxRxAccessInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8167    {
; ..\component\Com\Implementation\Com.c	  8168      if(tmpNewValue == Com_GetConstValueSInt8(Com_GetInvValueIdxOfRxAccessInfo(idxRxAccessInfo)))
; ..\component\Com\Implementation\Com.c	  8169      {
; ..\component\Com\Implementation\Com.c	  8170        processState = INVALID;
; ..\component\Com\Implementation\Com.c	  8171      }
; ..\component\Com\Implementation\Com.c	  8172    }
; ..\component\Com\Implementation\Com.c	  8173    return processState;
; ..\component\Com\Implementation\Com.c	  8174  }
; ..\component\Com\Implementation\Com.c	  8175  #endif
; ..\component\Com\Implementation\Com.c	  8176  
; ..\component\Com\Implementation\Com.c	  8177  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT16_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8178  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  8179  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8180    Com_RxInv_Sig_UInt16_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  8181  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8182  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8183   *
; ..\component\Com\Implementation\Com.c	  8184   *
; ..\component\Com\Implementation\Com.c	  8185  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8186  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_UInt16_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, uint16 tmpNewValue)
; ..\component\Com\Implementation\Com.c	  8187  {
; ..\component\Com\Implementation\Com.c	  8188    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8189  
; ..\component\Com\Implementation\Com.c	  8190    if(Com_IsInvValueUsedOfRxAccessInfo(idxRxAccessInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8191    {
; ..\component\Com\Implementation\Com.c	  8192      if(tmpNewValue == Com_GetConstValueUInt16(Com_GetInvValueIdxOfRxAccessInfo(idxRxAccessInfo)))
; ..\component\Com\Implementation\Com.c	  8193      {
; ..\component\Com\Implementation\Com.c	  8194        processState = INVALID;
; ..\component\Com\Implementation\Com.c	  8195      }
; ..\component\Com\Implementation\Com.c	  8196    }
; ..\component\Com\Implementation\Com.c	  8197    return processState;
; ..\component\Com\Implementation\Com.c	  8198  }
; ..\component\Com\Implementation\Com.c	  8199  #endif
; ..\component\Com\Implementation\Com.c	  8200  
; ..\component\Com\Implementation\Com.c	  8201  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT16_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8202  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  8203  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8204    Com_RxInv_Sig_SInt16_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  8205  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8206  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8207   *
; ..\component\Com\Implementation\Com.c	  8208   *
; ..\component\Com\Implementation\Com.c	  8209  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8210  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_SInt16_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, sint16 tmpNewValue)
; ..\component\Com\Implementation\Com.c	  8211  {
; ..\component\Com\Implementation\Com.c	  8212    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8213  
; ..\component\Com\Implementation\Com.c	  8214    if(Com_IsInvValueUsedOfRxAccessInfo(idxRxAccessInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8215    {
; ..\component\Com\Implementation\Com.c	  8216      if(tmpNewValue == Com_GetConstValueSInt16(Com_GetInvValueIdxOfRxAccessInfo(idxRxAccessInfo)))
; ..\component\Com\Implementation\Com.c	  8217      {
; ..\component\Com\Implementation\Com.c	  8218        processState = INVALID;
; ..\component\Com\Implementation\Com.c	  8219      }
; ..\component\Com\Implementation\Com.c	  8220    }
; ..\component\Com\Implementation\Com.c	  8221    return processState;
; ..\component\Com\Implementation\Com.c	  8222  }
; ..\component\Com\Implementation\Com.c	  8223  #endif
; ..\component\Com\Implementation\Com.c	  8224  
; ..\component\Com\Implementation\Com.c	  8225  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT32_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8226  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  8227  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8228    Com_RxInv_Sig_UInt32_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  8229  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8230  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8231   *
; ..\component\Com\Implementation\Com.c	  8232   *
; ..\component\Com\Implementation\Com.c	  8233  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8234  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_UInt32_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, uint32 tmpNewValue)
; ..\component\Com\Implementation\Com.c	  8235  {
; ..\component\Com\Implementation\Com.c	  8236    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8237  
; ..\component\Com\Implementation\Com.c	  8238    if(Com_IsInvValueUsedOfRxAccessInfo(idxRxAccessInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8239    {
; ..\component\Com\Implementation\Com.c	  8240      if(tmpNewValue == Com_GetConstValueUInt32(Com_GetInvValueIdxOfRxAccessInfo(idxRxAccessInfo)))
; ..\component\Com\Implementation\Com.c	  8241      {
; ..\component\Com\Implementation\Com.c	  8242        processState = INVALID;
; ..\component\Com\Implementation\Com.c	  8243      }
; ..\component\Com\Implementation\Com.c	  8244    }
; ..\component\Com\Implementation\Com.c	  8245    return processState;
; ..\component\Com\Implementation\Com.c	  8246  }
; ..\component\Com\Implementation\Com.c	  8247  #endif
; ..\component\Com\Implementation\Com.c	  8248  
; ..\component\Com\Implementation\Com.c	  8249  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT32_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8250  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  8251  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8252    Com_RxInv_Sig_SInt32_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  8253  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8254  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8255   *
; ..\component\Com\Implementation\Com.c	  8256   *
; ..\component\Com\Implementation\Com.c	  8257  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8258  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_SInt32_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, sint32 tmpNewValue)
; ..\component\Com\Implementation\Com.c	  8259  {
; ..\component\Com\Implementation\Com.c	  8260    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8261  
; ..\component\Com\Implementation\Com.c	  8262    if(Com_IsInvValueUsedOfRxAccessInfo(idxRxAccessInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8263    {
; ..\component\Com\Implementation\Com.c	  8264      if(tmpNewValue == Com_GetConstValueSInt32(Com_GetInvValueIdxOfRxAccessInfo(idxRxAccessInfo)))
; ..\component\Com\Implementation\Com.c	  8265      {
; ..\component\Com\Implementation\Com.c	  8266        processState = INVALID;
; ..\component\Com\Implementation\Com.c	  8267      }
; ..\component\Com\Implementation\Com.c	  8268    }
; ..\component\Com\Implementation\Com.c	  8269    return processState;
; ..\component\Com\Implementation\Com.c	  8270  }
; ..\component\Com\Implementation\Com.c	  8271  #endif
; ..\component\Com\Implementation\Com.c	  8272  
; ..\component\Com\Implementation\Com.c	  8273  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT64_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8274  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  8275  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8276    Com_RxInv_Sig_UInt64_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  8277  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8278  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8279   *
; ..\component\Com\Implementation\Com.c	  8280   *
; ..\component\Com\Implementation\Com.c	  8281  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8282  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_UInt64_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, uint64 tmpNewValue)
; ..\component\Com\Implementation\Com.c	  8283  {
; ..\component\Com\Implementation\Com.c	  8284    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8285  
; ..\component\Com\Implementation\Com.c	  8286    if(Com_IsInvValueUsedOfRxAccessInfo(idxRxAccessInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8287    {
; ..\component\Com\Implementation\Com.c	  8288      if(tmpNewValue == Com_GetConstValueUInt64(Com_GetInvValueIdxOfRxAccessInfo(idxRxAccessInfo)))
; ..\component\Com\Implementation\Com.c	  8289      {
; ..\component\Com\Implementation\Com.c	  8290        processState = INVALID;
; ..\component\Com\Implementation\Com.c	  8291      }
; ..\component\Com\Implementation\Com.c	  8292    }
; ..\component\Com\Implementation\Com.c	  8293    return processState;
; ..\component\Com\Implementation\Com.c	  8294  }
; ..\component\Com\Implementation\Com.c	  8295  #endif
; ..\component\Com\Implementation\Com.c	  8296  
; ..\component\Com\Implementation\Com.c	  8297  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_SINT64_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8298  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  8299  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8300    Com_RxInv_Sig_SInt64_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  8301  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8302  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8303   *
; ..\component\Com\Implementation\Com.c	  8304   *
; ..\component\Com\Implementation\Com.c	  8305  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8306  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_SInt64_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, sint64 tmpNewValue)
; ..\component\Com\Implementation\Com.c	  8307  {
; ..\component\Com\Implementation\Com.c	  8308    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8309  
; ..\component\Com\Implementation\Com.c	  8310    if(Com_IsInvValueUsedOfRxAccessInfo(idxRxAccessInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8311    {
; ..\component\Com\Implementation\Com.c	  8312      if(tmpNewValue == Com_GetConstValueSInt64(Com_GetInvValueIdxOfRxAccessInfo(idxRxAccessInfo)))
; ..\component\Com\Implementation\Com.c	  8313      {
; ..\component\Com\Implementation\Com.c	  8314        processState = INVALID;
; ..\component\Com\Implementation\Com.c	  8315      }
; ..\component\Com\Implementation\Com.c	  8316    }
; ..\component\Com\Implementation\Com.c	  8317    return processState;
; ..\component\Com\Implementation\Com.c	  8318  }
; ..\component\Com\Implementation\Com.c	  8319  #endif
; ..\component\Com\Implementation\Com.c	  8320  
; ..\component\Com\Implementation\Com.c	  8321  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_FLOAT32_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8322  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  8323  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8324    Com_RxInv_Sig_Float32_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  8325  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8326  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8327   *
; ..\component\Com\Implementation\Com.c	  8328   *
; ..\component\Com\Implementation\Com.c	  8329  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8330  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_Float32_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, float32 tmpNewValue)
; ..\component\Com\Implementation\Com.c	  8331  {
; ..\component\Com\Implementation\Com.c	  8332    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8333  
; ..\component\Com\Implementation\Com.c	  8334    if(Com_IsInvValueUsedOfRxAccessInfo(idxRxAccessInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8335    {
; ..\component\Com\Implementation\Com.c	  8336      if(Com_CompareFloat32Values(tmpNewValue, Com_GetConstValueFloat32(Com_GetInvValueIdxOfRxAccessInfo(idxRxAccessInfo))) == TRUE)
; ..\component\Com\Implementation\Com.c	  8337      {
; ..\component\Com\Implementation\Com.c	  8338        processState = INVALID;
; ..\component\Com\Implementation\Com.c	  8339      }
; ..\component\Com\Implementation\Com.c	  8340    }
; ..\component\Com\Implementation\Com.c	  8341    return processState;
; ..\component\Com\Implementation\Com.c	  8342  }
; ..\component\Com\Implementation\Com.c	  8343  #endif
; ..\component\Com\Implementation\Com.c	  8344  
; ..\component\Com\Implementation\Com.c	  8345  #if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_FLOAT64_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8346  /* jet: ComRxEvaluateInvValue snippet */
; ..\component\Com\Implementation\Com.c	  8347  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8348    Com_RxInv_Sig_Float64_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  8349  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8350  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8351   *
; ..\component\Com\Implementation\Com.c	  8352   *
; ..\component\Com\Implementation\Com.c	  8353  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8354  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_Float64_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, float64 tmpNewValue)
; ..\component\Com\Implementation\Com.c	  8355  {
; ..\component\Com\Implementation\Com.c	  8356    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8357  
; ..\component\Com\Implementation\Com.c	  8358    if(Com_IsInvValueUsedOfRxAccessInfo(idxRxAccessInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8359    {
; ..\component\Com\Implementation\Com.c	  8360      if(Com_CompareFloat64Values(tmpNewValue, Com_GetConstValueFloat64(Com_GetInvValueIdxOfRxAccessInfo(idxRxAccessInfo))) == TRUE)
; ..\component\Com\Implementation\Com.c	  8361      {
; ..\component\Com\Implementation\Com.c	  8362        processState = INVALID;
; ..\component\Com\Implementation\Com.c	  8363      }
; ..\component\Com\Implementation\Com.c	  8364    }
; ..\component\Com\Implementation\Com.c	  8365    return processState;
; ..\component\Com\Implementation\Com.c	  8366  }
; ..\component\Com\Implementation\Com.c	  8367  #endif
; ..\component\Com\Implementation\Com.c	  8368  
; ..\component\Com\Implementation\Com.c	  8369  #if ((COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT8_N_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8370  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8371    Com_RxInv_Sig_UInt8_N_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  8372  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8373  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8374   *
; ..\component\Com\Implementation\Com.c	  8375   *
; ..\component\Com\Implementation\Com.c	  8376  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8377  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_UInt8_N_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, AUTOMATIC) newValue)
; ..\component\Com\Implementation\Com.c	  8378  {
; ..\component\Com\Implementation\Com.c	  8379    Com_ConstValueArrayBasedIterType bufferIdx = 0;
; ..\component\Com\Implementation\Com.c	  8380    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8381    /* #10 Iterate over all buffer parts and evaluate if they are all invalid */
; ..\component\Com\Implementation\Com.c	  8382    if(Com_IsConstValueArrayBasedInvValueUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8383    {
; ..\component\Com\Implementation\Com.c	  8384      processState = INVALID;
; ..\component\Com\Implementation\Com.c	  8385      for(; bufferIdx < Com_GetConstValueArrayBasedInvValueLengthOfRxAccessInfo(idxRxAccessInfo); bufferIdx++)
; ..\component\Com\Implementation\Com.c	  8386      {
; ..\component\Com\Implementation\Com.c	  8387        if(newValue[bufferIdx] != Com_GetConstValueArrayBased(bufferIdx + Com_GetConstValueArrayBasedInvValueStartIdxOfRxAccessInfo(idxRxAccessInfo)))
; ..\component\Com\Implementation\Com.c	  8388        {
; ..\component\Com\Implementation\Com.c	  8389          processState = VALID;
; ..\component\Com\Implementation\Com.c	  8390          break;
; ..\component\Com\Implementation\Com.c	  8391        }
; ..\component\Com\Implementation\Com.c	  8392      }
; ..\component\Com\Implementation\Com.c	  8393    }
; ..\component\Com\Implementation\Com.c	  8394    return processState;
; ..\component\Com\Implementation\Com.c	  8395  }
; ..\component\Com\Implementation\Com.c	  8396  #endif
; ..\component\Com\Implementation\Com.c	  8397  
; ..\component\Com\Implementation\Com.c	  8398  #if ((COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON) && (COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8399  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8400    Com_RxInv_Sig_UInt8_Dyn_EvaluateInvalidValue
; ..\component\Com\Implementation\Com.c	  8401  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8402  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8403   *
; ..\component\Com\Implementation\Com.c	  8404   *
; ..\component\Com\Implementation\Com.c	  8405  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8406  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_Sig_UInt8_Dyn_EvaluateInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, P2CONST(uint8, AUTOMATIC, AUTOMATIC) newValue,
; ..\component\Com\Implementation\Com.c	  8407                                                                                                  PduLengthType sduLength)
; ..\component\Com\Implementation\Com.c	  8408  {
; ..\component\Com\Implementation\Com.c	  8409    Com_ConstValueArrayBasedIterType bufferIdx = 0;
; ..\component\Com\Implementation\Com.c	  8410    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8411  
; ..\component\Com\Implementation\Com.c	  8412    if(Com_IsConstValueArrayBasedInvValueUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8413    {
; ..\component\Com\Implementation\Com.c	  8414      if(Com_GetRxDynamicLength(sduLength, idxRxAccessInfo) == Com_GetConstValueArrayBasedInvValueLengthOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	  8415      {
; ..\component\Com\Implementation\Com.c	  8416        processState = INVALID;
; ..\component\Com\Implementation\Com.c	  8417        for(; bufferIdx < Com_GetConstValueArrayBasedInvValueLengthOfRxAccessInfo(idxRxAccessInfo); bufferIdx++)
; ..\component\Com\Implementation\Com.c	  8418        {
; ..\component\Com\Implementation\Com.c	  8419          if(newValue[bufferIdx] != Com_GetConstValueArrayBased(bufferIdx + Com_GetConstValueArrayBasedInvValueStartIdxOfRxAccessInfo(idxRxAccessInfo)))
; ..\component\Com\Implementation\Com.c	  8420          {
; ..\component\Com\Implementation\Com.c	  8421            processState = VALID;
; ..\component\Com\Implementation\Com.c	  8422            break;
; ..\component\Com\Implementation\Com.c	  8423          }
; ..\component\Com\Implementation\Com.c	  8424        }
; ..\component\Com\Implementation\Com.c	  8425      }
; ..\component\Com\Implementation\Com.c	  8426    }
; ..\component\Com\Implementation\Com.c	  8427  
; ..\component\Com\Implementation\Com.c	  8428    return processState;
; ..\component\Com\Implementation\Com.c	  8429  }
; ..\component\Com\Implementation\Com.c	  8430  #endif
; ..\component\Com\Implementation\Com.c	  8431  
; ..\component\Com\Implementation\Com.c	  8432  #if (COM_INVEVENTOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8433  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8434    Com_RxInv_SigGrpPerfomInvalidAction
; ..\component\Com\Implementation\Com.c	  8435  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8436  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8437   *
; ..\component\Com\Implementation\Com.c	  8438   *
; ..\component\Com\Implementation\Com.c	  8439   *
; ..\component\Com\Implementation\Com.c	  8440  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8441  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxInv_SigGrpPerfomInvalidAction(Com_RxSigGrpInfoIterType idxRxSigGrpInfo, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr)  /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	  8442  {
; ..\component\Com\Implementation\Com.c	  8443    /* #10 If the invalid action is notify, cache or call the invalid notification */
; ..\component\Com\Implementation\Com.c	  8444  # if (COM_RXCBKFUNCPTRINVACKUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8445    if(Com_IsRxCbkFuncPtrInvAckUsedOfRxSigGrpInfo(idxRxSigGrpInfo))       /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8446    {
; ..\component\Com\Implementation\Com.c	  8447      Com_CacheOrCallRxCbkFctPtr((Com_RxCbkFuncPtrIterType) Com_GetRxCbkFuncPtrInvAckIdxOfRxSigGrpInfo(idxRxSigGrpInfo), (PduIdType) Com_GetRxPduInfoIdxOfRxSigGrpInfo(idxRxSigGrpInfo), fctPtrCacheStrctPtr);    /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	  8448    }
; ..\component\Com\Implementation\Com.c	  8449    /* #20 Otherwise, iterate over all related ComGroupSignals and perform replace action. */
; ..\component\Com\Implementation\Com.c	  8450    else
; ..\component\Com\Implementation\Com.c	  8451  # endif
; ..\component\Com\Implementation\Com.c	  8452    {
; ..\component\Com\Implementation\Com.c	  8453      Com_RxAccessInfoIterType rxAccessInfoIndidx = Com_GetRxAccessInfoGrpSigIndStartIdxOfRxSigGrpInfo(idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	  8454      for(; rxAccessInfoIndidx < Com_GetRxAccessInfoGrpSigIndEndIdxOfRxSigGrpInfo(idxRxSigGrpInfo); rxAccessInfoIndidx++)
; ..\component\Com\Implementation\Com.c	  8455      {
; ..\component\Com\Implementation\Com.c	  8456        Com_RxAccessInfoIterType idxRxAccessInfo = Com_GetRxAccessInfoGrpSigInd(rxAccessInfoIndidx);
; ..\component\Com\Implementation\Com.c	  8457        /* jet: SetRxSigBufferValue snippet */
; ..\component\Com\Implementation\Com.c	  8458  # if ((COM_INITVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_SHDBUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8459        if(Com_IsInitValueUsedOfRxAccessInfo(idxRxAccessInfo) && Com_IsShdBufferUsedOfRxAccessInfo(idxRxAccessInfo))      /* COV_COM_PERFORMINVALIDACTION_GROUPSIGNAL */
; ..\component\Com\Implementation\Com.c	  8460        {
; ..\component\Com\Implementation\Com.c	  8461          Com_Signal_SetRxSigBufferValue(idxRxAccessInfo, Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetInitValueIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	  8462        }
; ..\component\Com\Implementation\Com.c	  8463  # endif
; ..\component\Com\Implementation\Com.c	  8464  # if ((COM_CONSTVALUEARRAYBASEDINITVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_RXSIGBUFFERARRAYBASEDSHDBUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8465        if(Com_IsConstValueArrayBasedInitValueUsedOfRxAccessInfo(idxRxAccessInfo) && Com_IsRxSigBufferArrayBasedShdBufferUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_PERFORMINVALIDACTION_ARRAYBASED_GROUPSIGNAL */
; ..\component\Com\Implementation\Com.c	  8466        {
; ..\component\Com\Implementation\Com.c	  8467          Com_Signal_SetRxSigBufferArrayBasedValue(idxRxAccessInfo, Com_GetRxSigBufferArrayBasedShdBufferStartIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	  8468                                                   Com_GetConstValueArrayBasedInitValueStartIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	  8469                                                   (PduLengthType) Com_GetConstValueArrayBasedInitValueLengthOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	  8470        }
; ..\component\Com\Implementation\Com.c	  8471  # endif
; ..\component\Com\Implementation\Com.c	  8472  
; ..\component\Com\Implementation\Com.c	  8473  
; ..\component\Com\Implementation\Com.c	  8474      }
; ..\component\Com\Implementation\Com.c	  8475      COM_DUMMY_STATEMENT(fctPtrCacheStrctPtr);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  8476    }
; ..\component\Com\Implementation\Com.c	  8477  }
; ..\component\Com\Implementation\Com.c	  8478  #endif
; ..\component\Com\Implementation\Com.c	  8479  
; ..\component\Com\Implementation\Com.c	  8480  
; ..\component\Com\Implementation\Com.c	  8481  #if (COM_INVEVENTOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8482  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8483    Com_RxInv_SigGrp
; ..\component\Com\Implementation\Com.c	  8484  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8485  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8486   *
; ..\component\Com\Implementation\Com.c	  8487   *
; ..\component\Com\Implementation\Com.c	  8488   *
; ..\component\Com\Implementation\Com.c	  8489   *
; ..\component\Com\Implementation\Com.c	  8490  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8491  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_SigGrp(Com_RxSigGrpInfoIterType idxRxSigGrpInfo, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr,
; ..\component\Com\Implementation\Com.c	  8492                                                                      PduLengthType sduLength)
; ..\component\Com\Implementation\Com.c	  8493  {
; ..\component\Com\Implementation\Com.c	  8494    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8495    /* #10 If the passed ComSignalGroup has any invalid action configured */
; ..\component\Com\Implementation\Com.c	  8496    if(Com_IsInvEventOfRxSigGrpInfo(idxRxSigGrpInfo))
; ..\component\Com\Implementation\Com.c	  8497    {
; ..\component\Com\Implementation\Com.c	  8498      {
; ..\component\Com\Implementation\Com.c	  8499        /* #20 Iterate over all related ComGroupSignals and evaluate whether the current shadow buffer value contains an invalid value */
; ..\component\Com\Implementation\Com.c	  8500        Com_RxAccessInfoIterType rxAccessInfoIndidx = Com_GetRxAccessInfoGrpSigIndStartIdxOfRxSigGrpInfo(idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	  8501        for(; rxAccessInfoIndidx < Com_GetRxAccessInfoGrpSigIndEndIdxOfRxSigGrpInfo(idxRxSigGrpInfo); rxAccessInfoIndidx++)
; ..\component\Com\Implementation\Com.c	  8502        {
; ..\component\Com\Implementation\Com.c	  8503          processState = Com_RxInv_GrpSigHasInvalidValue(Com_GetRxAccessInfoGrpSigInd(rxAccessInfoIndidx), sduLength);
; ..\component\Com\Implementation\Com.c	  8504          if(processState == INVALID)
; ..\component\Com\Implementation\Com.c	  8505          {
; ..\component\Com\Implementation\Com.c	  8506            /* #30 If any ComGroupSignal has an invalid value in its shadow buffer, perform the invalid action */
; ..\component\Com\Implementation\Com.c	  8507            Com_RxInv_SigGrpPerfomInvalidAction(idxRxSigGrpInfo, fctPtrCacheStrctPtr);    /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	  8508            break;
; ..\component\Com\Implementation\Com.c	  8509          }
; ..\component\Com\Implementation\Com.c	  8510        }
; ..\component\Com\Implementation\Com.c	  8511      }
; ..\component\Com\Implementation\Com.c	  8512    }
; ..\component\Com\Implementation\Com.c	  8513  
; ..\component\Com\Implementation\Com.c	  8514    return processState;
; ..\component\Com\Implementation\Com.c	  8515  }
; ..\component\Com\Implementation\Com.c	  8516  #endif
; ..\component\Com\Implementation\Com.c	  8517  
; ..\component\Com\Implementation\Com.c	  8518  
; ..\component\Com\Implementation\Com.c	  8519  #if (COM_INVEVENTOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8520  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8521    Com_RxInv_GrpSigHasInvalidValue
; ..\component\Com\Implementation\Com.c	  8522  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8523  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8524   *
; ..\component\Com\Implementation\Com.c	  8525   *
; ..\component\Com\Implementation\Com.c	  8526  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8527  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxInv_GrpSigHasInvalidValue(Com_RxAccessInfoIterType idxRxAccessInfo, PduLengthType sduLength)
; ..\component\Com\Implementation\Com.c	  8528  {
; ..\component\Com\Implementation\Com.c	  8529    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8530  
; ..\component\Com\Implementation\Com.c	  8531    switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	  8532    {
; ..\component\Com\Implementation\Com.c	  8533  # if(COM_TMPBUFFERUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8534  /* jet: GeneralSwitchCasePerApplType snippet */
; ..\component\Com\Implementation\Com.c	  8535  #  if (COM_TMPRXSHDBUFFERUINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  8536      case COM_UINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8537      {
; ..\component\Com\Implementation\Com.c	  8538        processState = Com_RxInv_Sig_UInt8_EvaluateInvalidValue(idxRxAccessInfo, Com_GetTmpRxShdBufferUInt8(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));
; ..\component\Com\Implementation\Com.c	  8539        break;
; ..\component\Com\Implementation\Com.c	  8540      }
; ..\component\Com\Implementation\Com.c	  8541  #  endif
; ..\component\Com\Implementation\Com.c	  8542  #  if (COM_TMPRXSHDBUFFERSINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  8543      case COM_SINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8544      {
; ..\component\Com\Implementation\Com.c	  8545        processState = Com_RxInv_Sig_SInt8_EvaluateInvalidValue(idxRxAccessInfo, Com_GetTmpRxShdBufferSInt8(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));
; ..\component\Com\Implementation\Com.c	  8546        break;
; ..\component\Com\Implementation\Com.c	  8547      }
; ..\component\Com\Implementation\Com.c	  8548  #  endif
; ..\component\Com\Implementation\Com.c	  8549  #  if (COM_TMPRXSHDBUFFERUINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  8550      case COM_UINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8551      {
; ..\component\Com\Implementation\Com.c	  8552        processState = Com_RxInv_Sig_UInt16_EvaluateInvalidValue(idxRxAccessInfo, Com_GetTmpRxShdBufferUInt16(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));
; ..\component\Com\Implementation\Com.c	  8553        break;
; ..\component\Com\Implementation\Com.c	  8554      }
; ..\component\Com\Implementation\Com.c	  8555  #  endif
; ..\component\Com\Implementation\Com.c	  8556  #  if (COM_TMPRXSHDBUFFERSINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  8557      case COM_SINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8558      {
; ..\component\Com\Implementation\Com.c	  8559        processState = Com_RxInv_Sig_SInt16_EvaluateInvalidValue(idxRxAccessInfo, Com_GetTmpRxShdBufferSInt16(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));
; ..\component\Com\Implementation\Com.c	  8560        break;
; ..\component\Com\Implementation\Com.c	  8561      }
; ..\component\Com\Implementation\Com.c	  8562  #  endif
; ..\component\Com\Implementation\Com.c	  8563  #  if (COM_TMPRXSHDBUFFERUINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  8564      case COM_UINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8565      {
; ..\component\Com\Implementation\Com.c	  8566        processState = Com_RxInv_Sig_UInt32_EvaluateInvalidValue(idxRxAccessInfo, Com_GetTmpRxShdBufferUInt32(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));
; ..\component\Com\Implementation\Com.c	  8567        break;
; ..\component\Com\Implementation\Com.c	  8568      }
; ..\component\Com\Implementation\Com.c	  8569  #  endif
; ..\component\Com\Implementation\Com.c	  8570  #  if (COM_TMPRXSHDBUFFERSINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  8571      case COM_SINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8572      {
; ..\component\Com\Implementation\Com.c	  8573        processState = Com_RxInv_Sig_SInt32_EvaluateInvalidValue(idxRxAccessInfo, Com_GetTmpRxShdBufferSInt32(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));
; ..\component\Com\Implementation\Com.c	  8574        break;
; ..\component\Com\Implementation\Com.c	  8575      }
; ..\component\Com\Implementation\Com.c	  8576  #  endif
; ..\component\Com\Implementation\Com.c	  8577  #  if (COM_TMPRXSHDBUFFERUINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  8578      case COM_UINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8579      {
; ..\component\Com\Implementation\Com.c	  8580        processState = Com_RxInv_Sig_UInt64_EvaluateInvalidValue(idxRxAccessInfo, Com_GetTmpRxShdBufferUInt64(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));
; ..\component\Com\Implementation\Com.c	  8581        break;
; ..\component\Com\Implementation\Com.c	  8582      }
; ..\component\Com\Implementation\Com.c	  8583  #  endif
; ..\component\Com\Implementation\Com.c	  8584  #  if (COM_TMPRXSHDBUFFERSINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  8585      case COM_SINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8586      {
; ..\component\Com\Implementation\Com.c	  8587        processState = Com_RxInv_Sig_SInt64_EvaluateInvalidValue(idxRxAccessInfo, Com_GetTmpRxShdBufferSInt64(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));
; ..\component\Com\Implementation\Com.c	  8588        break;
; ..\component\Com\Implementation\Com.c	  8589      }
; ..\component\Com\Implementation\Com.c	  8590  #  endif
; ..\component\Com\Implementation\Com.c	  8591  #  if (COM_TMPRXSHDBUFFERFLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  8592      case COM_FLOAT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8593      {
; ..\component\Com\Implementation\Com.c	  8594        processState = Com_RxInv_Sig_Float32_EvaluateInvalidValue(idxRxAccessInfo, Com_GetTmpRxShdBufferFloat32(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));
; ..\component\Com\Implementation\Com.c	  8595        break;
; ..\component\Com\Implementation\Com.c	  8596      }
; ..\component\Com\Implementation\Com.c	  8597  #  endif
; ..\component\Com\Implementation\Com.c	  8598  #  if (COM_TMPRXSHDBUFFERFLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  8599      case COM_FLOAT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8600      {
; ..\component\Com\Implementation\Com.c	  8601        processState = Com_RxInv_Sig_Float64_EvaluateInvalidValue(idxRxAccessInfo, Com_GetTmpRxShdBufferFloat64(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));
; ..\component\Com\Implementation\Com.c	  8602        break;
; ..\component\Com\Implementation\Com.c	  8603      }
; ..\component\Com\Implementation\Com.c	  8604  #  endif
; ..\component\Com\Implementation\Com.c	  8605  # endif
; ..\component\Com\Implementation\Com.c	  8606  # if ((COM_TMPRXSHDBUFFERARRAYBASEDTMPBUFFERUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT8_N_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8607      case COM_UINT8_N_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8608      {
; ..\component\Com\Implementation\Com.c	  8609        processState = Com_RxInv_Sig_UInt8_N_EvaluateInvalidValue(idxRxAccessInfo, Com_GetAddrTmpRxShdBufferArrayBased(Com_GetTmpRxShdBufferArrayBasedTmpBufferStartIdxOfRxAccessInfo(idxRxAccessInfo))); /* SBSW_COM_VALID_PTR_BY_COMSTACK_01 */
; ..\component\Com\Implementation\Com.c	  8610        break;
; ..\component\Com\Implementation\Com.c	  8611      }
; ..\component\Com\Implementation\Com.c	  8612  # endif
; ..\component\Com\Implementation\Com.c	  8613  # if ((COM_TMPRXSHDBUFFERARRAYBASEDTMPBUFFERUSEDOFRXACCESSINFO == STD_ON) && (COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  8614      case COM_UINT8_DYN_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8615      {
; ..\component\Com\Implementation\Com.c	  8616        processState = Com_RxInv_Sig_UInt8_Dyn_EvaluateInvalidValue(idxRxAccessInfo, Com_GetAddrTmpRxShdBufferArrayBased(Com_GetTmpRxShdBufferArrayBasedTmpBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), sduLength);    /* SBSW_COM_VALID_PTR_BY_COMSTACK_01 */
; ..\component\Com\Implementation\Com.c	  8617        break;
; ..\component\Com\Implementation\Com.c	  8618      }
; ..\component\Com\Implementation\Com.c	  8619  # endif
; ..\component\Com\Implementation\Com.c	  8620      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  8621        break;
; ..\component\Com\Implementation\Com.c	  8622    }
; ..\component\Com\Implementation\Com.c	  8623  
; ..\component\Com\Implementation\Com.c	  8624    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  8625    COM_DUMMY_STATEMENT(sduLength);       /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  8626    return processState;
; ..\component\Com\Implementation\Com.c	  8627  }       /* PRQA S 6030, 6050 */ /* MD_MSR_STCYC, MD_MSR_STCAL */
; ..\component\Com\Implementation\Com.c	  8628  #endif
; ..\component\Com\Implementation\Com.c	  8629  
; ..\component\Com\Implementation\Com.c	  8630  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8631  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8632    Com_RxIndication_Processing
; ..\component\Com\Implementation\Com.c	  8633  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8634  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8635   *
; ..\component\Com\Implementation\Com.c	  8636   *
; ..\component\Com\Implementation\Com.c	  8637   *
; ..\component\Com\Implementation\Com.c	  8638   *
; ..\component\Com\Implementation\Com.c	  8639   *
; ..\component\Com\Implementation\Com.c	  8640   *
; ..\component\Com\Implementation\Com.c	  8641   *
; ..\component\Com\Implementation\Com.c	  8642   *
; ..\component\Com\Implementation\Com.c	  8643   *
; ..\component\Com\Implementation\Com.c	  8644  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8645  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_RxIndication_Processing(PduIdType RxPduId, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr)
; ..\component\Com\Implementation\Com.c	  8646  {
; ..\component\Com\Implementation\Com.c	  8647    boolean retVal = FALSE;
; ..\component\Com\Implementation\Com.c	  8648  
; ..\component\Com\Implementation\Com.c	  8649    /* #10 If the ComIPdu is active */
; ..\component\Com\Implementation\Com.c	  8650    if(Com_IsRxPduGrpActive(RxPduId))     /* COV_COM_NO_IPDUGROUPS */ /* PRQA S 2842 */ /* MD_Com_2842 */ /* \trace SPEC-2736845 */ /* \trace SPEC-2736846 */
; ..\component\Com\Implementation\Com.c	  8651    {
; ..\component\Com\Implementation\Com.c	  8652      retVal = TRUE;
; ..\component\Com\Implementation\Com.c	  8653      /* \trace CREQ-103160 */
; ..\component\Com\Implementation\Com.c	  8654  # if (COM_RXPDUCALLOUTFUNCPTRUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8655      /* Rx I-PDU callout.  */
; ..\component\Com\Implementation\Com.c	  8656      /* #20 Call callout function if configured */
; ..\component\Com\Implementation\Com.c	  8657      if(Com_IsRxPduCalloutFuncPtrUsedOfRxPduInfo(RxPduId))       /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8658      {
; ..\component\Com\Implementation\Com.c	  8659        Com_RxPduCalloutFuncPtrIdxOfRxPduInfoType idx = Com_GetRxPduCalloutFuncPtrIdxOfRxPduInfo(RxPduId);
; ..\component\Com\Implementation\Com.c	  8660        /* Call the callout with the PduInfo (if ASR 4.1.x callouts are enabled) or with the SduDataPtr */
; ..\component\Com\Implementation\Com.c	  8661  #  if (COM_IPDUCALLOUT_USEPDUINFOPTR == STD_ON)
; ..\component\Com\Implementation\Com.c	  8662        retVal = Com_GetRxPduCalloutFuncPtr(idx) (RxPduId, (P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA)) PduInfoPtr);  /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	  8663  #  else
; ..\component\Com\Implementation\Com.c	  8664        retVal = Com_GetRxPduCalloutFuncPtr(idx) (RxPduId, (P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)) PduInfoPtr->SduDataPtr);    /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	  8665  #  endif
; ..\component\Com\Implementation\Com.c	  8666      }
; ..\component\Com\Implementation\Com.c	  8667  
; ..\component\Com\Implementation\Com.c	  8668      /* #40 If the callout result is positive or not configured */
; ..\component\Com\Implementation\Com.c	  8669      if(retVal == TRUE)
; ..\component\Com\Implementation\Com.c	  8670  # endif
; ..\component\Com\Implementation\Com.c	  8671      {
; ..\component\Com\Implementation\Com.c	  8672        PduInfoType PduInfoLocal;
; ..\component\Com\Implementation\Com.c	  8673        PduInfoLocal.SduDataPtr = PduInfoPtr->SduDataPtr;
; ..\component\Com\Implementation\Com.c	  8674        PduInfoLocal.SduLength = PduInfoPtr->SduLength;
; ..\component\Com\Implementation\Com.c	  8675  
; ..\component\Com\Implementation\Com.c	  8676  # if(COM_METADATALENGTHOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8677        PduInfoLocal.SduLength -= Com_GetMetaDataLengthOfRxPduInfo(RxPduId);
; ..\component\Com\Implementation\Com.c	  8678  # endif
; ..\component\Com\Implementation\Com.c	  8679  
; ..\component\Com\Implementation\Com.c	  8680  # if (COM_GENERATED_DESCRIPTION_ROUTING == STD_ON)      /* COV_COM_VAR_ELISA_STD_OFF_XF */
; ..\component\Com\Implementation\Com.c	  8681        /* #50 Call the Com_RxGwIndication to process the ComDescription routings */
; ..\component\Com\Implementation\Com.c	  8682        Com_RxGwIndication(RxPduId, &PduInfoLocal);       /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  8683  # endif
; ..\component\Com\Implementation\Com.c	  8684        /* #60 Call Com_RxIndication_ProcessPdu to process the passed Rx ComIPdu */
; ..\component\Com\Implementation\Com.c	  8685        Com_RxIndication_ProcessPdu(RxPduId, &PduInfoLocal);      /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  8686      }   /* Rx I-PDU callout */
; ..\component\Com\Implementation\Com.c	  8687    }     /* Active check */
; ..\component\Com\Implementation\Com.c	  8688  
; ..\component\Com\Implementation\Com.c	  8689    return retVal;
; ..\component\Com\Implementation\Com.c	  8690  }
; ..\component\Com\Implementation\Com.c	  8691  #endif
; ..\component\Com\Implementation\Com.c	  8692  
; ..\component\Com\Implementation\Com.c	  8693  #if (COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8694  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8695    Com_TpRxIndication_Processing
; ..\component\Com\Implementation\Com.c	  8696  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8697  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8698   *
; ..\component\Com\Implementation\Com.c	  8699   *
; ..\component\Com\Implementation\Com.c	  8700   *
; ..\component\Com\Implementation\Com.c	  8701   *
; ..\component\Com\Implementation\Com.c	  8702   *
; ..\component\Com\Implementation\Com.c	  8703   *
; ..\component\Com\Implementation\Com.c	  8704   *
; ..\component\Com\Implementation\Com.c	  8705   *
; ..\component\Com\Implementation\Com.c	  8706   *
; ..\component\Com\Implementation\Com.c	  8707  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8708  LOCAL_INLINE FUNC(void, COM_CODE) Com_TpRxIndication_Processing(PduIdType PduId, Std_ReturnType Result)
; ..\component\Com\Implementation\Com.c	  8709  {
; ..\component\Com\Implementation\Com.c	  8710    boolean resetRequired = FALSE;
; ..\component\Com\Implementation\Com.c	  8711    Com_RxTpInfoIdxOfRxPduInfoType rxTpPduInfoIdx = Com_GetRxTpInfoIdxOfRxPduInfo(PduId);
; ..\component\Com\Implementation\Com.c	  8712  
; ..\component\Com\Implementation\Com.c	  8713    switch (Com_GetRxTpConnectionState(rxTpPduInfoIdx))
; ..\component\Com\Implementation\Com.c	  8714    {
; ..\component\Com\Implementation\Com.c	  8715        /* #10 If RXTPCONNECTIONSTATE is COPYING or RECEPTION_STARTED, reset Tp connection. */
; ..\component\Com\Implementation\Com.c	  8716      case COM_RECEPTION_STARTED_RXTPCONNECTIONSTATE:
; ..\component\Com\Implementation\Com.c	  8717      case COM_COPYING_RXTPCONNECTIONSTATE:
; ..\component\Com\Implementation\Com.c	  8718      {
; ..\component\Com\Implementation\Com.c	  8719        resetRequired = TRUE;
; ..\component\Com\Implementation\Com.c	  8720        break;
; ..\component\Com\Implementation\Com.c	  8721      }
; ..\component\Com\Implementation\Com.c	  8722        /* #20 If RXTPCONNECTIONSTATE is WAITING_FOR_INDICATION */
; ..\component\Com\Implementation\Com.c	  8723      case COM_WAITING_FOR_INDICATION_RXTPCONNECTIONSTATE:
; ..\component\Com\Implementation\Com.c	  8724      {
; ..\component\Com\Implementation\Com.c	  8725        /* #30 If the passed Result is negative, reset TP connection. */
; ..\component\Com\Implementation\Com.c	  8726        if(Result != E_OK)
; ..\component\Com\Implementation\Com.c	  8727        {
; ..\component\Com\Implementation\Com.c	  8728          resetRequired = TRUE;
; ..\component\Com\Implementation\Com.c	  8729        }
; ..\component\Com\Implementation\Com.c	  8730        /* #40 Otherwise the Rx TP ComIPdu reception was successful */
; ..\component\Com\Implementation\Com.c	  8731        else
; ..\component\Com\Implementation\Com.c	  8732        {
; ..\component\Com\Implementation\Com.c	  8733          PduInfoType rxPduInfo;
; ..\component\Com\Implementation\Com.c	  8734          rxPduInfo.SduDataPtr = Com_GetAddrRxTpBuffer(Com_GetRxTpBufferStartIdxOfRxTpInfo(rxTpPduInfoIdx));
; ..\component\Com\Implementation\Com.c	  8735          rxPduInfo.SduLength = Com_GetRxTpSduLength(rxTpPduInfoIdx);
; ..\component\Com\Implementation\Com.c	  8736  
; ..\component\Com\Implementation\Com.c	  8737  # if (COM_RXTPBUFFERMETADATAUSEDOFRXTPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8738          /* #45 If meta data is configured, add meta data length */
; ..\component\Com\Implementation\Com.c	  8739          rxPduInfo.SduLength += Com_GetMetaDataLengthOfRxPduInfo(PduId);
; ..\component\Com\Implementation\Com.c	  8740  # endif
; ..\component\Com\Implementation\Com.c	  8741  
; ..\component\Com\Implementation\Com.c	  8742          /* #50 If deferred processing is required, set RxTpConnectionState to BUFFER_LOCKED. */
; ..\component\Com\Implementation\Com.c	  8743  # if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8744          if(Com_IsHandleRxPduDeferredUsedOfRxPduInfo(PduId))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8745          {
; ..\component\Com\Implementation\Com.c	  8746            Com_SetRxTpConnectionState(rxTpPduInfoIdx, COM_BUFFER_LOCKED_RXTPCONNECTIONSTATE);    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  8747            resetRequired = !Com_RxIndication_Processing(PduId, &rxPduInfo);      /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  8748          }
; ..\component\Com\Implementation\Com.c	  8749          else
; ..\component\Com\Implementation\Com.c	  8750  # endif
; ..\component\Com\Implementation\Com.c	  8751            /* #60 Otherwise initiate processing and reset TP machine afterwards. */
; ..\component\Com\Implementation\Com.c	  8752          {
; ..\component\Com\Implementation\Com.c	  8753            (void) Com_RxIndication_Processing(PduId, &rxPduInfo);        /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  8754            resetRequired = TRUE;
; ..\component\Com\Implementation\Com.c	  8755          }
; ..\component\Com\Implementation\Com.c	  8756        }
; ..\component\Com\Implementation\Com.c	  8757        break;
; ..\component\Com\Implementation\Com.c	  8758      }
; ..\component\Com\Implementation\Com.c	  8759        /* #70 Do nothing if RxTpConnectionState is BUFFER_LOCKED or READY */
; ..\component\Com\Implementation\Com.c	  8760      default:
; ..\component\Com\Implementation\Com.c	  8761      {
; ..\component\Com\Implementation\Com.c	  8762        /* Do nothing. */
; ..\component\Com\Implementation\Com.c	  8763        break;
; ..\component\Com\Implementation\Com.c	  8764      }
; ..\component\Com\Implementation\Com.c	  8765    }
; ..\component\Com\Implementation\Com.c	  8766  
; ..\component\Com\Implementation\Com.c	  8767    /* Reset TP state machine if required. */
; ..\component\Com\Implementation\Com.c	  8768    if(resetRequired == TRUE)
; ..\component\Com\Implementation\Com.c	  8769    {
; ..\component\Com\Implementation\Com.c	  8770      SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8771      Com_ResetRxTpConnection(PduId);
; ..\component\Com\Implementation\Com.c	  8772      SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8773    }
; ..\component\Com\Implementation\Com.c	  8774  }
; ..\component\Com\Implementation\Com.c	  8775  #endif
; ..\component\Com\Implementation\Com.c	  8776  
; ..\component\Com\Implementation\Com.c	  8777  #if (COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8778  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8779    Com_ResetRxTpConnection
; ..\component\Com\Implementation\Com.c	  8780  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8781  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8782   *
; ..\component\Com\Implementation\Com.c	  8783   *
; ..\component\Com\Implementation\Com.c	  8784   *
; ..\component\Com\Implementation\Com.c	  8785  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8786  LOCAL_INLINE FUNC(void, COM_CODE) Com_ResetRxTpConnection(PduIdType PduId)
; ..\component\Com\Implementation\Com.c	  8787  {
; ..\component\Com\Implementation\Com.c	  8788    Com_RxTpInfoIdxOfRxPduInfoType rxTpPduInfoIdx = Com_GetRxTpInfoIdxOfRxPduInfo(PduId);
; ..\component\Com\Implementation\Com.c	  8789  
; ..\component\Com\Implementation\Com.c	  8790  # if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8791    if(Com_IsHandleRxPduDeferredUsedOfRxPduInfo(PduId))   /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  8792    {
; ..\component\Com\Implementation\Com.c	  8793      /* #10 Reset the "Handle Deferred" flag */
; ..\component\Com\Implementation\Com.c	  8794      Com_SetHandleRxPduDeferred(Com_GetHandleRxPduDeferredIdxOfRxPduInfo(PduId), 0);     /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  8795    }
; ..\component\Com\Implementation\Com.c	  8796  # endif
; ..\component\Com\Implementation\Com.c	  8797  
; ..\component\Com\Implementation\Com.c	  8798    /* #20 Reset WrittenBytesCounter, TpSduLength and TP Connection state */
; ..\component\Com\Implementation\Com.c	  8799    Com_SetRxTpWrittenBytesCounter(rxTpPduInfoIdx, 0);    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  8800    Com_SetRxTpSduLength(rxTpPduInfoIdx, 0);      /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  8801    Com_SetRxTpConnectionState(rxTpPduInfoIdx, COM_READY_RXTPCONNECTIONSTATE);    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  8802  }
; ..\component\Com\Implementation\Com.c	  8803  #endif
; ..\component\Com\Implementation\Com.c	  8804  
; ..\component\Com\Implementation\Com.c	  8805  
; ..\component\Com\Implementation\Com.c	  8806  #if (COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8807  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8808    Com_CopyRxData_Processing
; ..\component\Com\Implementation\Com.c	  8809  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8810  /*!  Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8811   *
; ..\component\Com\Implementation\Com.c	  8812   *
; ..\component\Com\Implementation\Com.c	  8813   *
; ..\component\Com\Implementation\Com.c	  8814   *
; ..\component\Com\Implementation\Com.c	  8815   *
; ..\component\Com\Implementation\Com.c	  8816   *
; ..\component\Com\Implementation\Com.c	  8817   *
; ..\component\Com\Implementation\Com.c	  8818   *
; ..\component\Com\Implementation\Com.c	  8819   *
; ..\component\Com\Implementation\Com.c	  8820   *
; ..\component\Com\Implementation\Com.c	  8821   *
; ..\component\Com\Implementation\Com.c	  8822  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8823  LOCAL_INLINE FUNC(BufReq_ReturnType, COM_CODE) Com_CopyRxData_Processing(PduIdType PduId, CONSTP2VAR(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPointer, P2VAR(PduLengthType, AUTOMATIC, COM_APPL_VAR) RxBufferSizePtr)      /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	  8824  {
; ..\component\Com\Implementation\Com.c	  8825    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	  8826    BufReq_ReturnType bufReq_status = BUFREQ_E_NOT_OK;    /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  8827  
; ..\component\Com\Implementation\Com.c	  8828    /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	  8829    /* #10 If I-PDU is active */
; ..\component\Com\Implementation\Com.c	  8830    if(Com_IsRxPduGrpActive(PduId))       /* \trace SPEC-2736846 */
; ..\component\Com\Implementation\Com.c	  8831    {
; ..\component\Com\Implementation\Com.c	  8832      Com_RxTpInfoIdxOfRxPduInfoType rxTpPduInfoIdx = Com_GetRxTpInfoIdxOfRxPduInfo(PduId);
; ..\component\Com\Implementation\Com.c	  8833  
; ..\component\Com\Implementation\Com.c	  8834      /* #20 If RxTpConnectionState is RECEPTION_STARTED, set RxTpConnectionState to COPYING */
; ..\component\Com\Implementation\Com.c	  8835      if(Com_GetRxTpConnectionState(rxTpPduInfoIdx) == COM_RECEPTION_STARTED_RXTPCONNECTIONSTATE)
; ..\component\Com\Implementation\Com.c	  8836      {
; ..\component\Com\Implementation\Com.c	  8837        Com_SetRxTpConnectionState(rxTpPduInfoIdx, COM_COPYING_RXTPCONNECTIONSTATE);      /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  8838      }
; ..\component\Com\Implementation\Com.c	  8839  
; ..\component\Com\Implementation\Com.c	  8840      switch (Com_GetRxTpConnectionState(rxTpPduInfoIdx))
; ..\component\Com\Implementation\Com.c	  8841      {
; ..\component\Com\Implementation\Com.c	  8842          /* #30 If RxTpConnectionState is COPYING */
; ..\component\Com\Implementation\Com.c	  8843        case COM_COPYING_RXTPCONNECTIONSTATE:
; ..\component\Com\Implementation\Com.c	  8844        {
; ..\component\Com\Implementation\Com.c	  8845          /* #40 If segment fits into buffer */
; ..\component\Com\Implementation\Com.c	  8846          if(PduInfoPointer->SduLength <= (Com_GetRxTpSduLength(rxTpPduInfoIdx) - Com_GetRxTpWrittenBytesCounter(rxTpPduInfoIdx)))
; ..\component\Com\Implementation\Com.c	  8847          {
; ..\component\Com\Implementation\Com.c	  8848            /* #50 Copy the passed bytes to the buffer, update the written bytes counter and set the passed RxBufferSizePtr value to the remaining receive buffer size */
; ..\component\Com\Implementation\Com.c	  8849            VStdMemCpyRamToRam(Com_GetAddrRxTpBuffer(Com_GetRxTpBufferStartIdxOfRxTpInfo(rxTpPduInfoIdx) + Com_GetRxTpWrittenBytesCounter(rxTpPduInfoIdx)), PduInfoPointer->SduDataPtr, PduInfoPointer->SduLength);       /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_WRITEACCESS_STACKPTR_CONFIG_LENGTH */
; ..\component\Com\Implementation\Com.c	  8850            Com_SetRxTpWrittenBytesCounter(rxTpPduInfoIdx, (Com_GetRxTpWrittenBytesCounter(rxTpPduInfoIdx) + PduInfoPointer->SduLength)); /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  8851            *RxBufferSizePtr = (Com_GetBufferSizeOfRxTpInfo(rxTpPduInfoIdx) - Com_GetRxTpWrittenBytesCounter(rxTpPduInfoIdx));    /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8852  # if (COM_RXTPBUFFERMETADATAUSEDOFRXTPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8853            /* #60 If meta data is configured adapt the RxBufferSizePtr */
; ..\component\Com\Implementation\Com.c	  8854            *RxBufferSizePtr -= Com_GetMetaDataLengthOfRxPduInfo(PduId);  /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8855  # endif
; ..\component\Com\Implementation\Com.c	  8856            /* #70 If the expected amount of bytes is received, set Rx Tp ComIPdu state to WAITING_FOR_INDICATION */
; ..\component\Com\Implementation\Com.c	  8857            if(Com_GetRxTpSduLength(rxTpPduInfoIdx) == Com_GetRxTpWrittenBytesCounter(rxTpPduInfoIdx))
; ..\component\Com\Implementation\Com.c	  8858            {
; ..\component\Com\Implementation\Com.c	  8859              Com_SetRxTpConnectionState(rxTpPduInfoIdx, COM_WAITING_FOR_INDICATION_RXTPCONNECTIONSTATE); /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  8860            }
; ..\component\Com\Implementation\Com.c	  8861            bufReq_status = BUFREQ_OK;
; ..\component\Com\Implementation\Com.c	  8862          }
; ..\component\Com\Implementation\Com.c	  8863          break;
; ..\component\Com\Implementation\Com.c	  8864        }
; ..\component\Com\Implementation\Com.c	  8865          /* #80 Else-If RxTpConnectionState is WAITING_FOR_INDICATION */
; ..\component\Com\Implementation\Com.c	  8866        case COM_WAITING_FOR_INDICATION_RXTPCONNECTIONSTATE:
; ..\component\Com\Implementation\Com.c	  8867        {
; ..\component\Com\Implementation\Com.c	  8868          /* #90 If zero-sized segment is provided, do nothing, otherwise reset state machine */
; ..\component\Com\Implementation\Com.c	  8869          if(PduInfoPointer->SduLength == 0u)
; ..\component\Com\Implementation\Com.c	  8870          {
; ..\component\Com\Implementation\Com.c	  8871            *RxBufferSizePtr = 0u;        /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8872            bufReq_status = BUFREQ_OK;
; ..\component\Com\Implementation\Com.c	  8873          }
; ..\component\Com\Implementation\Com.c	  8874          else
; ..\component\Com\Implementation\Com.c	  8875          {
; ..\component\Com\Implementation\Com.c	  8876            SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8877            Com_ResetRxTpConnection(PduId);
; ..\component\Com\Implementation\Com.c	  8878            SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8879          }
; ..\component\Com\Implementation\Com.c	  8880          break;
; ..\component\Com\Implementation\Com.c	  8881        }
; ..\component\Com\Implementation\Com.c	  8882          /* #100 Else do nothing */
; ..\component\Com\Implementation\Com.c	  8883        default:
; ..\component\Com\Implementation\Com.c	  8884        {
; ..\component\Com\Implementation\Com.c	  8885          /* READY or BUFFER_LOCKED - Do nothing */
; ..\component\Com\Implementation\Com.c	  8886          break;
; ..\component\Com\Implementation\Com.c	  8887        }
; ..\component\Com\Implementation\Com.c	  8888      }
; ..\component\Com\Implementation\Com.c	  8889    }
; ..\component\Com\Implementation\Com.c	  8890  
; ..\component\Com\Implementation\Com.c	  8891    return bufReq_status;
; ..\component\Com\Implementation\Com.c	  8892  }       /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	  8893  #endif
; ..\component\Com\Implementation\Com.c	  8894  
; ..\component\Com\Implementation\Com.c	  8895  #if ((COM_RECEIVE_SIGNAL_MACRO_API == STD_OFF) && (COM_RXACCESSINFO == STD_ON) && ((COM_BUFFERUSEDOFRXACCESSINFO == STD_ON) || (COM_RXSIGBUFFERARRAYBASEDBUFFERUSEDOFRXACCESSINFO == STD_ON)))  /* COV_COM_VAR_ELISA_STD_OFF_TF_tx_tf_tf_tf */
; ..\component\Com\Implementation\Com.c	  8896  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  8897    Com_ReceiveSignal_GetRxSigBuffer
; ..\component\Com\Implementation\Com.c	  8898  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8899  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  8900   *
; ..\component\Com\Implementation\Com.c	  8901   *
; ..\component\Com\Implementation\Com.c	  8902  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  8903  LOCAL_INLINE FUNC(void, COM_CODE) Com_ReceiveSignal_GetRxSigBuffer(Com_SignalIdType idxRxAccessInfo, P2VAR(void, AUTOMATIC, COM_APPL_VAR) SignalDataPtr)
; ..\component\Com\Implementation\Com.c	  8904  {
; ..\component\Com\Implementation\Com.c	  8905    /* #10 If the passed ComSignal uses a buffer, copy the currently stored value to passed SignalDataPtr */
; ..\component\Com\Implementation\Com.c	  8906  
; ..\component\Com\Implementation\Com.c	  8907    /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	  8908    switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	  8909    {
; ..\component\Com\Implementation\Com.c	  8910  # if (COM_EXISTS_UINT8_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8911      case COM_UINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8912      {
; ..\component\Com\Implementation\Com.c	  8913        *((P2VAR(uint8, AUTOMATIC, COM_APPL_VAR)) SignalDataPtr) = Com_GetRxSigBufferUInt8(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo));      /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8914        break;
; ..\component\Com\Implementation\Com.c	  8915      }
; ..\component\Com\Implementation\Com.c	  8916  # endif
; ..\component\Com\Implementation\Com.c	  8917  # if (COM_EXISTS_SINT8_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8918      case COM_SINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8919      {
; ..\component\Com\Implementation\Com.c	  8920        *((P2VAR(sint8, AUTOMATIC, COM_APPL_VAR)) SignalDataPtr) = Com_GetRxSigBufferSInt8(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo));      /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8921        break;
; ..\component\Com\Implementation\Com.c	  8922      }
; ..\component\Com\Implementation\Com.c	  8923  # endif
; ..\component\Com\Implementation\Com.c	  8924  # if (COM_EXISTS_UINT16_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8925      case COM_UINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8926      {
; ..\component\Com\Implementation\Com.c	  8927        *((P2VAR(uint16, AUTOMATIC, COM_APPL_VAR)) SignalDataPtr) = Com_GetRxSigBufferUInt16(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo));    /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8928        break;
; ..\component\Com\Implementation\Com.c	  8929      }
; ..\component\Com\Implementation\Com.c	  8930  # endif
; ..\component\Com\Implementation\Com.c	  8931  # if (COM_EXISTS_SINT16_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8932      case COM_SINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8933      {
; ..\component\Com\Implementation\Com.c	  8934        *((P2VAR(sint16, AUTOMATIC, COM_APPL_VAR)) SignalDataPtr) = Com_GetRxSigBufferSInt16(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo));    /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8935        break;
; ..\component\Com\Implementation\Com.c	  8936      }
; ..\component\Com\Implementation\Com.c	  8937  # endif
; ..\component\Com\Implementation\Com.c	  8938  # if (COM_EXISTS_UINT32_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8939      case COM_UINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8940      {
; ..\component\Com\Implementation\Com.c	  8941        SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8942        *((P2VAR(uint32, AUTOMATIC, COM_APPL_VAR)) SignalDataPtr) = Com_GetRxSigBufferUInt32(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo));    /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8943        SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8944        break;
; ..\component\Com\Implementation\Com.c	  8945      }
; ..\component\Com\Implementation\Com.c	  8946  # endif
; ..\component\Com\Implementation\Com.c	  8947  # if (COM_EXISTS_SINT32_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8948      case COM_SINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8949      {
; ..\component\Com\Implementation\Com.c	  8950        SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8951        *((P2VAR(sint32, AUTOMATIC, COM_APPL_VAR)) SignalDataPtr) = Com_GetRxSigBufferSInt32(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo));    /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8952        SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8953        break;
; ..\component\Com\Implementation\Com.c	  8954      }
; ..\component\Com\Implementation\Com.c	  8955  # endif
; ..\component\Com\Implementation\Com.c	  8956  # if (COM_EXISTS_UINT64_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8957      case COM_UINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8958      {
; ..\component\Com\Implementation\Com.c	  8959        SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8960        *((P2VAR(uint64, AUTOMATIC, COM_APPL_VAR)) SignalDataPtr) = Com_GetRxSigBufferUInt64(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo));    /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8961        SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8962        break;
; ..\component\Com\Implementation\Com.c	  8963      }
; ..\component\Com\Implementation\Com.c	  8964  # endif
; ..\component\Com\Implementation\Com.c	  8965  # if (COM_EXISTS_SINT64_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8966      case COM_SINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8967      {
; ..\component\Com\Implementation\Com.c	  8968        SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8969        *((P2VAR(sint64, AUTOMATIC, COM_APPL_VAR)) SignalDataPtr) = Com_GetRxSigBufferSInt64(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo));    /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8970        SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8971        break;
; ..\component\Com\Implementation\Com.c	  8972      }
; ..\component\Com\Implementation\Com.c	  8973  # endif
; ..\component\Com\Implementation\Com.c	  8974  # if (COM_EXISTS_FLOAT32_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8975      case COM_FLOAT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8976      {
; ..\component\Com\Implementation\Com.c	  8977        SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8978        *((P2VAR(float32, AUTOMATIC, COM_APPL_VAR)) SignalDataPtr) = Com_GetRxSigBufferFloat32(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo));  /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8979        SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8980        break;
; ..\component\Com\Implementation\Com.c	  8981      }
; ..\component\Com\Implementation\Com.c	  8982  # endif
; ..\component\Com\Implementation\Com.c	  8983  # if (COM_EXISTS_FLOAT64_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8984      case COM_FLOAT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8985      {
; ..\component\Com\Implementation\Com.c	  8986        SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8987        *((P2VAR(float64, AUTOMATIC, COM_APPL_VAR)) SignalDataPtr) = Com_GetRxSigBufferFloat64(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo));  /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8988        SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8989        break;
; ..\component\Com\Implementation\Com.c	  8990      }
; ..\component\Com\Implementation\Com.c	  8991  # endif
; ..\component\Com\Implementation\Com.c	  8992  # if (COM_EXISTS_UINT8_N_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  8993      case COM_UINT8_N_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	  8994      {
; ..\component\Com\Implementation\Com.c	  8995        SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8996        VStdMemCpyRamToRam((P2VAR(uint8, AUTOMATIC, COM_APPL_VAR)) SignalDataPtr, Com_GetAddrRxSigBufferArrayBased(Com_GetRxSigBufferArrayBasedBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), Com_GetRxSigBufferArrayBasedBufferLengthOfRxAccessInfo(idxRxAccessInfo));  /* PRQA S 0315, 0316 */ /* MD_MSR_VStdLibCopy, MD_Com_0316_0317 */ /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	  8997        SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  8998        break;
; ..\component\Com\Implementation\Com.c	  8999      }
; ..\component\Com\Implementation\Com.c	  9000  # endif
; ..\component\Com\Implementation\Com.c	  9001      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  9002        break;
; ..\component\Com\Implementation\Com.c	  9003    }
; ..\component\Com\Implementation\Com.c	  9004  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  9005  #endif
; ..\component\Com\Implementation\Com.c	  9006  
; ..\component\Com\Implementation\Com.c	  9007  #if (COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9008  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9009    Com_ReadSignalGroupData
; ..\component\Com\Implementation\Com.c	  9010   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9011  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9012   *
; ..\component\Com\Implementation\Com.c	  9013   *
; ..\component\Com\Implementation\Com.c	  9014   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9015  LOCAL_INLINE FUNC(void, COM_CODE) Com_ReadSignalGroupData(Com_SignalGroupIdType SignalGroupId)
; ..\component\Com\Implementation\Com.c	  9016  {
; ..\component\Com\Implementation\Com.c	  9017    /* #10 Copy the values of all ComGroupSignals of the passed ComSignalsGroup from the shadow buffer to the ComGroupSignal buffer */
; ..\component\Com\Implementation\Com.c	  9018    Com_RxAccessInfoIterType rxAccessInfoIndidx = Com_GetRxAccessInfoGrpSigIndStartIdxOfRxSigGrpInfo(SignalGroupId);
; ..\component\Com\Implementation\Com.c	  9019    for(; rxAccessInfoIndidx < Com_GetRxAccessInfoGrpSigIndEndIdxOfRxSigGrpInfo(SignalGroupId); rxAccessInfoIndidx++)
; ..\component\Com\Implementation\Com.c	  9020    {
; ..\component\Com\Implementation\Com.c	  9021      Com_RxAccessInfoIterType idxRxAccessInfo = Com_GetRxAccessInfoGrpSigInd(rxAccessInfoIndidx);
; ..\component\Com\Implementation\Com.c	  9022      Com_ReadGroupSignalFromShadowBuffer(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	  9023    }
; ..\component\Com\Implementation\Com.c	  9024  }
; ..\component\Com\Implementation\Com.c	  9025  #endif
; ..\component\Com\Implementation\Com.c	  9026  
; ..\component\Com\Implementation\Com.c	  9027  #if ((COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  9028  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9029    Com_GetRxDynamicLength
; ..\component\Com\Implementation\Com.c	  9030  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9031  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9032   *
; ..\component\Com\Implementation\Com.c	  9033   *
; ..\component\Com\Implementation\Com.c	  9034  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9035  LOCAL_INLINE FUNC(PduLengthType, COM_CODE) Com_GetRxDynamicLength(PduLengthType sduLength, Com_RxAccessInfoIterType rxAccessInfoIdx)
; ..\component\Com\Implementation\Com.c	  9036  {
; ..\component\Com\Implementation\Com.c	  9037    return sduLength - Com_GetStartByteInPduPositionOfRxAccessInfo(rxAccessInfoIdx);
; ..\component\Com\Implementation\Com.c	  9038  }
; ..\component\Com\Implementation\Com.c	  9039  #endif
; ..\component\Com\Implementation\Com.c	  9040  
; ..\component\Com\Implementation\Com.c	  9041  
; ..\component\Com\Implementation\Com.c	  9042  #if (COM_GWINFOENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9043  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9044    Com_SignalGw_InitRxIpdu
; ..\component\Com\Implementation\Com.c	  9045  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9046  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9047   *
; ..\component\Com\Implementation\Com.c	  9048   *
; ..\component\Com\Implementation\Com.c	  9049  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9050  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGw_InitRxIpdu(PduIdType ComPduId)
; ..\component\Com\Implementation\Com.c	  9051  {
; ..\component\Com\Implementation\Com.c	  9052    /* #10 Reset all gateway event flags of the passed ComIPdu */
; ..\component\Com\Implementation\Com.c	  9053    Com_GwInfoEndIdxOfRxPduInfoType idxGwInfo = Com_GetGwInfoStartIdxOfRxPduInfo(ComPduId);
; ..\component\Com\Implementation\Com.c	  9054    for(; idxGwInfo < Com_GetGwInfoEndIdxOfRxPduInfo(ComPduId); idxGwInfo++)
; ..\component\Com\Implementation\Com.c	  9055    {
; ..\component\Com\Implementation\Com.c	  9056      Com_SetGwEvent(idxGwInfo, FALSE);   /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	  9057    }
; ..\component\Com\Implementation\Com.c	  9058  }
; ..\component\Com\Implementation\Com.c	  9059  #endif
; ..\component\Com\Implementation\Com.c	  9060  
; ..\component\Com\Implementation\Com.c	  9061  #if (COM_GWSIGMAPPINGENDIDXOFGWINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9062  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9063    Com_MainFunction_SignalRoutings
; ..\component\Com\Implementation\Com.c	  9064  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9065  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9066   *
; ..\component\Com\Implementation\Com.c	  9067   *
; ..\component\Com\Implementation\Com.c	  9068   *
; ..\component\Com\Implementation\Com.c	  9069   *
; ..\component\Com\Implementation\Com.c	  9070  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9071  LOCAL_INLINE FUNC(void, COM_CODE) Com_MainFunction_SignalRoutings(Com_GwInfoIterType idxGwInfo)
; ..\component\Com\Implementation\Com.c	  9072  {
; ..\component\Com\Implementation\Com.c	  9073    /* #10 Iterate over all signal depending gateway mappings of the passed gateway info */
; ..\component\Com\Implementation\Com.c	  9074    Com_GwSigMappingEndIdxOfGwInfoType idxGwSigMapping = Com_GetGwSigMappingStartIdxOfGwInfo(idxGwInfo);
; ..\component\Com\Implementation\Com.c	  9075    for(; idxGwSigMapping < Com_GetGwSigMappingEndIdxOfGwInfo(idxGwInfo); idxGwSigMapping++)
; ..\component\Com\Implementation\Com.c	  9076    {
; ..\component\Com\Implementation\Com.c	  9077      Com_SignalIdType idxRxAccessInfo = (Com_SignalIdType) Com_GetRxAccessInfoIdxOfGwSigMapping(idxGwSigMapping);
; ..\component\Com\Implementation\Com.c	  9078  
; ..\component\Com\Implementation\Com.c	  9079      Com_SignalIdType txSigId = Com_GetTxSigIdOfGwSigMapping(idxGwSigMapping);
; ..\component\Com\Implementation\Com.c	  9080  # if (COM_GWTIMEOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9081      /* #20 Start cyclic transmission for periodic I-PDUs with a configured GW Timeout and reload gw Timeout counter */
; ..\component\Com\Implementation\Com.c	  9082      Com_GwTout_Event((PduIdType) Com_GetTxPduInfoIdxOfTxSigInfo(txSigId));
; ..\component\Com\Implementation\Com.c	  9083  # endif
; ..\component\Com\Implementation\Com.c	  9084  
; ..\component\Com\Implementation\Com.c	  9085      /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	  9086  
; ..\component\Com\Implementation\Com.c	  9087      /* #30 Send signal with the received value, the source buffer of the value depends on the signal ApplType */
; ..\component\Com\Implementation\Com.c	  9088      switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	  9089      {
; ..\component\Com\Implementation\Com.c	  9090  # if (COM_ROUTINGBUFFERUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9091  /* jet: GeneralSwitchCasePerApplType snippet */
; ..\component\Com\Implementation\Com.c	  9092  #  if (COM_RXSIGBUFFERUINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9093        case COM_UINT8_APPLTYPEOFRXACCESSINFO:   /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9094        {
; ..\component\Com\Implementation\Com.c	  9095          (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferUInt8(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);      /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9096          break;
; ..\component\Com\Implementation\Com.c	  9097        }
; ..\component\Com\Implementation\Com.c	  9098  #  endif
; ..\component\Com\Implementation\Com.c	  9099  #  if (COM_RXSIGBUFFERSINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9100        case COM_SINT8_APPLTYPEOFRXACCESSINFO:   /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9101        {
; ..\component\Com\Implementation\Com.c	  9102          (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferSInt8(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);      /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9103          break;
; ..\component\Com\Implementation\Com.c	  9104        }
; ..\component\Com\Implementation\Com.c	  9105  #  endif
; ..\component\Com\Implementation\Com.c	  9106  #  if (COM_RXSIGBUFFERUINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9107        case COM_UINT16_APPLTYPEOFRXACCESSINFO:  /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9108        {
; ..\component\Com\Implementation\Com.c	  9109          (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferUInt16(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);     /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9110          break;
; ..\component\Com\Implementation\Com.c	  9111        }
; ..\component\Com\Implementation\Com.c	  9112  #  endif
; ..\component\Com\Implementation\Com.c	  9113  #  if (COM_RXSIGBUFFERSINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9114        case COM_SINT16_APPLTYPEOFRXACCESSINFO:  /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9115        {
; ..\component\Com\Implementation\Com.c	  9116          (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferSInt16(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);     /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9117          break;
; ..\component\Com\Implementation\Com.c	  9118        }
; ..\component\Com\Implementation\Com.c	  9119  #  endif
; ..\component\Com\Implementation\Com.c	  9120  #  if (COM_RXSIGBUFFERUINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9121        case COM_UINT32_APPLTYPEOFRXACCESSINFO:  /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9122        {
; ..\component\Com\Implementation\Com.c	  9123          (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferUInt32(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);     /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9124          break;
; ..\component\Com\Implementation\Com.c	  9125        }
; ..\component\Com\Implementation\Com.c	  9126  #  endif
; ..\component\Com\Implementation\Com.c	  9127  #  if (COM_RXSIGBUFFERSINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9128        case COM_SINT32_APPLTYPEOFRXACCESSINFO:  /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9129        {
; ..\component\Com\Implementation\Com.c	  9130          (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferSInt32(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);     /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9131          break;
; ..\component\Com\Implementation\Com.c	  9132        }
; ..\component\Com\Implementation\Com.c	  9133  #  endif
; ..\component\Com\Implementation\Com.c	  9134  #  if (COM_RXSIGBUFFERUINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9135        case COM_UINT64_APPLTYPEOFRXACCESSINFO:  /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9136        {
; ..\component\Com\Implementation\Com.c	  9137          (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferUInt64(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);     /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9138          break;
; ..\component\Com\Implementation\Com.c	  9139        }
; ..\component\Com\Implementation\Com.c	  9140  #  endif
; ..\component\Com\Implementation\Com.c	  9141  #  if (COM_RXSIGBUFFERSINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9142        case COM_SINT64_APPLTYPEOFRXACCESSINFO:  /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9143        {
; ..\component\Com\Implementation\Com.c	  9144          (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferSInt64(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);     /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9145          break;
; ..\component\Com\Implementation\Com.c	  9146        }
; ..\component\Com\Implementation\Com.c	  9147  #  endif
; ..\component\Com\Implementation\Com.c	  9148  #  if (COM_RXSIGBUFFERFLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9149        case COM_FLOAT32_APPLTYPEOFRXACCESSINFO: /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9150        {
; ..\component\Com\Implementation\Com.c	  9151          (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferFloat32(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);    /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9152          break;
; ..\component\Com\Implementation\Com.c	  9153        }
; ..\component\Com\Implementation\Com.c	  9154  #  endif
; ..\component\Com\Implementation\Com.c	  9155  #  if (COM_RXSIGBUFFERFLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9156        case COM_FLOAT64_APPLTYPEOFRXACCESSINFO: /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9157        {
; ..\component\Com\Implementation\Com.c	  9158          (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferFloat64(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);    /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9159          break;
; ..\component\Com\Implementation\Com.c	  9160        }
; ..\component\Com\Implementation\Com.c	  9161  #  endif
; ..\component\Com\Implementation\Com.c	  9162  # endif
; ..\component\Com\Implementation\Com.c	  9163  # if (COM_RXSIGBUFFERARRAYBASEDROUTINGBUFFERUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9164        case COM_UINT8_N_APPLTYPEOFRXACCESSINFO: /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9165        {
; ..\component\Com\Implementation\Com.c	  9166          (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferArrayBased(Com_GetRxSigBufferArrayBasedRoutingBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), 0);       /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9167          break;
; ..\component\Com\Implementation\Com.c	  9168        }
; ..\component\Com\Implementation\Com.c	  9169  # endif
; ..\component\Com\Implementation\Com.c	  9170  # if (COM_EXISTS_ZEROBIT_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9171        case COM_ZEROBIT_APPLTYPEOFRXACCESSINFO: /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9172        {
; ..\component\Com\Implementation\Com.c	  9173          (void) Com_SendSignal_Processing(txSigId, NULL_PTR, 0); /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9174          break;
; ..\component\Com\Implementation\Com.c	  9175        }
; ..\component\Com\Implementation\Com.c	  9176  # endif
; ..\component\Com\Implementation\Com.c	  9177        default: /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  9178          break;
; ..\component\Com\Implementation\Com.c	  9179      }
; ..\component\Com\Implementation\Com.c	  9180  
; ..\component\Com\Implementation\Com.c	  9181      COM_DUMMY_STATEMENT(idxRxAccessInfo);       /* PRQA S 1338, 2983, 3112, 2982 */ /* MD_MSR_DummyStmt, MD_MSR_DummyStmt, MD_MSR_DummyStmt, MD_Com_2982 */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  9182    }
; ..\component\Com\Implementation\Com.c	  9183  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  9184  #endif
; ..\component\Com\Implementation\Com.c	  9185  
; ..\component\Com\Implementation\Com.c	  9186  
; ..\component\Com\Implementation\Com.c	  9187  #if (COM_GWSIGGRPMAPPINGENDIDXOFGWINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9188  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9189    Com_MainFunction_SignalGroupRoutings
; ..\component\Com\Implementation\Com.c	  9190  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9191  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9192   *
; ..\component\Com\Implementation\Com.c	  9193   *
; ..\component\Com\Implementation\Com.c	  9194   *
; ..\component\Com\Implementation\Com.c	  9195   *
; ..\component\Com\Implementation\Com.c	  9196   *
; ..\component\Com\Implementation\Com.c	  9197   *
; ..\component\Com\Implementation\Com.c	  9198  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9199  LOCAL_INLINE FUNC(void, COM_CODE) Com_MainFunction_SignalGroupRoutings(Com_GwInfoIterType idxGwInfo)
; ..\component\Com\Implementation\Com.c	  9200  {
; ..\component\Com\Implementation\Com.c	  9201    P2CONST(uint8, AUTOMATIC, COM_APPL_VAR) shdBuffer = NULL_PTR;
; ..\component\Com\Implementation\Com.c	  9202    /* #10 Iterate over all signal group depending gateway mappings of the passed gateway info */
; ..\component\Com\Implementation\Com.c	  9203    Com_GwSigGrpMappingEndIdxOfGwInfoType idxGwSigGrpMapping = Com_GetGwSigGrpMappingStartIdxOfGwInfo(idxGwInfo);
; ..\component\Com\Implementation\Com.c	  9204    for(; idxGwSigGrpMapping < Com_GetGwSigGrpMappingEndIdxOfGwInfo(idxGwInfo); idxGwSigGrpMapping++)
; ..\component\Com\Implementation\Com.c	  9205    {
; ..\component\Com\Implementation\Com.c	  9206      Com_SignalGroupIdType txSigGrpId = Com_GetTxSigGrpIdOfGwSigGrpMapping(idxGwSigGrpMapping);
; ..\component\Com\Implementation\Com.c	  9207      Com_GwGrpSigMappingEndIdxOfGwSigGrpMappingType idxGwGrpSigMapping = Com_GetGwGrpSigMappingStartIdxOfGwSigGrpMapping(idxGwSigGrpMapping);
; ..\component\Com\Implementation\Com.c	  9208  
; ..\component\Com\Implementation\Com.c	  9209  # if (COM_GWTIMEOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9210      /* #20 Start cyclic transmission for periodic I-PDUs with a configured GW Timeout and reload gw Timeout counter */
; ..\component\Com\Implementation\Com.c	  9211      Com_GwTout_Event((PduIdType) Com_GetTxPduInfoIdxOfTxSigGrpInfo(txSigGrpId));
; ..\component\Com\Implementation\Com.c	  9212  # endif
; ..\component\Com\Implementation\Com.c	  9213  
; ..\component\Com\Implementation\Com.c	  9214      /* #30 Iterate over all related group signal mappings */
; ..\component\Com\Implementation\Com.c	  9215      for(; idxGwGrpSigMapping < Com_GetGwGrpSigMappingEndIdxOfGwSigGrpMapping(idxGwSigGrpMapping); idxGwGrpSigMapping++)
; ..\component\Com\Implementation\Com.c	  9216      {
; ..\component\Com\Implementation\Com.c	  9217        Com_SignalIdType idxRxAccessInfo = (Com_SignalIdType) Com_GetRxAccessInfoIdxOfGwGrpSigMapping(idxGwGrpSigMapping);
; ..\component\Com\Implementation\Com.c	  9218        Com_SignalIdType txSigId = Com_GetTxSigIdOfGwGrpSigMapping(idxGwGrpSigMapping);
; ..\component\Com\Implementation\Com.c	  9219  
; ..\component\Com\Implementation\Com.c	  9220        /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	  9221  
; ..\component\Com\Implementation\Com.c	  9222        /* #40 Send signal with the value of the related shadow buffer, the buffer depends on the ApplType of the ComGroupSignal */
; ..\component\Com\Implementation\Com.c	  9223        switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	  9224        {
; ..\component\Com\Implementation\Com.c	  9225  # if (COM_ROUTINGBUFFERUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9226  /* jet: GeneralSwitchCasePerApplType snippet */
; ..\component\Com\Implementation\Com.c	  9227  #  if (COM_RXSIGBUFFERUINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9228          case COM_UINT8_APPLTYPEOFRXACCESSINFO: /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9229          {
; ..\component\Com\Implementation\Com.c	  9230            (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferUInt8(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);    /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9231            break;
; ..\component\Com\Implementation\Com.c	  9232          }
; ..\component\Com\Implementation\Com.c	  9233  #  endif
; ..\component\Com\Implementation\Com.c	  9234  #  if (COM_RXSIGBUFFERSINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9235          case COM_SINT8_APPLTYPEOFRXACCESSINFO: /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9236          {
; ..\component\Com\Implementation\Com.c	  9237            (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferSInt8(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);    /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9238            break;
; ..\component\Com\Implementation\Com.c	  9239          }
; ..\component\Com\Implementation\Com.c	  9240  #  endif
; ..\component\Com\Implementation\Com.c	  9241  #  if (COM_RXSIGBUFFERUINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9242          case COM_UINT16_APPLTYPEOFRXACCESSINFO:        /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9243          {
; ..\component\Com\Implementation\Com.c	  9244            (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferUInt16(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);   /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9245            break;
; ..\component\Com\Implementation\Com.c	  9246          }
; ..\component\Com\Implementation\Com.c	  9247  #  endif
; ..\component\Com\Implementation\Com.c	  9248  #  if (COM_RXSIGBUFFERSINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9249          case COM_SINT16_APPLTYPEOFRXACCESSINFO:        /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9250          {
; ..\component\Com\Implementation\Com.c	  9251            (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferSInt16(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);   /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9252            break;
; ..\component\Com\Implementation\Com.c	  9253          }
; ..\component\Com\Implementation\Com.c	  9254  #  endif
; ..\component\Com\Implementation\Com.c	  9255  #  if (COM_RXSIGBUFFERUINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9256          case COM_UINT32_APPLTYPEOFRXACCESSINFO:        /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9257          {
; ..\component\Com\Implementation\Com.c	  9258            (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferUInt32(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);   /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9259            break;
; ..\component\Com\Implementation\Com.c	  9260          }
; ..\component\Com\Implementation\Com.c	  9261  #  endif
; ..\component\Com\Implementation\Com.c	  9262  #  if (COM_RXSIGBUFFERSINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9263          case COM_SINT32_APPLTYPEOFRXACCESSINFO:        /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9264          {
; ..\component\Com\Implementation\Com.c	  9265            (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferSInt32(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);   /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9266            break;
; ..\component\Com\Implementation\Com.c	  9267          }
; ..\component\Com\Implementation\Com.c	  9268  #  endif
; ..\component\Com\Implementation\Com.c	  9269  #  if (COM_RXSIGBUFFERUINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9270          case COM_UINT64_APPLTYPEOFRXACCESSINFO:        /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9271          {
; ..\component\Com\Implementation\Com.c	  9272            (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferUInt64(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);   /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9273            break;
; ..\component\Com\Implementation\Com.c	  9274          }
; ..\component\Com\Implementation\Com.c	  9275  #  endif
; ..\component\Com\Implementation\Com.c	  9276  #  if (COM_RXSIGBUFFERSINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9277          case COM_SINT64_APPLTYPEOFRXACCESSINFO:        /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9278          {
; ..\component\Com\Implementation\Com.c	  9279            (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferSInt64(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);   /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9280            break;
; ..\component\Com\Implementation\Com.c	  9281          }
; ..\component\Com\Implementation\Com.c	  9282  #  endif
; ..\component\Com\Implementation\Com.c	  9283  #  if (COM_RXSIGBUFFERFLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9284          case COM_FLOAT32_APPLTYPEOFRXACCESSINFO:       /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9285          {
; ..\component\Com\Implementation\Com.c	  9286            (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferFloat32(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);  /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9287            break;
; ..\component\Com\Implementation\Com.c	  9288          }
; ..\component\Com\Implementation\Com.c	  9289  #  endif
; ..\component\Com\Implementation\Com.c	  9290  #  if (COM_RXSIGBUFFERFLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	  9291          case COM_FLOAT64_APPLTYPEOFRXACCESSINFO:       /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9292          {
; ..\component\Com\Implementation\Com.c	  9293            (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferFloat64(Com_GetRoutingBufferIdxOfRxAccessInfo(idxRxAccessInfo)), 0);  /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9294            break;
; ..\component\Com\Implementation\Com.c	  9295          }
; ..\component\Com\Implementation\Com.c	  9296  #  endif
; ..\component\Com\Implementation\Com.c	  9297  # endif
; ..\component\Com\Implementation\Com.c	  9298  # if (COM_RXSIGBUFFERARRAYBASEDROUTINGBUFFERUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9299          case COM_UINT8_N_APPLTYPEOFRXACCESSINFO:       /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9300          {
; ..\component\Com\Implementation\Com.c	  9301            (void) Com_SendSignal_Processing(txSigId, Com_GetAddrRxSigBufferArrayBased(Com_GetRxSigBufferArrayBasedRoutingBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), 0);     /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9302            break;
; ..\component\Com\Implementation\Com.c	  9303          }
; ..\component\Com\Implementation\Com.c	  9304  # endif
; ..\component\Com\Implementation\Com.c	  9305  # if (COM_EXISTS_ZEROBIT_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9306          case COM_ZEROBIT_APPLTYPEOFRXACCESSINFO:       /* COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING */
; ..\component\Com\Implementation\Com.c	  9307          {
; ..\component\Com\Implementation\Com.c	  9308            (void) Com_SendSignal_Processing(txSigId, NULL_PTR, 0);       /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9309            break;
; ..\component\Com\Implementation\Com.c	  9310          }
; ..\component\Com\Implementation\Com.c	  9311  # endif
; ..\component\Com\Implementation\Com.c	  9312          default:       /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  9313            break;
; ..\component\Com\Implementation\Com.c	  9314        }
; ..\component\Com\Implementation\Com.c	  9315  
; ..\component\Com\Implementation\Com.c	  9316        COM_DUMMY_STATEMENT(idxRxAccessInfo);     /* PRQA S 1338, 2983, 3112, 2982 */ /* MD_MSR_DummyStmt, MD_MSR_DummyStmt, MD_MSR_DummyStmt, MD_Com_2982 */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  9317      }
; ..\component\Com\Implementation\Com.c	  9318      /* #50 Call Com_SendSignalGroup for the related signal group with the respective shadowBuffer */
; ..\component\Com\Implementation\Com.c	  9319  # if (COM_TXBUFFERUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9320      if(Com_IsTxBufferUsedOfTxSigGrpInfo(txSigGrpId))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  9321      {
; ..\component\Com\Implementation\Com.c	  9322        shdBuffer = Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxSigGrpInfo(txSigGrpId));
; ..\component\Com\Implementation\Com.c	  9323      }
; ..\component\Com\Implementation\Com.c	  9324  # endif
; ..\component\Com\Implementation\Com.c	  9325      (void) Com_SendSignalGroup_Processing(txSigGrpId, shdBuffer);       /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9326    }
; ..\component\Com\Implementation\Com.c	  9327  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  9328  #endif
; ..\component\Com\Implementation\Com.c	  9329  
; ..\component\Com\Implementation\Com.c	  9330  #if (COM_GWINFOUSEDOFRXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9331  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9332    Com_SignalGw_SigEvent
; ..\component\Com\Implementation\Com.c	  9333  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9334  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9335   *
; ..\component\Com\Implementation\Com.c	  9336   *
; ..\component\Com\Implementation\Com.c	  9337  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9338  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGw_SigEvent(Com_RxSigInfoIterType idxRxSigInfo)
; ..\component\Com\Implementation\Com.c	  9339  {
; ..\component\Com\Implementation\Com.c	  9340    /* #10 If the passed signal is routed, set the related gateway event flag */
; ..\component\Com\Implementation\Com.c	  9341    if(Com_IsGwInfoUsedOfRxSigInfo(idxRxSigInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  9342    {
; ..\component\Com\Implementation\Com.c	  9343      Com_SetGwEvent(Com_GetGwInfoIdxOfRxSigInfo(idxRxSigInfo), TRUE);    /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  9344    }
; ..\component\Com\Implementation\Com.c	  9345  }
; ..\component\Com\Implementation\Com.c	  9346  #endif
; ..\component\Com\Implementation\Com.c	  9347  
; ..\component\Com\Implementation\Com.c	  9348  #if (COM_GWINFOUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9349  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9350    Com_SignalGw_SigGrpEvent
; ..\component\Com\Implementation\Com.c	  9351  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9352  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9353   *
; ..\component\Com\Implementation\Com.c	  9354   *
; ..\component\Com\Implementation\Com.c	  9355  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9356  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGw_SigGrpEvent(Com_RxSigGrpInfoIterType idxRxSigGrpInfo)
; ..\component\Com\Implementation\Com.c	  9357  {
; ..\component\Com\Implementation\Com.c	  9358    /* #10 If the passed signal group is routed, set the related gateway event flag */
; ..\component\Com\Implementation\Com.c	  9359    if(Com_IsGwInfoUsedOfRxSigGrpInfo(idxRxSigGrpInfo))   /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  9360    {
; ..\component\Com\Implementation\Com.c	  9361      Com_SetGwEvent(Com_GetGwInfoIdxOfRxSigGrpInfo(idxRxSigGrpInfo), TRUE);      /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  9362    }
; ..\component\Com\Implementation\Com.c	  9363  }
; ..\component\Com\Implementation\Com.c	  9364  #endif
; ..\component\Com\Implementation\Com.c	  9365  
; ..\component\Com\Implementation\Com.c	  9366  #if (COM_GWEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  9367  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9368    Com_MainFunction_GwDescription
; ..\component\Com\Implementation\Com.c	  9369  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9370  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9371   *
; ..\component\Com\Implementation\Com.c	  9372   *
; ..\component\Com\Implementation\Com.c	  9373   *
; ..\component\Com\Implementation\Com.c	  9374   *
; ..\component\Com\Implementation\Com.c	  9375   *
; ..\component\Com\Implementation\Com.c	  9376  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9377  LOCAL_INLINE FUNC(void, COM_CODE) Com_MainFunction_GwDescription(void)
; ..\component\Com\Implementation\Com.c	  9378  {
; ..\component\Com\Implementation\Com.c	  9379    /* #10 Iterate over all ComIPdus inside the cache */
; ..\component\Com\Implementation\Com.c	  9380    Com_GwDescription_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  9381  
; ..\component\Com\Implementation\Com.c	  9382    while(Com_GetGwEventCacheIndex() > 0u)
; ..\component\Com\Implementation\Com.c	  9383    {
; ..\component\Com\Implementation\Com.c	  9384      PduIdType rxPdu;
; ..\component\Com\Implementation\Com.c	  9385  
; ..\component\Com\Implementation\Com.c	  9386      Com_HandleRxDeferredGwDescriptionType gwDeferredHandleSize;
; ..\component\Com\Implementation\Com.c	  9387  
; ..\component\Com\Implementation\Com.c	  9388      Com_DecGwEventCacheIndex(); /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	  9389  
; ..\component\Com\Implementation\Com.c	  9390      rxPdu = Com_GetGwEventCache(Com_GetGwEventCacheIndex());
; ..\component\Com\Implementation\Com.c	  9391  
; ..\component\Com\Implementation\Com.c	  9392      gwDeferredHandleSize = Com_GetHandleRxDeferredGwDescription(Com_GetHandleRxDeferredGwDescriptionIdxOfRxPduInfo(rxPdu));
; ..\component\Com\Implementation\Com.c	  9393  
; ..\component\Com\Implementation\Com.c	  9394      /* #20 If gw flag has not been reset */
; ..\component\Com\Implementation\Com.c	  9395      if(gwDeferredHandleSize > 0u)
; ..\component\Com\Implementation\Com.c	  9396      {
; ..\component\Com\Implementation\Com.c	  9397        PduInfoType PduInfo;
; ..\component\Com\Implementation\Com.c	  9398  
; ..\component\Com\Implementation\Com.c	  9399        PduInfo.SduLength = (PduLengthType) (gwDeferredHandleSize - 1u);
; ..\component\Com\Implementation\Com.c	  9400        PduInfo.SduDataPtr = Com_GetAddrRxDefPduBuffer(Com_GetRxDefPduBufferStartIdxOfRxPduInfo(rxPdu));
; ..\component\Com\Implementation\Com.c	  9401  
; ..\component\Com\Implementation\Com.c	  9402        /* #30 Process gateway description */
; ..\component\Com\Implementation\Com.c	  9403        Com_RxProcessing_GwDescriptionEvent(rxPdu, &PduInfo);     /* SBSW_COM_FCTCALL_STACKPTR */
; ..\component\Com\Implementation\Com.c	  9404      }
; ..\component\Com\Implementation\Com.c	  9405  
; ..\component\Com\Implementation\Com.c	  9406      /* #40 Reset deferred gw description flag */
; ..\component\Com\Implementation\Com.c	  9407      Com_SetHandleRxDeferredGwDescription(Com_GetHandleRxDeferredGwDescriptionIdxOfRxPduInfo(rxPdu), 0); /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  9408  
; ..\component\Com\Implementation\Com.c	  9409      Com_GwDescription_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	  9410    }
; ..\component\Com\Implementation\Com.c	  9411  
; ..\component\Com\Implementation\Com.c	  9412    Com_GwDescription_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  9413  }
; ..\component\Com\Implementation\Com.c	  9414  #endif
; ..\component\Com\Implementation\Com.c	  9415  
; ..\component\Com\Implementation\Com.c	  9416  #if (COM_GWEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  9417  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	  9418  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9419    Com_GwDescription_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	  9420  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9421  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9422   *
; ..\component\Com\Implementation\Com.c	  9423   *
; ..\component\Com\Implementation\Com.c	  9424  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9425  LOCAL_INLINE FUNC(void, COM_CODE) Com_GwDescription_EnterExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	  9426  {
; ..\component\Com\Implementation\Com.c	  9427    /* #10 Enter the gw description routing exclusive area */
; ..\component\Com\Implementation\Com.c	  9428    SchM_Enter_Com_COM_EXCLUSIVE_AREA_BOTH();
; ..\component\Com\Implementation\Com.c	  9429  }
; ..\component\Com\Implementation\Com.c	  9430  
; ..\component\Com\Implementation\Com.c	  9431  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9432    Com_GwDescription_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	  9433  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9434  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9435   *
; ..\component\Com\Implementation\Com.c	  9436   *
; ..\component\Com\Implementation\Com.c	  9437   *
; ..\component\Com\Implementation\Com.c	  9438  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9439  LOCAL_INLINE FUNC(void, COM_CODE) Com_GwDescription_ExitExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	  9440  {
; ..\component\Com\Implementation\Com.c	  9441    /* #05 Reload the counter with the threshold value */
; ..\component\Com\Implementation\Com.c	  9442    Com_SetGatewayDescriptionProcessingISRLockCounter(Com_GetGatewayDescriptionProcessingISRLockThreshold());     /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	  9443    /* #10 Exit the gw description routing exclusive area */
; ..\component\Com\Implementation\Com.c	  9444    SchM_Exit_Com_COM_EXCLUSIVE_AREA_BOTH();
; ..\component\Com\Implementation\Com.c	  9445  }
; ..\component\Com\Implementation\Com.c	  9446  
; ..\component\Com\Implementation\Com.c	  9447  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9448    Com_GwDescription_ThresholdCheck
; ..\component\Com\Implementation\Com.c	  9449  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9450  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9451   *
; ..\component\Com\Implementation\Com.c	  9452   *
; ..\component\Com\Implementation\Com.c	  9453   *
; ..\component\Com\Implementation\Com.c	  9454  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9455  LOCAL_INLINE FUNC(void, COM_CODE) Com_GwDescription_ThresholdCheck(void)
; ..\component\Com\Implementation\Com.c	  9456  {
; ..\component\Com\Implementation\Com.c	  9457    if(Com_GetGatewayDescriptionProcessingISRLockCounter() > 0u)
; ..\component\Com\Implementation\Com.c	  9458    {
; ..\component\Com\Implementation\Com.c	  9459      Com_DecGatewayDescriptionProcessingISRLockCounter();        /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	  9460    }
; ..\component\Com\Implementation\Com.c	  9461    else
; ..\component\Com\Implementation\Com.c	  9462    {
; ..\component\Com\Implementation\Com.c	  9463      Com_GwDescription_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	  9464      Com_GwDescription_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	  9465    }
; ..\component\Com\Implementation\Com.c	  9466  }
; ..\component\Com\Implementation\Com.c	  9467  
; ..\component\Com\Implementation\Com.c	  9468  #endif
; ..\component\Com\Implementation\Com.c	  9469  
; ..\component\Com\Implementation\Com.c	  9470  
; ..\component\Com\Implementation\Com.c	  9471  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9472  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9473    Com_RxProcessing_InitRxIpdu
; ..\component\Com\Implementation\Com.c	  9474  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9475  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9476   *
; ..\component\Com\Implementation\Com.c	  9477   *
; ..\component\Com\Implementation\Com.c	  9478   *
; ..\component\Com\Implementation\Com.c	  9479   *
; ..\component\Com\Implementation\Com.c	  9480   *
; ..\component\Com\Implementation\Com.c	  9481  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9482  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_InitRxIpdu(PduIdType ComRxPduId)
; ..\component\Com\Implementation\Com.c	  9483  {
; ..\component\Com\Implementation\Com.c	  9484    /* Initialize signal buffer */
; ..\component\Com\Implementation\Com.c	  9485  # if (COM_RXACCESSINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9486    {
; ..\component\Com\Implementation\Com.c	  9487      /* #10 Iterate over all ComSignals and ComGroupSignals and initialize the corresponding buffers and shadow buffers */
; ..\component\Com\Implementation\Com.c	  9488      Com_RxAccessInfoIndEndIdxOfRxPduInfoType com_RxAccessInfoIndIdx = Com_GetRxAccessInfoIndStartIdxOfRxPduInfo(ComRxPduId);
; ..\component\Com\Implementation\Com.c	  9489      for(; com_RxAccessInfoIndIdx < Com_GetRxAccessInfoIndEndIdxOfRxPduInfo(ComRxPduId); com_RxAccessInfoIndIdx++)
; ..\component\Com\Implementation\Com.c	  9490      {
; ..\component\Com\Implementation\Com.c	  9491        Com_RxAccessInfoIterType com_RxAccessInfoIdx = Com_GetRxAccessInfoInd(com_RxAccessInfoIndIdx);
; ..\component\Com\Implementation\Com.c	  9492        /* jet: SetRxSigBufferValue snippet */
; ..\component\Com\Implementation\Com.c	  9493  #  if ((COM_INITVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_BUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  9494        if(Com_IsInitValueUsedOfRxAccessInfo(com_RxAccessInfoIdx) && Com_IsBufferUsedOfRxAccessInfo(com_RxAccessInfoIdx)) /* COV_COM_RXPROCESSING_TX */
; ..\component\Com\Implementation\Com.c	  9495        {
; ..\component\Com\Implementation\Com.c	  9496          Com_Signal_SetRxSigBufferValue(com_RxAccessInfoIdx, Com_GetBufferIdxOfRxAccessInfo(com_RxAccessInfoIdx), Com_GetInitValueIdxOfRxAccessInfo(com_RxAccessInfoIdx));
; ..\component\Com\Implementation\Com.c	  9497        }
; ..\component\Com\Implementation\Com.c	  9498  #  endif
; ..\component\Com\Implementation\Com.c	  9499  #  if ((COM_CONSTVALUEARRAYBASEDINITVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_RXSIGBUFFERARRAYBASEDBUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  9500        if(Com_IsConstValueArrayBasedInitValueUsedOfRxAccessInfo(com_RxAccessInfoIdx) && Com_IsRxSigBufferArrayBasedBufferUsedOfRxAccessInfo(com_RxAccessInfoIdx))        /* COV_COM_RXPROCESSING_TX */
; ..\component\Com\Implementation\Com.c	  9501        {
; ..\component\Com\Implementation\Com.c	  9502          Com_Signal_SetRxSigBufferArrayBasedValue(com_RxAccessInfoIdx, Com_GetRxSigBufferArrayBasedBufferStartIdxOfRxAccessInfo(com_RxAccessInfoIdx),
; ..\component\Com\Implementation\Com.c	  9503                                                   Com_GetConstValueArrayBasedInitValueStartIdxOfRxAccessInfo(com_RxAccessInfoIdx),
; ..\component\Com\Implementation\Com.c	  9504                                                   (PduLengthType) Com_GetConstValueArrayBasedInitValueLengthOfRxAccessInfo(com_RxAccessInfoIdx));
; ..\component\Com\Implementation\Com.c	  9505        }
; ..\component\Com\Implementation\Com.c	  9506  #  endif
; ..\component\Com\Implementation\Com.c	  9507  
; ..\component\Com\Implementation\Com.c	  9508  
; ..\component\Com\Implementation\Com.c	  9509  #  if (COM_ISGROUPSIGNALOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9510        if(Com_IsIsGroupSignalOfRxAccessInfo(com_RxAccessInfoIdx))        /* COV_COM_RXPROCESSING */
; ..\component\Com\Implementation\Com.c	  9511        {
; ..\component\Com\Implementation\Com.c	  9512          /* jet: SetRxSigBufferValue snippet */
; ..\component\Com\Implementation\Com.c	  9513  #   if ((COM_INITVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_SHDBUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  9514          if(Com_IsInitValueUsedOfRxAccessInfo(com_RxAccessInfoIdx) && Com_IsShdBufferUsedOfRxAccessInfo(com_RxAccessInfoIdx))    /* COV_COM_RXPROCESSING_SHADOWSIGNAL */
; ..\component\Com\Implementation\Com.c	  9515          {
; ..\component\Com\Implementation\Com.c	  9516            Com_Signal_SetRxSigBufferValue(com_RxAccessInfoIdx, Com_GetShdBufferIdxOfRxAccessInfo(com_RxAccessInfoIdx), Com_GetInitValueIdxOfRxAccessInfo(com_RxAccessInfoIdx));
; ..\component\Com\Implementation\Com.c	  9517          }
; ..\component\Com\Implementation\Com.c	  9518  #   endif
; ..\component\Com\Implementation\Com.c	  9519  #   if ((COM_CONSTVALUEARRAYBASEDINITVALUEUSEDOFRXACCESSINFO == STD_ON) && (COM_RXSIGBUFFERARRAYBASEDSHDBUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  9520          if(Com_IsConstValueArrayBasedInitValueUsedOfRxAccessInfo(com_RxAccessInfoIdx) && Com_IsRxSigBufferArrayBasedShdBufferUsedOfRxAccessInfo(com_RxAccessInfoIdx))   /* COV_COM_RXPROCESSING_SHADOWSIGNAL */
; ..\component\Com\Implementation\Com.c	  9521          {
; ..\component\Com\Implementation\Com.c	  9522            Com_Signal_SetRxSigBufferArrayBasedValue(com_RxAccessInfoIdx, Com_GetRxSigBufferArrayBasedShdBufferStartIdxOfRxAccessInfo(com_RxAccessInfoIdx),
; ..\component\Com\Implementation\Com.c	  9523                                                     Com_GetConstValueArrayBasedInitValueStartIdxOfRxAccessInfo(com_RxAccessInfoIdx),
; ..\component\Com\Implementation\Com.c	  9524                                                     (PduLengthType) Com_GetConstValueArrayBasedInitValueLengthOfRxAccessInfo(com_RxAccessInfoIdx));
; ..\component\Com\Implementation\Com.c	  9525          }
; ..\component\Com\Implementation\Com.c	  9526  #   endif
; ..\component\Com\Implementation\Com.c	  9527  
; ..\component\Com\Implementation\Com.c	  9528  
; ..\component\Com\Implementation\Com.c	  9529        }
; ..\component\Com\Implementation\Com.c	  9530  #  endif
; ..\component\Com\Implementation\Com.c	  9531      }
; ..\component\Com\Implementation\Com.c	  9532    }
; ..\component\Com\Implementation\Com.c	  9533  # endif
; ..\component\Com\Implementation\Com.c	  9534  # if(COM_ARRAYACCESSUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9535    {
; ..\component\Com\Implementation\Com.c	  9536      /* #20 Iterate over all ComSignalGroups and if ArrayAccess is used initialize the corresponding shadow buffer */
; ..\component\Com\Implementation\Com.c	  9537      Com_RxSigGrpInfoIndIterType com_SignalGroupIndId = Com_GetRxSigGrpInfoIndStartIdxOfRxPduInfo(ComRxPduId);   /* PRQA S 2842 */ /* MD_Com_2842 */
; ..\component\Com\Implementation\Com.c	  9538      for(; com_SignalGroupIndId < Com_GetRxSigGrpInfoIndEndIdxOfRxPduInfo(ComRxPduId); com_SignalGroupIndId++)   /* PRQA S 2842 */ /* MD_Com_2842 */
; ..\component\Com\Implementation\Com.c	  9539      {
; ..\component\Com\Implementation\Com.c	  9540        Com_RxSigGrpInfoIterType com_SignalGroupId = Com_GetRxSigGrpInfoInd(com_SignalGroupIndId);
; ..\component\Com\Implementation\Com.c	  9541        if(Com_IsArrayAccessUsedOfRxSigGrpInfo(com_SignalGroupId))        /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  9542        {
; ..\component\Com\Implementation\Com.c	  9543          Com_RxSigArrayAccessSigGrpBufferIterType idxShdBufferIdx = Com_GetRxSigArrayAccessSigGrpBufferStartIdxOfRxSigGrpInfo(com_SignalGroupId);
; ..\component\Com\Implementation\Com.c	  9544          Com_ConstValueSigGrpArrayAccessIterType intialValueStartIdx = Com_GetConstValueSigGrpArrayAccessStartIdxOfRxSigGrpInfo(com_SignalGroupId);
; ..\component\Com\Implementation\Com.c	  9545  
; ..\component\Com\Implementation\Com.c	  9546          VStdMemCpyRamToRam(Com_GetAddrRxSigArrayAccessSigGrpBuffer(idxShdBufferIdx), Com_GetAddrConstValueSigGrpArrayAccess(intialValueStartIdx), Com_GetRxSigArrayAccessSigGrpBufferLengthOfRxSigGrpInfo(com_SignalGroupId));  /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_CSL01 */
; ..\component\Com\Implementation\Com.c	  9547        }
; ..\component\Com\Implementation\Com.c	  9548      }
; ..\component\Com\Implementation\Com.c	  9549    }
; ..\component\Com\Implementation\Com.c	  9550  # endif
; ..\component\Com\Implementation\Com.c	  9551  # if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9552    /* #30 If the Rx ComIPdu is handled deferred, reset the "Handle Deferred" flag */
; ..\component\Com\Implementation\Com.c	  9553    if(Com_IsHandleRxPduDeferredUsedOfRxPduInfo(ComRxPduId))      /* PRQA S 2842 */ /* MD_Com_2842 */ /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  9554    {
; ..\component\Com\Implementation\Com.c	  9555      Com_SetHandleRxPduDeferred(Com_GetHandleRxPduDeferredIdxOfRxPduInfo(ComRxPduId), 0);        /* PRQA S 2842 */ /* MD_Com_2842 */ /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  9556  
; ..\component\Com\Implementation\Com.c	  9557  #  if (COM_GWEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  9558      /* #40 If a gateway description exists, reset the gateway description handle */
; ..\component\Com\Implementation\Com.c	  9559      if(Com_IsGwTxPduDescriptionInfoUsedOfRxPduInfo(ComRxPduId)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  9560      {
; ..\component\Com\Implementation\Com.c	  9561        Com_SetHandleRxDeferredGwDescription(Com_GetHandleRxDeferredGwDescriptionIdxOfRxPduInfo(ComRxPduId), 0);  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  9562      }
; ..\component\Com\Implementation\Com.c	  9563  #  endif
; ..\component\Com\Implementation\Com.c	  9564    }
; ..\component\Com\Implementation\Com.c	  9565  # endif
; ..\component\Com\Implementation\Com.c	  9566  }       /* PRQA S 6010, 6030 */ /* MD_MSR_STPTH, MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	  9567  #endif
; ..\component\Com\Implementation\Com.c	  9568  
; ..\component\Com\Implementation\Com.c	  9569  
; ..\component\Com\Implementation\Com.c	  9570  #if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9571  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9572    Com_RxDeferredPduProcessing
; ..\component\Com\Implementation\Com.c	  9573  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9574  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9575   *
; ..\component\Com\Implementation\Com.c	  9576   *
; ..\component\Com\Implementation\Com.c	  9577   *
; ..\component\Com\Implementation\Com.c	  9578   *
; ..\component\Com\Implementation\Com.c	  9579   *
; ..\component\Com\Implementation\Com.c	  9580   *
; ..\component\Com\Implementation\Com.c	  9581  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9582  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDeferredPduProcessing(void)
; ..\component\Com\Implementation\Com.c	  9583  {
; ..\component\Com\Implementation\Com.c	  9584  # if (COM_RXDEFERREDEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  9585    boolean fallbackRequired = TRUE;      /* Initially assume deferred event cache is full. */
; ..\component\Com\Implementation\Com.c	  9586  # endif
; ..\component\Com\Implementation\Com.c	  9587    /* Deferred Signal Processing.  */
; ..\component\Com\Implementation\Com.c	  9588    FctPtrCacheStrct deferredFctPtrCacheStrct;
; ..\component\Com\Implementation\Com.c	  9589  
; ..\component\Com\Implementation\Com.c	  9590  # if (COM_RXDEFERREDFCTPTRCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  9591    deferredFctPtrCacheStrct.ptrToCache = Com_GetAddrRxDeferredFctPtrCache(0);
; ..\component\Com\Implementation\Com.c	  9592    deferredFctPtrCacheStrct.cacheSize = Com_GetSizeOfRxDeferredFctPtrCache();
; ..\component\Com\Implementation\Com.c	  9593  # else
; ..\component\Com\Implementation\Com.c	  9594    deferredFctPtrCacheStrct.ptrToCache = NULL_PTR;
; ..\component\Com\Implementation\Com.c	  9595    deferredFctPtrCacheStrct.cacheSize = 0;
; ..\component\Com\Implementation\Com.c	  9596  # endif
; ..\component\Com\Implementation\Com.c	  9597    deferredFctPtrCacheStrct.cacheIndex = 0;
; ..\component\Com\Implementation\Com.c	  9598  
; ..\component\Com\Implementation\Com.c	  9599  # if (COM_RXDEFERREDEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  9600    Com_RxProcessing_EnterExclusiveArea_Deferred();
; ..\component\Com\Implementation\Com.c	  9601  
; ..\component\Com\Implementation\Com.c	  9602    /* #10 If all received deferred processed events fitted into the deferred event cache */
; ..\component\Com\Implementation\Com.c	  9603    if(Com_GetRxNextEventCacheEnty() != COM_NO_HANDLERXPDUDEFERREDIDXOFRXPDUINFO)
; ..\component\Com\Implementation\Com.c	  9604    {
; ..\component\Com\Implementation\Com.c	  9605      Com_SizeOfRxPduInfoType idxRxPduInfo;
; ..\component\Com\Implementation\Com.c	  9606      fallbackRequired = FALSE;   /* Cache is not full. */
; ..\component\Com\Implementation\Com.c	  9607  
; ..\component\Com\Implementation\Com.c	  9608      /* #20 Iterate over all stored deferred events, and process them */
; ..\component\Com\Implementation\Com.c	  9609      while(Com_GetRxNextEventCacheEnty() > 0u)
; ..\component\Com\Implementation\Com.c	  9610      {
; ..\component\Com\Implementation\Com.c	  9611        Com_DecRxNextEventCacheEnty();    /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	  9612        idxRxPduInfo = Com_GetRxDeferredEventCache(Com_GetRxNextEventCacheEnty());
; ..\component\Com\Implementation\Com.c	  9613        if(Com_IsRxPduGrpActive(idxRxPduInfo))
; ..\component\Com\Implementation\Com.c	  9614        {
; ..\component\Com\Implementation\Com.c	  9615          if(0u < Com_GetHandleRxPduDeferred(Com_GetHandleRxPduDeferredIdxOfRxPduInfo(idxRxPduInfo)))
; ..\component\Com\Implementation\Com.c	  9616          {
; ..\component\Com\Implementation\Com.c	  9617            Com_RxProcessDeferredPDU((PduIdType) idxRxPduInfo, &deferredFctPtrCacheStrct);        /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	  9618          }
; ..\component\Com\Implementation\Com.c	  9619        }
; ..\component\Com\Implementation\Com.c	  9620        Com_RxProcessing_ThresholdCheck_Deferred(&deferredFctPtrCacheStrct);      /* SBSW_COM_FCTPTR_CACHE_PTR_1 */
; ..\component\Com\Implementation\Com.c	  9621  
; ..\component\Com\Implementation\Com.c	  9622        /* #25 If meanwhile new Pdus have been received and cache is full, stop processing cache and set fallback strategy flag */
; ..\component\Com\Implementation\Com.c	  9623        if(Com_GetRxNextEventCacheEnty() == COM_NO_HANDLERXPDUDEFERREDIDXOFRXPDUINFO)     /* COV_COM_DEFERRED_EVENTCACHE_FALLBACK */
; ..\component\Com\Implementation\Com.c	  9624        {
; ..\component\Com\Implementation\Com.c	  9625          fallbackRequired = TRUE;
; ..\component\Com\Implementation\Com.c	  9626          break;
; ..\component\Com\Implementation\Com.c	  9627        }
; ..\component\Com\Implementation\Com.c	  9628      }
; ..\component\Com\Implementation\Com.c	  9629    }
; ..\component\Com\Implementation\Com.c	  9630  
; ..\component\Com\Implementation\Com.c	  9631    /* #26 If fallback strategy flag is set or cache is not configured, iterate over all Rx Pdus */
; ..\component\Com\Implementation\Com.c	  9632    if(fallbackRequired == TRUE)  /* COV_COM_DEFERRED_EVENTCACHE_FALLBACK */
; ..\component\Com\Implementation\Com.c	  9633    {
; ..\component\Com\Implementation\Com.c	  9634      Com_RxDeferredPduProcessing_IterateOverAllRxPdus(&deferredFctPtrCacheStrct);        /* SBSW_COM_FCTPTR_CACHE_PTR_1 */
; ..\component\Com\Implementation\Com.c	  9635    }
; ..\component\Com\Implementation\Com.c	  9636    Com_RxProcessing_ExitExclusiveArea_Deferred();
; ..\component\Com\Implementation\Com.c	  9637  # else
; ..\component\Com\Implementation\Com.c	  9638    {
; ..\component\Com\Implementation\Com.c	  9639      Com_RxProcessing_EnterExclusiveArea_Deferred();
; ..\component\Com\Implementation\Com.c	  9640      Com_RxDeferredPduProcessing_IterateOverAllRxPdus(&deferredFctPtrCacheStrct);        /* SBSW_COM_FCTPTR_CACHE_PTR_1 */
; ..\component\Com\Implementation\Com.c	  9641      Com_RxProcessing_ExitExclusiveArea_Deferred();
; ..\component\Com\Implementation\Com.c	  9642    }
; ..\component\Com\Implementation\Com.c	  9643  # endif
; ..\component\Com\Implementation\Com.c	  9644  
; ..\component\Com\Implementation\Com.c	  9645  # if (COM_RXDEFERREDFCTPTRCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  9646    /* #40 Call all cached notification and invalid notification functions. */
; ..\component\Com\Implementation\Com.c	  9647    Com_ProcessRxFctPtrCache(&deferredFctPtrCacheStrct);  /* SBSW_COM_FCTPTR_CACHE_PTR_1 */
; ..\component\Com\Implementation\Com.c	  9648  # endif
; ..\component\Com\Implementation\Com.c	  9649  }
; ..\component\Com\Implementation\Com.c	  9650  
; ..\component\Com\Implementation\Com.c	  9651  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9652    Com_RxDeferredPduProcessing_IterateOverAllRxPdus
; ..\component\Com\Implementation\Com.c	  9653  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9654  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9655   *
; ..\component\Com\Implementation\Com.c	  9656   *
; ..\component\Com\Implementation\Com.c	  9657   *
; ..\component\Com\Implementation\Com.c	  9658  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9659  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxDeferredPduProcessing_IterateOverAllRxPdus(P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) deferredFctPtrCacheStrct)
; ..\component\Com\Implementation\Com.c	  9660  {
; ..\component\Com\Implementation\Com.c	  9661    Com_SizeOfRxPduInfoType idxRxPduInfo;
; ..\component\Com\Implementation\Com.c	  9662  
; ..\component\Com\Implementation\Com.c	  9663  # if (COM_RXDEFERREDEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  9664    /* #10 Reset deferred event caching index */
; ..\component\Com\Implementation\Com.c	  9665    Com_SetRxNextEventCacheEnty(0);       /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	  9666  # endif
; ..\component\Com\Implementation\Com.c	  9667    /* #20 Iterate over all Rx ComIPdus and If a "process deferred" flag is set, process that Rx ComIPdu */
; ..\component\Com\Implementation\Com.c	  9668    for(idxRxPduInfo = 0; idxRxPduInfo < Com_GetSizeOfRxPduInfo(); idxRxPduInfo++)
; ..\component\Com\Implementation\Com.c	  9669    {
; ..\component\Com\Implementation\Com.c	  9670      if(Com_RxProcessing_IsDeferredProcessingRequested(idxRxPduInfo) == TRUE)
; ..\component\Com\Implementation\Com.c	  9671      {
; ..\component\Com\Implementation\Com.c	  9672        Com_RxProcessDeferredPDU((PduIdType) idxRxPduInfo, deferredFctPtrCacheStrct);     /* SBSW_COM_FCTPTR_CACHE_PTR_1 */
; ..\component\Com\Implementation\Com.c	  9673      }   /* Is HandleRxPduDeferred Used */
; ..\component\Com\Implementation\Com.c	  9674      Com_RxProcessing_ThresholdCheck_Deferred(deferredFctPtrCacheStrct); /* SBSW_COM_FCTPTR_CACHE_PTR_1 */
; ..\component\Com\Implementation\Com.c	  9675    }
; ..\component\Com\Implementation\Com.c	  9676  }
; ..\component\Com\Implementation\Com.c	  9677  #endif
; ..\component\Com\Implementation\Com.c	  9678  
; ..\component\Com\Implementation\Com.c	  9679  #if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9680  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9681    Com_RxProcessDeferredPDU
; ..\component\Com\Implementation\Com.c	  9682  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9683  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9684   *
; ..\component\Com\Implementation\Com.c	  9685   *
; ..\component\Com\Implementation\Com.c	  9686   *
; ..\component\Com\Implementation\Com.c	  9687   *
; ..\component\Com\Implementation\Com.c	  9688   *
; ..\component\Com\Implementation\Com.c	  9689   *
; ..\component\Com\Implementation\Com.c	  9690   *
; ..\component\Com\Implementation\Com.c	  9691   *
; ..\component\Com\Implementation\Com.c	  9692   *
; ..\component\Com\Implementation\Com.c	  9693   *
; ..\component\Com\Implementation\Com.c	  9694  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9695  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessDeferredPDU(PduIdType idxRxPduInfo, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) deferredfctPtrCacheStrctPtr)       /* PRQA S 3206, 3673 */ /* MD_Com_3206, MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	  9696  {
; ..\component\Com\Implementation\Com.c	  9697    PduInfoType PduInfo;
; ..\component\Com\Implementation\Com.c	  9698  
; ..\component\Com\Implementation\Com.c	  9699    /* #10 Create a PduInfoType with the stored SduLength and the stored deferred Pdu data buffer */
; ..\component\Com\Implementation\Com.c	  9700    PduInfo.SduLength = Com_GetHandleRxPduDeferred(Com_GetHandleRxPduDeferredIdxOfRxPduInfo(idxRxPduInfo)) - 1u;
; ..\component\Com\Implementation\Com.c	  9701  
; ..\component\Com\Implementation\Com.c	  9702    switch (Com_GetTypeOfRxPduInfo(idxRxPduInfo))
; ..\component\Com\Implementation\Com.c	  9703    {
; ..\component\Com\Implementation\Com.c	  9704  # if (COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9705      case COM_TP_TYPEOFRXPDUINFO:
; ..\component\Com\Implementation\Com.c	  9706      {
; ..\component\Com\Implementation\Com.c	  9707        /* #20 If the Rx ComIPdu is a Tp Pdu use the Tp buffer as SduDataPtr */
; ..\component\Com\Implementation\Com.c	  9708        Com_RxTpInfoIdxOfRxPduInfoType rxTpPduInfoIdx = Com_GetRxTpInfoIdxOfRxPduInfo(idxRxPduInfo);
; ..\component\Com\Implementation\Com.c	  9709        PduInfo.SduDataPtr = Com_GetAddrRxTpBuffer(Com_GetRxTpBufferStartIdxOfRxTpInfo(rxTpPduInfoIdx));
; ..\component\Com\Implementation\Com.c	  9710        break;
; ..\component\Com\Implementation\Com.c	  9711      }
; ..\component\Com\Implementation\Com.c	  9712  # endif
; ..\component\Com\Implementation\Com.c	  9713  # if (COM_EXISTS_NORMAL_TYPEOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9714      case COM_NORMAL_TYPEOFRXPDUINFO:
; ..\component\Com\Implementation\Com.c	  9715      {
; ..\component\Com\Implementation\Com.c	  9716        /* #35 Use the normal deferred Pdu buffer if present, else use NULL_PTR */
; ..\component\Com\Implementation\Com.c	  9717        PduInfo.SduDataPtr = NULL_PTR;
; ..\component\Com\Implementation\Com.c	  9718  #  if (COM_RXDEFPDUBUFFERUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9719        if(Com_IsRxDefPduBufferUsedOfRxPduInfo(idxRxPduInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  9720        {
; ..\component\Com\Implementation\Com.c	  9721          PduInfo.SduDataPtr = Com_GetAddrRxDefPduBuffer(Com_GetRxDefPduBufferStartIdxOfRxPduInfo(idxRxPduInfo));
; ..\component\Com\Implementation\Com.c	  9722        }
; ..\component\Com\Implementation\Com.c	  9723  #  endif
; ..\component\Com\Implementation\Com.c	  9724        break;
; ..\component\Com\Implementation\Com.c	  9725      }
; ..\component\Com\Implementation\Com.c	  9726  # endif
; ..\component\Com\Implementation\Com.c	  9727      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  9728        break;
; ..\component\Com\Implementation\Com.c	  9729    }
; ..\component\Com\Implementation\Com.c	  9730  
; ..\component\Com\Implementation\Com.c	  9731    /* #40 Reset the "Handle Deferred" flag */
; ..\component\Com\Implementation\Com.c	  9732    Com_SetHandleRxPduDeferred(Com_GetHandleRxPduDeferredIdxOfRxPduInfo(idxRxPduInfo), 0);        /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  9733  
; ..\component\Com\Implementation\Com.c	  9734  # if (COM_RXSIGINFOENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9735    /* #50 Do Rx ComSignal processing for the passed Rx ComIPdu */
; ..\component\Com\Implementation\Com.c	  9736    Com_RxProcessing_RxPduSigEvent(idxRxPduInfo, &PduInfo, deferredfctPtrCacheStrctPtr);  /* SBSW_COM_FCTCALL_STACKPTR */
; ..\component\Com\Implementation\Com.c	  9737  # endif
; ..\component\Com\Implementation\Com.c	  9738  # if (COM_RXSIGGRPINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9739    /* #60 Do Rx ComSignalGroup processing for the passed Rx ComIPdu */
; ..\component\Com\Implementation\Com.c	  9740    Com_RxProcessing_RxPduSigGrpEvent(idxRxPduInfo, &PduInfo, deferredfctPtrCacheStrctPtr);       /* SBSW_COM_FCTCALL_STACKPTR */
; ..\component\Com\Implementation\Com.c	  9741  # endif
; ..\component\Com\Implementation\Com.c	  9742  
; ..\component\Com\Implementation\Com.c	  9743  # if (COM_RXTOUTINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9744    /* #70 If the passed Rx ComIPdu has a timeout, remove the timeout occurred flag */
; ..\component\Com\Implementation\Com.c	  9745    if(Com_IsRxTOutInfoUsedOfRxPduInfo(idxRxPduInfo))     /* COV_COM_RXDEFERRED_TIMEOUT */
; ..\component\Com\Implementation\Com.c	  9746    {
; ..\component\Com\Implementation\Com.c	  9747      Com_LMgt_RemoveOccurredFlag(Com_GetRxTOutInfoIdxOfRxPduInfo(idxRxPduInfo)); /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  9748    }
; ..\component\Com\Implementation\Com.c	  9749  # endif
; ..\component\Com\Implementation\Com.c	  9750  
; ..\component\Com\Implementation\Com.c	  9751  # if (COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9752    /* #80 If the Rx ComIPdu is a Tp pdu, reset the tp parameter */
; ..\component\Com\Implementation\Com.c	  9753    if(Com_GetTypeOfRxPduInfo(idxRxPduInfo) == COM_TP_TYPEOFRXPDUINFO)    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  9754    {
; ..\component\Com\Implementation\Com.c	  9755      Com_ResetRxTpConnection(idxRxPduInfo);
; ..\component\Com\Implementation\Com.c	  9756    }
; ..\component\Com\Implementation\Com.c	  9757  # endif
; ..\component\Com\Implementation\Com.c	  9758    COM_DUMMY_STATEMENT(PduInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  9759    COM_DUMMY_STATEMENT(deferredfctPtrCacheStrctPtr);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  9760  }
; ..\component\Com\Implementation\Com.c	  9761  #endif
; ..\component\Com\Implementation\Com.c	  9762  
; ..\component\Com\Implementation\Com.c	  9763  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9764  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9765    Com_RxIndication_ProcessPdu
; ..\component\Com\Implementation\Com.c	  9766  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9767  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9768   *
; ..\component\Com\Implementation\Com.c	  9769   *
; ..\component\Com\Implementation\Com.c	  9770   *
; ..\component\Com\Implementation\Com.c	  9771   *
; ..\component\Com\Implementation\Com.c	  9772   *
; ..\component\Com\Implementation\Com.c	  9773   *
; ..\component\Com\Implementation\Com.c	  9774   *
; ..\component\Com\Implementation\Com.c	  9775   *
; ..\component\Com\Implementation\Com.c	  9776   *
; ..\component\Com\Implementation\Com.c	  9777   *
; ..\component\Com\Implementation\Com.c	  9778   *
; ..\component\Com\Implementation\Com.c	  9779  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9780  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxIndication_ProcessPdu(PduIdType ComPduId, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr)
; ..\component\Com\Implementation\Com.c	  9781  {
; ..\component\Com\Implementation\Com.c	  9782    PduIdType comRxPduInfoIdx = ComPduId;
; ..\component\Com\Implementation\Com.c	  9783  # if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9784    /* #10 If the passed Rx ComIPdu is handled deferred */
; ..\component\Com\Implementation\Com.c	  9785    if(Com_IsHandleRxPduDeferredUsedOfRxPduInfo(comRxPduInfoIdx)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  9786    {
; ..\component\Com\Implementation\Com.c	  9787      SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  9788  #  if (COM_RXDEFPDUBUFFERUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9789      switch (Com_GetTypeOfRxPduInfo(comRxPduInfoIdx))
; ..\component\Com\Implementation\Com.c	  9790      {
; ..\component\Com\Implementation\Com.c	  9791  #   if(COM_EXISTS_NORMAL_TYPEOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9792        case COM_NORMAL_TYPEOFRXPDUINFO:
; ..\component\Com\Implementation\Com.c	  9793          /* #20 If the passed Rx ComIPdu is not a TP Pdu and no NULL_PTR, copy the passed Sdu data to the deferred Pdu buffer */
; ..\component\Com\Implementation\Com.c	  9794          if(PduInfoPtr->SduDataPtr != NULL_PTR)
; ..\component\Com\Implementation\Com.c	  9795          {
; ..\component\Com\Implementation\Com.c	  9796            Com_RxDefPduBufferLengthOfRxPduInfoType numberOfBytes =
; ..\component\Com\Implementation\Com.c	  9797              ((Com_GetRxDefPduBufferLengthOfRxPduInfo(comRxPduInfoIdx)) >
; ..\component\Com\Implementation\Com.c	  9798               PduInfoPtr->SduLength) ? (Com_RxDefPduBufferLengthOfRxPduInfoType) (PduInfoPtr->SduLength) : Com_GetRxDefPduBufferLengthOfRxPduInfo(comRxPduInfoIdx);
; ..\component\Com\Implementation\Com.c	  9799            VStdMemCpyRamToRam(Com_GetAddrRxDefPduBuffer(Com_GetRxDefPduBufferStartIdxOfRxPduInfo(comRxPduInfoIdx)), (P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)) PduInfoPtr->SduDataPtr, numberOfBytes);   /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_MEM_CPY_2RAM */
; ..\component\Com\Implementation\Com.c	  9800          }
; ..\component\Com\Implementation\Com.c	  9801          break;
; ..\component\Com\Implementation\Com.c	  9802  #   endif
; ..\component\Com\Implementation\Com.c	  9803  #   if(COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9804        case COM_TP_TYPEOFRXPDUINFO:
; ..\component\Com\Implementation\Com.c	  9805          break;
; ..\component\Com\Implementation\Com.c	  9806  #   endif
; ..\component\Com\Implementation\Com.c	  9807        default: /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  9808          break;
; ..\component\Com\Implementation\Com.c	  9809      }
; ..\component\Com\Implementation\Com.c	  9810  #  endif
; ..\component\Com\Implementation\Com.c	  9811  #  if (COM_RXDEFERREDEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  9812      /* #30 If the passed ComIPdu is not cached yet, add the Rx ComIPdu to the deferred event cache */
; ..\component\Com\Implementation\Com.c	  9813      if(Com_GetHandleRxPduDeferred(Com_GetHandleRxPduDeferredIdxOfRxPduInfo(comRxPduInfoIdx)) == 0u)     /* COV_COM_RXDEFERRED_PROCESSING */
; ..\component\Com\Implementation\Com.c	  9814      {
; ..\component\Com\Implementation\Com.c	  9815        Com_RxIndication_CacheDeferredEvent((Com_RxDeferredEventCacheType) comRxPduInfoIdx);
; ..\component\Com\Implementation\Com.c	  9816      }
; ..\component\Com\Implementation\Com.c	  9817  #  endif
; ..\component\Com\Implementation\Com.c	  9818      /* #40 Store the passed Sdu length in the handle deferred buffer */
; ..\component\Com\Implementation\Com.c	  9819      Com_SetHandleRxPduDeferred(Com_GetHandleRxPduDeferredIdxOfRxPduInfo(comRxPduInfoIdx), (PduInfoPtr->SduLength + 1u));        /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	  9820  #  if(COM_GWEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  9821      Com_RxIndication_CacheDeferredDescriptionGwEvent(comRxPduInfoIdx);
; ..\component\Com\Implementation\Com.c	  9822  #  endif
; ..\component\Com\Implementation\Com.c	  9823      SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  9824    }
; ..\component\Com\Implementation\Com.c	  9825  # endif
; ..\component\Com\Implementation\Com.c	  9826  # if ((COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON) && (COM_EXISTS_IMMEDIATE_SIGNALPROCESSINGOFRXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	  9827    else
; ..\component\Com\Implementation\Com.c	  9828  # endif
; ..\component\Com\Implementation\Com.c	  9829  # if (COM_EXISTS_IMMEDIATE_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9830      /* #50 Otherwise process the Rx ComIPdu immediate */
; ..\component\Com\Implementation\Com.c	  9831    {
; ..\component\Com\Implementation\Com.c	  9832      FctPtrCacheStrct immediateFctPtrCacheStrct;
; ..\component\Com\Implementation\Com.c	  9833  
; ..\component\Com\Implementation\Com.c	  9834  #  if (COM_RXIMMEDIATEFCTPTRCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  9835      uint32 fctPtrCache[COM_RXIMMEDIATEFCTPTRCACHESIZE];
; ..\component\Com\Implementation\Com.c	  9836      immediateFctPtrCacheStrct.ptrToCache = fctPtrCache;
; ..\component\Com\Implementation\Com.c	  9837      immediateFctPtrCacheStrct.cacheSize = COM_RXIMMEDIATEFCTPTRCACHESIZE;
; ..\component\Com\Implementation\Com.c	  9838  #  else
; ..\component\Com\Implementation\Com.c	  9839      immediateFctPtrCacheStrct.ptrToCache = NULL_PTR;
; ..\component\Com\Implementation\Com.c	  9840      immediateFctPtrCacheStrct.cacheSize = 0;
; ..\component\Com\Implementation\Com.c	  9841  #  endif
; ..\component\Com\Implementation\Com.c	  9842      immediateFctPtrCacheStrct.cacheIndex = 0;
; ..\component\Com\Implementation\Com.c	  9843  
; ..\component\Com\Implementation\Com.c	  9844      SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  9845  #  if (COM_RXSIGINFOENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9846      /* #60 Do Rx ComSignal processing */
; ..\component\Com\Implementation\Com.c	  9847      Com_RxProcessing_RxPduSigEvent(comRxPduInfoIdx, PduInfoPtr, &immediateFctPtrCacheStrct);    /* SBSW_COM_FCTCALL_WITH_P2CONST_AND_FCTPTR_CACHE_PTR_1 */
; ..\component\Com\Implementation\Com.c	  9848  #  endif
; ..\component\Com\Implementation\Com.c	  9849  #  if (COM_RXSIGGRPINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9850      /* #70 Do Rx ComSignalGroup processing */
; ..\component\Com\Implementation\Com.c	  9851      Com_RxProcessing_RxPduSigGrpEvent(comRxPduInfoIdx, PduInfoPtr, &immediateFctPtrCacheStrct); /* SBSW_COM_FCTCALL_WITH_P2CONST_AND_FCTPTR_CACHE_PTR_1 */
; ..\component\Com\Implementation\Com.c	  9852  #  endif
; ..\component\Com\Implementation\Com.c	  9853  #  if (COM_GWTXPDUDESCRIPTIONINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9854      /* #75 If rxPdu has any configured GwDescriptions, do gateway description processing */
; ..\component\Com\Implementation\Com.c	  9855      if(Com_IsGwTxPduDescriptionInfoUsedOfRxPduInfo(comRxPduInfoIdx))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  9856      {
; ..\component\Com\Implementation\Com.c	  9857        SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	  9858  
; ..\component\Com\Implementation\Com.c	  9859        Com_RxProcessing_GwDescriptionEvent(comRxPduInfoIdx,      /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9860                                            PduInfoPtr);
; ..\component\Com\Implementation\Com.c	  9861  
; ..\component\Com\Implementation\Com.c	  9862        SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	  9863      }
; ..\component\Com\Implementation\Com.c	  9864  #  endif
; ..\component\Com\Implementation\Com.c	  9865  
; ..\component\Com\Implementation\Com.c	  9866  #  if (COM_RXTOUTINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9867      /* #80 If the passed Rx ComIPdu has a timeout, remove the timeout occurred flag */
; ..\component\Com\Implementation\Com.c	  9868      if(Com_IsRxTOutInfoUsedOfRxPduInfo(comRxPduInfoIdx))        /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	  9869      {
; ..\component\Com\Implementation\Com.c	  9870        Com_LMgt_RemoveOccurredFlag(Com_GetRxTOutInfoIdxOfRxPduInfo(comRxPduInfoIdx));    /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	  9871      }
; ..\component\Com\Implementation\Com.c	  9872  #  endif
; ..\component\Com\Implementation\Com.c	  9873      SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	  9874  
; ..\component\Com\Implementation\Com.c	  9875  #  if (COM_RXIMMEDIATEFCTPTRCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	  9876      /* #90 Call all cached notification or invalid notifications and clear the immediate function pointer cache */
; ..\component\Com\Implementation\Com.c	  9877      Com_ProcessRxFctPtrCache(&immediateFctPtrCacheStrct);       /* SBSW_COM_FCTPTR_CACHE_PTR_1 */
; ..\component\Com\Implementation\Com.c	  9878  #  endif
; ..\component\Com\Implementation\Com.c	  9879  
; ..\component\Com\Implementation\Com.c	  9880      COM_DUMMY_STATEMENT(immediateFctPtrCacheStrct);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  9881    }     /* Immediate signal processing */
; ..\component\Com\Implementation\Com.c	  9882  # endif
; ..\component\Com\Implementation\Com.c	  9883  }       /* PRQA S 6050 */ /* MD_MSR_STCAL */
; ..\component\Com\Implementation\Com.c	  9884  #endif
; ..\component\Com\Implementation\Com.c	  9885  
; ..\component\Com\Implementation\Com.c	  9886  #if (COM_RXCBKFUNCPTR == STD_ON)
; ..\component\Com\Implementation\Com.c	  9887  /* jet: ComNotificationCache snippet */
; ..\component\Com\Implementation\Com.c	  9888  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9889    Com_ProcessRxFctPtrCache
; ..\component\Com\Implementation\Com.c	  9890  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9891  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9892   *
; ..\component\Com\Implementation\Com.c	  9893   *
; ..\component\Com\Implementation\Com.c	  9894  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9895  LOCAL_INLINE FUNC(void, COM_CODE) Com_ProcessRxFctPtrCache(P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr)
; ..\component\Com\Implementation\Com.c	  9896  {
; ..\component\Com\Implementation\Com.c	  9897    while(fctPtrCacheStrctPtr->cacheIndex > 0u)
; ..\component\Com\Implementation\Com.c	  9898    {
; ..\component\Com\Implementation\Com.c	  9899      Com_RxCbkFuncPtrIterType cbkFctPtrIdx;
; ..\component\Com\Implementation\Com.c	  9900  
; ..\component\Com\Implementation\Com.c	  9901      fctPtrCacheStrctPtr->cacheIndex = fctPtrCacheStrctPtr->cacheIndex - 1u;     /* SBSW_COM_FCTPTR_CACHE_PTR_2 */
; ..\component\Com\Implementation\Com.c	  9902      cbkFctPtrIdx = (Com_RxCbkFuncPtrIterType) fctPtrCacheStrctPtr->ptrToCache[fctPtrCacheStrctPtr->cacheIndex]; /* PRQA S 2842 */ /* MD_Com_ProcessRxFctPtrCache */
; ..\component\Com\Implementation\Com.c	  9903  
; ..\component\Com\Implementation\Com.c	  9904      Com_GetRxCbkFuncPtr(cbkFctPtrIdx) ();       /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	  9905    }
; ..\component\Com\Implementation\Com.c	  9906  }
; ..\component\Com\Implementation\Com.c	  9907  
; ..\component\Com\Implementation\Com.c	  9908  #endif
; ..\component\Com\Implementation\Com.c	  9909  
; ..\component\Com\Implementation\Com.c	  9910  
; ..\component\Com\Implementation\Com.c	  9911  #if (COM_GWTXPDUDESCRIPTIONINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9912  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9913    Com_RxProcessing_GwDescriptionEvent
; ..\component\Com\Implementation\Com.c	  9914  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9915  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9916   *
; ..\component\Com\Implementation\Com.c	  9917   *
; ..\component\Com\Implementation\Com.c	  9918   *
; ..\component\Com\Implementation\Com.c	  9919   *
; ..\component\Com\Implementation\Com.c	  9920   *
; ..\component\Com\Implementation\Com.c	  9921   *
; ..\component\Com\Implementation\Com.c	  9922   *
; ..\component\Com\Implementation\Com.c	  9923   *
; ..\component\Com\Implementation\Com.c	  9924   *
; ..\component\Com\Implementation\Com.c	  9925   *
; ..\component\Com\Implementation\Com.c	  9926   *
; ..\component\Com\Implementation\Com.c	  9927   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9928  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_GwDescriptionEvent(PduIdType rxComPduId, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr)
; ..\component\Com\Implementation\Com.c	  9929  {
; ..\component\Com\Implementation\Com.c	  9930    Com_GwTxPduDescriptionInfoEndIdxOfRxPduInfoType gwTxPduIdx = Com_GetGwTxPduDescriptionInfoStartIdxOfRxPduInfo(rxComPduId);
; ..\component\Com\Implementation\Com.c	  9931    /* #20 Iterate over all corresponding destination TxPDUs */
; ..\component\Com\Implementation\Com.c	  9932    for(; gwTxPduIdx < Com_GetGwTxPduDescriptionInfoEndIdxOfRxPduInfo(rxComPduId); gwTxPduIdx++)
; ..\component\Com\Implementation\Com.c	  9933    {
; ..\component\Com\Implementation\Com.c	  9934      Com_GwDescriptionAccessInfoEndIdxOfGwTxPduDescriptionInfoType gwDescrAccessIdx = Com_GetGwDescriptionAccessInfoStartIdxOfGwTxPduDescriptionInfo(gwTxPduIdx);
; ..\component\Com\Implementation\Com.c	  9935  
; ..\component\Com\Implementation\Com.c	  9936      Com_TxPduInfoIdxOfGwDescriptionAccessInfoType txPduID = Com_GetTxPduInfoIdxOfGwDescriptionAccessInfo(gwDescrAccessIdx);
; ..\component\Com\Implementation\Com.c	  9937  
; ..\component\Com\Implementation\Com.c	  9938      boolean gwDescriptionUpdated = FALSE;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  9939      boolean sendTrigger = FALSE;        /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  9940      boolean withoutRepetitionFlag = TRUE;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	  9941  
; ..\component\Com\Implementation\Com.c	  9942      /* #30 Process all descriptions that correspond to the same destination txPdu */
; ..\component\Com\Implementation\Com.c	  9943      for(; gwDescrAccessIdx < Com_GetGwDescriptionAccessInfoEndIdxOfGwTxPduDescriptionInfo(gwTxPduIdx); gwDescrAccessIdx++)
; ..\component\Com\Implementation\Com.c	  9944      {
; ..\component\Com\Implementation\Com.c	  9945        /* #31 Check if the source description is fully contained in received buffer */
; ..\component\Com\Implementation\Com.c	  9946        if(PduInfoPtr->SduLength >= Com_GetValidDlcOfGwDescriptionAccessInfo(gwDescrAccessIdx))
; ..\component\Com\Implementation\Com.c	  9947        {
; ..\component\Com\Implementation\Com.c	  9948  # if (COM_RXUBMASKUSEDOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9949          /* #35 Check if the source description was updated */
; ..\component\Com\Implementation\Com.c	  9950          if(Com_RxProcessing_CheckGwDescriptionUB(gwDescrAccessIdx, PduInfoPtr) == TRUE) /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9951  # endif
; ..\component\Com\Implementation\Com.c	  9952          {
; ..\component\Com\Implementation\Com.c	  9953            switch (Com_RxProcessing_ProcessDestinationDescription(PduInfoPtr->SduDataPtr, gwDescrAccessIdx))     /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	  9954            {
; ..\component\Com\Implementation\Com.c	  9955              case COM_TRANSMIT_TRIGGERWITHOUTREP:
; ..\component\Com\Implementation\Com.c	  9956                sendTrigger = TRUE;       /* #40 Set transmit flag if at least one description fulfills the transmit condition */
; ..\component\Com\Implementation\Com.c	  9957                break;
; ..\component\Com\Implementation\Com.c	  9958              case COM_TRANSMIT_TRIGGER:
; ..\component\Com\Implementation\Com.c	  9959                sendTrigger = TRUE;
; ..\component\Com\Implementation\Com.c	  9960                withoutRepetitionFlag = FALSE;    /* #50 Set repetition flag if at least one description requires repetitve transmit */
; ..\component\Com\Implementation\Com.c	  9961                break;
; ..\component\Com\Implementation\Com.c	  9962              default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	  9963                break;
; ..\component\Com\Implementation\Com.c	  9964            }
; ..\component\Com\Implementation\Com.c	  9965  
; ..\component\Com\Implementation\Com.c	  9966            gwDescriptionUpdated = TRUE;
; ..\component\Com\Implementation\Com.c	  9967          }
; ..\component\Com\Implementation\Com.c	  9968        }
; ..\component\Com\Implementation\Com.c	  9969      }
; ..\component\Com\Implementation\Com.c	  9970  
; ..\component\Com\Implementation\Com.c	  9971  # if (COM_GWTIMEOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	  9972      /* #55 If any gateway description belonging to same source and destination Pdu was updated */
; ..\component\Com\Implementation\Com.c	  9973      if(gwDescriptionUpdated == TRUE)
; ..\component\Com\Implementation\Com.c	  9974      {
; ..\component\Com\Implementation\Com.c	  9975        /* #60 Handle Gw Timeout if configured */
; ..\component\Com\Implementation\Com.c	  9976        Com_GwTout_Event((PduIdType) txPduID);
; ..\component\Com\Implementation\Com.c	  9977      }
; ..\component\Com\Implementation\Com.c	  9978  # endif
; ..\component\Com\Implementation\Com.c	  9979  # if ((COM_DIRECTOFTXMODETRUE == STD_ON) || (COM_DIRECTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	  9980      /* #70 If transmit condition is fulfilled (transmit flag is set) */
; ..\component\Com\Implementation\Com.c	  9981      if(sendTrigger == TRUE)
; ..\component\Com\Implementation\Com.c	  9982      {
; ..\component\Com\Implementation\Com.c	  9983        Com_TypeOfGwDescriptionAccessInfoType typeOfDescription = Com_GetTypeOfGwDescriptionAccessInfo(Com_GetGwDescriptionAccessInfoStartIdxOfGwTxPduDescriptionInfo(gwTxPduIdx));
; ..\component\Com\Implementation\Com.c	  9984        /* #80 Trigger the transmission of the PDU */
; ..\component\Com\Implementation\Com.c	  9985        Com_RxProcessing_GwDescriptionTransmit((PduIdType) txPduID, Com_IsGwDestinationDescriptionTypeImmediate(typeOfDescription), withoutRepetitionFlag);       /* COV_COM_IMMEDIATE_DESTINATION_DESCRIPTION */
; ..\component\Com\Implementation\Com.c	  9986      }
; ..\component\Com\Implementation\Com.c	  9987  # endif
; ..\component\Com\Implementation\Com.c	  9988      COM_DUMMY_STATEMENT(withoutRepetitionFlag); /* PRQA S 1338, 2983, 3112, 2982 */ /* MD_MSR_DummyStmt, MD_MSR_DummyStmt, MD_MSR_DummyStmt, MD_Com_2982 */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  9989      COM_DUMMY_STATEMENT(sendTrigger);   /* PRQA S 1338, 2983, 3112, 2982 */ /* MD_MSR_DummyStmt, MD_MSR_DummyStmt, MD_MSR_DummyStmt, MD_Com_2982 */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  9990      COM_DUMMY_STATEMENT(gwDescriptionUpdated);  /* PRQA S 1338, 2983, 3112, 2982 */ /* MD_MSR_DummyStmt, MD_MSR_DummyStmt, MD_MSR_DummyStmt, MD_Com_2982 */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	  9991    }
; ..\component\Com\Implementation\Com.c	  9992  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	  9993  
; ..\component\Com\Implementation\Com.c	  9994  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	  9995    Com_RxProcessing_ProcessDestinationDescription
; ..\component\Com\Implementation\Com.c	  9996  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	  9997  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	  9998   *
; ..\component\Com\Implementation\Com.c	  9999   *
; ..\component\Com\Implementation\Com.c	 10000   *
; ..\component\Com\Implementation\Com.c	 10001   *
; ..\component\Com\Implementation\Com.c	 10002   *
; ..\component\Com\Implementation\Com.c	 10003   *
; ..\component\Com\Implementation\Com.c	 10004   *
; ..\component\Com\Implementation\Com.c	 10005   ********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10006  LOCAL_INLINE FUNC(Com_GwDescriptionTriggerType, COM_CODE) Com_RxProcessing_ProcessDestinationDescription(P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) rxPduBuffer,
; ..\component\Com\Implementation\Com.c	 10007                                                                                                           Com_GwDescriptionAccessInfoEndIdxOfGwTxPduDescriptionInfoType gwDescrAccessIdx)
; ..\component\Com\Implementation\Com.c	 10008  {
; ..\component\Com\Implementation\Com.c	 10009    Com_GwDescriptionTriggerType retVal = COM_TRANSMIT_TRIGGER_NOTFULFILLED;      /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 10010  
; ..\component\Com\Implementation\Com.c	 10011    Com_TypeOfGwDescriptionAccessInfoType descriptionType = Com_GetTypeOfGwDescriptionAccessInfo(gwDescrAccessIdx);
; ..\component\Com\Implementation\Com.c	 10012  
; ..\component\Com\Implementation\Com.c	 10013    boolean triggerCondition = TRUE;
; ..\component\Com\Implementation\Com.c	 10014  
; ..\component\Com\Implementation\Com.c	 10015    /* #10 Copy configured bytes into destination txPduBuffers */
; ..\component\Com\Implementation\Com.c	 10016    boolean hasContentChanged = Com_GwDescriptionCopyBuffer(rxPduBuffer, gwDescrAccessIdx);       /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10017  
; ..\component\Com\Implementation\Com.c	 10018    if(Com_IsGwDestinationDescriptionTypeOnChange(descriptionType))       /* TRIGGERED ON CHANGE */
; ..\component\Com\Implementation\Com.c	 10019    {
; ..\component\Com\Implementation\Com.c	 10020      triggerCondition = hasContentChanged;
; ..\component\Com\Implementation\Com.c	 10021    }
; ..\component\Com\Implementation\Com.c	 10022  
; ..\component\Com\Implementation\Com.c	 10023    /* #20 If transferProperty is not type of ON-CHANGE or content of description has changed */
; ..\component\Com\Implementation\Com.c	 10024    if(triggerCondition == TRUE)
; ..\component\Com\Implementation\Com.c	 10025    {
; ..\component\Com\Implementation\Com.c	 10026      /* #30 Set TRIGGERED and WITHOUTREPETITION FLAG if transfer property is TriggeredWithoutRepetition or TriggeredOnChangeWithoutRepetition */
; ..\component\Com\Implementation\Com.c	 10027      if(Com_IsGwDestinationDescriptionTypeWithoutRepetion(descriptionType))
; ..\component\Com\Implementation\Com.c	 10028      {
; ..\component\Com\Implementation\Com.c	 10029        retVal = COM_TRANSMIT_TRIGGERWITHOUTREP;
; ..\component\Com\Implementation\Com.c	 10030      }
; ..\component\Com\Implementation\Com.c	 10031      /* #40 otherwise set TRIGGERED FLAG if transfer property is Triggered */
; ..\component\Com\Implementation\Com.c	 10032      else if(Com_IsGwDestinationDescriptionTypeTriggered(descriptionType))
; ..\component\Com\Implementation\Com.c	 10033      {
; ..\component\Com\Implementation\Com.c	 10034        retVal = COM_TRANSMIT_TRIGGER;
; ..\component\Com\Implementation\Com.c	 10035      }
; ..\component\Com\Implementation\Com.c	 10036      else
; ..\component\Com\Implementation\Com.c	 10037      {
; ..\component\Com\Implementation\Com.c	 10038        /* #50 otherwise transfer property is assumed to be PENDING */
; ..\component\Com\Implementation\Com.c	 10039        retVal = COM_TRANSMIT_TRIGGER_NOTFULFILLED;
; ..\component\Com\Implementation\Com.c	 10040      }
; ..\component\Com\Implementation\Com.c	 10041    }
; ..\component\Com\Implementation\Com.c	 10042  
; ..\component\Com\Implementation\Com.c	 10043  # if (COM_TXUBMASKUSEDOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10044    /* #60 If the destination description has a configured UB, set UB in the Tx ComIPdu Buffer. */
; ..\component\Com\Implementation\Com.c	 10045    if(Com_IsTxUbMaskUsedOfGwDescriptionAccessInfo(gwDescrAccessIdx))
; ..\component\Com\Implementation\Com.c	 10046    {
; ..\component\Com\Implementation\Com.c	 10047      Com_TxBufferEndIdxOfTxPduInfoType ubIdx = Com_GetTxBufferUbIdxOfGwDescriptionAccessInfo(gwDescrAccessIdx);
; ..\component\Com\Implementation\Com.c	 10048      Com_SetTxBuffer(ubIdx, (Com_GetTxBuffer(ubIdx) | Com_GetConstValueUInt8(Com_GetTxUbMaskIdxOfGwDescriptionAccessInfo(gwDescrAccessIdx))));   /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10049    }
; ..\component\Com\Implementation\Com.c	 10050  # endif
; ..\component\Com\Implementation\Com.c	 10051  
; ..\component\Com\Implementation\Com.c	 10052    return retVal;
; ..\component\Com\Implementation\Com.c	 10053  }
; ..\component\Com\Implementation\Com.c	 10054  
; ..\component\Com\Implementation\Com.c	 10055   /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10056    Com_GwDescriptionCopyBuffer
; ..\component\Com\Implementation\Com.c	 10057   *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10058  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10059   *
; ..\component\Com\Implementation\Com.c	 10060   *
; ..\component\Com\Implementation\Com.c	 10061   *
; ..\component\Com\Implementation\Com.c	 10062   *
; ..\component\Com\Implementation\Com.c	 10063   *
; ..\component\Com\Implementation\Com.c	 10064   ********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10065  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_GwDescriptionCopyBuffer(P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) rxPduBuffer, Com_GwDescriptionAccessInfoEndIdxOfGwTxPduDescriptionInfoType gwDescrAccessIdx)
; ..\component\Com\Implementation\Com.c	 10066  {
; ..\component\Com\Implementation\Com.c	 10067    boolean hasContentChanged = FALSE;    /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 10068  
; ..\component\Com\Implementation\Com.c	 10069    P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) destinationBuffer;
; ..\component\Com\Implementation\Com.c	 10070    boolean isBigEndian;
; ..\component\Com\Implementation\Com.c	 10071  
; ..\component\Com\Implementation\Com.c	 10072    P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) sourceBuffer = &(rxPduBuffer[Com_GetSourceStartBytePositionOfGwDescriptionAccessInfo(gwDescrAccessIdx)]);
; ..\component\Com\Implementation\Com.c	 10073    uint8 sourceStartBitIndex = Com_GetGwSourceStartBitIndexOfGwDescriptionAccessInfo(gwDescrAccessIdx);
; ..\component\Com\Implementation\Com.c	 10074    uint8 bitOffset = Com_GetBitOffsetOfGwDescriptionAccessInfo(gwDescrAccessIdx);
; ..\component\Com\Implementation\Com.c	 10075  
; ..\component\Com\Implementation\Com.c	 10076    Com_TxBufferLengthOfGwDescriptionAccessInfoType destinationBufferSize = Com_GetTxBufferLengthOfGwDescriptionAccessInfo(gwDescrAccessIdx);
; ..\component\Com\Implementation\Com.c	 10077  
; ..\component\Com\Implementation\Com.c	 10078  # if (COM_EXISTS_BIG_ENDIAN_ENDIANNESSOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10079    if(Com_GetEndiannessOfGwDescriptionAccessInfo(gwDescrAccessIdx) == COM_BIG_ENDIAN_ENDIANNESSOFGWDESCRIPTIONACCESSINFO)
; ..\component\Com\Implementation\Com.c	 10080    {
; ..\component\Com\Implementation\Com.c	 10081      destinationBuffer = Com_GetAddrTxBuffer(Com_GetTxBufferEndIdxOfGwDescriptionAccessInfo(gwDescrAccessIdx) - 1u);
; ..\component\Com\Implementation\Com.c	 10082      isBigEndian = TRUE;
; ..\component\Com\Implementation\Com.c	 10083    }
; ..\component\Com\Implementation\Com.c	 10084    else
; ..\component\Com\Implementation\Com.c	 10085  # endif
; ..\component\Com\Implementation\Com.c	 10086    {
; ..\component\Com\Implementation\Com.c	 10087      destinationBuffer = Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfGwDescriptionAccessInfo(gwDescrAccessIdx));
; ..\component\Com\Implementation\Com.c	 10088      isBigEndian = FALSE;
; ..\component\Com\Implementation\Com.c	 10089    }
; ..\component\Com\Implementation\Com.c	 10090  
; ..\component\Com\Implementation\Com.c	 10091    switch (Com_GetCopyTypeOfGwDescriptionAccessInfo(gwDescrAccessIdx))
; ..\component\Com\Implementation\Com.c	 10092    {     /* #10 If source and destination description are bit aligned respective to their relative start bit position, copy directly the desired bytes. */
; ..\component\Com\Implementation\Com.c	 10093  # if (COM_EXISTS_DIRECT_COPYTYPEOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10094      case COM_DIRECT_COPYTYPEOFGWDESCRIPTIONACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10095      {
; ..\component\Com\Implementation\Com.c	 10096        /* Assume direct copy is always little endian. */
; ..\component\Com\Implementation\Com.c	 10097        hasContentChanged = Com_GwDescription_DirectCopy(gwDescrAccessIdx, sourceBuffer, destinationBuffer, destinationBufferSize);       /* SBSW_COM_GW_DESCRIPTION_COPYBUFFER */
; ..\component\Com\Implementation\Com.c	 10098        break;
; ..\component\Com\Implementation\Com.c	 10099      }
; ..\component\Com\Implementation\Com.c	 10100  # endif
; ..\component\Com\Implementation\Com.c	 10101  # if (COM_EXISTS_RIGHTSHIFT_COPYTYPEOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10102        /* #20 Otherwise if relative start bit index of source is bigger than destination, perform right shift copy operation. */
; ..\component\Com\Implementation\Com.c	 10103      case COM_RIGHTSHIFT_COPYTYPEOFGWDESCRIPTIONACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10104      {
; ..\component\Com\Implementation\Com.c	 10105        hasContentChanged = Com_GwDescription_RightShiftCopy(sourceBuffer, destinationBuffer, (uint16) destinationBufferSize, sourceStartBitIndex, bitOffset, Com_GetBitSizeOfGwDescriptionAccessInfo(gwDescrAccessIdx), isBigEndian);    /* SBSW_COM_GW_DESCRIPTION_COPYBUFFER */
; ..\component\Com\Implementation\Com.c	 10106        break;
; ..\component\Com\Implementation\Com.c	 10107      }
; ..\component\Com\Implementation\Com.c	 10108  # endif
; ..\component\Com\Implementation\Com.c	 10109  # if (COM_EXISTS_LEFTSHIFT_COPYTYPEOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10110        /* #30 Otherwise perform left shift copy operation. */
; ..\component\Com\Implementation\Com.c	 10111      case COM_LEFTSHIFT_COPYTYPEOFGWDESCRIPTIONACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10112      {
; ..\component\Com\Implementation\Com.c	 10113        hasContentChanged = Com_GwDescription_LeftShiftCopy(sourceBuffer, destinationBuffer, (uint16) destinationBufferSize, sourceStartBitIndex, bitOffset, Com_GetBitSizeOfGwDescriptionAccessInfo(gwDescrAccessIdx), isBigEndian);     /* SBSW_COM_GW_DESCRIPTION_COPYBUFFER */
; ..\component\Com\Implementation\Com.c	 10114        break;
; ..\component\Com\Implementation\Com.c	 10115      }
; ..\component\Com\Implementation\Com.c	 10116  # endif
; ..\component\Com\Implementation\Com.c	 10117      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	 10118        break;
; ..\component\Com\Implementation\Com.c	 10119    }
; ..\component\Com\Implementation\Com.c	 10120  
; ..\component\Com\Implementation\Com.c	 10121    COM_DUMMY_STATEMENT(sourceStartBitIndex);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 10122    COM_DUMMY_STATEMENT(bitOffset);       /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 10123    COM_DUMMY_STATEMENT(isBigEndian);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 10124  
; ..\component\Com\Implementation\Com.c	 10125    return hasContentChanged;
; ..\component\Com\Implementation\Com.c	 10126  }
; ..\component\Com\Implementation\Com.c	 10127  
; ..\component\Com\Implementation\Com.c	 10128  # if ((COM_DIRECTOFTXMODETRUE == STD_ON) || (COM_DIRECTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 10129  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10130    Com_RxProcessing_GwDescriptionTransmit
; ..\component\Com\Implementation\Com.c	 10131  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10132  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10133   *
; ..\component\Com\Implementation\Com.c	 10134   *
; ..\component\Com\Implementation\Com.c	 10135   *
; ..\component\Com\Implementation\Com.c	 10136   *
; ..\component\Com\Implementation\Com.c	 10137   *
; ..\component\Com\Implementation\Com.c	 10138   *
; ..\component\Com\Implementation\Com.c	 10139   *
; ..\component\Com\Implementation\Com.c	 10140   *
; ..\component\Com\Implementation\Com.c	 10141   *
; ..\component\Com\Implementation\Com.c	 10142   *
; ..\component\Com\Implementation\Com.c	 10143   *
; ..\component\Com\Implementation\Com.c	 10144   ***********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10145  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_GwDescriptionTransmit(PduIdType txPduID, boolean isImmediate, boolean withoutRepetitionFlag)
; ..\component\Com\Implementation\Com.c	 10146  {
; ..\component\Com\Implementation\Com.c	 10147  
; ..\component\Com\Implementation\Com.c	 10148    /* #10 If txPdu should be processed immediately and minimum delay time has elapsed */
; ..\component\Com\Implementation\Com.c	 10149    if((isImmediate == TRUE)
; ..\component\Com\Implementation\Com.c	 10150  #  if (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10151       && (Com_GetDelayTimeCnt(txPduID) == 0u)
; ..\component\Com\Implementation\Com.c	 10152  #  endif
; ..\component\Com\Implementation\Com.c	 10153      )   /* COV_COM_IMMEDIATE_DESTINATION_DESCRIPTION */
; ..\component\Com\Implementation\Com.c	 10154    {
; ..\component\Com\Implementation\Com.c	 10155      /* #20 If TxPdu is active */
; ..\component\Com\Implementation\Com.c	 10156      if(Com_IsTxPduGrpActive(txPduID))
; ..\component\Com\Implementation\Com.c	 10157      {
; ..\component\Com\Implementation\Com.c	 10158        /* #30 If Tx Pdu is in DIRECT or MIXED TxModeMode */
; ..\component\Com\Implementation\Com.c	 10159        if(Com_TxModeHdlr_IsDirectTxMode(txPduID) == TRUE)
; ..\component\Com\Implementation\Com.c	 10160        {
; ..\component\Com\Implementation\Com.c	 10161  #  if ((COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 10162          /* #40 Reload repetition counter and repetition cycle counter, if repetitions are required */
; ..\component\Com\Implementation\Com.c	 10163          if(withoutRepetitionFlag == FALSE)
; ..\component\Com\Implementation\Com.c	 10164          {
; ..\component\Com\Implementation\Com.c	 10165            Com_SetRepCnt(txPduID, Com_TxModeHdlr_GetCurRepCnt(txPduID)); /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 10166            Com_SetRepCycleCnt(txPduID, Com_TxModeHdlr_GetCurrentRepetitionPeriod(txPduID));      /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 10167  
; ..\component\Com\Implementation\Com.c	 10168  #   if (COM_EXISTS_NORMAL_MODEOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10169            /* #42 Reload Tx Deadline Monitoring timer if configured */
; ..\component\Com\Implementation\Com.c	 10170            if(0u < Com_GetRepCnt(txPduID))
; ..\component\Com\Implementation\Com.c	 10171            {
; ..\component\Com\Implementation\Com.c	 10172              /* SPEC-2736884 */
; ..\component\Com\Implementation\Com.c	 10173              if(Com_IsTxTOutInfoUsedOfTxPduInfo(txPduID))        /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 10174              {
; ..\component\Com\Implementation\Com.c	 10175                Com_TxTOutInfoIdxOfTxPduInfoType idxTxTOutInfo = Com_GetTxTOutInfoIdxOfTxPduInfo(txPduID);
; ..\component\Com\Implementation\Com.c	 10176                Com_SetTxTOutCnt(idxTxTOutInfo, Com_GetFactorOfTxTOutInfo(idxTxTOutInfo));        /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 10177              }
; ..\component\Com\Implementation\Com.c	 10178            }
; ..\component\Com\Implementation\Com.c	 10179            else
; ..\component\Com\Implementation\Com.c	 10180            {
; ..\component\Com\Implementation\Com.c	 10181              Com_TxModeHdlr_ReloadTxDlMonCounter(txPduID);
; ..\component\Com\Implementation\Com.c	 10182            }
; ..\component\Com\Implementation\Com.c	 10183  #   endif
; ..\component\Com\Implementation\Com.c	 10184          }
; ..\component\Com\Implementation\Com.c	 10185          else
; ..\component\Com\Implementation\Com.c	 10186  #  endif
; ..\component\Com\Implementation\Com.c	 10187          {
; ..\component\Com\Implementation\Com.c	 10188  #  if (COM_EXISTS_NORMAL_MODEOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10189            Com_TxModeHdlr_ReloadTxDlMonCounter(txPduID);
; ..\component\Com\Implementation\Com.c	 10190  #  endif
; ..\component\Com\Implementation\Com.c	 10191          }
; ..\component\Com\Implementation\Com.c	 10192          /* #45 Set eventbased trigger Flag if configured */
; ..\component\Com\Implementation\Com.c	 10193  #  if (COM_DIRECTTRIGGER == STD_ON)
; ..\component\Com\Implementation\Com.c	 10194          Com_SetDirectTrigger(txPduID, TRUE);    /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 10195  #  endif
; ..\component\Com\Implementation\Com.c	 10196  
; ..\component\Com\Implementation\Com.c	 10197          /* #50 Trigger transmit */
; ..\component\Com\Implementation\Com.c	 10198  #  if (COM_RETRY_FAILED_TRANSMIT_REQUESTS == STD_ON)
; ..\component\Com\Implementation\Com.c	 10199          /* #60 If transmission was not successful and retry failed transmit feature is configured */
; ..\component\Com\Implementation\Com.c	 10200          if(Com_TxLLIf_Transmit(txPduID) != E_OK)
; ..\component\Com\Implementation\Com.c	 10201          {
; ..\component\Com\Implementation\Com.c	 10202            /* #70 Schedule deferred transmission in next main function cycle */
; ..\component\Com\Implementation\Com.c	 10203            Com_TxModeHdlr_TriggerDeferredTransmitAndSetTimer(txPduID, withoutRepetitionFlag);
; ..\component\Com\Implementation\Com.c	 10204          }
; ..\component\Com\Implementation\Com.c	 10205  #  else
; ..\component\Com\Implementation\Com.c	 10206          (void) Com_TxLLIf_Transmit(txPduID);
; ..\component\Com\Implementation\Com.c	 10207  #  endif
; ..\component\Com\Implementation\Com.c	 10208        }
; ..\component\Com\Implementation\Com.c	 10209      }
; ..\component\Com\Implementation\Com.c	 10210    }
; ..\component\Com\Implementation\Com.c	 10211    /* #80 otherwise trigger deferred transmission in next main function cycle */
; ..\component\Com\Implementation\Com.c	 10212    else
; ..\component\Com\Implementation\Com.c	 10213    {
; ..\component\Com\Implementation\Com.c	 10214      Com_TxModeHdlr_TriggerDeferredTransmitAndSetTimer(txPduID, withoutRepetitionFlag);
; ..\component\Com\Implementation\Com.c	 10215    }
; ..\component\Com\Implementation\Com.c	 10216  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	 10217  # endif
; ..\component\Com\Implementation\Com.c	 10218  #endif
; ..\component\Com\Implementation\Com.c	 10219  
; ..\component\Com\Implementation\Com.c	 10220  #if (COM_RXUBMASKUSEDOFGWDESCRIPTIONACCESSINFO  == STD_ON)
; ..\component\Com\Implementation\Com.c	 10221  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10222    Com_RxProcessing_CheckGwDescriptionUB
; ..\component\Com\Implementation\Com.c	 10223  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10224  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10225   *
; ..\component\Com\Implementation\Com.c	 10226   *
; ..\component\Com\Implementation\Com.c	 10227   *
; ..\component\Com\Implementation\Com.c	 10228   *
; ..\component\Com\Implementation\Com.c	 10229   *
; ..\component\Com\Implementation\Com.c	 10230  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10231  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_RxProcessing_CheckGwDescriptionUB(Com_GwDescriptionAccessInfoEndIdxOfGwTxPduDescriptionInfoType gwDescrAccessIdx,
; ..\component\Com\Implementation\Com.c	 10232                                                                             P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr)
; ..\component\Com\Implementation\Com.c	 10233  {
; ..\component\Com\Implementation\Com.c	 10234    boolean retVal = TRUE;        /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 10235    /* #10 If the source description has an UpdateBit */
; ..\component\Com\Implementation\Com.c	 10236    if(Com_IsRxUbMaskUsedOfGwDescriptionAccessInfo(gwDescrAccessIdx))
; ..\component\Com\Implementation\Com.c	 10237    {
; ..\component\Com\Implementation\Com.c	 10238      /* #20 If the configured UpdateBit was not received mark the source description as updated */
; ..\component\Com\Implementation\Com.c	 10239      /* <= because a length is compared with an index */
; ..\component\Com\Implementation\Com.c	 10240      if(PduInfoPtr->SduLength <= Com_GetRxUbIdxOfGwDescriptionAccessInfo(gwDescrAccessIdx))
; ..\component\Com\Implementation\Com.c	 10241      {
; ..\component\Com\Implementation\Com.c	 10242        /* Update-bit not received */
; ..\component\Com\Implementation\Com.c	 10243        retVal = TRUE;
; ..\component\Com\Implementation\Com.c	 10244      }
; ..\component\Com\Implementation\Com.c	 10245      /* #30 If the UpdateBit is not set, mark the source description as not updated */
; ..\component\Com\Implementation\Com.c	 10246      else if(0u == (PduInfoPtr->SduDataPtr[Com_GetRxUbIdxOfGwDescriptionAccessInfo(gwDescrAccessIdx)] & Com_GetConstValueUInt8(Com_GetRxUbMaskIdxOfGwDescriptionAccessInfo(gwDescrAccessIdx))))
; ..\component\Com\Implementation\Com.c	 10247      {
; ..\component\Com\Implementation\Com.c	 10248        /* Update-bit not set */
; ..\component\Com\Implementation\Com.c	 10249        retVal = FALSE;
; ..\component\Com\Implementation\Com.c	 10250      }
; ..\component\Com\Implementation\Com.c	 10251      /* #40 Otherwise mark the source description as updated */
; ..\component\Com\Implementation\Com.c	 10252      else
; ..\component\Com\Implementation\Com.c	 10253      {
; ..\component\Com\Implementation\Com.c	 10254        /* Update-bit set */
; ..\component\Com\Implementation\Com.c	 10255        retVal = TRUE;
; ..\component\Com\Implementation\Com.c	 10256      }
; ..\component\Com\Implementation\Com.c	 10257    }
; ..\component\Com\Implementation\Com.c	 10258    return retVal;
; ..\component\Com\Implementation\Com.c	 10259  }
; ..\component\Com\Implementation\Com.c	 10260  #endif
; ..\component\Com\Implementation\Com.c	 10261  
; ..\component\Com\Implementation\Com.c	 10262  #if (COM_EXISTS_DIRECT_COPYTYPEOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10263  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10264     Com_GwDescription_DirectCopy
; ..\component\Com\Implementation\Com.c	 10265   *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10266  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10267   *
; ..\component\Com\Implementation\Com.c	 10268   *
; ..\component\Com\Implementation\Com.c	 10269   ********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10270  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_GwDescription_DirectCopy(Com_GwDescriptionAccessInfoEndIdxOfGwTxPduDescriptionInfoType gwDescrAccessIdx,
; ..\component\Com\Implementation\Com.c	 10271                                                                    P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) sourceBuffer,
; ..\component\Com\Implementation\Com.c	 10272                                                                    P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) destinationBuffer, Com_TxBufferLengthOfGwDescriptionAccessInfoType txBufferLength)
; ..\component\Com\Implementation\Com.c	 10273  {
; ..\component\Com\Implementation\Com.c	 10274    boolean destinationHasChanged = FALSE;        /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 10275  
; ..\component\Com\Implementation\Com.c	 10276    uint8 byteToBeCopied;
; ..\component\Com\Implementation\Com.c	 10277  
; ..\component\Com\Implementation\Com.c	 10278    Com_SourceDescriptionMaskType mask = Com_GetSourceDescriptionMask(Com_GetSourceDescriptionMaskIdxOfGwDescriptionAccessInfo(gwDescrAccessIdx));
; ..\component\Com\Implementation\Com.c	 10279  
; ..\component\Com\Implementation\Com.c	 10280    /* #10 Copy configured bytes into destination txPduBuffers and return true if any of the destination bytes has changed it's content. */
; ..\component\Com\Implementation\Com.c	 10281  
; ..\component\Com\Implementation\Com.c	 10282    byteToBeCopied = (destinationBuffer[0] & COM_CAST2UINT8(~mask)) | (sourceBuffer[0] & mask);
; ..\component\Com\Implementation\Com.c	 10283  
; ..\component\Com\Implementation\Com.c	 10284    if(destinationBuffer[0] != byteToBeCopied)
; ..\component\Com\Implementation\Com.c	 10285    {
; ..\component\Com\Implementation\Com.c	 10286      destinationBuffer[0] = byteToBeCopied;      /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10287      destinationHasChanged = TRUE;
; ..\component\Com\Implementation\Com.c	 10288    }
; ..\component\Com\Implementation\Com.c	 10289  
; ..\component\Com\Implementation\Com.c	 10290  # if (COM_SOURCEDESCRIPTIONMASKENDMASKUSEDOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10291    if(txBufferLength > 1u)
; ..\component\Com\Implementation\Com.c	 10292    {
; ..\component\Com\Implementation\Com.c	 10293      Com_TxBufferLengthOfGwDescriptionAccessInfoType byteIdx;
; ..\component\Com\Implementation\Com.c	 10294      Com_SourceDescriptionMaskType endMask = Com_GetSourceDescriptionMask(Com_GetSourceDescriptionMaskEndMaskIdxOfGwDescriptionAccessInfo(gwDescrAccessIdx));
; ..\component\Com\Implementation\Com.c	 10295      /* Intermediate bytes can be copied directly. */
; ..\component\Com\Implementation\Com.c	 10296      for(byteIdx = 1u; byteIdx < (txBufferLength - 1u); byteIdx++)
; ..\component\Com\Implementation\Com.c	 10297      {
; ..\component\Com\Implementation\Com.c	 10298        if(destinationBuffer[byteIdx] != sourceBuffer[byteIdx])
; ..\component\Com\Implementation\Com.c	 10299        {
; ..\component\Com\Implementation\Com.c	 10300          destinationBuffer[byteIdx] = sourceBuffer[byteIdx];     /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10301          destinationHasChanged = TRUE;
; ..\component\Com\Implementation\Com.c	 10302        }
; ..\component\Com\Implementation\Com.c	 10303      }
; ..\component\Com\Implementation\Com.c	 10304  
; ..\component\Com\Implementation\Com.c	 10305      /* Last byte has to be masked to avoid overwriting bits that do not belong to gateway description. */
; ..\component\Com\Implementation\Com.c	 10306      byteToBeCopied = (destinationBuffer[byteIdx] & COM_CAST2UINT8(~endMask)) | (sourceBuffer[byteIdx] & endMask);
; ..\component\Com\Implementation\Com.c	 10307  
; ..\component\Com\Implementation\Com.c	 10308      if(destinationBuffer[byteIdx] != sourceBuffer[byteIdx])
; ..\component\Com\Implementation\Com.c	 10309      {
; ..\component\Com\Implementation\Com.c	 10310        destinationBuffer[byteIdx] = byteToBeCopied;      /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10311        destinationHasChanged = TRUE;
; ..\component\Com\Implementation\Com.c	 10312      }
; ..\component\Com\Implementation\Com.c	 10313    }
; ..\component\Com\Implementation\Com.c	 10314  # else
; ..\component\Com\Implementation\Com.c	 10315    COM_DUMMY_STATEMENT(txBufferLength);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 10316  # endif
; ..\component\Com\Implementation\Com.c	 10317  
; ..\component\Com\Implementation\Com.c	 10318    return destinationHasChanged;
; ..\component\Com\Implementation\Com.c	 10319  }
; ..\component\Com\Implementation\Com.c	 10320  #endif
; ..\component\Com\Implementation\Com.c	 10321  
; ..\component\Com\Implementation\Com.c	 10322  #if (COM_EXISTS_RIGHTSHIFT_COPYTYPEOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10323  /*********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10324     Com_GwDescription_RightShiftCopy
; ..\component\Com\Implementation\Com.c	 10325   *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10326  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10327   *
; ..\component\Com\Implementation\Com.c	 10328   *
; ..\component\Com\Implementation\Com.c	 10329   ********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10330  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_GwDescription_RightShiftCopy(P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) sourceBuffer,
; ..\component\Com\Implementation\Com.c	 10331                                                                        P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) destinationBuffer,
; ..\component\Com\Implementation\Com.c	 10332                                                                        uint16 destinationBufferSize, uint8 sourceStartBitIndex, uint8 bitOffset, uint16 bitLength, boolean isBigEndian)
; ..\component\Com\Implementation\Com.c	 10333  {
; ..\component\Com\Implementation\Com.c	 10334  
; ..\component\Com\Implementation\Com.c	 10335    sint32 i = 1;
; ..\component\Com\Implementation\Com.c	 10336  
; ..\component\Com\Implementation\Com.c	 10337    uint16 remainingBits;
; ..\component\Com\Implementation\Com.c	 10338    uint8 destinationStartBitIndex = COM_CAST2UINT8(sourceStartBitIndex - bitOffset);
; ..\component\Com\Implementation\Com.c	 10339  
; ..\component\Com\Implementation\Com.c	 10340    uint8 sourceEndBitIndex = COM_CAST2UINT8((sourceStartBitIndex + bitLength) - 1u) % 8u;
; ..\component\Com\Implementation\Com.c	 10341    uint8 destinationEndBitIndex = COM_CAST2UINT8((destinationStartBitIndex + bitLength) - 1u) % 8u;
; ..\component\Com\Implementation\Com.c	 10342  
; ..\component\Com\Implementation\Com.c	 10343    uint8 destinationMask = COM_CAST2UINT8(255u << destinationStartBitIndex);
; ..\component\Com\Implementation\Com.c	 10344    uint8 sourceMask_i = COM_CAST2UINT8(255u << sourceStartBitIndex);
; ..\component\Com\Implementation\Com.c	 10345    uint8 sourceMask_iP1 = COM_CAST2UINT8(~sourceMask_i);
; ..\component\Com\Implementation\Com.c	 10346  
; ..\component\Com\Implementation\Com.c	 10347    uint8 byteToCopy = 0u;        /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 10348  
; ..\component\Com\Implementation\Com.c	 10349    boolean destinationHasChanged = FALSE;        /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 10350  
; ..\component\Com\Implementation\Com.c	 10351    if((destinationStartBitIndex + bitLength) <= 8u)
; ..\component\Com\Implementation\Com.c	 10352    {
; ..\component\Com\Implementation\Com.c	 10353      /* Destination description covers single byte. Truncate leading bits of destination mask. */
; ..\component\Com\Implementation\Com.c	 10354      destinationMask &= COM_CAST2UINT8(255u >> COM_CAST2UINT8(8u - (destinationStartBitIndex + bitLength)));
; ..\component\Com\Implementation\Com.c	 10355      remainingBits = 0u;
; ..\component\Com\Implementation\Com.c	 10356    }
; ..\component\Com\Implementation\Com.c	 10357    else
; ..\component\Com\Implementation\Com.c	 10358    {
; ..\component\Com\Implementation\Com.c	 10359      /* Description covers multiple bytes. No truncation of mask is required. */
; ..\component\Com\Implementation\Com.c	 10360      uint8 bitToBeCopiedToFirstByte = COM_CAST2UINT8(8u - destinationStartBitIndex);
; ..\component\Com\Implementation\Com.c	 10361      remainingBits = (uint16) (bitLength - bitToBeCopiedToFirstByte);
; ..\component\Com\Implementation\Com.c	 10362    }
; ..\component\Com\Implementation\Com.c	 10363  
; ..\component\Com\Implementation\Com.c	 10364    if((sourceStartBitIndex + bitLength) <= 8u)
; ..\component\Com\Implementation\Com.c	 10365    {
; ..\component\Com\Implementation\Com.c	 10366      /* Source description covers single byte.  Truncate leading bits of source mask */
; ..\component\Com\Implementation\Com.c	 10367      sourceMask_i &= COM_CAST2UINT8(255u >> COM_CAST2UINT8(7u - sourceEndBitIndex));
; ..\component\Com\Implementation\Com.c	 10368      byteToCopy = COM_CAST2UINT8((sourceBuffer[0] & sourceMask_i) >> bitOffset);
; ..\component\Com\Implementation\Com.c	 10369    }
; ..\component\Com\Implementation\Com.c	 10370    else
; ..\component\Com\Implementation\Com.c	 10371    {
; ..\component\Com\Implementation\Com.c	 10372      /* Source description covers multiple bytes. */
; ..\component\Com\Implementation\Com.c	 10373      uint8 bitsOf_i = COM_CAST2UINT8(8u - sourceStartBitIndex);
; ..\component\Com\Implementation\Com.c	 10374      uint8 posOf_iP1 = destinationStartBitIndex + bitsOf_i;
; ..\component\Com\Implementation\Com.c	 10375  
; ..\component\Com\Implementation\Com.c	 10376      if(bitLength < bitOffset)
; ..\component\Com\Implementation\Com.c	 10377      {
; ..\component\Com\Implementation\Com.c	 10378        sourceMask_iP1 = COM_CAST2UINT8(~COM_CAST2UINT8(255u << (sourceEndBitIndex + 1u)));
; ..\component\Com\Implementation\Com.c	 10379      }
; ..\component\Com\Implementation\Com.c	 10380  
; ..\component\Com\Implementation\Com.c	 10381      byteToCopy = COM_CAST2UINT8((sourceBuffer[0] & sourceMask_i) >> bitOffset);
; ..\component\Com\Implementation\Com.c	 10382      byteToCopy |= COM_CAST2UINT8((sourceBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] & sourceMask_iP1) << posOf_iP1);
; ..\component\Com\Implementation\Com.c	 10383    }
; ..\component\Com\Implementation\Com.c	 10384  
; ..\component\Com\Implementation\Com.c	 10385    byteToCopy = (destinationBuffer[0] & COM_CAST2UINT8(~destinationMask)) | (byteToCopy & destinationMask);
; ..\component\Com\Implementation\Com.c	 10386  
; ..\component\Com\Implementation\Com.c	 10387    if(destinationBuffer[0] != byteToCopy)
; ..\component\Com\Implementation\Com.c	 10388    {
; ..\component\Com\Implementation\Com.c	 10389      destinationHasChanged = TRUE;
; ..\component\Com\Implementation\Com.c	 10390      destinationBuffer[0] = byteToCopy;  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10391    }
; ..\component\Com\Implementation\Com.c	 10392  
; ..\component\Com\Implementation\Com.c	 10393    sourceMask_i = COM_CAST2UINT8(255u << bitOffset);
; ..\component\Com\Implementation\Com.c	 10394    sourceMask_iP1 = COM_CAST2UINT8(~sourceMask_i);
; ..\component\Com\Implementation\Com.c	 10395  
; ..\component\Com\Implementation\Com.c	 10396    while((remainingBits > 7u) && (i < (sint32) destinationBufferSize))   /* COV_COM_GWDESCRIPTION_RTCHECK */
; ..\component\Com\Implementation\Com.c	 10397    {
; ..\component\Com\Implementation\Com.c	 10398      /* Copy full bytes without truncation. */
; ..\component\Com\Implementation\Com.c	 10399      byteToCopy = COM_CAST2UINT8((sourceBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] & sourceMask_i) >> bitOffset);
; ..\component\Com\Implementation\Com.c	 10400      byteToCopy |= COM_CAST2UINT8((sourceBuffer[Com_NBITNBYTE_GetEndiannesIndex(i + 1, isBigEndian)] & sourceMask_iP1) << COM_CAST2UINT8(8u - bitOffset));
; ..\component\Com\Implementation\Com.c	 10401  
; ..\component\Com\Implementation\Com.c	 10402      if(destinationBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] != byteToCopy)
; ..\component\Com\Implementation\Com.c	 10403      {
; ..\component\Com\Implementation\Com.c	 10404        destinationHasChanged = TRUE;
; ..\component\Com\Implementation\Com.c	 10405        destinationBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] = byteToCopy;  /* SBSW_COM_GWDESCRIPTION_RTCHECK */
; ..\component\Com\Implementation\Com.c	 10406      }
; ..\component\Com\Implementation\Com.c	 10407  
; ..\component\Com\Implementation\Com.c	 10408      i++;
; ..\component\Com\Implementation\Com.c	 10409      remainingBits = (uint16) (remainingBits - 8u);
; ..\component\Com\Implementation\Com.c	 10410    }
; ..\component\Com\Implementation\Com.c	 10411  
; ..\component\Com\Implementation\Com.c	 10412    if((remainingBits > 0u) && (i < (sint32) destinationBufferSize))      /* COV_COM_GWDESCRIPTION_RTCHECK */
; ..\component\Com\Implementation\Com.c	 10413    {     /* if source covers multiple bytes */
; ..\component\Com\Implementation\Com.c	 10414      destinationMask = COM_CAST2UINT8(255u >> COM_CAST2UINT8(7u - destinationEndBitIndex));
; ..\component\Com\Implementation\Com.c	 10415      if(destinationEndBitIndex > sourceEndBitIndex)
; ..\component\Com\Implementation\Com.c	 10416      {
; ..\component\Com\Implementation\Com.c	 10417        /* Copy i and i+1 */
; ..\component\Com\Implementation\Com.c	 10418        sourceMask_iP1 = COM_CAST2UINT8(~(255u << (sourceEndBitIndex + 1u)));
; ..\component\Com\Implementation\Com.c	 10419        byteToCopy = COM_CAST2UINT8((sourceBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] & sourceMask_i) >> bitOffset);
; ..\component\Com\Implementation\Com.c	 10420        byteToCopy |= COM_CAST2UINT8((sourceBuffer[Com_NBITNBYTE_GetEndiannesIndex(i + 1, isBigEndian)] & sourceMask_iP1) << COM_CAST2UINT8(8u - bitOffset));
; ..\component\Com\Implementation\Com.c	 10421      }
; ..\component\Com\Implementation\Com.c	 10422      else
; ..\component\Com\Implementation\Com.c	 10423      {
; ..\component\Com\Implementation\Com.c	 10424        /* Copy only i */
; ..\component\Com\Implementation\Com.c	 10425        byteToCopy = COM_CAST2UINT8((sourceBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] & sourceMask_i) >> bitOffset);
; ..\component\Com\Implementation\Com.c	 10426      }
; ..\component\Com\Implementation\Com.c	 10427  
; ..\component\Com\Implementation\Com.c	 10428      byteToCopy = (destinationBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] & COM_CAST2UINT8(~destinationMask)) | (byteToCopy & destinationMask);
; ..\component\Com\Implementation\Com.c	 10429      if(destinationBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] != byteToCopy)
; ..\component\Com\Implementation\Com.c	 10430      {
; ..\component\Com\Implementation\Com.c	 10431        destinationHasChanged = TRUE;
; ..\component\Com\Implementation\Com.c	 10432        destinationBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] = byteToCopy;  /* SBSW_COM_GWDESCRIPTION_RTCHECK */
; ..\component\Com\Implementation\Com.c	 10433      }
; ..\component\Com\Implementation\Com.c	 10434    }
; ..\component\Com\Implementation\Com.c	 10435  
; ..\component\Com\Implementation\Com.c	 10436    return destinationHasChanged;
; ..\component\Com\Implementation\Com.c	 10437  }       /* PRQA S 6010, 6060 */ /* MD_MSR_STPTH, MD_MSR_STPAR */
; ..\component\Com\Implementation\Com.c	 10438  #endif
; ..\component\Com\Implementation\Com.c	 10439  
; ..\component\Com\Implementation\Com.c	 10440  #if (COM_EXISTS_LEFTSHIFT_COPYTYPEOFGWDESCRIPTIONACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10441  /*********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10442     Com_GwDescription_LeftShiftCopy
; ..\component\Com\Implementation\Com.c	 10443   *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10444  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10445   *
; ..\component\Com\Implementation\Com.c	 10446   *
; ..\component\Com\Implementation\Com.c	 10447   ********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10448  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_GwDescription_LeftShiftCopy(P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) sourceBuffer,
; ..\component\Com\Implementation\Com.c	 10449                                                                       P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) destinationBuffer,
; ..\component\Com\Implementation\Com.c	 10450                                                                       uint16 destinationBufferSize, uint8 sourceStartBitIndex, uint8 bitOffset, uint16 bitLength, boolean isBigEndian)
; ..\component\Com\Implementation\Com.c	 10451  {
; ..\component\Com\Implementation\Com.c	 10452    boolean destinationHasChanged = FALSE;        /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 10453  
; ..\component\Com\Implementation\Com.c	 10454    uint8 byteToBeCopied;
; ..\component\Com\Implementation\Com.c	 10455  
; ..\component\Com\Implementation\Com.c	 10456    sint32 i = 1;
; ..\component\Com\Implementation\Com.c	 10457  
; ..\component\Com\Implementation\Com.c	 10458    uint8 destinationStartBitIndex = sourceStartBitIndex + bitOffset;
; ..\component\Com\Implementation\Com.c	 10459  
; ..\component\Com\Implementation\Com.c	 10460    uint8 sourceEndBitIndex = COM_CAST2UINT8((sourceStartBitIndex + bitLength) - 1u) % 8u;
; ..\component\Com\Implementation\Com.c	 10461    uint8 destinationEndBitIndex = COM_CAST2UINT8((destinationStartBitIndex + bitLength) - 1u) % 8u;
; ..\component\Com\Implementation\Com.c	 10462  
; ..\component\Com\Implementation\Com.c	 10463    uint16 remainingBits = bitLength;
; ..\component\Com\Implementation\Com.c	 10464  
; ..\component\Com\Implementation\Com.c	 10465    uint8 snippetMask = COM_CAST2UINT8(255u >> bitOffset);
; ..\component\Com\Implementation\Com.c	 10466  
; ..\component\Com\Implementation\Com.c	 10467    uint8 destinationMask = COM_CAST2UINT8(255u << destinationStartBitIndex);
; ..\component\Com\Implementation\Com.c	 10468  
; ..\component\Com\Implementation\Com.c	 10469    uint8 sourceMask = COM_CAST2UINT8(255u << sourceStartBitIndex) & COM_CAST2UINT8(255u >> bitOffset);
; ..\component\Com\Implementation\Com.c	 10470  
; ..\component\Com\Implementation\Com.c	 10471    if((destinationStartBitIndex + bitLength) <= 8u)
; ..\component\Com\Implementation\Com.c	 10472    {
; ..\component\Com\Implementation\Com.c	 10473      /* Destination description covers single byte. Destinations mask needs to be truncated. */
; ..\component\Com\Implementation\Com.c	 10474      destinationMask &= COM_CAST2UINT8(255u >> COM_CAST2UINT8(7u - destinationEndBitIndex));
; ..\component\Com\Implementation\Com.c	 10475      sourceMask = COM_CAST2UINT8(destinationMask >> bitOffset);
; ..\component\Com\Implementation\Com.c	 10476  
; ..\component\Com\Implementation\Com.c	 10477      remainingBits = 0u;
; ..\component\Com\Implementation\Com.c	 10478    }
; ..\component\Com\Implementation\Com.c	 10479    else
; ..\component\Com\Implementation\Com.c	 10480    {
; ..\component\Com\Implementation\Com.c	 10481      /* Destination description covers multiple bytes. */
; ..\component\Com\Implementation\Com.c	 10482      remainingBits = COM_CAST2UINT8(remainingBits - COM_CAST2UINT8(8u - destinationStartBitIndex));
; ..\component\Com\Implementation\Com.c	 10483    }
; ..\component\Com\Implementation\Com.c	 10484  
; ..\component\Com\Implementation\Com.c	 10485    byteToBeCopied = (destinationBuffer[0] & COM_CAST2UINT8(~destinationMask)) | COM_CAST2UINT8((sourceBuffer[0] & sourceMask) << bitOffset);
; ..\component\Com\Implementation\Com.c	 10486  
; ..\component\Com\Implementation\Com.c	 10487    if(*destinationBuffer != byteToBeCopied)
; ..\component\Com\Implementation\Com.c	 10488    {
; ..\component\Com\Implementation\Com.c	 10489      destinationHasChanged = TRUE;
; ..\component\Com\Implementation\Com.c	 10490      *destinationBuffer = byteToBeCopied;        /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10491    }
; ..\component\Com\Implementation\Com.c	 10492  
; ..\component\Com\Implementation\Com.c	 10493    while((remainingBits > 7u) && (i < (sint32) destinationBufferSize))   /* COV_COM_GWDESCRIPTION_RTCHECK */
; ..\component\Com\Implementation\Com.c	 10494    {
; ..\component\Com\Implementation\Com.c	 10495      /* Copy full bytes to destination description. Fill leading part of destination with trailing bits of i-th source byte and copy trailing part of destination with leading bits of (i-1)-th source byte. */
; ..\component\Com\Implementation\Com.c	 10496      byteToBeCopied = COM_CAST2UINT8((sourceBuffer[Com_NBITNBYTE_GetEndiannesIndex(i - 1, isBigEndian)] & COM_CAST2UINT8(~snippetMask)) >> COM_CAST2UINT8(8u - bitOffset));
; ..\component\Com\Implementation\Com.c	 10497      byteToBeCopied |= COM_CAST2UINT8((sourceBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] & snippetMask) << bitOffset);
; ..\component\Com\Implementation\Com.c	 10498  
; ..\component\Com\Implementation\Com.c	 10499      if(destinationBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] != byteToBeCopied)
; ..\component\Com\Implementation\Com.c	 10500      {
; ..\component\Com\Implementation\Com.c	 10501        destinationHasChanged = TRUE;
; ..\component\Com\Implementation\Com.c	 10502        destinationBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] = byteToBeCopied;      /* SBSW_COM_GWDESCRIPTION_RTCHECK */
; ..\component\Com\Implementation\Com.c	 10503      }
; ..\component\Com\Implementation\Com.c	 10504  
; ..\component\Com\Implementation\Com.c	 10505      i++;
; ..\component\Com\Implementation\Com.c	 10506      remainingBits = COM_CAST2UINT8(remainingBits - 8u);
; ..\component\Com\Implementation\Com.c	 10507    }
; ..\component\Com\Implementation\Com.c	 10508  
; ..\component\Com\Implementation\Com.c	 10509    if((remainingBits > 0u) && (i < (sint32) destinationBufferSize))      /* COV_COM_GWDESCRIPTION_RTCHECK */
; ..\component\Com\Implementation\Com.c	 10510    {     /* if source covers multiple bytes */
; ..\component\Com\Implementation\Com.c	 10511      uint8 finalByteMask;
; ..\component\Com\Implementation\Com.c	 10512      destinationMask = COM_CAST2UINT8(255u << (destinationEndBitIndex + 1u));
; ..\component\Com\Implementation\Com.c	 10513  
; ..\component\Com\Implementation\Com.c	 10514      byteToBeCopied = destinationBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)];
; ..\component\Com\Implementation\Com.c	 10515      if(destinationEndBitIndex < sourceEndBitIndex)
; ..\component\Com\Implementation\Com.c	 10516      {
; ..\component\Com\Implementation\Com.c	 10517        /* Next Byte */
; ..\component\Com\Implementation\Com.c	 10518        finalByteMask = COM_CAST2UINT8(COM_CAST2UINT8(255u >> COM_CAST2UINT8(8u - (uint8) remainingBits)) << COM_CAST2UINT8((1u + sourceEndBitIndex) - (uint8) remainingBits));
; ..\component\Com\Implementation\Com.c	 10519      }
; ..\component\Com\Implementation\Com.c	 10520      else
; ..\component\Com\Implementation\Com.c	 10521      {
; ..\component\Com\Implementation\Com.c	 10522        /* Same byte */
; ..\component\Com\Implementation\Com.c	 10523        uint8 sourceMaske = COM_CAST2UINT8(255u >> COM_CAST2UINT8(7u - sourceEndBitIndex));
; ..\component\Com\Implementation\Com.c	 10524        finalByteMask = COM_CAST2UINT8(~snippetMask);
; ..\component\Com\Implementation\Com.c	 10525        byteToBeCopied = (byteToBeCopied & destinationMask) | COM_CAST2UINT8((sourceBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] & sourceMaske) << bitOffset);
; ..\component\Com\Implementation\Com.c	 10526  
; ..\component\Com\Implementation\Com.c	 10527        destinationMask = COM_CAST2UINT8(255u << bitOffset);
; ..\component\Com\Implementation\Com.c	 10528      }
; ..\component\Com\Implementation\Com.c	 10529      byteToBeCopied = (byteToBeCopied & destinationMask) | COM_CAST2UINT8((sourceBuffer[Com_NBITNBYTE_GetEndiannesIndex(i - 1, isBigEndian)] & finalByteMask) >> COM_CAST2UINT8(8u - bitOffset));
; ..\component\Com\Implementation\Com.c	 10530  
; ..\component\Com\Implementation\Com.c	 10531      if(destinationBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] != byteToBeCopied)
; ..\component\Com\Implementation\Com.c	 10532      {
; ..\component\Com\Implementation\Com.c	 10533        destinationHasChanged = TRUE;
; ..\component\Com\Implementation\Com.c	 10534        destinationBuffer[Com_NBITNBYTE_GetEndiannesIndex(i, isBigEndian)] = byteToBeCopied;      /* SBSW_COM_GWDESCRIPTION_RTCHECK */
; ..\component\Com\Implementation\Com.c	 10535      }
; ..\component\Com\Implementation\Com.c	 10536    }
; ..\component\Com\Implementation\Com.c	 10537  
; ..\component\Com\Implementation\Com.c	 10538    return destinationHasChanged;
; ..\component\Com\Implementation\Com.c	 10539  }       /* PRQA S 6060 */ /* MD_MSR_STPAR */
; ..\component\Com\Implementation\Com.c	 10540  #endif
; ..\component\Com\Implementation\Com.c	 10541  
; ..\component\Com\Implementation\Com.c	 10542  #if (COM_GWEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	 10543  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10544    Com_RxIndication_CacheDeferredDescriptionGwEvent
; ..\component\Com\Implementation\Com.c	 10545  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10546  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10547   *
; ..\component\Com\Implementation\Com.c	 10548   *
; ..\component\Com\Implementation\Com.c	 10549   *
; ..\component\Com\Implementation\Com.c	 10550   *
; ..\component\Com\Implementation\Com.c	 10551   *
; ..\component\Com\Implementation\Com.c	 10552   *
; ..\component\Com\Implementation\Com.c	 10553   *********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10554  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxIndication_CacheDeferredDescriptionGwEvent(PduIdType ComPduId)
; ..\component\Com\Implementation\Com.c	 10555  {
; ..\component\Com\Implementation\Com.c	 10556    /* #10 If a gateway description exists for this PDU */
; ..\component\Com\Implementation\Com.c	 10557    if(Com_IsGwTxPduDescriptionInfoUsedOfRxPduInfo(ComPduId))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 10558    {
; ..\component\Com\Implementation\Com.c	 10559      /* #20 If PDU Id is not already cached */
; ..\component\Com\Implementation\Com.c	 10560      if(Com_GetHandleRxDeferredGwDescription(Com_GetHandleRxDeferredGwDescriptionIdxOfRxPduInfo(ComPduId)) == 0u)
; ..\component\Com\Implementation\Com.c	 10561      {
; ..\component\Com\Implementation\Com.c	 10562        /* #30 If cache is not full */
; ..\component\Com\Implementation\Com.c	 10563        if(Com_GetGwEventCacheIndex() < Com_GetSizeOfGwEventCache())
; ..\component\Com\Implementation\Com.c	 10564        {
; ..\component\Com\Implementation\Com.c	 10565          /* #40 Store PDU Id in cache, increase gateway cache index */
; ..\component\Com\Implementation\Com.c	 10566          Com_SetGwEventCache(Com_GetGwEventCacheIndex(), ComPduId);      /* SBSW_COM_GWCACHING */
; ..\component\Com\Implementation\Com.c	 10567          Com_IncGwEventCacheIndex();     /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 10568        }
; ..\component\Com\Implementation\Com.c	 10569      }
; ..\component\Com\Implementation\Com.c	 10570  
; ..\component\Com\Implementation\Com.c	 10571      /* #50 Mark pdu a cached by storing current length + 1 */
; ..\component\Com\Implementation\Com.c	 10572      Com_SetHandleRxDeferredGwDescription(Com_GetHandleRxDeferredGwDescriptionIdxOfRxPduInfo(ComPduId), Com_GetHandleRxPduDeferred(Com_GetHandleRxPduDeferredIdxOfRxPduInfo(ComPduId))); /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10573    }
; ..\component\Com\Implementation\Com.c	 10574  }
; ..\component\Com\Implementation\Com.c	 10575  #endif
; ..\component\Com\Implementation\Com.c	 10576  
; ..\component\Com\Implementation\Com.c	 10577  #if (COM_RXDEFERREDEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	 10578  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10579    Com_RxIndication_CacheDeferredEvent
; ..\component\Com\Implementation\Com.c	 10580  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10581  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10582   *
; ..\component\Com\Implementation\Com.c	 10583   *
; ..\component\Com\Implementation\Com.c	 10584   *
; ..\component\Com\Implementation\Com.c	 10585  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10586  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxIndication_CacheDeferredEvent(Com_RxDeferredEventCacheType ComPduId)
; ..\component\Com\Implementation\Com.c	 10587  {
; ..\component\Com\Implementation\Com.c	 10588    /* #10 If an entry is free in the deferred event cache, store the passed ComIPdu in the next free cache entry */
; ..\component\Com\Implementation\Com.c	 10589    if(Com_GetRxNextEventCacheEnty() < Com_GetSizeOfRxDeferredEventCache())
; ..\component\Com\Implementation\Com.c	 10590    {
; ..\component\Com\Implementation\Com.c	 10591      Com_SetRxDeferredEventCache(Com_GetRxNextEventCacheEnty(), ComPduId);       /* SBSW_COM_ARRAY_WRITEACCESS */
; ..\component\Com\Implementation\Com.c	 10592      Com_IncRxNextEventCacheEnty();      /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 10593    }
; ..\component\Com\Implementation\Com.c	 10594    /* #20 Otherwise mark the cache as overflowed */
; ..\component\Com\Implementation\Com.c	 10595    else
; ..\component\Com\Implementation\Com.c	 10596    {
; ..\component\Com\Implementation\Com.c	 10597      Com_SetRxNextEventCacheEnty(COM_NO_HANDLERXPDUDEFERREDIDXOFRXPDUINFO);      /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 10598    }
; ..\component\Com\Implementation\Com.c	 10599  }
; ..\component\Com\Implementation\Com.c	 10600  #endif
; ..\component\Com\Implementation\Com.c	 10601  
; ..\component\Com\Implementation\Com.c	 10602  
; ..\component\Com\Implementation\Com.c	 10603  #if (COM_RXSIGINFOENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10604  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10605    Com_RxProcessing_RxPduSigEvent
; ..\component\Com\Implementation\Com.c	 10606  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10607  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10608   *
; ..\component\Com\Implementation\Com.c	 10609   *
; ..\component\Com\Implementation\Com.c	 10610   *
; ..\component\Com\Implementation\Com.c	 10611   *
; ..\component\Com\Implementation\Com.c	 10612   *
; ..\component\Com\Implementation\Com.c	 10613   *
; ..\component\Com\Implementation\Com.c	 10614   *
; ..\component\Com\Implementation\Com.c	 10615   *
; ..\component\Com\Implementation\Com.c	 10616   *
; ..\component\Com\Implementation\Com.c	 10617   *
; ..\component\Com\Implementation\Com.c	 10618  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10619  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_RxPduSigEvent(PduIdType comRxPduInfoIdx, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr)   /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	 10620  {
; ..\component\Com\Implementation\Com.c	 10621    /* #10 Iterate over all Rx ComSignals of the passed Rx ComIPdu and do Rx ComSignal based processing */
; ..\component\Com\Implementation\Com.c	 10622    Com_RxSigInfoIterType idxRxSigInfo = Com_GetRxSigInfoStartIdxOfRxPduInfo(comRxPduInfoIdx);
; ..\component\Com\Implementation\Com.c	 10623    for(; idxRxSigInfo < Com_GetRxSigInfoEndIdxOfRxPduInfo(comRxPduInfoIdx); idxRxSigInfo++)
; ..\component\Com\Implementation\Com.c	 10624    {
; ..\component\Com\Implementation\Com.c	 10625      /* #20 If the Rx ComSignal is completely contained in the passed Sdu data length */
; ..\component\Com\Implementation\Com.c	 10626      if(PduInfoPtr->SduLength >= Com_GetValidDlcOfRxSigInfo(idxRxSigInfo))
; ..\component\Com\Implementation\Com.c	 10627      {
; ..\component\Com\Implementation\Com.c	 10628  # if (COM_UBMASKUSEDOFRXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10629        /* #30 Check if the ComSignal was updated */
; ..\component\Com\Implementation\Com.c	 10630        boolean process = Com_RxProcessing_CheckSigUB(idxRxSigInfo, PduInfoPtr);  /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10631        if(process == TRUE)
; ..\component\Com\Implementation\Com.c	 10632  # endif
; ..\component\Com\Implementation\Com.c	 10633        {
; ..\component\Com\Implementation\Com.c	 10634  # if (COM_RXTOUTINFOUSEDOFRXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10635          /* #40 Set configured timeout event */
; ..\component\Com\Implementation\Com.c	 10636          Com_RxDlMon_SigEvent(idxRxSigInfo);
; ..\component\Com\Implementation\Com.c	 10637  # endif
; ..\component\Com\Implementation\Com.c	 10638  
; ..\component\Com\Implementation\Com.c	 10639  # if (COM_GWINFOUSEDOFRXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10640          /* #50 Set configured routing event */
; ..\component\Com\Implementation\Com.c	 10641          Com_SignalGw_SigEvent(idxRxSigInfo);
; ..\component\Com\Implementation\Com.c	 10642  # endif
; ..\component\Com\Implementation\Com.c	 10643          /* #60 Do Rx Signal Processing */
; ..\component\Com\Implementation\Com.c	 10644          {
; ..\component\Com\Implementation\Com.c	 10645            Com_RxSigProcessState rxSigProcessingState = Com_RxSignalProcessing(PduInfoPtr, Com_GetRxAccessInfoIdxOfRxSigInfo(idxRxSigInfo));     /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 10646            switch (rxSigProcessingState)
; ..\component\Com\Implementation\Com.c	 10647            {
; ..\component\Com\Implementation\Com.c	 10648              case VALID:
; ..\component\Com\Implementation\Com.c	 10649              {
; ..\component\Com\Implementation\Com.c	 10650  # if ((COM_RXTOUTINFOUSEDOFRXSIGINFO == STD_ON) && (COM_UBMASKUSEDOFRXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 10651                /* #70 If the ComSignal has a timeout and an UpdateBit, remove the timeout occurred flag */
; ..\component\Com\Implementation\Com.c	 10652                if(Com_IsRxTOutInfoUsedOfRxSigInfo(idxRxSigInfo) && Com_IsUbMaskUsedOfRxSigInfo(idxRxSigInfo))    /* COV_COM_TIMEOUT_AND_UB */
; ..\component\Com\Implementation\Com.c	 10653                {
; ..\component\Com\Implementation\Com.c	 10654                  Com_LMgt_RemoveOccurredFlag(Com_GetRxTOutInfoIdxOfRxSigInfo(idxRxSigInfo));     /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	 10655                }
; ..\component\Com\Implementation\Com.c	 10656  # endif
; ..\component\Com\Implementation\Com.c	 10657  # if (COM_RXCBKFUNCPTRACKIDXOFRXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10658                /* #80 If the passed Rx ComSignal uses a notification function, cache or call that function */
; ..\component\Com\Implementation\Com.c	 10659                if(Com_IsRxCbkFuncPtrAckUsedOfRxSigInfo(idxRxSigInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 10660                {
; ..\component\Com\Implementation\Com.c	 10661                  Com_CacheOrCallRxCbkFctPtr((Com_RxCbkFuncPtrIterType) Com_GetRxCbkFuncPtrAckIdxOfRxSigInfo(idxRxSigInfo), comRxPduInfoIdx, fctPtrCacheStrctPtr);        /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	 10662                }
; ..\component\Com\Implementation\Com.c	 10663  # endif
; ..\component\Com\Implementation\Com.c	 10664              }
; ..\component\Com\Implementation\Com.c	 10665                break;
; ..\component\Com\Implementation\Com.c	 10666  # if ((COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON) || (COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 10667                /* #90 If the signal value is the invalid value, perform the invalid action */
; ..\component\Com\Implementation\Com.c	 10668              case INVALID:      /* COV_COM_SIGNALINVALIDATION */
; ..\component\Com\Implementation\Com.c	 10669              {
; ..\component\Com\Implementation\Com.c	 10670                Com_RxInv_Sig_PerformInvalidAction(idxRxSigInfo, fctPtrCacheStrctPtr);    /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	 10671              }
; ..\component\Com\Implementation\Com.c	 10672                break;
; ..\component\Com\Implementation\Com.c	 10673  # endif
; ..\component\Com\Implementation\Com.c	 10674              default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	 10675                /* do nothing */
; ..\component\Com\Implementation\Com.c	 10676                break;
; ..\component\Com\Implementation\Com.c	 10677            }
; ..\component\Com\Implementation\Com.c	 10678          }
; ..\component\Com\Implementation\Com.c	 10679        } /* Update-bit check */
; ..\component\Com\Implementation\Com.c	 10680      }   /* DLC check */
; ..\component\Com\Implementation\Com.c	 10681    }     /* Signal loop */
; ..\component\Com\Implementation\Com.c	 10682    COM_DUMMY_STATEMENT(fctPtrCacheStrctPtr);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 10683  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	 10684  #endif
; ..\component\Com\Implementation\Com.c	 10685  
; ..\component\Com\Implementation\Com.c	 10686  #if (COM_RXDEFERREDFCTPTRCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	 10687  /* jet: ComCacheOrCallCbkFctPtr snippet */
; ..\component\Com\Implementation\Com.c	 10688  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10689    Com_CacheOrCallRxDeferredCbkFctPtr
; ..\component\Com\Implementation\Com.c	 10690  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10691  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10692   *
; ..\component\Com\Implementation\Com.c	 10693   *
; ..\component\Com\Implementation\Com.c	 10694   *
; ..\component\Com\Implementation\Com.c	 10695  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10696  LOCAL_INLINE FUNC(void, COM_CODE) Com_CacheOrCallRxDeferredCbkFctPtr(Com_RxCbkFuncPtrIterType cbkFuncPtrIdx, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr)
; ..\component\Com\Implementation\Com.c	 10697  {
; ..\component\Com\Implementation\Com.c	 10698    /* #10 If RxDeferredFctPtrCache is not full, cache the function pointer index. */
; ..\component\Com\Implementation\Com.c	 10699    if(fctPtrCacheStrctPtr->cacheIndex < fctPtrCacheStrctPtr->cacheSize)
; ..\component\Com\Implementation\Com.c	 10700    {
; ..\component\Com\Implementation\Com.c	 10701      fctPtrCacheStrctPtr->ptrToCache[fctPtrCacheStrctPtr->cacheIndex] = (uint32) cbkFuncPtrIdx;  /* SBSW_COM_FCTPTR_CACHE_PTR_3 */
; ..\component\Com\Implementation\Com.c	 10702      fctPtrCacheStrctPtr->cacheIndex = fctPtrCacheStrctPtr->cacheIndex + 1u;     /* SBSW_COM_FCTPTR_CACHE_PTR_2 */
; ..\component\Com\Implementation\Com.c	 10703    }
; ..\component\Com\Implementation\Com.c	 10704    /* #20 Otherwise, call all cached function callbacks. */
; ..\component\Com\Implementation\Com.c	 10705    else
; ..\component\Com\Implementation\Com.c	 10706    {
; ..\component\Com\Implementation\Com.c	 10707      Com_RxProcessing_ExitExclusiveArea_Deferred();
; ..\component\Com\Implementation\Com.c	 10708      Com_GetRxCbkFuncPtr((Com_RxCbkFuncPtrIterType) cbkFuncPtrIdx) ();   /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	 10709      Com_ProcessRxFctPtrCache(fctPtrCacheStrctPtr);      /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	 10710      Com_RxProcessing_EnterExclusiveArea_Deferred();
; ..\component\Com\Implementation\Com.c	 10711    }
; ..\component\Com\Implementation\Com.c	 10712  }
; ..\component\Com\Implementation\Com.c	 10713  
; ..\component\Com\Implementation\Com.c	 10714  #endif
; ..\component\Com\Implementation\Com.c	 10715  
; ..\component\Com\Implementation\Com.c	 10716  #if (COM_RXIMMEDIATEFCTPTRCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	 10717  /* jet: ComCacheOrCallCbkFctPtr snippet */
; ..\component\Com\Implementation\Com.c	 10718  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10719    Com_CacheOrCallRxImmediateCbkFctPtr
; ..\component\Com\Implementation\Com.c	 10720  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10721  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10722   *
; ..\component\Com\Implementation\Com.c	 10723   *
; ..\component\Com\Implementation\Com.c	 10724   *
; ..\component\Com\Implementation\Com.c	 10725  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10726  LOCAL_INLINE FUNC(void, COM_CODE) Com_CacheOrCallRxImmediateCbkFctPtr(Com_RxCbkFuncPtrIterType cbkFuncPtrIdx, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr)
; ..\component\Com\Implementation\Com.c	 10727  {
; ..\component\Com\Implementation\Com.c	 10728    /* #10 If RxImmediateFctPtrCache is not full, cache the function pointer index. */
; ..\component\Com\Implementation\Com.c	 10729    if(fctPtrCacheStrctPtr->cacheIndex < fctPtrCacheStrctPtr->cacheSize)  /* COV_COM_CACHEORCALL_IMMEDIATE */
; ..\component\Com\Implementation\Com.c	 10730    {
; ..\component\Com\Implementation\Com.c	 10731      fctPtrCacheStrctPtr->ptrToCache[fctPtrCacheStrctPtr->cacheIndex] = (uint32) cbkFuncPtrIdx;  /* SBSW_COM_FCTPTR_CACHE_PTR_3 */
; ..\component\Com\Implementation\Com.c	 10732      fctPtrCacheStrctPtr->cacheIndex = fctPtrCacheStrctPtr->cacheIndex + 1u;     /* SBSW_COM_FCTPTR_CACHE_PTR_2 */
; ..\component\Com\Implementation\Com.c	 10733    }
; ..\component\Com\Implementation\Com.c	 10734    /* #20 Otherwise, call all cached function callbacks. */
; ..\component\Com\Implementation\Com.c	 10735    else
; ..\component\Com\Implementation\Com.c	 10736    {
; ..\component\Com\Implementation\Com.c	 10737      SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	 10738      Com_GetRxCbkFuncPtr((Com_RxCbkFuncPtrIterType) cbkFuncPtrIdx) ();   /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	 10739      Com_ProcessRxFctPtrCache(fctPtrCacheStrctPtr);      /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	 10740      SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	 10741    }
; ..\component\Com\Implementation\Com.c	 10742  }
; ..\component\Com\Implementation\Com.c	 10743  
; ..\component\Com\Implementation\Com.c	 10744  #endif
; ..\component\Com\Implementation\Com.c	 10745  
; ..\component\Com\Implementation\Com.c	 10746  #if (COM_RXCBKFUNCPTR == STD_ON)
; ..\component\Com\Implementation\Com.c	 10747  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10748    Com_CacheOrCallRxCbkFctPtr
; ..\component\Com\Implementation\Com.c	 10749  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10750  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10751   *
; ..\component\Com\Implementation\Com.c	 10752   *
; ..\component\Com\Implementation\Com.c	 10753   *
; ..\component\Com\Implementation\Com.c	 10754   *
; ..\component\Com\Implementation\Com.c	 10755   *
; ..\component\Com\Implementation\Com.c	 10756  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10757  LOCAL_INLINE FUNC(void, COM_CODE) Com_CacheOrCallRxCbkFctPtr(Com_RxCbkFuncPtrIterType cbkFuncPtrIdx, PduIdType comRxPduInfoIdx, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr)
; ..\component\Com\Implementation\Com.c	 10758  {
; ..\component\Com\Implementation\Com.c	 10759  # if ((COM_RXDEFERREDFCTPTRCACHE == STD_ON) && (COM_RXIMMEDIATEFCTPTRCACHE == STD_ON))
; ..\component\Com\Implementation\Com.c	 10760    /* #10 If callback function pointer should be processed deferred */
; ..\component\Com\Implementation\Com.c	 10761    if(Com_IsHandleRxPduDeferredUsedOfRxPduInfo(comRxPduInfoIdx))
; ..\component\Com\Implementation\Com.c	 10762    {
; ..\component\Com\Implementation\Com.c	 10763  # endif
; ..\component\Com\Implementation\Com.c	 10764  # if (COM_RXDEFERREDFCTPTRCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	 10765      /* #20 Cache index of function ptr in deferred function pointer cache or call all function pointer if cache is full. */
; ..\component\Com\Implementation\Com.c	 10766      Com_CacheOrCallRxDeferredCbkFctPtr(cbkFuncPtrIdx, fctPtrCacheStrctPtr);     /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	 10767  # endif
; ..\component\Com\Implementation\Com.c	 10768  # if ((COM_RXDEFERREDFCTPTRCACHE == STD_ON) && (COM_RXIMMEDIATEFCTPTRCACHE == STD_ON))
; ..\component\Com\Implementation\Com.c	 10769    }
; ..\component\Com\Implementation\Com.c	 10770    /* #30 Otherwise */
; ..\component\Com\Implementation\Com.c	 10771    else
; ..\component\Com\Implementation\Com.c	 10772  # endif
; ..\component\Com\Implementation\Com.c	 10773    {
; ..\component\Com\Implementation\Com.c	 10774  # if (COM_RXIMMEDIATEFCTPTRCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	 10775      /* #40 Cache index of function ptr in immediate function pointer cache or call all function pointer if cache is full. */
; ..\component\Com\Implementation\Com.c	 10776      Com_CacheOrCallRxImmediateCbkFctPtr(cbkFuncPtrIdx, fctPtrCacheStrctPtr);    /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	 10777  # endif
; ..\component\Com\Implementation\Com.c	 10778    }
; ..\component\Com\Implementation\Com.c	 10779  
; ..\component\Com\Implementation\Com.c	 10780    COM_DUMMY_STATEMENT(comRxPduInfoIdx); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 10781  }
; ..\component\Com\Implementation\Com.c	 10782  #endif
; ..\component\Com\Implementation\Com.c	 10783  
; ..\component\Com\Implementation\Com.c	 10784  #if (COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10785  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10786    Com_RxProcessing_ReadGrpSignal
; ..\component\Com\Implementation\Com.c	 10787  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10788  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10789   *
; ..\component\Com\Implementation\Com.c	 10790   *
; ..\component\Com\Implementation\Com.c	 10791  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10792  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_ReadGrpSignal(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	 10793  {
; ..\component\Com\Implementation\Com.c	 10794    switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	 10795    {
; ..\component\Com\Implementation\Com.c	 10796  /* jet: GeneralSwitchCasePerApplType snippet */
; ..\component\Com\Implementation\Com.c	 10797  # if (COM_TMPRXSHDBUFFERUINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	 10798      case COM_UINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10799      {
; ..\component\Com\Implementation\Com.c	 10800        uint8 signalValue = Com_Signal_ReadSignal_UInt8(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));  /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10801        Com_SetTmpRxShdBufferUInt8(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo), signalValue);      /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10802        break;
; ..\component\Com\Implementation\Com.c	 10803      }
; ..\component\Com\Implementation\Com.c	 10804  # endif
; ..\component\Com\Implementation\Com.c	 10805  # if (COM_TMPRXSHDBUFFERSINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	 10806      case COM_SINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10807      {
; ..\component\Com\Implementation\Com.c	 10808        sint8 signalValue = Com_Signal_ReadSignal_SInt8(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));  /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10809        Com_SetTmpRxShdBufferSInt8(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo), signalValue);      /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10810        break;
; ..\component\Com\Implementation\Com.c	 10811      }
; ..\component\Com\Implementation\Com.c	 10812  # endif
; ..\component\Com\Implementation\Com.c	 10813  # if (COM_TMPRXSHDBUFFERUINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	 10814      case COM_UINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10815      {
; ..\component\Com\Implementation\Com.c	 10816        uint16 signalValue = Com_Signal_ReadSignal_UInt16(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));        /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10817        Com_SetTmpRxShdBufferUInt16(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo), signalValue);     /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10818        break;
; ..\component\Com\Implementation\Com.c	 10819      }
; ..\component\Com\Implementation\Com.c	 10820  # endif
; ..\component\Com\Implementation\Com.c	 10821  # if (COM_TMPRXSHDBUFFERSINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	 10822      case COM_SINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10823      {
; ..\component\Com\Implementation\Com.c	 10824        sint16 signalValue = Com_Signal_ReadSignal_SInt16(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));        /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10825        Com_SetTmpRxShdBufferSInt16(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo), signalValue);     /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10826        break;
; ..\component\Com\Implementation\Com.c	 10827      }
; ..\component\Com\Implementation\Com.c	 10828  # endif
; ..\component\Com\Implementation\Com.c	 10829  # if (COM_TMPRXSHDBUFFERUINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 10830      case COM_UINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10831      {
; ..\component\Com\Implementation\Com.c	 10832        uint32 signalValue = Com_Signal_ReadSignal_UInt32(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));        /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10833        Com_SetTmpRxShdBufferUInt32(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo), signalValue);     /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10834        break;
; ..\component\Com\Implementation\Com.c	 10835      }
; ..\component\Com\Implementation\Com.c	 10836  # endif
; ..\component\Com\Implementation\Com.c	 10837  # if (COM_TMPRXSHDBUFFERSINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 10838      case COM_SINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10839      {
; ..\component\Com\Implementation\Com.c	 10840        sint32 signalValue = Com_Signal_ReadSignal_SInt32(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));        /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10841        Com_SetTmpRxShdBufferSInt32(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo), signalValue);     /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10842        break;
; ..\component\Com\Implementation\Com.c	 10843      }
; ..\component\Com\Implementation\Com.c	 10844  # endif
; ..\component\Com\Implementation\Com.c	 10845  # if (COM_TMPRXSHDBUFFERUINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 10846      case COM_UINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10847      {
; ..\component\Com\Implementation\Com.c	 10848        uint64 signalValue = Com_Signal_ReadSignal_UInt64(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));        /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10849        Com_SetTmpRxShdBufferUInt64(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo), signalValue);     /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10850        break;
; ..\component\Com\Implementation\Com.c	 10851      }
; ..\component\Com\Implementation\Com.c	 10852  # endif
; ..\component\Com\Implementation\Com.c	 10853  # if (COM_TMPRXSHDBUFFERSINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 10854      case COM_SINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10855      {
; ..\component\Com\Implementation\Com.c	 10856        sint64 signalValue = Com_Signal_ReadSignal_SInt64(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));        /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10857        Com_SetTmpRxShdBufferSInt64(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo), signalValue);     /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10858        break;
; ..\component\Com\Implementation\Com.c	 10859      }
; ..\component\Com\Implementation\Com.c	 10860  # endif
; ..\component\Com\Implementation\Com.c	 10861  # if (COM_TMPRXSHDBUFFERFLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 10862      case COM_FLOAT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10863      {
; ..\component\Com\Implementation\Com.c	 10864        float32 signalValue = Com_Signal_ReadSignal_Float32(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));      /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10865        Com_SetTmpRxShdBufferFloat32(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo), signalValue);    /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10866        break;
; ..\component\Com\Implementation\Com.c	 10867      }
; ..\component\Com\Implementation\Com.c	 10868  # endif
; ..\component\Com\Implementation\Com.c	 10869  # if (COM_TMPRXSHDBUFFERFLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 10870      case COM_FLOAT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10871      {
; ..\component\Com\Implementation\Com.c	 10872        float64 signalValue = Com_Signal_ReadSignal_Float64(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));      /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10873        Com_SetTmpRxShdBufferFloat64(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo), signalValue);    /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 10874        break;
; ..\component\Com\Implementation\Com.c	 10875      }
; ..\component\Com\Implementation\Com.c	 10876  # endif
; ..\component\Com\Implementation\Com.c	 10877  # if (COM_TMPRXSHDBUFFERARRAYBASED == STD_ON)
; ..\component\Com\Implementation\Com.c	 10878  #  if (COM_EXISTS_UINT8_N_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10879      case COM_UINT8_N_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10880      {
; ..\component\Com\Implementation\Com.c	 10881        P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr;
; ..\component\Com\Implementation\Com.c	 10882        SignalBusSourcePtr = &(PduInfoPtr->SduDataPtr[Com_GetStartByteInPduPositionOfRxAccessInfo(idxRxAccessInfo)]);
; ..\component\Com\Implementation\Com.c	 10883        VStdMemCpyRamToRam(Com_GetAddrTmpRxShdBufferArrayBased(Com_GetTmpRxShdBufferArrayBasedTmpBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), SignalBusSourcePtr, Com_GetTmpRxShdBufferArrayBasedTmpBufferLengthOfRxAccessInfo(idxRxAccessInfo));      /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 10884        break;
; ..\component\Com\Implementation\Com.c	 10885      }
; ..\component\Com\Implementation\Com.c	 10886  #  endif
; ..\component\Com\Implementation\Com.c	 10887  #  if ((COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 10888      case COM_UINT8_DYN_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10889      {
; ..\component\Com\Implementation\Com.c	 10890        P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalBusSourcePtr;
; ..\component\Com\Implementation\Com.c	 10891        PduLengthType dynLength;
; ..\component\Com\Implementation\Com.c	 10892        SignalBusSourcePtr = &(PduInfoPtr->SduDataPtr[Com_GetStartByteInPduPositionOfRxAccessInfo(idxRxAccessInfo)]);
; ..\component\Com\Implementation\Com.c	 10893        dynLength = Com_GetRxDynamicLength(PduInfoPtr->SduLength, idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 10894        if(dynLength <= Com_GetTmpRxShdBufferArrayBasedTmpBufferLengthOfRxAccessInfo(idxRxAccessInfo))    /* COV_COM_SILENT_TX */
; ..\component\Com\Implementation\Com.c	 10895        {
; ..\component\Com\Implementation\Com.c	 10896          VStdLib_MemCpy_s(Com_GetAddrTmpRxShdBufferArrayBased(Com_GetTmpRxShdBufferArrayBasedTmpBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), (VStdLib_CntType) Com_GetTmpRxShdBufferArrayBasedTmpBufferLengthOfRxAccessInfo(idxRxAccessInfo), SignalBusSourcePtr, (VStdLib_CntType) dynLength);       /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_VSTDLIB_SAFE */
; ..\component\Com\Implementation\Com.c	 10897        }
; ..\component\Com\Implementation\Com.c	 10898        break;
; ..\component\Com\Implementation\Com.c	 10899      }
; ..\component\Com\Implementation\Com.c	 10900  #  endif
; ..\component\Com\Implementation\Com.c	 10901  # endif
; ..\component\Com\Implementation\Com.c	 10902      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	 10903        break;
; ..\component\Com\Implementation\Com.c	 10904    }
; ..\component\Com\Implementation\Com.c	 10905  }       /* PRQA S 6030, 6050 */ /* MD_MSR_STCYC, MD_MSR_STCAL */
; ..\component\Com\Implementation\Com.c	 10906  #endif
; ..\component\Com\Implementation\Com.c	 10907  
; ..\component\Com\Implementation\Com.c	 10908  
; ..\component\Com\Implementation\Com.c	 10909  #if (COM_RXSIGGRPINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10910  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10911    Com_RxProcessing_RxPduSigGrpEvent
; ..\component\Com\Implementation\Com.c	 10912  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10913  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10914   *
; ..\component\Com\Implementation\Com.c	 10915   *
; ..\component\Com\Implementation\Com.c	 10916   *
; ..\component\Com\Implementation\Com.c	 10917   *
; ..\component\Com\Implementation\Com.c	 10918   *
; ..\component\Com\Implementation\Com.c	 10919   *
; ..\component\Com\Implementation\Com.c	 10920   *
; ..\component\Com\Implementation\Com.c	 10921  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10922  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_RxPduSigGrpEvent(PduIdType comRxPduInfoIdx, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr,
; ..\component\Com\Implementation\Com.c	 10923                                                                      P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr)
; ..\component\Com\Implementation\Com.c	 10924  {
; ..\component\Com\Implementation\Com.c	 10925    /* #10 Iterate over all ComSignalGroups related to the passed ComIPdu and do ComSignalGroup based processing */
; ..\component\Com\Implementation\Com.c	 10926    Com_RxSigGrpInfoIterType idxRxSigGrpInfoInd = Com_GetRxSigGrpInfoIndStartIdxOfRxPduInfo(comRxPduInfoIdx);
; ..\component\Com\Implementation\Com.c	 10927    for(; idxRxSigGrpInfoInd < Com_GetRxSigGrpInfoIndEndIdxOfRxPduInfo(comRxPduInfoIdx); idxRxSigGrpInfoInd++)
; ..\component\Com\Implementation\Com.c	 10928    {
; ..\component\Com\Implementation\Com.c	 10929      Com_RxSigGrpInfoIterType idxRxSigGrpInfo = Com_GetRxSigGrpInfoInd(idxRxSigGrpInfoInd);
; ..\component\Com\Implementation\Com.c	 10930  
; ..\component\Com\Implementation\Com.c	 10931      /* #20 If ComSignalGroup is completely contained in received data length */
; ..\component\Com\Implementation\Com.c	 10932      /* \trace SPEC-2736854 */
; ..\component\Com\Implementation\Com.c	 10933      if(PduInfoPtr->SduLength >= Com_GetValidDlcOfRxSigGrpInfo(idxRxSigGrpInfo))
; ..\component\Com\Implementation\Com.c	 10934      {
; ..\component\Com\Implementation\Com.c	 10935  # if (COM_UBMASKUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10936        /* #30 Check if the ComSignal was updated */
; ..\component\Com\Implementation\Com.c	 10937        boolean process = Com_RxProcessing_CheckSigGrpUB(PduInfoPtr, idxRxSigGrpInfo);    /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10938        if(process == TRUE)
; ..\component\Com\Implementation\Com.c	 10939  # endif
; ..\component\Com\Implementation\Com.c	 10940        {
; ..\component\Com\Implementation\Com.c	 10941  # if (COM_RXTOUTINFOUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10942          /* #40 Set configured timeout event */
; ..\component\Com\Implementation\Com.c	 10943          Com_RxDlMon_SigGrpEvent(idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	 10944  # endif
; ..\component\Com\Implementation\Com.c	 10945  
; ..\component\Com\Implementation\Com.c	 10946  # if (COM_GWINFOUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10947          /* #50 Set configured routing event */
; ..\component\Com\Implementation\Com.c	 10948          Com_SignalGw_SigGrpEvent(idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	 10949  # endif
; ..\component\Com\Implementation\Com.c	 10950          /* #60 Do Rx ComSignalGroup processing */
; ..\component\Com\Implementation\Com.c	 10951          Com_RxProcessing_ProcessSigGrpEvent(comRxPduInfoIdx, PduInfoPtr, idxRxSigGrpInfo, fctPtrCacheStrctPtr); /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 10952        } /* Update-bit check */
; ..\component\Com\Implementation\Com.c	 10953      }   /* DLC check */
; ..\component\Com\Implementation\Com.c	 10954    }     /* Signal Group loop */
; ..\component\Com\Implementation\Com.c	 10955  }       /* Signal group processing */
; ..\component\Com\Implementation\Com.c	 10956  #endif
; ..\component\Com\Implementation\Com.c	 10957  
; ..\component\Com\Implementation\Com.c	 10958  
; ..\component\Com\Implementation\Com.c	 10959  #if ((COM_RXSIGGRPINFOINDENDIDXOFRXPDUINFO == STD_ON) && (COM_FILTEREVENTOFRXSIGGRPINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 10960  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 10961    Com_RxProcessing_RxSignalGroupFilterCheck
; ..\component\Com\Implementation\Com.c	 10962  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10963  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 10964   *
; ..\component\Com\Implementation\Com.c	 10965   *
; ..\component\Com\Implementation\Com.c	 10966   *
; ..\component\Com\Implementation\Com.c	 10967   *
; ..\component\Com\Implementation\Com.c	 10968   *
; ..\component\Com\Implementation\Com.c	 10969   *
; ..\component\Com\Implementation\Com.c	 10970   *
; ..\component\Com\Implementation\Com.c	 10971  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 10972  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxProcessing_RxSignalGroupFilterCheck(Com_RxSigGrpInfoIterType idxRxSigGrpInfo)
; ..\component\Com\Implementation\Com.c	 10973  {
; ..\component\Com\Implementation\Com.c	 10974    Com_RxSigProcessState retVal = VALID; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 10975    boolean hasToutOccurred = FALSE;
; ..\component\Com\Implementation\Com.c	 10976  # if (COM_RXTOUTINFOUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 10977    /* #10 If the ComSignalGroup has a Timeout, check if that timeout has occurred */
; ..\component\Com\Implementation\Com.c	 10978    if(Com_IsRxTOutInfoUsedOfRxSigGrpInfo(idxRxSigGrpInfo))
; ..\component\Com\Implementation\Com.c	 10979    {
; ..\component\Com\Implementation\Com.c	 10980      hasToutOccurred = Com_LMgt_HasTimeoutOccurred(Com_GetRxTOutInfoIdxOfRxSigGrpInfo(idxRxSigGrpInfo));
; ..\component\Com\Implementation\Com.c	 10981    }
; ..\component\Com\Implementation\Com.c	 10982  # endif
; ..\component\Com\Implementation\Com.c	 10983    {
; ..\component\Com\Implementation\Com.c	 10984      Com_RxAccessInfoIndIterType RxAccessInfoIndidx = Com_GetRxAccessInfoGrpSigIndStartIdxOfRxSigGrpInfo(idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	 10985      boolean filterState = FALSE;
; ..\component\Com\Implementation\Com.c	 10986  # if ((COM_SHDBUFFERUSEDOFRXACCESSINFO == STD_ON)||((COM_RXSIGBUFFERARRAYBASEDSHDBUFFERUSEDOFRXACCESSINFO == STD_ON) && (COM_EXISTS_UINT8_N_APPLTYPEOFRXACCESSINFO == STD_ON)))
; ..\component\Com\Implementation\Com.c	 10987      /* #20 Iterate over all ComGroupSignals of the passed ComSignalGroup */
; ..\component\Com\Implementation\Com.c	 10988      for(; RxAccessInfoIndidx < Com_GetRxAccessInfoGrpSigIndEndIdxOfRxSigGrpInfo(idxRxSigGrpInfo); RxAccessInfoIndidx++)
; ..\component\Com\Implementation\Com.c	 10989      {
; ..\component\Com\Implementation\Com.c	 10990        Com_RxAccessInfoIterType idxRxAccessInfo = Com_GetRxAccessInfoGrpSigInd(RxAccessInfoIndidx);
; ..\component\Com\Implementation\Com.c	 10991        /* #30 Check filter state according to configured filter algorithm and the configured signal ApplType */
; ..\component\Com\Implementation\Com.c	 10992        switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	 10993        {
; ..\component\Com\Implementation\Com.c	 10994  /* jet: GeneralSwitchCasePerApplType snippet */
; ..\component\Com\Implementation\Com.c	 10995  #  if ((COM_TMPRXSHDBUFFERUINT8 == STD_ON) && (COM_FILTERINFO_UINT8 == STD_ON))
; ..\component\Com\Implementation\Com.c	 10996          case COM_UINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 10997          {
; ..\component\Com\Implementation\Com.c	 10998            filterState =
; ..\component\Com\Implementation\Com.c	 10999              Com_Signal_UInt8_EvaluateFilter((Com_FilterInfo_UInt8IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	 11000                                              Com_GetTmpRxShdBufferUInt8(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)), Com_GetRxSigBufferUInt8(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)),
; ..\component\Com\Implementation\Com.c	 11001                                              hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11002            break;
; ..\component\Com\Implementation\Com.c	 11003          }
; ..\component\Com\Implementation\Com.c	 11004  #  endif
; ..\component\Com\Implementation\Com.c	 11005  #  if ((COM_TMPRXSHDBUFFERSINT8 == STD_ON) && (COM_FILTERINFO_SINT8 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11006          case COM_SINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11007          {
; ..\component\Com\Implementation\Com.c	 11008            filterState =
; ..\component\Com\Implementation\Com.c	 11009              Com_Signal_SInt8_EvaluateFilter((Com_FilterInfo_SInt8IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	 11010                                              Com_GetTmpRxShdBufferSInt8(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)), Com_GetRxSigBufferSInt8(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)),
; ..\component\Com\Implementation\Com.c	 11011                                              hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11012            break;
; ..\component\Com\Implementation\Com.c	 11013          }
; ..\component\Com\Implementation\Com.c	 11014  #  endif
; ..\component\Com\Implementation\Com.c	 11015  #  if ((COM_TMPRXSHDBUFFERUINT16 == STD_ON) && (COM_FILTERINFO_UINT16 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11016          case COM_UINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11017          {
; ..\component\Com\Implementation\Com.c	 11018            filterState =
; ..\component\Com\Implementation\Com.c	 11019              Com_Signal_UInt16_EvaluateFilter((Com_FilterInfo_UInt16IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	 11020                                               Com_GetTmpRxShdBufferUInt16(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)),
; ..\component\Com\Implementation\Com.c	 11021                                               Com_GetRxSigBufferUInt16(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11022            break;
; ..\component\Com\Implementation\Com.c	 11023          }
; ..\component\Com\Implementation\Com.c	 11024  #  endif
; ..\component\Com\Implementation\Com.c	 11025  #  if ((COM_TMPRXSHDBUFFERSINT16 == STD_ON) && (COM_FILTERINFO_SINT16 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11026          case COM_SINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11027          {
; ..\component\Com\Implementation\Com.c	 11028            filterState =
; ..\component\Com\Implementation\Com.c	 11029              Com_Signal_SInt16_EvaluateFilter((Com_FilterInfo_SInt16IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	 11030                                               Com_GetTmpRxShdBufferSInt16(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)),
; ..\component\Com\Implementation\Com.c	 11031                                               Com_GetRxSigBufferSInt16(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11032            break;
; ..\component\Com\Implementation\Com.c	 11033          }
; ..\component\Com\Implementation\Com.c	 11034  #  endif
; ..\component\Com\Implementation\Com.c	 11035  #  if ((COM_TMPRXSHDBUFFERUINT32 == STD_ON) && (COM_FILTERINFO_UINT32 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11036          case COM_UINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11037          {
; ..\component\Com\Implementation\Com.c	 11038            filterState =
; ..\component\Com\Implementation\Com.c	 11039              Com_Signal_UInt32_EvaluateFilter((Com_FilterInfo_UInt32IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	 11040                                               Com_GetTmpRxShdBufferUInt32(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)),
; ..\component\Com\Implementation\Com.c	 11041                                               Com_GetRxSigBufferUInt32(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11042            break;
; ..\component\Com\Implementation\Com.c	 11043          }
; ..\component\Com\Implementation\Com.c	 11044  #  endif
; ..\component\Com\Implementation\Com.c	 11045  #  if ((COM_TMPRXSHDBUFFERSINT32 == STD_ON) && (COM_FILTERINFO_SINT32 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11046          case COM_SINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11047          {
; ..\component\Com\Implementation\Com.c	 11048            filterState =
; ..\component\Com\Implementation\Com.c	 11049              Com_Signal_SInt32_EvaluateFilter((Com_FilterInfo_SInt32IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	 11050                                               Com_GetTmpRxShdBufferSInt32(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)),
; ..\component\Com\Implementation\Com.c	 11051                                               Com_GetRxSigBufferSInt32(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11052            break;
; ..\component\Com\Implementation\Com.c	 11053          }
; ..\component\Com\Implementation\Com.c	 11054  #  endif
; ..\component\Com\Implementation\Com.c	 11055  #  if ((COM_TMPRXSHDBUFFERUINT64 == STD_ON) && (COM_FILTERINFO_UINT64 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11056          case COM_UINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11057          {
; ..\component\Com\Implementation\Com.c	 11058            filterState =
; ..\component\Com\Implementation\Com.c	 11059              Com_Signal_UInt64_EvaluateFilter((Com_FilterInfo_UInt64IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	 11060                                               Com_GetTmpRxShdBufferUInt64(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)),
; ..\component\Com\Implementation\Com.c	 11061                                               Com_GetRxSigBufferUInt64(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11062            break;
; ..\component\Com\Implementation\Com.c	 11063          }
; ..\component\Com\Implementation\Com.c	 11064  #  endif
; ..\component\Com\Implementation\Com.c	 11065  #  if ((COM_TMPRXSHDBUFFERSINT64 == STD_ON) && (COM_FILTERINFO_SINT64 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11066          case COM_SINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11067          {
; ..\component\Com\Implementation\Com.c	 11068            filterState =
; ..\component\Com\Implementation\Com.c	 11069              Com_Signal_SInt64_EvaluateFilter((Com_FilterInfo_SInt64IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	 11070                                               Com_GetTmpRxShdBufferSInt64(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)),
; ..\component\Com\Implementation\Com.c	 11071                                               Com_GetRxSigBufferSInt64(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11072            break;
; ..\component\Com\Implementation\Com.c	 11073          }
; ..\component\Com\Implementation\Com.c	 11074  #  endif
; ..\component\Com\Implementation\Com.c	 11075  #  if((COM_TMPRXSHDBUFFERARRAYBASED == STD_ON) && (COM_FILTERINFO_UINT8_N == STD_ON))
; ..\component\Com\Implementation\Com.c	 11076          case COM_UINT8_N_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11077          {
; ..\component\Com\Implementation\Com.c	 11078            /* *INDENT-OFF* */
; ..\component\Com\Implementation\Com.c	 11079             filterState = Com_Signal_UInt8_N_EvaluateFilter((Com_FilterInfo_UInt8_NIterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo),
; ..\component\Com\Implementation\Com.c	 11080             Com_GetAddrTmpRxShdBufferArrayBased(Com_GetTmpRxShdBufferArrayBasedTmpBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)),
; ..\component\Com\Implementation\Com.c	 11081             Com_GetAddrRxSigBufferArrayBased(Com_GetRxSigBufferArrayBasedShdBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)),
; ..\component\Com\Implementation\Com.c	 11082             (PduLengthType) Com_GetRxSigBufferArrayBasedShdBufferLengthOfRxAccessInfo(idxRxAccessInfo), hasToutOccurred); /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 11083           /* *INDENT-ON* */
; ..\component\Com\Implementation\Com.c	 11084            break;
; ..\component\Com\Implementation\Com.c	 11085          }
; ..\component\Com\Implementation\Com.c	 11086  #  endif
; ..\component\Com\Implementation\Com.c	 11087  /* filterState will be always FALSE for floating-point signals, no filter evaluation is needed */
; ..\component\Com\Implementation\Com.c	 11088  #  if ((COM_TMPRXSHDBUFFERFLOAT32 == STD_ON) && (COM_FILTERINFO_FLOAT32 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11089          case COM_FLOAT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11090  #  endif
; ..\component\Com\Implementation\Com.c	 11091  #  if ((COM_TMPRXSHDBUFFERFLOAT64 == STD_ON) && (COM_FILTERINFO_FLOAT64 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11092          case COM_FLOAT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11093  #  endif
; ..\component\Com\Implementation\Com.c	 11094          default:       /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	 11095            break;
; ..\component\Com\Implementation\Com.c	 11096        }
; ..\component\Com\Implementation\Com.c	 11097        /* #40 If Filter evaluates to TRUE, stop evaluating remaining group signals. */
; ..\component\Com\Implementation\Com.c	 11098        if(filterState == TRUE)
; ..\component\Com\Implementation\Com.c	 11099        {
; ..\component\Com\Implementation\Com.c	 11100          break;
; ..\component\Com\Implementation\Com.c	 11101        }
; ..\component\Com\Implementation\Com.c	 11102      }
; ..\component\Com\Implementation\Com.c	 11103      /* #50 If any of the group signal filters evaluates to TRUE, return VALID */
; ..\component\Com\Implementation\Com.c	 11104      /* #60 Otherwise return FILTERED */
; ..\component\Com\Implementation\Com.c	 11105      if(filterState == FALSE)
; ..\component\Com\Implementation\Com.c	 11106  # endif
; ..\component\Com\Implementation\Com.c	 11107      {
; ..\component\Com\Implementation\Com.c	 11108        retVal = FILTERED;
; ..\component\Com\Implementation\Com.c	 11109      }
; ..\component\Com\Implementation\Com.c	 11110  
; ..\component\Com\Implementation\Com.c	 11111      COM_DUMMY_STATEMENT(hasToutOccurred);       /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11112      COM_DUMMY_STATEMENT(RxAccessInfoIndidx);    /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11113      COM_DUMMY_STATEMENT(filterState);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11114    }
; ..\component\Com\Implementation\Com.c	 11115    return retVal;
; ..\component\Com\Implementation\Com.c	 11116  }       /* PRQA S 6010, 6030, 6050 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STCAL */
; ..\component\Com\Implementation\Com.c	 11117  #endif
; ..\component\Com\Implementation\Com.c	 11118  
; ..\component\Com\Implementation\Com.c	 11119  #if (COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11120  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11121    Com_RxProcessing_ExtractToShdwBffr
; ..\component\Com\Implementation\Com.c	 11122  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11123  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11124   *
; ..\component\Com\Implementation\Com.c	 11125   *
; ..\component\Com\Implementation\Com.c	 11126   *
; ..\component\Com\Implementation\Com.c	 11127  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11128  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_ExtractToShdwBffr(Com_RxSigGrpInfoIterType idxRxSigGrpInfo, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr)
; ..\component\Com\Implementation\Com.c	 11129  {
; ..\component\Com\Implementation\Com.c	 11130    /* #10 Iterate over all ComGroupSignals of the passed ComSignalGroup */
; ..\component\Com\Implementation\Com.c	 11131    Com_RxAccessInfoIndIterType RxAccessInfoIndidx = Com_GetRxAccessInfoGrpSigIndStartIdxOfRxSigGrpInfo(idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	 11132    for(; RxAccessInfoIndidx < Com_GetRxAccessInfoGrpSigIndEndIdxOfRxSigGrpInfo(idxRxSigGrpInfo); RxAccessInfoIndidx++)
; ..\component\Com\Implementation\Com.c	 11133    {
; ..\component\Com\Implementation\Com.c	 11134      Com_RxAccessInfoIterType idxRxAccessInfo = Com_GetRxAccessInfoGrpSigInd(RxAccessInfoIndidx);
; ..\component\Com\Implementation\Com.c	 11135      /* #20 Copy the value of the temp shadow buffer to the shadow buffer */
; ..\component\Com\Implementation\Com.c	 11136      switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	 11137      {
; ..\component\Com\Implementation\Com.c	 11138  /* jet: GeneralSwitchCasePerApplType snippet */
; ..\component\Com\Implementation\Com.c	 11139  # if (COM_TMPRXSHDBUFFERUINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	 11140        case COM_UINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11141        {
; ..\component\Com\Implementation\Com.c	 11142          Com_SetRxSigBufferUInt8(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetTmpRxShdBufferUInt8(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));    /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11143          break;
; ..\component\Com\Implementation\Com.c	 11144        }
; ..\component\Com\Implementation\Com.c	 11145  # endif
; ..\component\Com\Implementation\Com.c	 11146  # if (COM_TMPRXSHDBUFFERSINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	 11147        case COM_SINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11148        {
; ..\component\Com\Implementation\Com.c	 11149          Com_SetRxSigBufferSInt8(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetTmpRxShdBufferSInt8(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));    /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11150          break;
; ..\component\Com\Implementation\Com.c	 11151        }
; ..\component\Com\Implementation\Com.c	 11152  # endif
; ..\component\Com\Implementation\Com.c	 11153  # if (COM_TMPRXSHDBUFFERUINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	 11154        case COM_UINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11155        {
; ..\component\Com\Implementation\Com.c	 11156          Com_SetRxSigBufferUInt16(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetTmpRxShdBufferUInt16(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11157          break;
; ..\component\Com\Implementation\Com.c	 11158        }
; ..\component\Com\Implementation\Com.c	 11159  # endif
; ..\component\Com\Implementation\Com.c	 11160  # if (COM_TMPRXSHDBUFFERSINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	 11161        case COM_SINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11162        {
; ..\component\Com\Implementation\Com.c	 11163          Com_SetRxSigBufferSInt16(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetTmpRxShdBufferSInt16(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11164          break;
; ..\component\Com\Implementation\Com.c	 11165        }
; ..\component\Com\Implementation\Com.c	 11166  # endif
; ..\component\Com\Implementation\Com.c	 11167  # if (COM_TMPRXSHDBUFFERUINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 11168        case COM_UINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11169        {
; ..\component\Com\Implementation\Com.c	 11170          Com_SetRxSigBufferUInt32(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetTmpRxShdBufferUInt32(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11171          break;
; ..\component\Com\Implementation\Com.c	 11172        }
; ..\component\Com\Implementation\Com.c	 11173  # endif
; ..\component\Com\Implementation\Com.c	 11174  # if (COM_TMPRXSHDBUFFERSINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 11175        case COM_SINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11176        {
; ..\component\Com\Implementation\Com.c	 11177          Com_SetRxSigBufferSInt32(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetTmpRxShdBufferSInt32(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11178          break;
; ..\component\Com\Implementation\Com.c	 11179        }
; ..\component\Com\Implementation\Com.c	 11180  # endif
; ..\component\Com\Implementation\Com.c	 11181  # if (COM_TMPRXSHDBUFFERUINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 11182        case COM_UINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11183        {
; ..\component\Com\Implementation\Com.c	 11184          Com_SetRxSigBufferUInt64(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetTmpRxShdBufferUInt64(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11185          break;
; ..\component\Com\Implementation\Com.c	 11186        }
; ..\component\Com\Implementation\Com.c	 11187  # endif
; ..\component\Com\Implementation\Com.c	 11188  # if (COM_TMPRXSHDBUFFERSINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 11189        case COM_SINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11190        {
; ..\component\Com\Implementation\Com.c	 11191          Com_SetRxSigBufferSInt64(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetTmpRxShdBufferSInt64(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11192          break;
; ..\component\Com\Implementation\Com.c	 11193        }
; ..\component\Com\Implementation\Com.c	 11194  # endif
; ..\component\Com\Implementation\Com.c	 11195  # if (COM_TMPRXSHDBUFFERFLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 11196        case COM_FLOAT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11197        {
; ..\component\Com\Implementation\Com.c	 11198          Com_SetRxSigBufferFloat32(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetTmpRxShdBufferFloat32(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));        /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11199          break;
; ..\component\Com\Implementation\Com.c	 11200        }
; ..\component\Com\Implementation\Com.c	 11201  # endif
; ..\component\Com\Implementation\Com.c	 11202  # if (COM_TMPRXSHDBUFFERFLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 11203        case COM_FLOAT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11204        {
; ..\component\Com\Implementation\Com.c	 11205          Com_SetRxSigBufferFloat64(Com_GetShdBufferIdxOfRxAccessInfo(idxRxAccessInfo), Com_GetTmpRxShdBufferFloat64(Com_GetTmpBufferIdxOfRxAccessInfo(idxRxAccessInfo)));        /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11206          break;
; ..\component\Com\Implementation\Com.c	 11207        }
; ..\component\Com\Implementation\Com.c	 11208  # endif
; ..\component\Com\Implementation\Com.c	 11209  # if (COM_TMPRXSHDBUFFERARRAYBASED == STD_ON)
; ..\component\Com\Implementation\Com.c	 11210  #  if (COM_EXISTS_UINT8_N_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11211        case COM_UINT8_N_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11212        {
; ..\component\Com\Implementation\Com.c	 11213          VStdMemCpyRamToRam(Com_GetAddrRxSigBufferArrayBased(Com_GetRxSigBufferArrayBasedShdBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), Com_GetAddrTmpRxShdBufferArrayBased(Com_GetTmpRxShdBufferArrayBasedTmpBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), (PduLengthType) Com_GetRxSigBufferArrayBasedShdBufferLengthOfRxAccessInfo(idxRxAccessInfo));   /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_MEM_CPY_2RAM */
; ..\component\Com\Implementation\Com.c	 11214          break;
; ..\component\Com\Implementation\Com.c	 11215        }
; ..\component\Com\Implementation\Com.c	 11216  #  endif
; ..\component\Com\Implementation\Com.c	 11217  #  if (COM_RXDYNSIGNALTMPLENGTHFORSIGNALGROUPS == STD_ON)
; ..\component\Com\Implementation\Com.c	 11218        case COM_UINT8_DYN_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11219        {
; ..\component\Com\Implementation\Com.c	 11220          Com_RxTpInfoIdxOfRxPduInfoType rxTpPduInfoIdx = Com_GetRxTpInfoIdxOfRxPduInfo(Com_GetRxPduInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 11221          Com_SetRxDynSignalTmpLengthForSignalGroups(rxTpPduInfoIdx, Com_GetRxDynamicLength(PduInfoPtr->SduLength, idxRxAccessInfo));     /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 11222          VStdMemCpyRamToRam(Com_GetAddrRxSigBufferArrayBased(Com_GetRxSigBufferArrayBasedShdBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), Com_GetAddrTmpRxShdBufferArrayBased(Com_GetTmpRxShdBufferArrayBasedTmpBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), Com_GetRxDynSignalTmpLengthForSignalGroups(rxTpPduInfoIdx));   /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_CSL01 */
; ..\component\Com\Implementation\Com.c	 11223          break;
; ..\component\Com\Implementation\Com.c	 11224        }
; ..\component\Com\Implementation\Com.c	 11225  #  endif
; ..\component\Com\Implementation\Com.c	 11226  # endif
; ..\component\Com\Implementation\Com.c	 11227        default: /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	 11228          break;
; ..\component\Com\Implementation\Com.c	 11229      }
; ..\component\Com\Implementation\Com.c	 11230    }
; ..\component\Com\Implementation\Com.c	 11231    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11232  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	 11233  #endif
; ..\component\Com\Implementation\Com.c	 11234  
; ..\component\Com\Implementation\Com.c	 11235  #if ((COM_RXSIGGRPINFOINDENDIDXOFRXPDUINFO == STD_ON) && (COM_UBMASKUSEDOFRXSIGGRPINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11236  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11237    Com_RxProcessing_CheckSigGrpUB
; ..\component\Com\Implementation\Com.c	 11238  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11239  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11240   *
; ..\component\Com\Implementation\Com.c	 11241   *
; ..\component\Com\Implementation\Com.c	 11242   *
; ..\component\Com\Implementation\Com.c	 11243   *
; ..\component\Com\Implementation\Com.c	 11244   *
; ..\component\Com\Implementation\Com.c	 11245  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11246  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_RxProcessing_CheckSigGrpUB(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxSigGrpInfoIterType idxRxSigGrpInfo)
; ..\component\Com\Implementation\Com.c	 11247  {
; ..\component\Com\Implementation\Com.c	 11248    boolean retVal = TRUE;        /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11249    /* #10 If the ComSignalGroup has an UpdateBit */
; ..\component\Com\Implementation\Com.c	 11250    if(Com_IsUbMaskUsedOfRxSigGrpInfo(idxRxSigGrpInfo))   /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 11251    {
; ..\component\Com\Implementation\Com.c	 11252      /* #20 If the configured UpdateBit was not received mark the ComSignalGroup as updated */
; ..\component\Com\Implementation\Com.c	 11253      if(PduInfoPtr->SduLength <= Com_GetUbIdxOfRxSigGrpInfo(idxRxSigGrpInfo))
; ..\component\Com\Implementation\Com.c	 11254      {
; ..\component\Com\Implementation\Com.c	 11255        /* Update-bit not received */
; ..\component\Com\Implementation\Com.c	 11256        retVal = TRUE;
; ..\component\Com\Implementation\Com.c	 11257      }
; ..\component\Com\Implementation\Com.c	 11258      /* #30 If the UpdateBit is not set, mark the ComSignalGroup as not updated */
; ..\component\Com\Implementation\Com.c	 11259      else if(0u == (PduInfoPtr->SduDataPtr[Com_GetUbIdxOfRxSigGrpInfo(idxRxSigGrpInfo)] & Com_GetConstValueUInt8(Com_GetUbMaskIdxOfRxSigGrpInfo(idxRxSigGrpInfo))))      /* PRQA S 2822, 2962 */ /* MD_Com_2822_2962 */
; ..\component\Com\Implementation\Com.c	 11260      {
; ..\component\Com\Implementation\Com.c	 11261        /* Update-bit not set */
; ..\component\Com\Implementation\Com.c	 11262        retVal = FALSE;
; ..\component\Com\Implementation\Com.c	 11263      }
; ..\component\Com\Implementation\Com.c	 11264      /* #40 Otherwise mark the ComSignalGroup as updated */
; ..\component\Com\Implementation\Com.c	 11265      else
; ..\component\Com\Implementation\Com.c	 11266      {
; ..\component\Com\Implementation\Com.c	 11267        /* Update-bit set */
; ..\component\Com\Implementation\Com.c	 11268        retVal = TRUE;
; ..\component\Com\Implementation\Com.c	 11269      }
; ..\component\Com\Implementation\Com.c	 11270    }
; ..\component\Com\Implementation\Com.c	 11271    return retVal;
; ..\component\Com\Implementation\Com.c	 11272  }
; ..\component\Com\Implementation\Com.c	 11273  #endif
; ..\component\Com\Implementation\Com.c	 11274  
; ..\component\Com\Implementation\Com.c	 11275  #if ((COM_RXSIGINFOENDIDXOFRXPDUINFO == STD_ON) && (COM_UBMASKUSEDOFRXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11276  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11277    Com_RxProcessing_CheckSigUB
; ..\component\Com\Implementation\Com.c	 11278  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11279  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11280   *
; ..\component\Com\Implementation\Com.c	 11281   *
; ..\component\Com\Implementation\Com.c	 11282   *
; ..\component\Com\Implementation\Com.c	 11283   *
; ..\component\Com\Implementation\Com.c	 11284   *
; ..\component\Com\Implementation\Com.c	 11285  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11286  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_RxProcessing_CheckSigUB(Com_RxSigInfoIterType idxRxSigInfo, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr)
; ..\component\Com\Implementation\Com.c	 11287  {
; ..\component\Com\Implementation\Com.c	 11288    boolean retVal = TRUE;        /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11289    /* #10 If the ComSignal has an UpdateBit */
; ..\component\Com\Implementation\Com.c	 11290    if(Com_IsUbMaskUsedOfRxSigInfo(idxRxSigInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 11291    {
; ..\component\Com\Implementation\Com.c	 11292      /* #20 If the configured UpdateBit was not received mark the ComSignal as updated */
; ..\component\Com\Implementation\Com.c	 11293      /* <= because a length is compared with an index */
; ..\component\Com\Implementation\Com.c	 11294      if(PduInfoPtr->SduLength <= Com_GetUbIdxOfRxSigInfo(idxRxSigInfo))
; ..\component\Com\Implementation\Com.c	 11295      {
; ..\component\Com\Implementation\Com.c	 11296        /* Update-bit not received */
; ..\component\Com\Implementation\Com.c	 11297        retVal = TRUE;
; ..\component\Com\Implementation\Com.c	 11298      }
; ..\component\Com\Implementation\Com.c	 11299      /* #30 If the UpdateBit is not set, mark the ComSignal as not updated */
; ..\component\Com\Implementation\Com.c	 11300      else if(0u == (PduInfoPtr->SduDataPtr[Com_GetUbIdxOfRxSigInfo(idxRxSigInfo)] & Com_GetConstValueUInt8(Com_GetUbMaskIdxOfRxSigInfo(idxRxSigInfo))))  /* PRQA S 2822, 2962 */ /* MD_Com_2822_2962 */
; ..\component\Com\Implementation\Com.c	 11301      {
; ..\component\Com\Implementation\Com.c	 11302        /* Update-bit not set */
; ..\component\Com\Implementation\Com.c	 11303        retVal = FALSE;
; ..\component\Com\Implementation\Com.c	 11304      }
; ..\component\Com\Implementation\Com.c	 11305      /* #40 Otherwise mark the ComSignal as updated */
; ..\component\Com\Implementation\Com.c	 11306      else
; ..\component\Com\Implementation\Com.c	 11307      {
; ..\component\Com\Implementation\Com.c	 11308        /* Update-bit set */
; ..\component\Com\Implementation\Com.c	 11309        retVal = TRUE;
; ..\component\Com\Implementation\Com.c	 11310      }
; ..\component\Com\Implementation\Com.c	 11311    }
; ..\component\Com\Implementation\Com.c	 11312    return retVal;
; ..\component\Com\Implementation\Com.c	 11313  }
; ..\component\Com\Implementation\Com.c	 11314  #endif
; ..\component\Com\Implementation\Com.c	 11315  
; ..\component\Com\Implementation\Com.c	 11316  
; ..\component\Com\Implementation\Com.c	 11317  #if (COM_RXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11318  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11319    Com_RxSignalProcessing
; ..\component\Com\Implementation\Com.c	 11320  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11321  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11322   *
; ..\component\Com\Implementation\Com.c	 11323   *
; ..\component\Com\Implementation\Com.c	 11324  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11325  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIdxOfRxSigInfoType idxRxAccessInfo)        /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	 11326  {
; ..\component\Com\Implementation\Com.c	 11327    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11328  
; ..\component\Com\Implementation\Com.c	 11329    /* #10 process the passed signal signal type dependent */
; ..\component\Com\Implementation\Com.c	 11330    switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))
; ..\component\Com\Implementation\Com.c	 11331    {
; ..\component\Com\Implementation\Com.c	 11332  /* jet: GeneralSwitchCasePerApplType snippet */
; ..\component\Com\Implementation\Com.c	 11333  # if (COM_EXISTS_UINT8_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11334      case COM_UINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11335      {
; ..\component\Com\Implementation\Com.c	 11336        processState = Com_RxSignalProcessing_UINT8(PduInfoPtr, idxRxAccessInfo); /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 11337        break;
; ..\component\Com\Implementation\Com.c	 11338      }
; ..\component\Com\Implementation\Com.c	 11339  # endif
; ..\component\Com\Implementation\Com.c	 11340  # if (COM_EXISTS_SINT8_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11341      case COM_SINT8_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11342      {
; ..\component\Com\Implementation\Com.c	 11343        processState = Com_RxSignalProcessing_SINT8(PduInfoPtr, idxRxAccessInfo); /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 11344        break;
; ..\component\Com\Implementation\Com.c	 11345      }
; ..\component\Com\Implementation\Com.c	 11346  # endif
; ..\component\Com\Implementation\Com.c	 11347  # if (COM_EXISTS_UINT16_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11348      case COM_UINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11349      {
; ..\component\Com\Implementation\Com.c	 11350        processState = Com_RxSignalProcessing_UINT16(PduInfoPtr, idxRxAccessInfo);        /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 11351        break;
; ..\component\Com\Implementation\Com.c	 11352      }
; ..\component\Com\Implementation\Com.c	 11353  # endif
; ..\component\Com\Implementation\Com.c	 11354  # if (COM_EXISTS_SINT16_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11355      case COM_SINT16_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11356      {
; ..\component\Com\Implementation\Com.c	 11357        processState = Com_RxSignalProcessing_SINT16(PduInfoPtr, idxRxAccessInfo);        /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 11358        break;
; ..\component\Com\Implementation\Com.c	 11359      }
; ..\component\Com\Implementation\Com.c	 11360  # endif
; ..\component\Com\Implementation\Com.c	 11361  # if (COM_EXISTS_UINT32_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11362      case COM_UINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11363      {
; ..\component\Com\Implementation\Com.c	 11364        processState = Com_RxSignalProcessing_UINT32(PduInfoPtr, idxRxAccessInfo);        /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 11365        break;
; ..\component\Com\Implementation\Com.c	 11366      }
; ..\component\Com\Implementation\Com.c	 11367  # endif
; ..\component\Com\Implementation\Com.c	 11368  # if (COM_EXISTS_SINT32_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11369      case COM_SINT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11370      {
; ..\component\Com\Implementation\Com.c	 11371        processState = Com_RxSignalProcessing_SINT32(PduInfoPtr, idxRxAccessInfo);        /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 11372        break;
; ..\component\Com\Implementation\Com.c	 11373      }
; ..\component\Com\Implementation\Com.c	 11374  # endif
; ..\component\Com\Implementation\Com.c	 11375  # if (COM_EXISTS_UINT64_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11376      case COM_UINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11377      {
; ..\component\Com\Implementation\Com.c	 11378        processState = Com_RxSignalProcessing_UINT64(PduInfoPtr, idxRxAccessInfo);        /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 11379        break;
; ..\component\Com\Implementation\Com.c	 11380      }
; ..\component\Com\Implementation\Com.c	 11381  # endif
; ..\component\Com\Implementation\Com.c	 11382  # if (COM_EXISTS_SINT64_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11383      case COM_SINT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11384      {
; ..\component\Com\Implementation\Com.c	 11385        processState = Com_RxSignalProcessing_SINT64(PduInfoPtr, idxRxAccessInfo);        /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 11386        break;
; ..\component\Com\Implementation\Com.c	 11387      }
; ..\component\Com\Implementation\Com.c	 11388  # endif
; ..\component\Com\Implementation\Com.c	 11389  # if (COM_EXISTS_FLOAT32_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11390      case COM_FLOAT32_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11391      {
; ..\component\Com\Implementation\Com.c	 11392        processState = Com_RxSignalProcessing_FLOAT32(PduInfoPtr, idxRxAccessInfo);       /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 11393        break;
; ..\component\Com\Implementation\Com.c	 11394      }
; ..\component\Com\Implementation\Com.c	 11395  # endif
; ..\component\Com\Implementation\Com.c	 11396  # if (COM_EXISTS_FLOAT64_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11397      case COM_FLOAT64_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11398      {
; ..\component\Com\Implementation\Com.c	 11399        processState = Com_RxSignalProcessing_FLOAT64(PduInfoPtr, idxRxAccessInfo);       /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 11400        break;
; ..\component\Com\Implementation\Com.c	 11401      }
; ..\component\Com\Implementation\Com.c	 11402  # endif
; ..\component\Com\Implementation\Com.c	 11403  # if(COM_EXISTS_UINT8_N_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11404      case COM_UINT8_N_APPLTYPEOFRXACCESSINFO:   /* COV_COM_APPLTYPEOFRXACCESSINFO */
; ..\component\Com\Implementation\Com.c	 11405      {
; ..\component\Com\Implementation\Com.c	 11406        processState = Com_RxSignalProcessing_UINT8_N(PduInfoPtr, idxRxAccessInfo);       /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 11407        break;
; ..\component\Com\Implementation\Com.c	 11408      }
; ..\component\Com\Implementation\Com.c	 11409  # endif
; ..\component\Com\Implementation\Com.c	 11410  # if ((COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11411      case COM_UINT8_DYN_APPLTYPEOFRXACCESSINFO:
; ..\component\Com\Implementation\Com.c	 11412      {
; ..\component\Com\Implementation\Com.c	 11413        processState = Com_RxSignalProcessing_UINT8_DYN(PduInfoPtr, idxRxAccessInfo);     /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 11414        break;
; ..\component\Com\Implementation\Com.c	 11415      }
; ..\component\Com\Implementation\Com.c	 11416  # endif
; ..\component\Com\Implementation\Com.c	 11417  # if(COM_EXISTS_ZEROBIT_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11418      case COM_ZEROBIT_APPLTYPEOFRXACCESSINFO:   /* COV_COM_APPLTYPEOFRXACCESSINFO */
; ..\component\Com\Implementation\Com.c	 11419      {
; ..\component\Com\Implementation\Com.c	 11420        break;    /* place holder for zeroBit Appl.Types. No signalProcessing shall be done */
; ..\component\Com\Implementation\Com.c	 11421      }
; ..\component\Com\Implementation\Com.c	 11422  # endif
; ..\component\Com\Implementation\Com.c	 11423      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	 11424        break;
; ..\component\Com\Implementation\Com.c	 11425    }
; ..\component\Com\Implementation\Com.c	 11426    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);
; ..\component\Com\Implementation\Com.c	 11427    return processState;
; ..\component\Com\Implementation\Com.c	 11428  }       /* PRQA S 6030, 6050 */ /* MD_MSR_STCYC, MD_MSR_STCAL */
; ..\component\Com\Implementation\Com.c	 11429  #endif
; ..\component\Com\Implementation\Com.c	 11430  
; ..\component\Com\Implementation\Com.c	 11431  /* jet: ComRxSignalProcessing */
; ..\component\Com\Implementation\Com.c	 11432  #if ((COM_EXISTS_UINT8_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11433  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11434    Com_RxSignalProcessing_UINT8
; ..\component\Com\Implementation\Com.c	 11435  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11436  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11437   *
; ..\component\Com\Implementation\Com.c	 11438   *
; ..\component\Com\Implementation\Com.c	 11439   *
; ..\component\Com\Implementation\Com.c	 11440   *
; ..\component\Com\Implementation\Com.c	 11441   *
; ..\component\Com\Implementation\Com.c	 11442  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11443  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_UINT8(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	 11444  {
; ..\component\Com\Implementation\Com.c	 11445    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11446    /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	 11447    uint8 tmpNewValue = Com_Signal_ReadSignal_UInt8(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));      /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 11448  
; ..\component\Com\Implementation\Com.c	 11449  # if (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11450    processState = Com_RxInv_Sig_UInt8_EvaluateInvalidValue(idxRxAccessInfo, tmpNewValue);
; ..\component\Com\Implementation\Com.c	 11451    if(processState == VALID)     /* COV_COM_INVALIDATION_TX */
; ..\component\Com\Implementation\Com.c	 11452  # endif
; ..\component\Com\Implementation\Com.c	 11453  # if ((COM_FILTERINFOUSEDOFRXACCESSINFO == STD_ON) && (COM_FILTERINFO_UINT8 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11454    {
; ..\component\Com\Implementation\Com.c	 11455      if(Com_IsFilterInfoUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 11456      {
; ..\component\Com\Implementation\Com.c	 11457        boolean filterState;
; ..\component\Com\Implementation\Com.c	 11458        boolean hasToutOccurred = FALSE;
; ..\component\Com\Implementation\Com.c	 11459  #  if (COM_RXTOUTINFOUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11460        if(Com_IsRxTOutInfoUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_FEATURE_RX_TOUT_INFO_USED_XX */
; ..\component\Com\Implementation\Com.c	 11461        {
; ..\component\Com\Implementation\Com.c	 11462          hasToutOccurred = Com_LMgt_HasTimeoutOccurred(Com_GetRxTOutInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 11463        }
; ..\component\Com\Implementation\Com.c	 11464  #  endif
; ..\component\Com\Implementation\Com.c	 11465        filterState =
; ..\component\Com\Implementation\Com.c	 11466          Com_Signal_UInt8_EvaluateFilter((Com_FilterInfo_UInt8IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo), tmpNewValue,
; ..\component\Com\Implementation\Com.c	 11467                                          Com_GetRxSigBufferUInt8(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11468        if(filterState == FALSE)
; ..\component\Com\Implementation\Com.c	 11469        {
; ..\component\Com\Implementation\Com.c	 11470          processState = FILTERED;
; ..\component\Com\Implementation\Com.c	 11471        }
; ..\component\Com\Implementation\Com.c	 11472      }
; ..\component\Com\Implementation\Com.c	 11473    }
; ..\component\Com\Implementation\Com.c	 11474    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 11475  # endif
; ..\component\Com\Implementation\Com.c	 11476    {
; ..\component\Com\Implementation\Com.c	 11477      Com_BufferIdxOfRxAccessInfoType idxBuffer = Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 11478      Com_SetRxSigBufferUInt8(idxBuffer, tmpNewValue);    /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11479    }
; ..\component\Com\Implementation\Com.c	 11480  
; ..\component\Com\Implementation\Com.c	 11481    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11482    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11483  
; ..\component\Com\Implementation\Com.c	 11484    return processState;
; ..\component\Com\Implementation\Com.c	 11485  }
; ..\component\Com\Implementation\Com.c	 11486  #endif
; ..\component\Com\Implementation\Com.c	 11487  /* jet: ComRxSignalProcessing */
; ..\component\Com\Implementation\Com.c	 11488  #if ((COM_EXISTS_SINT8_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11489  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11490    Com_RxSignalProcessing_SINT8
; ..\component\Com\Implementation\Com.c	 11491  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11492  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11493   *
; ..\component\Com\Implementation\Com.c	 11494   *
; ..\component\Com\Implementation\Com.c	 11495   *
; ..\component\Com\Implementation\Com.c	 11496   *
; ..\component\Com\Implementation\Com.c	 11497   *
; ..\component\Com\Implementation\Com.c	 11498  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11499  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_SINT8(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	 11500  {
; ..\component\Com\Implementation\Com.c	 11501    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11502    /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	 11503    sint8 tmpNewValue = Com_Signal_ReadSignal_SInt8(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));      /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 11504  
; ..\component\Com\Implementation\Com.c	 11505  # if (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11506    processState = Com_RxInv_Sig_SInt8_EvaluateInvalidValue(idxRxAccessInfo, tmpNewValue);
; ..\component\Com\Implementation\Com.c	 11507    if(processState == VALID)     /* COV_COM_INVALIDATION_TX */
; ..\component\Com\Implementation\Com.c	 11508  # endif
; ..\component\Com\Implementation\Com.c	 11509  # if ((COM_FILTERINFOUSEDOFRXACCESSINFO == STD_ON) && (COM_FILTERINFO_SINT8 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11510    {
; ..\component\Com\Implementation\Com.c	 11511      if(Com_IsFilterInfoUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 11512      {
; ..\component\Com\Implementation\Com.c	 11513        boolean filterState;
; ..\component\Com\Implementation\Com.c	 11514        boolean hasToutOccurred = FALSE;
; ..\component\Com\Implementation\Com.c	 11515  #  if (COM_RXTOUTINFOUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11516        if(Com_IsRxTOutInfoUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_FEATURE_RX_TOUT_INFO_USED_XX */
; ..\component\Com\Implementation\Com.c	 11517        {
; ..\component\Com\Implementation\Com.c	 11518          hasToutOccurred = Com_LMgt_HasTimeoutOccurred(Com_GetRxTOutInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 11519        }
; ..\component\Com\Implementation\Com.c	 11520  #  endif
; ..\component\Com\Implementation\Com.c	 11521        filterState =
; ..\component\Com\Implementation\Com.c	 11522          Com_Signal_SInt8_EvaluateFilter((Com_FilterInfo_SInt8IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo), tmpNewValue,
; ..\component\Com\Implementation\Com.c	 11523                                          Com_GetRxSigBufferSInt8(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11524        if(filterState == FALSE)
; ..\component\Com\Implementation\Com.c	 11525        {
; ..\component\Com\Implementation\Com.c	 11526          processState = FILTERED;
; ..\component\Com\Implementation\Com.c	 11527        }
; ..\component\Com\Implementation\Com.c	 11528      }
; ..\component\Com\Implementation\Com.c	 11529    }
; ..\component\Com\Implementation\Com.c	 11530    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 11531  # endif
; ..\component\Com\Implementation\Com.c	 11532    {
; ..\component\Com\Implementation\Com.c	 11533      Com_BufferIdxOfRxAccessInfoType idxBuffer = Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 11534      Com_SetRxSigBufferSInt8(idxBuffer, tmpNewValue);    /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11535    }
; ..\component\Com\Implementation\Com.c	 11536  
; ..\component\Com\Implementation\Com.c	 11537    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11538    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11539  
; ..\component\Com\Implementation\Com.c	 11540    return processState;
; ..\component\Com\Implementation\Com.c	 11541  }
; ..\component\Com\Implementation\Com.c	 11542  #endif
; ..\component\Com\Implementation\Com.c	 11543  /* jet: ComRxSignalProcessing */
; ..\component\Com\Implementation\Com.c	 11544  #if ((COM_EXISTS_UINT16_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11545  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11546    Com_RxSignalProcessing_UINT16
; ..\component\Com\Implementation\Com.c	 11547  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11548  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11549   *
; ..\component\Com\Implementation\Com.c	 11550   *
; ..\component\Com\Implementation\Com.c	 11551   *
; ..\component\Com\Implementation\Com.c	 11552   *
; ..\component\Com\Implementation\Com.c	 11553   *
; ..\component\Com\Implementation\Com.c	 11554  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11555  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_UINT16(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	 11556  {
; ..\component\Com\Implementation\Com.c	 11557    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11558    /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	 11559    uint16 tmpNewValue = Com_Signal_ReadSignal_UInt16(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));    /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 11560  
; ..\component\Com\Implementation\Com.c	 11561  # if (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11562    processState = Com_RxInv_Sig_UInt16_EvaluateInvalidValue(idxRxAccessInfo, tmpNewValue);
; ..\component\Com\Implementation\Com.c	 11563    if(processState == VALID)     /* COV_COM_INVALIDATION_TX */
; ..\component\Com\Implementation\Com.c	 11564  # endif
; ..\component\Com\Implementation\Com.c	 11565  # if ((COM_FILTERINFOUSEDOFRXACCESSINFO == STD_ON) && (COM_FILTERINFO_UINT16 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11566    {
; ..\component\Com\Implementation\Com.c	 11567      if(Com_IsFilterInfoUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 11568      {
; ..\component\Com\Implementation\Com.c	 11569        boolean filterState;
; ..\component\Com\Implementation\Com.c	 11570        boolean hasToutOccurred = FALSE;
; ..\component\Com\Implementation\Com.c	 11571  #  if (COM_RXTOUTINFOUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11572        if(Com_IsRxTOutInfoUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_FEATURE_RX_TOUT_INFO_USED_XX */
; ..\component\Com\Implementation\Com.c	 11573        {
; ..\component\Com\Implementation\Com.c	 11574          hasToutOccurred = Com_LMgt_HasTimeoutOccurred(Com_GetRxTOutInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 11575        }
; ..\component\Com\Implementation\Com.c	 11576  #  endif
; ..\component\Com\Implementation\Com.c	 11577        filterState =
; ..\component\Com\Implementation\Com.c	 11578          Com_Signal_UInt16_EvaluateFilter((Com_FilterInfo_UInt16IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo), tmpNewValue,
; ..\component\Com\Implementation\Com.c	 11579                                           Com_GetRxSigBufferUInt16(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11580        if(filterState == FALSE)
; ..\component\Com\Implementation\Com.c	 11581        {
; ..\component\Com\Implementation\Com.c	 11582          processState = FILTERED;
; ..\component\Com\Implementation\Com.c	 11583        }
; ..\component\Com\Implementation\Com.c	 11584      }
; ..\component\Com\Implementation\Com.c	 11585    }
; ..\component\Com\Implementation\Com.c	 11586    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 11587  # endif
; ..\component\Com\Implementation\Com.c	 11588    {
; ..\component\Com\Implementation\Com.c	 11589      Com_BufferIdxOfRxAccessInfoType idxBuffer = Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 11590      Com_SetRxSigBufferUInt16(idxBuffer, tmpNewValue);   /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11591    }
; ..\component\Com\Implementation\Com.c	 11592  
; ..\component\Com\Implementation\Com.c	 11593    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11594    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11595  
; ..\component\Com\Implementation\Com.c	 11596    return processState;
; ..\component\Com\Implementation\Com.c	 11597  }
; ..\component\Com\Implementation\Com.c	 11598  #endif
; ..\component\Com\Implementation\Com.c	 11599  /* jet: ComRxSignalProcessing */
; ..\component\Com\Implementation\Com.c	 11600  #if ((COM_EXISTS_SINT16_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11601  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11602    Com_RxSignalProcessing_SINT16
; ..\component\Com\Implementation\Com.c	 11603  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11604  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11605   *
; ..\component\Com\Implementation\Com.c	 11606   *
; ..\component\Com\Implementation\Com.c	 11607   *
; ..\component\Com\Implementation\Com.c	 11608   *
; ..\component\Com\Implementation\Com.c	 11609   *
; ..\component\Com\Implementation\Com.c	 11610  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11611  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_SINT16(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	 11612  {
; ..\component\Com\Implementation\Com.c	 11613    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11614    /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	 11615    sint16 tmpNewValue = Com_Signal_ReadSignal_SInt16(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));    /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 11616  
; ..\component\Com\Implementation\Com.c	 11617  # if (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11618    processState = Com_RxInv_Sig_SInt16_EvaluateInvalidValue(idxRxAccessInfo, tmpNewValue);
; ..\component\Com\Implementation\Com.c	 11619    if(processState == VALID)     /* COV_COM_INVALIDATION_TX */
; ..\component\Com\Implementation\Com.c	 11620  # endif
; ..\component\Com\Implementation\Com.c	 11621  # if ((COM_FILTERINFOUSEDOFRXACCESSINFO == STD_ON) && (COM_FILTERINFO_SINT16 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11622    {
; ..\component\Com\Implementation\Com.c	 11623      if(Com_IsFilterInfoUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 11624      {
; ..\component\Com\Implementation\Com.c	 11625        boolean filterState;
; ..\component\Com\Implementation\Com.c	 11626        boolean hasToutOccurred = FALSE;
; ..\component\Com\Implementation\Com.c	 11627  #  if (COM_RXTOUTINFOUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11628        if(Com_IsRxTOutInfoUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_FEATURE_RX_TOUT_INFO_USED_XX */
; ..\component\Com\Implementation\Com.c	 11629        {
; ..\component\Com\Implementation\Com.c	 11630          hasToutOccurred = Com_LMgt_HasTimeoutOccurred(Com_GetRxTOutInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 11631        }
; ..\component\Com\Implementation\Com.c	 11632  #  endif
; ..\component\Com\Implementation\Com.c	 11633        filterState =
; ..\component\Com\Implementation\Com.c	 11634          Com_Signal_SInt16_EvaluateFilter((Com_FilterInfo_SInt16IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo), tmpNewValue,
; ..\component\Com\Implementation\Com.c	 11635                                           Com_GetRxSigBufferSInt16(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11636        if(filterState == FALSE)
; ..\component\Com\Implementation\Com.c	 11637        {
; ..\component\Com\Implementation\Com.c	 11638          processState = FILTERED;
; ..\component\Com\Implementation\Com.c	 11639        }
; ..\component\Com\Implementation\Com.c	 11640      }
; ..\component\Com\Implementation\Com.c	 11641    }
; ..\component\Com\Implementation\Com.c	 11642    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 11643  # endif
; ..\component\Com\Implementation\Com.c	 11644    {
; ..\component\Com\Implementation\Com.c	 11645      Com_BufferIdxOfRxAccessInfoType idxBuffer = Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 11646      Com_SetRxSigBufferSInt16(idxBuffer, tmpNewValue);   /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11647    }
; ..\component\Com\Implementation\Com.c	 11648  
; ..\component\Com\Implementation\Com.c	 11649    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11650    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11651  
; ..\component\Com\Implementation\Com.c	 11652    return processState;
; ..\component\Com\Implementation\Com.c	 11653  }
; ..\component\Com\Implementation\Com.c	 11654  #endif
; ..\component\Com\Implementation\Com.c	 11655  /* jet: ComRxSignalProcessing */
; ..\component\Com\Implementation\Com.c	 11656  #if ((COM_EXISTS_UINT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11657  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11658    Com_RxSignalProcessing_UINT32
; ..\component\Com\Implementation\Com.c	 11659  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11660  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11661   *
; ..\component\Com\Implementation\Com.c	 11662   *
; ..\component\Com\Implementation\Com.c	 11663   *
; ..\component\Com\Implementation\Com.c	 11664   *
; ..\component\Com\Implementation\Com.c	 11665   *
; ..\component\Com\Implementation\Com.c	 11666  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11667  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_UINT32(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	 11668  {
; ..\component\Com\Implementation\Com.c	 11669    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11670    /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	 11671    uint32 tmpNewValue = Com_Signal_ReadSignal_UInt32(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));    /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 11672  
; ..\component\Com\Implementation\Com.c	 11673  # if (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11674    processState = Com_RxInv_Sig_UInt32_EvaluateInvalidValue(idxRxAccessInfo, tmpNewValue);
; ..\component\Com\Implementation\Com.c	 11675    if(processState == VALID)     /* COV_COM_INVALIDATION_TX */
; ..\component\Com\Implementation\Com.c	 11676  # endif
; ..\component\Com\Implementation\Com.c	 11677  # if ((COM_FILTERINFOUSEDOFRXACCESSINFO == STD_ON) && (COM_FILTERINFO_UINT32 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11678    {
; ..\component\Com\Implementation\Com.c	 11679      if(Com_IsFilterInfoUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 11680      {
; ..\component\Com\Implementation\Com.c	 11681        boolean filterState;
; ..\component\Com\Implementation\Com.c	 11682        boolean hasToutOccurred = FALSE;
; ..\component\Com\Implementation\Com.c	 11683  #  if (COM_RXTOUTINFOUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11684        if(Com_IsRxTOutInfoUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_FEATURE_RX_TOUT_INFO_USED_XX */
; ..\component\Com\Implementation\Com.c	 11685        {
; ..\component\Com\Implementation\Com.c	 11686          hasToutOccurred = Com_LMgt_HasTimeoutOccurred(Com_GetRxTOutInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 11687        }
; ..\component\Com\Implementation\Com.c	 11688  #  endif
; ..\component\Com\Implementation\Com.c	 11689        filterState =
; ..\component\Com\Implementation\Com.c	 11690          Com_Signal_UInt32_EvaluateFilter((Com_FilterInfo_UInt32IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo), tmpNewValue,
; ..\component\Com\Implementation\Com.c	 11691                                           Com_GetRxSigBufferUInt32(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11692        if(filterState == FALSE)
; ..\component\Com\Implementation\Com.c	 11693        {
; ..\component\Com\Implementation\Com.c	 11694          processState = FILTERED;
; ..\component\Com\Implementation\Com.c	 11695        }
; ..\component\Com\Implementation\Com.c	 11696      }
; ..\component\Com\Implementation\Com.c	 11697    }
; ..\component\Com\Implementation\Com.c	 11698    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 11699  # endif
; ..\component\Com\Implementation\Com.c	 11700    {
; ..\component\Com\Implementation\Com.c	 11701      Com_BufferIdxOfRxAccessInfoType idxBuffer = Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 11702      Com_SetRxSigBufferUInt32(idxBuffer, tmpNewValue);   /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11703    }
; ..\component\Com\Implementation\Com.c	 11704  
; ..\component\Com\Implementation\Com.c	 11705    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11706    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11707  
; ..\component\Com\Implementation\Com.c	 11708    return processState;
; ..\component\Com\Implementation\Com.c	 11709  }
; ..\component\Com\Implementation\Com.c	 11710  #endif
; ..\component\Com\Implementation\Com.c	 11711  /* jet: ComRxSignalProcessing */
; ..\component\Com\Implementation\Com.c	 11712  #if ((COM_EXISTS_SINT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11713  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11714    Com_RxSignalProcessing_SINT32
; ..\component\Com\Implementation\Com.c	 11715  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11716  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11717   *
; ..\component\Com\Implementation\Com.c	 11718   *
; ..\component\Com\Implementation\Com.c	 11719   *
; ..\component\Com\Implementation\Com.c	 11720   *
; ..\component\Com\Implementation\Com.c	 11721   *
; ..\component\Com\Implementation\Com.c	 11722  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11723  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_SINT32(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	 11724  {
; ..\component\Com\Implementation\Com.c	 11725    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11726    /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	 11727    sint32 tmpNewValue = Com_Signal_ReadSignal_SInt32(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));    /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 11728  
; ..\component\Com\Implementation\Com.c	 11729  # if (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11730    processState = Com_RxInv_Sig_SInt32_EvaluateInvalidValue(idxRxAccessInfo, tmpNewValue);
; ..\component\Com\Implementation\Com.c	 11731    if(processState == VALID)     /* COV_COM_INVALIDATION_TX */
; ..\component\Com\Implementation\Com.c	 11732  # endif
; ..\component\Com\Implementation\Com.c	 11733  # if ((COM_FILTERINFOUSEDOFRXACCESSINFO == STD_ON) && (COM_FILTERINFO_SINT32 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11734    {
; ..\component\Com\Implementation\Com.c	 11735      if(Com_IsFilterInfoUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 11736      {
; ..\component\Com\Implementation\Com.c	 11737        boolean filterState;
; ..\component\Com\Implementation\Com.c	 11738        boolean hasToutOccurred = FALSE;
; ..\component\Com\Implementation\Com.c	 11739  #  if (COM_RXTOUTINFOUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11740        if(Com_IsRxTOutInfoUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_FEATURE_RX_TOUT_INFO_USED_XX */
; ..\component\Com\Implementation\Com.c	 11741        {
; ..\component\Com\Implementation\Com.c	 11742          hasToutOccurred = Com_LMgt_HasTimeoutOccurred(Com_GetRxTOutInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 11743        }
; ..\component\Com\Implementation\Com.c	 11744  #  endif
; ..\component\Com\Implementation\Com.c	 11745        filterState =
; ..\component\Com\Implementation\Com.c	 11746          Com_Signal_SInt32_EvaluateFilter((Com_FilterInfo_SInt32IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo), tmpNewValue,
; ..\component\Com\Implementation\Com.c	 11747                                           Com_GetRxSigBufferSInt32(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11748        if(filterState == FALSE)
; ..\component\Com\Implementation\Com.c	 11749        {
; ..\component\Com\Implementation\Com.c	 11750          processState = FILTERED;
; ..\component\Com\Implementation\Com.c	 11751        }
; ..\component\Com\Implementation\Com.c	 11752      }
; ..\component\Com\Implementation\Com.c	 11753    }
; ..\component\Com\Implementation\Com.c	 11754    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 11755  # endif
; ..\component\Com\Implementation\Com.c	 11756    {
; ..\component\Com\Implementation\Com.c	 11757      Com_BufferIdxOfRxAccessInfoType idxBuffer = Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 11758      Com_SetRxSigBufferSInt32(idxBuffer, tmpNewValue);   /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11759    }
; ..\component\Com\Implementation\Com.c	 11760  
; ..\component\Com\Implementation\Com.c	 11761    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11762    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11763  
; ..\component\Com\Implementation\Com.c	 11764    return processState;
; ..\component\Com\Implementation\Com.c	 11765  }
; ..\component\Com\Implementation\Com.c	 11766  #endif
; ..\component\Com\Implementation\Com.c	 11767  /* jet: ComRxSignalProcessing */
; ..\component\Com\Implementation\Com.c	 11768  #if ((COM_EXISTS_UINT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11769  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11770    Com_RxSignalProcessing_UINT64
; ..\component\Com\Implementation\Com.c	 11771  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11772  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11773   *
; ..\component\Com\Implementation\Com.c	 11774   *
; ..\component\Com\Implementation\Com.c	 11775   *
; ..\component\Com\Implementation\Com.c	 11776   *
; ..\component\Com\Implementation\Com.c	 11777   *
; ..\component\Com\Implementation\Com.c	 11778  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11779  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_UINT64(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	 11780  {
; ..\component\Com\Implementation\Com.c	 11781    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11782    /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	 11783    uint64 tmpNewValue = Com_Signal_ReadSignal_UInt64(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));    /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 11784  
; ..\component\Com\Implementation\Com.c	 11785  # if (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11786    processState = Com_RxInv_Sig_UInt64_EvaluateInvalidValue(idxRxAccessInfo, tmpNewValue);
; ..\component\Com\Implementation\Com.c	 11787    if(processState == VALID)     /* COV_COM_INVALIDATION_TX */
; ..\component\Com\Implementation\Com.c	 11788  # endif
; ..\component\Com\Implementation\Com.c	 11789  # if ((COM_FILTERINFOUSEDOFRXACCESSINFO == STD_ON) && (COM_FILTERINFO_UINT64 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11790    {
; ..\component\Com\Implementation\Com.c	 11791      if(Com_IsFilterInfoUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 11792      {
; ..\component\Com\Implementation\Com.c	 11793        boolean filterState;
; ..\component\Com\Implementation\Com.c	 11794        boolean hasToutOccurred = FALSE;
; ..\component\Com\Implementation\Com.c	 11795  #  if (COM_RXTOUTINFOUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11796        if(Com_IsRxTOutInfoUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_FEATURE_RX_TOUT_INFO_USED_XX */
; ..\component\Com\Implementation\Com.c	 11797        {
; ..\component\Com\Implementation\Com.c	 11798          hasToutOccurred = Com_LMgt_HasTimeoutOccurred(Com_GetRxTOutInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 11799        }
; ..\component\Com\Implementation\Com.c	 11800  #  endif
; ..\component\Com\Implementation\Com.c	 11801        filterState =
; ..\component\Com\Implementation\Com.c	 11802          Com_Signal_UInt64_EvaluateFilter((Com_FilterInfo_UInt64IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo), tmpNewValue,
; ..\component\Com\Implementation\Com.c	 11803                                           Com_GetRxSigBufferUInt64(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11804        if(filterState == FALSE)
; ..\component\Com\Implementation\Com.c	 11805        {
; ..\component\Com\Implementation\Com.c	 11806          processState = FILTERED;
; ..\component\Com\Implementation\Com.c	 11807        }
; ..\component\Com\Implementation\Com.c	 11808      }
; ..\component\Com\Implementation\Com.c	 11809    }
; ..\component\Com\Implementation\Com.c	 11810    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 11811  # endif
; ..\component\Com\Implementation\Com.c	 11812    {
; ..\component\Com\Implementation\Com.c	 11813      Com_BufferIdxOfRxAccessInfoType idxBuffer = Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 11814      Com_SetRxSigBufferUInt64(idxBuffer, tmpNewValue);   /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11815    }
; ..\component\Com\Implementation\Com.c	 11816  
; ..\component\Com\Implementation\Com.c	 11817    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11818    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11819  
; ..\component\Com\Implementation\Com.c	 11820    return processState;
; ..\component\Com\Implementation\Com.c	 11821  }
; ..\component\Com\Implementation\Com.c	 11822  #endif
; ..\component\Com\Implementation\Com.c	 11823  /* jet: ComRxSignalProcessing */
; ..\component\Com\Implementation\Com.c	 11824  #if ((COM_EXISTS_SINT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11825  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11826    Com_RxSignalProcessing_SINT64
; ..\component\Com\Implementation\Com.c	 11827  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11828  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11829   *
; ..\component\Com\Implementation\Com.c	 11830   *
; ..\component\Com\Implementation\Com.c	 11831   *
; ..\component\Com\Implementation\Com.c	 11832   *
; ..\component\Com\Implementation\Com.c	 11833   *
; ..\component\Com\Implementation\Com.c	 11834  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11835  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_SINT64(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	 11836  {
; ..\component\Com\Implementation\Com.c	 11837    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11838    /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	 11839    sint64 tmpNewValue = Com_Signal_ReadSignal_SInt64(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));    /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 11840  
; ..\component\Com\Implementation\Com.c	 11841  # if (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11842    processState = Com_RxInv_Sig_SInt64_EvaluateInvalidValue(idxRxAccessInfo, tmpNewValue);
; ..\component\Com\Implementation\Com.c	 11843    if(processState == VALID)     /* COV_COM_INVALIDATION_TX */
; ..\component\Com\Implementation\Com.c	 11844  # endif
; ..\component\Com\Implementation\Com.c	 11845  # if ((COM_FILTERINFOUSEDOFRXACCESSINFO == STD_ON) && (COM_FILTERINFO_SINT64 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11846    {
; ..\component\Com\Implementation\Com.c	 11847      if(Com_IsFilterInfoUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 11848      {
; ..\component\Com\Implementation\Com.c	 11849        boolean filterState;
; ..\component\Com\Implementation\Com.c	 11850        boolean hasToutOccurred = FALSE;
; ..\component\Com\Implementation\Com.c	 11851  #  if (COM_RXTOUTINFOUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11852        if(Com_IsRxTOutInfoUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_FEATURE_RX_TOUT_INFO_USED_XX */
; ..\component\Com\Implementation\Com.c	 11853        {
; ..\component\Com\Implementation\Com.c	 11854          hasToutOccurred = Com_LMgt_HasTimeoutOccurred(Com_GetRxTOutInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 11855        }
; ..\component\Com\Implementation\Com.c	 11856  #  endif
; ..\component\Com\Implementation\Com.c	 11857        filterState =
; ..\component\Com\Implementation\Com.c	 11858          Com_Signal_SInt64_EvaluateFilter((Com_FilterInfo_SInt64IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo), tmpNewValue,
; ..\component\Com\Implementation\Com.c	 11859                                           Com_GetRxSigBufferSInt64(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11860        if(filterState == FALSE)
; ..\component\Com\Implementation\Com.c	 11861        {
; ..\component\Com\Implementation\Com.c	 11862          processState = FILTERED;
; ..\component\Com\Implementation\Com.c	 11863        }
; ..\component\Com\Implementation\Com.c	 11864      }
; ..\component\Com\Implementation\Com.c	 11865    }
; ..\component\Com\Implementation\Com.c	 11866    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 11867  # endif
; ..\component\Com\Implementation\Com.c	 11868    {
; ..\component\Com\Implementation\Com.c	 11869      Com_BufferIdxOfRxAccessInfoType idxBuffer = Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 11870      Com_SetRxSigBufferSInt64(idxBuffer, tmpNewValue);   /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11871    }
; ..\component\Com\Implementation\Com.c	 11872  
; ..\component\Com\Implementation\Com.c	 11873    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11874    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11875  
; ..\component\Com\Implementation\Com.c	 11876    return processState;
; ..\component\Com\Implementation\Com.c	 11877  }
; ..\component\Com\Implementation\Com.c	 11878  #endif
; ..\component\Com\Implementation\Com.c	 11879  /* jet: ComRxSignalProcessing */
; ..\component\Com\Implementation\Com.c	 11880  #if ((COM_EXISTS_FLOAT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11881  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11882    Com_RxSignalProcessing_FLOAT32
; ..\component\Com\Implementation\Com.c	 11883  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11884  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11885   *
; ..\component\Com\Implementation\Com.c	 11886   *
; ..\component\Com\Implementation\Com.c	 11887   *
; ..\component\Com\Implementation\Com.c	 11888   *
; ..\component\Com\Implementation\Com.c	 11889   *
; ..\component\Com\Implementation\Com.c	 11890  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11891  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_FLOAT32(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	 11892  {
; ..\component\Com\Implementation\Com.c	 11893    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11894    /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	 11895    float32 tmpNewValue = Com_Signal_ReadSignal_Float32(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));  /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 11896  
; ..\component\Com\Implementation\Com.c	 11897  # if (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11898    processState = Com_RxInv_Sig_Float32_EvaluateInvalidValue(idxRxAccessInfo, tmpNewValue);
; ..\component\Com\Implementation\Com.c	 11899    if(processState == VALID)     /* COV_COM_INVALIDATION_TX */
; ..\component\Com\Implementation\Com.c	 11900  # endif
; ..\component\Com\Implementation\Com.c	 11901  # if ((COM_FILTERINFOUSEDOFRXACCESSINFO == STD_ON) && (COM_FILTERINFO_FLOAT32 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11902    {
; ..\component\Com\Implementation\Com.c	 11903      if(Com_IsFilterInfoUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 11904      {
; ..\component\Com\Implementation\Com.c	 11905        boolean filterState;
; ..\component\Com\Implementation\Com.c	 11906        boolean hasToutOccurred = FALSE;
; ..\component\Com\Implementation\Com.c	 11907  #  if (COM_RXTOUTINFOUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11908        if(Com_IsRxTOutInfoUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_FEATURE_RX_TOUT_INFO_USED_XX */
; ..\component\Com\Implementation\Com.c	 11909        {
; ..\component\Com\Implementation\Com.c	 11910          hasToutOccurred = Com_LMgt_HasTimeoutOccurred(Com_GetRxTOutInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 11911        }
; ..\component\Com\Implementation\Com.c	 11912  #  endif
; ..\component\Com\Implementation\Com.c	 11913        filterState =
; ..\component\Com\Implementation\Com.c	 11914          Com_Signal_Float32_EvaluateFilter((Com_FilterInfo_Float32IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo), tmpNewValue,
; ..\component\Com\Implementation\Com.c	 11915                                            Com_GetRxSigBufferFloat32(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11916        if(filterState == FALSE)  /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_FLOAT_TYPE_FILTER */
; ..\component\Com\Implementation\Com.c	 11917        {
; ..\component\Com\Implementation\Com.c	 11918          processState = FILTERED;
; ..\component\Com\Implementation\Com.c	 11919        }
; ..\component\Com\Implementation\Com.c	 11920      }
; ..\component\Com\Implementation\Com.c	 11921    }
; ..\component\Com\Implementation\Com.c	 11922    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 11923  # endif
; ..\component\Com\Implementation\Com.c	 11924    {
; ..\component\Com\Implementation\Com.c	 11925      Com_BufferIdxOfRxAccessInfoType idxBuffer = Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 11926      Com_SetRxSigBufferFloat32(idxBuffer, tmpNewValue);  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11927    }
; ..\component\Com\Implementation\Com.c	 11928  
; ..\component\Com\Implementation\Com.c	 11929    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11930    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11931  
; ..\component\Com\Implementation\Com.c	 11932    return processState;
; ..\component\Com\Implementation\Com.c	 11933  }
; ..\component\Com\Implementation\Com.c	 11934  #endif
; ..\component\Com\Implementation\Com.c	 11935  /* jet: ComRxSignalProcessing */
; ..\component\Com\Implementation\Com.c	 11936  #if ((COM_EXISTS_FLOAT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11937  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11938    Com_RxSignalProcessing_FLOAT64
; ..\component\Com\Implementation\Com.c	 11939  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11940  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11941   *
; ..\component\Com\Implementation\Com.c	 11942   *
; ..\component\Com\Implementation\Com.c	 11943   *
; ..\component\Com\Implementation\Com.c	 11944   *
; ..\component\Com\Implementation\Com.c	 11945   *
; ..\component\Com\Implementation\Com.c	 11946  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11947  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_FLOAT64(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	 11948  {
; ..\component\Com\Implementation\Com.c	 11949    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 11950    /* Check for buffer is not required as there is always a buffer configured. Removed check Com_IsBufferUsedOfRxAccessInfo */
; ..\component\Com\Implementation\Com.c	 11951    float64 tmpNewValue = Com_Signal_ReadSignal_Float64(idxRxAccessInfo, &(PduInfoPtr->SduDataPtr[Com_GetBytePositionOfRxAccessInfo(idxRxAccessInfo)]));  /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 11952  
; ..\component\Com\Implementation\Com.c	 11953  # if (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11954    processState = Com_RxInv_Sig_Float64_EvaluateInvalidValue(idxRxAccessInfo, tmpNewValue);
; ..\component\Com\Implementation\Com.c	 11955    if(processState == VALID)     /* COV_COM_INVALIDATION_TX */
; ..\component\Com\Implementation\Com.c	 11956  # endif
; ..\component\Com\Implementation\Com.c	 11957  # if ((COM_FILTERINFOUSEDOFRXACCESSINFO == STD_ON) && (COM_FILTERINFO_FLOAT64 == STD_ON))
; ..\component\Com\Implementation\Com.c	 11958    {
; ..\component\Com\Implementation\Com.c	 11959      if(Com_IsFilterInfoUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 11960      {
; ..\component\Com\Implementation\Com.c	 11961        boolean filterState;
; ..\component\Com\Implementation\Com.c	 11962        boolean hasToutOccurred = FALSE;
; ..\component\Com\Implementation\Com.c	 11963  #  if (COM_RXTOUTINFOUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 11964        if(Com_IsRxTOutInfoUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_FEATURE_RX_TOUT_INFO_USED_XX */
; ..\component\Com\Implementation\Com.c	 11965        {
; ..\component\Com\Implementation\Com.c	 11966          hasToutOccurred = Com_LMgt_HasTimeoutOccurred(Com_GetRxTOutInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 11967        }
; ..\component\Com\Implementation\Com.c	 11968  #  endif
; ..\component\Com\Implementation\Com.c	 11969        filterState =
; ..\component\Com\Implementation\Com.c	 11970          Com_Signal_Float64_EvaluateFilter((Com_FilterInfo_Float64IterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo), tmpNewValue,
; ..\component\Com\Implementation\Com.c	 11971                                            Com_GetRxSigBufferFloat64(Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo)), hasToutOccurred);
; ..\component\Com\Implementation\Com.c	 11972        if(filterState == FALSE)  /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_FLOAT_TYPE_FILTER */
; ..\component\Com\Implementation\Com.c	 11973        {
; ..\component\Com\Implementation\Com.c	 11974          processState = FILTERED;
; ..\component\Com\Implementation\Com.c	 11975        }
; ..\component\Com\Implementation\Com.c	 11976      }
; ..\component\Com\Implementation\Com.c	 11977    }
; ..\component\Com\Implementation\Com.c	 11978    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 11979  # endif
; ..\component\Com\Implementation\Com.c	 11980    {
; ..\component\Com\Implementation\Com.c	 11981      Com_BufferIdxOfRxAccessInfoType idxBuffer = Com_GetBufferIdxOfRxAccessInfo(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 11982      Com_SetRxSigBufferFloat64(idxBuffer, tmpNewValue);  /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 11983    }
; ..\component\Com\Implementation\Com.c	 11984  
; ..\component\Com\Implementation\Com.c	 11985    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11986    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 11987  
; ..\component\Com\Implementation\Com.c	 11988    return processState;
; ..\component\Com\Implementation\Com.c	 11989  }
; ..\component\Com\Implementation\Com.c	 11990  #endif
; ..\component\Com\Implementation\Com.c	 11991  #if((COM_EXISTS_UINT8_N_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 11992  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 11993    Com_RxSignalProcessing_UINT8_N
; ..\component\Com\Implementation\Com.c	 11994  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 11995  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 11996   *
; ..\component\Com\Implementation\Com.c	 11997   *
; ..\component\Com\Implementation\Com.c	 11998   *
; ..\component\Com\Implementation\Com.c	 11999   *
; ..\component\Com\Implementation\Com.c	 12000   *
; ..\component\Com\Implementation\Com.c	 12001  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12002  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_UINT8_N(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)  /* COV_COM_APPLTYPEOFRXACCESSINFO */
; ..\component\Com\Implementation\Com.c	 12003  {
; ..\component\Com\Implementation\Com.c	 12004    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 12005  
; ..\component\Com\Implementation\Com.c	 12006    P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) newValuePtr = &(PduInfoPtr->SduDataPtr[Com_GetStartByteInPduPositionOfRxAccessInfo(idxRxAccessInfo)]);
; ..\component\Com\Implementation\Com.c	 12007  # if (COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12008    processState = Com_RxInv_Sig_UInt8_N_EvaluateInvalidValue(idxRxAccessInfo, newValuePtr);      /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12009    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 12010  # endif
; ..\component\Com\Implementation\Com.c	 12011  # if ((COM_FILTERINFOUSEDOFRXACCESSINFO == STD_ON) && (COM_FILTERINFO_UINT8_N == STD_ON))
; ..\component\Com\Implementation\Com.c	 12012    {
; ..\component\Com\Implementation\Com.c	 12013      if(Com_IsFilterInfoUsedOfRxAccessInfo(idxRxAccessInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12014      {
; ..\component\Com\Implementation\Com.c	 12015        boolean filterState;
; ..\component\Com\Implementation\Com.c	 12016        boolean hasToutOccurred = FALSE;
; ..\component\Com\Implementation\Com.c	 12017  #  if (COM_RXTOUTINFOUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12018        if(Com_IsRxTOutInfoUsedOfRxAccessInfo(idxRxAccessInfo))   /* COV_COM_FEATURE_RX_TOUT_INFO_USED_XX */
; ..\component\Com\Implementation\Com.c	 12019        {
; ..\component\Com\Implementation\Com.c	 12020          hasToutOccurred = Com_LMgt_HasTimeoutOccurred(Com_GetRxTOutInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 12021        }
; ..\component\Com\Implementation\Com.c	 12022  #  endif
; ..\component\Com\Implementation\Com.c	 12023        filterState = Com_Signal_UInt8_N_EvaluateFilter((Com_FilterInfo_UInt8_NIterType) Com_GetFilterInfoIdxOfRxAccessInfo(idxRxAccessInfo), newValuePtr, Com_GetAddrRxSigBufferArrayBased(Com_GetRxSigBufferArrayBasedBufferStartIdxOfRxAccessInfo(idxRxAccessInfo)), (PduLengthType) Com_GetRxSigBufferArrayBasedBufferLengthOfRxAccessInfo(idxRxAccessInfo), hasToutOccurred);        /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12024        if(filterState == FALSE)
; ..\component\Com\Implementation\Com.c	 12025        {
; ..\component\Com\Implementation\Com.c	 12026          processState = FILTERED;
; ..\component\Com\Implementation\Com.c	 12027        }
; ..\component\Com\Implementation\Com.c	 12028      }
; ..\component\Com\Implementation\Com.c	 12029    }
; ..\component\Com\Implementation\Com.c	 12030    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 12031  # endif
; ..\component\Com\Implementation\Com.c	 12032    {
; ..\component\Com\Implementation\Com.c	 12033      Com_RxSigBufferArrayBasedIterType idxBuffer = Com_GetRxSigBufferArrayBasedBufferStartIdxOfRxAccessInfo(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 12034      VStdMemCpyRamToRam(Com_GetAddrRxSigBufferArrayBased(idxBuffer), newValuePtr, Com_GetRxSigBufferArrayBasedBufferLengthOfRxAccessInfo(idxRxAccessInfo));      /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_MEM_CPY_2RAM */
; ..\component\Com\Implementation\Com.c	 12035    }
; ..\component\Com\Implementation\Com.c	 12036  
; ..\component\Com\Implementation\Com.c	 12037    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 12038    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 12039  
; ..\component\Com\Implementation\Com.c	 12040    return processState;
; ..\component\Com\Implementation\Com.c	 12041  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	 12042  #endif
; ..\component\Com\Implementation\Com.c	 12043  
; ..\component\Com\Implementation\Com.c	 12044  #if ((COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_RXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12045  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12046    Com_RxSignalProcessing_UINT8_DYN
; ..\component\Com\Implementation\Com.c	 12047  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12048  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12049   *
; ..\component\Com\Implementation\Com.c	 12050   *
; ..\component\Com\Implementation\Com.c	 12051   *
; ..\component\Com\Implementation\Com.c	 12052   *
; ..\component\Com\Implementation\Com.c	 12053  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12054  LOCAL_INLINE FUNC(Com_RxSigProcessState, COM_CODE) Com_RxSignalProcessing_UINT8_DYN(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxAccessInfoIterType idxRxAccessInfo)
; ..\component\Com\Implementation\Com.c	 12055  {
; ..\component\Com\Implementation\Com.c	 12056    Com_RxSigProcessState processState = VALID;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 12057  
; ..\component\Com\Implementation\Com.c	 12058    P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) newValuePtr;
; ..\component\Com\Implementation\Com.c	 12059    newValuePtr = &(PduInfoPtr->SduDataPtr[Com_GetStartByteInPduPositionOfRxAccessInfo(idxRxAccessInfo)]);
; ..\component\Com\Implementation\Com.c	 12060  
; ..\component\Com\Implementation\Com.c	 12061  # if (COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12062    processState = Com_RxInv_Sig_UInt8_Dyn_EvaluateInvalidValue(idxRxAccessInfo, newValuePtr, PduInfoPtr->SduLength);     /* SBSW_COM_FCTCALL_STACKPTR */
; ..\component\Com\Implementation\Com.c	 12063    if(processState == VALID)
; ..\component\Com\Implementation\Com.c	 12064  # endif
; ..\component\Com\Implementation\Com.c	 12065    {
; ..\component\Com\Implementation\Com.c	 12066      Com_RxSigBufferArrayBasedIterType idxBuffer = Com_GetRxSigBufferArrayBasedBufferStartIdxOfRxAccessInfo(idxRxAccessInfo);
; ..\component\Com\Implementation\Com.c	 12067      Com_RxTpInfoIdxOfRxPduInfoType rxTpPduInfoIdx = Com_GetRxTpInfoIdxOfRxPduInfo(Com_GetRxPduInfoIdxOfRxAccessInfo(idxRxAccessInfo));
; ..\component\Com\Implementation\Com.c	 12068      Com_SetRxDynSignalLength(rxTpPduInfoIdx, Com_GetRxDynamicLength(PduInfoPtr->SduLength, idxRxAccessInfo));   /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12069  
; ..\component\Com\Implementation\Com.c	 12070      VStdMemCpyRamToRam(Com_GetAddrRxSigBufferArrayBased(idxBuffer), newValuePtr, Com_GetRxDynSignalLength(rxTpPduInfoIdx));     /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_CSL01_STACKPTR */
; ..\component\Com\Implementation\Com.c	 12071    }
; ..\component\Com\Implementation\Com.c	 12072  
; ..\component\Com\Implementation\Com.c	 12073    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 12074    COM_DUMMY_STATEMENT(idxRxAccessInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 12075  
; ..\component\Com\Implementation\Com.c	 12076    return processState;
; ..\component\Com\Implementation\Com.c	 12077  }
; ..\component\Com\Implementation\Com.c	 12078  #endif
; ..\component\Com\Implementation\Com.c	 12079  
; ..\component\Com\Implementation\Com.c	 12080  #if (COM_RXSIGGRPINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12081  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12082    Com_RxProcessing_ProcessSigGrpEvent
; ..\component\Com\Implementation\Com.c	 12083  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12084  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12085   *
; ..\component\Com\Implementation\Com.c	 12086   *
; ..\component\Com\Implementation\Com.c	 12087   *
; ..\component\Com\Implementation\Com.c	 12088   *
; ..\component\Com\Implementation\Com.c	 12089   *
; ..\component\Com\Implementation\Com.c	 12090   *
; ..\component\Com\Implementation\Com.c	 12091   *
; ..\component\Com\Implementation\Com.c	 12092   *
; ..\component\Com\Implementation\Com.c	 12093   *
; ..\component\Com\Implementation\Com.c	 12094  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12095  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_ProcessSigGrpEvent(PduIdType comRxPduInfoIdx, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxSigGrpInfoIterType idxRxSigGrpInfo, P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr)    /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	 12096  {
; ..\component\Com\Implementation\Com.c	 12097  # if ((COM_INVEVENTOFRXSIGGRPINFO == STD_ON) || (COM_FILTEREVENTOFRXSIGGRPINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12098    Com_RxSigProcessState process = VALID;        /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 12099  # endif
; ..\component\Com\Implementation\Com.c	 12100  # if ((COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON) || (COM_ARRAYACCESSUSEDOFRXSIGGRPINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12101    /* #10 Read the passed ComSignalGroup values form the passed ComIPdu */
; ..\component\Com\Implementation\Com.c	 12102    Com_RxProcessing_ReadSignalGroup(PduInfoPtr, idxRxSigGrpInfo);        /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12103  # endif
; ..\component\Com\Implementation\Com.c	 12104  # if (COM_INVEVENTOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12105    /* \trace SPEC-2736832 */
; ..\component\Com\Implementation\Com.c	 12106    /* #20 Evaluate whether any new value of the related ComGroupSignals is an invalid value */
; ..\component\Com\Implementation\Com.c	 12107    process = Com_RxInv_SigGrp(idxRxSigGrpInfo, fctPtrCacheStrctPtr, PduInfoPtr->SduLength);      /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	 12108    /* #30 If the new value of all related ComGroupSignal is valid */
; ..\component\Com\Implementation\Com.c	 12109    if(process == VALID)
; ..\component\Com\Implementation\Com.c	 12110  # endif
; ..\component\Com\Implementation\Com.c	 12111    {
; ..\component\Com\Implementation\Com.c	 12112  # if (COM_FILTEREVENTOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12113      /* #40 Evaluate the current filter state */
; ..\component\Com\Implementation\Com.c	 12114      if(Com_IsFilterEventOfRxSigGrpInfo(idxRxSigGrpInfo))        /* COV_COM_FILTER_ALWAYS_PRESENT */
; ..\component\Com\Implementation\Com.c	 12115      {
; ..\component\Com\Implementation\Com.c	 12116        process = Com_RxProcessing_RxSignalGroupFilterCheck(idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	 12117      }
; ..\component\Com\Implementation\Com.c	 12118      if(process == VALID)        /* \trace SPEC-2736777 */ /* \trace SPEC-2736778 */
; ..\component\Com\Implementation\Com.c	 12119  # endif
; ..\component\Com\Implementation\Com.c	 12120      {
; ..\component\Com\Implementation\Com.c	 12121  # if (COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12122        /* #60 If no ComSignalGroup Array Access is used or array based gateway routing is configured, extract group signal data to the shadow buffer */
; ..\component\Com\Implementation\Com.c	 12123        if(Com_IsShdBufferRequiredOfRxSigGrpInfo(idxRxSigGrpInfo))        /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12124        {
; ..\component\Com\Implementation\Com.c	 12125          Com_RxProcessing_ExtractToShdwBffr(idxRxSigGrpInfo, PduInfoPtr);        /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12126        }
; ..\component\Com\Implementation\Com.c	 12127  # endif
; ..\component\Com\Implementation\Com.c	 12128  # if ((COM_RXTOUTINFOUSEDOFRXSIGGRPINFO == STD_ON) && (COM_UBMASKIDXOFRXSIGGRPINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12129        /* #70 If the ComSiganlGroup has a timeout and an UpdateBit, remove the timeout occurred flag */
; ..\component\Com\Implementation\Com.c	 12130        if(Com_IsRxTOutInfoUsedOfRxSigGrpInfo(idxRxSigGrpInfo) && Com_IsUbMaskUsedOfRxSigGrpInfo(idxRxSigGrpInfo))        /* COV_COM_FEATURE_RX_TOUT_WITH_UB */
; ..\component\Com\Implementation\Com.c	 12131        {
; ..\component\Com\Implementation\Com.c	 12132          Com_LMgt_RemoveOccurredFlag(Com_GetRxTOutInfoIdxOfRxSigGrpInfo(idxRxSigGrpInfo));       /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	 12133        }
; ..\component\Com\Implementation\Com.c	 12134  # endif
; ..\component\Com\Implementation\Com.c	 12135  # if (COM_RXCBKFUNCPTRACKIDXOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12136        /* #80 Cache or Call the related Rx notification functions */
; ..\component\Com\Implementation\Com.c	 12137        if(Com_IsRxCbkFuncPtrAckUsedOfRxSigGrpInfo(idxRxSigGrpInfo))      /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12138        {
; ..\component\Com\Implementation\Com.c	 12139          Com_CacheOrCallRxCbkFctPtr((Com_RxCbkFuncPtrIterType) Com_GetRxCbkFuncPtrAckIdxOfRxSigGrpInfo(idxRxSigGrpInfo), comRxPduInfoIdx, fctPtrCacheStrctPtr);  /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	 12140        }
; ..\component\Com\Implementation\Com.c	 12141  # endif
; ..\component\Com\Implementation\Com.c	 12142      }
; ..\component\Com\Implementation\Com.c	 12143    }
; ..\component\Com\Implementation\Com.c	 12144  
; ..\component\Com\Implementation\Com.c	 12145    COM_DUMMY_STATEMENT(comRxPduInfoIdx); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 12146    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 12147    COM_DUMMY_STATEMENT(idxRxSigGrpInfo); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 12148    COM_DUMMY_STATEMENT(fctPtrCacheStrctPtr);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 12149  }
; ..\component\Com\Implementation\Com.c	 12150  #endif
; ..\component\Com\Implementation\Com.c	 12151  
; ..\component\Com\Implementation\Com.c	 12152  
; ..\component\Com\Implementation\Com.c	 12153  
; ..\component\Com\Implementation\Com.c	 12154  #if ((COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON) || (COM_ARRAYACCESSUSEDOFRXSIGGRPINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12155  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12156    Com_RxProcessing_ReadSignalGroup
; ..\component\Com\Implementation\Com.c	 12157  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12158  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12159   *
; ..\component\Com\Implementation\Com.c	 12160   *
; ..\component\Com\Implementation\Com.c	 12161   *
; ..\component\Com\Implementation\Com.c	 12162  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12163  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_ReadSignalGroup(P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr, Com_RxSigGrpInfoIterType idxRxSigGrpInfo)
; ..\component\Com\Implementation\Com.c	 12164  {
; ..\component\Com\Implementation\Com.c	 12165  # if (COM_ARRAYACCESSUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12166    /* #10 If ComSignalGroup Array Access is used, copy the passed ComSignalGroup data to the shadow buffer */
; ..\component\Com\Implementation\Com.c	 12167    if(Com_IsArrayAccessUsedOfRxSigGrpInfo(idxRxSigGrpInfo))      /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12168    {
; ..\component\Com\Implementation\Com.c	 12169      Com_RxSigArrayAccessSigGrpBufferIterType ShdBufferStartIndex = Com_GetRxSigArrayAccessSigGrpBufferStartIdxOfRxSigGrpInfo(idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	 12170      P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) SignalSourcePtr = &(PduInfoPtr->SduDataPtr[Com_GetStartBytePositionOfRxSigGrpInfo(idxRxSigGrpInfo)]);     /* PRQA S 2822, 2962 */ /* MD_Com_2822_2962 */
; ..\component\Com\Implementation\Com.c	 12171      VStdMemCpyRamToRam(Com_GetAddrRxSigArrayAccessSigGrpBuffer(ShdBufferStartIndex), SignalSourcePtr, Com_GetRxSigArrayAccessSigGrpBufferLengthOfRxSigGrpInfo(idxRxSigGrpInfo));        /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12172    }
; ..\component\Com\Implementation\Com.c	 12173  
; ..\component\Com\Implementation\Com.c	 12174  # endif
; ..\component\Com\Implementation\Com.c	 12175  
; ..\component\Com\Implementation\Com.c	 12176  # if (COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12177    /* #20 If shadow buffers are required (normal signal group or gateway array access routing), extract all group signals to their shadow buffers */
; ..\component\Com\Implementation\Com.c	 12178    if(Com_IsShdBufferRequiredOfRxSigGrpInfo(idxRxSigGrpInfo))    /* COV_COM_SHDBUFFER_REQUIRED */
; ..\component\Com\Implementation\Com.c	 12179    {
; ..\component\Com\Implementation\Com.c	 12180      Com_RxAccessInfoIndIterType RxAccessInfoIndidx = Com_GetRxAccessInfoGrpSigIndStartIdxOfRxSigGrpInfo(idxRxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	 12181      for(; RxAccessInfoIndidx < Com_GetRxAccessInfoGrpSigIndEndIdxOfRxSigGrpInfo(idxRxSigGrpInfo); RxAccessInfoIndidx++)
; ..\component\Com\Implementation\Com.c	 12182      {
; ..\component\Com\Implementation\Com.c	 12183        Com_RxProcessing_ReadGrpSignal(PduInfoPtr, Com_GetRxAccessInfoGrpSigInd(RxAccessInfoIndidx));     /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12184      }
; ..\component\Com\Implementation\Com.c	 12185    }
; ..\component\Com\Implementation\Com.c	 12186  # endif
; ..\component\Com\Implementation\Com.c	 12187  
; ..\component\Com\Implementation\Com.c	 12188  }
; ..\component\Com\Implementation\Com.c	 12189  #endif
; ..\component\Com\Implementation\Com.c	 12190  
; ..\component\Com\Implementation\Com.c	 12191  #if(COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12192  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12193    Com_RxProcessing_EnterExclusiveArea_Deferred
; ..\component\Com\Implementation\Com.c	 12194  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12195  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12196   *
; ..\component\Com\Implementation\Com.c	 12197   *
; ..\component\Com\Implementation\Com.c	 12198  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12199  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_EnterExclusiveArea_Deferred(void)
; ..\component\Com\Implementation\Com.c	 12200  {
; ..\component\Com\Implementation\Com.c	 12201    /* #10 Enter the rx deferred exclusive area */
; ..\component\Com\Implementation\Com.c	 12202    SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	 12203  }
; ..\component\Com\Implementation\Com.c	 12204  
; ..\component\Com\Implementation\Com.c	 12205  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12206    Com_RxProcessing_ExitExclusiveArea_Deferred
; ..\component\Com\Implementation\Com.c	 12207  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12208  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12209   *
; ..\component\Com\Implementation\Com.c	 12210   *
; ..\component\Com\Implementation\Com.c	 12211   *
; ..\component\Com\Implementation\Com.c	 12212  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12213  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_ExitExclusiveArea_Deferred(void)
; ..\component\Com\Implementation\Com.c	 12214  {
; ..\component\Com\Implementation\Com.c	 12215    /* #05 Reload the counter with the threshold value */
; ..\component\Com\Implementation\Com.c	 12216    Com_SetRxDeferredProcessingISRLockCounter(Com_GetRxDeferredProcessingISRLockThreshold());     /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 12217    /* #10 Exit the rx deferred exclusive area */
; ..\component\Com\Implementation\Com.c	 12218    SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	 12219  }
; ..\component\Com\Implementation\Com.c	 12220  
; ..\component\Com\Implementation\Com.c	 12221  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12222    Com_RxProcessing_ThresholdCheck_Deferred
; ..\component\Com\Implementation\Com.c	 12223  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12224  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12225   *
; ..\component\Com\Implementation\Com.c	 12226   *
; ..\component\Com\Implementation\Com.c	 12227   *
; ..\component\Com\Implementation\Com.c	 12228   *
; ..\component\Com\Implementation\Com.c	 12229   *
; ..\component\Com\Implementation\Com.c	 12230  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12231  LOCAL_INLINE FUNC(void, COM_CODE) Com_RxProcessing_ThresholdCheck_Deferred(P2VAR(FctPtrCacheStrct, AUTOMATIC, COM_APPL_DATA) fctPtrCacheStrctPtr)       /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	 12232  {
; ..\component\Com\Implementation\Com.c	 12233    if(Com_GetRxDeferredProcessingISRLockCounter() > 0u)
; ..\component\Com\Implementation\Com.c	 12234    {
; ..\component\Com\Implementation\Com.c	 12235      Com_DecRxDeferredProcessingISRLockCounter();        /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 12236    }
; ..\component\Com\Implementation\Com.c	 12237    else
; ..\component\Com\Implementation\Com.c	 12238    {
; ..\component\Com\Implementation\Com.c	 12239      Com_RxProcessing_ExitExclusiveArea_Deferred();
; ..\component\Com\Implementation\Com.c	 12240  # if (COM_RXDEFERREDFCTPTRCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	 12241      Com_ProcessRxFctPtrCache(fctPtrCacheStrctPtr);      /* SBSW_COM_FCTPTR_CACHE_PTR */
; ..\component\Com\Implementation\Com.c	 12242  # endif
; ..\component\Com\Implementation\Com.c	 12243      Com_RxProcessing_EnterExclusiveArea_Deferred();
; ..\component\Com\Implementation\Com.c	 12244    }
; ..\component\Com\Implementation\Com.c	 12245  
; ..\component\Com\Implementation\Com.c	 12246    COM_DUMMY_STATEMENT(fctPtrCacheStrctPtr);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 12247  }
; ..\component\Com\Implementation\Com.c	 12248  #endif
; ..\component\Com\Implementation\Com.c	 12249  
; ..\component\Com\Implementation\Com.c	 12250  #if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12251  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12252    Com_RxProcessing_IsDeferredProcessingRequested
; ..\component\Com\Implementation\Com.c	 12253  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12254  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12255   *
; ..\component\Com\Implementation\Com.c	 12256   *
; ..\component\Com\Implementation\Com.c	 12257  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12258  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_RxProcessing_IsDeferredProcessingRequested(Com_SizeOfRxPduInfoType idxRxPduInfo)
; ..\component\Com\Implementation\Com.c	 12259  {
; ..\component\Com\Implementation\Com.c	 12260    /* #10 Evaluate if deferred processing needs to be performed for the passed Rx ComIPdu */
; ..\component\Com\Implementation\Com.c	 12261    boolean retVal = FALSE;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 12262    if(Com_IsHandleRxPduDeferredUsedOfRxPduInfo(idxRxPduInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12263    {
; ..\component\Com\Implementation\Com.c	 12264      if(Com_IsRxPduGrpActive(idxRxPduInfo))
; ..\component\Com\Implementation\Com.c	 12265      {
; ..\component\Com\Implementation\Com.c	 12266        if(0u < Com_GetHandleRxPduDeferred(Com_GetHandleRxPduDeferredIdxOfRxPduInfo(idxRxPduInfo)))       /* COV_COM_RX_PROCESSING_SINGLEPDU */
; ..\component\Com\Implementation\Com.c	 12267        {
; ..\component\Com\Implementation\Com.c	 12268          retVal = TRUE;
; ..\component\Com\Implementation\Com.c	 12269        }
; ..\component\Com\Implementation\Com.c	 12270      }
; ..\component\Com\Implementation\Com.c	 12271    }
; ..\component\Com\Implementation\Com.c	 12272  
; ..\component\Com\Implementation\Com.c	 12273    return retVal;
; ..\component\Com\Implementation\Com.c	 12274  }
; ..\component\Com\Implementation\Com.c	 12275  #endif
; ..\component\Com\Implementation\Com.c	 12276  
; ..\component\Com\Implementation\Com.c	 12277  #if (COM_TXBUFFERUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12278  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12279    Com_TxBuffer_InitTxIpdu
; ..\component\Com\Implementation\Com.c	 12280  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12281  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12282   *
; ..\component\Com\Implementation\Com.c	 12283   *
; ..\component\Com\Implementation\Com.c	 12284   *
; ..\component\Com\Implementation\Com.c	 12285  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12286  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxBuffer_InitTxIpdu(Com_TxPduInfoIterType ComPduId)
; ..\component\Com\Implementation\Com.c	 12287  {
; ..\component\Com\Implementation\Com.c	 12288    /* #10 Copy the initial values to the Tx ComIPdu buffer */
; ..\component\Com\Implementation\Com.c	 12289    if(Com_IsTxBufferUsedOfTxPduInfo(ComPduId))   /* COV_COM_TX_BUFFER_ALWAYS_USED */
; ..\component\Com\Implementation\Com.c	 12290    {
; ..\component\Com\Implementation\Com.c	 12291      VStdMemCpyRomToRam(Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxPduInfo(ComPduId)), Com_GetAddrTxPduInitValue(Com_GetTxPduInitValueStartIdxOfTxPduInfo(ComPduId)), Com_GetTxBufferLengthOfTxPduInfo(ComPduId));   /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_MEM_CPY_2RAM */
; ..\component\Com\Implementation\Com.c	 12292    }
; ..\component\Com\Implementation\Com.c	 12293  # if  (COM_TXBUFFERMETADATAUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12294    if(Com_IsTxBufferMetaDataUsedOfTxPduInfo(ComPduId))
; ..\component\Com\Implementation\Com.c	 12295    {
; ..\component\Com\Implementation\Com.c	 12296      /* #20 Copy the meta data init values to the Tx ComIPdu buffer */
; ..\component\Com\Implementation\Com.c	 12297      VStdMemCpyRomToRam(Com_GetAddrTxBuffer(Com_GetTxBufferMetaDataStartIdxOfTxPduInfo(ComPduId)), Com_GetAddrTxPduInitValue(Com_GetTxPduInitValueMetaDataStartIdxOfTxPduInfo(ComPduId)), Com_GetTxBufferMetaDataLengthOfTxPduInfo(ComPduId));   /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_MEM_CPY_2RAM */
; ..\component\Com\Implementation\Com.c	 12298    }
; ..\component\Com\Implementation\Com.c	 12299  # endif
; ..\component\Com\Implementation\Com.c	 12300  }
; ..\component\Com\Implementation\Com.c	 12301  #endif
; ..\component\Com\Implementation\Com.c	 12302  
; ..\component\Com\Implementation\Com.c	 12303  #if (COM_CONSTVALUEUINT8UBCLEARMASKENDIDXOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12304  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12305    Com_TxBuffer_ClearUpdateBits
; ..\component\Com\Implementation\Com.c	 12306  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12307  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12308   *
; ..\component\Com\Implementation\Com.c	 12309   *
; ..\component\Com\Implementation\Com.c	 12310  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12311  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxBuffer_ClearUpdateBits(PduIdType ComTxPduId)
; ..\component\Com\Implementation\Com.c	 12312  {
; ..\component\Com\Implementation\Com.c	 12313    Com_TxBufferIterType txBufferIdx = Com_GetTxBufferStartIdxOfTxPduInfo(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 12314  
; ..\component\Com\Implementation\Com.c	 12315    /* #10 If the passed Tx ComIPdu has a pdu buffer, clear all related UpdateBits in that buffer */
; ..\component\Com\Implementation\Com.c	 12316    Com_ConstValueUInt8UbClearMaskEndIdxOfTxPduInfoType idxConstValueUInt8 = Com_GetConstValueUInt8UbClearMaskStartIdxOfTxPduInfo(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 12317    for(; idxConstValueUInt8 < Com_GetConstValueUInt8UbClearMaskEndIdxOfTxPduInfo(ComTxPduId); idxConstValueUInt8++)
; ..\component\Com\Implementation\Com.c	 12318    {
; ..\component\Com\Implementation\Com.c	 12319      Com_SetTxBuffer(txBufferIdx, Com_GetTxBuffer(txBufferIdx) & Com_GetConstValueUInt8(idxConstValueUInt8));    /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 12320      txBufferIdx++;
; ..\component\Com\Implementation\Com.c	 12321    }
; ..\component\Com\Implementation\Com.c	 12322  }
; ..\component\Com\Implementation\Com.c	 12323  #endif
; ..\component\Com\Implementation\Com.c	 12324  
; ..\component\Com\Implementation\Com.c	 12325  #if (COM_TXSIGGRPMASK == STD_ON)
; ..\component\Com\Implementation\Com.c	 12326  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12327    Com_TxBuffer_WriteSignalGroup
; ..\component\Com\Implementation\Com.c	 12328  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12329  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12330   *
; ..\component\Com\Implementation\Com.c	 12331   *
; ..\component\Com\Implementation\Com.c	 12332  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12333  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxBuffer_WriteSignalGroup(Com_SignalGroupIdType SignalGroupId, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) ShadowBufferPtr)
; ..\component\Com\Implementation\Com.c	 12334  {
; ..\component\Com\Implementation\Com.c	 12335    if(ShadowBufferPtr != NULL_PTR)       /* COV_COM_SILENT_TX */
; ..\component\Com\Implementation\Com.c	 12336    {
; ..\component\Com\Implementation\Com.c	 12337      Com_TxBufferSigGrpInTxIPDUEndIdxOfTxSigGrpInfoType i;
; ..\component\Com\Implementation\Com.c	 12338      P2CONST(uint8, AUTOMATIC, COM_PBCFG) maskPtr = Com_GetAddrTxSigGrpMask(Com_GetTxSigGrpMaskStartIdxOfTxSigGrpInfo(SignalGroupId));
; ..\component\Com\Implementation\Com.c	 12339      P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) pIpduBuf = Com_GetAddrTxBuffer(Com_GetTxBufferSigGrpInTxIPDUStartIdxOfTxSigGrpInfo(SignalGroupId));
; ..\component\Com\Implementation\Com.c	 12340      /* #10 Copy the shadow buffer to the Tx ComIPdu buffer, mask out the required bits */
; ..\component\Com\Implementation\Com.c	 12341      for(i = 0; i < Com_GetTxBufferSigGrpInTxIPDULengthOfTxSigGrpInfo(SignalGroupId); i++)
; ..\component\Com\Implementation\Com.c	 12342      {
; ..\component\Com\Implementation\Com.c	 12343        pIpduBuf[i] = (pIpduBuf[i] & COM_CAST2UINT8(~maskPtr[i])) | (ShadowBufferPtr[i] & maskPtr[i]);    /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 12344      }
; ..\component\Com\Implementation\Com.c	 12345    }
; ..\component\Com\Implementation\Com.c	 12346  }
; ..\component\Com\Implementation\Com.c	 12347  #endif
; ..\component\Com\Implementation\Com.c	 12348  
; ..\component\Com\Implementation\Com.c	 12349  #if (COM_TXTOUTCNT == STD_ON)
; ..\component\Com\Implementation\Com.c	 12350  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12351    Com_TxDlMon_Init
; ..\component\Com\Implementation\Com.c	 12352  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12353  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12354   *
; ..\component\Com\Implementation\Com.c	 12355   *
; ..\component\Com\Implementation\Com.c	 12356  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12357  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_Init(void)
; ..\component\Com\Implementation\Com.c	 12358  {
; ..\component\Com\Implementation\Com.c	 12359    /* #10 Initialize all tx timeout counter with 0 */
; ..\component\Com\Implementation\Com.c	 12360    Com_TxTOutCntIterType ComTxToutIdx;
; ..\component\Com\Implementation\Com.c	 12361    for(ComTxToutIdx = 0; ComTxToutIdx < Com_GetSizeOfTxTOutCnt(); ComTxToutIdx++)
; ..\component\Com\Implementation\Com.c	 12362    {
; ..\component\Com\Implementation\Com.c	 12363      Com_SetTxTOutCnt(ComTxToutIdx, 0);  /* SBSW_COM_CSL01 */
; ..\component\Com\Implementation\Com.c	 12364    }
; ..\component\Com\Implementation\Com.c	 12365  }
; ..\component\Com\Implementation\Com.c	 12366  #endif
; ..\component\Com\Implementation\Com.c	 12367  
; ..\component\Com\Implementation\Com.c	 12368  
; ..\component\Com\Implementation\Com.c	 12369  #if (COM_TXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12370  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12371    Com_TxDlMon_MainFunctionTx
; ..\component\Com\Implementation\Com.c	 12372  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12373  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12374   *
; ..\component\Com\Implementation\Com.c	 12375   *
; ..\component\Com\Implementation\Com.c	 12376   *
; ..\component\Com\Implementation\Com.c	 12377   *
; ..\component\Com\Implementation\Com.c	 12378   *
; ..\component\Com\Implementation\Com.c	 12379   *
; ..\component\Com\Implementation\Com.c	 12380   *
; ..\component\Com\Implementation\Com.c	 12381   *
; ..\component\Com\Implementation\Com.c	 12382   *
; ..\component\Com\Implementation\Com.c	 12383  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12384  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_MainFunctionTx(void)
; ..\component\Com\Implementation\Com.c	 12385  {
; ..\component\Com\Implementation\Com.c	 12386    Com_SizeOfTxTOutInfoType idxTxTOutInfo;
; ..\component\Com\Implementation\Com.c	 12387  
; ..\component\Com\Implementation\Com.c	 12388    Com_TxDlMon_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	 12389  
; ..\component\Com\Implementation\Com.c	 12390    /* #10 Iterate over all tx timeout infos */
; ..\component\Com\Implementation\Com.c	 12391    for(idxTxTOutInfo = 0; idxTxTOutInfo < Com_GetSizeOfTxTOutInfo(); idxTxTOutInfo++)
; ..\component\Com\Implementation\Com.c	 12392    {
; ..\component\Com\Implementation\Com.c	 12393      Com_TxPduInfoIdxOfTxTOutInfoType idxTxPduInfo = Com_GetTxPduInfoIdxOfTxTOutInfo(idxTxTOutInfo);
; ..\component\Com\Implementation\Com.c	 12394  
; ..\component\Com\Implementation\Com.c	 12395      /* #20 If the Tx ComIPdu is active and the current timeout counter value is greater 0 */
; ..\component\Com\Implementation\Com.c	 12396      if(Com_IsTxPduGrpActive(idxTxPduInfo))
; ..\component\Com\Implementation\Com.c	 12397      {
; ..\component\Com\Implementation\Com.c	 12398        if(0u < Com_GetTxTOutCnt(idxTxTOutInfo))  /* COV_COM_TX_PROCESSING_NONE_MODE */
; ..\component\Com\Implementation\Com.c	 12399        {
; ..\component\Com\Implementation\Com.c	 12400          /* #30 Decrement the timeout counter value */
; ..\component\Com\Implementation\Com.c	 12401          Com_DecTxTOutCnt(idxTxTOutInfo);        /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12402          /* #40 If the timeout counter value is equal 0 */
; ..\component\Com\Implementation\Com.c	 12403          if(Com_GetTxTOutCnt(idxTxTOutInfo) == 0u)
; ..\component\Com\Implementation\Com.c	 12404          {
; ..\component\Com\Implementation\Com.c	 12405            /* #50 Set the repetition counter and the MDT counter to 0 */
; ..\component\Com\Implementation\Com.c	 12406  # if ((COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 12407            Com_SetRepCnt(idxTxPduInfo, 0);       /* SBSW_COM_CSL02 */ /* \trace SPEC-2736820 */
; ..\component\Com\Implementation\Com.c	 12408  # endif
; ..\component\Com\Implementation\Com.c	 12409  # if (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12410            Com_SetDelayTimeCnt(idxTxPduInfo, 0); /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12411  # endif
; ..\component\Com\Implementation\Com.c	 12412  
; ..\component\Com\Implementation\Com.c	 12413  # if ((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) && (COM_CANCELLATIONSUPPORTOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12414            /* #60 Do transmit cancellation */
; ..\component\Com\Implementation\Com.c	 12415            Com_TxLLIf_CancelTransmit((PduIdType) idxTxPduInfo);
; ..\component\Com\Implementation\Com.c	 12416  # endif
; ..\component\Com\Implementation\Com.c	 12417  
; ..\component\Com\Implementation\Com.c	 12418  # if (COM_CBKTXTOUTFUNCPTRINDUSEDOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12419            Com_TxDlMon_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	 12420            /* #70 Call the configured timeout notifications */
; ..\component\Com\Implementation\Com.c	 12421            Com_TxDlMon_TxCallCbkTout(idxTxTOutInfo);
; ..\component\Com\Implementation\Com.c	 12422            Com_TxDlMon_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	 12423  # endif
; ..\component\Com\Implementation\Com.c	 12424  
; ..\component\Com\Implementation\Com.c	 12425  # if (COM_RETRY_FAILED_TRANSMIT_REQUESTS == STD_ON)
; ..\component\Com\Implementation\Com.c	 12426            /* #80 Reset the transmit request, if RETRY_FAILED_TRANSMIT_REQUESTS is enabled */
; ..\component\Com\Implementation\Com.c	 12427            Com_SetTransmitRequest(idxTxPduInfo, FALSE);  /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12428  # endif
; ..\component\Com\Implementation\Com.c	 12429          }
; ..\component\Com\Implementation\Com.c	 12430        } /* Timer active check */
; ..\component\Com\Implementation\Com.c	 12431      }   /* I-PDU active check */
; ..\component\Com\Implementation\Com.c	 12432      Com_TxDlMon_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	 12433    }     /* Tx Timeout object loop */
; ..\component\Com\Implementation\Com.c	 12434  
; ..\component\Com\Implementation\Com.c	 12435    Com_TxDlMon_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	 12436  }
; ..\component\Com\Implementation\Com.c	 12437  #endif
; ..\component\Com\Implementation\Com.c	 12438  
; ..\component\Com\Implementation\Com.c	 12439  #if(COM_TXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12440  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	 12441  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12442    Com_TxDlMon_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	 12443  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12444  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12445   *
; ..\component\Com\Implementation\Com.c	 12446   *
; ..\component\Com\Implementation\Com.c	 12447  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12448  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_EnterExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	 12449  {
; ..\component\Com\Implementation\Com.c	 12450    /* #10 Enter the tx deadline monitoring exclusive area */
; ..\component\Com\Implementation\Com.c	 12451    SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 12452  }
; ..\component\Com\Implementation\Com.c	 12453  
; ..\component\Com\Implementation\Com.c	 12454  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12455    Com_TxDlMon_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	 12456  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12457  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12458   *
; ..\component\Com\Implementation\Com.c	 12459   *
; ..\component\Com\Implementation\Com.c	 12460   *
; ..\component\Com\Implementation\Com.c	 12461  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12462  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_ExitExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	 12463  {
; ..\component\Com\Implementation\Com.c	 12464    /* #05 Reload the counter with the threshold value */
; ..\component\Com\Implementation\Com.c	 12465    Com_SetTxDeadlineMonitoringISRLockCounter(Com_GetTxDeadlineMonitoringISRLockThreshold());     /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 12466    /* #10 Exit the tx deadline monitoring exclusive area */
; ..\component\Com\Implementation\Com.c	 12467    SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 12468  }
; ..\component\Com\Implementation\Com.c	 12469  
; ..\component\Com\Implementation\Com.c	 12470  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12471    Com_TxDlMon_ThresholdCheck
; ..\component\Com\Implementation\Com.c	 12472  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12473  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12474   *
; ..\component\Com\Implementation\Com.c	 12475   *
; ..\component\Com\Implementation\Com.c	 12476   *
; ..\component\Com\Implementation\Com.c	 12477  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12478  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_ThresholdCheck(void)
; ..\component\Com\Implementation\Com.c	 12479  {
; ..\component\Com\Implementation\Com.c	 12480    if(Com_GetTxDeadlineMonitoringISRLockCounter() > 0u)  /* COV_COM_THRESHOLD_TX */
; ..\component\Com\Implementation\Com.c	 12481    {
; ..\component\Com\Implementation\Com.c	 12482      Com_DecTxDeadlineMonitoringISRLockCounter();        /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 12483    }
; ..\component\Com\Implementation\Com.c	 12484    else
; ..\component\Com\Implementation\Com.c	 12485    {
; ..\component\Com\Implementation\Com.c	 12486      Com_TxDlMon_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	 12487      Com_TxDlMon_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	 12488    }
; ..\component\Com\Implementation\Com.c	 12489  }
; ..\component\Com\Implementation\Com.c	 12490  
; ..\component\Com\Implementation\Com.c	 12491  #endif
; ..\component\Com\Implementation\Com.c	 12492  
; ..\component\Com\Implementation\Com.c	 12493  
; ..\component\Com\Implementation\Com.c	 12494  #if (COM_TXTOUTINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12495  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12496    Com_TxDlMon_TxConfirmation
; ..\component\Com\Implementation\Com.c	 12497  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12498  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12499   *
; ..\component\Com\Implementation\Com.c	 12500   *
; ..\component\Com\Implementation\Com.c	 12501   *
; ..\component\Com\Implementation\Com.c	 12502   *
; ..\component\Com\Implementation\Com.c	 12503  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12504  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_TxConfirmation(PduIdType TxPduId)
; ..\component\Com\Implementation\Com.c	 12505  {
; ..\component\Com\Implementation\Com.c	 12506    /* #10 If the passed Tx ComIPdu has a related tx timeout */
; ..\component\Com\Implementation\Com.c	 12507    if(Com_IsTxTOutInfoUsedOfTxPduInfo(TxPduId))
; ..\component\Com\Implementation\Com.c	 12508    {
; ..\component\Com\Implementation\Com.c	 12509      Com_TxTOutInfoIdxOfTxPduInfoType idxTxTOutInfo = Com_GetTxTOutInfoIdxOfTxPduInfo(TxPduId);
; ..\component\Com\Implementation\Com.c	 12510  # if (COM_EXISTS_NONE_MODEOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12511      /* #20 If the tx timeout is in None mode and the current timeout counter value is greater 0, set the tx timeout counter to the configured tx timeout factor */
; ..\component\Com\Implementation\Com.c	 12512      if(Com_GetModeOfTxTOutInfo(idxTxTOutInfo) == COM_NONE_MODEOFTXTOUTINFO)     /* COV_COM_TX_PROCESSING_NONE_MODE */
; ..\component\Com\Implementation\Com.c	 12513      {
; ..\component\Com\Implementation\Com.c	 12514        if(Com_GetTxTOutCnt(idxTxTOutInfo) > 0u)
; ..\component\Com\Implementation\Com.c	 12515        {
; ..\component\Com\Implementation\Com.c	 12516          Com_SetTxTOutCnt(idxTxTOutInfo, Com_GetFactorOfTxTOutInfo(idxTxTOutInfo));      /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12517        }
; ..\component\Com\Implementation\Com.c	 12518      }
; ..\component\Com\Implementation\Com.c	 12519      /* #30 Otherwise the tx timeout is in Normal mode, in this case set the tx timeout counter to 0 */
; ..\component\Com\Implementation\Com.c	 12520      else
; ..\component\Com\Implementation\Com.c	 12521  # endif
; ..\component\Com\Implementation\Com.c	 12522      {
; ..\component\Com\Implementation\Com.c	 12523        Com_SetTxTOutCnt(idxTxTOutInfo, 0);       /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12524      }
; ..\component\Com\Implementation\Com.c	 12525    }
; ..\component\Com\Implementation\Com.c	 12526  }
; ..\component\Com\Implementation\Com.c	 12527  #endif
; ..\component\Com\Implementation\Com.c	 12528  
; ..\component\Com\Implementation\Com.c	 12529  
; ..\component\Com\Implementation\Com.c	 12530  #if (COM_TXTOUTINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12531  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12532    Com_TxDlMon_IPduGroupStart
; ..\component\Com\Implementation\Com.c	 12533  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12534  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12535   *
; ..\component\Com\Implementation\Com.c	 12536   *
; ..\component\Com\Implementation\Com.c	 12537   *
; ..\component\Com\Implementation\Com.c	 12538   *
; ..\component\Com\Implementation\Com.c	 12539  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12540  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_IPduGroupStart(Com_TxPduInfoIterType TxPduId)
; ..\component\Com\Implementation\Com.c	 12541  {
; ..\component\Com\Implementation\Com.c	 12542    /* #10 If the passed Tx ComIPdu has a related tx timeout */
; ..\component\Com\Implementation\Com.c	 12543    if(Com_IsTxTOutInfoUsedOfTxPduInfo(TxPduId))  /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12544    {
; ..\component\Com\Implementation\Com.c	 12545      Com_TxTOutInfoIdxOfTxPduInfoType idxTxTOutInfo = Com_GetTxTOutInfoIdxOfTxPduInfo(TxPduId);
; ..\component\Com\Implementation\Com.c	 12546  # if (COM_EXISTS_NONE_MODEOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12547      /* #20 If the tx timeout is in None mode, set the tx timeout counter to the configured tx timeout factor */
; ..\component\Com\Implementation\Com.c	 12548      if(Com_GetModeOfTxTOutInfo(idxTxTOutInfo) == COM_NONE_MODEOFTXTOUTINFO)     /* COV_COM_TX_PROCESSING_NONE_MODE */
; ..\component\Com\Implementation\Com.c	 12549      {
; ..\component\Com\Implementation\Com.c	 12550        Com_SetTxTOutCnt(idxTxTOutInfo, Com_GetFactorOfTxTOutInfo(idxTxTOutInfo));        /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12551      }
; ..\component\Com\Implementation\Com.c	 12552      /* #30 Otherwise the tx timeout is in Normal mode, in this case set the tx timeout counter to 0 */
; ..\component\Com\Implementation\Com.c	 12553      else
; ..\component\Com\Implementation\Com.c	 12554  # endif
; ..\component\Com\Implementation\Com.c	 12555      {
; ..\component\Com\Implementation\Com.c	 12556        Com_SetTxTOutCnt(idxTxTOutInfo, 0);       /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12557      }
; ..\component\Com\Implementation\Com.c	 12558    }
; ..\component\Com\Implementation\Com.c	 12559  }
; ..\component\Com\Implementation\Com.c	 12560  #endif
; ..\component\Com\Implementation\Com.c	 12561  
; ..\component\Com\Implementation\Com.c	 12562  #if (COM_EXISTS_NORMAL_MODEOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12563  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12564    Com_TxDlMon_SwitchIpduTxMode
; ..\component\Com\Implementation\Com.c	 12565  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12566  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12567   *
; ..\component\Com\Implementation\Com.c	 12568   *
; ..\component\Com\Implementation\Com.c	 12569   *
; ..\component\Com\Implementation\Com.c	 12570  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12571  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_SwitchIpduTxMode(PduIdType TxPduId)
; ..\component\Com\Implementation\Com.c	 12572  {
; ..\component\Com\Implementation\Com.c	 12573    /* #10 If the passed Tx ComIPdu has a related tx timeout and the tx timeout is in Normal mode */
; ..\component\Com\Implementation\Com.c	 12574    if(Com_IsTxTOutInfoUsedOfTxPduInfo(TxPduId))
; ..\component\Com\Implementation\Com.c	 12575    {
; ..\component\Com\Implementation\Com.c	 12576      Com_TxTOutInfoIdxOfTxPduInfoType idxTxTOutInfo = Com_GetTxTOutInfoIdxOfTxPduInfo(TxPduId);
; ..\component\Com\Implementation\Com.c	 12577  
; ..\component\Com\Implementation\Com.c	 12578      if(Com_GetModeOfTxTOutInfo(idxTxTOutInfo) == COM_NORMAL_MODEOFTXTOUTINFO)   /* COV_COM_TX_PROCESSING_NONE_MODE */
; ..\component\Com\Implementation\Com.c	 12579      {
; ..\component\Com\Implementation\Com.c	 12580        boolean hasCyclicOrDirectTxModePart = FALSE;      /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 12581  # if ((COM_PERIODICOFTXMODETRUE == STD_ON) || (COM_PERIODICOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 12582        hasCyclicOrDirectTxModePart = (boolean) Com_TxModeHdlr_IsPeriodicTxMode(TxPduId); /* PRQA S 2986 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	 12583  # endif
; ..\component\Com\Implementation\Com.c	 12584  # if ((COM_DIRECTOFTXMODETRUE == STD_ON) || (COM_DIRECTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 12585        {
; ..\component\Com\Implementation\Com.c	 12586          boolean isDirectTxMode = (boolean) Com_TxModeHdlr_IsDirectTxMode(TxPduId);
; ..\component\Com\Implementation\Com.c	 12587  #  if ((COM_PERIODICOFTXMODETRUE == STD_ON) || (COM_PERIODICOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 12588          hasCyclicOrDirectTxModePart = hasCyclicOrDirectTxModePart || isDirectTxMode;    /* PRQA S 2986 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	 12589  #  else
; ..\component\Com\Implementation\Com.c	 12590          hasCyclicOrDirectTxModePart = isDirectTxMode;   /* PRQA S 2986 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	 12591  #  endif
; ..\component\Com\Implementation\Com.c	 12592        }
; ..\component\Com\Implementation\Com.c	 12593  # endif
; ..\component\Com\Implementation\Com.c	 12594  
; ..\component\Com\Implementation\Com.c	 12595        /* #20 If the passed Tx ComIPdu is in NONE transmission mode, set the tx timeout counter to 0 */
; ..\component\Com\Implementation\Com.c	 12596        if(hasCyclicOrDirectTxModePart == FALSE)
; ..\component\Com\Implementation\Com.c	 12597        {
; ..\component\Com\Implementation\Com.c	 12598          /* \trace SPEC-2736879 */
; ..\component\Com\Implementation\Com.c	 12599          Com_SetTxTOutCnt(idxTxTOutInfo, 0);     /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12600        }
; ..\component\Com\Implementation\Com.c	 12601      }
; ..\component\Com\Implementation\Com.c	 12602    }
; ..\component\Com\Implementation\Com.c	 12603  }
; ..\component\Com\Implementation\Com.c	 12604  #endif
; ..\component\Com\Implementation\Com.c	 12605  
; ..\component\Com\Implementation\Com.c	 12606  #if (COM_CBKTXTOUTFUNCPTRINDUSEDOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12607  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12608    Com_TxDlMon_TxCallCbkTout
; ..\component\Com\Implementation\Com.c	 12609  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12610  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12611   *
; ..\component\Com\Implementation\Com.c	 12612   *
; ..\component\Com\Implementation\Com.c	 12613  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12614  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxDlMon_TxCallCbkTout(Com_SizeOfTxTOutInfoType idxTxTOutInfo)
; ..\component\Com\Implementation\Com.c	 12615  {
; ..\component\Com\Implementation\Com.c	 12616    /* #10 Call all related tx timeout notification functions */
; ..\component\Com\Implementation\Com.c	 12617    Com_CbkTxTOutFuncPtrIndEndIdxOfTxTOutInfoType idxIndTxTOutFuncPtr = Com_GetCbkTxTOutFuncPtrIndStartIdxOfTxTOutInfo(idxTxTOutInfo);
; ..\component\Com\Implementation\Com.c	 12618    for(; idxIndTxTOutFuncPtr < Com_GetCbkTxTOutFuncPtrIndEndIdxOfTxTOutInfo(idxTxTOutInfo); idxIndTxTOutFuncPtr++)
; ..\component\Com\Implementation\Com.c	 12619    {
; ..\component\Com\Implementation\Com.c	 12620      Com_GetCbkTxTOutFuncPtr(Com_GetCbkTxTOutFuncPtrInd(idxIndTxTOutFuncPtr)) ();        /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	 12621    }
; ..\component\Com\Implementation\Com.c	 12622  }
; ..\component\Com\Implementation\Com.c	 12623  #endif
; ..\component\Com\Implementation\Com.c	 12624  
; ..\component\Com\Implementation\Com.c	 12625  #if (COM_GWTIMEOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12626  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12627    Com_GwTout_HandleCounter
; ..\component\Com\Implementation\Com.c	 12628  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12629  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12630   *
; ..\component\Com\Implementation\Com.c	 12631   *
; ..\component\Com\Implementation\Com.c	 12632   *
; ..\component\Com\Implementation\Com.c	 12633   *
; ..\component\Com\Implementation\Com.c	 12634  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12635  LOCAL_INLINE FUNC(void, COM_CODE) Com_GwTout_HandleCounter(void)
; ..\component\Com\Implementation\Com.c	 12636  {
; ..\component\Com\Implementation\Com.c	 12637    Com_SizeOfGwTimeoutInfoType gwToutHndl;
; ..\component\Com\Implementation\Com.c	 12638    SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 12639    /* #10 Iterate over all gateway timeout infos */
; ..\component\Com\Implementation\Com.c	 12640    for(gwToutHndl = 0u; gwToutHndl < Com_GetSizeOfGwTimeoutInfo(); gwToutHndl++)
; ..\component\Com\Implementation\Com.c	 12641    {
; ..\component\Com\Implementation\Com.c	 12642      /* #20 If the tx pdu is active and the timeout is active, decrement the gateway timeout counter */
; ..\component\Com\Implementation\Com.c	 12643      if(Com_IsTxPduGrpActive((Com_GetTxPduInfoIdxOfGwTimeoutInfo(gwToutHndl))))
; ..\component\Com\Implementation\Com.c	 12644      {
; ..\component\Com\Implementation\Com.c	 12645        if(Com_GwTout_TimeoutIsActive(gwToutHndl))
; ..\component\Com\Implementation\Com.c	 12646        {
; ..\component\Com\Implementation\Com.c	 12647          Com_DecGwRoutingTimeoutCounter(gwToutHndl);     /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12648          /* #30 If a gateway timeout occurred, stop the cyclic transmission */
; ..\component\Com\Implementation\Com.c	 12649          if(Com_GwTout_TimeoutHasOccurred(gwToutHndl))
; ..\component\Com\Implementation\Com.c	 12650          {
; ..\component\Com\Implementation\Com.c	 12651            Com_TxModeHdlr_StopCyclicTransmission(Com_GetTxPduInfoIdxOfGwTimeoutInfo(gwToutHndl));
; ..\component\Com\Implementation\Com.c	 12652          }
; ..\component\Com\Implementation\Com.c	 12653        }
; ..\component\Com\Implementation\Com.c	 12654      }
; ..\component\Com\Implementation\Com.c	 12655    }
; ..\component\Com\Implementation\Com.c	 12656    SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 12657  }
; ..\component\Com\Implementation\Com.c	 12658  
; ..\component\Com\Implementation\Com.c	 12659  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12660    Com_GwTout_InitCounter
; ..\component\Com\Implementation\Com.c	 12661  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12662  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12663   *
; ..\component\Com\Implementation\Com.c	 12664   *
; ..\component\Com\Implementation\Com.c	 12665   *
; ..\component\Com\Implementation\Com.c	 12666   *
; ..\component\Com\Implementation\Com.c	 12667  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12668  LOCAL_INLINE FUNC(void, COM_CODE) Com_GwTout_InitCounter(PduIdType ComPduId)
; ..\component\Com\Implementation\Com.c	 12669  {
; ..\component\Com\Implementation\Com.c	 12670    /* #10 If the passed ComIPdu has a configured gateway timeout */
; ..\component\Com\Implementation\Com.c	 12671    if(Com_IsGwTimeoutInfoUsedOfTxPduInfo(ComPduId))      /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12672    {
; ..\component\Com\Implementation\Com.c	 12673      /* #20 Initialize the timeout counter with 1 */
; ..\component\Com\Implementation\Com.c	 12674      Com_SetGwRoutingTimeoutCounter(Com_GetGwTimeoutInfoIdxOfTxPduInfo(ComPduId), 1);    /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 12675  
; ..\component\Com\Implementation\Com.c	 12676      /* #30 Stop cyclic transmission */
; ..\component\Com\Implementation\Com.c	 12677      Com_TxModeHdlr_StopCyclicTransmission(ComPduId);
; ..\component\Com\Implementation\Com.c	 12678    }
; ..\component\Com\Implementation\Com.c	 12679  }
; ..\component\Com\Implementation\Com.c	 12680  #endif
; ..\component\Com\Implementation\Com.c	 12681  
; ..\component\Com\Implementation\Com.c	 12682  #if ((COM_INVVALUEUSEDOFTXSIGINFO == STD_ON) || (COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12683  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12684    Com_InvalidateSignal_SendSignal
; ..\component\Com\Implementation\Com.c	 12685   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12686  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12687   *
; ..\component\Com\Implementation\Com.c	 12688   *
; ..\component\Com\Implementation\Com.c	 12689   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12690  LOCAL_INLINE FUNC(uint8, COM_CODE) Com_InvalidateSignal_SendSignal(Com_SignalIdType idxTxSigInfo)       /* COV_COM_SIGNALINVALIDATION_ARRAYACCESS */
; ..\component\Com\Implementation\Com.c	 12691  {
; ..\component\Com\Implementation\Com.c	 12692    uint8 retVal = COM_SERVICE_NOT_AVAILABLE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 12693    /* #10 Send signal with the invalid value, the invalid value is stored in an ApplType dependent buffer */
; ..\component\Com\Implementation\Com.c	 12694  # if (COM_INVVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12695    if(Com_IsInvValueUsedOfTxSigInfo(idxTxSigInfo))       /* PRQA S 2842 */ /* MD_Com_2842 */ /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12696    {
; ..\component\Com\Implementation\Com.c	 12697      Com_InvValueIdxOfTxSigInfoType idxInvValue = Com_GetInvValueIdxOfTxSigInfo(idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	 12698      switch (Com_GetApplTypeOfTxSigInfo(idxTxSigInfo))
; ..\component\Com\Implementation\Com.c	 12699      {
; ..\component\Com\Implementation\Com.c	 12700  /* jet: GeneralSwitchCasePerApplType snippet */
; ..\component\Com\Implementation\Com.c	 12701  #  if ((COM_CONSTVALUEUINT8 == STD_ON) && (COM_EXISTS_UINT8_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12702        case COM_UINT8_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 12703        {
; ..\component\Com\Implementation\Com.c	 12704          retVal = Com_SendSignal_Processing(idxTxSigInfo, Com_GetAddrConstValueUInt8(idxInvValue), 0);   /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12705          break;
; ..\component\Com\Implementation\Com.c	 12706        }
; ..\component\Com\Implementation\Com.c	 12707  #  endif
; ..\component\Com\Implementation\Com.c	 12708  #  if ((COM_CONSTVALUESINT8 == STD_ON) && (COM_EXISTS_SINT8_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12709        case COM_SINT8_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 12710        {
; ..\component\Com\Implementation\Com.c	 12711          retVal = Com_SendSignal_Processing(idxTxSigInfo, Com_GetAddrConstValueSInt8(idxInvValue), 0);   /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12712          break;
; ..\component\Com\Implementation\Com.c	 12713        }
; ..\component\Com\Implementation\Com.c	 12714  #  endif
; ..\component\Com\Implementation\Com.c	 12715  #  if ((COM_CONSTVALUEUINT16 == STD_ON) && (COM_EXISTS_UINT16_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12716        case COM_UINT16_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 12717        {
; ..\component\Com\Implementation\Com.c	 12718          retVal = Com_SendSignal_Processing(idxTxSigInfo, Com_GetAddrConstValueUInt16(idxInvValue), 0);  /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12719          break;
; ..\component\Com\Implementation\Com.c	 12720        }
; ..\component\Com\Implementation\Com.c	 12721  #  endif
; ..\component\Com\Implementation\Com.c	 12722  #  if ((COM_CONSTVALUESINT16 == STD_ON) && (COM_EXISTS_SINT16_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12723        case COM_SINT16_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 12724        {
; ..\component\Com\Implementation\Com.c	 12725          retVal = Com_SendSignal_Processing(idxTxSigInfo, Com_GetAddrConstValueSInt16(idxInvValue), 0);  /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12726          break;
; ..\component\Com\Implementation\Com.c	 12727        }
; ..\component\Com\Implementation\Com.c	 12728  #  endif
; ..\component\Com\Implementation\Com.c	 12729  #  if ((COM_CONSTVALUEUINT32 == STD_ON) && (COM_EXISTS_UINT32_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12730        case COM_UINT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 12731        {
; ..\component\Com\Implementation\Com.c	 12732          retVal = Com_SendSignal_Processing(idxTxSigInfo, Com_GetAddrConstValueUInt32(idxInvValue), 0);  /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12733          break;
; ..\component\Com\Implementation\Com.c	 12734        }
; ..\component\Com\Implementation\Com.c	 12735  #  endif
; ..\component\Com\Implementation\Com.c	 12736  #  if ((COM_CONSTVALUESINT32 == STD_ON) && (COM_EXISTS_SINT32_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12737        case COM_SINT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 12738        {
; ..\component\Com\Implementation\Com.c	 12739          retVal = Com_SendSignal_Processing(idxTxSigInfo, Com_GetAddrConstValueSInt32(idxInvValue), 0);  /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12740          break;
; ..\component\Com\Implementation\Com.c	 12741        }
; ..\component\Com\Implementation\Com.c	 12742  #  endif
; ..\component\Com\Implementation\Com.c	 12743  #  if ((COM_CONSTVALUEUINT64 == STD_ON) && (COM_EXISTS_UINT64_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12744        case COM_UINT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 12745        {
; ..\component\Com\Implementation\Com.c	 12746          retVal = Com_SendSignal_Processing(idxTxSigInfo, Com_GetAddrConstValueUInt64(idxInvValue), 0);  /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12747          break;
; ..\component\Com\Implementation\Com.c	 12748        }
; ..\component\Com\Implementation\Com.c	 12749  #  endif
; ..\component\Com\Implementation\Com.c	 12750  #  if ((COM_CONSTVALUESINT64 == STD_ON) && (COM_EXISTS_SINT64_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12751        case COM_SINT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 12752        {
; ..\component\Com\Implementation\Com.c	 12753          retVal = Com_SendSignal_Processing(idxTxSigInfo, Com_GetAddrConstValueSInt64(idxInvValue), 0);  /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12754          break;
; ..\component\Com\Implementation\Com.c	 12755        }
; ..\component\Com\Implementation\Com.c	 12756  #  endif
; ..\component\Com\Implementation\Com.c	 12757  #  if ((COM_CONSTVALUEFLOAT32 == STD_ON) && (COM_EXISTS_FLOAT32_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12758        case COM_FLOAT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 12759        {
; ..\component\Com\Implementation\Com.c	 12760          retVal = Com_SendSignal_Processing(idxTxSigInfo, Com_GetAddrConstValueFloat32(idxInvValue), 0); /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12761          break;
; ..\component\Com\Implementation\Com.c	 12762        }
; ..\component\Com\Implementation\Com.c	 12763  #  endif
; ..\component\Com\Implementation\Com.c	 12764  #  if ((COM_CONSTVALUEFLOAT64 == STD_ON) && (COM_EXISTS_FLOAT64_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12765        case COM_FLOAT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 12766        {
; ..\component\Com\Implementation\Com.c	 12767          retVal = Com_SendSignal_Processing(idxTxSigInfo, Com_GetAddrConstValueFloat64(idxInvValue), 0); /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12768          break;
; ..\component\Com\Implementation\Com.c	 12769        }
; ..\component\Com\Implementation\Com.c	 12770  #  endif
; ..\component\Com\Implementation\Com.c	 12771        default: /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	 12772          break;
; ..\component\Com\Implementation\Com.c	 12773      }
; ..\component\Com\Implementation\Com.c	 12774    }
; ..\component\Com\Implementation\Com.c	 12775  # endif
; ..\component\Com\Implementation\Com.c	 12776  
; ..\component\Com\Implementation\Com.c	 12777  # if (COM_CONSTVALUEARRAYBASEDINVVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12778    if(Com_IsConstValueArrayBasedInvValueUsedOfTxSigInfo(idxTxSigInfo))   /* COV_COM_SIGNALINVALIDATION_ARRAYACCESS_01 */
; ..\component\Com\Implementation\Com.c	 12779    {
; ..\component\Com\Implementation\Com.c	 12780      Com_ConstValueArrayBasedInvValueEndIdxOfTxSigInfoType idxInvValue = Com_GetConstValueArrayBasedInvValueStartIdxOfTxSigInfo(idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	 12781      retVal = Com_SendSignal_Processing(idxTxSigInfo, Com_GetAddrConstValueArrayBased(idxInvValue), (uint16) Com_GetConstValueArrayBasedInvValueLengthOfTxSigInfo(idxTxSigInfo));        /* PRQA S 0315 */ /* MD_Com_0314_0315 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 12782    }
; ..\component\Com\Implementation\Com.c	 12783  # endif
; ..\component\Com\Implementation\Com.c	 12784  
; ..\component\Com\Implementation\Com.c	 12785    return retVal;
; ..\component\Com\Implementation\Com.c	 12786  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	 12787  #endif
; ..\component\Com\Implementation\Com.c	 12788  
; ..\component\Com\Implementation\Com.c	 12789  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12790  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12791    Com_TxLLIf_InitTxIpdu
; ..\component\Com\Implementation\Com.c	 12792  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12793  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12794   *
; ..\component\Com\Implementation\Com.c	 12795   *
; ..\component\Com\Implementation\Com.c	 12796   *
; ..\component\Com\Implementation\Com.c	 12797   *
; ..\component\Com\Implementation\Com.c	 12798   *
; ..\component\Com\Implementation\Com.c	 12799   *
; ..\component\Com\Implementation\Com.c	 12800   *
; ..\component\Com\Implementation\Com.c	 12801   *
; ..\component\Com\Implementation\Com.c	 12802   *
; ..\component\Com\Implementation\Com.c	 12803  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12804  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxLLIf_InitTxIpdu(Com_TxPduInfoIterType ComPduId)
; ..\component\Com\Implementation\Com.c	 12805  {
; ..\component\Com\Implementation\Com.c	 12806  # if(COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12807    /* #10 If I-Pdu is TP Pdu */
; ..\component\Com\Implementation\Com.c	 12808    if(Com_IsTxTpInfoUsedOfTxPduInfo(ComPduId))   /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12809    {
; ..\component\Com\Implementation\Com.c	 12810      /* #20 Initialize TP variables of one ComIPdu */
; ..\component\Com\Implementation\Com.c	 12811      Com_TxTpInfoIdxOfTxPduInfoType txTpPduInfoIdx = Com_GetTxTpInfoIdxOfTxPduInfo(ComPduId);
; ..\component\Com\Implementation\Com.c	 12812  
; ..\component\Com\Implementation\Com.c	 12813  #  if (COM_TXSIGINFODYNSIGUSEDOFTXTPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12814      /* #30 If ComIPdu contains a dynamic length signal */
; ..\component\Com\Implementation\Com.c	 12815      if(Com_IsTxSigInfoDynSigUsedOfTxTpInfo(txTpPduInfoIdx))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12816      {
; ..\component\Com\Implementation\Com.c	 12817  
; ..\component\Com\Implementation\Com.c	 12818        /* #40 Initialize the ComIpdu length with the initial dynamic length */
; ..\component\Com\Implementation\Com.c	 12819        Com_SetTxSduLength(ComPduId, (Com_TxSduLengthType) (Com_GetStartByteInPduPositionOfTxSigInfo(Com_GetTxSigInfoDynSigIdxOfTxTpInfo(txTpPduInfoIdx)) + ((Com_TxSduLengthType) Com_GetDynamicInitialLengthOfTxTpInfo(txTpPduInfoIdx))));      /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 12820        Com_SetTxTmpTpPduLength(txTpPduInfoIdx, (Com_TxSduLengthType) (Com_GetStartByteInPduPositionOfTxSigInfo(Com_GetTxSigInfoDynSigIdxOfTxTpInfo(txTpPduInfoIdx)) + ((Com_TxSduLengthType) Com_GetDynamicInitialLengthOfTxTpInfo(txTpPduInfoIdx))));   /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12821        Com_SetTxDynSignalLength(txTpPduInfoIdx, Com_GetDynamicInitialLengthOfTxTpInfo(txTpPduInfoIdx));  /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12822      }
; ..\component\Com\Implementation\Com.c	 12823      /* #50 otherwise */
; ..\component\Com\Implementation\Com.c	 12824      else
; ..\component\Com\Implementation\Com.c	 12825  #  endif
; ..\component\Com\Implementation\Com.c	 12826      {
; ..\component\Com\Implementation\Com.c	 12827        /* #60 Initialize the ComIpdu length with the initial fixed length */
; ..\component\Com\Implementation\Com.c	 12828  #  if (COM_TXSIGINFODYNSIGUSEDOFTXTPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12829        Com_SetTxTmpTpPduLength(txTpPduInfoIdx, Com_GetBufferSizeOfTxTpInfo(txTpPduInfoIdx));     /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 12830  #  endif
; ..\component\Com\Implementation\Com.c	 12831        Com_SetTxSduLength(ComPduId, (Com_TxSduLengthType) Com_GetBufferSizeOfTxTpInfo(txTpPduInfoIdx));  /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 12832      }
; ..\component\Com\Implementation\Com.c	 12833    }
; ..\component\Com\Implementation\Com.c	 12834    /* #70 otherwise */
; ..\component\Com\Implementation\Com.c	 12835    else
; ..\component\Com\Implementation\Com.c	 12836  # endif
; ..\component\Com\Implementation\Com.c	 12837    {
; ..\component\Com\Implementation\Com.c	 12838      /* #80 Initialize the ComIpdu length with the initial fixed length */
; ..\component\Com\Implementation\Com.c	 12839  # if (COM_TXBUFFERUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12840      Com_SetTxSduLength(ComPduId, (Com_TxSduLengthType) Com_GetTxBufferLengthOfTxPduInfo(ComPduId));     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 12841  # else
; ..\component\Com\Implementation\Com.c	 12842      Com_SetTxSduLength(ComPduId, 0);    /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 12843  # endif
; ..\component\Com\Implementation\Com.c	 12844    }
; ..\component\Com\Implementation\Com.c	 12845  }
; ..\component\Com\Implementation\Com.c	 12846  #endif
; ..\component\Com\Implementation\Com.c	 12847  
; ..\component\Com\Implementation\Com.c	 12848  #if ((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) && (COM_CANCELLATIONSUPPORTOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12849  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12850    Com_TxLLIf_CancelTransmit
; ..\component\Com\Implementation\Com.c	 12851  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12852  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12853   *
; ..\component\Com\Implementation\Com.c	 12854   *
; ..\component\Com\Implementation\Com.c	 12855   *
; ..\component\Com\Implementation\Com.c	 12856  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12857  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxLLIf_CancelTransmit(PduIdType ComTxPduId)
; ..\component\Com\Implementation\Com.c	 12858  {
; ..\component\Com\Implementation\Com.c	 12859    /* #10 If cancellation support is confiured for the ComIPdu */
; ..\component\Com\Implementation\Com.c	 12860    if(Com_IsCancellationSupportOfTxPduInfo(ComTxPduId))
; ..\component\Com\Implementation\Com.c	 12861    {
; ..\component\Com\Implementation\Com.c	 12862      /* #20 Cancel the transmission by a call of PduR_ComCancelTransmit */
; ..\component\Com\Implementation\Com.c	 12863      (void) PduR_ComCancelTransmit(Com_GetExternalIdOfTxPduInfo(ComTxPduId));
; ..\component\Com\Implementation\Com.c	 12864    }
; ..\component\Com\Implementation\Com.c	 12865  }
; ..\component\Com\Implementation\Com.c	 12866  #endif
; ..\component\Com\Implementation\Com.c	 12867  
; ..\component\Com\Implementation\Com.c	 12868  #if ((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) || (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON) || (COM_EXISTS_TRANSMIT_CLRUBOFTXPDUINFO == STD_ON) || (COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12869  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12870  Com_TxLLIf_SetTxAttributes
; ..\component\Com\Implementation\Com.c	 12871  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12872  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12873   *
; ..\component\Com\Implementation\Com.c	 12874   *
; ..\component\Com\Implementation\Com.c	 12875   *
; ..\component\Com\Implementation\Com.c	 12876   *
; ..\component\Com\Implementation\Com.c	 12877   *
; ..\component\Com\Implementation\Com.c	 12878   *
; ..\component\Com\Implementation\Com.c	 12879  
; ..\component\Com\Implementation\Com.c	 12880  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12881  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxLLIf_SetTxAttributes(PduIdType ComTxPduId, Std_ReturnType status)
; ..\component\Com\Implementation\Com.c	 12882  {
; ..\component\Com\Implementation\Com.c	 12883    /* #10 If the value of status is positive */
; ..\component\Com\Implementation\Com.c	 12884    if(status == E_OK)
; ..\component\Com\Implementation\Com.c	 12885    {
; ..\component\Com\Implementation\Com.c	 12886  # if (COM_EXISTS_TRANSMIT_CLRUBOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12887      /* #20 If the Update Bit clear context is TRANSMIT, clear the Update Bits */
; ..\component\Com\Implementation\Com.c	 12888      if(COM_TRANSMIT_CLRUBOFTXPDUINFO == Com_GetClrUbOfTxPduInfo(ComTxPduId))
; ..\component\Com\Implementation\Com.c	 12889      {
; ..\component\Com\Implementation\Com.c	 12890        Com_TxBuffer_ClearUpdateBits(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 12891      }
; ..\component\Com\Implementation\Com.c	 12892  # endif
; ..\component\Com\Implementation\Com.c	 12893  # if (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12894  #  if (COM_DIRECTTRIGGER == STD_ON)
; ..\component\Com\Implementation\Com.c	 12895      if(Com_IsDirectTrigger(ComTxPduId)) /* COV_COM_DIRECTTRIGGER */
; ..\component\Com\Implementation\Com.c	 12896  #  endif
; ..\component\Com\Implementation\Com.c	 12897      {
; ..\component\Com\Implementation\Com.c	 12898        /* \trace SPEC-2736857 */ /* \trace SPEC-2736858 */
; ..\component\Com\Implementation\Com.c	 12899        /* #30 Reload the Minimum Delay timer */
; ..\component\Com\Implementation\Com.c	 12900        Com_SetDelayTimeCnt(ComTxPduId, Com_GetMinimumDelayOfTxModeInfo(ComTxPduId));     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 12901      }
; ..\component\Com\Implementation\Com.c	 12902  # endif
; ..\component\Com\Implementation\Com.c	 12903    }
; ..\component\Com\Implementation\Com.c	 12904  # if ((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) || (COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 12905    /* #40 Otherwise */
; ..\component\Com\Implementation\Com.c	 12906    else
; ..\component\Com\Implementation\Com.c	 12907    {
; ..\component\Com\Implementation\Com.c	 12908  #  if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12909      /* #50 If the ComIPdu is a TP PDU, set the state to READY */
; ..\component\Com\Implementation\Com.c	 12910      if(Com_IsTxTpInfoUsedOfTxPduInfo(ComTxPduId))       /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12911      {
; ..\component\Com\Implementation\Com.c	 12912        /* \trace SPEC-2736898 */
; ..\component\Com\Implementation\Com.c	 12913        Com_ResetTxTpConnection(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 12914      }
; ..\component\Com\Implementation\Com.c	 12915  #  endif
; ..\component\Com\Implementation\Com.c	 12916  #  if (COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12917      /* #60 Clear the WaitingForConfirmation flag */
; ..\component\Com\Implementation\Com.c	 12918      Com_SetWaitingForConfirmation(ComTxPduId, FALSE);   /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 12919  #  endif
; ..\component\Com\Implementation\Com.c	 12920    }
; ..\component\Com\Implementation\Com.c	 12921  # endif
; ..\component\Com\Implementation\Com.c	 12922  }
; ..\component\Com\Implementation\Com.c	 12923  #endif
; ..\component\Com\Implementation\Com.c	 12924  
; ..\component\Com\Implementation\Com.c	 12925  #if (COM_TXPDUCALLOUTFUNCPTRUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12926  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12927  Com_TxLLIf_GetTxPduCalloutFuncPtr
; ..\component\Com\Implementation\Com.c	 12928  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12929  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12930   *
; ..\component\Com\Implementation\Com.c	 12931   *
; ..\component\Com\Implementation\Com.c	 12932  
; ..\component\Com\Implementation\Com.c	 12933  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12934  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_TxLLIf_GetTxPduCalloutFuncPtr(PduIdType ComTxPduId, P2VAR(PduInfoType, AUTOMATIC, AUTOMATIC) PduInfo)  /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	 12935  {
; ..\component\Com\Implementation\Com.c	 12936    boolean CalloutResult = TRUE; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 12937    /* #10 If the ComIPdu has a configured callout */
; ..\component\Com\Implementation\Com.c	 12938    if(Com_IsTxPduCalloutFuncPtrUsedOfTxPduInfo(ComTxPduId))      /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12939    {
; ..\component\Com\Implementation\Com.c	 12940      /* #20 Call the callout with the PduInfo (if ASR 4.1.x callouts are enabled) or with the SduDataPtr */
; ..\component\Com\Implementation\Com.c	 12941      Com_TxPduCalloutFuncPtrIdxOfTxPduInfoType idx = Com_GetTxPduCalloutFuncPtrIdxOfTxPduInfo(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 12942  # if (COM_IPDUCALLOUT_USEPDUINFOPTR == STD_ON)
; ..\component\Com\Implementation\Com.c	 12943      CalloutResult = Com_GetTxPduCalloutFuncPtr(idx) (ComTxPduId, PduInfo);      /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	 12944  # else
; ..\component\Com\Implementation\Com.c	 12945      CalloutResult = Com_GetTxPduCalloutFuncPtr(idx) (ComTxPduId, (P2VAR(uint8, AUTOMATIC, AUTOMATIC)) PduInfo->SduDataPtr);     /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	 12946  # endif
; ..\component\Com\Implementation\Com.c	 12947    }
; ..\component\Com\Implementation\Com.c	 12948    return CalloutResult;
; ..\component\Com\Implementation\Com.c	 12949  }
; ..\component\Com\Implementation\Com.c	 12950  #endif
; ..\component\Com\Implementation\Com.c	 12951  
; ..\component\Com\Implementation\Com.c	 12952  #if (COM_TRIGGER_TRANSMIT_API == STD_ON)
; ..\component\Com\Implementation\Com.c	 12953  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 12954    Com_TriggerTransmit_Process
; ..\component\Com\Implementation\Com.c	 12955  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12956  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 12957   *
; ..\component\Com\Implementation\Com.c	 12958   *
; ..\component\Com\Implementation\Com.c	 12959   *
; ..\component\Com\Implementation\Com.c	 12960   *
; ..\component\Com\Implementation\Com.c	 12961   *
; ..\component\Com\Implementation\Com.c	 12962   *
; ..\component\Com\Implementation\Com.c	 12963   *
; ..\component\Com\Implementation\Com.c	 12964   *
; ..\component\Com\Implementation\Com.c	 12965   *
; ..\component\Com\Implementation\Com.c	 12966   *
; ..\component\Com\Implementation\Com.c	 12967  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 12968  LOCAL_INLINE FUNC(Std_ReturnType, COM_CODE) Com_TriggerTransmit_Process(PduIdType TxPduId, P2VAR(PduInfoType, AUTOMATIC, COM_APPL_VAR) PduInfoPtr)
; ..\component\Com\Implementation\Com.c	 12969  {
; ..\component\Com\Implementation\Com.c	 12970    uint8 retVal = E_NOT_OK;      /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 12971    PduInfoType PduInfo;
; ..\component\Com\Implementation\Com.c	 12972  # if (COM_TXPDUINFO == STD_ON)  /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	 12973    /* #05 If the PDU length fits into the passed buffer */
; ..\component\Com\Implementation\Com.c	 12974    if(PduInfoPtr->SduLength >= Com_GetTxSduLength(TxPduId))
; ..\component\Com\Implementation\Com.c	 12975    {
; ..\component\Com\Implementation\Com.c	 12976      PduInfo.SduDataPtr = NULL_PTR;      /* PRQA S 2982 */ /* MD_Com_2982 */
; ..\component\Com\Implementation\Com.c	 12977      /* #10 If the ComIPdu is not a Zero Byte PDU, set the SduDataPtr to PDU buffer address otherwise set the SduDataPtr to NULL_PTR */
; ..\component\Com\Implementation\Com.c	 12978      if(Com_IsTxBufferUsedOfTxPduInfo(TxPduId))  /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12979      {
; ..\component\Com\Implementation\Com.c	 12980        PduInfo.SduDataPtr = Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxPduInfo(TxPduId));
; ..\component\Com\Implementation\Com.c	 12981      }
; ..\component\Com\Implementation\Com.c	 12982  
; ..\component\Com\Implementation\Com.c	 12983      /* #20 Set the SduLength to the current TxSduLength */
; ..\component\Com\Implementation\Com.c	 12984      PduInfo.SduLength = (PduLengthType) Com_GetTxSduLength(TxPduId);
; ..\component\Com\Implementation\Com.c	 12985  
; ..\component\Com\Implementation\Com.c	 12986      SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 12987  
; ..\component\Com\Implementation\Com.c	 12988      /* \trace CREQ-103166 */
; ..\component\Com\Implementation\Com.c	 12989  #  if  (COM_TXPDUTTCALLOUTFUNCPTRUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 12990      /* #30 If a IPdu trigger transmit callout is configured */
; ..\component\Com\Implementation\Com.c	 12991      if(Com_IsTxPduTTCalloutFuncPtrUsedOfTxPduInfo(TxPduId))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 12992      {
; ..\component\Com\Implementation\Com.c	 12993        /* #40 Call the trigger transmit callout with the PduInfo (if ASR 4.1.x callouts are enabled) or with the SduDataPtr */
; ..\component\Com\Implementation\Com.c	 12994        Com_TxPduTTCalloutFuncPtrIdxOfTxPduInfoType idx = Com_GetTxPduTTCalloutFuncPtrIdxOfTxPduInfo(TxPduId);
; ..\component\Com\Implementation\Com.c	 12995  #   if (COM_IPDUCALLOUT_USEPDUINFOPTR == STD_ON)
; ..\component\Com\Implementation\Com.c	 12996        (void) Com_GetTxPduTTCalloutFuncPtr(idx) (TxPduId, (P2VAR(PduInfoType, AUTOMATIC, AUTOMATIC)) & PduInfo); /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	 12997  #   else
; ..\component\Com\Implementation\Com.c	 12998        (void) Com_GetTxPduTTCalloutFuncPtr(idx) (TxPduId, (P2VAR(uint8, AUTOMATIC, AUTOMATIC)) PduInfo.SduDataPtr);      /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	 12999  #   endif
; ..\component\Com\Implementation\Com.c	 13000      }
; ..\component\Com\Implementation\Com.c	 13001  #  endif
; ..\component\Com\Implementation\Com.c	 13002  
; ..\component\Com\Implementation\Com.c	 13003      /* #50 Copy the PDU buffer data to the provided pointer */
; ..\component\Com\Implementation\Com.c	 13004      VStdLib_MemCpy_s(PduInfoPtr->SduDataPtr, Com_GetTxBufferLengthOfTxPduInfo(TxPduId), PduInfo.SduDataPtr, PduInfo.SduLength); /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_VSTDLIB_SAFE */
; ..\component\Com\Implementation\Com.c	 13005  
; ..\component\Com\Implementation\Com.c	 13006  #  if (COM_EXISTS_TRIGGER_TRANSMIT_CLRUBOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13007      /* #60 If the Update Bit clear context is TRIGGER_TRANSMIT, clear the Update Bits */
; ..\component\Com\Implementation\Com.c	 13008      if(COM_TRIGGER_TRANSMIT_CLRUBOFTXPDUINFO == Com_GetClrUbOfTxPduInfo(TxPduId))
; ..\component\Com\Implementation\Com.c	 13009      {
; ..\component\Com\Implementation\Com.c	 13010        Com_TxBuffer_ClearUpdateBits(TxPduId);
; ..\component\Com\Implementation\Com.c	 13011      }
; ..\component\Com\Implementation\Com.c	 13012  #  endif
; ..\component\Com\Implementation\Com.c	 13013      SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 13014      /* #70 Set the provided SduLength pointer to the value of the current SduLength */
; ..\component\Com\Implementation\Com.c	 13015      PduInfoPtr->SduLength = PduInfo.SduLength;  /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 13016      /* #80 Return E_OK If the ComIPduGroup is active */
; ..\component\Com\Implementation\Com.c	 13017      if(Com_IsTxPduGrpActive(TxPduId))
; ..\component\Com\Implementation\Com.c	 13018      {
; ..\component\Com\Implementation\Com.c	 13019        retVal = E_OK;
; ..\component\Com\Implementation\Com.c	 13020      }
; ..\component\Com\Implementation\Com.c	 13021    }
; ..\component\Com\Implementation\Com.c	 13022  # endif
; ..\component\Com\Implementation\Com.c	 13023  
; ..\component\Com\Implementation\Com.c	 13024    COM_DUMMY_STATEMENT(TxPduId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 13025    COM_DUMMY_STATEMENT(PduInfoPtr);      /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 13026    return retVal;
; ..\component\Com\Implementation\Com.c	 13027  }
; ..\component\Com\Implementation\Com.c	 13028  #endif
; ..\component\Com\Implementation\Com.c	 13029  
; ..\component\Com\Implementation\Com.c	 13030  #if((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) || (COM_TX_CONFIRMATION_API == STD_ON))
; ..\component\Com\Implementation\Com.c	 13031  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13032    Com_TxConfirmation_Process
; ..\component\Com\Implementation\Com.c	 13033  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13034  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13035   *
; ..\component\Com\Implementation\Com.c	 13036   *
; ..\component\Com\Implementation\Com.c	 13037   *
; ..\component\Com\Implementation\Com.c	 13038   *
; ..\component\Com\Implementation\Com.c	 13039   *
; ..\component\Com\Implementation\Com.c	 13040   *
; ..\component\Com\Implementation\Com.c	 13041   *
; ..\component\Com\Implementation\Com.c	 13042  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13043  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxConfirmation_Process(PduIdType TxPduId)
; ..\component\Com\Implementation\Com.c	 13044  {
; ..\component\Com\Implementation\Com.c	 13045    boolean doNotificationProcessing = FALSE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 13046  
; ..\component\Com\Implementation\Com.c	 13047    SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 13048  
; ..\component\Com\Implementation\Com.c	 13049  # if ((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) && (COM_EXISTS_CONFIRMATION_CLRUBOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 13050    if(COM_CONFIRMATION_CLRUBOFTXPDUINFO == Com_GetClrUbOfTxPduInfo(TxPduId))
; ..\component\Com\Implementation\Com.c	 13051    {
; ..\component\Com\Implementation\Com.c	 13052      Com_TxBuffer_ClearUpdateBits(TxPduId);
; ..\component\Com\Implementation\Com.c	 13053    }
; ..\component\Com\Implementation\Com.c	 13054  # endif
; ..\component\Com\Implementation\Com.c	 13055  
; ..\component\Com\Implementation\Com.c	 13056    /* \trace SPEC-2736844 */
; ..\component\Com\Implementation\Com.c	 13057    if(Com_IsTxPduGrpActive(TxPduId))     /* COV_COM_TP_ONLY */
; ..\component\Com\Implementation\Com.c	 13058    {
; ..\component\Com\Implementation\Com.c	 13059  # if ((COM_MINIMUMDELAYOFTXMODEINFO == STD_ON) || (COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13060      if(Com_TxModeHdlr_Confirmation(TxPduId) == TRUE)    /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_REPETITIVE_TRANSMISSION */
; ..\component\Com\Implementation\Com.c	 13061  # endif
; ..\component\Com\Implementation\Com.c	 13062      {
; ..\component\Com\Implementation\Com.c	 13063        doNotificationProcessing = TRUE;
; ..\component\Com\Implementation\Com.c	 13064  # if (COM_TXTOUTINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13065  
; ..\component\Com\Implementation\Com.c	 13066        Com_TxDlMon_TxConfirmation(TxPduId);
; ..\component\Com\Implementation\Com.c	 13067  # endif
; ..\component\Com\Implementation\Com.c	 13068      }
; ..\component\Com\Implementation\Com.c	 13069    }
; ..\component\Com\Implementation\Com.c	 13070  
; ..\component\Com\Implementation\Com.c	 13071    SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 13072  
; ..\component\Com\Implementation\Com.c	 13073  # if ((COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)||(COM_CBKTXACKIMFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)||(COM_CBKTXACKDEFFUNCPTRINDUSEDOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 13074    if(doNotificationProcessing == TRUE)
; ..\component\Com\Implementation\Com.c	 13075    {
; ..\component\Com\Implementation\Com.c	 13076      Com_TxNHdlr_Confirmation(TxPduId);
; ..\component\Com\Implementation\Com.c	 13077    }
; ..\component\Com\Implementation\Com.c	 13078  # else
; ..\component\Com\Implementation\Com.c	 13079    COM_DUMMY_STATEMENT(doNotificationProcessing);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 13080  # endif
; ..\component\Com\Implementation\Com.c	 13081  
; ..\component\Com\Implementation\Com.c	 13082    COM_DUMMY_STATEMENT(TxPduId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 13083  }
; ..\component\Com\Implementation\Com.c	 13084  #endif
; ..\component\Com\Implementation\Com.c	 13085  
; ..\component\Com\Implementation\Com.c	 13086  #if (COM_TXBUFFERMETADATAUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13087  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13088  Com_TxLLIf_CpyInitMetaDataToBffr
; ..\component\Com\Implementation\Com.c	 13089  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13090  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13091   *
; ..\component\Com\Implementation\Com.c	 13092  
; ..\component\Com\Implementation\Com.c	 13093  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13094  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxLLIf_CpyInitMetaDataToBffr(PduIdType ComTxPduId)
; ..\component\Com\Implementation\Com.c	 13095  {
; ..\component\Com\Implementation\Com.c	 13096    if(Com_IsTxBufferMetaDataUsedOfTxPduInfo(ComTxPduId))
; ..\component\Com\Implementation\Com.c	 13097    {
; ..\component\Com\Implementation\Com.c	 13098      /* #10 Copy the meta data initial value to the Tx PDU buffer */
; ..\component\Com\Implementation\Com.c	 13099      P2VAR(uint8, AUTOMATIC, COM_VAR_NOINIT) pTxPduBuffer = Com_GetAddrTxBuffer(Com_GetTxBufferMetaDataStartIdxOfTxPduInfo(ComTxPduId));
; ..\component\Com\Implementation\Com.c	 13100      P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) pInitValues = Com_GetAddrTxPduInitValue(Com_GetTxPduInitValueMetaDataStartIdxOfTxPduInfo(ComTxPduId));
; ..\component\Com\Implementation\Com.c	 13101      uint8_least metaDataLength = Com_GetMetaDataLengthOfTxPduInfo(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13102      uint8_least idxMetaData;
; ..\component\Com\Implementation\Com.c	 13103      for(idxMetaData = 0; idxMetaData < metaDataLength; idxMetaData++)
; ..\component\Com\Implementation\Com.c	 13104      {
; ..\component\Com\Implementation\Com.c	 13105        pTxPduBuffer[idxMetaData] = pInitValues[idxMetaData];     /* SBSW_COM_CSL01 */
; ..\component\Com\Implementation\Com.c	 13106      }
; ..\component\Com\Implementation\Com.c	 13107    }
; ..\component\Com\Implementation\Com.c	 13108  }
; ..\component\Com\Implementation\Com.c	 13109  #endif
; ..\component\Com\Implementation\Com.c	 13110  
; ..\component\Com\Implementation\Com.c	 13111  #if (COM_TXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13112  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13113    Com_TxModeHdlr_InitTxIpdu
; ..\component\Com\Implementation\Com.c	 13114  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13115  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13116   *
; ..\component\Com\Implementation\Com.c	 13117   *
; ..\component\Com\Implementation\Com.c	 13118   *
; ..\component\Com\Implementation\Com.c	 13119   *
; ..\component\Com\Implementation\Com.c	 13120   *
; ..\component\Com\Implementation\Com.c	 13121   *
; ..\component\Com\Implementation\Com.c	 13122   *
; ..\component\Com\Implementation\Com.c	 13123  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13124  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_InitTxIpdu(PduIdType ComPduId)
; ..\component\Com\Implementation\Com.c	 13125  {
; ..\component\Com\Implementation\Com.c	 13126  # if (COM_TXSIGINFOFILTERINITVALUEINDENDIDXOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13127    {
; ..\component\Com\Implementation\Com.c	 13128      /* \trace SPEC-2736775 */
; ..\component\Com\Implementation\Com.c	 13129      /* #10 Iterate overall related tx filter infos and set the old filter value to the initial value, the buffer is ApplType specific */
; ..\component\Com\Implementation\Com.c	 13130      Com_TxSigInfoFilterInitValueIndEndIdxOfTxModeInfoType idxTxSigInfoFilterInitValueInd = Com_GetTxSigInfoFilterInitValueIndStartIdxOfTxModeInfo(ComPduId);
; ..\component\Com\Implementation\Com.c	 13131      for(; idxTxSigInfoFilterInitValueInd < Com_GetTxSigInfoFilterInitValueIndEndIdxOfTxModeInfo(ComPduId); idxTxSigInfoFilterInitValueInd++)
; ..\component\Com\Implementation\Com.c	 13132      {
; ..\component\Com\Implementation\Com.c	 13133        Com_SignalIdType idxTxSigInfo = (Com_SignalIdType) Com_GetTxSigInfoFilterInitValueInd(idxTxSigInfoFilterInitValueInd);
; ..\component\Com\Implementation\Com.c	 13134  #  if(COM_FILTERINITVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13135        if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 13136        {
; ..\component\Com\Implementation\Com.c	 13137          Com_FilterInitValueIdxOfTxSigInfoType idxTxFilterOldValue = Com_GetFilterInitValueIdxOfTxSigInfo(idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	 13138          switch (Com_GetApplTypeOfTxSigInfo(idxTxSigInfo))
; ..\component\Com\Implementation\Com.c	 13139          {
; ..\component\Com\Implementation\Com.c	 13140  /* jet: GeneralSwitchCasePerApplType snippet */
; ..\component\Com\Implementation\Com.c	 13141  #   if (COM_TXFILTERINITVALUEUINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	 13142            case COM_UINT8_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 13143            {
; ..\component\Com\Implementation\Com.c	 13144              Com_SetTxFilterOldValueUInt8(idxTxFilterOldValue, Com_GetTxFilterInitValueUInt8(idxTxFilterOldValue));      /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13145              break;
; ..\component\Com\Implementation\Com.c	 13146            }
; ..\component\Com\Implementation\Com.c	 13147  #   endif
; ..\component\Com\Implementation\Com.c	 13148  #   if (COM_TXFILTERINITVALUESINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	 13149            case COM_SINT8_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 13150            {
; ..\component\Com\Implementation\Com.c	 13151              Com_SetTxFilterOldValueSInt8(idxTxFilterOldValue, Com_GetTxFilterInitValueSInt8(idxTxFilterOldValue));      /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13152              break;
; ..\component\Com\Implementation\Com.c	 13153            }
; ..\component\Com\Implementation\Com.c	 13154  #   endif
; ..\component\Com\Implementation\Com.c	 13155  #   if (COM_TXFILTERINITVALUEUINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	 13156            case COM_UINT16_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 13157            {
; ..\component\Com\Implementation\Com.c	 13158              Com_SetTxFilterOldValueUInt16(idxTxFilterOldValue, Com_GetTxFilterInitValueUInt16(idxTxFilterOldValue));    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13159              break;
; ..\component\Com\Implementation\Com.c	 13160            }
; ..\component\Com\Implementation\Com.c	 13161  #   endif
; ..\component\Com\Implementation\Com.c	 13162  #   if (COM_TXFILTERINITVALUESINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	 13163            case COM_SINT16_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 13164            {
; ..\component\Com\Implementation\Com.c	 13165              Com_SetTxFilterOldValueSInt16(idxTxFilterOldValue, Com_GetTxFilterInitValueSInt16(idxTxFilterOldValue));    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13166              break;
; ..\component\Com\Implementation\Com.c	 13167            }
; ..\component\Com\Implementation\Com.c	 13168  #   endif
; ..\component\Com\Implementation\Com.c	 13169  #   if (COM_TXFILTERINITVALUEUINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 13170            case COM_UINT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 13171            {
; ..\component\Com\Implementation\Com.c	 13172              Com_SetTxFilterOldValueUInt32(idxTxFilterOldValue, Com_GetTxFilterInitValueUInt32(idxTxFilterOldValue));    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13173              break;
; ..\component\Com\Implementation\Com.c	 13174            }
; ..\component\Com\Implementation\Com.c	 13175  #   endif
; ..\component\Com\Implementation\Com.c	 13176  #   if (COM_TXFILTERINITVALUESINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 13177            case COM_SINT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 13178            {
; ..\component\Com\Implementation\Com.c	 13179              Com_SetTxFilterOldValueSInt32(idxTxFilterOldValue, Com_GetTxFilterInitValueSInt32(idxTxFilterOldValue));    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13180              break;
; ..\component\Com\Implementation\Com.c	 13181            }
; ..\component\Com\Implementation\Com.c	 13182  #   endif
; ..\component\Com\Implementation\Com.c	 13183  #   if (COM_TXFILTERINITVALUEUINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 13184            case COM_UINT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 13185            {
; ..\component\Com\Implementation\Com.c	 13186              Com_SetTxFilterOldValueUInt64(idxTxFilterOldValue, Com_GetTxFilterInitValueUInt64(idxTxFilterOldValue));    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13187              break;
; ..\component\Com\Implementation\Com.c	 13188            }
; ..\component\Com\Implementation\Com.c	 13189  #   endif
; ..\component\Com\Implementation\Com.c	 13190  #   if (COM_TXFILTERINITVALUESINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 13191            case COM_SINT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 13192            {
; ..\component\Com\Implementation\Com.c	 13193              Com_SetTxFilterOldValueSInt64(idxTxFilterOldValue, Com_GetTxFilterInitValueSInt64(idxTxFilterOldValue));    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13194              break;
; ..\component\Com\Implementation\Com.c	 13195            }
; ..\component\Com\Implementation\Com.c	 13196  #   endif
; ..\component\Com\Implementation\Com.c	 13197  #   if (COM_TXFILTERINITVALUEFLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 13198            case COM_FLOAT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 13199            {
; ..\component\Com\Implementation\Com.c	 13200              Com_SetTxFilterOldValueFloat32(idxTxFilterOldValue, Com_GetTxFilterInitValueFloat32(idxTxFilterOldValue));  /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13201              break;
; ..\component\Com\Implementation\Com.c	 13202            }
; ..\component\Com\Implementation\Com.c	 13203  #   endif
; ..\component\Com\Implementation\Com.c	 13204  #   if (COM_TXFILTERINITVALUEFLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 13205            case COM_FLOAT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 13206            {
; ..\component\Com\Implementation\Com.c	 13207              Com_SetTxFilterOldValueFloat64(idxTxFilterOldValue, Com_GetTxFilterInitValueFloat64(idxTxFilterOldValue));  /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13208              break;
; ..\component\Com\Implementation\Com.c	 13209            }
; ..\component\Com\Implementation\Com.c	 13210  #   endif
; ..\component\Com\Implementation\Com.c	 13211            default:     /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	 13212              break;
; ..\component\Com\Implementation\Com.c	 13213          }
; ..\component\Com\Implementation\Com.c	 13214        }
; ..\component\Com\Implementation\Com.c	 13215  #  endif
; ..\component\Com\Implementation\Com.c	 13216  #  if ((COM_TXFILTERINITVALUEARRAYBASEDFILTERINITVALUEUSEDOFTXSIGINFO == STD_ON) && (COM_EXISTS_UINT8_N_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 13217        if(Com_IsTxFilterInitValueArrayBasedFilterInitValueUsedOfTxSigInfo(idxTxSigInfo)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 13218        {
; ..\component\Com\Implementation\Com.c	 13219          switch (Com_GetApplTypeOfTxSigInfo(idxTxSigInfo))
; ..\component\Com\Implementation\Com.c	 13220          {
; ..\component\Com\Implementation\Com.c	 13221            case COM_UINT8_N_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 13222            {
; ..\component\Com\Implementation\Com.c	 13223              Com_TxFilterInitValueArrayBasedIterType bufferIdx = Com_GetTxFilterInitValueArrayBasedFilterInitValueStartIdxOfTxSigInfo(idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	 13224              VStdMemCpyRamToRam(Com_GetAddrTxFilterOldValueArrayBased(bufferIdx), Com_GetAddrTxFilterInitValueArrayBased(bufferIdx), Com_GetTxFilterInitValueArrayBasedFilterInitValueLengthOfTxSigInfo(idxTxSigInfo));  /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 13225              break;
; ..\component\Com\Implementation\Com.c	 13226            }
; ..\component\Com\Implementation\Com.c	 13227            default:     /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	 13228              break;
; ..\component\Com\Implementation\Com.c	 13229          }
; ..\component\Com\Implementation\Com.c	 13230        }
; ..\component\Com\Implementation\Com.c	 13231  #  endif
; ..\component\Com\Implementation\Com.c	 13232      }
; ..\component\Com\Implementation\Com.c	 13233    }
; ..\component\Com\Implementation\Com.c	 13234  # endif
; ..\component\Com\Implementation\Com.c	 13235  # if (COM_FILTERINFOIDXOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13236    {
; ..\component\Com\Implementation\Com.c	 13237      /* #20 Iterate overall related tx filter states and set them to their initial state */
; ..\component\Com\Implementation\Com.c	 13238      Com_TxFilterInitStateEndIdxOfTxModeInfoType idxTxFilterInitState = Com_GetTxFilterInitStateStartIdxOfTxModeInfo(ComPduId);
; ..\component\Com\Implementation\Com.c	 13239      for(; idxTxFilterInitState < Com_GetTxFilterInitStateEndIdxOfTxModeInfo(ComPduId); idxTxFilterInitState++)
; ..\component\Com\Implementation\Com.c	 13240      {
; ..\component\Com\Implementation\Com.c	 13241        Com_SetTxFilterState(idxTxFilterInitState, Com_IsTxFilterInitState(idxTxFilterInitState));        /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13242      }
; ..\component\Com\Implementation\Com.c	 13243    }
; ..\component\Com\Implementation\Com.c	 13244  # endif
; ..\component\Com\Implementation\Com.c	 13245    /* #30 Set the initial Tx Mode of the passed Tx ComIPdu, initialize that mode and remove the transmit request */
; ..\component\Com\Implementation\Com.c	 13246    Com_SetCurrentTxMode(ComPduId, Com_IsInitModeOfTxModeInfo(ComPduId)); /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13247    Com_TxModeHdlr_InitTxMode(ComPduId);
; ..\component\Com\Implementation\Com.c	 13248    Com_SetTransmitRequest(ComPduId, FALSE);      /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13249  
; ..\component\Com\Implementation\Com.c	 13250  # if ((COM_PERIODICOFTXMODETRUE == STD_ON) || (COM_PERIODICOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13251    /* #40 If the current tx mode is a cyclic tx mode, set the cycle counter to the start delay time */
; ..\component\Com\Implementation\Com.c	 13252    if(Com_IsCyclicSendRequest(ComPduId)) /* COV_COM_CYCLIC_SEND_REQUEST */
; ..\component\Com\Implementation\Com.c	 13253    {
; ..\component\Com\Implementation\Com.c	 13254      Com_SetCycleTimeCnt(ComPduId, (Com_CycleTimeCntType) Com_TxModeHdlr_GetCurrentTimeOffset(ComPduId));        /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */ /* COV_COM_SETCYCLETIMECOUNT */
; ..\component\Com\Implementation\Com.c	 13255    }
; ..\component\Com\Implementation\Com.c	 13256  # endif
; ..\component\Com\Implementation\Com.c	 13257  # if (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13258    /* #50 Set the minimum delay counter to 0 */
; ..\component\Com\Implementation\Com.c	 13259    Com_SetDelayTimeCnt(ComPduId, 0u);    /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13260  # endif
; ..\component\Com\Implementation\Com.c	 13261    /* #60 Clear eventbased trigger Flag if configured */
; ..\component\Com\Implementation\Com.c	 13262  # if (COM_DIRECTTRIGGER == STD_ON)
; ..\component\Com\Implementation\Com.c	 13263    Com_SetDirectTrigger(ComPduId, FALSE);        /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13264  # endif
; ..\component\Com\Implementation\Com.c	 13265  }       /* PRQA S 6010, 6030 */ /* MD_MSR_STPTH , MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	 13266  #endif
; ..\component\Com\Implementation\Com.c	 13267  
; ..\component\Com\Implementation\Com.c	 13268  #if ((COM_PERIODICOFTXMODETRUE == STD_ON) || (COM_PERIODICOFTXMODEFALSE == STD_ON) || (COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON) || (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 13269  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13270    Com_TxModeHdlr_MainFunctionTx_CycleCounter
; ..\component\Com\Implementation\Com.c	 13271  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13272  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13273   *
; ..\component\Com\Implementation\Com.c	 13274   *
; ..\component\Com\Implementation\Com.c	 13275   *
; ..\component\Com\Implementation\Com.c	 13276  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13277  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_MainFunctionTx_CycleCounter(void)
; ..\component\Com\Implementation\Com.c	 13278  {
; ..\component\Com\Implementation\Com.c	 13279    Com_TxCyclicPduIterType ComTxCyclicPduIterator = 0u;
; ..\component\Com\Implementation\Com.c	 13280    Com_TxPduInfoIdxOfTxCyclicPduType ComTxPduId;
; ..\component\Com\Implementation\Com.c	 13281  
; ..\component\Com\Implementation\Com.c	 13282    Com_TxModeHdlr_EnterExclusiveArea_CycleCounter();
; ..\component\Com\Implementation\Com.c	 13283    /* #10 Iterate over all Tx Pdu Infos */
; ..\component\Com\Implementation\Com.c	 13284    for(; ComTxCyclicPduIterator < Com_GetSizeOfTxCyclicPdu(); ComTxCyclicPduIterator++)
; ..\component\Com\Implementation\Com.c	 13285    {
; ..\component\Com\Implementation\Com.c	 13286      ComTxPduId = Com_GetTxPduInfoIdxOfTxCyclicPdu(ComTxCyclicPduIterator);
; ..\component\Com\Implementation\Com.c	 13287      {
; ..\component\Com\Implementation\Com.c	 13288        /* #20 If the Tx ComIPdu is active, process the cyclic transmission mode, the repetition counter and the MDT counter */
; ..\component\Com\Implementation\Com.c	 13289        if(Com_IsTxPduGrpActive(ComTxPduId))
; ..\component\Com\Implementation\Com.c	 13290        {
; ..\component\Com\Implementation\Com.c	 13291          Com_TxModeHdlr_SetTransmitRequestAndCycleCnt((PduIdType) ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13292        }
; ..\component\Com\Implementation\Com.c	 13293      }
; ..\component\Com\Implementation\Com.c	 13294      Com_TxModeHdlr_ThresholdCheck_CycleCounter();
; ..\component\Com\Implementation\Com.c	 13295    }
; ..\component\Com\Implementation\Com.c	 13296    Com_TxModeHdlr_ExitExclusiveArea_CycleCounter();
; ..\component\Com\Implementation\Com.c	 13297  }
; ..\component\Com\Implementation\Com.c	 13298  
; ..\component\Com\Implementation\Com.c	 13299  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	 13300  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13301    Com_TxModeHdlr_EnterExclusiveArea_CycleCounter
; ..\component\Com\Implementation\Com.c	 13302  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13303  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13304   *
; ..\component\Com\Implementation\Com.c	 13305   *
; ..\component\Com\Implementation\Com.c	 13306  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13307  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_EnterExclusiveArea_CycleCounter(void)
; ..\component\Com\Implementation\Com.c	 13308  {
; ..\component\Com\Implementation\Com.c	 13309    /* #10 Enter the tx cyclic processing exclusive area */
; ..\component\Com\Implementation\Com.c	 13310    SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 13311  }
; ..\component\Com\Implementation\Com.c	 13312  
; ..\component\Com\Implementation\Com.c	 13313  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13314    Com_TxModeHdlr_ExitExclusiveArea_CycleCounter
; ..\component\Com\Implementation\Com.c	 13315  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13316  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13317   *
; ..\component\Com\Implementation\Com.c	 13318   *
; ..\component\Com\Implementation\Com.c	 13319   *
; ..\component\Com\Implementation\Com.c	 13320  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13321  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_ExitExclusiveArea_CycleCounter(void)
; ..\component\Com\Implementation\Com.c	 13322  {
; ..\component\Com\Implementation\Com.c	 13323    /* #05 Reload the counter with the threshold value */
; ..\component\Com\Implementation\Com.c	 13324    Com_SetTxCyclicProcessingISRLockCounter(Com_GetTxCyclicProcessingISRLockThreshold()); /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 13325    /* #10 Exit the tx cyclic processing exclusive area */
; ..\component\Com\Implementation\Com.c	 13326    SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 13327  }
; ..\component\Com\Implementation\Com.c	 13328  
; ..\component\Com\Implementation\Com.c	 13329  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13330    Com_TxModeHdlr_ThresholdCheck_CycleCounter
; ..\component\Com\Implementation\Com.c	 13331  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13332  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13333   *
; ..\component\Com\Implementation\Com.c	 13334   *
; ..\component\Com\Implementation\Com.c	 13335   *
; ..\component\Com\Implementation\Com.c	 13336  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13337  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_ThresholdCheck_CycleCounter(void)
; ..\component\Com\Implementation\Com.c	 13338  {
; ..\component\Com\Implementation\Com.c	 13339    if(Com_GetTxCyclicProcessingISRLockCounter() > 0u)
; ..\component\Com\Implementation\Com.c	 13340    {
; ..\component\Com\Implementation\Com.c	 13341      Com_DecTxCyclicProcessingISRLockCounter();  /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 13342    }
; ..\component\Com\Implementation\Com.c	 13343    else
; ..\component\Com\Implementation\Com.c	 13344    {
; ..\component\Com\Implementation\Com.c	 13345      Com_TxModeHdlr_ExitExclusiveArea_CycleCounter();
; ..\component\Com\Implementation\Com.c	 13346      Com_TxModeHdlr_EnterExclusiveArea_CycleCounter();
; ..\component\Com\Implementation\Com.c	 13347    }
; ..\component\Com\Implementation\Com.c	 13348  }
; ..\component\Com\Implementation\Com.c	 13349  
; ..\component\Com\Implementation\Com.c	 13350  #endif
; ..\component\Com\Implementation\Com.c	 13351  
; ..\component\Com\Implementation\Com.c	 13352  
; ..\component\Com\Implementation\Com.c	 13353  #if (COM_TXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13354  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13355    Com_TxModeHdlr_MainFunctionTx_Transmit
; ..\component\Com\Implementation\Com.c	 13356  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13357  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13358   *
; ..\component\Com\Implementation\Com.c	 13359   *
; ..\component\Com\Implementation\Com.c	 13360  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13361  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_MainFunctionTx_Transmit(void)
; ..\component\Com\Implementation\Com.c	 13362  {
; ..\component\Com\Implementation\Com.c	 13363    PduIdType ComTxPduId;
; ..\component\Com\Implementation\Com.c	 13364    Com_TxModeHdlr_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	 13365  
; ..\component\Com\Implementation\Com.c	 13366    /* #10 Iterate over all Tx ComIPdus and process the related transmit requests */
; ..\component\Com\Implementation\Com.c	 13367    for(ComTxPduId = 0u; ComTxPduId < Com_GetSizeOfTxPduInfo(); ComTxPduId++)
; ..\component\Com\Implementation\Com.c	 13368    {
; ..\component\Com\Implementation\Com.c	 13369  # if (COM_INVALIDHNDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13370      if(!Com_IsInvalidHndOfTxPduInfo(ComTxPduId))
; ..\component\Com\Implementation\Com.c	 13371  # endif
; ..\component\Com\Implementation\Com.c	 13372      {
; ..\component\Com\Implementation\Com.c	 13373        Com_TxModeHdlr_MainFunctionTx_ProcessTransmit(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13374      }
; ..\component\Com\Implementation\Com.c	 13375      Com_TxModeHdlr_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	 13376    }
; ..\component\Com\Implementation\Com.c	 13377    Com_TxModeHdlr_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	 13378  }
; ..\component\Com\Implementation\Com.c	 13379  
; ..\component\Com\Implementation\Com.c	 13380  
; ..\component\Com\Implementation\Com.c	 13381  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	 13382  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13383    Com_TxModeHdlr_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	 13384  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13385  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13386   *
; ..\component\Com\Implementation\Com.c	 13387   *
; ..\component\Com\Implementation\Com.c	 13388  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13389  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_EnterExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	 13390  {
; ..\component\Com\Implementation\Com.c	 13391    /* #10 Enter the tx processing exclusive area */
; ..\component\Com\Implementation\Com.c	 13392    SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 13393  }
; ..\component\Com\Implementation\Com.c	 13394  
; ..\component\Com\Implementation\Com.c	 13395  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13396    Com_TxModeHdlr_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	 13397  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13398  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13399   *
; ..\component\Com\Implementation\Com.c	 13400   *
; ..\component\Com\Implementation\Com.c	 13401   *
; ..\component\Com\Implementation\Com.c	 13402  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13403  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_ExitExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	 13404  {
; ..\component\Com\Implementation\Com.c	 13405    /* #05 Reload the counter with the threshold value */
; ..\component\Com\Implementation\Com.c	 13406    Com_SetTxProcessingISRLockCounter(Com_GetTxProcessingISRLockThreshold());     /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 13407    /* #10 Exit the tx processing exclusive area */
; ..\component\Com\Implementation\Com.c	 13408    SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 13409  }
; ..\component\Com\Implementation\Com.c	 13410  
; ..\component\Com\Implementation\Com.c	 13411  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13412    Com_TxModeHdlr_ThresholdCheck
; ..\component\Com\Implementation\Com.c	 13413  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13414  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13415   *
; ..\component\Com\Implementation\Com.c	 13416   *
; ..\component\Com\Implementation\Com.c	 13417   *
; ..\component\Com\Implementation\Com.c	 13418  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13419  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_ThresholdCheck(void)
; ..\component\Com\Implementation\Com.c	 13420  {
; ..\component\Com\Implementation\Com.c	 13421    if(Com_GetTxProcessingISRLockCounter() > 0u)  /* COV_COM_THRESHOLD_TX */
; ..\component\Com\Implementation\Com.c	 13422    {
; ..\component\Com\Implementation\Com.c	 13423      Com_DecTxProcessingISRLockCounter();        /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 13424    }
; ..\component\Com\Implementation\Com.c	 13425    else
; ..\component\Com\Implementation\Com.c	 13426    {
; ..\component\Com\Implementation\Com.c	 13427      Com_TxModeHdlr_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	 13428      Com_TxModeHdlr_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	 13429    }
; ..\component\Com\Implementation\Com.c	 13430  }
; ..\component\Com\Implementation\Com.c	 13431  
; ..\component\Com\Implementation\Com.c	 13432  #endif
; ..\component\Com\Implementation\Com.c	 13433  
; ..\component\Com\Implementation\Com.c	 13434  #if (COM_TXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13435  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13436    Com_TxModeHdlr_MainFunctionTx_ProcessTransmit
; ..\component\Com\Implementation\Com.c	 13437  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13438  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13439   *
; ..\component\Com\Implementation\Com.c	 13440   *
; ..\component\Com\Implementation\Com.c	 13441   *
; ..\component\Com\Implementation\Com.c	 13442   *
; ..\component\Com\Implementation\Com.c	 13443   *
; ..\component\Com\Implementation\Com.c	 13444  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13445  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_MainFunctionTx_ProcessTransmit(PduIdType ComTxPduId)
; ..\component\Com\Implementation\Com.c	 13446  {
; ..\component\Com\Implementation\Com.c	 13447    /* #10 If the passed Tx ComIPdu is active, the MDT has expired and a transmit request is set */
; ..\component\Com\Implementation\Com.c	 13448    if(Com_IsTxPduGrpActive(ComTxPduId))  /* COV_COM_NO_IPDUGROUPS */
; ..\component\Com\Implementation\Com.c	 13449    {
; ..\component\Com\Implementation\Com.c	 13450  
; ..\component\Com\Implementation\Com.c	 13451  # if (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13452      /* Delay Time and Transmission Handling */
; ..\component\Com\Implementation\Com.c	 13453      if(Com_GetDelayTimeCnt(ComTxPduId) == 0u)
; ..\component\Com\Implementation\Com.c	 13454  # endif
; ..\component\Com\Implementation\Com.c	 13455      {
; ..\component\Com\Implementation\Com.c	 13456        if(Com_IsTransmitRequest(ComTxPduId))
; ..\component\Com\Implementation\Com.c	 13457        {
; ..\component\Com\Implementation\Com.c	 13458          /* #20 Trigger the transmission by a call of Com_TxLLIf_Transmit check if the return of Com_TxLLIf_Transmit is positive, if ComRetryFailedTransmitRequest is enabled */
; ..\component\Com\Implementation\Com.c	 13459  # if (COM_RETRY_FAILED_TRANSMIT_REQUESTS == STD_ON)
; ..\component\Com\Implementation\Com.c	 13460          if(Com_TxLLIf_Transmit(ComTxPduId) == E_OK)
; ..\component\Com\Implementation\Com.c	 13461  # else
; ..\component\Com\Implementation\Com.c	 13462          (void) Com_TxLLIf_Transmit(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13463  # endif
; ..\component\Com\Implementation\Com.c	 13464          {
; ..\component\Com\Implementation\Com.c	 13465            /* #30 Reset the transmit request */
; ..\component\Com\Implementation\Com.c	 13466            Com_SetTransmitRequest(ComTxPduId, FALSE);    /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13467          }
; ..\component\Com\Implementation\Com.c	 13468        }
; ..\component\Com\Implementation\Com.c	 13469      }
; ..\component\Com\Implementation\Com.c	 13470    }
; ..\component\Com\Implementation\Com.c	 13471  }
; ..\component\Com\Implementation\Com.c	 13472  #endif
; ..\component\Com\Implementation\Com.c	 13473  
; ..\component\Com\Implementation\Com.c	 13474  #if (COM_TXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13475  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13476    Com_TxModeHdlr_InitTxMode
; ..\component\Com\Implementation\Com.c	 13477  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13478  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13479   *
; ..\component\Com\Implementation\Com.c	 13480   *
; ..\component\Com\Implementation\Com.c	 13481   *
; ..\component\Com\Implementation\Com.c	 13482   *
; ..\component\Com\Implementation\Com.c	 13483   *
; ..\component\Com\Implementation\Com.c	 13484   *
; ..\component\Com\Implementation\Com.c	 13485   *
; ..\component\Com\Implementation\Com.c	 13486  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13487  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_InitTxMode(CONST(PduIdType, AUTOMATIC) ComTxPduId)
; ..\component\Com\Implementation\Com.c	 13488  {
; ..\component\Com\Implementation\Com.c	 13489  # if ((COM_PERIODICOFTXMODETRUE == STD_ON) || (COM_PERIODICOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13490    /* #10 If the current tx mode of the passed Tx ComIPdu is periodic */
; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)
; ..\component\Com\Implementation\Com.c	 13492    {
; ..\component\Com\Implementation\Com.c	 13493      Com_SetCyclicSendRequest(ComTxPduId, TRUE); /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13494      /* #20 Enable the cyclic send request and trigger the first transmission within the next Com_MainfunctionTx call */
; ..\component\Com\Implementation\Com.c	 13495  #  if (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13496      Com_SetTransmitRequest(ComTxPduId, TRUE);   /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13497      Com_SetCycleTimeCnt(ComTxPduId, (Com_CycleTimeCntType) (Com_TxModeHdlr_GetCurrentTimePeriod(ComTxPduId) + Com_GetDelayTimeCnt(ComTxPduId) + 1u));   /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */ /* COV_COM_SETCYCLETIMECOUNT */
; ..\component\Com\Implementation\Com.c	 13498  
; ..\component\Com\Implementation\Com.c	 13499  #   if (COM_EXISTS_NORMAL_MODEOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13500      /* #30 Reload Tx Deadline monitoring timer if configured */
; ..\component\Com\Implementation\Com.c	 13501      Com_TxModeHdlr_ReloadTxDlMonCounter(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13502  #   endif
; ..\component\Com\Implementation\Com.c	 13503  #  else
; ..\component\Com\Implementation\Com.c	 13504      Com_SetCycleTimeCnt(ComTxPduId, (Com_CycleTimeCntType) 1u); /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13505  #  endif
; ..\component\Com\Implementation\Com.c	 13506    }
; ..\component\Com\Implementation\Com.c	 13507    /* #40 Otherwise disable the cyclic send request and remove the transmit request flag */
; ..\component\Com\Implementation\Com.c	 13508    else
; ..\component\Com\Implementation\Com.c	 13509    {
; ..\component\Com\Implementation\Com.c	 13510      Com_SetCyclicSendRequest(ComTxPduId, FALSE);        /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13511      Com_SetTransmitRequest(ComTxPduId, FALSE);  /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13512    }
; ..\component\Com\Implementation\Com.c	 13513  # else
; ..\component\Com\Implementation\Com.c	 13514    Com_SetTransmitRequest(ComTxPduId, FALSE);    /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13515  # endif
; ..\component\Com\Implementation\Com.c	 13516  
; ..\component\Com\Implementation\Com.c	 13517  # if ((COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13518    /* #50 Set the repetition counter to 0 */
; ..\component\Com\Implementation\Com.c	 13519    Com_SetRepCnt(ComTxPduId, 0u);        /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13520  # endif
; ..\component\Com\Implementation\Com.c	 13521  
; ..\component\Com\Implementation\Com.c	 13522  # if (COM_EXISTS_NORMAL_MODEOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13523    /* #60 Reset the tx timeout counter */
; ..\component\Com\Implementation\Com.c	 13524    Com_TxDlMon_SwitchIpduTxMode(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13525  # endif
; ..\component\Com\Implementation\Com.c	 13526  }
; ..\component\Com\Implementation\Com.c	 13527  
; ..\component\Com\Implementation\Com.c	 13528  
; ..\component\Com\Implementation\Com.c	 13529  # if (COM_TXFILTERINITSTATEUSEDOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13530  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13531    Com_TxModeHdlr_UpdateTMS
; ..\component\Com\Implementation\Com.c	 13532  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13533  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13534   *
; ..\component\Com\Implementation\Com.c	 13535   *
; ..\component\Com\Implementation\Com.c	 13536   *
; ..\component\Com\Implementation\Com.c	 13537   *
; ..\component\Com\Implementation\Com.c	 13538   *
; ..\component\Com\Implementation\Com.c	 13539  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13540  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_UpdateTMS(CONST(PduIdType, AUTOMATIC) idxTxModeInfo)
; ..\component\Com\Implementation\Com.c	 13541  {
; ..\component\Com\Implementation\Com.c	 13542    boolean newTxMode = FALSE;    /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 13543    Com_TxFilterInitStateEndIdxOfTxModeInfoType filterIndex = Com_GetTxFilterInitStateStartIdxOfTxModeInfo(idxTxModeInfo);
; ..\component\Com\Implementation\Com.c	 13544  
; ..\component\Com\Implementation\Com.c	 13545    /* #10 Iterate over all related filter states, if at least one filter state is true, the Tx Mode true is active. Otherwise the Tx Mode false is active */
; ..\component\Com\Implementation\Com.c	 13546    for(; filterIndex < Com_GetTxFilterInitStateEndIdxOfTxModeInfo(idxTxModeInfo); filterIndex++)
; ..\component\Com\Implementation\Com.c	 13547    {
; ..\component\Com\Implementation\Com.c	 13548      if(Com_IsTxFilterState(filterIndex))
; ..\component\Com\Implementation\Com.c	 13549      {
; ..\component\Com\Implementation\Com.c	 13550        newTxMode = TRUE;
; ..\component\Com\Implementation\Com.c	 13551        break;
; ..\component\Com\Implementation\Com.c	 13552      }
; ..\component\Com\Implementation\Com.c	 13553    }
; ..\component\Com\Implementation\Com.c	 13554  
; ..\component\Com\Implementation\Com.c	 13555    /* #20 If the Tx Mode has changed */
; ..\component\Com\Implementation\Com.c	 13556    if(Com_IsCurrentTxMode(idxTxModeInfo) != newTxMode)   /* COV_COM_TX_FILTER */
; ..\component\Com\Implementation\Com.c	 13557    {
; ..\component\Com\Implementation\Com.c	 13558      /* #30 Update the current Tx Mode with the new Tx Mode, initialize the new Tx Mode and trigger a deferred transmission without repetitions */
; ..\component\Com\Implementation\Com.c	 13559      Com_SetCurrentTxMode(idxTxModeInfo, newTxMode);     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13560  
; ..\component\Com\Implementation\Com.c	 13561      Com_TxModeHdlr_InitTxMode(idxTxModeInfo);
; ..\component\Com\Implementation\Com.c	 13562  #  if ((COM_DIRECTOFTXMODETRUE == STD_ON) || (COM_DIRECTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13563      /* COM582: If a change of the TMS causes a change of the transmission mode to the transmission mode DIRECT an immediate, respecting the MDT, direct/ n-times transmission to the underlying layer shall be initiated. */
; ..\component\Com\Implementation\Com.c	 13564      Com_TxModeHdlr_TriggerDeferredTransmitAndSetTimer(idxTxModeInfo, FALSE);
; ..\component\Com\Implementation\Com.c	 13565  #  endif
; ..\component\Com\Implementation\Com.c	 13566    }
; ..\component\Com\Implementation\Com.c	 13567  }
; ..\component\Com\Implementation\Com.c	 13568  # endif
; ..\component\Com\Implementation\Com.c	 13569  
; ..\component\Com\Implementation\Com.c	 13570  # if ((COM_MINIMUMDELAYOFTXMODEINFO == STD_ON) || (COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13571  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13572    Com_TxModeHdlr_Confirmation
; ..\component\Com\Implementation\Com.c	 13573  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13574  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13575   *
; ..\component\Com\Implementation\Com.c	 13576   *
; ..\component\Com\Implementation\Com.c	 13577   *
; ..\component\Com\Implementation\Com.c	 13578  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13579  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_TxModeHdlr_Confirmation(CONST(PduIdType, AUTOMATIC) ComTxPduId)
; ..\component\Com\Implementation\Com.c	 13580  {
; ..\component\Com\Implementation\Com.c	 13581    boolean retVal = TRUE;        /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 13582  
; ..\component\Com\Implementation\Com.c	 13583  #  if (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13584    /* #10 Reload the minimum delay time counter of the passed Tx ComIPdu */
; ..\component\Com\Implementation\Com.c	 13585  
; ..\component\Com\Implementation\Com.c	 13586  #   if (COM_DIRECTTRIGGER == STD_ON)
; ..\component\Com\Implementation\Com.c	 13587    if(Com_IsDirectTrigger(ComTxPduId))
; ..\component\Com\Implementation\Com.c	 13588  #   endif
; ..\component\Com\Implementation\Com.c	 13589    {     /* \trace SPEC-2736859 */
; ..\component\Com\Implementation\Com.c	 13590      Com_SetDelayTimeCnt(ComTxPduId, Com_GetMinimumDelayOfTxModeInfo(ComTxPduId));       /* SBSW_COM_IDXPARAM_INTERNALFCT_DET_CSL02 */
; ..\component\Com\Implementation\Com.c	 13591  #   if (COM_DIRECTTRIGGER == STD_ON)
; ..\component\Com\Implementation\Com.c	 13592      Com_SetDirectTrigger(ComTxPduId, FALSE);    /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13593  #   endif
; ..\component\Com\Implementation\Com.c	 13594    }
; ..\component\Com\Implementation\Com.c	 13595  #  endif
; ..\component\Com\Implementation\Com.c	 13596  #  if ((COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13597  
; ..\component\Com\Implementation\Com.c	 13598    /* #20 Check if the all requested transmits have been performed and this is the final Tx Confirmation */
; ..\component\Com\Implementation\Com.c	 13599    if(0u < Com_GetRepCnt(ComTxPduId))    /* COV_COM_REPETITIONS */
; ..\component\Com\Implementation\Com.c	 13600    {
; ..\component\Com\Implementation\Com.c	 13601      Com_DecRepCnt(ComTxPduId);  /* SBSW_COM_IDXPARAM_INTERNALFCT_DET_CSL02 */
; ..\component\Com\Implementation\Com.c	 13602      if(0u < Com_GetRepCnt(ComTxPduId))  /* COV_COM_REPETITIONS_1 */
; ..\component\Com\Implementation\Com.c	 13603      {
; ..\component\Com\Implementation\Com.c	 13604        /* this is the first or an intermediate confirmation for an N-Times transmission return false to avoid notification of the upper layer */
; ..\component\Com\Implementation\Com.c	 13605        retVal = FALSE;
; ..\component\Com\Implementation\Com.c	 13606      }
; ..\component\Com\Implementation\Com.c	 13607    }
; ..\component\Com\Implementation\Com.c	 13608  #  endif
; ..\component\Com\Implementation\Com.c	 13609    return retVal;
; ..\component\Com\Implementation\Com.c	 13610  }
; ..\component\Com\Implementation\Com.c	 13611  # endif
; ..\component\Com\Implementation\Com.c	 13612  
; ..\component\Com\Implementation\Com.c	 13613  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13614    Com_TxModeHdlr_StopTxIpdus
; ..\component\Com\Implementation\Com.c	 13615  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13616  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13617   *
; ..\component\Com\Implementation\Com.c	 13618   *
; ..\component\Com\Implementation\Com.c	 13619   *
; ..\component\Com\Implementation\Com.c	 13620  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13621  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_StopTxIpdus(CONST(PduIdType, AUTOMATIC) ComTxPduId)
; ..\component\Com\Implementation\Com.c	 13622  {
; ..\component\Com\Implementation\Com.c	 13623    /* #10 Reset transmit request, set repetition counter and repetition cycle counter to 0 */
; ..\component\Com\Implementation\Com.c	 13624    Com_SetTransmitRequest(ComTxPduId, FALSE);    /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13625  # if ((COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13626    Com_SetRepCnt(ComTxPduId, 0u);        /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13627    Com_SetRepCycleCnt(ComTxPduId, 0u);   /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13628  # endif
; ..\component\Com\Implementation\Com.c	 13629  # if ((COM_PERIODICOFTXMODETRUE == STD_ON) || (COM_PERIODICOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13630    /* #20 reload the time offset counter and set minimum delay time to 0. If the I-PDU is started again, the time offset is already set */
; ..\component\Com\Implementation\Com.c	 13631    Com_SetCycleTimeCnt(ComTxPduId, (Com_CycleTimeCntType) Com_TxModeHdlr_GetCurrentTimeOffset(ComTxPduId));      /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */ /* COV_COM_TIMEOFFSET */
; ..\component\Com\Implementation\Com.c	 13632  # endif
; ..\component\Com\Implementation\Com.c	 13633  
; ..\component\Com\Implementation\Com.c	 13634  # if (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13635    Com_SetDelayTimeCnt(ComTxPduId, 0u);  /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13636  # endif
; ..\component\Com\Implementation\Com.c	 13637  }
; ..\component\Com\Implementation\Com.c	 13638  #endif
; ..\component\Com\Implementation\Com.c	 13639  
; ..\component\Com\Implementation\Com.c	 13640  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13641  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13642    Com_TxModeHdlr_TriggerIpduSendOnceDeferred
; ..\component\Com\Implementation\Com.c	 13643  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13644  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13645   *
; ..\component\Com\Implementation\Com.c	 13646   *
; ..\component\Com\Implementation\Com.c	 13647   *
; ..\component\Com\Implementation\Com.c	 13648   *
; ..\component\Com\Implementation\Com.c	 13649   *
; ..\component\Com\Implementation\Com.c	 13650  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13651  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_TriggerIpduSendOnceDeferred(CONST(PduIdType, AUTOMATIC) ComTxPduId)
; ..\component\Com\Implementation\Com.c	 13652  {
; ..\component\Com\Implementation\Com.c	 13653    /* #10 If the passed Tx ComIPdu is active */
; ..\component\Com\Implementation\Com.c	 13654    if(Com_IsTxPduGrpActive(ComTxPduId))  /* COV_COM_NO_IPDUGROUPS */
; ..\component\Com\Implementation\Com.c	 13655    {
; ..\component\Com\Implementation\Com.c	 13656      /* #20 Set eventbased trigger Flag if configured */
; ..\component\Com\Implementation\Com.c	 13657  # if (COM_DIRECTTRIGGER == STD_ON)
; ..\component\Com\Implementation\Com.c	 13658      Com_SetDirectTrigger(ComTxPduId, TRUE);     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13659  # endif
; ..\component\Com\Implementation\Com.c	 13660      /* #30 Set the related transmit request */
; ..\component\Com\Implementation\Com.c	 13661      Com_SetTransmitRequest(ComTxPduId, TRUE);   /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13662  
; ..\component\Com\Implementation\Com.c	 13663  # if (COM_TXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13664      /* #40 Reload Tx Deadline monitoring timer if configured */
; ..\component\Com\Implementation\Com.c	 13665      Com_TxModeHdlr_ReloadTxDlMonCounter(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13666  # endif
; ..\component\Com\Implementation\Com.c	 13667    }
; ..\component\Com\Implementation\Com.c	 13668  }
; ..\component\Com\Implementation\Com.c	 13669  #endif
; ..\component\Com\Implementation\Com.c	 13670  
; ..\component\Com\Implementation\Com.c	 13671  #if ((COM_PERIODICOFTXMODETRUE == STD_ON) || (COM_PERIODICOFTXMODEFALSE == STD_ON) || (COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON) || (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 13672  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13673    Com_TxModeHdlr_SetTransmitRequestAndCycleCnt
; ..\component\Com\Implementation\Com.c	 13674  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13675  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13676   *
; ..\component\Com\Implementation\Com.c	 13677   *
; ..\component\Com\Implementation\Com.c	 13678   *
; ..\component\Com\Implementation\Com.c	 13679   *
; ..\component\Com\Implementation\Com.c	 13680   *
; ..\component\Com\Implementation\Com.c	 13681   *
; ..\component\Com\Implementation\Com.c	 13682   *
; ..\component\Com\Implementation\Com.c	 13683  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13684  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxModeHdlr_SetTransmitRequestAndCycleCnt(PduIdType ComTxPduId)
; ..\component\Com\Implementation\Com.c	 13685  {
; ..\component\Com\Implementation\Com.c	 13686  # if ((COM_PERIODICOFTXMODETRUE == STD_ON) || (COM_PERIODICOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13687    /* #10 If the passed Tx ComIPdu is in a cyclic Pdu, decrement the cycle counter */
; ..\component\Com\Implementation\Com.c	 13688    if(Com_IsCyclicSendRequest(ComTxPduId))       /* COV_COM_ONLY_CYCLIC_PDU */
; ..\component\Com\Implementation\Com.c	 13689    {
; ..\component\Com\Implementation\Com.c	 13690      Com_DecCycleTimeCnt(ComTxPduId);    /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13691      /* #20 If the cycle counter is 0, set the transmit flag and reload the cycle counter */
; ..\component\Com\Implementation\Com.c	 13692      if(0u == Com_GetCycleTimeCnt(ComTxPduId))
; ..\component\Com\Implementation\Com.c	 13693      {
; ..\component\Com\Implementation\Com.c	 13694        Com_SetTransmitRequest(ComTxPduId, TRUE); /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13695        Com_SetCycleTimeCnt(ComTxPduId, (Com_CycleTimeCntType) Com_TxModeHdlr_GetCurrentTimePeriod(ComTxPduId));  /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */ /* COV_COM_SETCYCLETIMECOUNT */
; ..\component\Com\Implementation\Com.c	 13696  
; ..\component\Com\Implementation\Com.c	 13697  #  if (COM_EXISTS_NORMAL_MODEOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13698        /* #30 Reload Tx Deadline monitoring timer if configured */
; ..\component\Com\Implementation\Com.c	 13699        Com_TxModeHdlr_ReloadTxDlMonCounter(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13700  #  endif
; ..\component\Com\Implementation\Com.c	 13701      }
; ..\component\Com\Implementation\Com.c	 13702    }
; ..\component\Com\Implementation\Com.c	 13703  # endif
; ..\component\Com\Implementation\Com.c	 13704  # if ((COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13705    /* #40 If the repetition count is greater 0, decrement the repetition cycle counter */
; ..\component\Com\Implementation\Com.c	 13706    if(0u < Com_GetRepCnt(ComTxPduId))    /* COV_COM_NONTRIGGERED_REPETITION */
; ..\component\Com\Implementation\Com.c	 13707    {
; ..\component\Com\Implementation\Com.c	 13708      Com_DecRepCycleCnt(ComTxPduId);     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13709      /* #50 If the repetition cycle counter is equal 0, set a transmit request and reload the repetition cycle counter */
; ..\component\Com\Implementation\Com.c	 13710      if(0u == Com_GetRepCycleCnt(ComTxPduId))
; ..\component\Com\Implementation\Com.c	 13711      {
; ..\component\Com\Implementation\Com.c	 13712        Com_SetTransmitRequest(ComTxPduId, TRUE); /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13713        /* reload the repetition cycle time counter */
; ..\component\Com\Implementation\Com.c	 13714        Com_SetRepCycleCnt(ComTxPduId, Com_TxModeHdlr_GetCurrentRepetitionPeriod(ComTxPduId));    /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13715      }
; ..\component\Com\Implementation\Com.c	 13716    }
; ..\component\Com\Implementation\Com.c	 13717  # endif
; ..\component\Com\Implementation\Com.c	 13718  # if (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13719  
; ..\component\Com\Implementation\Com.c	 13720    /* #60 If the minimum delay time counter is greater 0, decrement the minimum delay time counter */
; ..\component\Com\Implementation\Com.c	 13721    if(Com_GetDelayTimeCnt(ComTxPduId) != 0u)
; ..\component\Com\Implementation\Com.c	 13722    {
; ..\component\Com\Implementation\Com.c	 13723      Com_DecDelayTimeCnt(ComTxPduId);    /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13724    }
; ..\component\Com\Implementation\Com.c	 13725  # endif
; ..\component\Com\Implementation\Com.c	 13726  }
; ..\component\Com\Implementation\Com.c	 13727  #endif
; ..\component\Com\Implementation\Com.c	 13728  
; ..\component\Com\Implementation\Com.c	 13729  #if (COM_GWTIMEOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13730  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13731    Com_TxModeHdlr_StopCyclicTransmission
; ..\component\Com\Implementation\Com.c	 13732  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13733  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13734   *
; ..\component\Com\Implementation\Com.c	 13735   *
; ..\component\Com\Implementation\Com.c	 13736  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13737  FUNC(void, COM_CODE) Com_TxModeHdlr_StopCyclicTransmission(CONST(PduIdType, AUTOMATIC) ComTxPduId)      /* PRQA S 1505 */ /* MD_MSR_Rule8.7 */
; ..\component\Com\Implementation\Com.c	 13738  {
; ..\component\Com\Implementation\Com.c	 13739    /* #10 Stop the cyclic transmission */
; ..\component\Com\Implementation\Com.c	 13740    Com_TxModeHdlr_StopTxIpdus(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13741    Com_SetCyclicSendRequest(ComTxPduId, FALSE);  /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13742  }
; ..\component\Com\Implementation\Com.c	 13743  
; ..\component\Com\Implementation\Com.c	 13744  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13745    Com_TxModeHdlr_StartCyclicTransmission
; ..\component\Com\Implementation\Com.c	 13746  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13747  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13748   *
; ..\component\Com\Implementation\Com.c	 13749   *
; ..\component\Com\Implementation\Com.c	 13750  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13751  FUNC(void, COM_CODE) Com_TxModeHdlr_StartCyclicTransmission(CONST(PduIdType, AUTOMATIC) ComTxPduId)     /* PRQA S 1505 */ /* MD_MSR_Rule8.7 */
; ..\component\Com\Implementation\Com.c	 13752  {
; ..\component\Com\Implementation\Com.c	 13753    /* #10 Enable the cyclic send transmission */
; ..\component\Com\Implementation\Com.c	 13754    if(!Com_IsCyclicSendRequest(ComTxPduId))
; ..\component\Com\Implementation\Com.c	 13755    {
; ..\component\Com\Implementation\Com.c	 13756      Com_SetCyclicSendRequest(ComTxPduId, TRUE); /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13757      Com_SetCycleTimeCnt(ComTxPduId, 1u);        /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13758    }
; ..\component\Com\Implementation\Com.c	 13759  }
; ..\component\Com\Implementation\Com.c	 13760  #endif
; ..\component\Com\Implementation\Com.c	 13761  
; ..\component\Com\Implementation\Com.c	 13762  #if ((((COM_DIRECTOFTXMODETRUE == STD_ON) || (COM_DIRECTOFTXMODEFALSE == STD_ON)) && ((COM_FILTERINFOUSEDOFTXSIGINFO == STD_ON) || (COM_GWTXPDUDESCRIPTIONINFOUSEDOFRXPDUINFO == STD_ON) || (COM_GENERATED_DESCRIPTION_ROUTING == STD_ON)))|| (COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON)||(COM_TRIGGEREDOFTXSIGINFO == STD_ON))    /* COV_COM_VAR_ELISA_STD_OFF_TF_tf_tf_tf_tf_xf_tf_tf */
; ..\component\Com\Implementation\Com.c	 13763  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13764    Com_TxModeHdlr_TriggerDeferredTransmitAndSetTimer
; ..\component\Com\Implementation\Com.c	 13765  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13766  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13767   *
; ..\component\Com\Implementation\Com.c	 13768   *
; ..\component\Com\Implementation\Com.c	 13769   *
; ..\component\Com\Implementation\Com.c	 13770   *
; ..\component\Com\Implementation\Com.c	 13771   *
; ..\component\Com\Implementation\Com.c	 13772   *
; ..\component\Com\Implementation\Com.c	 13773   *
; ..\component\Com\Implementation\Com.c	 13774   *
; ..\component\Com\Implementation\Com.c	 13775   *
; ..\component\Com\Implementation\Com.c	 13776  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13777  FUNC(void, COM_CODE) Com_TxModeHdlr_TriggerDeferredTransmitAndSetTimer(CONST(PduIdType, AUTOMATIC) ComTxPduId, boolean TriggerWithoutRepetition)        /* PRQA S 1505 */ /* MD_MSR_Rule8.7 */
; ..\component\Com\Implementation\Com.c	 13778  {
; ..\component\Com\Implementation\Com.c	 13779    /* If the passed Tx ComIPdu is active and the current tx mode is direct */
; ..\component\Com\Implementation\Com.c	 13780    if(Com_IsTxPduGrpActive(ComTxPduId))  /* COV_COM_TXIPDUGROUP_ACTIVE */
; ..\component\Com\Implementation\Com.c	 13781    {
; ..\component\Com\Implementation\Com.c	 13782      if(Com_TxModeHdlr_IsDirectTxMode(ComTxPduId) == TRUE)       /* COV_COM_ISDIRECT_TXMODE */
; ..\component\Com\Implementation\Com.c	 13783      {
; ..\component\Com\Implementation\Com.c	 13784        /* Set eventbased trigger Flag if configured */
; ..\component\Com\Implementation\Com.c	 13785  # if (COM_DIRECTTRIGGER == STD_ON)
; ..\component\Com\Implementation\Com.c	 13786        Com_SetDirectTrigger(ComTxPduId, TRUE);   /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13787  # endif
; ..\component\Com\Implementation\Com.c	 13788  # if ((COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13789        /* If the passed Tx ComIPdu is triggered without repetitions, set the transmit request and reload the Tx Deadline Monitoring timer if not already running */
; ..\component\Com\Implementation\Com.c	 13790        if(TriggerWithoutRepetition == TRUE)      /* COV_COM_DEFERREDIPDUSEND */
; ..\component\Com\Implementation\Com.c	 13791        {
; ..\component\Com\Implementation\Com.c	 13792  #  if (COM_EXISTS_NORMAL_MODEOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13793          Com_TxModeHdlr_ReloadTxDlMonCounter(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13794  #  endif
; ..\component\Com\Implementation\Com.c	 13795          Com_SetTransmitRequest(ComTxPduId, TRUE);       /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13796        }
; ..\component\Com\Implementation\Com.c	 13797        /* Otherwise, set the repetition count to the tx mode dependent repetition count value */
; ..\component\Com\Implementation\Com.c	 13798        else
; ..\component\Com\Implementation\Com.c	 13799        {
; ..\component\Com\Implementation\Com.c	 13800          Com_SetRepCnt(ComTxPduId, Com_TxModeHdlr_GetCurRepCnt(ComTxPduId));     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13801          /* If the repetition count is greater 0, set the repetition cycle counter to 1. Otherwise set the transmit request */
; ..\component\Com\Implementation\Com.c	 13802          if(0u < Com_GetRepCnt(ComTxPduId))      /* COV_COM_ZERO_REPETITION */
; ..\component\Com\Implementation\Com.c	 13803          {
; ..\component\Com\Implementation\Com.c	 13804  #  if (COM_EXISTS_NORMAL_MODEOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13805            /* SPEC-2736884 */
; ..\component\Com\Implementation\Com.c	 13806            if(Com_IsTxTOutInfoUsedOfTxPduInfo(ComTxPduId))       /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 13807            {
; ..\component\Com\Implementation\Com.c	 13808              /* Reload Tx Deadline Monitoring counter if configured */
; ..\component\Com\Implementation\Com.c	 13809              Com_TxTOutInfoIdxOfTxPduInfoType idxTxTOutInfo = Com_GetTxTOutInfoIdxOfTxPduInfo(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13810              Com_SetTxTOutCnt(idxTxTOutInfo, Com_GetFactorOfTxTOutInfo(idxTxTOutInfo));  /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13811            }
; ..\component\Com\Implementation\Com.c	 13812  #  endif
; ..\component\Com\Implementation\Com.c	 13813            /* trigger first transmission of n repetitive transmissions */
; ..\component\Com\Implementation\Com.c	 13814            Com_SetRepCycleCnt(ComTxPduId, 1u);   /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13815          }
; ..\component\Com\Implementation\Com.c	 13816          else
; ..\component\Com\Implementation\Com.c	 13817  # endif
; ..\component\Com\Implementation\Com.c	 13818          {
; ..\component\Com\Implementation\Com.c	 13819  # if (COM_EXISTS_NORMAL_MODEOFTXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13820            Com_TxModeHdlr_ReloadTxDlMonCounter(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13821  # endif
; ..\component\Com\Implementation\Com.c	 13822            Com_SetTransmitRequest(ComTxPduId, TRUE);     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13823          }
; ..\component\Com\Implementation\Com.c	 13824  # if ((COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 13825        }
; ..\component\Com\Implementation\Com.c	 13826  # endif
; ..\component\Com\Implementation\Com.c	 13827      }
; ..\component\Com\Implementation\Com.c	 13828    }
; ..\component\Com\Implementation\Com.c	 13829    COM_DUMMY_STATEMENT(TriggerWithoutRepetition);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 13830  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	 13831  #endif
; ..\component\Com\Implementation\Com.c	 13832  
; ..\component\Com\Implementation\Com.c	 13833  #if (COM_TXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13834  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13835    Com_TxModeHdlr_ReloadTxDlMonCounter
; ..\component\Com\Implementation\Com.c	 13836  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13837  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13838   *
; ..\component\Com\Implementation\Com.c	 13839   *
; ..\component\Com\Implementation\Com.c	 13840   *
; ..\component\Com\Implementation\Com.c	 13841  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13842  FUNC(void, COM_CODE) Com_TxModeHdlr_ReloadTxDlMonCounter(CONST(PduIdType, AUTOMATIC) ComTxPduId)        /* PRQA S 1505 */ /* MD_MSR_Rule8.7 */
; ..\component\Com\Implementation\Com.c	 13843  {
; ..\component\Com\Implementation\Com.c	 13844    /* #10 If Tx Deadline Monitoring is configured */
; ..\component\Com\Implementation\Com.c	 13845    if(Com_IsTxTOutInfoUsedOfTxPduInfo(ComTxPduId))       /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 13846    {
; ..\component\Com\Implementation\Com.c	 13847      Com_TxTOutInfoIdxOfTxPduInfoType idxTxTOutInfo = Com_GetTxTOutInfoIdxOfTxPduInfo(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 13848      if(Com_GetTxTOutCnt(idxTxTOutInfo) == 0u)
; ..\component\Com\Implementation\Com.c	 13849      {
; ..\component\Com\Implementation\Com.c	 13850        /* #20 Reload Tx Deadline Monitoring timer if not already running */
; ..\component\Com\Implementation\Com.c	 13851        Com_SetTxTOutCnt(idxTxTOutInfo, Com_GetFactorOfTxTOutInfo(idxTxTOutInfo));        /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13852      }
; ..\component\Com\Implementation\Com.c	 13853    }
; ..\component\Com\Implementation\Com.c	 13854  }
; ..\component\Com\Implementation\Com.c	 13855  #endif
; ..\component\Com\Implementation\Com.c	 13856  
; ..\component\Com\Implementation\Com.c	 13857  
; ..\component\Com\Implementation\Com.c	 13858  #if ((COM_CBKTXACKDEFFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)||(COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 13859  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13860    Com_TxNHdlr_InitTxIpdu
; ..\component\Com\Implementation\Com.c	 13861  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13862  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13863   *
; ..\component\Com\Implementation\Com.c	 13864   *
; ..\component\Com\Implementation\Com.c	 13865   *
; ..\component\Com\Implementation\Com.c	 13866  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13867  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxNHdlr_InitTxIpdu(Com_TxPduInfoIterType ComPduId)
; ..\component\Com\Implementation\Com.c	 13868  {
; ..\component\Com\Implementation\Com.c	 13869  # if (COM_CBKTXACKDEFFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13870    /* #10 Set HandleTxPduDeferred flag to its initial value */
; ..\component\Com\Implementation\Com.c	 13871    Com_SetHandleTxPduDeferred(ComPduId, FALSE);  /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13872  # endif
; ..\component\Com\Implementation\Com.c	 13873  # if (COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13874    /* #20 Set WaitingForConfirmation flag to its initial value */
; ..\component\Com\Implementation\Com.c	 13875    Com_SetWaitingForConfirmation(ComPduId, FALSE);       /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13876  # endif
; ..\component\Com\Implementation\Com.c	 13877  }
; ..\component\Com\Implementation\Com.c	 13878  #endif
; ..\component\Com\Implementation\Com.c	 13879  
; ..\component\Com\Implementation\Com.c	 13880  #if (COM_CBKTXACKDEFFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13881  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13882    Com_TxNHdlr_MainFunctionTx
; ..\component\Com\Implementation\Com.c	 13883  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13884  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13885   *
; ..\component\Com\Implementation\Com.c	 13886   *
; ..\component\Com\Implementation\Com.c	 13887   *
; ..\component\Com\Implementation\Com.c	 13888   *
; ..\component\Com\Implementation\Com.c	 13889   *
; ..\component\Com\Implementation\Com.c	 13890  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13891  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxNHdlr_MainFunctionTx(void)
; ..\component\Com\Implementation\Com.c	 13892  {
; ..\component\Com\Implementation\Com.c	 13893    PduIdType ComPduId;
; ..\component\Com\Implementation\Com.c	 13894    /* #10 Iterate over all messages and check if a deferred transmission is pending for this message */
; ..\component\Com\Implementation\Com.c	 13895    for(ComPduId = 0; ComPduId < Com_GetSizeOfTxPduInfo(); ComPduId++)
; ..\component\Com\Implementation\Com.c	 13896    {
; ..\component\Com\Implementation\Com.c	 13897  # if (COM_INVALIDHNDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13898      /* #20 Check that ComPduId is a valid HandleId */
; ..\component\Com\Implementation\Com.c	 13899      if(!Com_IsInvalidHndOfTxPduInfo(ComPduId))
; ..\component\Com\Implementation\Com.c	 13900  # endif
; ..\component\Com\Implementation\Com.c	 13901      {
; ..\component\Com\Implementation\Com.c	 13902        /* #30 If the Handle Deferred flag is set */
; ..\component\Com\Implementation\Com.c	 13903        if(Com_IsHandleTxPduDeferred(ComPduId))
; ..\component\Com\Implementation\Com.c	 13904        {
; ..\component\Com\Implementation\Com.c	 13905          Com_SetHandleTxPduDeferred(ComPduId, FALSE);    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 13906          {
; ..\component\Com\Implementation\Com.c	 13907            /* #40 Call all related notification function of this ComIPdu */
; ..\component\Com\Implementation\Com.c	 13908            Com_CbkTxAckDefFuncPtrIndEndIdxOfTxPduInfoType notiIndIndex = Com_GetCbkTxAckDefFuncPtrIndStartIdxOfTxPduInfo(ComPduId);
; ..\component\Com\Implementation\Com.c	 13909            for(; notiIndIndex < Com_GetCbkTxAckDefFuncPtrIndEndIdxOfTxPduInfo(ComPduId); notiIndIndex++)
; ..\component\Com\Implementation\Com.c	 13910            {
; ..\component\Com\Implementation\Com.c	 13911              Com_GetCbkTxAckDefFuncPtr(Com_GetCbkTxAckDefFuncPtrInd(notiIndIndex)) ();   /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	 13912            }
; ..\component\Com\Implementation\Com.c	 13913          }
; ..\component\Com\Implementation\Com.c	 13914        }
; ..\component\Com\Implementation\Com.c	 13915      }
; ..\component\Com\Implementation\Com.c	 13916    }
; ..\component\Com\Implementation\Com.c	 13917  }
; ..\component\Com\Implementation\Com.c	 13918  #endif
; ..\component\Com\Implementation\Com.c	 13919  
; ..\component\Com\Implementation\Com.c	 13920  #if (COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13921  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13922    Com_TxNHdlr_StopTxIpdu
; ..\component\Com\Implementation\Com.c	 13923  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13924  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13925   *
; ..\component\Com\Implementation\Com.c	 13926   *
; ..\component\Com\Implementation\Com.c	 13927  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13928  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxNHdlr_StopTxIpdu(Com_TxPduInfoIterType ComPduId)
; ..\component\Com\Implementation\Com.c	 13929  {
; ..\component\Com\Implementation\Com.c	 13930    /* #10 Call all related error notification function of this ComIPdu */
; ..\component\Com\Implementation\Com.c	 13931    Com_CbkTxErrFuncPtrIndEndIdxOfTxPduInfoType notiIndIndex = Com_GetCbkTxErrFuncPtrIndStartIdxOfTxPduInfo(ComPduId);
; ..\component\Com\Implementation\Com.c	 13932    for(; notiIndIndex < Com_GetCbkTxErrFuncPtrIndEndIdxOfTxPduInfo(ComPduId); notiIndIndex++)
; ..\component\Com\Implementation\Com.c	 13933    {
; ..\component\Com\Implementation\Com.c	 13934      Com_GetCbkTxErrFuncPtr(Com_GetCbkTxErrFuncPtrInd(notiIndIndex)) (); /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	 13935    }
; ..\component\Com\Implementation\Com.c	 13936    Com_SetWaitingForConfirmation(ComPduId, FALSE);       /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 13937  }
; ..\component\Com\Implementation\Com.c	 13938  #endif
; ..\component\Com\Implementation\Com.c	 13939  
; ..\component\Com\Implementation\Com.c	 13940  #if ((COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON) || (COM_CBKTXACKIMFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)||(COM_CBKTXACKDEFFUNCPTRINDUSEDOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 13941  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13942    Com_TxNHdlr_Confirmation
; ..\component\Com\Implementation\Com.c	 13943  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13944  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13945   *
; ..\component\Com\Implementation\Com.c	 13946   *
; ..\component\Com\Implementation\Com.c	 13947   *
; ..\component\Com\Implementation\Com.c	 13948   *
; ..\component\Com\Implementation\Com.c	 13949  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13950  LOCAL_INLINE FUNC(void, COM_CODE) Com_TxNHdlr_Confirmation(PduIdType ComPduId)
; ..\component\Com\Implementation\Com.c	 13951  {
; ..\component\Com\Implementation\Com.c	 13952  # if (COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13953    /* #10 Clear notification flag */
; ..\component\Com\Implementation\Com.c	 13954    Com_SetWaitingForConfirmation(ComPduId, FALSE);       /* SBSW_COM_IDXPARAM_INTERNALFCT_DET_CSL02 */
; ..\component\Com\Implementation\Com.c	 13955  # endif
; ..\component\Com\Implementation\Com.c	 13956  
; ..\component\Com\Implementation\Com.c	 13957  # if (COM_CBKTXACKIMFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13958    {
; ..\component\Com\Implementation\Com.c	 13959      /* #20 Call all related notification function of this ComIPdu */
; ..\component\Com\Implementation\Com.c	 13960      Com_CbkTxAckImFuncPtrIndEndIdxOfTxPduInfoType notiIndIndex = Com_GetCbkTxAckImFuncPtrIndStartIdxOfTxPduInfo(ComPduId);
; ..\component\Com\Implementation\Com.c	 13961      for(; notiIndIndex < Com_GetCbkTxAckImFuncPtrIndEndIdxOfTxPduInfo(ComPduId); notiIndIndex++)
; ..\component\Com\Implementation\Com.c	 13962      {
; ..\component\Com\Implementation\Com.c	 13963        Com_GetCbkTxAckImFuncPtr(Com_GetCbkTxAckImFuncPtrInd(notiIndIndex)) ();   /* SBSW_COM_FCT_PTR_CALL_CSL03 */
; ..\component\Com\Implementation\Com.c	 13964      }
; ..\component\Com\Implementation\Com.c	 13965    }
; ..\component\Com\Implementation\Com.c	 13966  # endif
; ..\component\Com\Implementation\Com.c	 13967  # if (COM_CBKTXACKDEFFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13968    /* #30 If the notification functions are handled deferred, set the HandleTxPduDeferred flag */
; ..\component\Com\Implementation\Com.c	 13969    if(Com_IsCbkTxAckDefFuncPtrIndUsedOfTxPduInfo(ComPduId))      /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 13970    {
; ..\component\Com\Implementation\Com.c	 13971      Com_SetHandleTxPduDeferred(ComPduId, TRUE); /* SBSW_COM_IDXPARAM_INTERNALFCT_DET_CSL02 */
; ..\component\Com\Implementation\Com.c	 13972    }
; ..\component\Com\Implementation\Com.c	 13973  # endif
; ..\component\Com\Implementation\Com.c	 13974  }
; ..\component\Com\Implementation\Com.c	 13975  #endif
; ..\component\Com\Implementation\Com.c	 13976  
; ..\component\Com\Implementation\Com.c	 13977  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 13978    Com_GetOldValuePtr
; ..\component\Com\Implementation\Com.c	 13979  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13980  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 13981   *
; ..\component\Com\Implementation\Com.c	 13982   *
; ..\component\Com\Implementation\Com.c	 13983  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 13984  #if ((COM_TXFILTERINITVALUEARRAYBASEDFILTERINITVALUEUSEDOFTXSIGINFO == STD_ON) || (COM_FILTERINITVALUEIDXOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 13985  LOCAL_INLINE FUNC(P2CONST(void, AUTOMATIC, AUTOMATIC), COM_CODE) Com_GetOldValuePtr(Com_SignalIdType idxTxSigInfo)
; ..\component\Com\Implementation\Com.c	 13986  {
; ..\component\Com\Implementation\Com.c	 13987    P2CONST(void, AUTOMATIC, AUTOMATIC) oldValuePtr = NULL_PTR;
; ..\component\Com\Implementation\Com.c	 13988    /* #10 Get the old value pointer of the ApplType related buffer */
; ..\component\Com\Implementation\Com.c	 13989  # if(COM_FILTERINITVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 13990    if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))        /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 13991    {
; ..\component\Com\Implementation\Com.c	 13992      Com_FilterInitValueIdxOfTxSigInfoType idxTxFilterOldValue = Com_GetFilterInitValueIdxOfTxSigInfo(idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	 13993  
; ..\component\Com\Implementation\Com.c	 13994      switch (Com_GetApplTypeOfTxSigInfo(idxTxSigInfo))
; ..\component\Com\Implementation\Com.c	 13995      {
; ..\component\Com\Implementation\Com.c	 13996  /* jet: GeneralSwitchCasePerApplType snippet */
; ..\component\Com\Implementation\Com.c	 13997  #  if (COM_TXFILTERINITVALUEUINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	 13998        case COM_UINT8_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 13999        {
; ..\component\Com\Implementation\Com.c	 14000          oldValuePtr = (P2CONST(void, AUTOMATIC, AUTOMATIC)) Com_GetAddrTxFilterOldValueUInt8(idxTxFilterOldValue);      /* PRQA S 0314 */ /* MD_Com_0314_0315 */
; ..\component\Com\Implementation\Com.c	 14001          break;
; ..\component\Com\Implementation\Com.c	 14002        }
; ..\component\Com\Implementation\Com.c	 14003  #  endif
; ..\component\Com\Implementation\Com.c	 14004  #  if (COM_TXFILTERINITVALUESINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14005        case COM_SINT8_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14006        {
; ..\component\Com\Implementation\Com.c	 14007          oldValuePtr = (P2CONST(void, AUTOMATIC, AUTOMATIC)) Com_GetAddrTxFilterOldValueSInt8(idxTxFilterOldValue);      /* PRQA S 0314 */ /* MD_Com_0314_0315 */
; ..\component\Com\Implementation\Com.c	 14008          break;
; ..\component\Com\Implementation\Com.c	 14009        }
; ..\component\Com\Implementation\Com.c	 14010  #  endif
; ..\component\Com\Implementation\Com.c	 14011  #  if (COM_TXFILTERINITVALUEUINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14012        case COM_UINT16_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14013        {
; ..\component\Com\Implementation\Com.c	 14014          oldValuePtr = (P2CONST(void, AUTOMATIC, AUTOMATIC)) Com_GetAddrTxFilterOldValueUInt16(idxTxFilterOldValue);     /* PRQA S 0314 */ /* MD_Com_0314_0315 */
; ..\component\Com\Implementation\Com.c	 14015          break;
; ..\component\Com\Implementation\Com.c	 14016        }
; ..\component\Com\Implementation\Com.c	 14017  #  endif
; ..\component\Com\Implementation\Com.c	 14018  #  if (COM_TXFILTERINITVALUESINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14019        case COM_SINT16_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14020        {
; ..\component\Com\Implementation\Com.c	 14021          oldValuePtr = (P2CONST(void, AUTOMATIC, AUTOMATIC)) Com_GetAddrTxFilterOldValueSInt16(idxTxFilterOldValue);     /* PRQA S 0314 */ /* MD_Com_0314_0315 */
; ..\component\Com\Implementation\Com.c	 14022          break;
; ..\component\Com\Implementation\Com.c	 14023        }
; ..\component\Com\Implementation\Com.c	 14024  #  endif
; ..\component\Com\Implementation\Com.c	 14025  #  if (COM_TXFILTERINITVALUEUINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14026        case COM_UINT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14027        {
; ..\component\Com\Implementation\Com.c	 14028          oldValuePtr = (P2CONST(void, AUTOMATIC, AUTOMATIC)) Com_GetAddrTxFilterOldValueUInt32(idxTxFilterOldValue);     /* PRQA S 0314 */ /* MD_Com_0314_0315 */
; ..\component\Com\Implementation\Com.c	 14029          break;
; ..\component\Com\Implementation\Com.c	 14030        }
; ..\component\Com\Implementation\Com.c	 14031  #  endif
; ..\component\Com\Implementation\Com.c	 14032  #  if (COM_TXFILTERINITVALUESINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14033        case COM_SINT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14034        {
; ..\component\Com\Implementation\Com.c	 14035          oldValuePtr = (P2CONST(void, AUTOMATIC, AUTOMATIC)) Com_GetAddrTxFilterOldValueSInt32(idxTxFilterOldValue);     /* PRQA S 0314 */ /* MD_Com_0314_0315 */
; ..\component\Com\Implementation\Com.c	 14036          break;
; ..\component\Com\Implementation\Com.c	 14037        }
; ..\component\Com\Implementation\Com.c	 14038  #  endif
; ..\component\Com\Implementation\Com.c	 14039  #  if (COM_TXFILTERINITVALUEUINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14040        case COM_UINT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14041        {
; ..\component\Com\Implementation\Com.c	 14042          oldValuePtr = (P2CONST(void, AUTOMATIC, AUTOMATIC)) Com_GetAddrTxFilterOldValueUInt64(idxTxFilterOldValue);     /* PRQA S 0314 */ /* MD_Com_0314_0315 */
; ..\component\Com\Implementation\Com.c	 14043          break;
; ..\component\Com\Implementation\Com.c	 14044        }
; ..\component\Com\Implementation\Com.c	 14045  #  endif
; ..\component\Com\Implementation\Com.c	 14046  #  if (COM_TXFILTERINITVALUESINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14047        case COM_SINT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14048        {
; ..\component\Com\Implementation\Com.c	 14049          oldValuePtr = (P2CONST(void, AUTOMATIC, AUTOMATIC)) Com_GetAddrTxFilterOldValueSInt64(idxTxFilterOldValue);     /* PRQA S 0314 */ /* MD_Com_0314_0315 */
; ..\component\Com\Implementation\Com.c	 14050          break;
; ..\component\Com\Implementation\Com.c	 14051        }
; ..\component\Com\Implementation\Com.c	 14052  #  endif
; ..\component\Com\Implementation\Com.c	 14053  #  if (COM_TXFILTERINITVALUEFLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14054        case COM_FLOAT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14055        {
; ..\component\Com\Implementation\Com.c	 14056          oldValuePtr = (P2CONST(void, AUTOMATIC, AUTOMATIC)) Com_GetAddrTxFilterOldValueFloat32(idxTxFilterOldValue);    /* PRQA S 0314 */ /* MD_Com_0314_0315 */
; ..\component\Com\Implementation\Com.c	 14057          break;
; ..\component\Com\Implementation\Com.c	 14058        }
; ..\component\Com\Implementation\Com.c	 14059  #  endif
; ..\component\Com\Implementation\Com.c	 14060  #  if (COM_TXFILTERINITVALUEFLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14061        case COM_FLOAT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14062        {
; ..\component\Com\Implementation\Com.c	 14063          oldValuePtr = (P2CONST(void, AUTOMATIC, AUTOMATIC)) Com_GetAddrTxFilterOldValueFloat64(idxTxFilterOldValue);    /* PRQA S 0314 */ /* MD_Com_0314_0315 */
; ..\component\Com\Implementation\Com.c	 14064          break;
; ..\component\Com\Implementation\Com.c	 14065        }
; ..\component\Com\Implementation\Com.c	 14066  #  endif
; ..\component\Com\Implementation\Com.c	 14067        default: /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	 14068          break;
; ..\component\Com\Implementation\Com.c	 14069      }
; ..\component\Com\Implementation\Com.c	 14070    }
; ..\component\Com\Implementation\Com.c	 14071  # endif
; ..\component\Com\Implementation\Com.c	 14072  
; ..\component\Com\Implementation\Com.c	 14073  # if ((COM_TXFILTERINITVALUEARRAYBASEDFILTERINITVALUEUSEDOFTXSIGINFO == STD_ON) && (COM_EXISTS_UINT8_N_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14074    if(Com_GetApplTypeOfTxSigInfo(idxTxSigInfo) == COM_UINT8_N_APPLTYPEOFTXSIGINFO)       /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14075    {
; ..\component\Com\Implementation\Com.c	 14076      oldValuePtr = (P2CONST(void, AUTOMATIC, AUTOMATIC)) Com_GetAddrTxFilterOldValueArrayBased(Com_GetTxFilterInitValueArrayBasedFilterInitValueStartIdxOfTxSigInfo(idxTxSigInfo));      /* PRQA S 0314 */ /* MD_Com_0314_0315 */
; ..\component\Com\Implementation\Com.c	 14077    }
; ..\component\Com\Implementation\Com.c	 14078  # endif
; ..\component\Com\Implementation\Com.c	 14079    return oldValuePtr;
; ..\component\Com\Implementation\Com.c	 14080  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	 14081  #endif
; ..\component\Com\Implementation\Com.c	 14082  
; ..\component\Com\Implementation\Com.c	 14083  
; ..\component\Com\Implementation\Com.c	 14084  #if ((COM_TXFILTERINITVALUEARRAYBASEDFILTERINITVALUEUSEDOFTXSIGINFO == STD_ON) || (COM_FILTERINITVALUEIDXOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14085  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14086    Com_SetTxFilterOldValueX
; ..\component\Com\Implementation\Com.c	 14087  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14088  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14089   *
; ..\component\Com\Implementation\Com.c	 14090   *
; ..\component\Com\Implementation\Com.c	 14091  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14092  LOCAL_INLINE FUNC(void, COM_CODE) Com_SetTxFilterOldValueX(Com_SignalIdType idxTxSigInfo, P2CONST(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr, uint16 Length)
; ..\component\Com\Implementation\Com.c	 14093  {
; ..\component\Com\Implementation\Com.c	 14094    /* #10 Copy the passed value to the ApplType related old value buffer */
; ..\component\Com\Implementation\Com.c	 14095  # if (COM_FILTERINITVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14096    if(Com_IsFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))        /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14097    {
; ..\component\Com\Implementation\Com.c	 14098      Com_FilterInitValueIdxOfTxSigInfoType idxTxFilterOldValue = Com_GetFilterInitValueIdxOfTxSigInfo(idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	 14099      switch (Com_GetApplTypeOfTxSigInfo(idxTxSigInfo))
; ..\component\Com\Implementation\Com.c	 14100      {
; ..\component\Com\Implementation\Com.c	 14101  /* jet: GeneralSwitchCasePerApplType snippet */
; ..\component\Com\Implementation\Com.c	 14102  #  if (COM_TXFILTERINITVALUEUINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14103        case COM_UINT8_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14104        {
; ..\component\Com\Implementation\Com.c	 14105          Com_SetTxFilterOldValueUInt8(idxTxFilterOldValue, *((P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr)); /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14106          break;
; ..\component\Com\Implementation\Com.c	 14107        }
; ..\component\Com\Implementation\Com.c	 14108  #  endif
; ..\component\Com\Implementation\Com.c	 14109  #  if (COM_TXFILTERINITVALUESINT8 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14110        case COM_SINT8_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14111        {
; ..\component\Com\Implementation\Com.c	 14112          Com_SetTxFilterOldValueSInt8(idxTxFilterOldValue, *((P2CONST(sint8, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr)); /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14113          break;
; ..\component\Com\Implementation\Com.c	 14114        }
; ..\component\Com\Implementation\Com.c	 14115  #  endif
; ..\component\Com\Implementation\Com.c	 14116  #  if (COM_TXFILTERINITVALUEUINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14117        case COM_UINT16_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14118        {
; ..\component\Com\Implementation\Com.c	 14119          Com_SetTxFilterOldValueUInt16(idxTxFilterOldValue, *((P2CONST(uint16, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr));       /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14120          break;
; ..\component\Com\Implementation\Com.c	 14121        }
; ..\component\Com\Implementation\Com.c	 14122  #  endif
; ..\component\Com\Implementation\Com.c	 14123  #  if (COM_TXFILTERINITVALUESINT16 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14124        case COM_SINT16_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14125        {
; ..\component\Com\Implementation\Com.c	 14126          Com_SetTxFilterOldValueSInt16(idxTxFilterOldValue, *((P2CONST(sint16, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr));       /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14127          break;
; ..\component\Com\Implementation\Com.c	 14128        }
; ..\component\Com\Implementation\Com.c	 14129  #  endif
; ..\component\Com\Implementation\Com.c	 14130  #  if (COM_TXFILTERINITVALUEUINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14131        case COM_UINT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14132        {
; ..\component\Com\Implementation\Com.c	 14133          Com_SetTxFilterOldValueUInt32(idxTxFilterOldValue, *((P2CONST(uint32, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr));       /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14134          break;
; ..\component\Com\Implementation\Com.c	 14135        }
; ..\component\Com\Implementation\Com.c	 14136  #  endif
; ..\component\Com\Implementation\Com.c	 14137  #  if (COM_TXFILTERINITVALUESINT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14138        case COM_SINT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14139        {
; ..\component\Com\Implementation\Com.c	 14140          Com_SetTxFilterOldValueSInt32(idxTxFilterOldValue, *((P2CONST(sint32, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr));       /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14141          break;
; ..\component\Com\Implementation\Com.c	 14142        }
; ..\component\Com\Implementation\Com.c	 14143  #  endif
; ..\component\Com\Implementation\Com.c	 14144  #  if (COM_TXFILTERINITVALUEUINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14145        case COM_UINT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14146        {
; ..\component\Com\Implementation\Com.c	 14147          Com_SetTxFilterOldValueUInt64(idxTxFilterOldValue, *((P2CONST(uint64, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr));       /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14148          break;
; ..\component\Com\Implementation\Com.c	 14149        }
; ..\component\Com\Implementation\Com.c	 14150  #  endif
; ..\component\Com\Implementation\Com.c	 14151  #  if (COM_TXFILTERINITVALUESINT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14152        case COM_SINT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14153        {
; ..\component\Com\Implementation\Com.c	 14154          Com_SetTxFilterOldValueSInt64(idxTxFilterOldValue, *((P2CONST(sint64, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr));       /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14155          break;
; ..\component\Com\Implementation\Com.c	 14156        }
; ..\component\Com\Implementation\Com.c	 14157  #  endif
; ..\component\Com\Implementation\Com.c	 14158  #  if (COM_TXFILTERINITVALUEFLOAT32 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14159        case COM_FLOAT32_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14160        {
; ..\component\Com\Implementation\Com.c	 14161          Com_SetTxFilterOldValueFloat32(idxTxFilterOldValue, *((P2CONST(float32, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr));     /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14162          break;
; ..\component\Com\Implementation\Com.c	 14163        }
; ..\component\Com\Implementation\Com.c	 14164  #  endif
; ..\component\Com\Implementation\Com.c	 14165  #  if (COM_TXFILTERINITVALUEFLOAT64 == STD_ON)
; ..\component\Com\Implementation\Com.c	 14166        case COM_FLOAT64_APPLTYPEOFTXSIGINFO:
; ..\component\Com\Implementation\Com.c	 14167        {
; ..\component\Com\Implementation\Com.c	 14168          Com_SetTxFilterOldValueFloat64(idxTxFilterOldValue, *((P2CONST(float64, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr));     /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14169          break;
; ..\component\Com\Implementation\Com.c	 14170        }
; ..\component\Com\Implementation\Com.c	 14171  #  endif
; ..\component\Com\Implementation\Com.c	 14172        default: /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	 14173          break;
; ..\component\Com\Implementation\Com.c	 14174      }
; ..\component\Com\Implementation\Com.c	 14175    }
; ..\component\Com\Implementation\Com.c	 14176  # endif
; ..\component\Com\Implementation\Com.c	 14177  
; ..\component\Com\Implementation\Com.c	 14178  # if ((COM_TXFILTERINITVALUEARRAYBASEDFILTERINITVALUEUSEDOFTXSIGINFO == STD_ON) && (COM_EXISTS_UINT8_N_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14179    if(Com_IsTxFilterInitValueArrayBasedFilterInitValueUsedOfTxSigInfo(idxTxSigInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14180    {
; ..\component\Com\Implementation\Com.c	 14181      Com_TxFilterInitValueArrayBasedIterType bufferIdx = Com_GetTxFilterInitValueArrayBasedFilterInitValueStartIdxOfTxSigInfo(idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	 14182      VStdMemCpyRamToRam(Com_GetAddrTxFilterOldValueArrayBased(bufferIdx), (P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr, Com_GetTxFilterInitValueArrayBasedFilterInitValueLengthOfTxSigInfo(idxTxSigInfo));   /* PRQA S 0315, 0316 */ /* MD_MSR_VStdLibCopy, MD_Com_0316_0317 */ /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 14183    }
; ..\component\Com\Implementation\Com.c	 14184  # endif
; ..\component\Com\Implementation\Com.c	 14185  
; ..\component\Com\Implementation\Com.c	 14186    COM_DUMMY_STATEMENT(Length);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 14187  }       /* PRQA S 6030 */ /* MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	 14188  #endif
; ..\component\Com\Implementation\Com.c	 14189  
; ..\component\Com\Implementation\Com.c	 14190  #if ((COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14191  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14192    Com_SendSignal_EvaluateTriggerConditionAndRequestTransmit
; ..\component\Com\Implementation\Com.c	 14193  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14194  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14195   *
; ..\component\Com\Implementation\Com.c	 14196   *
; ..\component\Com\Implementation\Com.c	 14197   *
; ..\component\Com\Implementation\Com.c	 14198   *
; ..\component\Com\Implementation\Com.c	 14199   *
; ..\component\Com\Implementation\Com.c	 14200   *
; ..\component\Com\Implementation\Com.c	 14201   *
; ..\component\Com\Implementation\Com.c	 14202   *
; ..\component\Com\Implementation\Com.c	 14203   *
; ..\component\Com\Implementation\Com.c	 14204  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14205  LOCAL_INLINE FUNC(void, COM_CODE) Com_SendSignal_EvaluateTriggerConditionAndRequestTransmit(Com_SignalIdType idxTxSigInfo, P2CONST(void, AUTOMATIC, AUTOMATIC) newValuePtr, PduIdType idxTxPduInfo)
; ..\component\Com\Implementation\Com.c	 14206  {
; ..\component\Com\Implementation\Com.c	 14207    boolean TriggerWithoutRepetition = FALSE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 14208    /* #10 If the passed Tx ComSignal has a configured WITHOUT_REPETITION transfer property, the transmission is performed without repetitions */
; ..\component\Com\Implementation\Com.c	 14209  # if (COM_WITHOUTREPOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14210    if(Com_IsWithoutRepOfTxSigInfo(idxTxSigInfo))
; ..\component\Com\Implementation\Com.c	 14211    {
; ..\component\Com\Implementation\Com.c	 14212      TriggerWithoutRepetition = TRUE;
; ..\component\Com\Implementation\Com.c	 14213    }
; ..\component\Com\Implementation\Com.c	 14214  # endif
; ..\component\Com\Implementation\Com.c	 14215  # if (COM_TRIGGEREDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14216    /* #20 If the passed Tx ComSignal has a triggered transfer property */
; ..\component\Com\Implementation\Com.c	 14217    if(Com_IsTriggeredOfTxSigInfo(idxTxSigInfo))
; ..\component\Com\Implementation\Com.c	 14218    {
; ..\component\Com\Implementation\Com.c	 14219      /* #30 If the passed signal is contained in a ComSignalGroup, set the signal group event flag */
; ..\component\Com\Implementation\Com.c	 14220  #  if (COM_TXSIGGRPINFOUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14221      if(Com_IsTxSigGrpInfoUsedOfTxSigInfo(idxTxSigInfo)) /* COV_COM_SIGGRP_CHECK */
; ..\component\Com\Implementation\Com.c	 14222      {
; ..\component\Com\Implementation\Com.c	 14223        Com_SendSignal_SetSigGrpEventFlag(Com_GetTxSigGrpInfoIdxOfTxSigInfo(idxTxSigInfo), TriggerWithoutRepetition);
; ..\component\Com\Implementation\Com.c	 14224      }
; ..\component\Com\Implementation\Com.c	 14225      /* #40 Otherwise trigger the deferred ComIPdu transmission */
; ..\component\Com\Implementation\Com.c	 14226      else
; ..\component\Com\Implementation\Com.c	 14227  #  endif
; ..\component\Com\Implementation\Com.c	 14228      {
; ..\component\Com\Implementation\Com.c	 14229        Com_TxModeHdlr_TriggerDeferredTransmitAndSetTimer(idxTxPduInfo, TriggerWithoutRepetition);
; ..\component\Com\Implementation\Com.c	 14230      }
; ..\component\Com\Implementation\Com.c	 14231    }
; ..\component\Com\Implementation\Com.c	 14232    else
; ..\component\Com\Implementation\Com.c	 14233  # endif
; ..\component\Com\Implementation\Com.c	 14234  # if (COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14235      /* #50 If the passed Tx ComSignal has a triggered on change transfer property and if the value has changed */
; ..\component\Com\Implementation\Com.c	 14236    if(Com_IsOnChangeUsedOfTxSigInfo(idxTxSigInfo))       /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14237    {
; ..\component\Com\Implementation\Com.c	 14238      Com_OnChangeIdxOfTxSigInfoType idxFilterInfo = Com_GetOnChangeIdxOfTxSigInfo(idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	 14239  
; ..\component\Com\Implementation\Com.c	 14240      if(TRUE == Com_TxSignal_EvaluateFilter(idxTxSigInfo, (uint32) idxFilterInfo, newValuePtr))  /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 14241      {
; ..\component\Com\Implementation\Com.c	 14242  #  if (COM_TXSIGGRPINFOUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14243        /* #60 If the passed signal is contained in a ComSignalGroup, set the signal group event flag */
; ..\component\Com\Implementation\Com.c	 14244        if(Com_IsTxSigGrpInfoUsedOfTxSigInfo(idxTxSigInfo))       /* COV_COM_TRIGGERED_ONCHG_SIGGRP */
; ..\component\Com\Implementation\Com.c	 14245        {
; ..\component\Com\Implementation\Com.c	 14246          Com_SendSignal_SetSigGrpEventFlag(Com_GetTxSigGrpInfoIdxOfTxSigInfo(idxTxSigInfo), TriggerWithoutRepetition);
; ..\component\Com\Implementation\Com.c	 14247        }
; ..\component\Com\Implementation\Com.c	 14248        /* #70 Otherwise trigger the deferred ComIPdu transmission */
; ..\component\Com\Implementation\Com.c	 14249        else
; ..\component\Com\Implementation\Com.c	 14250  #  endif
; ..\component\Com\Implementation\Com.c	 14251        {
; ..\component\Com\Implementation\Com.c	 14252          Com_TxModeHdlr_TriggerDeferredTransmitAndSetTimer(idxTxPduInfo, TriggerWithoutRepetition);
; ..\component\Com\Implementation\Com.c	 14253        }
; ..\component\Com\Implementation\Com.c	 14254      }
; ..\component\Com\Implementation\Com.c	 14255    }
; ..\component\Com\Implementation\Com.c	 14256    else
; ..\component\Com\Implementation\Com.c	 14257  # endif
; ..\component\Com\Implementation\Com.c	 14258    {
; ..\component\Com\Implementation\Com.c	 14259      /* #80 If the Signal has PENDING transfer property, do nothing */
; ..\component\Com\Implementation\Com.c	 14260    }
; ..\component\Com\Implementation\Com.c	 14261    COM_DUMMY_STATEMENT(TriggerWithoutRepetition);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 14262    COM_DUMMY_STATEMENT(newValuePtr);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 14263  }
; ..\component\Com\Implementation\Com.c	 14264  #endif
; ..\component\Com\Implementation\Com.c	 14265  
; ..\component\Com\Implementation\Com.c	 14266  #if ((COM_TXSIGGRPINFOUSEDOFTXSIGINFO == STD_ON) && ((COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON)))
; ..\component\Com\Implementation\Com.c	 14267  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14268    Com_SendSignal_SetSigGrpEventFlag
; ..\component\Com\Implementation\Com.c	 14269   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14270  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14271   *
; ..\component\Com\Implementation\Com.c	 14272   *
; ..\component\Com\Implementation\Com.c	 14273   *
; ..\component\Com\Implementation\Com.c	 14274   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14275  LOCAL_INLINE FUNC(void, COM_CODE) Com_SendSignal_SetSigGrpEventFlag(Com_TxSigGrpInfoIdxOfTxSigInfoType idxTxSigGrpInfo, boolean TriggerWithoutRepetition)
; ..\component\Com\Implementation\Com.c	 14276  {
; ..\component\Com\Implementation\Com.c	 14277  # if (COM_WITHOUTREPOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14278    /* #10 If the passed Tx ComSignalGroup has a _WITHOUT_REPETITION transfer property, set the TRANSMIT signal group event flag */
; ..\component\Com\Implementation\Com.c	 14279    if(TriggerWithoutRepetition == TRUE)
; ..\component\Com\Implementation\Com.c	 14280    {
; ..\component\Com\Implementation\Com.c	 14281      Com_SetSigGrpEventFlag(idxTxSigGrpInfo,     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 14282                             (Com_GetSigGrpEventFlag(idxTxSigGrpInfo) | COM_TX_SIGIF_GROUPEVENTFLAG));
; ..\component\Com\Implementation\Com.c	 14283    }
; ..\component\Com\Implementation\Com.c	 14284    /* #20 Otherwise, set the TRANSMIT and WITH_REPETITION signal group event flags */
; ..\component\Com\Implementation\Com.c	 14285    else
; ..\component\Com\Implementation\Com.c	 14286  # endif
; ..\component\Com\Implementation\Com.c	 14287    {
; ..\component\Com\Implementation\Com.c	 14288      Com_SetSigGrpEventFlag(idxTxSigGrpInfo,     /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 14289                             (Com_GetSigGrpEventFlag(idxTxSigGrpInfo) | COM_TX_SIGIF_GROUPEVENTREPETITION));
; ..\component\Com\Implementation\Com.c	 14290    }
; ..\component\Com\Implementation\Com.c	 14291  
; ..\component\Com\Implementation\Com.c	 14292    COM_DUMMY_STATEMENT(TriggerWithoutRepetition);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 14293  }
; ..\component\Com\Implementation\Com.c	 14294  #endif
; ..\component\Com\Implementation\Com.c	 14295  
; ..\component\Com\Implementation\Com.c	 14296  #if (COM_TXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14297  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14298    Com_SendSignal_WriteSignal
; ..\component\Com\Implementation\Com.c	 14299  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14300  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14301   *
; ..\component\Com\Implementation\Com.c	 14302   *
; ..\component\Com\Implementation\Com.c	 14303   *
; ..\component\Com\Implementation\Com.c	 14304   *
; ..\component\Com\Implementation\Com.c	 14305   *
; ..\component\Com\Implementation\Com.c	 14306   *
; ..\component\Com\Implementation\Com.c	 14307   *
; ..\component\Com\Implementation\Com.c	 14308   *
; ..\component\Com\Implementation\Com.c	 14309  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14310  LOCAL_INLINE FUNC(void, COM_CODE) Com_SendSignal_WriteSignal(Com_SignalIdType idxTxSigInfo, P2CONST(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr, uint16 Length, PduIdType idxTxPduInfo)       /* PRQA S 3206 */ /* MD_Com_3206 */
; ..\component\Com\Implementation\Com.c	 14311  {
; ..\component\Com\Implementation\Com.c	 14312  # if (COM_TXSIGGRPINFOUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14313    /* #10 If the passed signal is a ComGroupSignal */
; ..\component\Com\Implementation\Com.c	 14314    if(Com_IsTxSigGrpInfoUsedOfTxSigInfo(idxTxSigInfo))   /* PRQA S 2842 */ /* MD_Com_2842 */ /* COV_COM_SIGGRP_CHECK */
; ..\component\Com\Implementation\Com.c	 14315    {
; ..\component\Com\Implementation\Com.c	 14316  #  if ((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14317      if(Com_IsTxTpInfoUsedOfTxPduInfo(idxTxPduInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14318      {
; ..\component\Com\Implementation\Com.c	 14319        /* #20 If the passed ComGroupSignal is a dynamic length signal, update the temp length of the related ComIPdu */
; ..\component\Com\Implementation\Com.c	 14320        if(Com_GetApplTypeOfTxSigInfo(idxTxSigInfo) == COM_UINT8_DYN_APPLTYPEOFTXSIGINFO) /* COV_COM_UINT8_DYN_APPLTYPE */
; ..\component\Com\Implementation\Com.c	 14321        {
; ..\component\Com\Implementation\Com.c	 14322          Com_TxTpInfoIdxOfTxPduInfoType txTpPduInfoIdx = Com_GetTxTpInfoIdxOfTxPduInfo(idxTxPduInfo);
; ..\component\Com\Implementation\Com.c	 14323  #   if (CPU_BYTE_ORDER == LOW_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	 14324          Com_SetTxTmpTpPduLength(txTpPduInfoIdx, (Com_TxSduLengthType) (Com_GetBytePositionOfTxSigInfo(idxTxSigInfo) + Length)); /* PRQA S 2986 */ /* MD_Com_2985_2986 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14325  #   else
; ..\component\Com\Implementation\Com.c	 14326         /* (CPU_BYTE_ORDER == HIGH_BYTE_FIRST) */
; ..\component\Com\Implementation\Com.c	 14327          Com_SetTxTmpTpPduLength(txTpPduInfoIdx, (Com_TxSduLengthType) (Com_GetStartByteInPduPositionOfTxSigInfo(idxTxSigInfo) + Length));       /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14328  #   endif
; ..\component\Com\Implementation\Com.c	 14329          Com_SetTxDynSignalLength(txTpPduInfoIdx, (Com_TxDynSignalLengthType) Length);   /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14330        }
; ..\component\Com\Implementation\Com.c	 14331      }
; ..\component\Com\Implementation\Com.c	 14332  #  endif
; ..\component\Com\Implementation\Com.c	 14333  #  if (COM_TXBUFFERUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14334      /* #30 If a shadow buffer is used, copy the passed signal data to the shadow buffer */
; ..\component\Com\Implementation\Com.c	 14335      if(Com_IsTxBufferUsedOfTxSigGrpInfo(Com_GetTxSigGrpInfoIdxOfTxSigInfo(idxTxSigInfo)))       /* PRQA S 2842 */ /* MD_Com_2842 */ /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14336      {
; ..\component\Com\Implementation\Com.c	 14337        Com_Signal_WriteSignal(idxTxSigInfo, (P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr);   /* PRQA S 0316 */ /* MD_Com_0316_0317 */ /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 14338      }
; ..\component\Com\Implementation\Com.c	 14339  #  endif
; ..\component\Com\Implementation\Com.c	 14340    }
; ..\component\Com\Implementation\Com.c	 14341    /* #40 Otherwise, if the passed signal is a ComSignal */
; ..\component\Com\Implementation\Com.c	 14342    else
; ..\component\Com\Implementation\Com.c	 14343  # endif
; ..\component\Com\Implementation\Com.c	 14344    {
; ..\component\Com\Implementation\Com.c	 14345  # if (COM_UBMASKUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14346      /* #50 If the passed ComSignal has an UpdateBit, set the UpdateBit in the Tx ComIPdu buffer */
; ..\component\Com\Implementation\Com.c	 14347      if(Com_IsUbMaskUsedOfTxSigInfo(idxTxSigInfo))       /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14348      {
; ..\component\Com\Implementation\Com.c	 14349        Com_TxBufferEndIdxOfTxPduInfoType ubIdx = Com_GetTxBufferUbIdxInTxBufferIdxOfTxSigInfo(idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	 14350        uint8 temp = Com_GetTxBuffer(ubIdx);
; ..\component\Com\Implementation\Com.c	 14351        Com_SetTxBuffer(ubIdx, (temp | Com_GetConstValueUInt8(Com_GetUbMaskIdxOfTxSigInfo(idxTxSigInfo))));       /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 14352      }
; ..\component\Com\Implementation\Com.c	 14353  # endif
; ..\component\Com\Implementation\Com.c	 14354  # if ((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14355      if(Com_IsTxTpInfoUsedOfTxPduInfo(idxTxPduInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14356      {
; ..\component\Com\Implementation\Com.c	 14357        /* #60 If the passed ComSignal is a dynamic length signal, update the temp and the normal Tx ComIPdu length */
; ..\component\Com\Implementation\Com.c	 14358        if(Com_GetApplTypeOfTxSigInfo(idxTxSigInfo) == COM_UINT8_DYN_APPLTYPEOFTXSIGINFO)
; ..\component\Com\Implementation\Com.c	 14359        {
; ..\component\Com\Implementation\Com.c	 14360          Com_TxTpInfoIdxOfTxPduInfoType txTpPduInfoIdx = Com_GetTxTpInfoIdxOfTxPduInfo(idxTxPduInfo);
; ..\component\Com\Implementation\Com.c	 14361  #  if (CPU_BYTE_ORDER == LOW_BYTE_FIRST)
; ..\component\Com\Implementation\Com.c	 14362          Com_SetTxSduLength(idxTxPduInfo, (Com_TxSduLengthType) (Com_GetBytePositionOfTxSigInfo(idxTxSigInfo) + Length));        /* PRQA S 2986 */ /* MD_Com_2985_2986 */ /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14363  #  else  /* (CPU_BYTE_ORDER == HIGH_BYTE_FIRST) */
; ..\component\Com\Implementation\Com.c	 14364          Com_SetTxSduLength(idxTxPduInfo, Com_GetStartByteInPduPositionOfTxSigInfo(idxTxSigInfo) + Length);      /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14365  #  endif
; ..\component\Com\Implementation\Com.c	 14366          Com_SetTxDynSignalLength(txTpPduInfoIdx, (Com_TxDynSignalLengthType) Length);   /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14367        }
; ..\component\Com\Implementation\Com.c	 14368      }
; ..\component\Com\Implementation\Com.c	 14369  # endif
; ..\component\Com\Implementation\Com.c	 14370      /* #70 If the bit size of the ComSignal is greater 0, copy the passed signal data to the Tx ComIPdu buffer */
; ..\component\Com\Implementation\Com.c	 14371  # if (COM_TXBUFFERUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14372      if(Com_IsTxBufferUsedOfTxSigInfo(idxTxSigInfo))     /* PRQA S 2842 */ /* MD_Com_2842 */ /* COV_COM_WRITESIGNAL_TXBUFFER */
; ..\component\Com\Implementation\Com.c	 14373      {
; ..\component\Com\Implementation\Com.c	 14374        Com_Signal_WriteSignal(idxTxSigInfo,      /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 14375                               (P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)) SignalDataPtr); /* PRQA S 0316 */ /* MD_Com_0316_0317 */
; ..\component\Com\Implementation\Com.c	 14376      }
; ..\component\Com\Implementation\Com.c	 14377  # endif
; ..\component\Com\Implementation\Com.c	 14378    }
; ..\component\Com\Implementation\Com.c	 14379  
; ..\component\Com\Implementation\Com.c	 14380    COM_DUMMY_STATEMENT(Length);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 14381    COM_DUMMY_STATEMENT(SignalDataPtr);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 14382    COM_DUMMY_STATEMENT(idxTxPduInfo);    /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 14383    COM_DUMMY_STATEMENT(idxTxSigInfo);    /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 14384  }
; ..\component\Com\Implementation\Com.c	 14385  #endif
; ..\component\Com\Implementation\Com.c	 14386  
; ..\component\Com\Implementation\Com.c	 14387  #if (COM_TXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14388  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14389    Com_SendSignalGroup_TriggerEventProcessing
; ..\component\Com\Implementation\Com.c	 14390  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14391  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14392   *
; ..\component\Com\Implementation\Com.c	 14393   *
; ..\component\Com\Implementation\Com.c	 14394   *
; ..\component\Com\Implementation\Com.c	 14395   *
; ..\component\Com\Implementation\Com.c	 14396   *
; ..\component\Com\Implementation\Com.c	 14397   *
; ..\component\Com\Implementation\Com.c	 14398  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14399  LOCAL_INLINE FUNC(uint8, COM_CODE) Com_SendSignalGroup_TriggerEventProcessing(
; ..\component\Com\Implementation\Com.c	 14400  # if ((COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14401                                                                                 Com_SignalIdType idxTxSigGrpInfo,
; ..\component\Com\Implementation\Com.c	 14402  # endif
; ..\component\Com\Implementation\Com.c	 14403                                                                                 PduIdType idxTxPduInfo)
; ..\component\Com\Implementation\Com.c	 14404  {
; ..\component\Com\Implementation\Com.c	 14405    uint8 retVal = E_OK;          /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 14406    /* #10 If the passed Tx ComIPdu is active */
; ..\component\Com\Implementation\Com.c	 14407    if(Com_IsTxPduGrpActive(idxTxPduInfo))        /* COV_COM_NO_IPDUGROUPS */
; ..\component\Com\Implementation\Com.c	 14408    {
; ..\component\Com\Implementation\Com.c	 14409  # if ((COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14410      /* #20 If at least one related ComGroupSignal was triggered, set the deferred transmit event */
; ..\component\Com\Implementation\Com.c	 14411      if(0u < Com_GetSigGrpEventFlag(idxTxSigGrpInfo))    /* COV_COM_ONLY_TRIGGERED_SIGGRP */
; ..\component\Com\Implementation\Com.c	 14412      {
; ..\component\Com\Implementation\Com.c	 14413        boolean TriggerWithoutRepetition;
; ..\component\Com\Implementation\Com.c	 14414  #  if (COM_WITHOUTREPOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14415        /* #30 If at least one ComGroupSignal with TRIGGERED transfer property was triggered, trigger the transmission with repetitions */
; ..\component\Com\Implementation\Com.c	 14416        if((Com_GetSigGrpEventFlag(idxTxSigGrpInfo) & COM_TX_SIGIF_GROUPREPETITION) == 0u)
; ..\component\Com\Implementation\Com.c	 14417        {
; ..\component\Com\Implementation\Com.c	 14418          TriggerWithoutRepetition = TRUE;
; ..\component\Com\Implementation\Com.c	 14419        }
; ..\component\Com\Implementation\Com.c	 14420        else
; ..\component\Com\Implementation\Com.c	 14421  #  endif
; ..\component\Com\Implementation\Com.c	 14422        {
; ..\component\Com\Implementation\Com.c	 14423          TriggerWithoutRepetition = FALSE;
; ..\component\Com\Implementation\Com.c	 14424        }
; ..\component\Com\Implementation\Com.c	 14425  
; ..\component\Com\Implementation\Com.c	 14426        Com_TxModeHdlr_TriggerDeferredTransmitAndSetTimer(idxTxPduInfo, TriggerWithoutRepetition);
; ..\component\Com\Implementation\Com.c	 14427        Com_SetSigGrpEventFlag(idxTxSigGrpInfo, 0u);      /* SBSW_COM_IDXPARAM_INTERNALFCT_DET_CSL02 */
; ..\component\Com\Implementation\Com.c	 14428      }
; ..\component\Com\Implementation\Com.c	 14429  # endif
; ..\component\Com\Implementation\Com.c	 14430      /* #40 Return E_OK */
; ..\component\Com\Implementation\Com.c	 14431    }
; ..\component\Com\Implementation\Com.c	 14432    /* #50 Otherwise, return COM_SERVICE_NOT_AVAILABLE */
; ..\component\Com\Implementation\Com.c	 14433    else
; ..\component\Com\Implementation\Com.c	 14434    {
; ..\component\Com\Implementation\Com.c	 14435      retVal = COM_SERVICE_NOT_AVAILABLE;
; ..\component\Com\Implementation\Com.c	 14436    }
; ..\component\Com\Implementation\Com.c	 14437    return retVal;
; ..\component\Com\Implementation\Com.c	 14438  }
; ..\component\Com\Implementation\Com.c	 14439  #endif
; ..\component\Com\Implementation\Com.c	 14440  
; ..\component\Com\Implementation\Com.c	 14441  #if (COM_TXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14442  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14443    Com_SendSignalGroup_Processing
; ..\component\Com\Implementation\Com.c	 14444  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14445  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14446   *
; ..\component\Com\Implementation\Com.c	 14447   *
; ..\component\Com\Implementation\Com.c	 14448   *
; ..\component\Com\Implementation\Com.c	 14449   *
; ..\component\Com\Implementation\Com.c	 14450   *
; ..\component\Com\Implementation\Com.c	 14451   *
; ..\component\Com\Implementation\Com.c	 14452   *
; ..\component\Com\Implementation\Com.c	 14453  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14454  LOCAL_INLINE FUNC(uint8, COM_CODE) Com_SendSignalGroup_Processing(Com_SignalIdType idxTxSigGrpInfo, P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) ShadowBufferPtr)
; ..\component\Com\Implementation\Com.c	 14455  {
; ..\component\Com\Implementation\Com.c	 14456    Com_TxPduInfoIdxOfTxSigGrpInfoType idxTxPduInfo = Com_GetTxPduInfoIdxOfTxSigGrpInfo(idxTxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	 14457    uint8 retVal = E_OK;          /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 14458  
; ..\component\Com\Implementation\Com.c	 14459  # if (COM_TXFILTERINITSTATEUSEDOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14460    /* #10 If the passed Tx ComSignalGroup has filter, update the transition mode state */
; ..\component\Com\Implementation\Com.c	 14461    if(Com_IsTxFilterInitStateUsedOfTxModeInfo(idxTxPduInfo))     /* COV_COM_NO_GRPSIG_FILTER_PRESENT */
; ..\component\Com\Implementation\Com.c	 14462    {
; ..\component\Com\Implementation\Com.c	 14463      Com_TxModeHdlr_UpdateTMS((PduIdType) idxTxPduInfo);
; ..\component\Com\Implementation\Com.c	 14464    }
; ..\component\Com\Implementation\Com.c	 14465  # endif
; ..\component\Com\Implementation\Com.c	 14466  # if (COM_UBMASKUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14467    /* #20 If the passed Tx ComSingalGroup has an UpdateBit, set the UpdateBit in the related Tx ComIPdu buffer */
; ..\component\Com\Implementation\Com.c	 14468    if(Com_IsUbMaskUsedOfTxSigGrpInfo(idxTxSigGrpInfo))   /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14469    {
; ..\component\Com\Implementation\Com.c	 14470      Com_TxBufferEndIdxOfTxPduInfoType ubIdx = Com_GetTxBufferUbIdxInTxBufferIdxOfTxSigGrpInfo(idxTxSigGrpInfo);
; ..\component\Com\Implementation\Com.c	 14471      uint8 temp = Com_GetTxBuffer(ubIdx);
; ..\component\Com\Implementation\Com.c	 14472      Com_SetTxBuffer(ubIdx, (temp | Com_GetConstValueUInt8(Com_GetUbMaskIdxOfTxSigGrpInfo(idxTxSigGrpInfo))));   /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 14473    }
; ..\component\Com\Implementation\Com.c	 14474  # endif
; ..\component\Com\Implementation\Com.c	 14475  
; ..\component\Com\Implementation\Com.c	 14476  # if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14477    if(Com_IsTxTpInfoUsedOfTxPduInfo(idxTxPduInfo))       /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14478    {
; ..\component\Com\Implementation\Com.c	 14479      /* #30 If the passed Tx ComIPdu is a Tp Pdu and the Tp ComIPdu is in READY state, update the shadow and set the Tx ComIPdu length to the stored temp length for dynamic length signals */
; ..\component\Com\Implementation\Com.c	 14480      Com_TxTpInfoIdxOfTxPduInfoType txTpPduInfoIdx = Com_GetTxTpInfoIdxOfTxPduInfo(idxTxPduInfo);
; ..\component\Com\Implementation\Com.c	 14481      if(Com_GetTxTpConnectionState(txTpPduInfoIdx) == COM_READY_TXTPCONNECTIONSTATE)
; ..\component\Com\Implementation\Com.c	 14482      {
; ..\component\Com\Implementation\Com.c	 14483  #  if (COM_TXSIGGRPMASK == STD_ON)
; ..\component\Com\Implementation\Com.c	 14484        Com_TxBuffer_WriteSignalGroup(idxTxSigGrpInfo, ShadowBufferPtr);  /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 14485  #  endif
; ..\component\Com\Implementation\Com.c	 14486  #  if (COM_TXSIGINFODYNSIGUSEDOFTXTPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14487        if(Com_IsTxSigInfoDynSigUsedOfTxTpInfo(txTpPduInfoIdx))   /* COV_COM_UINT8_DYN_APPLTYPE */
; ..\component\Com\Implementation\Com.c	 14488        {
; ..\component\Com\Implementation\Com.c	 14489          Com_SetTxSduLength(idxTxPduInfo, Com_GetTxTmpTpPduLength(txTpPduInfoIdx));      /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14490        }
; ..\component\Com\Implementation\Com.c	 14491  #  endif
; ..\component\Com\Implementation\Com.c	 14492      }
; ..\component\Com\Implementation\Com.c	 14493      /* #40 Otherwise, return COM_BUSY */
; ..\component\Com\Implementation\Com.c	 14494      else
; ..\component\Com\Implementation\Com.c	 14495      {
; ..\component\Com\Implementation\Com.c	 14496        retVal = COM_BUSY;
; ..\component\Com\Implementation\Com.c	 14497      }
; ..\component\Com\Implementation\Com.c	 14498    }
; ..\component\Com\Implementation\Com.c	 14499    else
; ..\component\Com\Implementation\Com.c	 14500  # endif
; ..\component\Com\Implementation\Com.c	 14501    {
; ..\component\Com\Implementation\Com.c	 14502  # if (COM_TXSIGGRPMASK == STD_ON)
; ..\component\Com\Implementation\Com.c	 14503      /* #50 Copy the shadow buffer to the related Tx ComIPdu buffer */
; ..\component\Com\Implementation\Com.c	 14504      Com_TxBuffer_WriteSignalGroup(idxTxSigGrpInfo, ShadowBufferPtr);    /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 14505  # endif
; ..\component\Com\Implementation\Com.c	 14506    }
; ..\component\Com\Implementation\Com.c	 14507  # if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14508    if(retVal == E_OK)
; ..\component\Com\Implementation\Com.c	 14509  # endif
; ..\component\Com\Implementation\Com.c	 14510    {
; ..\component\Com\Implementation\Com.c	 14511      /* #60 Do trigger event processing */
; ..\component\Com\Implementation\Com.c	 14512      retVal = Com_SendSignalGroup_TriggerEventProcessing(
; ..\component\Com\Implementation\Com.c	 14513  # if ((COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14514                                                           idxTxSigGrpInfo,
; ..\component\Com\Implementation\Com.c	 14515  # endif
; ..\component\Com\Implementation\Com.c	 14516                                                           (PduIdType) idxTxPduInfo);
; ..\component\Com\Implementation\Com.c	 14517    }
; ..\component\Com\Implementation\Com.c	 14518  
; ..\component\Com\Implementation\Com.c	 14519    COM_DUMMY_STATEMENT(ShadowBufferPtr); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 14520    return retVal;
; ..\component\Com\Implementation\Com.c	 14521  }
; ..\component\Com\Implementation\Com.c	 14522  #endif
; ..\component\Com\Implementation\Com.c	 14523  
; ..\component\Com\Implementation\Com.c	 14524  #if (COM_TXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14525  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14526    Com_SendSignal_Processing
; ..\component\Com\Implementation\Com.c	 14527  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14528  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14529   *
; ..\component\Com\Implementation\Com.c	 14530   *
; ..\component\Com\Implementation\Com.c	 14531   *
; ..\component\Com\Implementation\Com.c	 14532   *
; ..\component\Com\Implementation\Com.c	 14533   *
; ..\component\Com\Implementation\Com.c	 14534   *
; ..\component\Com\Implementation\Com.c	 14535   *
; ..\component\Com\Implementation\Com.c	 14536  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14537  LOCAL_INLINE FUNC(uint8, COM_CODE) Com_SendSignal_Processing(Com_SignalIdType idxTxSigInfo, P2CONST(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr, uint16 Length)
; ..\component\Com\Implementation\Com.c	 14538  {
; ..\component\Com\Implementation\Com.c	 14539    uint8 retVal = E_OK;          /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 14540  
; ..\component\Com\Implementation\Com.c	 14541    Com_TxPduInfoIdxOfTxSigInfoType idxTxPduInfo = Com_GetTxPduInfoIdxOfTxSigInfo(idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	 14542  
; ..\component\Com\Implementation\Com.c	 14543  # if ((COM_FILTERINFOUSEDOFTXSIGINFO == STD_ON) || (COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14544    P2CONST(void, AUTOMATIC, AUTOMATIC) newValuePtr = (P2CONST(void, AUTOMATIC, AUTOMATIC)) SignalDataPtr;
; ..\component\Com\Implementation\Com.c	 14545  # endif
; ..\component\Com\Implementation\Com.c	 14546  
; ..\component\Com\Implementation\Com.c	 14547  # if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14548    /* #10 If the passed Tx ComIPdu is a Tp Pdu, check if the Tp connection is in READY state, if not return COM_BUSY */
; ..\component\Com\Implementation\Com.c	 14549    if(Com_IsTxTpInfoUsedOfTxPduInfo(idxTxPduInfo))       /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14550    {
; ..\component\Com\Implementation\Com.c	 14551      Com_TxTpInfoIdxOfTxPduInfoType txTpPduInfoIdx = Com_GetTxTpInfoIdxOfTxPduInfo(idxTxPduInfo);
; ..\component\Com\Implementation\Com.c	 14552      if(Com_GetTxTpConnectionState(txTpPduInfoIdx) != COM_READY_TXTPCONNECTIONSTATE)
; ..\component\Com\Implementation\Com.c	 14553      {
; ..\component\Com\Implementation\Com.c	 14554        /* \trace SPEC-2736898 */ /* \trace SPEC-2736899 */
; ..\component\Com\Implementation\Com.c	 14555        retVal = COM_BUSY;
; ..\component\Com\Implementation\Com.c	 14556      }
; ..\component\Com\Implementation\Com.c	 14557    }
; ..\component\Com\Implementation\Com.c	 14558    if(retVal == E_OK)
; ..\component\Com\Implementation\Com.c	 14559  # endif
; ..\component\Com\Implementation\Com.c	 14560    {
; ..\component\Com\Implementation\Com.c	 14561  # if (COM_FILTERINFOUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14562      /* #30 Check the filter state of the passed Tx ComSignal and update the transition mode state if required */
; ..\component\Com\Implementation\Com.c	 14563      Com_SendSignal_CheckFilter(idxTxSigInfo, newValuePtr, (PduIdType) idxTxPduInfo);    /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 14564  # endif
; ..\component\Com\Implementation\Com.c	 14565      /* #40 Write the passed signal data */
; ..\component\Com\Implementation\Com.c	 14566      Com_SendSignal_WriteSignal(idxTxSigInfo, SignalDataPtr, Length, (PduIdType) idxTxPduInfo);  /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 14567  
; ..\component\Com\Implementation\Com.c	 14568      /* #50 If the Tx ComIPdu is active, evaluate the trigger conditions, otherwise return COM_SERVICE_NOT_AVAILABLE */
; ..\component\Com\Implementation\Com.c	 14569      if(Com_IsTxPduGrpActive(idxTxPduInfo))      /* COV_COM_NO_IPDUGROUPS */
; ..\component\Com\Implementation\Com.c	 14570      {
; ..\component\Com\Implementation\Com.c	 14571  # if ((COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14572        Com_SendSignal_EvaluateTriggerConditionAndRequestTransmit(idxTxSigInfo, newValuePtr, (PduIdType) idxTxPduInfo);   /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 14573  # endif
; ..\component\Com\Implementation\Com.c	 14574      }
; ..\component\Com\Implementation\Com.c	 14575      else
; ..\component\Com\Implementation\Com.c	 14576      {
; ..\component\Com\Implementation\Com.c	 14577        retVal = COM_SERVICE_NOT_AVAILABLE;
; ..\component\Com\Implementation\Com.c	 14578      }
; ..\component\Com\Implementation\Com.c	 14579  
; ..\component\Com\Implementation\Com.c	 14580  # if ((COM_TXFILTERINITVALUEARRAYBASEDFILTERINITVALUEUSEDOFTXSIGINFO == STD_ON) || (COM_FILTERINITVALUEIDXOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14581      /* #60 Update the filter old value */
; ..\component\Com\Implementation\Com.c	 14582      Com_SetTxFilterOldValueX(idxTxSigInfo, SignalDataPtr, Length);      /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 14583  # endif
; ..\component\Com\Implementation\Com.c	 14584    }     /* retVal not busy check */
; ..\component\Com\Implementation\Com.c	 14585  
; ..\component\Com\Implementation\Com.c	 14586    return retVal;
; ..\component\Com\Implementation\Com.c	 14587  }
; ..\component\Com\Implementation\Com.c	 14588  #endif
; ..\component\Com\Implementation\Com.c	 14589  
; ..\component\Com\Implementation\Com.c	 14590  #if (COM_FILTERINFOUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14591  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14592    Com_SendSignal_CheckFilter
; ..\component\Com\Implementation\Com.c	 14593   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14594  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14595   *
; ..\component\Com\Implementation\Com.c	 14596   *
; ..\component\Com\Implementation\Com.c	 14597   *
; ..\component\Com\Implementation\Com.c	 14598   *
; ..\component\Com\Implementation\Com.c	 14599   *
; ..\component\Com\Implementation\Com.c	 14600   *
; ..\component\Com\Implementation\Com.c	 14601   ***********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14602  LOCAL_INLINE FUNC(void, COM_CODE) Com_SendSignal_CheckFilter(Com_SignalIdType idxTxSigInfo, P2CONST(void, AUTOMATIC, AUTOMATIC) newValuePtr, PduIdType idxTxPduInfo)
; ..\component\Com\Implementation\Com.c	 14603  {
; ..\component\Com\Implementation\Com.c	 14604    /* #10 If the passed Tx ComSignal has filter */
; ..\component\Com\Implementation\Com.c	 14605    if(Com_IsFilterInfoUsedOfTxSigInfo(idxTxSigInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14606    {
; ..\component\Com\Implementation\Com.c	 14607      Com_FilterInfoIdxOfTxSigInfoType idxFilterInfo = Com_GetFilterInfoIdxOfTxSigInfo(idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	 14608  
; ..\component\Com\Implementation\Com.c	 14609      /* #20 Evaluate the filter state */
; ..\component\Com\Implementation\Com.c	 14610      boolean filterState = Com_TxSignal_EvaluateFilter(idxTxSigInfo, (uint32) idxFilterInfo, newValuePtr);       /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 14611  
; ..\component\Com\Implementation\Com.c	 14612      boolean oldFilterState = Com_IsTxFilterState(Com_GetTxFilterInitStateIdxOfTxSigInfo(idxTxSigInfo));
; ..\component\Com\Implementation\Com.c	 14613  
; ..\component\Com\Implementation\Com.c	 14614      /* #30 Update the tx filter state */
; ..\component\Com\Implementation\Com.c	 14615      Com_SetTxFilterState(Com_GetTxFilterInitStateIdxOfTxSigInfo(idxTxSigInfo), filterState);    /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	 14616  
; ..\component\Com\Implementation\Com.c	 14617      /* #40 If the passed signal is not a group signal and the passed filter state is different to the current filter state, update the transition mode state */
; ..\component\Com\Implementation\Com.c	 14618  
; ..\component\Com\Implementation\Com.c	 14619  # if (COM_TXSIGGRPINFOUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14620      if(!Com_IsTxSigGrpInfoUsedOfTxSigInfo(idxTxSigInfo))        /* COV_COM_SIGGRP_FILTER */
; ..\component\Com\Implementation\Com.c	 14621  # endif
; ..\component\Com\Implementation\Com.c	 14622      {
; ..\component\Com\Implementation\Com.c	 14623        if(oldFilterState != filterState) /* COV_COM_FILTERSTATE */
; ..\component\Com\Implementation\Com.c	 14624        {
; ..\component\Com\Implementation\Com.c	 14625          Com_TxModeHdlr_UpdateTMS(idxTxPduInfo);
; ..\component\Com\Implementation\Com.c	 14626        }
; ..\component\Com\Implementation\Com.c	 14627      }
; ..\component\Com\Implementation\Com.c	 14628    }
; ..\component\Com\Implementation\Com.c	 14629  }
; ..\component\Com\Implementation\Com.c	 14630  #endif
; ..\component\Com\Implementation\Com.c	 14631  
; ..\component\Com\Implementation\Com.c	 14632  
; ..\component\Com\Implementation\Com.c	 14633  #if ((COM_ARRAYACCESSUSEDOFTXSIGGRPINFO == STD_ON) && ((COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON)) && ((COM_TXSIGGRPONCHANGEMASKONCHANGEUSEDOFTXSIGGRPINFO == STD_ON) || (COM_TXSIGGRPONCHANGEMASKONCHANGEWITHOUTREPUSEDOFTXSIGGRPINFO == STD_ON)))
; ..\component\Com\Implementation\Com.c	 14634  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14635    Com_SendSignalGroupArrayHasChanged
; ..\component\Com\Implementation\Com.c	 14636  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14637  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14638   *
; ..\component\Com\Implementation\Com.c	 14639   *
; ..\component\Com\Implementation\Com.c	 14640  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14641  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_SendSignalGroupArrayHasChanged(P2CONST(uint8, AUTOMATIC, COM_APPL_VAR) SignalGroupArrayPtr,
; ..\component\Com\Implementation\Com.c	 14642                                                                          P2CONST(uint8, AUTOMATIC, COM_PBCFG) maskPtr, P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) pIpduBuf, uint32 MaskLength)
; ..\component\Com\Implementation\Com.c	 14643  {
; ..\component\Com\Implementation\Com.c	 14644    boolean retVal = FALSE;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 14645    uint32 i;
; ..\component\Com\Implementation\Com.c	 14646    /* #10 Bytewise comparison of signal group array and ipdu-buffer, if any change has occurred */
; ..\component\Com\Implementation\Com.c	 14647    for(i = 0; i < MaskLength; i++)
; ..\component\Com\Implementation\Com.c	 14648    {
; ..\component\Com\Implementation\Com.c	 14649      /* Bits that to do not belong to a group signal with a certain transfer property are masked out with the provided mask. */
; ..\component\Com\Implementation\Com.c	 14650      if((pIpduBuf[i] & maskPtr[i]) != (SignalGroupArrayPtr[i] & maskPtr[i]))
; ..\component\Com\Implementation\Com.c	 14651      {
; ..\component\Com\Implementation\Com.c	 14652        retVal = TRUE;
; ..\component\Com\Implementation\Com.c	 14653        break;
; ..\component\Com\Implementation\Com.c	 14654      }
; ..\component\Com\Implementation\Com.c	 14655    }
; ..\component\Com\Implementation\Com.c	 14656    return retVal;
; ..\component\Com\Implementation\Com.c	 14657  }
; ..\component\Com\Implementation\Com.c	 14658  #endif
; ..\component\Com\Implementation\Com.c	 14659  
; ..\component\Com\Implementation\Com.c	 14660  #if(COM_SIGGRPARRAYFILTERINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14661  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14662    Com_EvaluateSigGrpArrFilterProcessing
; ..\component\Com\Implementation\Com.c	 14663  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14664  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14665   *
; ..\component\Com\Implementation\Com.c	 14666   *
; ..\component\Com\Implementation\Com.c	 14667   *
; ..\component\Com\Implementation\Com.c	 14668   *
; ..\component\Com\Implementation\Com.c	 14669   *
; ..\component\Com\Implementation\Com.c	 14670   *
; ..\component\Com\Implementation\Com.c	 14671  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14672  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_EvaluateSigGrpArrFilterProcessing(Com_SigGrpArrayFilterInfoIterType idxFilterInfo,
; ..\component\Com\Implementation\Com.c	 14673                                                                             P2CONST(uint8, AUTOMATIC, COM_PBCFG) maskPtr,
; ..\component\Com\Implementation\Com.c	 14674                                                                             P2CONST(uint8, AUTOMATIC, COM_PBCFG) filterValueXPtr, P2CONST(uint8, AUTOMATIC, COM_APPL_VAR) newValuePtr, uint32 maskLength)
; ..\component\Com\Implementation\Com.c	 14675  {
; ..\component\Com\Implementation\Com.c	 14676    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 14677    uint32 i;
; ..\component\Com\Implementation\Com.c	 14678  
; ..\component\Com\Implementation\Com.c	 14679    /* #10 Bytewise evaluation of SignalGroup Filter with ArrayAccess enabled */
; ..\component\Com\Implementation\Com.c	 14680    switch (Com_GetFilterAlgoOfSigGrpArrayFilterInfo(idxFilterInfo))
; ..\component\Com\Implementation\Com.c	 14681    {
; ..\component\Com\Implementation\Com.c	 14682  
; ..\component\Com\Implementation\Com.c	 14683  # if(COM_EXISTS_MASKED_NEW_DIFFERS_X_FILTERALGOOFSIGGRPARRAYFILTERINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14684        /* #20 Evaluate SignalGroup Array according to MASK_NEW_EQUALS_X filterAlgorithm */
; ..\component\Com\Implementation\Com.c	 14685      case COM_MASKED_NEW_DIFFERS_X_FILTERALGOOFSIGGRPARRAYFILTERINFO:
; ..\component\Com\Implementation\Com.c	 14686      {
; ..\component\Com\Implementation\Com.c	 14687        for(i = 0; i < maskLength; i++)
; ..\component\Com\Implementation\Com.c	 14688        {
; ..\component\Com\Implementation\Com.c	 14689          /* #30 Stop filter evaluation if at least one byte evaluates to TRUE */
; ..\component\Com\Implementation\Com.c	 14690          if((newValuePtr[i] & maskPtr[i]) != filterValueXPtr[i])
; ..\component\Com\Implementation\Com.c	 14691          {
; ..\component\Com\Implementation\Com.c	 14692            filterState = TRUE;
; ..\component\Com\Implementation\Com.c	 14693            break;
; ..\component\Com\Implementation\Com.c	 14694          }
; ..\component\Com\Implementation\Com.c	 14695        }
; ..\component\Com\Implementation\Com.c	 14696      }
; ..\component\Com\Implementation\Com.c	 14697        break;
; ..\component\Com\Implementation\Com.c	 14698  # endif
; ..\component\Com\Implementation\Com.c	 14699  # if(COM_EXISTS_MASKED_NEW_EQUALS_X_FILTERALGOOFSIGGRPARRAYFILTERINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14700        /* #40 Evaluate SignalGroup Array according to MASK_DIFFERS_X filterAlgorithm */
; ..\component\Com\Implementation\Com.c	 14701      case COM_MASKED_NEW_EQUALS_X_FILTERALGOOFSIGGRPARRAYFILTERINFO:
; ..\component\Com\Implementation\Com.c	 14702      {
; ..\component\Com\Implementation\Com.c	 14703        filterState = TRUE;
; ..\component\Com\Implementation\Com.c	 14704        for(i = 0; i < maskLength; i++)
; ..\component\Com\Implementation\Com.c	 14705        {
; ..\component\Com\Implementation\Com.c	 14706          /* #50 Stop filter evaluation if at least one byte evaluates to TRUE */
; ..\component\Com\Implementation\Com.c	 14707          if((newValuePtr[i] & maskPtr[i]) != filterValueXPtr[i])
; ..\component\Com\Implementation\Com.c	 14708          {
; ..\component\Com\Implementation\Com.c	 14709            filterState = FALSE;
; ..\component\Com\Implementation\Com.c	 14710            break;
; ..\component\Com\Implementation\Com.c	 14711          }
; ..\component\Com\Implementation\Com.c	 14712        }
; ..\component\Com\Implementation\Com.c	 14713      }
; ..\component\Com\Implementation\Com.c	 14714        break;
; ..\component\Com\Implementation\Com.c	 14715  # endif
; ..\component\Com\Implementation\Com.c	 14716      default:   /* COV_COM_MISRA */
; ..\component\Com\Implementation\Com.c	 14717        break;
; ..\component\Com\Implementation\Com.c	 14718    }
; ..\component\Com\Implementation\Com.c	 14719  
; ..\component\Com\Implementation\Com.c	 14720    return filterState;
; ..\component\Com\Implementation\Com.c	 14721  }
; ..\component\Com\Implementation\Com.c	 14722  #endif
; ..\component\Com\Implementation\Com.c	 14723  
; ..\component\Com\Implementation\Com.c	 14724  #if(COM_SIGGRPARRAYFILTERINFOUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14725  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14726    Com_EvaluateSigGrpArrFilter
; ..\component\Com\Implementation\Com.c	 14727  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14728  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14729   *
; ..\component\Com\Implementation\Com.c	 14730   *
; ..\component\Com\Implementation\Com.c	 14731  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14732  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_EvaluateSigGrpArrFilter(Com_SigGrpArrayFilterInfoIterType idxFilterInfo, P2CONST(uint8, AUTOMATIC, COM_APPL_VAR) newValuePtr)
; ..\component\Com\Implementation\Com.c	 14733  {
; ..\component\Com\Implementation\Com.c	 14734    boolean filterState = FALSE;  /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 14735  
; ..\component\Com\Implementation\Com.c	 14736    uint32 maskLength = Com_GetConstValueUInt8FilterMaskLengthOfSigGrpArrayFilterInfo(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	 14737    Com_ConstValueUInt8FilterMaskStartIdxOfSigGrpArrayFilterInfoType idxConstValueUInt8FilterMask = Com_GetConstValueUInt8FilterMaskStartIdxOfSigGrpArrayFilterInfo(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	 14738    Com_ConstValueUInt8FilterValueXStartIdxOfSigGrpArrayFilterInfoType idxConstValueUInt8FilterValueX = Com_GetConstValueUInt8FilterValueXStartIdxOfSigGrpArrayFilterInfo(idxFilterInfo);
; ..\component\Com\Implementation\Com.c	 14739  
; ..\component\Com\Implementation\Com.c	 14740    P2CONST(uint8, AUTOMATIC, COM_PBCFG) maskPtr = Com_GetAddrConstValueUInt8(idxConstValueUInt8FilterMask);
; ..\component\Com\Implementation\Com.c	 14741    P2CONST(uint8, AUTOMATIC, COM_PBCFG) filterValueXPtr = Com_GetAddrConstValueUInt8(idxConstValueUInt8FilterValueX);
; ..\component\Com\Implementation\Com.c	 14742  
; ..\component\Com\Implementation\Com.c	 14743    /* #10 Evaluate filter state */
; ..\component\Com\Implementation\Com.c	 14744    filterState = Com_EvaluateSigGrpArrFilterProcessing(idxFilterInfo, maskPtr, filterValueXPtr, newValuePtr, maskLength);        /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14745  
; ..\component\Com\Implementation\Com.c	 14746    return filterState;
; ..\component\Com\Implementation\Com.c	 14747  }
; ..\component\Com\Implementation\Com.c	 14748  #endif
; ..\component\Com\Implementation\Com.c	 14749  #if (COM_ARRAYACCESSUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14750  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14751    Com_SendSignalGroupArray_Processing
; ..\component\Com\Implementation\Com.c	 14752  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14753  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14754   *
; ..\component\Com\Implementation\Com.c	 14755   *
; ..\component\Com\Implementation\Com.c	 14756   *
; ..\component\Com\Implementation\Com.c	 14757   *
; ..\component\Com\Implementation\Com.c	 14758   *
; ..\component\Com\Implementation\Com.c	 14759   *
; ..\component\Com\Implementation\Com.c	 14760   *
; ..\component\Com\Implementation\Com.c	 14761   *
; ..\component\Com\Implementation\Com.c	 14762   *
; ..\component\Com\Implementation\Com.c	 14763   *
; ..\component\Com\Implementation\Com.c	 14764   *
; ..\component\Com\Implementation\Com.c	 14765   *
; ..\component\Com\Implementation\Com.c	 14766   *
; ..\component\Com\Implementation\Com.c	 14767  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14768  LOCAL_INLINE FUNC(uint8, COM_CODE) Com_SendSignalGroupArray_Processing(Com_SignalGroupIdType SignalGroupId, P2CONST(uint8, AUTOMATIC, COM_APPL_VAR) SignalGroupArrayPtr)
; ..\component\Com\Implementation\Com.c	 14769  {
; ..\component\Com\Implementation\Com.c	 14770  # if(COM_SIGGRPARRAYFILTERINFOUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14771    /* #10 If filter is configured, evaluate and update the filter state */
; ..\component\Com\Implementation\Com.c	 14772    if(Com_IsSigGrpArrayFilterInfoUsedOfTxSigGrpInfo(SignalGroupId))
; ..\component\Com\Implementation\Com.c	 14773    {
; ..\component\Com\Implementation\Com.c	 14774      Com_SigGrpArrayFilterInfoIterType idxFilterInfo = Com_GetSigGrpArrayFilterInfoStartIdxOfTxSigGrpInfo(SignalGroupId);
; ..\component\Com\Implementation\Com.c	 14775      Com_TxFilterInitStateIterType idxTxFilterInitState = Com_GetTxFilterInitStateStartIdxOfTxSigGrpInfo(SignalGroupId);
; ..\component\Com\Implementation\Com.c	 14776      boolean filterState = FALSE;        /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 14777  
; ..\component\Com\Implementation\Com.c	 14778      for(; idxFilterInfo < Com_GetSigGrpArrayFilterInfoEndIdxOfTxSigGrpInfo(SignalGroupId); idxFilterInfo++)
; ..\component\Com\Implementation\Com.c	 14779      {
; ..\component\Com\Implementation\Com.c	 14780        filterState = Com_EvaluateSigGrpArrFilter(idxFilterInfo, &(SignalGroupArrayPtr[Com_GetOffsetInSignalGroupOfSigGrpArrayFilterInfo(idxFilterInfo)]));       /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14781        if(filterState == TRUE)
; ..\component\Com\Implementation\Com.c	 14782        {
; ..\component\Com\Implementation\Com.c	 14783          break;
; ..\component\Com\Implementation\Com.c	 14784        }
; ..\component\Com\Implementation\Com.c	 14785      }
; ..\component\Com\Implementation\Com.c	 14786  
; ..\component\Com\Implementation\Com.c	 14787      /* Update the tx filterState of the SignalGroup for each GroupSignal */
; ..\component\Com\Implementation\Com.c	 14788      for(; idxTxFilterInitState < Com_GetTxFilterInitStateEndIdxOfTxSigGrpInfo(SignalGroupId); idxTxFilterInitState++)
; ..\component\Com\Implementation\Com.c	 14789      {
; ..\component\Com\Implementation\Com.c	 14790        Com_SetTxFilterState(idxTxFilterInitState, filterState);  /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 14791      }
; ..\component\Com\Implementation\Com.c	 14792    }
; ..\component\Com\Implementation\Com.c	 14793  # endif
; ..\component\Com\Implementation\Com.c	 14794  
; ..\component\Com\Implementation\Com.c	 14795  # if ((COM_ONCHANGEUSEDOFTXSIGINFO == STD_ON) || (COM_TRIGGEREDOFTXSIGINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14796    /* #20 If TRIGGERED BIT is set for the signal group */
; ..\component\Com\Implementation\Com.c	 14797    if(Com_TxSigIf_IsTxSigGrpInfoTriggered(SignalGroupId))        /* COV_COM_ONLY_TRIGGERED_SIGGRP */
; ..\component\Com\Implementation\Com.c	 14798    {
; ..\component\Com\Implementation\Com.c	 14799      boolean doTrigger = FALSE;
; ..\component\Com\Implementation\Com.c	 14800      boolean withoutRepetition = TRUE;   /* Will only be evaluated for COM_WITHOUTREPOFTXSIGINFO == STD_ON */
; ..\component\Com\Implementation\Com.c	 14801  
; ..\component\Com\Implementation\Com.c	 14802      /* #30 If transmission property of signal group equals TRIGGERED_ON_CHANGE or TRIGGERED_ON_CHANGE_WITHOUT_REPETITION */
; ..\component\Com\Implementation\Com.c	 14803      if(Com_TxSigIf_IsTxSigGrpInfoOnChange(SignalGroupId))       /* COV_COM_TRIGGERED_ONCHG_SIGGRP */
; ..\component\Com\Implementation\Com.c	 14804      {
; ..\component\Com\Implementation\Com.c	 14805  #  if ((COM_TXSIGGRPONCHANGEMASKONCHANGEUSEDOFTXSIGGRPINFO == STD_ON) || (COM_TXSIGGRPONCHANGEMASKONCHANGEWITHOUTREPUSEDOFTXSIGGRPINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 14806        Com_TxPduInfoIdxOfTxSigGrpInfoType ipdu = Com_GetTxPduInfoIdxOfTxSigGrpInfo(SignalGroupId);
; ..\component\Com\Implementation\Com.c	 14807  #  endif
; ..\component\Com\Implementation\Com.c	 14808  
; ..\component\Com\Implementation\Com.c	 14809  #  if (COM_TXSIGGRPONCHANGEMASKONCHANGEUSEDOFTXSIGGRPINFO == STD_ON)    /* Evaluate onChange */
; ..\component\Com\Implementation\Com.c	 14810        /* #40 If signal group contains group signals with transmission property TRIGGERED_ON_CHANGE (if COM_TXSIGGRPONCHANGEMASKONCHANGEUSEDOFTXSIGGRPINFO is enabled) */
; ..\component\Com\Implementation\Com.c	 14811        if(Com_IsTxSigGrpOnChangeMaskOnChangeUsedOfTxSigGrpInfo(SignalGroupId))   /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14812        {
; ..\component\Com\Implementation\Com.c	 14813          /* Get the indirection to the mask to evaluate if any of the contained group signals has changed */
; ..\component\Com\Implementation\Com.c	 14814          P2CONST(uint8, AUTOMATIC, COM_PBCFG) maskPtr = Com_GetAddrTxSigGrpOnChangeMask(Com_GetTxSigGrpOnChangeMaskOnChangeStartIdxOfTxSigGrpInfo(SignalGroupId));
; ..\component\Com\Implementation\Com.c	 14815  
; ..\component\Com\Implementation\Com.c	 14816          /* Calculate the position of the first group signal with the transmission property TRIGGERED_ON_CHANGE within the ipdu buffer to compare the stored values */
; ..\component\Com\Implementation\Com.c	 14817          P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) pIpduBuf = Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxPduInfo(ipdu) + Com_GetSigGroupOnChangeStartPositionOfTxSigGrpInfo(SignalGroupId));
; ..\component\Com\Implementation\Com.c	 14818  
; ..\component\Com\Implementation\Com.c	 14819          /* Get the length of the triggered on change mask */
; ..\component\Com\Implementation\Com.c	 14820          Com_TxSigGrpOnChangeMaskOnChangeLengthOfTxSigGrpInfoType MaskLength = Com_GetTxSigGrpOnChangeMaskOnChangeLengthOfTxSigGrpInfo(SignalGroupId);
; ..\component\Com\Implementation\Com.c	 14821  
; ..\component\Com\Implementation\Com.c	 14822          /* #50 Perform check if any group signal with transmission property TRIGGERED_ON_CHANGE has changed and set transmission initiation flag accordingly */
; ..\component\Com\Implementation\Com.c	 14823          doTrigger = Com_SendSignalGroupArrayHasChanged(&(SignalGroupArrayPtr[Com_GetSigGroupOnChangeOffsetOfTxSigGrpInfo(SignalGroupId)]), maskPtr, pIpduBuf, MaskLength);      /* SBSW_COM_COMST_PTR */
; ..\component\Com\Implementation\Com.c	 14824        }
; ..\component\Com\Implementation\Com.c	 14825  #  endif
; ..\component\Com\Implementation\Com.c	 14826  
; ..\component\Com\Implementation\Com.c	 14827  #  if (COM_TXSIGGRPONCHANGEMASKONCHANGEWITHOUTREPUSEDOFTXSIGGRPINFO == STD_ON)  /* Evaluate onChangeWithoutRepetition */
; ..\component\Com\Implementation\Com.c	 14828        /* #60 If no group signal with transmission property TRIGGERED_ON_CHANGE has changed (if COM_TXSIGGRPONCHANGEMASKONCHANGEWITHOUTREPUSEDOFTXSIGGRPINFO is enabled) */
; ..\component\Com\Implementation\Com.c	 14829        if(doTrigger == FALSE)
; ..\component\Com\Implementation\Com.c	 14830        {
; ..\component\Com\Implementation\Com.c	 14831          /* #70 If signal group contains any group signal with transmission property TRIGGERED_ON_CHANGE_WITHOUT_REPETITION */
; ..\component\Com\Implementation\Com.c	 14832          if(Com_IsTxSigGrpOnChangeMaskOnChangeWithoutRepUsedOfTxSigGrpInfo(SignalGroupId))       /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 14833          {
; ..\component\Com\Implementation\Com.c	 14834            /* Get the indirection to the mask to evaluate if any of the contained group signals with transmission property TRIGGERED_ON_CHANGE_WITHOUT_REPETITION has changed */
; ..\component\Com\Implementation\Com.c	 14835            P2CONST(uint8, AUTOMATIC, COM_PBCFG) maskPtr = Com_GetAddrTxSigGrpOnChangeMask(Com_GetTxSigGrpOnChangeMaskOnChangeWithoutRepStartIdxOfTxSigGrpInfo(SignalGroupId));
; ..\component\Com\Implementation\Com.c	 14836  
; ..\component\Com\Implementation\Com.c	 14837            /* Calculate the position of the first group signal with the transmission property TRIGGERED_ON_CHANGE_WITHOUT_REPETITION within the ipdu buffer to compare the stored values */
; ..\component\Com\Implementation\Com.c	 14838            P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) pIpduBuf =
; ..\component\Com\Implementation\Com.c	 14839              Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxPduInfo(ipdu) + Com_GetSigGroupOnChangeWithoutRepStartPositionOfTxSigGrpInfo(SignalGroupId));
; ..\component\Com\Implementation\Com.c	 14840  
; ..\component\Com\Implementation\Com.c	 14841            /* Get the length of the triggered on change without repetition mask */
; ..\component\Com\Implementation\Com.c	 14842            Com_TxSigGrpOnChangeMaskOnChangeWithoutRepLengthOfTxSigGrpInfoType MaskLength = Com_GetTxSigGrpOnChangeMaskOnChangeWithoutRepLengthOfTxSigGrpInfo(SignalGroupId);
; ..\component\Com\Implementation\Com.c	 14843  
; ..\component\Com\Implementation\Com.c	 14844            /* #80 Perform check if any group signal with transmission property TRIGGERED_ON_CHANGE_WITHOUT_REPETITION has changed and set transmission initiation flag accordingly */
; ..\component\Com\Implementation\Com.c	 14845            doTrigger = Com_SendSignalGroupArrayHasChanged(&(SignalGroupArrayPtr[Com_GetSigGroupOnChangeWithoutRepOffsetOfTxSigGrpInfo(SignalGroupId)]), maskPtr, pIpduBuf, MaskLength);  /* SBSW_COM_COMST_PTR */
; ..\component\Com\Implementation\Com.c	 14846          }
; ..\component\Com\Implementation\Com.c	 14847        }
; ..\component\Com\Implementation\Com.c	 14848        else
; ..\component\Com\Implementation\Com.c	 14849  #  endif
; ..\component\Com\Implementation\Com.c	 14850        {
; ..\component\Com\Implementation\Com.c	 14851  #  if (COM_WITHOUTREPOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14852          /* #90 Otherwise set the without repetition flag to false to indicate that transmission should be performed with configured amount of repetitions */
; ..\component\Com\Implementation\Com.c	 14853          withoutRepetition = FALSE;
; ..\component\Com\Implementation\Com.c	 14854  #  endif
; ..\component\Com\Implementation\Com.c	 14855        }
; ..\component\Com\Implementation\Com.c	 14856      }
; ..\component\Com\Implementation\Com.c	 14857      /* #100 Otherwise transmission property is assumed to be TRIGGERED or TRIGGERED_WITHOUT_REPETITION */
; ..\component\Com\Implementation\Com.c	 14858      else
; ..\component\Com\Implementation\Com.c	 14859      {
; ..\component\Com\Implementation\Com.c	 14860        /* set transmission initiation flag to true */
; ..\component\Com\Implementation\Com.c	 14861        doTrigger = TRUE;
; ..\component\Com\Implementation\Com.c	 14862  #  if (COM_WITHOUTREPOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 14863        /* set without repetition flag accordingly to the configured transmission property (if configured) */
; ..\component\Com\Implementation\Com.c	 14864        withoutRepetition = Com_TxSigIf_IsTxSigGrpInfoWithoutRepetition(SignalGroupId);
; ..\component\Com\Implementation\Com.c	 14865  #  endif
; ..\component\Com\Implementation\Com.c	 14866      }
; ..\component\Com\Implementation\Com.c	 14867  
; ..\component\Com\Implementation\Com.c	 14868      /* #110 If transmission is requested, set group event flag */
; ..\component\Com\Implementation\Com.c	 14869      if(doTrigger == TRUE)       /* COV_COM_ONLY_TRIGGERED_SIGGRP */
; ..\component\Com\Implementation\Com.c	 14870      {
; ..\component\Com\Implementation\Com.c	 14871        Com_SendSignal_SetSigGrpEventFlag((Com_TxSigGrpInfoIdxOfTxSigInfoType) SignalGroupId, withoutRepetition);
; ..\component\Com\Implementation\Com.c	 14872      }
; ..\component\Com\Implementation\Com.c	 14873    }
; ..\component\Com\Implementation\Com.c	 14874  # endif
; ..\component\Com\Implementation\Com.c	 14875    /* #120 Copy the content of the associated signal group array to the associated I-PDU buffer (if COM_TXSIGGRPMASK enabled). */
; ..\component\Com\Implementation\Com.c	 14876    return Com_SendSignalGroup_Processing(SignalGroupId, SignalGroupArrayPtr);    /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 14877  }
; ..\component\Com\Implementation\Com.c	 14878  #endif
; ..\component\Com\Implementation\Com.c	 14879  
; ..\component\Com\Implementation\Com.c	 14880  
; ..\component\Com\Implementation\Com.c	 14881  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14882    Com_CalculateFloat32AbsValue
; ..\component\Com\Implementation\Com.c	 14883  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14884  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14885   *
; ..\component\Com\Implementation\Com.c	 14886   *
; ..\component\Com\Implementation\Com.c	 14887  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14888  #if (((COM_EXISTS_FLOAT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)) || ((COM_EXISTS_FLOAT32_APPLTYPEOFTXSIGINFO == STD_ON) && (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_FLOAT32 == STD_ON)))
; ..\component\Com\Implementation\Com.c	 14889  LOCAL_INLINE FUNC(float32, COM_CODE) Com_CalculateFloat32AbsValue(float32 value)
; ..\component\Com\Implementation\Com.c	 14890  {
; ..\component\Com\Implementation\Com.c	 14891    /* #10 If the passed value is negative, calculate the absolute value and return the positive value */
; ..\component\Com\Implementation\Com.c	 14892    return (value < 0.0f) ? -value : value;
; ..\component\Com\Implementation\Com.c	 14893  }
; ..\component\Com\Implementation\Com.c	 14894  #endif
; ..\component\Com\Implementation\Com.c	 14895  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14896    Com_CalculateFloat64AbsValue
; ..\component\Com\Implementation\Com.c	 14897  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14898  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14899   *
; ..\component\Com\Implementation\Com.c	 14900   *
; ..\component\Com\Implementation\Com.c	 14901  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14902  #if (((COM_EXISTS_FLOAT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)) || ((COM_EXISTS_FLOAT64_APPLTYPEOFTXSIGINFO == STD_ON) && (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_FLOAT64 == STD_ON)))
; ..\component\Com\Implementation\Com.c	 14903  LOCAL_INLINE FUNC(float64, COM_CODE) Com_CalculateFloat64AbsValue(float64 value)
; ..\component\Com\Implementation\Com.c	 14904  {
; ..\component\Com\Implementation\Com.c	 14905    /* #10 If the passed value is negative, calculate the absolute value and return the positive value */
; ..\component\Com\Implementation\Com.c	 14906    return (value < 0.0) ? -value : value;
; ..\component\Com\Implementation\Com.c	 14907  }
; ..\component\Com\Implementation\Com.c	 14908  #endif
; ..\component\Com\Implementation\Com.c	 14909  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14910    Com_CompareFloat32Values
; ..\component\Com\Implementation\Com.c	 14911  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14912  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14913   *
; ..\component\Com\Implementation\Com.c	 14914   *
; ..\component\Com\Implementation\Com.c	 14915  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14916  #if (((COM_EXISTS_FLOAT32_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)) || ((COM_EXISTS_FLOAT32_APPLTYPEOFTXSIGINFO == STD_ON) && (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_FLOAT32 == STD_ON)))
; ..\component\Com\Implementation\Com.c	 14917  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_CompareFloat32Values(float32 firstValue, float32 scndValue)
; ..\component\Com\Implementation\Com.c	 14918  {
; ..\component\Com\Implementation\Com.c	 14919    boolean retVal = FALSE;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 14920    /* #10 If the difference between both float32 values is smaller than COM_FLT_EPSILON. */
; ..\component\Com\Implementation\Com.c	 14921    if(Com_CalculateFloat32AbsValue(firstValue - scndValue) < COM_FLT_EPSILON)
; ..\component\Com\Implementation\Com.c	 14922    {
; ..\component\Com\Implementation\Com.c	 14923      retVal = TRUE;
; ..\component\Com\Implementation\Com.c	 14924    }
; ..\component\Com\Implementation\Com.c	 14925    return retVal;
; ..\component\Com\Implementation\Com.c	 14926  }
; ..\component\Com\Implementation\Com.c	 14927  #endif
; ..\component\Com\Implementation\Com.c	 14928  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14929    Com_CompareFloat64Values
; ..\component\Com\Implementation\Com.c	 14930  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14931  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14932   *
; ..\component\Com\Implementation\Com.c	 14933   *
; ..\component\Com\Implementation\Com.c	 14934  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14935  #if (((COM_EXISTS_FLOAT64_APPLTYPEOFRXACCESSINFO == STD_ON) && (COM_INVVALUEUSEDOFRXACCESSINFO == STD_ON)) || ((COM_EXISTS_FLOAT64_APPLTYPEOFTXSIGINFO == STD_ON) && (COM_EXISTS_MASKED_NEW_DIFFERS_MASKED_OLD_FILTERALGOOFFILTERINFO_FLOAT64 == STD_ON)))
; ..\component\Com\Implementation\Com.c	 14936  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_CompareFloat64Values(float64 firstValue, float64 scndValue)
; ..\component\Com\Implementation\Com.c	 14937  {
; ..\component\Com\Implementation\Com.c	 14938    boolean retVal = FALSE;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 14939    /* #10 If the difference between both float64 values is smaller than COM_DBL_EPSILON. */
; ..\component\Com\Implementation\Com.c	 14940    if(Com_CalculateFloat64AbsValue(firstValue - scndValue) < COM_DBL_EPSILON)
; ..\component\Com\Implementation\Com.c	 14941    {
; ..\component\Com\Implementation\Com.c	 14942      retVal = TRUE;
; ..\component\Com\Implementation\Com.c	 14943    }
; ..\component\Com\Implementation\Com.c	 14944    return retVal;
; ..\component\Com\Implementation\Com.c	 14945  }
; ..\component\Com\Implementation\Com.c	 14946  #endif
; ..\component\Com\Implementation\Com.c	 14947  
; ..\component\Com\Implementation\Com.c	 14948  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14949    GLOBAL FUNCTIONS
; ..\component\Com\Implementation\Com.c	 14950  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14951  
; ..\component\Com\Implementation\Com.c	 14952  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 14953    Com_Init
; ..\component\Com\Implementation\Com.c	 14954  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14955  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 14956   *
; ..\component\Com\Implementation\Com.c	 14957   *
; ..\component\Com\Implementation\Com.c	 14958   *
; ..\component\Com\Implementation\Com.c	 14959   *
; ..\component\Com\Implementation\Com.c	 14960   *
; ..\component\Com\Implementation\Com.c	 14961   *
; ..\component\Com\Implementation\Com.c	 14962   *
; ..\component\Com\Implementation\Com.c	 14963   *
; ..\component\Com\Implementation\Com.c	 14964   *
; ..\component\Com\Implementation\Com.c	 14965   *
; ..\component\Com\Implementation\Com.c	 14966   *
; ..\component\Com\Implementation\Com.c	 14967   *
; ..\component\Com\Implementation\Com.c	 14968   *
; ..\component\Com\Implementation\Com.c	 14969   *
; ..\component\Com\Implementation\Com.c	 14970  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 14971  FUNC(void, COM_CODE) Com_Init(P2CONST(Com_ConfigType, AUTOMATIC, COM_INIT_DATA) config)
; Function Com_Init
.L149:
Com_Init:	.type	func

; ..\component\Com\Implementation\Com.c	 14972  {
; ..\component\Com\Implementation\Com.c	 14973    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 14974    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 14975  
; ..\component\Com\Implementation\Com.c	 14976  #if(COM_USE_INIT_POINTER == STD_ON)
; ..\component\Com\Implementation\Com.c	 14977    Com_ConfigDataPtr = config;
; ..\component\Com\Implementation\Com.c	 14978  #endif
; ..\component\Com\Implementation\Com.c	 14979  /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 14980    /* #10 Check plausibility of all input parameters */
; ..\component\Com\Implementation\Com.c	 14981    if(Com_IsInitialized())
	movh.a	a15,#@his(Com_Initialized)
	lea	a15,[a15]@los(Com_Initialized)
.L950:
	sub.a	a10,#32
.L864:
	st.a	[a10]20,a15
.L951:
	mov	d8,#0
	movh.a	a2,#@his(Com_HandleRxPduDeferred)
.L952:
	mov	d9,d8
	ld.bu	d15,[a15]
.L444:
	lea	a2,[a2]@los(Com_HandleRxPduDeferred)
.L445:

; ..\component\Com\Implementation\Com.c	 14982    {
; ..\component\Com\Implementation\Com.c	 14983      errorId = COM_E_INIT_FAILED;
	cmov	d9,d15,#4
	ld.bu	d0,[a2]
.L448:
	fcall	.cocofun_3
.L865:
	movh.a	a4,#@his(Com_RxSigBufferSInt8)
.L866:
	lea	a4,[a4]@los(Com_RxSigBufferSInt8)
.L464:
	mov	d10,#1

; ..\component\Com\Implementation\Com.c	  9489      for(; com_RxAccessInfoIndIdx < Com_GetRxAccessInfoIndEndIdxOfRxPduInfo(ComRxPduId); com_RxAccessInfoIndIdx++)      (inlined)
	mov.a	a5,#1
.L3:
	ld.bu	d15,[a15]

; ..\component\Com\Implementation\Com.c	  9494        if(Com_IsInitValueUsedOfRxAccessInfo(com_RxAccessInfoIdx) && Com_IsBufferUsedOfRxAccessInfo(com_RxAccessInfoIdx)) /* COV_COM_RXPROCESSING_TX */      (inlined)
	jeq	d15,#0,.L4
.L474:
	ld.bu	d15,[a15]2
.L475:
	ld.bu	d1,[a15]3
.L476:

; ..\component\Com\Implementation\Com.c	  7245    switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))      (inlined)
	jne	d15,#1,.L5
.L953:
	movh.a	a6,#@his(Com_ConstValueSInt8)
	lea	a6,[a6]@los(Com_ConstValueSInt8)
	addsc.a	a6,a6,d1,#0
	ld.bu	d1,[a6]
	st.b	[a4],d1

; ..\component\Com\Implementation\Com.c	  7318      default:   /* COV_COM_MISRA */      (inlined)
.L5:

; ..\component\Com\Implementation\Com.c	  9494        if(Com_IsInitValueUsedOfRxAccessInfo(com_RxAccessInfoIdx) && Com_IsBufferUsedOfRxAccessInfo(com_RxAccessInfoIdx)) /* COV_COM_RXPROCESSING_TX */      (inlined)
.L4:
	add.a	a15,#4
.L954:
	add.a	a4,#1

; ..\component\Com\Implementation\Com.c	  9489      for(; com_RxAccessInfoIndIdx < Com_GetRxAccessInfoIndEndIdxOfRxPduInfo(ComRxPduId); com_RxAccessInfoIndIdx++)      (inlined)
	loop	a5,.L3
.L461:
	fcall	.cocofun_4
.L449:
	movh.a	a15,#@his(Com_RxPduGrpActive)
.L868:
	st.b	[a15]@los(Com_RxPduGrpActive),d8
	st.b	[a2],d0
.L955:
	mov	d11,d8
	movh.a	a12,#@his(Com_TxPduInfo)
.L867:
	lea	a12,[a12]@los(Com_TxPduInfo)
.L956:
	movh.a	a2,#@his(Com_TxModeInfo)
	lea	a2,[a2]@los(Com_TxModeInfo)
	st.a	[a10],a2
.L957:
	movh.a	a13,#@his(Com_CyclicSendRequest)
	lea	a13,[a13]@los(Com_CyclicSendRequest)
.L958:
	fcall	.cocofun_5
	st.a	[a10]8,a15
.L959:
	movh.a	a15,#@his(Com_CurrentTxMode)
	lea	a15,[a15]@los(Com_CurrentTxMode)
	st.a	[a10]4,a15
.L960:
	movh.a	a14,#@his(Com_CycleTimeCnt)
	lea	a14,[a14]@los(Com_CycleTimeCnt)
.L483:
	movh.a	a15,#@his(Com_TxSduLength)
	lea	a15,[a15]@los(Com_TxSduLength)
	st.a	[a10]16,a15
.L484:
	fcall	.cocofun_2
	st.a	[a10]12,a15
.L961:

; ..\component\Com\Implementation\Com.c	  4847    for(; ComTxPduId < Com_GetSizeOfTxPduInfo(); ComTxPduId++)      (inlined)
	mov.a	a15,#2
	st.a	[a10]24,a15
.L7:
	ld.a	a15,[a10]16
	addsc.a	a15,a15,d11,#0
	ld.bu	d15,[a12]2
	st.b	[a15],d15
.L494:
	ld.bu	d15,[a12]
.L962:

; ..\component\Com\Implementation\Com.c	 12289    if(Com_IsTxBufferUsedOfTxPduInfo(ComPduId))   /* COV_COM_TX_BUFFER_ALWAYS_USED */      (inlined)
	jeq	d15,#0,.L8
.L963:
	ld.bu	d15,[a12]4
	movh.a	a15,#@his(Com_TxBuffer)
	lea	a15,[a15]@los(Com_TxBuffer)
	addsc.a	a4,a15,d15,#0
	movh.a	a15,#@his(Com_TxPduInitValue)
	lea	a15,[a15]@los(Com_TxPduInitValue)
	addsc.a	a5,a15,d15,#0
	ld.bu	d4,[a12]2
	call	VStdLib_MemCpy

; ..\component\Com\Implementation\Com.c	 12289    if(Com_IsTxBufferUsedOfTxPduInfo(ComPduId))   /* COV_COM_TX_BUFFER_ALWAYS_USED */      (inlined)
.L8:
	ld.a	a2,[a10]
	ld.a	a15,[a10]4
	ld.bu	d0,[a2]
	ne	d0,d0,#0
	st.b	[a15],d0
.L504:
	ld.bu	d15,[a2]1

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
	jeq	d0,#0,.L9
	movh.a	a15,#@his(Com_TxModeTrue)
	lea	a15,[a15]@los(Com_TxModeTrue)

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
	j	.L10
.L9:
	movh.a	a15,#@his(Com_TxModeFalse)
	lea	a15,[a15]@los(Com_TxModeFalse)

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
.L10:
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
	ne	d15,d15,#0
.L964:

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
	jeq	d15,#0,.L11
.L965:
	st.b	[a13],d10
.L966:
	st.b	[a14],d10
.L967:

; ..\component\Com\Implementation\Com.c	 13493      Com_SetCyclicSendRequest(ComTxPduId, TRUE); /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */      (inlined)
	j	.L12

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
.L11:
	st.b	[a13],d8

; ..\component\Com\Implementation\Com.c	 13508    else      (inlined)
.L12:
	ld.bu	d15,[a13]
.L968:

; ..\component\Com\Implementation\Com.c	 13252    if(Com_IsCyclicSendRequest(ComPduId)) /* COV_COM_CYCLIC_SEND_REQUEST */      (inlined)
	jeq	d15,#0,.L13
.L969:
	st.b	[a14],d10

; ..\component\Com\Implementation\Com.c	 13252    if(Com_IsCyclicSendRequest(ComPduId)) /* COV_COM_CYCLIC_SEND_REQUEST */      (inlined)
.L13:
	ld.a	a15,[a10]12
	addsc.a	a15,a15,d11,#0
	st.b	[a15],d8
.L970:
	ld.a	a15,[a10]8
	st.b	[a15+],d8
	st.a	[a10]8,a15
.L971:
	add.a	a12,#6
	ld.a	a15,[a10]
	add.a	a15,#2
	st.a	[a10],a15
	add.a	a13,#1
	ld.a	a15,[a10]4
	add.a	a15,#1
	st.a	[a10]4,a15
	add.a	a14,#1
.L972:
	add	d11,#1

; ..\component\Com\Implementation\Com.c	  4847    for(; ComTxPduId < Com_GetSizeOfTxPduInfo(); ComTxPduId++)      (inlined)
	ld.a	a15,[a10]24
	add.a	a15,#-1
	st.a	[a10]24,a15
	add.a	a15,#1
	loop	a15,.L7
.L478:

; ..\component\Com\Implementation\Com.c	 14984    }
; ..\component\Com\Implementation\Com.c	 14985  #if(COM_USE_INIT_POINTER == STD_ON)
; ..\component\Com\Implementation\Com.c	 14986    /* Check validity of Config pointer */
; ..\component\Com\Implementation\Com.c	 14987    else if(Com_ConfigDataPtr == NULL_PTR)
; ..\component\Com\Implementation\Com.c	 14988    {
; ..\component\Com\Implementation\Com.c	 14989  # if(COM_USE_ECUM_BSW_ERROR_HOOK == STD_ON)     /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	 14990      EcuM_BswErrorHook(COM_MODULE_ID, ECUM_BSWERROR_NULLPTR);
; ..\component\Com\Implementation\Com.c	 14991  # endif
; ..\component\Com\Implementation\Com.c	 14992      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 14993    }
; ..\component\Com\Implementation\Com.c	 14994  # if (COM_FINALMAGICNUMBER == STD_ON)   /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	 14995    else if(Com_GetFinalMagicNumber() != COM_FINAL_MAGIC_NUMBER)
; ..\component\Com\Implementation\Com.c	 14996    {
; ..\component\Com\Implementation\Com.c	 14997  #  if(COM_USE_ECUM_BSW_ERROR_HOOK == STD_ON)    /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	 14998      EcuM_BswErrorHook(COM_MODULE_ID, ECUM_BSWERROR_MAGICNUMBER);
; ..\component\Com\Implementation\Com.c	 14999  #  endif
; ..\component\Com\Implementation\Com.c	 15000      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 15001      Com_ConfigDataPtr = NULL_PTR;
; ..\component\Com\Implementation\Com.c	 15002    }
; ..\component\Com\Implementation\Com.c	 15003  # endif
; ..\component\Com\Implementation\Com.c	 15004    else
; ..\component\Com\Implementation\Com.c	 15005  #endif
; ..\component\Com\Implementation\Com.c	 15006    {
; ..\component\Com\Implementation\Com.c	 15007  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15008      {
; ..\component\Com\Implementation\Com.c	 15009        /* #20 Initialize all Rx ComIPdus and related parameters */
; ..\component\Com\Implementation\Com.c	 15010        Com_InitRx();
; ..\component\Com\Implementation\Com.c	 15011      }
; ..\component\Com\Implementation\Com.c	 15012  #endif
; ..\component\Com\Implementation\Com.c	 15013  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15014      {
; ..\component\Com\Implementation\Com.c	 15015        /* #30 Initialize all Tx ComIPdus and related parameters */
; ..\component\Com\Implementation\Com.c	 15016        Com_InitTx();
; ..\component\Com\Implementation\Com.c	 15017      }
; ..\component\Com\Implementation\Com.c	 15018  # if (COM_TXTOUTCNT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15019      /* #40 Initialize all Tx deadline monitoring parameters */
; ..\component\Com\Implementation\Com.c	 15020      Com_TxDlMon_Init(); /* PRQA S 2987 */ /* MD_Com_2987 */
; ..\component\Com\Implementation\Com.c	 15021  # endif
; ..\component\Com\Implementation\Com.c	 15022  #endif
; ..\component\Com\Implementation\Com.c	 15023  
; ..\component\Com\Implementation\Com.c	 15024  #if (COM_IPDUGROUPSTATE == STD_ON)
; ..\component\Com\Implementation\Com.c	 15025      {
; ..\component\Com\Implementation\Com.c	 15026        /* \trace SPEC-2736784 */ /* \trace SPEC-2736788 */
; ..\component\Com\Implementation\Com.c	 15027        /* #50 Iterate all ComIPduGroups and set them to INACTIVE */
; ..\component\Com\Implementation\Com.c	 15028        Com_SizeOfIPduGroupStateType comIPduGroupId = 0;
; ..\component\Com\Implementation\Com.c	 15029        for(; comIPduGroupId < Com_GetSizeOfIPduGroupState(); comIPduGroupId++)
; ..\component\Com\Implementation\Com.c	 15030        {
; ..\component\Com\Implementation\Com.c	 15031          Com_SetIPduGroupState(comIPduGroupId, COM_INACTIVE_IPDUGROUPSTATE);     /* SBSW_COM_CSL01 */
; ..\component\Com\Implementation\Com.c	 15032        }
; ..\component\Com\Implementation\Com.c	 15033      }
; ..\component\Com\Implementation\Com.c	 15034  #endif
; ..\component\Com\Implementation\Com.c	 15035  
; ..\component\Com\Implementation\Com.c	 15036      /* #60 Initialize timing domain divisors (if configured) */
; ..\component\Com\Implementation\Com.c	 15037  #if (COM_TXCYCLECOUNTERDIVISOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15038      Com_SetTxCycleCounterDivisorCounter(1);     /* SBSW_COM_CSL_VAR_ACCESS */
	movh.a	a15,#@his(Com_TxCycleCounterDivisorCounter)
	mov	d15,#1
	st.h	[a15]@los(Com_TxCycleCounterDivisorCounter),d15
.L973:

; ..\component\Com\Implementation\Com.c	 15039  #endif
; ..\component\Com\Implementation\Com.c	 15040  #if (COM_TXDLMONDIVISOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15041      Com_SetTxDlMonDivisorCounter(1);    /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 15042  #endif
; ..\component\Com\Implementation\Com.c	 15043  #if (COM_RXDLMONDIVISOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15044      Com_SetRxDlMonDivisorCounter(1);    /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 15045  #endif
; ..\component\Com\Implementation\Com.c	 15046  #if (COM_RXDEFERREDEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	 15047      /* #70 Initialize next event cache entry (if configured) */
; ..\component\Com\Implementation\Com.c	 15048      Com_SetRxNextEventCacheEnty(0);     /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 15049  #endif
; ..\component\Com\Implementation\Com.c	 15050  #if (COM_GWEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	 15051      /* #80 Initialize gateway event cache index (if configured) */
; ..\component\Com\Implementation\Com.c	 15052      Com_SetGwEventCacheIndex(0);        /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 15053  #endif
; ..\component\Com\Implementation\Com.c	 15054  
; ..\component\Com\Implementation\Com.c	 15055      /* #85 Initialize ISR lock counter */
; ..\component\Com\Implementation\Com.c	 15056  #if (COM_GWEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	 15057      Com_SetGatewayDescriptionProcessingISRLockCounter(Com_GetGatewayDescriptionProcessingISRLockThreshold());   /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 15058  #endif
; ..\component\Com\Implementation\Com.c	 15059  #if (COM_GWINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15060      Com_SetGatewayProcessingISRLockCounter(Com_GetGatewayProcessingISRLockThreshold()); /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 15061  #endif
; ..\component\Com\Implementation\Com.c	 15062  #if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15063      Com_SetRxIPduGroupISRLockCounter(Com_GetRxIPduGroupISRLockThreshold());     /* SBSW_COM_CSL_VAR_ACCESS */
	movh.a	a15,#@his(Com_RxIPduGroupISRLockCounter)
	st.h	[a15]@los(Com_RxIPduGroupISRLockCounter),d15
.L974:

; ..\component\Com\Implementation\Com.c	 15064  #endif
; ..\component\Com\Implementation\Com.c	 15065  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15066      Com_SetTxIPduGroupISRLockCounter(Com_GetTxIPduGroupISRLockThreshold());     /* SBSW_COM_CSL_VAR_ACCESS */
	movh.a	a15,#@his(Com_TxIPduGroupISRLockCounter)
	st.h	[a15]@los(Com_TxIPduGroupISRLockCounter),d15
.L975:

; ..\component\Com\Implementation\Com.c	 15067  #endif
; ..\component\Com\Implementation\Com.c	 15068  #if(COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15069      Com_SetRxDeferredProcessingISRLockCounter(Com_GetRxDeferredProcessingISRLockThreshold());   /* SBSW_COM_CSL_VAR_ACCESS */
	movh.a	a15,#@his(Com_RxDeferredProcessingISRLockCounter)
	st.h	[a15]@los(Com_RxDeferredProcessingISRLockCounter),d15
.L976:

; ..\component\Com\Implementation\Com.c	 15070  #endif
; ..\component\Com\Implementation\Com.c	 15071  #if(COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15072      Com_SetRxDeadlineMonitoringISRLockCounter(Com_GetRxDeadlineMonitoringISRLockThreshold());   /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 15073  #endif
; ..\component\Com\Implementation\Com.c	 15074  #if(COM_TXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15075      Com_SetTxDeadlineMonitoringISRLockCounter(Com_GetTxDeadlineMonitoringISRLockThreshold());   /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 15076  #endif
; ..\component\Com\Implementation\Com.c	 15077  #if ((COM_PERIODICOFTXMODETRUE == STD_ON) || (COM_PERIODICOFTXMODEFALSE == STD_ON) || (COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON) || (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 15078      Com_SetTxCyclicProcessingISRLockCounter(Com_GetTxCyclicProcessingISRLockThreshold());       /* SBSW_COM_CSL_VAR_ACCESS */
	movh.a	a15,#@his(Com_TxCyclicProcessingISRLockCounter)
	st.h	[a15]@los(Com_TxCyclicProcessingISRLockCounter),d15
.L977:

; ..\component\Com\Implementation\Com.c	 15079  #endif
; ..\component\Com\Implementation\Com.c	 15080  #if (COM_TXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15081      Com_SetTxProcessingISRLockCounter(Com_GetTxProcessingISRLockThreshold());   /* SBSW_COM_CSL_VAR_ACCESS */
	movh.a	a15,#@his(Com_TxProcessingISRLockCounter)
	st.h	[a15]@los(Com_TxProcessingISRLockCounter),d15
.L978:

; ..\component\Com\Implementation\Com.c	 15082  #endif
; ..\component\Com\Implementation\Com.c	 15083  #if (COM_ALWAYSACTIVERXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	 15084      /* #90 Activate Rx ComIPdus without assigned ComIPduGroups */
; ..\component\Com\Implementation\Com.c	 15085      Com_ActivateAlwaysOnRxComIPdus();
; ..\component\Com\Implementation\Com.c	 15086  #endif
; ..\component\Com\Implementation\Com.c	 15087  #if (COM_ALWAYSACTIVETXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	 15088      /* #100 Activate Tx ComIPdus without assigned ComIPduGroups */
; ..\component\Com\Implementation\Com.c	 15089      Com_ActivateAlwaysOnTxComIPdus();
; ..\component\Com\Implementation\Com.c	 15090  #endif
; ..\component\Com\Implementation\Com.c	 15091      /* #110 Set the component state to INITIALIZED */
; ..\component\Com\Implementation\Com.c	 15092      /* Com must be enabled after all subcomponents are initialized */
; ..\component\Com\Implementation\Com.c	 15093      Com_SetInitialized(TRUE);   /* SBSW_COM_CSL_VAR_ACCESS */
	ld.a	a15,[a10]20
	st.b	[a15],d10
.L979:

; ..\component\Com\Implementation\Com.c	 15094    }
; ..\component\Com\Implementation\Com.c	 15095  
; ..\component\Com\Implementation\Com.c	 15096    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15097  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15098    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */
	jeq	d9,#0,.L14
.L980:

; ..\component\Com\Implementation\Com.c	 15099    {
; ..\component\Com\Implementation\Com.c	 15100      Com_LMgt_CallDetErrorContinue(COMServiceId_Init, errorId);
	mov	e6,d9,d10
	mov	d5,d8
	mov	d4,#50
	j	Det_ReportError
.L14:

; ..\component\Com\Implementation\Com.c	 15101    }
; ..\component\Com\Implementation\Com.c	 15102  #endif
; ..\component\Com\Implementation\Com.c	 15103  
; ..\component\Com\Implementation\Com.c	 15104    COM_DUMMY_STATEMENT(config);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15105    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15106  }
	ret
.L439:
	
__Com_Init_function_end:
	.size	Com_Init,__Com_Init_function_end-Com_Init
.L238:
	; End of function
	
	.sdecl	'.text.Com..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.Com..cocofun_5'
	.align	2
; Function .cocofun_5
.L151:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0
	movh.a	a15,#@his(Com_TransmitRequest)
	lea	a15,[a15]@los(Com_TransmitRequest)
.L1276:
	fret
.L378:
	; End of function
	.sdecl	'.text.Com..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.Com..cocofun_4'
	.align	2
; Function .cocofun_4
.L153:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	movh.a	a15,#@his(Com_RxPduInfo)
	ld.bu	d15,[a15]@los(Com_RxPduInfo)
.L1271:
	cmov	d0,d15,#0
	fret
.L373:
	; End of function
	.sdecl	'.text.Com..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.Com..cocofun_3'
	.align	2
; Function .cocofun_3
.L155:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	movh.a	a15,#@his(Com_RxAccessInfo)
.L896:
	lea	a15,[a15]@los(Com_RxAccessInfo)
.L1266:
	fret
.L368:
	; End of function
	.sdecl	'.text.Com..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.Com..cocofun_2'
	.align	2
; Function .cocofun_2
.L157:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0
	movh.a	a15,#@his(Com_TxPduGrpActive)
	lea	a15,[a15]@los(Com_TxPduGrpActive)
.L1261:
	fret
.L363:
	; End of function
	.sdecl	'.text.Com.Com_InitMemory',code,cluster('Com_InitMemory')
	.sect	'.text.Com.Com_InitMemory'
	.align	2
	
	.global	Com_InitMemory

; ..\component\Com\Implementation\Com.c	 15107  
; ..\component\Com\Implementation\Com.c	 15108  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15109    Com_InitMemory
; ..\component\Com\Implementation\Com.c	 15110  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15111  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15112   *
; ..\component\Com\Implementation\Com.c	 15113   *
; ..\component\Com\Implementation\Com.c	 15114   *
; ..\component\Com\Implementation\Com.c	 15115  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15116  FUNC(void, COM_CODE) Com_InitMemory(void)
; Function Com_InitMemory
.L159:
Com_InitMemory:	.type	func

; ..\component\Com\Implementation\Com.c	 15117  {
; ..\component\Com\Implementation\Com.c	 15118    /* #10 Initialize all component _INIT_ variables. */
; ..\component\Com\Implementation\Com.c	 15119    Com_SetInitialized(FALSE);    /* SBSW_COM_CSL_VAR_ACCESS */
	movh.a	a15,#@his(Com_Initialized)
	mov	d15,#0
	st.b	[a15]@los(Com_Initialized),d15
.L985:

; ..\component\Com\Implementation\Com.c	 15120  #if(COM_USE_INIT_POINTER == STD_ON)
; ..\component\Com\Implementation\Com.c	 15121    Com_ConfigDataPtr = NULL_PTR;
; ..\component\Com\Implementation\Com.c	 15122  #endif
; ..\component\Com\Implementation\Com.c	 15123  }
	ret
.L508:
	
__Com_InitMemory_function_end:
	.size	Com_InitMemory,__Com_InitMemory_function_end-Com_InitMemory
.L243:
	; End of function
	
	.sdecl	'.text.Com.Com_DeInit',code,cluster('Com_DeInit')
	.sect	'.text.Com.Com_DeInit'
	.align	2
	
	.global	Com_DeInit

; ..\component\Com\Implementation\Com.c	 15124  
; ..\component\Com\Implementation\Com.c	 15125  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15126    Com_DeInit
; ..\component\Com\Implementation\Com.c	 15127  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15128  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15129   *
; ..\component\Com\Implementation\Com.c	 15130   *
; ..\component\Com\Implementation\Com.c	 15131   *
; ..\component\Com\Implementation\Com.c	 15132   *
; ..\component\Com\Implementation\Com.c	 15133   *
; ..\component\Com\Implementation\Com.c	 15134   *
; ..\component\Com\Implementation\Com.c	 15135  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15136  FUNC(void, COM_CODE) Com_DeInit(void)
; Function Com_DeInit
.L161:
Com_DeInit:	.type	func

; ..\component\Com\Implementation\Com.c	 15137  {
; ..\component\Com\Implementation\Com.c	 15138    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15139    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 15140  
; ..\component\Com\Implementation\Com.c	 15141    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15142    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 15143    if(!Com_IsInitialized())
	movh.a	a15,#@his(Com_Initialized)
	lea	a15,[a15]@los(Com_Initialized)
	ld.bu	d15,[a15]
.L990:
	mov	d8,#0
	sub.a	a10,#8
.L869:
	jne	d15,#0,.L15
.L991:

; ..\component\Com\Implementation\Com.c	 15144    {
; ..\component\Com\Implementation\Com.c	 15145      errorId = COM_E_UNINIT;
	mov	d8,#2
	j	.L16
.L15:

; ..\component\Com\Implementation\Com.c	 15146    }
; ..\component\Com\Implementation\Com.c	 15147    else
; ..\component\Com\Implementation\Com.c	 15148    {
; ..\component\Com\Implementation\Com.c	 15149      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15150      /* ! \note COM130 only specifies that the inter-ECU communication shall be stopped */
; ..\component\Com\Implementation\Com.c	 15151  #if (COM_IPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15152      {
; ..\component\Com\Implementation\Com.c	 15153        /* #20 Iterate over all ComIPduGroups and stop them by a call of Com_IpduGroupStop (if ComOptimizedIPduGroupHandling is enabled) */
; ..\component\Com\Implementation\Com.c	 15154        Com_IpduGroupIdType comIPduGroupId = 0;
; ..\component\Com\Implementation\Com.c	 15155        for(; comIPduGroupId < Com_GetSizeOfIPduGroupInfo(); comIPduGroupId++)
; ..\component\Com\Implementation\Com.c	 15156        {
; ..\component\Com\Implementation\Com.c	 15157  # if(COM_INVALIDHNDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15158          if(!Com_IsInvalidHndOfIPduGroupInfo(comIPduGroupId))
; ..\component\Com\Implementation\Com.c	 15159  # endif
; ..\component\Com\Implementation\Com.c	 15160          {
; ..\component\Com\Implementation\Com.c	 15161            Com_IpduGroupStop(comIPduGroupId);
; ..\component\Com\Implementation\Com.c	 15162          }
; ..\component\Com\Implementation\Com.c	 15163        }
; ..\component\Com\Implementation\Com.c	 15164      }
; ..\component\Com\Implementation\Com.c	 15165  #endif
; ..\component\Com\Implementation\Com.c	 15166  #if (COM_PDUGRPVECTOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15167      /* #30 Stop all ComIPduGroups by a call of Com_IpduGroupControl (if ComOptimizedIPduGroupHandling is disabled) */
; ..\component\Com\Implementation\Com.c	 15168      {
; ..\component\Com\Implementation\Com.c	 15169        Com_IpduGroupVector clearIpduGroupVector;
; ..\component\Com\Implementation\Com.c	 15170        Com_ClearIpduGroupVector(clearIpduGroupVector);   /* SBSW_COM_FCTCALL_STACKPTR */
	mov.aa	a4,a10
	call	Com_ClearIpduGroupVector
.L992:

; ..\component\Com\Implementation\Com.c	 15171        Com_IpduGroupControl(clearIpduGroupVector, FALSE);        /* SBSW_COM_FCTCALL_STACKPTR */
	mov.aa	a4,a10
.L993:
	mov	d4,#0
	call	Com_IpduGroupControl
.L512:

; ..\component\Com\Implementation\Com.c	 15172      }
; ..\component\Com\Implementation\Com.c	 15173  #endif
; ..\component\Com\Implementation\Com.c	 15174  
; ..\component\Com\Implementation\Com.c	 15175  #if (COM_ALWAYSACTIVERXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	 15176      {
; ..\component\Com\Implementation\Com.c	 15177        Com_AlwaysActiveRxComIPdusIterType idx;
; ..\component\Com\Implementation\Com.c	 15178  
; ..\component\Com\Implementation\Com.c	 15179        Com_RxIPduGroup_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	 15180        /* #40 Iterate over all Rx ComIPdus without an assigned ComIPduGroup and deactivate Rx ComIPdu */
; ..\component\Com\Implementation\Com.c	 15181        for(idx = 0; idx < Com_GetSizeOfAlwaysActiveRxComIPdus(); idx++)
; ..\component\Com\Implementation\Com.c	 15182        {
; ..\component\Com\Implementation\Com.c	 15183          Com_DeactivateRxComIPdu(Com_GetRxPduInfoIdxOfAlwaysActiveRxComIPdus(idx));
; ..\component\Com\Implementation\Com.c	 15184          Com_RxIPduGroup_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	 15185        }
; ..\component\Com\Implementation\Com.c	 15186  
; ..\component\Com\Implementation\Com.c	 15187        Com_RxIPduGroup_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	 15188      }
; ..\component\Com\Implementation\Com.c	 15189  #endif
; ..\component\Com\Implementation\Com.c	 15190  
; ..\component\Com\Implementation\Com.c	 15191  #if (COM_ALWAYSACTIVETXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	 15192      {
; ..\component\Com\Implementation\Com.c	 15193        Com_AlwaysActiveTxComIPdusIterType idx;
; ..\component\Com\Implementation\Com.c	 15194  
; ..\component\Com\Implementation\Com.c	 15195        Com_TxIPduGroup_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	 15196  
; ..\component\Com\Implementation\Com.c	 15197        /* #50 Iterate over all Tx ComIPdus without an assigned ComIPduGroup and deactivate Tx ComIPdu */
; ..\component\Com\Implementation\Com.c	 15198        for(idx = 0; idx < Com_GetSizeOfAlwaysActiveTxComIPdus(); idx++)
; ..\component\Com\Implementation\Com.c	 15199        {
; ..\component\Com\Implementation\Com.c	 15200          Com_DeactivateTxComIPdu(Com_GetTxPduInfoIdxOfAlwaysActiveTxComIPdus(idx));
; ..\component\Com\Implementation\Com.c	 15201          Com_TxIPduGroup_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	 15202        }
; ..\component\Com\Implementation\Com.c	 15203  
; ..\component\Com\Implementation\Com.c	 15204        Com_TxIPduGroup_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	 15205      }
; ..\component\Com\Implementation\Com.c	 15206  #endif
; ..\component\Com\Implementation\Com.c	 15207      Com_SetInitialized(FALSE);  /* SBSW_COM_CSL_VAR_ACCESS */
	mov	d15,#0
	st.b	[a15],d15
.L16:

; ..\component\Com\Implementation\Com.c	 15208    }
; ..\component\Com\Implementation\Com.c	 15209  
; ..\component\Com\Implementation\Com.c	 15210    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15211  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15212    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */
	jeq	d8,#0,.L17
.L994:

; ..\component\Com\Implementation\Com.c	 15213    {
; ..\component\Com\Implementation\Com.c	 15214      Com_LMgt_CallDetErrorContinue(COMServiceId_DeInit, errorId);
	fcall	.cocofun_10
.L870:
	mov	d6,#2
.L871:
	mov	d7,d8
.L872:
	j	Det_ReportError
.L17:

; ..\component\Com\Implementation\Com.c	 15215    }
; ..\component\Com\Implementation\Com.c	 15216  #endif
; ..\component\Com\Implementation\Com.c	 15217  
; ..\component\Com\Implementation\Com.c	 15218    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15219  }       /* PRQA S 6050 */ /* MD_MSR_STCAL */
	ret
.L509:
	
__Com_DeInit_function_end:
	.size	Com_DeInit,__Com_DeInit_function_end-Com_DeInit
.L248:
	; End of function
	
	.sdecl	'.text.Com..cocofun_10',code,cluster('.cocofun_10')
	.sect	'.text.Com..cocofun_10'
	.align	2
; Function .cocofun_10
.L163:
.cocofun_10:	.type	func
; Function body .cocofun_10, coco_iter:2
	mov	d4,#50
.L892:
	mov	d5,#0
	fret
.L403:
	; End of function
	.sdecl	'.text.Com.Com_IpduGroupControl',code,cluster('Com_IpduGroupControl')
	.sect	'.text.Com.Com_IpduGroupControl'
	.align	2
	
	.global	Com_IpduGroupControl

; ..\component\Com\Implementation\Com.c	 15220  
; ..\component\Com\Implementation\Com.c	 15221  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15222    Com_IpduGroupControl
; ..\component\Com\Implementation\Com.c	 15223  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15224  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15225   *
; ..\component\Com\Implementation\Com.c	 15226   *
; ..\component\Com\Implementation\Com.c	 15227   *
; ..\component\Com\Implementation\Com.c	 15228   *
; ..\component\Com\Implementation\Com.c	 15229   *
; ..\component\Com\Implementation\Com.c	 15230  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15231  FUNC(void, COM_CODE) Com_IpduGroupControl(Com_IpduGroupVector ipduGroupVector, boolean initialize)      /* PRQA S 1505, 3206, 3677 */ /* MD_MSR_Rule8.7, MD_Com_3206, MD_Com_3677 */
; Function Com_IpduGroupControl
.L165:
Com_IpduGroupControl:	.type	func

; ..\component\Com\Implementation\Com.c	 15232  {
; ..\component\Com\Implementation\Com.c	 15233    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15234    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
	mov	d9,#0
	mov.aa	a12,a4
.L881:
	mov	d8,d4
	sub.a	a10,#24
.L873:

; ..\component\Com\Implementation\Com.c	 15235  
; ..\component\Com\Implementation\Com.c	 15236    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15237    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 15238    if(!Com_IsInitialized())
	mov	d10,d9
	fcall	.cocofun_8
	jne	d15,#0,.L18
.L999:

; ..\component\Com\Implementation\Com.c	 15239    {
; ..\component\Com\Implementation\Com.c	 15240      errorId = COM_E_UNINIT;
	mov	d10,#2
	j	.L19
.L18:
	call	SuspendAllInterrupts
.L529:
	mov	d0,#0
.L875:
	mov	d11,#1
.L1000:
	mov	d1,d11
.L536:
	mov	d15,d0

; ..\component\Com\Implementation\Com.c	  4332        for(; (pduGrpVectorIdx < Com_GetPduGrpVectorEndIdxOfRxPduInfo(ComRxPduId)) && (bRequestedActiveState == FALSE); pduGrpVectorIdx++)        /* COV_COM_IPDU_GROUP_STATE_ACTIVE */      (inlined)
	j	.L20
.L21:
	addsc.a	a15,a12,d15,#0
.L1001:
	add	d15,#1
.L878:
	ld.bu	d2,[a15]
.L1002:
	movh.a	a15,#@his(Com_PduGrpVector)
	lea	a15,[a15]@los(Com_PduGrpVector)
	addsc.a	a15,a15,d1,#0
.L1003:
	extr.u	d15,d15,#0,#8
.L879:
	ld.bu	d3,[a15]
.L1004:
	add	d1,#1
.L1005:
	and	d2,d3
.L1006:
	seln	d0,d2,d0,#1

; ..\component\Com\Implementation\Com.c	  4332        for(; (pduGrpVectorIdx < Com_GetPduGrpVectorEndIdxOfRxPduInfo(ComRxPduId)) && (bRequestedActiveState == FALSE); pduGrpVectorIdx++)        /* COV_COM_IPDU_GROUP_STATE_ACTIVE */      (inlined)
.L20:
	jge.u	d1,#2,.L23
.L1007:
	jeq	d0,#0,.L21
.L23:
	movh.a	a2,#@his(Com_RxPduGrpActive)
	lea	a2,[a2]@los(Com_RxPduGrpActive)
	ld.bu	d15,[a2]
.L880:
	ne	d1,d15,#0
.L877:

; ..\component\Com\Implementation\Com.c	  4345      if((Com_IsRxPduGrpActive(ComRxPduId)) != bRequestedActiveState)      (inlined)
	jeq	d1,d0,.L24
.L1008:

; ..\component\Com\Implementation\Com.c	  4349        if(bRequestedActiveState != FALSE)      (inlined)
	jeq	d0,#0,.L25
.L539:
	movh.a	a4,#@his(Com_HandleRxPduDeferred)
	lea	a4,[a4]@los(Com_HandleRxPduDeferred)
	ld.bu	d0,[a4]
.L876:

; ..\component\Com\Implementation\Com.c	  4216    if(initialize == TRUE)        /* COV_COM_UPDATE_IPDU_STATE */      (inlined)
	jne	d8,#1,.L26
.L546:
	fcall	.cocofun_3
.L1009:
	movh.a	a5,#@his(Com_RxSigBufferSInt8)
	lea	a5,[a5]@los(Com_RxSigBufferSInt8)
.L1010:

; ..\component\Com\Implementation\Com.c	  9489      for(; com_RxAccessInfoIndIdx < Com_GetRxAccessInfoIndEndIdxOfRxPduInfo(ComRxPduId); com_RxAccessInfoIndIdx++)      (inlined)
	mov.a	a6,#1
.L27:
	ld.bu	d15,[a15]

; ..\component\Com\Implementation\Com.c	  9494        if(Com_IsInitValueUsedOfRxAccessInfo(com_RxAccessInfoIdx) && Com_IsBufferUsedOfRxAccessInfo(com_RxAccessInfoIdx)) /* COV_COM_RXPROCESSING_TX */      (inlined)
	jeq	d15,#0,.L28
.L551:
	ld.bu	d15,[a15]2
.L552:
	ld.bu	d1,[a15]3
.L557:

; ..\component\Com\Implementation\Com.c	  7245    switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))      (inlined)
	jne	d15,#1,.L29
.L1011:
	movh.a	a7,#@his(Com_ConstValueSInt8)
	lea	a7,[a7]@los(Com_ConstValueSInt8)
	addsc.a	a7,a7,d1,#0
	ld.bu	d15,[a7]
	st.b	[a5],d15

; ..\component\Com\Implementation\Com.c	  7318      default:   /* COV_COM_MISRA */      (inlined)
.L29:

; ..\component\Com\Implementation\Com.c	  9494        if(Com_IsInitValueUsedOfRxAccessInfo(com_RxAccessInfoIdx) && Com_IsBufferUsedOfRxAccessInfo(com_RxAccessInfoIdx)) /* COV_COM_RXPROCESSING_TX */      (inlined)
.L28:
	add.a	a15,#4
.L1012:
	add.a	a5,#1

; ..\component\Com\Implementation\Com.c	  9489      for(; com_RxAccessInfoIndIdx < Com_GetRxAccessInfoIndEndIdxOfRxPduInfo(ComRxPduId); com_RxAccessInfoIndIdx++)      (inlined)
	loop	a6,.L27
.L549:
	fcall	.cocofun_4

; ..\component\Com\Implementation\Com.c	  4216    if(initialize == TRUE)        /* COV_COM_UPDATE_IPDU_STATE */      (inlined)
.L26:
	fcall	.cocofun_4
.L882:
	mov	d15,d11
	st.b	[a4],d0
.L540:

; ..\component\Com\Implementation\Com.c	  4352          Com_ActivateRxComIPdu(ComRxPduId, initialize);      (inlined)
	j	.L32

; ..\component\Com\Implementation\Com.c	  4349        if(bRequestedActiveState != FALSE)      (inlined)
.L25:
	mov	d15,#0

; ..\component\Com\Implementation\Com.c	  4355        else      /* \trace SPEC-2736847 */      (inlined)
.L32:

; ..\component\Com\Implementation\Com.c	  4345      if((Com_IsRxPduGrpActive(ComRxPduId)) != bRequestedActiveState)      (inlined)
.L24:
	st.b	[a2],d15
.L1013:
	movh.a	a15,#@his(Com_RxIPduGroupISRLockCounter)
	lea	a15,[a15]@los(Com_RxIPduGroupISRLockCounter)
	ld.hu	d15,[a15]0
.L1014:

; ..\component\Com\Implementation\Com.c	  4941    if(Com_GetRxIPduGroupISRLockCounter() > 0u)   /* COV_COM_THRESHOLD_TX */      (inlined)
	jne	d15,#0,.L33
.L565:
	mov	d15,d11
	st.h	[a15],d15
.L1015:
	call	ResumeAllInterrupts
.L566:
	call	SuspendAllInterrupts

; ..\component\Com\Implementation\Com.c	  4945    else      (inlined)
.L33:
	mov	d12,#1
	st.h	[a15],d12
.L532:
	call	ResumeAllInterrupts
.L522:
	call	SuspendAllInterrupts
.L571:

; ..\component\Com\Implementation\Com.c	 15241    }
; ..\component\Com\Implementation\Com.c	 15242    else
; ..\component\Com\Implementation\Com.c	 15243    {
; ..\component\Com\Implementation\Com.c	 15244  
; ..\component\Com\Implementation\Com.c	 15245  #if (COM_PDUGRPVECTOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15246      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15247  # if (COM_ACTIVATABLERXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	 15248      {
; ..\component\Com\Implementation\Com.c	 15249        /* #30 Update the states of all related Rx ComIPdus */
; ..\component\Com\Implementation\Com.c	 15250        Com_IpduGroupControl_UpdateRxComIPduState(ipduGroupVector, initialize);   /* SBSW_COM_PTR_API_VALID_PTR */
; ..\component\Com\Implementation\Com.c	 15251      }
; ..\component\Com\Implementation\Com.c	 15252  # endif
; ..\component\Com\Implementation\Com.c	 15253  # if (COM_ACTIVATABLETXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	 15254      {
; ..\component\Com\Implementation\Com.c	 15255        /* #40 Iterate over all Tx ComIPdus and set the requested state */
; ..\component\Com\Implementation\Com.c	 15256        Com_ActivatableTxComIPdusIterType idx;
; ..\component\Com\Implementation\Com.c	 15257  
; ..\component\Com\Implementation\Com.c	 15258        Com_TxIPduGroup_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	 15259  
; ..\component\Com\Implementation\Com.c	 15260        for(idx = 0; idx < Com_GetSizeOfActivatableTxComIPdus(); idx++)
	mov	d13,#0
	movh.a	a13,#@his(Com_TxPduInfo)
.L883:
	lea	a13,[a13]@los(Com_TxPduInfo)
.L1016:
	movh.a	a2,#@his(Com_TxPduGrpActive)
	lea	a2,[a2]@los(Com_TxPduGrpActive)
	st.a	[a10],a2
.L1017:
	fcall	.cocofun_5
	st.a	[a10]8,a15
.L1018:
	movh.a	a15,#@his(Com_TxModeInfo)
	lea	a15,[a15]@los(Com_TxModeInfo)
	st.a	[a10]4,a15
.L1019:
	movh.a	a14,#@his(Com_CyclicSendRequest)
	lea	a14,[a14]@los(Com_CyclicSendRequest)
.L574:
	movh.a	a15,#@his(Com_TxIPduGroupISRLockCounter)
	lea	a15,[a15]@los(Com_TxIPduGroupISRLockCounter)
	st.a	[a10]12,a15
.L575:
	mov.a	a15,#2
	st.a	[a10]16,a15
.L34:
	mov	d4,#0
	ld.bu	d15,[a13]1
.L884:
	mov	d0,d4
.L887:
	add	d1,d15,#1

; ..\component\Com\Implementation\Com.c	  4569    for(; ((pduGrpVectorIdx < Com_GetPduGrpVectorEndIdxOfTxPduInfo(ComTxPduId)) && (bRequestedActiveState == FALSE)); pduGrpVectorIdx++)  /* COV_COM_IPDU_GROUP_STATE_ACTIVE */      (inlined)
	j	.L35
.L36:
	addsc.a	a15,a12,d0,#0
.L1020:
	add	d0,#1
.L888:
	ld.bu	d2,[a15]
.L1021:
	movh.a	a15,#@his(Com_PduGrpVector)
	lea	a15,[a15]@los(Com_PduGrpVector)
	addsc.a	a15,a15,d15,#0
.L1022:
	extr.u	d0,d0,#0,#8
.L889:
	ld.bu	d3,[a15]
.L1023:
	and	d2,d3
.L1024:
	seln	d4,d2,d4,#1
.L1025:
	add	d2,d15,#1
	extr.u	d15,d2,#0,#8

; ..\component\Com\Implementation\Com.c	  4569    for(; ((pduGrpVectorIdx < Com_GetPduGrpVectorEndIdxOfTxPduInfo(ComTxPduId)) && (bRequestedActiveState == FALSE)); pduGrpVectorIdx++)  /* COV_COM_IPDU_GROUP_STATE_ACTIVE */      (inlined)
.L35:
	extr.u	d2,d1,#0,#8
.L1026:

; ..\component\Com\Implementation\Com.c	  4569    for(; ((pduGrpVectorIdx < Com_GetPduGrpVectorEndIdxOfTxPduInfo(ComTxPduId)) && (bRequestedActiveState == FALSE)); pduGrpVectorIdx++)  /* COV_COM_IPDU_GROUP_STATE_ACTIVE */      (inlined)
	jge.u	d15,d2,.L38
.L1027:
	jeq	d4,#0,.L36
.L38:
	ld.a	a15,[a10]
	ld.bu	d15,[a15]
.L886:
	ne	d15,d15,#0
.L1028:

; ..\component\Com\Implementation\Com.c	  4539    if((Com_IsTxPduGrpActive(ComTxPduId)) != bRequestedActiveState)      (inlined)
	jeq	d15,d4,.L39
.L1029:

; ..\component\Com\Implementation\Com.c	  4543      if(bRequestedActiveState == TRUE)      (inlined)
	jne	d4,#1,.L40
.L597:

; ..\component\Com\Implementation\Com.c	  4271    if(initialize == TRUE)        /* COV_COM_NO_IPDUGROUPS */      (inlined)
	jne	d8,#1,.L41
.L604:
	movh.a	a15,#@his(Com_TxSduLength)
	lea	a15,[a15]@los(Com_TxSduLength)
	addsc.a	a15,a15,d13,#0
	ld.bu	d15,[a13]2
	st.b	[a15],d15
.L606:
	ld.bu	d15,[a13]
.L1030:

; ..\component\Com\Implementation\Com.c	 12289    if(Com_IsTxBufferUsedOfTxPduInfo(ComPduId))   /* COV_COM_TX_BUFFER_ALWAYS_USED */      (inlined)
	jeq	d15,#0,.L42
.L1031:
	ld.bu	d15,[a13]4
	movh.a	a15,#@his(Com_TxBuffer)
	lea	a15,[a15]@los(Com_TxBuffer)
	addsc.a	a4,a15,d15,#0
	movh.a	a15,#@his(Com_TxPduInitValue)
	lea	a15,[a15]@los(Com_TxPduInitValue)
	addsc.a	a5,a15,d15,#0
	ld.bu	d4,[a13]2
.L885:
	call	VStdLib_MemCpy

; ..\component\Com\Implementation\Com.c	 12289    if(Com_IsTxBufferUsedOfTxPduInfo(ComPduId))   /* COV_COM_TX_BUFFER_ALWAYS_USED */      (inlined)
.L42:
	movh.a	a15,#@his(Com_CurrentTxMode)
	lea	a15,[a15]@los(Com_CurrentTxMode)
	addsc.a	a2,a15,d13,#0
	ld.a	a15,[a10]4
	ld.bu	d15,[a15]
	ne	d0,d15,#0
	st.b	[a2],d0
.L610:
	ld.bu	d15,[a15]1

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
	jeq	d0,#0,.L43
	movh.a	a15,#@his(Com_TxModeTrue)
	lea	a15,[a15]@los(Com_TxModeTrue)

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
	j	.L44
.L43:
	movh.a	a15,#@his(Com_TxModeFalse)
	lea	a15,[a15]@los(Com_TxModeFalse)

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
.L44:
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
	ne	d15,d15,#0
.L1032:

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
	jeq	d15,#0,.L45
.L1033:
	movh.a	a15,#@his(Com_CycleTimeCnt)
	lea	a15,[a15]@los(Com_CycleTimeCnt)
	addsc.a	a15,a15,d13,#0
.L1034:
	st.b	[a14],d11
.L1035:
	st.b	[a15],d11
.L1036:

; ..\component\Com\Implementation\Com.c	 13493      Com_SetCyclicSendRequest(ComTxPduId, TRUE); /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */      (inlined)
	j	.L46

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
.L45:
	st.b	[a14],d9

; ..\component\Com\Implementation\Com.c	 13508    else      (inlined)
.L46:
	ld.bu	d15,[a14]
.L1037:

; ..\component\Com\Implementation\Com.c	 13252    if(Com_IsCyclicSendRequest(ComPduId)) /* COV_COM_CYCLIC_SEND_REQUEST */      (inlined)
	jeq	d15,#0,.L47
.L1038:
	movh.a	a15,#@his(Com_CycleTimeCnt)
	lea	a15,[a15]@los(Com_CycleTimeCnt)
	addsc.a	a15,a15,d13,#0
	st.b	[a15],d11

; ..\component\Com\Implementation\Com.c	 13252    if(Com_IsCyclicSendRequest(ComPduId)) /* COV_COM_CYCLIC_SEND_REQUEST */      (inlined)
.L47:
	ld.a	a15,[a10]8
	st.b	[a15],d9

; ..\component\Com\Implementation\Com.c	  4271    if(initialize == TRUE)        /* COV_COM_NO_IPDUGROUPS */      (inlined)
.L41:
	ld.a	a15,[a10]
	st.b	[a15],d11
.L598:

; ..\component\Com\Implementation\Com.c	  4546        Com_ActivateTxComIPdu(ComTxPduId, initialize);      (inlined)
	j	.L48

; ..\component\Com\Implementation\Com.c	  4543      if(bRequestedActiveState == TRUE)      (inlined)
.L40:
	ld.a	a15,[a10]8
	st.b	[a15],d9
.L1039:
	movh.a	a15,#@his(Com_CycleTimeCnt)
	lea	a15,[a15]@los(Com_CycleTimeCnt)
	addsc.a	a15,a15,d13,#0
	st.b	[a15],d11
.L617:
	ld.a	a15,[a10]
	st.b	[a15],d9

; ..\component\Com\Implementation\Com.c	  4549      else      (inlined)
.L48:

; ..\component\Com\Implementation\Com.c	  4539    if((Com_IsTxPduGrpActive(ComTxPduId)) != bRequestedActiveState)      (inlined)
.L39:
	ld.a	a15,[a10]12
	ld.hu	d15,[a15]0
.L1040:

; ..\component\Com\Implementation\Com.c	  4995    if(Com_GetTxIPduGroupISRLockCounter() > 0u)   /* COV_COM_THRESHOLD_TX */      (inlined)
	jeq	d15,#0,.L49
.L1041:
	add	d15,#-1
	st.h	[a15],d15
.L1042:

; ..\component\Com\Implementation\Com.c	  4997      Com_DecTxIPduGroupISRLockCounter(); /* SBSW_COM_CSL_VAR_ACCESS */      (inlined)
	j	.L50

; ..\component\Com\Implementation\Com.c	  4995    if(Com_GetTxIPduGroupISRLockCounter() > 0u)   /* COV_COM_THRESHOLD_TX */      (inlined)
.L49:
	st.h	[a15],d12
.L1043:
	call	ResumeAllInterrupts
.L622:
	call	SuspendAllInterrupts

; ..\component\Com\Implementation\Com.c	  4999    else      (inlined)
.L50:
	ld.a	a15,[a10]
	add	d13,#1
	add.a	a13,#6
	add.a	a14,#1
	add.a	a15,#1
	st.a	[a10],a15
	ld.a	a15,[a10]8
	add.a	a15,#1
	st.a	[a10]8,a15
	ld.a	a15,[a10]4
	add.a	a15,#2
	st.a	[a10]4,a15
.L1044:
	ld.a	a15,[a10]16
	add.a	a15,#-1
	st.a	[a10]16,a15
	add.a	a15,#1
	loop	a15,.L34
.L624:
	ld.a	a15,[a10]12
	st.h	[a15],d12
.L1045:
	call	ResumeAllInterrupts
.L19:

; ..\component\Com\Implementation\Com.c	 15261        {
; ..\component\Com\Implementation\Com.c	 15262          Com_TxPduInfoIterType ComTxPduId = Com_GetTxPduInfoIdxOfActivatableTxComIPdus(idx);
; ..\component\Com\Implementation\Com.c	 15263  
; ..\component\Com\Implementation\Com.c	 15264          /* Evaluate requested active state of the I-PDU */
; ..\component\Com\Implementation\Com.c	 15265          boolean bRequestedActiveState = Com_IpduGroupControl_EvaluateActiveState(ipduGroupVector, ComTxPduId);  /* SBSW_COM_PTR_API_VALID_PTR */
; ..\component\Com\Implementation\Com.c	 15266  
; ..\component\Com\Implementation\Com.c	 15267          /* COM615 For all I-PDUs that do not change their activation state, the function Com_IpduGroupControl shall do nothing. */
; ..\component\Com\Implementation\Com.c	 15268          Com_IpduGroupControl_SetRequestedActiveState(ComTxPduId, initialize, bRequestedActiveState);
; ..\component\Com\Implementation\Com.c	 15269  
; ..\component\Com\Implementation\Com.c	 15270          Com_TxIPduGroup_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	 15271        }
; ..\component\Com\Implementation\Com.c	 15272  
; ..\component\Com\Implementation\Com.c	 15273        Com_TxIPduGroup_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	 15274      }
; ..\component\Com\Implementation\Com.c	 15275  # endif
; ..\component\Com\Implementation\Com.c	 15276  #else
; ..\component\Com\Implementation\Com.c	 15277      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15278  #endif
; ..\component\Com\Implementation\Com.c	 15279    }
; ..\component\Com\Implementation\Com.c	 15280  
; ..\component\Com\Implementation\Com.c	 15281    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15282  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15283    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
	jeq	d10,#0,.L51
.L1046:

; ..\component\Com\Implementation\Com.c	 15284    {
; ..\component\Com\Implementation\Com.c	 15285      Com_LMgt_CallDetErrorContinue(COMServiceId_IpduGroupControl, errorId);
	mov	d4,#50
	mov	d6,#3
	mov	d5,d9
	mov	d7,d10
.L890:
	j	Det_ReportError
.L51:

; ..\component\Com\Implementation\Com.c	 15286    }
; ..\component\Com\Implementation\Com.c	 15287  #endif
; ..\component\Com\Implementation\Com.c	 15288    COM_DUMMY_STATEMENT(ipduGroupVector); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15289    COM_DUMMY_STATEMENT(initialize);      /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15290    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15291  }
	ret
.L515:
	
__Com_IpduGroupControl_function_end:
	.size	Com_IpduGroupControl,__Com_IpduGroupControl_function_end-Com_IpduGroupControl
.L253:
	; End of function
	
	.sdecl	'.text.Com..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.Com..cocofun_8'
	.align	2
; Function .cocofun_8
.L167:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:1
	movh.a	a15,#@his(Com_Initialized)
.L874:
	ld.bu	d15,[a15]@los(Com_Initialized)
.L1290:
	fret
.L393:
	; End of function
	.sdecl	'.text.Com.Com_ReceptionDMControl',code,cluster('Com_ReceptionDMControl')
	.sect	'.text.Com.Com_ReceptionDMControl'
	.align	2
	
	.global	Com_ReceptionDMControl

; ..\component\Com\Implementation\Com.c	 15292  
; ..\component\Com\Implementation\Com.c	 15293  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15294    Com_ReceptionDMControl
; ..\component\Com\Implementation\Com.c	 15295  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15296  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15297   *
; ..\component\Com\Implementation\Com.c	 15298   *
; ..\component\Com\Implementation\Com.c	 15299   *
; ..\component\Com\Implementation\Com.c	 15300  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15301  FUNC(void, COM_CODE) Com_ReceptionDMControl(Com_IpduGroupVector ipduGroupVector)        /* PRQA S 3677 */ /* MD_Com_3677 */
; Function Com_ReceptionDMControl
.L169:
Com_ReceptionDMControl:	.type	func

; ..\component\Com\Implementation\Com.c	 15302  {
; ..\component\Com\Implementation\Com.c	 15303    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15304    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
	fcall	.cocofun_7
.L1051:

; ..\component\Com\Implementation\Com.c	 15305  
; ..\component\Com\Implementation\Com.c	 15306    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15307    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 15308    if(!Com_IsInitialized())      /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 15309    {
; ..\component\Com\Implementation\Com.c	 15310      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 15311    }
; ..\component\Com\Implementation\Com.c	 15312    else
; ..\component\Com\Implementation\Com.c	 15313    {
; ..\component\Com\Implementation\Com.c	 15314  #if (COM_ACTIVATABLERXCOMIPDUS == STD_ON)
; ..\component\Com\Implementation\Com.c	 15315      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15316  # if (COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15317      {
; ..\component\Com\Implementation\Com.c	 15318        {
; ..\component\Com\Implementation\Com.c	 15319          Com_ActivatableRxComIPdusIterType idx;
; ..\component\Com\Implementation\Com.c	 15320          /* \trace SPEC-2736874 */
; ..\component\Com\Implementation\Com.c	 15321          /* #20 Iterate over all activatable Rx ComIpdus and set the requested deadline monitoring state */
; ..\component\Com\Implementation\Com.c	 15322          for(idx = 0; idx < Com_GetSizeOfActivatableRxComIPdus(); idx++)
; ..\component\Com\Implementation\Com.c	 15323          {
; ..\component\Com\Implementation\Com.c	 15324            Com_RxPduInfoIterType ComRxPduId = Com_GetRxPduInfoIdxOfActivatableRxComIPdus(idx);
; ..\component\Com\Implementation\Com.c	 15325            /* Evaluate requested active state of the I-PDU */
; ..\component\Com\Implementation\Com.c	 15326            Com_RxPduDmStateType bRequestedActiveState = Com_ReceptionDMControl_EvaluateActiveState(ipduGroupVector, ComRxPduId); /* SBSW_COM_PTR_API_VALID_PTR */
; ..\component\Com\Implementation\Com.c	 15327            Com_ReceptionDMControl_SetDmState(ComRxPduId, bRequestedActiveState);
; ..\component\Com\Implementation\Com.c	 15328          }
; ..\component\Com\Implementation\Com.c	 15329        }
; ..\component\Com\Implementation\Com.c	 15330      }
; ..\component\Com\Implementation\Com.c	 15331  # endif
; ..\component\Com\Implementation\Com.c	 15332  #else
; ..\component\Com\Implementation\Com.c	 15333      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15334  #endif
; ..\component\Com\Implementation\Com.c	 15335    }
; ..\component\Com\Implementation\Com.c	 15336  
; ..\component\Com\Implementation\Com.c	 15337    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15338  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15339    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
	jeq	d7,#0,.L53
.L1052:

; ..\component\Com\Implementation\Com.c	 15340    {
; ..\component\Com\Implementation\Com.c	 15341      Com_LMgt_CallDetErrorContinue(COMServiceId_ReceptionDMControl, errorId);
	fcall	.cocofun_9
	j	Det_ReportError
.L53:

; ..\component\Com\Implementation\Com.c	 15342    }
; ..\component\Com\Implementation\Com.c	 15343  #endif
; ..\component\Com\Implementation\Com.c	 15344  
; ..\component\Com\Implementation\Com.c	 15345    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15346    COM_DUMMY_STATEMENT(ipduGroupVector); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15347  }
	ret
.L625:
	
__Com_ReceptionDMControl_function_end:
	.size	Com_ReceptionDMControl,__Com_ReceptionDMControl_function_end-Com_ReceptionDMControl
.L258:
	; End of function
	
	.sdecl	'.text.Com..cocofun_9',code,cluster('.cocofun_9')
	.sect	'.text.Com..cocofun_9'
	.align	2
; Function .cocofun_9
.L171:
.cocofun_9:	.type	func
; Function body .cocofun_9, coco_iter:1
	fcall	.cocofun_10
.L891:
	mov	d6,#6
	fret
.L398:
	; End of function
	.sdecl	'.text.Com..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.Com..cocofun_7'
	.align	2
; Function .cocofun_7
.L173:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	mov	d7,#0
	fcall	.cocofun_8
.L1285:
	cmovn	d7,d15,#2
	fret
.L388:
	; End of function
	.sdecl	'.text.Com.Com_IpduGroupStart',code,cluster('Com_IpduGroupStart')
	.sect	'.text.Com.Com_IpduGroupStart'
	.align	2
	
	.global	Com_IpduGroupStart

; ..\component\Com\Implementation\Com.c	 15348  
; ..\component\Com\Implementation\Com.c	 15349  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15350    Com_IpduGroupStart
; ..\component\Com\Implementation\Com.c	 15351  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15352  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15353   *
; ..\component\Com\Implementation\Com.c	 15354   *
; ..\component\Com\Implementation\Com.c	 15355   *
; ..\component\Com\Implementation\Com.c	 15356   *
; ..\component\Com\Implementation\Com.c	 15357   *
; ..\component\Com\Implementation\Com.c	 15358  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15359  FUNC(void, COM_CODE) Com_IpduGroupStart(Com_IpduGroupIdType IpduGroupId, boolean Initialize)
; Function Com_IpduGroupStart
.L175:
Com_IpduGroupStart:	.type	func

; ..\component\Com\Implementation\Com.c	 15360  {
; ..\component\Com\Implementation\Com.c	 15361    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15362    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 15363  
; ..\component\Com\Implementation\Com.c	 15364    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15365    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 15366    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 15367    {
; ..\component\Com\Implementation\Com.c	 15368      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 15369    }
; ..\component\Com\Implementation\Com.c	 15370  #if (COM_DEV_ERROR_DETECT == STD_ON )   /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 15371  # if (COM_IPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15372    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 15373    else if(IpduGroupId >= Com_GetSizeOfIPduGroupInfo())
; ..\component\Com\Implementation\Com.c	 15374    {
; ..\component\Com\Implementation\Com.c	 15375      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15376    }
; ..\component\Com\Implementation\Com.c	 15377  #  if(COM_INVALIDHNDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15378    else if(Com_IsInvalidHndOfIPduGroupInfo(IpduGroupId))
; ..\component\Com\Implementation\Com.c	 15379    {
; ..\component\Com\Implementation\Com.c	 15380      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15381    }
; ..\component\Com\Implementation\Com.c	 15382  #  endif
; ..\component\Com\Implementation\Com.c	 15383  # endif
; ..\component\Com\Implementation\Com.c	 15384  #endif
; ..\component\Com\Implementation\Com.c	 15385    else
; ..\component\Com\Implementation\Com.c	 15386    {
; ..\component\Com\Implementation\Com.c	 15387  #if (COM_IPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15388      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15389      /* #30 Iterate over all related SubIPduGroups */
; ..\component\Com\Implementation\Com.c	 15390      Com_IPduGroupInfoToSubIPduGroupsIndEndIdxOfIPduGroupInfoType subIpduGroupInd = Com_GetIPduGroupInfoToSubIPduGroupsIndStartIdxOfIPduGroupInfo(IpduGroupId);
; ..\component\Com\Implementation\Com.c	 15391      for(; subIpduGroupInd < Com_GetIPduGroupInfoToSubIPduGroupsIndEndIdxOfIPduGroupInfo(IpduGroupId); subIpduGroupInd++)
; ..\component\Com\Implementation\Com.c	 15392      {
; ..\component\Com\Implementation\Com.c	 15393        Com_IpduGroupIdType subIpduGroupId = (Com_IpduGroupIdType) Com_GetIPduGroupInfoToSubIPduGroupsInd(subIpduGroupInd);
; ..\component\Com\Implementation\Com.c	 15394        /* #40 If SubIPduGroup is INACTIVE, activate the SubIPduGroup and start the related Rx and Tx ComIPdus */
; ..\component\Com\Implementation\Com.c	 15395        if(Com_GetIPduGroupState(subIpduGroupId) == COM_INACTIVE_IPDUGROUPSTATE)
; ..\component\Com\Implementation\Com.c	 15396        {
; ..\component\Com\Implementation\Com.c	 15397          Com_SetIPduGroupState(subIpduGroupId, COM_ACTIVE_DMACTIVE_IPDUGROUPSTATE);      /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 15398  # if (COM_RXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15399          Com_IpduGroupStartRx(subIpduGroupId, Initialize);
; ..\component\Com\Implementation\Com.c	 15400  # endif
; ..\component\Com\Implementation\Com.c	 15401  # if (COM_TXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15402          Com_IpduGroupStartTx(subIpduGroupId, Initialize);
; ..\component\Com\Implementation\Com.c	 15403  # endif
; ..\component\Com\Implementation\Com.c	 15404        }
; ..\component\Com\Implementation\Com.c	 15405      }
; ..\component\Com\Implementation\Com.c	 15406  #else
; ..\component\Com\Implementation\Com.c	 15407      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15408  #endif
; ..\component\Com\Implementation\Com.c	 15409    }
; ..\component\Com\Implementation\Com.c	 15410  
; ..\component\Com\Implementation\Com.c	 15411    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15412  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15413    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 15414    {
; ..\component\Com\Implementation\Com.c	 15415      Com_LMgt_CallDetErrorContinue(COMServiceId_IpduGroupControl, errorId);
	fcall	.cocofun_10
.L1057:
	mov	d6,#3
	fcall	.cocofun_1
.L1058:
	j	Det_ReportError
.L629:
	
__Com_IpduGroupStart_function_end:
	.size	Com_IpduGroupStart,__Com_IpduGroupStart_function_end-Com_IpduGroupStart
.L263:
	; End of function
	
	.sdecl	'.text.Com..cocofun_1',code,cluster('.cocofun_1')
	.sect	'.text.Com..cocofun_1'
	.align	2
; Function .cocofun_1
.L177:
.cocofun_1:	.type	func
; Function body .cocofun_1, coco_iter:0
	fcall	.cocofun_8
.L1255:
	eq	d15,d15,#0
	add	d7,d15,#1
.L1256:
	fret
.L358:
	; End of function
	.sdecl	'.text.Com.Com_IpduGroupStop',code,cluster('Com_IpduGroupStop')
	.sect	'.text.Com.Com_IpduGroupStop'
	.align	2
	
	.global	Com_IpduGroupStop

; ..\component\Com\Implementation\Com.c	 15416    }
; ..\component\Com\Implementation\Com.c	 15417  #endif
; ..\component\Com\Implementation\Com.c	 15418  
; ..\component\Com\Implementation\Com.c	 15419    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15420    COM_DUMMY_STATEMENT(IpduGroupId);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15421    COM_DUMMY_STATEMENT(Initialize);      /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15422  
; ..\component\Com\Implementation\Com.c	 15423  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	 15424  
; ..\component\Com\Implementation\Com.c	 15425  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15426    Com_IpduGroupStop
; ..\component\Com\Implementation\Com.c	 15427  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15428  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15429   *
; ..\component\Com\Implementation\Com.c	 15430   *
; ..\component\Com\Implementation\Com.c	 15431   *
; ..\component\Com\Implementation\Com.c	 15432   *
; ..\component\Com\Implementation\Com.c	 15433  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15434  FUNC(void, COM_CODE) Com_IpduGroupStop(Com_IpduGroupIdType IpduGroupId) /* PRQA S 1505 */ /* MD_MSR_Rule8.7 */
; Function Com_IpduGroupStop
.L179:
Com_IpduGroupStop:	.type	func

; ..\component\Com\Implementation\Com.c	 15435  {
; ..\component\Com\Implementation\Com.c	 15436    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15437    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 15438  
; ..\component\Com\Implementation\Com.c	 15439    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15440    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 15441    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 15442    {
; ..\component\Com\Implementation\Com.c	 15443      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 15444    }
; ..\component\Com\Implementation\Com.c	 15445  #if (COM_DEV_ERROR_DETECT == STD_ON )   /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 15446  # if (COM_IPDUGROUPINFO == STD_ON)      /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	 15447    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 15448    else if(IpduGroupId >= Com_GetSizeOfIPduGroupInfo())
; ..\component\Com\Implementation\Com.c	 15449    {
; ..\component\Com\Implementation\Com.c	 15450      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15451    }
; ..\component\Com\Implementation\Com.c	 15452  #  if(COM_INVALIDHNDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15453    else if(Com_IsInvalidHndOfIPduGroupInfo(IpduGroupId))
; ..\component\Com\Implementation\Com.c	 15454    {
; ..\component\Com\Implementation\Com.c	 15455      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15456    }
; ..\component\Com\Implementation\Com.c	 15457  #  endif
; ..\component\Com\Implementation\Com.c	 15458  # endif
; ..\component\Com\Implementation\Com.c	 15459  #endif
; ..\component\Com\Implementation\Com.c	 15460    else
; ..\component\Com\Implementation\Com.c	 15461    {
; ..\component\Com\Implementation\Com.c	 15462  #if (COM_IPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15463      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15464      /* #30 Iterate over all related SubIPduGroups and stop them */
; ..\component\Com\Implementation\Com.c	 15465      Com_IPduGroupInfoToSubIPduGroupsIndEndIdxOfIPduGroupInfoType subIpduGroupInd = Com_GetIPduGroupInfoToSubIPduGroupsIndStartIdxOfIPduGroupInfo(IpduGroupId);
; ..\component\Com\Implementation\Com.c	 15466      for(; subIpduGroupInd < Com_GetIPduGroupInfoToSubIPduGroupsIndEndIdxOfIPduGroupInfo(IpduGroupId); subIpduGroupInd++)
; ..\component\Com\Implementation\Com.c	 15467      {
; ..\component\Com\Implementation\Com.c	 15468        Com_IpduGroupIdType subIpduGroupId = (Com_IpduGroupIdType) Com_GetIPduGroupInfoToSubIPduGroupsInd(subIpduGroupInd);
; ..\component\Com\Implementation\Com.c	 15469        Com_IpduGroupStopSubGroup(subIpduGroupId);
; ..\component\Com\Implementation\Com.c	 15470      }
; ..\component\Com\Implementation\Com.c	 15471  #else
; ..\component\Com\Implementation\Com.c	 15472      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15473  #endif
; ..\component\Com\Implementation\Com.c	 15474    }
; ..\component\Com\Implementation\Com.c	 15475  
; ..\component\Com\Implementation\Com.c	 15476    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15477  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15478    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 15479    {
; ..\component\Com\Implementation\Com.c	 15480      Com_LMgt_CallDetErrorContinue(COMServiceId_IpduGroupControl, errorId);
	fcall	.cocofun_10
.L1063:
	mov	d6,#3
	fcall	.cocofun_1
.L1064:
	j	Det_ReportError
.L634:
	
__Com_IpduGroupStop_function_end:
	.size	Com_IpduGroupStop,__Com_IpduGroupStop_function_end-Com_IpduGroupStop
.L268:
	; End of function
	
	.sdecl	'.text.Com.Com_EnableReceptionDM',code,cluster('Com_EnableReceptionDM')
	.sect	'.text.Com.Com_EnableReceptionDM'
	.align	2
	
	.global	Com_EnableReceptionDM

; ..\component\Com\Implementation\Com.c	 15481    }
; ..\component\Com\Implementation\Com.c	 15482  #endif
; ..\component\Com\Implementation\Com.c	 15483  
; ..\component\Com\Implementation\Com.c	 15484    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15485    COM_DUMMY_STATEMENT(IpduGroupId);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15486  }
; ..\component\Com\Implementation\Com.c	 15487  
; ..\component\Com\Implementation\Com.c	 15488  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15489    Com_EnableReceptionDM
; ..\component\Com\Implementation\Com.c	 15490  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15491  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15492   *
; ..\component\Com\Implementation\Com.c	 15493   *
; ..\component\Com\Implementation\Com.c	 15494   *
; ..\component\Com\Implementation\Com.c	 15495   *
; ..\component\Com\Implementation\Com.c	 15496  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15497  FUNC(void, COM_CODE) Com_EnableReceptionDM(Com_IpduGroupIdType IpduGroupId)
; Function Com_EnableReceptionDM
.L181:
Com_EnableReceptionDM:	.type	func

; ..\component\Com\Implementation\Com.c	 15498  {
; ..\component\Com\Implementation\Com.c	 15499    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15500    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 15501  
; ..\component\Com\Implementation\Com.c	 15502    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15503    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 15504    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 15505    {
; ..\component\Com\Implementation\Com.c	 15506      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 15507    }
; ..\component\Com\Implementation\Com.c	 15508  #if (COM_DEV_ERROR_DETECT == STD_ON )   /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 15509  # if (COM_IPDUGROUPINFO == STD_ON)      /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	 15510    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 15511    else if(IpduGroupId >= Com_GetSizeOfIPduGroupInfo())
; ..\component\Com\Implementation\Com.c	 15512    {
; ..\component\Com\Implementation\Com.c	 15513      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15514    }
; ..\component\Com\Implementation\Com.c	 15515  #  if(COM_INVALIDHNDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15516    else if(Com_IsInvalidHndOfIPduGroupInfo(IpduGroupId))
; ..\component\Com\Implementation\Com.c	 15517    {
; ..\component\Com\Implementation\Com.c	 15518      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15519    }
; ..\component\Com\Implementation\Com.c	 15520  #  endif
; ..\component\Com\Implementation\Com.c	 15521  # endif
; ..\component\Com\Implementation\Com.c	 15522  #endif
; ..\component\Com\Implementation\Com.c	 15523    else
; ..\component\Com\Implementation\Com.c	 15524    {
; ..\component\Com\Implementation\Com.c	 15525      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15526  #if (COM_RXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)     /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	 15527  # if (COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15528      /* #30 Iterate over all related SubIpduGroups and enable the Rx deadline monitoring */
; ..\component\Com\Implementation\Com.c	 15529      Com_IPduGroupInfoToSubIPduGroupsIndEndIdxOfIPduGroupInfoType subIpduGroupInd = Com_GetIPduGroupInfoToSubIPduGroupsIndStartIdxOfIPduGroupInfo(IpduGroupId);
; ..\component\Com\Implementation\Com.c	 15530      for(; subIpduGroupInd < Com_GetIPduGroupInfoToSubIPduGroupsIndEndIdxOfIPduGroupInfo(IpduGroupId); subIpduGroupInd++)
; ..\component\Com\Implementation\Com.c	 15531      {
; ..\component\Com\Implementation\Com.c	 15532        Com_IpduGroupIdType subIpduGroupId = (Com_IpduGroupIdType) Com_GetIPduGroupInfoToSubIPduGroupsInd(subIpduGroupInd);
; ..\component\Com\Implementation\Com.c	 15533        Com_EnableReceptionDMsubGroup(subIpduGroupId);
; ..\component\Com\Implementation\Com.c	 15534      }
; ..\component\Com\Implementation\Com.c	 15535  # endif
; ..\component\Com\Implementation\Com.c	 15536  #else
; ..\component\Com\Implementation\Com.c	 15537      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15538  #endif
; ..\component\Com\Implementation\Com.c	 15539    }
; ..\component\Com\Implementation\Com.c	 15540  
; ..\component\Com\Implementation\Com.c	 15541    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15542  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15543    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 15544    {
; ..\component\Com\Implementation\Com.c	 15545      Com_LMgt_CallDetErrorContinue(COMServiceId_ReceptionDMControl, errorId);
	fcall	.cocofun_9
.L1069:
	fcall	.cocofun_1
.L1070:
	j	Det_ReportError
.L636:
	
__Com_EnableReceptionDM_function_end:
	.size	Com_EnableReceptionDM,__Com_EnableReceptionDM_function_end-Com_EnableReceptionDM
.L273:
	; End of function
	
	.sdecl	'.text.Com.Com_DisableReceptionDM',code,cluster('Com_DisableReceptionDM')
	.sect	'.text.Com.Com_DisableReceptionDM'
	.align	2
	
	.global	Com_DisableReceptionDM

; ..\component\Com\Implementation\Com.c	 15546    }
; ..\component\Com\Implementation\Com.c	 15547  #endif
; ..\component\Com\Implementation\Com.c	 15548  
; ..\component\Com\Implementation\Com.c	 15549    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15550    COM_DUMMY_STATEMENT(IpduGroupId);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15551  }
; ..\component\Com\Implementation\Com.c	 15552  
; ..\component\Com\Implementation\Com.c	 15553  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15554    Com_DisableReceptionDM
; ..\component\Com\Implementation\Com.c	 15555  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15556  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15557   *
; ..\component\Com\Implementation\Com.c	 15558   *
; ..\component\Com\Implementation\Com.c	 15559   *
; ..\component\Com\Implementation\Com.c	 15560   *
; ..\component\Com\Implementation\Com.c	 15561  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15562  FUNC(void, COM_CODE) Com_DisableReceptionDM(Com_IpduGroupIdType IpduGroupId)
; Function Com_DisableReceptionDM
.L183:
Com_DisableReceptionDM:	.type	func

; ..\component\Com\Implementation\Com.c	 15563  {
; ..\component\Com\Implementation\Com.c	 15564    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15565    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 15566  
; ..\component\Com\Implementation\Com.c	 15567    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15568    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 15569    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 15570    {
; ..\component\Com\Implementation\Com.c	 15571      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 15572    }
; ..\component\Com\Implementation\Com.c	 15573  #if (COM_DEV_ERROR_DETECT == STD_ON )   /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 15574  # if (COM_IPDUGROUPINFO == STD_ON)      /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	 15575    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 15576    else if(IpduGroupId >= Com_GetSizeOfIPduGroupInfo())
; ..\component\Com\Implementation\Com.c	 15577    {
; ..\component\Com\Implementation\Com.c	 15578      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15579    }
; ..\component\Com\Implementation\Com.c	 15580  #  if(COM_INVALIDHNDOFIPDUGROUPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15581    else if(Com_IsInvalidHndOfIPduGroupInfo(IpduGroupId))
; ..\component\Com\Implementation\Com.c	 15582    {
; ..\component\Com\Implementation\Com.c	 15583      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15584    }
; ..\component\Com\Implementation\Com.c	 15585  #  endif
; ..\component\Com\Implementation\Com.c	 15586  # endif
; ..\component\Com\Implementation\Com.c	 15587  #endif
; ..\component\Com\Implementation\Com.c	 15588    else
; ..\component\Com\Implementation\Com.c	 15589    {
; ..\component\Com\Implementation\Com.c	 15590  #if (COM_RXPDUINFOINDUSEDOFIPDUGROUPINFO == STD_ON)     /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	 15591  # if (COM_RXTOUTINFOINDENDIDXOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15592      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15593      /* #30 Iterate over all related SubIPduGroups and disable the Rx deadline monitoring */
; ..\component\Com\Implementation\Com.c	 15594      Com_IPduGroupInfoToSubIPduGroupsIndEndIdxOfIPduGroupInfoType subIpduGroupInd = Com_GetIPduGroupInfoToSubIPduGroupsIndStartIdxOfIPduGroupInfo(IpduGroupId);
; ..\component\Com\Implementation\Com.c	 15595      for(; subIpduGroupInd < Com_GetIPduGroupInfoToSubIPduGroupsIndEndIdxOfIPduGroupInfo(IpduGroupId); subIpduGroupInd++)
; ..\component\Com\Implementation\Com.c	 15596      {
; ..\component\Com\Implementation\Com.c	 15597        Com_IpduGroupIdType subIpduGroupId = (Com_IpduGroupIdType) Com_GetIPduGroupInfoToSubIPduGroupsInd(subIpduGroupInd);
; ..\component\Com\Implementation\Com.c	 15598        Com_DisableReceptionDMsubGroup(subIpduGroupId);
; ..\component\Com\Implementation\Com.c	 15599      }
; ..\component\Com\Implementation\Com.c	 15600  # endif
; ..\component\Com\Implementation\Com.c	 15601  #else
; ..\component\Com\Implementation\Com.c	 15602      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15603  #endif
; ..\component\Com\Implementation\Com.c	 15604    }
; ..\component\Com\Implementation\Com.c	 15605  
; ..\component\Com\Implementation\Com.c	 15606    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15607  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15608    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 15609    {
; ..\component\Com\Implementation\Com.c	 15610      Com_LMgt_CallDetErrorContinue(COMServiceId_ReceptionDMControl, errorId);
	fcall	.cocofun_9
.L1075:
	fcall	.cocofun_1
.L1076:
	j	Det_ReportError
.L638:
	
__Com_DisableReceptionDM_function_end:
	.size	Com_DisableReceptionDM,__Com_DisableReceptionDM_function_end-Com_DisableReceptionDM
.L278:
	; End of function
	
	.sdecl	'.text.Com.Com_MainFunctionRx',code,cluster('Com_MainFunctionRx')
	.sect	'.text.Com.Com_MainFunctionRx'
	.align	2
	
	.global	Com_MainFunctionRx

; ..\component\Com\Implementation\Com.c	 15611    }
; ..\component\Com\Implementation\Com.c	 15612  #endif
; ..\component\Com\Implementation\Com.c	 15613  
; ..\component\Com\Implementation\Com.c	 15614    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15615    COM_DUMMY_STATEMENT(IpduGroupId);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15616  }
; ..\component\Com\Implementation\Com.c	 15617  
; ..\component\Com\Implementation\Com.c	 15618  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15619    Com_MainFunctionRx
; ..\component\Com\Implementation\Com.c	 15620  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15621  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15622   *
; ..\component\Com\Implementation\Com.c	 15623   *
; ..\component\Com\Implementation\Com.c	 15624   *
; ..\component\Com\Implementation\Com.c	 15625   *
; ..\component\Com\Implementation\Com.c	 15626   *
; ..\component\Com\Implementation\Com.c	 15627  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15628  FUNC(void, COM_CODE) Com_MainFunctionRx(void)
; Function Com_MainFunctionRx
.L185:
Com_MainFunctionRx:	.type	func
	sub.a	a10,#16
.L893:

; ..\component\Com\Implementation\Com.c	 15629  {
; ..\component\Com\Implementation\Com.c	 15630  #if ((COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)||(COM_RXTOUTINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 15631    /* #10 Check if COM is initialized */
; ..\component\Com\Implementation\Com.c	 15632    if(Com_IsInitialized())
	fcall	.cocofun_8
.L1194:
	jeq	d15,#0,.L54
.L734:
	mov.a	a15,#0
.L1195:
	st.a	[a10],a15
.L1196:
	mov	d15,#0
	st.w	[a10]8,d15
.L1197:
	st.w	[a10]4,d15
.L739:
	call	SuspendAllInterrupts
.L740:
	movh.a	a15,#@his(Com_RxPduInfo)
	ld.bu	d1,[a15]@los(Com_RxPduInfo)
.L1198:
	mov	d0,#0
.L894:

; ..\component\Com\Implementation\Com.c	 12262    if(Com_IsHandleRxPduDeferredUsedOfRxPduInfo(idxRxPduInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */      (inlined)
	jeq	d1,#0,.L55
.L1199:
	movh.a	a15,#@his(Com_RxPduGrpActive)
	ld.bu	d15,[a15]@los(Com_RxPduGrpActive)
.L1200:

; ..\component\Com\Implementation\Com.c	 12264      if(Com_IsRxPduGrpActive(idxRxPduInfo))      (inlined)
	jeq	d15,#0,.L56
.L1201:
	movh.a	a15,#@his(Com_HandleRxPduDeferred)
	ld.bu	d15,[a15]@los(Com_HandleRxPduDeferred)
.L1202:
	cmov	d0,d15,#1

; ..\component\Com\Implementation\Com.c	 12264      if(Com_IsRxPduGrpActive(idxRxPduInfo))      (inlined)
.L56:

; ..\component\Com\Implementation\Com.c	 12262    if(Com_IsHandleRxPduDeferredUsedOfRxPduInfo(idxRxPduInfo))    /* COV_COM_FEATURE_ALWAYS_TRUE_TX */      (inlined)
.L55:

; ..\component\Com\Implementation\Com.c	  9670      if(Com_RxProcessing_IsDeferredProcessingRequested(idxRxPduInfo) == TRUE)      (inlined)
	jeq	d0,#0,.L58
.L747:
	movh.a	a15,#@his(Com_HandleRxPduDeferred)
	lea	a15,[a15]@los(Com_HandleRxPduDeferred)
	ld.bu	d15,[a15]
.L1203:
	mov.a	a2,#0
.L1204:
	add	d15,#-1
.L1205:
	insert	d5,d5,d15,#0,#8
.L1206:

; ..\component\Com\Implementation\Com.c	  9719        if(Com_IsRxDefPduBufferUsedOfRxPduInfo(idxRxPduInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */      (inlined)
	jeq	d1,#0,.L59
.L1207:
	movh.a	a2,#@his(Com_RxDefPduBuffer)
	lea	a2,[a2]@los(Com_RxDefPduBuffer)

; ..\component\Com\Implementation\Com.c	  9719        if(Com_IsRxDefPduBufferUsedOfRxPduInfo(idxRxPduInfo))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */      (inlined)
.L59:
	mov	d0,#0
	st.b	[a15],d0
.L895:
	mov.d	d15,a2
.L897:
	mov	d4,d15
	fcall	.cocofun_3
.L1208:
	extr.u	d1,d5,#0,#8
	movh.a	a2,#@his(Com_RxSigBufferSInt8)
	lea	a2,[a2]@los(Com_RxSigBufferSInt8)
.L1209:

; ..\component\Com\Implementation\Com.c	 10623    for(; idxRxSigInfo < Com_GetRxSigInfoEndIdxOfRxPduInfo(comRxPduInfoIdx); idxRxSigInfo++)      (inlined)
	mov.a	a4,#1
.L60:
	add	d15,d0,#1
.L1210:

; ..\component\Com\Implementation\Com.c	 10626      if(PduInfoPtr->SduLength >= Com_GetValidDlcOfRxSigInfo(idxRxSigInfo))      (inlined)
	jlt.u	d1,d15,.L61
.L769:
	ld.bu	d15,[a15]2
.L1211:

; ..\component\Com\Implementation\Com.c	 11330    switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))      (inlined)
	jne	d15,#1,.L62
.L777:
	add	d2,d4,d0
	mov.a	a5,d2
.L784:
	insert	d3,d3,#0,#0,#8
.L793:

; ..\component\Com\Implementation\Com.c	  6825    switch (Com_GetBusAccOfRxAccessInfo(rxAccessInfoId))      (inlined)
	jne	d15,#1,.L63
.L1212:
	ld.bu	d15,[a5]
.L1213:
	insert	d3,d3,d15,#0,#8

; ..\component\Com\Implementation\Com.c	  6924      default:   /* COV_COM_MISRA */      (inlined)
.L63:
	st.b	[a2],d3

; ..\component\Com\Implementation\Com.c	 11423      default:   /* COV_COM_MISRA */      (inlined)
.L62:

; ..\component\Com\Implementation\Com.c	 10626      if(PduInfoPtr->SduLength >= Com_GetValidDlcOfRxSigInfo(idxRxSigInfo))      (inlined)
.L61:
	add	d0,#1
	add.a	a15,#4
.L1214:
	add.a	a2,#1

; ..\component\Com\Implementation\Com.c	 10623    for(; idxRxSigInfo < Com_GetRxSigInfoEndIdxOfRxPduInfo(comRxPduInfoIdx); idxRxSigInfo++)      (inlined)
	loop	a4,.L60

; ..\component\Com\Implementation\Com.c	  9670      if(Com_RxProcessing_IsDeferredProcessingRequested(idxRxPduInfo) == TRUE)      (inlined)
.L58:
	movh.a	a15,#@his(Com_RxDeferredProcessingISRLockCounter)
	lea	a15,[a15]@los(Com_RxDeferredProcessingISRLockCounter)
	ld.hu	d15,[a15]0
.L1215:

; ..\component\Com\Implementation\Com.c	 12233    if(Com_GetRxDeferredProcessingISRLockCounter() > 0u)      (inlined)
	jne	d15,#0,.L64
.L809:
	mov	d15,#1
	st.h	[a15],d15
.L1216:
	call	ResumeAllInterrupts
.L810:
	call	SuspendAllInterrupts

; ..\component\Com\Implementation\Com.c	 12237    else      (inlined)
.L64:
	mov	d15,#1
	st.h	[a15],d15
.L1217:
	j	ResumeAllInterrupts
.L54:

; ..\component\Com\Implementation\Com.c	 15633    {
; ..\component\Com\Implementation\Com.c	 15634  # if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15635      {
; ..\component\Com\Implementation\Com.c	 15636        /* #20 Do deferred processing */
; ..\component\Com\Implementation\Com.c	 15637        Com_RxDeferredPduProcessing();
; ..\component\Com\Implementation\Com.c	 15638      }
; ..\component\Com\Implementation\Com.c	 15639  # endif
; ..\component\Com\Implementation\Com.c	 15640  # if (COM_RXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15641      /* #30 Use Rx deadline monitoring timing domain (if configured) */
; ..\component\Com\Implementation\Com.c	 15642  #  if(COM_RXDLMONDIVISOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15643      Com_DecRxDlMonDivisorCounter();     /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 15644      if(Com_GetRxDlMonDivisorCounter() == 0u)
; ..\component\Com\Implementation\Com.c	 15645  #  endif
; ..\component\Com\Implementation\Com.c	 15646      {
; ..\component\Com\Implementation\Com.c	 15647  #  if(COM_RXDLMONDIVISOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15648        Com_SetRxDlMonDivisorCounter(Com_GetRxDlMonDivisor());    /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 15649  #  endif
; ..\component\Com\Implementation\Com.c	 15650        /* #40 Do Rx deadline monitoring */
; ..\component\Com\Implementation\Com.c	 15651        Com_RxDlMon_MainFunctionRx();
; ..\component\Com\Implementation\Com.c	 15652      }
; ..\component\Com\Implementation\Com.c	 15653  # endif
; ..\component\Com\Implementation\Com.c	 15654    }
; ..\component\Com\Implementation\Com.c	 15655  #endif
; ..\component\Com\Implementation\Com.c	 15656  }
	ret
.L732:
	
__Com_MainFunctionRx_function_end:
	.size	Com_MainFunctionRx,__Com_MainFunctionRx_function_end-Com_MainFunctionRx
.L348:
	; End of function
	
	.sdecl	'.text.Com.Com_MainFunctionTx',code,cluster('Com_MainFunctionTx')
	.sect	'.text.Com.Com_MainFunctionTx'
	.align	2
	
	.global	Com_MainFunctionTx

; ..\component\Com\Implementation\Com.c	 15657  
; ..\component\Com\Implementation\Com.c	 15658  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15659    Com_MainFunctionTx
; ..\component\Com\Implementation\Com.c	 15660  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15661  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15662   *
; ..\component\Com\Implementation\Com.c	 15663   *
; ..\component\Com\Implementation\Com.c	 15664   *
; ..\component\Com\Implementation\Com.c	 15665   *
; ..\component\Com\Implementation\Com.c	 15666   *
; ..\component\Com\Implementation\Com.c	 15667   *
; ..\component\Com\Implementation\Com.c	 15668   *
; ..\component\Com\Implementation\Com.c	 15669   *
; ..\component\Com\Implementation\Com.c	 15670   *
; ..\component\Com\Implementation\Com.c	 15671   ***********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15672  FUNC(void, COM_CODE) Com_MainFunctionTx(void)
; Function Com_MainFunctionTx
.L187:
Com_MainFunctionTx:	.type	func
	sub.a	a10,#8
.L898:

; ..\component\Com\Implementation\Com.c	 15673  {
; ..\component\Com\Implementation\Com.c	 15674  #if (COM_TXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15675    /* #10 Check if COM is initialized */
; ..\component\Com\Implementation\Com.c	 15676    if(Com_IsInitialized())
	fcall	.cocofun_6
.L1222:
	jeq	d15,#0,.L65
.L1223:

; ..\component\Com\Implementation\Com.c	 15677    {
; ..\component\Com\Implementation\Com.c	 15678      /* Tx Counter Handling */
; ..\component\Com\Implementation\Com.c	 15679  # if (COM_TXCYCLECOUNTERDIVISOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15680      /* #50 Use Tx Mode timing domain */
; ..\component\Com\Implementation\Com.c	 15681      Com_DecTxCycleCounterDivisorCounter();      /* SBSW_COM_CSL_VAR_ACCESS */
	movh.a	a15,#@his(Com_TxCycleCounterDivisorCounter)
	lea	a15,[a15]@los(Com_TxCycleCounterDivisorCounter)
	ld.hu	d15,[a15]0
	add	d15,#-1
	st.h	[a15],d15
.L1224:

; ..\component\Com\Implementation\Com.c	 15682      if(Com_GetTxCycleCounterDivisorCounter() == 0u)
	ld.hu	d15,[a15]0
.L1225:
	jne	d15,#0,.L66
.L1226:

; ..\component\Com\Implementation\Com.c	 15683  # endif
; ..\component\Com\Implementation\Com.c	 15684      {
; ..\component\Com\Implementation\Com.c	 15685  # if (COM_TXCYCLECOUNTERDIVISOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15686        Com_SetTxCycleCounterDivisorCounter(Com_GetTxCycleCounterDivisor());      /* SBSW_COM_CSL_VAR_ACCESS */
	mov	d15,#50
	st.h	[a15],d15
.L815:
	call	SuspendAllInterrupts
.L822:
	movh.a	a12,#@his(Com_TxCyclicPdu)
	lea	a12,[a12]@los(Com_TxCyclicPdu)
.L1227:
	fcall	.cocofun_2
.L825:
	mov	d9,#1
	movh.a	a13,#@his(Com_TransmitRequest)
.L826:
	mov	d10,d9
	movh.a	a14,#@his(Com_TxCyclicProcessingISRLockCounter)
.L837:
	st.a	[a10],a15
.L842:
	lea	a13,[a13]@los(Com_TransmitRequest)
.L829:
	lea	a14,[a14]@los(Com_TxCyclicProcessingISRLockCounter)
.L830:

; ..\component\Com\Implementation\Com.c	 13284    for(; ComTxCyclicPduIterator < Com_GetSizeOfTxCyclicPdu(); ComTxCyclicPduIterator++)      (inlined)
	mov.a	a15,#2
.L67:
	ld.a	a2,[a10]
.L1228:
	ld.bu	d15,[a12+]
.L899:
	addsc.a	a2,a2,d15,#0
	ld.bu	d0,[a2]
.L1229:

; ..\component\Com\Implementation\Com.c	 13289        if(Com_IsTxPduGrpActive(ComTxPduId))      (inlined)
	jeq	d0,#0,.L68
.L843:
	movh.a	a2,#@his(Com_CyclicSendRequest)
	lea	a2,[a2]@los(Com_CyclicSendRequest)
	addsc.a	a2,a2,d15,#0
	ld.bu	d0,[a2]
.L1230:

; ..\component\Com\Implementation\Com.c	 13688    if(Com_IsCyclicSendRequest(ComTxPduId))       /* COV_COM_ONLY_CYCLIC_PDU */      (inlined)
	jeq	d0,#0,.L69
.L1231:
	movh.a	a2,#@his(Com_CycleTimeCnt)
	lea	a2,[a2]@los(Com_CycleTimeCnt)
	addsc.a	a4,a2,d15,#0
	ld.bu	d0,[a4]
	add	d0,#-1
	extr.u	d0,d0,#0,#8
.L1232:

; ..\component\Com\Implementation\Com.c	 13692      if(0u == Com_GetCycleTimeCnt(ComTxPduId))      (inlined)
	jne	d0,#0,.L70
.L1233:
	addsc.a	a2,a13,d15,#0
	st.b	[a2],d10
.L1234:
	movh.a	a2,#@his(Com_TxModeInfo)
	lea	a2,[a2]@los(Com_TxModeInfo)
	addsc.a	a2,a2,d15,#1
	ld.bu	d15,[a2]1
.L900:
	add	d15,#1
	extr.u	d0,d15,#0,#8

; ..\component\Com\Implementation\Com.c	 13692      if(0u == Com_GetCycleTimeCnt(ComTxPduId))      (inlined)
.L70:
	st.b	[a4],d0

; ..\component\Com\Implementation\Com.c	 13688    if(Com_IsCyclicSendRequest(ComTxPduId))       /* COV_COM_ONLY_CYCLIC_PDU */      (inlined)
.L69:

; ..\component\Com\Implementation\Com.c	 13289        if(Com_IsTxPduGrpActive(ComTxPduId))      (inlined)
.L68:
	ld.hu	d15,[a14]0
.L1235:

; ..\component\Com\Implementation\Com.c	 13339    if(Com_GetTxCyclicProcessingISRLockCounter() > 0u)      (inlined)
	jeq	d15,#0,.L71
.L1236:
	add	d15,#-1
	st.h	[a14],d15
.L1237:

; ..\component\Com\Implementation\Com.c	 13341      Com_DecTxCyclicProcessingISRLockCounter();  /* SBSW_COM_CSL_VAR_ACCESS */      (inlined)
	j	.L72
.L65:

; ..\component\Com\Implementation\Com.c	 15687  # endif
; ..\component\Com\Implementation\Com.c	 15688  # if ((COM_PERIODICOFTXMODETRUE == STD_ON) || (COM_PERIODICOFTXMODEFALSE == STD_ON) || (COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON) || (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 15689        /* #60 Do TxMode processing */
; ..\component\Com\Implementation\Com.c	 15690        Com_TxModeHdlr_MainFunctionTx_CycleCounter();
; ..\component\Com\Implementation\Com.c	 15691  # endif
; ..\component\Com\Implementation\Com.c	 15692      }
; ..\component\Com\Implementation\Com.c	 15693  
; ..\component\Com\Implementation\Com.c	 15694      /* Tx deadline monitoring */
; ..\component\Com\Implementation\Com.c	 15695  # if ((COM_GWTIMEOUTINFO == STD_ON) || (COM_TXTOUTINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 15696  #  if (COM_TXDLMONDIVISOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15697      /* #20 Use Tx deadline monitoring timing domain */
; ..\component\Com\Implementation\Com.c	 15698      Com_DecTxDlMonDivisorCounter();     /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 15699      if(Com_GetTxDlMonDivisorCounter() == 0u)
; ..\component\Com\Implementation\Com.c	 15700  #  endif
; ..\component\Com\Implementation\Com.c	 15701      {
; ..\component\Com\Implementation\Com.c	 15702  #  if (COM_TXDLMONDIVISOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15703        Com_SetTxDlMonDivisorCounter(Com_GetTxDlMonDivisor());    /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 15704  #  endif
; ..\component\Com\Implementation\Com.c	 15705  #  if (COM_TXTOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15706        /* #30 Do Tx deadline monitoring */
; ..\component\Com\Implementation\Com.c	 15707        Com_TxDlMon_MainFunctionTx();
; ..\component\Com\Implementation\Com.c	 15708  #  endif
; ..\component\Com\Implementation\Com.c	 15709  #  if (COM_GWTIMEOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15710        /* #40 Handle GwTimeout, if configured. */
; ..\component\Com\Implementation\Com.c	 15711        Com_GwTout_HandleCounter();
; ..\component\Com\Implementation\Com.c	 15712  #  endif
; ..\component\Com\Implementation\Com.c	 15713      }
; ..\component\Com\Implementation\Com.c	 15714  # endif
; ..\component\Com\Implementation\Com.c	 15715  
; ..\component\Com\Implementation\Com.c	 15716      /* #70 Process transmit request and initiate transition */
; ..\component\Com\Implementation\Com.c	 15717      Com_TxModeHdlr_MainFunctionTx_Transmit();
; ..\component\Com\Implementation\Com.c	 15718  
; ..\component\Com\Implementation\Com.c	 15719  # if (COM_CBKTXACKDEFFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15720      /* #80 Process deferred Tx Confirmations */
; ..\component\Com\Implementation\Com.c	 15721      Com_TxNHdlr_MainFunctionTx();
; ..\component\Com\Implementation\Com.c	 15722  # endif
; ..\component\Com\Implementation\Com.c	 15723    }
; ..\component\Com\Implementation\Com.c	 15724  #endif
; ..\component\Com\Implementation\Com.c	 15725  }
	ret

; ..\component\Com\Implementation\Com.c	 13339    if(Com_GetTxCyclicProcessingISRLockCounter() > 0u)      (inlined)
.L71:
	st.h	[a14],d9
.L1238:
	call	ResumeAllInterrupts
.L835:
	call	SuspendAllInterrupts

; ..\component\Com\Implementation\Com.c	 13343    else      (inlined)
.L72:

; ..\component\Com\Implementation\Com.c	 13284    for(; ComTxCyclicPduIterator < Com_GetSizeOfTxCyclicPdu(); ComTxCyclicPduIterator++)      (inlined)
	loop	a15,.L67
.L845:
	st.h	[a14],d9
.L1239:
	call	ResumeAllInterrupts
.L66:
	fcall	.cocofun_2
.L844:
	movh.a	a12,#@his(Com_TransmitRequest)
	lea	a12,[a12]@los(Com_TransmitRequest)
.L831:
	mov	d9,#1
	call	SuspendAllInterrupts
.L818:
	mov	d10,#0
	movh.a	a13,#@his(Com_TxProcessingISRLockCounter)
.L850:
	lea	a13,[a13]@los(Com_TxProcessingISRLockCounter)
.L851:

; ..\component\Com\Implementation\Com.c	 13367    for(ComTxPduId = 0u; ComTxPduId < Com_GetSizeOfTxPduInfo(); ComTxPduId++)      (inlined)
	mov.a	a14,#2
.L73:
	ld.bu	d15,[a15]
.L1240:

; ..\component\Com\Implementation\Com.c	 13448    if(Com_IsTxPduGrpActive(ComTxPduId))  /* COV_COM_NO_IPDUGROUPS */      (inlined)
	jeq	d15,#0,.L74
.L1241:
	ld.bu	d15,[a12]
.L1242:

; ..\component\Com\Implementation\Com.c	 13456        if(Com_IsTransmitRequest(ComTxPduId))      (inlined)
	jeq	d15,#0,.L75
.L1243:
	mov	d4,d10
	call	Com_TxLLIf_Transmit
.L1244:
	st.b	[a12],d8

; ..\component\Com\Implementation\Com.c	 13456        if(Com_IsTransmitRequest(ComTxPduId))      (inlined)
.L75:

; ..\component\Com\Implementation\Com.c	 13448    if(Com_IsTxPduGrpActive(ComTxPduId))  /* COV_COM_NO_IPDUGROUPS */      (inlined)
.L74:
	ld.hu	d15,[a13]0
.L1245:

; ..\component\Com\Implementation\Com.c	 13421    if(Com_GetTxProcessingISRLockCounter() > 0u)  /* COV_COM_THRESHOLD_TX */      (inlined)
	jeq	d15,#0,.L76
.L1246:
	add	d15,#-1
	st.h	[a13],d15
.L1247:

; ..\component\Com\Implementation\Com.c	 13423      Com_DecTxProcessingISRLockCounter();        /* SBSW_COM_CSL_VAR_ACCESS */      (inlined)
	j	.L77

; ..\component\Com\Implementation\Com.c	 13421    if(Com_GetTxProcessingISRLockCounter() > 0u)  /* COV_COM_THRESHOLD_TX */      (inlined)
.L76:
	st.h	[a13],d9
.L1248:
	call	ResumeAllInterrupts
.L859:
	call	SuspendAllInterrupts

; ..\component\Com\Implementation\Com.c	 13425    else      (inlined)
.L77:
	add	d10,#1
	add.a	a12,#1
.L1249:
	add.a	a15,#1

; ..\component\Com\Implementation\Com.c	 13367    for(ComTxPduId = 0u; ComTxPduId < Com_GetSizeOfTxPduInfo(); ComTxPduId++)      (inlined)
	loop	a14,.L73
.L863:
	st.h	[a13],d9
.L1250:
	j	ResumeAllInterrupts
.L812:
	
__Com_MainFunctionTx_function_end:
	.size	Com_MainFunctionTx,__Com_MainFunctionTx_function_end-Com_MainFunctionTx
.L353:
	; End of function
	
	.sdecl	'.text.Com..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.Com..cocofun_6'
	.align	2
; Function .cocofun_6
.L189:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0
	mov	d8,#0
	fcall	.cocofun_8
.L905:
	fret
.L383:
	; End of function
	.sdecl	'.text.Com.Com_GetConfigurationId',code,cluster('Com_GetConfigurationId')
	.sect	'.text.Com.Com_GetConfigurationId'
	.align	2
	
	.global	Com_GetConfigurationId

; ..\component\Com\Implementation\Com.c	 15726  
; ..\component\Com\Implementation\Com.c	 15727  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15728    Com_GetConfigurationId
; ..\component\Com\Implementation\Com.c	 15729  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15730  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15731   *
; ..\component\Com\Implementation\Com.c	 15732   *
; ..\component\Com\Implementation\Com.c	 15733   *
; ..\component\Com\Implementation\Com.c	 15734  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15735  FUNC(uint32, COM_CODE) Com_GetConfigurationId(void)
; Function Com_GetConfigurationId
.L191:
Com_GetConfigurationId:	.type	func

; ..\component\Com\Implementation\Com.c	 15736  {
; ..\component\Com\Implementation\Com.c	 15737  /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15738    uint32 retVal;                /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 15739    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
	fcall	.cocofun_7
.L901:

; ..\component\Com\Implementation\Com.c	 15740  
; ..\component\Com\Implementation\Com.c	 15741  /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15742    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 15743    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 15744    {
; ..\component\Com\Implementation\Com.c	 15745      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 15746      retVal = 0u;
; ..\component\Com\Implementation\Com.c	 15747    }
; ..\component\Com\Implementation\Com.c	 15748    else
; ..\component\Com\Implementation\Com.c	 15749    {
; ..\component\Com\Implementation\Com.c	 15750      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15751      /* #20 Get current configuration Id */
; ..\component\Com\Implementation\Com.c	 15752      retVal = Com_GetConfigId();
; ..\component\Com\Implementation\Com.c	 15753    }
; ..\component\Com\Implementation\Com.c	 15754  
; ..\component\Com\Implementation\Com.c	 15755    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15756  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15757    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */
	jeq	d7,#0,.L79
.L1081:

; ..\component\Com\Implementation\Com.c	 15758    {
; ..\component\Com\Implementation\Com.c	 15759      Com_LMgt_CallDetErrorContinue(COMServiceId_GetConfigurationId, errorId);
	fcall	.cocofun_10
	mov	d6,#8
	call	Det_ReportError
.L79:

; ..\component\Com\Implementation\Com.c	 15760    }
; ..\component\Com\Implementation\Com.c	 15761  #endif
; ..\component\Com\Implementation\Com.c	 15762  
; ..\component\Com\Implementation\Com.c	 15763    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15764  
; ..\component\Com\Implementation\Com.c	 15765    return retVal;
; ..\component\Com\Implementation\Com.c	 15766  }
	mov	d2,#0
	ret
.L641:
	
__Com_GetConfigurationId_function_end:
	.size	Com_GetConfigurationId,__Com_GetConfigurationId_function_end-Com_GetConfigurationId
.L283:
	; End of function
	
	.sdecl	'.text.Com.Com_GetStatus',code,cluster('Com_GetStatus')
	.sect	'.text.Com.Com_GetStatus'
	.align	2
	
	.global	Com_GetStatus

; ..\component\Com\Implementation\Com.c	 15767  
; ..\component\Com\Implementation\Com.c	 15768  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15769    Com_GetStatus
; ..\component\Com\Implementation\Com.c	 15770  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15771  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15772   *
; ..\component\Com\Implementation\Com.c	 15773   *
; ..\component\Com\Implementation\Com.c	 15774  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15775  FUNC(Com_StatusType, COM_CODE) Com_GetStatus(void)
; Function Com_GetStatus
.L193:
Com_GetStatus:	.type	func

; ..\component\Com\Implementation\Com.c	 15776  {
; ..\component\Com\Implementation\Com.c	 15777    /* #10 Return the current COM module status */
; ..\component\Com\Implementation\Com.c	 15778    return (Com_IsInitialized()? COM_INIT : COM_UNINIT);
	fcall	.cocofun_8
.L1086:

; ..\component\Com\Implementation\Com.c	 15779  }
	ne	d2,d15,#0
	ret
.L644:
	
__Com_GetStatus_function_end:
	.size	Com_GetStatus,__Com_GetStatus_function_end-Com_GetStatus
.L288:
	; End of function
	
	.sdecl	'.text.Com.Com_TriggerIPDUSend',code,cluster('Com_TriggerIPDUSend')
	.sect	'.text.Com.Com_TriggerIPDUSend'
	.align	2
	
	.global	Com_TriggerIPDUSend

; ..\component\Com\Implementation\Com.c	 15780  
; ..\component\Com\Implementation\Com.c	 15781  #if (COM_VERSION_INFO_API == STD_ON)
; ..\component\Com\Implementation\Com.c	 15782  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15783    Com_GetVersionInfo
; ..\component\Com\Implementation\Com.c	 15784  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15785  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15786   *
; ..\component\Com\Implementation\Com.c	 15787   *
; ..\component\Com\Implementation\Com.c	 15788   *
; ..\component\Com\Implementation\Com.c	 15789  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15790  FUNC(void, COM_CODE) Com_GetVersionInfo(P2VAR(Std_VersionInfoType, AUTOMATIC, COM_APPL_VAR) versioninfo)
; ..\component\Com\Implementation\Com.c	 15791  {
; ..\component\Com\Implementation\Com.c	 15792    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15793    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 15794    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15795    /* #10 Check plausibility of all input parameters */
; ..\component\Com\Implementation\Com.c	 15796  # if (COM_DEV_ERROR_DETECT == STD_ON )  /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 15797    if(versioninfo == NULL_PTR)
; ..\component\Com\Implementation\Com.c	 15798    {
; ..\component\Com\Implementation\Com.c	 15799      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 15800    }
; ..\component\Com\Implementation\Com.c	 15801    else
; ..\component\Com\Implementation\Com.c	 15802  # endif
; ..\component\Com\Implementation\Com.c	 15803    {
; ..\component\Com\Implementation\Com.c	 15804      /* #20 Write component data to versioninfo */
; ..\component\Com\Implementation\Com.c	 15805      versioninfo->vendorID = COM_VENDOR_ID;      /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 15806      versioninfo->moduleID = COM_MODULE_ID;      /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 15807  
; ..\component\Com\Implementation\Com.c	 15808      versioninfo->sw_major_version = COM_SW_MAJOR_VERSION;       /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 15809      versioninfo->sw_minor_version = COM_SW_MINOR_VERSION;       /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 15810      versioninfo->sw_patch_version = COM_SW_PATCH_VERSION;       /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 15811    }
; ..\component\Com\Implementation\Com.c	 15812  
; ..\component\Com\Implementation\Com.c	 15813    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15814  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15815    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */
; ..\component\Com\Implementation\Com.c	 15816    {
; ..\component\Com\Implementation\Com.c	 15817      Com_LMgt_CallDetErrorContinue(COMServiceId_GetVersionInfo, errorId);
; ..\component\Com\Implementation\Com.c	 15818    }
; ..\component\Com\Implementation\Com.c	 15819  # endif
; ..\component\Com\Implementation\Com.c	 15820  
; ..\component\Com\Implementation\Com.c	 15821    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15822  }
; ..\component\Com\Implementation\Com.c	 15823  #endif
; ..\component\Com\Implementation\Com.c	 15824  
; ..\component\Com\Implementation\Com.c	 15825  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15826    Com_TriggerIPDUSend
; ..\component\Com\Implementation\Com.c	 15827  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15828  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15829   *
; ..\component\Com\Implementation\Com.c	 15830   *
; ..\component\Com\Implementation\Com.c	 15831   *
; ..\component\Com\Implementation\Com.c	 15832   *
; ..\component\Com\Implementation\Com.c	 15833  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15834  FUNC(void, COM_CODE) Com_TriggerIPDUSend(PduIdType PduId)
; Function Com_TriggerIPDUSend
.L195:
Com_TriggerIPDUSend:	.type	func

; ..\component\Com\Implementation\Com.c	 15835  {
; ..\component\Com\Implementation\Com.c	 15836  /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15837    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 15838  
; ..\component\Com\Implementation\Com.c	 15839  /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15840    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 15841    if(!Com_IsInitialized())
	mov	d7,#0
	fcall	.cocofun_8
	jne	d15,#0,.L82
.L1091:

; ..\component\Com\Implementation\Com.c	 15842    {
; ..\component\Com\Implementation\Com.c	 15843      errorId = COM_E_UNINIT;
	mov	d7,#2
	j	.L83
.L82:

; ..\component\Com\Implementation\Com.c	 15844    }
; ..\component\Com\Implementation\Com.c	 15845  #if (COM_DEV_ERROR_DETECT == STD_ON )   /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 15846    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 15847  # if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15848    else if(PduId >= Com_GetSizeOfTxPduInfo())
	jlt.u	d4,#3,.L84
.L1092:

; ..\component\Com\Implementation\Com.c	 15849    {
; ..\component\Com\Implementation\Com.c	 15850      errorId = COM_E_PARAM;
	mov	d7,#1
	j	.L85
.L84:
	fcall	.cocofun_2
.L902:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L1093:

; ..\component\Com\Implementation\Com.c	 13654    if(Com_IsTxPduGrpActive(ComTxPduId))  /* COV_COM_NO_IPDUGROUPS */      (inlined)
	jeq	d15,#0,.L86
.L1094:
	fcall	.cocofun_5
	addsc.a	a15,a15,d4,#0
	mov	d15,#1
	st.b	[a15],d15

; ..\component\Com\Implementation\Com.c	 13654    if(Com_IsTxPduGrpActive(ComTxPduId))  /* COV_COM_NO_IPDUGROUPS */      (inlined)
.L86:

; ..\component\Com\Implementation\Com.c	 15851    }
; ..\component\Com\Implementation\Com.c	 15852  #  if (COM_INVALIDHNDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15853    else if(Com_IsInvalidHndOfTxPduInfo(PduId))
; ..\component\Com\Implementation\Com.c	 15854    {
; ..\component\Com\Implementation\Com.c	 15855      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15856    }
; ..\component\Com\Implementation\Com.c	 15857  #  endif
; ..\component\Com\Implementation\Com.c	 15858  # endif
; ..\component\Com\Implementation\Com.c	 15859  #endif
; ..\component\Com\Implementation\Com.c	 15860    else
.L85:
.L83:

; ..\component\Com\Implementation\Com.c	 15861    {
; ..\component\Com\Implementation\Com.c	 15862      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15863  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15864  # if (COM_TXTPINFOUSEDOFTXPDUINFO)
; ..\component\Com\Implementation\Com.c	 15865      if((!Com_IsTxTpInfoUsedOfTxPduInfo(PduId)) || (Com_GetTxTpConnectionState(Com_GetTxTpInfoIdxOfTxPduInfo(PduId)) == COM_READY_TXTPCONNECTIONSTATE))  /* COV_COM_TP_ONLY */
; ..\component\Com\Implementation\Com.c	 15866  # endif
; ..\component\Com\Implementation\Com.c	 15867      {
; ..\component\Com\Implementation\Com.c	 15868        /* #30 Set the deferred transmit flag to initiate a transmission within the Com_MainFunctionTx */
; ..\component\Com\Implementation\Com.c	 15869        Com_TxModeHdlr_TriggerIpduSendOnceDeferred(PduId);
; ..\component\Com\Implementation\Com.c	 15870      }
; ..\component\Com\Implementation\Com.c	 15871  #else
; ..\component\Com\Implementation\Com.c	 15872      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15873  #endif
; ..\component\Com\Implementation\Com.c	 15874    }
; ..\component\Com\Implementation\Com.c	 15875  
; ..\component\Com\Implementation\Com.c	 15876    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15877  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15878    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
	jeq	d7,#0,.L87
.L1095:

; ..\component\Com\Implementation\Com.c	 15879    {
; ..\component\Com\Implementation\Com.c	 15880      Com_LMgt_CallDetErrorContinue(COMServiceId_TriggerIPDUSend, errorId);
	fcall	.cocofun_10
.L903:
	mov	d6,#23
	j	Det_ReportError
.L87:

; ..\component\Com\Implementation\Com.c	 15881    }
; ..\component\Com\Implementation\Com.c	 15882  #endif
; ..\component\Com\Implementation\Com.c	 15883  
; ..\component\Com\Implementation\Com.c	 15884    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15885    COM_DUMMY_STATEMENT(PduId);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15886  }
	ret
.L645:
	
__Com_TriggerIPDUSend_function_end:
	.size	Com_TriggerIPDUSend,__Com_TriggerIPDUSend_function_end-Com_TriggerIPDUSend
.L293:
	; End of function
	
	.sdecl	'.text.Com.Com_ClearIpduGroupVector',code,cluster('Com_ClearIpduGroupVector')
	.sect	'.text.Com.Com_ClearIpduGroupVector'
	.align	2
	
	.global	Com_ClearIpduGroupVector

; ..\component\Com\Implementation\Com.c	 15887  
; ..\component\Com\Implementation\Com.c	 15888  #if (COM_TRIGGER_IPDU_SEND_WITH_META_DATA_API == STD_ON)
; ..\component\Com\Implementation\Com.c	 15889  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15890    Com_TriggerIPDUSendWithMetaData
; ..\component\Com\Implementation\Com.c	 15891  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15892  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15893   *
; ..\component\Com\Implementation\Com.c	 15894   *
; ..\component\Com\Implementation\Com.c	 15895   *
; ..\component\Com\Implementation\Com.c	 15896   *
; ..\component\Com\Implementation\Com.c	 15897  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15898  FUNC(void, COM_CODE) Com_TriggerIPDUSendWithMetaData(PduIdType PduId, P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) MetaData)
; ..\component\Com\Implementation\Com.c	 15899  {
; ..\component\Com\Implementation\Com.c	 15900    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15901    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 15902  
; ..\component\Com\Implementation\Com.c	 15903    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15904    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 15905    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 15906    {
; ..\component\Com\Implementation\Com.c	 15907      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 15908    }
; ..\component\Com\Implementation\Com.c	 15909  # if (COM_DEV_ERROR_DETECT == STD_ON )
; ..\component\Com\Implementation\Com.c	 15910    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 15911  #  if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15912    else if(PduId >= Com_GetSizeOfTxPduInfo())
; ..\component\Com\Implementation\Com.c	 15913    {
; ..\component\Com\Implementation\Com.c	 15914      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15915    }
; ..\component\Com\Implementation\Com.c	 15916  #   if (COM_INVALIDHNDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15917    else if(Com_IsInvalidHndOfTxPduInfo(PduId))
; ..\component\Com\Implementation\Com.c	 15918    {
; ..\component\Com\Implementation\Com.c	 15919      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15920    }
; ..\component\Com\Implementation\Com.c	 15921  #   endif
; ..\component\Com\Implementation\Com.c	 15922  #   if (COM_TXBUFFERMETADATAUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15923    else if(!Com_IsTxBufferMetaDataUsedOfTxPduInfo(PduId))
; ..\component\Com\Implementation\Com.c	 15924    {
; ..\component\Com\Implementation\Com.c	 15925      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15926    }
; ..\component\Com\Implementation\Com.c	 15927  #   endif
; ..\component\Com\Implementation\Com.c	 15928  #  endif
; ..\component\Com\Implementation\Com.c	 15929    else if(MetaData == NULL_PTR)
; ..\component\Com\Implementation\Com.c	 15930    {
; ..\component\Com\Implementation\Com.c	 15931      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 15932    }
; ..\component\Com\Implementation\Com.c	 15933  # endif
; ..\component\Com\Implementation\Com.c	 15934    else
; ..\component\Com\Implementation\Com.c	 15935    {
; ..\component\Com\Implementation\Com.c	 15936      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15937  # if (COM_TXBUFFERMETADATAUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 15938      SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 15939  #  if (COM_TXTPINFOUSEDOFTXPDUINFO)
; ..\component\Com\Implementation\Com.c	 15940      if((!Com_IsTxTpInfoUsedOfTxPduInfo(PduId)) || (Com_GetTxTpConnectionState(Com_GetTxTpInfoIdxOfTxPduInfo(PduId)) == COM_READY_TXTPCONNECTIONSTATE))  /* COV_COM_TP_ONLY */
; ..\component\Com\Implementation\Com.c	 15941  #  endif
; ..\component\Com\Implementation\Com.c	 15942      {
; ..\component\Com\Implementation\Com.c	 15943        /* #30 Copy the passed meta data to the Tx ComIPdu buffer and trigger a deferred transmission */
; ..\component\Com\Implementation\Com.c	 15944        VStdLib_MemCpy(Com_GetAddrTxBuffer(Com_GetTxBufferMetaDataStartIdxOfTxPduInfo(PduId)), MetaData, Com_GetMetaDataLengthOfTxPduInfo(PduId));        /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_CSL03 */
; ..\component\Com\Implementation\Com.c	 15945        Com_TxModeHdlr_TriggerIpduSendOnceDeferred(PduId);
; ..\component\Com\Implementation\Com.c	 15946      }
; ..\component\Com\Implementation\Com.c	 15947      SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 15948  # else
; ..\component\Com\Implementation\Com.c	 15949      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 15950  # endif
; ..\component\Com\Implementation\Com.c	 15951    }
; ..\component\Com\Implementation\Com.c	 15952  
; ..\component\Com\Implementation\Com.c	 15953    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15954  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 15955    if(errorId != COM_E_NO_ERROR) /* COV_COM_NO_METADATA_CONFIGURED */ /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */
; ..\component\Com\Implementation\Com.c	 15956    {
; ..\component\Com\Implementation\Com.c	 15957      Com_LMgt_CallDetErrorContinue(COMServiceId_TriggerIPDUSendWithMetaData, errorId);
; ..\component\Com\Implementation\Com.c	 15958    }
; ..\component\Com\Implementation\Com.c	 15959  # endif
; ..\component\Com\Implementation\Com.c	 15960  
; ..\component\Com\Implementation\Com.c	 15961    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15962    COM_DUMMY_STATEMENT(PduId);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15963    COM_DUMMY_STATEMENT(MetaData);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 15964  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	 15965  #endif
; ..\component\Com\Implementation\Com.c	 15966  
; ..\component\Com\Implementation\Com.c	 15967  #if (COM_PDUGRPVECTOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15968  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15969    Com_ClearIpduGroupVector
; ..\component\Com\Implementation\Com.c	 15970  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15971  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15972   *
; ..\component\Com\Implementation\Com.c	 15973   *
; ..\component\Com\Implementation\Com.c	 15974   *
; ..\component\Com\Implementation\Com.c	 15975  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15976  FUNC(void, COM_CODE) Com_ClearIpduGroupVector(Com_IpduGroupVector ipduGroupVector)      /* PRQA S 1505 */ /* MD_MSR_Rule8.7 */
; Function Com_ClearIpduGroupVector
.L197:
Com_ClearIpduGroupVector:	.type	func

; ..\component\Com\Implementation\Com.c	 15977  {
; ..\component\Com\Implementation\Com.c	 15978    VStdMemSet(&ipduGroupVector[0], 0u, COM_LMGT_MAXIPDUGROUPVECTORBYTECNT);      /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_PTR_API_VALID_PTR */
	mov	d4,#0
	mov	d5,#1
	j	VStdLib_MemSet
.L652:
	
__Com_ClearIpduGroupVector_function_end:
	.size	Com_ClearIpduGroupVector,__Com_ClearIpduGroupVector_function_end-Com_ClearIpduGroupVector
.L298:
	; End of function
	
	.sdecl	'.text.Com.Com_SetIpduGroup',code,cluster('Com_SetIpduGroup')
	.sect	'.text.Com.Com_SetIpduGroup'
	.align	2
	
	.global	Com_SetIpduGroup

; ..\component\Com\Implementation\Com.c	 15979  }
; ..\component\Com\Implementation\Com.c	 15980  #endif
; ..\component\Com\Implementation\Com.c	 15981  
; ..\component\Com\Implementation\Com.c	 15982  #if (COM_PDUGRPVECTOR == STD_ON)
; ..\component\Com\Implementation\Com.c	 15983  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 15984    Com_SetIpduGroup
; ..\component\Com\Implementation\Com.c	 15985  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15986  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 15987   *
; ..\component\Com\Implementation\Com.c	 15988   *
; ..\component\Com\Implementation\Com.c	 15989   *
; ..\component\Com\Implementation\Com.c	 15990   *
; ..\component\Com\Implementation\Com.c	 15991   *
; ..\component\Com\Implementation\Com.c	 15992  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 15993  FUNC(void, COM_CODE) Com_SetIpduGroup(Com_IpduGroupVector ipduGroupVector, Com_IpduGroupIdType ipduGroupId, boolean bitval)
; Function Com_SetIpduGroup
.L199:
Com_SetIpduGroup:	.type	func

; ..\component\Com\Implementation\Com.c	 15994  {
; ..\component\Com\Implementation\Com.c	 15995    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 15996  
; ..\component\Com\Implementation\Com.c	 15997    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 15998  
; ..\component\Com\Implementation\Com.c	 15999  
; ..\component\Com\Implementation\Com.c	 16000    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16001    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 16002    if(!Com_IsInitialized())
	mov	d7,#0
	fcall	.cocofun_8
	jne	d15,#0,.L88
.L1104:

; ..\component\Com\Implementation\Com.c	 16003    {
; ..\component\Com\Implementation\Com.c	 16004      errorId = COM_E_UNINIT;
	mov	d7,#2
	j	.L89
.L88:

; ..\component\Com\Implementation\Com.c	 16005    }
; ..\component\Com\Implementation\Com.c	 16006  # if (COM_DEV_ERROR_DETECT == STD_ON )  /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 16007    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 16008    else if(ipduGroupId > COM_SUPPORTED_IPDU_GROUPS)
	jlt.u	d4,#3,.L90
.L1105:

; ..\component\Com\Implementation\Com.c	 16009    {
; ..\component\Com\Implementation\Com.c	 16010      errorId = COM_E_PARAM;
	mov	d7,#1
	j	.L91
.L90:

; ..\component\Com\Implementation\Com.c	 16011    }
; ..\component\Com\Implementation\Com.c	 16012  # endif
; ..\component\Com\Implementation\Com.c	 16013    else
; ..\component\Com\Implementation\Com.c	 16014    {
; ..\component\Com\Implementation\Com.c	 16015      /* #30 If the passed ComIPduGroup shall be disabled, disable the ComIPduGroup within the passed ComIPduGroup vector */
; ..\component\Com\Implementation\Com.c	 16016      if((bitval) == FALSE)
; ..\component\Com\Implementation\Com.c	 16017      {
; ..\component\Com\Implementation\Com.c	 16018        (ipduGroupVector)[(ipduGroupId) >> 3u] &= /* SBSW_COM_PTR_API_VALID_PTR */
; ..\component\Com\Implementation\Com.c	 16019          COM_CAST2UINT8(~(COM_CAST2UINT8(1u << ((ipduGroupId) & (Com_IpduGroupIdType) 7u))));    /* PRQA S 2985 */ /* MD_Com_2985_2986 */
	mov	d0,#1
	and	d15,d4,#7
.L1106:
	sh	d0,d0,d15
	ld.bu	d15,[a4]
.L1107:
	jne	d5,#0,.L92
.L1108:
	xor	d0,d0,#255
.L1109:
	and	d15,d0
	j	.L93
.L92:

; ..\component\Com\Implementation\Com.c	 16020      }
; ..\component\Com\Implementation\Com.c	 16021      /* #40 Otherwise enable the ComIPduGroup within the passed ComIPduGroup vector */
; ..\component\Com\Implementation\Com.c	 16022      else
; ..\component\Com\Implementation\Com.c	 16023      {
; ..\component\Com\Implementation\Com.c	 16024        (ipduGroupVector)[(ipduGroupId) >> 3u] |= /* SBSW_COM_PTR_API_VALID_PTR */
	or	d15,d0
.L93:
	st.b	[a4],d15
.L91:
.L89:

; ..\component\Com\Implementation\Com.c	 16025          COM_CAST2UINT8(1u << ((ipduGroupId) & (Com_IpduGroupIdType) 7u));       /* PRQA S 2985 */ /* MD_Com_2985_2986 */
; ..\component\Com\Implementation\Com.c	 16026      }
; ..\component\Com\Implementation\Com.c	 16027    }
; ..\component\Com\Implementation\Com.c	 16028  
; ..\component\Com\Implementation\Com.c	 16029    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16030  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 16031    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */
	jeq	d7,#0,.L94
.L1110:

; ..\component\Com\Implementation\Com.c	 16032    {
; ..\component\Com\Implementation\Com.c	 16033      Com_LMgt_CallDetErrorContinue(COMServiceId_SetIpduGroup, errorId);
	fcall	.cocofun_10
.L904:
	mov	d6,#29
	j	Det_ReportError
.L94:

; ..\component\Com\Implementation\Com.c	 16034    }
; ..\component\Com\Implementation\Com.c	 16035  # endif
; ..\component\Com\Implementation\Com.c	 16036  
; ..\component\Com\Implementation\Com.c	 16037    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16038  }
	ret
.L654:
	
__Com_SetIpduGroup_function_end:
	.size	Com_SetIpduGroup,__Com_SetIpduGroup_function_end-Com_SetIpduGroup
.L303:
	; End of function
	
	.sdecl	'.text.Com.Com_RxIndication',code,cluster('Com_RxIndication')
	.sect	'.text.Com.Com_RxIndication'
	.align	2
	
	.global	Com_RxIndication

; ..\component\Com\Implementation\Com.c	 16039  #endif
; ..\component\Com\Implementation\Com.c	 16040  
; ..\component\Com\Implementation\Com.c	 16041  
; ..\component\Com\Implementation\Com.c	 16042  
; ..\component\Com\Implementation\Com.c	 16043  
; ..\component\Com\Implementation\Com.c	 16044  
; ..\component\Com\Implementation\Com.c	 16045  #if (COM_COMMUNICATION_INTERFACE == STD_ON)
; ..\component\Com\Implementation\Com.c	 16046  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16047    Com_RxIndication
; ..\component\Com\Implementation\Com.c	 16048  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16049  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16050   *
; ..\component\Com\Implementation\Com.c	 16051   *
; ..\component\Com\Implementation\Com.c	 16052   *
; ..\component\Com\Implementation\Com.c	 16053   *
; ..\component\Com\Implementation\Com.c	 16054  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16055  FUNC(void, COM_CODE) Com_RxIndication(PduIdType RxPduId, P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr)
; Function Com_RxIndication
.L201:
Com_RxIndication:	.type	func

; ..\component\Com\Implementation\Com.c	 16056  {
; ..\component\Com\Implementation\Com.c	 16057    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16058    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
	fcall	.cocofun_6
.L906:

; ..\component\Com\Implementation\Com.c	 16059  
; ..\component\Com\Implementation\Com.c	 16060    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16061  
; ..\component\Com\Implementation\Com.c	 16062    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 16063    if(!Com_IsInitialized())
	jne	d15,#0,.L95
.L926:

; ..\component\Com\Implementation\Com.c	 16064    {
; ..\component\Com\Implementation\Com.c	 16065      errorId = COM_E_UNINIT;
	mov	d8,#2
	j	.L96
.L95:

; ..\component\Com\Implementation\Com.c	 16066    }
; ..\component\Com\Implementation\Com.c	 16067  # if (COM_DEV_ERROR_DETECT == STD_ON )  /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 16068    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 16069  #  if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16070    else if(RxPduId >= Com_GetSizeOfRxPduInfo())
	jeq	d4,#0,.L97
.L927:

; ..\component\Com\Implementation\Com.c	 16071    {
; ..\component\Com\Implementation\Com.c	 16072      errorId = COM_E_PARAM;
	mov	d8,#1
	j	.L98
.L97:

; ..\component\Com\Implementation\Com.c	 16073    }
; ..\component\Com\Implementation\Com.c	 16074  #   if(COM_INVALIDHNDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16075    else if(Com_IsInvalidHndOfRxPduInfo(RxPduId))
; ..\component\Com\Implementation\Com.c	 16076    {
; ..\component\Com\Implementation\Com.c	 16077      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16078    }
; ..\component\Com\Implementation\Com.c	 16079  #   endif
; ..\component\Com\Implementation\Com.c	 16080  #  endif
; ..\component\Com\Implementation\Com.c	 16081    else if(PduInfoPtr == NULL_PTR)
	jz.a	a4,.L99
.L928:

; ..\component\Com\Implementation\Com.c	 16082    {
; ..\component\Com\Implementation\Com.c	 16083      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16084    }
; ..\component\Com\Implementation\Com.c	 16085  #  if (COM_METADATALENGTHOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16086    else if((Com_GetMetaDataLengthOfRxPduInfo(RxPduId) > 0u) && (PduInfoPtr->SduDataPtr == NULL_PTR))
; ..\component\Com\Implementation\Com.c	 16087    {
; ..\component\Com\Implementation\Com.c	 16088      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16089    }
; ..\component\Com\Implementation\Com.c	 16090    else if((Com_GetMetaDataLengthOfRxPduInfo(RxPduId) > 0u) && (PduInfoPtr->SduLength < Com_GetMetaDataLengthOfRxPduInfo(RxPduId)))
; ..\component\Com\Implementation\Com.c	 16091    {
; ..\component\Com\Implementation\Com.c	 16092      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16093    }
; ..\component\Com\Implementation\Com.c	 16094    else if(!(Com_GetMetaDataLengthOfRxPduInfo(RxPduId) > 0u) && (PduInfoPtr->SduDataPtr == NULL_PTR) && (PduInfoPtr->SduLength > 0u))
; ..\component\Com\Implementation\Com.c	 16095    {
; ..\component\Com\Implementation\Com.c	 16096      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16097    }
; ..\component\Com\Implementation\Com.c	 16098  #  else
; ..\component\Com\Implementation\Com.c	 16099    else if((PduInfoPtr->SduDataPtr == NULL_PTR) && (PduInfoPtr->SduLength > 0u))
	ld.a	a15,[a4]
.L929:
	jnz.a	a15,.L100
.L930:
	ld.bu	d15,[a4]4
.L931:
	jeq	d15,#0,.L101
.L99:

; ..\component\Com\Implementation\Com.c	 16100    {
; ..\component\Com\Implementation\Com.c	 16101      errorId = COM_E_PARAM_POINTER;
	mov	d8,#3
	j	.L102
.L101:
.L100:
	movh.a	a2,#@his(Com_RxPduGrpActive)
	ld.bu	d15,[a2]@los(Com_RxPduGrpActive)
.L932:

; ..\component\Com\Implementation\Com.c	  8650    if(Com_IsRxPduGrpActive(RxPduId))     /* COV_COM_NO_IPDUGROUPS */ /* PRQA S 2842 */ /* MD_Com_2842 */ /* \trace SPEC-2736845 */ /* \trace SPEC-2736846 */      (inlined)
	jeq	d15,#0,.L103
.L417:
	mov.d	d10,a15
.L933:
	ld.bu	d15,[a4]4
.L421:
	movh.a	a15,#@his(Com_RxPduInfo)
.L422:
	insert	d11,d11,d15,#0,#8
	ld.bu	d15,[a15]@los(Com_RxPduInfo)
.L429:

; ..\component\Com\Implementation\Com.c	  9785    if(Com_IsHandleRxPduDeferredUsedOfRxPduInfo(comRxPduInfoIdx)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */      (inlined)
	jeq	d15,#0,.L104
.L934:
	call	SuspendAllInterrupts
.L907:
	mov	d15,d10
	mov.a	a5,d15
.L935:

; ..\component\Com\Implementation\Com.c	  9794          if(PduInfoPtr->SduDataPtr != NULL_PTR)      (inlined)
	jz.a	a5,.L105
.L431:
	extr.u	d15,d11,#0,#8
	movh.a	a4,#@his(Com_RxDefPduBuffer)
	lea	a4,[a4]@los(Com_RxDefPduBuffer)
.L936:
	min.u	d4,d15,#64
	call	VStdLib_MemCpy

; ..\component\Com\Implementation\Com.c	  9794          if(PduInfoPtr->SduDataPtr != NULL_PTR)      (inlined)
.L105:
	extr.u	d15,d11,#0,#8
	movh.a	a15,#@his(Com_HandleRxPduDeferred)
	add	d15,#1
	st.b	[a15]@los(Com_HandleRxPduDeferred),d15
.L937:
	call	ResumeAllInterrupts

; ..\component\Com\Implementation\Com.c	  9785    if(Com_IsHandleRxPduDeferredUsedOfRxPduInfo(comRxPduInfoIdx)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */      (inlined)
.L104:

; ..\component\Com\Implementation\Com.c	  8650    if(Com_IsRxPduGrpActive(RxPduId))     /* COV_COM_NO_IPDUGROUPS */ /* PRQA S 2842 */ /* MD_Com_2842 */ /* \trace SPEC-2736845 */ /* \trace SPEC-2736846 */      (inlined)
.L103:

; ..\component\Com\Implementation\Com.c	 16102    }
; ..\component\Com\Implementation\Com.c	 16103  #  endif
; ..\component\Com\Implementation\Com.c	 16104  # endif
; ..\component\Com\Implementation\Com.c	 16105    else
.L102:
.L98:
.L96:

; ..\component\Com\Implementation\Com.c	 16106    {
; ..\component\Com\Implementation\Com.c	 16107  # if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16108      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16109      /* #30 Do Rx Indication processing */
; ..\component\Com\Implementation\Com.c	 16110      (void) Com_RxIndication_Processing(RxPduId, PduInfoPtr);    /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 16111  # else
; ..\component\Com\Implementation\Com.c	 16112      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16113  # endif
; ..\component\Com\Implementation\Com.c	 16114    }
; ..\component\Com\Implementation\Com.c	 16115  
; ..\component\Com\Implementation\Com.c	 16116    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16117  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 16118    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
	jeq	d8,#0,.L106
.L938:

; ..\component\Com\Implementation\Com.c	 16119    {
; ..\component\Com\Implementation\Com.c	 16120      Com_LMgt_CallDetErrorContinue(COMServiceId_RxIndication, errorId);
	fcall	.cocofun_10
	mov	d6,#66
	mov	d7,d8
.L908:
	j	Det_ReportError
.L106:

; ..\component\Com\Implementation\Com.c	 16121    }
; ..\component\Com\Implementation\Com.c	 16122  # endif
; ..\component\Com\Implementation\Com.c	 16123  
; ..\component\Com\Implementation\Com.c	 16124    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16125    COM_DUMMY_STATEMENT(RxPduId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16126    COM_DUMMY_STATEMENT_CONST(PduInfoPtr);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16127  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
	ret
.L404:
	
__Com_RxIndication_function_end:
	.size	Com_RxIndication,__Com_RxIndication_function_end-Com_RxIndication
.L228:
	; End of function
	
	.sdecl	'.text.Com.Com_ReceiveSignal',code,cluster('Com_ReceiveSignal')
	.sect	'.text.Com.Com_ReceiveSignal'
	.align	2
	
	.global	Com_ReceiveSignal

; ..\component\Com\Implementation\Com.c	 16128  #endif
; ..\component\Com\Implementation\Com.c	 16129  
; ..\component\Com\Implementation\Com.c	 16130  #if (COM_TRANSPORT_PROTOCOL == STD_ON)
; ..\component\Com\Implementation\Com.c	 16131  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16132    Com_CopyRxData
; ..\component\Com\Implementation\Com.c	 16133  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16134  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16135   *
; ..\component\Com\Implementation\Com.c	 16136   *
; ..\component\Com\Implementation\Com.c	 16137   *
; ..\component\Com\Implementation\Com.c	 16138   *
; ..\component\Com\Implementation\Com.c	 16139   *
; ..\component\Com\Implementation\Com.c	 16140   *
; ..\component\Com\Implementation\Com.c	 16141   *
; ..\component\Com\Implementation\Com.c	 16142   *
; ..\component\Com\Implementation\Com.c	 16143   *
; ..\component\Com\Implementation\Com.c	 16144   *
; ..\component\Com\Implementation\Com.c	 16145  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16146  FUNC(BufReq_ReturnType, COM_CODE) Com_CopyRxData(PduIdType PduId, CONSTP2VAR(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPointer, P2VAR(PduLengthType, AUTOMATIC, COM_APPL_VAR) RxBufferSizePtr)      /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	 16147  {
; ..\component\Com\Implementation\Com.c	 16148    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16149    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16150    BufReq_ReturnType bufReq_status = BUFREQ_E_NOT_OK;    /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16151  
; ..\component\Com\Implementation\Com.c	 16152    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16153    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 16154    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 16155    {
; ..\component\Com\Implementation\Com.c	 16156      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 16157    }
; ..\component\Com\Implementation\Com.c	 16158  # if (COM_DEV_ERROR_DETECT == STD_ON )
; ..\component\Com\Implementation\Com.c	 16159    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 16160  #  if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16161    else if(PduId >= Com_GetSizeOfRxPduInfo())
; ..\component\Com\Implementation\Com.c	 16162    {
; ..\component\Com\Implementation\Com.c	 16163      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16164    }
; ..\component\Com\Implementation\Com.c	 16165  #   if (COM_INVALIDHNDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16166    else if(Com_IsInvalidHndOfRxPduInfo(PduId))
; ..\component\Com\Implementation\Com.c	 16167    {
; ..\component\Com\Implementation\Com.c	 16168      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16169    }
; ..\component\Com\Implementation\Com.c	 16170  #   endif
; ..\component\Com\Implementation\Com.c	 16171  #   if (COM_EXISTS_NORMAL_TYPEOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16172    else if(Com_GetTypeOfRxPduInfo(PduId) == COM_NORMAL_TYPEOFRXPDUINFO)  /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 16173    {
; ..\component\Com\Implementation\Com.c	 16174      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16175    }
; ..\component\Com\Implementation\Com.c	 16176  #   endif
; ..\component\Com\Implementation\Com.c	 16177  #  endif
; ..\component\Com\Implementation\Com.c	 16178    else if(PduInfoPointer == NULL_PTR)
; ..\component\Com\Implementation\Com.c	 16179    {
; ..\component\Com\Implementation\Com.c	 16180      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16181    }
; ..\component\Com\Implementation\Com.c	 16182    else if((PduInfoPointer->SduDataPtr == NULL_PTR) && (PduInfoPointer->SduLength > 0u))
; ..\component\Com\Implementation\Com.c	 16183    {
; ..\component\Com\Implementation\Com.c	 16184      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16185    }
; ..\component\Com\Implementation\Com.c	 16186    else if(RxBufferSizePtr == NULL_PTR)
; ..\component\Com\Implementation\Com.c	 16187    {
; ..\component\Com\Implementation\Com.c	 16188      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16189    }
; ..\component\Com\Implementation\Com.c	 16190  # endif
; ..\component\Com\Implementation\Com.c	 16191    else
; ..\component\Com\Implementation\Com.c	 16192    {
; ..\component\Com\Implementation\Com.c	 16193  # if (COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16194      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16195      bufReq_status = Com_CopyRxData_Processing(PduId, PduInfoPointer, RxBufferSizePtr);  /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 16196  # else
; ..\component\Com\Implementation\Com.c	 16197      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16198  # endif
; ..\component\Com\Implementation\Com.c	 16199    }
; ..\component\Com\Implementation\Com.c	 16200  
; ..\component\Com\Implementation\Com.c	 16201    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16202  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 16203    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 16204    {
; ..\component\Com\Implementation\Com.c	 16205      Com_LMgt_CallDetErrorContinue(COMServiceId_CopyRxData, errorId);
; ..\component\Com\Implementation\Com.c	 16206    }
; ..\component\Com\Implementation\Com.c	 16207  # endif
; ..\component\Com\Implementation\Com.c	 16208  
; ..\component\Com\Implementation\Com.c	 16209    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16210    COM_DUMMY_STATEMENT(PduId);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16211    COM_DUMMY_STATEMENT(RxBufferSizePtr); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16212    COM_DUMMY_STATEMENT_CONST(PduInfoPointer);    /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16213  
; ..\component\Com\Implementation\Com.c	 16214    return bufReq_status;
; ..\component\Com\Implementation\Com.c	 16215  }       /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	 16216  #endif
; ..\component\Com\Implementation\Com.c	 16217  
; ..\component\Com\Implementation\Com.c	 16218  
; ..\component\Com\Implementation\Com.c	 16219  #if (COM_TRANSPORT_PROTOCOL == STD_ON)
; ..\component\Com\Implementation\Com.c	 16220  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16221    Com_StartOfReception
; ..\component\Com\Implementation\Com.c	 16222  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16223  /*!  * Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16224   *
; ..\component\Com\Implementation\Com.c	 16225   *
; ..\component\Com\Implementation\Com.c	 16226   *
; ..\component\Com\Implementation\Com.c	 16227   *
; ..\component\Com\Implementation\Com.c	 16228   *
; ..\component\Com\Implementation\Com.c	 16229   *
; ..\component\Com\Implementation\Com.c	 16230   *
; ..\component\Com\Implementation\Com.c	 16231   *
; ..\component\Com\Implementation\Com.c	 16232   *
; ..\component\Com\Implementation\Com.c	 16233   *
; ..\component\Com\Implementation\Com.c	 16234  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16235  FUNC(BufReq_ReturnType, COM_CODE) Com_StartOfReception(PduIdType ComRxPduId, P2VAR(PduInfoType, AUTOMATIC, COM_APPL_VAR) TpSduInfoPtr, PduLengthType TpSduLength, P2VAR(PduLengthType, AUTOMATIC, COM_APPL_VAR) RxBufferSizePtr)        /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	 16236  {
; ..\component\Com\Implementation\Com.c	 16237    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16238    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16239    BufReq_ReturnType bufReq_status = BUFREQ_E_NOT_OK;    /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16240  
; ..\component\Com\Implementation\Com.c	 16241    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16242  
; ..\component\Com\Implementation\Com.c	 16243    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 16244    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 16245    {
; ..\component\Com\Implementation\Com.c	 16246      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 16247    }
; ..\component\Com\Implementation\Com.c	 16248  # if (COM_DEV_ERROR_DETECT == STD_ON )
; ..\component\Com\Implementation\Com.c	 16249    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 16250  #  if (COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16251    else if(ComRxPduId >= Com_GetSizeOfRxPduInfo())
; ..\component\Com\Implementation\Com.c	 16252    {
; ..\component\Com\Implementation\Com.c	 16253      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16254    }
; ..\component\Com\Implementation\Com.c	 16255  #   if (COM_INVALIDHNDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16256    else if(Com_IsInvalidHndOfRxPduInfo(ComRxPduId))
; ..\component\Com\Implementation\Com.c	 16257    {
; ..\component\Com\Implementation\Com.c	 16258      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16259    }
; ..\component\Com\Implementation\Com.c	 16260  #   endif
; ..\component\Com\Implementation\Com.c	 16261  #   if (COM_EXISTS_NORMAL_TYPEOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16262    else if(Com_GetTypeOfRxPduInfo(ComRxPduId) == COM_NORMAL_TYPEOFRXPDUINFO)     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 16263    {
; ..\component\Com\Implementation\Com.c	 16264      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16265    }
; ..\component\Com\Implementation\Com.c	 16266  #   endif
; ..\component\Com\Implementation\Com.c	 16267  #  endif
; ..\component\Com\Implementation\Com.c	 16268  #  if (COM_RXTPBUFFERMETADATAUSEDOFRXTPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16269    else if(Com_IsRxTpBufferMetaDataUsedOfRxTpInfo(Com_GetRxTpInfoIdxOfRxPduInfo(ComRxPduId)) && (TpSduInfoPtr == NULL_PTR))
; ..\component\Com\Implementation\Com.c	 16270    {
; ..\component\Com\Implementation\Com.c	 16271      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16272    }
; ..\component\Com\Implementation\Com.c	 16273    else if(Com_IsRxTpBufferMetaDataUsedOfRxTpInfo(Com_GetRxTpInfoIdxOfRxPduInfo(ComRxPduId)) && (TpSduInfoPtr->SduDataPtr == NULL_PTR))  /* PRQA S 2812 */ /* MD_Com_2812 */
; ..\component\Com\Implementation\Com.c	 16274    {
; ..\component\Com\Implementation\Com.c	 16275      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16276    }
; ..\component\Com\Implementation\Com.c	 16277    else if(Com_IsRxTpBufferMetaDataUsedOfRxTpInfo(Com_GetRxTpInfoIdxOfRxPduInfo(ComRxPduId)) && (TpSduInfoPtr->SduLength < Com_GetRxTpBufferMetaDataLengthOfRxTpInfo(Com_GetRxTpInfoIdxOfRxPduInfo(ComRxPduId))))        /* PRQA S 2812 */ /* MD_Com_2812 */
; ..\component\Com\Implementation\Com.c	 16278    {
; ..\component\Com\Implementation\Com.c	 16279      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16280    }
; ..\component\Com\Implementation\Com.c	 16281  #  endif
; ..\component\Com\Implementation\Com.c	 16282    else if(RxBufferSizePtr == NULL_PTR)
; ..\component\Com\Implementation\Com.c	 16283    {
; ..\component\Com\Implementation\Com.c	 16284      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16285    }
; ..\component\Com\Implementation\Com.c	 16286  # endif
; ..\component\Com\Implementation\Com.c	 16287    else
; ..\component\Com\Implementation\Com.c	 16288    {
; ..\component\Com\Implementation\Com.c	 16289  # if (COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16290      if(Com_IsRxPduGrpActive(ComRxPduId))        /* \trace SPEC-2736846 */
; ..\component\Com\Implementation\Com.c	 16291      {
; ..\component\Com\Implementation\Com.c	 16292        /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16293        Com_RxTpInfoIdxOfRxPduInfoType rxTpPduInfoIdx = Com_GetRxTpInfoIdxOfRxPduInfo(ComRxPduId);
; ..\component\Com\Implementation\Com.c	 16294  
; ..\component\Com\Implementation\Com.c	 16295        switch (Com_GetRxTpConnectionState(rxTpPduInfoIdx))
; ..\component\Com\Implementation\Com.c	 16296        {
; ..\component\Com\Implementation\Com.c	 16297            /* #30 If Com is ready for new TP connection */
; ..\component\Com\Implementation\Com.c	 16298          case COM_READY_RXTPCONNECTIONSTATE:
; ..\component\Com\Implementation\Com.c	 16299          {
; ..\component\Com\Implementation\Com.c	 16300            PduLengthType requiredBytes = TpSduLength;
; ..\component\Com\Implementation\Com.c	 16301            /* #40 If the passed TpSduLength + MetaDataLength fits into the current available buffer */
; ..\component\Com\Implementation\Com.c	 16302  #  if (COM_RXTPBUFFERMETADATAUSEDOFRXTPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16303            if(Com_IsRxTpBufferMetaDataUsedOfRxTpInfo(rxTpPduInfoIdx))
; ..\component\Com\Implementation\Com.c	 16304            {
; ..\component\Com\Implementation\Com.c	 16305              requiredBytes += (Com_MetaDataLengthOfRxPduInfoType) Com_GetRxTpBufferMetaDataLengthOfRxTpInfo(rxTpPduInfoIdx);
; ..\component\Com\Implementation\Com.c	 16306            }
; ..\component\Com\Implementation\Com.c	 16307  #  endif
; ..\component\Com\Implementation\Com.c	 16308            if(requiredBytes <= Com_GetBufferSizeOfRxTpInfo(rxTpPduInfoIdx))
; ..\component\Com\Implementation\Com.c	 16309            {
; ..\component\Com\Implementation\Com.c	 16310              /* #50 Store the passed TpSduLength, set the passed RxBufferSizePtr to the available buffer size and set the Rx Tp ComIPdu state to RECEPTION_STARTED */
; ..\component\Com\Implementation\Com.c	 16311              Com_SetRxTpSduLength(rxTpPduInfoIdx, TpSduLength);  /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 16312              *RxBufferSizePtr = Com_GetBufferSizeOfRxTpInfo(rxTpPduInfoIdx);     /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 16313  
; ..\component\Com\Implementation\Com.c	 16314              if(TpSduLength > 0u)
; ..\component\Com\Implementation\Com.c	 16315              {
; ..\component\Com\Implementation\Com.c	 16316                Com_SetRxTpConnectionState(rxTpPduInfoIdx, COM_RECEPTION_STARTED_RXTPCONNECTIONSTATE);    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 16317              }
; ..\component\Com\Implementation\Com.c	 16318              else
; ..\component\Com\Implementation\Com.c	 16319              {
; ..\component\Com\Implementation\Com.c	 16320                Com_SetRxTpConnectionState(rxTpPduInfoIdx, COM_WAITING_FOR_INDICATION_RXTPCONNECTIONSTATE);       /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 16321              }
; ..\component\Com\Implementation\Com.c	 16322  
; ..\component\Com\Implementation\Com.c	 16323  #  if (COM_RXTPBUFFERMETADATAUSEDOFRXTPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16324              /* #60 If meta data is configured, copy the passed meta data to the buffer and set the passed RxBufferSizePtr value to the remaining receive buffer size */
; ..\component\Com\Implementation\Com.c	 16325              if(Com_IsRxTpBufferMetaDataUsedOfRxTpInfo(rxTpPduInfoIdx))
; ..\component\Com\Implementation\Com.c	 16326              {
; ..\component\Com\Implementation\Com.c	 16327                P2CONST(uint8, AUTOMATIC, COM_VAR_NOINIT) metaDataSourcePtr = &(TpSduInfoPtr->SduDataPtr[TpSduInfoPtr->SduLength - Com_GetRxTpBufferMetaDataLengthOfRxTpInfo(rxTpPduInfoIdx)]);
; ..\component\Com\Implementation\Com.c	 16328                VStdMemCpyRamToRam(Com_GetAddrRxTpBuffer(Com_GetRxTpBufferMetaDataStartIdxOfRxTpInfo(rxTpPduInfoIdx)), metaDataSourcePtr, Com_GetRxTpBufferMetaDataLengthOfRxTpInfo(rxTpPduInfoIdx));     /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_WRITEACCESS_STACKPTR_CONFIG_LENGTH */
; ..\component\Com\Implementation\Com.c	 16329  
; ..\component\Com\Implementation\Com.c	 16330                *RxBufferSizePtr = Com_GetBufferSizeOfRxTpInfo(rxTpPduInfoIdx) - Com_GetMetaDataLengthOfRxPduInfo(ComRxPduId);    /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 16331              }
; ..\component\Com\Implementation\Com.c	 16332  #  endif
; ..\component\Com\Implementation\Com.c	 16333              bufReq_status = BUFREQ_OK;
; ..\component\Com\Implementation\Com.c	 16334            }
; ..\component\Com\Implementation\Com.c	 16335            /* #70 Otherwise return BUFREQ_E_OVFL. The bufferSizePtr remains unchanged */
; ..\component\Com\Implementation\Com.c	 16336            else
; ..\component\Com\Implementation\Com.c	 16337            {
; ..\component\Com\Implementation\Com.c	 16338              *RxBufferSizePtr = Com_GetBufferSizeOfRxTpInfo(rxTpPduInfoIdx);     /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 16339              bufReq_status = BUFREQ_E_OVFL;
; ..\component\Com\Implementation\Com.c	 16340            }
; ..\component\Com\Implementation\Com.c	 16341            break;
; ..\component\Com\Implementation\Com.c	 16342          }
; ..\component\Com\Implementation\Com.c	 16343            /* #80 Else if Com is waiting for deferred processing, reject connection. */
; ..\component\Com\Implementation\Com.c	 16344  #  if (COM_EXISTS_DEFERRED_SIGNALPROCESSINGOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16345          case COM_BUFFER_LOCKED_RXTPCONNECTIONSTATE:
; ..\component\Com\Implementation\Com.c	 16346          {
; ..\component\Com\Implementation\Com.c	 16347            /* Buffer stays locked */
; ..\component\Com\Implementation\Com.c	 16348            bufReq_status = BUFREQ_E_NOT_OK;      /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16349            break;
; ..\component\Com\Implementation\Com.c	 16350          }
; ..\component\Com\Implementation\Com.c	 16351  #  endif
; ..\component\Com\Implementation\Com.c	 16352            /* #90 Else reset TP connection. */
; ..\component\Com\Implementation\Com.c	 16353          default:
; ..\component\Com\Implementation\Com.c	 16354          {
; ..\component\Com\Implementation\Com.c	 16355            SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	 16356            Com_ResetRxTpConnection(ComRxPduId);
; ..\component\Com\Implementation\Com.c	 16357            SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	 16358            break;
; ..\component\Com\Implementation\Com.c	 16359          }
; ..\component\Com\Implementation\Com.c	 16360        }
; ..\component\Com\Implementation\Com.c	 16361      }
; ..\component\Com\Implementation\Com.c	 16362  # else
; ..\component\Com\Implementation\Com.c	 16363      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16364  # endif
; ..\component\Com\Implementation\Com.c	 16365    }
; ..\component\Com\Implementation\Com.c	 16366  
; ..\component\Com\Implementation\Com.c	 16367    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16368  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 16369    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 16370    {
; ..\component\Com\Implementation\Com.c	 16371      Com_LMgt_CallDetErrorContinue(COMServiceId_StartOfReception, errorId);
; ..\component\Com\Implementation\Com.c	 16372    }
; ..\component\Com\Implementation\Com.c	 16373  # endif
; ..\component\Com\Implementation\Com.c	 16374  
; ..\component\Com\Implementation\Com.c	 16375    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16376    COM_DUMMY_STATEMENT(ComRxPduId);      /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16377    COM_DUMMY_STATEMENT(TpSduInfoPtr);    /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16378    COM_DUMMY_STATEMENT(TpSduLength);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16379    COM_DUMMY_STATEMENT(RxBufferSizePtr); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16380  
; ..\component\Com\Implementation\Com.c	 16381    return bufReq_status;
; ..\component\Com\Implementation\Com.c	 16382  }       /* PRQA S 6080, 6030 */ /* MD_MSR_STMIF, MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	 16383  #endif
; ..\component\Com\Implementation\Com.c	 16384  
; ..\component\Com\Implementation\Com.c	 16385  #if (COM_TRANSPORT_PROTOCOL == STD_ON)
; ..\component\Com\Implementation\Com.c	 16386  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16387    Com_TpRxIndication
; ..\component\Com\Implementation\Com.c	 16388  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16389  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16390   *
; ..\component\Com\Implementation\Com.c	 16391   *
; ..\component\Com\Implementation\Com.c	 16392   *
; ..\component\Com\Implementation\Com.c	 16393   *
; ..\component\Com\Implementation\Com.c	 16394  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16395  FUNC(void, COM_CODE) Com_TpRxIndication(PduIdType PduId, Std_ReturnType Result)
; ..\component\Com\Implementation\Com.c	 16396  {
; ..\component\Com\Implementation\Com.c	 16397    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16398    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16399  
; ..\component\Com\Implementation\Com.c	 16400    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16401    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 16402    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 16403    {
; ..\component\Com\Implementation\Com.c	 16404      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 16405    }
; ..\component\Com\Implementation\Com.c	 16406  # if (COM_DEV_ERROR_DETECT == STD_ON )
; ..\component\Com\Implementation\Com.c	 16407    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 16408  #  if(COM_RXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16409    else if(PduId >= Com_GetSizeOfRxPduInfo())
; ..\component\Com\Implementation\Com.c	 16410    {
; ..\component\Com\Implementation\Com.c	 16411      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16412    }
; ..\component\Com\Implementation\Com.c	 16413  #   if (COM_INVALIDHNDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16414    else if(Com_IsInvalidHndOfRxPduInfo(PduId))
; ..\component\Com\Implementation\Com.c	 16415    {
; ..\component\Com\Implementation\Com.c	 16416      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16417    }
; ..\component\Com\Implementation\Com.c	 16418  #   endif
; ..\component\Com\Implementation\Com.c	 16419  #   if (COM_EXISTS_NORMAL_TYPEOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16420    else if(Com_GetTypeOfRxPduInfo(PduId) == COM_NORMAL_TYPEOFRXPDUINFO)  /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 16421    {
; ..\component\Com\Implementation\Com.c	 16422      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16423    }
; ..\component\Com\Implementation\Com.c	 16424  #   endif
; ..\component\Com\Implementation\Com.c	 16425  #  endif
; ..\component\Com\Implementation\Com.c	 16426  # endif
; ..\component\Com\Implementation\Com.c	 16427    else
; ..\component\Com\Implementation\Com.c	 16428    {
; ..\component\Com\Implementation\Com.c	 16429      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16430  # if(COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16431      /* #30 Process the passed Rx Tp ComIPdu */
; ..\component\Com\Implementation\Com.c	 16432      Com_TpRxIndication_Processing(PduId, Result);
; ..\component\Com\Implementation\Com.c	 16433  # else
; ..\component\Com\Implementation\Com.c	 16434      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16435  # endif
; ..\component\Com\Implementation\Com.c	 16436    }
; ..\component\Com\Implementation\Com.c	 16437  
; ..\component\Com\Implementation\Com.c	 16438    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16439  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 16440    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 16441    {
; ..\component\Com\Implementation\Com.c	 16442      Com_LMgt_CallDetErrorContinue(COMServiceId_TpRxIndication, errorId);
; ..\component\Com\Implementation\Com.c	 16443    }
; ..\component\Com\Implementation\Com.c	 16444  # endif
; ..\component\Com\Implementation\Com.c	 16445  
; ..\component\Com\Implementation\Com.c	 16446    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16447    COM_DUMMY_STATEMENT(PduId);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16448    COM_DUMMY_STATEMENT(Result);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16449  }
; ..\component\Com\Implementation\Com.c	 16450  #endif
; ..\component\Com\Implementation\Com.c	 16451  
; ..\component\Com\Implementation\Com.c	 16452  #if (COM_RECEIVE_SIGNAL_MACRO_API == STD_OFF)   /* COV_COM_VAR_ELISA_STD_OFF_TX */
; ..\component\Com\Implementation\Com.c	 16453  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16454    Com_ReceiveSignal
; ..\component\Com\Implementation\Com.c	 16455  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16456  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16457   *
; ..\component\Com\Implementation\Com.c	 16458   *
; ..\component\Com\Implementation\Com.c	 16459   *
; ..\component\Com\Implementation\Com.c	 16460   *
; ..\component\Com\Implementation\Com.c	 16461   *
; ..\component\Com\Implementation\Com.c	 16462  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16463  FUNC(uint8, COM_CODE) Com_ReceiveSignal(Com_SignalIdType SignalId, P2VAR(void, AUTOMATIC, COM_APPL_VAR) SignalDataPtr)  /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; Function Com_ReceiveSignal
.L203:
Com_ReceiveSignal:	.type	func

; ..\component\Com\Implementation\Com.c	 16464  {
; ..\component\Com\Implementation\Com.c	 16465    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16466    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
	mov	d7,#0
.L909:

; ..\component\Com\Implementation\Com.c	 16467    uint8 retVal = COM_SERVICE_NOT_AVAILABLE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16468  
; ..\component\Com\Implementation\Com.c	 16469    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16470    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 16471    if(!Com_IsInitialized())
	mov	d8,#128
	fcall	.cocofun_8
	jne	d15,#0,.L107
.L1115:

; ..\component\Com\Implementation\Com.c	 16472    {
; ..\component\Com\Implementation\Com.c	 16473      errorId = COM_E_UNINIT;
	mov	d7,#2
	j	.L108
.L107:

; ..\component\Com\Implementation\Com.c	 16474    }
; ..\component\Com\Implementation\Com.c	 16475  # if (COM_DEV_ERROR_DETECT == STD_ON)   /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 16476    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 16477  #  if (COM_RXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16478    else if(SignalId >= Com_GetSizeOfRxAccessInfo())
	jlt.u	d4,#2,.L109
.L1116:

; ..\component\Com\Implementation\Com.c	 16479    {
; ..\component\Com\Implementation\Com.c	 16480      errorId = COM_E_PARAM;
	mov	d7,#1
	j	.L110
.L109:

; ..\component\Com\Implementation\Com.c	 16481    }
; ..\component\Com\Implementation\Com.c	 16482  #   if (COM_INVALIDHNDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16483    else if(Com_IsInvalidHndOfRxAccessInfo(SignalId))
; ..\component\Com\Implementation\Com.c	 16484    {
; ..\component\Com\Implementation\Com.c	 16485      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16486    }
; ..\component\Com\Implementation\Com.c	 16487  #   endif
; ..\component\Com\Implementation\Com.c	 16488  #  endif
; ..\component\Com\Implementation\Com.c	 16489    else if(SignalDataPtr == NULL_PTR)
	jnz.a	a4,.L111
.L1117:

; ..\component\Com\Implementation\Com.c	 16490    {
; ..\component\Com\Implementation\Com.c	 16491      errorId = COM_E_PARAM_POINTER;
	mov	d7,#3
	j	.L112
.L111:
	fcall	.cocofun_3
.L910:
	addsc.a	a15,a15,d4,#2
	ld.bu	d15,[a15]2
.L1118:

; ..\component\Com\Implementation\Com.c	  8908    switch (Com_GetApplTypeOfRxAccessInfo(idxRxAccessInfo))      (inlined)
	jne	d15,#1,.L113
.L1119:
	movh.a	a2,#@his(Com_RxSigBufferSInt8)
	lea	a2,[a2]@los(Com_RxSigBufferSInt8)
	addsc.a	a2,a2,d4,#0
	ld.bu	d15,[a2]
.L1120:
	st.b	[a4],d15

; ..\component\Com\Implementation\Com.c	  9001      default:   /* COV_COM_MISRA */      (inlined)
.L113:

; ..\component\Com\Implementation\Com.c	 16492    }
; ..\component\Com\Implementation\Com.c	 16493  # endif
; ..\component\Com\Implementation\Com.c	 16494    else
; ..\component\Com\Implementation\Com.c	 16495    {
; ..\component\Com\Implementation\Com.c	 16496  # if (COM_RXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16497      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16498  #  if ((COM_BUFFERUSEDOFRXACCESSINFO == STD_ON) || (COM_RXSIGBUFFERARRAYBASEDBUFFERUSEDOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 16499      /* #30 Copy the stored ComSignal value to the passed SignalDataPtr */
; ..\component\Com\Implementation\Com.c	 16500      Com_ReceiveSignal_GetRxSigBuffer(SignalId, SignalDataPtr);  /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 16501  #  endif
; ..\component\Com\Implementation\Com.c	 16502  
; ..\component\Com\Implementation\Com.c	 16503      /* #40 If the related ComIPduGroup is active, E_OK will be returned otherwise COM_SERVICE_NOT_AVAILABLE will be returned */
; ..\component\Com\Implementation\Com.c	 16504      if(Com_IsRxPduGrpActive(Com_GetRxPduInfoIdxOfRxAccessInfo(SignalId)))       /* COV_COM_NO_IPDUGROUPS */
	ld.bu	d15,[a15]3
	movh.a	a15,#@his(Com_RxPduGrpActive)
	lea	a15,[a15]@los(Com_RxPduGrpActive)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
	eq	d15,d15,#0
	sha	d8,d15,#7
.L112:
.L110:
.L108:

; ..\component\Com\Implementation\Com.c	 16505      {
; ..\component\Com\Implementation\Com.c	 16506        retVal = E_OK;
; ..\component\Com\Implementation\Com.c	 16507      }
; ..\component\Com\Implementation\Com.c	 16508      else
; ..\component\Com\Implementation\Com.c	 16509      {
; ..\component\Com\Implementation\Com.c	 16510        retVal = COM_SERVICE_NOT_AVAILABLE;
; ..\component\Com\Implementation\Com.c	 16511      }
; ..\component\Com\Implementation\Com.c	 16512  # else
; ..\component\Com\Implementation\Com.c	 16513      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16514  # endif
; ..\component\Com\Implementation\Com.c	 16515    }
; ..\component\Com\Implementation\Com.c	 16516  
; ..\component\Com\Implementation\Com.c	 16517    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16518  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 16519    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
	jeq	d7,#0,.L114
.L1121:

; ..\component\Com\Implementation\Com.c	 16520    {
; ..\component\Com\Implementation\Com.c	 16521      Com_LMgt_CallDetErrorContinue(COMServiceId_ReceiveSignal, errorId);
	fcall	.cocofun_10
.L911:
	mov	d6,#11
	call	Det_ReportError
.L114:

; ..\component\Com\Implementation\Com.c	 16522    }
; ..\component\Com\Implementation\Com.c	 16523  # endif
; ..\component\Com\Implementation\Com.c	 16524  
; ..\component\Com\Implementation\Com.c	 16525    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16526    COM_DUMMY_STATEMENT(SignalId);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16527    COM_DUMMY_STATEMENT(SignalDataPtr);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16528  
; ..\component\Com\Implementation\Com.c	 16529    return retVal;
; ..\component\Com\Implementation\Com.c	 16530  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
	mov	d2,d8
	ret
.L659:
	
__Com_ReceiveSignal_function_end:
	.size	Com_ReceiveSignal,__Com_ReceiveSignal_function_end-Com_ReceiveSignal
.L308:
	; End of function
	
	.sdecl	'.text.Com.Com_ReceiveSignalGroup',code,cluster('Com_ReceiveSignalGroup')
	.sect	'.text.Com.Com_ReceiveSignalGroup'
	.align	2
	
	.global	Com_ReceiveSignalGroup

; ..\component\Com\Implementation\Com.c	 16531  #endif
; ..\component\Com\Implementation\Com.c	 16532  
; ..\component\Com\Implementation\Com.c	 16533  #if (COM_TRANSPORT_PROTOCOL == STD_ON)
; ..\component\Com\Implementation\Com.c	 16534  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16535    Com_ReceiveDynSignal
; ..\component\Com\Implementation\Com.c	 16536  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16537  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16538   *
; ..\component\Com\Implementation\Com.c	 16539   *
; ..\component\Com\Implementation\Com.c	 16540   *
; ..\component\Com\Implementation\Com.c	 16541   *
; ..\component\Com\Implementation\Com.c	 16542   *
; ..\component\Com\Implementation\Com.c	 16543  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16544  FUNC(uint8, COM_CODE) Com_ReceiveDynSignal(Com_SignalIdType SignalId, P2VAR(void, AUTOMATIC, COM_APPL_VAR) SignalDataPtr, P2VAR(uint16, AUTOMATIC, COM_APPL_VAR) Length)        /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	 16545  {
; ..\component\Com\Implementation\Com.c	 16546    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16547    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16548    uint8 retVal = COM_SERVICE_NOT_AVAILABLE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16549  
; ..\component\Com\Implementation\Com.c	 16550    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16551    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 16552    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 16553    {
; ..\component\Com\Implementation\Com.c	 16554      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 16555    }
; ..\component\Com\Implementation\Com.c	 16556    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 16557  # if (COM_DEV_ERROR_DETECT == STD_ON )
; ..\component\Com\Implementation\Com.c	 16558  #  if (COM_RXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16559    else if(SignalId >= Com_GetSizeOfRxAccessInfo())
; ..\component\Com\Implementation\Com.c	 16560    {
; ..\component\Com\Implementation\Com.c	 16561      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16562    }
; ..\component\Com\Implementation\Com.c	 16563  #   if (COM_INVALIDHNDOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16564    else if(Com_IsInvalidHndOfRxAccessInfo(SignalId))
; ..\component\Com\Implementation\Com.c	 16565    {
; ..\component\Com\Implementation\Com.c	 16566      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16567    }
; ..\component\Com\Implementation\Com.c	 16568  #   endif
; ..\component\Com\Implementation\Com.c	 16569  #   if (COM_EXISTS_NORMAL_TYPEOFRXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16570    else if(Com_GetTypeOfRxPduInfo(Com_GetRxPduInfoIdxOfRxAccessInfo(SignalId)) == COM_NORMAL_TYPEOFRXPDUINFO)
; ..\component\Com\Implementation\Com.c	 16571    {
; ..\component\Com\Implementation\Com.c	 16572      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16573    }
; ..\component\Com\Implementation\Com.c	 16574  #   endif
; ..\component\Com\Implementation\Com.c	 16575  #   if (COM_EXISTS_UINT8_DYN_APPLTYPEOFRXACCESSINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16576    else if(Com_GetApplTypeOfRxAccessInfo(SignalId) != COM_UINT8_DYN_APPLTYPEOFRXACCESSINFO)      /* COV_COM_UINT8_DYN_APPLTYPE */
; ..\component\Com\Implementation\Com.c	 16577    {
; ..\component\Com\Implementation\Com.c	 16578      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16579    }
; ..\component\Com\Implementation\Com.c	 16580  #   endif
; ..\component\Com\Implementation\Com.c	 16581  #  endif
; ..\component\Com\Implementation\Com.c	 16582    else if(SignalDataPtr == NULL_PTR)
; ..\component\Com\Implementation\Com.c	 16583    {
; ..\component\Com\Implementation\Com.c	 16584      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16585    }
; ..\component\Com\Implementation\Com.c	 16586    else if(Length == NULL_PTR)   /* COV_COM_NO_DYNSIG_CONFIGURED */
; ..\component\Com\Implementation\Com.c	 16587    {
; ..\component\Com\Implementation\Com.c	 16588      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16589    }
; ..\component\Com\Implementation\Com.c	 16590  # endif
; ..\component\Com\Implementation\Com.c	 16591    else
; ..\component\Com\Implementation\Com.c	 16592    {
; ..\component\Com\Implementation\Com.c	 16593      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16594  # if ((COM_RXTPINFOUSEDOFRXPDUINFO == STD_ON) && (COM_EXISTS_UINT8_DYN_APPLTYPEOFRXACCESSINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 16595      Com_RxPduInfoIdxOfRxAccessInfoType ComPduId = Com_GetRxPduInfoIdxOfRxAccessInfo(SignalId);
; ..\component\Com\Implementation\Com.c	 16596      /* #30 If the dynamic ComSignal fits into the passed buffer */
; ..\component\Com\Implementation\Com.c	 16597  
; ..\component\Com\Implementation\Com.c	 16598      Com_RxTpInfoIdxOfRxPduInfoType rxTpPduInfoIdx = Com_GetRxTpInfoIdxOfRxPduInfo(ComPduId);
; ..\component\Com\Implementation\Com.c	 16599      PduLengthType dynSignalLength = Com_GetRxDynSignalLength(rxTpPduInfoIdx);
; ..\component\Com\Implementation\Com.c	 16600      if(*Length >= dynSignalLength)
; ..\component\Com\Implementation\Com.c	 16601      {
; ..\component\Com\Implementation\Com.c	 16602        /* #40 Copy the dynamic ComSignal value to the passed signal data location and set the passed Length pointer to the current dynamic ComSignal length */
; ..\component\Com\Implementation\Com.c	 16603        SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	 16604        VStdMemCpyRamToRam((P2VAR(uint8, AUTOMATIC, COM_APPL_VAR)) SignalDataPtr, Com_GetAddrRxSigBufferArrayBased(Com_GetRxSigBufferArrayBasedBufferStartIdxOfRxAccessInfo(SignalId)), dynSignalLength); /* PRQA S 0315, 0316 */ /* MD_MSR_VStdLibCopy, MD_Com_0316_0317 */ /* SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH */
; ..\component\Com\Implementation\Com.c	 16605        *Length = (uint16) dynSignalLength;       /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 16606        SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	 16607        if(Com_IsRxPduGrpActive(ComPduId))
; ..\component\Com\Implementation\Com.c	 16608        {
; ..\component\Com\Implementation\Com.c	 16609          retVal = E_OK;
; ..\component\Com\Implementation\Com.c	 16610        }
; ..\component\Com\Implementation\Com.c	 16611      }
; ..\component\Com\Implementation\Com.c	 16612      else
; ..\component\Com\Implementation\Com.c	 16613      {
; ..\component\Com\Implementation\Com.c	 16614        errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16615        *Length = (uint16) dynSignalLength;       /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 16616        retVal = E_NOT_OK;
; ..\component\Com\Implementation\Com.c	 16617      }
; ..\component\Com\Implementation\Com.c	 16618  # else
; ..\component\Com\Implementation\Com.c	 16619      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16620  # endif
; ..\component\Com\Implementation\Com.c	 16621    }
; ..\component\Com\Implementation\Com.c	 16622  
; ..\component\Com\Implementation\Com.c	 16623    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16624  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 16625    if(errorId != COM_E_NO_ERROR) /* COV_COM_NO_DYNSIG_CONFIGURED */ /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */
; ..\component\Com\Implementation\Com.c	 16626    {
; ..\component\Com\Implementation\Com.c	 16627      Com_LMgt_CallDetErrorContinue(COMServiceId_ReceiveDynSignal, errorId);
; ..\component\Com\Implementation\Com.c	 16628    }
; ..\component\Com\Implementation\Com.c	 16629  # endif
; ..\component\Com\Implementation\Com.c	 16630  
; ..\component\Com\Implementation\Com.c	 16631    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16632    COM_DUMMY_STATEMENT(SignalId);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16633    COM_DUMMY_STATEMENT(SignalDataPtr);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16634    COM_DUMMY_STATEMENT(Length);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16635  
; ..\component\Com\Implementation\Com.c	 16636    return retVal;
; ..\component\Com\Implementation\Com.c	 16637  }       /* PRQA S 6080, 6030 */ /* MD_MSR_STMIF, MD_MSR_STCYC */
; ..\component\Com\Implementation\Com.c	 16638  #endif
; ..\component\Com\Implementation\Com.c	 16639  
; ..\component\Com\Implementation\Com.c	 16640  #if (COM_ENABLE_SIGNAL_GROUP_ARRAY_API == STD_ON)
; ..\component\Com\Implementation\Com.c	 16641  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16642    Com_ReceiveSignalGroupArray
; ..\component\Com\Implementation\Com.c	 16643  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16644  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16645   *
; ..\component\Com\Implementation\Com.c	 16646   *
; ..\component\Com\Implementation\Com.c	 16647   *
; ..\component\Com\Implementation\Com.c	 16648   *
; ..\component\Com\Implementation\Com.c	 16649   *
; ..\component\Com\Implementation\Com.c	 16650   *
; ..\component\Com\Implementation\Com.c	 16651   *
; ..\component\Com\Implementation\Com.c	 16652   *
; ..\component\Com\Implementation\Com.c	 16653  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16654  FUNC(uint8, COM_CODE) Com_ReceiveSignalGroupArray(Com_SignalGroupIdType SignalGroupId, P2VAR(uint8, AUTOMATIC, COM_APPL_VAR) SignalGroupArrayPtr)       /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	 16655  {
; ..\component\Com\Implementation\Com.c	 16656    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16657    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16658    uint8 retVal = COM_SERVICE_NOT_AVAILABLE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16659  
; ..\component\Com\Implementation\Com.c	 16660    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16661    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 16662    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 16663    {
; ..\component\Com\Implementation\Com.c	 16664      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 16665    }
; ..\component\Com\Implementation\Com.c	 16666  # if (COM_DEV_ERROR_DETECT == STD_ON )  /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 16667    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 16668  #  if(COM_RXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16669    else if(SignalGroupId >= Com_GetSizeOfRxSigGrpInfo())
; ..\component\Com\Implementation\Com.c	 16670    {
; ..\component\Com\Implementation\Com.c	 16671      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16672    }
; ..\component\Com\Implementation\Com.c	 16673  #   if(COM_INVALIDHNDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16674    else if(Com_IsInvalidHndOfRxSigGrpInfo(SignalGroupId))
; ..\component\Com\Implementation\Com.c	 16675    {
; ..\component\Com\Implementation\Com.c	 16676      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16677    }
; ..\component\Com\Implementation\Com.c	 16678  #   endif
; ..\component\Com\Implementation\Com.c	 16679  #   if (COM_ARRAYACCESSUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16680    else if(!Com_IsArrayAccessUsedOfRxSigGrpInfo(SignalGroupId))  /* COV_COM_ONLY_ARRAYBASED_RX_SIGGRP */
; ..\component\Com\Implementation\Com.c	 16681    {
; ..\component\Com\Implementation\Com.c	 16682      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16683    }
; ..\component\Com\Implementation\Com.c	 16684  #   endif
; ..\component\Com\Implementation\Com.c	 16685  #  endif
; ..\component\Com\Implementation\Com.c	 16686    else if(SignalGroupArrayPtr == NULL_PTR)      /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 16687    {
; ..\component\Com\Implementation\Com.c	 16688      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 16689    }
; ..\component\Com\Implementation\Com.c	 16690  # endif
; ..\component\Com\Implementation\Com.c	 16691    else
; ..\component\Com\Implementation\Com.c	 16692    {
; ..\component\Com\Implementation\Com.c	 16693      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16694  # if(COM_ARRAYACCESSUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16695      /* #30 Initiate the reception of the signal group array */
; ..\component\Com\Implementation\Com.c	 16696      Com_RxPduInfoIdxOfRxSigGrpInfoType ComPduId = Com_GetRxPduInfoIdxOfRxSigGrpInfo(SignalGroupId);
; ..\component\Com\Implementation\Com.c	 16697      Com_RxSigArrayAccessSigGrpBufferIterType idxShdBufferIdx = Com_GetRxSigArrayAccessSigGrpBufferStartIdxOfRxSigGrpInfo(SignalGroupId);
; ..\component\Com\Implementation\Com.c	 16698  
; ..\component\Com\Implementation\Com.c	 16699      /* #40 If the belonging RxPduGroup is active, set the return value to E_OK */
; ..\component\Com\Implementation\Com.c	 16700      if(Com_IsRxPduGrpActive(ComPduId))
; ..\component\Com\Implementation\Com.c	 16701      {
; ..\component\Com\Implementation\Com.c	 16702        retVal = E_OK;
; ..\component\Com\Implementation\Com.c	 16703      }
; ..\component\Com\Implementation\Com.c	 16704      /* #50 Enter exclusive area */
; ..\component\Com\Implementation\Com.c	 16705      SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	 16706      {
; ..\component\Com\Implementation\Com.c	 16707        /* #60 copy data from shadow buffer to the signal group array */
; ..\component\Com\Implementation\Com.c	 16708        VStdMemCpyRamToRam(SignalGroupArrayPtr, Com_GetAddrRxSigArrayAccessSigGrpBuffer(idxShdBufferIdx), Com_GetRxSigArrayAccessSigGrpBufferLengthOfRxSigGrpInfo(SignalGroupId));        /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_COM_CSL01 */
; ..\component\Com\Implementation\Com.c	 16709      }
; ..\component\Com\Implementation\Com.c	 16710      /* #70 Exit exclusive area */
; ..\component\Com\Implementation\Com.c	 16711      SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	 16712  # else
; ..\component\Com\Implementation\Com.c	 16713      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16714  # endif
; ..\component\Com\Implementation\Com.c	 16715    }
; ..\component\Com\Implementation\Com.c	 16716  
; ..\component\Com\Implementation\Com.c	 16717    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16718  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 16719    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 16720    {
; ..\component\Com\Implementation\Com.c	 16721      Com_LMgt_CallDetErrorContinue(COMServiceId_ReceiveSignalGroupArray, errorId);
; ..\component\Com\Implementation\Com.c	 16722    }
; ..\component\Com\Implementation\Com.c	 16723  # endif
; ..\component\Com\Implementation\Com.c	 16724  
; ..\component\Com\Implementation\Com.c	 16725    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16726    COM_DUMMY_STATEMENT(SignalGroupId);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16727    COM_DUMMY_STATEMENT(SignalGroupArrayPtr);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16728  
; ..\component\Com\Implementation\Com.c	 16729    return retVal;
; ..\component\Com\Implementation\Com.c	 16730  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	 16731  #endif
; ..\component\Com\Implementation\Com.c	 16732  
; ..\component\Com\Implementation\Com.c	 16733  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16734    Com_ReceiveSignalGroup
; ..\component\Com\Implementation\Com.c	 16735  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16736  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16737   *
; ..\component\Com\Implementation\Com.c	 16738   *
; ..\component\Com\Implementation\Com.c	 16739   *
; ..\component\Com\Implementation\Com.c	 16740   *
; ..\component\Com\Implementation\Com.c	 16741   *
; ..\component\Com\Implementation\Com.c	 16742  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16743  FUNC(uint8, COM_CODE) Com_ReceiveSignalGroup(Com_SignalGroupIdType SignalGroupId)
; Function Com_ReceiveSignalGroup
.L205:
Com_ReceiveSignalGroup:	.type	func

; ..\component\Com\Implementation\Com.c	 16744  {
; ..\component\Com\Implementation\Com.c	 16745    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16746    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16747    uint8 retVal = COM_SERVICE_NOT_AVAILABLE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16748  
; ..\component\Com\Implementation\Com.c	 16749    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16750    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 16751    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 16752    {
; ..\component\Com\Implementation\Com.c	 16753      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 16754    }
; ..\component\Com\Implementation\Com.c	 16755  #if (COM_DEV_ERROR_DETECT == STD_ON )   /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 16756    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 16757  # if(COM_RXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16758    else if(SignalGroupId >= Com_GetSizeOfRxSigGrpInfo()) /* COV_COM_ONLYARRAYACCESS_PRESENT_01 */
; ..\component\Com\Implementation\Com.c	 16759    {
; ..\component\Com\Implementation\Com.c	 16760      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16761    }
; ..\component\Com\Implementation\Com.c	 16762  #  if(COM_INVALIDHNDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16763    else if(Com_IsInvalidHndOfRxSigGrpInfo(SignalGroupId))        /* COV_COM_ONLY_ARRAYBASED_TX_SIGGRP */
; ..\component\Com\Implementation\Com.c	 16764    {
; ..\component\Com\Implementation\Com.c	 16765      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16766    }
; ..\component\Com\Implementation\Com.c	 16767  #  endif
; ..\component\Com\Implementation\Com.c	 16768  #  if (COM_ARRAYACCESSUSEDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16769    else if(Com_IsArrayAccessUsedOfRxSigGrpInfo(SignalGroupId))
; ..\component\Com\Implementation\Com.c	 16770    {
; ..\component\Com\Implementation\Com.c	 16771      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16772    }
; ..\component\Com\Implementation\Com.c	 16773  #  endif
; ..\component\Com\Implementation\Com.c	 16774  # endif
; ..\component\Com\Implementation\Com.c	 16775  #endif
; ..\component\Com\Implementation\Com.c	 16776    else
; ..\component\Com\Implementation\Com.c	 16777    {
; ..\component\Com\Implementation\Com.c	 16778  #if(COM_RXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16779      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16780      Com_RxPduInfoIdxOfRxSigGrpInfoType ComPduId = Com_GetRxPduInfoIdxOfRxSigGrpInfo(SignalGroupId);
; ..\component\Com\Implementation\Com.c	 16781      retVal = E_OK;
; ..\component\Com\Implementation\Com.c	 16782  
; ..\component\Com\Implementation\Com.c	 16783      /* #30 If the related ComIPduGroup is stopped, COM_SERVICE_NOT_AVAILABLE will be returned */
; ..\component\Com\Implementation\Com.c	 16784      if(!Com_IsRxPduGrpActive(ComPduId)) /* COV_COM_ONLYARRAYACCESS_PRESENT */
; ..\component\Com\Implementation\Com.c	 16785      {
; ..\component\Com\Implementation\Com.c	 16786        retVal = COM_SERVICE_NOT_AVAILABLE;
; ..\component\Com\Implementation\Com.c	 16787      }
; ..\component\Com\Implementation\Com.c	 16788  
; ..\component\Com\Implementation\Com.c	 16789  # if (COM_SHDBUFFERREQUIREDOFRXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16790      SchM_Enter_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	 16791      /* #40 Read the Rx ComSignalGroup data */
; ..\component\Com\Implementation\Com.c	 16792      {
; ..\component\Com\Implementation\Com.c	 16793        Com_ReadSignalGroupData(SignalGroupId);
; ..\component\Com\Implementation\Com.c	 16794      }
; ..\component\Com\Implementation\Com.c	 16795      SchM_Exit_Com_COM_EXCLUSIVE_AREA_RX();
; ..\component\Com\Implementation\Com.c	 16796  # endif
; ..\component\Com\Implementation\Com.c	 16797  #else
; ..\component\Com\Implementation\Com.c	 16798      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16799  #endif
; ..\component\Com\Implementation\Com.c	 16800    }
; ..\component\Com\Implementation\Com.c	 16801  
; ..\component\Com\Implementation\Com.c	 16802  
; ..\component\Com\Implementation\Com.c	 16803    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16804  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 16805    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 16806    {
; ..\component\Com\Implementation\Com.c	 16807      Com_LMgt_CallDetErrorContinue(COMServiceId_ReceiveSignalGroup, errorId);
	fcall	.cocofun_10
.L1126:
	mov	d6,#14
	fcall	.cocofun_1
.L1127:
	call	Det_ReportError
.L1128:

; ..\component\Com\Implementation\Com.c	 16808    }
; ..\component\Com\Implementation\Com.c	 16809  #endif
; ..\component\Com\Implementation\Com.c	 16810  
; ..\component\Com\Implementation\Com.c	 16811    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16812    COM_DUMMY_STATEMENT(SignalGroupId);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 16813  
; ..\component\Com\Implementation\Com.c	 16814    return retVal;
; ..\component\Com\Implementation\Com.c	 16815  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
	mov	d2,#128
	ret
.L671:
	
__Com_ReceiveSignalGroup_function_end:
	.size	Com_ReceiveSignalGroup,__Com_ReceiveSignalGroup_function_end-Com_ReceiveSignalGroup
.L313:
	; End of function
	
	.sdecl	'.text.Com.Com_InvalidateSignal',code,cluster('Com_InvalidateSignal')
	.sect	'.text.Com.Com_InvalidateSignal'
	.align	2
	
	.global	Com_InvalidateSignal

; ..\component\Com\Implementation\Com.c	 16816  
; ..\component\Com\Implementation\Com.c	 16817  #if (COM_MAIN_FUNCTION_ROUTE_SIGNALS_API == STD_ON)
; ..\component\Com\Implementation\Com.c	 16818  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16819    Com_MainFunctionRouteSignals
; ..\component\Com\Implementation\Com.c	 16820  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16821  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16822   *
; ..\component\Com\Implementation\Com.c	 16823   *
; ..\component\Com\Implementation\Com.c	 16824   *
; ..\component\Com\Implementation\Com.c	 16825   *
; ..\component\Com\Implementation\Com.c	 16826   *
; ..\component\Com\Implementation\Com.c	 16827   *
; ..\component\Com\Implementation\Com.c	 16828  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16829  FUNC(void, COM_CODE) Com_MainFunctionRouteSignals(void)
; ..\component\Com\Implementation\Com.c	 16830  {
; ..\component\Com\Implementation\Com.c	 16831    if(Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 16832    {
; ..\component\Com\Implementation\Com.c	 16833      /* #10 Do description routing, if GENERATED_DESCRIPTION_ROUTING is on use the generated description routing function, otherwise use the static function */
; ..\component\Com\Implementation\Com.c	 16834  # if (COM_GENERATED_DESCRIPTION_ROUTING == STD_ON)      /* COV_COM_VAR_ELISA_STD_OFF_XF */
; ..\component\Com\Implementation\Com.c	 16835      Com_RxGwMainFunctionRoute();
; ..\component\Com\Implementation\Com.c	 16836  # elif (COM_GWEVENTCACHE == STD_ON)
; ..\component\Com\Implementation\Com.c	 16837      Com_MainFunction_GwDescription();
; ..\component\Com\Implementation\Com.c	 16838  # endif
; ..\component\Com\Implementation\Com.c	 16839  
; ..\component\Com\Implementation\Com.c	 16840  # if (COM_GWINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16841      {
; ..\component\Com\Implementation\Com.c	 16842        Com_GwInfoIterType idxGwInfo;
; ..\component\Com\Implementation\Com.c	 16843  
; ..\component\Com\Implementation\Com.c	 16844        Com_SignalGw_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	 16845        /* #20 Iterate over all gateway event flags */
; ..\component\Com\Implementation\Com.c	 16846        for(idxGwInfo = 0; idxGwInfo < Com_GetSizeOfGwInfo(); idxGwInfo++)
; ..\component\Com\Implementation\Com.c	 16847        {
; ..\component\Com\Implementation\Com.c	 16848          /* #30 If a gateway event flag is set */
; ..\component\Com\Implementation\Com.c	 16849          if(Com_IsGwEvent(idxGwInfo))
; ..\component\Com\Implementation\Com.c	 16850          {
; ..\component\Com\Implementation\Com.c	 16851            Com_SetGwEvent(idxGwInfo, FALSE);     /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 16852  
; ..\component\Com\Implementation\Com.c	 16853  #  if (COM_GWSIGMAPPINGENDIDXOFGWINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16854            /* #40 Do normal signal routings */
; ..\component\Com\Implementation\Com.c	 16855            Com_MainFunction_SignalRoutings(idxGwInfo);
; ..\component\Com\Implementation\Com.c	 16856  #  endif
; ..\component\Com\Implementation\Com.c	 16857  
; ..\component\Com\Implementation\Com.c	 16858  #  if (COM_GWSIGGRPMAPPINGENDIDXOFGWINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16859            /* #50 Do normal signal group routings */
; ..\component\Com\Implementation\Com.c	 16860            Com_MainFunction_SignalGroupRoutings(idxGwInfo);
; ..\component\Com\Implementation\Com.c	 16861  #  endif
; ..\component\Com\Implementation\Com.c	 16862          }
; ..\component\Com\Implementation\Com.c	 16863          Com_SignalGw_ThresholdCheck();
; ..\component\Com\Implementation\Com.c	 16864        }
; ..\component\Com\Implementation\Com.c	 16865        Com_SignalGw_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	 16866      }
; ..\component\Com\Implementation\Com.c	 16867  # endif
; ..\component\Com\Implementation\Com.c	 16868    }
; ..\component\Com\Implementation\Com.c	 16869  }
; ..\component\Com\Implementation\Com.c	 16870  #endif
; ..\component\Com\Implementation\Com.c	 16871  
; ..\component\Com\Implementation\Com.c	 16872  #if (COM_GWINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16873  /* jet: ComISRThreshold snippet */
; ..\component\Com\Implementation\Com.c	 16874  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16875    Com_SignalGw_EnterExclusiveArea
; ..\component\Com\Implementation\Com.c	 16876  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16877  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16878   *
; ..\component\Com\Implementation\Com.c	 16879   *
; ..\component\Com\Implementation\Com.c	 16880  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16881  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGw_EnterExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	 16882  {
; ..\component\Com\Implementation\Com.c	 16883    /* #10 Enter the gw signal routing exclusive area */
; ..\component\Com\Implementation\Com.c	 16884    SchM_Enter_Com_COM_EXCLUSIVE_AREA_BOTH();
; ..\component\Com\Implementation\Com.c	 16885  }
; ..\component\Com\Implementation\Com.c	 16886  
; ..\component\Com\Implementation\Com.c	 16887  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16888    Com_SignalGw_ExitExclusiveArea
; ..\component\Com\Implementation\Com.c	 16889  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16890  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16891   *
; ..\component\Com\Implementation\Com.c	 16892   *
; ..\component\Com\Implementation\Com.c	 16893   *
; ..\component\Com\Implementation\Com.c	 16894  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16895  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGw_ExitExclusiveArea(void)
; ..\component\Com\Implementation\Com.c	 16896  {
; ..\component\Com\Implementation\Com.c	 16897    /* #05 Reload the counter with the threshold value */
; ..\component\Com\Implementation\Com.c	 16898    Com_SetGatewayProcessingISRLockCounter(Com_GetGatewayProcessingISRLockThreshold());   /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 16899    /* #10 Exit the gw signal routing exclusive area */
; ..\component\Com\Implementation\Com.c	 16900    SchM_Exit_Com_COM_EXCLUSIVE_AREA_BOTH();
; ..\component\Com\Implementation\Com.c	 16901  }
; ..\component\Com\Implementation\Com.c	 16902  
; ..\component\Com\Implementation\Com.c	 16903  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16904    Com_SignalGw_ThresholdCheck
; ..\component\Com\Implementation\Com.c	 16905  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16906  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16907   *
; ..\component\Com\Implementation\Com.c	 16908   *
; ..\component\Com\Implementation\Com.c	 16909   *
; ..\component\Com\Implementation\Com.c	 16910  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16911  LOCAL_INLINE FUNC(void, COM_CODE) Com_SignalGw_ThresholdCheck(void)
; ..\component\Com\Implementation\Com.c	 16912  {
; ..\component\Com\Implementation\Com.c	 16913    if(Com_GetGatewayProcessingISRLockCounter() > 0u)     /* COV_COM_THRESHOLD_TX */
; ..\component\Com\Implementation\Com.c	 16914    {
; ..\component\Com\Implementation\Com.c	 16915      Com_DecGatewayProcessingISRLockCounter();   /* SBSW_COM_CSL_VAR_ACCESS */
; ..\component\Com\Implementation\Com.c	 16916    }
; ..\component\Com\Implementation\Com.c	 16917    else
; ..\component\Com\Implementation\Com.c	 16918    {
; ..\component\Com\Implementation\Com.c	 16919      Com_SignalGw_ExitExclusiveArea();
; ..\component\Com\Implementation\Com.c	 16920      Com_SignalGw_EnterExclusiveArea();
; ..\component\Com\Implementation\Com.c	 16921    }
; ..\component\Com\Implementation\Com.c	 16922  }
; ..\component\Com\Implementation\Com.c	 16923  
; ..\component\Com\Implementation\Com.c	 16924  #endif
; ..\component\Com\Implementation\Com.c	 16925  
; ..\component\Com\Implementation\Com.c	 16926  
; ..\component\Com\Implementation\Com.c	 16927  
; ..\component\Com\Implementation\Com.c	 16928  
; ..\component\Com\Implementation\Com.c	 16929  #if (COM_GWTIMEOUTINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16930  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16931    Com_GwTout_Event
; ..\component\Com\Implementation\Com.c	 16932  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16933  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16934   *
; ..\component\Com\Implementation\Com.c	 16935   *
; ..\component\Com\Implementation\Com.c	 16936   *
; ..\component\Com\Implementation\Com.c	 16937   *
; ..\component\Com\Implementation\Com.c	 16938   *
; ..\component\Com\Implementation\Com.c	 16939   *
; ..\component\Com\Implementation\Com.c	 16940  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16941  FUNC(void, COM_CODE) Com_GwTout_Event(PduIdType ComTxPduId)     /* PRQA S 1505 */ /* MD_MSR_Rule8.7 */
; ..\component\Com\Implementation\Com.c	 16942  {
; ..\component\Com\Implementation\Com.c	 16943    /* #10 If the passed ComIPdu has a configured gateway timeout and the Tx ComIPdu is active */
; ..\component\Com\Implementation\Com.c	 16944    if(Com_IsTxPduGrpActive((PduIdType) ComTxPduId))
; ..\component\Com\Implementation\Com.c	 16945    {
; ..\component\Com\Implementation\Com.c	 16946      if(Com_IsGwTimeoutInfoUsedOfTxPduInfo(ComTxPduId))  /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 16947      {
; ..\component\Com\Implementation\Com.c	 16948        /* #20 If the current tx mode is periodic */
; ..\component\Com\Implementation\Com.c	 16949        Com_GwTimeoutInfoIdxOfTxPduInfoType gwToutId = Com_GetGwTimeoutInfoIdxOfTxPduInfo(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 16950        if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)   /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 16951        {
; ..\component\Com\Implementation\Com.c	 16952          /* #30 Start the cyclic transmission of the passed Tx ComIPdu */
; ..\component\Com\Implementation\Com.c	 16953          Com_TxModeHdlr_StartCyclicTransmission(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 16954          /* #40 Reload the gateway timeout counter with the gateway timeout factor */
; ..\component\Com\Implementation\Com.c	 16955          Com_SetGwRoutingTimeoutCounter(gwToutId, Com_GetGwRoutingTimeoutFactorOfGwTimeoutInfo(gwToutId));       /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 16956        }
; ..\component\Com\Implementation\Com.c	 16957        /* #50 Otherwise set the gateway routing timeout to 0 */
; ..\component\Com\Implementation\Com.c	 16958        else
; ..\component\Com\Implementation\Com.c	 16959        {
; ..\component\Com\Implementation\Com.c	 16960          Com_SetGwRoutingTimeoutCounter(gwToutId, 0);    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 16961        }
; ..\component\Com\Implementation\Com.c	 16962      }
; ..\component\Com\Implementation\Com.c	 16963    }
; ..\component\Com\Implementation\Com.c	 16964  }
; ..\component\Com\Implementation\Com.c	 16965  #endif
; ..\component\Com\Implementation\Com.c	 16966  
; ..\component\Com\Implementation\Com.c	 16967  
; ..\component\Com\Implementation\Com.c	 16968  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 16969    Com_InvalidateSignal
; ..\component\Com\Implementation\Com.c	 16970   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16971  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 16972   *
; ..\component\Com\Implementation\Com.c	 16973   *
; ..\component\Com\Implementation\Com.c	 16974   *
; ..\component\Com\Implementation\Com.c	 16975   *
; ..\component\Com\Implementation\Com.c	 16976   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 16977  FUNC(uint8, COM_CODE) Com_InvalidateSignal(Com_SignalIdType SignalId)
; Function Com_InvalidateSignal
.L207:
Com_InvalidateSignal:	.type	func

; ..\component\Com\Implementation\Com.c	 16978  {
; ..\component\Com\Implementation\Com.c	 16979    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16980    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16981    uint8 retVal = COM_SERVICE_NOT_AVAILABLE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 16982  
; ..\component\Com\Implementation\Com.c	 16983    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 16984    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 16985    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 16986    {
; ..\component\Com\Implementation\Com.c	 16987      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 16988    }
; ..\component\Com\Implementation\Com.c	 16989  #if (COM_DEV_ERROR_DETECT == STD_ON )   /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 16990    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 16991  # if (COM_TXSIGINFO == STD_ON )
; ..\component\Com\Implementation\Com.c	 16992    else if(SignalId >= Com_GetSizeOfTxSigInfo()) /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 16993    {
; ..\component\Com\Implementation\Com.c	 16994      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 16995    }
; ..\component\Com\Implementation\Com.c	 16996  #  if (COM_INVALIDHNDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 16997    else if(Com_IsInvalidHndOfTxSigInfo(SignalId))        /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 16998    {
; ..\component\Com\Implementation\Com.c	 16999      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17000    }
; ..\component\Com\Implementation\Com.c	 17001  #  endif
; ..\component\Com\Implementation\Com.c	 17002  # endif
; ..\component\Com\Implementation\Com.c	 17003  #endif
; ..\component\Com\Implementation\Com.c	 17004    else
; ..\component\Com\Implementation\Com.c	 17005    {
; ..\component\Com\Implementation\Com.c	 17006  #if (COM_INVVALUEUSEDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17007      SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 17008      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17009      /* #30 If the passed ComSignal has an configured invalid value, set the value of the passed ComSignal to the invalid value */
; ..\component\Com\Implementation\Com.c	 17010      retVal = Com_InvalidateSignal_SendSignal(SignalId);
; ..\component\Com\Implementation\Com.c	 17011      SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 17012  #else
; ..\component\Com\Implementation\Com.c	 17013      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17014  #endif
; ..\component\Com\Implementation\Com.c	 17015    }
; ..\component\Com\Implementation\Com.c	 17016  
; ..\component\Com\Implementation\Com.c	 17017    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17018  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 17019    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 17020    {
; ..\component\Com\Implementation\Com.c	 17021      Com_LMgt_CallDetErrorContinue(COMServiceId_InvalidateSignal, errorId);
	fcall	.cocofun_10
.L1133:
	mov	d6,#16
	fcall	.cocofun_1
.L1134:
	call	Det_ReportError
.L1135:

; ..\component\Com\Implementation\Com.c	 17022    }
; ..\component\Com\Implementation\Com.c	 17023  #endif
; ..\component\Com\Implementation\Com.c	 17024  
; ..\component\Com\Implementation\Com.c	 17025    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17026    COM_DUMMY_STATEMENT(SignalId);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17027  
; ..\component\Com\Implementation\Com.c	 17028    return retVal;
; ..\component\Com\Implementation\Com.c	 17029  }
	mov	d2,#128
	ret
.L673:
	
__Com_InvalidateSignal_function_end:
	.size	Com_InvalidateSignal,__Com_InvalidateSignal_function_end-Com_InvalidateSignal
.L318:
	; End of function
	
	.sdecl	'.text.Com.Com_InvalidateSignalGroup',code,cluster('Com_InvalidateSignalGroup')
	.sect	'.text.Com.Com_InvalidateSignalGroup'
	.align	2
	
	.global	Com_InvalidateSignalGroup

; ..\component\Com\Implementation\Com.c	 17030  
; ..\component\Com\Implementation\Com.c	 17031  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 17032    Com_InvalidateSignalGroup
; ..\component\Com\Implementation\Com.c	 17033   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17034  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 17035   *
; ..\component\Com\Implementation\Com.c	 17036   *
; ..\component\Com\Implementation\Com.c	 17037   *
; ..\component\Com\Implementation\Com.c	 17038   *
; ..\component\Com\Implementation\Com.c	 17039   *
; ..\component\Com\Implementation\Com.c	 17040   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17041  FUNC(uint8, COM_CODE) Com_InvalidateSignalGroup(Com_SignalGroupIdType SignalGroupId)
; Function Com_InvalidateSignalGroup
.L209:
Com_InvalidateSignalGroup:	.type	func

; ..\component\Com\Implementation\Com.c	 17042  {
; ..\component\Com\Implementation\Com.c	 17043    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17044    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17045    uint8 retVal = COM_SERVICE_NOT_AVAILABLE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17046  
; ..\component\Com\Implementation\Com.c	 17047    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17048    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 17049    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 17050    {
; ..\component\Com\Implementation\Com.c	 17051      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 17052    }
; ..\component\Com\Implementation\Com.c	 17053  #if (COM_DEV_ERROR_DETECT == STD_ON )   /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 17054    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 17055  # if (COM_TXSIGGRPINFO == STD_ON )
; ..\component\Com\Implementation\Com.c	 17056    else if(SignalGroupId >= Com_GetSizeOfTxSigGrpInfo()) /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 17057    {
; ..\component\Com\Implementation\Com.c	 17058      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17059    }
; ..\component\Com\Implementation\Com.c	 17060  #  if (COM_INVALIDHNDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17061    else if(Com_IsInvalidHndOfTxSigGrpInfo(SignalGroupId))        /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 17062    {
; ..\component\Com\Implementation\Com.c	 17063      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17064    }
; ..\component\Com\Implementation\Com.c	 17065  #  endif
; ..\component\Com\Implementation\Com.c	 17066  # endif
; ..\component\Com\Implementation\Com.c	 17067  #endif
; ..\component\Com\Implementation\Com.c	 17068    else
; ..\component\Com\Implementation\Com.c	 17069    {
; ..\component\Com\Implementation\Com.c	 17070  #if (COM_TXSIGINFOINVVALUEINDENDIDXOFTXSIGGRPINFO == STD_ON )
; ..\component\Com\Implementation\Com.c	 17071      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17072      /* #30 Iterate overall ComGroupSignal of the passed ComSignalGroup and set the ComGroupSignal value to the invalid value */
; ..\component\Com\Implementation\Com.c	 17073      Com_TxSigInfoInvValueIndEndIdxOfTxSigGrpInfoType idxTxSigInfoInvValueInd = Com_GetTxSigInfoInvValueIndStartIdxOfTxSigGrpInfo(SignalGroupId);
; ..\component\Com\Implementation\Com.c	 17074      for(; idxTxSigInfoInvValueInd < Com_GetTxSigInfoInvValueIndEndIdxOfTxSigGrpInfo(SignalGroupId); idxTxSigInfoInvValueInd++)
; ..\component\Com\Implementation\Com.c	 17075      {
; ..\component\Com\Implementation\Com.c	 17076        Com_SignalIdType idxTxSigInfo = (Com_SignalIdType) Com_GetTxSigInfoInvValueInd(idxTxSigInfoInvValueInd);
; ..\component\Com\Implementation\Com.c	 17077  
; ..\component\Com\Implementation\Com.c	 17078        SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 17079  
; ..\component\Com\Implementation\Com.c	 17080        (void) Com_InvalidateSignal_SendSignal(idxTxSigInfo);
; ..\component\Com\Implementation\Com.c	 17081  
; ..\component\Com\Implementation\Com.c	 17082        SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 17083      }
; ..\component\Com\Implementation\Com.c	 17084      /* #40 Call Com_SendSignalGroup to copy the invalid values form the shadow buffer to the tx pdu buffer */
; ..\component\Com\Implementation\Com.c	 17085      retVal = Com_SendSignalGroup(SignalGroupId);
; ..\component\Com\Implementation\Com.c	 17086  #else
; ..\component\Com\Implementation\Com.c	 17087      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17088  #endif
; ..\component\Com\Implementation\Com.c	 17089    }
; ..\component\Com\Implementation\Com.c	 17090  
; ..\component\Com\Implementation\Com.c	 17091    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17092  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 17093    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 17094    {
; ..\component\Com\Implementation\Com.c	 17095      Com_LMgt_CallDetErrorContinue(COMServiceId_InvalidateSignalGroup, errorId);
	fcall	.cocofun_10
.L1140:
	mov	d6,#27
	fcall	.cocofun_1
.L1141:
	call	Det_ReportError
.L1142:

; ..\component\Com\Implementation\Com.c	 17096    }
; ..\component\Com\Implementation\Com.c	 17097  #endif
; ..\component\Com\Implementation\Com.c	 17098  
; ..\component\Com\Implementation\Com.c	 17099    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17100    COM_DUMMY_STATEMENT(SignalGroupId);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17101  
; ..\component\Com\Implementation\Com.c	 17102    return retVal;
; ..\component\Com\Implementation\Com.c	 17103  }
	mov	d2,#128
	ret
.L675:
	
__Com_InvalidateSignalGroup_function_end:
	.size	Com_InvalidateSignalGroup,__Com_InvalidateSignalGroup_function_end-Com_InvalidateSignalGroup
.L323:
	; End of function
	
	.sdecl	'.text.Com.Com_TxConfirmation',code,cluster('Com_TxConfirmation')
	.sect	'.text.Com.Com_TxConfirmation'
	.align	2
	
	.global	Com_TxConfirmation

; ..\component\Com\Implementation\Com.c	 17104  
; ..\component\Com\Implementation\Com.c	 17105  #if (COM_TX_CONFIRMATION_API == STD_ON)
; ..\component\Com\Implementation\Com.c	 17106  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 17107    Com_TxConfirmation
; ..\component\Com\Implementation\Com.c	 17108  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17109  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 17110   *
; ..\component\Com\Implementation\Com.c	 17111   *
; ..\component\Com\Implementation\Com.c	 17112   *
; ..\component\Com\Implementation\Com.c	 17113   *
; ..\component\Com\Implementation\Com.c	 17114  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17115  FUNC(void, COM_CODE) Com_TxConfirmation(PduIdType TxPduId)
; Function Com_TxConfirmation
.L211:
Com_TxConfirmation:	.type	func

; ..\component\Com\Implementation\Com.c	 17116  {
; ..\component\Com\Implementation\Com.c	 17117    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17118    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
	fcall	.cocofun_6
.L912:

; ..\component\Com\Implementation\Com.c	 17119  
; ..\component\Com\Implementation\Com.c	 17120    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17121    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 17122    if(!Com_IsInitialized())
	jne	d15,#0,.L119
.L943:

; ..\component\Com\Implementation\Com.c	 17123    {
; ..\component\Com\Implementation\Com.c	 17124      errorId = COM_E_UNINIT;
	mov	d8,#2
	j	.L120
.L119:

; ..\component\Com\Implementation\Com.c	 17125    }
; ..\component\Com\Implementation\Com.c	 17126  # if (COM_DEV_ERROR_DETECT == STD_ON )  /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 17127    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 17128  #  if (COM_TXPDUINFO == STD_ON) /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	 17129    else if(TxPduId >= Com_GetSizeOfTxPduInfo())
	jlt.u	d4,#3,.L121
.L944:

; ..\component\Com\Implementation\Com.c	 17130    {
; ..\component\Com\Implementation\Com.c	 17131      errorId = COM_E_PARAM;
	mov	d8,#1
	j	.L122
.L121:
	call	SuspendAllInterrupts
.L913:
	call	ResumeAllInterrupts

; ..\component\Com\Implementation\Com.c	 17132    }
; ..\component\Com\Implementation\Com.c	 17133  #   if (COM_INVALIDHNDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17134    else if(Com_IsInvalidHndOfTxPduInfo(TxPduId))
; ..\component\Com\Implementation\Com.c	 17135    {
; ..\component\Com\Implementation\Com.c	 17136      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17137    }
; ..\component\Com\Implementation\Com.c	 17138  #   endif
; ..\component\Com\Implementation\Com.c	 17139  #  endif
; ..\component\Com\Implementation\Com.c	 17140  # endif
; ..\component\Com\Implementation\Com.c	 17141    else
.L122:
.L120:

; ..\component\Com\Implementation\Com.c	 17142    {
; ..\component\Com\Implementation\Com.c	 17143      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17144      /* #30 Do confirmation processing */
; ..\component\Com\Implementation\Com.c	 17145      Com_TxConfirmation_Process(TxPduId);
; ..\component\Com\Implementation\Com.c	 17146    }
; ..\component\Com\Implementation\Com.c	 17147  
; ..\component\Com\Implementation\Com.c	 17148    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17149  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 17150    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */
	jeq	d8,#0,.L123
.L945:

; ..\component\Com\Implementation\Com.c	 17151    {
; ..\component\Com\Implementation\Com.c	 17152      Com_LMgt_CallDetErrorContinue(COMServiceId_TxConfirmation, errorId);
	fcall	.cocofun_10
	mov	d6,#64
	mov	d7,d8
.L914:
	j	Det_ReportError
.L123:

; ..\component\Com\Implementation\Com.c	 17153    }
; ..\component\Com\Implementation\Com.c	 17154  # endif
; ..\component\Com\Implementation\Com.c	 17155  
; ..\component\Com\Implementation\Com.c	 17156    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17157    COM_DUMMY_STATEMENT(TxPduId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17158  }
	ret
.L432:
	
__Com_TxConfirmation_function_end:
	.size	Com_TxConfirmation,__Com_TxConfirmation_function_end-Com_TxConfirmation
.L233:
	; End of function
	
	.sdecl	'.text.Com.Com_TxLLIf_Transmit',code,cluster('Com_TxLLIf_Transmit')
	.sect	'.text.Com.Com_TxLLIf_Transmit'
	.align	2
	
	.global	Com_TxLLIf_Transmit

; ..\component\Com\Implementation\Com.c	 17159  #endif
; ..\component\Com\Implementation\Com.c	 17160  
; ..\component\Com\Implementation\Com.c	 17161  #if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17162  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 17163    Com_ResetTxTpConnection
; ..\component\Com\Implementation\Com.c	 17164  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17165  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 17166   *
; ..\component\Com\Implementation\Com.c	 17167   *
; ..\component\Com\Implementation\Com.c	 17168  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17169  FUNC(void, COM_CODE) Com_ResetTxTpConnection(PduIdType PduId)
; ..\component\Com\Implementation\Com.c	 17170  {
; ..\component\Com\Implementation\Com.c	 17171    Com_TxTpInfoIdxOfTxPduInfoType txTpPduInfoIdx = Com_GetTxTpInfoIdxOfTxPduInfo(PduId);
; ..\component\Com\Implementation\Com.c	 17172    Com_SetTxTpConnectionState(txTpPduInfoIdx, COM_READY_TXTPCONNECTIONSTATE);    /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 17173    Com_SetTxTpWrittenBytesCounter(txTpPduInfoIdx, 0u);   /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 17174  }
; ..\component\Com\Implementation\Com.c	 17175  #endif
; ..\component\Com\Implementation\Com.c	 17176  
; ..\component\Com\Implementation\Com.c	 17177  #if (COM_TRANSPORT_PROTOCOL == STD_ON)
; ..\component\Com\Implementation\Com.c	 17178  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 17179    Com_CopyTxData
; ..\component\Com\Implementation\Com.c	 17180  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17181  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 17182   *
; ..\component\Com\Implementation\Com.c	 17183   *
; ..\component\Com\Implementation\Com.c	 17184   *
; ..\component\Com\Implementation\Com.c	 17185   *
; ..\component\Com\Implementation\Com.c	 17186   *
; ..\component\Com\Implementation\Com.c	 17187   *
; ..\component\Com\Implementation\Com.c	 17188   *
; ..\component\Com\Implementation\Com.c	 17189   *
; ..\component\Com\Implementation\Com.c	 17190   *
; ..\component\Com\Implementation\Com.c	 17191   *
; ..\component\Com\Implementation\Com.c	 17192   *
; ..\component\Com\Implementation\Com.c	 17193   *
; ..\component\Com\Implementation\Com.c	 17194   *
; ..\component\Com\Implementation\Com.c	 17195   *
; ..\component\Com\Implementation\Com.c	 17196  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17197  FUNC(BufReq_ReturnType, COM_CODE) Com_CopyTxData(PduIdType PduId, P2VAR(PduInfoType, AUTOMATIC, COM_APPL_VAR) PduInfoPtr, P2VAR(RetryInfoType, AUTOMATIC, COM_APPL_VAR) RetryInfoPtr, P2VAR(PduLengthType, AUTOMATIC, COM_APPL_VAR) TxDataCntPtr)       /* PRQA S 3673 */ /* MD_MSR_Rule8.13 */
; ..\component\Com\Implementation\Com.c	 17198  {
; ..\component\Com\Implementation\Com.c	 17199    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17200    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17201    BufReq_ReturnType retVal = BUFREQ_E_NOT_OK;   /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17202  
; ..\component\Com\Implementation\Com.c	 17203    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17204    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 17205    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 17206    {
; ..\component\Com\Implementation\Com.c	 17207      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 17208    }
; ..\component\Com\Implementation\Com.c	 17209  # if (COM_DEV_ERROR_DETECT == STD_ON )
; ..\component\Com\Implementation\Com.c	 17210    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 17211  #  if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17212    else if(PduId >= Com_GetSizeOfTxPduInfo())
; ..\component\Com\Implementation\Com.c	 17213    {
; ..\component\Com\Implementation\Com.c	 17214      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17215    }
; ..\component\Com\Implementation\Com.c	 17216  #   if (COM_INVALIDHNDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17217    else if(Com_IsInvalidHndOfTxPduInfo(PduId))
; ..\component\Com\Implementation\Com.c	 17218    {
; ..\component\Com\Implementation\Com.c	 17219      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17220    }
; ..\component\Com\Implementation\Com.c	 17221  #   endif
; ..\component\Com\Implementation\Com.c	 17222  #   if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17223    else if(!Com_IsTxTpInfoUsedOfTxPduInfo(PduId))        /* COV_COM_TP_ONLY */
; ..\component\Com\Implementation\Com.c	 17224    {
; ..\component\Com\Implementation\Com.c	 17225      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17226    }
; ..\component\Com\Implementation\Com.c	 17227  #   endif
; ..\component\Com\Implementation\Com.c	 17228  #  endif
; ..\component\Com\Implementation\Com.c	 17229    else if(PduInfoPtr == NULL_PTR)
; ..\component\Com\Implementation\Com.c	 17230    {
; ..\component\Com\Implementation\Com.c	 17231      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 17232    }
; ..\component\Com\Implementation\Com.c	 17233    else if((PduInfoPtr->SduDataPtr == NULL_PTR) && (PduInfoPtr->SduLength > 0u))
; ..\component\Com\Implementation\Com.c	 17234    {
; ..\component\Com\Implementation\Com.c	 17235      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 17236    }
; ..\component\Com\Implementation\Com.c	 17237    else if(TxDataCntPtr == NULL_PTR)
; ..\component\Com\Implementation\Com.c	 17238    {
; ..\component\Com\Implementation\Com.c	 17239      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 17240    }
; ..\component\Com\Implementation\Com.c	 17241  # endif
; ..\component\Com\Implementation\Com.c	 17242    else
; ..\component\Com\Implementation\Com.c	 17243    {
; ..\component\Com\Implementation\Com.c	 17244  # if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17245      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17246      /* #25 If I-PDU is active and TpDataState of RetryInfoPtr is not TP_DATARETRY */
; ..\component\Com\Implementation\Com.c	 17247      if(Com_IsTxPduGrpActive(PduId))     /* \trace SPEC-2736849 */
; ..\component\Com\Implementation\Com.c	 17248      {
; ..\component\Com\Implementation\Com.c	 17249        if((RetryInfoPtr == NULL_PTR) || (RetryInfoPtr->TpDataState != TP_DATARETRY))
; ..\component\Com\Implementation\Com.c	 17250        {
; ..\component\Com\Implementation\Com.c	 17251          Com_TxTpInfoIdxOfTxPduInfoType txTpPduInfoIdx = Com_GetTxTpInfoIdxOfTxPduInfo(PduId);
; ..\component\Com\Implementation\Com.c	 17252          /* #30 If TxTpConnectionState is... */
; ..\component\Com\Implementation\Com.c	 17253          switch (Com_GetTxTpConnectionState(txTpPduInfoIdx))
; ..\component\Com\Implementation\Com.c	 17254          {
; ..\component\Com\Implementation\Com.c	 17255              /* #40 ...TRANSMISSION_STARTED, switch to COPYING and Copy Tx Data */
; ..\component\Com\Implementation\Com.c	 17256            case COM_TRANSMISSION_STARTED_TXTPCONNECTIONSTATE:
; ..\component\Com\Implementation\Com.c	 17257            {
; ..\component\Com\Implementation\Com.c	 17258              Com_SetTxTpConnectionState(txTpPduInfoIdx, COM_COPYING_TXTPCONNECTIONSTATE);        /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 17259              /* No break required here. Copying operations shall be performed. */
; ..\component\Com\Implementation\Com.c	 17260            }
; ..\component\Com\Implementation\Com.c	 17261              /* #50 ...COPYING */
; ..\component\Com\Implementation\Com.c	 17262            case COM_COPYING_TXTPCONNECTIONSTATE:        /* PRQA S 2003 */ /* MD_Com_2003 */
; ..\component\Com\Implementation\Com.c	 17263            {
; ..\component\Com\Implementation\Com.c	 17264              /* #60 If enough data is present */
; ..\component\Com\Implementation\Com.c	 17265              if(PduInfoPtr->SduLength <= (Com_GetTxSduLength(PduId) - Com_GetTxTpWrittenBytesCounter(txTpPduInfoIdx)))
; ..\component\Com\Implementation\Com.c	 17266              {
; ..\component\Com\Implementation\Com.c	 17267                /* #65 Copy the provided data segment to the Tx PDU buffer and increment the WrittenBytesCouter by the passed SduLength */
; ..\component\Com\Implementation\Com.c	 17268                VStdMemCpyRamToRam(PduInfoPtr->SduDataPtr, Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxTpInfo(txTpPduInfoIdx) + Com_GetTxTpWrittenBytesCounter(txTpPduInfoIdx)), PduInfoPtr->SduLength);       /* PRQA S 0315, 2986 */ /* MD_MSR_VStdLibCopy, MD_Com_2985_2986 */ /* SBSW_COM_MEM_CPY */
; ..\component\Com\Implementation\Com.c	 17269                Com_SetTxTpWrittenBytesCounter(txTpPduInfoIdx, (Com_GetTxTpWrittenBytesCounter(txTpPduInfoIdx) + PduInfoPtr->SduLength)); /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 17270  
; ..\component\Com\Implementation\Com.c	 17271                /* #70 Set the passed TxDataCntPtr to number of remaining bytes in the Tx PDU buffer */
; ..\component\Com\Implementation\Com.c	 17272                *TxDataCntPtr = (Com_GetTxSduLength(PduId) - Com_GetTxTpWrittenBytesCounter(txTpPduInfoIdx));     /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 17273  
; ..\component\Com\Implementation\Com.c	 17274                /* #80 If all bytes are transmitted set the state to WAITING_FOR_CONFIRMATION */
; ..\component\Com\Implementation\Com.c	 17275                if(0u == *TxDataCntPtr)
; ..\component\Com\Implementation\Com.c	 17276                {
; ..\component\Com\Implementation\Com.c	 17277                  Com_SetTxTpConnectionState(txTpPduInfoIdx, COM_WAITING_FOR_CONFIRMATION_TXTPCONNECTIONSTATE);   /* SBSW_COM_CSL02 */
; ..\component\Com\Implementation\Com.c	 17278                }
; ..\component\Com\Implementation\Com.c	 17279                retVal = BUFREQ_OK;
; ..\component\Com\Implementation\Com.c	 17280              }
; ..\component\Com\Implementation\Com.c	 17281              /* #90 Otherwise set the passed TxDataCntPtr to number of remaining bytes in the Tx PDU buffer */
; ..\component\Com\Implementation\Com.c	 17282              else
; ..\component\Com\Implementation\Com.c	 17283              {
; ..\component\Com\Implementation\Com.c	 17284                *TxDataCntPtr = (Com_GetTxSduLength(PduId) - Com_GetTxTpWrittenBytesCounter(txTpPduInfoIdx));     /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 17285                retVal = BUFREQ_E_BUSY;
; ..\component\Com\Implementation\Com.c	 17286              }
; ..\component\Com\Implementation\Com.c	 17287              break;
; ..\component\Com\Implementation\Com.c	 17288            }
; ..\component\Com\Implementation\Com.c	 17289              /* #100 ...WAITING_FOR_CONFIRMATION and zero-sized segment shall be copy, return E_OK, otherwise reset the connection */
; ..\component\Com\Implementation\Com.c	 17290            case COM_WAITING_FOR_CONFIRMATION_TXTPCONNECTIONSTATE:
; ..\component\Com\Implementation\Com.c	 17291            {
; ..\component\Com\Implementation\Com.c	 17292              if(PduInfoPtr->SduLength == 0u)
; ..\component\Com\Implementation\Com.c	 17293              {
; ..\component\Com\Implementation\Com.c	 17294                *TxDataCntPtr = 0u;       /* SBSW_COM_PTR_API */
; ..\component\Com\Implementation\Com.c	 17295                retVal = BUFREQ_OK;
; ..\component\Com\Implementation\Com.c	 17296              }
; ..\component\Com\Implementation\Com.c	 17297              else
; ..\component\Com\Implementation\Com.c	 17298              {
; ..\component\Com\Implementation\Com.c	 17299                Com_ResetTxTpConnection(PduId);
; ..\component\Com\Implementation\Com.c	 17300              }
; ..\component\Com\Implementation\Com.c	 17301              break;
; ..\component\Com\Implementation\Com.c	 17302            }
; ..\component\Com\Implementation\Com.c	 17303              /* #110 ...READY, do nothing */
; ..\component\Com\Implementation\Com.c	 17304            default:
; ..\component\Com\Implementation\Com.c	 17305            {
; ..\component\Com\Implementation\Com.c	 17306              /* COM_READY_RXTPCONNECTIONSTATE */
; ..\component\Com\Implementation\Com.c	 17307              break;
; ..\component\Com\Implementation\Com.c	 17308            }
; ..\component\Com\Implementation\Com.c	 17309          }
; ..\component\Com\Implementation\Com.c	 17310        }
; ..\component\Com\Implementation\Com.c	 17311      }
; ..\component\Com\Implementation\Com.c	 17312  # else
; ..\component\Com\Implementation\Com.c	 17313      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17314  # endif
; ..\component\Com\Implementation\Com.c	 17315    }
; ..\component\Com\Implementation\Com.c	 17316  
; ..\component\Com\Implementation\Com.c	 17317    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17318  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 17319    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 17320    {
; ..\component\Com\Implementation\Com.c	 17321      Com_LMgt_CallDetErrorContinue(COMServiceId_CopyTxData, errorId);
; ..\component\Com\Implementation\Com.c	 17322    }
; ..\component\Com\Implementation\Com.c	 17323  # endif
; ..\component\Com\Implementation\Com.c	 17324  
; ..\component\Com\Implementation\Com.c	 17325    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17326    COM_DUMMY_STATEMENT(PduId);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17327    COM_DUMMY_STATEMENT(PduInfoPtr);      /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17328    COM_DUMMY_STATEMENT(RetryInfoPtr);    /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17329    COM_DUMMY_STATEMENT(TxDataCntPtr);    /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17330  
; ..\component\Com\Implementation\Com.c	 17331    return retVal;
; ..\component\Com\Implementation\Com.c	 17332  }       /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	 17333  #endif
; ..\component\Com\Implementation\Com.c	 17334  
; ..\component\Com\Implementation\Com.c	 17335  
; ..\component\Com\Implementation\Com.c	 17336  #if(COM_TRANSPORT_PROTOCOL == STD_ON)
; ..\component\Com\Implementation\Com.c	 17337  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 17338    Com_TpTxConfirmation
; ..\component\Com\Implementation\Com.c	 17339  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17340  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 17341   *
; ..\component\Com\Implementation\Com.c	 17342   *
; ..\component\Com\Implementation\Com.c	 17343   *
; ..\component\Com\Implementation\Com.c	 17344   *
; ..\component\Com\Implementation\Com.c	 17345   *
; ..\component\Com\Implementation\Com.c	 17346   *
; ..\component\Com\Implementation\Com.c	 17347   *
; ..\component\Com\Implementation\Com.c	 17348  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17349  FUNC(void, COM_CODE) Com_TpTxConfirmation(PduIdType PduId, Std_ReturnType Result)
; ..\component\Com\Implementation\Com.c	 17350  {
; ..\component\Com\Implementation\Com.c	 17351    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17352    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17353  
; ..\component\Com\Implementation\Com.c	 17354    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17355    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 17356    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 17357    {
; ..\component\Com\Implementation\Com.c	 17358      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 17359    }
; ..\component\Com\Implementation\Com.c	 17360  # if (COM_DEV_ERROR_DETECT == STD_ON )
; ..\component\Com\Implementation\Com.c	 17361    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 17362  #  if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17363    else if(PduId >= Com_GetSizeOfTxPduInfo())
; ..\component\Com\Implementation\Com.c	 17364    {
; ..\component\Com\Implementation\Com.c	 17365      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17366    }
; ..\component\Com\Implementation\Com.c	 17367  #   if (COM_INVALIDHNDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17368    else if(Com_IsInvalidHndOfTxPduInfo(PduId))
; ..\component\Com\Implementation\Com.c	 17369    {
; ..\component\Com\Implementation\Com.c	 17370      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17371    }
; ..\component\Com\Implementation\Com.c	 17372  #   endif
; ..\component\Com\Implementation\Com.c	 17373  #   if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17374    else if(!Com_IsTxTpInfoUsedOfTxPduInfo(PduId))        /* COV_COM_TP_ONLY */
; ..\component\Com\Implementation\Com.c	 17375    {
; ..\component\Com\Implementation\Com.c	 17376      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17377    }
; ..\component\Com\Implementation\Com.c	 17378  #   endif
; ..\component\Com\Implementation\Com.c	 17379  #  endif
; ..\component\Com\Implementation\Com.c	 17380  # endif
; ..\component\Com\Implementation\Com.c	 17381    else
; ..\component\Com\Implementation\Com.c	 17382    {
; ..\component\Com\Implementation\Com.c	 17383  # if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17384      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17385      /* #25 If I-PDU is active */
; ..\component\Com\Implementation\Com.c	 17386      if(Com_IsTxPduGrpActive(PduId))
; ..\component\Com\Implementation\Com.c	 17387      {
; ..\component\Com\Implementation\Com.c	 17388        Com_TxTpInfoIdxOfTxPduInfoType txTpPduInfoIdx = Com_GetTxTpInfoIdxOfTxPduInfo(PduId);
; ..\component\Com\Implementation\Com.c	 17389  
; ..\component\Com\Implementation\Com.c	 17390        /* #30 If the passed Result is E_OK and the state is WAITING_FOR_CONFIRMATION or TRANSMISSION_STARTED */
; ..\component\Com\Implementation\Com.c	 17391        if((Result == E_OK) && (Com_GetTxTpConnectionState(txTpPduInfoIdx) == COM_WAITING_FOR_CONFIRMATION_TXTPCONNECTIONSTATE))
; ..\component\Com\Implementation\Com.c	 17392        {
; ..\component\Com\Implementation\Com.c	 17393          /* #40 Call the normal Com_TxConfirmation */
; ..\component\Com\Implementation\Com.c	 17394          Com_TxConfirmation_Process(PduId);
; ..\component\Com\Implementation\Com.c	 17395        }
; ..\component\Com\Implementation\Com.c	 17396  
; ..\component\Com\Implementation\Com.c	 17397        /* #50 Prepare the TP parameters for the start of a new transmission */
; ..\component\Com\Implementation\Com.c	 17398        Com_ResetTxTpConnection(PduId);
; ..\component\Com\Implementation\Com.c	 17399      }
; ..\component\Com\Implementation\Com.c	 17400  # else
; ..\component\Com\Implementation\Com.c	 17401      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17402  # endif
; ..\component\Com\Implementation\Com.c	 17403    }
; ..\component\Com\Implementation\Com.c	 17404  
; ..\component\Com\Implementation\Com.c	 17405    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17406  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 17407    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 17408    {
; ..\component\Com\Implementation\Com.c	 17409      Com_LMgt_CallDetErrorContinue(COMServiceId_TpTxConfirmation, errorId);
; ..\component\Com\Implementation\Com.c	 17410    }
; ..\component\Com\Implementation\Com.c	 17411  # endif
; ..\component\Com\Implementation\Com.c	 17412  
; ..\component\Com\Implementation\Com.c	 17413    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17414    COM_DUMMY_STATEMENT(PduId);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17415    COM_DUMMY_STATEMENT(Result);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17416  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	 17417  #endif
; ..\component\Com\Implementation\Com.c	 17418  
; ..\component\Com\Implementation\Com.c	 17419  
; ..\component\Com\Implementation\Com.c	 17420  #if (COM_TRIGGER_TRANSMIT_API == STD_ON)
; ..\component\Com\Implementation\Com.c	 17421  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 17422    Com_TriggerTransmit
; ..\component\Com\Implementation\Com.c	 17423  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17424  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 17425   *
; ..\component\Com\Implementation\Com.c	 17426   *
; ..\component\Com\Implementation\Com.c	 17427   *
; ..\component\Com\Implementation\Com.c	 17428   *
; ..\component\Com\Implementation\Com.c	 17429  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17430  FUNC(Std_ReturnType, COM_CODE) Com_TriggerTransmit(PduIdType TxPduId, P2VAR(PduInfoType, AUTOMATIC, COM_APPL_VAR) PduInfoPtr)
; ..\component\Com\Implementation\Com.c	 17431  {
; ..\component\Com\Implementation\Com.c	 17432    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17433    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17434    uint8 retVal = E_NOT_OK;      /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17435  
; ..\component\Com\Implementation\Com.c	 17436    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17437    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 17438    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 17439    {
; ..\component\Com\Implementation\Com.c	 17440      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 17441    }
; ..\component\Com\Implementation\Com.c	 17442  # if (COM_DEV_ERROR_DETECT == STD_ON )  /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 17443    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 17444  #  if (COM_TXPDUINFO == STD_ON) /* COV_COM_VAR_DEPENDENT_SWITCH */
; ..\component\Com\Implementation\Com.c	 17445    else if(TxPduId >= Com_GetSizeOfTxPduInfo())
; ..\component\Com\Implementation\Com.c	 17446    {
; ..\component\Com\Implementation\Com.c	 17447      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17448    }
; ..\component\Com\Implementation\Com.c	 17449  #   if (COM_INVALIDHNDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17450    else if(Com_IsInvalidHndOfTxPduInfo(TxPduId))
; ..\component\Com\Implementation\Com.c	 17451    {
; ..\component\Com\Implementation\Com.c	 17452      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17453    }
; ..\component\Com\Implementation\Com.c	 17454  #   endif
; ..\component\Com\Implementation\Com.c	 17455  #  endif
; ..\component\Com\Implementation\Com.c	 17456    else if(PduInfoPtr == NULL_PTR)
; ..\component\Com\Implementation\Com.c	 17457    {
; ..\component\Com\Implementation\Com.c	 17458      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 17459    }
; ..\component\Com\Implementation\Com.c	 17460    else if((PduInfoPtr->SduDataPtr == NULL_PTR) && (PduInfoPtr->SduLength > 0u))
; ..\component\Com\Implementation\Com.c	 17461    {
; ..\component\Com\Implementation\Com.c	 17462      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 17463    }
; ..\component\Com\Implementation\Com.c	 17464  # endif
; ..\component\Com\Implementation\Com.c	 17465    else
; ..\component\Com\Implementation\Com.c	 17466    {
; ..\component\Com\Implementation\Com.c	 17467      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17468      /* #30 Do Trigger Transmit processing */
; ..\component\Com\Implementation\Com.c	 17469      retVal = Com_TriggerTransmit_Process(TxPduId, PduInfoPtr);  /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 17470    }
; ..\component\Com\Implementation\Com.c	 17471  
; ..\component\Com\Implementation\Com.c	 17472    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17473  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 17474    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */
; ..\component\Com\Implementation\Com.c	 17475    {
; ..\component\Com\Implementation\Com.c	 17476      Com_LMgt_CallDetErrorContinue(COMServiceId_TriggerTransmit, errorId);
; ..\component\Com\Implementation\Com.c	 17477    }
; ..\component\Com\Implementation\Com.c	 17478  # endif
; ..\component\Com\Implementation\Com.c	 17479  
; ..\component\Com\Implementation\Com.c	 17480    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17481    COM_DUMMY_STATEMENT(TxPduId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17482    COM_DUMMY_STATEMENT(PduInfoPtr);      /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17483  
; ..\component\Com\Implementation\Com.c	 17484    return retVal;
; ..\component\Com\Implementation\Com.c	 17485  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	 17486  #endif
; ..\component\Com\Implementation\Com.c	 17487  
; ..\component\Com\Implementation\Com.c	 17488  #if (COM_TXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17489  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 17490  Com_TxLLIf_Transmit
; ..\component\Com\Implementation\Com.c	 17491  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17492  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 17493   *
; ..\component\Com\Implementation\Com.c	 17494   *
; ..\component\Com\Implementation\Com.c	 17495   *
; ..\component\Com\Implementation\Com.c	 17496   *
; ..\component\Com\Implementation\Com.c	 17497   *
; ..\component\Com\Implementation\Com.c	 17498   *
; ..\component\Com\Implementation\Com.c	 17499   *
; ..\component\Com\Implementation\Com.c	 17500   *
; ..\component\Com\Implementation\Com.c	 17501   *
; ..\component\Com\Implementation\Com.c	 17502   *
; ..\component\Com\Implementation\Com.c	 17503   *
; ..\component\Com\Implementation\Com.c	 17504   *
; ..\component\Com\Implementation\Com.c	 17505   *
; ..\component\Com\Implementation\Com.c	 17506   *
; ..\component\Com\Implementation\Com.c	 17507   *
; ..\component\Com\Implementation\Com.c	 17508   *
; ..\component\Com\Implementation\Com.c	 17509  
; ..\component\Com\Implementation\Com.c	 17510  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17511  FUNC(Std_ReturnType, COM_CODE) Com_TxLLIf_Transmit(PduIdType ComTxPduId)        /* PRQA S 1505 */ /* MD_MSR_Rule8.7 */
; Function Com_TxLLIf_Transmit
.L213:
Com_TxLLIf_Transmit:	.type	func
	sub.a	a10,#8
.L915:

; ..\component\Com\Implementation\Com.c	 17512  {
; ..\component\Com\Implementation\Com.c	 17513    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17514    Std_ReturnType retVal = E_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17515  
; ..\component\Com\Implementation\Com.c	 17516    PduInfoType PduInfo;
; ..\component\Com\Implementation\Com.c	 17517  
; ..\component\Com\Implementation\Com.c	 17518  # if (COM_TXPDUCALLOUTFUNCPTRUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17519    boolean CalloutResult;
; ..\component\Com\Implementation\Com.c	 17520  # endif
; ..\component\Com\Implementation\Com.c	 17521  
; ..\component\Com\Implementation\Com.c	 17522    PduInfo.SduDataPtr = NULL_PTR;        /* PRQA S 2982 */ /* MD_Com_2982 */
	mov.a	a15,#0
.L1147:
	st.a	[a10],a15
.L1148:

; ..\component\Com\Implementation\Com.c	 17523  
; ..\component\Com\Implementation\Com.c	 17524  # if (COM_TXBUFFERUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17525    /* #10 If the ComIPdu is no zero byte PDU */
; ..\component\Com\Implementation\Com.c	 17526    if(Com_IsTxBufferUsedOfTxPduInfo(ComTxPduId)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
	mul	d15,d4,#6
	movh.a	a15,#@his(Com_TxPduInfo)
	lea	a15,[a15]@los(Com_TxPduInfo)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L1149:
	jeq	d15,#0,.L124
.L1150:

; ..\component\Com\Implementation\Com.c	 17527    {
; ..\component\Com\Implementation\Com.c	 17528  #  if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON && COM_TXBUFFERMETADATAUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17529      /* For TP transmission with meta data, point to meta data */
; ..\component\Com\Implementation\Com.c	 17530      /* #20 If the ComIPdu is a TP PDU AND has configured meta data */
; ..\component\Com\Implementation\Com.c	 17531      if(Com_IsTxTpInfoUsedOfTxPduInfo(ComTxPduId) && Com_IsTxBufferMetaDataUsedOfTxPduInfo(ComTxPduId))  /* COV_COM_TP_ONLY */
; ..\component\Com\Implementation\Com.c	 17532      {
; ..\component\Com\Implementation\Com.c	 17533        /* #30 Set the SduDataPtr to the meta data */
; ..\component\Com\Implementation\Com.c	 17534        PduInfo.SduDataPtr = Com_GetAddrTxBuffer(Com_GetTxBufferMetaDataStartIdxOfTxPduInfo(ComTxPduId));
; ..\component\Com\Implementation\Com.c	 17535      }
; ..\component\Com\Implementation\Com.c	 17536      else
; ..\component\Com\Implementation\Com.c	 17537  #  endif
; ..\component\Com\Implementation\Com.c	 17538      {
; ..\component\Com\Implementation\Com.c	 17539        /* #40 otherwise, set the SduDataPtr to the PDU data buffer */
; ..\component\Com\Implementation\Com.c	 17540        PduInfo.SduDataPtr = Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxPduInfo(ComTxPduId));
	ld.bu	d15,[a15]4
	movh.a	a15,#@his(Com_TxBuffer)
	lea	a15,[a15]@los(Com_TxBuffer)
	addsc.a	a15,a15,d15,#0
.L1151:
	st.a	[a10],a15
.L124:

; ..\component\Com\Implementation\Com.c	 17541      }
; ..\component\Com\Implementation\Com.c	 17542    }
; ..\component\Com\Implementation\Com.c	 17543    /* #60 otherwise set the SduDataPtr to NULL_PTR */
; ..\component\Com\Implementation\Com.c	 17544  # endif
; ..\component\Com\Implementation\Com.c	 17545  
; ..\component\Com\Implementation\Com.c	 17546  # if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17547    /* #80 If the ComIPdu is a TP PDU */
; ..\component\Com\Implementation\Com.c	 17548    if(Com_IsTxTpInfoUsedOfTxPduInfo(ComTxPduId)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 17549    {
; ..\component\Com\Implementation\Com.c	 17550      /* #90 Set the SduLength, if the ComIPdu is in READY state. Otherwise skip transmission */
; ..\component\Com\Implementation\Com.c	 17551      Com_TxTpInfoIdxOfTxPduInfoType txTpPduInfoIdx = Com_GetTxTpInfoIdxOfTxPduInfo(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 17552      if(Com_GetTxTpConnectionState(txTpPduInfoIdx) == COM_READY_TXTPCONNECTIONSTATE)     /* COV_COM_PERIODIC_PDU_REQUIRED */
; ..\component\Com\Implementation\Com.c	 17553      {
; ..\component\Com\Implementation\Com.c	 17554        /* \trace SPEC-2736903 */
; ..\component\Com\Implementation\Com.c	 17555        PduInfo.SduLength = (PduLengthType) Com_GetTxSduLength(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 17556      }
; ..\component\Com\Implementation\Com.c	 17557      else
; ..\component\Com\Implementation\Com.c	 17558      {
; ..\component\Com\Implementation\Com.c	 17559        /* \trace SPEC-2736899 */
; ..\component\Com\Implementation\Com.c	 17560        retVal = E_NOT_OK;
; ..\component\Com\Implementation\Com.c	 17561      }
; ..\component\Com\Implementation\Com.c	 17562    }
; ..\component\Com\Implementation\Com.c	 17563    /* #100 otherwise, set the SduLength to the current TxSduLength or to the PDU length with meta data length (if configured) */
; ..\component\Com\Implementation\Com.c	 17564    else
; ..\component\Com\Implementation\Com.c	 17565  # endif
; ..\component\Com\Implementation\Com.c	 17566    {
; ..\component\Com\Implementation\Com.c	 17567  # if (COM_TXBUFFERMETADATAUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17568      /* meta data exists and it is not TP, use length with meta data */
; ..\component\Com\Implementation\Com.c	 17569      PduInfo.SduLength = Com_GetPduWithMetaDataLengthOfTxPduInfo(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 17570  # else
; ..\component\Com\Implementation\Com.c	 17571      /* no meta data exists or it is TP, use IPduLength */
; ..\component\Com\Implementation\Com.c	 17572      PduInfo.SduLength = (PduLengthType) Com_GetTxSduLength(ComTxPduId);
	movh.a	a15,#@his(Com_TxSduLength)
	lea	a15,[a15]@los(Com_TxSduLength)
	addsc.a	a15,a15,d4,#0
.L1152:

; ..\component\Com\Implementation\Com.c	 17573  # endif
; ..\component\Com\Implementation\Com.c	 17574    }
; ..\component\Com\Implementation\Com.c	 17575  # if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17576    /* #120 If the ComIPdu is not a TP PDU or was initially already in READY state */
; ..\component\Com\Implementation\Com.c	 17577    if(retVal == E_OK)    /* COV_COM_PERIODIC_PDU_REQUIRED */
; ..\component\Com\Implementation\Com.c	 17578  # endif
; ..\component\Com\Implementation\Com.c	 17579    {
; ..\component\Com\Implementation\Com.c	 17580  # if (COM_TXPDUCALLOUTFUNCPTRUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17581      /* #130 Call the configured callout function */
; ..\component\Com\Implementation\Com.c	 17582      CalloutResult = Com_TxLLIf_GetTxPduCalloutFuncPtr(ComTxPduId, &PduInfo);    /* SBSW_COM_FCTCALL_STACKPTR */
; ..\component\Com\Implementation\Com.c	 17583  
; ..\component\Com\Implementation\Com.c	 17584      /* #140 If the callout return value is positive */
; ..\component\Com\Implementation\Com.c	 17585      if(CalloutResult == TRUE)
; ..\component\Com\Implementation\Com.c	 17586  # endif
; ..\component\Com\Implementation\Com.c	 17587      {
; ..\component\Com\Implementation\Com.c	 17588  # if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17589        /* #150 If the ComIPdu is a TP PDU, set the state variable to TRANSMISSION_STARTED or to WAITING_FOR_CONFIRMATION for zero-sized Pdu */
; ..\component\Com\Implementation\Com.c	 17590        if(Com_IsTxTpInfoUsedOfTxPduInfo(ComTxPduId))     /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 17591        {
; ..\component\Com\Implementation\Com.c	 17592  #  if (COM_EXISTS_UINT8_DYN_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17593          if(Com_GetTxSduLength(ComTxPduId) == 0u)
; ..\component\Com\Implementation\Com.c	 17594          {
; ..\component\Com\Implementation\Com.c	 17595            Com_SetTxTpConnectionState(Com_GetTxTpInfoIdxOfTxPduInfo(ComTxPduId), COM_WAITING_FOR_CONFIRMATION_TXTPCONNECTIONSTATE);      /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	 17596          }
; ..\component\Com\Implementation\Com.c	 17597          else
; ..\component\Com\Implementation\Com.c	 17598  #  endif
; ..\component\Com\Implementation\Com.c	 17599          {
; ..\component\Com\Implementation\Com.c	 17600            Com_SetTxTpConnectionState(Com_GetTxTpInfoIdxOfTxPduInfo(ComTxPduId), COM_TRANSMISSION_STARTED_TXTPCONNECTIONSTATE);  /* SBSW_COM_CSL02_CSL03 */
; ..\component\Com\Implementation\Com.c	 17601          }
; ..\component\Com\Implementation\Com.c	 17602        }
; ..\component\Com\Implementation\Com.c	 17603  # endif
; ..\component\Com\Implementation\Com.c	 17604  # if (COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17605        /* #160 Set the WaitingForConfirmation flag */
; ..\component\Com\Implementation\Com.c	 17606        Com_SetWaitingForConfirmation(ComTxPduId, TRUE);  /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 17607  # endif
; ..\component\Com\Implementation\Com.c	 17608        /* #170 Initiate the transmit of a ComIPdu by a call of PduR_ComTransmit */
; ..\component\Com\Implementation\Com.c	 17609        retVal = PduR_ComTransmit(Com_GetExternalIdOfTxPduInfo(ComTxPduId), &PduInfo);    /* SBSW_COM_FCTCALL_STACKPTR */
	mov.aa	a4,a10
.L1153:
	ld.bu	d15,[a15]
.L1154:
	st.b	[a10]4,d15
.L1155:
	j	PduR_ComTransmit
.L677:
	
__Com_TxLLIf_Transmit_function_end:
	.size	Com_TxLLIf_Transmit,__Com_TxLLIf_Transmit_function_end-Com_TxLLIf_Transmit
.L328:
	; End of function
	
	.sdecl	'.text.Com.Com_SwitchIpduTxMode',code,cluster('Com_SwitchIpduTxMode')
	.sect	'.text.Com.Com_SwitchIpduTxMode'
	.align	2
	
	.global	Com_SwitchIpduTxMode

; ..\component\Com\Implementation\Com.c	 17610  
; ..\component\Com\Implementation\Com.c	 17611  # if ((COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON) || (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON) || (COM_EXISTS_TRANSMIT_CLRUBOFTXPDUINFO == STD_ON) || (COM_CBKTXERRFUNCPTRINDUSEDOFTXPDUINFO == STD_ON))
; ..\component\Com\Implementation\Com.c	 17612        /* #180 Set ComIPdu Attributes depending on the value of retVal */
; ..\component\Com\Implementation\Com.c	 17613        Com_TxLLIf_SetTxAttributes(ComTxPduId, retVal);
; ..\component\Com\Implementation\Com.c	 17614  # endif
; ..\component\Com\Implementation\Com.c	 17615      }
; ..\component\Com\Implementation\Com.c	 17616  
; ..\component\Com\Implementation\Com.c	 17617  # if (COM_TXBUFFERMETADATAUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17618      /* write default meta data to buffer, ignoring the result of the transmission */
; ..\component\Com\Implementation\Com.c	 17619      /* #190 Set the meta data buffer back to the meta data initial value (If meta data feature is enabled) */
; ..\component\Com\Implementation\Com.c	 17620      Com_TxLLIf_CpyInitMetaDataToBffr(ComTxPduId);
; ..\component\Com\Implementation\Com.c	 17621  # endif
; ..\component\Com\Implementation\Com.c	 17622    }
; ..\component\Com\Implementation\Com.c	 17623    return retVal;
; ..\component\Com\Implementation\Com.c	 17624  }
; ..\component\Com\Implementation\Com.c	 17625  #endif
; ..\component\Com\Implementation\Com.c	 17626  
; ..\component\Com\Implementation\Com.c	 17627  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 17628    Com_SwitchIpduTxMode
; ..\component\Com\Implementation\Com.c	 17629  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17630  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 17631   *
; ..\component\Com\Implementation\Com.c	 17632   *
; ..\component\Com\Implementation\Com.c	 17633   *
; ..\component\Com\Implementation\Com.c	 17634   *
; ..\component\Com\Implementation\Com.c	 17635   *
; ..\component\Com\Implementation\Com.c	 17636   *
; ..\component\Com\Implementation\Com.c	 17637  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17638  FUNC(void, COM_CODE) Com_SwitchIpduTxMode(PduIdType PduId, boolean Mode)
; Function Com_SwitchIpduTxMode
.L215:
Com_SwitchIpduTxMode:	.type	func

; ..\component\Com\Implementation\Com.c	 17639  {
; ..\component\Com\Implementation\Com.c	 17640    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17641    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17642  
; ..\component\Com\Implementation\Com.c	 17643    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17644    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 17645    if(!Com_IsInitialized())
	mov	d7,#0
	fcall	.cocofun_8
	jne	d15,#0,.L126
.L1160:

; ..\component\Com\Implementation\Com.c	 17646    {
; ..\component\Com\Implementation\Com.c	 17647      errorId = COM_E_UNINIT;
	mov	d7,#2
	j	.L127
.L126:

; ..\component\Com\Implementation\Com.c	 17648    }
; ..\component\Com\Implementation\Com.c	 17649  #if (COM_DEV_ERROR_DETECT == STD_ON )   /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 17650    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 17651  # if (COM_TXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17652    else if(PduId >= Com_GetSizeOfTxModeInfo())
	jlt.u	d4,#3,.L128
.L1161:

; ..\component\Com\Implementation\Com.c	 17653    {
; ..\component\Com\Implementation\Com.c	 17654      errorId = COM_E_PARAM;
	mov	d7,#1
	j	.L129
.L128:

; ..\component\Com\Implementation\Com.c	 17655    }
; ..\component\Com\Implementation\Com.c	 17656  #  if (COM_INVALIDHNDOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17657    else if(Com_IsInvalidHndOfTxModeInfo(PduId))
; ..\component\Com\Implementation\Com.c	 17658    {
; ..\component\Com\Implementation\Com.c	 17659      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17660    }
; ..\component\Com\Implementation\Com.c	 17661  #  endif
; ..\component\Com\Implementation\Com.c	 17662  # endif
; ..\component\Com\Implementation\Com.c	 17663  #endif
; ..\component\Com\Implementation\Com.c	 17664    else
; ..\component\Com\Implementation\Com.c	 17665    {
; ..\component\Com\Implementation\Com.c	 17666      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17667  #if (COM_TXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17668      /* #30 If the passed tx mode differs form the current tx mode, update the current tx mode value and initialize the new tx mode */
; ..\component\Com\Implementation\Com.c	 17669      if(Com_IsCurrentTxMode(PduId) != Mode)
	movh.a	a15,#@his(Com_CurrentTxMode)
	lea	a15,[a15]@los(Com_CurrentTxMode)
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
	ne	d15,d15,#0
.L1162:
	jeq	d15,d5,.L130
.L1163:

; ..\component\Com\Implementation\Com.c	 17670      {
; ..\component\Com\Implementation\Com.c	 17671        Com_SetCurrentTxMode(PduId, Mode);        /* SBSW_COM_CSL02 */
	st.b	[a15],d5
.L685:
	movh.a	a15,#@his(Com_TxModeInfo)
	lea	a15,[a15]@los(Com_TxModeInfo)
	addsc.a	a15,a15,d4,#1
	ld.bu	d15,[a15]1

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
	jeq	d5,#0,.L131
	movh.a	a15,#@his(Com_TxModeTrue)
	lea	a15,[a15]@los(Com_TxModeTrue)

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
	j	.L132
.L131:
	movh.a	a15,#@his(Com_TxModeFalse)
	lea	a15,[a15]@los(Com_TxModeFalse)

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
.L132:
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L1164:
	movh.a	a15,#@his(Com_CyclicSendRequest)
.L1165:
	ne	d15,d15,#0
	lea	a15,[a15]@los(Com_CyclicSendRequest)
	addsc.a	a15,a15,d4,#0
.L1166:

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
	jeq	d15,#0,.L133
.L1167:
	mov	d15,#1
	st.b	[a15],d15
.L1168:
	movh.a	a15,#@his(Com_CycleTimeCnt)
	lea	a15,[a15]@los(Com_CycleTimeCnt)
.L1169:

; ..\component\Com\Implementation\Com.c	 13493      Com_SetCyclicSendRequest(ComTxPduId, TRUE); /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */      (inlined)
	j	.L134

; ..\component\Com\Implementation\Com.c	 13491    if(Com_TxModeHdlr_IsPeriodicTxMode(ComTxPduId) == TRUE)      (inlined)
.L133:
	st.b	[a15],d15
.L1170:
	fcall	.cocofun_5

; ..\component\Com\Implementation\Com.c	 13508    else      (inlined)
.L134:
	addsc.a	a15,a15,d4,#0
	st.b	[a15],d15
.L130:
.L129:
.L127:

; ..\component\Com\Implementation\Com.c	 17672        Com_TxModeHdlr_InitTxMode(PduId);
; ..\component\Com\Implementation\Com.c	 17673  
; ..\component\Com\Implementation\Com.c	 17674  # if ((COM_TIMEOFFSETOFTXMODETRUE == STD_ON) || (COM_TIMEOFFSETOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 17675        /* #40 If new mode is cyclic (MIXED or DIRECT) */
; ..\component\Com\Implementation\Com.c	 17676        if(Com_IsCyclicSendRequest(PduId) == TRUE)
; ..\component\Com\Implementation\Com.c	 17677        {
; ..\component\Com\Implementation\Com.c	 17678          Com_CycleTimeCntType currentTimeOffset = Com_TxModeHdlr_GetCurrentTimeOffset(PduId);    /* COV_COM_SETCYCLETIMECOUNT */
; ..\component\Com\Implementation\Com.c	 17679          /* #50 If TimeOffset is configured, set periodic counter to FirstTimeOffset */
; ..\component\Com\Implementation\Com.c	 17680          if(currentTimeOffset > 1U)
; ..\component\Com\Implementation\Com.c	 17681          {
; ..\component\Com\Implementation\Com.c	 17682  #  if (COM_MINIMUMDELAYOFTXMODEINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17683            /* If MDT remaining time is smaller than FirstTimeOffset */
; ..\component\Com\Implementation\Com.c	 17684            if(Com_GetDelayTimeCnt(PduId) < currentTimeOffset)
; ..\component\Com\Implementation\Com.c	 17685            {
; ..\component\Com\Implementation\Com.c	 17686              /* Clear TransmitRequest, as elapsing MDT shall not trigger transmission */
; ..\component\Com\Implementation\Com.c	 17687              Com_SetTransmitRequest(PduId, FALSE);       /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 17688              /* Set period to FirstTimeOffset */
; ..\component\Com\Implementation\Com.c	 17689              Com_SetCycleTimeCnt(PduId, currentTimeOffset);      /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 17690            }
; ..\component\Com\Implementation\Com.c	 17691  #  else
; ..\component\Com\Implementation\Com.c	 17692            /* Set period to FirstTimeOffset */
; ..\component\Com\Implementation\Com.c	 17693            Com_SetCycleTimeCnt(PduId, currentTimeOffset);        /* SBSW_COM_IDXPARAM_INTERNALFCT_CSL02 */
; ..\component\Com\Implementation\Com.c	 17694  #  endif
; ..\component\Com\Implementation\Com.c	 17695          }
; ..\component\Com\Implementation\Com.c	 17696        }
; ..\component\Com\Implementation\Com.c	 17697  # endif
; ..\component\Com\Implementation\Com.c	 17698      }
; ..\component\Com\Implementation\Com.c	 17699  #else
; ..\component\Com\Implementation\Com.c	 17700      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17701  #endif
; ..\component\Com\Implementation\Com.c	 17702    }
; ..\component\Com\Implementation\Com.c	 17703  
; ..\component\Com\Implementation\Com.c	 17704    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17705  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 17706  
; ..\component\Com\Implementation\Com.c	 17707    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
	jeq	d7,#0,.L135
.L1171:

; ..\component\Com\Implementation\Com.c	 17708    {
; ..\component\Com\Implementation\Com.c	 17709      Com_LMgt_CallDetErrorContinue(COMServiceId_SwitchIpduTxMode, errorId);
	fcall	.cocofun_10
.L916:
	mov	d6,#39
	j	Det_ReportError
.L135:

; ..\component\Com\Implementation\Com.c	 17710    }
; ..\component\Com\Implementation\Com.c	 17711  #endif
; ..\component\Com\Implementation\Com.c	 17712  
; ..\component\Com\Implementation\Com.c	 17713    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17714    COM_DUMMY_STATEMENT(PduId);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17715    COM_DUMMY_STATEMENT(Mode);    /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17716  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
	ret
.L681:
	
__Com_SwitchIpduTxMode_function_end:
	.size	Com_SwitchIpduTxMode,__Com_SwitchIpduTxMode_function_end-Com_SwitchIpduTxMode
.L333:
	; End of function
	
	.sdecl	'.text.Com.Com_SendSignal',code,cluster('Com_SendSignal')
	.sect	'.text.Com.Com_SendSignal'
	.align	2
	
	.global	Com_SendSignal

; ..\component\Com\Implementation\Com.c	 17717  
; ..\component\Com\Implementation\Com.c	 17718  
; ..\component\Com\Implementation\Com.c	 17719  /* jet: ComSendSignal snippet */
; ..\component\Com\Implementation\Com.c	 17720  #if (COM_TRANSPORT_PROTOCOL == STD_ON)
; ..\component\Com\Implementation\Com.c	 17721  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 17722    Com_SendDynSignal
; ..\component\Com\Implementation\Com.c	 17723   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17724  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 17725   *
; ..\component\Com\Implementation\Com.c	 17726   *
; ..\component\Com\Implementation\Com.c	 17727   *
; ..\component\Com\Implementation\Com.c	 17728   *
; ..\component\Com\Implementation\Com.c	 17729   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17730  FUNC(uint8, COM_CODE) Com_SendDynSignal(Com_SignalIdType SignalId, P2CONST(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr, uint16 Length)
; ..\component\Com\Implementation\Com.c	 17731  {
; ..\component\Com\Implementation\Com.c	 17732    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17733    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17734    uint8 retVal = COM_SERVICE_NOT_AVAILABLE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17735  
; ..\component\Com\Implementation\Com.c	 17736    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17737    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 17738    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 17739    {
; ..\component\Com\Implementation\Com.c	 17740      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 17741    }
; ..\component\Com\Implementation\Com.c	 17742  # if (COM_DEV_ERROR_DETECT == STD_ON)
; ..\component\Com\Implementation\Com.c	 17743    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 17744  #  if (COM_TXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17745    else if(SignalId >= Com_GetSizeOfTxSigInfo())
; ..\component\Com\Implementation\Com.c	 17746    {
; ..\component\Com\Implementation\Com.c	 17747      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17748    }
; ..\component\Com\Implementation\Com.c	 17749  #   if (COM_INVALIDHNDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17750    else if(Com_IsInvalidHndOfTxSigInfo(SignalId))
; ..\component\Com\Implementation\Com.c	 17751    {
; ..\component\Com\Implementation\Com.c	 17752      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17753    }
; ..\component\Com\Implementation\Com.c	 17754  #   endif
; ..\component\Com\Implementation\Com.c	 17755  #   if (COM_TXTPINFOUSEDOFTXPDUINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17756    else if(!Com_IsTxTpInfoUsedOfTxPduInfo(Com_GetTxPduInfoIdxOfTxSigInfo(SignalId)))     /* COV_COM_TP_ONLY */
; ..\component\Com\Implementation\Com.c	 17757    {
; ..\component\Com\Implementation\Com.c	 17758      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17759    }
; ..\component\Com\Implementation\Com.c	 17760  #   endif
; ..\component\Com\Implementation\Com.c	 17761  #   if (COM_EXISTS_UINT8_DYN_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17762    else if(Com_GetApplTypeOfTxSigInfo(SignalId) != COM_UINT8_DYN_APPLTYPEOFTXSIGINFO)    /* PRQA S 2992, 2996 */ /* MD_Com_2992, MD_Com_2996 */ /* COV_COM_UINT8_DYN_APPLTYPE */
; ..\component\Com\Implementation\Com.c	 17763    {
; ..\component\Com\Implementation\Com.c	 17764      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17765    }
; ..\component\Com\Implementation\Com.c	 17766    else if(Length > Com_GetByteLengthOfTxSigInfo(SignalId))
; ..\component\Com\Implementation\Com.c	 17767    {
; ..\component\Com\Implementation\Com.c	 17768      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17769    }
; ..\component\Com\Implementation\Com.c	 17770  #   endif
; ..\component\Com\Implementation\Com.c	 17771  #  endif
; ..\component\Com\Implementation\Com.c	 17772    else if(SignalDataPtr == NULL_PTR)
; ..\component\Com\Implementation\Com.c	 17773    {
; ..\component\Com\Implementation\Com.c	 17774      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 17775    }
; ..\component\Com\Implementation\Com.c	 17776  # endif
; ..\component\Com\Implementation\Com.c	 17777    else
; ..\component\Com\Implementation\Com.c	 17778    {
; ..\component\Com\Implementation\Com.c	 17779      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17780  # if (COM_EXISTS_UINT8_DYN_APPLTYPEOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17781      SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 17782      /* #30 Process the passed Tx ComSignal */
; ..\component\Com\Implementation\Com.c	 17783      retVal = Com_SendSignal_Processing(SignalId, SignalDataPtr, Length);        /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 17784      SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 17785  # else
; ..\component\Com\Implementation\Com.c	 17786      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17787  # endif
; ..\component\Com\Implementation\Com.c	 17788    }
; ..\component\Com\Implementation\Com.c	 17789  
; ..\component\Com\Implementation\Com.c	 17790    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17791  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 17792    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 17793    {
; ..\component\Com\Implementation\Com.c	 17794      Com_LMgt_CallDetErrorContinue(COMServiceId_SendDynSignal, errorId);
; ..\component\Com\Implementation\Com.c	 17795    }
; ..\component\Com\Implementation\Com.c	 17796  # endif
; ..\component\Com\Implementation\Com.c	 17797  
; ..\component\Com\Implementation\Com.c	 17798    COM_DUMMY_STATEMENT(Length);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17799    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17800    COM_DUMMY_STATEMENT(SignalId);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17801    COM_DUMMY_STATEMENT(SignalDataPtr);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17802  
; ..\component\Com\Implementation\Com.c	 17803    return retVal;
; ..\component\Com\Implementation\Com.c	 17804  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	 17805  #endif
; ..\component\Com\Implementation\Com.c	 17806  
; ..\component\Com\Implementation\Com.c	 17807  
; ..\component\Com\Implementation\Com.c	 17808  /* jet: ComSendSignal snippet */
; ..\component\Com\Implementation\Com.c	 17809  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 17810    Com_SendSignal
; ..\component\Com\Implementation\Com.c	 17811   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17812  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 17813   *
; ..\component\Com\Implementation\Com.c	 17814   *
; ..\component\Com\Implementation\Com.c	 17815   *
; ..\component\Com\Implementation\Com.c	 17816   *
; ..\component\Com\Implementation\Com.c	 17817   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17818  FUNC(uint8, COM_CODE) Com_SendSignal(Com_SignalIdType SignalId, P2CONST(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr)
; Function Com_SendSignal
.L217:
Com_SendSignal:	.type	func
	mov	d8,d4
	mov.aa	a12,a4
.L917:

; ..\component\Com\Implementation\Com.c	 17819  {
; ..\component\Com\Implementation\Com.c	 17820    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17821    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
	mov	d9,#0
.L694:

; ..\component\Com\Implementation\Com.c	 17822    uint8 retVal = COM_SERVICE_NOT_AVAILABLE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17823  
; ..\component\Com\Implementation\Com.c	 17824    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17825    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 17826    if(!Com_IsInitialized())
	mov	d10,#128
	fcall	.cocofun_8
.L695:
	jne	d15,#0,.L136
.L1176:

; ..\component\Com\Implementation\Com.c	 17827    {
; ..\component\Com\Implementation\Com.c	 17828      errorId = COM_E_UNINIT;
	mov	d9,#2
	j	.L137
.L136:

; ..\component\Com\Implementation\Com.c	 17829    }
; ..\component\Com\Implementation\Com.c	 17830  #if (COM_DEV_ERROR_DETECT == STD_ON)    /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 17831    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 17832  # if (COM_TXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17833    else if(SignalId >= Com_GetSizeOfTxSigInfo())
	jlt.u	d8,#4,.L138
.L1177:

; ..\component\Com\Implementation\Com.c	 17834    {
; ..\component\Com\Implementation\Com.c	 17835      errorId = COM_E_PARAM;
	mov	d9,#1
	j	.L139
.L138:

; ..\component\Com\Implementation\Com.c	 17836    }
; ..\component\Com\Implementation\Com.c	 17837  #  if (COM_INVALIDHNDOFTXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17838    else if(Com_IsInvalidHndOfTxSigInfo(SignalId))
; ..\component\Com\Implementation\Com.c	 17839    {
; ..\component\Com\Implementation\Com.c	 17840      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17841    }
; ..\component\Com\Implementation\Com.c	 17842  #  endif
; ..\component\Com\Implementation\Com.c	 17843  # endif
; ..\component\Com\Implementation\Com.c	 17844    else if(SignalDataPtr == NULL_PTR)    /* COV_COM_UINT8_DYN_APPLTYPE */
	jnz.a	a12,.L140
.L1178:

; ..\component\Com\Implementation\Com.c	 17845    {
; ..\component\Com\Implementation\Com.c	 17846      errorId = COM_E_PARAM_POINTER;
	mov	d9,#3
	j	.L141
.L140:

; ..\component\Com\Implementation\Com.c	 17847    }
; ..\component\Com\Implementation\Com.c	 17848  #endif
; ..\component\Com\Implementation\Com.c	 17849    else
; ..\component\Com\Implementation\Com.c	 17850    {
; ..\component\Com\Implementation\Com.c	 17851      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17852  #if (COM_TXSIGINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17853      SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
	call	SuspendAllInterrupts
.L704:
	mul	d15,d8,#6
	movh.a	a15,#@his(Com_TxSigInfo)
	lea	a15,[a15]@los(Com_TxSigInfo)
	addsc.a	a15,a15,d15,#0
.L1179:
	mov	d10,#0
.L708:
	ld.bu	d15,[a15]1
.L709:
	ld.bu	d0,[a15]4
.L720:

; ..\component\Com\Implementation\Com.c	 14372      if(Com_IsTxBufferUsedOfTxSigInfo(idxTxSigInfo))     /* PRQA S 2842 */ /* MD_Com_2842 */ /* COV_COM_WRITESIGNAL_TXBUFFER */      (inlined)
	jeq	d15,#0,.L142
.L722:

; ..\component\Com\Implementation\Com.c	  6425    switch (Com_GetBusAccOfTxSigInfo(SignalId))      (inlined)
	jne	d15,#1,.L143
.L1180:
	ld.bu	d15,[a15]3
	movh.a	a15,#@his(Com_TxBuffer)
	lea	a15,[a15]@los(Com_TxBuffer)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a12]
	st.b	[a15],d15

; ..\component\Com\Implementation\Com.c	  6581      default:   /* COV_COM_MISRA */      (inlined)
.L143:

; ..\component\Com\Implementation\Com.c	 14372      if(Com_IsTxBufferUsedOfTxSigInfo(idxTxSigInfo))     /* PRQA S 2842 */ /* MD_Com_2842 */ /* COV_COM_WRITESIGNAL_TXBUFFER */      (inlined)
.L142:
	fcall	.cocofun_2
	addsc.a	a15,a15,d0,#0
	ld.bu	d15,[a15]
.L1181:

; ..\component\Com\Implementation\Com.c	 17854      /* #30 Process the passed Tx ComSignal */
; ..\component\Com\Implementation\Com.c	 17855      retVal = Com_SendSignal_Processing(SignalId, SignalDataPtr, 0);     /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 17856      SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
	sel	d10,d15,d10,#128
	call	ResumeAllInterrupts
.L141:
.L139:
.L137:

; ..\component\Com\Implementation\Com.c	 17857  #else
; ..\component\Com\Implementation\Com.c	 17858      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17859  #endif
; ..\component\Com\Implementation\Com.c	 17860    }
; ..\component\Com\Implementation\Com.c	 17861  
; ..\component\Com\Implementation\Com.c	 17862    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17863  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 17864    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
	jeq	d9,#0,.L145
.L1182:

; ..\component\Com\Implementation\Com.c	 17865    {
; ..\component\Com\Implementation\Com.c	 17866      Com_LMgt_CallDetErrorContinue(COMServiceId_SendSignal, errorId);
	fcall	.cocofun_10
	mov	d6,#10
	mov	d7,d9
	call	Det_ReportError
.L145:

; ..\component\Com\Implementation\Com.c	 17867    }
; ..\component\Com\Implementation\Com.c	 17868  #endif
; ..\component\Com\Implementation\Com.c	 17869  
; ..\component\Com\Implementation\Com.c	 17870    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17871    COM_DUMMY_STATEMENT(SignalId);        /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17872    COM_DUMMY_STATEMENT(SignalDataPtr);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17873  
; ..\component\Com\Implementation\Com.c	 17874    return retVal;
; ..\component\Com\Implementation\Com.c	 17875  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
	mov	d2,d10
	ret
.L687:
	
__Com_SendSignal_function_end:
	.size	Com_SendSignal,__Com_SendSignal_function_end-Com_SendSignal
.L338:
	; End of function
	
	.sdecl	'.text.Com.Com_SendSignalGroup',code,cluster('Com_SendSignalGroup')
	.sect	'.text.Com.Com_SendSignalGroup'
	.align	2
	
	.global	Com_SendSignalGroup

; ..\component\Com\Implementation\Com.c	 17876  
; ..\component\Com\Implementation\Com.c	 17877  
; ..\component\Com\Implementation\Com.c	 17878  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 17879    Com_SendSignalGroup
; ..\component\Com\Implementation\Com.c	 17880   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17881  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 17882   *
; ..\component\Com\Implementation\Com.c	 17883   *
; ..\component\Com\Implementation\Com.c	 17884   *
; ..\component\Com\Implementation\Com.c	 17885   *
; ..\component\Com\Implementation\Com.c	 17886   *
; ..\component\Com\Implementation\Com.c	 17887   **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17888  FUNC(uint8, COM_CODE) Com_SendSignalGroup(Com_SignalGroupIdType SignalGroupId)  /* PRQA S 1505 */ /* MD_MSR_Rule8.7 */
; Function Com_SendSignalGroup
.L219:
Com_SendSignalGroup:	.type	func

; ..\component\Com\Implementation\Com.c	 17889  {
; ..\component\Com\Implementation\Com.c	 17890    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17891    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17892    uint8 retVal = COM_SERVICE_NOT_AVAILABLE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17893  
; ..\component\Com\Implementation\Com.c	 17894    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17895    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 17896    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 17897    {
; ..\component\Com\Implementation\Com.c	 17898      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 17899    }
; ..\component\Com\Implementation\Com.c	 17900  #if (COM_DEV_ERROR_DETECT == STD_ON )   /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 17901    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 17902  # if (COM_TXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17903    else if(SignalGroupId >= Com_GetSizeOfTxSigGrpInfo()) /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 17904    {
; ..\component\Com\Implementation\Com.c	 17905      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17906    }
; ..\component\Com\Implementation\Com.c	 17907  #  if (COM_INVALIDHNDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17908    else if(Com_IsInvalidHndOfTxSigGrpInfo(SignalGroupId))
; ..\component\Com\Implementation\Com.c	 17909    {
; ..\component\Com\Implementation\Com.c	 17910      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17911    }
; ..\component\Com\Implementation\Com.c	 17912  #  endif
; ..\component\Com\Implementation\Com.c	 17913  #  if (COM_ARRAYACCESSUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17914    else if(Com_IsArrayAccessUsedOfTxSigGrpInfo(SignalGroupId))
; ..\component\Com\Implementation\Com.c	 17915    {
; ..\component\Com\Implementation\Com.c	 17916      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17917    }
; ..\component\Com\Implementation\Com.c	 17918  #  endif
; ..\component\Com\Implementation\Com.c	 17919  # endif
; ..\component\Com\Implementation\Com.c	 17920  #endif
; ..\component\Com\Implementation\Com.c	 17921    else
; ..\component\Com\Implementation\Com.c	 17922    {
; ..\component\Com\Implementation\Com.c	 17923      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17924  #if (COM_TXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17925      P2CONST(uint8, AUTOMATIC, COM_APPL_VAR) shdBuffer = NULL_PTR;
; ..\component\Com\Implementation\Com.c	 17926  # if (COM_TXBUFFERUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17927      /* #30 If the ComSignalGroup has a shadow buffer, get the address of this shadow buffer */
; ..\component\Com\Implementation\Com.c	 17928      if(Com_IsTxBufferUsedOfTxSigGrpInfo(SignalGroupId)) /* COV_COM_FEATURE_ALWAYS_TRUE_TX */
; ..\component\Com\Implementation\Com.c	 17929      {
; ..\component\Com\Implementation\Com.c	 17930        shdBuffer = Com_GetAddrTxBuffer(Com_GetTxBufferStartIdxOfTxSigGrpInfo(SignalGroupId));
; ..\component\Com\Implementation\Com.c	 17931      }
; ..\component\Com\Implementation\Com.c	 17932  # endif
; ..\component\Com\Implementation\Com.c	 17933      SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 17934      /* #40 Process the passed ComSignalGroup */
; ..\component\Com\Implementation\Com.c	 17935      retVal = Com_SendSignalGroup_Processing(SignalGroupId, shdBuffer);  /* SBSW_COM_FCTCALL_WITH_P2CONST */
; ..\component\Com\Implementation\Com.c	 17936      SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 17937  #else
; ..\component\Com\Implementation\Com.c	 17938      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17939  #endif
; ..\component\Com\Implementation\Com.c	 17940    }
; ..\component\Com\Implementation\Com.c	 17941  
; ..\component\Com\Implementation\Com.c	 17942    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17943  #if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 17944    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 17945    {
; ..\component\Com\Implementation\Com.c	 17946      Com_LMgt_CallDetErrorContinue(COMServiceId_SendSignalGroup, errorId);
	fcall	.cocofun_10
.L1187:
	mov	d6,#13
	fcall	.cocofun_1
.L1188:
	call	Det_ReportError
.L1189:

; ..\component\Com\Implementation\Com.c	 17947    }
; ..\component\Com\Implementation\Com.c	 17948  #endif
; ..\component\Com\Implementation\Com.c	 17949  
; ..\component\Com\Implementation\Com.c	 17950    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17951    COM_DUMMY_STATEMENT(SignalGroupId);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 17952  
; ..\component\Com\Implementation\Com.c	 17953    return retVal;
; ..\component\Com\Implementation\Com.c	 17954  }
	mov	d2,#128
	ret
.L730:
	
__Com_SendSignalGroup_function_end:
	.size	Com_SendSignalGroup,__Com_SendSignalGroup_function_end-Com_SendSignalGroup
.L343:
	; End of function
	
	.calls	'Com_Init','VStdLib_MemCpy'
	.calls	'Com_Init','Det_ReportError'
	.calls	'Com_DeInit','Com_ClearIpduGroupVector'
	.calls	'Com_DeInit','Com_IpduGroupControl'
	.calls	'Com_DeInit','Det_ReportError'
	.calls	'Com_IpduGroupControl','SuspendAllInterrupts'
	.calls	'Com_IpduGroupControl','ResumeAllInterrupts'
	.calls	'Com_IpduGroupControl','VStdLib_MemCpy'
	.calls	'Com_IpduGroupControl','Det_ReportError'
	.calls	'Com_ReceptionDMControl','Det_ReportError'
	.calls	'Com_IpduGroupStart','Det_ReportError'
	.calls	'Com_IpduGroupStop','Det_ReportError'
	.calls	'Com_EnableReceptionDM','Det_ReportError'
	.calls	'Com_DisableReceptionDM','Det_ReportError'
	.calls	'Com_MainFunctionRx','SuspendAllInterrupts'
	.calls	'Com_MainFunctionRx','ResumeAllInterrupts'
	.calls	'Com_MainFunctionTx','SuspendAllInterrupts'
	.calls	'Com_MainFunctionTx','ResumeAllInterrupts'
	.calls	'Com_MainFunctionTx','Com_TxLLIf_Transmit'
	.calls	'Com_GetConfigurationId','Det_ReportError'
	.calls	'Com_TriggerIPDUSend','Det_ReportError'
	.calls	'Com_ClearIpduGroupVector','VStdLib_MemSet'
	.calls	'Com_SetIpduGroup','Det_ReportError'
	.calls	'Com_RxIndication','SuspendAllInterrupts'
	.calls	'Com_RxIndication','VStdLib_MemCpy'
	.calls	'Com_RxIndication','ResumeAllInterrupts'
	.calls	'Com_RxIndication','Det_ReportError'
	.calls	'Com_ReceiveSignal','Det_ReportError'
	.calls	'Com_ReceiveSignalGroup','Det_ReportError'
	.calls	'Com_InvalidateSignal','Det_ReportError'
	.calls	'Com_InvalidateSignalGroup','Det_ReportError'
	.calls	'Com_TxConfirmation','SuspendAllInterrupts'
	.calls	'Com_TxConfirmation','ResumeAllInterrupts'
	.calls	'Com_TxConfirmation','Det_ReportError'
	.calls	'Com_TxLLIf_Transmit','PduR_ComTransmit'
	.calls	'Com_SwitchIpduTxMode','Det_ReportError'
	.calls	'Com_SendSignal','SuspendAllInterrupts'
	.calls	'Com_SendSignal','ResumeAllInterrupts'
	.calls	'Com_SendSignal','Det_ReportError'
	.calls	'Com_SendSignalGroup','Det_ReportError'
	.calls	'Com_Init','.cocofun_3'
	.calls	'Com_Init','.cocofun_4'
	.calls	'Com_Init','.cocofun_5'
	.calls	'Com_Init','.cocofun_2'
	.calls	'Com_DeInit','.cocofun_10'
	.calls	'Com_IpduGroupControl','.cocofun_8'
	.calls	'Com_IpduGroupControl','.cocofun_3'
	.calls	'Com_IpduGroupControl','.cocofun_4'
	.calls	'Com_IpduGroupControl','.cocofun_5'
	.calls	'Com_ReceptionDMControl','.cocofun_7'
	.calls	'Com_ReceptionDMControl','.cocofun_9'
	.calls	'.cocofun_9','.cocofun_10'
	.calls	'.cocofun_7','.cocofun_8'
	.calls	'Com_IpduGroupStart','.cocofun_10'
	.calls	'Com_IpduGroupStart','.cocofun_1'
	.calls	'.cocofun_1','.cocofun_8'
	.calls	'Com_IpduGroupStop','.cocofun_10'
	.calls	'Com_IpduGroupStop','.cocofun_1'
	.calls	'Com_EnableReceptionDM','.cocofun_9'
	.calls	'Com_EnableReceptionDM','.cocofun_1'
	.calls	'Com_DisableReceptionDM','.cocofun_9'
	.calls	'Com_DisableReceptionDM','.cocofun_1'
	.calls	'Com_MainFunctionRx','.cocofun_8'
	.calls	'Com_MainFunctionRx','.cocofun_3'
	.calls	'Com_MainFunctionTx','.cocofun_6'
	.calls	'Com_MainFunctionTx','.cocofun_2'
	.calls	'.cocofun_6','.cocofun_8'
	.calls	'Com_GetConfigurationId','.cocofun_7'
	.calls	'Com_GetConfigurationId','.cocofun_10'
	.calls	'Com_GetStatus','.cocofun_8'
	.calls	'Com_TriggerIPDUSend','.cocofun_8'
	.calls	'Com_TriggerIPDUSend','.cocofun_2'
	.calls	'Com_TriggerIPDUSend','.cocofun_5'
	.calls	'Com_TriggerIPDUSend','.cocofun_10'
	.calls	'Com_SetIpduGroup','.cocofun_8'
	.calls	'Com_SetIpduGroup','.cocofun_10'
	.calls	'Com_RxIndication','.cocofun_6'
	.calls	'Com_RxIndication','.cocofun_10'
	.calls	'Com_ReceiveSignal','.cocofun_8'
	.calls	'Com_ReceiveSignal','.cocofun_3'
	.calls	'Com_ReceiveSignal','.cocofun_10'
	.calls	'Com_ReceiveSignalGroup','.cocofun_10'
	.calls	'Com_ReceiveSignalGroup','.cocofun_1'
	.calls	'Com_InvalidateSignal','.cocofun_10'
	.calls	'Com_InvalidateSignal','.cocofun_1'
	.calls	'Com_InvalidateSignalGroup','.cocofun_10'
	.calls	'Com_InvalidateSignalGroup','.cocofun_1'
	.calls	'Com_TxConfirmation','.cocofun_6'
	.calls	'Com_TxConfirmation','.cocofun_10'
	.calls	'Com_SwitchIpduTxMode','.cocofun_8'
	.calls	'Com_SwitchIpduTxMode','.cocofun_5'
	.calls	'Com_SwitchIpduTxMode','.cocofun_10'
	.calls	'Com_SendSignal','.cocofun_8'
	.calls	'Com_SendSignal','.cocofun_2'
	.calls	'Com_SendSignal','.cocofun_10'
	.calls	'Com_SendSignalGroup','.cocofun_10'
	.calls	'Com_SendSignalGroup','.cocofun_1'
	.calls	'Com_Init','',32
	.calls	'.cocofun_5','',0
	.calls	'.cocofun_4','',0
	.calls	'.cocofun_3','',0
	.calls	'.cocofun_2','',0
	.calls	'Com_InitMemory','',0
	.calls	'Com_DeInit','',8
	.calls	'.cocofun_10','',0
	.calls	'Com_IpduGroupControl','',24
	.calls	'.cocofun_8','',0
	.calls	'Com_ReceptionDMControl','',0
	.calls	'.cocofun_9','',0
	.calls	'.cocofun_7','',0
	.calls	'Com_IpduGroupStart','',0
	.calls	'.cocofun_1','',0
	.calls	'Com_IpduGroupStop','',0
	.calls	'Com_EnableReceptionDM','',0
	.calls	'Com_DisableReceptionDM','',0
	.calls	'Com_MainFunctionRx','',16
	.calls	'Com_MainFunctionTx','',8
	.calls	'.cocofun_6','',0
	.calls	'Com_GetConfigurationId','',0
	.calls	'Com_GetStatus','',0
	.calls	'Com_TriggerIPDUSend','',0
	.calls	'Com_ClearIpduGroupVector','',0
	.calls	'Com_SetIpduGroup','',0
	.calls	'Com_RxIndication','',0
	.calls	'Com_ReceiveSignal','',0
	.calls	'Com_ReceiveSignalGroup','',0
	.calls	'Com_InvalidateSignal','',0
	.calls	'Com_InvalidateSignalGroup','',0
	.calls	'Com_TxConfirmation','',0
	.calls	'Com_TxLLIf_Transmit','',8
	.calls	'Com_SwitchIpduTxMode','',0
	.calls	'Com_SendSignal','',0
	.extern	Com_ConstValueSInt8
	.extern	Com_PduGrpVector
	.extern	Com_RxAccessInfo
	.extern	Com_RxPduInfo
	.extern	Com_TxCyclicPdu
	.extern	Com_TxModeFalse
	.extern	Com_TxModeInfo
	.extern	Com_TxModeTrue
	.extern	Com_TxPduInfo
	.extern	Com_TxPduInitValue
	.extern	Com_TxSigInfo
	.extern	Com_CurrentTxMode
	.extern	Com_CycleTimeCnt
	.extern	Com_CyclicSendRequest
	.extern	Com_HandleRxPduDeferred
	.extern	Com_Initialized
	.extern	Com_RxDefPduBuffer
	.extern	Com_RxDeferredProcessingISRLockCounter
	.extern	Com_RxIPduGroupISRLockCounter
	.extern	Com_RxPduGrpActive
	.extern	Com_RxSigBufferSInt8
	.extern	Com_TransmitRequest
	.extern	Com_TxBuffer
	.extern	Com_TxCycleCounterDivisorCounter
	.extern	Com_TxCyclicProcessingISRLockCounter
	.extern	Com_TxIPduGroupISRLockCounter
	.extern	Com_TxPduGrpActive
	.extern	Com_TxProcessingISRLockCounter
	.extern	Com_TxSduLength
	.extern	Det_ReportError
	.extern	VStdLib_MemSet
	.extern	VStdLib_MemCpy
	.extern	PduR_ComTransmit
	.extern	SuspendAllInterrupts
	.extern	ResumeAllInterrupts
	.calls	'Com_SendSignalGroup','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L221:
	.word	21116
	.half	3
	.word	.L222
	.byte	4
.L220:
	.byte	1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L223
.L405:
	.byte	2
	.byte	'unsigned char',0,1,8
.L538:
	.byte	3
	.byte	'Com_ActivateRxComIPdu',0,3,1,244,32,35,1,1
.L541:
	.byte	4
	.byte	'rxPduIdx',0,1,244,32,79
	.word	131
.L543:
	.byte	4
	.byte	'initialize',0,1,244,32,97
	.word	131
.L545:
	.byte	5,6,0,0
.L596:
	.byte	3
	.byte	'Com_ActivateTxComIPdu',0,3,1,171,33,35,1,1
.L599:
	.byte	4
	.byte	'ComTxPduId',0,1,171,33,79
	.word	131
.L601:
	.byte	4
	.byte	'initialize',0,1,171,33,99
	.word	131
.L603:
	.byte	5,6,0,0
.L450:
	.byte	3
	.byte	'Com_LMgt_InitRxIpdu',0,3,1,129,32,35,1,1
.L451:
	.byte	4
	.byte	'ComPduId',0,1,129,32,65
	.word	131
.L453:
	.byte	5,6,0,0
.L482:
	.byte	3
	.byte	'Com_LMgt_InitTxIpdu',0,3,1,166,32,35,1,1
.L485:
	.byte	4
	.byte	'ComPduId',0,1,166,32,77
	.word	131
.L487:
	.byte	5,6,6,6,0,0,3
	.byte	'Com_LMgt_DeactivateRxPdu',0,3,1,228,31,35,1,1,4
	.byte	'ComPduId',0,1,228,31,70
	.word	131
	.byte	6,0
.L516:
	.byte	7
	.word	131
.L521:
	.byte	3
	.byte	'Com_IpduGroupControl_UpdateRxComIPduState',0,3,1,219,33,35,1,1
.L523:
	.byte	4
	.byte	'ipduGroupVector',0,1,219,33,97
	.word	449
.L525:
	.byte	4
	.byte	'initialize',0,1,219,33,122
	.word	131
.L527:
	.byte	5
.L531:
	.byte	5
.L535:
	.byte	6,0,6,6,6,6,6,0,0
.L558:
	.byte	3
	.byte	'Com_DeactivateRxComIPdu',0,3,1,151,34,35,1,1
.L559:
	.byte	4
	.byte	'ComRxPduId',0,1,151,34,81
	.word	131
.L561:
	.byte	6,0
.L612:
	.byte	3
	.byte	'Com_DeactivateTxComIPdu',0,3,1,179,34,35,1,1
.L613:
	.byte	4
	.byte	'txPduId',0,1,179,34,81
	.word	131
.L615:
	.byte	5,6,0,0
.L588:
	.byte	3
	.byte	'Com_IpduGroupControl_SetRequestedActiveState',0,3,1,184,35,35,1,1
.L589:
	.byte	4
	.byte	'ComTxPduId',0,1,184,35,102
	.word	131
.L591:
	.byte	4
	.byte	'initialize',0,1,184,35,122
	.word	131
.L593:
	.byte	4
	.byte	'bRequestedActiveState',0,1,184,35,142,1
	.word	131
.L595:
	.byte	5,6,6,0,0
.L579:
	.byte	8
	.byte	'Com_IpduGroupControl_EvaluateActiveState',0,3,1,211,35,38
	.word	131
	.byte	1,1
.L580:
	.byte	4
	.byte	'ipduGroupVector',0,1,211,35,99
	.word	449
.L582:
	.byte	4
	.byte	'ComTxPduId',0,1,211,35,138,1
	.word	131
.L584:
	.byte	6,0
.L477:
	.byte	3
	.byte	'Com_InitTx',0,3,1,235,37,35,1,1
.L479:
	.byte	5,6,0,0
.L443:
	.byte	3
	.byte	'Com_InitRx',0,3,1,145,38,35,1,1
.L446:
	.byte	5,6,6,0,0
.L528:
	.byte	3
	.byte	'Com_RxIPduGroup_EnterExclusiveArea',0,3,1,173,38,35,1,1
.L530:
	.byte	6,0
.L564:
	.byte	3
	.byte	'Com_RxIPduGroup_ExitExclusiveArea',0,3,1,187,38,35,1,1
.L567:
	.byte	6,0
.L562:
	.byte	3
	.byte	'Com_RxIPduGroup_ThresholdCheck',0,3,1,203,38,35,1,1
.L563:
	.byte	5,6,6,0,0
.L570:
	.byte	3
	.byte	'Com_TxIPduGroup_EnterExclusiveArea',0,3,1,227,38,35,1,1
.L572:
	.byte	6,0
.L621:
	.byte	3
	.byte	'Com_TxIPduGroup_ExitExclusiveArea',0,3,1,241,38,35,1,1
.L623:
	.byte	6,0
.L576:
	.byte	3
	.byte	'Com_TxIPduGroup_ThresholdCheck',0,3,1,129,39,35,1,1
.L577:
	.byte	5,6,6,0,0
.L630:
	.byte	2
	.byte	'unsigned short int',0,2,7,9
	.word	131
.L728:
	.byte	7
	.word	1233
.L721:
	.byte	3
	.byte	'Com_Signal_WriteSignal',0,3,1,140,50,35,1,1
.L723:
	.byte	4
	.byte	'SignalId',0,1,140,50,75
	.word	1211
.L725:
	.byte	4
	.byte	'SignalApplSourcePtr',0,1,140,50,126
	.word	1238
.L727:
	.byte	6,0,7
	.word	131
.L640:
	.byte	2
	.byte	'unsigned long int',0,4,7
.L792:
	.byte	3
	.byte	'Com_Signal_ReadSignalApplTypeSpecific',0,3,1,158,53,35,1,1
.L794:
	.byte	4
	.byte	'rxAccessInfoId',0,1,158,53,98
	.word	131
.L796:
	.byte	4
	.byte	'SignalApplDestPtr',0,1,159,53,111
	.word	1323
.L798:
	.byte	4
	.byte	'SignalBusSourcePtr',0,1,160,53,115
	.word	1238
.L800:
	.byte	4
	.byte	'destLength',0,1,160,53,142,1
	.word	1328
.L802:
	.byte	6,0
.L465:
	.byte	3
	.byte	'Com_Signal_SetRxSigBufferValue',0,3,1,202,56,35,1,1
.L466:
	.byte	4
	.byte	'idxRxAccessInfo',0,1,202,56,91
	.word	131
.L468:
	.byte	4
	.byte	'idxDestValue',0,1,202,56,121
	.word	1328
.L470:
	.byte	4
	.byte	'idxSrcValue',0,1,202,56,148,1
	.word	1328
.L472:
	.byte	6,0,2
	.byte	'char',0,1,6
.L783:
	.byte	8
	.byte	'Com_Signal_ReadSignal_SInt8',0,3,1,212,51,36
	.word	1607
	.byte	1,1
.L785:
	.byte	4
	.byte	'idxRxAccessInfo',0,1,212,51,89
	.word	131
.L787:
	.byte	4
	.byte	'SignalBusSourcePtr',0,1,212,51,148,1
	.word	1238
.L789:
	.byte	5,6,0,0,10
	.byte	'SduDataPtrType',0,2,196,1,54
	.word	1323
.L418:
	.byte	11,2,197,1,9,8,12
	.byte	'SduDataPtr',0
	.word	1713
	.byte	4,2,35,0,12
	.byte	'SduLength',0
	.word	131
	.byte	1,2,35,4,0,9
	.word	1737
.L407:
	.byte	7
	.word	1783
.L410:
	.byte	8
	.byte	'Com_RxIndication_Processing',0,3,1,197,67,38
	.word	131
	.byte	1,1
.L411:
	.byte	4
	.byte	'RxPduId',0,1,197,67,76
	.word	131
.L413:
	.byte	4
	.byte	'PduInfoPtr',0,1,197,67,132,1
	.word	1788
.L415:
	.byte	5
.L416:
	.byte	6,6,0,0,7
	.word	131
	.byte	13
	.byte	'void',0
.L661:
	.byte	7
	.word	1881
.L665:
	.byte	3
	.byte	'Com_ReceiveSignal_GetRxSigBuffer',0,3,1,199,69,35,1,1
.L666:
	.byte	4
	.byte	'idxRxAccessInfo',0,1,199,69,85
	.word	1211
.L668:
	.byte	4
	.byte	'SignalDataPtr',0,1,199,69,139,1
	.word	1887
.L670:
	.byte	6,0
.L454:
	.byte	3
	.byte	'Com_RxProcessing_InitRxIpdu',0,3,1,138,74,35,1,1
.L455:
	.byte	4
	.byte	'ComRxPduId',0,1,138,74,73
	.word	131
.L457:
	.byte	5
.L459:
	.byte	5
.L463:
	.byte	6,0,6,0,0
.L733:
	.byte	3
	.byte	'Com_RxDeferredPduProcessing',0,3,1,238,74,35,1,1
.L735:
	.byte	5,6,6,6,0,0,7
	.word	1328
.L736:
	.byte	11,1,236,3,9,12,12
	.byte	'ptrToCache',0
	.word	2089
	.byte	4,2,35,0,12
	.byte	'cacheIndex',0
	.word	1328
	.byte	4,2,35,4,12
	.byte	'cacheSize',0
	.word	1328
	.byte	4,2,35,8,0,7
	.word	2094
.L742:
	.byte	3
	.byte	'Com_RxDeferredPduProcessing_IterateOverAllRxPdus',0,3,1,187,75,35,1,1
.L743:
	.byte	4
	.byte	'deferredFctPtrCacheStrct',0,1,187,75,134,1
	.word	2160
.L745:
	.byte	5,6,6,6,0,0
.L420:
	.byte	3
	.byte	'Com_RxIndication_ProcessPdu',0,3,1,180,76,35,1,1
.L423:
	.byte	4
	.byte	'ComPduId',0,1,180,76,73
	.word	131
.L425:
	.byte	4
	.byte	'PduInfoPtr',0,1,180,76,130,1
	.word	1788
.L427:
	.byte	5
.L430:
	.byte	6,0,0
.L759:
	.byte	3
	.byte	'Com_RxProcessing_RxPduSigEvent',0,3,1,251,82,35,1,1
.L760:
	.byte	4
	.byte	'comRxPduInfoIdx',0,1,251,82,76
	.word	131
.L762:
	.byte	4
	.byte	'PduInfoPtr',0,1,251,82,140,1
	.word	1788
.L764:
	.byte	4
	.byte	'fctPtrCacheStrctPtr',0,1,251,82,202,1
	.word	2160
.L766:
	.byte	5
.L768:
	.byte	6,6,0,0
.L752:
	.byte	3
	.byte	'Com_RxProcessDeferredPDU',0,3,1,223,75,35,1,1
.L753:
	.byte	4
	.byte	'idxRxPduInfo',0,1,223,75,70
	.word	131
.L755:
	.byte	4
	.byte	'deferredfctPtrCacheStrctPtr',0,1,223,75,134,1
	.word	2160
.L757:
	.byte	5,6,0,0
.L738:
	.byte	3
	.byte	'Com_RxProcessing_EnterExclusiveArea_Deferred',0,3,1,167,95,35,1,1
.L741:
	.byte	6,0
.L808:
	.byte	3
	.byte	'Com_RxProcessing_ExitExclusiveArea_Deferred',0,3,1,181,95,35,1,1
.L811:
	.byte	6,0
.L804:
	.byte	3
	.byte	'Com_RxProcessing_ThresholdCheck_Deferred',0,3,1,199,95,35,1,1
.L805:
	.byte	4
	.byte	'fctPtrCacheStrctPtr',0,1,199,95,126
	.word	2160
.L807:
	.byte	5,6,6,0,0
.L746:
	.byte	8
	.byte	'Com_RxProcessing_IsDeferredProcessingRequested',0,3,1,226,95,38
	.word	131
	.byte	1,1
.L748:
	.byte	4
	.byte	'idxRxPduInfo',0,1,226,95,109
	.word	131
.L750:
	.byte	6,0,14,1,224,3,9,1,15
	.byte	'VALID',0,0,15
	.byte	'INVALID',0,1,15
	.byte	'FILTERED',0,2,0
.L770:
	.byte	8
	.byte	'Com_RxSignalProcessing',0,3,1,189,88,52
	.word	2834
	.byte	1,1
.L771:
	.byte	4
	.byte	'PduInfoPtr',0,1,189,88,122
	.word	1788
.L773:
	.byte	4
	.byte	'idxRxAccessInfo',0,1,189,88,169,1
	.word	131
.L775:
	.byte	5,6,0,0
.L776:
	.byte	8
	.byte	'Com_RxSignalProcessing_SINT8',0,3,1,235,89,52
	.word	2834
	.byte	1,1
.L778:
	.byte	4
	.byte	'PduInfoPtr',0,1,235,89,128,1
	.word	1788
.L780:
	.byte	4
	.byte	'idxRxAccessInfo',0,1,235,89,165,1
	.word	131
.L782:
	.byte	5
.L803:
	.byte	6,6,0,0
.L495:
	.byte	3
	.byte	'Com_TxBuffer_InitTxIpdu',0,3,1,254,95,35,1,1
.L496:
	.byte	4
	.byte	'ComPduId',0,1,254,95,81
	.word	131
.L498:
	.byte	6,0
.L489:
	.byte	3
	.byte	'Com_TxLLIf_InitTxIpdu',0,3,1,132,100,35,1,1
.L490:
	.byte	4
	.byte	'ComPduId',0,1,132,100,79
	.word	131
.L492:
	.byte	6,0
.L435:
	.byte	3
	.byte	'Com_TxConfirmation_Process',0,3,1,243,101,35,1,1
.L436:
	.byte	4
	.byte	'TxPduId',0,1,243,101,72
	.word	131
.L438:
	.byte	6,0
.L499:
	.byte	3
	.byte	'Com_TxModeHdlr_InitTxIpdu',0,3,1,196,102,35,1,1
.L500:
	.byte	4
	.byte	'ComPduId',0,1,196,102,71
	.word	131
.L502:
	.byte	5,6,0,0
.L814:
	.byte	3
	.byte	'Com_TxModeHdlr_MainFunctionTx_CycleCounter',0,3,1,221,103,35,1,1
.L816:
	.byte	5,6,6,6,6,0,0
.L821:
	.byte	3
	.byte	'Com_TxModeHdlr_EnterExclusiveArea_CycleCounter',0,3,1,251,103,35,1,1
.L823:
	.byte	6,0
.L832:
	.byte	3
	.byte	'Com_TxModeHdlr_ExitExclusiveArea_CycleCounter',0,3,1,137,104,35,1,1
.L833:
	.byte	6,0
.L824:
	.byte	3
	.byte	'Com_TxModeHdlr_ThresholdCheck_CycleCounter',0,3,1,153,104,35,1,1
.L827:
	.byte	5,6,6,0,0
.L846:
	.byte	3
	.byte	'Com_TxModeHdlr_MainFunctionTx_Transmit',0,3,1,177,104,35,1,1
.L847:
	.byte	5,6,6,6,6,0,0
.L861:
	.byte	3
	.byte	'Com_TxModeHdlr_EnterExclusiveArea',0,3,1,205,104,35,1,1
.L862:
	.byte	6,0
.L858:
	.byte	3
	.byte	'Com_TxModeHdlr_ExitExclusiveArea',0,3,1,219,104,35,1,1
.L860:
	.byte	6,0
.L849:
	.byte	3
	.byte	'Com_TxModeHdlr_ThresholdCheck',0,3,1,235,104,35,1,1
.L852:
	.byte	5,6,6,0,0
.L854:
	.byte	3
	.byte	'Com_TxModeHdlr_MainFunctionTx_ProcessTransmit',0,3,1,133,105,35,1,1
.L855:
	.byte	4
	.byte	'ComTxPduId',0,1,133,105,91
	.word	131
.L857:
	.byte	6,0,9
	.word	131
.L503:
	.byte	3
	.byte	'Com_TxModeHdlr_InitTxMode',0,3,1,175,105,35,1,1
.L505:
	.byte	4
	.byte	'ComTxPduId',0,1,175,105,89
	.word	3747
.L507:
	.byte	6,0,9
	.word	131
.L616:
	.byte	3
	.byte	'Com_TxModeHdlr_StopTxIpdus',0,3,1,181,106,35,1,1
.L618:
	.byte	4
	.byte	'ComTxPduId',0,1,181,106,90
	.word	3808
.L620:
	.byte	6,0,9
	.word	131
.L648:
	.byte	3
	.byte	'Com_TxModeHdlr_TriggerIpduSendOnceDeferred',0,3,1,211,106,35,1,1
.L649:
	.byte	4
	.byte	'ComTxPduId',0,1,211,106,106
	.word	3870
.L651:
	.byte	6,0
.L836:
	.byte	3
	.byte	'Com_TxModeHdlr_SetTransmitRequestAndCycleCnt',0,3,1,244,106,35,1,1
.L838:
	.byte	4
	.byte	'ComTxPduId',0,1,244,106,90
	.word	131
.L840:
	.byte	6,0,9
	.word	1881
.L689:
	.byte	7
	.word	4023
.L707:
	.byte	3
	.byte	'Com_SendSignal_WriteSignal',0,3,1,230,111,35,1,1
.L710:
	.byte	4
	.byte	'idxTxSigInfo',0,1,230,111,79
	.word	1211
.L712:
	.byte	4
	.byte	'SignalDataPtr',0,1,230,111,133,1
	.word	4028
.L714:
	.byte	4
	.byte	'Length',0,1,230,111,155,1
	.word	1211
.L716:
	.byte	4
	.byte	'idxTxPduInfo',0,1,230,111,173,1
	.word	131
.L718:
	.byte	5,6,0,0
.L693:
	.byte	8
	.byte	'Com_SendSignal_Processing',0,3,1,201,113,36
	.word	131
	.byte	1,1
.L696:
	.byte	4
	.byte	'idxTxSigInfo',0,1,201,113,79
	.word	1211
.L698:
	.byte	4
	.byte	'SignalDataPtr',0,1,201,113,133,1
	.word	4028
.L700:
	.byte	4
	.byte	'Length',0,1,201,113,155,1
	.word	1211
.L702:
	.byte	5,6,0,0,2
	.byte	'int',0,4,5,9
	.word	4263
	.byte	16
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,17
	.word	4270
	.byte	0,2
	.byte	'unsigned int',0,4,7,18
	.word	4312
	.byte	7
	.word	4312
	.byte	19
	.byte	'__cmpswapw',0
	.word	4328
	.byte	1,1,1,1,20
	.byte	'p',0
	.word	4333
	.byte	20
	.byte	'value',0
	.word	4312
	.byte	20
	.byte	'compare',0
	.word	4312
	.byte	0,21
	.byte	'Det_ReportError',0,3,154,2,32
	.word	131
	.byte	1,1,1,1,4
	.byte	'ModuleId',0,3,154,2,56
	.word	1211
	.byte	4
	.byte	'InstanceId',0,3,154,2,72
	.word	131
	.byte	4
	.byte	'ApiId',0,3,154,2,90
	.word	131
	.byte	4
	.byte	'ErrorId',0,3,154,2,103
	.word	131
	.byte	0,22
	.byte	'VStdLib_MemSet',0,4,225,2,26,1,1,1,1,4
	.byte	'pDst',0,4,225,2,81
	.word	1887
	.byte	4
	.byte	'nPattern',0,4,226,2,47
	.word	131
	.byte	4
	.byte	'nCnt',0,4,227,2,57
	.word	1328
	.byte	0,22
	.byte	'VStdLib_MemCpy',0,4,245,2,26,1,1,1,1,4
	.byte	'pDst',0,4,245,2,81
	.word	1887
	.byte	4
	.byte	'pSrc',0,4,246,2,83
	.word	4028
	.byte	4
	.byte	'nCnt',0,4,247,2,57
	.word	1328
	.byte	0,21
	.byte	'PduR_ComTransmit',0,5,101,33
	.word	131
	.byte	1,1,1,1,4
	.byte	'id',0,5,101,60
	.word	131
	.byte	4
	.byte	'info',0,5,101,112
	.word	1788
	.byte	0,23
	.byte	'sCom_PCConfigType',0,6,155,22,16,1,12
	.byte	'Com_PCConfigNeverUsed',0
	.word	131
	.byte	1,2,35,0,0,9
	.word	4682
.L440:
	.byte	7
	.word	4738
	.byte	24,1
	.word	131
	.byte	25,0,0,24,1
	.word	131
	.byte	25,0,0
.L513:
	.byte	10
	.byte	'Com_IpduGroupVector',0,7,87,15
	.word	4757
.L643:
	.byte	14,8,144,3,9,1,15
	.byte	'COM_UNINIT',0,0,15
	.byte	'COM_INIT',0,1,0,26
	.byte	'SuspendAllInterrupts',0,9,222,10,21,1,1,1,1,26
	.byte	'ResumeAllInterrupts',0,9,241,10,21,1,1,1,1
.L790:
	.byte	27
	.byte	'uSignExt8Bit',0,1,172,3,15,1,12
	.byte	'unsignedAccess',0
	.word	131
	.byte	1,2,35,0,12
	.byte	'signedAccess',0
	.word	1607
	.byte	1,2,35,0,0,28
	.word	148
	.byte	29
	.word	178
	.byte	29
	.word	196
	.byte	5,30
	.word	294
	.byte	29
	.word	322
	.byte	31
	.word	340
	.byte	30
	.word	1984
	.byte	29
	.word	2020
	.byte	31
	.word	2040
	.byte	31
	.word	2041
	.byte	31
	.word	2042
	.byte	30
	.word	1497
	.byte	29
	.word	1536
	.byte	29
	.word	1561
	.byte	29
	.word	1583
	.byte	32
	.word	1605
	.byte	0,0,0,32
	.word	2044
	.byte	0,0,32
	.word	341
	.byte	0,0,6,0,0,28
	.word	220
	.byte	29
	.word	250
	.byte	29
	.word	270
	.byte	5,30
	.word	344
	.byte	29
	.word	372
	.byte	31
	.word	390
	.byte	30
	.word	3100
	.byte	29
	.word	3130
	.byte	32
	.word	3148
	.byte	0,32
	.word	391
	.byte	30
	.word	3204
	.byte	29
	.word	3238
	.byte	31
	.word	3256
	.byte	30
	.word	3752
	.byte	29
	.word	3786
	.byte	32
	.word	3806
	.byte	0,32
	.word	3257
	.byte	0,0,32
	.word	392
	.byte	30
	.word	3048
	.byte	29
	.word	3080
	.byte	32
	.word	3098
	.byte	0,32
	.word	393
	.byte	0,0,6,0,0,28
	.word	294
	.byte	29
	.word	322
	.byte	5,30
	.word	1984
	.byte	29
	.word	2020
	.byte	31
	.word	2040
	.byte	31
	.word	2041
	.byte	31
	.word	2042
	.byte	30
	.word	1497
	.byte	29
	.word	1536
	.byte	29
	.word	1561
	.byte	29
	.word	1583
	.byte	32
	.word	1605
	.byte	0,0,0,32
	.word	2044
	.byte	0,0,6,0,0,28
	.word	344
	.byte	29
	.word	372
	.byte	5,30
	.word	3100
	.byte	29
	.word	3130
	.byte	32
	.word	3148
	.byte	0,6,30
	.word	3204
	.byte	29
	.word	3238
	.byte	31
	.word	3256
	.byte	30
	.word	3752
	.byte	29
	.word	3786
	.byte	32
	.word	3806
	.byte	0,32
	.word	3257
	.byte	0,0,6,30
	.word	3048
	.byte	29
	.word	3080
	.byte	32
	.word	3098
	.byte	0,6,0,0,28
	.word	396
	.byte	29
	.word	429
	.byte	6,0,28
	.word	454
	.byte	29
	.word	504
	.byte	29
	.word	529
	.byte	5,5,6,30
	.word	560
	.byte	29
	.word	592
	.byte	32
	.word	612
	.byte	0,30
	.word	1034
	.byte	31
	.word	1073
	.byte	30
	.word	945
	.byte	32
	.word	988
	.byte	0,32
	.word	1074
	.byte	30
	.word	990
	.byte	32
	.word	1032
	.byte	0,32
	.word	1075
	.byte	0,0,30
	.word	148
	.byte	29
	.word	178
	.byte	29
	.word	196
	.byte	31
	.word	216
	.byte	30
	.word	294
	.byte	29
	.word	322
	.byte	31
	.word	340
	.byte	30
	.word	1984
	.byte	29
	.word	2020
	.byte	31
	.word	2040
	.byte	31
	.word	2041
	.byte	31
	.word	2042
	.byte	30
	.word	1497
	.byte	29
	.word	1536
	.byte	29
	.word	1561
	.byte	29
	.word	1583
	.byte	32
	.word	1605
	.byte	0,0,0,32
	.word	2044
	.byte	0,0,32
	.word	341
	.byte	0,0,32
	.word	217
	.byte	0,0,0,30
	.word	945
	.byte	32
	.word	988
	.byte	0,6,6,30
	.word	990
	.byte	32
	.word	1032
	.byte	0,6,6,6,0,0,28
	.word	560
	.byte	29
	.word	592
	.byte	6,0,28
	.word	614
	.byte	29
	.word	646
	.byte	5,30
	.word	3813
	.byte	29
	.word	3848
	.byte	32
	.word	3868
	.byte	0,6,0,0,28
	.word	667
	.byte	29
	.word	720
	.byte	29
	.word	740
	.byte	29
	.word	760
	.byte	5,30
	.word	614
	.byte	29
	.word	646
	.byte	31
	.word	663
	.byte	30
	.word	3813
	.byte	29
	.word	3848
	.byte	32
	.word	3868
	.byte	0,32
	.word	664
	.byte	0,0,6,30
	.word	220
	.byte	29
	.word	250
	.byte	29
	.word	270
	.byte	31
	.word	290
	.byte	30
	.word	344
	.byte	29
	.word	372
	.byte	31
	.word	390
	.byte	30
	.word	3100
	.byte	29
	.word	3130
	.byte	32
	.word	3148
	.byte	0,32
	.word	391
	.byte	30
	.word	3204
	.byte	29
	.word	3238
	.byte	31
	.word	3256
	.byte	30
	.word	3752
	.byte	29
	.word	3786
	.byte	32
	.word	3806
	.byte	0,32
	.word	3257
	.byte	0,0,32
	.word	392
	.byte	30
	.word	3048
	.byte	29
	.word	3080
	.byte	32
	.word	3098
	.byte	0,32
	.word	393
	.byte	0,0,32
	.word	291
	.byte	0,0,6,0,0,28
	.word	797
	.byte	29
	.word	850
	.byte	29
	.word	875
	.byte	6,0,28
	.word	898
	.byte	5,30
	.word	344
	.byte	29
	.word	372
	.byte	31
	.word	390
	.byte	30
	.word	3100
	.byte	29
	.word	3130
	.byte	32
	.word	3148
	.byte	0,32
	.word	391
	.byte	30
	.word	3204
	.byte	29
	.word	3238
	.byte	31
	.word	3256
	.byte	30
	.word	3752
	.byte	29
	.word	3786
	.byte	32
	.word	3806
	.byte	0,32
	.word	3257
	.byte	0,0,32
	.word	392
	.byte	30
	.word	3048
	.byte	29
	.word	3080
	.byte	32
	.word	3098
	.byte	0,32
	.word	393
	.byte	0,0,6,0,0,28
	.word	921
	.byte	5,30
	.word	396
	.byte	29
	.word	429
	.byte	32
	.word	447
	.byte	0,6,30
	.word	294
	.byte	29
	.word	322
	.byte	31
	.word	340
	.byte	30
	.word	1984
	.byte	29
	.word	2020
	.byte	31
	.word	2040
	.byte	31
	.word	2041
	.byte	31
	.word	2042
	.byte	30
	.word	1497
	.byte	29
	.word	1536
	.byte	29
	.word	1561
	.byte	29
	.word	1583
	.byte	32
	.word	1605
	.byte	0,0,0,32
	.word	2044
	.byte	0,0,32
	.word	341
	.byte	0,0,6,0,0,28
	.word	945
	.byte	6,0,28
	.word	990
	.byte	6,0,28
	.word	1034
	.byte	5,30
	.word	945
	.byte	32
	.word	988
	.byte	0,6,30
	.word	990
	.byte	32
	.word	1032
	.byte	0,6,0,0,28
	.word	1078
	.byte	6,0,28
	.word	1123
	.byte	6,0,28
	.word	1167
	.byte	5,30
	.word	1078
	.byte	32
	.word	1121
	.byte	0,6,30
	.word	1123
	.byte	32
	.word	1165
	.byte	0,6,0,0,28
	.word	1243
	.byte	29
	.word	1274
	.byte	29
	.word	1292
	.byte	6,0,28
	.word	1349
	.byte	29
	.word	1395
	.byte	29
	.word	1419
	.byte	29
	.word	1446
	.byte	29
	.word	1474
	.byte	6,0,28
	.word	1497
	.byte	29
	.word	1536
	.byte	29
	.word	1561
	.byte	29
	.word	1583
	.byte	6,0,28
	.word	1615
	.byte	29
	.word	1655
	.byte	29
	.word	1680
	.byte	5,30
	.word	1349
	.byte	29
	.word	1395
	.byte	29
	.word	1419
	.byte	29
	.word	1446
	.byte	29
	.word	1474
	.byte	32
	.word	1495
	.byte	0,6,0,0,28
	.word	1793
	.byte	29
	.word	1833
	.byte	29
	.word	1850
	.byte	5,5,30
	.word	2263
	.byte	29
	.word	2299
	.byte	29
	.word	2317
	.byte	31
	.word	2338
	.byte	32
	.word	2339
	.byte	0,0,0,6,0,0,28
	.word	1892
	.byte	29
	.word	1933
	.byte	29
	.word	1958
	.byte	6,0,28
	.word	1984
	.byte	29
	.word	2020
	.byte	5,5,5,30
	.word	1497
	.byte	29
	.word	1536
	.byte	29
	.word	1561
	.byte	29
	.word	1583
	.byte	32
	.word	1605
	.byte	0,0,0,6,0,0,28
	.word	2047
	.byte	5,30
	.word	2559
	.byte	32
	.word	2612
	.byte	0,6,30
	.word	2614
	.byte	32
	.word	2666
	.byte	0,6,30
	.word	2165
	.byte	29
	.word	2222
	.byte	31
	.word	2257
	.byte	30
	.word	2668
	.byte	29
	.word	2717
	.byte	31
	.word	2746
	.byte	30
	.word	2559
	.byte	32
	.word	2612
	.byte	0,32
	.word	2747
	.byte	30
	.word	2614
	.byte	32
	.word	2666
	.byte	0,32
	.word	2748
	.byte	0,0,32
	.word	2258
	.byte	30
	.word	2751
	.byte	29
	.word	2810
	.byte	32
	.word	2832
	.byte	0,32
	.word	2259
	.byte	30
	.word	2462
	.byte	29
	.word	2495
	.byte	29
	.word	2517
	.byte	31
	.word	2555
	.byte	30
	.word	2342
	.byte	29
	.word	2381
	.byte	29
	.word	2406
	.byte	29
	.word	2427
	.byte	31
	.word	2457
	.byte	31
	.word	2458
	.byte	30
	.word	2870
	.byte	29
	.word	2905
	.byte	29
	.word	2925
	.byte	31
	.word	2951
	.byte	30
	.word	2955
	.byte	29
	.word	2996
	.byte	29
	.word	3017
	.byte	31
	.word	3043
	.byte	32
	.word	3044
	.byte	30
	.word	1615
	.byte	29
	.word	1655
	.byte	29
	.word	1680
	.byte	31
	.word	1709
	.byte	30
	.word	1349
	.byte	29
	.word	1395
	.byte	29
	.word	1419
	.byte	29
	.word	1446
	.byte	29
	.word	1474
	.byte	32
	.word	1495
	.byte	0,32
	.word	1710
	.byte	0,0,32
	.word	3045
	.byte	0,0,32
	.word	2952
	.byte	0,0,0,32
	.word	2459
	.byte	0,0,32
	.word	2556
	.byte	0,0,32
	.word	2260
	.byte	0,0,6,0,0,28
	.word	2165
	.byte	29
	.word	2222
	.byte	5,30
	.word	2668
	.byte	29
	.word	2717
	.byte	31
	.word	2746
	.byte	30
	.word	2559
	.byte	32
	.word	2612
	.byte	0,32
	.word	2747
	.byte	30
	.word	2614
	.byte	32
	.word	2666
	.byte	0,32
	.word	2748
	.byte	0,0,6,30
	.word	2751
	.byte	29
	.word	2810
	.byte	32
	.word	2832
	.byte	0,6,30
	.word	2462
	.byte	29
	.word	2495
	.byte	29
	.word	2517
	.byte	31
	.word	2555
	.byte	30
	.word	2342
	.byte	29
	.word	2381
	.byte	29
	.word	2406
	.byte	29
	.word	2427
	.byte	31
	.word	2457
	.byte	31
	.word	2458
	.byte	30
	.word	2870
	.byte	29
	.word	2905
	.byte	29
	.word	2925
	.byte	31
	.word	2951
	.byte	30
	.word	2955
	.byte	29
	.word	2996
	.byte	29
	.word	3017
	.byte	31
	.word	3043
	.byte	32
	.word	3044
	.byte	30
	.word	1615
	.byte	29
	.word	1655
	.byte	29
	.word	1680
	.byte	31
	.word	1709
	.byte	30
	.word	1349
	.byte	29
	.word	1395
	.byte	29
	.word	1419
	.byte	29
	.word	1446
	.byte	29
	.word	1474
	.byte	32
	.word	1495
	.byte	0,32
	.word	1710
	.byte	0,0,32
	.word	3045
	.byte	0,0,32
	.word	2952
	.byte	0,0,0,32
	.word	2459
	.byte	0,0,32
	.word	2556
	.byte	0,0,6,0,0,28
	.word	2263
	.byte	29
	.word	2299
	.byte	29
	.word	2317
	.byte	5,6,0,0,28
	.word	2342
	.byte	29
	.word	2381
	.byte	29
	.word	2406
	.byte	29
	.word	2427
	.byte	5,5,30
	.word	2870
	.byte	29
	.word	2905
	.byte	29
	.word	2925
	.byte	31
	.word	2951
	.byte	30
	.word	2955
	.byte	29
	.word	2996
	.byte	29
	.word	3017
	.byte	31
	.word	3043
	.byte	32
	.word	3044
	.byte	30
	.word	1615
	.byte	29
	.word	1655
	.byte	29
	.word	1680
	.byte	31
	.word	1709
	.byte	30
	.word	1349
	.byte	29
	.word	1395
	.byte	29
	.word	1419
	.byte	29
	.word	1446
	.byte	29
	.word	1474
	.byte	32
	.word	1495
	.byte	0,32
	.word	1710
	.byte	0,0,32
	.word	3045
	.byte	0,0,32
	.word	2952
	.byte	0,0,0,6,0,0,28
	.word	2462
	.byte	29
	.word	2495
	.byte	29
	.word	2517
	.byte	5,30
	.word	2342
	.byte	29
	.word	2381
	.byte	29
	.word	2406
	.byte	29
	.word	2427
	.byte	31
	.word	2457
	.byte	31
	.word	2458
	.byte	30
	.word	2870
	.byte	29
	.word	2905
	.byte	29
	.word	2925
	.byte	31
	.word	2951
	.byte	30
	.word	2955
	.byte	29
	.word	2996
	.byte	29
	.word	3017
	.byte	31
	.word	3043
	.byte	32
	.word	3044
	.byte	30
	.word	1615
	.byte	29
	.word	1655
	.byte	29
	.word	1680
	.byte	31
	.word	1709
	.byte	30
	.word	1349
	.byte	29
	.word	1395
	.byte	29
	.word	1419
	.byte	29
	.word	1446
	.byte	29
	.word	1474
	.byte	32
	.word	1495
	.byte	0,32
	.word	1710
	.byte	0,0,32
	.word	3045
	.byte	0,0,32
	.word	2952
	.byte	0,0,0,32
	.word	2459
	.byte	0,0,6,0,0,28
	.word	2559
	.byte	6,0,28
	.word	2614
	.byte	6,0,28
	.word	2668
	.byte	29
	.word	2717
	.byte	5,30
	.word	2559
	.byte	32
	.word	2612
	.byte	0,6,30
	.word	2614
	.byte	32
	.word	2666
	.byte	0,6,0,0,28
	.word	2751
	.byte	29
	.word	2810
	.byte	6,0,28
	.word	2870
	.byte	29
	.word	2905
	.byte	29
	.word	2925
	.byte	5,30
	.word	2955
	.byte	29
	.word	2996
	.byte	29
	.word	3017
	.byte	31
	.word	3043
	.byte	32
	.word	3044
	.byte	30
	.word	1615
	.byte	29
	.word	1655
	.byte	29
	.word	1680
	.byte	31
	.word	1709
	.byte	30
	.word	1349
	.byte	29
	.word	1395
	.byte	29
	.word	1419
	.byte	29
	.word	1446
	.byte	29
	.word	1474
	.byte	32
	.word	1495
	.byte	0,32
	.word	1710
	.byte	0,0,32
	.word	3045
	.byte	0,0,6,0,0,28
	.word	2955
	.byte	29
	.word	2996
	.byte	29
	.word	3017
	.byte	5,6,30
	.word	1615
	.byte	29
	.word	1655
	.byte	29
	.word	1680
	.byte	31
	.word	1709
	.byte	30
	.word	1349
	.byte	29
	.word	1395
	.byte	29
	.word	1419
	.byte	29
	.word	1446
	.byte	29
	.word	1474
	.byte	32
	.word	1495
	.byte	0,32
	.word	1710
	.byte	0,0,6,0,0,28
	.word	3048
	.byte	29
	.word	3080
	.byte	6,0,28
	.word	3100
	.byte	29
	.word	3130
	.byte	6,0,28
	.word	3150
	.byte	29
	.word	3185
	.byte	6,0,28
	.word	3204
	.byte	29
	.word	3238
	.byte	5,30
	.word	3752
	.byte	29
	.word	3786
	.byte	32
	.word	3806
	.byte	0,6,0,0,28
	.word	3260
	.byte	5,30
	.word	3318
	.byte	32
	.word	3373
	.byte	0,6,30
	.word	3375
	.byte	32
	.word	3429
	.byte	0,6,30
	.word	3431
	.byte	31
	.word	3482
	.byte	30
	.word	3318
	.byte	32
	.word	3373
	.byte	0,32
	.word	3483
	.byte	30
	.word	3375
	.byte	32
	.word	3429
	.byte	0,32
	.word	3484
	.byte	0,0,6,30
	.word	3948
	.byte	29
	.word	4001
	.byte	32
	.word	4021
	.byte	0,6,0,0,28
	.word	3318
	.byte	6,0,28
	.word	3375
	.byte	6,0,28
	.word	3431
	.byte	5,30
	.word	3318
	.byte	32
	.word	3373
	.byte	0,6,30
	.word	3375
	.byte	32
	.word	3429
	.byte	0,6,0,0,28
	.word	3487
	.byte	5,30
	.word	3541
	.byte	32
	.word	3583
	.byte	0,6,30
	.word	3585
	.byte	32
	.word	3626
	.byte	0,6,30
	.word	3628
	.byte	31
	.word	3666
	.byte	30
	.word	3541
	.byte	32
	.word	3583
	.byte	0,32
	.word	3667
	.byte	30
	.word	3585
	.byte	32
	.word	3626
	.byte	0,32
	.word	3668
	.byte	0,0,6,30
	.word	3671
	.byte	29
	.word	3725
	.byte	32
	.word	3745
	.byte	0,6,0,0,28
	.word	3541
	.byte	6,0,28
	.word	3585
	.byte	6,0,28
	.word	3628
	.byte	5,30
	.word	3541
	.byte	32
	.word	3583
	.byte	0,6,30
	.word	3585
	.byte	32
	.word	3626
	.byte	0,6,0,0,28
	.word	3671
	.byte	29
	.word	3725
	.byte	6,0,28
	.word	3752
	.byte	29
	.word	3786
	.byte	6,0,28
	.word	3813
	.byte	29
	.word	3848
	.byte	6,0,28
	.word	3875
	.byte	29
	.word	3926
	.byte	6,0,28
	.word	3948
	.byte	29
	.word	4001
	.byte	6,0,28
	.word	4033
	.byte	29
	.word	4068
	.byte	29
	.word	4090
	.byte	29
	.word	4114
	.byte	29
	.word	4131
	.byte	5,30
	.word	1243
	.byte	29
	.word	1274
	.byte	29
	.word	1292
	.byte	32
	.word	1321
	.byte	0,6,0,0,28
	.word	4158
	.byte	29
	.word	4196
	.byte	29
	.word	4218
	.byte	29
	.word	4242
	.byte	5,30
	.word	4033
	.byte	29
	.word	4068
	.byte	29
	.word	4090
	.byte	29
	.word	4114
	.byte	29
	.word	4131
	.byte	31
	.word	4154
	.byte	30
	.word	1243
	.byte	29
	.word	1274
	.byte	29
	.word	1292
	.byte	32
	.word	1321
	.byte	0,32
	.word	4155
	.byte	0,0,6,0,0,33,1,7
	.word	8047
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	8049
	.byte	10
	.byte	'boolean',0,10,101,31
	.word	131
	.byte	10
	.byte	'sint8',0,10,103,31
	.word	1607
	.byte	10
	.byte	'uint8',0,10,104,31
	.word	131
	.byte	10
	.byte	'uint16',0,10,106,31
	.word	1211
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,10,107,31
	.word	8131
	.byte	10
	.byte	'uint32',0,10,108,31
	.word	1328
	.byte	10
	.byte	'uint8_least',0,10,111,31
	.word	131
	.byte	10
	.byte	'uint32_least',0,10,115,31
	.word	1328
	.byte	2
	.byte	'unsigned long long int',0,8,7,10
	.byte	'uint64',0,10,121,30
	.word	8214
	.byte	10
	.byte	'StatusType',0,11,127,23
	.word	131
	.byte	10
	.byte	'Std_ReturnType',0,11,132,1,15
	.word	131
	.byte	10
	.byte	'PduIdType',0,12,63,15
	.word	131
	.byte	10
	.byte	'PduLengthType',0,12,65,15
	.word	131
	.byte	10
	.byte	'PduInfoType',0,2,201,1,3
	.word	1737
	.byte	14,2,219,1,9,1,15
	.byte	'TP_DATACONF',0,0,15
	.byte	'TP_DATARETRY',0,1,15
	.byte	'TP_CONFPENDING',0,2,0,10
	.byte	'TpDataStateType',0,2,226,1,3
	.word	8359
	.byte	10
	.byte	'Com_SignalIdType',0,7,79,16
	.word	1211
	.byte	10
	.byte	'Com_SignalGroupIdType',0,7,82,16
	.word	1211
	.byte	10
	.byte	'Com_IpduGroupIdType',0,7,85,16
	.word	1211
	.byte	10
	.byte	'Com_RxAccessInfoIterType',0,6,203,16,21
	.word	131
	.byte	10
	.byte	'Com_RxPduInfoIterType',0,6,212,16,21
	.word	131
	.byte	10
	.byte	'Com_TxPduInfoIterType',0,6,236,16,21
	.word	131
	.byte	10
	.byte	'Com_ConstValueSInt8Type',0,6,165,17,15
	.word	1607
	.byte	10
	.byte	'Com_CurrentTxModeType',0,6,168,17,17
	.word	131
	.byte	10
	.byte	'Com_CycleTimeCntType',0,6,171,17,15
	.word	131
	.byte	10
	.byte	'Com_CyclicSendRequestType',0,6,174,17,17
	.word	131
	.byte	10
	.byte	'Com_HandleRxPduDeferredType',0,6,177,17,23
	.word	131
	.byte	10
	.byte	'Com_InitializedType',0,6,180,17,17
	.word	131
	.byte	10
	.byte	'Com_PduGrpVectorType',0,6,186,17,15
	.word	131
	.byte	10
	.byte	'Com_BitPositionOfRxAccessInfoType',0,6,195,17,15
	.word	131
	.byte	10
	.byte	'Com_BusAccOfRxAccessInfoType',0,6,204,17,15
	.word	131
	.byte	10
	.byte	'Com_InitValueUsedOfRxAccessInfoType',0,6,216,17,17
	.word	131
	.byte	10
	.byte	'Com_RxPduInfoIdxOfRxAccessInfoType',0,6,219,17,15
	.word	131
	.byte	10
	.byte	'Com_RxAccessInfoIndType',0,6,225,17,15
	.word	131
	.byte	10
	.byte	'Com_RxDefPduBufferType',0,6,228,17,15
	.word	131
	.byte	10
	.byte	'Com_RxDeferredProcessingISRLockCounterType',0,6,231,17,16
	.word	1211
	.byte	10
	.byte	'Com_RxIPduGroupISRLockCounterType',0,6,237,17,16
	.word	1211
	.byte	10
	.byte	'Com_RxPduGrpActiveType',0,6,243,17,17
	.word	131
	.byte	10
	.byte	'Com_PduGrpVectorUsedOfRxPduInfoType',0,6,130,18,17
	.word	131
	.byte	10
	.byte	'Com_RxSigBufferSInt8Type',0,6,169,18,15
	.word	1607
	.byte	10
	.byte	'Com_RxAccessInfoIdxOfRxSigInfoType',0,6,172,18,15
	.word	131
	.byte	10
	.byte	'Com_SignalProcessingOfRxSigInfoType',0,6,175,18,15
	.word	131
	.byte	10
	.byte	'Com_SizeOfRxPduInfoType',0,6,217,18,15
	.word	131
	.byte	10
	.byte	'Com_TransmitRequestType',0,6,131,19,17
	.word	131
	.byte	10
	.byte	'Com_TxBufferType',0,6,134,19,15
	.word	131
	.byte	10
	.byte	'Com_TxCycleCounterDivisorCounterType',0,6,140,19,16
	.word	1211
	.byte	10
	.byte	'Com_TxPduInfoIdxOfTxCyclicPduType',0,6,143,19,15
	.word	131
	.byte	10
	.byte	'Com_TxCyclicProcessingISRLockCounterType',0,6,146,19,16
	.word	1211
	.byte	10
	.byte	'Com_TxIPduGroupISRLockCounterType',0,6,152,19,16
	.word	1211
	.byte	10
	.byte	'Com_PeriodicOfTxModeFalseType',0,6,158,19,17
	.word	131
	.byte	10
	.byte	'Com_InitModeOfTxModeInfoType',0,6,164,19,17
	.word	131
	.byte	10
	.byte	'Com_TxModeTrueIdxOfTxModeInfoType',0,6,170,19,15
	.word	131
	.byte	10
	.byte	'Com_PeriodicOfTxModeTrueType',0,6,173,19,17
	.word	131
	.byte	10
	.byte	'Com_TxPduGrpActiveType',0,6,179,19,17
	.word	131
	.byte	10
	.byte	'Com_PduGrpVectorStartIdxOfTxPduInfoType',0,6,191,19,15
	.word	131
	.byte	10
	.byte	'Com_TxBufferLengthOfTxPduInfoType',0,6,203,19,15
	.word	131
	.byte	10
	.byte	'Com_TxBufferUsedOfTxPduInfoType',0,6,209,19,17
	.word	131
	.byte	10
	.byte	'Com_TxPduInitValueEndIdxOfTxPduInfoType',0,6,212,19,15
	.word	131
	.byte	10
	.byte	'Com_TxPduInitValueStartIdxOfTxPduInfoType',0,6,215,19,15
	.word	131
	.byte	10
	.byte	'Com_TxPduInitValueType',0,6,221,19,15
	.word	131
	.byte	10
	.byte	'Com_TxProcessingISRLockCounterType',0,6,224,19,16
	.word	1211
	.byte	10
	.byte	'Com_TxSduLengthType',0,6,230,19,23
	.word	131
	.byte	10
	.byte	'Com_BitPositionOfTxSigInfoType',0,6,239,19,15
	.word	131
	.byte	10
	.byte	'Com_BusAccOfTxSigInfoType',0,6,242,19,15
	.word	131
	.byte	10
	.byte	'Com_StartByteInPduPositionOfTxSigInfoType',0,6,251,19,15
	.word	131
	.byte	10
	.byte	'Com_TxBufferStartIdxOfTxSigInfoType',0,6,132,20,15
	.word	131
	.byte	10
	.byte	'Com_TxPduInfoIdxOfTxSigInfoType',0,6,138,20,15
	.word	131
	.byte	23
	.byte	'sCom_ActivatableRxComIPdusType',0,6,154,20,16,1,12
	.byte	'Com_ActivatableRxComIPdusNeverUsed',0
	.word	131
	.byte	1,2,35,0,0,10
	.byte	'Com_ActivatableRxComIPdusType',0,6,157,20,3
	.word	10385
	.byte	23
	.byte	'sCom_ActivatableTxComIPdusType',0,6,160,20,16,1,12
	.byte	'Com_ActivatableTxComIPdusNeverUsed',0
	.word	131
	.byte	1,2,35,0,0,10
	.byte	'Com_ActivatableTxComIPdusType',0,6,163,20,3
	.word	10506
	.byte	23
	.byte	'sCom_RxAccessInfoType',0,6,169,20,16,4,12
	.byte	'InitValueUsedOfRxAccessInfo',0
	.word	131
	.byte	1,2,35,0,12
	.byte	'BitPositionOfRxAccessInfo',0
	.word	131
	.byte	1,2,35,1,12
	.byte	'BusAccOfRxAccessInfo',0
	.word	131
	.byte	1,2,35,2,12
	.byte	'RxPduInfoIdxOfRxAccessInfo',0
	.word	131
	.byte	1,2,35,3,0,10
	.byte	'Com_RxAccessInfoType',0,6,175,20,3
	.word	10627
	.byte	23
	.byte	'sCom_RxPduInfoType',0,6,178,20,16,1,12
	.byte	'PduGrpVectorUsedOfRxPduInfo',0
	.word	131
	.byte	1,2,35,0,0,10
	.byte	'Com_RxPduInfoType',0,6,181,20,3
	.word	10824
	.byte	23
	.byte	'sCom_RxSigInfoType',0,6,184,20,16,1,12
	.byte	'SignalProcessingOfRxSigInfo',0
	.word	131
	.byte	1,2,35,0,0,10
	.byte	'Com_RxSigInfoType',0,6,187,20,3
	.word	10914
	.byte	23
	.byte	'sCom_TxCyclicPduType',0,6,193,20,16,1,12
	.byte	'TxPduInfoIdxOfTxCyclicPdu',0
	.word	131
	.byte	1,2,35,0,0,10
	.byte	'Com_TxCyclicPduType',0,6,196,20,3
	.word	11004
	.byte	23
	.byte	'sCom_TxModeFalseType',0,6,199,20,16,1,12
	.byte	'PeriodicOfTxModeFalse',0
	.word	131
	.byte	1,2,35,0,0,10
	.byte	'Com_TxModeFalseType',0,6,202,20,3
	.word	11096
	.byte	23
	.byte	'sCom_TxModeInfoType',0,6,208,20,16,2,12
	.byte	'InitModeOfTxModeInfo',0
	.word	131
	.byte	1,2,35,0,12
	.byte	'TxModeTrueIdxOfTxModeInfo',0
	.word	131
	.byte	1,2,35,1,0,10
	.byte	'Com_TxModeInfoType',0,6,212,20,3
	.word	11184
	.byte	23
	.byte	'sCom_TxModeTrueType',0,6,215,20,16,1,12
	.byte	'PeriodicOfTxModeTrue',0
	.word	131
	.byte	1,2,35,0,0,10
	.byte	'Com_TxModeTrueType',0,6,218,20,3
	.word	11304
	.byte	23
	.byte	'sCom_TxPduInfoType',0,6,226,20,16,6,12
	.byte	'TxBufferUsedOfTxPduInfo',0
	.word	131
	.byte	1,2,35,0,12
	.byte	'PduGrpVectorStartIdxOfTxPduInfo',0
	.word	131
	.byte	1,2,35,1,12
	.byte	'TxBufferLengthOfTxPduInfo',0
	.word	131
	.byte	1,2,35,2,12
	.byte	'TxPduInitValueEndIdxOfTxPduInfo',0
	.word	131
	.byte	1,2,35,3,12
	.byte	'TxPduInitValueStartIdxOfTxPduInfo',0
	.word	131
	.byte	1,2,35,4,0,10
	.byte	'Com_TxPduInfoType',0,6,233,20,3
	.word	11389
	.byte	23
	.byte	'sCom_TxSigInfoType',0,6,240,20,16,6,12
	.byte	'BitPositionOfTxSigInfo',0
	.word	131
	.byte	1,2,35,0,12
	.byte	'BusAccOfTxSigInfo',0
	.word	131
	.byte	1,2,35,1,12
	.byte	'StartByteInPduPositionOfTxSigInfo',0
	.word	131
	.byte	1,2,35,2,12
	.byte	'TxBufferStartIdxOfTxSigInfo',0
	.word	131
	.byte	1,2,35,3,12
	.byte	'TxPduInfoIdxOfTxSigInfo',0
	.word	131
	.byte	1,2,35,4,0,10
	.byte	'Com_TxSigInfoType',0,6,247,20,3
	.word	11635
	.byte	23
	.byte	'Com_HandleRxPduDeferredStructSTag',0,6,131,21,16,1,12
	.byte	'RxMessage1_otestCANFDdbc_d2b210c8_Rx',0
	.word	131
	.byte	1,2,35,0,0,10
	.byte	'Com_HandleRxPduDeferredStructSType',0,6,134,21,3
	.word	11860
	.byte	24,64
	.word	131
	.byte	25,63,0,23
	.byte	'Com_RxDefPduBufferStructSTag',0,6,137,21,16,64,12
	.byte	'RxMessage1_otestCANFDdbc_d2b210c8_Rx',0
	.word	11991
	.byte	64,2,35,0,0,10
	.byte	'Com_RxDefPduBufferStructSType',0,6,140,21,3
	.word	12000
	.byte	24,1
	.word	131
	.byte	25,0,0,27
	.byte	'Com_HandleRxPduDeferredUTag',0,6,152,21,15,1,12
	.byte	'raw',0
	.word	12121
	.byte	1,2,35,0,12
	.byte	'str',0
	.word	11860
	.byte	1,2,35,0,0,10
	.byte	'Com_HandleRxPduDeferredUType',0,6,156,21,3
	.word	12130
	.byte	27
	.byte	'Com_RxDefPduBufferUTag',0,6,159,21,15,64,12
	.byte	'raw',0
	.word	11991
	.byte	64,2,35,0,12
	.byte	'str',0
	.word	12000
	.byte	64,2,35,0,0,10
	.byte	'Com_RxDefPduBufferUType',0,6,163,21,3
	.word	12229
	.byte	10
	.byte	'Com_PCConfigType',0,6,158,22,3
	.word	4682
	.byte	10
	.byte	'Com_ConfigType',0,6,160,22,26
	.word	4682
	.byte	24,1
	.word	1607
	.byte	25,0,0,9
	.word	12368
	.byte	34
	.byte	'Com_ConstValueSInt8',0,6,186,22,50
	.word	12377
	.byte	1,1,24,2
	.word	131
	.byte	25,1,0,9
	.word	12413
	.byte	34
	.byte	'Com_PduGrpVector',0,6,203,22,47
	.word	12422
	.byte	1,1,24,8
	.word	10627
	.byte	25,1,0,9
	.word	12455
	.byte	34
	.byte	'Com_RxAccessInfo',0,6,226,22,47
	.word	12464
	.byte	1,1,24,1
	.word	10824
	.byte	25,0,0,9
	.word	12497
	.byte	34
	.byte	'Com_RxPduInfo',0,6,246,22,44
	.word	12506
	.byte	1,1,24,3
	.word	11004
	.byte	25,2,0,9
	.word	12536
	.byte	34
	.byte	'Com_TxCyclicPdu',0,6,157,23,46
	.word	12545
	.byte	1,1,24,1
	.word	11096
	.byte	25,0,0,9
	.word	12577
	.byte	34
	.byte	'Com_TxModeFalse',0,6,177,23,46
	.word	12586
	.byte	1,1,24,6
	.word	11184
	.byte	25,2,0,9
	.word	12618
	.byte	34
	.byte	'Com_TxModeInfo',0,6,198,23,45
	.word	12627
	.byte	1,1,24,1
	.word	11304
	.byte	25,0,0,9
	.word	12658
	.byte	34
	.byte	'Com_TxModeTrue',0,6,218,23,45
	.word	12667
	.byte	1,1,24,18
	.word	11389
	.byte	25,2,0,9
	.word	12698
	.byte	34
	.byte	'Com_TxPduInfo',0,6,242,23,44
	.word	12707
	.byte	1,1,24,104
	.word	131
	.byte	25,103,0,9
	.word	12737
	.byte	34
	.byte	'Com_TxPduInitValue',0,6,131,24,49
	.word	12746
	.byte	1,1,24,24
	.word	11635
	.byte	25,3,0,9
	.word	12781
	.byte	34
	.byte	'Com_TxSigInfo',0,6,155,24,44
	.word	12790
	.byte	1,1,24,3
	.word	131
	.byte	25,2,0,34
	.byte	'Com_CurrentTxMode',0,6,172,24,51
	.word	12820
	.byte	1,1,24,3
	.word	131
	.byte	25,2,0,34
	.byte	'Com_CycleTimeCnt',0,6,189,24,50
	.word	12858
	.byte	1,1,24,3
	.word	131
	.byte	25,2,0,34
	.byte	'Com_CyclicSendRequest',0,6,206,24,55
	.word	12895
	.byte	1,1,34
	.byte	'Com_HandleRxPduDeferred',0,6,223,24,58
	.word	12130
	.byte	1,1,34
	.byte	'Com_Initialized',0,6,240,24,52
	.word	131
	.byte	1,1,34
	.byte	'Com_RxDefPduBuffer',0,6,129,25,53
	.word	12229
	.byte	1,1,34
	.byte	'Com_RxDeferredProcessingISRLockCounter',0,6,142,25,72
	.word	1211
	.byte	1,1,34
	.byte	'Com_RxIPduGroupISRLockCounter',0,6,155,25,63
	.word	1211
	.byte	1,1,24,1
	.word	131
	.byte	25,0,0,34
	.byte	'Com_RxPduGrpActive',0,6,172,25,52
	.word	13120
	.byte	1,1,24,2
	.word	1607
	.byte	25,1,0,34
	.byte	'Com_RxSigBufferSInt8',0,6,189,25,54
	.word	13159
	.byte	1,1,24,3
	.word	131
	.byte	25,2,0,34
	.byte	'Com_TransmitRequest',0,6,206,25,53
	.word	13200
	.byte	1,1,24,104
	.word	131
	.byte	25,103,0,34
	.byte	'Com_TxBuffer',0,6,223,25,46
	.word	13240
	.byte	1,1,34
	.byte	'Com_TxCycleCounterDivisorCounter',0,6,236,25,66
	.word	1211
	.byte	1,1,34
	.byte	'Com_TxCyclicProcessingISRLockCounter',0,6,249,25,70
	.word	1211
	.byte	1,1,34
	.byte	'Com_TxIPduGroupISRLockCounter',0,6,134,26,63
	.word	1211
	.byte	1,1,24,3
	.word	131
	.byte	25,2,0,34
	.byte	'Com_TxPduGrpActive',0,6,151,26,52
	.word	13406
	.byte	1,1,34
	.byte	'Com_TxProcessingISRLockCounter',0,6,164,26,64
	.word	1211
	.byte	1,1,24,3
	.word	131
	.byte	25,2,0,34
	.byte	'Com_TxSduLength',0,6,181,26,49
	.word	13487
	.byte	1,1,23
	.byte	'sDet_PCConfigType',0,13,238,1,16,1,12
	.byte	'Det_PCConfigNeverUsed',0
	.word	131
	.byte	1,2,35,0,0,10
	.byte	'Det_PCConfigType',0,13,241,1,3
	.word	13523
	.byte	10
	.byte	'VStdLib_CntType',0,4,100,22
	.word	1328
	.byte	10
	.byte	'Com_StatusType',0,8,148,3,3
	.word	4794
	.byte	14,14,148,1,9,1,15
	.byte	'Default_Init_Task',0,0,15
	.byte	'Default_Init_Task_Trusted',0,1,15
	.byte	'IdleTask_OsCore0',0,2,15
	.byte	'bsw_task',0,3,15
	.byte	'swc_init',0,4,15
	.byte	'swc_task',0,5,15
	.byte	'INVALID_TASK',0,6,15
	.byte	'OS_TASKID_COUNT',0,6,0,10
	.byte	'TaskType',0,14,158,1,3
	.word	13653
	.byte	10
	.byte	'Os_Hal_AddressType',0,15,61,16
	.word	1328
	.byte	24,64
	.word	1328
	.byte	25,15,0,23
	.byte	'Os_ExceptionContextType_Tag',0,16,71,8,160,1,12
	.byte	'AddressRegisters',0
	.word	13838
	.byte	64,2,35,0,12
	.byte	'DataRegisters',0
	.word	13838
	.byte	64,2,35,64,12
	.byte	'Ra',0
	.word	1328
	.byte	4,3,35,128,1,12
	.byte	'Psw',0
	.word	1328
	.byte	4,3,35,132,1,12
	.byte	'ExceptionSource',0
	.word	1328
	.byte	4,3,35,136,1,12
	.byte	'Pcpn',0
	.word	1328
	.byte	4,3,35,140,1,12
	.byte	'Pie',0
	.word	1328
	.byte	4,3,35,144,1,12
	.byte	'MpuRegionForStackLow',0
	.word	1328
	.byte	4,3,35,148,1,12
	.byte	'MpuRegionForStackUpper',0
	.word	1328
	.byte	4,3,35,152,1,12
	.byte	'RawPCXI',0
	.word	1328
	.byte	4,3,35,156,1,0,10
	.byte	'Os_ExceptionContextType',0,15,66,44
	.word	13847
	.byte	10
	.byte	'Os_InterruptSourceIdType',0,17,238,1,16
	.word	1328
	.byte	10
	.byte	'Os_ExceptionSourceIdType',0,17,246,1,16
	.word	1328
	.byte	14,17,161,2,9,1,15
	.byte	'RUNNING',0,0,15
	.byte	'READY',0,1,15
	.byte	'WAITING',0,2,15
	.byte	'SUSPENDED',0,3,0,10
	.byte	'TaskStateType',0,17,175,2,3
	.word	14195
	.byte	10
	.byte	'EventMaskType',0,17,182,2,16
	.word	8214
	.byte	10
	.byte	'Os_TickType',0,17,200,2,19
	.word	1328
	.byte	10
	.byte	'TickType',0,17,206,2,21
	.word	1328
	.byte	11,17,220,2,9,12,12
	.byte	'maxallowedvalue',0
	.word	1328
	.byte	4,2,35,0,12
	.byte	'ticksperbase',0
	.word	1328
	.byte	4,2,35,4,12
	.byte	'mincycle',0
	.word	1328
	.byte	4,2,35,8,0,10
	.byte	'AlarmBaseType',0,17,228,2,2
	.word	14327
	.byte	14,17,128,3,9,1,15
	.byte	'APPLICATION_TERMINATED',0,0,15
	.byte	'APPLICATION_RESTARTING',0,1,15
	.byte	'APPLICATION_ACCESSIBLE',0,2,0,10
	.byte	'ApplicationStateType',0,17,133,3,3
	.word	14422
	.byte	14,17,177,3,9,1,15
	.byte	'OSServiceId_GetApplicationID',0,0,15
	.byte	'OSServiceId_GetISRID',0,1,15
	.byte	'OSServiceId_CallTrustedFunction',0,2,15
	.byte	'OSServiceId_CheckISRMemoryAccess',0,3,15
	.byte	'OSServiceId_CheckTaskMemoryAccess',0,4,15
	.byte	'OSServiceId_CheckObjectAccess',0,5,15
	.byte	'OSServiceId_CheckObjectOwnership',0,6,15
	.byte	'OSServiceId_StartScheduleTableRel',0,7,15
	.byte	'OSServiceId_StartScheduleTableAbs',0,8,15
	.byte	'OSServiceId_StopScheduleTable',0,9,15
	.byte	'OSServiceId_NextScheduleTable',0,10,15
	.byte	'OSServiceId_StartScheduleTableSynchron',0,11,15
	.byte	'OSServiceId_SyncScheduleTable',0,12,15
	.byte	'OSServiceId_SetScheduleTableAsync',0,13,15
	.byte	'OSServiceId_GetScheduleTableStatus',0,14,15
	.byte	'OSServiceId_IncrementCounter',0,15,15
	.byte	'OSServiceId_GetCounterValue',0,16,15
	.byte	'OSServiceId_GetElapsedValue',0,17,15
	.byte	'OSServiceId_TerminateApplication',0,18,15
	.byte	'OSServiceId_AllowAccess',0,19,15
	.byte	'OSServiceId_GetApplicationState',0,20,15
	.byte	'OSServiceId_GetNumberOfActivatedCores',0,21,15
	.byte	'OSServiceId_GetCoreID',0,22,15
	.byte	'OSServiceId_StartCore',0,23,15
	.byte	'OSServiceId_StartNonAutosarCore',0,24,15
	.byte	'OSServiceId_GetSpinlock',0,25,15
	.byte	'OSServiceId_ReleaseSpinlock',0,26,15
	.byte	'OSServiceId_TryToGetSpinlock',0,27,15
	.byte	'OSServiceId_ShutdownAllCores',0,28,15
	.byte	'OSServiceId_ControlIdle',0,29,15
	.byte	'OSServiceId_IocSend',0,30,15
	.byte	'OSServiceId_IocWrite',0,31,15
	.byte	'OSServiceId_IocSendGroup',0,32,15
	.byte	'OSServiceId_IocWriteGroup',0,33,15
	.byte	'OSServiceId_IocReceive',0,34,15
	.byte	'OSServiceId_IocRead',0,35,15
	.byte	'OSServiceId_IocReceiveGroup',0,36,15
	.byte	'OSServiceId_IocReadGroup',0,37,15
	.byte	'OSServiceId_IocEmptyQueue',0,38,15
	.byte	'OSServiceId_GetCurrentApplicationID',0,39,15
	.byte	'OSServiceId_GetExceptionContext',0,160,1,15
	.byte	'OSServiceId_SetExceptionContext',0,161,1,15
	.byte	'OSServiceId_CallNonTrustedFunction',0,162,1,15
	.byte	'OSServiceId_AppKill',0,163,1,15
	.byte	'OSServiceId_AlarmActionSetEvent',0,164,1,15
	.byte	'OSServiceId_AlarmActionActivateTask',0,165,1,15
	.byte	'OSServiceId_AlarmActionIncrementCounter',0,166,1,15
	.byte	'OSServiceId_AlarmActionCallback',0,167,1,15
	.byte	'OSServiceId_TimerIsr',0,168,1,15
	.byte	'OSServiceId_IsrWrapper',0,169,1,15
	.byte	'OSServiceId_GetTaskStackUsage',0,170,1,15
	.byte	'OSServiceId_GetISRStackUsage',0,171,1,15
	.byte	'OSServiceId_GetKernelStackUsage',0,172,1,15
	.byte	'OSServiceId_GetStartupHookStackUsage',0,173,1,15
	.byte	'OSServiceId_GetErrorHookStackUsage',0,174,1,15
	.byte	'OSServiceId_GetShutdownHookStackUsage',0,175,1,15
	.byte	'OSServiceId_GetProtectionHookStackUsage',0,176,1,15
	.byte	'OSServiceId_GetSemaphore',0,177,1,15
	.byte	'OSServiceId_ReleaseSemaphore',0,178,1,15
	.byte	'OSServiceId_ScheduleTableActivateTask',0,179,1,15
	.byte	'OSServiceId_ScheduleTableSetEvent',0,180,1,15
	.byte	'OSServiceId_DisableInterruptSource',0,181,1,15
	.byte	'OSServiceId_EnableInterruptSource',0,182,1,15
	.byte	'OSServiceId_ClearPendingInterrupt',0,183,1,15
	.byte	'OSServiceId_GetUnhandledIrq',0,184,1,15
	.byte	'OSServiceId_GetUnhandledExc',0,185,1,15
	.byte	'OSServiceId_HookCallCallback',0,186,1,15
	.byte	'OSServiceId_IsInterruptSourceEnabled',0,187,1,15
	.byte	'OSServiceId_IsInterruptPending',0,188,1,15
	.byte	'OSServiceId_CallFastTrustedFunction',0,189,1,15
	.byte	'OSServiceId_BarrierSynchronize',0,190,1,15
	.byte	'OSServiceId_InitialEnableInterruptSources',0,191,1,15
	.byte	'OSServiceId_GetCoreStartState',0,192,1,15
	.byte	'OSServiceId_StartOS',0,208,1,15
	.byte	'OSServiceId_GetActiveApplicationMode',0,210,1,15
	.byte	'OSServiceId_DisableAllInterrupts',0,211,1,15
	.byte	'OSServiceId_EnableAllInterrupts',0,212,1,15
	.byte	'OSServiceId_SuspendAllInterrupts',0,213,1,15
	.byte	'OSServiceId_ResumeAllInterrupts',0,214,1,15
	.byte	'OSServiceId_SuspendOSInterrupts',0,215,1,15
	.byte	'OSServiceId_ResumeOSInterrupts',0,216,1,15
	.byte	'OSServiceId_ActivateTask',0,217,1,15
	.byte	'OSServiceId_TerminateTask',0,218,1,15
	.byte	'OSServiceId_ChainTask',0,219,1,15
	.byte	'OSServiceId_GetTaskID',0,220,1,15
	.byte	'OSServiceId_GetTaskState',0,221,1,15
	.byte	'OSServiceId_Schedule',0,222,1,15
	.byte	'OSServiceId_SetEvent',0,223,1,15
	.byte	'OSServiceId_ClearEvent',0,224,1,15
	.byte	'OSServiceId_GetEvent',0,225,1,15
	.byte	'OSServiceId_WaitEvent',0,226,1,15
	.byte	'OSServiceId_GetAlarmBase',0,227,1,15
	.byte	'OSServiceId_GetAlarm',0,228,1,15
	.byte	'OSServiceId_SetRelAlarm',0,229,1,15
	.byte	'OSServiceId_SetAbsAlarm',0,230,1,15
	.byte	'OSServiceId_CancelAlarm',0,231,1,15
	.byte	'OSServiceId_GetResource',0,232,1,15
	.byte	'OSServiceId_ReleaseResource',0,233,1,15
	.byte	'OSSERVICEID_COUNT',0,255,1,0,10
	.byte	'OSServiceIdType',0,17,156,4,3
	.word	14534
	.byte	14,17,172,4,9,2,15
	.byte	'OS_STATUS_OK',0,0,15
	.byte	'OS_STATUS_CALLEVEL',0,2,15
	.byte	'OS_STATUS_LIMIT',0,4,15
	.byte	'OS_STATUS_RESOURCE',0,6,15
	.byte	'OS_STATUS_SERVICEID',0,9,15
	.byte	'OS_STATUS_ILLEGAL_ADDRESS',0,10,15
	.byte	'OS_STATUS_MISSINGEND',0,11,15
	.byte	'OS_STATUS_DISABLEDINT',0,12,15
	.byte	'OS_STATUS_STACKFAULT',0,13,15
	.byte	'OS_STATUS_PROTECTION_MEMORY',0,14,15
	.byte	'OS_STATUS_PROTECTION_TIME',0,15,15
	.byte	'OS_STATUS_PROTECTION_ARRIVAL',0,16,15
	.byte	'OS_STATUS_PROTECTION_LOCKED',0,17,15
	.byte	'OS_STATUS_PROTECTION_EXCEPTION',0,18,15
	.byte	'OS_STATUS_INTERFERENCE_DEADLOCK',0,19,15
	.byte	'OS_STATUS_NESTING_DEADLOCK',0,20,15
	.byte	'OS_STATUS_SPINLOCK',0,21,15
	.byte	'OS_STATUS_CORE',0,22,15
	.byte	'OS_STATUS_OVERFLOW',0,245,1,15
	.byte	'OS_STATUS_KILL_KERNEL_OBJ',0,246,1,15
	.byte	'OS_STATUS_NO_RESTARTTASK',0,247,1,15
	.byte	'OS_STATUS_CALL_NOT_ALLOWED',0,248,1,15
	.byte	'OS_STATUS_FUNCTION_UNAVAILABLE',0,249,1,15
	.byte	'OS_STATUS_PROTECTION_SYSCALL',0,250,1,15
	.byte	'OS_STATUS_PROTECTION_IRQ',0,251,1,15
	.byte	'OS_STATUS_API_ERROR',0,252,1,15
	.byte	'OS_STATUS_ASSERTION',0,253,1,15
	.byte	'OS_STATUS_OVERLOAD',0,254,1,15
	.byte	'OS_STATUS_ACCESSRIGHTS_1',0,129,2,15
	.byte	'OS_STATUS_CALLEVEL_SHARED_STACK',0,130,2,15
	.byte	'OS_STATUS_ID_1',0,131,2,15
	.byte	'OS_STATUS_UNLOCKED',0,133,2,15
	.byte	'OS_STATUS_STATE_1',0,135,2,15
	.byte	'OS_STATUS_VALUE_IS_ZERO_1',0,136,2,15
	.byte	'OS_STATUS_CORE_CROSS_DATA',0,150,2,15
	.byte	'OS_STATUS_PARAM_POINTER_1',0,151,2,15
	.byte	'OS_STATUS_STACKUSAGE_DISABLED_BY_CONFIG',0,241,3,15
	.byte	'OS_STATUS_NO_BARRIER_PARTICIPANT',0,242,3,15
	.byte	'OS_STATUS_UNIMPLEMENTED_CLEARPENDING',0,243,3,15
	.byte	'OS_STATUS_NO_NTFSTACK_POOL_EMPTY',0,244,3,15
	.byte	'OS_STATUS_ACCESSRIGHTS_2',0,129,4,15
	.byte	'OS_STATUS_CALLEVEL_CROSS_CORE_SYNC',0,130,4,15
	.byte	'OS_STATUS_ID_2',0,131,4,15
	.byte	'OS_STATUS_NOFUNC_1',0,133,4,15
	.byte	'OS_STATUS_STATE_2',0,135,4,15
	.byte	'OS_STATUS_VALUE_IS_ZERO_2',0,136,4,15
	.byte	'OS_STATUS_PARAM_POINTER_2',0,151,4,15
	.byte	'OS_STATUS_EVENT_DISABLED_BY_CONFIG',0,241,5,15
	.byte	'OS_STATUS_UNIMPLEMENTED_EXCEPTIONCONTEXT',0,243,5,15
	.byte	'OS_STATUS_NO_NTFSTACK_APPLIMIT_EXCEEDED',0,244,5,15
	.byte	'OS_STATUS_NOTACCESSIBLE_1',0,129,6,15
	.byte	'OS_STATUS_ID_TYPE_1',0,131,6,15
	.byte	'OS_STATUS_NOFUNC_2',0,133,6,15
	.byte	'OS_STATUS_STATE_STOPPED',0,135,6,15
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_1',0,136,6,15
	.byte	'OS_STATUS_PARAM_POINTER_3',0,151,6,15
	.byte	'OS_STATUS_NOTACCESSIBLE_2',0,129,8,15
	.byte	'OS_STATUS_ID_DIFFERENT_COUNTER',0,131,8,15
	.byte	'OS_STATUS_SPINLOCK_ORDER',0,133,8,15
	.byte	'OS_STATUS_STATE_RUNNING',0,135,8,15
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_2',0,136,8,15
	.byte	'OS_STATUS_NOEXTENDEDTASK_1',0,129,10,15
	.byte	'OS_STATUS_ID_DIFFERENT_SYNC',0,131,10,15
	.byte	'OS_STATUS_STOPPED_1',0,133,10,15
	.byte	'OS_STATUS_STATE_NEXTED',0,135,10,15
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_3',0,136,10,15
	.byte	'OS_STATUS_NOEXTENDEDTASK_2',0,129,12,15
	.byte	'OS_STATUS_HOOK_NOT_AVAILABLE',0,131,12,15
	.byte	'OS_STATUS_NOT_STOPPED_2',0,133,12,15
	.byte	'OS_STATUS_STATE_WAITING',0,135,12,15
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_1',0,136,12,15
	.byte	'OS_STATUS_NOEXTENDEDTASK_CALLER',0,129,14,15
	.byte	'OS_STATUS_NEXTED_1',0,133,14,15
	.byte	'OS_STATUS_STATE_NO_RESTART',0,135,14,15
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_2',0,136,14,15
	.byte	'OS_STATUS_LOCKED',0,129,16,15
	.byte	'OS_STATUS_KILLING_IS_DISABLED',0,133,16,15
	.byte	'OS_STATUS_STATE_ALREADY_TERMINATED',0,135,16,15
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_1',0,136,16,15
	.byte	'OS_STATUS_PRIORITY',0,129,18,15
	.byte	'OS_STATUS_ORDER',0,133,18,15
	.byte	'OS_STATUS_STATE_RESTARTING_NO_MEMBER',0,135,18,15
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_2',0,136,18,15
	.byte	'OS_STATUS_NOT_THE_OWNER_1',0,129,20,15
	.byte	'OS_STATUS_STATE_ALREADY_RESTARTING',0,135,20,15
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_3',0,136,20,15
	.byte	'OS_STATUS_VALUE_IS_NOT_BOOLEAN',0,136,22,0,10
	.byte	'Os_StatusType',0,17,232,5,3
	.word	17704
	.byte	11,17,133,6,9,4,12
	.byte	'Service',0
	.word	14534
	.byte	1,2,35,0,12
	.byte	'Error',0
	.word	131
	.byte	1,2,35,1,12
	.byte	'DetailedError',0
	.word	17704
	.byte	2,2,35,2,0,10
	.byte	'Os_ErrorInformationType',0,17,143,6,3
	.word	20234
	.byte	14,17,175,6,9,1,15
	.byte	'SCHEDULETABLE_STOPPED',0,0,15
	.byte	'SCHEDULETABLE_NEXT',0,1,15
	.byte	'SCHEDULETABLE_WAITING',0,2,15
	.byte	'SCHEDULETABLE_RUNNING',0,3,15
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,10
	.byte	'ScheduleTableStatusType',0,17,192,6,3
	.word	20329
	.byte	10
	.byte	'Os_AccessCheckAddress',0,17,199,6,29
	.word	1328
	.byte	14,17,211,6,9,1,15
	.byte	'OS_MEM_ACCESS_TYPE_NON',0,0,15
	.byte	'OS_MEM_ACCESS_TYPE_R',0,1,15
	.byte	'OS_MEM_ACCESS_TYPE_READ',0,1,15
	.byte	'OS_MEM_ACCESS_TYPE_W',0,2,15
	.byte	'OS_MEM_ACCESS_TYPE_WRITE',0,2,15
	.byte	'OS_MEM_ACCESS_TYPE_RW',0,3,15
	.byte	'OS_MEM_ACCESS_TYPE_EXECUTE',0,4,15
	.byte	'OS_MEM_ACCESS_TYPE_X',0,4,15
	.byte	'OS_MEM_ACCESS_TYPE_RX',0,5,15
	.byte	'OS_MEM_ACCESS_TYPE_WX',0,6,15
	.byte	'OS_MEM_ACCESS_TYPE_RWX',0,7,15
	.byte	'OS_MEM_ACCESS_TYPE_S',0,8,15
	.byte	'OS_MEM_ACCESS_TYPE_STACK',0,8,15
	.byte	'OS_MEM_ACCESS_TYPE_RS',0,9,15
	.byte	'OS_MEM_ACCESS_TYPE_WS',0,10,15
	.byte	'OS_MEM_ACCESS_TYPE_RWS',0,11,15
	.byte	'OS_MEM_ACCESS_TYPE_XS',0,12,15
	.byte	'OS_MEM_ACCESS_TYPE_RXS',0,13,15
	.byte	'OS_MEM_ACCESS_TYPE_WXS',0,14,15
	.byte	'OS_MEM_ACCESS_TYPE_RWXS',0,15,0,10
	.byte	'Os_MemAccessType',0,17,233,6,3
	.word	20533
	.byte	10
	.byte	'Com_RxSigProcessState',0,1,229,3,3
	.word	2834
	.byte	10
	.byte	'FctPtrCacheStrct',0,1,241,3,3
	.word	2094
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L222:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,1,0,0,6,11,0,0,0,7,15,0,73,19,0,0,8,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,38,0,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73
	.byte	19,0,0,11,19,1,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56,9,0,0,13,59,0,3,8,0,0,14,4,1,58
	.byte	15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,46,1,3,8,54,15,39,12,63,12,60,12,0,0,17,5,0,73,19,0
	.byte	0,18,53,0,73,19,0,0,19,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,20,5,0,3,8,73,19,0,0,21,46,1,3,8,58
	.byte	15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,22,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12
	.byte	0,0,23,19,1,3,8,58,15,59,15,57,15,11,15,0,0,24,1,1,11,15,73,19,0,0,25,33,0,47,15,0,0,26,46,0,3,8,58,15
	.byte	59,15,57,15,54,15,39,12,63,12,60,12,0,0,27,23,1,3,8,58,15,59,15,57,15,11,15,0,0,28,46,1,49,19,0,0,29,5
	.byte	0,49,19,0,0,30,29,1,49,19,0,0,31,11,1,49,19,0,0,32,11,0,49,19,0,0,33,21,0,54,15,0,0,34,52,0,3,8,58,15
	.byte	59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L223:
	.word	.L919-.L918
.L918:
	.half	3
	.word	.L921-.L920
.L920:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\appl\\GenData',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation',0,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0
	.byte	'ComStack_Types.h',0,1,0,0
	.byte	'Det.h',0,2,0,0
	.byte	'vstdlib.h',0,3,0,0
	.byte	'PduR_Com.h',0,4,0,0
	.byte	'Com_Cfg.h',0,4,0,0
	.byte	'Com_Types.h',0,4,0,0
	.byte	'..\\component\\Com\\Implementation\\Com.h',0,0,0,0
	.byte	'Os.h',0,5,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Cfg.h',0,4,0,0
	.byte	'Det_Cfg.h',0,4,0,0
	.byte	'Os_Types_Lcfg.h',0,4,0,0
	.byte	'Os_Hal_Os_Types.h',0,5,0,0
	.byte	'Os_Hal_OsInt.h',0,5,0,0
	.byte	'Os_Types.h',0,5,0,0,0
.L921:
.L919:
	.sdecl	'.debug_info',debug,cluster('Com_RxIndication')
	.sect	'.debug_info'
.L224:
	.word	424
	.half	3
	.word	.L225
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L227,.L226
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_RxIndication',0,1,183,125,22,1,1,1
	.word	.L201,.L404,.L200
	.byte	4
	.byte	'RxPduId',0,1,183,125,49
	.word	.L405,.L406
	.byte	4
	.byte	'PduInfoPtr',0,1,183,125,105
	.word	.L407,.L408
	.byte	5
	.word	.L201,.L404
	.byte	6
	.byte	'errorId',0,1,186,125,9
	.word	.L405,.L409
	.byte	7
	.word	.L410,.L100,.L96
	.byte	8
	.word	.L411,.L412
	.byte	8
	.word	.L413,.L414
	.byte	9
	.word	.L415,.L100,.L96
	.byte	9
	.word	.L416,.L417,.L96
	.byte	6
	.byte	'PduInfoLocal',0,1,224,67,19
	.word	.L418,.L419
	.byte	7
	.word	.L420,.L421,.L422
	.byte	8
	.word	.L423,.L424
	.byte	8
	.word	.L425,.L426
	.byte	10
	.word	.L427,.L428
	.byte	11
	.word	.L430,.L431,.L105
	.byte	0,0,7
	.word	.L420,.L429,.L96
	.byte	8
	.word	.L423,.L424
	.byte	8
	.word	.L425,.L426
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_RxIndication')
	.sect	'.debug_abbrev'
.L225:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,85,6,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_RxIndication')
	.sect	'.debug_line'
.L226:
	.word	.L923-.L922
.L922:
	.half	3
	.word	.L925-.L924
.L924:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L925:
	.byte	5,17,7,0,5,2
	.word	.L201
	.byte	3,185,253,0,1,5,7,9
	.half	.L906-.L201
	.byte	3,5,1,5,13,7,9
	.half	.L926-.L906
	.byte	3,2,1,5,27,1,5,8,9
	.half	.L95-.L926
	.byte	3,5,1,5,13,7,9
	.half	.L927-.L95
	.byte	3,2,1,5,26,1,5,8,9
	.half	.L97-.L927
	.byte	3,9,1,5,22,7,9
	.half	.L928-.L97
	.byte	3,18,1,5,11,9
	.half	.L929-.L928
	.byte	1,5,62,7,9
	.half	.L930-.L929
	.byte	1,5,74,9
	.half	.L931-.L930
	.byte	1,5,13,7,9
	.half	.L99-.L931
	.byte	3,2,1,5,34,1,5,6,9
	.half	.L100-.L99
	.byte	3,229,69,1,5,3,9
	.half	.L932-.L100
	.byte	1,5,43,7,9
	.half	.L417-.L932
	.byte	3,23,1,5,42,9
	.half	.L933-.L417
	.byte	3,1,1,5,6,9
	.half	.L421-.L933
	.byte	3,215,8,1,5,30,9
	.half	.L422-.L421
	.byte	3,169,119,1,5,6,3,215,8,1,5,3,9
	.half	.L429-.L422
	.byte	1,5,5,7,9
	.half	.L934-.L429
	.byte	3,2,1,5,22,9
	.half	.L907-.L934
	.byte	3,7,1,5,9,9
	.half	.L935-.L907
	.byte	1,5,24,7,9
	.half	.L431-.L935
	.byte	3,4,1,5,11,3,1,1,5,24,9
	.half	.L936-.L431
	.byte	3,127,1,5,11,3,1,1,5,5,9
	.half	.L105-.L936
	.byte	3,20,1,9
	.half	.L937-.L105
	.byte	3,4,1,5,3,9
	.half	.L96-.L937
	.byte	3,151,49,1,5,5,7,9
	.half	.L938-.L96
	.byte	3,2,1,5,1,9
	.half	.L106-.L938
	.byte	3,7,1,7,9
	.half	.L228-.L106
	.byte	0,1,1
.L923:
	.sdecl	'.debug_ranges',debug,cluster('Com_RxIndication')
	.sect	'.debug_ranges'
.L227:
	.word	-1,.L201,0,.L228-.L201,0,0
.L428:
	.word	-1,.L201,.L421-.L201,.L422-.L201,.L429-.L201,.L96-.L201,0,0
	.sdecl	'.debug_info',debug,cluster('Com_TxConfirmation')
	.sect	'.debug_info'
.L229:
	.word	268
	.half	3
	.word	.L230
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L232,.L231
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_TxConfirmation',0,1,219,133,1,22,1,1,1
	.word	.L211,.L432,.L210
	.byte	4
	.byte	'TxPduId',0,1,219,133,1,51
	.word	.L405,.L433
	.byte	5
	.word	.L211,.L432
	.byte	6
	.byte	'errorId',0,1,222,133,1,9
	.word	.L405,.L434
	.byte	7
	.word	.L435,.L121,.L120
	.byte	8
	.word	.L436,.L437
	.byte	9
	.word	.L438,.L121,.L120
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_TxConfirmation')
	.sect	'.debug_abbrev'
.L230:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_TxConfirmation')
	.sect	'.debug_line'
.L231:
	.word	.L940-.L939
.L939:
	.half	3
	.word	.L942-.L941
.L941:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L942:
	.byte	5,17,7,0,5,2
	.word	.L211
	.byte	3,221,133,1,1,5,7,9
	.half	.L912-.L211
	.byte	3,4,1,5,13,7,9
	.half	.L943-.L912
	.byte	3,2,1,5,27,1,5,8,9
	.half	.L119-.L943
	.byte	3,5,1,5,13,7,9
	.half	.L944-.L119
	.byte	3,2,1,5,26,1,5,3,9
	.half	.L121-.L944
	.byte	3,140,96,1,9
	.half	.L913-.L121
	.byte	3,24,1,9
	.half	.L120-.L913
	.byte	3,239,31,1,5,5,7,9
	.half	.L945-.L120
	.byte	3,2,1,5,1,9
	.half	.L123-.L945
	.byte	3,6,1,7,9
	.half	.L233-.L123
	.byte	0,1,1
.L940:
	.sdecl	'.debug_ranges',debug,cluster('Com_TxConfirmation')
	.sect	'.debug_ranges'
.L232:
	.word	-1,.L211,0,.L233-.L211,0,0
	.sdecl	'.debug_info',debug,cluster('Com_Init')
	.sect	'.debug_info'
.L234:
	.word	785
	.half	3
	.word	.L235
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L237,.L236
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_Init',0,1,251,116,22,1,1,1
	.word	.L149,.L439,.L148
	.byte	4
	.byte	'config',0,1,251,116,81
	.word	.L440,.L441
	.byte	5
	.word	.L149,.L439
	.byte	6
	.byte	'errorId',0,1,254,116,9
	.word	.L405,.L442
	.byte	7
	.word	.L443,.L444,.L445
	.byte	8
	.word	.L446,.L447
	.byte	7
	.word	.L450,.L448,.L449
	.byte	9
	.word	.L451,.L452
	.byte	10
	.word	.L453,.L448,.L449
	.byte	7
	.word	.L454,.L448,.L449
	.byte	9
	.word	.L455,.L456
	.byte	8
	.word	.L457,.L458
	.byte	8
	.word	.L459,.L460
	.byte	6
	.byte	'com_RxAccessInfoIndIdx',0,1,144,74,46
	.word	.L405,.L462
	.byte	10
	.word	.L463,.L464,.L4
	.byte	7
	.word	.L465,.L464,.L3
	.byte	9
	.word	.L466,.L467
	.byte	9
	.word	.L468,.L469
	.byte	9
	.word	.L470,.L471
	.byte	11
	.word	.L472,.L473
	.byte	0,7
	.word	.L465,.L474,.L475
	.byte	9
	.word	.L466,.L467
	.byte	9
	.word	.L468,.L469
	.byte	9
	.word	.L470,.L471
	.byte	0,7
	.word	.L465,.L476,.L4
	.byte	9
	.word	.L466,.L467
	.byte	9
	.word	.L468,.L469
	.byte	9
	.word	.L470,.L471
	.byte	0,0,0,0,0,0,0,0,0,12
	.word	.L443,.L448,.L449
	.byte	7
	.word	.L477,.L449,.L478
	.byte	8
	.word	.L479,.L480
	.byte	6
	.byte	'ComTxPduId',0,1,237,37,25
	.word	.L405,.L481
	.byte	7
	.word	.L482,.L483,.L484
	.byte	9
	.word	.L485,.L486
	.byte	8
	.word	.L487,.L488
	.byte	7
	.word	.L489,.L483,.L484
	.byte	9
	.word	.L490,.L491
	.byte	11
	.word	.L492,.L493
	.byte	0,7
	.word	.L489,.L7,.L494
	.byte	9
	.word	.L490,.L491
	.byte	0,7
	.word	.L495,.L494,.L8
	.byte	9
	.word	.L496,.L497
	.byte	13
	.word	.L498,.L494,.L8
	.byte	0,7
	.word	.L499,.L8,.L13
	.byte	9
	.word	.L500,.L501
	.byte	10
	.word	.L502,.L8,.L13
	.byte	7
	.word	.L503,.L504,.L12
	.byte	9
	.word	.L505,.L506
	.byte	13
	.word	.L507,.L504,.L12
	.byte	0,0,0,0,0,7
	.word	.L482,.L7,.L13
	.byte	9
	.word	.L485,.L486
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_Init')
	.sect	'.debug_abbrev'
.L235:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,85,6,0,0,9,5,0,49,16,2,6,0,0
	.byte	10,11,1,49,16,17,1,18,1,0,0,11,11,0,49,16,85,6,0,0,12,29,0,49,16,17,1,18,1,0,0,13,11,0,49,16,17,1,18,1
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_Init')
	.sect	'.debug_line'
.L236:
	.word	.L947-.L946
.L946:
	.half	3
	.word	.L949-.L948
.L948:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L949:
	.byte	5,6,7,0,5,2
	.word	.L149
	.byte	3,132,245,0,1,5,22,9
	.half	.L950-.L149
	.byte	3,118,1,5,6,9
	.half	.L864-.L950
	.byte	3,10,1,5,19,9
	.half	.L951-.L864
	.byte	3,121,1,5,5,3,213,85,1,5,17,9
	.half	.L952-.L951
	.byte	3,171,42,1,5,6,3,7,1,5,5,9
	.half	.L444-.L952
	.byte	3,206,85,1,5,13,9
	.half	.L445-.L444
	.byte	3,180,42,1,5,5,3,204,85,1,5,68,9
	.half	.L448-.L445
	.byte	3,67,1,5,7,9
	.half	.L865-.L448
	.byte	3,196,110,1,5,36,9
	.half	.L464-.L865
	.byte	3,185,109,1,5,87,3,254,35,1,5,68,9
	.half	.L3-.L464
	.byte	3,5,1,5,11,9
	.half	.L474-.L3
	.byte	3,183,110,1,5,114,9
	.half	.L475-.L474
	.byte	3,203,17,1,5,3,9
	.half	.L476-.L475
	.byte	3,181,110,1,5,7,7,9
	.half	.L953-.L476
	.byte	3,13,1,5,111,9
	.half	.L4-.L953
	.byte	3,183,17,1,5,87,9
	.half	.L954-.L4
	.byte	1,5,6,7,9
	.half	.L461-.L954
	.byte	3,192,0,1,5,3,9
	.half	.L449-.L461
	.byte	3,161,85,1,5,36,9
	.half	.L868-.L449
	.byte	3,251,5,1,5,5,9
	.half	.L955-.L868
	.byte	3,187,62,1,5,3,9
	.half	.L956-.L955
	.byte	3,150,3,1,5,5,9
	.half	.L957-.L956
	.byte	3,247,1,1,9
	.half	.L958-.L957
	.byte	3,18,1,5,3,9
	.half	.L959-.L958
	.byte	3,247,125,1,5,5,9
	.half	.L960-.L959
	.byte	3,130,2,1,9
	.half	.L483-.L960
	.byte	3,232,122,1,5,7,9
	.half	.L484-.L483
	.byte	3,219,65,1,5,46,9
	.half	.L961-.L484
	.byte	3,108,1,5,5,9
	.half	.L7-.L961
	.byte	3,185,62,1,5,6,9
	.half	.L494-.L7
	.byte	3,217,123,1,5,3,9
	.half	.L962-.L494
	.byte	1,5,5,7,9
	.half	.L963-.L962
	.byte	3,2,1,5,3,9
	.half	.L8-.L963
	.byte	3,187,7,1,5,6,9
	.half	.L504-.L8
	.byte	3,245,1,1,5,3,9
	.half	.L964-.L504
	.byte	1,5,5,7,9
	.half	.L965-.L964
	.byte	3,2,1,9
	.half	.L966-.L965
	.byte	3,11,1,5,47,9
	.half	.L967-.L966
	.byte	3,117,1,5,5,9
	.half	.L11-.L967
	.byte	3,17,1,5,6,9
	.half	.L12-.L11
	.byte	3,254,125,1,5,3,9
	.half	.L968-.L12
	.byte	1,5,5,7,9
	.half	.L969-.L968
	.byte	3,2,1,5,7,9
	.half	.L13-.L969
	.byte	3,189,190,127,1,5,60,9
	.half	.L970-.L13
	.byte	3,108,1,5,58,9
	.half	.L971-.L970
	.byte	1,5,46,9
	.half	.L972-.L971
	.byte	1,5,5,9
	.half	.L478-.L972
	.byte	3,207,207,0,1,9
	.half	.L973-.L478
	.byte	3,25,1,9
	.half	.L974-.L973
	.byte	3,3,1,9
	.half	.L975-.L974
	.byte	3,3,1,9
	.half	.L976-.L975
	.byte	3,9,1,9
	.half	.L977-.L976
	.byte	3,3,1,9
	.half	.L978-.L977
	.byte	3,12,1,5,3,9
	.half	.L979-.L978
	.byte	3,5,1,5,5,7,9
	.half	.L980-.L979
	.byte	3,2,1,5,1,9
	.half	.L14-.L980
	.byte	3,6,1,7,9
	.half	.L238-.L14
	.byte	0,1,1
.L947:
	.sdecl	'.debug_ranges',debug,cluster('Com_Init')
	.sect	'.debug_ranges'
.L237:
	.word	-1,.L149,0,.L238-.L149,0,0
.L447:
	.word	-1,.L149,.L444-.L149,.L445-.L149,.L448-.L149,.L449-.L149,0,0
.L458:
	.word	-1,.L149,.L448-.L149,.L449-.L149,-1,.L153,0,.L373-.L153,0,0
.L460:
	.word	-1,.L149,.L448-.L149,.L461-.L149,-1,.L155,0,.L368-.L155,0,0
.L473:
	.word	-1,.L149,.L464-.L149,.L3-.L149,.L474-.L149,.L475-.L149,.L476-.L149,.L4-.L149,0,0
.L480:
	.word	-1,.L149,.L449-.L149,.L478-.L149,-1,.L151,0,.L378-.L151,-1,.L157,0,.L363-.L157,0,0
.L488:
	.word	-1,.L149,.L483-.L149,.L484-.L149,.L7-.L149,.L13-.L149,0,0
.L493:
	.word	-1,.L149,.L483-.L149,.L484-.L149,.L7-.L149,.L494-.L149,0,0
	.sdecl	'.debug_info',debug,cluster('Com_InitMemory')
	.sect	'.debug_info'
.L239:
	.word	182
	.half	3
	.word	.L240
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L242,.L241
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_InitMemory',0,1,140,118,22,1,1,1
	.word	.L159,.L508,.L158
	.byte	4
	.word	.L159,.L508
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_InitMemory')
	.sect	'.debug_abbrev'
.L240:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_InitMemory')
	.sect	'.debug_line'
.L241:
	.word	.L982-.L981
.L981:
	.half	3
	.word	.L984-.L983
.L983:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L984:
	.byte	5,3,7,0,5,2
	.word	.L159
	.byte	3,142,246,0,1,5,1,9
	.half	.L985-.L159
	.byte	3,4,1,7,9
	.half	.L243-.L985
	.byte	0,1,1
.L982:
	.sdecl	'.debug_ranges',debug,cluster('Com_InitMemory')
	.sect	'.debug_ranges'
.L242:
	.word	-1,.L159,0,.L243-.L159,0,0
	.sdecl	'.debug_info',debug,cluster('Com_DeInit')
	.sect	'.debug_info'
.L244:
	.word	240
	.half	3
	.word	.L245
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L247,.L246
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_DeInit',0,1,160,118,22,1,1,1
	.word	.L161,.L509,.L160
	.byte	4
	.word	.L510
	.byte	5
	.byte	'errorId',0,1,163,118,9
	.word	.L405,.L511
	.byte	6
	.word	.L15,.L512
	.byte	5
	.byte	'clearIpduGroupVector',0,1,193,118,27
	.word	.L513,.L514
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_DeInit')
	.sect	'.debug_abbrev'
.L245:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,85,6,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,11,1,17,1
	.byte	18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_DeInit')
	.sect	'.debug_line'
.L246:
	.word	.L987-.L986
.L986:
	.half	3
	.word	.L989-.L988
.L988:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L989:
	.byte	5,7,7,0,5,2
	.word	.L161
	.byte	3,166,246,0,1,5,17,9
	.half	.L990-.L161
	.byte	3,124,1,5,22,3,125,1,5,7,9
	.half	.L869-.L990
	.byte	3,7,1,5,13,7,9
	.half	.L991-.L869
	.byte	3,2,1,5,27,1,5,32,9
	.half	.L15-.L991
	.byte	3,25,1,5,28,9
	.half	.L992-.L15
	.byte	3,1,1,5,50,9
	.half	.L993-.L992
	.byte	1,5,5,9
	.half	.L512-.L993
	.byte	3,36,1,5,3,9
	.half	.L16-.L512
	.byte	3,5,1,5,5,7,9
	.half	.L994-.L16
	.byte	3,2,1,5,1,9
	.half	.L17-.L994
	.byte	3,5,1,7,9
	.half	.L248-.L17
	.byte	0,1,1
.L987:
	.sdecl	'.debug_ranges',debug,cluster('Com_DeInit')
	.sect	'.debug_ranges'
.L247:
	.word	-1,.L161,0,.L248-.L161,0,0
.L510:
	.word	-1,.L161,0,.L509-.L161,-1,.L163,0,.L403-.L163,0,0
	.sdecl	'.debug_info',debug,cluster('Com_IpduGroupControl')
	.sect	'.debug_info'
.L249:
	.word	1545
	.half	3
	.word	.L250
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L252,.L251
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_IpduGroupControl',0,1,255,118,22,1,1,1
	.word	.L165,.L515,.L164
	.byte	4
	.byte	'ipduGroupVector',0,1,255,118,63
	.word	.L516,.L517
	.byte	4
	.byte	'initialize',0,1,255,118,88
	.word	.L405,.L518
	.byte	5
	.word	.L519
	.byte	6
	.byte	'errorId',0,1,130,119,9
	.word	.L405,.L520
	.byte	7
	.word	.L521,.L18,.L522
	.byte	8
	.word	.L523,.L524
	.byte	8
	.word	.L525,.L526
	.byte	9
	.word	.L527,.L18,.L522
	.byte	7
	.word	.L528,.L18,.L529
	.byte	10
	.word	.L530,.L18,.L529
	.byte	0,9
	.word	.L531,.L529,.L532
	.byte	6
	.byte	'bRequestedActiveState',0,1,231,33,13
	.word	.L405,.L533
	.byte	6
	.byte	'pduGrpVectorIdx',0,1,232,33,43
	.word	.L405,.L534
	.byte	9
	.word	.L535,.L536,.L23
	.byte	6
	.byte	'iByteIndex',0,1,235,33,19
	.word	.L405,.L537
	.byte	0,7
	.word	.L538,.L539,.L540
	.byte	8
	.word	.L541,.L542
	.byte	8
	.word	.L543,.L544
	.byte	9
	.word	.L545,.L539,.L540
	.byte	7
	.word	.L450,.L546,.L26
	.byte	8
	.word	.L451,.L547
	.byte	9
	.word	.L453,.L546,.L26
	.byte	7
	.word	.L454,.L546,.L26
	.byte	8
	.word	.L455,.L548
	.byte	9
	.word	.L457,.L546,.L26
	.byte	9
	.word	.L459,.L546,.L549
	.byte	6
	.byte	'com_RxAccessInfoIndIdx',0,1,144,74,46
	.word	.L405,.L550
	.byte	9
	.word	.L463,.L27,.L28
	.byte	7
	.word	.L465,.L551,.L552
	.byte	8
	.word	.L466,.L553
	.byte	8
	.word	.L468,.L554
	.byte	8
	.word	.L470,.L555
	.byte	11
	.word	.L472,.L556
	.byte	0,7
	.word	.L465,.L557,.L28
	.byte	8
	.word	.L466,.L553
	.byte	8
	.word	.L468,.L554
	.byte	8
	.word	.L470,.L555
	.byte	0,0,0,0,0,0,0,0,0,7
	.word	.L558,.L25,.L24
	.byte	8
	.word	.L559,.L560
	.byte	10
	.word	.L561,.L25,.L24
	.byte	0,7
	.word	.L562,.L24,.L532
	.byte	9
	.word	.L563,.L24,.L532
	.byte	7
	.word	.L564,.L565,.L566
	.byte	11
	.word	.L567,.L568
	.byte	0,7
	.word	.L528,.L566,.L33
	.byte	10
	.word	.L530,.L566,.L33
	.byte	0,12
	.word	.L564,.L33,.L532
	.byte	0,0,0,7
	.word	.L564,.L532,.L522
	.byte	10
	.word	.L567,.L532,.L522
	.byte	0,0,0,13
	.word	.L522,.L19
	.byte	6
	.byte	'idx',0,1,152,119,41
	.word	.L405,.L569
	.byte	7
	.word	.L570,.L522,.L571
	.byte	10
	.word	.L572,.L522,.L571
	.byte	0,5
	.word	.L573
	.byte	7
	.word	.L576,.L574,.L575
	.byte	14
	.word	.L577,.L578
	.byte	7
	.word	.L621,.L49,.L622
	.byte	10
	.word	.L623,.L49,.L622
	.byte	0,7
	.word	.L570,.L622,.L50
	.byte	10
	.word	.L572,.L622,.L50
	.byte	0,0,0,7
	.word	.L579,.L34,.L38
	.byte	8
	.word	.L580,.L581
	.byte	8
	.word	.L582,.L583
	.byte	9
	.word	.L584,.L34,.L38
	.byte	6
	.byte	'bRequestedActiveState',0,1,213,35,11
	.word	.L405,.L585
	.byte	6
	.byte	'pduGrpVectorIdx',0,1,214,35,41
	.word	.L405,.L586
	.byte	6
	.byte	'iByteIndex',0,1,216,35,15
	.word	.L405,.L587
	.byte	0,0,7
	.word	.L588,.L38,.L39
	.byte	8
	.word	.L589,.L590
	.byte	8
	.word	.L591,.L592
	.byte	8
	.word	.L593,.L594
	.byte	9
	.word	.L595,.L38,.L39
	.byte	7
	.word	.L596,.L597,.L598
	.byte	8
	.word	.L599,.L600
	.byte	8
	.word	.L601,.L602
	.byte	9
	.word	.L603,.L597,.L598
	.byte	7
	.word	.L482,.L604,.L47
	.byte	8
	.word	.L485,.L605
	.byte	9
	.word	.L487,.L604,.L47
	.byte	7
	.word	.L489,.L604,.L606
	.byte	8
	.word	.L490,.L607
	.byte	10
	.word	.L492,.L604,.L606
	.byte	0,7
	.word	.L495,.L606,.L42
	.byte	8
	.word	.L496,.L608
	.byte	10
	.word	.L498,.L606,.L42
	.byte	0,7
	.word	.L499,.L42,.L47
	.byte	8
	.word	.L500,.L609
	.byte	9
	.word	.L502,.L42,.L47
	.byte	7
	.word	.L503,.L610,.L46
	.byte	8
	.word	.L505,.L611
	.byte	10
	.word	.L507,.L610,.L46
	.byte	0,0,0,0,0,0,0,7
	.word	.L612,.L40,.L39
	.byte	8
	.word	.L613,.L614
	.byte	9
	.word	.L615,.L40,.L39
	.byte	7
	.word	.L616,.L40,.L617
	.byte	8
	.word	.L618,.L619
	.byte	10
	.word	.L620,.L40,.L617
	.byte	0,0,0,0,0,12
	.word	.L576,.L39,.L50
	.byte	0,7
	.word	.L621,.L624,.L19
	.byte	10
	.word	.L623,.L624,.L19
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_IpduGroupControl')
	.sect	'.debug_abbrev'
.L250:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	10,11,0,49,16,17,1,18,1,0,0,11,11,0,49,16,85,6,0,0,12,29,0,49,16,17,1,18,1,0,0,13,11,1,17,1,18,1,0,0,14
	.byte	11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_IpduGroupControl')
	.sect	'.debug_line'
.L251:
	.word	.L996-.L995
.L995:
	.half	3
	.word	.L998-.L997
.L997:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L998:
	.byte	5,19,7,0,5,2
	.word	.L165
	.byte	3,129,247,0,1,5,22,3,125,1,5,17,9
	.half	.L873-.L165
	.byte	3,3,1,5,7,3,4,1,5,13,9
	.half	.L999-.L873
	.byte	3,2,1,5,27,1,5,3,9
	.half	.L18-.L999
	.byte	3,168,175,127,1,5,35,9
	.half	.L529-.L18
	.byte	3,183,123,1,5,61,9
	.half	.L875-.L529
	.byte	3,1,1,5,59,9
	.half	.L1000-.L875
	.byte	1,5,30,9
	.half	.L536-.L1000
	.byte	3,3,1,5,117,3,1,1,5,28,9
	.half	.L21-.L536
	.byte	3,3,1,5,19,9
	.half	.L1001-.L21
	.byte	3,5,1,5,28,9
	.half	.L878-.L1001
	.byte	3,123,1,5,43,9
	.half	.L1002-.L878
	.byte	1,5,19,9
	.half	.L1003-.L1002
	.byte	3,5,1,5,43,9
	.half	.L879-.L1003
	.byte	3,123,1,5,134,1,9
	.half	.L1004-.L879
	.byte	3,125,1,5,41,9
	.half	.L1005-.L1004
	.byte	3,3,1,5,33,9
	.half	.L1006-.L1005
	.byte	3,3,1,5,13,9
	.half	.L20-.L1006
	.byte	3,122,1,5,108,7,9
	.half	.L1007-.L20
	.byte	1,5,9,7,9
	.half	.L23-.L1007
	.byte	3,13,1,5,5,9
	.half	.L877-.L23
	.byte	1,5,7,7,9
	.half	.L1008-.L877
	.byte	3,4,1,5,5,7,9
	.half	.L539-.L1008
	.byte	3,214,40,1,5,3,9
	.half	.L876-.L539
	.byte	3,165,86,1,5,68,7,9
	.half	.L546-.L876
	.byte	3,158,41,1,5,7,9
	.half	.L1009-.L546
	.byte	3,196,110,1,5,87,9
	.half	.L1010-.L1009
	.byte	3,183,17,1,5,68,9
	.half	.L27-.L1010
	.byte	3,5,1,5,11,9
	.half	.L551-.L27
	.byte	3,183,110,1,5,114,9
	.half	.L552-.L551
	.byte	3,203,17,1,5,3,9
	.half	.L557-.L552
	.byte	3,181,110,1,5,7,7,9
	.half	.L1011-.L557
	.byte	3,13,1,5,111,9
	.half	.L28-.L1011
	.byte	3,183,17,1,5,87,9
	.half	.L1012-.L28
	.byte	1,5,6,7,9
	.half	.L549-.L1012
	.byte	3,192,0,1,9
	.half	.L26-.L549
	.byte	3,183,86,1,5,3,9
	.half	.L882-.L26
	.byte	3,7,1,5,54,3,241,0,1,5,3,9
	.half	.L25-.L882
	.byte	3,26,1,9
	.half	.L24-.L25
	.byte	3,179,4,1,5,6,9
	.half	.L1013-.L24
	.byte	1,5,3,9
	.half	.L1014-.L1013
	.byte	1,7,9
	.half	.L565-.L1014
	.byte	3,113,1,9
	.half	.L1015-.L565
	.byte	3,2,1,9
	.half	.L566-.L1015
	.byte	3,112,1,9
	.half	.L33-.L566
	.byte	3,33,1,3,109,1,9
	.half	.L532-.L33
	.byte	3,2,1,9
	.half	.L522-.L532
	.byte	3,38,1,5,15,9
	.half	.L571-.L522
	.byte	3,182,208,0,1,5,59,3,186,172,127,1,5,7,9
	.half	.L1016-.L571
	.byte	3,101,1,5,5,9
	.half	.L1017-.L1016
	.byte	3,140,198,0,1,5,3,9
	.half	.L1018-.L1017
	.byte	3,247,125,1,5,5,9
	.half	.L1019-.L1018
	.byte	3,247,1,1,5,6,9
	.half	.L574-.L1019
	.byte	3,206,189,127,1,5,62,9
	.half	.L575-.L574
	.byte	3,153,208,0,1,5,33,9
	.half	.L34-.L575
	.byte	3,185,172,127,1,5,59,3,1,1,5,26,9
	.half	.L884-.L34
	.byte	3,2,1,5,29,9
	.half	.L887-.L884
	.byte	3,1,1,5,115,1,5,24,9
	.half	.L36-.L887
	.byte	3,2,1,5,15,9
	.half	.L1020-.L36
	.byte	3,5,1,5,24,9
	.half	.L888-.L1020
	.byte	3,123,1,5,39,9
	.half	.L1021-.L888
	.byte	1,5,15,9
	.half	.L1022-.L1021
	.byte	3,5,1,5,39,9
	.half	.L889-.L1022
	.byte	3,123,1,5,37,9
	.half	.L1023-.L889
	.byte	1,5,29,9
	.half	.L1024-.L1023
	.byte	3,3,1,5,132,1,9
	.half	.L1025-.L1024
	.byte	3,123,1,5,29,9
	.half	.L35-.L1025
	.byte	1,5,10,9
	.half	.L1026-.L35
	.byte	1,5,105,7,9
	.half	.L1027-.L1026
	.byte	1,5,7,7,9
	.half	.L38-.L1027
	.byte	3,98,1,5,3,9
	.half	.L1028-.L38
	.byte	1,5,5,7,9
	.half	.L1029-.L1028
	.byte	3,4,1,5,3,7,9
	.half	.L597-.L1029
	.byte	3,240,125,1,5,5,7,9
	.half	.L604-.L597
	.byte	3,249,194,0,1,5,6,9
	.half	.L606-.L604
	.byte	3,217,123,1,5,3,9
	.half	.L1030-.L606
	.byte	1,5,5,7,9
	.half	.L1031-.L1030
	.byte	3,2,1,5,3,9
	.half	.L42-.L1031
	.byte	3,187,7,1,5,6,9
	.half	.L610-.L42
	.byte	3,245,1,1,5,3,9
	.half	.L1032-.L610
	.byte	1,5,5,7,9
	.half	.L1033-.L1032
	.byte	3,13,1,9
	.half	.L1034-.L1033
	.byte	3,117,1,9
	.half	.L1035-.L1034
	.byte	3,11,1,5,47,9
	.half	.L1036-.L1035
	.byte	3,117,1,5,5,9
	.half	.L45-.L1036
	.byte	3,17,1,5,6,9
	.half	.L46-.L45
	.byte	3,254,125,1,5,3,9
	.half	.L1037-.L46
	.byte	1,5,5,7,9
	.half	.L1038-.L1037
	.byte	3,2,1,5,3,9
	.half	.L47-.L1038
	.byte	3,233,185,127,1,9
	.half	.L41-.L47
	.byte	3,27,1,5,52,9
	.half	.L598-.L41
	.byte	3,248,1,1,5,3,9
	.half	.L40-.L598
	.byte	3,246,198,0,1,9
	.half	.L1039-.L40
	.byte	3,7,1,9
	.half	.L617-.L1039
	.byte	3,144,184,127,1,5,6,9
	.half	.L39-.L617
	.byte	3,180,4,1,5,3,9
	.half	.L1040-.L39
	.byte	1,5,5,7,9
	.half	.L1041-.L1040
	.byte	3,2,1,5,39,9
	.half	.L1042-.L1041
	.byte	1,5,3,9
	.half	.L49-.L1042
	.byte	3,111,1,9
	.half	.L1043-.L49
	.byte	3,2,1,9
	.half	.L622-.L1043
	.byte	3,112,1,5,67,9
	.half	.L50-.L622
	.byte	3,182,208,0,1,5,62,9
	.half	.L1044-.L50
	.byte	1,5,3,9
	.half	.L624-.L1044
	.byte	3,216,175,127,1,9
	.half	.L1045-.L624
	.byte	3,2,1,9
	.half	.L19-.L1045
	.byte	3,189,208,0,1,5,5,7,9
	.half	.L1046-.L19
	.byte	3,2,1,5,1,9
	.half	.L51-.L1046
	.byte	3,6,1,7,9
	.half	.L253-.L51
	.byte	0,1,1
.L996:
	.sdecl	'.debug_ranges',debug,cluster('Com_IpduGroupControl')
	.sect	'.debug_ranges'
.L252:
	.word	-1,.L165,0,.L253-.L165,0,0
.L519:
	.word	-1,.L165,0,.L515-.L165,-1,.L167,0,.L393-.L167,0,0
.L556:
	.word	-1,.L165,.L551-.L165,.L552-.L165,.L557-.L165,.L28-.L165,0,0
.L568:
	.word	-1,.L165,.L565-.L165,.L566-.L165,.L33-.L165,.L532-.L165,0,0
.L573:
	.word	-1,.L165,.L574-.L165,.L575-.L165,.L34-.L165,.L50-.L165,0,0
.L578:
	.word	-1,.L165,.L574-.L165,.L575-.L165,.L39-.L165,.L50-.L165,0,0
	.sdecl	'.debug_info',debug,cluster('Com_ReceptionDMControl')
	.sect	'.debug_info'
.L254:
	.word	237
	.half	3
	.word	.L255
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L257,.L256
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_ReceptionDMControl',0,1,197,119,22,1,1,1
	.word	.L169,.L625,.L168
	.byte	4
	.byte	'ipduGroupVector',0,1,197,119,65
	.word	.L516,.L626
	.byte	5
	.word	.L627
	.byte	6
	.byte	'errorId',0,1,200,119,9
	.word	.L405,.L628
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_ReceptionDMControl')
	.sect	'.debug_abbrev'
.L255:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_ReceptionDMControl')
	.sect	'.debug_line'
.L256:
	.word	.L1048-.L1047
.L1047:
	.half	3
	.word	.L1050-.L1049
.L1049:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1050:
	.byte	5,17,7,0,5,2
	.word	.L169
	.byte	3,199,247,0,1,5,3,9
	.half	.L1051-.L169
	.byte	3,35,1,5,5,7,9
	.half	.L1052-.L1051
	.byte	3,2,1,5,1,9
	.half	.L53-.L1052
	.byte	3,6,1,7,9
	.half	.L258-.L53
	.byte	0,1,1
.L1048:
	.sdecl	'.debug_ranges',debug,cluster('Com_ReceptionDMControl')
	.sect	'.debug_ranges'
.L257:
	.word	-1,.L169,0,.L258-.L169,0,0
.L627:
	.word	-1,.L169,0,.L625-.L169,-1,.L171,0,.L398-.L171,-1,.L173,0,.L388-.L173,0,0
	.sdecl	'.debug_info',debug,cluster('Com_IpduGroupStart')
	.sect	'.debug_info'
.L259:
	.word	231
	.half	3
	.word	.L260
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L262,.L261
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_IpduGroupStart',0,1,255,119,22,1,1,1
	.word	.L175,.L629,.L174
	.byte	4
	.byte	'IpduGroupId',0,1,255,119,61
	.word	.L630,.L631
	.byte	4
	.byte	'Initialize',0,1,255,119,82
	.word	.L405,.L632
	.byte	5
	.word	.L633
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_IpduGroupStart')
	.sect	'.debug_abbrev'
.L260:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_IpduGroupStart')
	.sect	'.debug_line'
.L261:
	.word	.L1054-.L1053
.L1053:
	.half	3
	.word	.L1056-.L1055
.L1055:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1056:
	.byte	5,5,7,0,5,2
	.word	.L175
	.byte	3,182,248,0,1,5,7,9
	.half	.L1057-.L175
	.byte	3,79,1,5,15,9
	.half	.L1058-.L1057
	.byte	3,41,1,5,1,7,9
	.half	.L263-.L1058
	.byte	3,16,0,1,1
.L1054:
	.sdecl	'.debug_ranges',debug,cluster('Com_IpduGroupStart')
	.sect	'.debug_ranges'
.L262:
	.word	-1,.L175,0,.L263-.L175,0,0
.L633:
	.word	-1,.L175,0,.L629-.L175,-1,.L177,0,.L358-.L177,0,0
	.sdecl	'.debug_info',debug,cluster('Com_IpduGroupStop')
	.sect	'.debug_info'
.L264:
	.word	210
	.half	3
	.word	.L265
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L267,.L266
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_IpduGroupStop',0,1,202,120,22,1,1,1
	.word	.L179,.L634,.L178
	.byte	4
	.byte	'IpduGroupId',0,1,202,120,60
	.word	.L630,.L635
	.byte	5
	.word	.L179,.L634
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_IpduGroupStop')
	.sect	'.debug_abbrev'
.L265:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_IpduGroupStop')
	.sect	'.debug_line'
.L266:
	.word	.L1060-.L1059
.L1059:
	.half	3
	.word	.L1062-.L1061
.L1061:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1062:
	.byte	5,5,7,0,5,2
	.word	.L179
	.byte	3,247,248,0,1,5,7,9
	.half	.L1063-.L179
	.byte	3,89,1,5,15,9
	.half	.L1064-.L1063
	.byte	3,31,1,5,1,7,9
	.half	.L268-.L1064
	.byte	3,14,0,1,1
.L1060:
	.sdecl	'.debug_ranges',debug,cluster('Com_IpduGroupStop')
	.sect	'.debug_ranges'
.L267:
	.word	-1,.L179,0,.L268-.L179,0,0
	.sdecl	'.debug_info',debug,cluster('Com_EnableReceptionDM')
	.sect	'.debug_info'
.L269:
	.word	214
	.half	3
	.word	.L270
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L272,.L271
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_EnableReceptionDM',0,1,137,121,22,1,1,1
	.word	.L181,.L636,.L180
	.byte	4
	.byte	'IpduGroupId',0,1,137,121,64
	.word	.L630,.L637
	.byte	5
	.word	.L181,.L636
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_EnableReceptionDM')
	.sect	'.debug_abbrev'
.L270:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_EnableReceptionDM')
	.sect	'.debug_line'
.L271:
	.word	.L1066-.L1065
.L1065:
	.half	3
	.word	.L1068-.L1067
.L1067:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1068:
	.byte	5,5,7,0,5,2
	.word	.L181
	.byte	3,184,249,0,1,5,7,9
	.half	.L1069-.L181
	.byte	3,87,1,5,15,9
	.half	.L1070-.L1069
	.byte	3,33,1,5,1,7,9
	.half	.L273-.L1070
	.byte	3,14,0,1,1
.L1066:
	.sdecl	'.debug_ranges',debug,cluster('Com_EnableReceptionDM')
	.sect	'.debug_ranges'
.L272:
	.word	-1,.L181,0,.L273-.L181,0,0
	.sdecl	'.debug_info',debug,cluster('Com_DisableReceptionDM')
	.sect	'.debug_info'
.L274:
	.word	215
	.half	3
	.word	.L275
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L277,.L276
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_DisableReceptionDM',0,1,202,121,22,1,1,1
	.word	.L183,.L638,.L182
	.byte	4
	.byte	'IpduGroupId',0,1,202,121,65
	.word	.L630,.L639
	.byte	5
	.word	.L183,.L638
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_DisableReceptionDM')
	.sect	'.debug_abbrev'
.L275:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_DisableReceptionDM')
	.sect	'.debug_line'
.L276:
	.word	.L1072-.L1071
.L1071:
	.half	3
	.word	.L1074-.L1073
.L1073:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1074:
	.byte	5,5,7,0,5,2
	.word	.L183
	.byte	3,249,249,0,1,5,7,9
	.half	.L1075-.L183
	.byte	3,87,1,5,15,9
	.half	.L1076-.L1075
	.byte	3,33,1,5,1,7,9
	.half	.L278-.L1076
	.byte	3,14,0,1,1
.L1072:
	.sdecl	'.debug_ranges',debug,cluster('Com_DisableReceptionDM')
	.sect	'.debug_ranges'
.L277:
	.word	-1,.L183,0,.L278-.L183,0,0
	.sdecl	'.debug_info',debug,cluster('Com_GetConfigurationId')
	.sect	'.debug_info'
.L279:
	.word	216
	.half	3
	.word	.L280
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L282,.L281
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_GetConfigurationId',0,1,247,122,24
	.word	.L640
	.byte	1,1,1
	.word	.L191,.L641,.L190
	.byte	4
	.word	.L191,.L641
	.byte	5
	.byte	'errorId',0,1,251,122,9
	.word	.L405,.L642
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_GetConfigurationId')
	.sect	'.debug_abbrev'
.L280:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_GetConfigurationId')
	.sect	'.debug_line'
.L281:
	.word	.L1078-.L1077
.L1077:
	.half	3
	.word	.L1080-.L1079
.L1079:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1080:
	.byte	5,17,7,0,5,2
	.word	.L191
	.byte	3,250,250,0,1,5,3,9
	.half	.L901-.L191
	.byte	3,18,1,5,5,7,9
	.half	.L1081-.L901
	.byte	3,2,1,5,10,9
	.half	.L79-.L1081
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L283-.L79
	.byte	0,1,1
.L1078:
	.sdecl	'.debug_ranges',debug,cluster('Com_GetConfigurationId')
	.sect	'.debug_ranges'
.L282:
	.word	-1,.L191,0,.L283-.L191,0,0
	.sdecl	'.debug_info',debug,cluster('Com_GetStatus')
	.sect	'.debug_info'
.L284:
	.word	185
	.half	3
	.word	.L285
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L287,.L286
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_GetStatus',0,1,159,123,32
	.word	.L643
	.byte	1,1,1
	.word	.L193,.L644,.L192
	.byte	4
	.word	.L193,.L644
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_GetStatus')
	.sect	'.debug_abbrev'
.L285:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_GetStatus')
	.sect	'.debug_line'
.L286:
	.word	.L1083-.L1082
.L1082:
	.half	3
	.word	.L1085-.L1084
.L1084:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1085:
	.byte	5,11,7,0,5,2
	.word	.L193
	.byte	3,161,251,0,1,5,1,9
	.half	.L1086-.L193
	.byte	3,1,1,7,9
	.half	.L288-.L1086
	.byte	0,1,1
.L1083:
	.sdecl	'.debug_ranges',debug,cluster('Com_GetStatus')
	.sect	'.debug_ranges'
.L287:
	.word	-1,.L193,0,.L288-.L193,0,0
	.sdecl	'.debug_info',debug,cluster('Com_TriggerIPDUSend')
	.sect	'.debug_info'
.L289:
	.word	264
	.half	3
	.word	.L290
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L292,.L291
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_TriggerIPDUSend',0,1,218,123,22,1,1,1
	.word	.L195,.L645,.L194
	.byte	4
	.byte	'PduId',0,1,218,123,52
	.word	.L405,.L646
	.byte	5
	.word	.L195,.L645
	.byte	6
	.byte	'errorId',0,1,221,123,9
	.word	.L405,.L647
	.byte	7
	.word	.L648,.L84,.L83
	.byte	8
	.word	.L649,.L650
	.byte	9
	.word	.L651,.L84,.L83
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_TriggerIPDUSend')
	.sect	'.debug_abbrev'
.L290:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_TriggerIPDUSend')
	.sect	'.debug_line'
.L291:
	.word	.L1088-.L1087
.L1087:
	.half	3
	.word	.L1090-.L1089
.L1089:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1090:
	.byte	5,17,7,0,5,2
	.word	.L195
	.byte	3,220,251,0,1,5,7,3,4,1,5,13,9
	.half	.L1091-.L195
	.byte	3,2,1,5,27,1,5,8,9
	.half	.L82-.L1091
	.byte	3,5,1,5,13,7,9
	.half	.L1092-.L82
	.byte	3,2,1,5,26,1,5,6,9
	.half	.L84-.L1092
	.byte	3,236,110,1,5,3,9
	.half	.L1093-.L84
	.byte	1,5,5,7,9
	.half	.L1094-.L1093
	.byte	3,7,1,5,3,9
	.half	.L83-.L1094
	.byte	3,169,17,1,5,5,7,9
	.half	.L1095-.L83
	.byte	3,2,1,5,1,9
	.half	.L87-.L1095
	.byte	3,6,1,7,9
	.half	.L293-.L87
	.byte	0,1,1
.L1088:
	.sdecl	'.debug_ranges',debug,cluster('Com_TriggerIPDUSend')
	.sect	'.debug_ranges'
.L292:
	.word	-1,.L195,0,.L293-.L195,0,0
	.sdecl	'.debug_info',debug,cluster('Com_ClearIpduGroupVector')
	.sect	'.debug_info'
.L294:
	.word	221
	.half	3
	.word	.L295
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L297,.L296
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_ClearIpduGroupVector',0,1,232,124,22,1,1,1
	.word	.L197,.L652,.L196
	.byte	4
	.byte	'ipduGroupVector',0,1,232,124,67
	.word	.L516,.L653
	.byte	5
	.word	.L197,.L652
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_ClearIpduGroupVector')
	.sect	'.debug_abbrev'
.L295:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_ClearIpduGroupVector')
	.sect	'.debug_line'
.L296:
	.word	.L1097-.L1096
.L1096:
	.half	3
	.word	.L1099-.L1098
.L1098:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1099:
	.byte	5,3,7,0,5,2
	.word	.L197
	.byte	3,233,252,0,1,5,1,9
	.half	.L298-.L197
	.byte	3,1,0,1,1
.L1097:
	.sdecl	'.debug_ranges',debug,cluster('Com_ClearIpduGroupVector')
	.sect	'.debug_ranges'
.L297:
	.word	-1,.L197,0,.L298-.L197,0,0
	.sdecl	'.debug_info',debug,cluster('Com_SetIpduGroup')
	.sect	'.debug_info'
.L299:
	.word	280
	.half	3
	.word	.L300
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L302,.L301
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_SetIpduGroup',0,1,249,124,22,1,1,1
	.word	.L199,.L654,.L198
	.byte	4
	.byte	'ipduGroupVector',0,1,249,124,59
	.word	.L516,.L655
	.byte	4
	.byte	'ipduGroupId',0,1,249,124,96
	.word	.L630,.L656
	.byte	4
	.byte	'bitval',0,1,249,124,117
	.word	.L405,.L657
	.byte	5
	.word	.L199,.L654
	.byte	6
	.byte	'errorId',0,1,253,124,9
	.word	.L405,.L658
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_SetIpduGroup')
	.sect	'.debug_abbrev'
.L300:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_SetIpduGroup')
	.sect	'.debug_line'
.L301:
	.word	.L1101-.L1100
.L1100:
	.half	3
	.word	.L1103-.L1102
.L1102:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1103:
	.byte	5,17,7,0,5,2
	.word	.L199
	.byte	3,252,252,0,1,5,7,3,5,1,5,13,9
	.half	.L1104-.L199
	.byte	3,2,1,5,27,1,5,8,9
	.half	.L88-.L1104
	.byte	3,4,1,5,13,7,9
	.half	.L1105-.L88
	.byte	3,2,1,5,26,1,5,9,9
	.half	.L90-.L1105
	.byte	3,9,1,5,24,9
	.half	.L1106-.L90
	.byte	3,127,1,5,5,9
	.half	.L1107-.L1106
	.byte	3,126,1,5,9,7,9
	.half	.L1108-.L1107
	.byte	3,3,1,5,46,9
	.half	.L1109-.L1108
	.byte	3,127,1,5,92,3,1,1,5,46,9
	.half	.L92-.L1109
	.byte	3,5,1,5,3,9
	.half	.L89-.L92
	.byte	3,7,1,5,5,7,9
	.half	.L1110-.L89
	.byte	3,2,1,5,1,9
	.half	.L94-.L1110
	.byte	3,5,1,7,9
	.half	.L303-.L94
	.byte	0,1,1
.L1101:
	.sdecl	'.debug_ranges',debug,cluster('Com_SetIpduGroup')
	.sect	'.debug_ranges'
.L302:
	.word	-1,.L199,0,.L303-.L199,0,0
	.sdecl	'.debug_info',debug,cluster('Com_ReceiveSignal')
	.sect	'.debug_info'
.L304:
	.word	330
	.half	3
	.word	.L305
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L307,.L306
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_ReceiveSignal',0,1,207,128,1,23
	.word	.L405
	.byte	1,1,1
	.word	.L203,.L659,.L202
	.byte	4
	.byte	'SignalId',0,1,207,128,1,58
	.word	.L630,.L660
	.byte	4
	.byte	'SignalDataPtr',0,1,207,128,1,105
	.word	.L661,.L662
	.byte	5
	.word	.L203,.L659
	.byte	6
	.byte	'errorId',0,1,210,128,1,9
	.word	.L405,.L663
	.byte	6
	.byte	'retVal',0,1,211,128,1,9
	.word	.L405,.L664
	.byte	7
	.word	.L665,.L111,.L113
	.byte	8
	.word	.L666,.L667
	.byte	8
	.word	.L668,.L669
	.byte	9
	.word	.L670,.L111,.L113
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_ReceiveSignal')
	.sect	'.debug_abbrev'
.L305:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_ReceiveSignal')
	.sect	'.debug_line'
.L306:
	.word	.L1112-.L1111
.L1111:
	.half	3
	.word	.L1114-.L1113
.L1113:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1114:
	.byte	5,17,7,0,5,2
	.word	.L203
	.byte	3,209,128,1,1,5,16,9
	.half	.L909-.L203
	.byte	3,1,1,5,7,3,4,1,5,13,9
	.half	.L1115-.L909
	.byte	3,2,1,5,27,1,5,8,9
	.half	.L107-.L1115
	.byte	3,5,1,5,13,7,9
	.half	.L1116-.L107
	.byte	3,2,1,5,26,1,5,8,9
	.half	.L109-.L1116
	.byte	3,9,1,5,13,7,9
	.half	.L1117-.L109
	.byte	3,2,1,5,34,1,5,11,9
	.half	.L111-.L1117
	.byte	3,225,68,1,5,3,9
	.half	.L1118-.L111
	.byte	1,5,66,7,9
	.half	.L1119-.L1118
	.byte	3,12,1,5,64,9
	.half	.L1120-.L1119
	.byte	1,5,8,9
	.half	.L113-.L1120
	.byte	3,160,59,1,5,3,9
	.half	.L108-.L113
	.byte	3,15,1,5,5,7,9
	.half	.L1121-.L108
	.byte	3,2,1,5,3,9
	.half	.L114-.L1121
	.byte	3,8,1,5,1,3,1,1,7,9
	.half	.L308-.L114
	.byte	0,1,1
.L1112:
	.sdecl	'.debug_ranges',debug,cluster('Com_ReceiveSignal')
	.sect	'.debug_ranges'
.L307:
	.word	-1,.L203,0,.L308-.L203,0,0
	.sdecl	'.debug_info',debug,cluster('Com_ReceiveSignalGroup')
	.sect	'.debug_info'
.L309:
	.word	223
	.half	3
	.word	.L310
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L312,.L311
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_ReceiveSignalGroup',0,1,231,130,1,23
	.word	.L405
	.byte	1,1,1
	.word	.L205,.L671,.L204
	.byte	4
	.byte	'SignalGroupId',0,1,231,130,1,68
	.word	.L630,.L672
	.byte	5
	.word	.L205,.L671
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_ReceiveSignalGroup')
	.sect	'.debug_abbrev'
.L310:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_ReceiveSignalGroup')
	.sect	'.debug_line'
.L311:
	.word	.L1123-.L1122
.L1122:
	.half	3
	.word	.L1125-.L1124
.L1124:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1125:
	.byte	5,5,7,0,5,2
	.word	.L205
	.byte	3,166,131,1,1,5,7,9
	.half	.L1126-.L205
	.byte	3,72,1,5,15,9
	.half	.L1127-.L1126
	.byte	3,47,1,5,10,9
	.half	.L1128-.L1127
	.byte	3,16,1,5,1,3,1,1,7,9
	.half	.L313-.L1128
	.byte	0,1,1
.L1123:
	.sdecl	'.debug_ranges',debug,cluster('Com_ReceiveSignalGroup')
	.sect	'.debug_ranges'
.L312:
	.word	-1,.L205,0,.L313-.L205,0,0
	.sdecl	'.debug_info',debug,cluster('Com_InvalidateSignal')
	.sect	'.debug_info'
.L314:
	.word	216
	.half	3
	.word	.L315
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L317,.L316
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_InvalidateSignal',0,1,209,132,1,23
	.word	.L405
	.byte	1,1,1
	.word	.L207,.L673,.L206
	.byte	4
	.byte	'SignalId',0,1,209,132,1,61
	.word	.L630,.L674
	.byte	5
	.word	.L207,.L673
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_InvalidateSignal')
	.sect	'.debug_abbrev'
.L315:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_InvalidateSignal')
	.sect	'.debug_line'
.L316:
	.word	.L1130-.L1129
.L1129:
	.half	3
	.word	.L1132-.L1131
.L1131:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1132:
	.byte	5,5,7,0,5,2
	.word	.L207
	.byte	3,252,132,1,1,5,7,9
	.half	.L1133-.L207
	.byte	3,92,1,5,15,9
	.half	.L1134-.L1133
	.byte	3,28,1,5,10,9
	.half	.L1135-.L1134
	.byte	3,15,1,5,1,3,1,1,7,9
	.half	.L318-.L1135
	.byte	0,1,1
.L1130:
	.sdecl	'.debug_ranges',debug,cluster('Com_InvalidateSignal')
	.sect	'.debug_ranges'
.L317:
	.word	-1,.L207,0,.L318-.L207,0,0
	.sdecl	'.debug_info',debug,cluster('Com_InvalidateSignalGroup')
	.sect	'.debug_info'
.L319:
	.word	226
	.half	3
	.word	.L320
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L322,.L321
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_InvalidateSignalGroup',0,1,145,133,1,23
	.word	.L405
	.byte	1,1,1
	.word	.L209,.L675,.L208
	.byte	4
	.byte	'SignalGroupId',0,1,145,133,1,71
	.word	.L630,.L676
	.byte	5
	.word	.L209,.L675
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_InvalidateSignalGroup')
	.sect	'.debug_abbrev'
.L320:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_InvalidateSignalGroup')
	.sect	'.debug_line'
.L321:
	.word	.L1137-.L1136
.L1136:
	.half	3
	.word	.L1139-.L1138
.L1138:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1139:
	.byte	5,5,7,0,5,2
	.word	.L209
	.byte	3,198,133,1,1,5,7,9
	.half	.L1140-.L209
	.byte	3,82,1,5,15,9
	.half	.L1141-.L1140
	.byte	3,38,1,5,10,9
	.half	.L1142-.L1141
	.byte	3,15,1,5,1,3,1,1,7,9
	.half	.L323-.L1142
	.byte	0,1,1
.L1137:
	.sdecl	'.debug_ranges',debug,cluster('Com_InvalidateSignalGroup')
	.sect	'.debug_ranges'
.L322:
	.word	-1,.L209,0,.L323-.L209,0,0
	.sdecl	'.debug_info',debug,cluster('Com_TxLLIf_Transmit')
	.sect	'.debug_info'
.L324:
	.word	261
	.half	3
	.word	.L325
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L327,.L326
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_TxLLIf_Transmit',0,1,231,136,1,32
	.word	.L405
	.byte	1,1,1
	.word	.L213,.L677,.L212
	.byte	4
	.byte	'ComTxPduId',0,1,231,136,1,62
	.word	.L405,.L678
	.byte	5
	.word	.L213,.L677
	.byte	6
	.byte	'retVal',0,1,234,136,1,18
	.word	.L405,.L679
	.byte	6
	.byte	'PduInfo',0,1,236,136,1,15
	.word	.L418,.L680
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_TxLLIf_Transmit')
	.sect	'.debug_abbrev'
.L325:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_TxLLIf_Transmit')
	.sect	'.debug_line'
.L326:
	.word	.L1144-.L1143
.L1143:
	.half	3
	.word	.L1146-.L1145
.L1145:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1146:
	.byte	5,32,7,0,5,2
	.word	.L213
	.byte	3,230,136,1,1,5,24,9
	.half	.L915-.L213
	.byte	3,11,1,5,22,9
	.half	.L1147-.L915
	.byte	1,5,6,9
	.half	.L1148-.L1147
	.byte	3,4,1,5,3,9
	.half	.L1149-.L1148
	.byte	1,5,28,7,9
	.half	.L1150-.L1149
	.byte	3,14,1,5,26,9
	.half	.L1151-.L1150
	.byte	1,5,41,9
	.half	.L124-.L1151
	.byte	3,32,1,5,76,9
	.half	.L1152-.L124
	.byte	3,37,1,5,41,9
	.half	.L1153-.L1152
	.byte	3,91,1,5,23,9
	.half	.L1154-.L1153
	.byte	1,5,76,9
	.half	.L1155-.L1154
	.byte	3,37,1,5,1,7,9
	.half	.L328-.L1155
	.byte	3,15,0,1,1
.L1144:
	.sdecl	'.debug_ranges',debug,cluster('Com_TxLLIf_Transmit')
	.sect	'.debug_ranges'
.L327:
	.word	-1,.L213,0,.L328-.L213,0,0
	.sdecl	'.debug_info',debug,cluster('Com_SwitchIpduTxMode')
	.sect	'.debug_info'
.L329:
	.word	287
	.half	3
	.word	.L330
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L332,.L331
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_SwitchIpduTxMode',0,1,230,137,1,22,1,1,1
	.word	.L215,.L681,.L214
	.byte	4
	.byte	'PduId',0,1,230,137,1,53
	.word	.L405,.L682
	.byte	4
	.byte	'Mode',0,1,230,137,1,68
	.word	.L405,.L683
	.byte	5
	.word	.L215,.L681
	.byte	6
	.byte	'errorId',0,1,233,137,1,9
	.word	.L405,.L684
	.byte	7
	.word	.L503,.L685,.L127
	.byte	8
	.word	.L505,.L686
	.byte	9
	.word	.L507,.L685,.L127
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_SwitchIpduTxMode')
	.sect	'.debug_abbrev'
.L330:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_SwitchIpduTxMode')
	.sect	'.debug_line'
.L331:
	.word	.L1157-.L1156
.L1156:
	.half	3
	.word	.L1159-.L1158
.L1158:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1159:
	.byte	5,17,7,0,5,2
	.word	.L215
	.byte	3,232,137,1,1,5,7,3,4,1,5,13,9
	.half	.L1160-.L215
	.byte	3,2,1,5,27,1,5,8,9
	.half	.L126-.L1160
	.byte	3,5,1,5,13,7,9
	.half	.L1161-.L126
	.byte	3,2,1,5,26,1,5,8,9
	.half	.L128-.L1161
	.byte	3,15,1,5,5,9
	.half	.L1162-.L128
	.byte	1,5,7,7,9
	.half	.L1163-.L1162
	.byte	3,2,1,5,6,9
	.half	.L685-.L1163
	.byte	3,172,95,1,5,5,9
	.half	.L1164-.L685
	.byte	3,2,1,5,6,9
	.half	.L1165-.L1164
	.byte	3,126,1,5,5,3,2,1,5,3,9
	.half	.L1166-.L1165
	.byte	3,126,1,5,5,7,9
	.half	.L1167-.L1166
	.byte	3,2,1,9
	.half	.L1168-.L1167
	.byte	3,11,1,5,47,9
	.half	.L1169-.L1168
	.byte	3,117,1,5,5,9
	.half	.L133-.L1169
	.byte	3,17,1,9
	.half	.L1170-.L133
	.byte	3,1,1,5,3,9
	.half	.L127-.L1170
	.byte	3,228,32,1,5,5,7,9
	.half	.L1171-.L127
	.byte	3,2,1,5,1,9
	.half	.L135-.L1171
	.byte	3,7,1,7,9
	.half	.L333-.L135
	.byte	0,1,1
.L1157:
	.sdecl	'.debug_ranges',debug,cluster('Com_SwitchIpduTxMode')
	.sect	'.debug_ranges'
.L332:
	.word	-1,.L215,0,.L333-.L215,0,0
	.sdecl	'.debug_info',debug,cluster('Com_SendSignal')
	.sect	'.debug_info'
.L334:
	.word	658
	.half	3
	.word	.L335
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L337,.L336
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_SendSignal',0,1,154,139,1,23
	.word	.L405
	.byte	1,1,1
	.word	.L217,.L687,.L216
	.byte	4
	.byte	'SignalId',0,1,154,139,1,55
	.word	.L630,.L688
	.byte	4
	.byte	'SignalDataPtr',0,1,154,139,1,105
	.word	.L689,.L690
	.byte	5
	.word	.L217,.L687
	.byte	6
	.byte	'errorId',0,1,157,139,1,9
	.word	.L405,.L691
	.byte	6
	.byte	'retVal',0,1,158,139,1,9
	.word	.L405,.L692
	.byte	7
	.word	.L693,.L694,.L695
	.byte	8
	.word	.L696,.L697
	.byte	8
	.word	.L698,.L699
	.byte	8
	.word	.L700,.L701
	.byte	9
	.word	.L702,.L703
	.byte	6
	.byte	'retVal',0,1,203,113,9
	.word	.L405,.L705
	.byte	6
	.byte	'idxTxPduInfo',0,1,205,113,35
	.word	.L405,.L706
	.byte	7
	.word	.L707,.L708,.L709
	.byte	8
	.word	.L710,.L711
	.byte	8
	.word	.L712,.L713
	.byte	8
	.word	.L714,.L715
	.byte	8
	.word	.L716,.L717
	.byte	9
	.word	.L718,.L719
	.byte	7
	.word	.L721,.L722,.L142
	.byte	8
	.word	.L723,.L724
	.byte	8
	.word	.L725,.L726
	.byte	10
	.word	.L727,.L722,.L142
	.byte	6
	.byte	'SignalApplSourcePtrInternal',0,1,142,50,44
	.word	.L728,.L729
	.byte	0,0,0,0,7
	.word	.L707,.L720,.L142
	.byte	8
	.word	.L710,.L711
	.byte	8
	.word	.L712,.L713
	.byte	8
	.word	.L714,.L715
	.byte	8
	.word	.L716,.L717
	.byte	0,0,0,7
	.word	.L693,.L704,.L137
	.byte	8
	.word	.L696,.L697
	.byte	8
	.word	.L698,.L699
	.byte	8
	.word	.L700,.L701
	.byte	0,7
	.word	.L693,.L145,.L687
	.byte	8
	.word	.L696,.L697
	.byte	8
	.word	.L698,.L699
	.byte	8
	.word	.L700,.L701
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_SendSignal')
	.sect	'.debug_abbrev'
.L335:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85
	.byte	6,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_SendSignal')
	.sect	'.debug_line'
.L336:
	.word	.L1173-.L1172
.L1172:
	.half	3
	.word	.L1175-.L1174
.L1174:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1175:
	.byte	5,23,7,0,5,2
	.word	.L217
	.byte	3,153,139,1,1,5,17,9
	.half	.L917-.L217
	.byte	3,3,1,5,16,9
	.half	.L694-.L917
	.byte	3,1,1,5,7,3,4,1,5,13,9
	.half	.L1176-.L694
	.byte	3,2,1,5,27,1,5,8,9
	.half	.L136-.L1176
	.byte	3,5,1,5,13,7,9
	.half	.L1177-.L136
	.byte	3,2,1,5,26,1,5,8,9
	.half	.L138-.L1177
	.byte	3,9,1,5,13,7,9
	.half	.L1178-.L138
	.byte	3,2,1,5,34,1,5,5,9
	.half	.L140-.L1178
	.byte	3,7,1,5,50,9
	.half	.L704-.L140
	.byte	3,144,102,1,5,16,9
	.half	.L1179-.L704
	.byte	3,126,1,5,8,9
	.half	.L708-.L1179
	.byte	3,217,126,1,5,50,9
	.half	.L709-.L708
	.byte	3,169,1,1,5,5,9
	.half	.L720-.L709
	.byte	3,215,126,1,5,3,7,9
	.half	.L722-.L720
	.byte	3,245,65,1,5,7,7,9
	.half	.L1180-.L722
	.byte	3,20,1,5,8,9
	.half	.L142-.L1180
	.byte	3,188,63,1,5,14,9
	.half	.L1181-.L142
	.byte	3,8,1,5,5,3,207,25,1,5,3,9
	.half	.L137-.L1181
	.byte	3,8,1,5,5,7,9
	.half	.L1182-.L137
	.byte	3,2,1,5,3,9
	.half	.L145-.L1182
	.byte	3,8,1,5,1,3,1,1,7,9
	.half	.L338-.L145
	.byte	0,1,1
.L1173:
	.sdecl	'.debug_ranges',debug,cluster('Com_SendSignal')
	.sect	'.debug_ranges'
.L337:
	.word	-1,.L217,0,.L338-.L217,0,0
.L703:
	.word	-1,.L217,.L694-.L217,.L695-.L217,.L704-.L217,.L137-.L217,.L145-.L217,.L687-.L217,0,0
.L719:
	.word	-1,.L217,.L708-.L217,.L709-.L217,.L720-.L217,.L142-.L217,0,0
	.sdecl	'.debug_info',debug,cluster('Com_SendSignalGroup')
	.sect	'.debug_info'
.L339:
	.word	220
	.half	3
	.word	.L340
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L342,.L341
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_SendSignalGroup',0,1,224,139,1,23
	.word	.L405
	.byte	1,1,1
	.word	.L219,.L730,.L218
	.byte	4
	.byte	'SignalGroupId',0,1,224,139,1,65
	.word	.L630,.L731
	.byte	5
	.word	.L219,.L730
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_SendSignalGroup')
	.sect	'.debug_abbrev'
.L340:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_SendSignalGroup')
	.sect	'.debug_line'
.L341:
	.word	.L1184-.L1183
.L1183:
	.half	3
	.word	.L1186-.L1185
.L1185:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1186:
	.byte	5,5,7,0,5,2
	.word	.L219
	.byte	3,153,140,1,1,5,7,9
	.half	.L1187-.L219
	.byte	3,78,1,5,15,9
	.half	.L1188-.L1187
	.byte	3,42,1,5,10,9
	.half	.L1189-.L1188
	.byte	3,15,1,5,1,3,1,1,7,9
	.half	.L343-.L1189
	.byte	0,1,1
.L1184:
	.sdecl	'.debug_ranges',debug,cluster('Com_SendSignalGroup')
	.sect	'.debug_ranges'
.L342:
	.word	-1,.L219,0,.L343-.L219,0,0
	.sdecl	'.debug_info',debug,cluster('Com_MainFunctionRx')
	.sect	'.debug_info'
.L344:
	.word	893
	.half	3
	.word	.L345
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L347,.L346
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_MainFunctionRx',0,1,140,122,22,1,1,1
	.word	.L185,.L732,.L184
	.byte	4
	.word	.L185,.L732
	.byte	5
	.word	.L733,.L734,.L54
	.byte	6
	.word	.L735,.L734,.L54
	.byte	7
	.byte	'deferredFctPtrCacheStrct',0,1,244,74,20
	.word	.L736,.L737
	.byte	5
	.word	.L738,.L739,.L740
	.byte	8
	.word	.L741,.L739,.L740
	.byte	0,5
	.word	.L742,.L740,.L64
	.byte	9
	.word	.L743,.L744
	.byte	6
	.word	.L745,.L740,.L64
	.byte	5
	.word	.L746,.L740,.L747
	.byte	9
	.word	.L748,.L749
	.byte	6
	.word	.L750,.L740,.L747
	.byte	7
	.byte	'retVal',0,1,229,95,11
	.word	.L405,.L751
	.byte	0,0,5
	.word	.L752,.L747,.L58
	.byte	9
	.word	.L753,.L754
	.byte	9
	.word	.L755,.L756
	.byte	6
	.word	.L757,.L747,.L58
	.byte	7
	.byte	'PduInfo',0,1,225,75,15
	.word	.L418,.L758
	.byte	5
	.word	.L759,.L59,.L58
	.byte	9
	.word	.L760,.L761
	.byte	9
	.word	.L762,.L763
	.byte	9
	.word	.L764,.L765
	.byte	6
	.word	.L766,.L59,.L58
	.byte	7
	.byte	'idxRxSigInfo',0,1,254,82,25
	.word	.L405,.L767
	.byte	6
	.word	.L768,.L769,.L61
	.byte	5
	.word	.L770,.L769,.L61
	.byte	9
	.word	.L771,.L772
	.byte	9
	.word	.L773,.L774
	.byte	6
	.word	.L775,.L769,.L61
	.byte	5
	.word	.L776,.L777,.L61
	.byte	9
	.word	.L778,.L779
	.byte	9
	.word	.L780,.L781
	.byte	6
	.word	.L782,.L777,.L61
	.byte	5
	.word	.L783,.L784,.L63
	.byte	9
	.word	.L785,.L786
	.byte	9
	.word	.L787,.L788
	.byte	6
	.word	.L789,.L784,.L63
	.byte	7
	.byte	'tmpNewValue',0,1,214,51,20
	.word	.L790,.L791
	.byte	5
	.word	.L792,.L793,.L63
	.byte	9
	.word	.L794,.L795
	.byte	9
	.word	.L796,.L797
	.byte	9
	.word	.L798,.L799
	.byte	9
	.word	.L800,.L801
	.byte	8
	.word	.L802,.L793,.L63
	.byte	0,0,0,8
	.word	.L803,.L63,.L61
	.byte	0,0,0,0,0,0,0,0,0,5
	.word	.L804,.L58,.L64
	.byte	9
	.word	.L805,.L806
	.byte	6
	.word	.L807,.L58,.L64
	.byte	5
	.word	.L808,.L809,.L810
	.byte	8
	.word	.L811,.L809,.L810
	.byte	0,5
	.word	.L738,.L810,.L64
	.byte	8
	.word	.L741,.L810,.L64
	.byte	0,0,0,0,0,5
	.word	.L808,.L64,.L54
	.byte	8
	.word	.L811,.L64,.L54
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_MainFunctionRx')
	.sect	'.debug_abbrev'
.L345:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1,18,1
	.byte	0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,5,0,49,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_MainFunctionRx')
	.sect	'.debug_line'
.L346:
	.word	.L1191-.L1190
.L1190:
	.half	3
	.word	.L1193-.L1192
.L1192:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1193:
	.byte	5,22,7,0,5,2
	.word	.L185
	.byte	3,139,250,0,1,5,6,9
	.half	.L893-.L185
	.byte	3,4,1,5,3,9
	.half	.L1194-.L893
	.byte	1,5,41,7,9
	.half	.L734-.L1194
	.byte	3,234,80,1,5,39,9
	.half	.L1195-.L734
	.byte	1,5,40,9
	.half	.L1196-.L1195
	.byte	3,1,1,5,38,1,5,39,9
	.half	.L1197-.L1196
	.byte	3,2,1,5,3,9
	.half	.L739-.L1197
	.byte	3,173,20,1,5,6,9
	.half	.L740-.L739
	.byte	3,60,1,5,18,9
	.half	.L1198-.L740
	.byte	3,127,1,5,3,9
	.half	.L894-.L1198
	.byte	3,1,1,5,8,7,9
	.half	.L1199-.L894
	.byte	3,2,1,5,5,9
	.half	.L1200-.L1199
	.byte	1,5,15,7,9
	.half	.L1201-.L1200
	.byte	3,2,1,5,16,9
	.half	.L1202-.L1201
	.byte	3,2,1,5,5,9
	.half	.L55-.L1202
	.byte	3,218,107,1,5,23,7,9
	.half	.L747-.L55
	.byte	3,30,1,5,26,9
	.half	.L1203-.L747
	.byte	3,17,1,5,106,9
	.half	.L1204-.L1203
	.byte	3,111,1,5,21,9
	.half	.L1205-.L1204
	.byte	1,5,7,9
	.half	.L1206-.L1205
	.byte	3,19,1,5,30,7,9
	.half	.L1207-.L1206
	.byte	3,2,1,5,3,9
	.half	.L59-.L1207
	.byte	3,11,1,5,74,9
	.half	.L895-.L59
	.byte	3,251,6,1,5,11,9
	.half	.L897-.L895
	.byte	3,195,5,1,5,18,9
	.half	.L1208-.L897
	.byte	3,192,122,1,5,5,3,140,7,1,5,74,9
	.half	.L1209-.L1208
	.byte	3,241,120,1,5,33,9
	.half	.L60-.L1209
	.byte	3,3,1,5,5,9
	.half	.L1210-.L60
	.byte	1,5,11,7,9
	.half	.L769-.L1210
	.byte	3,192,5,1,5,3,9
	.half	.L1211-.L769
	.byte	1,5,92,7,9
	.half	.L777-.L1211
	.byte	3,173,1,1,5,28,9
	.half	.L784-.L777
	.byte	3,232,89,1,5,3,9
	.half	.L793-.L784
	.byte	3,210,1,1,5,34,7,9
	.half	.L1212-.L793
	.byte	3,12,1,5,32,9
	.half	.L1213-.L1212
	.byte	1,5,5,9
	.half	.L63-.L1213
	.byte	3,217,36,1,5,88,9
	.half	.L61-.L63
	.byte	3,241,120,1,5,74,9
	.half	.L1214-.L61
	.byte	1,5,6,7,9
	.half	.L58-.L1214
	.byte	3,202,12,1,5,3,9
	.half	.L1215-.L58
	.byte	1,7,9
	.half	.L809-.L1215
	.byte	3,111,1,9
	.half	.L1216-.L809
	.byte	3,2,1,9
	.half	.L810-.L1216
	.byte	3,112,1,9
	.half	.L64-.L810
	.byte	3,14,1,9
	.half	.L1217-.L64
	.byte	3,2,1,5,1,7,9
	.half	.L54-.L1217
	.byte	3,238,26,1,7,9
	.half	.L348-.L54
	.byte	0,1,1
.L1191:
	.sdecl	'.debug_ranges',debug,cluster('Com_MainFunctionRx')
	.sect	'.debug_ranges'
.L347:
	.word	-1,.L185,0,.L348-.L185,0,0
	.sdecl	'.debug_info',debug,cluster('Com_MainFunctionTx')
	.sect	'.debug_info'
.L349:
	.word	793
	.half	3
	.word	.L350
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L352,.L351
	.byte	2
	.word	.L220
	.byte	3
	.byte	'Com_MainFunctionTx',0,1,184,122,22,1,1,1
	.word	.L187,.L812,.L186
	.byte	4
	.word	.L813
	.byte	5
	.word	.L814,.L815,.L65
	.byte	6
	.word	.L816,.L817
	.byte	7
	.byte	'ComTxCyclicPduIterator',0,1,223,103,27
	.word	.L405,.L819
	.byte	7
	.byte	'ComTxPduId',0,1,224,103,37
	.word	.L405,.L820
	.byte	5
	.word	.L821,.L815,.L822
	.byte	8
	.word	.L823,.L815,.L822
	.byte	0,5
	.word	.L824,.L825,.L826
	.byte	6
	.word	.L827,.L828
	.byte	5
	.word	.L832,.L825,.L826
	.byte	9
	.word	.L833,.L834
	.byte	0,10
	.word	.L832,.L71,.L835
	.byte	5
	.word	.L821,.L835,.L72
	.byte	8
	.word	.L823,.L835,.L72
	.byte	0,10
	.word	.L832,.L831,.L818
	.byte	0,0,5
	.word	.L836,.L826,.L837
	.byte	11
	.word	.L838,.L839
	.byte	9
	.word	.L840,.L841
	.byte	0,5
	.word	.L836,.L842,.L829
	.byte	11
	.word	.L838,.L839
	.byte	0,10
	.word	.L824,.L829,.L830
	.byte	5
	.word	.L836,.L843,.L68
	.byte	11
	.word	.L838,.L839
	.byte	0,10
	.word	.L824,.L68,.L65
	.byte	10
	.word	.L824,.L71,.L72
	.byte	5
	.word	.L832,.L845,.L66
	.byte	8
	.word	.L833,.L845,.L66
	.byte	0,5
	.word	.L836,.L844,.L831
	.byte	11
	.word	.L838,.L839
	.byte	0,10
	.word	.L824,.L831,.L818
	.byte	0,0,10
	.word	.L814,.L71,.L818
	.byte	5
	.word	.L846,.L818,.L812
	.byte	12
	.word	.L847,.L818,.L812
	.byte	7
	.byte	'ComTxPduId',0,1,179,104,13
	.word	.L405,.L848
	.byte	5
	.word	.L849,.L850,.L851
	.byte	6
	.word	.L852,.L853
	.byte	5
	.word	.L858,.L76,.L859
	.byte	8
	.word	.L860,.L76,.L859
	.byte	0,5
	.word	.L861,.L859,.L77
	.byte	8
	.word	.L862,.L859,.L77
	.byte	0,0,0,5
	.word	.L854,.L73,.L74
	.byte	11
	.word	.L855,.L856
	.byte	8
	.word	.L857,.L73,.L74
	.byte	0,10
	.word	.L849,.L74,.L77
	.byte	5
	.word	.L858,.L863,.L812
	.byte	8
	.word	.L860,.L863,.L812
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_MainFunctionTx')
	.sect	'.debug_abbrev'
.L350:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,85,6,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,85,6,0,0,7,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,0,49,16,85,6,0,0,10,29,0,49,16,17
	.byte	1,18,1,0,0,11,5,0,49,16,2,6,0,0,12,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_MainFunctionTx')
	.sect	'.debug_line'
.L351:
	.word	.L1219-.L1218
.L1218:
	.half	3
	.word	.L1221-.L1220
.L1220:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1221:
	.byte	5,22,7,0,5,2
	.word	.L187
	.byte	3,183,250,0,1,5,6,9
	.half	.L898-.L187
	.byte	3,4,1,5,3,9
	.half	.L1222-.L898
	.byte	1,5,5,7,9
	.half	.L1223-.L1222
	.byte	3,5,1,5,8,9
	.half	.L1224-.L1223
	.byte	3,1,1,5,5,9
	.half	.L1225-.L1224
	.byte	1,5,7,7,9
	.half	.L1226-.L1225
	.byte	3,4,1,5,3,9
	.half	.L815-.L1226
	.byte	3,184,109,1,5,18,9
	.half	.L822-.L815
	.byte	3,104,1,5,10,9
	.half	.L1227-.L822
	.byte	3,3,1,5,74,9
	.half	.L825-.L1227
	.byte	3,221,18,1,5,7,3,184,112,1,5,6,9
	.half	.L826-.L825
	.byte	3,157,125,1,5,10,9
	.half	.L837-.L826
	.byte	3,78,1,5,7,9
	.half	.L842-.L837
	.byte	3,149,3,1,5,6,9
	.half	.L829-.L842
	.byte	3,157,125,1,5,60,9
	.half	.L830-.L829
	.byte	3,73,1,5,10,9
	.half	.L67-.L830
	.byte	3,5,1,5,18,9
	.half	.L1228-.L67
	.byte	3,125,1,5,10,9
	.half	.L899-.L1228
	.byte	3,3,1,5,7,9
	.half	.L1229-.L899
	.byte	1,5,6,7,9
	.half	.L843-.L1229
	.byte	3,143,3,1,5,3,9
	.half	.L1230-.L843
	.byte	1,5,5,7,9
	.half	.L1231-.L1230
	.byte	3,2,1,9
	.half	.L1232-.L1231
	.byte	3,2,1,5,7,7,9
	.half	.L1233-.L1232
	.byte	3,2,1,9
	.half	.L1234-.L1233
	.byte	3,1,1,5,3,9
	.half	.L70-.L1234
	.byte	3,121,1,5,6,9
	.half	.L68-.L70
	.byte	3,163,125,1,5,3,9
	.half	.L1235-.L68
	.byte	1,5,5,7,9
	.half	.L1236-.L1235
	.byte	3,2,1,5,46,9
	.half	.L1237-.L1236
	.byte	1,5,1,9
	.half	.L65-.L1237
	.byte	3,208,18,1,5,3,7,9
	.half	.L71-.L65
	.byte	3,159,109,1,9
	.half	.L1238-.L71
	.byte	3,2,1,9
	.half	.L835-.L1238
	.byte	3,112,1,5,60,9
	.half	.L72-.L835
	.byte	3,102,1,5,3,7,9
	.half	.L845-.L72
	.byte	3,40,1,9
	.half	.L1239-.L845
	.byte	3,2,1,5,10,9
	.half	.L66-.L1239
	.byte	3,91,1,5,7,9
	.half	.L844-.L66
	.byte	3,149,3,1,5,5,9
	.half	.L831-.L844
	.byte	3,196,15,1,5,3,3,142,110,1,5,18,9
	.half	.L818-.L831
	.byte	3,103,1,5,6,3,54,1,5,61,9
	.half	.L851-.L818
	.byte	3,74,1,5,6,9
	.half	.L73-.L851
	.byte	3,209,0,1,5,3,9
	.half	.L1240-.L73
	.byte	1,5,10,7,9
	.half	.L1241-.L1240
	.byte	3,8,1,5,7,9
	.half	.L1242-.L1241
	.byte	1,5,53,7,9
	.half	.L1243-.L1242
	.byte	3,173,127,1,5,11,9
	.half	.L1244-.L1243
	.byte	3,221,0,1,5,6,9
	.half	.L74-.L1244
	.byte	3,83,1,5,3,9
	.half	.L1245-.L74
	.byte	1,5,5,7,9
	.half	.L1246-.L1245
	.byte	3,2,1,5,40,9
	.half	.L1247-.L1246
	.byte	1,5,3,9
	.half	.L76-.L1247
	.byte	3,111,1,9
	.half	.L1248-.L76
	.byte	3,2,1,9
	.half	.L859-.L1248
	.byte	3,112,1,5,73,9
	.half	.L77-.L859
	.byte	3,103,1,5,61,9
	.half	.L1249-.L77
	.byte	1,5,3,7,9
	.half	.L863-.L1249
	.byte	3,39,1,9
	.half	.L1250-.L863
	.byte	3,2,1,5,1,7,9
	.half	.L353-.L1250
	.byte	3,141,18,0,1,1
.L1219:
	.sdecl	'.debug_ranges',debug,cluster('Com_MainFunctionTx')
	.sect	'.debug_ranges'
.L352:
	.word	-1,.L187,0,.L353-.L187,0,0
.L813:
	.word	-1,.L187,0,.L812-.L187,-1,.L189,0,.L383-.L189,0,0
.L817:
	.word	-1,.L187,.L815-.L187,.L65-.L187,.L71-.L187,.L818-.L187,0,0
.L828:
	.word	-1,.L187,.L825-.L187,.L826-.L187,.L829-.L187,.L830-.L187,.L68-.L187,.L65-.L187,.L71-.L187,.L72-.L187,.L831-.L187
	.word	.L818-.L187,0,0
.L834:
	.word	-1,.L187,.L825-.L187,.L826-.L187,.L71-.L187,.L835-.L187,.L831-.L187,.L818-.L187,0,0
.L841:
	.word	-1,.L187,.L826-.L187,.L837-.L187,.L842-.L187,.L829-.L187,.L843-.L187,.L68-.L187,.L844-.L187,.L831-.L187
	.word	0,0
.L853:
	.word	-1,.L187,.L850-.L187,.L851-.L187,.L74-.L187,.L77-.L187,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_1')
	.sect	'.debug_info'
.L354:
	.word	166
	.half	3
	.word	.L355
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L357,.L356
	.byte	2
	.word	.L220
	.byte	3
	.byte	'.cocofun_1',0,1,255,119,22,1
	.word	.L177,.L358,.L176
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_1')
	.sect	'.debug_abbrev'
.L355:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_1')
	.sect	'.debug_line'
.L356:
	.word	.L1252-.L1251
.L1251:
	.half	3
	.word	.L1254-.L1253
.L1253:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1254:
	.byte	5,7,7,0,5,2
	.word	.L177
	.byte	3,133,248,0,1,9
	.half	.L358-.L177
	.byte	0,1,1,5,7,0,5,2
	.word	.L177
	.byte	3,133,248,0,1,9
	.half	.L1255-.L177
	.byte	3,203,0,1,9
	.half	.L1256-.L1255
	.byte	3,181,127,1,7,9
	.half	.L358-.L1256
	.byte	0,1,1,5,7,0,5,2
	.word	.L177
	.byte	3,133,248,0,1,9
	.half	.L1255-.L177
	.byte	3,138,1,1,9
	.half	.L1256-.L1255
	.byte	3,246,126,1,7,9
	.half	.L358-.L1256
	.byte	0,1,1,5,7,0,5,2
	.word	.L177
	.byte	3,133,248,0,1,9
	.half	.L1255-.L177
	.byte	3,203,1,1,9
	.half	.L1256-.L1255
	.byte	3,181,126,1,7,9
	.half	.L358-.L1256
	.byte	0,1,1,5,7,0,5,2
	.word	.L177
	.byte	3,133,248,0,1,9
	.half	.L1255-.L177
	.byte	3,233,10,1,9
	.half	.L1256-.L1255
	.byte	3,151,117,1,7,9
	.half	.L358-.L1256
	.byte	0,1,1,5,7,0,5,2
	.word	.L177
	.byte	3,133,248,0,1,9
	.half	.L1255-.L177
	.byte	3,211,12,1,9
	.half	.L1256-.L1255
	.byte	3,173,115,1,7,9
	.half	.L358-.L1256
	.byte	0,1,1,5,7,0,5,2
	.word	.L177
	.byte	3,133,248,0,1,9
	.half	.L1255-.L177
	.byte	3,147,13,1,9
	.half	.L1256-.L1255
	.byte	3,237,114,1,7,9
	.half	.L358-.L1256
	.byte	0,1,1,5,7,0,5,2
	.word	.L177
	.byte	3,133,248,0,1,9
	.half	.L1255-.L177
	.byte	3,226,19,1,9
	.half	.L1256-.L1255
	.byte	3,158,108,1,7,9
	.half	.L358-.L1256
	.byte	0,1,1
.L1252:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_1')
	.sect	'.debug_ranges'
.L357:
	.word	-1,.L177,0,.L358-.L177,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L359:
	.word	166
	.half	3
	.word	.L360
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L362,.L361
	.byte	2
	.word	.L220
	.byte	3
	.byte	'.cocofun_2',0,1,251,116,22,1
	.word	.L157,.L363,.L156
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L360:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L361:
	.word	.L1258-.L1257
.L1257:
	.half	3
	.word	.L1260-.L1259
.L1259:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1260:
	.byte	5,7,7,0,5,2
	.word	.L157
	.byte	3,130,38,1,9
	.half	.L363-.L157
	.byte	0,1,1,5,10,0,5,2
	.word	.L157
	.byte	3,232,231,0,1,5,7,9
	.half	.L1261-.L157
	.byte	3,154,190,127,1,7,9
	.half	.L363-.L1261
	.byte	0,1,1,5,10,0,5,2
	.word	.L157
	.byte	3,232,231,0,1,5,7,9
	.half	.L1261-.L157
	.byte	3,154,190,127,1,7,9
	.half	.L363-.L1261
	.byte	0,1,1,5,6,0,5,2
	.word	.L157
	.byte	3,213,234,0,1,5,7,9
	.half	.L1261-.L157
	.byte	3,173,187,127,1,7,9
	.half	.L363-.L1261
	.byte	0,1,1,5,8,0,5,2
	.word	.L157
	.byte	3,232,241,0,1,5,7,9
	.half	.L1261-.L157
	.byte	3,154,180,127,1,7,9
	.half	.L363-.L1261
	.byte	0,1,1
.L1258:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L362:
	.word	-1,.L157,0,.L363-.L157,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L364:
	.word	166
	.half	3
	.word	.L365
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L367,.L366
	.byte	2
	.word	.L220
	.byte	3
	.byte	'.cocofun_3',0,1,251,116,22,1
	.word	.L155,.L368,.L154
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L365:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L366:
	.word	.L1263-.L1262
.L1262:
	.half	3
	.word	.L1265-.L1264
.L1264:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1265:
	.byte	5,68,7,0,5,2
	.word	.L155
	.byte	3,149,202,0,1,9
	.half	.L368-.L155
	.byte	0,1,1,5,68,0,5,2
	.word	.L155
	.byte	3,149,202,0,1,9
	.half	.L368-.L155
	.byte	0,1,1,5,11,0,5,2
	.word	.L155
	.byte	3,193,216,0,1,5,68,9
	.half	.L1266-.L155
	.byte	3,212,113,1,7,9
	.half	.L368-.L1266
	.byte	0,1,1,5,11,0,5,2
	.word	.L155
	.byte	3,203,197,0,1,5,68,9
	.half	.L1266-.L155
	.byte	3,202,4,1,7,9
	.half	.L368-.L1266
	.byte	0,1,1
.L1263:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L367:
	.word	-1,.L155,0,.L368-.L155,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L369:
	.word	166
	.half	3
	.word	.L370
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L372,.L371
	.byte	2
	.word	.L220
	.byte	3
	.byte	'.cocofun_4',0,1,251,116,22,1
	.word	.L153,.L373,.L152
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L370:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L371:
	.word	.L1268-.L1267
.L1267:
	.half	3
	.word	.L1270-.L1269
.L1269:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1270:
	.byte	5,6,7,0,5,2
	.word	.L153
	.byte	3,208,202,0,1,5,5,9
	.half	.L1271-.L153
	.byte	3,2,1,9
	.half	.L373-.L1271
	.byte	0,1,1,5,6,0,5,2
	.word	.L153
	.byte	3,208,202,0,1,5,5,9
	.half	.L1271-.L153
	.byte	3,2,1,9
	.half	.L373-.L1271
	.byte	0,1,1,5,6,0,5,2
	.word	.L153
	.byte	3,135,33,1,5,5,9
	.half	.L1271-.L153
	.byte	3,2,1,3,201,41,1,7,9
	.half	.L373-.L1271
	.byte	0,1,1
.L1268:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L372:
	.word	-1,.L153,0,.L373-.L153,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L374:
	.word	166
	.half	3
	.word	.L375
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L377,.L376
	.byte	2
	.word	.L220
	.byte	3
	.byte	'.cocofun_5',0,1,251,116,22,1
	.word	.L151,.L378,.L150
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L375:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L376:
	.word	.L1273-.L1272
.L1272:
	.half	3
	.word	.L1275-.L1274
.L1274:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1275:
	.byte	5,5,7,0,5,2
	.word	.L151
	.byte	3,198,233,0,1,9
	.half	.L378-.L151
	.byte	0,1,1,5,5,0,5,2
	.word	.L151
	.byte	3,198,233,0,1,9
	.half	.L378-.L151
	.byte	0,1,1,5,5,0,5,2
	.word	.L151
	.byte	3,220,234,0,1,9
	.half	.L1276-.L151
	.byte	3,234,126,1,7,9
	.half	.L378-.L1276
	.byte	0,1,1,5,5,0,5,2
	.word	.L151
	.byte	3,198,233,0,1,9
	.half	.L378-.L151
	.byte	0,1,1
.L1273:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L377:
	.word	-1,.L151,0,.L378-.L151,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L379:
	.word	166
	.half	3
	.word	.L380
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L382,.L381
	.byte	2
	.word	.L220
	.byte	3
	.byte	'.cocofun_6',0,1,184,122,22,1
	.word	.L189,.L383,.L188
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L380:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L381:
	.word	.L1278-.L1277
.L1277:
	.half	3
	.word	.L1280-.L1279
.L1279:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1280:
	.byte	5,6,7,0,5,2
	.word	.L189
	.byte	3,187,250,0,1,9
	.half	.L383-.L189
	.byte	0,1,1,5,17,0,5,2
	.word	.L189
	.byte	3,185,253,0,1,5,6,3,130,125,1,9
	.half	.L383-.L189
	.byte	0,1,1,5,17,0,5,2
	.word	.L189
	.byte	3,221,133,1,1,5,6,3,222,116,1,9
	.half	.L383-.L189
	.byte	0,1,1
.L1278:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L382:
	.word	-1,.L189,0,.L383-.L189,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L384:
	.word	166
	.half	3
	.word	.L385
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L387,.L386
	.byte	2
	.word	.L220
	.byte	3
	.byte	'.cocofun_7',0,1,197,119,22,1
	.word	.L173,.L388,.L172
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L385:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L386:
	.word	.L1282-.L1281
.L1281:
	.half	3
	.word	.L1284-.L1283
.L1283:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1284:
	.byte	5,17,7,0,5,2
	.word	.L173
	.byte	3,199,247,0,1,5,7,3,4,1,5,13,9
	.half	.L1285-.L173
	.byte	3,2,1,9
	.half	.L388-.L1285
	.byte	0,1,1,5,17,0,5,2
	.word	.L173
	.byte	3,250,250,0,1,5,7,3,209,124,1,5,13,9
	.half	.L1285-.L173
	.byte	3,181,3,1,3,205,124,1,7,9
	.half	.L388-.L1285
	.byte	0,1,1
.L1282:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L387:
	.word	-1,.L173,0,.L388-.L173,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L389:
	.word	166
	.half	3
	.word	.L390
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L392,.L391
	.byte	2
	.word	.L220
	.byte	3
	.byte	'.cocofun_8',0,1,255,118,22,1
	.word	.L167,.L393,.L166
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L390:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L391:
	.word	.L1287-.L1286
.L1286:
	.half	3
	.word	.L1289-.L1288
.L1288:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1289:
	.byte	5,7,7,0,5,2
	.word	.L167
	.byte	3,133,247,0,1,9
	.half	.L393-.L167
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,203,247,0,1,9
	.half	.L1290-.L167
	.byte	3,186,127,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,254,250,0,1,9
	.half	.L1290-.L167
	.byte	3,135,124,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,133,248,0,1,9
	.half	.L1290-.L167
	.byte	3,128,127,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,208,248,0,1,9
	.half	.L1290-.L167
	.byte	3,181,126,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,143,249,0,1,9
	.half	.L1290-.L167
	.byte	3,246,125,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,208,249,0,1,9
	.half	.L1290-.L167
	.byte	3,181,125,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,238,130,1,1,9
	.half	.L1290-.L167
	.byte	3,151,116,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,216,132,1,1,9
	.half	.L1290-.L167
	.byte	3,173,114,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,152,133,1,1,9
	.half	.L1290-.L167
	.byte	3,237,113,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,231,139,1,1,9
	.half	.L1290-.L167
	.byte	3,158,107,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,6,0,5,2
	.word	.L167
	.byte	3,143,250,0,1,5,7,9
	.half	.L1290-.L167
	.byte	3,246,124,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,6,0,5,2
	.word	.L167
	.byte	3,187,250,0,1,5,7,9
	.half	.L1290-.L167
	.byte	3,202,124,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,190,253,0,1,9
	.half	.L1290-.L167
	.byte	3,199,121,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,225,133,1,1,9
	.half	.L1290-.L167
	.byte	3,164,113,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,11,0,5,2
	.word	.L167
	.byte	3,161,251,0,1,5,7,9
	.half	.L1290-.L167
	.byte	3,228,123,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,224,251,0,1,9
	.half	.L1290-.L167
	.byte	3,165,123,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,129,253,0,1,9
	.half	.L1290-.L167
	.byte	3,132,122,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,214,128,1,1,9
	.half	.L1290-.L167
	.byte	3,175,118,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,236,137,1,1,9
	.half	.L1290-.L167
	.byte	3,153,109,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1,5,7,0,5,2
	.word	.L167
	.byte	3,161,139,1,1,9
	.half	.L1290-.L167
	.byte	3,228,107,1,7,9
	.half	.L393-.L1290
	.byte	0,1,1
.L1287:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L392:
	.word	-1,.L167,0,.L393-.L167,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_9')
	.sect	'.debug_info'
.L394:
	.word	166
	.half	3
	.word	.L395
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L397,.L396
	.byte	2
	.word	.L220
	.byte	3
	.byte	'.cocofun_9',0,1,197,119,22,1
	.word	.L171,.L398,.L170
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_9')
	.sect	'.debug_abbrev'
.L395:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_9')
	.sect	'.debug_line'
.L396:
	.word	.L1292-.L1291
.L1291:
	.half	3
	.word	.L1294-.L1293
.L1293:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1294:
	.byte	5,5,7,0,5,2
	.word	.L171
	.byte	3,236,247,0,1,9
	.half	.L398-.L171
	.byte	0,1,1,5,5,0,5,2
	.word	.L171
	.byte	3,236,247,0,1,9
	.half	.L891-.L171
	.byte	3,204,1,1,3,180,126,1,7,9
	.half	.L398-.L891
	.byte	0,1,1,5,5,0,5,2
	.word	.L171
	.byte	3,236,247,0,1,9
	.half	.L891-.L171
	.byte	3,141,2,1,3,243,125,1,7,9
	.half	.L398-.L891
	.byte	0,1,1
.L1292:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_9')
	.sect	'.debug_ranges'
.L397:
	.word	-1,.L171,0,.L398-.L171,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_10')
	.sect	'.debug_info'
.L399:
	.word	167
	.half	3
	.word	.L400
	.byte	4,1
	.byte	'..\\component\\Com\\Implementation\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L402,.L401
	.byte	2
	.word	.L220
	.byte	3
	.byte	'.cocofun_10',0,1,160,118,22,1
	.word	.L163,.L403,.L162
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_10')
	.sect	'.debug_abbrev'
.L400:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_10')
	.sect	'.debug_line'
.L401:
	.word	.L1296-.L1295
.L1295:
	.half	3
	.word	.L1298-.L1297
.L1297:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\Com\\Implementation\\Com.c',0,0,0,0,0
.L1298:
	.byte	5,5,7,0,5,2
	.word	.L163
	.byte	3,237,246,0,1,9
	.half	.L403-.L163
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,236,247,0,1,9
	.half	.L892-.L163
	.byte	3,129,127,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,184,249,0,1,9
	.half	.L892-.L163
	.byte	3,181,125,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,249,249,0,1,9
	.half	.L892-.L163
	.byte	3,244,124,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,182,248,0,1,9
	.half	.L892-.L163
	.byte	3,183,126,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,247,248,0,1,9
	.half	.L892-.L163
	.byte	3,246,125,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,142,251,0,1,9
	.half	.L892-.L163
	.byte	3,223,123,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,135,252,0,1,9
	.half	.L892-.L163
	.byte	3,230,122,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,160,253,0,1,9
	.half	.L892-.L163
	.byte	3,205,121,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,247,253,0,1,9
	.half	.L892-.L163
	.byte	3,246,120,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,136,129,1,1,9
	.half	.L892-.L163
	.byte	3,229,117,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,166,131,1,1,9
	.half	.L892-.L163
	.byte	3,199,115,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,252,132,1,1,9
	.half	.L892-.L163
	.byte	3,241,113,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,198,133,1,1,9
	.half	.L892-.L163
	.byte	3,167,113,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,255,133,1,1,9
	.half	.L892-.L163
	.byte	3,238,112,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,172,138,1,1,9
	.half	.L892-.L163
	.byte	3,193,108,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,201,139,1,1,9
	.half	.L892-.L163
	.byte	3,164,107,1,7,9
	.half	.L403-.L892
	.byte	0,1,1,5,5,0,5,2
	.word	.L163
	.byte	3,153,140,1,1,9
	.half	.L892-.L163
	.byte	3,212,106,1,7,9
	.half	.L403-.L892
	.byte	0,1,1
.L1296:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_10')
	.sect	'.debug_ranges'
.L402:
	.word	-1,.L163,0,.L403-.L163,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_1')
	.sect	'.debug_loc'
.L176:
	.word	-1,.L177,0,.L358-.L177
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_10')
	.sect	'.debug_loc'
.L162:
	.word	-1,.L163,0,.L403-.L163
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L156:
	.word	-1,.L157,0,.L363-.L157
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L154:
	.word	-1,.L155,0,.L368-.L155
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L152:
	.word	-1,.L153,0,.L373-.L153
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L150:
	.word	-1,.L151,0,.L378-.L151
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L188:
	.word	-1,.L189,0,.L383-.L189
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L172:
	.word	-1,.L173,0,.L388-.L173
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L166:
	.word	-1,.L167,0,.L393-.L167
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_9')
	.sect	'.debug_loc'
.L170:
	.word	-1,.L171,0,.L398-.L171
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_ClearIpduGroupVector')
	.sect	'.debug_loc'
.L196:
	.word	-1,.L197,0,.L652-.L197
	.half	2
	.byte	138,0
	.word	0,0
.L653:
	.word	-1,.L197,0,.L652-.L197
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_DeInit')
	.sect	'.debug_loc'
.L160:
	.word	-1,.L161,0,.L869-.L161
	.half	2
	.byte	138,0
	.word	.L869-.L161,.L17-.L161
	.half	2
	.byte	138,8
	.word	.L17-.L161,.L17-.L161
	.half	2
	.byte	138,0
	.word	.L17-.L161,.L509-.L161
	.half	2
	.byte	138,8
	.word	.L509-.L161,.L509-.L161
	.half	2
	.byte	138,0
	.word	0,0
.L514:
	.word	-1,.L161,0,.L870-.L161
	.half	2
	.byte	145,120
	.word	.L163-.L161,.L403-.L161
	.half	2
	.byte	145,120
	.word	.L871-.L161,.L509-.L161
	.half	2
	.byte	145,120
	.word	0,0
.L511:
	.word	-1,.L161,.L869-.L161,.L870-.L161
	.half	1
	.byte	88
	.word	.L163-.L161,.L403-.L161
	.half	1
	.byte	88
	.word	.L871-.L161,.L509-.L161
	.half	1
	.byte	88
	.word	.L872-.L161,.L17-.L161
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_DisableReceptionDM')
	.sect	'.debug_loc'
.L182:
	.word	-1,.L183,0,.L638-.L183
	.half	2
	.byte	138,0
	.word	0,0
.L639:
	.word	-1,.L183,.L163-.L183,.L892-.L183
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_EnableReceptionDM')
	.sect	'.debug_loc'
.L180:
	.word	-1,.L181,0,.L636-.L181
	.half	2
	.byte	138,0
	.word	0,0
.L637:
	.word	-1,.L181,.L163-.L181,.L892-.L181
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_GetConfigurationId')
	.sect	'.debug_loc'
.L190:
	.word	-1,.L191,0,.L641-.L191
	.half	2
	.byte	138,0
	.word	0,0
.L642:
	.word	-1,.L191,.L167-.L191,.L393-.L191
	.half	1
	.byte	87
	.word	.L173-.L191,.L388-.L191
	.half	1
	.byte	87
	.word	.L163-.L191,.L403-.L191
	.half	1
	.byte	87
	.word	.L901-.L191,.L79-.L191
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_GetStatus')
	.sect	'.debug_loc'
.L192:
	.word	-1,.L193,0,.L644-.L193
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_Init')
	.sect	'.debug_loc'
.L452:
	.word	0,0
.L486:
	.word	0,0
.L497:
	.word	0,0
.L491:
	.word	0,0
.L501:
	.word	0,0
.L456:
	.word	0,0
.L481:
	.word	-1,.L149,.L151-.L149,.L378-.L149
	.half	1
	.byte	91
	.word	.L157-.L149,.L363-.L149
	.half	1
	.byte	91
	.word	.L867-.L149,.L439-.L149
	.half	1
	.byte	91
	.word	0,0
.L506:
	.word	0,0
.L148:
	.word	-1,.L149,0,.L864-.L149
	.half	2
	.byte	138,0
	.word	.L864-.L149,.L14-.L149
	.half	2
	.byte	138,32
	.word	.L14-.L149,.L14-.L149
	.half	2
	.byte	138,0
	.word	.L14-.L149,.L439-.L149
	.half	2
	.byte	138,32
	.word	.L439-.L149,.L439-.L149
	.half	2
	.byte	138,0
	.word	0,0
.L462:
	.word	0,0
.L441:
	.word	-1,.L149,0,.L448-.L149
	.half	1
	.byte	100
	.word	.L155-.L149,.L368-.L149
	.half	1
	.byte	100
	.word	.L865-.L149,.L866-.L149
	.half	1
	.byte	100
	.word	0,0
.L442:
	.word	-1,.L149,.L444-.L149,.L448-.L149
	.half	1
	.byte	89
	.word	.L155-.L149,.L368-.L149
	.half	1
	.byte	89
	.word	.L865-.L149,.L461-.L149
	.half	1
	.byte	89
	.word	.L153-.L149,.L373-.L149
	.half	1
	.byte	89
	.word	.L151-.L149,.L378-.L149
	.half	1
	.byte	89
	.word	.L157-.L149,.L363-.L149
	.half	1
	.byte	89
	.word	.L868-.L149,.L439-.L149
	.half	1
	.byte	89
	.word	0,0
.L469:
	.word	0,0
.L467:
	.word	0,0
.L471:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_InitMemory')
	.sect	'.debug_loc'
.L158:
	.word	-1,.L159,0,.L508-.L159
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_InvalidateSignal')
	.sect	'.debug_loc'
.L206:
	.word	-1,.L207,0,.L673-.L207
	.half	2
	.byte	138,0
	.word	0,0
.L674:
	.word	-1,.L207,.L163-.L207,.L892-.L207
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_InvalidateSignalGroup')
	.sect	'.debug_loc'
.L208:
	.word	-1,.L209,0,.L675-.L209
	.half	2
	.byte	138,0
	.word	0,0
.L676:
	.word	-1,.L209,.L163-.L209,.L892-.L209
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_IpduGroupControl')
	.sect	'.debug_loc'
.L547:
	.word	0,0
.L605:
	.word	0,0
.L608:
	.word	0,0
.L607:
	.word	0,0
.L609:
	.word	0,0
.L560:
	.word	0,0
.L548:
	.word	0,0
.L600:
	.word	0,0
.L590:
	.word	0,0
.L583:
	.word	0,0
.L611:
	.word	0,0
.L619:
	.word	0,0
.L164:
	.word	-1,.L165,0,.L873-.L165
	.half	2
	.byte	138,0
	.word	.L873-.L165,.L51-.L165
	.half	2
	.byte	138,24
	.word	.L51-.L165,.L51-.L165
	.half	2
	.byte	138,0
	.word	.L51-.L165,.L515-.L165
	.half	2
	.byte	138,24
	.word	.L515-.L165,.L515-.L165
	.half	2
	.byte	138,0
	.word	0,0
.L533:
	.word	-1,.L165,.L875-.L165,.L876-.L165
	.half	5
	.byte	144,32,157,32,0
	.word	.L25-.L165,.L24-.L165
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L594:
	.word	0,0
.L585:
	.word	-1,.L165,.L884-.L165,.L885-.L165
	.half	1
	.byte	84
	.word	.L40-.L165,.L39-.L165
	.half	1
	.byte	84
	.word	0,0
.L550:
	.word	0,0
.L520:
	.word	-1,.L165,.L874-.L165,.L393-.L165
	.half	1
	.byte	90
	.word	.L155-.L165,.L368-.L165
	.half	1
	.byte	90
	.word	.L873-.L165,.L549-.L165
	.half	1
	.byte	90
	.word	.L153-.L165,.L373-.L165
	.half	1
	.byte	90
	.word	.L151-.L165,.L378-.L165
	.half	1
	.byte	90
	.word	.L882-.L165,.L515-.L165
	.half	1
	.byte	90
	.word	.L890-.L165,.L51-.L165
	.half	1
	.byte	87
	.word	0,0
.L537:
	.word	-1,.L165,.L21-.L165,.L878-.L165
	.half	1
	.byte	95
	.word	.L879-.L165,.L880-.L165
	.half	1
	.byte	95
	.word	0,0
.L587:
	.word	-1,.L165,.L887-.L165,.L888-.L165
	.half	5
	.byte	144,32,157,32,0
	.word	.L889-.L165,.L42-.L165
	.half	5
	.byte	144,32,157,32,0
	.word	.L40-.L165,.L39-.L165
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L569:
	.word	-1,.L165,.L151-.L165,.L378-.L165
	.half	1
	.byte	93
	.word	.L883-.L165,.L19-.L165
	.half	1
	.byte	93
	.word	0,0
.L554:
	.word	0,0
.L553:
	.word	0,0
.L555:
	.word	0,0
.L544:
	.word	0,0
.L602:
	.word	0,0
.L526:
	.word	0,0
.L592:
	.word	0,0
.L518:
	.word	-1,.L165,.L874-.L165,.L393-.L165
	.half	1
	.byte	84
	.word	.L874-.L165,.L393-.L165
	.half	1
	.byte	88
	.word	0,.L529-.L165
	.half	1
	.byte	84
	.word	.L155-.L165,.L368-.L165
	.half	1
	.byte	88
	.word	.L873-.L165,.L549-.L165
	.half	1
	.byte	88
	.word	.L153-.L165,.L373-.L165
	.half	1
	.byte	88
	.word	.L151-.L165,.L378-.L165
	.half	1
	.byte	88
	.word	.L882-.L165,.L515-.L165
	.half	1
	.byte	88
	.word	0,0
.L524:
	.word	0,0
.L581:
	.word	0,0
.L517:
	.word	-1,.L165,.L874-.L165,.L393-.L165
	.half	1
	.byte	108
	.word	.L874-.L165,.L393-.L165
	.half	1
	.byte	100
	.word	0,.L529-.L165
	.half	1
	.byte	100
	.word	.L155-.L165,.L368-.L165
	.half	1
	.byte	108
	.word	.L881-.L165,.L549-.L165
	.half	1
	.byte	108
	.word	.L153-.L165,.L373-.L165
	.half	1
	.byte	108
	.word	.L151-.L165,.L378-.L165
	.half	1
	.byte	108
	.word	.L882-.L165,.L515-.L165
	.half	1
	.byte	108
	.word	0,0
.L534:
	.word	-1,.L165,.L536-.L165,.L877-.L165
	.half	1
	.byte	81
	.word	0,0
.L586:
	.word	-1,.L165,.L884-.L165,.L886-.L165
	.half	1
	.byte	95
	.word	0,0
.L542:
	.word	0,0
.L614:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_IpduGroupStart')
	.sect	'.debug_loc'
.L174:
	.word	-1,.L175,0,.L629-.L175
	.half	2
	.byte	138,0
	.word	0,0
.L632:
	.word	-1,.L175,.L163-.L175,.L403-.L175
	.half	1
	.byte	85
	.word	0,0
.L631:
	.word	-1,.L175,.L163-.L175,.L892-.L175
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_IpduGroupStop')
	.sect	'.debug_loc'
.L178:
	.word	-1,.L179,0,.L634-.L179
	.half	2
	.byte	138,0
	.word	0,0
.L635:
	.word	-1,.L179,.L163-.L179,.L892-.L179
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_MainFunctionRx')
	.sect	'.debug_loc'
.L184:
	.word	-1,.L185,0,.L893-.L185
	.half	2
	.byte	138,0
	.word	.L893-.L185,.L54-.L185
	.half	2
	.byte	138,16
	.word	.L54-.L185,.L54-.L185
	.half	2
	.byte	138,0
	.word	.L54-.L185,.L732-.L185
	.half	2
	.byte	138,16
	.word	.L732-.L185,.L732-.L185
	.half	2
	.byte	138,0
	.word	0,0
.L758:
	.word	-1,.L185,.L896-.L185,.L368-.L185
	.half	2
	.byte	144,34
	.word	.L897-.L185,.L58-.L185
	.half	2
	.byte	144,34
	.word	0,0
.L763:
	.word	0,0
.L772:
	.word	0,0
.L779:
	.word	0,0
.L797:
	.word	0,0
.L788:
	.word	0,0
.L799:
	.word	0,0
.L761:
	.word	0,0
.L737:
	.word	-1,.L185,.L167-.L185,.L393-.L185
	.half	2
	.byte	145,112
	.word	.L896-.L185,.L368-.L185
	.half	2
	.byte	145,112
	.word	0,.L732-.L185
	.half	2
	.byte	145,112
	.word	0,0
.L744:
	.word	0,0
.L756:
	.word	0,0
.L801:
	.word	0,0
.L765:
	.word	0,0
.L806:
	.word	0,0
.L786:
	.word	0,0
.L774:
	.word	0,0
.L781:
	.word	0,0
.L754:
	.word	0,0
.L749:
	.word	0,0
.L767:
	.word	-1,.L185,.L896-.L185,.L368-.L185
	.half	5
	.byte	144,32,157,32,0
	.word	.L895-.L185,.L58-.L185
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L751:
	.word	-1,.L185,.L894-.L185,.L895-.L185
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L795:
	.word	0,0
.L791:
	.word	-1,.L185,.L784-.L185,.L61-.L185
	.half	1
	.byte	83
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_MainFunctionTx')
	.sect	'.debug_loc'
.L819:
	.word	0,0
.L820:
	.word	-1,.L187,.L899-.L187,.L900-.L187
	.half	1
	.byte	95
	.word	0,0
.L848:
	.word	-1,.L187,.L850-.L187,.L812-.L187
	.half	1
	.byte	90
	.word	0,0
.L856:
	.word	0,0
.L839:
	.word	0,0
.L186:
	.word	-1,.L187,0,.L898-.L187
	.half	2
	.byte	138,0
	.word	.L898-.L187,.L71-.L187
	.half	2
	.byte	138,8
	.word	.L71-.L187,.L71-.L187
	.half	2
	.byte	138,0
	.word	.L71-.L187,.L812-.L187
	.half	2
	.byte	138,8
	.word	.L812-.L187,.L812-.L187
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_ReceiveSignal')
	.sect	'.debug_loc'
.L202:
	.word	-1,.L203,0,.L659-.L203
	.half	2
	.byte	138,0
	.word	0,0
.L669:
	.word	0,0
.L662:
	.word	-1,.L203,.L874-.L203,.L393-.L203
	.half	1
	.byte	100
	.word	0,.L111-.L203
	.half	1
	.byte	100
	.word	.L155-.L203,.L368-.L203
	.half	1
	.byte	100
	.word	.L163-.L203,.L403-.L203
	.half	1
	.byte	100
	.word	.L910-.L203,.L114-.L203
	.half	1
	.byte	100
	.word	0,0
.L660:
	.word	-1,.L203,.L874-.L203,.L393-.L203
	.half	1
	.byte	84
	.word	0,.L111-.L203
	.half	1
	.byte	84
	.word	.L155-.L203,.L368-.L203
	.half	1
	.byte	84
	.word	.L910-.L203,.L911-.L203
	.half	1
	.byte	84
	.word	.L163-.L203,.L892-.L203
	.half	1
	.byte	84
	.word	0,0
.L663:
	.word	-1,.L203,.L874-.L203,.L393-.L203
	.half	1
	.byte	87
	.word	.L909-.L203,.L111-.L203
	.half	1
	.byte	87
	.word	.L155-.L203,.L368-.L203
	.half	1
	.byte	87
	.word	.L163-.L203,.L403-.L203
	.half	1
	.byte	87
	.word	.L910-.L203,.L114-.L203
	.half	1
	.byte	87
	.word	0,0
.L667:
	.word	0,0
.L664:
	.word	-1,.L203,.L874-.L203,.L393-.L203
	.half	1
	.byte	88
	.word	.L909-.L203,.L111-.L203
	.half	1
	.byte	88
	.word	.L155-.L203,.L368-.L203
	.half	1
	.byte	88
	.word	.L163-.L203,.L403-.L203
	.half	1
	.byte	88
	.word	.L910-.L203,.L659-.L203
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_ReceiveSignalGroup')
	.sect	'.debug_loc'
.L204:
	.word	-1,.L205,0,.L671-.L205
	.half	2
	.byte	138,0
	.word	0,0
.L672:
	.word	-1,.L205,.L163-.L205,.L892-.L205
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_ReceptionDMControl')
	.sect	'.debug_loc'
.L168:
	.word	-1,.L169,0,.L625-.L169
	.half	2
	.byte	138,0
	.word	0,0
.L628:
	.word	-1,.L169,.L874-.L169,.L393-.L169
	.half	1
	.byte	87
	.word	.L173-.L169,.L388-.L169
	.half	1
	.byte	87
	.word	.L163-.L169,.L403-.L169
	.half	1
	.byte	87
	.word	.L891-.L169,.L398-.L169
	.half	1
	.byte	87
	.word	.L53-.L169,.L625-.L169
	.half	1
	.byte	87
	.word	0,0
.L626:
	.word	-1,.L169,.L874-.L169,.L393-.L169
	.half	1
	.byte	100
	.word	.L173-.L169,.L388-.L169
	.half	1
	.byte	100
	.word	.L163-.L169,.L403-.L169
	.half	1
	.byte	100
	.word	.L891-.L169,.L398-.L169
	.half	1
	.byte	100
	.word	.L53-.L169,.L625-.L169
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_RxIndication')
	.sect	'.debug_loc'
.L424:
	.word	0,0
.L200:
	.word	-1,.L201,0,.L404-.L201
	.half	2
	.byte	138,0
	.word	0,0
.L419:
	.word	-1,.L201,.L422-.L201,.L96-.L201
	.half	2
	.byte	144,37
	.word	0,0
.L414:
	.word	0,0
.L426:
	.word	0,0
.L408:
	.word	-1,.L201,.L189-.L201,.L905-.L201
	.half	1
	.byte	100
	.word	.L167-.L201,.L393-.L201
	.half	1
	.byte	100
	.word	.L906-.L201,.L907-.L201
	.half	1
	.byte	100
	.word	0,0
.L412:
	.word	0,0
.L406:
	.word	-1,.L201,.L189-.L201,.L905-.L201
	.half	1
	.byte	84
	.word	.L167-.L201,.L393-.L201
	.half	1
	.byte	84
	.word	.L906-.L201,.L907-.L201
	.half	1
	.byte	84
	.word	0,0
.L409:
	.word	-1,.L201,.L189-.L201,.L905-.L201
	.half	1
	.byte	88
	.word	.L167-.L201,.L393-.L201
	.half	1
	.byte	88
	.word	.L163-.L201,.L403-.L201
	.half	1
	.byte	88
	.word	.L906-.L201,.L404-.L201
	.half	1
	.byte	88
	.word	.L908-.L201,.L106-.L201
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_SendSignal')
	.sect	'.debug_loc'
.L216:
	.word	-1,.L217,0,.L687-.L217
	.half	2
	.byte	138,0
	.word	0,0
.L715:
	.word	0,0
.L701:
	.word	0,0
.L726:
	.word	0,0
.L729:
	.word	0,0
.L713:
	.word	0,0
.L699:
	.word	0,0
.L690:
	.word	-1,.L217,.L874-.L217,.L393-.L217
	.half	1
	.byte	100
	.word	.L874-.L217,.L393-.L217
	.half	1
	.byte	108
	.word	0,.L704-.L217
	.half	1
	.byte	100
	.word	.L157-.L217,.L363-.L217
	.half	1
	.byte	108
	.word	.L163-.L217,.L403-.L217
	.half	1
	.byte	108
	.word	.L917-.L217,.L687-.L217
	.half	1
	.byte	108
	.word	0,0
.L724:
	.word	0,0
.L688:
	.word	-1,.L217,.L874-.L217,.L393-.L217
	.half	1
	.byte	88
	.word	.L874-.L217,.L393-.L217
	.half	1
	.byte	84
	.word	0,.L704-.L217
	.half	1
	.byte	84
	.word	.L157-.L217,.L363-.L217
	.half	1
	.byte	88
	.word	.L163-.L217,.L403-.L217
	.half	1
	.byte	88
	.word	.L917-.L217,.L687-.L217
	.half	1
	.byte	88
	.word	0,0
.L691:
	.word	-1,.L217,.L874-.L217,.L393-.L217
	.half	1
	.byte	89
	.word	.L157-.L217,.L363-.L217
	.half	1
	.byte	89
	.word	.L163-.L217,.L403-.L217
	.half	1
	.byte	89
	.word	.L694-.L217,.L687-.L217
	.half	1
	.byte	89
	.word	0,0
.L717:
	.word	0,0
.L706:
	.word	-1,.L217,.L157-.L217,.L363-.L217
	.half	5
	.byte	144,32,157,32,0
	.word	.L720-.L217,.L137-.L217
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L711:
	.word	0,0
.L697:
	.word	0,0
.L705:
	.word	-1,.L217,.L874-.L217,.L393-.L217
	.half	1
	.byte	90
	.word	.L157-.L217,.L363-.L217
	.half	1
	.byte	90
	.word	.L163-.L217,.L403-.L217
	.half	1
	.byte	90
	.word	.L694-.L217,.L687-.L217
	.half	1
	.byte	90
	.word	0,0
.L692:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_SendSignalGroup')
	.sect	'.debug_loc'
.L218:
	.word	-1,.L219,0,.L730-.L219
	.half	2
	.byte	138,0
	.word	0,0
.L731:
	.word	-1,.L219,.L163-.L219,.L892-.L219
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_SetIpduGroup')
	.sect	'.debug_loc'
.L198:
	.word	-1,.L199,0,.L654-.L199
	.half	2
	.byte	138,0
	.word	0,0
.L657:
	.word	-1,.L199,.L874-.L199,.L393-.L199
	.half	1
	.byte	85
	.word	0,.L904-.L199
	.half	1
	.byte	85
	.word	.L163-.L199,.L403-.L199
	.half	1
	.byte	85
	.word	.L94-.L199,.L654-.L199
	.half	1
	.byte	85
	.word	0,0
.L658:
	.word	-1,.L199,.L874-.L199,.L393-.L199
	.half	1
	.byte	87
	.word	.L163-.L199,.L403-.L199
	.half	1
	.byte	87
	.word	0,.L654-.L199
	.half	1
	.byte	87
	.word	0,0
.L656:
	.word	-1,.L199,.L874-.L199,.L393-.L199
	.half	1
	.byte	84
	.word	0,.L904-.L199
	.half	1
	.byte	84
	.word	.L163-.L199,.L892-.L199
	.half	1
	.byte	84
	.word	.L94-.L199,.L654-.L199
	.half	1
	.byte	84
	.word	0,0
.L655:
	.word	-1,.L199,.L874-.L199,.L393-.L199
	.half	1
	.byte	100
	.word	.L163-.L199,.L403-.L199
	.half	1
	.byte	100
	.word	0,.L654-.L199
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_SwitchIpduTxMode')
	.sect	'.debug_loc'
.L686:
	.word	0,0
.L214:
	.word	-1,.L215,0,.L681-.L215
	.half	2
	.byte	138,0
	.word	0,0
.L683:
	.word	-1,.L215,.L874-.L215,.L393-.L215
	.half	1
	.byte	85
	.word	.L151-.L215,.L378-.L215
	.half	1
	.byte	85
	.word	0,.L916-.L215
	.half	1
	.byte	85
	.word	.L163-.L215,.L403-.L215
	.half	1
	.byte	85
	.word	.L135-.L215,.L681-.L215
	.half	1
	.byte	85
	.word	0,0
.L682:
	.word	-1,.L215,.L874-.L215,.L393-.L215
	.half	1
	.byte	84
	.word	.L151-.L215,.L378-.L215
	.half	1
	.byte	84
	.word	0,.L916-.L215
	.half	1
	.byte	84
	.word	.L163-.L215,.L892-.L215
	.half	1
	.byte	84
	.word	.L135-.L215,.L681-.L215
	.half	1
	.byte	84
	.word	0,0
.L684:
	.word	-1,.L215,.L874-.L215,.L393-.L215
	.half	1
	.byte	87
	.word	.L151-.L215,.L378-.L215
	.half	1
	.byte	87
	.word	.L163-.L215,.L403-.L215
	.half	1
	.byte	87
	.word	0,.L681-.L215
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_TriggerIPDUSend')
	.sect	'.debug_loc'
.L650:
	.word	0,0
.L194:
	.word	-1,.L195,0,.L645-.L195
	.half	2
	.byte	138,0
	.word	0,0
.L646:
	.word	-1,.L195,.L874-.L195,.L393-.L195
	.half	1
	.byte	84
	.word	0,.L84-.L195
	.half	1
	.byte	84
	.word	.L157-.L195,.L363-.L195
	.half	1
	.byte	84
	.word	.L151-.L195,.L378-.L195
	.half	1
	.byte	84
	.word	.L902-.L195,.L903-.L195
	.half	1
	.byte	84
	.word	.L163-.L195,.L892-.L195
	.half	1
	.byte	84
	.word	.L87-.L195,.L645-.L195
	.half	1
	.byte	84
	.word	0,0
.L647:
	.word	-1,.L195,.L874-.L195,.L393-.L195
	.half	1
	.byte	87
	.word	0,.L84-.L195
	.half	1
	.byte	87
	.word	.L157-.L195,.L363-.L195
	.half	1
	.byte	87
	.word	.L151-.L195,.L378-.L195
	.half	1
	.byte	87
	.word	.L163-.L195,.L403-.L195
	.half	1
	.byte	87
	.word	.L902-.L195,.L645-.L195
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_TxConfirmation')
	.sect	'.debug_loc'
.L210:
	.word	-1,.L211,0,.L432-.L211
	.half	2
	.byte	138,0
	.word	0,0
.L437:
	.word	0,0
.L433:
	.word	-1,.L211,.L189-.L211,.L905-.L211
	.half	1
	.byte	84
	.word	.L167-.L211,.L393-.L211
	.half	1
	.byte	84
	.word	.L912-.L211,.L913-.L211
	.half	1
	.byte	84
	.word	0,0
.L434:
	.word	-1,.L211,.L189-.L211,.L905-.L211
	.half	1
	.byte	88
	.word	.L167-.L211,.L393-.L211
	.half	1
	.byte	88
	.word	.L163-.L211,.L403-.L211
	.half	1
	.byte	88
	.word	.L912-.L211,.L432-.L211
	.half	1
	.byte	88
	.word	.L914-.L211,.L123-.L211
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_TxLLIf_Transmit')
	.sect	'.debug_loc'
.L678:
	.word	-1,.L213,0,.L677-.L213
	.half	1
	.byte	84
	.word	0,0
.L212:
	.word	-1,.L213,0,.L915-.L213
	.half	2
	.byte	138,0
	.word	.L915-.L213,.L677-.L213
	.half	2
	.byte	138,8
	.word	.L677-.L213,.L677-.L213
	.half	2
	.byte	138,0
	.word	0,0
.L680:
	.word	-1,.L213,0,.L677-.L213
	.half	2
	.byte	145,120
	.word	0,0
.L679:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1299:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Com_Init')
	.sect	'.debug_frame'
	.word	52
	.word	.L1299,.L149,.L439-.L149
	.byte	4
	.word	(.L864-.L149)/2
	.byte	19,32,22,26,3,19,138,32,4
	.word	(.L14-.L864)/2
	.byte	19,0,8,26,19,32,22,26,3,19,138,32,4
	.word	(.L439-.L14)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Com_InitMemory')
	.sect	'.debug_frame'
	.word	24
	.word	.L1299,.L159,.L508-.L159
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Com_DeInit')
	.sect	'.debug_frame'
	.word	52
	.word	.L1299,.L161,.L509-.L161
	.byte	4
	.word	(.L869-.L161)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L17-.L869)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L509-.L17)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Com_IpduGroupControl')
	.sect	'.debug_frame'
	.word	52
	.word	.L1299,.L165,.L515-.L165
	.byte	4
	.word	(.L873-.L165)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L51-.L873)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L515-.L51)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Com_ReceptionDMControl')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L169,.L625-.L169
	.sdecl	'.debug_frame',debug,cluster('Com_IpduGroupStart')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L175,.L629-.L175
	.sdecl	'.debug_frame',debug,cluster('Com_IpduGroupStop')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L179,.L634-.L179
	.sdecl	'.debug_frame',debug,cluster('Com_EnableReceptionDM')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L181,.L636-.L181
	.sdecl	'.debug_frame',debug,cluster('Com_DisableReceptionDM')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L183,.L638-.L183
	.sdecl	'.debug_frame',debug,cluster('Com_MainFunctionRx')
	.sect	'.debug_frame'
	.word	52
	.word	.L1299,.L185,.L732-.L185
	.byte	4
	.word	(.L893-.L185)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L54-.L893)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L732-.L54)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Com_MainFunctionTx')
	.sect	'.debug_frame'
	.word	52
	.word	.L1299,.L187,.L812-.L187
	.byte	4
	.word	(.L898-.L187)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L71-.L898)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L812-.L71)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Com_GetConfigurationId')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L191,.L641-.L191
	.sdecl	'.debug_frame',debug,cluster('Com_GetStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L1299,.L193,.L644-.L193
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Com_TriggerIPDUSend')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L195,.L645-.L195
	.sdecl	'.debug_frame',debug,cluster('Com_ClearIpduGroupVector')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L197,.L652-.L197
	.sdecl	'.debug_frame',debug,cluster('Com_SetIpduGroup')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L199,.L654-.L199
	.sdecl	'.debug_frame',debug,cluster('Com_RxIndication')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L201,.L404-.L201
	.sdecl	'.debug_frame',debug,cluster('Com_ReceiveSignal')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L203,.L659-.L203
	.sdecl	'.debug_frame',debug,cluster('Com_ReceiveSignalGroup')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L205,.L671-.L205
	.sdecl	'.debug_frame',debug,cluster('Com_InvalidateSignal')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L207,.L673-.L207
	.sdecl	'.debug_frame',debug,cluster('Com_InvalidateSignalGroup')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L209,.L675-.L209
	.sdecl	'.debug_frame',debug,cluster('Com_TxConfirmation')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L211,.L432-.L211
	.sdecl	'.debug_frame',debug,cluster('Com_TxLLIf_Transmit')
	.sect	'.debug_frame'
	.word	36
	.word	.L1299,.L213,.L677-.L213
	.byte	4
	.word	(.L915-.L213)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L677-.L915)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Com_SwitchIpduTxMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L215,.L681-.L215
	.sdecl	'.debug_frame',debug,cluster('Com_SendSignal')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L217,.L687-.L217
	.sdecl	'.debug_frame',debug,cluster('Com_SendSignalGroup')
	.sect	'.debug_frame'
	.word	12
	.word	.L1299,.L219,.L730-.L219
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1300:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L1300,.L151,.L378-.L151
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L1300,.L153,.L373-.L153
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L1300,.L155,.L368-.L155
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L1300,.L157,.L363-.L157
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_10')
	.sect	'.debug_frame'
	.word	24
	.word	.L1300,.L163,.L403-.L163
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L1300,.L167,.L393-.L167
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_9')
	.sect	'.debug_frame'
	.word	24
	.word	.L1300,.L171,.L398-.L171
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L1300,.L173,.L388-.L173
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_1')
	.sect	'.debug_frame'
	.word	24
	.word	.L1300,.L177,.L358-.L177
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L1300,.L189,.L383-.L189
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\component\Com\Implementation\Com.c	 17955  
; ..\component\Com\Implementation\Com.c	 17956  
; ..\component\Com\Implementation\Com.c	 17957  #if (COM_ENABLE_SIGNAL_GROUP_ARRAY_API == STD_ON)
; ..\component\Com\Implementation\Com.c	 17958  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 17959    Com_SendSignalGroupArray
; ..\component\Com\Implementation\Com.c	 17960  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17961  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 17962   *
; ..\component\Com\Implementation\Com.c	 17963   *
; ..\component\Com\Implementation\Com.c	 17964   *
; ..\component\Com\Implementation\Com.c	 17965   *
; ..\component\Com\Implementation\Com.c	 17966  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 17967  FUNC(uint8, COM_CODE) Com_SendSignalGroupArray(Com_SignalGroupIdType SignalGroupId, P2CONST(uint8, AUTOMATIC, COM_APPL_VAR) SignalGroupArrayPtr)
; ..\component\Com\Implementation\Com.c	 17968  {
; ..\component\Com\Implementation\Com.c	 17969    /* ----- Local Variables ---------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17970    uint8 errorId = COM_E_NO_ERROR;       /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17971    uint8 retVal = COM_SERVICE_NOT_AVAILABLE;     /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\Com\Implementation\Com.c	 17972  
; ..\component\Com\Implementation\Com.c	 17973    /* ----- Development Error Checks ------------------------------------- */
; ..\component\Com\Implementation\Com.c	 17974    /* #10 Check if component is initialized */
; ..\component\Com\Implementation\Com.c	 17975    if(!Com_IsInitialized())
; ..\component\Com\Implementation\Com.c	 17976    {
; ..\component\Com\Implementation\Com.c	 17977      errorId = COM_E_UNINIT;
; ..\component\Com\Implementation\Com.c	 17978    }
; ..\component\Com\Implementation\Com.c	 17979  # if (COM_DEV_ERROR_DETECT == STD_ON )  /* COV_COM_VAR_ELISA_STD_ON_TX */
; ..\component\Com\Implementation\Com.c	 17980    /* #20 Check plausibility of input parameters */
; ..\component\Com\Implementation\Com.c	 17981  #  if (COM_TXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17982    else if(SignalGroupId >= Com_GetSizeOfTxSigGrpInfo())
; ..\component\Com\Implementation\Com.c	 17983    {
; ..\component\Com\Implementation\Com.c	 17984      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17985    }
; ..\component\Com\Implementation\Com.c	 17986  #   if(COM_INVALIDHNDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17987    else if(Com_IsInvalidHndOfTxSigGrpInfo(SignalGroupId))
; ..\component\Com\Implementation\Com.c	 17988    {
; ..\component\Com\Implementation\Com.c	 17989      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17990    }
; ..\component\Com\Implementation\Com.c	 17991  #   endif
; ..\component\Com\Implementation\Com.c	 17992  #   if (COM_ARRAYACCESSUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 17993    else if(!Com_IsArrayAccessUsedOfTxSigGrpInfo(SignalGroupId))  /* COV_COM_ONLY_ARRAYBASED_TX_SIGGRP */
; ..\component\Com\Implementation\Com.c	 17994    {
; ..\component\Com\Implementation\Com.c	 17995      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 17996    }
; ..\component\Com\Implementation\Com.c	 17997  #   endif
; ..\component\Com\Implementation\Com.c	 17998  #  endif
; ..\component\Com\Implementation\Com.c	 17999    else if(SignalGroupArrayPtr == NULL_PTR)      /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 18000    {
; ..\component\Com\Implementation\Com.c	 18001      errorId = COM_E_PARAM_POINTER;
; ..\component\Com\Implementation\Com.c	 18002    }
; ..\component\Com\Implementation\Com.c	 18003  # endif
; ..\component\Com\Implementation\Com.c	 18004    else
; ..\component\Com\Implementation\Com.c	 18005    {
; ..\component\Com\Implementation\Com.c	 18006      /* ----- Implementation ----------------------------------------------- */
; ..\component\Com\Implementation\Com.c	 18007  # if(COM_ARRAYACCESSUSEDOFTXSIGGRPINFO == STD_ON)
; ..\component\Com\Implementation\Com.c	 18008      SchM_Enter_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 18009  
; ..\component\Com\Implementation\Com.c	 18010      retVal = Com_SendSignalGroupArray_Processing(SignalGroupId, SignalGroupArrayPtr);   /* SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC */
; ..\component\Com\Implementation\Com.c	 18011  
; ..\component\Com\Implementation\Com.c	 18012      SchM_Exit_Com_COM_EXCLUSIVE_AREA_TX();
; ..\component\Com\Implementation\Com.c	 18013  # else
; ..\component\Com\Implementation\Com.c	 18014      errorId = COM_E_PARAM;
; ..\component\Com\Implementation\Com.c	 18015  # endif
; ..\component\Com\Implementation\Com.c	 18016    }
; ..\component\Com\Implementation\Com.c	 18017  
; ..\component\Com\Implementation\Com.c	 18018    /* ----- Development Error Report --------------------------------------- */
; ..\component\Com\Implementation\Com.c	 18019  # if (COM_DEV_ERROR_REPORT == STD_ON)
; ..\component\Com\Implementation\Com.c	 18020    if(errorId != COM_E_NO_ERROR) /* PRQA S 2991, 2995 */ /* MD_Com_2991, MD_Com_2995 */ /* COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT */
; ..\component\Com\Implementation\Com.c	 18021    {
; ..\component\Com\Implementation\Com.c	 18022      Com_LMgt_CallDetErrorContinue(COMServiceId_SendSignalGroupArray, errorId);
; ..\component\Com\Implementation\Com.c	 18023    }
; ..\component\Com\Implementation\Com.c	 18024  # endif
; ..\component\Com\Implementation\Com.c	 18025  
; ..\component\Com\Implementation\Com.c	 18026    COM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 18027    COM_DUMMY_STATEMENT(SignalGroupId);   /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 18028    COM_DUMMY_STATEMENT(SignalGroupArrayPtr);     /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /* lint -e{438} */
; ..\component\Com\Implementation\Com.c	 18029  
; ..\component\Com\Implementation\Com.c	 18030    return retVal;
; ..\component\Com\Implementation\Com.c	 18031  }       /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\Com\Implementation\Com.c	 18032  #endif
; ..\component\Com\Implementation\Com.c	 18033  
; ..\component\Com\Implementation\Com.c	 18034  
; ..\component\Com\Implementation\Com.c	 18035  
; ..\component\Com\Implementation\Com.c	 18036  #if ((COM_REPCNTOFTXMODETRUE == STD_ON) || (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 18037  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 18038    Com_TxModeHdlr_GetCurRepCnt
; ..\component\Com\Implementation\Com.c	 18039  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 18040  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 18041   *
; ..\component\Com\Implementation\Com.c	 18042   *
; ..\component\Com\Implementation\Com.c	 18043  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 18044  FUNC(Com_RepCntType, COM_CODE) Com_TxModeHdlr_GetCurRepCnt(PduIdType TxPduId)   /* PRQA S 1505 */ /* MD_MSR_Rule8.7 */
; ..\component\Com\Implementation\Com.c	 18045  {
; ..\component\Com\Implementation\Com.c	 18046    /* #10 Return the current repetition count depending on the current active tx mode */
; ..\component\Com\Implementation\Com.c	 18047  # if ((COM_REPCNTOFTXMODETRUE == STD_ON) && (COM_REPCNTOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 18048    Com_RepCntType retVal =
; ..\component\Com\Implementation\Com.c	 18049      Com_IsCurrentTxMode(TxPduId) ? (Com_RepCntType) Com_GetRepCntOfTxModeTrue(Com_GetTxModeTrueIdxOfTxModeInfo(TxPduId)) : (Com_RepCntType)
; ..\component\Com\Implementation\Com.c	 18050      Com_GetRepCntOfTxModeFalse(Com_GetTxModeFalseIdxOfTxModeInfo(TxPduId));
; ..\component\Com\Implementation\Com.c	 18051  # elif (COM_REPCNTOFTXMODETRUE == STD_ON)
; ..\component\Com\Implementation\Com.c	 18052    Com_RepCntType retVal = Com_IsCurrentTxMode(TxPduId) ? (Com_RepCntType) Com_GetRepCntOfTxModeTrue(Com_GetTxModeTrueIdxOfTxModeInfo(TxPduId)) : 0u;
; ..\component\Com\Implementation\Com.c	 18053  # else
; ..\component\Com\Implementation\Com.c	 18054    Com_RepCntType retVal = Com_IsCurrentTxMode(TxPduId) ? 0u : (Com_RepCntType) Com_GetRepCntOfTxModeFalse(Com_GetTxModeFalseIdxOfTxModeInfo(TxPduId));
; ..\component\Com\Implementation\Com.c	 18055  # endif
; ..\component\Com\Implementation\Com.c	 18056    return retVal;
; ..\component\Com\Implementation\Com.c	 18057  }
; ..\component\Com\Implementation\Com.c	 18058  #endif
; ..\component\Com\Implementation\Com.c	 18059  
; ..\component\Com\Implementation\Com.c	 18060  #if ((COM_REPPERIODOFTXMODETRUE == STD_ON) || (COM_REPPERIODOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 18061  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 18062    Com_TxModeHdlr_GetCurrentRepetitionPeriod
; ..\component\Com\Implementation\Com.c	 18063  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 18064  /*! Internal comment removed.
; ..\component\Com\Implementation\Com.c	 18065   *
; ..\component\Com\Implementation\Com.c	 18066   *
; ..\component\Com\Implementation\Com.c	 18067  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 18068  FUNC(Com_RepCycleCntType, COM_CODE) Com_TxModeHdlr_GetCurrentRepetitionPeriod(PduIdType TxPduId)        /* PRQA S 1505 */ /* MD_MSR_Rule8.7 */
; ..\component\Com\Implementation\Com.c	 18069  {
; ..\component\Com\Implementation\Com.c	 18070    /* #10 Return the current repetition period factor depending on the current active tx mode */
; ..\component\Com\Implementation\Com.c	 18071  # if ((COM_REPPERIODOFTXMODETRUE == STD_ON) && (COM_REPPERIODOFTXMODEFALSE == STD_ON))
; ..\component\Com\Implementation\Com.c	 18072    Com_RepCycleCntType retVal =
; ..\component\Com\Implementation\Com.c	 18073      Com_IsCurrentTxMode(TxPduId) ? (Com_RepCycleCntType) Com_GetRepPeriodOfTxModeTrue(Com_GetTxModeTrueIdxOfTxModeInfo(TxPduId)) : (Com_RepCycleCntType)
; ..\component\Com\Implementation\Com.c	 18074      Com_GetRepPeriodOfTxModeFalse(Com_GetTxModeFalseIdxOfTxModeInfo(TxPduId));
; ..\component\Com\Implementation\Com.c	 18075  # elif (COM_REPPERIODOFTXMODETRUE == STD_ON)
; ..\component\Com\Implementation\Com.c	 18076    Com_RepCycleCntType retVal = Com_IsCurrentTxMode(TxPduId) ? (Com_RepCycleCntType) Com_GetRepPeriodOfTxModeTrue(Com_GetTxModeTrueIdxOfTxModeInfo(TxPduId)) : 0u;
; ..\component\Com\Implementation\Com.c	 18077  # else
; ..\component\Com\Implementation\Com.c	 18078    Com_RepCycleCntType retVal = Com_IsCurrentTxMode(TxPduId) ? 0u : (Com_RepCycleCntType) Com_GetRepPeriodOfTxModeFalse(Com_GetTxModeFalseIdxOfTxModeInfo(TxPduId));
; ..\component\Com\Implementation\Com.c	 18079  # endif
; ..\component\Com\Implementation\Com.c	 18080    return retVal;
; ..\component\Com\Implementation\Com.c	 18081  }
; ..\component\Com\Implementation\Com.c	 18082  #endif
; ..\component\Com\Implementation\Com.c	 18083  
; ..\component\Com\Implementation\Com.c	 18084  #define COM_STOP_SEC_CODE
; ..\component\Com\Implementation\Com.c	 18085  #include "MemMap.h"    /* PRQA S 5087 */        /* MD_MSR_MemMap */
; ..\component\Com\Implementation\Com.c	 18086  
; ..\component\Com\Implementation\Com.c	 18087  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 18088     GLOBAL MISRA / PCLINT JUSTIFICATION
; ..\component\Com\Implementation\Com.c	 18089  **********************************************************************************************************************/
; ..\component\Com\Implementation\Com.c	 18090  
; ..\component\Com\Implementation\Com.c	 18091  /* *INDENT-OFF* */
; ..\component\Com\Implementation\Com.c	 18092  /* module specific MISRA deviations:
; ..\component\Com\Implementation\Com.c	 18093     MD_Com_0314_0315: Misra Dir 1.1
; ..\component\Com\Implementation\Com.c	 18094       Reason:     A void pointer is used because it depends on the configuration of which type the pointer is. It is easier to use a void pointer insead of different functions for different pointer types.
; ..\component\Com\Implementation\Com.c	 18095       Risk:       No risk, because the underlying pointer type is known via the configuration.
; ..\component\Com\Implementation\Com.c	 18096       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18097  
; ..\component\Com\Implementation\Com.c	 18098      MD_Com_0316_0317: Misra Rule 11.5
; ..\component\Com\Implementation\Com.c	 18099       Reason:     A pointer is cast to a void pointer, because it depends on the configuration of which type the pointer is. It is easier to use a void pointer insead of different functions for different pointer types.
; ..\component\Com\Implementation\Com.c	 18100       Risk:       No risk, because the underlying pointer type is known via the configuration.
; ..\component\Com\Implementation\Com.c	 18101       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18102  
; ..\component\Com\Implementation\Com.c	 18103     MD_Com_2842: Misra Rule 18.1, Misra Rule 21.18, Misra Dir 4.1
; ..\component\Com\Implementation\Com.c	 18104       Reason:     The ComStackLib validates that the Index doesn't exceed the table.
; ..\component\Com\Implementation\Com.c	 18105       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18106       Prevention: Qualified use-case CSL01 of ComStackLib.
; ..\component\Com\Implementation\Com.c	 18107  
; ..\component\Com\Implementation\Com.c	 18108     MD_Com_2982: Misra Rule 2.2
; ..\component\Com\Implementation\Com.c	 18109       Reason:     It depends on the configuration if the value is modified.
; ..\component\Com\Implementation\Com.c	 18110       Risk:       No risk, because only warning that assignment is redundant.
; ..\component\Com\Implementation\Com.c	 18111       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18112  
; ..\component\Com\Implementation\Com.c	 18113     MD_Com_2982_Loop: Misra Rule 2.2
; ..\component\Com\Implementation\Com.c	 18114       Reason:     The number of loop iterations depends on the configuration. When there is only one iteration the value is optimized and isn't used before it is being modified.
; ..\component\Com\Implementation\Com.c	 18115       Risk:       No risk, because only warning that assignment is redundant.
; ..\component\Com\Implementation\Com.c	 18116       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18117  
; ..\component\Com\Implementation\Com.c	 18118     MD_Com_2983: Misra Rule 2.2
; ..\component\Com\Implementation\Com.c	 18119       Reason:     The number of loop iterations depends on the configuration. When there is only one iteration the value is optimized and isn't used before it is being modified.
; ..\component\Com\Implementation\Com.c	 18120       Risk:       No risk, because only warning that assignment is redundant.
; ..\component\Com\Implementation\Com.c	 18121       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18122  
; ..\component\Com\Implementation\Com.c	 18123     MD_Com_2985_2986: Misra Rule 2.2
; ..\component\Com\Implementation\Com.c	 18124       Reason:     The value of the operands depends on the configuration.
; ..\component\Com\Implementation\Com.c	 18125       Risk:       No risk, because only warning that the operation is redundant.
; ..\component\Com\Implementation\Com.c	 18126       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18127  
; ..\component\Com\Implementation\Com.c	 18128     MD_Com_2991: Misra Rule 14.3
; ..\component\Com\Implementation\Com.c	 18129       Reason:     The value of the if-controlling expression depends on the configuration.
; ..\component\Com\Implementation\Com.c	 18130       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18131       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18132  
; ..\component\Com\Implementation\Com.c	 18133     MD_Com_2992: Misra Rule 14.3
; ..\component\Com\Implementation\Com.c	 18134       Reason:     The value of the if-controlling expression depends on the configuration.
; ..\component\Com\Implementation\Com.c	 18135       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18136       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18137  
; ..\component\Com\Implementation\Com.c	 18138     MD_Com_2995: Misra Rule 2.2
; ..\component\Com\Implementation\Com.c	 18139       Reason:     The value of the logical operation depends on the configuration.
; ..\component\Com\Implementation\Com.c	 18140       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18141       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18142  
; ..\component\Com\Implementation\Com.c	 18143    MD_Com_2996: Misra Rule 2.2
; ..\component\Com\Implementation\Com.c	 18144       Reason:     The value of the logical operation depends on the configuration.
; ..\component\Com\Implementation\Com.c	 18145       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18146       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18147  
; ..\component\Com\Implementation\Com.c	 18148     MD_Com_3205: Misra Rule 2.3
; ..\component\Com\Implementation\Com.c	 18149       Reason:     It depends on the configuration if the identifier is used or not.
; ..\component\Com\Implementation\Com.c	 18150       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18151       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18152  
; ..\component\Com\Implementation\Com.c	 18153     MD_Com_3206: Misra Rule 2.7
; ..\component\Com\Implementation\Com.c	 18154       Reason:     It depends on the configuration if the parameter is used or not.
; ..\component\Com\Implementation\Com.c	 18155       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18156       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18157  
; ..\component\Com\Implementation\Com.c	 18158     MD_Com_3213: Misra Rule 2.4
; ..\component\Com\Implementation\Com.c	 18159       Reason:     It depends on the configuration if the union tag is used or not.
; ..\component\Com\Implementation\Com.c	 18160       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18161       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18162  
; ..\component\Com\Implementation\Com.c	 18163     MD_Com_3315: Misra Rule 16.6
; ..\component\Com\Implementation\Com.c	 18164       Reason:     It depends on the configuration, if only one or more cases of the switch statement are executed.
; ..\component\Com\Implementation\Com.c	 18165       Risk:       No risk, because only warning that the switch statement is redundant.
; ..\component\Com\Implementation\Com.c	 18166       Prevention: No prevention necessary.
; ..\component\Com\Implementation\Com.c	 18167  
; ..\component\Com\Implementation\Com.c	 18168     MD_Com_4391:  Misra Rule 10.8
; ..\component\Com\Implementation\Com.c	 18169       Reason:     The composite expression has to be cast as a whole because of the shift or bitwise operation. Shift and bitwise operations should only be performed with esentially unsigned types. The cast is necessary, because the result of the shift or bitwise operation is signed.
; ..\component\Com\Implementation\Com.c	 18170       Risk:       No risk
; ..\component\Com\Implementation\Com.c	 18171       Prevention: No prevention necessary
; ..\component\Com\Implementation\Com.c	 18172  
; ..\component\Com\Implementation\Com.c	 18173     MD_Com_4394:  Misra Rule 10.8
; ..\component\Com\Implementation\Com.c	 18174       Reason:     The composite expression has to be cast as a whole because of the shift or bitwise operation. Shift and bitwise operations should only be performed with esentially unsigned types. The cast is necessary, because the result of the shift or bitwise operation is signed.
; ..\component\Com\Implementation\Com.c	 18175       Risk:       No risk
; ..\component\Com\Implementation\Com.c	 18176       Prevention: No prevention necessary
; ..\component\Com\Implementation\Com.c	 18177  
; ..\component\Com\Implementation\Com.c	 18178     MD_Com_2003:  Misra Rule 16.3
; ..\component\Com\Implementation\Com.c	 18179       Reason:     A break-statement is not required, the switch case needs to perform the remaining operations of the succeeding case.
; ..\component\Com\Implementation\Com.c	 18180       Risk:       No risk
; ..\component\Com\Implementation\Com.c	 18181       Prevention: No prevention necessary
; ..\component\Com\Implementation\Com.c	 18182  
; ..\component\Com\Implementation\Com.c	 18183     MD_Com_2812:  Misra Dir 4.1
; ..\component\Com\Implementation\Com.c	 18184       Reason:     False-Positive: Dereference of NULL pointer.
; ..\component\Com\Implementation\Com.c	 18185       Risk:       No risk, pointer is checked against NULL pointer in preceding if-case.
; ..\component\Com\Implementation\Com.c	 18186       Prevention: No prevention necessary
; ..\component\Com\Implementation\Com.c	 18187  
; ..\component\Com\Implementation\Com.c	 18188    MD_Com_3677:   Misra Rule 8.13
; ..\component\Com\Implementation\Com.c	 18189       Reason:     It depends on the configuration if the parameter is modified or not.
; ..\component\Com\Implementation\Com.c	 18190       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18191       Prevention: No prevention necessary
; ..\component\Com\Implementation\Com.c	 18192  
; ..\component\Com\Implementation\Com.c	 18193    MD_Com_oldValuePtrNoNULLPTR: Misra Dir 4.1
; ..\component\Com\Implementation\Com.c	 18194       Reason:     The oldValuePtr can never be a NULL_PTR because of the Control Flow. The oldValuePtr is only used if the Filter Algorithm is MASED_NEW_DIFFERS_MASKED_OLD and in this case a FilterInitValue and thus the oldValuePtr is always present.
; ..\component\Com\Implementation\Com.c	 18195       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18196       Prevention: No prevention necessary
; ..\component\Com\Implementation\Com.c	 18197  
; ..\component\Com\Implementation\Com.c	 18198    MD_Com_2822_2962: Misra Dir 4.1 and Misra Rule 9.1
; ..\component\Com\Implementation\Com.c	 18199       Reason:     In case of Deferred Processing, the SduDataPtr can never be a NULL_PTR because of the Control Flow. If the RxProcessDeferredPDU function is called a DeferredPduBuffer is always present and a PDU is always a TP_PDU or a NORMAL_PDU and thus the SduDataPtr is initialized. If it is Immediate Processing the SduDataPtr is always initialized with a valid value, or the SduDataPtr is checked.
; ..\component\Com\Implementation\Com.c	 18200       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18201       Prevention: No prevention necessary
; ..\component\Com\Implementation\Com.c	 18202  
; ..\component\Com\Implementation\Com.c	 18203    MD_Com_ProcessRxFctPtrCache: Misra Rule 18.1, Misra Rule 21.18, Misra Dir 4.1
; ..\component\Com\Implementation\Com.c	 18204       Reason:     All calls of the Com_ProcessRxFctPtrCacheFunction are directly or indirectly wraped by preprocessor switches checking if a FctPtrCache is available and the setting of the fctPtrCacheStrctPtr is wrapped by the same preprocessor switches, so the fctPtrCacheStrctPtr is always valid, when accessed.
; ..\component\Com\Implementation\Com.c	 18205       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18206       Prevention: No prevention necessary
; ..\component\Com\Implementation\Com.c	 18207  
; ..\component\Com\Implementation\Com.c	 18208    MD_Com_2987: Misra Rule 2.2
; ..\component\Com\Implementation\Com.c	 18209       Reason:     False-Positive: Function has a side effekt. QAC has a problem with the access over the CfgPtr in Postbuild-Loadable
; ..\component\Com\Implementation\Com.c	 18210       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18211       Prevention: No prevention necessary
; ..\component\Com\Implementation\Com.c	 18212  
; ..\component\Com\Implementation\Com.c	 18213    MD_Com_2793: Misra Rule 10.1, Misra Rule 12.2
; ..\component\Com\Implementation\Com.c	 18214       Reason:     nBitsToWrite is > 0 and is cast to uint8 so it isn't too large.
; ..\component\Com\Implementation\Com.c	 18215       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18216       Prevention: No prevention necessary
; ..\component\Com\Implementation\Com.c	 18217  
; ..\component\Com\Implementation\Com.c	 18218    MD_Com_2842_SignalApplDestPtr: Misra Rule 18.1, Misra Rule 21.18, Misra Dir 4.1
; ..\component\Com\Implementation\Com.c	 18219       Reason:     SignalApplDestPtr is always initialized.
; ..\component\Com\Implementation\Com.c	 18220       Risk:       No risk.
; ..\component\Com\Implementation\Com.c	 18221       Prevention: No prevention necessary
; ..\component\Com\Implementation\Com.c	 18222  */
; ..\component\Com\Implementation\Com.c	 18223  /* *INDENT-ON* */
; ..\component\Com\Implementation\Com.c	 18224  /* *INDENT-OFF* */
; ..\component\Com\Implementation\Com.c	 18225  /* SBSW_JUSTIFICATION_BEGIN
; ..\component\Com\Implementation\Com.c	 18226    \ID SBSW_COM_CSL01
; ..\component\Com\Implementation\Com.c	 18227      \DESCRIPTION    Index Access is using ComStackLib
; ..\component\Com\Implementation\Com.c	 18228      \COUNTERMEASURE \N Qualified use-case CSL01 of ComStackLib.
; ..\component\Com\Implementation\Com.c	 18229  
; ..\component\Com\Implementation\Com.c	 18230    \ID SBSW_COM_CSL01_STACKPTR
; ..\component\Com\Implementation\Com.c	 18231      \DESCRIPTION    Index Access is using ComStackLib
; ..\component\Com\Implementation\Com.c	 18232      \COUNTERMEASURE \N Qualified use-case CSL01 of ComStackLib and a the passed pointer belongs to a stack variable and is therefore always valid.
; ..\component\Com\Implementation\Com.c	 18233  
; ..\component\Com\Implementation\Com.c	 18234    \ID SBSW_COM_CSL02
; ..\component\Com\Implementation\Com.c	 18235      \DESCRIPTION    Access of Table1, via index of Table2.
; ..\component\Com\Implementation\Com.c	 18236                      Table1 and Table2 have a size relation.
; ..\component\Com\Implementation\Com.c	 18237      \COUNTERMEASURE \N Qualified use-case CSL02 of ComStackLib
; ..\component\Com\Implementation\Com.c	 18238  
; ..\component\Com\Implementation\Com.c	 18239    \ID SBSW_COM_CSL02_CSL03
; ..\component\Com\Implementation\Com.c	 18240      \DESCRIPTION    Access of Table1, via indirection over Table2 and index of Table3.
; ..\component\Com\Implementation\Com.c	 18241                      Table1 and Table3 have a size relation.
; ..\component\Com\Implementation\Com.c	 18242      \COUNTERMEASURE \N Qualified use-case CSL02 and CSL03 of ComStackLib
; ..\component\Com\Implementation\Com.c	 18243  
; ..\component\Com\Implementation\Com.c	 18244    \ID SBSW_COM_CSL03
; ..\component\Com\Implementation\Com.c	 18245      \DESCRIPTION    Access to Table1 via indirection over Table2.
; ..\component\Com\Implementation\Com.c	 18246      \COUNTERMEASURE \N Qualified use-case CSL03 of ComStackLib
; ..\component\Com\Implementation\Com.c	 18247  
; ..\component\Com\Implementation\Com.c	 18248    \ID SBSW_COM_TXBUFFER_CSL03
; ..\component\Com\Implementation\Com.c	 18249      \DESCRIPTION    Write access to TxBuffer over pointer.
; ..\component\Com\Implementation\Com.c	 18250      \COUNTERMEASURE \N The relation between TxSigInfo and TxBuffer is modeled through sorted by use-case CSL03 of ComStackLib indirection, therefore
; ..\component\Com\Implementation\Com.c	 18251                         out of bounds access is not possible. The array access index runs in between the indirection size.
; ..\component\Com\Implementation\Com.c	 18252                         For dynamic signals the access index is limited by the dynamic length which itself is checked in Com_SendDynSignal
; ..\component\Com\Implementation\Com.c	 18253                         against the actual indirection size.
; ..\component\Com\Implementation\Com.c	 18254  
; ..\component\Com\Implementation\Com.c	 18255     \ID SBSW_COM_VSTDLIB_SAFE
; ..\component\Com\Implementation\Com.c	 18256      \DESCRIPTION    Pointer is passed as function argument.
; ..\component\Com\Implementation\Com.c	 18257      \COUNTERMEASURE \N The VStdLib_MemCpy_s guarantees that the destination pointer is not overwritten.
; ..\component\Com\Implementation\Com.c	 18258  
; ..\component\Com\Implementation\Com.c	 18259    \ID SBSW_COM_FCT_PTR_CALL_CSL03
; ..\component\Com\Implementation\Com.c	 18260      \DESCRIPTION    Function pointer call from Table1 via indirection over Table2.
; ..\component\Com\Implementation\Com.c	 18261      \COUNTERMEASURE \N Qualified use-case CSL03 of ComStackLib
; ..\component\Com\Implementation\Com.c	 18262  
; ..\component\Com\Implementation\Com.c	 18263    \ID SBSW_COM_MEM_CPY
; ..\component\Com\Implementation\Com.c	 18264      \DESCRIPTION    Function call to copy data to RAM
; ..\component\Com\Implementation\Com.c	 18265      \COUNTERMEASURE \R Buffer boundary is checked before copy operation.
; ..\component\Com\Implementation\Com.c	 18266  
; ..\component\Com\Implementation\Com.c	 18267    \ID SBSW_COM_MEM_CPY_2RAM
; ..\component\Com\Implementation\Com.c	 18268      \DESCRIPTION    Function call to copy data to RAM.
; ..\component\Com\Implementation\Com.c	 18269      \COUNTERMEASURE \N The address of the destination and the amount of bytes to be copied are
; ..\component\Com\Implementation\Com.c	 18270                         retrieved through use-case CSL03 of ComStackLib indirection access macros.
; ..\component\Com\Implementation\Com.c	 18271  
; ..\component\Com\Implementation\Com.c	 18272    \ID SBSW_COM_FCTCALL_WITH_P2CONST
; ..\component\Com\Implementation\Com.c	 18273      \DESCRIPTION    Pointer is passed as function argument to read memory location.
; ..\component\Com\Implementation\Com.c	 18274      \COUNTERMEASURE \N Called function expects a P2CONST pointer, therefore write-access is not possible.
; ..\component\Com\Implementation\Com.c	 18275  
; ..\component\Com\Implementation\Com.c	 18276    \ID SBSW_COM_FCTCALL_STACKPTR
; ..\component\Com\Implementation\Com.c	 18277      \DESCRIPTION    Pointer is passed as function argument.
; ..\component\Com\Implementation\Com.c	 18278      \COUNTERMEASURE \N The passed pointer belongs to a stack variable and is therefore always valid.
; ..\component\Com\Implementation\Com.c	 18279  
; ..\component\Com\Implementation\Com.c	 18280    \ID SBSW_COM_WRITEACCESS_STACKPTR
; ..\component\Com\Implementation\Com.c	 18281      \DESCRIPTION    Write access on pointer after appl-type specific cast.
; ..\component\Com\Implementation\Com.c	 18282      \COUNTERMEASURE \N Caller ensures by checking the appl-type at runtime that the cast is valid.
; ..\component\Com\Implementation\Com.c	 18283                         The passed pointer belongs to a stack variable and is therefore always valid.
; ..\component\Com\Implementation\Com.c	 18284  
; ..\component\Com\Implementation\Com.c	 18285     \ID SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC
; ..\component\Com\Implementation\Com.c	 18286      \DESCRIPTION A pointer is written or passed to a function. The pointer can possibly be used to write to the corresponding memory location.
; ..\component\Com\Implementation\Com.c	 18287      \COUNTERMEASURE \N The call sequence ensures that the pointer is valid.
; ..\component\Com\Implementation\Com.c	 18288  
; ..\component\Com\Implementation\Com.c	 18289     \ID SBSW_COM_VALID_PTR_ENSURED_BY_CALLING_FUNC_AND_STACKPTR
; ..\component\Com\Implementation\Com.c	 18290      \DESCRIPTION A pointer is written or passed to a function. The pointer can possibly be used to write to the corresponding memory location.
; ..\component\Com\Implementation\Com.c	 18291      \COUNTERMEASURE \N The calling function ensures that the pointer is valid. The second pointer belongs to a stack variable and is derived from the first.
; ..\component\Com\Implementation\Com.c	 18292  
; ..\component\Com\Implementation\Com.c	 18293    \ID SBSW_COM_WRITEACCESS_STACKPTR_01
; ..\component\Com\Implementation\Com.c	 18294      \DESCRIPTION    Write access on pointer.
; ..\component\Com\Implementation\Com.c	 18295      \COUNTERMEASURE \N Pointer points to stack variable and is therefore always valid.
; ..\component\Com\Implementation\Com.c	 18296  
; ..\component\Com\Implementation\Com.c	 18297    \ID SBSW_COM_WRITEACCESS_STACKPTR_WITH_LENGTH
; ..\component\Com\Implementation\Com.c	 18298      \DESCRIPTION    Write access on pointer.
; ..\component\Com\Implementation\Com.c	 18299      \COUNTERMEASURE \R The passed length parameter ensures that no memory is overwritten.
; ..\component\Com\Implementation\Com.c	 18300  
; ..\component\Com\Implementation\Com.c	 18301    \ID SBSW_COM_WRITEACCESS_LENGTH
; ..\component\Com\Implementation\Com.c	 18302      \DESCRIPTION    Write access on pointer.
; ..\component\Com\Implementation\Com.c	 18303      \COUNTERMEASURE \N Boundaries of pointer are ensured by provided length. Caller ensures validity of length and pointer.
; ..\component\Com\Implementation\Com.c	 18304  
; ..\component\Com\Implementation\Com.c	 18305    \ID SBSW_COM_WRITEACCESS_STACKPTR_CONFIG_LENGTH
; ..\component\Com\Implementation\Com.c	 18306      \DESCRIPTION    Write access on pointer.
; ..\component\Com\Implementation\Com.c	 18307      \COUNTERMEASURE \R The bytes to be copied are checked against the buffer size to ensures that no memory is overwritten.
; ..\component\Com\Implementation\Com.c	 18308  
; ..\component\Com\Implementation\Com.c	 18309    \ID SBSW_COM_PTR_API
; ..\component\Com\Implementation\Com.c	 18310      \DESCRIPTION Function call with pointer as argument.
; ..\component\Com\Implementation\Com.c	 18311      \COUNTERMEASURE \N The caller of the COM-API must ensure the validity of the passed pointer.
; ..\component\Com\Implementation\Com.c	 18312                         The DET of the COM-API verifies that the pointer is not equal to NULL_PTR.
; ..\component\Com\Implementation\Com.c	 18313  
; ..\component\Com\Implementation\Com.c	 18314    \ID SBSW_COM_PTR_API_VALID_PTR
; ..\component\Com\Implementation\Com.c	 18315      \DESCRIPTION Function call with pointer as argument.
; ..\component\Com\Implementation\Com.c	 18316      \COUNTERMEASURE \N The caller of the COM-API must ensure the validity of the passed pointer.
; ..\component\Com\Implementation\Com.c	 18317  
; ..\component\Com\Implementation\Com.c	 18318    \ID SBSW_COM_VALID_PTR_BY_COMSTACK_01
; ..\component\Com\Implementation\Com.c	 18319      \DESCRIPTION    Function call with pointer as argument.
; ..\component\Com\Implementation\Com.c	 18320      \COUNTERMEASURE \N Caller ensures by use-case CSL01 of ComStackLib access macros the validity of the passed pointer.
; ..\component\Com\Implementation\Com.c	 18321  
; ..\component\Com\Implementation\Com.c	 18322    \ID SBSW_COM_VALID_PTR_BY_COMSTACK_02
; ..\component\Com\Implementation\Com.c	 18323      \DESCRIPTION    Write access to RAM pointer in for loop.
; ..\component\Com\Implementation\Com.c	 18324      \COUNTERMEASURE \N Address of pointer is retrieved by use-case CSL02 of ComStackLib. The start and stop index of ComStackLib indirection ensure validity of pointer boundaries.
; ..\component\Com\Implementation\Com.c	 18325  
; ..\component\Com\Implementation\Com.c	 18326    \ID SBSW_COM_IDXPARAM_INTERNALFCT_CSL02
; ..\component\Com\Implementation\Com.c	 18327      \DESCRIPTION    The index is passed to an internal function as parameter and is used within the function to write to a memory location.
; ..\component\Com\Implementation\Com.c	 18328      \COUNTERMEASURE \N The index is read by the calling function using the use-case CSL02 of ComStackLib macros. The ComStackLib ensures the validity of the index through a size relation.
; ..\component\Com\Implementation\Com.c	 18329  
; ..\component\Com\Implementation\Com.c	 18330    \ID SBSW_COM_IDXPARAM_INTERNALFCT_DET_CSL02
; ..\component\Com\Implementation\Com.c	 18331      \DESCRIPTION    The index is passed to an internal function as parameter and is used within the function to write to a memory location.
; ..\component\Com\Implementation\Com.c	 18332      \COUNTERMEASURE \N The top most COM calling function ensures that the passed index is not out of bounds.
; ..\component\Com\Implementation\Com.c	 18333                         The use-case CSL02 of ComStackLib ensures the validity of the index through a size relation.
; ..\component\Com\Implementation\Com.c	 18334  
; ..\component\Com\Implementation\Com.c	 18335    \ID SBSW_COM_ARRAY_WRITEACCESS
; ..\component\Com\Implementation\Com.c	 18336      \DESCRIPTION    The memory location is used for an array write access.
; ..\component\Com\Implementation\Com.c	 18337      \COUNTERMEASURE \R Index is validated at runtime.
; ..\component\Com\Implementation\Com.c	 18338  
; ..\component\Com\Implementation\Com.c	 18339    \ID SBSW_COM_GWCACHING
; ..\component\Com\Implementation\Com.c	 18340      \DESCRIPTION    Array write access on GwEventCache ram array.
; ..\component\Com\Implementation\Com.c	 18341      \COUNTERMEASURE \R Index is checked against size of cache at runtime.
; ..\component\Com\Implementation\Com.c	 18342  
; ..\component\Com\Implementation\Com.c	 18343    \ID SBSW_COM_COMST_PTR
; ..\component\Com\Implementation\Com.c	 18344      \DESCRIPTION   Pointer is passed to a function.
; ..\component\Com\Implementation\Com.c	 18345      \COUNTERMEASURE \N The pointer is a pointer to a constant value and will not be written to.
; ..\component\Com\Implementation\Com.c	 18346  
; ..\component\Com\Implementation\Com.c	 18347    \ID SBSW_COM_FCTPTR_CACHE_PTR
; ..\component\Com\Implementation\Com.c	 18348      \DESCRIPTION Function call with pointer as argument. Cache struct pointer is passed to a function.
; ..\component\Com\Implementation\Com.c	 18349      \COUNTERMEASURE \N The caller of the API must ensure the validity of the passed pointer. Pointer always points to a stack struct.
; ..\component\Com\Implementation\Com.c	 18350  
; ..\component\Com\Implementation\Com.c	 18351    \ID SBSW_COM_FCTPTR_CACHE_PTR_1
; ..\component\Com\Implementation\Com.c	 18352      \DESCRIPTION Function call with pointer as argument. Cache struct pointer is passed to a function.
; ..\component\Com\Implementation\Com.c	 18353      \COUNTERMEASURE \N Pointer always points to a stack struct, which itself contains pointer which point to either stack or heap arrays.
; ..\component\Com\Implementation\Com.c	 18354                       Pointed arrays should always accessed by using the pointer access parameters (size and index) contained in the provided struct, which ensures
; ..\component\Com\Implementation\Com.c	 18355                       consistency of memory. Access of array is always done in same task or interrupt context.
; ..\component\Com\Implementation\Com.c	 18356  
; ..\component\Com\Implementation\Com.c	 18357    \ID SBSW_COM_FCTPTR_CACHE_PTR_2
; ..\component\Com\Implementation\Com.c	 18358      \DESCRIPTION Pointer write access. Modification of cache index.
; ..\component\Com\Implementation\Com.c	 18359      \COUNTERMEASURE \N The caller of the API must ensure the validity of the passed pointer. Pointer always points to a stack information struct.
; ..\component\Com\Implementation\Com.c	 18360  
; ..\component\Com\Implementation\Com.c	 18361    \ID SBSW_COM_FCTPTR_CACHE_PTR_3
; ..\component\Com\Implementation\Com.c	 18362      \DESCRIPTION Array write access on function pointer cache (stack or heap).
; ..\component\Com\Implementation\Com.c	 18363      \COUNTERMEASURE \R Index is checked against cache size at runtime.
; ..\component\Com\Implementation\Com.c	 18364  
; ..\component\Com\Implementation\Com.c	 18365    \ID SBSW_COM_GW_DESCRIPTION_COPYBUFFER
; ..\component\Com\Implementation\Com.c	 18366      \DESCRIPTION Function call with const pointer and var pointer.
; ..\component\Com\Implementation\Com.c	 18367      \COUNTERMEASURE \N Pointer of source buffer is P2CONST, therefore only a read access is possible. Destination pointer is retrieved to use-case CSL03 of ComStackLib Indirection.
; ..\component\Com\Implementation\Com.c	 18368  
; ..\component\Com\Implementation\Com.c	 18369    \ID SBSW_COM_GWDESCRIPTION_RTCHECK
; ..\component\Com\Implementation\Com.c	 18370      \DESCRIPTION Array write access on destination buffer.
; ..\component\Com\Implementation\Com.c	 18371      \COUNTERMEASURE \R Index is checked against destinationBufferSize at runtime.
; ..\component\Com\Implementation\Com.c	 18372  
; ..\component\Com\Implementation\Com.c	 18373    \ID SBSW_COM_CSL_VAR_ACCESS
; ..\component\Com\Implementation\Com.c	 18374      \DESCRIPTION A ComStackLib generated variable is accessed.
; ..\component\Com\Implementation\Com.c	 18375      \COUNTERMEASURE \N The variable is written using a generated macro of the CSL. It immediately dereferences the variables address without pointer arithmetic.
; ..\component\Com\Implementation\Com.c	 18376  
; ..\component\Com\Implementation\Com.c	 18377    \ID SBSW_COM_FCTCALL_WITH_P2CONST_AND_FCTPTR_CACHE_PTR_1
; ..\component\Com\Implementation\Com.c	 18378      \DESCRIPTION Function call with pointer as argument. Cache struct pointer is passed to a function. (see SBSW_COM_FCTPTR_CACHE_PTR_1)
; ..\component\Com\Implementation\Com.c	 18379                   Pointer is passed as function argument to read memory location. (see SBSW_COM_FCTCALL_WITH_P2CONST)
; ..\component\Com\Implementation\Com.c	 18380      \COUNTERMEASURE \N Pointer always points to a stack struct, which itself contains pointer which point to either stack or heap arrays.
; ..\component\Com\Implementation\Com.c	 18381                       Pointed arrays should always accessed by using the pointer access parameters (size and index) contained in the provided struct, which ensures
; ..\component\Com\Implementation\Com.c	 18382                       consistency of memory. Access of array is always done in same task or interrupt context. (see SBSW_COM_FCTPTR_CACHE_PTR_1)
; ..\component\Com\Implementation\Com.c	 18383                       Called function expects a P2CONST pointer, therefore write-access is not possible. (see SBSW_COM_FCTCALL_WITH_P2CONST)
; ..\component\Com\Implementation\Com.c	 18384  
; ..\component\Com\Implementation\Com.c	 18385  SBSW_JUSTIFICATION_END */
; ..\component\Com\Implementation\Com.c	 18386  /* *INDENT-ON* */
; ..\component\Com\Implementation\Com.c	 18387  /* *INDENT-OFF* */
; ..\component\Com\Implementation\Com.c	 18388  /* COV_JUSTIFICATION_BEGIN
; ..\component\Com\Implementation\Com.c	 18389  
; ..\component\Com\Implementation\Com.c	 18390    \ID COV_COM_FEATURE_ALWAYS_TRUE_TX
; ..\component\Com\Implementation\Com.c	 18391      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18392      \REASON Depending on the configuration the feature check can always be true. In this case the compiler removes the check.
; ..\component\Com\Implementation\Com.c	 18393  
; ..\component\Com\Implementation\Com.c	 18394     \ID COV_COM_FEATURE_RX_TOUT_INFO_USED_XX
; ..\component\Com\Implementation\Com.c	 18395      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18396      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18397      \REASON Depending on the configuration the feature check can always be false or always true. The function are ApplType specific the preprocessor switch is ApplType independent.
; ..\component\Com\Implementation\Com.c	 18398  
; ..\component\Com\Implementation\Com.c	 18399     \ID COV_COM_FEATURE_RX_TOUT_WITH_UB
; ..\component\Com\Implementation\Com.c	 18400      \ACCEPT XF tf xf
; ..\component\Com\Implementation\Com.c	 18401      \REASON Depending on the configuration the feature check can always be false or always true. The Rx Timeout and the Rx UpdateBit are two independent features and must not be configured combined.
; ..\component\Com\Implementation\Com.c	 18402  
; ..\component\Com\Implementation\Com.c	 18403     \ID COV_COM_SILENT_TX
; ..\component\Com\Implementation\Com.c	 18404      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18405      \REASON This checks ensures that no incorrect memory is overwritten. This should never happen in normal configurations.
; ..\component\Com\Implementation\Com.c	 18406  
; ..\component\Com\Implementation\Com.c	 18407     \ID COV_COM_IPDU_GROUP_ASR3_XF
; ..\component\Com\Implementation\Com.c	 18408      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18409      \REASON Statement can only evaluate to true for Rx I-PDUs where referred I-PDU Group has a I-PDU sub-Group.
; ..\component\Com\Implementation\Com.c	 18410  
; ..\component\Com\Implementation\Com.c	 18411      \ID COV_COM_IPDU_GROUP_ASR3_TX
; ..\component\Com\Implementation\Com.c	 18412      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18413      \REASON Statement can only evaluate to false for Rx I-PDUs where referred I-PDU Group has a I-PDU sub-Group.
; ..\component\Com\Implementation\Com.c	 18414  
; ..\component\Com\Implementation\Com.c	 18415      \ID COV_COM_IPDU_GROUP_DM_ASR3_TX
; ..\component\Com\Implementation\Com.c	 18416      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18417      \REASON Runtime check should never be false.
; ..\component\Com\Implementation\Com.c	 18418  
; ..\component\Com\Implementation\Com.c	 18419      \ID COV_COM_MASKED_NEW_DIFFERS_MASKED_OLD_TX
; ..\component\Com\Implementation\Com.c	 18420      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18421      \REASON Condition may never be false if this filter is used on Tx side only.
; ..\component\Com\Implementation\Com.c	 18422  
; ..\component\Com\Implementation\Com.c	 18423    \ID COV_COM_THRESHOLD_TX
; ..\component\Com\Implementation\Com.c	 18424      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18425      \REASON May always be true if number of iterated elements is less than or equal the configured threshold.
; ..\component\Com\Implementation\Com.c	 18426  
; ..\component\Com\Implementation\Com.c	 18427     \ID COV_COM_RXPROCESSING_TX
; ..\component\Com\Implementation\Com.c	 18428      \ACCEPT TF tf tx
; ..\component\Com\Implementation\Com.c	 18429      \ACCEPT TX tx tx
; ..\component\Com\Implementation\Com.c	 18430      \REASON Second condition never evaluates to false when first condition is true. Second condition only evaluates to false if only zero bit signals/groupSignals are present.
; ..\component\Com\Implementation\Com.c	 18431  
; ..\component\Com\Implementation\Com.c	 18432    \ID COV_COM_RXPROCESSING
; ..\component\Com\Implementation\Com.c	 18433      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18434      \REASON May always be true if only groupSignals are present.
; ..\component\Com\Implementation\Com.c	 18435  
; ..\component\Com\Implementation\Com.c	 18436    \ID COV_COM_RXPROCESSING_SHADOWSIGNAL
; ..\component\Com\Implementation\Com.c	 18437      \ACCEPT TF tf tf
; ..\component\Com\Implementation\Com.c	 18438      \ACCEPT TX tx tx
; ..\component\Com\Implementation\Com.c	 18439      \ACCEPT TF tx tf
; ..\component\Com\Implementation\Com.c	 18440      \ACCEPT TF tf tx
; ..\component\Com\Implementation\Com.c	 18441      \REASON The condition targeting the shadow buffer can only evaluate to false for zero bit group signals or signal groups with array based access. An initial value can only be absent for zero bit group signals and dynamic lenght signals.
; ..\component\Com\Implementation\Com.c	 18442  
; ..\component\Com\Implementation\Com.c	 18443     \ID COV_COM_PERFORMINVALIDACTION_X
; ..\component\Com\Implementation\Com.c	 18444      \ACCEPT X
; ..\component\Com\Implementation\Com.c	 18445      \REASON May not be called if only SignalGroups with invalid action are configured.
; ..\component\Com\Implementation\Com.c	 18446  
; ..\component\Com\Implementation\Com.c	 18447     \ID COV_COM_INVALIDATION_TX
; ..\component\Com\Implementation\Com.c	 18448      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18449      \REASON May not be called if only groupSignals with invalid values are configured.
; ..\component\Com\Implementation\Com.c	 18450  
; ..\component\Com\Implementation\Com.c	 18451     \ID COV_COM_PERFORMINVALIDACTION
; ..\component\Com\Implementation\Com.c	 18452      \ACCEPT TF tf tx
; ..\component\Com\Implementation\Com.c	 18453      \ACCEPT TX tx tx
; ..\component\Com\Implementation\Com.c	 18454      \ACCEPT XX
; ..\component\Com\Implementation\Com.c	 18455      \REASON Second condition never evaluates to false as this condition is already checked in the sequence flow. TX_tx_tx occurs if only signals with invalid action are present. May never be called if the enclosing condition evaluates to false.
; ..\component\Com\Implementation\Com.c	 18456  
; ..\component\Com\Implementation\Com.c	 18457     \ID COV_COM_PERFORMINVALIDACTION_ARRAYBASED
; ..\component\Com\Implementation\Com.c	 18458      \ACCEPT TF tf tx
; ..\component\Com\Implementation\Com.c	 18459      \ACCEPT TX tx tx
; ..\component\Com\Implementation\Com.c	 18460      \REASON Second condition never evaluates to false as this condition is already checked in the sequence flow. TX_tx_tx occurs if only array based signals with invalid action are present.
; ..\component\Com\Implementation\Com.c	 18461  
; ..\component\Com\Implementation\Com.c	 18462     \ID COV_COM_PERFORMINVALIDACTION_GROUPSIGNAL
; ..\component\Com\Implementation\Com.c	 18463      \ACCEPT TF tf tx
; ..\component\Com\Implementation\Com.c	 18464      \ACCEPT TX tx tx
; ..\component\Com\Implementation\Com.c	 18465      \REASON Second condition never evaluates to false as this condition is already checked in the sequence flow. TX_tx_tx occurs if only GroupSignals with invalid action are present. May never be called if the enclosing condition evaluates to false.
; ..\component\Com\Implementation\Com.c	 18466  
; ..\component\Com\Implementation\Com.c	 18467     \ID COV_COM_PERFORMINVALIDACTION_ARRAYBASED_GROUPSIGNAL
; ..\component\Com\Implementation\Com.c	 18468      \ACCEPT TF tf tx
; ..\component\Com\Implementation\Com.c	 18469      \ACCEPT TX tx tx
; ..\component\Com\Implementation\Com.c	 18470      \REASON Second condition never evaluates to false as this condition is already checked in the sequence flow. TX_tx_tx occurs if only array based GroupSignals with invalid action are present.
; ..\component\Com\Implementation\Com.c	 18471  
; ..\component\Com\Implementation\Com.c	 18472     \ID COV_COM_DLMON_SIGNALTIMEOUTACTION_TX
; ..\component\Com\Implementation\Com.c	 18473      \ACCEPT TF tf tx
; ..\component\Com\Implementation\Com.c	 18474      \ACCEPT TX tx tx
; ..\component\Com\Implementation\Com.c	 18475      \REASON May evaluate to TX if only Signals/GroupSignals with a configured timeout are present. The last condition will never evaluate to false as buffer is always present for signals/GroupSignals other than zero bit signals/GroupSignals.
; ..\component\Com\Implementation\Com.c	 18476  
; ..\component\Com\Implementation\Com.c	 18477     \ID COV_COM_RXDEFERRED_TIMEOUT
; ..\component\Com\Implementation\Com.c	 18478      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18479      \REASON May always be false if all ComIPdus which are monitored are immediate PDUs.
; ..\component\Com\Implementation\Com.c	 18480  
; ..\component\Com\Implementation\Com.c	 18481     \ID COV_COM_RXDEFERRED_PROCESSING
; ..\component\Com\Implementation\Com.c	 18482      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18483      \REASON May always be true if all ComIPdus are deferred PDUs.
; ..\component\Com\Implementation\Com.c	 18484  
; ..\component\Com\Implementation\Com.c	 18485     \ID COV_COM_TIMEOFFSET
; ..\component\Com\Implementation\Com.c	 18486      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18487      \REASON May always be true if time offset is only configured for TxModeTrue.
; ..\component\Com\Implementation\Com.c	 18488  
; ..\component\Com\Implementation\Com.c	 18489     \ID COV_COM_UPDATE_IPDU_STATE
; ..\component\Com\Implementation\Com.c	 18490      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18491      \REASON May always be true if only rxSignlals/groupSignals without handleId are configured.
; ..\component\Com\Implementation\Com.c	 18492  
; ..\component\Com\Implementation\Com.c	 18493     \ID COV_COM_SIGNALINVALIDATION
; ..\component\Com\Implementation\Com.c	 18494      \ACCEPT X
; ..\component\Com\Implementation\Com.c	 18495      \REASON May never be true if only groupSignals with invalid values are present.
; ..\component\Com\Implementation\Com.c	 18496  
; ..\component\Com\Implementation\Com.c	 18497    \ID COV_COM_SIGNALINVALIDATION_ARRAYACCESS
; ..\component\Com\Implementation\Com.c	 18498      \ACCEPT X
; ..\component\Com\Implementation\Com.c	 18499      \REASON May never be true if only groupSignals with array access and with invalid values are present.
; ..\component\Com\Implementation\Com.c	 18500  
; ..\component\Com\Implementation\Com.c	 18501    \ID COV_COM_ONLYARRAYACCESS_PRESENT
; ..\component\Com\Implementation\Com.c	 18502      \ACCEPT XX
; ..\component\Com\Implementation\Com.c	 18503      \REASON May not be evaluated if no signal groups without array access are present.
; ..\component\Com\Implementation\Com.c	 18504  
; ..\component\Com\Implementation\Com.c	 18505    \ID COV_COM_ONLYARRAYACCESS_PRESENT_01
; ..\component\Com\Implementation\Com.c	 18506      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18507      \REASON May always be TRUE if only signal groups with array access are present.
; ..\component\Com\Implementation\Com.c	 18508  
; ..\component\Com\Implementation\Com.c	 18509     \ID COV_COM_SIGNALINVALIDATION_ARRAYACCESS_01
; ..\component\Com\Implementation\Com.c	 18510      \ACCEPT XX
; ..\component\Com\Implementation\Com.c	 18511      \REASON Will never be evaluated if only groupSignals with array access and with invalid values are present.
; ..\component\Com\Implementation\Com.c	 18512  
; ..\component\Com\Implementation\Com.c	 18513     \ID COV_COM_CACHEORCALL_IMMEDIATE
; ..\component\Com\Implementation\Com.c	 18514      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18515      \REASON May always be true if received immediate ComIPdu has less or equal signals and/or signalGroups with configured notification callbacks than configured cache size.
; ..\component\Com\Implementation\Com.c	 18516  
; ..\component\Com\Implementation\Com.c	 18517     \ID COV_COM_DLMON_SIGNALTIMEOUTACTION_DYN_TX
; ..\component\Com\Implementation\Com.c	 18518      \ACCEPT TF tf tx
; ..\component\Com\Implementation\Com.c	 18519      \ACCEPT TX tx tx
; ..\component\Com\Implementation\Com.c	 18520      \REASON May evaluate to TX if only Signals/GroupSignals with a configured timeout are present. The last condition can only evaluate to false for dynamic length signals.
; ..\component\Com\Implementation\Com.c	 18521  
; ..\component\Com\Implementation\Com.c	 18522     \ID COV_COM_N_BIT_X
; ..\component\Com\Implementation\Com.c	 18523      \ACCEPT X
; ..\component\Com\Implementation\Com.c	 18524      \REASON Not reachable if only zero bit signals are present with n bit bus access type.
; ..\component\Com\Implementation\Com.c	 18525  
; ..\component\Com\Implementation\Com.c	 18526     \ID COV_COM_NBITNBYTE_X
; ..\component\Com\Implementation\Com.c	 18527      \ACCEPT X
; ..\component\Com\Implementation\Com.c	 18528      \REASON Not reachable if only groupSignals have the bus access type NBITNBYTE, whose enclosing signal group has array access enabled.
; ..\component\Com\Implementation\Com.c	 18529  
; ..\component\Com\Implementation\Com.c	 18530     \ID COV_COM_NBITNBYTE_SW_BUSACCOFTXSIGINFO
; ..\component\Com\Implementation\Com.c	 18531      \ACCEPT X
; ..\component\Com\Implementation\Com.c	 18532      \REASON Not reachable if only groupSignals have the bus access type NBITNBYTE_SW_BUSACCOFTXSIGINFO, whose enclosing signal group has array access enabled.
; ..\component\Com\Implementation\Com.c	 18533  
; ..\component\Com\Implementation\Com.c	 18534     \ID COV_COM_NBITNBYTE
; ..\component\Com\Implementation\Com.c	 18535      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18536      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18537      \REASON Condition only evaluates to false if Rx signal/groupSignal with bit size is < 9, where the byte layout overlaps at least two bytes.
; ..\component\Com\Implementation\Com.c	 18538  
; ..\component\Com\Implementation\Com.c	 18539     \ID COV_COM_NBITNBYTE_COPY_REMAININGBITS
; ..\component\Com\Implementation\Com.c	 18540      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18541      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18542      \REASON Depending on the signal layout this condition may always be FALSE or always TRUE, if the last byte to be copied is always or never a full byte.
; ..\component\Com\Implementation\Com.c	 18543  
; ..\component\Com\Implementation\Com.c	 18544     \ID COV_COM_NBITNBYTE_TX_01
; ..\component\Com\Implementation\Com.c	 18545      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18546      \ACCEPT XX
; ..\component\Com\Implementation\Com.c	 18547      \REASON This condition shall never evaluate to false, runtime check is only provided on safety purpose. May evaluate to XX if enclosing encapsulation evaluates to false.
; ..\component\Com\Implementation\Com.c	 18548  
; ..\component\Com\Implementation\Com.c	 18549     \ID COV_COM_NBITNBYTE_BY_UINT8_ONLY
; ..\component\Com\Implementation\Com.c	 18550      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18551      \REASON This condition may not evaluate to false, if the NBitNByte Algorithm is only present for UInt8 signals.
; ..\component\Com\Implementation\Com.c	 18552  
; ..\component\Com\Implementation\Com.c	 18553     \ID COV_COM_DIRECTTRIGGER
; ..\component\Com\Implementation\Com.c	 18554      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18555      \REASON Will always be true if no periodic/mixed I-PDUs are configured.
; ..\component\Com\Implementation\Com.c	 18556  
; ..\component\Com\Implementation\Com.c	 18557     \ID COV_COM_REPETITIVE_TRANSMISSION
; ..\component\Com\Implementation\Com.c	 18558      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18559      \REASON May always be true if only MDT is configured and no repetitions.
; ..\component\Com\Implementation\Com.c	 18560  
; ..\component\Com\Implementation\Com.c	 18561     \ID COV_COM_NONTRIGGERED_REPETITION
; ..\component\Com\Implementation\Com.c	 18562      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18563      \REASON May always be FALSE if repetitions are configured for non-event based TxModeModes.
; ..\component\Com\Implementation\Com.c	 18564  
; ..\component\Com\Implementation\Com.c	 18565     \ID COV_COM_ZERO_REPETITION
; ..\component\Com\Implementation\Com.c	 18566      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18567      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18568      \REASON For full coverage, ComTxIPdus with and without repetitions need to be configured.
; ..\component\Com\Implementation\Com.c	 18569  
; ..\component\Com\Implementation\Com.c	 18570     \ID COV_COM_SETCYCLETIMECOUNT
; ..\component\Com\Implementation\Com.c	 18571      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18572      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18573      \ACCEPT XX
; ..\component\Com\Implementation\Com.c	 18574      \REASON May always be true/false if txModeMode has no cyclic content in both txModes. May never be evaluated, if enclosing condition always evaluates to FALSE.
; ..\component\Com\Implementation\Com.c	 18575  
; ..\component\Com\Implementation\Com.c	 18576    \ID COV_COM_NBITNBYTE_ENDIANNESS
; ..\component\Com\Implementation\Com.c	 18577      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18578      \REASON May always be true, if all signals are big endian signals.
; ..\component\Com\Implementation\Com.c	 18579  
; ..\component\Com\Implementation\Com.c	 18580     \ID COV_WRITESIGNAL_NBITNBYTE_XX
; ..\component\Com\Implementation\Com.c	 18581      \ACCEPT XX
; ..\component\Com\Implementation\Com.c	 18582      \ACCEPT X
; ..\component\Com\Implementation\Com.c	 18583      \REASON May evaluate to XX if only GroupSignals have an overlapping layout respective to the byte boundaries, whose enclosing SignalGroup has array access enabled.
; ..\component\Com\Implementation\Com.c	 18584  
; ..\component\Com\Implementation\Com.c	 18585     \ID COV_COM_NBITNBYTE_XX
; ..\component\Com\Implementation\Com.c	 18586      \ACCEPT XX
; ..\component\Com\Implementation\Com.c	 18587      \REASON May evaluate to XX if enclosing encapsulation evaluates to false.
; ..\component\Com\Implementation\Com.c	 18588  
; ..\component\Com\Implementation\Com.c	 18589     \ID COV_COM_SIGNMSBOFFSET
; ..\component\Com\Implementation\Com.c	 18590      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18591      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18592      \REASON Only reachable if SINT16 Rx signal/groupSignal is present with bit size < 9.
; ..\component\Com\Implementation\Com.c	 18593  
; ..\component\Com\Implementation\Com.c	 18594    \ID COV_COM_IPDU_GROUP_STATE_ACTIVE
; ..\component\Com\Implementation\Com.c	 18595      \ACCEPT TF tf tx
; ..\component\Com\Implementation\Com.c	 18596      \REASON Depending on the configuration the last sub condition will always be true.
; ..\component\Com\Implementation\Com.c	 18597  
; ..\component\Com\Implementation\Com.c	 18598    \ID COV_COM_TX_FILTER
; ..\component\Com\Implementation\Com.c	 18599      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18600      \REASON May not be FALSE if I-PDU has only one signal.
; ..\component\Com\Implementation\Com.c	 18601  
; ..\component\Com\Implementation\Com.c	 18602    \ID COV_COM_FILTER_ALWAYS_PRESENT
; ..\component\Com\Implementation\Com.c	 18603      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18604      \REASON May always be true if all signalGroups have at least one groupSignal with configured filter.
; ..\component\Com\Implementation\Com.c	 18605  
; ..\component\Com\Implementation\Com.c	 18606    \ID COV_COM_TXIPDUGROUP_ACTIVE
; ..\component\Com\Implementation\Com.c	 18607      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18608      \REASON Can only evaluate to false if filter are configured.
; ..\component\Com\Implementation\Com.c	 18609  
; ..\component\Com\Implementation\Com.c	 18610     \ID COV_COM_ISDIRECT_TXMODE
; ..\component\Com\Implementation\Com.c	 18611      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18612      \REASON Can only evaluate to false if mixed or periodic or none I-PDUs are configured.
; ..\component\Com\Implementation\Com.c	 18613  
; ..\component\Com\Implementation\Com.c	 18614    \ID COV_COM_APPLTYPEOFRXACCESSINFO
; ..\component\Com\Implementation\Com.c	 18615      \ACCEPT X
; ..\component\Com\Implementation\Com.c	 18616      \REASON May not be called if only groupSignals with specific appl type are present.
; ..\component\Com\Implementation\Com.c	 18617  
; ..\component\Com\Implementation\Com.c	 18618    \ID COV_COM_APPLTYPEOFRXACCESSINFO_GW_ROUTING
; ..\component\Com\Implementation\Com.c	 18619      \ACCEPT X
; ..\component\Com\Implementation\Com.c	 18620      \REASON May not be called if Gateway Routing is only done for specific appl types.
; ..\component\Com\Implementation\Com.c	 18621  
; ..\component\Com\Implementation\Com.c	 18622    \ID COV_COM_RX_PROCESSING_SINGLEPDU
; ..\component\Com\Implementation\Com.c	 18623      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18624      \REASON May not evaluate to false if only one Rx deferred I-PDU is present.
; ..\component\Com\Implementation\Com.c	 18625  
; ..\component\Com\Implementation\Com.c	 18626    \ID COV_COM_TX_PROCESSING_NONE_MODE
; ..\component\Com\Implementation\Com.c	 18627      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18628      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18629      \REASON May not be fully covered if only tx I-PDUs with TxModeMode NONE with a configured timeout are present.
; ..\component\Com\Implementation\Com.c	 18630  
; ..\component\Com\Implementation\Com.c	 18631    \ID COV_COM_SHDBUFFER_REQUIRED
; ..\component\Com\Implementation\Com.c	 18632      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18633      \REASON May always be TRUE when no ArrayAccess SignalGroups without Gateway Routing are configured.
; ..\component\Com\Implementation\Com.c	 18634  
; ..\component\Com\Implementation\Com.c	 18635    \ID COV_COM_RX_TOUT_CNT
; ..\component\Com\Implementation\Com.c	 18636      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18637      \REASON Depending on the configuration the condition will always be true. Only in configuration with a first timeout equal to 0 the condition can evaluate to false.
; ..\component\Com\Implementation\Com.c	 18638  
; ..\component\Com\Implementation\Com.c	 18639    \ID COV_COM_SIGGRP_CHECK
; ..\component\Com\Implementation\Com.c	 18640      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18641      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18642      \REASON May always evaluate to FALSE, if only signal groups with enabled array access are present. May always evaluate to TRUE in configurations where only signal groups are present.
; ..\component\Com\Implementation\Com.c	 18643  
; ..\component\Com\Implementation\Com.c	 18644    \ID COV_COM_TRIGGERED_ONCHG_SIGGRP
; ..\component\Com\Implementation\Com.c	 18645      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18646      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18647      \REASON Depending on configuration this condition may always be true/false if all/no group signals have transferProperty TRIGGERED_ON_CHANGE(_WITHOUT_REPETITION).
; ..\component\Com\Implementation\Com.c	 18648  
; ..\component\Com\Implementation\Com.c	 18649    \ID COV_COM_WRITESIGNAL_TXBUFFER
; ..\component\Com\Implementation\Com.c	 18650      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18651      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18652      \REASON May always be TRUE, if all ComSignals are ZeroBit Signals. May always be FALSE if there are no zero bit ComSignals present.
; ..\component\Com\Implementation\Com.c	 18653  
; ..\component\Com\Implementation\Com.c	 18654    \ID COV_COM_ONLY_TRIGGERED_SIGGRP
; ..\component\Com\Implementation\Com.c	 18655      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18656      \REASON Always evaluates to TRUE if only triggered signal groups are present.
; ..\component\Com\Implementation\Com.c	 18657  
; ..\component\Com\Implementation\Com.c	 18658    \ID COV_COM_ONLY_ARRAYBASED_TX_SIGGRP
; ..\component\Com\Implementation\Com.c	 18659      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18660      \REASON May always be FALSE if only array-based Tx SignalGroups are present.
; ..\component\Com\Implementation\Com.c	 18661  
; ..\component\Com\Implementation\Com.c	 18662    \ID COV_COM_ONLY_ARRAYBASED_RX_SIGGRP
; ..\component\Com\Implementation\Com.c	 18663      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18664      \REASON May always be FALSE if only array-based Rx SignalGroups are present.
; ..\component\Com\Implementation\Com.c	 18665  
; ..\component\Com\Implementation\Com.c	 18666    \ID COV_COM_NO_GRPSIG_FILTER_PRESENT
; ..\component\Com\Implementation\Com.c	 18667      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18668      \REASON May evaluate to FALSE, if no group signals with configured filter are present.
; ..\component\Com\Implementation\Com.c	 18669  
; ..\component\Com\Implementation\Com.c	 18670    \ID COV_COM_SIGGRP_FILTER
; ..\component\Com\Implementation\Com.c	 18671      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18672      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18673      \REASON May always evaluate to FALSE, if only group signals with filters are present but not signals. May always evaluate to TRUE if only signals with filters are present but no group signals.
; ..\component\Com\Implementation\Com.c	 18674  
; ..\component\Com\Implementation\Com.c	 18675    \ID COV_COM_FILTERSTATE
; ..\component\Com\Implementation\Com.c	 18676      \ACCEPT XX
; ..\component\Com\Implementation\Com.c	 18677      \REASON May not get evaluated if first conditions fails (if only group signals with filter are present).
; ..\component\Com\Implementation\Com.c	 18678  
; ..\component\Com\Implementation\Com.c	 18679    \ID COV_COM_ONLY_DET_FUNCTIONALITY_PRESENT
; ..\component\Com\Implementation\Com.c	 18680      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18681      \REASON Condition is always true if the actual functionality of this API is not configured.
; ..\component\Com\Implementation\Com.c	 18682  
; ..\component\Com\Implementation\Com.c	 18683    \ID COV_COM_CYCLIC_SEND_REQUEST
; ..\component\Com\Implementation\Com.c	 18684      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18685      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18686      \REASON Condition may always be false if only TxModeFalse has got a cyclic portion and the initial TxMode is always TxModeTrue. May always be true, if the initial TxMode is always in a cyclic TxModeMode.
; ..\component\Com\Implementation\Com.c	 18687  
; ..\component\Com\Implementation\Com.c	 18688    \ID COV_COM_TIMEOUT_AND_UB
; ..\component\Com\Implementation\Com.c	 18689      \ACCEPT XF tf xf
; ..\component\Com\Implementation\Com.c	 18690      \REASON Condition may not be fully covered when no signals/groups with timeout and update bit are configured.
; ..\component\Com\Implementation\Com.c	 18691  
; ..\component\Com\Implementation\Com.c	 18692    \ID COV_COM_REPETITIONS
; ..\component\Com\Implementation\Com.c	 18693      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18694      \REASON May never be true if repetitions are configured but no triggered signal is present.
; ..\component\Com\Implementation\Com.c	 18695  
; ..\component\Com\Implementation\Com.c	 18696    \ID COV_COM_DEFERREDIPDUSEND
; ..\component\Com\Implementation\Com.c	 18697      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18698      \REASON May always be false, if not WITHOUT_REPETITION TransferProperty is configured.
; ..\component\Com\Implementation\Com.c	 18699  
; ..\component\Com\Implementation\Com.c	 18700    \ID COV_COM_REPETITIONS_1
; ..\component\Com\Implementation\Com.c	 18701      \ACCEPT X
; ..\component\Com\Implementation\Com.c	 18702      \REASON May never be covered if enclosing condition always evaluates to false.
; ..\component\Com\Implementation\Com.c	 18703  
; ..\component\Com\Implementation\Com.c	 18704    \ID COV_COM_FLOAT_TYPE_FILTER
; ..\component\Com\Implementation\Com.c	 18705      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18706      \REASON May never be false for Rx signals or groupSignals as only 'NEVER' filter is supported.
; ..\component\Com\Implementation\Com.c	 18707  
; ..\component\Com\Implementation\Com.c	 18708    \ID COV_COM_IMMEDIATE_DESTINATION_DESCRIPTION
; ..\component\Com\Implementation\Com.c	 18709      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18710      \REASON May always be true, if all GwDestinationDescriptions are of type IMMEDIATE.
; ..\component\Com\Implementation\Com.c	 18711  
; ..\component\Com\Implementation\Com.c	 18712    \ID COV_COM_GWDESCRIPTION_RTCHECK
; ..\component\Com\Implementation\Com.c	 18713     \ACCEPT TF tf tx
; ..\component\Com\Implementation\Com.c	 18714     \REASON Last condition shall never evaluate to false. SBSW RT check to avoid overwriting buffer.
; ..\component\Com\Implementation\Com.c	 18715  
; ..\component\Com\Implementation\Com.c	 18716    \ID COV_COM_DEFERRED_EVENTCACHE_FALLBACK
; ..\component\Com\Implementation\Com.c	 18717     \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18718     \REASON Will always evaluate to FALSE in unit test suite. Check is still required as an interrupt can overflow the cache.
; ..\component\Com\Implementation\Com.c	 18719  
; ..\component\Com\Implementation\Com.c	 18720    \ID COV_COM_UINT8_DYN_APPLTYPE
; ..\component\Com\Implementation\Com.c	 18721     \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18722     \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18723     \REASON May not be fully covered in configuration with only dynamic length signals.
; ..\component\Com\Implementation\Com.c	 18724  
; ..\component\Com\Implementation\Com.c	 18725    \ID COV_COM_PERIODIC_PDU_REQUIRED
; ..\component\Com\Implementation\Com.c	 18726     \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18727     \REASON This condition can only fail for periodic ComIPdu.
; ..\component\Com\Implementation\Com.c	 18728  
; ..\component\Com\Implementation\Com.c	 18729    \ID COV_COM_TP_ONLY
; ..\component\Com\Implementation\Com.c	 18730     \ACCEPT TF xf tf
; ..\component\Com\Implementation\Com.c	 18731     \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18732     \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18733     \ACCEPT TF tx tf
; ..\component\Com\Implementation\Com.c	 18734     \REASON May not be fully configured in TP only configuration.
; ..\component\Com\Implementation\Com.c	 18735  
; ..\component\Com\Implementation\Com.c	 18736    \ID COV_COM_NO_METADATA_CONFIGURED
; ..\component\Com\Implementation\Com.c	 18737     \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18738     \REASON May not be fully covered, if Meta Data API is enabled but no Pdu with Meta Data is present.
; ..\component\Com\Implementation\Com.c	 18739  
; ..\component\Com\Implementation\Com.c	 18740    \ID COV_COM_NO_DYNSIG_CONFIGURED
; ..\component\Com\Implementation\Com.c	 18741     \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18742     \REASON May not be fully covered, if no dynamic length signals are present.
; ..\component\Com\Implementation\Com.c	 18743  
; ..\component\Com\Implementation\Com.c	 18744    \ID COV_COM_MISRA
; ..\component\Com\Implementation\Com.c	 18745      \ACCEPT X
; ..\component\Com\Implementation\Com.c	 18746      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18747      \REASON [MSR_COV_MISRA]
; ..\component\Com\Implementation\Com.c	 18748  
; ..\component\Com\Implementation\Com.c	 18749    \ID COV_COM_VAR_ELISA_STD_ON_TX
; ..\component\Com\Implementation\Com.c	 18750      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18751      \REASON Feature must always be enabled for SafeBsw secured by the Elisa plugin.
; ..\component\Com\Implementation\Com.c	 18752  
; ..\component\Com\Implementation\Com.c	 18753    \ID COV_COM_VAR_ELISA_STD_OFF_XF
; ..\component\Com\Implementation\Com.c	 18754      \ACCEPT XF
; ..\component\Com\Implementation\Com.c	 18755      \REASON Feature must always be disabled for SafeBsw secured by the Elisa plugin.
; ..\component\Com\Implementation\Com.c	 18756  
; ..\component\Com\Implementation\Com.c	 18757    \ID COV_COM_VAR_ELISA_STD_OFF_TX
; ..\component\Com\Implementation\Com.c	 18758      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18759      \REASON see COV_COM_VAR_ELISA_STD_OFF_XF
; ..\component\Com\Implementation\Com.c	 18760  
; ..\component\Com\Implementation\Com.c	 18761    \ID COV_COM_VAR_ELISA_STD_OFF_TF_tx_tf_tf_tf
; ..\component\Com\Implementation\Com.c	 18762      \ACCEPT TF tx tf tf tf
; ..\component\Com\Implementation\Com.c	 18763      \REASON see COV_COM_VAR_ELISA_STD_OFF_XF
; ..\component\Com\Implementation\Com.c	 18764  
; ..\component\Com\Implementation\Com.c	 18765    \ID COV_COM_VAR_ELISA_STD_OFF_TF_tf_tf_tf_tf_xf_tf_tf
; ..\component\Com\Implementation\Com.c	 18766      \ACCEPT TF tf tf tf tf xf tf tf
; ..\component\Com\Implementation\Com.c	 18767      \REASON see COV_COM_VAR_ELISA_STD_OFF_XF
; ..\component\Com\Implementation\Com.c	 18768  
; ..\component\Com\Implementation\Com.c	 18769    \ID COV_COM_VAR_DEPENDENT_SWITCH
; ..\component\Com\Implementation\Com.c	 18770      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18771      \REASON The nested switch depends on a previous switch.
; ..\component\Com\Implementation\Com.c	 18772  
; ..\component\Com\Implementation\Com.c	 18773    \ID COV_COM_TX_BUFFER_ALWAYS_USED
; ..\component\Com\Implementation\Com.c	 18774      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18775      \REASON This statement can only be fully covered, if zero-Bit Pdus are present.
; ..\component\Com\Implementation\Com.c	 18776  
; ..\component\Com\Implementation\Com.c	 18777    \ID COV_COM_ONLY_CYCLIC_PDU
; ..\component\Com\Implementation\Com.c	 18778      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18779      \REASON This statement is always true if only cyclic PDUs are configured.
; ..\component\Com\Implementation\Com.c	 18780  
; ..\component\Com\Implementation\Com.c	 18781    \ID COV_COM_NO_IPDUGROUPS
; ..\component\Com\Implementation\Com.c	 18782      \ACCEPT TX
; ..\component\Com\Implementation\Com.c	 18783      \REASON If no ComIPdu Groups are configured, the statement is always true.
; ..\component\Com\Implementation\Com.c	 18784  
; ..\component\Com\Implementation\Com.c	 18785  COV_JUSTIFICATION_END */
; ..\component\Com\Implementation\Com.c	 18786  /* *INDENT-ON* */
; ..\component\Com\Implementation\Com.c	 18787  
; ..\component\Com\Implementation\Com.c	 18788  
; ..\component\Com\Implementation\Com.c	 18789  /**********************************************************************************************************************
; ..\component\Com\Implementation\Com.c	 18790    END OF FILE: Com.c
; ..\component\Com\Implementation\Com.c	 18791  **********************************************************************************************************************/

	; Module end
