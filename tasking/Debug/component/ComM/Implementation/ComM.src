	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 21092262 SN 73118428"
	.compiler_invocation	"ctc --dep-file=component\\ComM\\Implementation\\.ComM.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc39xb -D__CPU_TC39XB__ --core=tc1.6.2 --iso=99 -DBRS_COMP_TASKING -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\testdemo\\taskingdemo\\demo001 -ID:\\Zonal\\demo011\\tasking\\component\\PduR -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Generator -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Com -ID:\\Zonal\\demo011\\tasking\\component\\Com\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Com\\DaVinciCfg_VASE -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Com\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\ComM -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Det -ID:\\Zonal\\demo011\\tasking\\component\\Det\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Det\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\demo011\\tasking\\appl -ID:\\Zonal\\demo011\\tasking\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\Components -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\ContractPhase -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\inc -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\appl\\Include -ID:\\Zonal\\demo011\\tasking\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\appl\\Source\\swc_test -ID:\\Zonal\\demo011\\tasking\\component -ID:\\Zonal\\demo011\\tasking\\component\\_Common -ID:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os\\TC39xQ -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Os\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug -ID:\\Zonal\\demo011\\tasking\\Debug\\appl -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\Debug\\component -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\src -g2 --make-target=component\\ComM\\Implementation\\ComM.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o component\\ComM\\Implementation\\ComM.src ..\\component\\ComM\\Implementation\\ComM.c"
	.compiler_name		"ctc"
	;source	'..\\component\\ComM\\Implementation\\ComM.c'

	
$TC162
	
	.sdecl	'.text.ComM.ComM_CalculateHighestComMode',code,cluster('ComM_CalculateHighestComMode')
	.sect	'.text.ComM.ComM_CalculateHighestComMode'
	.align	2
	

; ..\component\ComM\Implementation\ComM.c	     1  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	     2   *  COPYRIGHT
; ..\component\ComM\Implementation\ComM.c	     3   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\ComM\Implementation\ComM.c	     4   *  \verbatim
; ..\component\ComM\Implementation\ComM.c	     5   *  Copyright (c) 2020 by Vector Informatik GmbH.                                                  All rights reserved.
; ..\component\ComM\Implementation\ComM.c	     6   *
; ..\component\ComM\Implementation\ComM.c	     7   *                This software is copyright protected and proprietary to Vector Informatik GmbH.
; ..\component\ComM\Implementation\ComM.c	     8   *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
; ..\component\ComM\Implementation\ComM.c	     9   *                All other rights remain with Vector Informatik GmbH.
; ..\component\ComM\Implementation\ComM.c	    10   *  \endverbatim
; ..\component\ComM\Implementation\ComM.c	    11   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\ComM\Implementation\ComM.c	    12   *  FILE DESCRIPTION
; ..\component\ComM\Implementation\ComM.c	    13   *  -----------------------------------------------------------------------------------------------------------------*/
; ..\component\ComM\Implementation\ComM.c	    14  /*!         \file  ComM.c
; ..\component\ComM\Implementation\ComM.c	    15   *         \brief  Communication Manager ASR4
; ..\component\ComM\Implementation\ComM.c	    16   *
; ..\component\ComM\Implementation\ComM.c	    17   *       \details  Implementation of the Autosar Communication Manager
; ..\component\ComM\Implementation\ComM.c	    18   *
; ..\component\ComM\Implementation\ComM.c	    19   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	    20  
; ..\component\ComM\Implementation\ComM.c	    21  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	    22   *  REVISION HISTORY
; ..\component\ComM\Implementation\ComM.c	    23   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\ComM\Implementation\ComM.c	    24   *  Refer to the module's header file.
; ..\component\ComM\Implementation\ComM.c	    25   *
; ..\component\ComM\Implementation\ComM.c	    26   *  FILE VERSION
; ..\component\ComM\Implementation\ComM.c	    27   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\ComM\Implementation\ComM.c	    28   *  Refer to the VERSION CHECK below.
; ..\component\ComM\Implementation\ComM.c	    29   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	    30  
; ..\component\ComM\Implementation\ComM.c	    31  #define CCL_ASR_COMM_SOURCE
; ..\component\ComM\Implementation\ComM.c	    32  
; ..\component\ComM\Implementation\ComM.c	    33  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	    34   *  LOCAL MISRA / PCLINT JUSTIFICATIONS
; ..\component\ComM\Implementation\ComM.c	    35   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	    36  /* PRQA S 0777 EOF */ /* MD_MSR_Rule5.1_0777 */
; ..\component\ComM\Implementation\ComM.c	    37  /* PRQA S 3453 EOF */ /* MD_MSR_FctLikeMacro */
; ..\component\ComM\Implementation\ComM.c	    38  
; ..\component\ComM\Implementation\ComM.c	    39  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	    40   *  INCLUDES
; ..\component\ComM\Implementation\ComM.c	    41   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	    42  
; ..\component\ComM\Implementation\ComM.c	    43  #include "ComM_Private_Cfg.h"
; ..\component\ComM\Implementation\ComM.c	    44  
; ..\component\ComM\Implementation\ComM.c	    45  #if (COMM_DCM_INDICATION == STD_ON)
; ..\component\ComM\Implementation\ComM.c	    46  # include "Dcm_Cbk.h"
; ..\component\ComM\Implementation\ComM.c	    47  # include "ComM_Dcm.h"
; ..\component\ComM\Implementation\ComM.c	    48  #endif
; ..\component\ComM\Implementation\ComM.c	    49  
; ..\component\ComM\Implementation\ComM.c	    50  #if (COMM_NVM_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	    51  # include "NvM.h"
; ..\component\ComM\Implementation\ComM.c	    52  #endif
; ..\component\ComM\Implementation\ComM.c	    53  
; ..\component\ComM\Implementation\ComM.c	    54  #include "BswM_ComM.h"
; ..\component\ComM\Implementation\ComM.c	    55  #include "SchM_ComM.h"
; ..\component\ComM\Implementation\ComM.c	    56  
; ..\component\ComM\Implementation\ComM.c	    57  #include "ComM_EcuMBswM.h"
; ..\component\ComM\Implementation\ComM.c	    58  #include "ComM_BusSM.h"
; ..\component\ComM\Implementation\ComM.c	    59  #include "ComM_Nm.h"
; ..\component\ComM\Implementation\ComM.c	    60  
; ..\component\ComM\Implementation\ComM.c	    61  #if (COMM_NMSUPPORTOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	    62  # include "Nm.h"
; ..\component\ComM\Implementation\ComM.c	    63  #endif
; ..\component\ComM\Implementation\ComM.c	    64  
; ..\component\ComM\Implementation\ComM.c	    65  #if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	    66  # include "Det.h"
; ..\component\ComM\Implementation\ComM.c	    67  #endif
; ..\component\ComM\Implementation\ComM.c	    68  
; ..\component\ComM\Implementation\ComM.c	    69  #if (COMM_USE_ECUM_BSW_ERROR_HOOK == STD_ON)
; ..\component\ComM\Implementation\ComM.c	    70  # include "EcuM_Error.h"
; ..\component\ComM\Implementation\ComM.c	    71  #endif
; ..\component\ComM\Implementation\ComM.c	    72  
; ..\component\ComM\Implementation\ComM.c	    73  #if (COMM_EXTENDED_RAM_CHECK == STD_ON)
; ..\component\ComM\Implementation\ComM.c	    74  # include "CanSM.h"
; ..\component\ComM\Implementation\ComM.c	    75  # include "CanSM_ComM.h"
; ..\component\ComM\Implementation\ComM.c	    76  #endif
; ..\component\ComM\Implementation\ComM.c	    77  
; ..\component\ComM\Implementation\ComM.c	    78  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	    79   *  VERSION CHECK
; ..\component\ComM\Implementation\ComM.c	    80   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	    81  
; ..\component\ComM\Implementation\ComM.c	    82  /* Check the version of ComM.h */
; ..\component\ComM\Implementation\ComM.c	    83  #if (  (COMM_SW_MAJOR_VERSION != (0x13u)) \ 
; ..\component\ComM\Implementation\ComM.c	    84      || (COMM_SW_MINOR_VERSION != (0x00u)) \ 
; ..\component\ComM\Implementation\ComM.c	    85      || (COMM_SW_PATCH_VERSION != (0x01u)) )
; ..\component\ComM\Implementation\ComM.c	    86  # error "Version numbers of ComM.h are inconsistent!"
; ..\component\ComM\Implementation\ComM.c	    87  #endif
; ..\component\ComM\Implementation\ComM.c	    88  
; ..\component\ComM\Implementation\ComM.c	    89  /* Check the version of ComM_BusSM.h */
; ..\component\ComM\Implementation\ComM.c	    90  #if (  (COMM_BUSSM_MAJOR_VERSION != (0x13u)) \ 
; ..\component\ComM\Implementation\ComM.c	    91      || (COMM_BUSSM_MINOR_VERSION != (0x00u)) \ 
; ..\component\ComM\Implementation\ComM.c	    92      || (COMM_BUSSM_PATCH_VERSION != (0x01u)) )
; ..\component\ComM\Implementation\ComM.c	    93  # error "Version numbers of ComM_BusSM.h are inconsistent!"
; ..\component\ComM\Implementation\ComM.c	    94  #endif
; ..\component\ComM\Implementation\ComM.c	    95  
; ..\component\ComM\Implementation\ComM.c	    96  /* Check the version of ComM_Dcm.h */
; ..\component\ComM\Implementation\ComM.c	    97  #if (COMM_DCM_INDICATION == STD_ON)
; ..\component\ComM\Implementation\ComM.c	    98  # if (  (COMM_DCM_MAJOR_VERSION != (0x13u)) \ 
; ..\component\ComM\Implementation\ComM.c	    99       || (COMM_DCM_MINOR_VERSION != (0x00u)) \ 
; ..\component\ComM\Implementation\ComM.c	   100       || (COMM_DCM_PATCH_VERSION != (0x01u)) )
; ..\component\ComM\Implementation\ComM.c	   101  #  error "Version numbers of ComM_Dcm.h are inconsistent!"
; ..\component\ComM\Implementation\ComM.c	   102  # endif
; ..\component\ComM\Implementation\ComM.c	   103  #endif
; ..\component\ComM\Implementation\ComM.c	   104  
; ..\component\ComM\Implementation\ComM.c	   105  /* Check the version of ComM_EcuMBswM.h */
; ..\component\ComM\Implementation\ComM.c	   106  #if (  (COMM_ECUMBSWM_MAJOR_VERSION != (0x13u)) \ 
; ..\component\ComM\Implementation\ComM.c	   107      || (COMM_ECUMBSWM_MINOR_VERSION != (0x00u)) \ 
; ..\component\ComM\Implementation\ComM.c	   108      || (COMM_ECUMBSWM_PATCH_VERSION != (0x01u)) )
; ..\component\ComM\Implementation\ComM.c	   109  # error "Version numbers of ComM_EcuMBswM.h are inconsistent!"
; ..\component\ComM\Implementation\ComM.c	   110  #endif
; ..\component\ComM\Implementation\ComM.c	   111  
; ..\component\ComM\Implementation\ComM.c	   112  /* Check the version of ComM_Nm.h */
; ..\component\ComM\Implementation\ComM.c	   113  #if (  (COMM_NM_MAJOR_VERSION != (0x13u)) \ 
; ..\component\ComM\Implementation\ComM.c	   114      || (COMM_NM_MINOR_VERSION != (0x00u)) \ 
; ..\component\ComM\Implementation\ComM.c	   115      || (COMM_NM_PATCH_VERSION != (0x01u)) )
; ..\component\ComM\Implementation\ComM.c	   116  # error "Version numbers of ComM_Nm.h are inconsistent!"
; ..\component\ComM\Implementation\ComM.c	   117  #endif
; ..\component\ComM\Implementation\ComM.c	   118  
; ..\component\ComM\Implementation\ComM.c	   119  /* Check the version of ComM_Types.h */
; ..\component\ComM\Implementation\ComM.c	   120  #if (  (COMM_TYPES_MAJOR_VERSION != (0x13u)) \ 
; ..\component\ComM\Implementation\ComM.c	   121      || (COMM_TYPES_MINOR_VERSION != (0x00u)) \ 
; ..\component\ComM\Implementation\ComM.c	   122      || (COMM_TYPES_PATCH_VERSION != (0x01u)) )
; ..\component\ComM\Implementation\ComM.c	   123  # error "Version numbers of ComM_Types.h are inconsistent!"
; ..\component\ComM\Implementation\ComM.c	   124  #endif
; ..\component\ComM\Implementation\ComM.c	   125  
; ..\component\ComM\Implementation\ComM.c	   126  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   127   *  COMPATIBILITY / DEFAULTS
; ..\component\ComM\Implementation\ComM.c	   128   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   129  
; ..\component\ComM\Implementation\ComM.c	   130  #if (  (COMM_CONFIGURATION_VARIANT != COMM_CONFIGURATION_VARIANT_PRECOMPILE) \ 
; ..\component\ComM\Implementation\ComM.c	   131      && (COMM_CONFIGURATION_VARIANT != COMM_CONFIGURATION_VARIANT_POSTBUILD_LOADABLE) )
; ..\component\ComM\Implementation\ComM.c	   132  # error "ComM currently supports configuration variants PreCompile and PostBuild Loadable only"
; ..\component\ComM\Implementation\ComM.c	   133  #endif
; ..\component\ComM\Implementation\ComM.c	   134  
; ..\component\ComM\Implementation\ComM.c	   135  /* Countermeasure of SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	   136  #if (COMM_ACTIVE_CHANNEL != ComM_GetSizeOfChannel())
; ..\component\ComM\Implementation\ComM.c	   137  # error "Generated data is invalid: COMM_ACTIVE_CHANNEL != ComM_GetSizeOfChannel()"
; ..\component\ComM\Implementation\ComM.c	   138  #endif
; ..\component\ComM\Implementation\ComM.c	   139  
; ..\component\ComM\Implementation\ComM.c	   140  #if ((COMM_NMLIGHTDURATIONOFCHANNEL == STD_ON) || (COMM_NMLIGHTSILENTDURATIONOFCHANNEL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	   141  # if ((COMM_MINFULLCOMTIMEOFCHANNEL == STD_OFF) || (COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL == STD_OFF))
; ..\component\ComM\Implementation\ComM.c	   142  #  error "Generated data is invalid: COMM_MINFULLCOMTIMEOFCHANNEL and COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL must be STD_ON"
; ..\component\ComM\Implementation\ComM.c	   143  # endif
; ..\component\ComM\Implementation\ComM.c	   144  #endif
; ..\component\ComM\Implementation\ComM.c	   145  
; ..\component\ComM\Implementation\ComM.c	   146  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   147   *  LOCAL CONSTANT MACROS
; ..\component\ComM\Implementation\ComM.c	   148   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   149  
; ..\component\ComM\Implementation\ComM.c	   150  /*! Bit mask to set the Prevent Wake-up status */
; ..\component\ComM\Implementation\ComM.c	   151  #define COMM_WAKEUP_INHIBITION_MASK                (uint8)0x01u
; ..\component\ComM\Implementation\ComM.c	   152  /*! Bit mask to clear the Prevent Wake-up status */
; ..\component\ComM\Implementation\ComM.c	   153  #define COMM_WAKEUP_INHIBITION_CLEAR_MASK          (uint8)0xfeu
; ..\component\ComM\Implementation\ComM.c	   154  /*! Bit mask to set the Mode Limitation status */
; ..\component\ComM\Implementation\ComM.c	   155  #define COMM_MODE_LIMITATION_MASK                  (uint8)0x02u
; ..\component\ComM\Implementation\ComM.c	   156  /*! Bit mask to clear the Mode Limitation status */
; ..\component\ComM\Implementation\ComM.c	   157  #define COMM_MODE_LIMITATION_CLEAR_MASK            (uint8)0xfdu
; ..\component\ComM\Implementation\ComM.c	   158  
; ..\component\ComM\Implementation\ComM.c	   159  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   160  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   161  /*! Bit mask to set PNC Routing Limitation status of a channel to activated (limited) */
; ..\component\ComM\Implementation\ComM.c	   162  #  define COMM_PNCROUTING_LIMITED                  (uint8)0x00
; ..\component\ComM\Implementation\ComM.c	   163  /*! Bit mask to set PNC Routing Limitation status of a channel to de-activated (partly) because Nm is in NM_REPEAT_MESSAGE state */
; ..\component\ComM\Implementation\ComM.c	   164  #  define COMM_PNCROUTING_NM_REPEAT_MESSAGE        (uint8)0x01
; ..\component\ComM\Implementation\ComM.c	   165  /*! Bit mask to set PNC Routing Limitation status of a channel to de-activated (default) */
; ..\component\ComM\Implementation\ComM.c	   166  #  define COMM_PNCROUTING_NOT_LIMITED              (uint8)0x02
; ..\component\ComM\Implementation\ComM.c	   167  
; ..\component\ComM\Implementation\ComM.c	   168  /*! Bit mask to clear PNC Routing Limitation status de-activated (partly) */
; ..\component\ComM\Implementation\ComM.c	   169  #  define COMM_PNCROUTING_NM_REPEAT_MESSAGE_CLEAR  (uint8)0xfe
; ..\component\ComM\Implementation\ComM.c	   170  /*! Bit mask to clear PNC Routing Limitation status de-activated */
; ..\component\ComM\Implementation\ComM.c	   171  #  define COMM_PNCROUTING_NOT_LIMITED_CLEAR        (uint8)0xfd
; ..\component\ComM\Implementation\ComM.c	   172  # endif
; ..\component\ComM\Implementation\ComM.c	   173  
; ..\component\ComM\Implementation\ComM.c	   174  /*! Send PNC signals on channels with Gateway Type ACTIVE */
; ..\component\ComM\Implementation\ComM.c	   175  # define COMM_SEND_ACTIVE_SIG_ONLY                  (uint8)(0u)
; ..\component\ComM\Implementation\ComM.c	   176  /*! Send PNC signals on channels with Gateway Type PASSIVE */
; ..\component\ComM\Implementation\ComM.c	   177  # define COMM_SEND_PASSIVE_SIG_ONLY                 (uint8)(1u)
; ..\component\ComM\Implementation\ComM.c	   178  /*! Send PNC signals on all channels */
; ..\component\ComM\Implementation\ComM.c	   179  # define COMM_SEND_ALL_SIG                          (uint8)(2u)
; ..\component\ComM\Implementation\ComM.c	   180  #endif
; ..\component\ComM\Implementation\ComM.c	   181  
; ..\component\ComM\Implementation\ComM.c	   182  /*! Used to initialize and check the user request bit field */
; ..\component\ComM\Implementation\ComM.c	   183  #define COMM_NO_REQUESTS                           (uint8)0x00u
; ..\component\ComM\Implementation\ComM.c	   184  
; ..\component\ComM\Implementation\ComM.c	   185  /*! Default value of the state change status */
; ..\component\ComM\Implementation\ComM.c	   186  #define COMM_NO_STATE_CHANGE                       (uint8)0x10u
; ..\component\ComM\Implementation\ComM.c	   187  
; ..\component\ComM\Implementation\ComM.c	   188  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   189   *  LOCAL DATA TYPES AND STRUCTURES
; ..\component\ComM\Implementation\ComM.c	   190   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   191  
; ..\component\ComM\Implementation\ComM.c	   192  /* Compiler.h for AUTOSAR 4.0.3 won't have the 'static' keyword  */
; ..\component\ComM\Implementation\ComM.c	   193  #if !defined (COMM_LOCAL) /* COV_MSR_COMPATIBILITY */
; ..\component\ComM\Implementation\ComM.c	   194  # define COMM_LOCAL                                static
; ..\component\ComM\Implementation\ComM.c	   195  #endif
; ..\component\ComM\Implementation\ComM.c	   196  
; ..\component\ComM\Implementation\ComM.c	   197  #if !defined (COMM_LOCAL_INLINE) /* COV_MSR_COMPATIBILITY */
; ..\component\ComM\Implementation\ComM.c	   198  # define COMM_LOCAL_INLINE                         LOCAL_INLINE
; ..\component\ComM\Implementation\ComM.c	   199  #endif
; ..\component\ComM\Implementation\ComM.c	   200  
; ..\component\ComM\Implementation\ComM.c	   201  /* type definition of the ComM transition function call table */
; ..\component\ComM\Implementation\ComM.c	   202  typedef P2FUNC(void, COMM_CODE, ComM_TransitionFunctionType) (NetworkHandleType  Channel);
; ..\component\ComM\Implementation\ComM.c	   203  
; ..\component\ComM\Implementation\ComM.c	   204  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   205   *  LOCAL FUNCTION PROTOTYPES OF STATE TRANSITION FUNCTIONS (TF)
; ..\component\ComM\Implementation\ComM.c	   206   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   207  
; ..\component\ComM\Implementation\ComM.c	   208  #define COMM_START_SEC_CODE
; ..\component\ComM\Implementation\ComM.c	   209  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   210  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   211  
; ..\component\ComM\Implementation\ComM.c	   212  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   213    ComM_TF_NoCom_NetReq()
; ..\component\ComM\Implementation\ComM.c	   214  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   215  /*! \brief      Performs the state transition from No Communication to Network Requested for the given channel
; ..\component\ComM\Implementation\ComM.c	   216   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   217   *  \param[in]  Channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   218   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   219   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   220   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   221   *  \trace      SPEC-47933, SPEC-5081, SPEC-47933, SPEC-5456, SPEC-5414
; ..\component\ComM\Implementation\ComM.c	   222   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   223  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_NoCom_NetReq( NetworkHandleType Channel );
; ..\component\ComM\Implementation\ComM.c	   224  
; ..\component\ComM\Implementation\ComM.c	   225  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   226    ComM_TF_NoCom_FullReadySleep()
; ..\component\ComM\Implementation\ComM.c	   227  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   228  /*! \brief      Performs the state transition from No Communication to Ready Sleep for the given channel
; ..\component\ComM\Implementation\ComM.c	   229   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   230   *  \param[in]  Channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   231   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   232   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   233   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   234   *  \trace      SPEC-5081, SPEC-5361, SPEC-5487, SPEC-5488
; ..\component\ComM\Implementation\ComM.c	   235   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   236  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_NoCom_FullReadySleep( NetworkHandleType Channel );
; ..\component\ComM\Implementation\ComM.c	   237  
; ..\component\ComM\Implementation\ComM.c	   238  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   239    ComM_TF_Full_SiCom()
; ..\component\ComM\Implementation\ComM.c	   240  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   241  /*! \brief      Performs the state transition from Full to Silent Communication for the given channel
; ..\component\ComM\Implementation\ComM.c	   242   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   243   *  \param[in]  Channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   244   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   245   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   246   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   247   *  \trace      SPEC-5097
; ..\component\ComM\Implementation\ComM.c	   248   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   249  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_Full_SiCom( NetworkHandleType Channel );
; ..\component\ComM\Implementation\ComM.c	   250  
; ..\component\ComM\Implementation\ComM.c	   251  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   252    ComM_TF_ReadyS_NetReq()
; ..\component\ComM\Implementation\ComM.c	   253  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   254  /*! \brief      Performs the state transition from Ready Sleep to Network Requested for the given channel
; ..\component\ComM\Implementation\ComM.c	   255   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   256   *  \param[in]  Channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   257   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   258   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   259   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   260   *  \trace      SPEC-5478
; ..\component\ComM\Implementation\ComM.c	   261   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   262  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_ReadyS_NetReq( NetworkHandleType Channel );
; ..\component\ComM\Implementation\ComM.c	   263  
; ..\component\ComM\Implementation\ComM.c	   264  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   265    ComM_TF_SiCom_NoCom()
; ..\component\ComM\Implementation\ComM.c	   266  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   267  /*! \brief      Performs the state transition from Full or Silent to No Communication for the given channel
; ..\component\ComM\Implementation\ComM.c	   268   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   269   *  \param[in]  Channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   270   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   271   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   272   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   273   *  \trace      CREQ-116030
; ..\component\ComM\Implementation\ComM.c	   274   *  \trace      SPEC-5083, SPEC-5370
; ..\component\ComM\Implementation\ComM.c	   275   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   276  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_SiCom_NoCom( NetworkHandleType Channel );
; ..\component\ComM\Implementation\ComM.c	   277  
; ..\component\ComM\Implementation\ComM.c	   278  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   279    ComM_TF_NetReq_ReadyS()
; ..\component\ComM\Implementation\ComM.c	   280  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   281  /*! \brief      Performs the state transition from Network Requested to Ready Sleep for the given channel
; ..\component\ComM\Implementation\ComM.c	   282   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   283   *  \param[in]  Channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   284   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   285   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   286   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   287   *  \trace      SPEC-5477, SPEC-5086
; ..\component\ComM\Implementation\ComM.c	   288   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   289  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_NetReq_ReadyS( NetworkHandleType Channel );
; ..\component\ComM\Implementation\ComM.c	   290  
; ..\component\ComM\Implementation\ComM.c	   291  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   292    ComM_TF_No_Action()
; ..\component\ComM\Implementation\ComM.c	   293  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   294  /*! \brief      Special state transition function for transitions that do not require any actions, needed as a placeholder
; ..\component\ComM\Implementation\ComM.c	   295   *              in the state transition table.
; ..\component\ComM\Implementation\ComM.c	   296   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   297   *  \param[in]  Channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   298   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   299   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   300   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   301   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   302  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_No_Action( NetworkHandleType Channel );
; ..\component\ComM\Implementation\ComM.c	   303  
; ..\component\ComM\Implementation\ComM.c	   304  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   305    ComM_TF_No_Transition()
; ..\component\ComM\Implementation\ComM.c	   306  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   307  /*! \brief      Special state transition function for unsupported transitions to report development errors
; ..\component\ComM\Implementation\ComM.c	   308   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   309   *  \param[in]  Channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   310   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   311   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   312   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   313   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   314  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_No_Transition( NetworkHandleType Channel );
; ..\component\ComM\Implementation\ComM.c	   315  
; ..\component\ComM\Implementation\ComM.c	   316  #define COMM_STOP_SEC_CODE
; ..\component\ComM\Implementation\ComM.c	   317  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   318  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   319  
; ..\component\ComM\Implementation\ComM.c	   320  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   321    ROM DATA
; ..\component\ComM\Implementation\ComM.c	   322  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   323  #define COMM_START_SEC_CONST_8BIT
; ..\component\ComM\Implementation\ComM.c	   324  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   325  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   326  
; ..\component\ComM\Implementation\ComM.c	   327  /*! ComM transition table [requested][active], the element COMM_MAX_NUMBER_OF_STATES means that no transition is defined for the active/requested combination. */
; ..\component\ComM\Implementation\ComM.c	   328  /* PRQA S 3218 1 */ /* MD_ComM_3218 */
; ..\component\ComM\Implementation\ComM.c	   329  COMM_LOCAL CONST(ComM_StateType, COMM_CONST) ComM_TransitionTable[COMM_MAX_NUMBER_OF_STATES][COMM_MAX_NUMBER_OF_STATES] =    /* [row] [column] */
; ..\component\ComM\Implementation\ComM.c	   330  {/* COMM_NO_COM_NO_PENDING_REQUEST |COMM_NO_COM_REQUEST_PENDING     |COMM_FULL_COM_NETWORK_REQUESTED |COMM_FULL_COM_READY_SLEEP       |COMM_SILENT_COM                   requested mode: */
; ..\component\ComM\Implementation\ComM.c	   331    {
; ..\component\ComM\Implementation\ComM.c	   332      COMM_MAX_NUMBER_OF_STATES,      COMM_NO_COM_NO_PENDING_REQUEST,  COMM_FULL_COM_READY_SLEEP,       COMM_SILENT_COM,                 COMM_NO_COM_NO_PENDING_REQUEST  /* COMM_NO_COM_NO_PENDING_REQUEST */
; ..\component\ComM\Implementation\ComM.c	   333    },
; ..\component\ComM\Implementation\ComM.c	   334    {
; ..\component\ComM\Implementation\ComM.c	   335      COMM_NO_COM_REQUEST_PENDING,    COMM_MAX_NUMBER_OF_STATES,       COMM_MAX_NUMBER_OF_STATES,       COMM_MAX_NUMBER_OF_STATES,       COMM_MAX_NUMBER_OF_STATES       /* COMM_NO_COM_REQUEST_PENDING */
; ..\component\ComM\Implementation\ComM.c	   336    },
; ..\component\ComM\Implementation\ComM.c	   337    {
; ..\component\ComM\Implementation\ComM.c	   338      COMM_NO_COM_REQUEST_PENDING,    COMM_FULL_COM_NETWORK_REQUESTED, COMM_MAX_NUMBER_OF_STATES,       COMM_FULL_COM_NETWORK_REQUESTED, COMM_FULL_COM_NETWORK_REQUESTED /* COMM_FULL_COM_NETWORK_REQUESTED */
; ..\component\ComM\Implementation\ComM.c	   339    },
; ..\component\ComM\Implementation\ComM.c	   340    {
; ..\component\ComM\Implementation\ComM.c	   341      COMM_NO_COM_REQUEST_PENDING,    COMM_FULL_COM_READY_SLEEP,       COMM_FULL_COM_READY_SLEEP,       COMM_MAX_NUMBER_OF_STATES,       COMM_FULL_COM_READY_SLEEP       /* COMM_FULL_COM_READY_SLEEP */
; ..\component\ComM\Implementation\ComM.c	   342    },
; ..\component\ComM\Implementation\ComM.c	   343    {
; ..\component\ComM\Implementation\ComM.c	   344      COMM_MAX_NUMBER_OF_STATES,      COMM_MAX_NUMBER_OF_STATES,       COMM_FULL_COM_READY_SLEEP,       COMM_SILENT_COM,                 COMM_MAX_NUMBER_OF_STATES       /* COMM_SILENT_COM */
; ..\component\ComM\Implementation\ComM.c	   345    }
; ..\component\ComM\Implementation\ComM.c	   346  };
; ..\component\ComM\Implementation\ComM.c	   347  
; ..\component\ComM\Implementation\ComM.c	   348  #define COMM_STOP_SEC_CONST_8BIT
; ..\component\ComM\Implementation\ComM.c	   349  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   350  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   351  
; ..\component\ComM\Implementation\ComM.c	   352  #define COMM_START_SEC_CONST_UNSPECIFIED
; ..\component\ComM\Implementation\ComM.c	   353  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   354  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   355  
; ..\component\ComM\Implementation\ComM.c	   356  /*! ComM transition action table [requested][active], the element ComM_TF_No_Action means that no transition is defined for the active/requested combination. */
; ..\component\ComM\Implementation\ComM.c	   357  /* PRQA S 3218 1 */ /* MD_ComM_3218 */
; ..\component\ComM\Implementation\ComM.c	   358  COMM_LOCAL CONST(ComM_TransitionFunctionType, COMM_CONST) ComM_TransitionFctTable[COMM_MAX_NUMBER_OF_STATES][COMM_MAX_NUMBER_OF_STATES] =
; ..\component\ComM\Implementation\ComM.c	   359  {/* COMM_NO_COM_NO_PENDING_REQUEST |COMM_NO_COM_REQUEST_PENDING  |COMM_FULL_COM_NETWORK_REQUESTED |COMM_FULL_COM_READY_SLEEP |COMM_SILENT_COM                  requested mode: */
; ..\component\ComM\Implementation\ComM.c	   360    {
; ..\component\ComM\Implementation\ComM.c	   361      ComM_TF_No_Transition,          ComM_TF_No_Action,            ComM_TF_NetReq_ReadyS,           ComM_TF_Full_SiCom,        ComM_TF_SiCom_NoCom           /* COMM_NO_COM_NO_PENDING_REQUEST */
; ..\component\ComM\Implementation\ComM.c	   362    },
; ..\component\ComM\Implementation\ComM.c	   363    {
; ..\component\ComM\Implementation\ComM.c	   364      ComM_TF_No_Action,              ComM_TF_No_Transition,        ComM_TF_No_Transition,           ComM_TF_No_Transition,     ComM_TF_No_Transition         /* COMM_NO_COM_REQUEST_PENDING */
; ..\component\ComM\Implementation\ComM.c	   365    },
; ..\component\ComM\Implementation\ComM.c	   366    {
; ..\component\ComM\Implementation\ComM.c	   367      ComM_TF_No_Action,              ComM_TF_NoCom_NetReq,         ComM_TF_No_Transition,           ComM_TF_ReadyS_NetReq,     ComM_TF_NoCom_NetReq          /* COMM_FULL_COM_NETWORK_REQUESTED */
; ..\component\ComM\Implementation\ComM.c	   368    },
; ..\component\ComM\Implementation\ComM.c	   369    {
; ..\component\ComM\Implementation\ComM.c	   370      ComM_TF_No_Action,              ComM_TF_NoCom_FullReadySleep, ComM_TF_NetReq_ReadyS,           ComM_TF_No_Transition,     ComM_TF_NoCom_FullReadySleep  /* COMM_FULL_COM_READY_SLEEP */
; ..\component\ComM\Implementation\ComM.c	   371    },
; ..\component\ComM\Implementation\ComM.c	   372    {
; ..\component\ComM\Implementation\ComM.c	   373      ComM_TF_No_Transition,          ComM_TF_No_Transition,        ComM_TF_NetReq_ReadyS,           ComM_TF_Full_SiCom,        ComM_TF_No_Transition         /* COMM_SILENT_COM */
; ..\component\ComM\Implementation\ComM.c	   374    }
; ..\component\ComM\Implementation\ComM.c	   375  };
; ..\component\ComM\Implementation\ComM.c	   376  
; ..\component\ComM\Implementation\ComM.c	   377  #define COMM_STOP_SEC_CONST_UNSPECIFIED
; ..\component\ComM\Implementation\ComM.c	   378  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   379  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   380  
; ..\component\ComM\Implementation\ComM.c	   381  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   382   *  GLOBAL DATA
; ..\component\ComM\Implementation\ComM.c	   383   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   384  
; ..\component\ComM\Implementation\ComM.c	   385  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   386   *  LOCAL DATA PROTOTYPES
; ..\component\ComM\Implementation\ComM.c	   387   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   388  
; ..\component\ComM\Implementation\ComM.c	   389  #define COMM_START_SEC_VAR_ZERO_INIT_8BIT
; ..\component\ComM\Implementation\ComM.c	   390  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   391  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   392  /*! Initialization state of ComM */
; ..\component\ComM\Implementation\ComM.c	   393  COMM_LOCAL VAR(ComM_InitStatusType, COMM_VAR_ZERO_INIT)   ComM_InitStatus = COMM_UNINIT;
; ..\component\ComM\Implementation\ComM.c	   394  #define COMM_STOP_SEC_VAR_ZERO_INIT_8BIT
; ..\component\ComM\Implementation\ComM.c	   395  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   396  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   397  
; ..\component\ComM\Implementation\ComM.c	   398  #define COMM_START_SEC_VAR_NOINIT_8BIT
; ..\component\ComM\Implementation\ComM.c	   399  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   400  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   401  
; ..\component\ComM\Implementation\ComM.c	   402  /*! Communication state of a channel provided by BusSM */
; ..\component\ComM\Implementation\ComM.c	   403  COMM_LOCAL VAR(uint8, COMM_VAR_NOINIT)                    ComM_BusSmState[COMM_ACTIVE_CHANNEL];
; ..\component\ComM\Implementation\ComM.c	   404  
; ..\component\ComM\Implementation\ComM.c	   405  #if ( COMM_USERMODENOTIFUNC == STD_ON )
; ..\component\ComM\Implementation\ComM.c	   406  # if ( COMM_USERMODENOTIFUNC_PNC_USER_ONLY == STD_OFF )
; ..\component\ComM\Implementation\ComM.c	   407  /*! If BusSM indicates a change of communication state of a channel, this variable stores the new state and
; ..\component\ComM\Implementation\ComM.c	   408   * is used to trigger a mode notification to all users mapped to this channel. As soon as mode notification
; ..\component\ComM\Implementation\ComM.c	   409   * was carried out the default value COMM_NO_STATE_CHANGE is stored. */
; ..\component\ComM\Implementation\ComM.c	   410  COMM_LOCAL VAR(uint8, COMM_VAR_NOINIT)                    ComM_StateChange[COMM_ACTIVE_CHANNEL];
; ..\component\ComM\Implementation\ComM.c	   411  # endif
; ..\component\ComM\Implementation\ComM.c	   412  
; ..\component\ComM\Implementation\ComM.c	   413  # if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   414  /*! The flag signals, if a mode notification to PNC users is needed due to a PNC state change.
; ..\component\ComM\Implementation\ComM.c	   415   * TRUE - a PNC changed the state from FULL_COM to NO_COM or vice versa or the last mode notification failed,
; ..\component\ComM\Implementation\ComM.c	   416   * FALSE (default) - no PNC state changes to be notified and the last mode notification was successful. */
; ..\component\ComM\Implementation\ComM.c	   417  COMM_LOCAL VAR(boolean, COMM_VAR_NOINIT)                  ComM_NotifyPncStateChange;
; ..\component\ComM\Implementation\ComM.c	   418  # endif
; ..\component\ComM\Implementation\ComM.c	   419  #endif
; ..\component\ComM\Implementation\ComM.c	   420  
; ..\component\ComM\Implementation\ComM.c	   421  #if (COMM_NVM_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   422  /*! TRUE if data has to be stored in NvM after mode limitation status has changed */
; ..\component\ComM\Implementation\ComM.c	   423  COMM_LOCAL VAR(boolean, COMM_VAR_NOINIT)                  ComM_NvMStoreReq;
; ..\component\ComM\Implementation\ComM.c	   424  #endif
; ..\component\ComM\Implementation\ComM.c	   425  
; ..\component\ComM\Implementation\ComM.c	   426  /*! Communication allowed status of a channel */
; ..\component\ComM\Implementation\ComM.c	   427  COMM_LOCAL VAR(boolean, COMM_VAR_NOINIT)                  ComM_ComAllowed[COMM_ACTIVE_CHANNEL];
; ..\component\ComM\Implementation\ComM.c	   428  
; ..\component\ComM\Implementation\ComM.c	   429  /*! Current state of a channel */
; ..\component\ComM\Implementation\ComM.c	   430  COMM_LOCAL VAR(ComM_StateType, COMM_VAR_NOINIT)           ComM_ActiveComMode[COMM_ACTIVE_CHANNEL];
; ..\component\ComM\Implementation\ComM.c	   431  /*! State requested externally (bus) */
; ..\component\ComM\Implementation\ComM.c	   432  COMM_LOCAL VAR(ComM_StateType, COMM_VAR_NOINIT)           ComM_BusComModeReq[COMM_ACTIVE_CHANNEL];
; ..\component\ComM\Implementation\ComM.c	   433  
; ..\component\ComM\Implementation\ComM.c	   434  #if (COMM_BUS_TYPE_FR_PRESENT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   435  /*! TRUE if communication shutdown is ongoing on a Flexray channel */
; ..\component\ComM\Implementation\ComM.c	   436  COMM_LOCAL VAR(boolean, COMM_VAR_NOINIT)                  ComM_FrShutdown[COMM_ACTIVE_CHANNEL];
; ..\component\ComM\Implementation\ComM.c	   437  /*! State requested externally (bus) while shutdown is ongoing on a Flexray channel */
; ..\component\ComM\Implementation\ComM.c	   438  COMM_LOCAL VAR(ComM_StateType, COMM_VAR_NOINIT)           ComM_BusComModeReqFrShutdown[COMM_ACTIVE_CHANNEL];
; ..\component\ComM\Implementation\ComM.c	   439  #endif
; ..\component\ComM\Implementation\ComM.c	   440  
; ..\component\ComM\Implementation\ComM.c	   441  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   442  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   443  /*! Bit flags describing the current PNC Routing state per channel */
; ..\component\ComM\Implementation\ComM.c	   444  COMM_LOCAL VAR(uint8, COMM_VAR_NOINIT)                    ComM_PncToChannelRoutingState[COMM_ACTIVE_CHANNEL];
; ..\component\ComM\Implementation\ComM.c	   445  # endif
; ..\component\ComM\Implementation\ComM.c	   446  #endif
; ..\component\ComM\Implementation\ComM.c	   447  
; ..\component\ComM\Implementation\ComM.c	   448  #define COMM_STOP_SEC_VAR_NOINIT_8BIT
; ..\component\ComM\Implementation\ComM.c	   449  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   450  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   451  
; ..\component\ComM\Implementation\ComM.c	   452  #define COMM_START_SEC_VAR_SAVED_ZONE0_UNSPECIFIED
; ..\component\ComM\Implementation\ComM.c	   453   /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   454  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   455  
; ..\component\ComM\Implementation\ComM.c	   456  /*! Status of mode limitation (inhibition) */
; ..\component\ComM\Implementation\ComM.c	   457  VAR(ComM_InhibitionType, COMM_NVM_DATA)                   ComM_Inhibition;
; ..\component\ComM\Implementation\ComM.c	   458  
; ..\component\ComM\Implementation\ComM.c	   459  #define COMM_STOP_SEC_VAR_SAVED_ZONE0_UNSPECIFIED
; ..\component\ComM\Implementation\ComM.c	   460   /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   461  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   462  
; ..\component\ComM\Implementation\ComM.c	   463  #if (COMM_USE_INIT_POINTER == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   464  # define COMM_START_SEC_VAR_ZERO_INIT_UNSPECIFIED
; ..\component\ComM\Implementation\ComM.c	   465  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   466  # include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   467  
; ..\component\ComM\Implementation\ComM.c	   468  /*! Pointer to the current configuration */
; ..\component\ComM\Implementation\ComM.c	   469  /* PRQA S 3218 1 */ /* MD_ComM_3218 */
; ..\component\ComM\Implementation\ComM.c	   470  P2CONST(ComM_ConfigType, AUTOMATIC, COMM_INIT_DATA)       ComM_ConfigPtr = NULL_PTR; /* UREQ00035484 */
; ..\component\ComM\Implementation\ComM.c	   471  
; ..\component\ComM\Implementation\ComM.c	   472  # define COMM_STOP_SEC_VAR_ZERO_INIT_UNSPECIFIED
; ..\component\ComM\Implementation\ComM.c	   473  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   474  # include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   475  #endif /* (COMM_USE_INIT_POINTER == STD_ON) */
; ..\component\ComM\Implementation\ComM.c	   476  
; ..\component\ComM\Implementation\ComM.c	   477  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   478    LOCAL FUNCTION PROTOTYPES
; ..\component\ComM\Implementation\ComM.c	   479  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   480  #define COMM_START_SEC_CODE
; ..\component\ComM\Implementation\ComM.c	   481  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	   482  #include "MemMap.h"
; ..\component\ComM\Implementation\ComM.c	   483  
; ..\component\ComM\Implementation\ComM.c	   484  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   485    ComM_CalculateHighestComMode()
; ..\component\ComM\Implementation\ComM.c	   486  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   487  /*! \brief      Calculates the target highest communication mode of a channel by using the 'highest win' strategy
; ..\component\ComM\Implementation\ComM.c	   488   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   489   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   490   *  \param[out] internalRequest         set to TRUE if an internal request via user, Dcm or coordinated PNC exists on the channel
; ..\component\ComM\Implementation\ComM.c	   491   *  \return     The target highest communication mode of a channel
; ..\component\ComM\Implementation\ComM.c	   492   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   493   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   494   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   495   *  \trace      SPEC-5379, SPEC-5255, SPEC-5462, SPEC-19856, SPEC-19846, SPEC-5413, SPEC-5454, SPEC-5475, SPEC-5457,
; ..\component\ComM\Implementation\ComM.c	   496   *  \trace      SPEC-5426, SPEC-5111, SPEC-5138, SPEC-5080, SPEC-5085
; ..\component\ComM\Implementation\ComM.c	   497   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   498  COMM_LOCAL FUNC(ComM_StateType, COMM_CODE) ComM_CalculateHighestComMode( NetworkHandleType channel, boolean *internalRequest );
; ..\component\ComM\Implementation\ComM.c	   499  
; ..\component\ComM\Implementation\ComM.c	   500  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   501    ComM_ChannelStateTransition()
; ..\component\ComM\Implementation\ComM.c	   502  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   503  /*! \brief      Performs a state transition on the given channel according to the target (highest requested) mode.
; ..\component\ComM\Implementation\ComM.c	   504   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   505   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   506   *  \param[in]  highestComModeReq       the target state of the transition, the highest requested mode
; ..\component\ComM\Implementation\ComM.c	   507   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   508   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   509   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   510   *  \trace      SPEC-5483, SPEC-5472, SPEC-5479, SPEC-5463, SPEC-5469, SPEC-5474, SPEC-5397
; ..\component\ComM\Implementation\ComM.c	   511   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   512  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_ChannelStateTransition( NetworkHandleType channel, ComM_StateType highestComModeReq );
; ..\component\ComM\Implementation\ComM.c	   513  
; ..\component\ComM\Implementation\ComM.c	   514  #if (COMM_NMSUPPORTOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   515  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   516    ComM_ProcessPassiveWakeUp()
; ..\component\ComM\Implementation\ComM.c	   517  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   518  /*! \brief      Stores the states requested by bus (externally) after a Passive Wake-up occurred
; ..\component\ComM\Implementation\ComM.c	   519   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   520   *  \param[in]  channel                 local channel handle where the wake-up event occurred
; ..\component\ComM\Implementation\ComM.c	   521   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   522   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   523   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   524   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   525  COMM_LOCAL FUNC(void, COMM_CODE) ComM_ProcessPassiveWakeUp( NetworkHandleType channel );
; ..\component\ComM\Implementation\ComM.c	   526  #endif
; ..\component\ComM\Implementation\ComM.c	   527  
; ..\component\ComM\Implementation\ComM.c	   528  #if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   529  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   530    ComM_IsUserRequestingChannel()
; ..\component\ComM\Implementation\ComM.c	   531  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   532  /*! \brief      Determines if a user is requesting the channel.
; ..\component\ComM\Implementation\ComM.c	   533   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   534   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   535   *  \return     TRUE                    a channel user requests FULL_COM or a PNC user requests FULL_COM (if PNC coordination is disabled).
; ..\component\ComM\Implementation\ComM.c	   536   *  \return     FALSE                   otherwise.
; ..\component\ComM\Implementation\ComM.c	   537   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   538   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   539   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   540   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   541  COMM_LOCAL_INLINE FUNC(boolean, COMM_CODE) ComM_IsUserRequestingChannel( NetworkHandleType channel );
; ..\component\ComM\Implementation\ComM.c	   542  #endif
; ..\component\ComM\Implementation\ComM.c	   543  
; ..\component\ComM\Implementation\ComM.c	   544  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   545    ComM_ChannelIsRequestPending()
; ..\component\ComM\Implementation\ComM.c	   546  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   547  /*! \brief      Determines if a pending communication request exists on the channel. The function checks all communication
; ..\component\ComM\Implementation\ComM.c	   548   *              requests that can occur in NO_COM mode: user requests and passive wake-ups. EIRA/ERA and Dcm requests are
; ..\component\ComM\Implementation\ComM.c	   549   *              not relevant because they can occur only if communication is on.
; ..\component\ComM\Implementation\ComM.c	   550   *  \details    The function is used by EcuM fixed and by BswM to evaluate the channel state before a sleep/shutdown.
; ..\component\ComM\Implementation\ComM.c	   551   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   552   *  \return     TRUE                    a passive wake-up occurred or a channel or PNC is requesting FULL_COM
; ..\component\ComM\Implementation\ComM.c	   553   *  \return     FALSE                   otherwise
; ..\component\ComM\Implementation\ComM.c	   554   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   555   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   556   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   557   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   558  COMM_LOCAL_INLINE FUNC(boolean, COMM_CODE) ComM_ChannelIsRequestPending(NetworkHandleType channel);
; ..\component\ComM\Implementation\ComM.c	   559  
; ..\component\ComM\Implementation\ComM.c	   560  #if ((COMM_MINFULLCOMTIMEOFCHANNEL == STD_ON) || (COMM_NMLIGHTDURATIONOFCHANNEL == STD_ON) || (COMM_NMLIGHTSILENTDURATIONOFCHANNEL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	   561  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   562    ComM_ChannelHandleTimers()
; ..\component\ComM\Implementation\ComM.c	   563  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   564  /*! \brief      Handles Minimum FULL_COM mode timer and Nm Light timer of the channel
; ..\component\ComM\Implementation\ComM.c	   565   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   566   *  \param[in]  channel                 local channel handler
; ..\component\ComM\Implementation\ComM.c	   567   *  \param[in]  internalRequest         TRUE an internal request via user, Dcm or coordinated PNC exists on the channel
; ..\component\ComM\Implementation\ComM.c	   568   *                                      FALSE otherwise
; ..\component\ComM\Implementation\ComM.c	   569   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   570   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   571   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   572   *  \trace      SPEC-47932, SPEC-5395, SPEC-5396
; ..\component\ComM\Implementation\ComM.c	   573   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   574  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_ChannelHandleTimers( NetworkHandleType channel, boolean internalRequest );
; ..\component\ComM\Implementation\ComM.c	   575  #endif
; ..\component\ComM\Implementation\ComM.c	   576  
; ..\component\ComM\Implementation\ComM.c	   577  #if (COMM_EXTENDED_RAM_CHECK == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   578  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   579    ComM_ChannelGetMaxStateAfterExtRamCheck()
; ..\component\ComM\Implementation\ComM.c	   580  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   581  /*! \brief      Provides the highest possible state according to the result of Extended RAM Check.
; ..\component\ComM\Implementation\ComM.c	   582   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   583   *  \param[in]  channel                 local channel handler
; ..\component\ComM\Implementation\ComM.c	   584   *  \param[in]  targetState             target communication state
; ..\component\ComM\Implementation\ComM.c	   585   *  \return     COMM_NO_COM_NO_PENDING_REQUEST if Extended RAM Check status was CANSM_DISABLE_COMMUNICATION
; ..\component\ComM\Implementation\ComM.c	   586   *  \return     COMM_NO_COM_REQUEST_PENDING if Extended RAM Check status was CANSM_DISABLE_COMMUNICATION_REPEAT
; ..\component\ComM\Implementation\ComM.c	   587   *  \return     targetState otherwise
; ..\component\ComM\Implementation\ComM.c	   588   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   589   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   590   *  \reentrant  TRUE
; ..\component\ComM\Implementation\ComM.c	   591   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   592  COMM_LOCAL_INLINE FUNC(ComM_StateType, COMM_CODE) ComM_ChannelGetMaxStateAfterExtRamCheck( NetworkHandleType channel, ComM_StateType targetState );
; ..\component\ComM\Implementation\ComM.c	   593  #endif
; ..\component\ComM\Implementation\ComM.c	   594  
; ..\component\ComM\Implementation\ComM.c	   595  #if (COMM_PNC_ACTIVE_COORD == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   596  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   597    ComM_PncGetGwChannelRequest()
; ..\component\ComM\Implementation\ComM.c	   598  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   599  /*! \brief      Calculates the requested state of the PN gateway channel depending on its Gateway Type and the highest requested mode of the PNCs
; ..\component\ComM\Implementation\ComM.c	   600   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   601   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   602   *  \return     The requested state of the PN gateway channel
; ..\component\ComM\Implementation\ComM.c	   603   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   604   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   605   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   606   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   607  COMM_LOCAL_INLINE FUNC( ComM_StateType, COMM_CODE ) ComM_PncGetGwChannelRequest( NetworkHandleType channel );
; ..\component\ComM\Implementation\ComM.c	   608  #endif
; ..\component\ComM\Implementation\ComM.c	   609  
; ..\component\ComM\Implementation\ComM.c	   610  #if (COMM_PNC_ACTIVE_COORD == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   611  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   612    ComM_PncGetGwChannelState()
; ..\component\ComM\Implementation\ComM.c	   613  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   614  /*! \brief      Calculates the target state of a PN gateway channel depending on its Gateway Type and the requested PNC mode
; ..\component\ComM\Implementation\ComM.c	   615   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   616   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   617   *  \param[in]  highestPNComModeReq     the requested PNC mode
; ..\component\ComM\Implementation\ComM.c	   618   *  \return     The target state of the PN gateway channel
; ..\component\ComM\Implementation\ComM.c	   619   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   620   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   621   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   622   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   623  COMM_LOCAL_INLINE FUNC( ComM_StateType, COMM_CODE ) ComM_PncGetGwChannelState( NetworkHandleType channel, ComM_PncModeType highestPNComModeReq );
; ..\component\ComM\Implementation\ComM.c	   624  #endif
; ..\component\ComM\Implementation\ComM.c	   625  
; ..\component\ComM\Implementation\ComM.c	   626  #if ((COMM_PNC_SUPPORT == STD_ON) && (COMM_PNCCHANNELMAPPING == STD_ON))
; ..\component\ComM\Implementation\ComM.c	   627  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   628    ComM_PncInFullComWakesUpTheChannel()
; ..\component\ComM\Implementation\ComM.c	   629  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   630  /*! \brief      Determines if at least one PNC on the channel is in PNC_FULL_COMMUNICATION mode.
; ..\component\ComM\Implementation\ComM.c	   631   *  \details    The function shall not be used if Partial Network Coordination Limitation is enabled, it does not take
; ..\component\ComM\Implementation\ComM.c	   632   *              the limitation status of the channel into account.
; ..\component\ComM\Implementation\ComM.c	   633   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   634   *  \param[in]  highestRequest   the current highest channel request
; ..\component\ComM\Implementation\ComM.c	   635   *  \return     COMM_FULL_COM_READY_SLEEP if the current highest request is COMM_NO_COM_NO_PENDING_REQUEST and at least
; ..\component\ComM\Implementation\ComM.c	   636   *              one PNC on this channel is in PNC_FULL_COMMUNICATION mode. Otherwise highestRequest (no changes).
; ..\component\ComM\Implementation\ComM.c	   637   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   638   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   639   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   640   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   641  COMM_LOCAL_INLINE FUNC(ComM_StateType, COMM_CODE) ComM_PncInFullComWakesUpTheChannel(NetworkHandleType channel, ComM_StateType highestRequest);
; ..\component\ComM\Implementation\ComM.c	   642  #endif
; ..\component\ComM\Implementation\ComM.c	   643  
; ..\component\ComM\Implementation\ComM.c	   644  #if (COMM_WAKEUP_INHIBITION == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   645  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   646    ComM_PreventWakeUpActive()
; ..\component\ComM\Implementation\ComM.c	   647  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   648  /*! \brief      Determines whether Prevent Wake-up is active on the channel.
; ..\component\ComM\Implementation\ComM.c	   649   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   650   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   651   *  \return     TRUE                    Prevent Wake-up is active on the channel
; ..\component\ComM\Implementation\ComM.c	   652   *  \return     FALSE                   otherwise
; ..\component\ComM\Implementation\ComM.c	   653   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   654   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   655   *  \reentrant  TRUE
; ..\component\ComM\Implementation\ComM.c	   656   *  \trace      SPEC-5140, SPEC-5131
; ..\component\ComM\Implementation\ComM.c	   657   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   658  COMM_LOCAL FUNC(boolean, COMM_CODE) ComM_PreventWakeUpActive( NetworkHandleType channel );
; ..\component\ComM\Implementation\ComM.c	   659  #endif
; ..\component\ComM\Implementation\ComM.c	   660  
; ..\component\ComM\Implementation\ComM.c	   661  #if ((COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON) && (COMM_MODE_LIMITATION == STD_ON) && ( COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF ))
; ..\component\ComM\Implementation\ComM.c	   662  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   663    ComM_NoComLimitationActive()
; ..\component\ComM\Implementation\ComM.c	   664  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   665  /*! \brief      Determines whether Mode Limitation NO_COM is active on the channel.
; ..\component\ComM\Implementation\ComM.c	   666   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   667   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   668   *  \return     TRUE                    Mode Limitation to NO_COM is active on the channel
; ..\component\ComM\Implementation\ComM.c	   669   *  \return     FALSE                   otherwise
; ..\component\ComM\Implementation\ComM.c	   670   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   671   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   672   *  \reentrant  TRUE
; ..\component\ComM\Implementation\ComM.c	   673   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   674  COMM_LOCAL FUNC(boolean, COMM_CODE) ComM_NoComLimitationActive( NetworkHandleType channel );
; ..\component\ComM\Implementation\ComM.c	   675  #endif
; ..\component\ComM\Implementation\ComM.c	   676  
; ..\component\ComM\Implementation\ComM.c	   677  #if ((COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON) && (((COMM_MODE_LIMITATION == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF)) || (COMM_WAKEUP_INHIBITION == STD_ON)))
; ..\component\ComM\Implementation\ComM.c	   678  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   679    ComM_ChannelIsLimited()
; ..\component\ComM\Implementation\ComM.c	   680  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   681  /*! \brief      Determines whether Mode Limitation NO_COM or Prevent Wake-up is active on the channel.
; ..\component\ComM\Implementation\ComM.c	   682   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   683   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   684   *  \return     TRUE                    Mode Limitation NO_COM or Prevent Wake-up is active on the channel
; ..\component\ComM\Implementation\ComM.c	   685   *  \return     FALSE                   otherwise
; ..\component\ComM\Implementation\ComM.c	   686   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   687   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   688   *  \reentrant  TRUE
; ..\component\ComM\Implementation\ComM.c	   689   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   690  COMM_LOCAL_INLINE FUNC( boolean, COMM_CODE) ComM_ChannelIsLimited( NetworkHandleType channel );
; ..\component\ComM\Implementation\ComM.c	   691  #endif
; ..\component\ComM\Implementation\ComM.c	   692  
; ..\component\ComM\Implementation\ComM.c	   693  #if (COMM_RESETAFTERFORCINGNOCOMMOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   694  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   695    ComM_ChannelResetAfterForcingNoComm()
; ..\component\ComM\Implementation\ComM.c	   696  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   697  /*!
; ..\component\ComM\Implementation\ComM.c	   698   * \brief       Initiates a reset after all channels entered NO_COM and at least one channel has an active Mode Limitation
; ..\component\ComM\Implementation\ComM.c	   699   *              and Reset After Forcing NO_COM enabled.
; ..\component\ComM\Implementation\ComM.c	   700   * \details     -
; ..\component\ComM\Implementation\ComM.c	   701   * \param[in]   -
; ..\component\ComM\Implementation\ComM.c	   702   * \pre         -
; ..\component\ComM\Implementation\ComM.c	   703   * \context     ANY
; ..\component\ComM\Implementation\ComM.c	   704   * \reentrant   TRUE
; ..\component\ComM\Implementation\ComM.c	   705   * \synchronous TRUE
; ..\component\ComM\Implementation\ComM.c	   706   * \trace       CREQ-116030
; ..\component\ComM\Implementation\ComM.c	   707   * \trace       SPEC-2818113
; ..\component\ComM\Implementation\ComM.c	   708   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   709  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_ChannelResetAfterForcingNoComm( void );
; ..\component\ComM\Implementation\ComM.c	   710  #endif
; ..\component\ComM\Implementation\ComM.c	   711  
; ..\component\ComM\Implementation\ComM.c	   712  #if ( COMM_USERMODENOTIFUNC == STD_ON )
; ..\component\ComM\Implementation\ComM.c	   713  # if ( COMM_USERMODENOTIFUNC_PNC_USER_ONLY == STD_OFF )
; ..\component\ComM\Implementation\ComM.c	   714  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   715    ComM_StateChangeNotification()
; ..\component\ComM\Implementation\ComM.c	   716  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   717  /*! \brief      Called if BusSM mode has changed on the channel. It notifies users about a mode change if applicable.
; ..\component\ComM\Implementation\ComM.c	   718   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   719   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   720   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   721   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   722   *  \reentrant  TRUE
; ..\component\ComM\Implementation\ComM.c	   723   *  \trace      CREQ-1269
; ..\component\ComM\Implementation\ComM.c	   724   *  \trace      SPEC-5098, SPEC-19802, SPEC-5266
; ..\component\ComM\Implementation\ComM.c	   725   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   726  COMM_LOCAL FUNC(void, COMM_CODE) ComM_StateChangeNotification( NetworkHandleType channel );
; ..\component\ComM\Implementation\ComM.c	   727  # endif
; ..\component\ComM\Implementation\ComM.c	   728  #endif
; ..\component\ComM\Implementation\ComM.c	   729  
; ..\component\ComM\Implementation\ComM.c	   730  #if( COMM_FULL_COMM_REQUEST_NOTIF == STD_ON )
; ..\component\ComM\Implementation\ComM.c	   731  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   732    ComM_CurrentChannelRequestUpdate()
; ..\component\ComM\Implementation\ComM.c	   733  *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   734  /*! \brief      This function updates the set of ComM users currently requesting FULL_COM for the channel.
; ..\component\ComM\Implementation\ComM.c	   735   *  \details    The set is stored in the static variable ComM_FullComRequesters[]. Then it calls
; ..\component\ComM\Implementation\ComM.c	   736   *              ComM_CurrentChannelRequestNotification which detects if the set has changed and notifies RTE via the
; ..\component\ComM\Implementation\ComM.c	   737   *              optional sender-receiver interface 'ComM_CurrentChannelRequest'.
; ..\component\ComM\Implementation\ComM.c	   738   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   739   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   740   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   741   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   742   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   743  COMM_LOCAL FUNC(void, COMM_CODE) ComM_CurrentChannelRequestUpdate( NetworkHandleType channel );
; ..\component\ComM\Implementation\ComM.c	   744  #endif
; ..\component\ComM\Implementation\ComM.c	   745  
; ..\component\ComM\Implementation\ComM.c	   746  #if ( COMM_PNC_SUPPORT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	   747  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   748    ComM_PncInit()
; ..\component\ComM\Implementation\ComM.c	   749  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   750  /*! \brief      Initialization of PNC related data.
; ..\component\ComM\Implementation\ComM.c	   751   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   752   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   753   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   754   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   755   *  \trace      SPEC-19845, SPEC-19781
; ..\component\ComM\Implementation\ComM.c	   756   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   757  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_PncInit(void);
; ..\component\ComM\Implementation\ComM.c	   758  
; ..\component\ComM\Implementation\ComM.c	   759  # if (COMM_PNCCHANNELMAPPING == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   760  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   761    ComM_PncModeArbitration()
; ..\component\ComM\Implementation\ComM.c	   762  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   763  /*! \brief      Determines if a PNC mapped to the channel has to perform a state transition or not and initiates
; ..\component\ComM\Implementation\ComM.c	   764   *              a state transition if so.
; ..\component\ComM\Implementation\ComM.c	   765   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   766   *  \param[in]  channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   767   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   768   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   769   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   770   *  \trace      SPEC-19808
; ..\component\ComM\Implementation\ComM.c	   771   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   772  COMM_LOCAL FUNC(void, COMM_CODE) ComM_PncModeArbitration( NetworkHandleType channel );
; ..\component\ComM\Implementation\ComM.c	   773  # endif
; ..\component\ComM\Implementation\ComM.c	   774  
; ..\component\ComM\Implementation\ComM.c	   775  # if (COMM_PNC_EXTENDED_FUNCTIONALITY_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   776  #  if (COMM_PNC_EXISTS_PNC_WITHOUT_CHANNELS == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   777  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   778    ComM_PncModeArbitrationWithoutChannels()
; ..\component\ComM\Implementation\ComM.c	   779  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   780  /*! \brief      Determines if a PNC without channels has to perform a state transition or not and initiates
; ..\component\ComM\Implementation\ComM.c	   781   *              a state transition if so.
; ..\component\ComM\Implementation\ComM.c	   782   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   783   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   784   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   785   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   786   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   787  COMM_LOCAL FUNC(void, COMM_CODE) ComM_PncModeArbitrationWithoutChannels(void);
; ..\component\ComM\Implementation\ComM.c	   788  #  endif
; ..\component\ComM\Implementation\ComM.c	   789  # endif
; ..\component\ComM\Implementation\ComM.c	   790  
; ..\component\ComM\Implementation\ComM.c	   791  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   792    ComM_PncStateTransition()
; ..\component\ComM\Implementation\ComM.c	   793  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   794  /*! \brief      Performs state transitions to reach the target requested PNC state.
; ..\component\ComM\Implementation\ComM.c	   795   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   796   *  \param[in]  ComM_CurrentPn          local PNC handle
; ..\component\ComM\Implementation\ComM.c	   797   *  \param[in]  highestComModeReq       the target requested PNC state
; ..\component\ComM\Implementation\ComM.c	   798   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   799   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   800   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   801   *  \trace      SPEC-19784, SPEC-19803, SPEC-19878, SPEC-19865, SPEC-19815
; ..\component\ComM\Implementation\ComM.c	   802   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   803  COMM_LOCAL FUNC(void, COMM_CODE) ComM_PncStateTransition( ComM_PncIterType ComM_CurrentPn, ComM_PncModeType highestComModeReq );
; ..\component\ComM\Implementation\ComM.c	   804  
; ..\component\ComM\Implementation\ComM.c	   805  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   806  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   807    ComM_PncIsOnlySystemUserRequesting()
; ..\component\ComM\Implementation\ComM.c	   808  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   809  /*! \brief      Determines whether only the system user is requesting the PNC (via ERA) or regular PNC user.
; ..\component\ComM\Implementation\ComM.c	   810   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   811   *  \param[in]  pncIndex                local PNC handle
; ..\component\ComM\Implementation\ComM.c	   812   *  \param[in]  byteIndex               byte index of UserReqPncFullCom
; ..\component\ComM\Implementation\ComM.c	   813   *  \return     TRUE                    if in the given request byte only the system user request is stored and no other PNC user request.
; ..\component\ComM\Implementation\ComM.c	   814   *  \return     FALSE                   if at least one PNC user (not the system user) stored the request in the given byte.
; ..\component\ComM\Implementation\ComM.c	   815   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   816   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   817   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   818   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   819  COMM_LOCAL_INLINE FUNC( boolean, COMM_CODE) ComM_PncIsOnlySystemUserRequesting( ComM_PncIterType pncIndex, ComM_UserReqPncFullComIterType byteIndex );
; ..\component\ComM\Implementation\ComM.c	   820  
; ..\component\ComM\Implementation\ComM.c	   821  #  if (COMM_PNC_EXISTS_GATEWAY_TYPE_ACTIVE == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   822  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   823    ComM_PncIsEraReceivedOnActiveChannel()
; ..\component\ComM\Implementation\ComM.c	   824  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   825  /*! \brief      Determines whether a request is received via ERA on a channel with GW type ACTIVE. This is needed to
; ..\component\ComM\Implementation\ComM.c	   826   *              calculate the target PNC state.
; ..\component\ComM\Implementation\ComM.c	   827   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   828   *  \param[in]  pncIndex                local PNC handle
; ..\component\ComM\Implementation\ComM.c	   829   *  \return     TRUE                    if at least one request is received via ERA on a channel with GW type ACTIVE
; ..\component\ComM\Implementation\ComM.c	   830   *  \return     FALSE                   otherwise.
; ..\component\ComM\Implementation\ComM.c	   831   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   832   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   833   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   834   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   835  COMM_LOCAL_INLINE FUNC( boolean, COMM_CODE) ComM_PncIsEraReceivedOnActiveChannel( ComM_PncIterType pncIndex );
; ..\component\ComM\Implementation\ComM.c	   836  #  endif
; ..\component\ComM\Implementation\ComM.c	   837  # endif
; ..\component\ComM\Implementation\ComM.c	   838  
; ..\component\ComM\Implementation\ComM.c	   839  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   840    ComM_CalculateHighestPNComMode()
; ..\component\ComM\Implementation\ComM.c	   841  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   842  /*! \brief      Calculates the highest communication mode request for the PNC.
; ..\component\ComM\Implementation\ComM.c	   843   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   844   *  \param[in]  pncIndex                local PNC handle
; ..\component\ComM\Implementation\ComM.c	   845   *  \param[in]  pncCanBeRequested       The parameter is only used if PNC Routing Limitation feature is active
; ..\component\ComM\Implementation\ComM.c	   846   *                                      TRUE: PNC is allowed to enter PNC_REQUESTED state, Routing Limitation is disabled on at least one channel
; ..\component\ComM\Implementation\ComM.c	   847   *                                      FALSE: otherwise, ComM inhibits all FULL_COM requests to the PNC
; ..\component\ComM\Implementation\ComM.c	   848   *  \return     Highest requested PNC mode
; ..\component\ComM\Implementation\ComM.c	   849   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   850   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   851   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   852   *  \trace      SPEC-2818028, SPEC-2818290, SPEC-19872, SPEC-19786, SPEC-19866, SPEC-19806, SPEC-19857, SPEC-2818042,
; ..\component\ComM\Implementation\ComM.c	   853   *  \trace      SPEC-19838, SPEC-19785, SPEC-19853
; ..\component\ComM\Implementation\ComM.c	   854   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   855  COMM_LOCAL FUNC(ComM_PncModeType, COMM_CODE) ComM_CalculateHighestPNComMode( ComM_PncIterType pncIndex, boolean pncCanBeRequested );
; ..\component\ComM\Implementation\ComM.c	   856  
; ..\component\ComM\Implementation\ComM.c	   857  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   858  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   859    ComM_PncRoutingLimitationHandleChannels()
; ..\component\ComM\Implementation\ComM.c	   860  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   861  /*! \brief      Special handling (attaching and detaching) of channels while PNC is in state PNC_REQUESTED.
; ..\component\ComM\Implementation\ComM.c	   862   *  \details    If the feature 'PNC To Channel Routing Limitation' is activated, channels can be attached or detached
; ..\component\ComM\Implementation\ComM.c	   863   *              while PNC is in state PNC_REQUESTED by de-activating or activating the limitation. Here we ensure that:
; ..\component\ComM\Implementation\ComM.c	   864   *              1) if the channel has been attached to PNC, EIRA with PNC bit = 1 is sent out or
; ..\component\ComM\Implementation\ComM.c	   865   *              2) if the channel has been detached from PNC, EIRA with PNC bit = 0 is sent out on the channel.
; ..\component\ComM\Implementation\ComM.c	   866   *              Note: attaching when entering NM_REPEAT_MESSAGE state is handled in ComM_Nm_StateChangeNotification().
; ..\component\ComM\Implementation\ComM.c	   867   *              Note: function ComM_PncModeSendSignal() cannot be used because it handles all PNC channels.
; ..\component\ComM\Implementation\ComM.c	   868   *  \param[in]  InternalPncId           local PNC handle
; ..\component\ComM\Implementation\ComM.c	   869   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   870   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   871   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   872   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   873  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_PncRoutingLimitationHandleChannels( ComM_PncIterType InternalPncId );
; ..\component\ComM\Implementation\ComM.c	   874  
; ..\component\ComM\Implementation\ComM.c	   875  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   876    ComM_PncIsEraRequestReceivedOnChannel()
; ..\component\ComM\Implementation\ComM.c	   877  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   878  /*! \brief      Determines if at least one PNC is requested via ERA_RX signal received on the given channel
; ..\component\ComM\Implementation\ComM.c	   879   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   880   *  \param[in]  Channel                 local channel handle
; ..\component\ComM\Implementation\ComM.c	   881   *  \return     TRUE                    if at least one PNC is requested via ERA_RX signal received on the given channel
; ..\component\ComM\Implementation\ComM.c	   882   *  \return     FALSE                   otherwise
; ..\component\ComM\Implementation\ComM.c	   883   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   884   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   885   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   886   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   887  COMM_LOCAL FUNC( boolean, COMM_CODE ) ComM_PncIsEraRequestReceivedOnChannel( NetworkHandleType Channel );
; ..\component\ComM\Implementation\ComM.c	   888  
; ..\component\ComM\Implementation\ComM.c	   889  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   890    ComM_PncRoutingLimitationSetState()
; ..\component\ComM\Implementation\ComM.c	   891  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   892  /*! \brief      Updates the PNC Routing Limitation state depending on input parameters highestPNComModeReq and pncRequestIsPending
; ..\component\ComM\Implementation\ComM.c	   893   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   894   *  \param[in]  channel              -   local channel handle
; ..\component\ComM\Implementation\ComM.c	   895   *  \param[in]  highestPNComModeReq  -   the highest requested mode of Pncs mapped to the channel
; ..\component\ComM\Implementation\ComM.c	   896   *  \param[in]  pncRequestIsPending  -   TRUE - at least one FULL_COM request for a PNC mapped to the channel exists
; ..\component\ComM\Implementation\ComM.c	   897   *                                      FALSE - otherwise
; ..\component\ComM\Implementation\ComM.c	   898   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   899   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   900   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   901   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   902  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_PncRoutingLimitationSetState( CONST(NetworkHandleType, AUTOMATIC) channel, CONST(ComM_PncModeType, AUTOMATIC) highestPNComModeReq, CONST(boolean, AUTOMATIC) pncRequestIsPending );
; ..\component\ComM\Implementation\ComM.c	   903  # endif
; ..\component\ComM\Implementation\ComM.c	   904  
; ..\component\ComM\Implementation\ComM.c	   905  # if (COMM_PNC_PS_TIMER > 0U)
; ..\component\ComM\Implementation\ComM.c	   906  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   907    ComM_HandlePncPrepareSleepTimer()
; ..\component\ComM\Implementation\ComM.c	   908  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   909  /*! \brief      Decrements the PNC Prepare Sleep Timer for all PNCs and updates the bus-side request if the timer has expired.
; ..\component\ComM\Implementation\ComM.c	   910   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   911   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   912   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   913   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   914   *  \trace      CREQ-109081
; ..\component\ComM\Implementation\ComM.c	   915   *  \trace      SPEC-19889
; ..\component\ComM\Implementation\ComM.c	   916   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   917  COMM_LOCAL FUNC(void, COMM_CODE) ComM_HandlePncPrepareSleepTimer( void );
; ..\component\ComM\Implementation\ComM.c	   918  # endif
; ..\component\ComM\Implementation\ComM.c	   919  
; ..\component\ComM\Implementation\ComM.c	   920  # if (COMM_EXISTS_EIRA_TX_TYPEOFPNCSIGNAL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	   921  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   922    ComM_PncModeSendSignal()
; ..\component\ComM\Implementation\ComM.c	   923  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   924  /*! \brief      Processing of EIRA_TX transmission requests. The function is available if at least one EIRA_TX signal is present.
; ..\component\ComM\Implementation\ComM.c	   925   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   926   *  \param[in]  PncHandle               internal PNC index to send EIRA TX signals for
; ..\component\ComM\Implementation\ComM.c	   927   *  \param[in]  activeState             Defines the value of PNC bit in the COM signal to be sent:
; ..\component\ComM\Implementation\ComM.c	   928   *                                      TRUE - PNC entered PNC_REQUESTED state, PNC bit = 1
; ..\component\ComM\Implementation\ComM.c	   929   *                                      FALSE - PNC left PNC_REQUESTED state, PNC bit = 0
; ..\component\ComM\Implementation\ComM.c	   930   *  \param[in]  SigSendType             Defines the target GW type of channels where COM signal shall be sent:
; ..\component\ComM\Implementation\ComM.c	   931   *                                      COMM_SEND_ACTIVE_SIG_ONLY - send only on channels with GW type ACTIVE
; ..\component\ComM\Implementation\ComM.c	   932   *                                      COMM_SEND_PASSIVE_SIG_ONLY - send only on channels with GW type PASSIVE
; ..\component\ComM\Implementation\ComM.c	   933   *                                      COMM_SEND_ALL_SIG - send on all channels, this is to be used if PNC Gateway feature is disabled.
; ..\component\ComM\Implementation\ComM.c	   934   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   935   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   936   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   937   *  \trace      SPEC-19783, SPEC-19817, SPEC-19801
; ..\component\ComM\Implementation\ComM.c	   938   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   939  COMM_LOCAL FUNC(void, COMM_CODE) ComM_PncModeSendSignal( ComM_PncIterType PncHandle, boolean activeState, uint8 SigSendType );
; ..\component\ComM\Implementation\ComM.c	   940  # endif
; ..\component\ComM\Implementation\ComM.c	   941  
; ..\component\ComM\Implementation\ComM.c	   942  # if ( COMM_USERMODENOTIFUNC == STD_ON )
; ..\component\ComM\Implementation\ComM.c	   943  /***********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   944   *  ComM_PncStateChangeNotification()
; ..\component\ComM\Implementation\ComM.c	   945   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   946  /*! \brief      Notifies ComM user about a PNC main state change. If more than one PNC is assigned to a user, notify the lowest
; ..\component\ComM\Implementation\ComM.c	   947   *              PNC state if it has changed since the last notification.
; ..\component\ComM\Implementation\ComM.c	   948   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   949   *  \return     E_OK                    user notification is successful
; ..\component\ComM\Implementation\ComM.c	   950   *  \return     E_NOT_OK                otherwise
; ..\component\ComM\Implementation\ComM.c	   951   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   952   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   953   *  \reentrant  FALSE
; ..\component\ComM\Implementation\ComM.c	   954   *  \trace      CREQ-1269
; ..\component\ComM\Implementation\ComM.c	   955   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   956  COMM_LOCAL FUNC(Std_ReturnType, COMM_CODE) ComM_PncStateChangeNotification( void );
; ..\component\ComM\Implementation\ComM.c	   957  # endif
; ..\component\ComM\Implementation\ComM.c	   958  
; ..\component\ComM\Implementation\ComM.c	   959  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   960    ComM_PncSetBitInSignal()
; ..\component\ComM\Implementation\ComM.c	   961  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   962  /*! \brief      Sets PNC bit in the signal to 1.
; ..\component\ComM\Implementation\ComM.c	   963   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   964   *  \param[in]  InternalSignalId        internal signal handle where to set the PNC bit
; ..\component\ComM\Implementation\ComM.c	   965   *  \param[in]  InternalPncId           internal PNC handle
; ..\component\ComM\Implementation\ComM.c	   966   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   967   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   968   *  \reentrant  TRUE
; ..\component\ComM\Implementation\ComM.c	   969   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   970  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_PncSetBitInSignal( ComM_SizeOfPncSignalType InternalSignalId, ComM_PncIterType InternalPncId );
; ..\component\ComM\Implementation\ComM.c	   971  
; ..\component\ComM\Implementation\ComM.c	   972  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   973    ComM_PncClearBitInSignal()
; ..\component\ComM\Implementation\ComM.c	   974  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   975  /*! \brief      Sets PNC bit in the signal to 0.
; ..\component\ComM\Implementation\ComM.c	   976   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   977   *  \param[in]  InternalSignalId        internal signal handle where to set the PNC bit
; ..\component\ComM\Implementation\ComM.c	   978   *  \param[in]  InternalPncId           internal PNC handle
; ..\component\ComM\Implementation\ComM.c	   979   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   980   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   981   *  \reentrant  TRUE
; ..\component\ComM\Implementation\ComM.c	   982   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   983  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_PncClearBitInSignal( ComM_SizeOfPncSignalType InternalSignalId, ComM_PncIterType InternalPncId );
; ..\component\ComM\Implementation\ComM.c	   984  
; ..\component\ComM\Implementation\ComM.c	   985  
; ..\component\ComM\Implementation\ComM.c	   986  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	   987    ComM_PncClearWakeup()
; ..\component\ComM\Implementation\ComM.c	   988  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   989  /*! \brief      Clears the PNC wakeup flag.
; ..\component\ComM\Implementation\ComM.c	   990   *  \details    -
; ..\component\ComM\Implementation\ComM.c	   991   *  \param[in]  ComM_CurrentPn        Current PNC
; ..\component\ComM\Implementation\ComM.c	   992   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	   993   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	   994   *  \reentrant  TRUE
; ..\component\ComM\Implementation\ComM.c	   995  *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	   996  COMM_LOCAL FUNC(void, COMM_CODE) ComM_PncClearWakeup(ComM_PncIterType ComM_CurrentPn);
; ..\component\ComM\Implementation\ComM.c	   997  #endif
; ..\component\ComM\Implementation\ComM.c	   998  
; ..\component\ComM\Implementation\ComM.c	   999  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1000  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1001    ComM_InitCheckGeneratedData()
; ..\component\ComM\Implementation\ComM.c	  1002  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1003  /*! \brief      Checks generated data for correctness.
; ..\component\ComM\Implementation\ComM.c	  1004   *  \details    -
; ..\component\ComM\Implementation\ComM.c	  1005   *  \return     COMM_E_NO_ERROR             check is successful
; ..\component\ComM\Implementation\ComM.c	  1006   *  \return     COMM_E_WRONG_GENERATED_DATA otherwise
; ..\component\ComM\Implementation\ComM.c	  1007   *  \pre        -
; ..\component\ComM\Implementation\ComM.c	  1008   *  \context    TASK
; ..\component\ComM\Implementation\ComM.c	  1009   *  \reentrant  TRUE
; ..\component\ComM\Implementation\ComM.c	  1010   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1011  COMM_LOCAL_INLINE FUNC(uint8, COMM_CODE) ComM_InitCheckGeneratedData(void);
; ..\component\ComM\Implementation\ComM.c	  1012  #endif
; ..\component\ComM\Implementation\ComM.c	  1013  
; ..\component\ComM\Implementation\ComM.c	  1014  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1015    LOCAL FUNCTIONS
; ..\component\ComM\Implementation\ComM.c	  1016  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1017  
; ..\component\ComM\Implementation\ComM.c	  1018  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1019  /***********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1020   *  ComM_PncStateTransition()
; ..\component\ComM\Implementation\ComM.c	  1021   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1022  /*!
; ..\component\ComM\Implementation\ComM.c	  1023   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  1024   *
; ..\component\ComM\Implementation\ComM.c	  1025   *
; ..\component\ComM\Implementation\ComM.c	  1026   *
; ..\component\ComM\Implementation\ComM.c	  1027   *
; ..\component\ComM\Implementation\ComM.c	  1028   *
; ..\component\ComM\Implementation\ComM.c	  1029   *
; ..\component\ComM\Implementation\ComM.c	  1030   *
; ..\component\ComM\Implementation\ComM.c	  1031   *
; ..\component\ComM\Implementation\ComM.c	  1032   *
; ..\component\ComM\Implementation\ComM.c	  1033   *
; ..\component\ComM\Implementation\ComM.c	  1034   *
; ..\component\ComM\Implementation\ComM.c	  1035   *
; ..\component\ComM\Implementation\ComM.c	  1036   *
; ..\component\ComM\Implementation\ComM.c	  1037   *
; ..\component\ComM\Implementation\ComM.c	  1038   */
; ..\component\ComM\Implementation\ComM.c	  1039  COMM_LOCAL FUNC(void, COMM_CODE) ComM_PncStateTransition( ComM_PncIterType ComM_CurrentPn, ComM_PncModeType highestComModeReq )
; ..\component\ComM\Implementation\ComM.c	  1040  {
; ..\component\ComM\Implementation\ComM.c	  1041    /* #10 If the highest requested PNC mode differs from the currently active PNC mode, perform as many
; ..\component\ComM\Implementation\ComM.c	  1042     * state transitions as needed to reach the highest requested PNC mode.
; ..\component\ComM\Implementation\ComM.c	  1043     *     1) Send COM signal if entering or leaving PNC Requested state,
; ..\component\ComM\Implementation\ComM.c	  1044     *     2) Set the new PNC state,
; ..\component\ComM\Implementation\ComM.c	  1045     *     3) Notify BswM about the new PNC state (BusSM states of channels are not considered),
; ..\component\ComM\Implementation\ComM.c	  1046     *     4) Handle PNC Prepare Sleep Timer if applicable,
; ..\component\ComM\Implementation\ComM.c	  1047     *     5) Store a flag to notify PNC users about the new state if entering or leaving PNC Full Communication mode. */
; ..\component\ComM\Implementation\ComM.c	  1048    ComM_PncModeType localhighestComModeReq = highestComModeReq;
; ..\component\ComM\Implementation\ComM.c	  1049    do
; ..\component\ComM\Implementation\ComM.c	  1050    {
; ..\component\ComM\Implementation\ComM.c	  1051      /* #20 PNC shall stay in Prepare Sleep state if PNC Prepare Sleep timer is running. */
; ..\component\ComM\Implementation\ComM.c	  1052  # if (COMM_PNC_PS_TIMER > 0U)
; ..\component\ComM\Implementation\ComM.c	  1053      if ((ComM_GetPncPSleepTimer(ComM_CurrentPn) > 0u) && (localhighestComModeReq <= COMM_PNC_PREPARE_SLEEP))
; ..\component\ComM\Implementation\ComM.c	  1054      {
; ..\component\ComM\Implementation\ComM.c	  1055        localhighestComModeReq = COMM_PNC_PREPARE_SLEEP;
; ..\component\ComM\Implementation\ComM.c	  1056      }
; ..\component\ComM\Implementation\ComM.c	  1057  # endif
; ..\component\ComM\Implementation\ComM.c	  1058  
; ..\component\ComM\Implementation\ComM.c	  1059      if (localhighestComModeReq != ComM_GetActivePncComMode(ComM_CurrentPn))
; ..\component\ComM\Implementation\ComM.c	  1060      {
; ..\component\ComM\Implementation\ComM.c	  1061        switch (ComM_GetActivePncComMode(ComM_CurrentPn))
; ..\component\ComM\Implementation\ComM.c	  1062        {
; ..\component\ComM\Implementation\ComM.c	  1063        /* #30 State transition from COMM_PNC_NO_COMMUNICATION state. */
; ..\component\ComM\Implementation\ComM.c	  1064        case COMM_PNC_NO_COMMUNICATION:
; ..\component\ComM\Implementation\ComM.c	  1065          switch (localhighestComModeReq)
; ..\component\ComM\Implementation\ComM.c	  1066          {
; ..\component\ComM\Implementation\ComM.c	  1067          /* COMM_PNC_NO_COMMUNICATION -> COMM_PNC_REQUESTED */
; ..\component\ComM\Implementation\ComM.c	  1068          case COMM_PNC_REQUESTED:
; ..\component\ComM\Implementation\ComM.c	  1069  # if (COMM_EXISTS_EIRA_TX_TYPEOFPNCSIGNAL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1070            ComM_PncModeSendSignal(ComM_CurrentPn, TRUE, COMM_SEND_ALL_SIG);
; ..\component\ComM\Implementation\ComM.c	  1071  # endif
; ..\component\ComM\Implementation\ComM.c	  1072  
; ..\component\ComM\Implementation\ComM.c	  1073            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_REQUESTED); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1074            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_REQUESTED);
; ..\component\ComM\Implementation\ComM.c	  1075  # if ( COMM_USERMODENOTIFUNC == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  1076            ComM_NotifyPncStateChange = TRUE;
; ..\component\ComM\Implementation\ComM.c	  1077  # endif
; ..\component\ComM\Implementation\ComM.c	  1078            ComM_PncClearWakeup(ComM_CurrentPn);
; ..\component\ComM\Implementation\ComM.c	  1079            break;
; ..\component\ComM\Implementation\ComM.c	  1080  
; ..\component\ComM\Implementation\ComM.c	  1081          /* COMM_PNC_NO_COMMUNICATION -> COMM_PNC_REQUESTED_PASSIVE */
; ..\component\ComM\Implementation\ComM.c	  1082  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1083          case COMM_PNC_REQUESTED_PASSIVE:
; ..\component\ComM\Implementation\ComM.c	  1084            ComM_PncModeSendSignal(ComM_CurrentPn, TRUE, COMM_SEND_ACTIVE_SIG_ONLY);
; ..\component\ComM\Implementation\ComM.c	  1085            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_REQUESTED_PASSIVE); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1086            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_REQUESTED);
; ..\component\ComM\Implementation\ComM.c	  1087  #  if ( COMM_USERMODENOTIFUNC == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  1088            ComM_NotifyPncStateChange = TRUE;
; ..\component\ComM\Implementation\ComM.c	  1089  #  endif
; ..\component\ComM\Implementation\ComM.c	  1090            ComM_PncClearWakeup(ComM_CurrentPn);
; ..\component\ComM\Implementation\ComM.c	  1091            break;
; ..\component\ComM\Implementation\ComM.c	  1092  # endif
; ..\component\ComM\Implementation\ComM.c	  1093  
; ..\component\ComM\Implementation\ComM.c	  1094          /* COMM_PNC_NO_COMMUNICATION -> COMM_PNC_READY_SLEEP */
; ..\component\ComM\Implementation\ComM.c	  1095          case COMM_PNC_READY_SLEEP:
; ..\component\ComM\Implementation\ComM.c	  1096            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_READY_SLEEP); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1097            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_READY_SLEEP);
; ..\component\ComM\Implementation\ComM.c	  1098  # if ( COMM_USERMODENOTIFUNC == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  1099            ComM_NotifyPncStateChange = TRUE;
; ..\component\ComM\Implementation\ComM.c	  1100  # endif
; ..\component\ComM\Implementation\ComM.c	  1101            break;
; ..\component\ComM\Implementation\ComM.c	  1102  
; ..\component\ComM\Implementation\ComM.c	  1103          /* COMM_PNC_NO_COMMUNICATION -> COMM_PNC_PREPARE_SLEEP */
; ..\component\ComM\Implementation\ComM.c	  1104  # if ((COMM_PNC_PS_TIMER > 0U) && ((COMM_SYNCHRONOUS_WAKE_UP == STD_ON) || (COMM_WAKEUPENABLEDOFPNC == STD_ON)))
; ..\component\ComM\Implementation\ComM.c	  1105          case COMM_PNC_PREPARE_SLEEP:
; ..\component\ComM\Implementation\ComM.c	  1106            /* Note: it is ensured that transition is only performed if COMM_PNC_PS_TIMER > 0 and
; ..\component\ComM\Implementation\ComM.c	  1107             * (COMM_SYNCHRONOUS_WAKE_UP == STD_ON or COMM_WAKEUPENABLEDOFPNC == STD_ON) */
; ..\component\ComM\Implementation\ComM.c	  1108            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_PREPARE_SLEEP); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1109            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_PREPARE_SLEEP);
; ..\component\ComM\Implementation\ComM.c	  1110            ComM_SetPncPSleepTimer(ComM_CurrentPn, COMM_PNC_PS_TIMER); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1111  #  if ( COMM_USERMODENOTIFUNC == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  1112            ComM_NotifyPncStateChange = TRUE;
; ..\component\ComM\Implementation\ComM.c	  1113  #  endif
; ..\component\ComM\Implementation\ComM.c	  1114            break;
; ..\component\ComM\Implementation\ComM.c	  1115  # endif
; ..\component\ComM\Implementation\ComM.c	  1116          default: /* COV_COMM_MISRA */
; ..\component\ComM\Implementation\ComM.c	  1117            break;
; ..\component\ComM\Implementation\ComM.c	  1118          }
; ..\component\ComM\Implementation\ComM.c	  1119          break;
; ..\component\ComM\Implementation\ComM.c	  1120  
; ..\component\ComM\Implementation\ComM.c	  1121        /* #40 State transition from COMM_PNC_PREPARE_SLEEP state. */
; ..\component\ComM\Implementation\ComM.c	  1122  # if (COMM_PNC_PS_TIMER > 0U)
; ..\component\ComM\Implementation\ComM.c	  1123        case COMM_PNC_PREPARE_SLEEP:
; ..\component\ComM\Implementation\ComM.c	  1124          switch (localhighestComModeReq)
; ..\component\ComM\Implementation\ComM.c	  1125          {
; ..\component\ComM\Implementation\ComM.c	  1126          /* COMM_PNC_PREPARE_SLEEP -> COMM_PNC_REQUESTED */
; ..\component\ComM\Implementation\ComM.c	  1127          case COMM_PNC_REQUESTED:
; ..\component\ComM\Implementation\ComM.c	  1128  #  if (COMM_EXISTS_EIRA_TX_TYPEOFPNCSIGNAL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1129            ComM_PncModeSendSignal(ComM_CurrentPn, TRUE, COMM_SEND_ALL_SIG);
; ..\component\ComM\Implementation\ComM.c	  1130  #  endif
; ..\component\ComM\Implementation\ComM.c	  1131            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_REQUESTED); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1132            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_REQUESTED);
; ..\component\ComM\Implementation\ComM.c	  1133            break;
; ..\component\ComM\Implementation\ComM.c	  1134  
; ..\component\ComM\Implementation\ComM.c	  1135          /* COMM_PNC_PREPARE_SLEEP -> COMM_PNC_REQUESTED_PASSIVE */
; ..\component\ComM\Implementation\ComM.c	  1136  #  if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1137          case COMM_PNC_REQUESTED_PASSIVE:
; ..\component\ComM\Implementation\ComM.c	  1138            ComM_PncModeSendSignal(ComM_CurrentPn, TRUE, COMM_SEND_ACTIVE_SIG_ONLY);
; ..\component\ComM\Implementation\ComM.c	  1139            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_REQUESTED_PASSIVE); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1140            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_REQUESTED);
; ..\component\ComM\Implementation\ComM.c	  1141            break;
; ..\component\ComM\Implementation\ComM.c	  1142  #  endif
; ..\component\ComM\Implementation\ComM.c	  1143  
; ..\component\ComM\Implementation\ComM.c	  1144          /* COMM_PNC_PREPARE_SLEEP -> COMM_PNC_READY_SLEEP */
; ..\component\ComM\Implementation\ComM.c	  1145          case COMM_PNC_READY_SLEEP:
; ..\component\ComM\Implementation\ComM.c	  1146            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_READY_SLEEP); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1147            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_READY_SLEEP);
; ..\component\ComM\Implementation\ComM.c	  1148            break;
; ..\component\ComM\Implementation\ComM.c	  1149  
; ..\component\ComM\Implementation\ComM.c	  1150          /* COMM_PNC_PREPARE_SLEEP -> COMM_PNC_NO_COMMUNICATION */
; ..\component\ComM\Implementation\ComM.c	  1151          case COMM_PNC_NO_COMMUNICATION:
; ..\component\ComM\Implementation\ComM.c	  1152            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_NO_COMMUNICATION); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1153            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_NO_COMMUNICATION);
; ..\component\ComM\Implementation\ComM.c	  1154  #  if ( COMM_USERMODENOTIFUNC == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  1155            ComM_NotifyPncStateChange = TRUE;
; ..\component\ComM\Implementation\ComM.c	  1156  #  endif
; ..\component\ComM\Implementation\ComM.c	  1157            break;
; ..\component\ComM\Implementation\ComM.c	  1158  
; ..\component\ComM\Implementation\ComM.c	  1159          default: /* COV_COMM_MISRA */
; ..\component\ComM\Implementation\ComM.c	  1160            break;
; ..\component\ComM\Implementation\ComM.c	  1161          }
; ..\component\ComM\Implementation\ComM.c	  1162  
; ..\component\ComM\Implementation\ComM.c	  1163          /* When leaving COMM_PNC_PREPARE_SLEEP state, always stop the timer and reset ComM_BusPncComModeReq[]
; ..\component\ComM\Implementation\ComM.c	  1164          if no EIRA = 1 signal received for the PNC. Needed e.g. in case PNC is not considered by Nm filter mask.
; ..\component\ComM\Implementation\ComM.c	  1165          Possible scenario: Synchronous Wake-up, FULL_COM request, NO_COM request. In this case highestComModeReq
; ..\component\ComM\Implementation\ComM.c	  1166          shall be COMM_PNC_NO_COMMUNICATION and PNC shall enter COMM_PNC_PREPARE_SLEEP. (ESCAN00077600). */
; ..\component\ComM\Implementation\ComM.c	  1167          ComM_SetPncPSleepTimer(ComM_CurrentPn, 0); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1168          ComM_PncClearWakeup(ComM_CurrentPn);
; ..\component\ComM\Implementation\ComM.c	  1169          break;
; ..\component\ComM\Implementation\ComM.c	  1170  # endif
; ..\component\ComM\Implementation\ComM.c	  1171  
; ..\component\ComM\Implementation\ComM.c	  1172        /* #50 State transition from COMM_PNC_READY_SLEEP state. */
; ..\component\ComM\Implementation\ComM.c	  1173        case COMM_PNC_READY_SLEEP:
; ..\component\ComM\Implementation\ComM.c	  1174          switch (localhighestComModeReq)
; ..\component\ComM\Implementation\ComM.c	  1175          {
; ..\component\ComM\Implementation\ComM.c	  1176          /* COMM_PNC_READY_SLEEP -> COMM_PNC_REQUESTED */
; ..\component\ComM\Implementation\ComM.c	  1177          case COMM_PNC_REQUESTED:
; ..\component\ComM\Implementation\ComM.c	  1178  # if (COMM_EXISTS_EIRA_TX_TYPEOFPNCSIGNAL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1179            ComM_PncModeSendSignal(ComM_CurrentPn, TRUE, COMM_SEND_ALL_SIG);
; ..\component\ComM\Implementation\ComM.c	  1180  # endif
; ..\component\ComM\Implementation\ComM.c	  1181            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_REQUESTED); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1182            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_REQUESTED);
; ..\component\ComM\Implementation\ComM.c	  1183            break;
; ..\component\ComM\Implementation\ComM.c	  1184  
; ..\component\ComM\Implementation\ComM.c	  1185          /* COMM_PNC_READY_SLEEP -> COMM_PNC_REQUESTED_PASSIVE, if COMM_PNC_ACTIVE_COORD == STD_ON */
; ..\component\ComM\Implementation\ComM.c	  1186  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1187          case COMM_PNC_REQUESTED_PASSIVE:
; ..\component\ComM\Implementation\ComM.c	  1188            ComM_PncModeSendSignal(ComM_CurrentPn, TRUE, COMM_SEND_ACTIVE_SIG_ONLY);
; ..\component\ComM\Implementation\ComM.c	  1189            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_REQUESTED_PASSIVE); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1190            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_REQUESTED);
; ..\component\ComM\Implementation\ComM.c	  1191            break;
; ..\component\ComM\Implementation\ComM.c	  1192  # endif
; ..\component\ComM\Implementation\ComM.c	  1193  
; ..\component\ComM\Implementation\ComM.c	  1194          case COMM_PNC_NO_COMMUNICATION:
; ..\component\ComM\Implementation\ComM.c	  1195  # if(COMM_PNC_PS_TIMER > 0U)
; ..\component\ComM\Implementation\ComM.c	  1196          case COMM_PNC_PREPARE_SLEEP:
; ..\component\ComM\Implementation\ComM.c	  1197  # endif
; ..\component\ComM\Implementation\ComM.c	  1198            /* Always indicate COMM_PNC_PREPARE_SLEEP to BswM, even if the state is omitted in case COMM_PNC_PS_TIMER == 0. */
; ..\component\ComM\Implementation\ComM.c	  1199            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_PREPARE_SLEEP);
; ..\component\ComM\Implementation\ComM.c	  1200  
; ..\component\ComM\Implementation\ComM.c	  1201  # if (COMM_PNC_PS_TIMER == 0U)
; ..\component\ComM\Implementation\ComM.c	  1202            /* Special case if COMM_PNC_PREPARE_SLEEP == 0: COMM_PNC_READY_SLEEP -> COMM_PNC_NO_COMMUNICATION (ESCAN00067357) */
; ..\component\ComM\Implementation\ComM.c	  1203            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_NO_COMMUNICATION); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1204            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_NO_COMMUNICATION);
; ..\component\ComM\Implementation\ComM.c	  1205  #   if ( COMM_USERMODENOTIFUNC == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  1206            ComM_NotifyPncStateChange = TRUE;
; ..\component\ComM\Implementation\ComM.c	  1207  #   endif
; ..\component\ComM\Implementation\ComM.c	  1208  # else  /* COMM_PNC_PS_TIMER > 0 */
; ..\component\ComM\Implementation\ComM.c	  1209            /* COMM_PNC_READY_SLEEP -> COMM_PNC_PREPARE_SLEEP */
; ..\component\ComM\Implementation\ComM.c	  1210            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_PREPARE_SLEEP); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1211            ComM_SetPncPSleepTimer(ComM_CurrentPn, COMM_PNC_PS_TIMER); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1212  # endif /* COMM_PNC_PS_TIMER */
; ..\component\ComM\Implementation\ComM.c	  1213            break;
; ..\component\ComM\Implementation\ComM.c	  1214  
; ..\component\ComM\Implementation\ComM.c	  1215          default: /* COV_COMM_MISRA */
; ..\component\ComM\Implementation\ComM.c	  1216            break;
; ..\component\ComM\Implementation\ComM.c	  1217          }
; ..\component\ComM\Implementation\ComM.c	  1218          break;
; ..\component\ComM\Implementation\ComM.c	  1219  
; ..\component\ComM\Implementation\ComM.c	  1220  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1221        /* #60 State transition from COMM_PNC_REQUESTED_PASSIVE state. */
; ..\component\ComM\Implementation\ComM.c	  1222        case COMM_PNC_REQUESTED_PASSIVE:
; ..\component\ComM\Implementation\ComM.c	  1223          if(localhighestComModeReq == COMM_PNC_REQUESTED)
; ..\component\ComM\Implementation\ComM.c	  1224          {
; ..\component\ComM\Implementation\ComM.c	  1225            /* COMM_PNC_REQUESTED_PASSIVE -> COMM_PNC_REQUESTED, if COMM_PNC_ACTIVE_COORD == STD_ON */
; ..\component\ComM\Implementation\ComM.c	  1226            ComM_PncModeSendSignal(ComM_CurrentPn, TRUE, COMM_SEND_PASSIVE_SIG_ONLY);
; ..\component\ComM\Implementation\ComM.c	  1227            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_REQUESTED); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1228          }
; ..\component\ComM\Implementation\ComM.c	  1229          else
; ..\component\ComM\Implementation\ComM.c	  1230          {
; ..\component\ComM\Implementation\ComM.c	  1231            /* COMM_PNC_REQUESTED_PASSIVE -> COMM_PNC_READY_SLEEP, if COMM_PNC_ACTIVE_COORD == STD_ON.
; ..\component\ComM\Implementation\ComM.c	  1232            Note: there are only two possible transitions from COMM_PNC_REQUESTED_PASSIVE state, therefore using if..else is ok */
; ..\component\ComM\Implementation\ComM.c	  1233            ComM_PncModeSendSignal(ComM_CurrentPn, FALSE, COMM_SEND_ACTIVE_SIG_ONLY);
; ..\component\ComM\Implementation\ComM.c	  1234            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_READY_SLEEP); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1235            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_READY_SLEEP);
; ..\component\ComM\Implementation\ComM.c	  1236          }
; ..\component\ComM\Implementation\ComM.c	  1237          break;
; ..\component\ComM\Implementation\ComM.c	  1238  # endif
; ..\component\ComM\Implementation\ComM.c	  1239  
; ..\component\ComM\Implementation\ComM.c	  1240        /* #70 State transition from COMM_PNC_REQUESTED state. */
; ..\component\ComM\Implementation\ComM.c	  1241        case COMM_PNC_REQUESTED:
; ..\component\ComM\Implementation\ComM.c	  1242  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1243          if(localhighestComModeReq == COMM_PNC_REQUESTED_PASSIVE)
; ..\component\ComM\Implementation\ComM.c	  1244          {
; ..\component\ComM\Implementation\ComM.c	  1245            /* COMM_PNC_REQUESTED -> COMM_PNC_REQUESTED_PASSIVE, if COMM_PNC_ACTIVE_COORD == STD_ON */
; ..\component\ComM\Implementation\ComM.c	  1246            ComM_PncModeSendSignal(ComM_CurrentPn, FALSE, COMM_SEND_PASSIVE_SIG_ONLY);
; ..\component\ComM\Implementation\ComM.c	  1247            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_REQUESTED_PASSIVE); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1248          }
; ..\component\ComM\Implementation\ComM.c	  1249          else
; ..\component\ComM\Implementation\ComM.c	  1250  # endif
; ..\component\ComM\Implementation\ComM.c	  1251          {
; ..\component\ComM\Implementation\ComM.c	  1252            /* COMM_PNC_REQUESTED -> COMM_PNC_READY_SLEEP
; ..\component\ComM\Implementation\ComM.c	  1253            Note: there are only two possible transitions from COMM_PNC_REQUESTED state, therefore using if..else is ok */
; ..\component\ComM\Implementation\ComM.c	  1254  # if (COMM_EXISTS_EIRA_TX_TYPEOFPNCSIGNAL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1255            ComM_PncModeSendSignal(ComM_CurrentPn, FALSE, COMM_SEND_ALL_SIG);
; ..\component\ComM\Implementation\ComM.c	  1256  # endif
; ..\component\ComM\Implementation\ComM.c	  1257            ComM_SetActivePncComMode(ComM_CurrentPn, COMM_PNC_READY_SLEEP); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1258            BswM_ComM_CurrentPNCMode(ComM_GetPncIdOfPnc(ComM_CurrentPn), COMM_PNC_READY_SLEEP);
; ..\component\ComM\Implementation\ComM.c	  1259          }
; ..\component\ComM\Implementation\ComM.c	  1260          break;
; ..\component\ComM\Implementation\ComM.c	  1261  
; ..\component\ComM\Implementation\ComM.c	  1262        default: /* COV_COMM_MISRA */
; ..\component\ComM\Implementation\ComM.c	  1263          break;
; ..\component\ComM\Implementation\ComM.c	  1264        }
; ..\component\ComM\Implementation\ComM.c	  1265      }
; ..\component\ComM\Implementation\ComM.c	  1266    } while (localhighestComModeReq != ComM_GetActivePncComMode(ComM_CurrentPn));
; ..\component\ComM\Implementation\ComM.c	  1267  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\ComM\Implementation\ComM.c	  1268  #endif
; ..\component\ComM\Implementation\ComM.c	  1269  
; ..\component\ComM\Implementation\ComM.c	  1270  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1271  # if (COMM_PNCCHANNELMAPPING == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1272  /***********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1273   *  ComM_PncModeArbitration()
; ..\component\ComM\Implementation\ComM.c	  1274   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1275  /*!
; ..\component\ComM\Implementation\ComM.c	  1276   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  1277   *
; ..\component\ComM\Implementation\ComM.c	  1278   *
; ..\component\ComM\Implementation\ComM.c	  1279   *
; ..\component\ComM\Implementation\ComM.c	  1280   *
; ..\component\ComM\Implementation\ComM.c	  1281   *
; ..\component\ComM\Implementation\ComM.c	  1282   *
; ..\component\ComM\Implementation\ComM.c	  1283   *
; ..\component\ComM\Implementation\ComM.c	  1284   *
; ..\component\ComM\Implementation\ComM.c	  1285   */
; ..\component\ComM\Implementation\ComM.c	  1286  COMM_LOCAL FUNC(void, COMM_CODE) ComM_PncModeArbitration(NetworkHandleType channel)
; ..\component\ComM\Implementation\ComM.c	  1287  {
; ..\component\ComM\Implementation\ComM.c	  1288    ComM_PncModeType highestComModeReq;
; ..\component\ComM\Implementation\ComM.c	  1289  #  if (COMM_PNC_ACTIVE_COORD == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1290    ComM_PncChannelMappingEndIdxOfPncPbType pncChIndex;
; ..\component\ComM\Implementation\ComM.c	  1291    boolean allCoordinatedChannelsAreInFullCom;
; ..\component\ComM\Implementation\ComM.c	  1292  #   if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1293    boolean pncCanBeRequested;
; ..\component\ComM\Implementation\ComM.c	  1294  #   endif
; ..\component\ComM\Implementation\ComM.c	  1295  #  endif
; ..\component\ComM\Implementation\ComM.c	  1296  
; ..\component\ComM\Implementation\ComM.c	  1297    ComM_PncPbIndIterType pncPbIndIter;
; ..\component\ComM\Implementation\ComM.c	  1298    ComM_PncIterType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  1299  
; ..\component\ComM\Implementation\ComM.c	  1300    for (pncPbIndIter = ComM_GetPncPbIndStartIdxOfChannelPb(channel);
; ..\component\ComM\Implementation\ComM.c	  1301         pncPbIndIter < ComM_GetPncPbIndEndIdxOfChannelPb(channel);
; ..\component\ComM\Implementation\ComM.c	  1302         pncPbIndIter++)
; ..\component\ComM\Implementation\ComM.c	  1303    {
; ..\component\ComM\Implementation\ComM.c	  1304      pncIndex = (ComM_PncIterType)ComM_GetPncPbInd(pncPbIndIter);
; ..\component\ComM\Implementation\ComM.c	  1305  
; ..\component\ComM\Implementation\ComM.c	  1306  #  if (COMM_PNC_ACTIVE_COORD == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1307      allCoordinatedChannelsAreInFullCom = TRUE;
; ..\component\ComM\Implementation\ComM.c	  1308  #   if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1309      pncCanBeRequested = FALSE;
; ..\component\ComM\Implementation\ComM.c	  1310  #   endif
; ..\component\ComM\Implementation\ComM.c	  1311  
; ..\component\ComM\Implementation\ComM.c	  1312      /* #10 If a PNC has channels, a potential state change of the PNC can be performed in context of current channel if
; ..\component\ComM\Implementation\ComM.c	  1313      *     1) the PNC is mapped to the current channel and
; ..\component\ComM\Implementation\ComM.c	  1314      *     2) all coordinated PNC channels are in FULL_COM mode in case PNC Gateway functionality is enabled.
; ..\component\ComM\Implementation\ComM.c	  1315      *     If the feature PNC to Channel Routing Limitation is enabled, only channels without limitation are considered.
; ..\component\ComM\Implementation\ComM.c	  1316      *     E.g. channels with limitation can be in NO_COM mode but PNC can change its state nevertheless. */
; ..\component\ComM\Implementation\ComM.c	  1317      for (pncChIndex = ComM_GetPncChannelMappingStartIdxOfPncPb(pncIndex);
; ..\component\ComM\Implementation\ComM.c	  1318           pncChIndex < ComM_GetPncChannelMappingEndIdxOfPncPb(pncIndex);
; ..\component\ComM\Implementation\ComM.c	  1319           pncChIndex++)
; ..\component\ComM\Implementation\ComM.c	  1320      {
; ..\component\ComM\Implementation\ComM.c	  1321  #   if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1322        /* Example: assume PNC is on CAN1 and CAN2 and routing is limited on CAN1. If PNC is requested, it changes to PNC_REQUESTED
; ..\component\ComM\Implementation\ComM.c	  1323         * as soon as CAN2 is in FULL_COM mode. The mode of CAN1 is not evaluated. */
; ..\component\ComM\Implementation\ComM.c	  1324        if( ComM_PncToChannelRoutingState[ComM_GetPncChannelMapping(pncChIndex)] != COMM_PNCROUTING_LIMITED )
; ..\component\ComM\Implementation\ComM.c	  1325        {
; ..\component\ComM\Implementation\ComM.c	  1326          /* Note: found a channel without Routing Limitation, it will be passed to ComM_CalculateHighestPNComMode() later */
; ..\component\ComM\Implementation\ComM.c	  1327          pncCanBeRequested = TRUE;
; ..\component\ComM\Implementation\ComM.c	  1328  #   endif
; ..\component\ComM\Implementation\ComM.c	  1329          if( (ComM_ActiveComMode[ComM_GetPncChannelMapping(pncChIndex)] & COMM_FULL_COMMUNICATION) == 0u ) /*lint !e539 positive indentation is intended */
; ..\component\ComM\Implementation\ComM.c	  1330          {
; ..\component\ComM\Implementation\ComM.c	  1331            allCoordinatedChannelsAreInFullCom = FALSE;
; ..\component\ComM\Implementation\ComM.c	  1332          }
; ..\component\ComM\Implementation\ComM.c	  1333  #   if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1334        }
; ..\component\ComM\Implementation\ComM.c	  1335  #   endif
; ..\component\ComM\Implementation\ComM.c	  1336      }
; ..\component\ComM\Implementation\ComM.c	  1337  
; ..\component\ComM\Implementation\ComM.c	  1338      /* #20 If a PNC can perform a state transition in the context of the current channel' task, calculate the highest requested mode
; ..\component\ComM\Implementation\ComM.c	  1339       *     of the PNC and perform the corresponding state transition. */
; ..\component\ComM\Implementation\ComM.c	  1340      highestComModeReq = COMM_PNC_NO_COMMUNICATION;
; ..\component\ComM\Implementation\ComM.c	  1341      if (allCoordinatedChannelsAreInFullCom == TRUE)
; ..\component\ComM\Implementation\ComM.c	  1342  #  endif
; ..\component\ComM\Implementation\ComM.c	  1343      {
; ..\component\ComM\Implementation\ComM.c	  1344        /* Note: highestComModeReq shall be COMM_PNC_NO_COMMUNICATION (default) as long as at least one channel is not in FULL_COMM yet.
; ..\component\ComM\Implementation\ComM.c	  1345         * This is to ensure that a state transition (activation) of a coordinated PNC is performed AFTER all assigned channels have entered FULL_COMM. */
; ..\component\ComM\Implementation\ComM.c	  1346  #  if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1347        highestComModeReq = ComM_CalculateHighestPNComMode(pncIndex, pncCanBeRequested);
; ..\component\ComM\Implementation\ComM.c	  1348  #  else
; ..\component\ComM\Implementation\ComM.c	  1349        highestComModeReq = ComM_CalculateHighestPNComMode(pncIndex, TRUE); /* 2nd parameter is not used */
; ..\component\ComM\Implementation\ComM.c	  1350  #  endif
; ..\component\ComM\Implementation\ComM.c	  1351      }
; ..\component\ComM\Implementation\ComM.c	  1352  
; ..\component\ComM\Implementation\ComM.c	  1353      if (highestComModeReq != ComM_GetActivePncComMode(pncIndex))
; ..\component\ComM\Implementation\ComM.c	  1354      {
; ..\component\ComM\Implementation\ComM.c	  1355        ComM_PncStateTransition(pncIndex, highestComModeReq);
; ..\component\ComM\Implementation\ComM.c	  1356      }
; ..\component\ComM\Implementation\ComM.c	  1357  #  if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1358      else if(ComM_GetActivePncComMode(pncIndex) > COMM_PNC_READY_SLEEP)
; ..\component\ComM\Implementation\ComM.c	  1359      {
; ..\component\ComM\Implementation\ComM.c	  1360        ComM_PncRoutingLimitationHandleChannels( pncIndex );
; ..\component\ComM\Implementation\ComM.c	  1361      }
; ..\component\ComM\Implementation\ComM.c	  1362      else
; ..\component\ComM\Implementation\ComM.c	  1363      {
; ..\component\ComM\Implementation\ComM.c	  1364        /* nothing to do */
; ..\component\ComM\Implementation\ComM.c	  1365      }
; ..\component\ComM\Implementation\ComM.c	  1366  #  endif
; ..\component\ComM\Implementation\ComM.c	  1367    } /* Iteration over PNCs */
; ..\component\ComM\Implementation\ComM.c	  1368  
; ..\component\ComM\Implementation\ComM.c	  1369  #  if (COMM_ISDEF_PNCPBINDSTARTIDXOFCHANNELPB == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1370    COMM_DUMMY_STATEMENT_CONST(channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  1371  #  endif
; ..\component\ComM\Implementation\ComM.c	  1372  }
; ..\component\ComM\Implementation\ComM.c	  1373  # endif
; ..\component\ComM\Implementation\ComM.c	  1374  #endif
; ..\component\ComM\Implementation\ComM.c	  1375  
; ..\component\ComM\Implementation\ComM.c	  1376  #if (COMM_PNC_EXTENDED_FUNCTIONALITY_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1377  # if (COMM_PNC_EXISTS_PNC_WITHOUT_CHANNELS == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1378  /***********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1379   *  ComM_PncModeArbitrationWithoutChannels()
; ..\component\ComM\Implementation\ComM.c	  1380   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1381  /*!
; ..\component\ComM\Implementation\ComM.c	  1382   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  1383   *
; ..\component\ComM\Implementation\ComM.c	  1384   *
; ..\component\ComM\Implementation\ComM.c	  1385   *
; ..\component\ComM\Implementation\ComM.c	  1386   *
; ..\component\ComM\Implementation\ComM.c	  1387   *
; ..\component\ComM\Implementation\ComM.c	  1388   */
; ..\component\ComM\Implementation\ComM.c	  1389  COMM_LOCAL FUNC(void, COMM_CODE) ComM_PncModeArbitrationWithoutChannels(void)
; ..\component\ComM\Implementation\ComM.c	  1390  {
; ..\component\ComM\Implementation\ComM.c	  1391    ComM_PncIterType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  1392    ComM_PncModeType highestComModeReq;
; ..\component\ComM\Implementation\ComM.c	  1393  
; ..\component\ComM\Implementation\ComM.c	  1394    /* #10 If Extended PNC Functionality is enabled, a PNC may have no channels assigned. A potential state change of the PNC
; ..\component\ComM\Implementation\ComM.c	  1395     *     is always to be performed in context of Channel 0.
; ..\component\ComM\Implementation\ComM.c	  1396     *     Note: The function is called for Channel 0 even if it is disabled in the current variant. However, it is not necessary
; ..\component\ComM\Implementation\ComM.c	  1397     *     to check ComM_IsEnabledOfChannel, because no PNC will be assigned to such a disabled channel. */
; ..\component\ComM\Implementation\ComM.c	  1398    for (pncIndex = 0; pncIndex < ComM_GetSizeOfPnc(); pncIndex++)
; ..\component\ComM\Implementation\ComM.c	  1399    {
; ..\component\ComM\Implementation\ComM.c	  1400  # if (COMM_PNCCHANNELMAPPING == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1401      if (ComM_GetPncChannelMappingStartIdxOfPncPb(pncIndex) == COMM_NO_PNCCHANNELMAPPINGSTARTIDXOFPNCPB)
; ..\component\ComM\Implementation\ComM.c	  1402  # endif
; ..\component\ComM\Implementation\ComM.c	  1403      {
; ..\component\ComM\Implementation\ComM.c	  1404        highestComModeReq = ComM_CalculateHighestPNComMode(pncIndex, TRUE); /* 2nd parameter is not used */
; ..\component\ComM\Implementation\ComM.c	  1405  
; ..\component\ComM\Implementation\ComM.c	  1406        if (highestComModeReq != ComM_GetActivePncComMode(pncIndex))
; ..\component\ComM\Implementation\ComM.c	  1407        {
; ..\component\ComM\Implementation\ComM.c	  1408          ComM_PncStateTransition(pncIndex, highestComModeReq);
; ..\component\ComM\Implementation\ComM.c	  1409        }
; ..\component\ComM\Implementation\ComM.c	  1410      }
; ..\component\ComM\Implementation\ComM.c	  1411    }
; ..\component\ComM\Implementation\ComM.c	  1412  }
; ..\component\ComM\Implementation\ComM.c	  1413  # endif
; ..\component\ComM\Implementation\ComM.c	  1414  #endif
; ..\component\ComM\Implementation\ComM.c	  1415  
; ..\component\ComM\Implementation\ComM.c	  1416  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1417  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1418  /***********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1419   *  ComM_PncRoutingLimitationHandleChannels()
; ..\component\ComM\Implementation\ComM.c	  1420   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1421  /*!
; ..\component\ComM\Implementation\ComM.c	  1422   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  1423   *
; ..\component\ComM\Implementation\ComM.c	  1424   *
; ..\component\ComM\Implementation\ComM.c	  1425   *
; ..\component\ComM\Implementation\ComM.c	  1426   */
; ..\component\ComM\Implementation\ComM.c	  1427  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_PncRoutingLimitationHandleChannels( ComM_PncIterType InternalPncId )
; ..\component\ComM\Implementation\ComM.c	  1428  {
; ..\component\ComM\Implementation\ComM.c	  1429    ComM_PncSignalIndIterType ComM_PncSignalMappingIndex;
; ..\component\ComM\Implementation\ComM.c	  1430    ComM_SizeOfPncSignalType ComM_SignalIndex;
; ..\component\ComM\Implementation\ComM.c	  1431    ComM_SizeOfChannelType ComM_ChannelIndex;
; ..\component\ComM\Implementation\ComM.c	  1432  
; ..\component\ComM\Implementation\ComM.c	  1433    for(ComM_PncSignalMappingIndex = ComM_GetPncSignalIndStartIdxOfPncPb(InternalPncId); ComM_PncSignalMappingIndex < ComM_GetPncSignalIndEndIdxOfPncPb(InternalPncId); ComM_PncSignalMappingIndex++)
; ..\component\ComM\Implementation\ComM.c	  1434    {
; ..\component\ComM\Implementation\ComM.c	  1435      ComM_SignalIndex = ComM_GetPncSignalInd(ComM_PncSignalMappingIndex);
; ..\component\ComM\Implementation\ComM.c	  1436      if (ComM_GetTypeOfPncSignal(ComM_SignalIndex) == COMM_EIRA_TX_TYPEOFPNCSIGNAL)
; ..\component\ComM\Implementation\ComM.c	  1437      {
; ..\component\ComM\Implementation\ComM.c	  1438        ComM_ChannelIndex = ComM_GetChannelIdxOfPncSignal(ComM_SignalIndex);
; ..\component\ComM\Implementation\ComM.c	  1439  
; ..\component\ComM\Implementation\ComM.c	  1440        /* #10 Attaching: PNC routing is not limited and PNC bit = 0 was sent on the channel, send PNC bit = 1 now. */
; ..\component\ComM\Implementation\ComM.c	  1441        if( ((ComM_PncToChannelRoutingState[ComM_ChannelIndex] & COMM_PNCROUTING_NOT_LIMITED) != 0x00u) &&
; ..\component\ComM\Implementation\ComM.c	  1442            (!ComM_IsSignalStoredPncBitSet(ComM_SignalIndex, InternalPncId)) )
; ..\component\ComM\Implementation\ComM.c	  1443        {
; ..\component\ComM\Implementation\ComM.c	  1444  #  if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1445          if( (ComM_GetGwTypeOfChannel(ComM_ChannelIndex) == COMM_GATEWAY_TYPE_PASSIVE) && (ComM_GetActivePncComMode(InternalPncId) == COMM_PNC_REQUESTED_PASSIVE) )
; ..\component\ComM\Implementation\ComM.c	  1446          {
; ..\component\ComM\Implementation\ComM.c	  1447            /* PNC is requested via ERAp=1 from PASSIVE channel, do not keep the channel awake and do not mirror the request back */
; ..\component\ComM\Implementation\ComM.c	  1448          }
; ..\component\ComM\Implementation\ComM.c	  1449          else
; ..\component\ComM\Implementation\ComM.c	  1450  #  endif
; ..\component\ComM\Implementation\ComM.c	  1451          {
; ..\component\ComM\Implementation\ComM.c	  1452            ComM_PncSetBitInSignal(ComM_SignalIndex, InternalPncId);
; ..\component\ComM\Implementation\ComM.c	  1453            ComM_ExecuteComSendSignal(ComM_SignalIndex, ComM_GetAddrPncSignalValues(ComM_GetPncSignalValuesStartIdxOfPncSignal(ComM_SignalIndex))); /* SBSW_COMM_CALL_WITH_PTR_TO_CONST */
; ..\component\ComM\Implementation\ComM.c	  1454  
; ..\component\ComM\Implementation\ComM.c	  1455  #  if (COMM_PNCNMREQUESTOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1456            if (ComM_IsPncNmRequestOfChannel(ComM_ChannelIndex)) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  1457            {
; ..\component\ComM\Implementation\ComM.c	  1458              (void)Nm_NetworkRequest(ComM_ChannelIndex);
; ..\component\ComM\Implementation\ComM.c	  1459            }
; ..\component\ComM\Implementation\ComM.c	  1460  #  endif
; ..\component\ComM\Implementation\ComM.c	  1461          }
; ..\component\ComM\Implementation\ComM.c	  1462        }
; ..\component\ComM\Implementation\ComM.c	  1463        /* #20 Detaching: PNC routing is limited and PNC bit = 1 was sent on the channel, send PNC bit = 0 now. Valid for any GW type. */
; ..\component\ComM\Implementation\ComM.c	  1464        else if( (ComM_PncToChannelRoutingState[ComM_ChannelIndex] == COMM_PNCROUTING_LIMITED) &&
; ..\component\ComM\Implementation\ComM.c	  1465                 (ComM_IsSignalStoredPncBitSet(ComM_SignalIndex, InternalPncId)) )
; ..\component\ComM\Implementation\ComM.c	  1466        {
; ..\component\ComM\Implementation\ComM.c	  1467            ComM_PncClearBitInSignal(ComM_SignalIndex, InternalPncId);
; ..\component\ComM\Implementation\ComM.c	  1468            ComM_ExecuteComSendSignal(ComM_SignalIndex, ComM_GetAddrPncSignalValues(ComM_GetPncSignalValuesStartIdxOfPncSignal(ComM_SignalIndex))); /* SBSW_COMM_CALL_WITH_PTR_TO_CONST */
; ..\component\ComM\Implementation\ComM.c	  1469        }
; ..\component\ComM\Implementation\ComM.c	  1470        else
; ..\component\ComM\Implementation\ComM.c	  1471        {
; ..\component\ComM\Implementation\ComM.c	  1472          /* nothing to do */
; ..\component\ComM\Implementation\ComM.c	  1473        }
; ..\component\ComM\Implementation\ComM.c	  1474      }
; ..\component\ComM\Implementation\ComM.c	  1475    }
; ..\component\ComM\Implementation\ComM.c	  1476  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\ComM\Implementation\ComM.c	  1477  # endif
; ..\component\ComM\Implementation\ComM.c	  1478  #endif
; ..\component\ComM\Implementation\ComM.c	  1479  
; ..\component\ComM\Implementation\ComM.c	  1480  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1481  /***********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1482   *  ComM_PncSetBitInSignal()
; ..\component\ComM\Implementation\ComM.c	  1483   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1484  /*!
; ..\component\ComM\Implementation\ComM.c	  1485   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  1486   *
; ..\component\ComM\Implementation\ComM.c	  1487   *
; ..\component\ComM\Implementation\ComM.c	  1488   *
; ..\component\ComM\Implementation\ComM.c	  1489   */
; ..\component\ComM\Implementation\ComM.c	  1490  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_PncSetBitInSignal(ComM_SizeOfPncSignalType InternalSignalId, ComM_PncIterType InternalPncId)
; ..\component\ComM\Implementation\ComM.c	  1491  {
; ..\component\ComM\Implementation\ComM.c	  1492    /* #10 Calculate the new value of PNC signal byte by setting the corresponding PNC bit to 1. */
; ..\component\ComM\Implementation\ComM.c	  1493    ComM_SizeOfPncSignalValuesType signalByteIndex = (ComM_SizeOfPncSignalValuesType)(ComM_GetPncSignalValuesStartIdxOfPncSignal(InternalSignalId) + ComM_GetSignalByteIndexOfPncPb(InternalPncId)); /* PRQA S 2985 */ /* MD_ComM_2985 */
; ..\component\ComM\Implementation\ComM.c	  1494    ComM_PncSignalValuesType signalByte = (ComM_PncSignalValuesType)(ComM_GetPncSignalValues(signalByteIndex) | ComM_GetSetMaskOfPnc(InternalPncId)); /* PRQA S 2842, 2843 */ /* MD_ComM_2842_2843 */
; ..\component\ComM\Implementation\ComM.c	  1495  
; ..\component\ComM\Implementation\ComM.c	  1496    /* #20 Update the PNC byte in the signal with the new value. */
; ..\component\ComM\Implementation\ComM.c	  1497    if( signalByteIndex < ComM_GetSizeOfPncSignalValues() ) /* COV_COMM_GENDATA_CHECK */ /* PRQA S 2995, 2991 */ /* MD_ComM_2995_2991 */
; ..\component\ComM\Implementation\ComM.c	  1498    {
; ..\component\ComM\Implementation\ComM.c	  1499      ComM_SetPncSignalValues(signalByteIndex, signalByte); /* SBSW_COMM_CSL01 */
; ..\component\ComM\Implementation\ComM.c	  1500    }
; ..\component\ComM\Implementation\ComM.c	  1501  
; ..\component\ComM\Implementation\ComM.c	  1502  # if (COMM_ACTIVE_PNC == 1U)
; ..\component\ComM\Implementation\ComM.c	  1503    COMM_DUMMY_STATEMENT_CONST(InternalPncId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  1504  # endif
; ..\component\ComM\Implementation\ComM.c	  1505  
; ..\component\ComM\Implementation\ComM.c	  1506  # if (COMM_ISDEF_PNCSIGNALVALUESSTARTIDXOFPNCSIGNAL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1507    COMM_DUMMY_STATEMENT_CONST(InternalSignalId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  1508  # endif
; ..\component\ComM\Implementation\ComM.c	  1509  }
; ..\component\ComM\Implementation\ComM.c	  1510  #endif
; ..\component\ComM\Implementation\ComM.c	  1511  
; ..\component\ComM\Implementation\ComM.c	  1512  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1513  /***********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1514   *  ComM_PncClearBitInSignal()
; ..\component\ComM\Implementation\ComM.c	  1515   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1516  /*!
; ..\component\ComM\Implementation\ComM.c	  1517   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  1518   *
; ..\component\ComM\Implementation\ComM.c	  1519   *
; ..\component\ComM\Implementation\ComM.c	  1520   *
; ..\component\ComM\Implementation\ComM.c	  1521   */
; ..\component\ComM\Implementation\ComM.c	  1522  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_PncClearBitInSignal(ComM_SizeOfPncSignalType InternalSignalId, ComM_PncIterType InternalPncId)
; ..\component\ComM\Implementation\ComM.c	  1523  {
; ..\component\ComM\Implementation\ComM.c	  1524    /* #10 Calculate the new value of PNC signal byte by setting the corresponding PNC bit to 0. */
; ..\component\ComM\Implementation\ComM.c	  1525    ComM_SizeOfPncSignalValuesType signalByteIndex = (ComM_SizeOfPncSignalValuesType)(ComM_GetPncSignalValuesStartIdxOfPncSignal(InternalSignalId) + ComM_GetSignalByteIndexOfPncPb(InternalPncId)); /* PRQA S 2985 */ /* MD_ComM_2985 */
; ..\component\ComM\Implementation\ComM.c	  1526    ComM_PncSignalValuesType signalByte = (ComM_PncSignalValuesType)(ComM_GetPncSignalValues(signalByteIndex) & ComM_GetClearMaskOfPnc(InternalPncId)); /* PRQA S 2842, 2843 */ /* MD_ComM_2842_2843 */
; ..\component\ComM\Implementation\ComM.c	  1527  
; ..\component\ComM\Implementation\ComM.c	  1528    /* #20 Update the PNC byte in the signal with the new value. */
; ..\component\ComM\Implementation\ComM.c	  1529    if( signalByteIndex < ComM_GetSizeOfPncSignalValues() ) /* COV_COMM_GENDATA_CHECK */ /* PRQA S 2995, 2991 */ /* MD_ComM_2995_2991 */
; ..\component\ComM\Implementation\ComM.c	  1530    {
; ..\component\ComM\Implementation\ComM.c	  1531      ComM_SetPncSignalValues(signalByteIndex, signalByte); /* SBSW_COMM_CSL01 */
; ..\component\ComM\Implementation\ComM.c	  1532    }
; ..\component\ComM\Implementation\ComM.c	  1533  
; ..\component\ComM\Implementation\ComM.c	  1534  # if (COMM_ACTIVE_PNC == 1U)
; ..\component\ComM\Implementation\ComM.c	  1535    COMM_DUMMY_STATEMENT_CONST(InternalPncId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  1536  # endif
; ..\component\ComM\Implementation\ComM.c	  1537  
; ..\component\ComM\Implementation\ComM.c	  1538  # if (COMM_ISDEF_PNCSIGNALVALUESSTARTIDXOFPNCSIGNAL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1539    COMM_DUMMY_STATEMENT_CONST(InternalSignalId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  1540  # endif
; ..\component\ComM\Implementation\ComM.c	  1541  }
; ..\component\ComM\Implementation\ComM.c	  1542  #endif
; ..\component\ComM\Implementation\ComM.c	  1543  
; ..\component\ComM\Implementation\ComM.c	  1544  #if (COMM_PNC_PS_TIMER > 0U)
; ..\component\ComM\Implementation\ComM.c	  1545  /***********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1546   *  ComM_HandlePncPrepareSleepTimer()
; ..\component\ComM\Implementation\ComM.c	  1547   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1548  /*!
; ..\component\ComM\Implementation\ComM.c	  1549   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  1550   *
; ..\component\ComM\Implementation\ComM.c	  1551   *
; ..\component\ComM\Implementation\ComM.c	  1552   *
; ..\component\ComM\Implementation\ComM.c	  1553   */
; ..\component\ComM\Implementation\ComM.c	  1554  COMM_LOCAL FUNC(void, COMM_CODE) ComM_HandlePncPrepareSleepTimer( void )
; ..\component\ComM\Implementation\ComM.c	  1555  {
; ..\component\ComM\Implementation\ComM.c	  1556    /* #10 For each PNC check the PNC Prepare Sleep Timer. If the timer is started, decrement it. If the timer is expired
; ..\component\ComM\Implementation\ComM.c	  1557     *     and PNC is not requested, set the bus requested mode to COMM_PNC_NO_COMMUNICATION to allow PNC to enter COMM_PNC_NO_COMMUNICATION. */
; ..\component\ComM\Implementation\ComM.c	  1558    ComM_PncIterType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  1559  
; ..\component\ComM\Implementation\ComM.c	  1560  # if (COMM_PNC_CHECK_ENABLED_AT_RUNTIME == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1561    if (ComM_HasPncPb())
; ..\component\ComM\Implementation\ComM.c	  1562  # endif
; ..\component\ComM\Implementation\ComM.c	  1563    {
; ..\component\ComM\Implementation\ComM.c	  1564      for(pncIndex = 0; pncIndex < ComM_GetSizeOfPnc(); pncIndex++)
; ..\component\ComM\Implementation\ComM.c	  1565      {
; ..\component\ComM\Implementation\ComM.c	  1566        if(ComM_GetPncPSleepTimer(pncIndex) > 0u) /* PNC state is always COMM_PNC_PREPARE_SLEEP in this case, no need to check it. */
; ..\component\ComM\Implementation\ComM.c	  1567        {
; ..\component\ComM\Implementation\ComM.c	  1568          ComM_DecPncPSleepTimer(pncIndex); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1569          if( (ComM_GetBusPncComModeReq(pncIndex) == COMM_PNC_PREPARE_SLEEP) && (ComM_GetPncPSleepTimer(pncIndex) == 0u) )
; ..\component\ComM\Implementation\ComM.c	  1570          {
; ..\component\ComM\Implementation\ComM.c	  1571            ComM_SetBusPncComModeReq(pncIndex, COMM_PNC_NO_COMMUNICATION); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1572          }
; ..\component\ComM\Implementation\ComM.c	  1573        }
; ..\component\ComM\Implementation\ComM.c	  1574      }
; ..\component\ComM\Implementation\ComM.c	  1575    }
; ..\component\ComM\Implementation\ComM.c	  1576  }
; ..\component\ComM\Implementation\ComM.c	  1577  #endif
; ..\component\ComM\Implementation\ComM.c	  1578  
; ..\component\ComM\Implementation\ComM.c	  1579  #if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1580  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1581   *  ComM_LimitPncToChannelRouting()
; ..\component\ComM\Implementation\ComM.c	  1582   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1583  /*!
; ..\component\ComM\Implementation\ComM.c	  1584   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  1585   *
; ..\component\ComM\Implementation\ComM.c	  1586   *
; ..\component\ComM\Implementation\ComM.c	  1587   *
; ..\component\ComM\Implementation\ComM.c	  1588   *
; ..\component\ComM\Implementation\ComM.c	  1589   *
; ..\component\ComM\Implementation\ComM.c	  1590   *
; ..\component\ComM\Implementation\ComM.c	  1591   */
; ..\component\ComM\Implementation\ComM.c	  1592  FUNC(Std_ReturnType, COMM_CODE) ComM_LimitPncToChannelRouting( PNCHandleType Pnc, NetworkHandleType Channel, boolean Status )
; ..\component\ComM\Implementation\ComM.c	  1593  {
; ..\component\ComM\Implementation\ComM.c	  1594    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  1595    Std_ReturnType retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  1596    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  1597    ComM_PncIterType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  1598    ComM_SizeOfPncLimitationType index;
; ..\component\ComM\Implementation\ComM.c	  1599    ComM_PncLimitationType value;
; ..\component\ComM\Implementation\ComM.c	  1600  
; ..\component\ComM\Implementation\ComM.c	  1601    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  1602  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1603    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  1604    if (ComM_InitStatus == (ComM_InitStatusType)COMM_UNINIT)
; ..\component\ComM\Implementation\ComM.c	  1605    {
; ..\component\ComM\Implementation\ComM.c	  1606      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  1607      retVal = COMM_E_UNINIT;
; ..\component\ComM\Implementation\ComM.c	  1608    }
; ..\component\ComM\Implementation\ComM.c	  1609    /* #20 Check parameter 'Channel': it must be valid and PNC routing limitation must be supported on the channel. */
; ..\component\ComM\Implementation\ComM.c	  1610    /* Note: it is ensured by the code generator that only active channels having GW type != NONE support routing limitation. */
; ..\component\ComM\Implementation\ComM.c	  1611    else if ((Channel >= ComM_GetSizeOfChannelPb()) || (!ComM_IsPncLimitationUsedOfChannelPb(Channel))) /* PRQA S 4304 */ /* MD_MSR_AutosarBoolean */
; ..\component\ComM\Implementation\ComM.c	  1612    {
; ..\component\ComM\Implementation\ComM.c	  1613      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  1614    }
; ..\component\ComM\Implementation\ComM.c	  1615    else
; ..\component\ComM\Implementation\ComM.c	  1616  # endif
; ..\component\ComM\Implementation\ComM.c	  1617    {
; ..\component\ComM\Implementation\ComM.c	  1618      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  1619  
; ..\component\ComM\Implementation\ComM.c	  1620      /* Get the internal PNC index from the given PNC identifier */
; ..\component\ComM\Implementation\ComM.c	  1621      for( pncIndex = 0; pncIndex < ComM_GetSizeOfPnc(); pncIndex++ )
; ..\component\ComM\Implementation\ComM.c	  1622      {
; ..\component\ComM\Implementation\ComM.c	  1623        if (Pnc == ComM_GetPncIdOfPnc(pncIndex))
; ..\component\ComM\Implementation\ComM.c	  1624        {
; ..\component\ComM\Implementation\ComM.c	  1625          break;
; ..\component\ComM\Implementation\ComM.c	  1626        }
; ..\component\ComM\Implementation\ComM.c	  1627      }
; ..\component\ComM\Implementation\ComM.c	  1628  
; ..\component\ComM\Implementation\ComM.c	  1629      /* #30 Check parameter 'Pnc': it must be a valid PNC identifier. */
; ..\component\ComM\Implementation\ComM.c	  1630      if( pncIndex < ComM_GetSizeOfPnc() )
; ..\component\ComM\Implementation\ComM.c	  1631      {
; ..\component\ComM\Implementation\ComM.c	  1632        /* #40 If parameter checks are successful, store the PNC to Channel Routing Limitation status. */
; ..\component\ComM\Implementation\ComM.c	  1633        if( Status == TRUE )
; ..\component\ComM\Implementation\ComM.c	  1634        {
; ..\component\ComM\Implementation\ComM.c	  1635          /* Limitation is activated */
; ..\component\ComM\Implementation\ComM.c	  1636          value = (ComM_PncLimitationType)(ComM_GetPncLimitation((ComM_SizeOfPncLimitationType)(ComM_GetPncLimitationStartIdxOfChannelPb(Channel) + ComM_GetSignalByteIndexOfPncPb(pncIndex))) | ComM_GetSetMaskOfPnc(pncIndex));
; ..\component\ComM\Implementation\ComM.c	  1637        }
; ..\component\ComM\Implementation\ComM.c	  1638        else
; ..\component\ComM\Implementation\ComM.c	  1639        {
; ..\component\ComM\Implementation\ComM.c	  1640          /* Limitation is de-activated */
; ..\component\ComM\Implementation\ComM.c	  1641          value = (ComM_PncLimitationType)(ComM_GetPncLimitation((ComM_SizeOfPncLimitationType)(ComM_GetPncLimitationStartIdxOfChannelPb(Channel) + ComM_GetSignalByteIndexOfPncPb(pncIndex))) & ComM_GetClearMaskOfPnc(pncIndex));
; ..\component\ComM\Implementation\ComM.c	  1642        }
; ..\component\ComM\Implementation\ComM.c	  1643  
; ..\component\ComM\Implementation\ComM.c	  1644        index = (ComM_SizeOfPncLimitationType)(ComM_GetPncLimitationStartIdxOfChannelPb(Channel) + ComM_GetSignalByteIndexOfPncPb(pncIndex));
; ..\component\ComM\Implementation\ComM.c	  1645  
; ..\component\ComM\Implementation\ComM.c	  1646        if( index < ComM_GetSizeOfPncLimitation() ) /* COV_COMM_GENDATA_CHECK */
; ..\component\ComM\Implementation\ComM.c	  1647        {
; ..\component\ComM\Implementation\ComM.c	  1648          ComM_SetPncLimitation(index, value); /* SBSW_COMM_CSL01 */
; ..\component\ComM\Implementation\ComM.c	  1649          retVal = E_OK;
; ..\component\ComM\Implementation\ComM.c	  1650        }
; ..\component\ComM\Implementation\ComM.c	  1651  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1652        else
; ..\component\ComM\Implementation\ComM.c	  1653        {
; ..\component\ComM\Implementation\ComM.c	  1654          errorId = COMM_E_WRONG_GENERATED_DATA;
; ..\component\ComM\Implementation\ComM.c	  1655        }
; ..\component\ComM\Implementation\ComM.c	  1656  # endif
; ..\component\ComM\Implementation\ComM.c	  1657      }
; ..\component\ComM\Implementation\ComM.c	  1658  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1659      else
; ..\component\ComM\Implementation\ComM.c	  1660      {
; ..\component\ComM\Implementation\ComM.c	  1661        errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  1662      }
; ..\component\ComM\Implementation\ComM.c	  1663  # endif
; ..\component\ComM\Implementation\ComM.c	  1664    }
; ..\component\ComM\Implementation\ComM.c	  1665  
; ..\component\ComM\Implementation\ComM.c	  1666    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  1667  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1668    /* #50 Report errors if applicable. */
; ..\component\ComM\Implementation\ComM.c	  1669    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  1670    {
; ..\component\ComM\Implementation\ComM.c	  1671      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_LIMITPNCTOCHANNELROUTING, errorId );
; ..\component\ComM\Implementation\ComM.c	  1672    }
; ..\component\ComM\Implementation\ComM.c	  1673  # else
; ..\component\ComM\Implementation\ComM.c	  1674    COMM_DUMMY_STATEMENT_CONST(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  1675  # endif
; ..\component\ComM\Implementation\ComM.c	  1676  
; ..\component\ComM\Implementation\ComM.c	  1677    return retVal;
; ..\component\ComM\Implementation\ComM.c	  1678  }
; ..\component\ComM\Implementation\ComM.c	  1679  #endif
; ..\component\ComM\Implementation\ComM.c	  1680  
; ..\component\ComM\Implementation\ComM.c	  1681  #if ((COMM_PNC_SUPPORT == STD_ON) && (COMM_EXISTS_EIRA_TX_TYPEOFPNCSIGNAL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  1682  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1683   *  ComM_PncModeSendSignal()
; ..\component\ComM\Implementation\ComM.c	  1684   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1685  /*!
; ..\component\ComM\Implementation\ComM.c	  1686   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  1687   *
; ..\component\ComM\Implementation\ComM.c	  1688   *
; ..\component\ComM\Implementation\ComM.c	  1689   *
; ..\component\ComM\Implementation\ComM.c	  1690   *
; ..\component\ComM\Implementation\ComM.c	  1691   *
; ..\component\ComM\Implementation\ComM.c	  1692   *
; ..\component\ComM\Implementation\ComM.c	  1693   *
; ..\component\ComM\Implementation\ComM.c	  1694   *
; ..\component\ComM\Implementation\ComM.c	  1695   *
; ..\component\ComM\Implementation\ComM.c	  1696   */
; ..\component\ComM\Implementation\ComM.c	  1697  COMM_LOCAL FUNC(void, COMM_CODE) ComM_PncModeSendSignal(ComM_PncIterType PncHandle, boolean activeState, uint8 SigSendType)
; ..\component\ComM\Implementation\ComM.c	  1698  {
; ..\component\ComM\Implementation\ComM.c	  1699    ComM_PncSignalIndIterType signalMappingIndex;
; ..\component\ComM\Implementation\ComM.c	  1700    ComM_SizeOfPncSignalType signalIndex;
; ..\component\ComM\Implementation\ComM.c	  1701  # if ((COMM_PNC_EXTENDED_FUNCTIONALITY_ENABLED == STD_ON) && (COMM_PNCNMREQUESTOFCHANNEL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  1702    ComM_PncChannelMappingEndIdxOfPncPbType pncChannelMappingIndex;
; ..\component\ComM\Implementation\ComM.c	  1703  # endif
; ..\component\ComM\Implementation\ComM.c	  1704  
; ..\component\ComM\Implementation\ComM.c	  1705    /* #10 Iterate over EIRA_TX signals mapped to the given PNC. Send the corresponding COM signal if
; ..\component\ComM\Implementation\ComM.c	  1706     *     1) the GW type of the corresponding channel matches the given SigSendType or
; ..\component\ComM\Implementation\ComM.c	  1707     *     2) all EIRA_TX signals have to be sent.
; ..\component\ComM\Implementation\ComM.c	  1708     *     The signal value (PNC bit) is set according to the PNC activation given by activeState.
; ..\component\ComM\Implementation\ComM.c	  1709     *     If PNC Routing Limitation is enabled, PNC activation can be set only if routing is not limited on the channel. */
; ..\component\ComM\Implementation\ComM.c	  1710    for(signalMappingIndex = ComM_GetPncSignalIndStartIdxOfPncPb(PncHandle); signalMappingIndex < ComM_GetPncSignalIndEndIdxOfPncPb(PncHandle); signalMappingIndex++)
; ..\component\ComM\Implementation\ComM.c	  1711    {
; ..\component\ComM\Implementation\ComM.c	  1712      signalIndex = ComM_GetPncSignalInd(signalMappingIndex);
; ..\component\ComM\Implementation\ComM.c	  1713  # if (COMM_EXISTS_ERA_RX_TYPEOFPNCSIGNAL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1714      if (ComM_GetTypeOfPncSignal(signalIndex) == COMM_EIRA_TX_TYPEOFPNCSIGNAL) /* COV_COMM_SUBSET_OF_ELEMENTS */ /* Signal Type can be EIRA_TX or ERA_RX */
; ..\component\ComM\Implementation\ComM.c	  1715  # endif
; ..\component\ComM\Implementation\ComM.c	  1716      {
; ..\component\ComM\Implementation\ComM.c	  1717  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1718        if ((SigSendType == ComM_GetGwTypeOfChannel(ComM_GetChannelIdxOfPncSignal(signalIndex))) || (SigSendType == COMM_SEND_ALL_SIG))
; ..\component\ComM\Implementation\ComM.c	  1719  # endif
; ..\component\ComM\Implementation\ComM.c	  1720        {
; ..\component\ComM\Implementation\ComM.c	  1721          if(activeState == TRUE)
; ..\component\ComM\Implementation\ComM.c	  1722          {
; ..\component\ComM\Implementation\ComM.c	  1723  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1724            if( ComM_PncToChannelRoutingState[ComM_GetChannelIdxOfPncSignal(signalIndex)] != COMM_PNCROUTING_LIMITED )
; ..\component\ComM\Implementation\ComM.c	  1725  # endif
; ..\component\ComM\Implementation\ComM.c	  1726            {
; ..\component\ComM\Implementation\ComM.c	  1727              ComM_PncSetBitInSignal(signalIndex, PncHandle);
; ..\component\ComM\Implementation\ComM.c	  1728              ComM_ExecuteComSendSignal(signalIndex, ComM_GetAddrPncSignalValues(ComM_GetPncSignalValuesStartIdxOfPncSignal(signalIndex))); /* SBSW_COMM_CALL_WITH_PTR_TO_CONST */
; ..\component\ComM\Implementation\ComM.c	  1729            }
; ..\component\ComM\Implementation\ComM.c	  1730          }
; ..\component\ComM\Implementation\ComM.c	  1731          else
; ..\component\ComM\Implementation\ComM.c	  1732          {
; ..\component\ComM\Implementation\ComM.c	  1733            ComM_PncClearBitInSignal(signalIndex, PncHandle);
; ..\component\ComM\Implementation\ComM.c	  1734            ComM_ExecuteComSendSignal(signalIndex, ComM_GetAddrPncSignalValues(ComM_GetPncSignalValuesStartIdxOfPncSignal(signalIndex))); /* SBSW_COMM_CALL_WITH_PTR_TO_CONST */
; ..\component\ComM\Implementation\ComM.c	  1735          }
; ..\component\ComM\Implementation\ComM.c	  1736  
; ..\component\ComM\Implementation\ComM.c	  1737          /* #20 Call Nm_NetworkRequest() if PNC is activated and the parameter 'PNC Nm Request' is enabled on the channel.
; ..\component\ComM\Implementation\ComM.c	  1738           *   In case PNC Extended Functionality is enabled, only call Nm_NetworkRequest() if PNC is mapped to the channel.
; ..\component\ComM\Implementation\ComM.c	  1739           *   In case PNC Routing Limitation is enabled, only call Nm_NetworkRequest() if Routing is not limited on the channel.
; ..\component\ComM\Implementation\ComM.c	  1740           */
; ..\component\ComM\Implementation\ComM.c	  1741  # if (COMM_PNCNMREQUESTOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1742          if (activeState == TRUE)
; ..\component\ComM\Implementation\ComM.c	  1743          {
; ..\component\ComM\Implementation\ComM.c	  1744  #  if (COMM_ISDEF_PNCNMREQUESTOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  1745            if (ComM_IsPncNmRequestOfChannel(ComM_GetChannelIdxOfPncSignal(signalIndex))) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  1746  #  endif
; ..\component\ComM\Implementation\ComM.c	  1747            {
; ..\component\ComM\Implementation\ComM.c	  1748  #  if (COMM_PNC_EXTENDED_FUNCTIONALITY_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1749              for (pncChannelMappingIndex = ComM_GetPncChannelMappingStartIdxOfPncPb(PncHandle);
; ..\component\ComM\Implementation\ComM.c	  1750                   pncChannelMappingIndex < ComM_GetPncChannelMappingEndIdxOfPncPb(PncHandle);
; ..\component\ComM\Implementation\ComM.c	  1751                   pncChannelMappingIndex++) /* COV_COMM_FOR_LOOP_OPTIMIZATION */
; ..\component\ComM\Implementation\ComM.c	  1752              {
; ..\component\ComM\Implementation\ComM.c	  1753                if (ComM_GetPncChannelMapping(pncChannelMappingIndex) == ComM_GetChannelIdxOfPncSignal(signalIndex)) /* COV_COMM_FOR_LOOP_OPTIMIZATION */
; ..\component\ComM\Implementation\ComM.c	  1754                {
; ..\component\ComM\Implementation\ComM.c	  1755                  (void)Nm_NetworkRequest(ComM_GetChannelIdxOfPncSignal(signalIndex));
; ..\component\ComM\Implementation\ComM.c	  1756                  break;
; ..\component\ComM\Implementation\ComM.c	  1757                }
; ..\component\ComM\Implementation\ComM.c	  1758              }
; ..\component\ComM\Implementation\ComM.c	  1759  #  else
; ..\component\ComM\Implementation\ComM.c	  1760              /* Note: In normal PNC functionality, additional PNC signals without a PNC - Channel assignment are only allowed for preparing
; ..\component\ComM\Implementation\ComM.c	  1761               * for a PB-L usecase. In this case, the additional signals are automatically filtered in the generator, so we don't need
; ..\component\ComM\Implementation\ComM.c	  1762               * to verify the PNC - Channel assignment. The generator guarantees that PNC Signals exist only if there is a corresponding
; ..\component\ComM\Implementation\ComM.c	  1763               * PNC - Channel assignment. */
; ..\component\ComM\Implementation\ComM.c	  1764  #   if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1765              /* This is to prevent calling Nm_NetworkRequest() if Limitation is de-activated temporarily because Nm is in state NM_STATE_REPEAT_MESSAGE. */
; ..\component\ComM\Implementation\ComM.c	  1766              if( (ComM_PncToChannelRoutingState[ComM_GetChannelIdxOfPncSignal(signalIndex)] & COMM_PNCROUTING_NOT_LIMITED) != 0x00u )
; ..\component\ComM\Implementation\ComM.c	  1767  #   endif
; ..\component\ComM\Implementation\ComM.c	  1768              {
; ..\component\ComM\Implementation\ComM.c	  1769                (void)Nm_NetworkRequest(ComM_GetChannelIdxOfPncSignal(signalIndex));
; ..\component\ComM\Implementation\ComM.c	  1770              }
; ..\component\ComM\Implementation\ComM.c	  1771  #  endif
; ..\component\ComM\Implementation\ComM.c	  1772            }
; ..\component\ComM\Implementation\ComM.c	  1773          }
; ..\component\ComM\Implementation\ComM.c	  1774  # endif
; ..\component\ComM\Implementation\ComM.c	  1775        }
; ..\component\ComM\Implementation\ComM.c	  1776      }
; ..\component\ComM\Implementation\ComM.c	  1777    }
; ..\component\ComM\Implementation\ComM.c	  1778  
; ..\component\ComM\Implementation\ComM.c	  1779  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  1780    COMM_DUMMY_STATEMENT_CONST(SigSendType); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  1781  # endif
; ..\component\ComM\Implementation\ComM.c	  1782  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\ComM\Implementation\ComM.c	  1783  #endif
; ..\component\ComM\Implementation\ComM.c	  1784  
; ..\component\ComM\Implementation\ComM.c	  1785  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1786  # if (COMM_EXISTS_EIRA_RX_TYPEOFPNCSIGNAL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1787  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1788   *  ComM_PncProcessRxSignalEira()
; ..\component\ComM\Implementation\ComM.c	  1789   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1790  /*!
; ..\component\ComM\Implementation\ComM.c	  1791   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  1792   *
; ..\component\ComM\Implementation\ComM.c	  1793   *
; ..\component\ComM\Implementation\ComM.c	  1794   *
; ..\component\ComM\Implementation\ComM.c	  1795   *
; ..\component\ComM\Implementation\ComM.c	  1796   *
; ..\component\ComM\Implementation\ComM.c	  1797   */
; ..\component\ComM\Implementation\ComM.c	  1798  FUNC(void, COMM_CODE) ComM_PncProcessRxSignalEira(ComM_SizeOfPncSignalType InternalSignalId, const uint8 *SignalDataRx)
; ..\component\ComM\Implementation\ComM.c	  1799  {
; ..\component\ComM\Implementation\ComM.c	  1800  #  if (COMM_PNC_MAX_NUMBER_OF_EIRA_RX > 1U)
; ..\component\ComM\Implementation\ComM.c	  1801    uint8 SigValuesArb;
; ..\component\ComM\Implementation\ComM.c	  1802    ComM_PncSignalIterType signalIndex;
; ..\component\ComM\Implementation\ComM.c	  1803  #  endif
; ..\component\ComM\Implementation\ComM.c	  1804    ComM_SizeOfPncType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  1805  
; ..\component\ComM\Implementation\ComM.c	  1806    /* #10 Iterate over PNCs and update the target PNC state. */
; ..\component\ComM\Implementation\ComM.c	  1807    for (pncIndex = 0; pncIndex < ComM_GetSizeOfPnc(); pncIndex++)
; ..\component\ComM\Implementation\ComM.c	  1808    {
; ..\component\ComM\Implementation\ComM.c	  1809      if((SignalDataRx[ComM_GetSignalByteIndexOfPncPb(pncIndex)] & ComM_GetSetMaskOfPnc(pncIndex)) != 0u)
; ..\component\ComM\Implementation\ComM.c	  1810      {
; ..\component\ComM\Implementation\ComM.c	  1811        /* #110 If a PNC is requested via EIRA RX, set the target state to COMM_PNC_READY_SLEEP. */
; ..\component\ComM\Implementation\ComM.c	  1812        ComM_SetBusPncComModeReq(pncIndex, COMM_PNC_READY_SLEEP); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1813        ComM_PncSetBitInSignal(InternalSignalId, pncIndex);
; ..\component\ComM\Implementation\ComM.c	  1814      }
; ..\component\ComM\Implementation\ComM.c	  1815      else
; ..\component\ComM\Implementation\ComM.c	  1816      {
; ..\component\ComM\Implementation\ComM.c	  1817        /* #120 If a PNC is released via EIRA RX, check if it is requested on other bus types.
; ..\component\ComM\Implementation\ComM.c	  1818         *      If it is released on all other bus types, set the target state to COMM_PNC_NO_COMMUNICATION. */
; ..\component\ComM\Implementation\ComM.c	  1819        ComM_PncClearBitInSignal(InternalSignalId, pncIndex);
; ..\component\ComM\Implementation\ComM.c	  1820  #  if (COMM_PNC_MAX_NUMBER_OF_EIRA_RX > 1U) /* If only one EIRA RX (bus type), no need to loop over signals */
; ..\component\ComM\Implementation\ComM.c	  1821        SigValuesArb = 0;
; ..\component\ComM\Implementation\ComM.c	  1822        for (signalIndex = 0; signalIndex < ComM_GetSizeOfPncSignal(); signalIndex++ )
; ..\component\ComM\Implementation\ComM.c	  1823        {
; ..\component\ComM\Implementation\ComM.c	  1824          if (ComM_GetTypeOfPncSignal(signalIndex) == COMM_EIRA_RX_TYPEOFPNCSIGNAL) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  1825          {
; ..\component\ComM\Implementation\ComM.c	  1826            SigValuesArb |= ComM_GetPncSignalValues(ComM_GetPncSignalValuesStartIdxOfPncSignal(signalIndex) + ComM_GetSignalByteIndexOfPncPb(pncIndex)); /* PRQA S 2985 */ /* MD_ComM_2985 */
; ..\component\ComM\Implementation\ComM.c	  1827          }
; ..\component\ComM\Implementation\ComM.c	  1828        }
; ..\component\ComM\Implementation\ComM.c	  1829  
; ..\component\ComM\Implementation\ComM.c	  1830        if ((SigValuesArb & ComM_GetSetMaskOfPnc(pncIndex)) == 0u)
; ..\component\ComM\Implementation\ComM.c	  1831  #  endif
; ..\component\ComM\Implementation\ComM.c	  1832        {
; ..\component\ComM\Implementation\ComM.c	  1833          ComM_SetBusPncComModeReq(pncIndex, COMM_PNC_NO_COMMUNICATION); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  1834        }
; ..\component\ComM\Implementation\ComM.c	  1835      }
; ..\component\ComM\Implementation\ComM.c	  1836    }
; ..\component\ComM\Implementation\ComM.c	  1837  }
; ..\component\ComM\Implementation\ComM.c	  1838  # endif
; ..\component\ComM\Implementation\ComM.c	  1839  #endif
; ..\component\ComM\Implementation\ComM.c	  1840  
; ..\component\ComM\Implementation\ComM.c	  1841  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1842  # if (COMM_PNC_ACTIVE_COORD == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1843  #  if ( (COMM_PNC_EXISTS_GATEWAY_TYPE_ACTIVE == STD_ON) || (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  1844  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1845   *  ComM_PncProcessRxSignalEra()
; ..\component\ComM\Implementation\ComM.c	  1846   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1847  /*!
; ..\component\ComM\Implementation\ComM.c	  1848   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  1849   *
; ..\component\ComM\Implementation\ComM.c	  1850   *
; ..\component\ComM\Implementation\ComM.c	  1851   *
; ..\component\ComM\Implementation\ComM.c	  1852   *
; ..\component\ComM\Implementation\ComM.c	  1853   *
; ..\component\ComM\Implementation\ComM.c	  1854   *
; ..\component\ComM\Implementation\ComM.c	  1855   */
; ..\component\ComM\Implementation\ComM.c	  1856  FUNC(void, COMM_CODE) ComM_PncProcessRxSignalEra(ComM_SizeOfPncSignalType InternalSignalId, const uint8 *SignalDataRx)
; ..\component\ComM\Implementation\ComM.c	  1857  {
; ..\component\ComM\Implementation\ComM.c	  1858    uint8 SigValuesArb;
; ..\component\ComM\Implementation\ComM.c	  1859    ComM_SizeOfPncType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  1860    ComM_PncSignalIndIterType ComM_PncSignalMappingIndex;
; ..\component\ComM\Implementation\ComM.c	  1861    ComM_PncSignalIterType signalIndex;
; ..\component\ComM\Implementation\ComM.c	  1862  
; ..\component\ComM\Implementation\ComM.c	  1863    /* #10 Iterate over PNCs and request the system user accordingly. */
; ..\component\ComM\Implementation\ComM.c	  1864    for(pncIndex = 0; pncIndex < ComM_GetSizeOfPnc(); pncIndex++)
; ..\component\ComM\Implementation\ComM.c	  1865    {
; ..\component\ComM\Implementation\ComM.c	  1866  #  if (COMM_ISDEF_COORDINATEDOFPNC == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  1867      if(ComM_IsCoordinatedOfPnc(pncIndex)) /* COV_COMM_SUBSET_OF_ELEMENTS */ /*lint !e506 */
; ..\component\ComM\Implementation\ComM.c	  1868  #  endif
; ..\component\ComM\Implementation\ComM.c	  1869      {
; ..\component\ComM\Implementation\ComM.c	  1870        /* #110 If Era is received on channel with GW type NONE, the request is ignored.
; ..\component\ComM\Implementation\ComM.c	  1871         *      Note: Generator ensures that either all channels of the coordinated PNC have GW type NONE or no channel has GW type NONE. */
; ..\component\ComM\Implementation\ComM.c	  1872  #   if (COMM_PNC_EXISTS_GATEWAY_TYPE_NONE == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  1873        if ( ComM_GetGwTypeOfChannel(ComM_GetChannelIdxOfPncSignal(InternalSignalId)) != COMM_GATEWAY_TYPE_NONE )
; ..\component\ComM\Implementation\ComM.c	  1874  #   endif
; ..\component\ComM\Implementation\ComM.c	  1875        {
; ..\component\ComM\Implementation\ComM.c	  1876          if ((SignalDataRx[ComM_GetSignalByteIndexOfPncPb(pncIndex)] & ComM_GetSetMaskOfPnc(pncIndex)) > 0u) /* PRQA S 2823 1 */ /* MD_ComM_2823 */
; ..\component\ComM\Implementation\ComM.c	  1877          {
; ..\component\ComM\Implementation\ComM.c	  1878            /* #120 If a PNC is requested via ERA, request the corresponding system user. */
; ..\component\ComM\Implementation\ComM.c	  1879            ComM_PncSetBitInSignal(InternalSignalId, pncIndex);
; ..\component\ComM\Implementation\ComM.c	  1880            (void)ComM_RequestComMode(ComM_GetSystemUserOfPnc(pncIndex), COMM_FULL_COMMUNICATION);
; ..\component\ComM\Implementation\ComM.c	  1881          }
; ..\component\ComM\Implementation\ComM.c	  1882          else
; ..\component\ComM\Implementation\ComM.c	  1883          {
; ..\component\ComM\Implementation\ComM.c	  1884            /* #130 If a PNC is released on all related ERA signals, release the corresponding system user. */
; ..\component\ComM\Implementation\ComM.c	  1885            ComM_PncClearBitInSignal(InternalSignalId, pncIndex);
; ..\component\ComM\Implementation\ComM.c	  1886            SigValuesArb = 0;
; ..\component\ComM\Implementation\ComM.c	  1887            for (ComM_PncSignalMappingIndex = ComM_GetPncSignalIndStartIdxOfPncPb(pncIndex); ComM_PncSignalMappingIndex < ComM_GetPncSignalIndEndIdxOfPncPb(pncIndex); ComM_PncSignalMappingIndex++)
; ..\component\ComM\Implementation\ComM.c	  1888            {
; ..\component\ComM\Implementation\ComM.c	  1889              signalIndex = ComM_GetPncSignalInd(ComM_PncSignalMappingIndex);
; ..\component\ComM\Implementation\ComM.c	  1890              if (ComM_GetTypeOfPncSignal(signalIndex) == COMM_ERA_RX_TYPEOFPNCSIGNAL) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  1891              {
; ..\component\ComM\Implementation\ComM.c	  1892                SigValuesArb |= ComM_GetPncSignalValues(ComM_GetPncSignalValuesStartIdxOfPncSignal(signalIndex) + ComM_GetSignalByteIndexOfPncPb(pncIndex)); /* PRQA S 2985, 2823 */ /* MD_ComM_2985, MD_ComM_2823 */
; ..\component\ComM\Implementation\ComM.c	  1893              }
; ..\component\ComM\Implementation\ComM.c	  1894            }
; ..\component\ComM\Implementation\ComM.c	  1895  
; ..\component\ComM\Implementation\ComM.c	  1896            if ((SigValuesArb & ComM_GetSetMaskOfPnc(pncIndex)) == 0u) /* COV_COMM_PNC_EXTENDED_SINGLE_ERA */
; ..\component\ComM\Implementation\ComM.c	  1897            {
; ..\component\ComM\Implementation\ComM.c	  1898              (void)ComM_RequestComMode(ComM_GetSystemUserOfPnc(pncIndex), COMM_NO_COMMUNICATION);
; ..\component\ComM\Implementation\ComM.c	  1899            }
; ..\component\ComM\Implementation\ComM.c	  1900          }
; ..\component\ComM\Implementation\ComM.c	  1901        }
; ..\component\ComM\Implementation\ComM.c	  1902      }
; ..\component\ComM\Implementation\ComM.c	  1903    }
; ..\component\ComM\Implementation\ComM.c	  1904  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\ComM\Implementation\ComM.c	  1905  #  endif
; ..\component\ComM\Implementation\ComM.c	  1906  # endif
; ..\component\ComM\Implementation\ComM.c	  1907  #endif
; ..\component\ComM\Implementation\ComM.c	  1908  
; ..\component\ComM\Implementation\ComM.c	  1909  #if (( COMM_PNC_SUPPORT == STD_ON ) && ( COMM_USERMODENOTIFUNC == STD_ON ))
; ..\component\ComM\Implementation\ComM.c	  1910  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  1911   *  ComM_PncStateChangeNotification()
; ..\component\ComM\Implementation\ComM.c	  1912   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  1913  /*!
; ..\component\ComM\Implementation\ComM.c	  1914   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  1915   *
; ..\component\ComM\Implementation\ComM.c	  1916   *
; ..\component\ComM\Implementation\ComM.c	  1917   *
; ..\component\ComM\Implementation\ComM.c	  1918   *
; ..\component\ComM\Implementation\ComM.c	  1919   *
; ..\component\ComM\Implementation\ComM.c	  1920   *
; ..\component\ComM\Implementation\ComM.c	  1921   *
; ..\component\ComM\Implementation\ComM.c	  1922   */
; ..\component\ComM\Implementation\ComM.c	  1923  COMM_LOCAL FUNC(Std_ReturnType, COMM_CODE) ComM_PncStateChangeNotification( void )
; ..\component\ComM\Implementation\ComM.c	  1924  {
; ..\component\ComM\Implementation\ComM.c	  1925    uint8 userIndex;
; ..\component\ComM\Implementation\ComM.c	  1926    ComM_ModeType lowestUserMode;
; ..\component\ComM\Implementation\ComM.c	  1927    ComM_UserPncByteMaskEndIdxOfUserType iByteMaskIndex;
; ..\component\ComM\Implementation\ComM.c	  1928    ComM_PncIterType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  1929    Std_ReturnType retValueUser = RTE_E_OK;
; ..\component\ComM\Implementation\ComM.c	  1930    Std_ReturnType retValueOverall = E_OK;
; ..\component\ComM\Implementation\ComM.c	  1931  
; ..\component\ComM\Implementation\ComM.c	  1932    /* #10 Iterate over users that have configured User Mode (state change) notification and are mapped to PNC. */
; ..\component\ComM\Implementation\ComM.c	  1933    for (userIndex = 0; userIndex < ComM_GetSizeOfUser(); userIndex++)
; ..\component\ComM\Implementation\ComM.c	  1934    {
; ..\component\ComM\Implementation\ComM.c	  1935      if (ComM_GetUserModeNotiFunc(userIndex) != NULL_PTR) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  1936      {
; ..\component\ComM\Implementation\ComM.c	  1937  # if (COMM_USERMODENOTIFUNC_PNC_USER_ONLY == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  1938        if (ComM_IsPncUserOfUser(userIndex))
; ..\component\ComM\Implementation\ComM.c	  1939  # endif
; ..\component\ComM\Implementation\ComM.c	  1940        {
; ..\component\ComM\Implementation\ComM.c	  1941          /* #20 Calculate the lowest mode of all PNCs assigned to the current user. If at least one PNC
; ..\component\ComM\Implementation\ComM.c	  1942           *     is in COMM_PNC_NO_COMMUNICATION mode, the lowest mode is COMM_NO_COMMUNICATION. */
; ..\component\ComM\Implementation\ComM.c	  1943          lowestUserMode = COMM_FULL_COMMUNICATION;
; ..\component\ComM\Implementation\ComM.c	  1944  
; ..\component\ComM\Implementation\ComM.c	  1945          for (iByteMaskIndex = ComM_GetUserPncByteMaskStartIdxOfUser(userIndex); iByteMaskIndex < ComM_GetUserPncByteMaskEndIdxOfUser(userIndex); iByteMaskIndex++)
; ..\component\ComM\Implementation\ComM.c	  1946          {
; ..\component\ComM\Implementation\ComM.c	  1947            for (pncIndex = 0; (lowestUserMode == COMM_FULL_COMMUNICATION) && (pncIndex < ComM_GetSizeOfPnc()); pncIndex++)
; ..\component\ComM\Implementation\ComM.c	  1948            {
; ..\component\ComM\Implementation\ComM.c	  1949  # if (COMM_ISDEF_PNCIDOFPNC == STD_OFF) /* STD_ON: only one PNC exists, no run-time check is needed */
; ..\component\ComM\Implementation\ComM.c	  1950              if (ComM_GetPncIdOfPnc(pncIndex) == ComM_GetPncIDOfUserPncByteMask(iByteMaskIndex)) /* COV_COMM_FOR_LOOP_OPTIMIZATION */
; ..\component\ComM\Implementation\ComM.c	  1951  # endif
; ..\component\ComM\Implementation\ComM.c	  1952              {
; ..\component\ComM\Implementation\ComM.c	  1953                if (ComM_GetActivePncComMode(pncIndex) == COMM_PNC_NO_COMMUNICATION)
; ..\component\ComM\Implementation\ComM.c	  1954                {
; ..\component\ComM\Implementation\ComM.c	  1955                  lowestUserMode = COMM_NO_COMMUNICATION;
; ..\component\ComM\Implementation\ComM.c	  1956                }
; ..\component\ComM\Implementation\ComM.c	  1957              }
; ..\component\ComM\Implementation\ComM.c	  1958            }
; ..\component\ComM\Implementation\ComM.c	  1959          }
; ..\component\ComM\Implementation\ComM.c	  1960  
; ..\component\ComM\Implementation\ComM.c	  1961          /* #30 If a new mode is available for the current user, notify it using the Mode Switch Interface (sender-receiver) 'ComM_CurrentMode'. */
; ..\component\ComM\Implementation\ComM.c	  1962          if (lowestUserMode != ComM_GetLastStateChange(userIndex))
; ..\component\ComM\Implementation\ComM.c	  1963          {
; ..\component\ComM\Implementation\ComM.c	  1964            if (userIndex < ComM_GetSizeOfUserModeNotiFunc()) /* COV_COMM_GENDATA_CHECK */ /* PRQA S 2995, 2991 */ /* MD_ComM_2995_2991 */
; ..\component\ComM\Implementation\ComM.c	  1965            {
; ..\component\ComM\Implementation\ComM.c	  1966              switch (lowestUserMode)
; ..\component\ComM\Implementation\ComM.c	  1967              {
; ..\component\ComM\Implementation\ComM.c	  1968              case COMM_FULL_COMMUNICATION:
; ..\component\ComM\Implementation\ComM.c	  1969                retValueUser = ComM_GetUserModeNotiFunc(userIndex)(RTE_MODE_ComMMode_COMM_FULL_COMMUNICATION); /* SBSW_COMM_UserModeNotiFunc_PointerCall */
; ..\component\ComM\Implementation\ComM.c	  1970                break;
; ..\component\ComM\Implementation\ComM.c	  1971              case COMM_NO_COMMUNICATION:
; ..\component\ComM\Implementation\ComM.c	  1972                retValueUser = ComM_GetUserModeNotiFunc(userIndex)(RTE_MODE_ComMMode_COMM_NO_COMMUNICATION);   /* SBSW_COMM_UserModeNotiFunc_PointerCall */
; ..\component\ComM\Implementation\ComM.c	  1973                break;
; ..\component\ComM\Implementation\ComM.c	  1974                /* PRQA S 2018 1 */ /* MD_ComM_2018 */
; ..\component\ComM\Implementation\ComM.c	  1975              default: /* COV_COMM_MISRA */
; ..\component\ComM\Implementation\ComM.c	  1976                break;
; ..\component\ComM\Implementation\ComM.c	  1977              }
; ..\component\ComM\Implementation\ComM.c	  1978            }
; ..\component\ComM\Implementation\ComM.c	  1979  
; ..\component\ComM\Implementation\ComM.c	  1980            /* #40 If notification to the current user was successful, update the mode to ensure that the same one will not be notified again.
; ..\component\ComM\Implementation\ComM.c	  1981             *     Otherwise the notification will be processed again in the next task. */
; ..\component\ComM\Implementation\ComM.c	  1982            if (retValueUser == RTE_E_OK)
; ..\component\ComM\Implementation\ComM.c	  1983            {
; ..\component\ComM\Implementation\ComM.c	  1984              ComM_SetLastStateChange(userIndex, lowestUserMode); /* SBSW_COMM_USER_CSL02 */ /*lint !e661 ComM_LastStateChange[] has a size relation to ComM_User[] */
; ..\component\ComM\Implementation\ComM.c	  1985            }
; ..\component\ComM\Implementation\ComM.c	  1986            else
; ..\component\ComM\Implementation\ComM.c	  1987            {
; ..\component\ComM\Implementation\ComM.c	  1988              retValueOverall = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  1989            }
; ..\component\ComM\Implementation\ComM.c	  1990          }
; ..\component\ComM\Implementation\ComM.c	  1991        }
; ..\component\ComM\Implementation\ComM.c	  1992      }
; ..\component\ComM\Implementation\ComM.c	  1993    }
; ..\component\ComM\Implementation\ComM.c	  1994  
; ..\component\ComM\Implementation\ComM.c	  1995    return retValueOverall;
; ..\component\ComM\Implementation\ComM.c	  1996  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\ComM\Implementation\ComM.c	  1997  #endif
; ..\component\ComM\Implementation\ComM.c	  1998  
; ..\component\ComM\Implementation\ComM.c	  1999  #if ( COMM_PNC_SUPPORT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  2000  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2001   *  ComM_PncClearWakeup()
; ..\component\ComM\Implementation\ComM.c	  2002   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2003  /*!
; ..\component\ComM\Implementation\ComM.c	  2004   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2005   *
; ..\component\ComM\Implementation\ComM.c	  2006   *
; ..\component\ComM\Implementation\ComM.c	  2007   */
; ..\component\ComM\Implementation\ComM.c	  2008  COMM_LOCAL FUNC(void, COMM_CODE) ComM_PncClearWakeup(ComM_PncIterType ComM_CurrentPn)
; ..\component\ComM\Implementation\ComM.c	  2009  {
; ..\component\ComM\Implementation\ComM.c	  2010  # if((COMM_PNC_PS_TIMER > 0U) && ((COMM_SYNCHRONOUS_WAKE_UP == STD_ON) || (COMM_WAKEUPENABLEDOFPNC == STD_ON)))
; ..\component\ComM\Implementation\ComM.c	  2011      /* #10 Clear pnc wakeup flag when a wakeup has occurred before. */
; ..\component\ComM\Implementation\ComM.c	  2012    if(ComM_GetBusPncComModeReq(ComM_CurrentPn) == COMM_PNC_PREPARE_SLEEP)
; ..\component\ComM\Implementation\ComM.c	  2013    {
; ..\component\ComM\Implementation\ComM.c	  2014      ComM_SetBusPncComModeReq(ComM_CurrentPn, COMM_PNC_NO_COMMUNICATION); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  2015    }
; ..\component\ComM\Implementation\ComM.c	  2016  # else
; ..\component\ComM\Implementation\ComM.c	  2017    COMM_DUMMY_STATEMENT(ComM_CurrentPn); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  2018  # endif
; ..\component\ComM\Implementation\ComM.c	  2019  }
; ..\component\ComM\Implementation\ComM.c	  2020  #endif
; ..\component\ComM\Implementation\ComM.c	  2021  
; ..\component\ComM\Implementation\ComM.c	  2022  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2023   *  ComM_CalculateHighestComMode()
; ..\component\ComM\Implementation\ComM.c	  2024   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2025  /*!
; ..\component\ComM\Implementation\ComM.c	  2026   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2027   *
; ..\component\ComM\Implementation\ComM.c	  2028   *
; ..\component\ComM\Implementation\ComM.c	  2029   *
; ..\component\ComM\Implementation\ComM.c	  2030   *
; ..\component\ComM\Implementation\ComM.c	  2031   *
; ..\component\ComM\Implementation\ComM.c	  2032   *
; ..\component\ComM\Implementation\ComM.c	  2033   *
; ..\component\ComM\Implementation\ComM.c	  2034   *
; ..\component\ComM\Implementation\ComM.c	  2035   *
; ..\component\ComM\Implementation\ComM.c	  2036   *
; ..\component\ComM\Implementation\ComM.c	  2037   *
; ..\component\ComM\Implementation\ComM.c	  2038   *
; ..\component\ComM\Implementation\ComM.c	  2039   *
; ..\component\ComM\Implementation\ComM.c	  2040   *
; ..\component\ComM\Implementation\ComM.c	  2041   */
; ..\component\ComM\Implementation\ComM.c	  2042  COMM_LOCAL FUNC( ComM_StateType, COMM_CODE ) ComM_CalculateHighestComMode( NetworkHandleType channel, boolean *internalRequest )
; Function ComM_CalculateHighestComMode
.L130:
ComM_CalculateHighestComMode:	.type	func
	mov.aa	a15,a4
.L524:

; ..\component\ComM\Implementation\ComM.c	  2043  {
; ..\component\ComM\Implementation\ComM.c	  2044    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  2045    ComM_StateType lHighestRequest = COMM_NO_COM_NO_PENDING_REQUEST; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\ComM\Implementation\ComM.c	  2046    *internalRequest = FALSE; /* SBSW_COMM_CALL_WITH_PTR_TO_LOCAL_VARIABLE */
	mov	d15,#0
	st.b	[a15],d15
.L859:

; ..\component\ComM\Implementation\ComM.c	  2047  
; ..\component\ComM\Implementation\ComM.c	  2048    /*lint -e661 */
; ..\component\ComM\Implementation\ComM.c	  2049    SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_0();
	call	SuspendAllInterrupts
.L523:

; ..\component\ComM\Implementation\ComM.c	  2050  
; ..\component\ComM\Implementation\ComM.c	  2051  #if( COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  2052    /* #10 The highest requested mode is COMM_FULL_COM_NETWORK_REQUESTED if the following conditions are true:
; ..\component\ComM\Implementation\ComM.c	  2053     *   Communication shutdown on FlexRay is finished. (This is to counteract the so-called 'clique problem' on FlexRay) and:
; ..\component\ComM\Implementation\ComM.c	  2054     *     1) If Communication Inhibition is not active and at least one user mapped to the channel directly or via PNC requests FULL_COM or
; ..\component\ComM\Implementation\ComM.c	  2055     *     2) Dcm has requested communication (it does not take Communication Inhibition into account). */
; ..\component\ComM\Implementation\ComM.c	  2056    lHighestRequest = COMM_NO_COM_NO_PENDING_REQUEST;
	mov	d8,#0
.L526:

; ..\component\ComM\Implementation\ComM.c	  2057  # if( COMM_BUS_TYPE_FR_PRESENT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  2058    /* PRQA S 2842 */ /* MD_ComM_2842_2843 */
; ..\component\ComM\Implementation\ComM.c	  2059    /* ComM postpones the execution of communication requests until FrSM indicates entering NO_COM mode.  */
; ..\component\ComM\Implementation\ComM.c	  2060    if (ComM_FrShutdown[channel] == FALSE)
; ..\component\ComM\Implementation\ComM.c	  2061  # endif
; ..\component\ComM\Implementation\ComM.c	  2062    {
; ..\component\ComM\Implementation\ComM.c	  2063  # if (((COMM_MODE_LIMITATION == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF)) || (COMM_WAKEUP_INHIBITION == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  2064      if (ComM_ChannelIsLimited(channel) == FALSE)
; ..\component\ComM\Implementation\ComM.c	  2065  # endif
; ..\component\ComM\Implementation\ComM.c	  2066      {
; ..\component\ComM\Implementation\ComM.c	  2067        if (ComM_IsUserRequestingChannel(channel) == TRUE)
	mov	d4,d8
	call	ComM_IsUserRequestingChannel
.L860:
	jeq	d2,#0,.L2
.L861:

; ..\component\ComM\Implementation\ComM.c	  2068        {
; ..\component\ComM\Implementation\ComM.c	  2069          lHighestRequest = COMM_FULL_COM_NETWORK_REQUESTED;
	mov	d8,#2
.L862:

; ..\component\ComM\Implementation\ComM.c	  2070          *internalRequest = TRUE; /* SBSW_COMM_CALL_WITH_PTR_TO_LOCAL_VARIABLE */
	mov	d15,#1
	st.b	[a15],d15
.L2:

; ..\component\ComM\Implementation\ComM.c	  2071      /* #110 If Nm variant LINSLAVE is present and a user is requesting the channel, the BusSleepMode flag is cleared for the corresponding channel. */
; ..\component\ComM\Implementation\ComM.c	  2072  # if ( COMM_EXISTS_LINSLAVE_NMTYPEOFCHANNEL == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  2073          /* No runtime check for linslave channel needed, because variable is initialized with FALSE for each channel and only set to TRUE for linslave channels */
; ..\component\ComM\Implementation\ComM.c	  2074          ComM_SetBusSleepModeIndicated(channel, FALSE); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  2075        }
; ..\component\ComM\Implementation\ComM.c	  2076        else
; ..\component\ComM\Implementation\ComM.c	  2077      /* #120 If no user is requesting the channel and current channel is Nm variant LINSLAVE and the active mode is COMM_FULL_COM_NETWORK_REQUESTED,
; ..\component\ComM\Implementation\ComM.c	  2078            the highest requested mode is COMM_FULL_COM_READY_SLEEP and the externally requested state is set to COMM_NO_COM_NO_PENDING_REQUEST.
; ..\component\ComM\Implementation\ComM.c	  2079            (This ensures that the channel remains in state COMM_FULL_COM_READY_SLEEP after a passive wake-up event and does not transition to COMM_FULL_COM_NETWORK_REQUEST again.) */
; ..\component\ComM\Implementation\ComM.c	  2080        {
; ..\component\ComM\Implementation\ComM.c	  2081          if ( (ComM_ActiveComMode[channel] == COMM_FULL_COM_NETWORK_REQUESTED)
; ..\component\ComM\Implementation\ComM.c	  2082  #  if ( COMM_ISDEF_NMTYPEOFCHANNEL == STD_OFF )
; ..\component\ComM\Implementation\ComM.c	  2083            && (ComM_GetNmTypeOfChannel(channel) == COMM_LINSLAVE_NMTYPEOFCHANNEL)
; ..\component\ComM\Implementation\ComM.c	  2084  #  endif
; ..\component\ComM\Implementation\ComM.c	  2085             )
; ..\component\ComM\Implementation\ComM.c	  2086          {
; ..\component\ComM\Implementation\ComM.c	  2087            lHighestRequest = COMM_FULL_COM_READY_SLEEP;
; ..\component\ComM\Implementation\ComM.c	  2088            ComM_BusComModeReq[channel] = COMM_NO_COM_NO_PENDING_REQUEST; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  2089          }
; ..\component\ComM\Implementation\ComM.c	  2090  # endif
; ..\component\ComM\Implementation\ComM.c	  2091        }
; ..\component\ComM\Implementation\ComM.c	  2092      }
; ..\component\ComM\Implementation\ComM.c	  2093  
; ..\component\ComM\Implementation\ComM.c	  2094  # if (COMM_DCM_INDICATION == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2095      /* PRQA S 2842 */ /* MD_ComM_2842_2843 */
; ..\component\ComM\Implementation\ComM.c	  2096      if( ComM_IsDcmRequestActive(channel) ) /* COV_COMM_NM_LINSLAVE_ONLY XF */
; ..\component\ComM\Implementation\ComM.c	  2097      {
; ..\component\ComM\Implementation\ComM.c	  2098        lHighestRequest = COMM_FULL_COM_NETWORK_REQUESTED;
; ..\component\ComM\Implementation\ComM.c	  2099        *internalRequest = TRUE; /* SBSW_COMM_CALL_WITH_PTR_TO_LOCAL_VARIABLE */
; ..\component\ComM\Implementation\ComM.c	  2100      }
; ..\component\ComM\Implementation\ComM.c	  2101  # endif
; ..\component\ComM\Implementation\ComM.c	  2102      /*lint +e443 */
; ..\component\ComM\Implementation\ComM.c	  2103    }
; ..\component\ComM\Implementation\ComM.c	  2104  #endif
; ..\component\ComM\Implementation\ComM.c	  2105  
; ..\component\ComM\Implementation\ComM.c	  2106  #if ((COMM_PNC_SUPPORT == STD_ON) && (COMM_PNCCHANNELMAPPING == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  2107    /* #20 If PN feature is enabled and the channel is not requested by a user or Dcm, the requested mode is the highest one of
; ..\component\ComM\Implementation\ComM.c	  2108     *     the mode resulting from the Gateway Type of the channel and the highest activation of PNCs mapped to it or
; ..\component\ComM\Implementation\ComM.c	  2109     *     COMM_FULL_COM_READY_SLEEP if at least one PNC mapped to the channel is in PNC_FULL_COMMUNICATION state. */
; ..\component\ComM\Implementation\ComM.c	  2110  # if (COMM_ISDEF_PNCPBINDUSEDOFCHANNELPB == STD_OFF) /* there are some channels without PNCs */
; ..\component\ComM\Implementation\ComM.c	  2111    if (ComM_IsPncPbIndUsedOfChannelPb(channel)) /* PRQA S 4304 */ /* MD_MSR_AutosarBoolean */ /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  2112  # endif
; ..\component\ComM\Implementation\ComM.c	  2113    {
; ..\component\ComM\Implementation\ComM.c	  2114  # if (COMM_PNC_ACTIVE_COORD == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2115      if( lHighestRequest == COMM_NO_COM_NO_PENDING_REQUEST )
; ..\component\ComM\Implementation\ComM.c	  2116      {
; ..\component\ComM\Implementation\ComM.c	  2117        lHighestRequest = ComM_PncGetGwChannelRequest( channel );
; ..\component\ComM\Implementation\ComM.c	  2118        if (lHighestRequest == COMM_FULL_COM_NETWORK_REQUESTED)
; ..\component\ComM\Implementation\ComM.c	  2119        {
; ..\component\ComM\Implementation\ComM.c	  2120          *internalRequest = TRUE; /* SBSW_COMM_CALL_WITH_PTR_TO_LOCAL_VARIABLE */
; ..\component\ComM\Implementation\ComM.c	  2121        }
; ..\component\ComM\Implementation\ComM.c	  2122      }
; ..\component\ComM\Implementation\ComM.c	  2123  
; ..\component\ComM\Implementation\ComM.c	  2124  #  if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2125      if( lHighestRequest == COMM_FULL_COM_NETWORK_REQUESTED )
; ..\component\ComM\Implementation\ComM.c	  2126      {
; ..\component\ComM\Implementation\ComM.c	  2127        /* Enter the state COMM_PNCROUTING_NOT_LIMITED because channel is kept awake by a ComM user. */
; ..\component\ComM\Implementation\ComM.c	  2128        ComM_PncToChannelRoutingState[channel] |= COMM_PNCROUTING_NOT_LIMITED; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  2129      }
; ..\component\ComM\Implementation\ComM.c	  2130      else
; ..\component\ComM\Implementation\ComM.c	  2131      {
; ..\component\ComM\Implementation\ComM.c	  2132        /* nothing to do */
; ..\component\ComM\Implementation\ComM.c	  2133      }
; ..\component\ComM\Implementation\ComM.c	  2134  #  endif
; ..\component\ComM\Implementation\ComM.c	  2135  # endif
; ..\component\ComM\Implementation\ComM.c	  2136  
; ..\component\ComM\Implementation\ComM.c	  2137      /* This to consider all PNCs including not coordinated ones */
; ..\component\ComM\Implementation\ComM.c	  2138  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2139      if (ComM_PncToChannelRoutingState[channel] != COMM_PNCROUTING_LIMITED)
; ..\component\ComM\Implementation\ComM.c	  2140  # endif
; ..\component\ComM\Implementation\ComM.c	  2141      {
; ..\component\ComM\Implementation\ComM.c	  2142        lHighestRequest = ComM_PncInFullComWakesUpTheChannel( channel, lHighestRequest ); /* PRQA S 2982 */ /* MD_ComM_2982 */
; ..\component\ComM\Implementation\ComM.c	  2143      }
; ..\component\ComM\Implementation\ComM.c	  2144    }
; ..\component\ComM\Implementation\ComM.c	  2145  #endif
; ..\component\ComM\Implementation\ComM.c	  2146  
; ..\component\ComM\Implementation\ComM.c	  2147    /* #30 The requested mode shall be at least as high as requested via bus.
; ..\component\ComM\Implementation\ComM.c	  2148     *     Bus communication requests shall always be granted according to the 'highest win' strategy. */
; ..\component\ComM\Implementation\ComM.c	  2149  #if( COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  2150    if ((lHighestRequest == COMM_NO_COM_NO_PENDING_REQUEST)
	jeq	d8,#0,.L3
.L863:

; ..\component\ComM\Implementation\ComM.c	  2151  # if ((COMM_EXISTS_NONE_NMTYPEOFCHANNEL == STD_ON) || (COMM_MINFULLCOMTIMEOFCHANNEL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  2152       || (ComM_BusComModeReq[channel] == COMM_FULL_COM_NETWORK_REQUESTED)
	movh.a	a15,#@his(ComM_BusComModeReq)
.L525:
	ld.bu	d15,[a15]@los(ComM_BusComModeReq)
.L864:
	jne	d15,#2,.L4
.L3:

; ..\component\ComM\Implementation\ComM.c	  2153  # endif
; ..\component\ComM\Implementation\ComM.c	  2154       )
; ..\component\ComM\Implementation\ComM.c	  2155  #endif
; ..\component\ComM\Implementation\ComM.c	  2156    {
; ..\component\ComM\Implementation\ComM.c	  2157      lHighestRequest = ComM_BusComModeReq[channel];
	movh.a	a15,#@his(ComM_BusComModeReq)
.L865:
	ld.bu	d8,[a15]@los(ComM_BusComModeReq)
.L4:

; ..\component\ComM\Implementation\ComM.c	  2158    }
; ..\component\ComM\Implementation\ComM.c	  2159  
; ..\component\ComM\Implementation\ComM.c	  2160    /*lint +e661 */
; ..\component\ComM\Implementation\ComM.c	  2161  
; ..\component\ComM\Implementation\ComM.c	  2162    SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_0();
	call	ResumeAllInterrupts
.L866:

; ..\component\ComM\Implementation\ComM.c	  2163  
; ..\component\ComM\Implementation\ComM.c	  2164    return lHighestRequest;
; ..\component\ComM\Implementation\ComM.c	  2165  } /* PRQA S 6010, 6030 */ /* MD_MSR_STPTH, MD_MSR_STCYC */
	mov	d2,d8
	ret
.L501:
	
__ComM_CalculateHighestComMode_function_end:
	.size	ComM_CalculateHighestComMode,__ComM_CalculateHighestComMode_function_end-ComM_CalculateHighestComMode
.L347:
	; End of function
	
	.sdecl	'.text.ComM.ComM_IsUserRequestingChannel',code,cluster('ComM_IsUserRequestingChannel')
	.sect	'.text.ComM.ComM_IsUserRequestingChannel'
	.align	2
	

; ..\component\ComM\Implementation\ComM.c	  2166  
; ..\component\ComM\Implementation\ComM.c	  2167  #if (COMM_PNC_EXTENDED_FUNCTIONALITY_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2168  # if (COMM_PNC_EXISTS_PNC_WITHOUT_CHANNELS == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2169  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2170  *  ComM_IsUserMappedToPncWithoutChannels()
; ..\component\ComM\Implementation\ComM.c	  2171  *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2172  /*!
; ..\component\ComM\Implementation\ComM.c	  2173  * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2174   *
; ..\component\ComM\Implementation\ComM.c	  2175   *
; ..\component\ComM\Implementation\ComM.c	  2176   *
; ..\component\ComM\Implementation\ComM.c	  2177   *
; ..\component\ComM\Implementation\ComM.c	  2178   *
; ..\component\ComM\Implementation\ComM.c	  2179  */
; ..\component\ComM\Implementation\ComM.c	  2180  COMM_LOCAL_INLINE FUNC(boolean, COMM_CODE) ComM_IsUserMappedToPncWithoutChannels(ComM_UserHandleType User)
; ..\component\ComM\Implementation\ComM.c	  2181  {
; ..\component\ComM\Implementation\ComM.c	  2182  #  if (COMM_PNCCHANNELMAPPING == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2183    ComM_UserByteMaskEndIdxOfUserType iByteMaskIndex;
; ..\component\ComM\Implementation\ComM.c	  2184    ComM_PncIterType pncIdx;
; ..\component\ComM\Implementation\ComM.c	  2185    PNCHandleType pncID;
; ..\component\ComM\Implementation\ComM.c	  2186  #  endif
; ..\component\ComM\Implementation\ComM.c	  2187    boolean isUserMappedToPncWithoutChannels = FALSE;
; ..\component\ComM\Implementation\ComM.c	  2188    if (ComM_IsPncUserOfUser(User))
; ..\component\ComM\Implementation\ComM.c	  2189    {
; ..\component\ComM\Implementation\ComM.c	  2190  #  if (COMM_PNCCHANNELMAPPING == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2191      /* #10 Check special usecase: this PNC user is mapped to PNCs without channels. */
; ..\component\ComM\Implementation\ComM.c	  2192      for (iByteMaskIndex = ComM_GetUserPncByteMaskStartIdxOfUser(User); iByteMaskIndex < ComM_GetUserPncByteMaskEndIdxOfUser(User); iByteMaskIndex++) /* COV_COMM_FOR_LOOP_OPTIMIZATION */
; ..\component\ComM\Implementation\ComM.c	  2193      {
; ..\component\ComM\Implementation\ComM.c	  2194        pncID = ComM_GetPncIDOfUserPncByteMask(iByteMaskIndex);
; ..\component\ComM\Implementation\ComM.c	  2195        /* #110 Get the internal PNC index from the given PNC identifier. */
; ..\component\ComM\Implementation\ComM.c	  2196        for (pncIdx = 0; pncIdx < ComM_GetSizeOfPnc(); pncIdx++) /* COV_COMM_FOR_LOOP_OPTIMIZATION */
; ..\component\ComM\Implementation\ComM.c	  2197        {
; ..\component\ComM\Implementation\ComM.c	  2198          if (pncID == ComM_GetPncIdOfPnc(pncIdx))
; ..\component\ComM\Implementation\ComM.c	  2199          {
; ..\component\ComM\Implementation\ComM.c	  2200            break;
; ..\component\ComM\Implementation\ComM.c	  2201          }
; ..\component\ComM\Implementation\ComM.c	  2202        }
; ..\component\ComM\Implementation\ComM.c	  2203        /* #120 The flag is set to true if PNC has no channels. */
; ..\component\ComM\Implementation\ComM.c	  2204        if (ComM_GetPncChannelMappingStartIdxOfPncPb(pncIdx) == COMM_NO_PNCCHANNELMAPPINGSTARTIDXOFPNCPB) /* PRQA S 2843 */ /* MD_ComM_2842_2843 */ /*lint !e661 */
; ..\component\ComM\Implementation\ComM.c	  2205        {
; ..\component\ComM\Implementation\ComM.c	  2206          isUserMappedToPncWithoutChannels = TRUE; /* PRQA S 2982 */ /* MD_ComM_2982 */
; ..\component\ComM\Implementation\ComM.c	  2207          break;
; ..\component\ComM\Implementation\ComM.c	  2208        }
; ..\component\ComM\Implementation\ComM.c	  2209      }
; ..\component\ComM\Implementation\ComM.c	  2210  #  else
; ..\component\ComM\Implementation\ComM.c	  2211      /* #20 The flag is set to true, if the PNC does not have a Channel mapping. */
; ..\component\ComM\Implementation\ComM.c	  2212      isUserMappedToPncWithoutChannels = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2213  #  endif
; ..\component\ComM\Implementation\ComM.c	  2214    }
; ..\component\ComM\Implementation\ComM.c	  2215    return isUserMappedToPncWithoutChannels;
; ..\component\ComM\Implementation\ComM.c	  2216  }
; ..\component\ComM\Implementation\ComM.c	  2217  # endif
; ..\component\ComM\Implementation\ComM.c	  2218  #endif
; ..\component\ComM\Implementation\ComM.c	  2219  
; ..\component\ComM\Implementation\ComM.c	  2220  #if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2221  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2222   *  ComM_IsUserRequestingChannel()
; ..\component\ComM\Implementation\ComM.c	  2223   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2224  /*!
; ..\component\ComM\Implementation\ComM.c	  2225   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2226   *
; ..\component\ComM\Implementation\ComM.c	  2227   *
; ..\component\ComM\Implementation\ComM.c	  2228   *
; ..\component\ComM\Implementation\ComM.c	  2229   *
; ..\component\ComM\Implementation\ComM.c	  2230   *
; ..\component\ComM\Implementation\ComM.c	  2231   *
; ..\component\ComM\Implementation\ComM.c	  2232   */
; ..\component\ComM\Implementation\ComM.c	  2233  COMM_LOCAL_INLINE FUNC(boolean, COMM_CODE) ComM_IsUserRequestingChannel(NetworkHandleType channel)
; Function ComM_IsUserRequestingChannel
.L132:
ComM_IsUserRequestingChannel:	.type	func

; ..\component\ComM\Implementation\ComM.c	  2234  {
; ..\component\ComM\Implementation\ComM.c	  2235    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  2236    boolean isUserRequesting = FALSE;
; ..\component\ComM\Implementation\ComM.c	  2237    ComM_UserReqFullComIterType userReqFullComIndex;
; ..\component\ComM\Implementation\ComM.c	  2238  # if (COMM_PNC_ACTIVE_COORD == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2239    ComM_UserByteMaskIterType userByteMaskIndex;
; ..\component\ComM\Implementation\ComM.c	  2240    ComM_UserIterType userIndex;
; ..\component\ComM\Implementation\ComM.c	  2241  # endif
; ..\component\ComM\Implementation\ComM.c	  2242  
; ..\component\ComM\Implementation\ComM.c	  2243    /* #10 PNC Coordinator is enabled and at least one channel or PNC user is requesting FULL_COM:
; ..\component\ComM\Implementation\ComM.c	  2244     *     Return TRUE if the channel has no PNCs assigned, otherwise iterate over channel users to check if one of them is requesting FULL_COM.
; ..\component\ComM\Implementation\ComM.c	  2245     *     Note that PNC users are handled separately because of dependency to the Gateway Type of channel. */
; ..\component\ComM\Implementation\ComM.c	  2246  
; ..\component\ComM\Implementation\ComM.c	  2247    /* #20 PNC Coordinator is disabled and at least one channel or PNC user is requesting FULL_COM:
; ..\component\ComM\Implementation\ComM.c	  2248     *     Return TRUE, because there is no dependency to the Gateway Type of channel. */
; ..\component\ComM\Implementation\ComM.c	  2249  
; ..\component\ComM\Implementation\ComM.c	  2250    /*lint -e443 */
; ..\component\ComM\Implementation\ComM.c	  2251    /* PRQA S 2842 */ /* MD_ComM_2842_2843 */
; ..\component\ComM\Implementation\ComM.c	  2252    for (userReqFullComIndex = ComM_GetUserReqFullComStartIdxOfChannelPb(channel); userReqFullComIndex < ComM_GetUserReqFullComEndIdxOfChannelPb(channel); userReqFullComIndex++)
; ..\component\ComM\Implementation\ComM.c	  2253    {
; ..\component\ComM\Implementation\ComM.c	  2254      /* PRQA S 2842 */ /* MD_ComM_2842_2843 */
; ..\component\ComM\Implementation\ComM.c	  2255      if ((ComM_GetUserReqFullCom(userReqFullComIndex) != COMM_NO_REQUESTS) && (isUserRequesting == FALSE)) /* COV_COMM_FOR_LOOP_OPTIMIZATION */
	movh.a	a15,#@his(ComM_UserReqFullCom)
	ld.bu	d15,[a15]@los(ComM_UserReqFullCom)
.L891:

; ..\component\ComM\Implementation\ComM.c	  2256      {
; ..\component\ComM\Implementation\ComM.c	  2257        /* At least one user assigned to this channel requests FULL_COM. The 2nd condition is because there is no downgrade of highest request. */
; ..\component\ComM\Implementation\ComM.c	  2258  # if (COMM_PNC_ACTIVE_COORD == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2259  #  if (COMM_ISDEF_PNCPBINDUSEDOFCHANNELPB == STD_OFF) /* there are some channels without PNCs */
; ..\component\ComM\Implementation\ComM.c	  2260        if (!ComM_IsPncPbIndUsedOfChannelPb(channel)) /* PRQA S 4304 */ /* MD_MSR_AutosarBoolean */ /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  2261        {
; ..\component\ComM\Implementation\ComM.c	  2262          isUserRequesting = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2263        }
; ..\component\ComM\Implementation\ComM.c	  2264        else
; ..\component\ComM\Implementation\ComM.c	  2265  #  endif
; ..\component\ComM\Implementation\ComM.c	  2266        {
; ..\component\ComM\Implementation\ComM.c	  2267          for (userIndex = 0; userIndex < ComM_GetSizeOfUser(); userIndex++)
; ..\component\ComM\Implementation\ComM.c	  2268          {
; ..\component\ComM\Implementation\ComM.c	  2269            if (!ComM_IsPncUserOfUser(userIndex))
; ..\component\ComM\Implementation\ComM.c	  2270            {
; ..\component\ComM\Implementation\ComM.c	  2271              for (userByteMaskIndex = ComM_GetUserByteMaskStartIdxOfUser(userIndex); userByteMaskIndex < ComM_GetUserByteMaskEndIdxOfUser(userIndex); userByteMaskIndex++)
; ..\component\ComM\Implementation\ComM.c	  2272              /* PRQA S 0715 SUPPRESS_0715 */ /* MD_MSR_1.1 */
; ..\component\ComM\Implementation\ComM.c	  2273              {
; ..\component\ComM\Implementation\ComM.c	  2274                if ((ComM_GetChannelOfUserByteMask(userByteMaskIndex) == channel) &&
; ..\component\ComM\Implementation\ComM.c	  2275                    ((ComM_GetUserReqFullCom(ComM_GetUserReqFullComIdxOfUserByteMask(userByteMaskIndex)) & ComM_GetSetMaskOfUserByteMask(userByteMaskIndex)) != COMM_NO_REQUESTS))
; ..\component\ComM\Implementation\ComM.c	  2276                {
; ..\component\ComM\Implementation\ComM.c	  2277                  isUserRequesting = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2278                  break;
; ..\component\ComM\Implementation\ComM.c	  2279                }
; ..\component\ComM\Implementation\ComM.c	  2280              }
; ..\component\ComM\Implementation\ComM.c	  2281              /* PRQA L:SUPPRESS_0715 */
; ..\component\ComM\Implementation\ComM.c	  2282            }
; ..\component\ComM\Implementation\ComM.c	  2283          }
; ..\component\ComM\Implementation\ComM.c	  2284        }
; ..\component\ComM\Implementation\ComM.c	  2285  # else
; ..\component\ComM\Implementation\ComM.c	  2286        isUserRequesting = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2287  # endif
; ..\component\ComM\Implementation\ComM.c	  2288      }
; ..\component\ComM\Implementation\ComM.c	  2289    }
; ..\component\ComM\Implementation\ComM.c	  2290  
; ..\component\ComM\Implementation\ComM.c	  2291    /* if ((COMM_CONFIGURATION_VARIANT == COMM_CONFIGURATION_VARIANT_PRECOMPILE) && (COMM_ACTIVE_CHANNEL == 1U)) */
; ..\component\ComM\Implementation\ComM.c	  2292    COMM_DUMMY_STATEMENT_CONST(channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  2293  
; ..\component\ComM\Implementation\ComM.c	  2294    return isUserRequesting;
; ..\component\ComM\Implementation\ComM.c	  2295  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	ne	d2,d15,#0
	ret
.L511:
	
__ComM_IsUserRequestingChannel_function_end:
	.size	ComM_IsUserRequestingChannel,__ComM_IsUserRequestingChannel_function_end-ComM_IsUserRequestingChannel
.L357:
	; End of function
	
	.sdecl	'.text.ComM.ComM_ChannelIsRequestPending',code,cluster('ComM_ChannelIsRequestPending')
	.sect	'.text.ComM.ComM_ChannelIsRequestPending'
	.align	2
	

; ..\component\ComM\Implementation\ComM.c	  2296  #endif
; ..\component\ComM\Implementation\ComM.c	  2297  
; ..\component\ComM\Implementation\ComM.c	  2298  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2299   *  ComM_ChannelIsRequestPending()
; ..\component\ComM\Implementation\ComM.c	  2300   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2301  /*!
; ..\component\ComM\Implementation\ComM.c	  2302   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2303   *
; ..\component\ComM\Implementation\ComM.c	  2304   *
; ..\component\ComM\Implementation\ComM.c	  2305   *
; ..\component\ComM\Implementation\ComM.c	  2306   *
; ..\component\ComM\Implementation\ComM.c	  2307   *
; ..\component\ComM\Implementation\ComM.c	  2308   *
; ..\component\ComM\Implementation\ComM.c	  2309   */
; ..\component\ComM\Implementation\ComM.c	  2310  COMM_LOCAL_INLINE FUNC(boolean, COMM_CODE) ComM_ChannelIsRequestPending( NetworkHandleType channel )
; Function ComM_ChannelIsRequestPending
.L134:
ComM_ChannelIsRequestPending:	.type	func

; ..\component\ComM\Implementation\ComM.c	  2311  {
; ..\component\ComM\Implementation\ComM.c	  2312    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  2313    boolean isRequestPending = FALSE;
; ..\component\ComM\Implementation\ComM.c	  2314  #if( COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  2315    ComM_UserReqFullComIterType userReqFullComIndex;
; ..\component\ComM\Implementation\ComM.c	  2316  #endif
; ..\component\ComM\Implementation\ComM.c	  2317  
; ..\component\ComM\Implementation\ComM.c	  2318  #if( COMM_PNC_SUPPORT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  2319  # if( ( COMM_PNC_EXTENDED_FUNCTIONALITY_ENABLED == STD_ON ) && ( COMM_PNC_EXISTS_PNC_WITHOUT_CHANNELS == STD_ON ) )
; ..\component\ComM\Implementation\ComM.c	  2320    ComM_PncIterType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  2321    ComM_UserReqPncFullComIterType userReqPncFullComIndex;
; ..\component\ComM\Implementation\ComM.c	  2322  # endif
; ..\component\ComM\Implementation\ComM.c	  2323  #endif
; ..\component\ComM\Implementation\ComM.c	  2324  
; ..\component\ComM\Implementation\ComM.c	  2325    /* #10 If a passive wake-up occurred on the channel, return a pending request. */
; ..\component\ComM\Implementation\ComM.c	  2326    if( ComM_BusComModeReq[channel] != COMM_NO_COM_NO_PENDING_REQUEST )
	movh.a	a15,#@his(ComM_BusComModeReq)
.L896:
	ld.bu	d15,[a15]@los(ComM_BusComModeReq)
.L897:
	mov	d2,#0
.L527:
	jne	d15,#0,.L7
.L898:

; ..\component\ComM\Implementation\ComM.c	  2327    {
; ..\component\ComM\Implementation\ComM.c	  2328      isRequestPending = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2329    }
; ..\component\ComM\Implementation\ComM.c	  2330  
; ..\component\ComM\Implementation\ComM.c	  2331    /* #20 If a passive wake-up occurred on a FlexRay channel during shutdown, return a pending request. */
; ..\component\ComM\Implementation\ComM.c	  2332  #if( COMM_BUS_TYPE_FR_PRESENT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  2333    else if(ComM_BusComModeReqFrShutdown[channel] != COMM_NO_COM_NO_PENDING_REQUEST)
; ..\component\ComM\Implementation\ComM.c	  2334    {
; ..\component\ComM\Implementation\ComM.c	  2335      isRequestPending = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2336    }
; ..\component\ComM\Implementation\ComM.c	  2337  #endif
; ..\component\ComM\Implementation\ComM.c	  2338  
; ..\component\ComM\Implementation\ComM.c	  2339    /* #30 If at least one user is requesting the channel and the channel is not limited, return a pending request. */
; ..\component\ComM\Implementation\ComM.c	  2340  #if( COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  2341    else
; ..\component\ComM\Implementation\ComM.c	  2342    {
; ..\component\ComM\Implementation\ComM.c	  2343  # if( ( (COMM_MODE_LIMITATION == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF) ) || (COMM_WAKEUP_INHIBITION == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  2344      if( ComM_ChannelIsLimited(channel) == FALSE )
; ..\component\ComM\Implementation\ComM.c	  2345  # endif
; ..\component\ComM\Implementation\ComM.c	  2346      {
; ..\component\ComM\Implementation\ComM.c	  2347        for( userReqFullComIndex = ComM_GetUserReqFullComStartIdxOfChannelPb(channel);
; ..\component\ComM\Implementation\ComM.c	  2348             userReqFullComIndex < ComM_GetUserReqFullComEndIdxOfChannelPb(channel);
; ..\component\ComM\Implementation\ComM.c	  2349             userReqFullComIndex++ )
; ..\component\ComM\Implementation\ComM.c	  2350        {
; ..\component\ComM\Implementation\ComM.c	  2351          if( ComM_GetUserReqFullCom(userReqFullComIndex) != COMM_NO_REQUESTS )
	mov	d15,d2
	movh.a	a15,#@his(ComM_UserReqFullCom)
.L528:
	j	.L8
.L9:
	ld.bu	d15,[a15]@los(ComM_UserReqFullCom)
.L529:
	jeq	d15,#0,.L10
.L7:

; ..\component\ComM\Implementation\ComM.c	  2352          {
; ..\component\ComM\Implementation\ComM.c	  2353            isRequestPending = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2354            break;
; ..\component\ComM\Implementation\ComM.c	  2355          }
; ..\component\ComM\Implementation\ComM.c	  2356        }
; ..\component\ComM\Implementation\ComM.c	  2357      }
; ..\component\ComM\Implementation\ComM.c	  2358  
; ..\component\ComM\Implementation\ComM.c	  2359      /* If PNC Routing Limitation is enabled, reject the request if no channel user requests FULL_COM and the channel has limited routing */
; ..\component\ComM\Implementation\ComM.c	  2360  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2361      if (isRequestPending == TRUE)
; ..\component\ComM\Implementation\ComM.c	  2362      {
; ..\component\ComM\Implementation\ComM.c	  2363        if ((ComM_IsUserRequestingChannel(channel) == FALSE) && (ComM_PncToChannelRoutingState[channel] == COMM_PNCROUTING_LIMITED))
; ..\component\ComM\Implementation\ComM.c	  2364        {
; ..\component\ComM\Implementation\ComM.c	  2365          isRequestPending = FALSE;
; ..\component\ComM\Implementation\ComM.c	  2366        }
; ..\component\ComM\Implementation\ComM.c	  2367      }
; ..\component\ComM\Implementation\ComM.c	  2368  # endif
; ..\component\ComM\Implementation\ComM.c	  2369    }
; ..\component\ComM\Implementation\ComM.c	  2370  #endif
; ..\component\ComM\Implementation\ComM.c	  2371  
; ..\component\ComM\Implementation\ComM.c	  2372      /* #40 If Extended PNC Functionality is enabled, a PNC may have no channels assigned. If a user is requesting such a PNC,
; ..\component\ComM\Implementation\ComM.c	  2373       *     return a pending request for each channel to ensure ECU staying in RUN mode. */
; ..\component\ComM\Implementation\ComM.c	  2374  #if( COMM_PNC_SUPPORT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  2375  # if( (COMM_PNC_EXTENDED_FUNCTIONALITY_ENABLED == STD_ON) && (COMM_PNC_EXISTS_PNC_WITHOUT_CHANNELS == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  2376    for( pncIndex = 0;
; ..\component\ComM\Implementation\ComM.c	  2377        (pncIndex < ComM_GetSizeOfPncPb()) && (isRequestPending == FALSE); /* break the loop as soon as a pending request is detected */
; ..\component\ComM\Implementation\ComM.c	  2378         pncIndex++ )
; ..\component\ComM\Implementation\ComM.c	  2379    {
; ..\component\ComM\Implementation\ComM.c	  2380  #  if( COMM_PNCCHANNELMAPPING == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  2381      /* The condition is true if PNC has no channels */
; ..\component\ComM\Implementation\ComM.c	  2382      if (ComM_GetPncChannelMappingStartIdxOfPncPb(pncIndex) == COMM_NO_PNCCHANNELMAPPINGSTARTIDXOFPNCPB)
; ..\component\ComM\Implementation\ComM.c	  2383  #  endif
; ..\component\ComM\Implementation\ComM.c	  2384      {
; ..\component\ComM\Implementation\ComM.c	  2385        for( userReqPncFullComIndex = ComM_GetUserReqPncFullComStartIdxOfPncPb(pncIndex);
; ..\component\ComM\Implementation\ComM.c	  2386             userReqPncFullComIndex < ComM_GetUserReqPncFullComEndIdxOfPncPb(pncIndex);
; ..\component\ComM\Implementation\ComM.c	  2387             userReqPncFullComIndex++ )
; ..\component\ComM\Implementation\ComM.c	  2388        {
; ..\component\ComM\Implementation\ComM.c	  2389          if( ComM_GetUserReqPncFullCom(userReqPncFullComIndex) != COMM_NO_REQUESTS )
; ..\component\ComM\Implementation\ComM.c	  2390          {
; ..\component\ComM\Implementation\ComM.c	  2391            isRequestPending = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2392            break;
; ..\component\ComM\Implementation\ComM.c	  2393          }
; ..\component\ComM\Implementation\ComM.c	  2394        }
; ..\component\ComM\Implementation\ComM.c	  2395      }
; ..\component\ComM\Implementation\ComM.c	  2396    }
; ..\component\ComM\Implementation\ComM.c	  2397  # endif
; ..\component\ComM\Implementation\ComM.c	  2398  #endif
; ..\component\ComM\Implementation\ComM.c	  2399  
; ..\component\ComM\Implementation\ComM.c	  2400    return isRequestPending;
; ..\component\ComM\Implementation\ComM.c	  2401  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	mov	d2,#1
	ret
.L10:
	mov	d15,#1
.L8:
	jeq	d15,#0,.L9
.L899:
	ret
.L513:
	
__ComM_ChannelIsRequestPending_function_end:
	.size	ComM_ChannelIsRequestPending,__ComM_ChannelIsRequestPending_function_end-ComM_ChannelIsRequestPending
.L362:
	; End of function
	
	.sdecl	'.text.ComM.ComM_TF_NoCom_NetReq',code,cluster('ComM_TF_NoCom_NetReq')
	.sect	'.text.ComM.ComM_TF_NoCom_NetReq'
	.align	2
	

; ..\component\ComM\Implementation\ComM.c	  2402  
; ..\component\ComM\Implementation\ComM.c	  2403  #if (COMM_PNC_ACTIVE_COORD == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2404  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2405   *  ComM_PncGetGwChannelRequest()
; ..\component\ComM\Implementation\ComM.c	  2406   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2407  /*!
; ..\component\ComM\Implementation\ComM.c	  2408   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2409   *
; ..\component\ComM\Implementation\ComM.c	  2410   *
; ..\component\ComM\Implementation\ComM.c	  2411   *
; ..\component\ComM\Implementation\ComM.c	  2412   *
; ..\component\ComM\Implementation\ComM.c	  2413   *
; ..\component\ComM\Implementation\ComM.c	  2414   */
; ..\component\ComM\Implementation\ComM.c	  2415  COMM_LOCAL_INLINE FUNC( ComM_StateType, COMM_CODE ) ComM_PncGetGwChannelRequest( NetworkHandleType channel )
; ..\component\ComM\Implementation\ComM.c	  2416  {
; ..\component\ComM\Implementation\ComM.c	  2417    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  2418    ComM_PncIterType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  2419    ComM_PncPbIndIterType pncPbIndIter;
; ..\component\ComM\Implementation\ComM.c	  2420    ComM_StateType gwChannelComMode;
; ..\component\ComM\Implementation\ComM.c	  2421    ComM_PncModeType highestPNComModeReq = COMM_PNC_NO_COMMUNICATION;
; ..\component\ComM\Implementation\ComM.c	  2422    ComM_PncModeType tmpPNComModeReq;
; ..\component\ComM\Implementation\ComM.c	  2423  #  if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2424    boolean eraRequestReceivedOnChannel = FALSE;
; ..\component\ComM\Implementation\ComM.c	  2425    boolean pncRequestIsPending = FALSE;
; ..\component\ComM\Implementation\ComM.c	  2426  #  endif
; ..\component\ComM\Implementation\ComM.c	  2427  
; ..\component\ComM\Implementation\ComM.c	  2428    /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  2429    /* #10 Iterate over PNCs mapped to the channel and calculate the highest requested mode of the PNCs.
; ..\component\ComM\Implementation\ComM.c	  2430     *     Break the iteration once the highest possible mode (COMM_PNC_REQUESTED) is detected. */
; ..\component\ComM\Implementation\ComM.c	  2431  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2432    if(ComM_PncIsEraRequestReceivedOnChannel(channel) == TRUE)
; ..\component\ComM\Implementation\ComM.c	  2433    {
; ..\component\ComM\Implementation\ComM.c	  2434      /* Routing to this channel is not limited because an ERA signal containing a PNC request is received on the channel */
; ..\component\ComM\Implementation\ComM.c	  2435      eraRequestReceivedOnChannel = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2436    }
; ..\component\ComM\Implementation\ComM.c	  2437  # endif
; ..\component\ComM\Implementation\ComM.c	  2438  
; ..\component\ComM\Implementation\ComM.c	  2439    for (pncPbIndIter = ComM_GetPncPbIndStartIdxOfChannelPb(channel);
; ..\component\ComM\Implementation\ComM.c	  2440        (pncPbIndIter < ComM_GetPncPbIndEndIdxOfChannelPb(channel)) && (highestPNComModeReq != COMM_PNC_REQUESTED);
; ..\component\ComM\Implementation\ComM.c	  2441         pncPbIndIter++) /* COV_COMM_FOR_LOOP_OPTIMIZATION */
; ..\component\ComM\Implementation\ComM.c	  2442    {
; ..\component\ComM\Implementation\ComM.c	  2443      pncIndex = (ComM_PncIterType)ComM_GetPncPbInd(pncPbIndIter);
; ..\component\ComM\Implementation\ComM.c	  2444  
; ..\component\ComM\Implementation\ComM.c	  2445  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2446      /* Parameter pncCanBeRequested is TRUE because we first need the potentially highest PNC request and will consider the channel' limitation state later. */
; ..\component\ComM\Implementation\ComM.c	  2447      tmpPNComModeReq = ComM_CalculateHighestPNComMode(pncIndex, TRUE);
; ..\component\ComM\Implementation\ComM.c	  2448      if (tmpPNComModeReq >= COMM_PNC_REQUESTED)
; ..\component\ComM\Implementation\ComM.c	  2449      {
; ..\component\ComM\Implementation\ComM.c	  2450        pncRequestIsPending = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2451        /* PNC mode may control the channel mode only if Routing Limitation state of the channel is COMM_PNCROUTING_NOT_LIMITED,
; ..\component\ComM\Implementation\ComM.c	  2452         * i.e. if routing of this PNC is not limited on the channel or limitation is de-activated due to reception of ERA=1. Otherwise ignore the PNC mode.
; ..\component\ComM\Implementation\ComM.c	  2453         * Note: PNC mode does not control the channel mode if limitation is de-activated because Nm is in state NM_REPEAT_MESSAGE or
; ..\component\ComM\Implementation\ComM.c	  2454         * if PNC is woken up by EIRA=1 (not ERA). */
; ..\component\ComM\Implementation\ComM.c	  2455        if((!ComM_IsPncLimitation(channel, pncIndex)) || (eraRequestReceivedOnChannel == TRUE))
; ..\component\ComM\Implementation\ComM.c	  2456        {
; ..\component\ComM\Implementation\ComM.c	  2457          highestPNComModeReq = tmpPNComModeReq;
; ..\component\ComM\Implementation\ComM.c	  2458        }
; ..\component\ComM\Implementation\ComM.c	  2459      }
; ..\component\ComM\Implementation\ComM.c	  2460  # else
; ..\component\ComM\Implementation\ComM.c	  2461      /* Found a PN assigned to the current channel. Calculate the highest PN requested mode of all PNs on the channel */
; ..\component\ComM\Implementation\ComM.c	  2462      tmpPNComModeReq = ComM_CalculateHighestPNComMode(pncIndex, TRUE); /* the 2nd parameter is not evaluated */
; ..\component\ComM\Implementation\ComM.c	  2463      if (tmpPNComModeReq >= COMM_PNC_REQUESTED)
; ..\component\ComM\Implementation\ComM.c	  2464      {
; ..\component\ComM\Implementation\ComM.c	  2465        highestPNComModeReq = tmpPNComModeReq;
; ..\component\ComM\Implementation\ComM.c	  2466      }
; ..\component\ComM\Implementation\ComM.c	  2467  # endif
; ..\component\ComM\Implementation\ComM.c	  2468    }
; ..\component\ComM\Implementation\ComM.c	  2469  
; ..\component\ComM\Implementation\ComM.c	  2470    /* #20 Get the requested channel state depending on the highest requested mode of the PNCs and the Gateway Type of the channel. */
; ..\component\ComM\Implementation\ComM.c	  2471    gwChannelComMode = ComM_PncGetGwChannelState(channel, highestPNComModeReq);
; ..\component\ComM\Implementation\ComM.c	  2472  
; ..\component\ComM\Implementation\ComM.c	  2473    /* #30 If PNC Routing Limitation is enabled, update the limitation state of the channel. */
; ..\component\ComM\Implementation\ComM.c	  2474  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2475    ComM_PncRoutingLimitationSetState( channel, highestPNComModeReq, pncRequestIsPending );
; ..\component\ComM\Implementation\ComM.c	  2476  # endif
; ..\component\ComM\Implementation\ComM.c	  2477  
; ..\component\ComM\Implementation\ComM.c	  2478    return gwChannelComMode;
; ..\component\ComM\Implementation\ComM.c	  2479  }
; ..\component\ComM\Implementation\ComM.c	  2480  #endif
; ..\component\ComM\Implementation\ComM.c	  2481  
; ..\component\ComM\Implementation\ComM.c	  2482  #if (COMM_PNC_ACTIVE_COORD == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2483  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2484   *  ComM_PncGetGwChannelState()
; ..\component\ComM\Implementation\ComM.c	  2485   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2486  /*!
; ..\component\ComM\Implementation\ComM.c	  2487   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2488   *
; ..\component\ComM\Implementation\ComM.c	  2489   *
; ..\component\ComM\Implementation\ComM.c	  2490   *
; ..\component\ComM\Implementation\ComM.c	  2491   *
; ..\component\ComM\Implementation\ComM.c	  2492   *
; ..\component\ComM\Implementation\ComM.c	  2493   *
; ..\component\ComM\Implementation\ComM.c	  2494   *
; ..\component\ComM\Implementation\ComM.c	  2495   *
; ..\component\ComM\Implementation\ComM.c	  2496   *
; ..\component\ComM\Implementation\ComM.c	  2497   */
; ..\component\ComM\Implementation\ComM.c	  2498  COMM_LOCAL_INLINE FUNC( ComM_StateType, COMM_CODE ) ComM_PncGetGwChannelState( NetworkHandleType channel, ComM_PncModeType highestPNComModeReq )
; ..\component\ComM\Implementation\ComM.c	  2499  {
; ..\component\ComM\Implementation\ComM.c	  2500    /* The function is used in conditions, which are not always evaluated because of 'short-circuit evaluation'.
; ..\component\ComM\Implementation\ComM.c	  2501     * Therefore the function is not allowed to change the module' state i.e. write global variables.
; ..\component\ComM\Implementation\ComM.c	  2502     */
; ..\component\ComM\Implementation\ComM.c	  2503  
; ..\component\ComM\Implementation\ComM.c	  2504    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  2505    ComM_StateType gwChannelComMode;
; ..\component\ComM\Implementation\ComM.c	  2506  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2507  #  if (COMM_PNC_EXISTS_GATEWAY_TYPE_ACTIVE == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2508    ComM_GwTypeOfChannelType gwTypeOfChannel = ComM_GetGwTypeOfChannel(channel);
; ..\component\ComM\Implementation\ComM.c	  2509  #  endif
; ..\component\ComM\Implementation\ComM.c	  2510  #endif
; ..\component\ComM\Implementation\ComM.c	  2511  
; ..\component\ComM\Implementation\ComM.c	  2512    /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  2513    /* #10 The requested channel state depends on the highest requested mode of the PNCs and the Gateway Type of the channel:
; ..\component\ComM\Implementation\ComM.c	  2514     *     COMM_FULL_COM_NETWORK_REQUESTED if at least one PNC on the channel
; ..\component\ComM\Implementation\ComM.c	  2515     *      1) is requested internally by a PNC user or externally via ERA that is originated from a channel with Gateway Type ACTIVE.
; ..\component\ComM\Implementation\ComM.c	  2516     *      2) is requested externally via ERA that is originated from a channel with Gateway Type PASSIVE and the current channel has Gateway Type ACTIVE.
; ..\component\ComM\Implementation\ComM.c	  2517     *      3) is requested externally via ERA that is originated from a channel with Gateway Type PASSIVE and the current channel has Gateway Type PASSIVE, if the PNC-0-Vector Avoidance feature is enabled.
; ..\component\ComM\Implementation\ComM.c	  2518     *     COMM_FULL_COM_READY_SLEEP otherwise and if at least one PNC on the channel is requested externally via ERA that
; ..\component\ComM\Implementation\ComM.c	  2519     *     is originated from a channel with Gateway Type PASSIVE and the current channel has Gateway Type PASSIVE.
; ..\component\ComM\Implementation\ComM.c	  2520     *     COMM_NO_COM_NO_PENDING_REQUEST otherwise. */
; ..\component\ComM\Implementation\ComM.c	  2521    if( highestPNComModeReq == COMM_PNC_REQUESTED )
; ..\component\ComM\Implementation\ComM.c	  2522    {
; ..\component\ComM\Implementation\ComM.c	  2523      gwChannelComMode = COMM_FULL_COM_NETWORK_REQUESTED;
; ..\component\ComM\Implementation\ComM.c	  2524    }
; ..\component\ComM\Implementation\ComM.c	  2525  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2526    else if( highestPNComModeReq == COMM_PNC_REQUESTED_PASSIVE )
; ..\component\ComM\Implementation\ComM.c	  2527    {
; ..\component\ComM\Implementation\ComM.c	  2528  #  if (COMM_PNC_EXISTS_GATEWAY_TYPE_ACTIVE == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2529      if( gwTypeOfChannel == COMM_GATEWAY_TYPE_ACTIVE ) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  2530      {
; ..\component\ComM\Implementation\ComM.c	  2531        /* Channels with GW type ACTIVE shall be requested actively. */
; ..\component\ComM\Implementation\ComM.c	  2532        gwChannelComMode = COMM_FULL_COM_NETWORK_REQUESTED;
; ..\component\ComM\Implementation\ComM.c	  2533      }
; ..\component\ComM\Implementation\ComM.c	  2534      else
; ..\component\ComM\Implementation\ComM.c	  2535  #  endif
; ..\component\ComM\Implementation\ComM.c	  2536      {
; ..\component\ComM\Implementation\ComM.c	  2537     /* If PNC-0-Vector Avoidance feature is enabled
; ..\component\ComM\Implementation\ComM.c	  2538      * Channels with GW type PASSIVE shall not be requested actively. Note: no check for GwType needed because it is ensured
; ..\component\ComM\Implementation\ComM.c	  2539      * per validation rule that a coordinated channel always has GwType ACTIVE or PASSIVE and never has GwType NONE. */
; ..\component\ComM\Implementation\ComM.c	  2540  #  if (COMM_PNC_0_VECTOR_AVOIDANCE == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2541        gwChannelComMode = COMM_FULL_COM_READY_SLEEP;
; ..\component\ComM\Implementation\ComM.c	  2542  #  else
; ..\component\ComM\Implementation\ComM.c	  2543      /* Cannels with GW type PASSIVE shall be requested actively if the feature PNC-0-Vector Avoidance is not enabled. */
; ..\component\ComM\Implementation\ComM.c	  2544        gwChannelComMode = COMM_FULL_COM_NETWORK_REQUESTED;
; ..\component\ComM\Implementation\ComM.c	  2545  #  endif
; ..\component\ComM\Implementation\ComM.c	  2546      }
; ..\component\ComM\Implementation\ComM.c	  2547    }
; ..\component\ComM\Implementation\ComM.c	  2548  # endif
; ..\component\ComM\Implementation\ComM.c	  2549    else
; ..\component\ComM\Implementation\ComM.c	  2550    {
; ..\component\ComM\Implementation\ComM.c	  2551      gwChannelComMode = COMM_NO_COM_NO_PENDING_REQUEST;
; ..\component\ComM\Implementation\ComM.c	  2552    }
; ..\component\ComM\Implementation\ComM.c	  2553  
; ..\component\ComM\Implementation\ComM.c	  2554  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  2555    COMM_DUMMY_STATEMENT_CONST(channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  2556  # else
; ..\component\ComM\Implementation\ComM.c	  2557  #  if (COMM_PNC_EXISTS_GATEWAY_TYPE_ACTIVE == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  2558    COMM_DUMMY_STATEMENT_CONST(channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  2559  #  endif
; ..\component\ComM\Implementation\ComM.c	  2560  # endif
; ..\component\ComM\Implementation\ComM.c	  2561  
; ..\component\ComM\Implementation\ComM.c	  2562    return gwChannelComMode;
; ..\component\ComM\Implementation\ComM.c	  2563  }
; ..\component\ComM\Implementation\ComM.c	  2564  #endif
; ..\component\ComM\Implementation\ComM.c	  2565  
; ..\component\ComM\Implementation\ComM.c	  2566  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2567  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2568  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2569   *  ComM_PncRoutingLimitationSetState()
; ..\component\ComM\Implementation\ComM.c	  2570   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2571  /*!
; ..\component\ComM\Implementation\ComM.c	  2572   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2573   *
; ..\component\ComM\Implementation\ComM.c	  2574   *
; ..\component\ComM\Implementation\ComM.c	  2575   *
; ..\component\ComM\Implementation\ComM.c	  2576   *
; ..\component\ComM\Implementation\ComM.c	  2577   *
; ..\component\ComM\Implementation\ComM.c	  2578   *
; ..\component\ComM\Implementation\ComM.c	  2579   *
; ..\component\ComM\Implementation\ComM.c	  2580   *
; ..\component\ComM\Implementation\ComM.c	  2581   *
; ..\component\ComM\Implementation\ComM.c	  2582   *
; ..\component\ComM\Implementation\ComM.c	  2583   */
; ..\component\ComM\Implementation\ComM.c	  2584  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_PncRoutingLimitationSetState( CONST(NetworkHandleType, AUTOMATIC) channel, CONST(ComM_PncModeType, AUTOMATIC) highestPNComModeReq, CONST(boolean, AUTOMATIC) pncRequestIsPending )
; ..\component\ComM\Implementation\ComM.c	  2585  {
; ..\component\ComM\Implementation\ComM.c	  2586    ComM_PncPbIndIterType pncPbIndIter;
; ..\component\ComM\Implementation\ComM.c	  2587  
; ..\component\ComM\Implementation\ComM.c	  2588    if( highestPNComModeReq >= COMM_PNC_REQUESTED )
; ..\component\ComM\Implementation\ComM.c	  2589    {
; ..\component\ComM\Implementation\ComM.c	  2590      /* #10 Enter the Routing Limitation state COMM_PNCROUTING_NOT_LIMITED if
; ..\component\ComM\Implementation\ComM.c	  2591       *     1) ERA=1 is received on the channel or
; ..\component\ComM\Implementation\ComM.c	  2592       *     2) ComM user requests FULL_COM for a PNC, which is not limited on the channel. */
; ..\component\ComM\Implementation\ComM.c	  2593      ComM_PncToChannelRoutingState[channel] |= COMM_PNCROUTING_NOT_LIMITED; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  2594    }
; ..\component\ComM\Implementation\ComM.c	  2595    else if( pncRequestIsPending == TRUE )
; ..\component\ComM\Implementation\ComM.c	  2596    {
; ..\component\ComM\Implementation\ComM.c	  2597      /* #20 Exit the Routing Limitation state COMM_PNCROUTING_NOT_LIMITED if
; ..\component\ComM\Implementation\ComM.c	  2598       *     1) All ComM users assigned to the channel request NO_COM and
; ..\component\ComM\Implementation\ComM.c	  2599       *     2) ERA=0 is received on the channel and
; ..\component\ComM\Implementation\ComM.c	  2600       *     3) All PNCs being in state PNC_REQUESTED are limited on the channel.
; ..\component\ComM\Implementation\ComM.c	  2601       *     Clear the COMM_PNCROUTING_NOT_LIMITED flag, note that Nm can be in state NM_STATE_REPEAT_MESSAGE. */
; ..\component\ComM\Implementation\ComM.c	  2602      ComM_PncToChannelRoutingState[channel] &= COMM_PNCROUTING_NOT_LIMITED_CLEAR; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  2603    }
; ..\component\ComM\Implementation\ComM.c	  2604    else
; ..\component\ComM\Implementation\ComM.c	  2605    {
; ..\component\ComM\Implementation\ComM.c	  2606      /* #30 Otherwise and if at least one PNC on the channel is limited, exit the Routing Limitation state COMM_PNCROUTING_NOT_LIMITED. */
; ..\component\ComM\Implementation\ComM.c	  2607      /* This is needed e.g. for the following scenario: a PNC is limited on all channels, requesting the PNC via user shall not activate it. */
; ..\component\ComM\Implementation\ComM.c	  2608      for (pncPbIndIter = ComM_GetPncPbIndStartIdxOfChannelPb(channel);
; ..\component\ComM\Implementation\ComM.c	  2609           pncPbIndIter < ComM_GetPncPbIndEndIdxOfChannelPb(channel);
; ..\component\ComM\Implementation\ComM.c	  2610           pncPbIndIter++)
; ..\component\ComM\Implementation\ComM.c	  2611      {
; ..\component\ComM\Implementation\ComM.c	  2612        if (ComM_IsPncLimitation(channel, ComM_GetPncPbInd(pncPbIndIter)))
; ..\component\ComM\Implementation\ComM.c	  2613        {
; ..\component\ComM\Implementation\ComM.c	  2614          ComM_PncToChannelRoutingState[channel] &= COMM_PNCROUTING_NOT_LIMITED_CLEAR; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  2615          break;
; ..\component\ComM\Implementation\ComM.c	  2616        }
; ..\component\ComM\Implementation\ComM.c	  2617      }
; ..\component\ComM\Implementation\ComM.c	  2618    }
; ..\component\ComM\Implementation\ComM.c	  2619  }
; ..\component\ComM\Implementation\ComM.c	  2620  # endif
; ..\component\ComM\Implementation\ComM.c	  2621  #endif
; ..\component\ComM\Implementation\ComM.c	  2622  
; ..\component\ComM\Implementation\ComM.c	  2623  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2624  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2625  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2626   *  ComM_PncIsEraRequestReceivedOnChannel()
; ..\component\ComM\Implementation\ComM.c	  2627   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2628  /*!
; ..\component\ComM\Implementation\ComM.c	  2629   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2630   *
; ..\component\ComM\Implementation\ComM.c	  2631   *
; ..\component\ComM\Implementation\ComM.c	  2632   */
; ..\component\ComM\Implementation\ComM.c	  2633  COMM_LOCAL FUNC( boolean, COMM_CODE ) ComM_PncIsEraRequestReceivedOnChannel( NetworkHandleType  Channel )
; ..\component\ComM\Implementation\ComM.c	  2634  {
; ..\component\ComM\Implementation\ComM.c	  2635    boolean isEraRequestReceivedOnChannel = FALSE;
; ..\component\ComM\Implementation\ComM.c	  2636    ComM_PncSignalValuesIterType pncSignalByteIndex;
; ..\component\ComM\Implementation\ComM.c	  2637    ComM_SizeOfPncSignalType pncSignalIndex;
; ..\component\ComM\Implementation\ComM.c	  2638  
; ..\component\ComM\Implementation\ComM.c	  2639    for(pncSignalIndex = 0; pncSignalIndex < ComM_GetSizeOfPncSignal(); pncSignalIndex++) /* COV_COMM_FOR_LOOP_OPTIMIZATION */
; ..\component\ComM\Implementation\ComM.c	  2640    {
; ..\component\ComM\Implementation\ComM.c	  2641      if((ComM_GetTypeOfPncSignal(pncSignalIndex) == COMM_ERA_RX_TYPEOFPNCSIGNAL) && (ComM_GetChannelIdxOfPncSignal(pncSignalIndex) == Channel))
; ..\component\ComM\Implementation\ComM.c	  2642      {
; ..\component\ComM\Implementation\ComM.c	  2643        for(pncSignalByteIndex = ComM_GetPncSignalValuesStartIdxOfPncSignal(pncSignalIndex); pncSignalByteIndex < ComM_GetPncSignalValuesEndIdxOfPncSignal(pncSignalIndex); pncSignalByteIndex++ )
; ..\component\ComM\Implementation\ComM.c	  2644        {
; ..\component\ComM\Implementation\ComM.c	  2645          if(ComM_GetPncSignalValues(pncSignalByteIndex) != 0x00u)
; ..\component\ComM\Implementation\ComM.c	  2646          {
; ..\component\ComM\Implementation\ComM.c	  2647            /* #10 Return TRUE if at least one PNC is requested via ERA_RX signal on the given channel. Return FALSE otherwise. */
; ..\component\ComM\Implementation\ComM.c	  2648            isEraRequestReceivedOnChannel = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2649            break;
; ..\component\ComM\Implementation\ComM.c	  2650          }
; ..\component\ComM\Implementation\ComM.c	  2651        }
; ..\component\ComM\Implementation\ComM.c	  2652        break; /* Because there is one ERA_RX signal per channel at most. */
; ..\component\ComM\Implementation\ComM.c	  2653      }
; ..\component\ComM\Implementation\ComM.c	  2654    }
; ..\component\ComM\Implementation\ComM.c	  2655  
; ..\component\ComM\Implementation\ComM.c	  2656    return isEraRequestReceivedOnChannel;
; ..\component\ComM\Implementation\ComM.c	  2657  }
; ..\component\ComM\Implementation\ComM.c	  2658  # endif
; ..\component\ComM\Implementation\ComM.c	  2659  #endif
; ..\component\ComM\Implementation\ComM.c	  2660  
; ..\component\ComM\Implementation\ComM.c	  2661  #if ((COMM_PNC_SUPPORT == STD_ON) && (COMM_PNCCHANNELMAPPING == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  2662  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2663   *  ComM_PncInFullComWakesUpTheChannel()
; ..\component\ComM\Implementation\ComM.c	  2664   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2665  /*!
; ..\component\ComM\Implementation\ComM.c	  2666   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2667   *
; ..\component\ComM\Implementation\ComM.c	  2668   *
; ..\component\ComM\Implementation\ComM.c	  2669   *
; ..\component\ComM\Implementation\ComM.c	  2670   *
; ..\component\ComM\Implementation\ComM.c	  2671   */
; ..\component\ComM\Implementation\ComM.c	  2672  COMM_LOCAL_INLINE FUNC(ComM_StateType, COMM_CODE) ComM_PncInFullComWakesUpTheChannel(NetworkHandleType channel, ComM_StateType highestRequest)
; ..\component\ComM\Implementation\ComM.c	  2673  {
; ..\component\ComM\Implementation\ComM.c	  2674    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  2675    ComM_PncIterType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  2676    ComM_PncPbIndIterType pncPbIndIter;
; ..\component\ComM\Implementation\ComM.c	  2677    ComM_StateType localhighestRequest = highestRequest;
; ..\component\ComM\Implementation\ComM.c	  2678    /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  2679    /* #10 Return COMM_FULL_COM_READY_SLEEP if current highest request is COMM_NO_COM_NO_PENDING_REQUEST and
; ..\component\ComM\Implementation\ComM.c	  2680     *   at least one PNC on this channel is in PNC_FULL_COMMUNICATION mode.
; ..\component\ComM\Implementation\ComM.c	  2681     *   Otherwise return the current highest request (no changes). */
; ..\component\ComM\Implementation\ComM.c	  2682  
; ..\component\ComM\Implementation\ComM.c	  2683    /* Note: if COMM_FULL_COM_READY_SLEEP ComM ensures that the channel is at least in COMM_FULL_COM_READY_SLEEP state. */
; ..\component\ComM\Implementation\ComM.c	  2684    /* ESCAN00066290: There is no downgrade of highest request. If detected COMM_FULL_COM_NETWORK_REQUESTED, then no need to check PNCs anymore */
; ..\component\ComM\Implementation\ComM.c	  2685    if (localhighestRequest == COMM_NO_COM_NO_PENDING_REQUEST)
; ..\component\ComM\Implementation\ComM.c	  2686    {
; ..\component\ComM\Implementation\ComM.c	  2687      for (pncPbIndIter = ComM_GetPncPbIndStartIdxOfChannelPb(channel);
; ..\component\ComM\Implementation\ComM.c	  2688           pncPbIndIter < ComM_GetPncPbIndEndIdxOfChannelPb(channel);
; ..\component\ComM\Implementation\ComM.c	  2689           pncPbIndIter++) /* COV_COMM_FOR_LOOP_OPTIMIZATION */
; ..\component\ComM\Implementation\ComM.c	  2690      {
; ..\component\ComM\Implementation\ComM.c	  2691        pncIndex = (ComM_PncIterType)ComM_GetPncPbInd(pncPbIndIter);
; ..\component\ComM\Implementation\ComM.c	  2692  
; ..\component\ComM\Implementation\ComM.c	  2693        if(ComM_GetActivePncComMode(pncIndex) != COMM_PNC_NO_COMMUNICATION)
; ..\component\ComM\Implementation\ComM.c	  2694        {
; ..\component\ComM\Implementation\ComM.c	  2695          localhighestRequest = COMM_FULL_COM_READY_SLEEP;
; ..\component\ComM\Implementation\ComM.c	  2696          break;
; ..\component\ComM\Implementation\ComM.c	  2697        }
; ..\component\ComM\Implementation\ComM.c	  2698      }
; ..\component\ComM\Implementation\ComM.c	  2699    }
; ..\component\ComM\Implementation\ComM.c	  2700  
; ..\component\ComM\Implementation\ComM.c	  2701  # if (COMM_ISDEF_PNCPBINDSTARTIDXOFCHANNELPB == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2702    COMM_DUMMY_STATEMENT_CONST(channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  2703  # endif
; ..\component\ComM\Implementation\ComM.c	  2704  
; ..\component\ComM\Implementation\ComM.c	  2705    return localhighestRequest;
; ..\component\ComM\Implementation\ComM.c	  2706  }
; ..\component\ComM\Implementation\ComM.c	  2707  #endif
; ..\component\ComM\Implementation\ComM.c	  2708  
; ..\component\ComM\Implementation\ComM.c	  2709  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2710  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2711  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2712   *  ComM_PncIsOnlySystemUserRequesting()
; ..\component\ComM\Implementation\ComM.c	  2713   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2714  /*!
; ..\component\ComM\Implementation\ComM.c	  2715   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2716   *
; ..\component\ComM\Implementation\ComM.c	  2717   *
; ..\component\ComM\Implementation\ComM.c	  2718   *
; ..\component\ComM\Implementation\ComM.c	  2719   *
; ..\component\ComM\Implementation\ComM.c	  2720   */
; ..\component\ComM\Implementation\ComM.c	  2721  COMM_LOCAL_INLINE FUNC( boolean, COMM_CODE) ComM_PncIsOnlySystemUserRequesting( ComM_PncIterType pncIndex, ComM_UserReqPncFullComIterType byteIndex )
; ..\component\ComM\Implementation\ComM.c	  2722  {
; ..\component\ComM\Implementation\ComM.c	  2723    boolean retValue = FALSE;
; ..\component\ComM\Implementation\ComM.c	  2724    ComM_UserPncByteMaskStartIdxOfUserType uSysUserByteMaskIndex;
; ..\component\ComM\Implementation\ComM.c	  2725  
; ..\component\ComM\Implementation\ComM.c	  2726    /* #10 If the provided byteIndex corresponds to the system user, check whether a request from another PNC user (not the system user)
; ..\component\ComM\Implementation\ComM.c	  2727     *     is stored in this byte. Return TRUE if only a request of the system user is stored in the request byte.
; ..\component\ComM\Implementation\ComM.c	  2728     *     Note: if PNC is synchronized, there is exactly one system user and one byte index where the system user' request is stored. */
; ..\component\ComM\Implementation\ComM.c	  2729  #  if (COMM_ISDEF_COORDINATEDOFPNC == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  2730    if(ComM_IsCoordinatedOfPnc(pncIndex)) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  2731  #  endif
; ..\component\ComM\Implementation\ComM.c	  2732    {
; ..\component\ComM\Implementation\ComM.c	  2733      uSysUserByteMaskIndex = ComM_GetUserPncByteMaskStartIdxOfUser(ComM_GetSystemUserOfPnc(pncIndex));
; ..\component\ComM\Implementation\ComM.c	  2734      if (byteIndex == ComM_GetUserReqPncFullComIdxOfUserPncByteMask(uSysUserByteMaskIndex))
; ..\component\ComM\Implementation\ComM.c	  2735      {
; ..\component\ComM\Implementation\ComM.c	  2736        if (((ComM_GetUserReqPncFullCom(byteIndex) & ComM_GetClearMaskOfUserPncByteMask(uSysUserByteMaskIndex)) == COMM_NO_REQUESTS))
; ..\component\ComM\Implementation\ComM.c	  2737        {
; ..\component\ComM\Implementation\ComM.c	  2738          retValue = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2739        }
; ..\component\ComM\Implementation\ComM.c	  2740      }
; ..\component\ComM\Implementation\ComM.c	  2741    }
; ..\component\ComM\Implementation\ComM.c	  2742  
; ..\component\ComM\Implementation\ComM.c	  2743    COMM_DUMMY_STATEMENT_CONST(pncIndex); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  2744    return retValue;
; ..\component\ComM\Implementation\ComM.c	  2745  }
; ..\component\ComM\Implementation\ComM.c	  2746  # endif
; ..\component\ComM\Implementation\ComM.c	  2747  #endif
; ..\component\ComM\Implementation\ComM.c	  2748  
; ..\component\ComM\Implementation\ComM.c	  2749  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2750  # if ( (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON) && (COMM_PNC_EXISTS_GATEWAY_TYPE_ACTIVE == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  2751  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2752   *  ComM_PncIsEraReceivedOnActiveChannel()
; ..\component\ComM\Implementation\ComM.c	  2753   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2754  /*!
; ..\component\ComM\Implementation\ComM.c	  2755   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2756   *
; ..\component\ComM\Implementation\ComM.c	  2757   *
; ..\component\ComM\Implementation\ComM.c	  2758   */
; ..\component\ComM\Implementation\ComM.c	  2759  COMM_LOCAL_INLINE FUNC( boolean, COMM_CODE) ComM_PncIsEraReceivedOnActiveChannel( ComM_PncIterType pncIndex )
; ..\component\ComM\Implementation\ComM.c	  2760  {
; ..\component\ComM\Implementation\ComM.c	  2761    ComM_PncSignalIndIterType pncSignalIndIter;
; ..\component\ComM\Implementation\ComM.c	  2762    ComM_SizeOfPncSignalType  pncSignalInd;
; ..\component\ComM\Implementation\ComM.c	  2763    boolean retValue = FALSE;
; ..\component\ComM\Implementation\ComM.c	  2764    ComM_GwTypeOfChannelType gwTypeOfChannel;
; ..\component\ComM\Implementation\ComM.c	  2765  
; ..\component\ComM\Implementation\ComM.c	  2766    /* #10 Return TRUE if at least one PNC request is received via ERA on a channel with GW type ACTIVE. Otherwise return FALSE. */
; ..\component\ComM\Implementation\ComM.c	  2767    /* Note: if PNC is coordinated if an ERA signal is mapped to it */
; ..\component\ComM\Implementation\ComM.c	  2768    for (pncSignalIndIter = ComM_GetPncSignalIndStartIdxOfPncPb(pncIndex);
; ..\component\ComM\Implementation\ComM.c	  2769         pncSignalIndIter < ComM_GetPncSignalIndEndIdxOfPncPb(pncIndex);
; ..\component\ComM\Implementation\ComM.c	  2770         pncSignalIndIter++)
; ..\component\ComM\Implementation\ComM.c	  2771    {
; ..\component\ComM\Implementation\ComM.c	  2772      pncSignalInd = ComM_GetPncSignalInd(pncSignalIndIter);
; ..\component\ComM\Implementation\ComM.c	  2773      if (ComM_GetTypeOfPncSignal(pncSignalInd) == COMM_ERA_RX_TYPEOFPNCSIGNAL) /* COV_COMM_FOR_LOOP_OPTIMIZATION */
; ..\component\ComM\Implementation\ComM.c	  2774      {
; ..\component\ComM\Implementation\ComM.c	  2775        gwTypeOfChannel = ComM_GetGwTypeOfChannel(ComM_GetChannelIdxOfPncSignal(pncSignalInd));
; ..\component\ComM\Implementation\ComM.c	  2776        if ( (gwTypeOfChannel == COMM_GATEWAY_TYPE_ACTIVE) && (ComM_IsSignalStoredPncBitSet(pncSignalInd, pncIndex)) ) /* PRQA S 2985 */ /* MD_ComM_2985 */ /* COV_COMM_PNC_EXTENDED_NO_ERA_ON_ACTIVE_CHANNEL */
; ..\component\ComM\Implementation\ComM.c	  2777        {
; ..\component\ComM\Implementation\ComM.c	  2778          retValue = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2779          break;
; ..\component\ComM\Implementation\ComM.c	  2780        }
; ..\component\ComM\Implementation\ComM.c	  2781      }
; ..\component\ComM\Implementation\ComM.c	  2782    }
; ..\component\ComM\Implementation\ComM.c	  2783  
; ..\component\ComM\Implementation\ComM.c	  2784  #  if (COMM_ACTIVE_PNC == 1U)
; ..\component\ComM\Implementation\ComM.c	  2785    COMM_DUMMY_STATEMENT_CONST(pncIndex); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  2786  #  endif
; ..\component\ComM\Implementation\ComM.c	  2787    return retValue;
; ..\component\ComM\Implementation\ComM.c	  2788  }
; ..\component\ComM\Implementation\ComM.c	  2789  # endif
; ..\component\ComM\Implementation\ComM.c	  2790  #endif
; ..\component\ComM\Implementation\ComM.c	  2791  
; ..\component\ComM\Implementation\ComM.c	  2792  #if ((COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON) && (((COMM_MODE_LIMITATION == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF)) || (COMM_WAKEUP_INHIBITION == STD_ON)))
; ..\component\ComM\Implementation\ComM.c	  2793  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2794   *  ComM_ChannelIsLimited()
; ..\component\ComM\Implementation\ComM.c	  2795   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2796  /*!
; ..\component\ComM\Implementation\ComM.c	  2797   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2798   *
; ..\component\ComM\Implementation\ComM.c	  2799   *
; ..\component\ComM\Implementation\ComM.c	  2800   *
; ..\component\ComM\Implementation\ComM.c	  2801   */
; ..\component\ComM\Implementation\ComM.c	  2802  COMM_LOCAL_INLINE FUNC(boolean, COMM_CODE) ComM_ChannelIsLimited( NetworkHandleType channel )
; ..\component\ComM\Implementation\ComM.c	  2803  {
; ..\component\ComM\Implementation\ComM.c	  2804    boolean retValue = FALSE;
; ..\component\ComM\Implementation\ComM.c	  2805  
; ..\component\ComM\Implementation\ComM.c	  2806    /* #10 Return TRUE if Mode Limitation or Prevent Wake-up is active on the channel.
; ..\component\ComM\Implementation\ComM.c	  2807     *     Otherwise return FALSE. */
; ..\component\ComM\Implementation\ComM.c	  2808    if (
; ..\component\ComM\Implementation\ComM.c	  2809  # if ((COMM_MODE_LIMITATION == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF))
; ..\component\ComM\Implementation\ComM.c	  2810       /* PRQA S 3415 1 */ /* MD_ComM_3415 */
; ..\component\ComM\Implementation\ComM.c	  2811       (ComM_NoComLimitationActive(channel) == TRUE)
; ..\component\ComM\Implementation\ComM.c	  2812  #  if (COMM_WAKEUP_INHIBITION == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2813        ||
; ..\component\ComM\Implementation\ComM.c	  2814  #  endif
; ..\component\ComM\Implementation\ComM.c	  2815  # endif
; ..\component\ComM\Implementation\ComM.c	  2816  # if (COMM_WAKEUP_INHIBITION == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2817       /* PRQA S 3415 1 */ /* MD_ComM_3415 */
; ..\component\ComM\Implementation\ComM.c	  2818       (ComM_PreventWakeUpActive(channel) == TRUE)
; ..\component\ComM\Implementation\ComM.c	  2819  # endif
; ..\component\ComM\Implementation\ComM.c	  2820       )
; ..\component\ComM\Implementation\ComM.c	  2821    {
; ..\component\ComM\Implementation\ComM.c	  2822      retValue = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2823    }
; ..\component\ComM\Implementation\ComM.c	  2824  
; ..\component\ComM\Implementation\ComM.c	  2825    return retValue;
; ..\component\ComM\Implementation\ComM.c	  2826  }
; ..\component\ComM\Implementation\ComM.c	  2827  #endif
; ..\component\ComM\Implementation\ComM.c	  2828  
; ..\component\ComM\Implementation\ComM.c	  2829  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2830  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2831   *  ComM_CalculateHighestPNComMode()
; ..\component\ComM\Implementation\ComM.c	  2832   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2833  /*!
; ..\component\ComM\Implementation\ComM.c	  2834   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2835   *
; ..\component\ComM\Implementation\ComM.c	  2836   *
; ..\component\ComM\Implementation\ComM.c	  2837   *
; ..\component\ComM\Implementation\ComM.c	  2838   *
; ..\component\ComM\Implementation\ComM.c	  2839   *
; ..\component\ComM\Implementation\ComM.c	  2840   *
; ..\component\ComM\Implementation\ComM.c	  2841   *
; ..\component\ComM\Implementation\ComM.c	  2842   *
; ..\component\ComM\Implementation\ComM.c	  2843   *
; ..\component\ComM\Implementation\ComM.c	  2844   */
; ..\component\ComM\Implementation\ComM.c	  2845  COMM_LOCAL FUNC( ComM_PncModeType, COMM_CODE) ComM_CalculateHighestPNComMode( ComM_PncIterType pncIndex, boolean pncCanBeRequested )
; ..\component\ComM\Implementation\ComM.c	  2846  {
; ..\component\ComM\Implementation\ComM.c	  2847    ComM_PncModeType lHighestRequest = COMM_PNC_NO_COMMUNICATION; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\ComM\Implementation\ComM.c	  2848    ComM_UserReqPncFullComIterType  userReqPncFullComIndex;
; ..\component\ComM\Implementation\ComM.c	  2849  # if ( (COMM_PNCCHANNELMAPPING == STD_ON) && \ 
; ..\component\ComM\Implementation\ComM.c	  2850        ((COMM_MODE_LIMITATION == STD_ON) || (COMM_WAKEUP_INHIBITION == STD_ON)) )
; ..\component\ComM\Implementation\ComM.c	  2851  #  if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2852    ComM_PncChannelMappingIterType pncChMappingIndex;
; ..\component\ComM\Implementation\ComM.c	  2853  #  endif
; ..\component\ComM\Implementation\ComM.c	  2854  # endif
; ..\component\ComM\Implementation\ComM.c	  2855  
; ..\component\ComM\Implementation\ComM.c	  2856    SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_0();
; ..\component\ComM\Implementation\ComM.c	  2857  
; ..\component\ComM\Implementation\ComM.c	  2858  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2859    /* The guard below is needed to inhibit FULL_COM request to a PNC if all its channels have
; ..\component\ComM\Implementation\ComM.c	  2860     * Routing Limitation state COMM_PNCROUTING_LIMITED (pncCanBeRequested == FALSE). */
; ..\component\ComM\Implementation\ComM.c	  2861    if( pncCanBeRequested == TRUE )
; ..\component\ComM\Implementation\ComM.c	  2862  # endif
; ..\component\ComM\Implementation\ComM.c	  2863    {
; ..\component\ComM\Implementation\ComM.c	  2864      /* #10 Iterate through PNC user request bytes in ComM_UserReqPncFullCom[] for the given PN.
; ..\component\ComM\Implementation\ComM.c	  2865       *     If at least one user request is detected, set the requested mode to
; ..\component\ComM\Implementation\ComM.c	  2866       *     COMM_PNC_REQUESTED_PASSIVE if only system user is requesting and Passive Gw Type is supported or
; ..\component\ComM\Implementation\ComM.c	  2867       *     COMM_PNC_REQUESTED otherwise. */
; ..\component\ComM\Implementation\ComM.c	  2868      /* PRQA S 2823 2 */ /* MD_ComM_2823 */
; ..\component\ComM\Implementation\ComM.c	  2869      for (userReqPncFullComIndex = ComM_GetUserReqPncFullComStartIdxOfPncPb(pncIndex); /* PRQA S 2842 */ /* MD_ComM_2842_2843 */
; ..\component\ComM\Implementation\ComM.c	  2870           userReqPncFullComIndex < ComM_GetUserReqPncFullComEndIdxOfPncPb(pncIndex);
; ..\component\ComM\Implementation\ComM.c	  2871           userReqPncFullComIndex++)
; ..\component\ComM\Implementation\ComM.c	  2872      {
; ..\component\ComM\Implementation\ComM.c	  2873        /* PRQA S 2842, 2823 */ /* MD_ComM_2842_2843, MD_ComM_2823 */
; ..\component\ComM\Implementation\ComM.c	  2874        if (ComM_GetUserReqPncFullCom(userReqPncFullComIndex) != COMM_NO_REQUESTS)
; ..\component\ComM\Implementation\ComM.c	  2875        {
; ..\component\ComM\Implementation\ComM.c	  2876  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2877          lHighestRequest = COMM_PNC_REQUESTED_PASSIVE;
; ..\component\ComM\Implementation\ComM.c	  2878          if (ComM_PncIsOnlySystemUserRequesting(pncIndex, userReqPncFullComIndex) == FALSE)
; ..\component\ComM\Implementation\ComM.c	  2879  # endif
; ..\component\ComM\Implementation\ComM.c	  2880          {
; ..\component\ComM\Implementation\ComM.c	  2881            lHighestRequest = COMM_PNC_REQUESTED; /* PRQA S 2982 */ /* MD_ComM_2982 */
; ..\component\ComM\Implementation\ComM.c	  2882            break; /* Highest requested mode found */
; ..\component\ComM\Implementation\ComM.c	  2883          }
; ..\component\ComM\Implementation\ComM.c	  2884        }
; ..\component\ComM\Implementation\ComM.c	  2885      }
; ..\component\ComM\Implementation\ComM.c	  2886  
; ..\component\ComM\Implementation\ComM.c	  2887      /* #20 If Passive Gw Type is supported and PNC activation is received via ERA from an Active channel,
; ..\component\ComM\Implementation\ComM.c	  2888       *     set the requested mode to COMM_PNC_REQUESTED. */
; ..\component\ComM\Implementation\ComM.c	  2889  # if (COMM_PNC_PASSIVE_GW_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2890  #  if (COMM_PNC_EXISTS_GATEWAY_TYPE_ACTIVE == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2891      if (lHighestRequest == COMM_PNC_REQUESTED_PASSIVE)
; ..\component\ComM\Implementation\ComM.c	  2892      {
; ..\component\ComM\Implementation\ComM.c	  2893        if (ComM_PncIsEraReceivedOnActiveChannel(pncIndex) == TRUE) /* COV_COMM_PNC_EXTENDED_NO_ERA_ON_ACTIVE_CHANNEL */
; ..\component\ComM\Implementation\ComM.c	  2894        {
; ..\component\ComM\Implementation\ComM.c	  2895          lHighestRequest = COMM_PNC_REQUESTED;
; ..\component\ComM\Implementation\ComM.c	  2896        }
; ..\component\ComM\Implementation\ComM.c	  2897      }
; ..\component\ComM\Implementation\ComM.c	  2898  #  endif
; ..\component\ComM\Implementation\ComM.c	  2899  # endif
; ..\component\ComM\Implementation\ComM.c	  2900  
; ..\component\ComM\Implementation\ComM.c	  2901      /* #30 If Node Limitation NO_COM or Prevent Wake-up is active on at least one PNC channel, ComM shall inhibit FULL_COM requests. */
; ..\component\ComM\Implementation\ComM.c	  2902  # if ( (COMM_PNCCHANNELMAPPING == STD_ON) && \ 
; ..\component\ComM\Implementation\ComM.c	  2903         ((COMM_MODE_LIMITATION == STD_ON) || (COMM_WAKEUP_INHIBITION == STD_ON)) )
; ..\component\ComM\Implementation\ComM.c	  2904  #  if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2905      /* PRQA S 2823 2 */ /* MD_ComM_2823 */
; ..\component\ComM\Implementation\ComM.c	  2906      for (pncChMappingIndex = ComM_GetPncChannelMappingStartIdxOfPncPb(pncIndex);
; ..\component\ComM\Implementation\ComM.c	  2907           pncChMappingIndex < ComM_GetPncChannelMappingEndIdxOfPncPb(pncIndex);
; ..\component\ComM\Implementation\ComM.c	  2908           pncChMappingIndex++) /* COV_COMM_FOR_LOOP_OPTIMIZATION */
; ..\component\ComM\Implementation\ComM.c	  2909      {
; ..\component\ComM\Implementation\ComM.c	  2910        if (ComM_ChannelIsLimited(ComM_GetPncChannelMapping(pncChMappingIndex)) == TRUE) /* COV_COMM_PNC_ON_CHANNELS_NM_PASSIVE */
; ..\component\ComM\Implementation\ComM.c	  2911        {
; ..\component\ComM\Implementation\ComM.c	  2912          lHighestRequest = COMM_PNC_NO_COMMUNICATION;
; ..\component\ComM\Implementation\ComM.c	  2913          break;
; ..\component\ComM\Implementation\ComM.c	  2914        }
; ..\component\ComM\Implementation\ComM.c	  2915      }
; ..\component\ComM\Implementation\ComM.c	  2916  #  else
; ..\component\ComM\Implementation\ComM.c	  2917      {
; ..\component\ComM\Implementation\ComM.c	  2918        lHighestRequest = COMM_PNC_NO_COMMUNICATION;
; ..\component\ComM\Implementation\ComM.c	  2919      }
; ..\component\ComM\Implementation\ComM.c	  2920  #  endif
; ..\component\ComM\Implementation\ComM.c	  2921  # endif
; ..\component\ComM\Implementation\ComM.c	  2922    }
; ..\component\ComM\Implementation\ComM.c	  2923  
; ..\component\ComM\Implementation\ComM.c	  2924    /* Do not allow PNC activation if pncCanBeRequested == FALSE, but always allow PNC de-activation */
; ..\component\ComM\Implementation\ComM.c	  2925  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2926    if ((pncCanBeRequested == TRUE) || (ComM_GetActivePncComMode(pncIndex) != COMM_PNC_NO_COMMUNICATION))
; ..\component\ComM\Implementation\ComM.c	  2927  # endif
; ..\component\ComM\Implementation\ComM.c	  2928    {
; ..\component\ComM\Implementation\ComM.c	  2929      /* #40 The requested mode shall be at least as requested via bus (EIRA). */
; ..\component\ComM\Implementation\ComM.c	  2930      if (ComM_GetBusPncComModeReq(pncIndex) > lHighestRequest)
; ..\component\ComM\Implementation\ComM.c	  2931      {
; ..\component\ComM\Implementation\ComM.c	  2932        lHighestRequest = ComM_GetBusPncComModeReq(pncIndex);
; ..\component\ComM\Implementation\ComM.c	  2933      }
; ..\component\ComM\Implementation\ComM.c	  2934  # if (COMM_PNC_PS_TIMER > 0U)
; ..\component\ComM\Implementation\ComM.c	  2935      else if ((ComM_GetPncPSleepTimer(pncIndex) > 0u) && (lHighestRequest <= COMM_PNC_PREPARE_SLEEP)) /* PRQA S 2995 */ /* MD_ComM_2995_2991 */ /* COV_COMM_PNC_ON_CHANNELS_NM_PASSIVE */
; ..\component\ComM\Implementation\ComM.c	  2936      {
; ..\component\ComM\Implementation\ComM.c	  2937        lHighestRequest = COMM_PNC_PREPARE_SLEEP;
; ..\component\ComM\Implementation\ComM.c	  2938      }
; ..\component\ComM\Implementation\ComM.c	  2939      else
; ..\component\ComM\Implementation\ComM.c	  2940      {
; ..\component\ComM\Implementation\ComM.c	  2941        /* Nothing to do. Statement is needed for MISRA-C:2004 compliance (Rule 14.10). */
; ..\component\ComM\Implementation\ComM.c	  2942      }
; ..\component\ComM\Implementation\ComM.c	  2943  # endif
; ..\component\ComM\Implementation\ComM.c	  2944    }
; ..\component\ComM\Implementation\ComM.c	  2945  
; ..\component\ComM\Implementation\ComM.c	  2946    SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_0();
; ..\component\ComM\Implementation\ComM.c	  2947  
; ..\component\ComM\Implementation\ComM.c	  2948  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  2949    COMM_DUMMY_STATEMENT_CONST(pncCanBeRequested); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  2950  # endif
; ..\component\ComM\Implementation\ComM.c	  2951  
; ..\component\ComM\Implementation\ComM.c	  2952    return lHighestRequest;
; ..\component\ComM\Implementation\ComM.c	  2953  } /* PRQA S 6010, 6030, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\ComM\Implementation\ComM.c	  2954  #endif
; ..\component\ComM\Implementation\ComM.c	  2955  
; ..\component\ComM\Implementation\ComM.c	  2956  #if (COMM_WAKEUP_INHIBITION == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  2957  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2958   *  ComM_PreventWakeUpActive()
; ..\component\ComM\Implementation\ComM.c	  2959   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  2960  /*!
; ..\component\ComM\Implementation\ComM.c	  2961   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  2962   *
; ..\component\ComM\Implementation\ComM.c	  2963   *
; ..\component\ComM\Implementation\ComM.c	  2964   *
; ..\component\ComM\Implementation\ComM.c	  2965   *
; ..\component\ComM\Implementation\ComM.c	  2966   *
; ..\component\ComM\Implementation\ComM.c	  2967   */
; ..\component\ComM\Implementation\ComM.c	  2968  COMM_LOCAL FUNC(boolean, COMM_CODE) ComM_PreventWakeUpActive( NetworkHandleType  channel )
; ..\component\ComM\Implementation\ComM.c	  2969  {
; ..\component\ComM\Implementation\ComM.c	  2970    /* The function is used in conditions, which are not always evaluated because of 'short-circuit evaluation'.
; ..\component\ComM\Implementation\ComM.c	  2971     * Therefore the function is not allowed to change the module' state i.e. write global variables.
; ..\component\ComM\Implementation\ComM.c	  2972     */
; ..\component\ComM\Implementation\ComM.c	  2973  
; ..\component\ComM\Implementation\ComM.c	  2974    boolean retValue = FALSE;
; ..\component\ComM\Implementation\ComM.c	  2975  
; ..\component\ComM\Implementation\ComM.c	  2976    /* #10 Return TRUE if Prevent Wake-up
; ..\component\ComM\Implementation\ComM.c	  2977     *     1) is allowed by ECU Group Classification and
; ..\component\ComM\Implementation\ComM.c	  2978     *     2) is active on the channel and
; ..\component\ComM\Implementation\ComM.c	  2979     *     3) the channel is not in FULL_COM mode. */
; ..\component\ComM\Implementation\ComM.c	  2980    if( (ComM_Inhibition.ComM_ECUGroupClassification & COMM_WAKEUP_INHIBITION_MASK) == COMM_WAKEUP_INHIBITION_MASK )
; ..\component\ComM\Implementation\ComM.c	  2981    {
; ..\component\ComM\Implementation\ComM.c	  2982      /* check if prevent wake up is active */
; ..\component\ComM\Implementation\ComM.c	  2983      if( (ComM_Inhibition.ComM_InhibitionStatus[channel] & COMM_WAKEUP_INHIBITION_MASK) == COMM_WAKEUP_INHIBITION_MASK )
; ..\component\ComM\Implementation\ComM.c	  2984      {
; ..\component\ComM\Implementation\ComM.c	  2985        if((ComM_ActiveComMode[channel] & COMM_FULL_COMMUNICATION) == 0u)
; ..\component\ComM\Implementation\ComM.c	  2986        {
; ..\component\ComM\Implementation\ComM.c	  2987          /* The inhibition shall not get active in FULL_COM mode */
; ..\component\ComM\Implementation\ComM.c	  2988          retValue = TRUE;
; ..\component\ComM\Implementation\ComM.c	  2989        }
; ..\component\ComM\Implementation\ComM.c	  2990      }
; ..\component\ComM\Implementation\ComM.c	  2991    }
; ..\component\ComM\Implementation\ComM.c	  2992  
; ..\component\ComM\Implementation\ComM.c	  2993    return retValue;
; ..\component\ComM\Implementation\ComM.c	  2994  }
; ..\component\ComM\Implementation\ComM.c	  2995  #endif
; ..\component\ComM\Implementation\ComM.c	  2996  
; ..\component\ComM\Implementation\ComM.c	  2997  #if ((COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON) && (COMM_MODE_LIMITATION == STD_ON) && ( COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF ))
; ..\component\ComM\Implementation\ComM.c	  2998  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  2999   *  ComM_NoComLimitationActive()
; ..\component\ComM\Implementation\ComM.c	  3000   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3001  /*!
; ..\component\ComM\Implementation\ComM.c	  3002   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3003   *
; ..\component\ComM\Implementation\ComM.c	  3004   *
; ..\component\ComM\Implementation\ComM.c	  3005   *
; ..\component\ComM\Implementation\ComM.c	  3006   *
; ..\component\ComM\Implementation\ComM.c	  3007   *
; ..\component\ComM\Implementation\ComM.c	  3008   */
; ..\component\ComM\Implementation\ComM.c	  3009  COMM_LOCAL FUNC(boolean, COMM_CODE) ComM_NoComLimitationActive( NetworkHandleType channel )
; ..\component\ComM\Implementation\ComM.c	  3010  {
; ..\component\ComM\Implementation\ComM.c	  3011    /* The function is used in conditions, which are not always evaluated because of 'short-circuit evaluation'.
; ..\component\ComM\Implementation\ComM.c	  3012     * Therefore the function is not allowed to change the module' state i.e. write global variables.
; ..\component\ComM\Implementation\ComM.c	  3013     */
; ..\component\ComM\Implementation\ComM.c	  3014  
; ..\component\ComM\Implementation\ComM.c	  3015    boolean retValue = FALSE;
; ..\component\ComM\Implementation\ComM.c	  3016  
; ..\component\ComM\Implementation\ComM.c	  3017    /* #10 Return TRUE if Mode Limitation to NO_COM
; ..\component\ComM\Implementation\ComM.c	  3018     *     1) is active because of NmType PASSIVE or
; ..\component\ComM\Implementation\ComM.c	  3019     *     2) is allowed by ECU Group Classification and
; ..\component\ComM\Implementation\ComM.c	  3020     *     3) is active on the channel */
; ..\component\ComM\Implementation\ComM.c	  3021  
; ..\component\ComM\Implementation\ComM.c	  3022  # if (COMM_EXISTS_PASSIVE_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3023    if (ComM_GetNmTypeOfChannel(channel) == COMM_PASSIVE_NMTYPEOFCHANNEL)
; ..\component\ComM\Implementation\ComM.c	  3024    {
; ..\component\ComM\Implementation\ComM.c	  3025      retValue = TRUE;
; ..\component\ComM\Implementation\ComM.c	  3026    }
; ..\component\ComM\Implementation\ComM.c	  3027    else
; ..\component\ComM\Implementation\ComM.c	  3028  # endif
; ..\component\ComM\Implementation\ComM.c	  3029    {
; ..\component\ComM\Implementation\ComM.c	  3030      if( (ComM_Inhibition.ComM_ECUGroupClassification & COMM_MODE_LIMITATION_MASK) == COMM_MODE_LIMITATION_MASK )
; ..\component\ComM\Implementation\ComM.c	  3031      {
; ..\component\ComM\Implementation\ComM.c	  3032        if( (ComM_Inhibition.ComM_InhibitionStatus[channel] & COMM_MODE_LIMITATION_MASK) == COMM_MODE_LIMITATION_MASK )
; ..\component\ComM\Implementation\ComM.c	  3033        {
; ..\component\ComM\Implementation\ComM.c	  3034          retValue = TRUE;
; ..\component\ComM\Implementation\ComM.c	  3035        }
; ..\component\ComM\Implementation\ComM.c	  3036      }
; ..\component\ComM\Implementation\ComM.c	  3037    }
; ..\component\ComM\Implementation\ComM.c	  3038  
; ..\component\ComM\Implementation\ComM.c	  3039    return retValue;
; ..\component\ComM\Implementation\ComM.c	  3040  }
; ..\component\ComM\Implementation\ComM.c	  3041  #endif
; ..\component\ComM\Implementation\ComM.c	  3042  
; ..\component\ComM\Implementation\ComM.c	  3043  #if (COMM_FULL_COMM_REQUEST_NOTIF == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3044  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3045   *  ComM_CurrentChannelRequestUpdate()
; ..\component\ComM\Implementation\ComM.c	  3046   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3047  /*!
; ..\component\ComM\Implementation\ComM.c	  3048   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3049   *
; ..\component\ComM\Implementation\ComM.c	  3050   *
; ..\component\ComM\Implementation\ComM.c	  3051   *
; ..\component\ComM\Implementation\ComM.c	  3052   *
; ..\component\ComM\Implementation\ComM.c	  3053   *
; ..\component\ComM\Implementation\ComM.c	  3054   *
; ..\component\ComM\Implementation\ComM.c	  3055   */
; ..\component\ComM\Implementation\ComM.c	  3056  COMM_LOCAL FUNC(void, COMM_CODE) ComM_CurrentChannelRequestUpdate( NetworkHandleType channel )
; ..\component\ComM\Implementation\ComM.c	  3057  {
; ..\component\ComM\Implementation\ComM.c	  3058    ComM_SizeOfFullComRequestersType currentNumOfRequesters = 0u; /* Number of users requesting the channel */
; ..\component\ComM\Implementation\ComM.c	  3059    ComM_UserByteMaskEndIdxOfUserType iByteMaskIndex;
; ..\component\ComM\Implementation\ComM.c	  3060    ComM_SizeOfUserType userIndex;
; ..\component\ComM\Implementation\ComM.c	  3061  
; ..\component\ComM\Implementation\ComM.c	  3062    /* #10 Initialize the list with the default user handle. */
; ..\component\ComM\Implementation\ComM.c	  3063    for (userIndex = 0u; userIndex < ComM_GetSizeOfFullComRequesters(); userIndex++)
; ..\component\ComM\Implementation\ComM.c	  3064    {
; ..\component\ComM\Implementation\ComM.c	  3065      ComM_SetFullComRequesters(userIndex, 0xffu); /* SBSW_COMM_CSL01 */
; ..\component\ComM\Implementation\ComM.c	  3066    }
; ..\component\ComM\Implementation\ComM.c	  3067  
; ..\component\ComM\Implementation\ComM.c	  3068    /* #20 If communication inhibition is active all FULL_COM user requests for this channel are rejected. */
; ..\component\ComM\Implementation\ComM.c	  3069  # if ( ( (COMM_MODE_LIMITATION == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF) ) || (COMM_WAKEUP_INHIBITION == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  3070    if (ComM_ChannelIsLimited(channel) == FALSE)
; ..\component\ComM\Implementation\ComM.c	  3071  # endif
; ..\component\ComM\Implementation\ComM.c	  3072    {
; ..\component\ComM\Implementation\ComM.c	  3073      /* #30 Otherwise store handles of users that are mapped to the current channel and requesting FULL_COM. */
; ..\component\ComM\Implementation\ComM.c	  3074      for(userIndex = 0u; userIndex < ComM_GetSizeOfUser(); userIndex++)
; ..\component\ComM\Implementation\ComM.c	  3075      {
; ..\component\ComM\Implementation\ComM.c	  3076  # if ( COMM_PNC_SUPPORT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3077        if (!ComM_IsPncUserOfUser(userIndex))
; ..\component\ComM\Implementation\ComM.c	  3078  # endif
; ..\component\ComM\Implementation\ComM.c	  3079        {
; ..\component\ComM\Implementation\ComM.c	  3080          for(iByteMaskIndex = ComM_GetUserByteMaskStartIdxOfUser(userIndex); iByteMaskIndex < ComM_GetUserByteMaskEndIdxOfUser(userIndex); iByteMaskIndex++)
; ..\component\ComM\Implementation\ComM.c	  3081          {
; ..\component\ComM\Implementation\ComM.c	  3082            if (
; ..\component\ComM\Implementation\ComM.c	  3083  # if (COMM_ACTIVE_CHANNEL > 1U) /* If only one channel exists, every channel user is always mapped to it. */
; ..\component\ComM\Implementation\ComM.c	  3084                (ComM_GetChannelOfUserByteMask(iByteMaskIndex) == channel) &&
; ..\component\ComM\Implementation\ComM.c	  3085  # endif
; ..\component\ComM\Implementation\ComM.c	  3086                ((ComM_GetUserReqFullCom(ComM_GetUserReqFullComIdxOfUserByteMask(iByteMaskIndex)) & ComM_GetSetMaskOfUserByteMask(iByteMaskIndex)) != COMM_NO_REQUESTS))
; ..\component\ComM\Implementation\ComM.c	  3087            {
; ..\component\ComM\Implementation\ComM.c	  3088              if( currentNumOfRequesters < ComM_GetSizeOfFullComRequesters() ) /* COV_COMM_GENDATA_CHECK */
; ..\component\ComM\Implementation\ComM.c	  3089              {
; ..\component\ComM\Implementation\ComM.c	  3090                ComM_SetFullComRequesters(currentNumOfRequesters, userIndex); /* SBSW_COMM_CSL01 */ /* Justification is applicable because of the run-time check above */
; ..\component\ComM\Implementation\ComM.c	  3091                currentNumOfRequesters++;
; ..\component\ComM\Implementation\ComM.c	  3092              }
; ..\component\ComM\Implementation\ComM.c	  3093            }
; ..\component\ComM\Implementation\ComM.c	  3094          }
; ..\component\ComM\Implementation\ComM.c	  3095        }
; ..\component\ComM\Implementation\ComM.c	  3096      }
; ..\component\ComM\Implementation\ComM.c	  3097    }
; ..\component\ComM\Implementation\ComM.c	  3098  
; ..\component\ComM\Implementation\ComM.c	  3099    /* #40 Trigger notification via Sender-Receiver interface. */
; ..\component\ComM\Implementation\ComM.c	  3100    /* Note: The function below will evaluate ComM_FullComRequesters[] and if detected a change, it will notify RTE via
; ..\component\ComM\Implementation\ComM.c	  3101     * the optional sender-receiver interface ComM_CurrentChannelRequest */
; ..\component\ComM\Implementation\ComM.c	  3102    ComM_CurrentChannelRequestNotification( channel, currentNumOfRequesters );
; ..\component\ComM\Implementation\ComM.c	  3103  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\ComM\Implementation\ComM.c	  3104  #endif
; ..\component\ComM\Implementation\ComM.c	  3105  
; ..\component\ComM\Implementation\ComM.c	  3106  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3107   *  ComM_TF_NoCom_NetReq()
; ..\component\ComM\Implementation\ComM.c	  3108   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3109  /*!
; ..\component\ComM\Implementation\ComM.c	  3110   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3111   *
; ..\component\ComM\Implementation\ComM.c	  3112   *
; ..\component\ComM\Implementation\ComM.c	  3113   *
; ..\component\ComM\Implementation\ComM.c	  3114   *
; ..\component\ComM\Implementation\ComM.c	  3115   *
; ..\component\ComM\Implementation\ComM.c	  3116   *
; ..\component\ComM\Implementation\ComM.c	  3117   *
; ..\component\ComM\Implementation\ComM.c	  3118   */
; ..\component\ComM\Implementation\ComM.c	  3119  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_NoCom_NetReq(NetworkHandleType Channel)
; Function ComM_TF_NoCom_NetReq
.L136:
ComM_TF_NoCom_NetReq:	.type	func
	mov	d15,d4
.L531:

; ..\component\ComM\Implementation\ComM.c	  3120  {
; ..\component\ComM\Implementation\ComM.c	  3121  #if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3122  
; ..\component\ComM\Implementation\ComM.c	  3123    /* #10 Request COMM_FULL_COMMUNICATION from the state manager. */
; ..\component\ComM\Implementation\ComM.c	  3124    ComM_RequestBusSMMode( Channel, COMM_FULL_COMMUNICATION );
	mov	d5,#2
	call	ComM_RequestBusSMMode
.L530:

; ..\component\ComM\Implementation\ComM.c	  3125  
; ..\component\ComM\Implementation\ComM.c	  3126  # if ( (COMM_EXISTS_NONE_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  3127    switch (ComM_GetNmTypeOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  3128    {
; ..\component\ComM\Implementation\ComM.c	  3129    /* #20 Nm variant NONE: once communication requested, ComM shall not trigger shutdown on the channel. */
; ..\component\ComM\Implementation\ComM.c	  3130  # if (COMM_EXISTS_NONE_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3131    case COMM_NONE_NMTYPEOFCHANNEL:
; ..\component\ComM\Implementation\ComM.c	  3132      ComM_BusComModeReq[Channel] = COMM_FULL_COM_NETWORK_REQUESTED; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
	movh.a	a15,#@his(ComM_BusComModeReq)
	lea	a15,[a15]@los(ComM_BusComModeReq)
.L818:
	addsc.a	a15,a15,d15,#0
.L819:
	mov	d15,#2
.L532:
	st.b	[a15],d15
.L820:

; ..\component\ComM\Implementation\ComM.c	  3133      break;
; ..\component\ComM\Implementation\ComM.c	  3134  # endif
; ..\component\ComM\Implementation\ComM.c	  3135  
; ..\component\ComM\Implementation\ComM.c	  3136    /* #30 Nm variant LIGHT: cancel the LIGHT SILENT timer (ComM_NmLightTimer variable is re-used). */
; ..\component\ComM\Implementation\ComM.c	  3137  # if (COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3138    case COMM_LIGHT_NMTYPEOFCHANNEL:
; ..\component\ComM\Implementation\ComM.c	  3139  #  if (COMM_NMLIGHTSILENTDURATIONOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3140      ComM_SetNmLightTimer(Channel, 0); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3141  #  endif
; ..\component\ComM\Implementation\ComM.c	  3142  
; ..\component\ComM\Implementation\ComM.c	  3143      /* #40 Nm variant LIGHT: start the timer for ComMTMinFullComModeDuration. */
; ..\component\ComM\Implementation\ComM.c	  3144      ComM_SetMinFullComModeTimer(Channel, ComM_GetMinFullComTimeOfChannel(Channel)); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3145      break;
; ..\component\ComM\Implementation\ComM.c	  3146  # endif
; ..\component\ComM\Implementation\ComM.c	  3147  
; ..\component\ComM\Implementation\ComM.c	  3148    /* #50 Nm variant FULL: notify Nm about network request. */
; ..\component\ComM\Implementation\ComM.c	  3149  # if (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3150    case COMM_FULL_NMTYPEOFCHANNEL:
; ..\component\ComM\Implementation\ComM.c	  3151       ComM_BusComModeReq[Channel] = ComM_GetWakeupStateOfChannel(Channel); /* SBSW_COMM_ARRAY_CHANNEL_WRITE */ /* ESCAN00106564 */
; ..\component\ComM\Implementation\ComM.c	  3152      (void)Nm_NetworkRequest(Channel);
; ..\component\ComM\Implementation\ComM.c	  3153  
; ..\component\ComM\Implementation\ComM.c	  3154      /* #60 Nm variant FULL: start the timer for ComMTMinFullComModeDuration. */
; ..\component\ComM\Implementation\ComM.c	  3155      /* ESCAN00081330 */
; ..\component\ComM\Implementation\ComM.c	  3156  #  if (COMM_MINFULLCOMTIMEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3157      ComM_SetMinFullComModeTimer(Channel, ComM_GetMinFullComTimeOfChannel(Channel)); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3158  #  endif
; ..\component\ComM\Implementation\ComM.c	  3159      break;
; ..\component\ComM\Implementation\ComM.c	  3160  # endif
; ..\component\ComM\Implementation\ComM.c	  3161      /* PRQA S 2018 1 */ /* MD_ComM_2018 */
; ..\component\ComM\Implementation\ComM.c	  3162    default: /* COV_COMM_MISRA */
; ..\component\ComM\Implementation\ComM.c	  3163      break;
; ..\component\ComM\Implementation\ComM.c	  3164    }
; ..\component\ComM\Implementation\ComM.c	  3165  # endif
; ..\component\ComM\Implementation\ComM.c	  3166  
; ..\component\ComM\Implementation\ComM.c	  3167  #else
; ..\component\ComM\Implementation\ComM.c	  3168    COMM_DUMMY_STATEMENT_CONST(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  3169  #endif
; ..\component\ComM\Implementation\ComM.c	  3170  }
	ret
.L484:
	
__ComM_TF_NoCom_NetReq_function_end:
	.size	ComM_TF_NoCom_NetReq,__ComM_TF_NoCom_NetReq_function_end-ComM_TF_NoCom_NetReq
.L307:
	; End of function
	
	.sdecl	'.text.ComM.ComM_TF_NoCom_FullReadySleep',code,cluster('ComM_TF_NoCom_FullReadySleep')
	.sect	'.text.ComM.ComM_TF_NoCom_FullReadySleep'
	.align	2
	

; ..\component\ComM\Implementation\ComM.c	  3171  
; ..\component\ComM\Implementation\ComM.c	  3172  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3173   *  ComM_TF_NoCom_FullReadySleep()
; ..\component\ComM\Implementation\ComM.c	  3174   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3175  /*!
; ..\component\ComM\Implementation\ComM.c	  3176   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3177   *
; ..\component\ComM\Implementation\ComM.c	  3178   *
; ..\component\ComM\Implementation\ComM.c	  3179   */
; ..\component\ComM\Implementation\ComM.c	  3180  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_NoCom_FullReadySleep(NetworkHandleType Channel)
; Function ComM_TF_NoCom_FullReadySleep
.L138:
ComM_TF_NoCom_FullReadySleep:	.type	func

; ..\component\ComM\Implementation\ComM.c	  3181  {
; ..\component\ComM\Implementation\ComM.c	  3182    /* #10 If Nm is supported on the channel, request FULL_COM from BusSM and notify Nm about passive start-up. */
; ..\component\ComM\Implementation\ComM.c	  3183  #if (COMM_NMSUPPORTOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3184  # if (COMM_ISDEF_NMSUPPORTOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  3185    if (ComM_IsNmSupportOfChannel(Channel)) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  3186  # endif
; ..\component\ComM\Implementation\ComM.c	  3187    {
; ..\component\ComM\Implementation\ComM.c	  3188      ComM_RequestBusSMMode( Channel, COMM_FULL_COMMUNICATION );
; ..\component\ComM\Implementation\ComM.c	  3189      ComM_BusComModeReq[Channel] = ComM_GetWakeupStateOfChannel(Channel);  /* SBSW_COMM_ARRAY_CHANNEL_WRITE */ /* ESCAN00106564 */
; ..\component\ComM\Implementation\ComM.c	  3190  
; ..\component\ComM\Implementation\ComM.c	  3191      /* ComM shall call Nm_PassiveStartUp() when entering Ready Sleep for robustness reasons and ignore E_NOT_OK return value ESCAN00068132 */
; ..\component\ComM\Implementation\ComM.c	  3192      (void)Nm_PassiveStartUp(Channel);
; ..\component\ComM\Implementation\ComM.c	  3193    }
; ..\component\ComM\Implementation\ComM.c	  3194  #else
; ..\component\ComM\Implementation\ComM.c	  3195    COMM_DUMMY_STATEMENT_CONST(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  3196  #endif
; ..\component\ComM\Implementation\ComM.c	  3197    /* Note: the function cannot be called for channels with Nm Variant LIGHT because Minimum Full Com Duration
; ..\component\ComM\Implementation\ComM.c	  3198     * always exists for LIGHT and this results that channels enters Network Requested state and not Ready Sleep. */
; ..\component\ComM\Implementation\ComM.c	  3199  }
	ret
.L486:
	
__ComM_TF_NoCom_FullReadySleep_function_end:
	.size	ComM_TF_NoCom_FullReadySleep,__ComM_TF_NoCom_FullReadySleep_function_end-ComM_TF_NoCom_FullReadySleep
.L312:
	; End of function
	
	.sdecl	'.text.ComM.ComM_TF_Full_SiCom',code,cluster('ComM_TF_Full_SiCom')
	.sect	'.text.ComM.ComM_TF_Full_SiCom'
	.align	2
	

; ..\component\ComM\Implementation\ComM.c	  3200  
; ..\component\ComM\Implementation\ComM.c	  3201  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3202   *  ComM_TF_Full_SiCom()
; ..\component\ComM\Implementation\ComM.c	  3203   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3204  /*!
; ..\component\ComM\Implementation\ComM.c	  3205   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3206   *
; ..\component\ComM\Implementation\ComM.c	  3207   *
; ..\component\ComM\Implementation\ComM.c	  3208   *
; ..\component\ComM\Implementation\ComM.c	  3209   *
; ..\component\ComM\Implementation\ComM.c	  3210   */
; ..\component\ComM\Implementation\ComM.c	  3211  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_Full_SiCom( NetworkHandleType Channel )
; Function ComM_TF_Full_SiCom
.L140:
ComM_TF_Full_SiCom:	.type	func

; ..\component\ComM\Implementation\ComM.c	  3212  {
; ..\component\ComM\Implementation\ComM.c	  3213  #if (COMM_SILENTSUPPORTOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3214  # if (COMM_ISDEF_SILENTSUPPORTOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  3215    if (ComM_IsSilentSupportOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  3216  # endif
; ..\component\ComM\Implementation\ComM.c	  3217    {
; ..\component\ComM\Implementation\ComM.c	  3218  # if (COMM_NMLIGHTSILENTDURATIONOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3219  #  if (COMM_ISDEF_NMLIGHTSILENTDURATIONOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  3220      if (ComM_GetNmLightSilentDurationOfChannel(Channel) > 0x00u)
; ..\component\ComM\Implementation\ComM.c	  3221  #  endif
; ..\component\ComM\Implementation\ComM.c	  3222      {
; ..\component\ComM\Implementation\ComM.c	  3223        /* #10 If Nm Variant is LIGHT and the LIGHT SILENT timer is configured, start the timer. */
; ..\component\ComM\Implementation\ComM.c	  3224        ComM_SetNmLightTimer(Channel, ComM_GetNmLightSilentDurationOfChannel(Channel)); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3225      }
; ..\component\ComM\Implementation\ComM.c	  3226  # endif
; ..\component\ComM\Implementation\ComM.c	  3227  
; ..\component\ComM\Implementation\ComM.c	  3228      /* #20 Request COMM_SILENT_COMMUNICATION from BusSM. Silent mode is only available on CAN (except J1939Nm) or ETH with Nm Variants FULL or PASSIVE (ESCAN00069043) or LIGHT SILENT timer.
; ..\component\ComM\Implementation\ComM.c	  3229       *     Note: EthSM will ignore the mode request, but ComM shall trigger it for the sake of consistency because UdpNm indicates Prepare Bus Sleep Mode. */
; ..\component\ComM\Implementation\ComM.c	  3230      ComM_RequestBusSMMode( Channel, COMM_SILENT_COMMUNICATION );
; ..\component\ComM\Implementation\ComM.c	  3231    }
; ..\component\ComM\Implementation\ComM.c	  3232  #else
; ..\component\ComM\Implementation\ComM.c	  3233    COMM_DUMMY_STATEMENT_CONST(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  3234  #endif
; ..\component\ComM\Implementation\ComM.c	  3235  }
	ret
.L488:
	
__ComM_TF_Full_SiCom_function_end:
	.size	ComM_TF_Full_SiCom,__ComM_TF_Full_SiCom_function_end-ComM_TF_Full_SiCom
.L317:
	; End of function
	
	.sdecl	'.text.ComM.ComM_TF_ReadyS_NetReq',code,cluster('ComM_TF_ReadyS_NetReq')
	.sect	'.text.ComM.ComM_TF_ReadyS_NetReq'
	.align	2
	

; ..\component\ComM\Implementation\ComM.c	  3236  
; ..\component\ComM\Implementation\ComM.c	  3237  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3238   *  ComM_TF_ReadyS_NetReq()
; ..\component\ComM\Implementation\ComM.c	  3239   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3240  /*!
; ..\component\ComM\Implementation\ComM.c	  3241   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3242   *
; ..\component\ComM\Implementation\ComM.c	  3243   *
; ..\component\ComM\Implementation\ComM.c	  3244   *
; ..\component\ComM\Implementation\ComM.c	  3245   *
; ..\component\ComM\Implementation\ComM.c	  3246   */
; ..\component\ComM\Implementation\ComM.c	  3247  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_ReadyS_NetReq(NetworkHandleType Channel)
; Function ComM_TF_ReadyS_NetReq
.L142:
ComM_TF_ReadyS_NetReq:	.type	func

; ..\component\ComM\Implementation\ComM.c	  3248  {
; ..\component\ComM\Implementation\ComM.c	  3249  #if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3250  
; ..\component\ComM\Implementation\ComM.c	  3251    /* #10 If Nm Type is LIGHT, cancel the light timer. */
; ..\component\ComM\Implementation\ComM.c	  3252  # if (COMM_NMLIGHTDURATIONOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3253    ComM_SetNmLightTimer(Channel, 0); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3254  # endif
; ..\component\ComM\Implementation\ComM.c	  3255  
; ..\component\ComM\Implementation\ComM.c	  3256    /* #20 If Nm Type is FULL, notify Nm about network requested. */
; ..\component\ComM\Implementation\ComM.c	  3257  # if (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3258  #  if( COMM_ISDEF_NMTYPEOFCHANNEL == STD_OFF )
; ..\component\ComM\Implementation\ComM.c	  3259    if (ComM_GetNmTypeOfChannel(Channel) == COMM_FULL_NMTYPEOFCHANNEL) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  3260  #  endif
; ..\component\ComM\Implementation\ComM.c	  3261    {
; ..\component\ComM\Implementation\ComM.c	  3262      (void)Nm_NetworkRequest(Channel);
; ..\component\ComM\Implementation\ComM.c	  3263    }
; ..\component\ComM\Implementation\ComM.c	  3264  # endif
; ..\component\ComM\Implementation\ComM.c	  3265  
; ..\component\ComM\Implementation\ComM.c	  3266    /* #30 If Nm Type is LINSLAVE, notify LinSM and request FULL_COMMUNICATION. */
; ..\component\ComM\Implementation\ComM.c	  3267  # if ( COMM_EXISTS_LINSLAVE_NMTYPEOFCHANNEL == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3268  #  if ( COMM_ISDEF_NMTYPEOFCHANNEL == STD_OFF )
; ..\component\ComM\Implementation\ComM.c	  3269    if (ComM_GetNmTypeOfChannel(Channel) == COMM_LINSLAVE_NMTYPEOFCHANNEL)
; ..\component\ComM\Implementation\ComM.c	  3270  #  endif
; ..\component\ComM\Implementation\ComM.c	  3271    {
; ..\component\ComM\Implementation\ComM.c	  3272      ComM_RequestBusSMMode(Channel, COMM_FULL_COMMUNICATION);
; ..\component\ComM\Implementation\ComM.c	  3273    }
; ..\component\ComM\Implementation\ComM.c	  3274  # endif
; ..\component\ComM\Implementation\ComM.c	  3275  
; ..\component\ComM\Implementation\ComM.c	  3276  # if ((COMM_NMLIGHTDURATIONOFCHANNEL == STD_OFF) && (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_OFF))
; ..\component\ComM\Implementation\ComM.c	  3277    COMM_DUMMY_STATEMENT_CONST(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  3278  # endif
; ..\component\ComM\Implementation\ComM.c	  3279  #else
; ..\component\ComM\Implementation\ComM.c	  3280    COMM_DUMMY_STATEMENT_CONST(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  3281  #endif
; ..\component\ComM\Implementation\ComM.c	  3282  }
	ret
.L490:
	
__ComM_TF_ReadyS_NetReq_function_end:
	.size	ComM_TF_ReadyS_NetReq,__ComM_TF_ReadyS_NetReq_function_end-ComM_TF_ReadyS_NetReq
.L322:
	; End of function
	
	.sdecl	'.text.ComM.ComM_TF_SiCom_NoCom',code,cluster('ComM_TF_SiCom_NoCom')
	.sect	'.text.ComM.ComM_TF_SiCom_NoCom'
	.align	2
	

; ..\component\ComM\Implementation\ComM.c	  3283  
; ..\component\ComM\Implementation\ComM.c	  3284  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3285   *  ComM_TF_SiCom_NoCom()
; ..\component\ComM\Implementation\ComM.c	  3286   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3287  /*!
; ..\component\ComM\Implementation\ComM.c	  3288   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3289   *
; ..\component\ComM\Implementation\ComM.c	  3290   *
; ..\component\ComM\Implementation\ComM.c	  3291   *
; ..\component\ComM\Implementation\ComM.c	  3292   *
; ..\component\ComM\Implementation\ComM.c	  3293   *
; ..\component\ComM\Implementation\ComM.c	  3294   */
; ..\component\ComM\Implementation\ComM.c	  3295  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_SiCom_NoCom(NetworkHandleType Channel)
; Function ComM_TF_SiCom_NoCom
.L144:
ComM_TF_SiCom_NoCom:	.type	func

; ..\component\ComM\Implementation\ComM.c	  3296  {
; ..\component\ComM\Implementation\ComM.c	  3297  #if ( (COMM_MODE_LIMITATION == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF) )
; ..\component\ComM\Implementation\ComM.c	  3298    ComM_UserReqFullComIterType userReqFullComIndex;
; ..\component\ComM\Implementation\ComM.c	  3299  # if ( (COMM_PNC_SUPPORT == STD_ON) && (COMM_PNCCHANNELMAPPING == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  3300    ComM_UserReqPncFullComIterType userReqPncFullComIndex;
; ..\component\ComM\Implementation\ComM.c	  3301    ComM_PncPbIndIterType pncPbIndIter;
; ..\component\ComM\Implementation\ComM.c	  3302  # endif
; ..\component\ComM\Implementation\ComM.c	  3303  #endif
; ..\component\ComM\Implementation\ComM.c	  3304  
; ..\component\ComM\Implementation\ComM.c	  3305    /* #10 Set channel mode to NO_COM before requesting NO_COM from the BusSM to ensure accepting bus wake-ups. */
; ..\component\ComM\Implementation\ComM.c	  3306    ComM_ActiveComMode[Channel] = COMM_NO_COM_NO_PENDING_REQUEST; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */ /* ESCAN00091475 */
	movh.a	a15,#@his(ComM_ActiveComMode)
	lea	a15,[a15]@los(ComM_ActiveComMode)
.L837:
	addsc.a	a15,a15,d4,#0
.L838:
	mov	d15,#0
.L839:
	st.b	[a15],d15
.L840:

; ..\component\ComM\Implementation\ComM.c	  3307  
; ..\component\ComM\Implementation\ComM.c	  3308  #if ( COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF )
; ..\component\ComM\Implementation\ComM.c	  3309    switch (ComM_GetNmTypeOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  3310    {
; ..\component\ComM\Implementation\ComM.c	  3311    /* #20 If the channel is Nm LINSLAVE, set Bus Sleep Mode indicated Flag to FALSE. The Flag is handled in the next ComM main function. */
; ..\component\ComM\Implementation\ComM.c	  3312  # if ( COMM_EXISTS_LINSLAVE_NMTYPEOFCHANNEL == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3313    case COMM_LINSLAVE_NMTYPEOFCHANNEL:
; ..\component\ComM\Implementation\ComM.c	  3314      ComM_SetBusSleepModeIndicated(Channel, FALSE); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3315      break;
; ..\component\ComM\Implementation\ComM.c	  3316  # endif
; ..\component\ComM\Implementation\ComM.c	  3317    /* #30 If the channel is Nm FULL, PASSIVE or LIGHT, request NO_COM from BusSM. */
; ..\component\ComM\Implementation\ComM.c	  3318  # if ( (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_PASSIVE_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  3319  #  if ( COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3320    case COMM_FULL_NMTYPEOFCHANNEL:
; ..\component\ComM\Implementation\ComM.c	  3321  #  endif
; ..\component\ComM\Implementation\ComM.c	  3322  #  if ( COMM_EXISTS_PASSIVE_NMTYPEOFCHANNEL == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3323    case COMM_PASSIVE_NMTYPEOFCHANNEL:
; ..\component\ComM\Implementation\ComM.c	  3324  #  endif
; ..\component\ComM\Implementation\ComM.c	  3325  #  if ( COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3326    case COMM_LIGHT_NMTYPEOFCHANNEL:
; ..\component\ComM\Implementation\ComM.c	  3327  #  endif
; ..\component\ComM\Implementation\ComM.c	  3328      ComM_RequestBusSMMode(Channel, COMM_NO_COMMUNICATION);
; ..\component\ComM\Implementation\ComM.c	  3329      break;
; ..\component\ComM\Implementation\ComM.c	  3330  # endif
; ..\component\ComM\Implementation\ComM.c	  3331    /* PRQA S 2018 1 */ /* MD_ComM_2018 */
; ..\component\ComM\Implementation\ComM.c	  3332    default: /* COV_COMM_MISRA */
; ..\component\ComM\Implementation\ComM.c	  3333      break;
; ..\component\ComM\Implementation\ComM.c	  3334    }
; ..\component\ComM\Implementation\ComM.c	  3335  #endif
; ..\component\ComM\Implementation\ComM.c	  3336  
; ..\component\ComM\Implementation\ComM.c	  3337    /* #40 If the channel is limited to NO_COM, clear all FULL_COM requests for channel and PNC users. */
; ..\component\ComM\Implementation\ComM.c	  3338  #if ( (COMM_MODE_LIMITATION == STD_ON) && ( COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF ) )
; ..\component\ComM\Implementation\ComM.c	  3339  # if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3340    if (ComM_NoComLimitationActive(Channel) == TRUE)
; ..\component\ComM\Implementation\ComM.c	  3341  # endif
; ..\component\ComM\Implementation\ComM.c	  3342    {
; ..\component\ComM\Implementation\ComM.c	  3343      SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_0();
; ..\component\ComM\Implementation\ComM.c	  3344  
; ..\component\ComM\Implementation\ComM.c	  3345      for (userReqFullComIndex = ComM_GetUserReqFullComStartIdxOfChannelPb(Channel);
; ..\component\ComM\Implementation\ComM.c	  3346           userReqFullComIndex < ComM_GetUserReqFullComEndIdxOfChannelPb(Channel);
; ..\component\ComM\Implementation\ComM.c	  3347           userReqFullComIndex++)
; ..\component\ComM\Implementation\ComM.c	  3348      {
; ..\component\ComM\Implementation\ComM.c	  3349        ComM_SetUserReqFullCom(userReqFullComIndex, COMM_NO_REQUESTS); /* SBSW_COMM_UserReqFullCom_over_ChannelPb_or_ByteMask_CSL03 */
; ..\component\ComM\Implementation\ComM.c	  3350      }
; ..\component\ComM\Implementation\ComM.c	  3351  
; ..\component\ComM\Implementation\ComM.c	  3352  # if (( COMM_PNC_SUPPORT == STD_ON ) && ( COMM_PNCCHANNELMAPPING == STD_ON ))
; ..\component\ComM\Implementation\ComM.c	  3353      for (pncPbIndIter = ComM_GetPncPbIndStartIdxOfChannelPb(Channel);
; ..\component\ComM\Implementation\ComM.c	  3354           pncPbIndIter < ComM_GetPncPbIndEndIdxOfChannelPb(Channel);
; ..\component\ComM\Implementation\ComM.c	  3355           pncPbIndIter++)
; ..\component\ComM\Implementation\ComM.c	  3356      {
; ..\component\ComM\Implementation\ComM.c	  3357        for (userReqPncFullComIndex = ComM_GetUserReqPncFullComStartIdxOfPncPb(ComM_GetPncPbInd(pncPbIndIter));
; ..\component\ComM\Implementation\ComM.c	  3358             userReqPncFullComIndex < ComM_GetUserReqPncFullComEndIdxOfPncPb(ComM_GetPncPbInd(pncPbIndIter));
; ..\component\ComM\Implementation\ComM.c	  3359             userReqPncFullComIndex++)
; ..\component\ComM\Implementation\ComM.c	  3360        {
; ..\component\ComM\Implementation\ComM.c	  3361          ComM_SetUserReqPncFullCom(userReqPncFullComIndex, COMM_NO_REQUESTS); /* SBSW_COMM_UserReqPncFullCom_over_UserPncByteMask_or_PncPb_CSL03 */
; ..\component\ComM\Implementation\ComM.c	  3362        }
; ..\component\ComM\Implementation\ComM.c	  3363      }
; ..\component\ComM\Implementation\ComM.c	  3364  # endif /* COMM_PNC_SUPPORT == STD_ON */
; ..\component\ComM\Implementation\ComM.c	  3365  
; ..\component\ComM\Implementation\ComM.c	  3366      SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_0();
; ..\component\ComM\Implementation\ComM.c	  3367    }
; ..\component\ComM\Implementation\ComM.c	  3368  #endif /* COMM_MODE_LIMITATION */
; ..\component\ComM\Implementation\ComM.c	  3369  }
	ret
.L492:
	
__ComM_TF_SiCom_NoCom_function_end:
	.size	ComM_TF_SiCom_NoCom,__ComM_TF_SiCom_NoCom_function_end-ComM_TF_SiCom_NoCom
.L327:
	; End of function
	
	.sdecl	'.text.ComM.ComM_TF_NetReq_ReadyS',code,cluster('ComM_TF_NetReq_ReadyS')
	.sect	'.text.ComM.ComM_TF_NetReq_ReadyS'
	.align	2
	

; ..\component\ComM\Implementation\ComM.c	  3370  
; ..\component\ComM\Implementation\ComM.c	  3371  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3372   *  ComM_TF_NetReq_ReadyS()
; ..\component\ComM\Implementation\ComM.c	  3373   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3374  /*!
; ..\component\ComM\Implementation\ComM.c	  3375   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3376   *
; ..\component\ComM\Implementation\ComM.c	  3377   *
; ..\component\ComM\Implementation\ComM.c	  3378   *
; ..\component\ComM\Implementation\ComM.c	  3379   *
; ..\component\ComM\Implementation\ComM.c	  3380   */
; ..\component\ComM\Implementation\ComM.c	  3381  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_NetReq_ReadyS(NetworkHandleType Channel)
; Function ComM_TF_NetReq_ReadyS
.L146:
ComM_TF_NetReq_ReadyS:	.type	func

; ..\component\ComM\Implementation\ComM.c	  3382  {
; ..\component\ComM\Implementation\ComM.c	  3383  #if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3384  
; ..\component\ComM\Implementation\ComM.c	  3385    /* #10 If Nm Light timer is configured, start it. It is ensured by generator that Nm Type of the channel is LIGHT. */
; ..\component\ComM\Implementation\ComM.c	  3386  # if (COMM_NMLIGHTDURATIONOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3387  #  if (COMM_ISDEF_NMLIGHTDURATIONOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  3388    if (ComM_GetNmLightDurationOfChannel(Channel) > 0u)
; ..\component\ComM\Implementation\ComM.c	  3389  #  endif
; ..\component\ComM\Implementation\ComM.c	  3390    {
; ..\component\ComM\Implementation\ComM.c	  3391      ComM_SetNmLightTimer(Channel, ComM_GetNmLightDurationOfChannel(Channel)); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3392    }
; ..\component\ComM\Implementation\ComM.c	  3393  # endif
; ..\component\ComM\Implementation\ComM.c	  3394  
; ..\component\ComM\Implementation\ComM.c	  3395    /* #20 If Nm Type is FULL, notify Nm about network release. */
; ..\component\ComM\Implementation\ComM.c	  3396  # if (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3397  #  if (COMM_ISDEF_NMTYPEOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  3398  #   if (COMM_EXISTS_PASSIVE_NMTYPEOFCHANNEL == STD_ON || COMM_EXISTS_LINSLAVE_NMTYPEOFCHANNEL == STD_ON || COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3399    if (ComM_GetNmTypeOfChannel(Channel) == COMM_FULL_NMTYPEOFCHANNEL)
; ..\component\ComM\Implementation\ComM.c	  3400  #   endif
; ..\component\ComM\Implementation\ComM.c	  3401  #  endif
; ..\component\ComM\Implementation\ComM.c	  3402    {
; ..\component\ComM\Implementation\ComM.c	  3403      (void)Nm_NetworkRelease(Channel);
; ..\component\ComM\Implementation\ComM.c	  3404    }
; ..\component\ComM\Implementation\ComM.c	  3405  # endif
; ..\component\ComM\Implementation\ComM.c	  3406  
; ..\component\ComM\Implementation\ComM.c	  3407    /* #30 If Nm Type is LINSLAVE, notify LinSm and directly request NO_COMMUNICATION. */
; ..\component\ComM\Implementation\ComM.c	  3408  # if ( COMM_EXISTS_LINSLAVE_NMTYPEOFCHANNEL == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3409  #  if ( COMM_ISDEF_NMTYPEOFCHANNEL == STD_OFF )
; ..\component\ComM\Implementation\ComM.c	  3410    if (ComM_GetNmTypeOfChannel(Channel) == COMM_LINSLAVE_NMTYPEOFCHANNEL)
; ..\component\ComM\Implementation\ComM.c	  3411  #  endif
; ..\component\ComM\Implementation\ComM.c	  3412    {
; ..\component\ComM\Implementation\ComM.c	  3413      ComM_RequestBusSMMode(Channel, COMM_NO_COMMUNICATION);
; ..\component\ComM\Implementation\ComM.c	  3414    }
; ..\component\ComM\Implementation\ComM.c	  3415  # endif
; ..\component\ComM\Implementation\ComM.c	  3416  
; ..\component\ComM\Implementation\ComM.c	  3417  # if ((COMM_NMLIGHTDURATIONOFCHANNEL == STD_OFF) && (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_OFF))
; ..\component\ComM\Implementation\ComM.c	  3418    COMM_DUMMY_STATEMENT_CONST(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  3419  # endif
; ..\component\ComM\Implementation\ComM.c	  3420  #else
; ..\component\ComM\Implementation\ComM.c	  3421    COMM_DUMMY_STATEMENT_CONST(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  3422  #endif
; ..\component\ComM\Implementation\ComM.c	  3423  }
	ret
.L494:
	
__ComM_TF_NetReq_ReadyS_function_end:
	.size	ComM_TF_NetReq_ReadyS,__ComM_TF_NetReq_ReadyS_function_end-ComM_TF_NetReq_ReadyS
.L332:
	; End of function
	
	.sdecl	'.text.ComM.ComM_TF_No_Action',code,cluster('ComM_TF_No_Action')
	.sect	'.text.ComM.ComM_TF_No_Action'
	.align	2
	

; ..\component\ComM\Implementation\ComM.c	  3424  
; ..\component\ComM\Implementation\ComM.c	  3425  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3426   *  ComM_TF_No_Action()
; ..\component\ComM\Implementation\ComM.c	  3427   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3428  /*!
; ..\component\ComM\Implementation\ComM.c	  3429   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3430   *
; ..\component\ComM\Implementation\ComM.c	  3431   *
; ..\component\ComM\Implementation\ComM.c	  3432   *
; ..\component\ComM\Implementation\ComM.c	  3433   *
; ..\component\ComM\Implementation\ComM.c	  3434   */
; ..\component\ComM\Implementation\ComM.c	  3435  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_No_Action(NetworkHandleType Channel)
; Function ComM_TF_No_Action
.L148:
ComM_TF_No_Action:	.type	func

; ..\component\ComM\Implementation\ComM.c	  3436  {
; ..\component\ComM\Implementation\ComM.c	  3437    /* #10 There is no action for this sub-state transition. Use cases:
; ..\component\ComM\Implementation\ComM.c	  3438     * COMM_NO_COM_REQUEST_PENDING to COMM_NO_COM_NO_PENDING_REQUEST (communication was never allowed and user/DCM request is canceled)
; ..\component\ComM\Implementation\ComM.c	  3439     * COMM_NO_COM_NO_PENDING_REQUEST to COMM_NO_COM_REQUEST_PENDING (communication is requested and ComM waits for allowed notification)
; ..\component\ComM\Implementation\ComM.c	  3440     */
; ..\component\ComM\Implementation\ComM.c	  3441    COMM_DUMMY_STATEMENT_CONST(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  3442  }
	ret
.L496:
	
__ComM_TF_No_Action_function_end:
	.size	ComM_TF_No_Action,__ComM_TF_No_Action_function_end-ComM_TF_No_Action
.L337:
	; End of function
	
	.sdecl	'.text.ComM.ComM_TF_No_Transition',code,cluster('ComM_TF_No_Transition')
	.sect	'.text.ComM.ComM_TF_No_Transition'
	.align	2
	

; ..\component\ComM\Implementation\ComM.c	  3443  
; ..\component\ComM\Implementation\ComM.c	  3444  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3445   *  ComM_TF_No_Transition()
; ..\component\ComM\Implementation\ComM.c	  3446   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3447  /*!
; ..\component\ComM\Implementation\ComM.c	  3448   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3449   *
; ..\component\ComM\Implementation\ComM.c	  3450   *
; ..\component\ComM\Implementation\ComM.c	  3451   */
; ..\component\ComM\Implementation\ComM.c	  3452  COMM_LOCAL FUNC(void, COMM_CODE) ComM_TF_No_Transition(NetworkHandleType Channel)
; Function ComM_TF_No_Transition
.L150:
ComM_TF_No_Transition:	.type	func

; ..\component\ComM\Implementation\ComM.c	  3453  {
; ..\component\ComM\Implementation\ComM.c	  3454    /* #10 This is an invalid state transition, report a Det error. */
; ..\component\ComM\Implementation\ComM.c	  3455  #if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3456    (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_MAINFUNCTION, COMM_E_NOSUPPORTED_MODECHANGE );
	fcall	.cocofun_2
.L853:
	mov	d6,#96
.L854:
	mov	d7,#4
	j	Det_ReportError
.L498:
	
__ComM_TF_No_Transition_function_end:
	.size	ComM_TF_No_Transition,__ComM_TF_No_Transition_function_end-ComM_TF_No_Transition
.L342:
	; End of function
	
	.sdecl	'.text.ComM..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.ComM..cocofun_2'
	.align	2
; Function .cocofun_2
.L152:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0
	mov	d4,#12
.L533:
	mov	d5,#0
	fret
.L372:
	; End of function
	.sdecl	'.text.ComM.ComM_Init',code,cluster('ComM_Init')
	.sect	'.text.ComM.ComM_Init'
	.align	2
	
	.global	ComM_Init

; ..\component\ComM\Implementation\ComM.c	  3457  #endif
; ..\component\ComM\Implementation\ComM.c	  3458  
; ..\component\ComM\Implementation\ComM.c	  3459    COMM_DUMMY_STATEMENT_CONST(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  3460  }
; ..\component\ComM\Implementation\ComM.c	  3461  
; ..\component\ComM\Implementation\ComM.c	  3462  #if (COMM_USERMODENOTIFUNC == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3463  # if (COMM_USERMODENOTIFUNC_PNC_USER_ONLY == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  3464  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3465   *  ComM_StateChangeNotification()
; ..\component\ComM\Implementation\ComM.c	  3466   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3467  /*!
; ..\component\ComM\Implementation\ComM.c	  3468   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3469   *
; ..\component\ComM\Implementation\ComM.c	  3470   *
; ..\component\ComM\Implementation\ComM.c	  3471   *
; ..\component\ComM\Implementation\ComM.c	  3472   *
; ..\component\ComM\Implementation\ComM.c	  3473   *
; ..\component\ComM\Implementation\ComM.c	  3474   *
; ..\component\ComM\Implementation\ComM.c	  3475   *
; ..\component\ComM\Implementation\ComM.c	  3476   *
; ..\component\ComM\Implementation\ComM.c	  3477   *
; ..\component\ComM\Implementation\ComM.c	  3478   *
; ..\component\ComM\Implementation\ComM.c	  3479   */
; ..\component\ComM\Implementation\ComM.c	  3480  COMM_LOCAL FUNC(void, COMM_CODE) ComM_StateChangeNotification( NetworkHandleType channel )
; ..\component\ComM\Implementation\ComM.c	  3481  {
; ..\component\ComM\Implementation\ComM.c	  3482    ComM_SizeOfUserType userIndex;
; ..\component\ComM\Implementation\ComM.c	  3483    ComM_ModeType ComM_CalcMode;
; ..\component\ComM\Implementation\ComM.c	  3484    Std_ReturnType retValue;
; ..\component\ComM\Implementation\ComM.c	  3485    Std_ReturnType retValueCumulated;
; ..\component\ComM\Implementation\ComM.c	  3486  
; ..\component\ComM\Implementation\ComM.c	  3487  # if ( COMM_ACTIVE_CHANNEL > 1U )
; ..\component\ComM\Implementation\ComM.c	  3488    ComM_UserByteMaskEndIdxOfUserType iByteMaskIndex;
; ..\component\ComM\Implementation\ComM.c	  3489    boolean bNotify;
; ..\component\ComM\Implementation\ComM.c	  3490  # endif
; ..\component\ComM\Implementation\ComM.c	  3491  
; ..\component\ComM\Implementation\ComM.c	  3492    retValue = RTE_E_OK;
; ..\component\ComM\Implementation\ComM.c	  3493    retValueCumulated = RTE_E_OK;
; ..\component\ComM\Implementation\ComM.c	  3494  
; ..\component\ComM\Implementation\ComM.c	  3495    /* #10 Iterate over users that have configured User Mode (state change) notification and are mapped to channels (not PNC). */
; ..\component\ComM\Implementation\ComM.c	  3496    for( userIndex = 0; userIndex < ComM_GetSizeOfUser(); userIndex++ )
; ..\component\ComM\Implementation\ComM.c	  3497    {
; ..\component\ComM\Implementation\ComM.c	  3498      if (ComM_GetUserModeNotiFunc(userIndex) != NULL_PTR) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  3499      {
; ..\component\ComM\Implementation\ComM.c	  3500  # if ( COMM_PNC_SUPPORT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3501        if (!ComM_IsPncUserOfUser(userIndex))
; ..\component\ComM\Implementation\ComM.c	  3502  # endif
; ..\component\ComM\Implementation\ComM.c	  3503        {
; ..\component\ComM\Implementation\ComM.c	  3504          /* #20 In single-channel configurations notify the BusSM mode to the users */
; ..\component\ComM\Implementation\ComM.c	  3505          ComM_CalcMode = ComM_BusSmState[channel];
; ..\component\ComM\Implementation\ComM.c	  3506  
; ..\component\ComM\Implementation\ComM.c	  3507  # if ( COMM_ACTIVE_CHANNEL > 1U )
; ..\component\ComM\Implementation\ComM.c	  3508          /* #30 In multi-channel configurations only notify a new user mode if
; ..\component\ComM\Implementation\ComM.c	  3509           *     1) the user is mapped to the current channel where the BusSM mode has changed and
; ..\component\ComM\Implementation\ComM.c	  3510           *     2) the lowest mode of all channels mapped to the user has changed since the last mode notification. */
; ..\component\ComM\Implementation\ComM.c	  3511          bNotify = FALSE;
; ..\component\ComM\Implementation\ComM.c	  3512  
; ..\component\ComM\Implementation\ComM.c	  3513          for(iByteMaskIndex = ComM_GetUserByteMaskStartIdxOfUser(userIndex); iByteMaskIndex < ComM_GetUserByteMaskEndIdxOfUser(userIndex); iByteMaskIndex++)
; ..\component\ComM\Implementation\ComM.c	  3514          {
; ..\component\ComM\Implementation\ComM.c	  3515            if( ComM_GetChannelOfUserByteMask(iByteMaskIndex) == channel )
; ..\component\ComM\Implementation\ComM.c	  3516            {
; ..\component\ComM\Implementation\ComM.c	  3517              bNotify = TRUE;
; ..\component\ComM\Implementation\ComM.c	  3518            }
; ..\component\ComM\Implementation\ComM.c	  3519  
; ..\component\ComM\Implementation\ComM.c	  3520            if( ComM_BusSmState[ComM_GetChannelOfUserByteMask(iByteMaskIndex)] < ComM_CalcMode )
; ..\component\ComM\Implementation\ComM.c	  3521            {
; ..\component\ComM\Implementation\ComM.c	  3522              ComM_CalcMode = ComM_BusSmState[ComM_GetChannelOfUserByteMask(iByteMaskIndex)];
; ..\component\ComM\Implementation\ComM.c	  3523            }
; ..\component\ComM\Implementation\ComM.c	  3524          }
; ..\component\ComM\Implementation\ComM.c	  3525  
; ..\component\ComM\Implementation\ComM.c	  3526          if( bNotify == TRUE ) /* COV_COMM_COMMON_USER_WITH_MODE_NOTIFICATION */
; ..\component\ComM\Implementation\ComM.c	  3527  # endif
; ..\component\ComM\Implementation\ComM.c	  3528          {
; ..\component\ComM\Implementation\ComM.c	  3529            if( ComM_CalcMode != ComM_GetLastStateChange(userIndex) )
; ..\component\ComM\Implementation\ComM.c	  3530            {
; ..\component\ComM\Implementation\ComM.c	  3531              if( userIndex < ComM_GetSizeOfUserModeNotiFunc() ) /* COV_COMM_GENDATA_CHECK */ /* PRQA S 2995, 2991 */ /* MD_ComM_2995_2991 */
; ..\component\ComM\Implementation\ComM.c	  3532              {
; ..\component\ComM\Implementation\ComM.c	  3533                /* #40 If a new mode is available for the current user notify it using the Mode Switch Interface (sender-receiver) 'ComM_CurrentMode' */
; ..\component\ComM\Implementation\ComM.c	  3534                switch(ComM_CalcMode)
; ..\component\ComM\Implementation\ComM.c	  3535                {
; ..\component\ComM\Implementation\ComM.c	  3536                case COMM_FULL_COMMUNICATION:
; ..\component\ComM\Implementation\ComM.c	  3537                  retValue = ComM_GetUserModeNotiFunc(userIndex)(RTE_MODE_ComMMode_COMM_FULL_COMMUNICATION);   /* SBSW_COMM_UserModeNotiFunc_PointerCall */
; ..\component\ComM\Implementation\ComM.c	  3538                  break;
; ..\component\ComM\Implementation\ComM.c	  3539                case COMM_SILENT_COMMUNICATION:
; ..\component\ComM\Implementation\ComM.c	  3540                  retValue = ComM_GetUserModeNotiFunc(userIndex)(RTE_MODE_ComMMode_COMM_SILENT_COMMUNICATION); /* SBSW_COMM_UserModeNotiFunc_PointerCall */
; ..\component\ComM\Implementation\ComM.c	  3541                  break;
; ..\component\ComM\Implementation\ComM.c	  3542                case COMM_NO_COMMUNICATION:
; ..\component\ComM\Implementation\ComM.c	  3543                  retValue = ComM_GetUserModeNotiFunc(userIndex)(RTE_MODE_ComMMode_COMM_NO_COMMUNICATION);     /* SBSW_COMM_UserModeNotiFunc_PointerCall */
; ..\component\ComM\Implementation\ComM.c	  3544                  break;
; ..\component\ComM\Implementation\ComM.c	  3545                  /* PRQA S 2018 1 */ /* MD_ComM_2018 */
; ..\component\ComM\Implementation\ComM.c	  3546                default: /* COV_COMM_MISRA */
; ..\component\ComM\Implementation\ComM.c	  3547                  break;
; ..\component\ComM\Implementation\ComM.c	  3548                }
; ..\component\ComM\Implementation\ComM.c	  3549              }
; ..\component\ComM\Implementation\ComM.c	  3550  
; ..\component\ComM\Implementation\ComM.c	  3551              if( retValue == RTE_E_OK )
; ..\component\ComM\Implementation\ComM.c	  3552              {
; ..\component\ComM\Implementation\ComM.c	  3553                /* #400 If notification to the current user was successful, update the mode to ensure that the same one will not be notified again. */
; ..\component\ComM\Implementation\ComM.c	  3554                ComM_SetLastStateChange(userIndex, ComM_CalcMode); /* SBSW_COMM_USER_CSL02 */ /*lint !e661 ComM_LastStateChange[] has a size relation to ComM_User[] */
; ..\component\ComM\Implementation\ComM.c	  3555              }
; ..\component\ComM\Implementation\ComM.c	  3556              else
; ..\component\ComM\Implementation\ComM.c	  3557              {
; ..\component\ComM\Implementation\ComM.c	  3558                /* #410 If at least one user notification was not successful, the state change on this channel will be processed again in the next task. */
; ..\component\ComM\Implementation\ComM.c	  3559                retValueCumulated = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  3560              }
; ..\component\ComM\Implementation\ComM.c	  3561            }
; ..\component\ComM\Implementation\ComM.c	  3562          }
; ..\component\ComM\Implementation\ComM.c	  3563        }
; ..\component\ComM\Implementation\ComM.c	  3564      }
; ..\component\ComM\Implementation\ComM.c	  3565    }
; ..\component\ComM\Implementation\ComM.c	  3566  
; ..\component\ComM\Implementation\ComM.c	  3567    if( retValueCumulated == RTE_E_OK )
; ..\component\ComM\Implementation\ComM.c	  3568    {
; ..\component\ComM\Implementation\ComM.c	  3569      /* #50 If all users were notified successfully, mark processing of this state change as completed. */
; ..\component\ComM\Implementation\ComM.c	  3570      ComM_StateChange[channel] = COMM_NO_STATE_CHANGE; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3571    }
; ..\component\ComM\Implementation\ComM.c	  3572  } /* PRQA S 6010, 6030, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\ComM\Implementation\ComM.c	  3573  # endif
; ..\component\ComM\Implementation\ComM.c	  3574  #endif
; ..\component\ComM\Implementation\ComM.c	  3575  
; ..\component\ComM\Implementation\ComM.c	  3576  #if (COMM_NMSUPPORTOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3577  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3578   *  ComM_ProcessPassiveWakeUp()
; ..\component\ComM\Implementation\ComM.c	  3579   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3580  /*!
; ..\component\ComM\Implementation\ComM.c	  3581   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3582   *
; ..\component\ComM\Implementation\ComM.c	  3583   *
; ..\component\ComM\Implementation\ComM.c	  3584   *
; ..\component\ComM\Implementation\ComM.c	  3585   *
; ..\component\ComM\Implementation\ComM.c	  3586   *
; ..\component\ComM\Implementation\ComM.c	  3587   *
; ..\component\ComM\Implementation\ComM.c	  3588   *
; ..\component\ComM\Implementation\ComM.c	  3589   *
; ..\component\ComM\Implementation\ComM.c	  3590   *
; ..\component\ComM\Implementation\ComM.c	  3591   *
; ..\component\ComM\Implementation\ComM.c	  3592   *
; ..\component\ComM\Implementation\ComM.c	  3593   */
; ..\component\ComM\Implementation\ComM.c	  3594  COMM_LOCAL FUNC( void, COMM_CODE ) ComM_ProcessPassiveWakeUp( NetworkHandleType channel )
; ..\component\ComM\Implementation\ComM.c	  3595  {
; ..\component\ComM\Implementation\ComM.c	  3596  # if (COMM_SYNCHRONOUS_WAKE_UP == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3597    uint8 channelIndex;
; ..\component\ComM\Implementation\ComM.c	  3598  #  if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3599  #   if (COMM_PNC_PS_TIMER > 0U) /* ESCAN00067357 */
; ..\component\ComM\Implementation\ComM.c	  3600    ComM_PncIterType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  3601  #   endif
; ..\component\ComM\Implementation\ComM.c	  3602  #  endif
; ..\component\ComM\Implementation\ComM.c	  3603  # endif
; ..\component\ComM\Implementation\ComM.c	  3604  
; ..\component\ComM\Implementation\ComM.c	  3605  # if (COMM_SYNCHRONOUS_WAKE_UP == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3606    /* #10 If Synchronous Wake-up is enabled, notify passive wake-up to all ComM channels being in NO_COM or SI_COM state.
; ..\component\ComM\Implementation\ComM.c	  3607     *     This is done by setting the bus-side requested state to FULL_COM (Network Requested or Ready Sleep). */
; ..\component\ComM\Implementation\ComM.c	  3608    for(channelIndex = 0u; channelIndex < ComM_GetSizeOfChannel(); channelIndex++)
; ..\component\ComM\Implementation\ComM.c	  3609    {
; ..\component\ComM\Implementation\ComM.c	  3610  #  if (COMM_BUS_TYPE_FR_PRESENT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3611      if(ComM_FrShutdown[channelIndex] == TRUE)
; ..\component\ComM\Implementation\ComM.c	  3612      {
; ..\component\ComM\Implementation\ComM.c	  3613        /* #100 If communication shutdown is ongoing on a FlexRay channel, delay the notification until FrSM indicates NO_COM
; ..\component\ComM\Implementation\ComM.c	  3614         *      because shutdown on FlexRay shall not be interrupted.
; ..\component\ComM\Implementation\ComM.c	  3615         *      Note: the ongoing shutdown means that the channel is not in FULL_COM anymore, no need to check. */
; ..\component\ComM\Implementation\ComM.c	  3616        ComM_BusComModeReqFrShutdown[channelIndex] = ComM_GetWakeupStateOfChannel(channelIndex); /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3617      }
; ..\component\ComM\Implementation\ComM.c	  3618      else
; ..\component\ComM\Implementation\ComM.c	  3619  #  endif
; ..\component\ComM\Implementation\ComM.c	  3620      {
; ..\component\ComM\Implementation\ComM.c	  3621        if((ComM_ActiveComMode[channelIndex] & COMM_FULL_COMMUNICATION) == 0u)
; ..\component\ComM\Implementation\ComM.c	  3622        {
; ..\component\ComM\Implementation\ComM.c	  3623          ComM_BusComModeReq[channelIndex] = ComM_GetWakeupStateOfChannel(channelIndex); /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3624        }
; ..\component\ComM\Implementation\ComM.c	  3625      }
; ..\component\ComM\Implementation\ComM.c	  3626    }
; ..\component\ComM\Implementation\ComM.c	  3627  
; ..\component\ComM\Implementation\ComM.c	  3628    /* #20 If Synchronous Wake-up is enabled, activate all PNCs at least for the duration of the PNC Prepare Sleep Timer. */
; ..\component\ComM\Implementation\ComM.c	  3629  #  if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3630  #   if (COMM_PNC_PS_TIMER > 0U) /* ESCAN00067357 */
; ..\component\ComM\Implementation\ComM.c	  3631  #    if (COMM_PNC_CHECK_ENABLED_AT_RUNTIME == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3632    if (ComM_HasPncPb())
; ..\component\ComM\Implementation\ComM.c	  3633  #    endif
; ..\component\ComM\Implementation\ComM.c	  3634    {
; ..\component\ComM\Implementation\ComM.c	  3635      for(pncIndex = 0; pncIndex < ComM_GetSizeOfPnc(); pncIndex++)
; ..\component\ComM\Implementation\ComM.c	  3636      {
; ..\component\ComM\Implementation\ComM.c	  3637        if( (ComM_GetActivePncComMode(pncIndex) == COMM_PNC_NO_COMMUNICATION) && (ComM_GetBusPncComModeReq(pncIndex) == COMM_PNC_NO_COMMUNICATION) )
; ..\component\ComM\Implementation\ComM.c	  3638        {
; ..\component\ComM\Implementation\ComM.c	  3639          ComM_SetBusPncComModeReq(pncIndex, COMM_PNC_PREPARE_SLEEP); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3640        }
; ..\component\ComM\Implementation\ComM.c	  3641      }
; ..\component\ComM\Implementation\ComM.c	  3642    }
; ..\component\ComM\Implementation\ComM.c	  3643  #   endif
; ..\component\ComM\Implementation\ComM.c	  3644  #  endif
; ..\component\ComM\Implementation\ComM.c	  3645  
; ..\component\ComM\Implementation\ComM.c	  3646    COMM_DUMMY_STATEMENT_CONST(channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  3647  
; ..\component\ComM\Implementation\ComM.c	  3648  # else /* #if ( COMM_SYNCHRONOUS_WAKE_UP == STD_OFF ) */
; ..\component\ComM\Implementation\ComM.c	  3649  
; ..\component\ComM\Implementation\ComM.c	  3650    /* #30 If Synchronous Wake-up is disabled, notify passive wake-up to the channel by setting the bus-side
; ..\component\ComM\Implementation\ComM.c	  3651     *     requested state to FULL_COM (Network Requested or Ready Sleep). Ignore the wake-up in FULL_COM mode. */
; ..\component\ComM\Implementation\ComM.c	  3652  #  if (COMM_BUS_TYPE_FR_PRESENT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3653    if(ComM_FrShutdown[channel] == TRUE)
; ..\component\ComM\Implementation\ComM.c	  3654    {
; ..\component\ComM\Implementation\ComM.c	  3655      /* #300 If communication shutdown is ongoing on FlexRay channel, delay the notification until FrSM indicates NO_COM
; ..\component\ComM\Implementation\ComM.c	  3656       *      because shutdown on FlexRay shall not be interrupted. */
; ..\component\ComM\Implementation\ComM.c	  3657      ComM_BusComModeReqFrShutdown[channel] = ComM_GetWakeupStateOfChannel(channel); /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3658    }
; ..\component\ComM\Implementation\ComM.c	  3659    else
; ..\component\ComM\Implementation\ComM.c	  3660  #  endif
; ..\component\ComM\Implementation\ComM.c	  3661    {
; ..\component\ComM\Implementation\ComM.c	  3662      if((ComM_ActiveComMode[channel] & COMM_FULL_COMMUNICATION) == 0u) /* ESCAN00091475 */
; ..\component\ComM\Implementation\ComM.c	  3663      {
; ..\component\ComM\Implementation\ComM.c	  3664        ComM_BusComModeReq[channel] = ComM_GetWakeupStateOfChannel(channel); /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3665      }
; ..\component\ComM\Implementation\ComM.c	  3666    }
; ..\component\ComM\Implementation\ComM.c	  3667  # endif /* #if ( COMM_SYNCHRONOUS_WAKE_UP ) */
; ..\component\ComM\Implementation\ComM.c	  3668  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\ComM\Implementation\ComM.c	  3669  #endif
; ..\component\ComM\Implementation\ComM.c	  3670  
; ..\component\ComM\Implementation\ComM.c	  3671  #if (COMM_EXTENDED_RAM_CHECK == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3672  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3673   *  ComM_ChannelGetMaxStateAfterExtRamCheck()
; ..\component\ComM\Implementation\ComM.c	  3674   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3675  /*!
; ..\component\ComM\Implementation\ComM.c	  3676   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3677   *
; ..\component\ComM\Implementation\ComM.c	  3678   *
; ..\component\ComM\Implementation\ComM.c	  3679   *
; ..\component\ComM\Implementation\ComM.c	  3680   *
; ..\component\ComM\Implementation\ComM.c	  3681   *
; ..\component\ComM\Implementation\ComM.c	  3682   */
; ..\component\ComM\Implementation\ComM.c	  3683  COMM_LOCAL_INLINE FUNC(ComM_StateType, COMM_CODE) ComM_ChannelGetMaxStateAfterExtRamCheck( NetworkHandleType channel, ComM_StateType targetState )
; ..\component\ComM\Implementation\ComM.c	  3684  {
; ..\component\ComM\Implementation\ComM.c	  3685    ComM_StateType maxState;
; ..\component\ComM\Implementation\ComM.c	  3686    Std_ReturnType ramCheckStatus;
; ..\component\ComM\Implementation\ComM.c	  3687  
; ..\component\ComM\Implementation\ComM.c	  3688    maxState = targetState;
; ..\component\ComM\Implementation\ComM.c	  3689  
; ..\component\ComM\Implementation\ComM.c	  3690    /* #10 Provide the maximum communication state on CAN channels according to the result of Extended RAM Check:
; ..\component\ComM\Implementation\ComM.c	  3691     *     COMM_NO_COM_NO_PENDING_REQUEST if check result is Disable,
; ..\component\ComM\Implementation\ComM.c	  3692     *     COMM_NO_COM_REQUEST_PENDING if check result is Disable Repeat,
; ..\component\ComM\Implementation\ComM.c	  3693     *     the targetState (no changes) otherwise. */
; ..\component\ComM\Implementation\ComM.c	  3694  # if (COMM_ISDEF_BUSTYPEOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  3695    if (ComM_GetBusTypeOfChannel(channel) == COMM_BUS_TYPE_CAN)
; ..\component\ComM\Implementation\ComM.c	  3696  # endif
; ..\component\ComM\Implementation\ComM.c	  3697    {
; ..\component\ComM\Implementation\ComM.c	  3698      ramCheckStatus = CanSM_RamCheckStatus(channel);
; ..\component\ComM\Implementation\ComM.c	  3699  
; ..\component\ComM\Implementation\ComM.c	  3700      if (ramCheckStatus == CANSM_DISABLE_COMMUNICATION)
; ..\component\ComM\Implementation\ComM.c	  3701      {
; ..\component\ComM\Implementation\ComM.c	  3702        maxState = COMM_NO_COM_NO_PENDING_REQUEST;
; ..\component\ComM\Implementation\ComM.c	  3703      }
; ..\component\ComM\Implementation\ComM.c	  3704      else if (ramCheckStatus == CANSM_DISABLE_COMMUNICATION_REPEAT)
; ..\component\ComM\Implementation\ComM.c	  3705      {
; ..\component\ComM\Implementation\ComM.c	  3706        maxState = COMM_NO_COM_REQUEST_PENDING;
; ..\component\ComM\Implementation\ComM.c	  3707      }
; ..\component\ComM\Implementation\ComM.c	  3708      else
; ..\component\ComM\Implementation\ComM.c	  3709      {
; ..\component\ComM\Implementation\ComM.c	  3710        /* no changes */
; ..\component\ComM\Implementation\ComM.c	  3711      }
; ..\component\ComM\Implementation\ComM.c	  3712    }
; ..\component\ComM\Implementation\ComM.c	  3713  
; ..\component\ComM\Implementation\ComM.c	  3714    return maxState;
; ..\component\ComM\Implementation\ComM.c	  3715  }
; ..\component\ComM\Implementation\ComM.c	  3716  #endif
; ..\component\ComM\Implementation\ComM.c	  3717  
; ..\component\ComM\Implementation\ComM.c	  3718  #if (COMM_RESETAFTERFORCINGNOCOMMOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3719  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3720  *  ComM_ChannelResetAfterForcingNoComm()
; ..\component\ComM\Implementation\ComM.c	  3721  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3722  /*!
; ..\component\ComM\Implementation\ComM.c	  3723  * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3724   *
; ..\component\ComM\Implementation\ComM.c	  3725   *
; ..\component\ComM\Implementation\ComM.c	  3726   *
; ..\component\ComM\Implementation\ComM.c	  3727   *
; ..\component\ComM\Implementation\ComM.c	  3728  */
; ..\component\ComM\Implementation\ComM.c	  3729  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_ChannelResetAfterForcingNoComm( void )
; ..\component\ComM\Implementation\ComM.c	  3730  {
; ..\component\ComM\Implementation\ComM.c	  3731    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  3732    ComM_SizeOfChannelType channelIndex;
; ..\component\ComM\Implementation\ComM.c	  3733    boolean allChannelsAreInNoComm = TRUE;
; ..\component\ComM\Implementation\ComM.c	  3734    boolean aChannelNeedsResetAfterForcingNoComm = FALSE;
; ..\component\ComM\Implementation\ComM.c	  3735  
; ..\component\ComM\Implementation\ComM.c	  3736    /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  3737    for (channelIndex = 0; channelIndex < ComM_GetSizeOfChannel(); channelIndex++)
; ..\component\ComM\Implementation\ComM.c	  3738    {
; ..\component\ComM\Implementation\ComM.c	  3739  #  if (COMM_EXISTS_NONE_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3740      if (ComM_GetNmTypeOfChannel(channelIndex) != COMM_NONE_NMTYPEOFCHANNEL)
; ..\component\ComM\Implementation\ComM.c	  3741  #  endif
; ..\component\ComM\Implementation\ComM.c	  3742      {
; ..\component\ComM\Implementation\ComM.c	  3743        /* #10 Check for each channel except NM NONE: BusSm indicated NO_COM and the channel is in NO_COM (ignore possible passive wake-ups). */
; ..\component\ComM\Implementation\ComM.c	  3744        if ((ComM_BusSmState[channelIndex] != COMM_NO_COMMUNICATION) || (ComM_ActiveComMode[channelIndex] > COMM_NO_COM_REQUEST_PENDING))
; ..\component\ComM\Implementation\ComM.c	  3745        {
; ..\component\ComM\Implementation\ComM.c	  3746          allChannelsAreInNoComm = FALSE;
; ..\component\ComM\Implementation\ComM.c	  3747        }
; ..\component\ComM\Implementation\ComM.c	  3748  
; ..\component\ComM\Implementation\ComM.c	  3749        /* #20 Check that at least one channel has an active Mode Limitation and has Reset After Forcing NoCom enabled. */
; ..\component\ComM\Implementation\ComM.c	  3750  # if (COMM_EXISTS_PASSIVE_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3751        if (ComM_IsResetAfterForcingNoCommOfChannel(channelIndex)) /* Needed only for channels with Nm PASSIVE */
; ..\component\ComM\Implementation\ComM.c	  3752  # endif
; ..\component\ComM\Implementation\ComM.c	  3753        {
; ..\component\ComM\Implementation\ComM.c	  3754          if (ComM_NoComLimitationActive(channelIndex) == TRUE)
; ..\component\ComM\Implementation\ComM.c	  3755          {
; ..\component\ComM\Implementation\ComM.c	  3756            aChannelNeedsResetAfterForcingNoComm = TRUE;
; ..\component\ComM\Implementation\ComM.c	  3757          }
; ..\component\ComM\Implementation\ComM.c	  3758        }
; ..\component\ComM\Implementation\ComM.c	  3759      }
; ..\component\ComM\Implementation\ComM.c	  3760    }
; ..\component\ComM\Implementation\ComM.c	  3761  
; ..\component\ComM\Implementation\ComM.c	  3762    /* #30 If the conditions above are true, call BswM_ComM_InitiateReset(). */
; ..\component\ComM\Implementation\ComM.c	  3763    if ((allChannelsAreInNoComm == TRUE) && (aChannelNeedsResetAfterForcingNoComm == TRUE))
; ..\component\ComM\Implementation\ComM.c	  3764    {
; ..\component\ComM\Implementation\ComM.c	  3765      BswM_ComM_InitiateReset();
; ..\component\ComM\Implementation\ComM.c	  3766    }
; ..\component\ComM\Implementation\ComM.c	  3767  }
; ..\component\ComM\Implementation\ComM.c	  3768  #endif
; ..\component\ComM\Implementation\ComM.c	  3769  
; ..\component\ComM\Implementation\ComM.c	  3770  /***********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3771   *  ComM_Init()
; ..\component\ComM\Implementation\ComM.c	  3772   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3773  /*!
; ..\component\ComM\Implementation\ComM.c	  3774   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3775   *
; ..\component\ComM\Implementation\ComM.c	  3776   *
; ..\component\ComM\Implementation\ComM.c	  3777   *
; ..\component\ComM\Implementation\ComM.c	  3778   *
; ..\component\ComM\Implementation\ComM.c	  3779   *
; ..\component\ComM\Implementation\ComM.c	  3780   *
; ..\component\ComM\Implementation\ComM.c	  3781   *
; ..\component\ComM\Implementation\ComM.c	  3782   */
; ..\component\ComM\Implementation\ComM.c	  3783  #if (COMM_INIT_POINTER_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3784  FUNC(void, COMM_CODE) ComM_Init(P2CONST(ComM_ConfigType, AUTOMATIC, COMM_INIT_DATA) ConfigPtr)
; ..\component\ComM\Implementation\ComM.c	  3785  #else
; ..\component\ComM\Implementation\ComM.c	  3786  FUNC(void, COMM_CODE) ComM_Init(void)
; Function ComM_Init
.L154:
ComM_Init:	.type	func

; ..\component\ComM\Implementation\ComM.c	  3787  #endif
; ..\component\ComM\Implementation\ComM.c	  3788  {
; ..\component\ComM\Implementation\ComM.c	  3789    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  3790    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  3791    uint8 ComM_ChannelIndex;
; ..\component\ComM\Implementation\ComM.c	  3792    ComM_SizeOfUserReqFullComType ComM_ByteIndex;
; ..\component\ComM\Implementation\ComM.c	  3793  
; ..\component\ComM\Implementation\ComM.c	  3794  #if ( (COMM_USERMODENOTIFUNC == STD_ON) || (COMM_FULL_COMM_REQUEST_NOTIF == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  3795    ComM_SizeOfUserType userIndex;
; ..\component\ComM\Implementation\ComM.c	  3796  #endif
; ..\component\ComM\Implementation\ComM.c	  3797  
; ..\component\ComM\Implementation\ComM.c	  3798  #if (COMM_NVM_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3799    NvM_RequestResultType requestResult = NVM_REQ_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  3800  #endif
; ..\component\ComM\Implementation\ComM.c	  3801  
; ..\component\ComM\Implementation\ComM.c	  3802  #if ( COMM_USE_INIT_POINTER == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3803    /* Avoid compiler from optimizing access to the PbData */
; ..\component\ComM\Implementation\ComM.c	  3804    ComM_ConfigPtr = ConfigPtr;
; ..\component\ComM\Implementation\ComM.c	  3805  #else
; ..\component\ComM\Implementation\ComM.c	  3806  # if (COMM_INIT_POINTER_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3807    /* In this case the init pointer is NULL because all variants have same configuration data, no error. */
; ..\component\ComM\Implementation\ComM.c	  3808    COMM_DUMMY_STATEMENT_CONST(ConfigPtr); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  3809  # endif
; ..\component\ComM\Implementation\ComM.c	  3810  #endif
; ..\component\ComM\Implementation\ComM.c	  3811  
; ..\component\ComM\Implementation\ComM.c	  3812    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  3813  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3814    /* #10 Check that module is not initialized. */
; ..\component\ComM\Implementation\ComM.c	  3815    if (ComM_InitStatus == COMM_INIT)
	movh.a	a2,#@his(ComM_InitStatus)
	lea	a2,[a2]@los(ComM_InitStatus)
	ld.bu	d15,[a2]
.L595:
	mov	d7,#0
.L534:
	jne	d15,#1,.L13
.L596:

; ..\component\ComM\Implementation\ComM.c	  3816    {
; ..\component\ComM\Implementation\ComM.c	  3817      errorId = COMM_E_ALREADY_INITIALIZED;
	mov	d7,#6
	j	.L14
.L13:

; ..\component\ComM\Implementation\ComM.c	  3818    } else
; ..\component\ComM\Implementation\ComM.c	  3819  #endif
; ..\component\ComM\Implementation\ComM.c	  3820  
; ..\component\ComM\Implementation\ComM.c	  3821  #if ( COMM_USE_INIT_POINTER == STD_ON ) /* Always check the init pointer if it is used. The only use-case when COMM_USE_INIT_POINTER == STD_OFF is when configuration data of all variants is the same. */
; ..\component\ComM\Implementation\ComM.c	  3822    /* #20 Check that configuration pointer is valid. */
; ..\component\ComM\Implementation\ComM.c	  3823    if( ConfigPtr == NULL_PTR )
; ..\component\ComM\Implementation\ComM.c	  3824    {
; ..\component\ComM\Implementation\ComM.c	  3825      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  3826  #  if ( COMM_USE_ECUM_BSW_ERROR_HOOK == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3827      EcuM_BswErrorHook((uint16) COMM_MODULE_ID, (uint8) ECUM_BSWERROR_NULLPTR);
; ..\component\ComM\Implementation\ComM.c	  3828  #  endif
; ..\component\ComM\Implementation\ComM.c	  3829    } else
; ..\component\ComM\Implementation\ComM.c	  3830  
; ..\component\ComM\Implementation\ComM.c	  3831  # if ( COMM_FINALMAGICNUMBER == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3832    /* #30 Check the magic number. */  /* SPEC-35483 */
; ..\component\ComM\Implementation\ComM.c	  3833    if (ComM_GetFinalMagicNumber() != COMM_FINAL_MAGIC_NUMBER) /* COV_COMM_MAGICNUMBER_CHECK */
; ..\component\ComM\Implementation\ComM.c	  3834    {
; ..\component\ComM\Implementation\ComM.c	  3835      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  3836      EcuM_BswErrorHook((uint16) COMM_MODULE_ID, (uint8) ECUM_BSWERROR_MAGICNUMBER);
; ..\component\ComM\Implementation\ComM.c	  3837    } else
; ..\component\ComM\Implementation\ComM.c	  3838  # endif /* COMM_FINALMAGICNUMBER == STD_ON */
; ..\component\ComM\Implementation\ComM.c	  3839  #endif /* COMM_USE_INIT_POINTER == STD_ON */
; ..\component\ComM\Implementation\ComM.c	  3840    {
; ..\component\ComM\Implementation\ComM.c	  3841      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  3842      /* #40 Restore the NvM data. */
; ..\component\ComM\Implementation\ComM.c	  3843  #if (COMM_NVM_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3844      if( NvM_GetErrorStatus((NvM_BlockIdType)COMM_NVM_BLOCK_ID, &requestResult) != E_OK ) /* SBSW_COMM_CALL_WITH_PTR_TO_LOCAL_VARIABLE */
; ..\component\ComM\Implementation\ComM.c	  3845      {
; ..\component\ComM\Implementation\ComM.c	  3846        errorId = COMM_E_ERROR_IN_PROV_SERVICE;
; ..\component\ComM\Implementation\ComM.c	  3847      }
; ..\component\ComM\Implementation\ComM.c	  3848  
; ..\component\ComM\Implementation\ComM.c	  3849      if(requestResult != NVM_REQ_OK) /* The last NvM read request has failed, initialize with configured data. */
; ..\component\ComM\Implementation\ComM.c	  3850  #endif
; ..\component\ComM\Implementation\ComM.c	  3851      {
; ..\component\ComM\Implementation\ComM.c	  3852        ComM_Inhibition.ComM_ECUGroupClassification = ComM_ECUGroupClassInit;  /* initialize the ECU group classification with the configured value */
	movh.a	a15,#@his(ComM_Inhibition)
	lea	a15,[a15]@los(ComM_Inhibition)
.L597:
	movh.a	a4,#@his(ComM_ECUGroupClassInit)
	ld.bu	d15,[a4]@los(ComM_ECUGroupClassInit)
.L598:
	st.b	[a15],d15
.L599:

; ..\component\ComM\Implementation\ComM.c	  3853        ComM_Inhibition.ComM_InhibitCnt             = 0x00u;                   /* reset the inhibition counter */
	mov	d15,#0
	st.h	[a15]2,d15
.L600:

; ..\component\ComM\Implementation\ComM.c	  3854      }
; ..\component\ComM\Implementation\ComM.c	  3855  
; ..\component\ComM\Implementation\ComM.c	  3856      /* #50 Initialize ComM variables. */
; ..\component\ComM\Implementation\ComM.c	  3857  #if ( COMM_FULL_COMM_REQUEST_NOTIF == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3858      ComM_CurrentChannelRequestInit();
; ..\component\ComM\Implementation\ComM.c	  3859  
; ..\component\ComM\Implementation\ComM.c	  3860      for( userIndex = 0u; userIndex < ComM_GetSizeOfFullComRequesters(); userIndex++)
; ..\component\ComM\Implementation\ComM.c	  3861      {
; ..\component\ComM\Implementation\ComM.c	  3862        ComM_SetFullComRequesters(userIndex, 0xffu);                                /* SBSW_COMM_CSL01 */
; ..\component\ComM\Implementation\ComM.c	  3863      }
; ..\component\ComM\Implementation\ComM.c	  3864  #endif
; ..\component\ComM\Implementation\ComM.c	  3865  
; ..\component\ComM\Implementation\ComM.c	  3866  #if ( COMM_USERMODENOTIFUNC == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3867      for( userIndex = 0u; userIndex < ComM_GetSizeOfUser(); userIndex++)
; ..\component\ComM\Implementation\ComM.c	  3868      {
; ..\component\ComM\Implementation\ComM.c	  3869        ComM_SetLastStateChange(userIndex, COMM_NO_COMMUNICATION);                  /* SBSW_COMM_USER_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3870      }
; ..\component\ComM\Implementation\ComM.c	  3871  #endif
; ..\component\ComM\Implementation\ComM.c	  3872  
; ..\component\ComM\Implementation\ComM.c	  3873      for(ComM_ChannelIndex = 0u; ComM_ChannelIndex < ComM_GetSizeOfChannel(); ComM_ChannelIndex++)
; ..\component\ComM\Implementation\ComM.c	  3874      {
; ..\component\ComM\Implementation\ComM.c	  3875        ComM_BusComModeReq[ComM_ChannelIndex] = COMM_NO_COM_NO_PENDING_REQUEST;     /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3876  
; ..\component\ComM\Implementation\ComM.c	  3877  #if ( COMM_EXISTS_LINSLAVE_NMTYPEOFCHANNEL == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3878        ComM_SetBusSleepModeIndicated(ComM_ChannelIndex, FALSE); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3879  #endif
; ..\component\ComM\Implementation\ComM.c	  3880  
; ..\component\ComM\Implementation\ComM.c	  3881  #if( COMM_BUS_TYPE_FR_PRESENT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  3882        ComM_BusComModeReqFrShutdown[ComM_ChannelIndex] = COMM_NO_COM_NO_PENDING_REQUEST;  /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3883        ComM_FrShutdown[ComM_ChannelIndex] = FALSE;                                 /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3884  #endif
; ..\component\ComM\Implementation\ComM.c	  3885  
; ..\component\ComM\Implementation\ComM.c	  3886        ComM_ActiveComMode[ComM_ChannelIndex] = COMM_NO_COM_NO_PENDING_REQUEST;     /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3887        ComM_BusSmState[ComM_ChannelIndex] = COMM_NO_COMMUNICATION;                 /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3888  
; ..\component\ComM\Implementation\ComM.c	  3889  #if (COMM_MINFULLCOMTIMEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3890        ComM_SetMinFullComModeTimer(ComM_ChannelIndex, 0x00u);                      /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3891  #endif
; ..\component\ComM\Implementation\ComM.c	  3892  
; ..\component\ComM\Implementation\ComM.c	  3893  #if ((COMM_NMLIGHTDURATIONOFCHANNEL == STD_ON) || (COMM_NMLIGHTSILENTDURATIONOFCHANNEL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  3894        ComM_SetNmLightTimer(ComM_ChannelIndex, 0x00u);                             /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3895  #endif
; ..\component\ComM\Implementation\ComM.c	  3896  
; ..\component\ComM\Implementation\ComM.c	  3897        ComM_ComAllowed[ComM_ChannelIndex] = FALSE;                                 /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3898  
; ..\component\ComM\Implementation\ComM.c	  3899  #if ((COMM_DCM_INDICATION) && (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  3900        ComM_SetDcmRequestActive(ComM_ChannelIndex, FALSE);                         /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  3901  #endif
; ..\component\ComM\Implementation\ComM.c	  3902  
; ..\component\ComM\Implementation\ComM.c	  3903  #if (COMM_USERMODENOTIFUNC == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3904  # if (COMM_USERMODENOTIFUNC_PNC_USER_ONLY == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  3905        ComM_StateChange[ComM_ChannelIndex] = COMM_NO_STATE_CHANGE;                 /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3906  # endif
; ..\component\ComM\Implementation\ComM.c	  3907  #endif
; ..\component\ComM\Implementation\ComM.c	  3908  
; ..\component\ComM\Implementation\ComM.c	  3909  #if (COMM_NVM_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3910        if(requestResult == NVM_REQ_OK)
; ..\component\ComM\Implementation\ComM.c	  3911        {
; ..\component\ComM\Implementation\ComM.c	  3912          /* Successfully restored non-volatile data, ComM_InhibitionStatus[] now contains the restored status of Wake-up Inhibition.
; ..\component\ComM\Implementation\ComM.c	  3913          * Now add the configured value of ComMNoCom (No Com Mode Limitation) which is not stored non-volatile. */
; ..\component\ComM\Implementation\ComM.c	  3914          ComM_Inhibition.ComM_InhibitionStatus[ComM_ChannelIndex] |= (uint8)(ComM_GetInhibitionInitValueOfChannel(ComM_ChannelIndex) & COMM_WAKEUP_INHIBITION_CLEAR_MASK); /* PRQA S 2985 */ /* MD_ComM_2985 */ /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3915        }
; ..\component\ComM\Implementation\ComM.c	  3916        else
; ..\component\ComM\Implementation\ComM.c	  3917  #endif
; ..\component\ComM\Implementation\ComM.c	  3918        {
; ..\component\ComM\Implementation\ComM.c	  3919          /* Mode Limitation and Wake-up Inhibition are disabled or couldn't restore non-volatile data, initialize with configured values. */
; ..\component\ComM\Implementation\ComM.c	  3920          ComM_Inhibition.ComM_InhibitionStatus[ComM_ChannelIndex] = ComM_GetInhibitionInitValueOfChannel(ComM_ChannelIndex); /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  3921        }
; ..\component\ComM\Implementation\ComM.c	  3922      }
; ..\component\ComM\Implementation\ComM.c	  3923  
; ..\component\ComM\Implementation\ComM.c	  3924      for(ComM_ByteIndex = 0u; ComM_ByteIndex < ComM_GetSizeOfUserReqFullCom(); ComM_ByteIndex++)
	st.b	[a15]4,d15
.L601:
	movh.a	a15,#@his(ComM_ComAllowed)
.L602:
	st.b	[a15]@los(ComM_ComAllowed),d15
.L603:
	movh.a	a15,#@his(ComM_BusSmState)
.L604:
	st.b	[a15]@los(ComM_BusSmState),d15
.L605:
	movh.a	a15,#@his(ComM_ActiveComMode)
.L606:
	st.b	[a15]@los(ComM_ActiveComMode),d15
.L607:
	movh.a	a15,#@his(ComM_BusComModeReq)
.L608:
	st.b	[a15]@los(ComM_BusComModeReq),d15
.L609:

; ..\component\ComM\Implementation\ComM.c	  3925      {
; ..\component\ComM\Implementation\ComM.c	  3926        ComM_SetUserReqFullCom(ComM_ByteIndex, COMM_NO_REQUESTS);            /* SBSW_COMM_CSL01 */
	movh.a	a15,#@his(ComM_UserReqFullCom)
.L610:

; ..\component\ComM\Implementation\ComM.c	  3927      }
; ..\component\ComM\Implementation\ComM.c	  3928  
; ..\component\ComM\Implementation\ComM.c	  3929  #if (COMM_NVM_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3930      ComM_NvMStoreReq = FALSE;
; ..\component\ComM\Implementation\ComM.c	  3931  # endif
; ..\component\ComM\Implementation\ComM.c	  3932  
; ..\component\ComM\Implementation\ComM.c	  3933  #if (COMM_BUS_TYPE_INTERNAL_PRESENT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3934      ComM_InitInternalBusSMMode();
; ..\component\ComM\Implementation\ComM.c	  3935  #endif
; ..\component\ComM\Implementation\ComM.c	  3936  
; ..\component\ComM\Implementation\ComM.c	  3937  #if (COMM_PNC_SUPPORT)
; ..\component\ComM\Implementation\ComM.c	  3938      ComM_PncInit();
; ..\component\ComM\Implementation\ComM.c	  3939  #endif
; ..\component\ComM\Implementation\ComM.c	  3940  
; ..\component\ComM\Implementation\ComM.c	  3941      /* #60 Check generated data and if successful set the initialization status to initialized. */
; ..\component\ComM\Implementation\ComM.c	  3942  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3943      if (ComM_InitCheckGeneratedData() == COMM_E_NO_ERROR) /* COV_COMM_GENDATA_CHECK */ /* PRQA S 2995, 2991 */ /* MD_ComM_2995_2991 */
; ..\component\ComM\Implementation\ComM.c	  3944  #endif
; ..\component\ComM\Implementation\ComM.c	  3945      {
; ..\component\ComM\Implementation\ComM.c	  3946        ComM_InitStatus = COMM_INIT;
	st.b	[a15]@los(ComM_UserReqFullCom),d15
.L611:
	mov	d15,#1
	st.b	[a2],d15
.L14:

; ..\component\ComM\Implementation\ComM.c	  3947      }
; ..\component\ComM\Implementation\ComM.c	  3948    }
; ..\component\ComM\Implementation\ComM.c	  3949  
; ..\component\ComM\Implementation\ComM.c	  3950    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  3951  #if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3952    if (errorId != COMM_E_NO_ERROR)
	jeq	d7,#0,.L15
.L612:

; ..\component\ComM\Implementation\ComM.c	  3953    {
; ..\component\ComM\Implementation\ComM.c	  3954      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_INIT, errorId );
	fcall	.cocofun_2
.L613:
	mov	d6,#1
.L614:
	j	Det_ReportError
.L15:

; ..\component\ComM\Implementation\ComM.c	  3955    }
; ..\component\ComM\Implementation\ComM.c	  3956  # else
; ..\component\ComM\Implementation\ComM.c	  3957    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  3958  # endif
; ..\component\ComM\Implementation\ComM.c	  3959  
; ..\component\ComM\Implementation\ComM.c	  3960  } /* PRQA S 6010, 6030, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STMIF */
	ret
.L400:
	
__ComM_Init_function_end:
	.size	ComM_Init,__ComM_Init_function_end-ComM_Init
.L212:
	; End of function
	
	.sdecl	'.text.ComM.ComM_DeInit',code,cluster('ComM_DeInit')
	.sect	'.text.ComM.ComM_DeInit'
	.align	2
	
	.global	ComM_DeInit

; ..\component\ComM\Implementation\ComM.c	  3961  
; ..\component\ComM\Implementation\ComM.c	  3962  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  3963  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  3964   *  ComM_InitCheckGeneratedData()
; ..\component\ComM\Implementation\ComM.c	  3965   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  3966  /*!
; ..\component\ComM\Implementation\ComM.c	  3967   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  3968   *
; ..\component\ComM\Implementation\ComM.c	  3969   *
; ..\component\ComM\Implementation\ComM.c	  3970   */
; ..\component\ComM\Implementation\ComM.c	  3971  COMM_LOCAL_INLINE FUNC(uint8, COMM_CODE) ComM_InitCheckGeneratedData(void)
; ..\component\ComM\Implementation\ComM.c	  3972  {
; ..\component\ComM\Implementation\ComM.c	  3973    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  3974    ComM_ChannelIterType channelIndex;
; ..\component\ComM\Implementation\ComM.c	  3975    uint8 sizeOfChannel = ComM_GetSizeOfChannel();
; ..\component\ComM\Implementation\ComM.c	  3976  # if (COMM_PNC_SUPPORT)
; ..\component\ComM\Implementation\ComM.c	  3977    uint16 sizeOfPnc = ComM_GetSizeOfPnc();
; ..\component\ComM\Implementation\ComM.c	  3978  # endif
; ..\component\ComM\Implementation\ComM.c	  3979  
; ..\component\ComM\Implementation\ComM.c	  3980    if (sizeOfChannel != ComM_GetSizeOfChannelPb())  /* PRQA S 2996, 2992 */ /* MD_ComM_2996_2992 */ /* COV_COMM_GENDATA_CHECK */ /*lint !e506 */
; ..\component\ComM\Implementation\ComM.c	  3981    {
; ..\component\ComM\Implementation\ComM.c	  3982      errorId = COMM_E_WRONG_GENERATED_DATA; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\ComM\Implementation\ComM.c	  3983    }
; ..\component\ComM\Implementation\ComM.c	  3984  # if (COMM_PNC_SUPPORT)
; ..\component\ComM\Implementation\ComM.c	  3985    else if (sizeOfPnc != ComM_GetSizeOfPncPb()) /* PRQA S 2996, 2992 */ /* MD_ComM_2996_2992 */ /* COV_COMM_GENDATA_CHECK */ /*lint !e506 */
; ..\component\ComM\Implementation\ComM.c	  3986    {
; ..\component\ComM\Implementation\ComM.c	  3987      errorId = COMM_E_WRONG_GENERATED_DATA; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\ComM\Implementation\ComM.c	  3988    }
; ..\component\ComM\Implementation\ComM.c	  3989  # endif
; ..\component\ComM\Implementation\ComM.c	  3990    else
; ..\component\ComM\Implementation\ComM.c	  3991    {
; ..\component\ComM\Implementation\ComM.c	  3992      for (channelIndex = 0u; channelIndex < ComM_GetSizeOfChannel(); channelIndex++)
; ..\component\ComM\Implementation\ComM.c	  3993      {
; ..\component\ComM\Implementation\ComM.c	  3994        uint8 maxNumberOfStates = ComM_GetWakeupStateOfChannel(channelIndex);
; ..\component\ComM\Implementation\ComM.c	  3995        /* Check the target wake-up state of the channel because it is used as index in ComM_TransitionFctTable */
; ..\component\ComM\Implementation\ComM.c	  3996        if (maxNumberOfStates >= COMM_MAX_NUMBER_OF_STATES) /* COV_COMM_GENDATA_CHECK */ /* PRQA S 2996, 2992 */ /* MD_ComM_2996_2992 */ /*lint !e506 */
; ..\component\ComM\Implementation\ComM.c	  3997        {
; ..\component\ComM\Implementation\ComM.c	  3998          errorId = COMM_E_WRONG_GENERATED_DATA; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\ComM\Implementation\ComM.c	  3999          break;
; ..\component\ComM\Implementation\ComM.c	  4000        }
; ..\component\ComM\Implementation\ComM.c	  4001      }
; ..\component\ComM\Implementation\ComM.c	  4002    }
; ..\component\ComM\Implementation\ComM.c	  4003  
; ..\component\ComM\Implementation\ComM.c	  4004    return errorId;
; ..\component\ComM\Implementation\ComM.c	  4005  }
; ..\component\ComM\Implementation\ComM.c	  4006  #endif
; ..\component\ComM\Implementation\ComM.c	  4007  
; ..\component\ComM\Implementation\ComM.c	  4008  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4009  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4010   *  ComM_PncInit()
; ..\component\ComM\Implementation\ComM.c	  4011   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4012  /*!
; ..\component\ComM\Implementation\ComM.c	  4013   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4014   *
; ..\component\ComM\Implementation\ComM.c	  4015   *
; ..\component\ComM\Implementation\ComM.c	  4016   *
; ..\component\ComM\Implementation\ComM.c	  4017   *
; ..\component\ComM\Implementation\ComM.c	  4018   */
; ..\component\ComM\Implementation\ComM.c	  4019  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_PncInit(void)
; ..\component\ComM\Implementation\ComM.c	  4020  {
; ..\component\ComM\Implementation\ComM.c	  4021    ComM_UserReqPncFullComIterType userReqPncFullComIndex;
; ..\component\ComM\Implementation\ComM.c	  4022    ComM_PncIterType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  4023    ComM_PncSignalValuesIterType pncSignalValueIndex;
; ..\component\ComM\Implementation\ComM.c	  4024  
; ..\component\ComM\Implementation\ComM.c	  4025  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4026    ComM_ChannelIterType channelIndex;
; ..\component\ComM\Implementation\ComM.c	  4027    ComM_PncLimitationIterType pncLimitationIndex;
; ..\component\ComM\Implementation\ComM.c	  4028  # endif
; ..\component\ComM\Implementation\ComM.c	  4029  
; ..\component\ComM\Implementation\ComM.c	  4030    /* #10 Initialize all PNC related data. */
; ..\component\ComM\Implementation\ComM.c	  4031    for (userReqPncFullComIndex = 0u; userReqPncFullComIndex < ComM_GetSizeOfUserReqPncFullCom(); userReqPncFullComIndex++)
; ..\component\ComM\Implementation\ComM.c	  4032    {
; ..\component\ComM\Implementation\ComM.c	  4033      ComM_SetUserReqPncFullCom(userReqPncFullComIndex, COMM_NO_REQUESTS); /* SBSW_COMM_CSL01 */
; ..\component\ComM\Implementation\ComM.c	  4034    }
; ..\component\ComM\Implementation\ComM.c	  4035  
; ..\component\ComM\Implementation\ComM.c	  4036    for (pncIndex = 0u; pncIndex < ComM_GetSizeOfPnc(); pncIndex++)
; ..\component\ComM\Implementation\ComM.c	  4037    {
; ..\component\ComM\Implementation\ComM.c	  4038      ComM_SetPncPSleepTimer(pncIndex, 0x00u); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  4039      ComM_SetActivePncComMode(pncIndex, COMM_PNC_NO_COMMUNICATION); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  4040      ComM_SetBusPncComModeReq(pncIndex, COMM_PNC_NO_COMMUNICATION); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  4041    }
; ..\component\ComM\Implementation\ComM.c	  4042  
; ..\component\ComM\Implementation\ComM.c	  4043    /* #20 Clear stored signal values (EIRA_RX, ERA_RX, EIRA_TX) */
; ..\component\ComM\Implementation\ComM.c	  4044    for (pncSignalValueIndex = 0u; pncSignalValueIndex < ComM_GetSizeOfPncSignalValues(); pncSignalValueIndex++)
; ..\component\ComM\Implementation\ComM.c	  4045    {
; ..\component\ComM\Implementation\ComM.c	  4046      ComM_SetPncSignalValues(pncSignalValueIndex, 0x00); /* SBSW_COMM_CSL01 */
; ..\component\ComM\Implementation\ComM.c	  4047    }
; ..\component\ComM\Implementation\ComM.c	  4048  
; ..\component\ComM\Implementation\ComM.c	  4049    /* #30 If PNC Routing Limitation is enabled, set channel status to not limited. */
; ..\component\ComM\Implementation\ComM.c	  4050  # if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4051    for (channelIndex = 0u; channelIndex < ComM_GetSizeOfChannel(); channelIndex++)
; ..\component\ComM\Implementation\ComM.c	  4052    {
; ..\component\ComM\Implementation\ComM.c	  4053      ComM_PncToChannelRoutingState[channelIndex] = COMM_PNCROUTING_NOT_LIMITED; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4054    }
; ..\component\ComM\Implementation\ComM.c	  4055  
; ..\component\ComM\Implementation\ComM.c	  4056    for (pncLimitationIndex = 0u; pncLimitationIndex < ComM_GetSizeOfPncLimitation(); pncLimitationIndex++)
; ..\component\ComM\Implementation\ComM.c	  4057    {
; ..\component\ComM\Implementation\ComM.c	  4058      ComM_SetPncLimitation(pncLimitationIndex, (uint8)0x00u); /* SBSW_COMM_CSL01 */
; ..\component\ComM\Implementation\ComM.c	  4059    }
; ..\component\ComM\Implementation\ComM.c	  4060  # endif
; ..\component\ComM\Implementation\ComM.c	  4061  
; ..\component\ComM\Implementation\ComM.c	  4062  # if (COMM_USERMODENOTIFUNC == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4063    ComM_NotifyPncStateChange = FALSE;
; ..\component\ComM\Implementation\ComM.c	  4064  # endif
; ..\component\ComM\Implementation\ComM.c	  4065  } /* PRQA S 6010, 6080 */ /* MD_MSR_STPTH, MD_MSR_STMIF */
; ..\component\ComM\Implementation\ComM.c	  4066  #endif /* COMM_PNC_SUPPORT == STD_ON */
; ..\component\ComM\Implementation\ComM.c	  4067  
; ..\component\ComM\Implementation\ComM.c	  4068  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4069   *  ComM_DeInit()
; ..\component\ComM\Implementation\ComM.c	  4070   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4071  /*!
; ..\component\ComM\Implementation\ComM.c	  4072   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4073   *
; ..\component\ComM\Implementation\ComM.c	  4074   *
; ..\component\ComM\Implementation\ComM.c	  4075   *
; ..\component\ComM\Implementation\ComM.c	  4076   *
; ..\component\ComM\Implementation\ComM.c	  4077   *
; ..\component\ComM\Implementation\ComM.c	  4078   *
; ..\component\ComM\Implementation\ComM.c	  4079   */
; ..\component\ComM\Implementation\ComM.c	  4080  FUNC(void, COMM_CODE) ComM_DeInit(void)
; Function ComM_DeInit
.L156:
ComM_DeInit:	.type	func

; ..\component\ComM\Implementation\ComM.c	  4081  {
; ..\component\ComM\Implementation\ComM.c	  4082    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4083    ComM_ChannelIterType channelIndex;
; ..\component\ComM\Implementation\ComM.c	  4084    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  4085  
; ..\component\ComM\Implementation\ComM.c	  4086    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4087    /* #10 No parameter checks are needed */
; ..\component\ComM\Implementation\ComM.c	  4088  
; ..\component\ComM\Implementation\ComM.c	  4089    /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4090    /* #20 Trigger storage of non-volatile values. Only store the Wake-up Inhibition bit, clear the No Com Mode Limitation bit,
; ..\component\ComM\Implementation\ComM.c	  4091     *     it shall not be stored to NvM. */
; ..\component\ComM\Implementation\ComM.c	  4092  #if (COMM_NVM_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4093    if(ComM_NvMStoreReq == TRUE)
; ..\component\ComM\Implementation\ComM.c	  4094    {
; ..\component\ComM\Implementation\ComM.c	  4095      for(channelIndex = 0; channelIndex < ComM_GetSizeOfChannel(); channelIndex++)
; ..\component\ComM\Implementation\ComM.c	  4096      {
; ..\component\ComM\Implementation\ComM.c	  4097        ComM_Inhibition.ComM_InhibitionStatus[channelIndex] &= COMM_WAKEUP_INHIBITION_MASK; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4098      }
; ..\component\ComM\Implementation\ComM.c	  4099  
; ..\component\ComM\Implementation\ComM.c	  4100      if( NvM_SetRamBlockStatus((NvM_BlockIdType)COMM_NVM_BLOCK_ID, TRUE) != E_OK )
; ..\component\ComM\Implementation\ComM.c	  4101      {
; ..\component\ComM\Implementation\ComM.c	  4102        errorId = COMM_E_ERROR_IN_PROV_SERVICE;
; ..\component\ComM\Implementation\ComM.c	  4103      }
; ..\component\ComM\Implementation\ComM.c	  4104  
; ..\component\ComM\Implementation\ComM.c	  4105      ComM_NvMStoreReq = FALSE;
; ..\component\ComM\Implementation\ComM.c	  4106    }
; ..\component\ComM\Implementation\ComM.c	  4107  #endif
; ..\component\ComM\Implementation\ComM.c	  4108  
; ..\component\ComM\Implementation\ComM.c	  4109    /* #30 Iterate over the channels and check if all are in state COMM_NO_COM_NO_PENDING_REQUEST.
; ..\component\ComM\Implementation\ComM.c	  4110     *     If so, set the initialization status to COMM_UNINIT. */
; ..\component\ComM\Implementation\ComM.c	  4111    for(channelIndex = 0; channelIndex < ComM_GetSizeOfChannel(); channelIndex++)
; ..\component\ComM\Implementation\ComM.c	  4112    {
; ..\component\ComM\Implementation\ComM.c	  4113      if(ComM_ActiveComMode[channelIndex] != COMM_NO_COM_NO_PENDING_REQUEST)
	movh.a	a15,#@his(ComM_ActiveComMode)
.L625:
	ld.bu	d15,[a15]@los(ComM_ActiveComMode)
.L626:

; ..\component\ComM\Implementation\ComM.c	  4114      {
; ..\component\ComM\Implementation\ComM.c	  4115        break; /* De-Initialization impossible */
; ..\component\ComM\Implementation\ComM.c	  4116      }
; ..\component\ComM\Implementation\ComM.c	  4117    }
; ..\component\ComM\Implementation\ComM.c	  4118  
; ..\component\ComM\Implementation\ComM.c	  4119    if(channelIndex == ComM_GetSizeOfChannel()) /* All channels are in state COMM_NO_COM_NO_PENDING_REQUEST because break above was not reached */
	jne	d15,#0,.L16
.L627:

; ..\component\ComM\Implementation\ComM.c	  4120    {
; ..\component\ComM\Implementation\ComM.c	  4121      ComM_InitMemory();
	j	ComM_InitMemory
.L16:

; ..\component\ComM\Implementation\ComM.c	  4122    }
; ..\component\ComM\Implementation\ComM.c	  4123  
; ..\component\ComM\Implementation\ComM.c	  4124    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4125  #if ((COMM_DEV_ERROR_REPORT == STD_ON) && (COMM_NVM_SUPPORT == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  4126    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  4127    {
; ..\component\ComM\Implementation\ComM.c	  4128      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_DEINIT, errorId );
; ..\component\ComM\Implementation\ComM.c	  4129    }
; ..\component\ComM\Implementation\ComM.c	  4130  #else
; ..\component\ComM\Implementation\ComM.c	  4131    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4132  #endif
; ..\component\ComM\Implementation\ComM.c	  4133  }
	ret
.L403:
	
__ComM_DeInit_function_end:
	.size	ComM_DeInit,__ComM_DeInit_function_end-ComM_DeInit
.L222:
	; End of function
	
	.sdecl	'.text.ComM.ComM_InitMemory',code,cluster('ComM_InitMemory')
	.sect	'.text.ComM.ComM_InitMemory'
	.align	2
	
	.global	ComM_InitMemory

; ..\component\ComM\Implementation\ComM.c	  4134  
; ..\component\ComM\Implementation\ComM.c	  4135  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4136   *  ComM_InitMemory()
; ..\component\ComM\Implementation\ComM.c	  4137   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4138  /*!
; ..\component\ComM\Implementation\ComM.c	  4139   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4140   *
; ..\component\ComM\Implementation\ComM.c	  4141   *
; ..\component\ComM\Implementation\ComM.c	  4142   */
; ..\component\ComM\Implementation\ComM.c	  4143  FUNC(void, COMM_CODE) ComM_InitMemory(void)
; Function ComM_InitMemory
.L158:
ComM_InitMemory:	.type	func

; ..\component\ComM\Implementation\ComM.c	  4144  {
; ..\component\ComM\Implementation\ComM.c	  4145    /* #10 Set initialization status of ComM to COMM_UNINIT */
; ..\component\ComM\Implementation\ComM.c	  4146    ComM_InitStatus = COMM_UNINIT;
	movh.a	a15,#@his(ComM_InitStatus)
.L619:
	mov	d15,#0
	st.b	[a15]@los(ComM_InitStatus),d15
.L620:

; ..\component\ComM\Implementation\ComM.c	  4147  #if (COMM_USE_INIT_POINTER == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4148    ComM_ConfigPtr = NULL_PTR;
; ..\component\ComM\Implementation\ComM.c	  4149  #endif
; ..\component\ComM\Implementation\ComM.c	  4150  }
	ret
.L402:
	
__ComM_InitMemory_function_end:
	.size	ComM_InitMemory,__ComM_InitMemory_function_end-ComM_InitMemory
.L217:
	; End of function
	
	.sdecl	'.text.ComM.ComM_GetState',code,cluster('ComM_GetState')
	.sect	'.text.ComM.ComM_GetState'
	.align	2
	
	.global	ComM_GetState

; ..\component\ComM\Implementation\ComM.c	  4151  
; ..\component\ComM\Implementation\ComM.c	  4152  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4153   *  ComM_GetState()
; ..\component\ComM\Implementation\ComM.c	  4154   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4155  /*!
; ..\component\ComM\Implementation\ComM.c	  4156   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4157   *
; ..\component\ComM\Implementation\ComM.c	  4158   *
; ..\component\ComM\Implementation\ComM.c	  4159   *
; ..\component\ComM\Implementation\ComM.c	  4160   *
; ..\component\ComM\Implementation\ComM.c	  4161   *
; ..\component\ComM\Implementation\ComM.c	  4162   *
; ..\component\ComM\Implementation\ComM.c	  4163   *
; ..\component\ComM\Implementation\ComM.c	  4164   *
; ..\component\ComM\Implementation\ComM.c	  4165   *
; ..\component\ComM\Implementation\ComM.c	  4166   *
; ..\component\ComM\Implementation\ComM.c	  4167   */
; ..\component\ComM\Implementation\ComM.c	  4168  FUNC(Std_ReturnType, COMM_CODE) ComM_GetState( NetworkHandleType Channel, P2VAR(ComM_StateType, AUTOMATIC, COMM_APPL_VAR) State)
; Function ComM_GetState
.L160:
ComM_GetState:	.type	func
	fcall	.cocofun_3
.L537:

; ..\component\ComM\Implementation\ComM.c	  4169  {
; ..\component\ComM\Implementation\ComM.c	  4170    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4171    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  4172    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  4173  
; ..\component\ComM\Implementation\ComM.c	  4174    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4175  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4176    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  4177    retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  4178    if (ComM_InitStatus != COMM_INIT)
	jeq	d15,#1,.L17
.L639:

; ..\component\ComM\Implementation\ComM.c	  4179    {
; ..\component\ComM\Implementation\ComM.c	  4180      errorId = COMM_E_NOT_INITED;
	mov	d8,d9
.L640:

; ..\component\ComM\Implementation\ComM.c	  4181      retVal = COMM_E_UNINIT;
	mov	d9,#3
	j	.L18
.L17:

; ..\component\ComM\Implementation\ComM.c	  4182    }
; ..\component\ComM\Implementation\ComM.c	  4183    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  4184    else if ((Channel >= COMM_ACTIVE_CHANNEL)
	jne	d4,#0,.L19
.L641:

; ..\component\ComM\Implementation\ComM.c	  4185  # if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4186     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  4187  # endif
; ..\component\ComM\Implementation\ComM.c	  4188         )
; ..\component\ComM\Implementation\ComM.c	  4189    {
; ..\component\ComM\Implementation\ComM.c	  4190      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  4191    }
; ..\component\ComM\Implementation\ComM.c	  4192    /* #30 Check parameter 'State': it must be a valid pointer. */
; ..\component\ComM\Implementation\ComM.c	  4193    else if (State == NULL_PTR)
	jnz.a	a15,.L20
.L19:

; ..\component\ComM\Implementation\ComM.c	  4194    {
; ..\component\ComM\Implementation\ComM.c	  4195      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d8,#2
	j	.L21
.L20:

; ..\component\ComM\Implementation\ComM.c	  4196    }
; ..\component\ComM\Implementation\ComM.c	  4197    else
; ..\component\ComM\Implementation\ComM.c	  4198  #endif
; ..\component\ComM\Implementation\ComM.c	  4199    {
; ..\component\ComM\Implementation\ComM.c	  4200      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4201      /* #40 If parameter checks are successful, store the current active state of the channel by default. */
; ..\component\ComM\Implementation\ComM.c	  4202      *State = ComM_ActiveComMode[Channel]; /* SBSW_COMM_PARAMETER_PTR_WRITE */
	movh.a	a2,#@his(ComM_ActiveComMode)
.L642:
	ld.bu	d15,[a2]@los(ComM_ActiveComMode)
.L643:
	st.b	[a15],d15
.L644:

; ..\component\ComM\Implementation\ComM.c	  4203  
; ..\component\ComM\Implementation\ComM.c	  4204      /* #50 If the active state is COMM_NO_COM_NO_PENDING_REQUEST and there is a pending request (external or internal),
; ..\component\ComM\Implementation\ComM.c	  4205       *     the current state depends on Extended RAM Check functionality:
; ..\component\ComM\Implementation\ComM.c	  4206       *     1) if Extended RAM Check functionality is used, the ComM channel is allowed to enter COMM_NO_COM_REQUEST_PENDING state depending on the check result.
; ..\component\ComM\Implementation\ComM.c	  4207       *     2) if Extended RAM Check functionality is not used, store COMM_NO_COM_REQUEST_PENDING.
; ..\component\ComM\Implementation\ComM.c	  4208       *     Note: COMM_NO_COM_REQUEST_PENDING ensures that the request can be considered and ECU stays in RUN mode. */
; ..\component\ComM\Implementation\ComM.c	  4209      if (ComM_ActiveComMode[Channel] == COMM_NO_COM_NO_PENDING_REQUEST)
	jne	d15,#0,.L22
.L645:

; ..\component\ComM\Implementation\ComM.c	  4210      {
; ..\component\ComM\Implementation\ComM.c	  4211        if (ComM_ChannelIsRequestPending(Channel) == TRUE)
	call	ComM_ChannelIsRequestPending
.L538:
	jeq	d2,#0,.L23
.L646:

; ..\component\ComM\Implementation\ComM.c	  4212        {
; ..\component\ComM\Implementation\ComM.c	  4213  #if (COMM_EXTENDED_RAM_CHECK == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4214          *State = ComM_ChannelGetMaxStateAfterExtRamCheck( Channel, COMM_NO_COM_REQUEST_PENDING ); /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4215  #else
; ..\component\ComM\Implementation\ComM.c	  4216          *State = COMM_NO_COM_REQUEST_PENDING; /* SBSW_COMM_PARAMETER_PTR_WRITE */
	mov	d15,#1
	st.b	[a15],d15
.L23:
.L22:

; ..\component\ComM\Implementation\ComM.c	  4217  #endif
; ..\component\ComM\Implementation\ComM.c	  4218        }
; ..\component\ComM\Implementation\ComM.c	  4219      }
; ..\component\ComM\Implementation\ComM.c	  4220  
; ..\component\ComM\Implementation\ComM.c	  4221      retVal = E_OK;
	mov	d9,#0
.L21:
.L18:

; ..\component\ComM\Implementation\ComM.c	  4222    }
; ..\component\ComM\Implementation\ComM.c	  4223  
; ..\component\ComM\Implementation\ComM.c	  4224    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4225  #if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4226    if (errorId != COMM_E_NO_ERROR)
	jeq	d8,#0,.L24
.L647:

; ..\component\ComM\Implementation\ComM.c	  4227    {
; ..\component\ComM\Implementation\ComM.c	  4228      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_GETSTATE, errorId );
	fcall	.cocofun_2
.L648:
	mov	d6,#57
.L649:
	mov	d7,d8
	call	Det_ReportError
.L24:

; ..\component\ComM\Implementation\ComM.c	  4229    }
; ..\component\ComM\Implementation\ComM.c	  4230  #else
; ..\component\ComM\Implementation\ComM.c	  4231    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4232  #endif
; ..\component\ComM\Implementation\ComM.c	  4233  
; ..\component\ComM\Implementation\ComM.c	  4234    return retVal;
; ..\component\ComM\Implementation\ComM.c	  4235  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	mov	d2,d9
	ret
.L410:
	
__ComM_GetState_function_end:
	.size	ComM_GetState,__ComM_GetState_function_end-ComM_GetState
.L232:
	; End of function
	
	.sdecl	'.text.ComM..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.ComM..cocofun_3'
	.align	2
; Function .cocofun_3
.L162:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	mov	d8,#0
	movh.a	a2,#@his(ComM_InitStatus)
.L535:
	mov	d9,#1
	ld.bu	d15,[a2]@los(ComM_InitStatus)
.L536:
	mov.aa	a15,a4
.L539:
	fret
.L377:
	; End of function
	.sdecl	'.text.ComM.ComM_GetStatus',code,cluster('ComM_GetStatus')
	.sect	'.text.ComM.ComM_GetStatus'
	.align	2
	
	.global	ComM_GetStatus

; ..\component\ComM\Implementation\ComM.c	  4236  
; ..\component\ComM\Implementation\ComM.c	  4237  
; ..\component\ComM\Implementation\ComM.c	  4238  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4239   *  ComM_GetStatus()
; ..\component\ComM\Implementation\ComM.c	  4240   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4241  /*!
; ..\component\ComM\Implementation\ComM.c	  4242   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4243   *
; ..\component\ComM\Implementation\ComM.c	  4244   *
; ..\component\ComM\Implementation\ComM.c	  4245   *
; ..\component\ComM\Implementation\ComM.c	  4246   */
; ..\component\ComM\Implementation\ComM.c	  4247  FUNC(Std_ReturnType, COMM_CODE) ComM_GetStatus( P2VAR(ComM_InitStatusType, AUTOMATIC, COMM_APPL_VAR) Status)
; Function ComM_GetStatus
.L164:
ComM_GetStatus:	.type	func

; ..\component\ComM\Implementation\ComM.c	  4248  {
; ..\component\ComM\Implementation\ComM.c	  4249    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4250    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  4251    uint8 errorId = COMM_E_NO_ERROR;
	mov	d7,#0
.L540:

; ..\component\ComM\Implementation\ComM.c	  4252  
; ..\component\ComM\Implementation\ComM.c	  4253    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4254  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4255    /* #10 Check parameter 'Status': it must be a valid pointer. */
; ..\component\ComM\Implementation\ComM.c	  4256    retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  4257    if (Status == NULL_PTR)
	mov	d15,#1
	jnz.a	a4,.L26
.L541:

; ..\component\ComM\Implementation\ComM.c	  4258    {
; ..\component\ComM\Implementation\ComM.c	  4259      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d7,#2
	j	.L27
.L26:

; ..\component\ComM\Implementation\ComM.c	  4260    }
; ..\component\ComM\Implementation\ComM.c	  4261    else
; ..\component\ComM\Implementation\ComM.c	  4262  # endif
; ..\component\ComM\Implementation\ComM.c	  4263    {
; ..\component\ComM\Implementation\ComM.c	  4264      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4265      /* #20 If parameter checks are successful, store the initialization state of ComM. */
; ..\component\ComM\Implementation\ComM.c	  4266      *Status = ComM_InitStatus; /* SBSW_COMM_PARAMETER_PTR_WRITE */
	fcall	.cocofun_1
.L542:
	st.b	[a4],d15
.L632:

; ..\component\ComM\Implementation\ComM.c	  4267      retVal = E_OK;
	mov	d15,#0
.L27:

; ..\component\ComM\Implementation\ComM.c	  4268    }
; ..\component\ComM\Implementation\ComM.c	  4269  
; ..\component\ComM\Implementation\ComM.c	  4270    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4271  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4272    if (errorId != COMM_E_NO_ERROR)
	jeq	d7,#0,.L28
.L633:

; ..\component\ComM\Implementation\ComM.c	  4273    {
; ..\component\ComM\Implementation\ComM.c	  4274      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_GETSTATUS, errorId );
	fcall	.cocofun_2
.L634:
	mov	d6,#3
	call	Det_ReportError
.L28:

; ..\component\ComM\Implementation\ComM.c	  4275    }
; ..\component\ComM\Implementation\ComM.c	  4276  # else
; ..\component\ComM\Implementation\ComM.c	  4277    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4278  # endif
; ..\component\ComM\Implementation\ComM.c	  4279  
; ..\component\ComM\Implementation\ComM.c	  4280    return retVal;
; ..\component\ComM\Implementation\ComM.c	  4281  }
	mov	d2,d15
	ret
.L404:
	
__ComM_GetStatus_function_end:
	.size	ComM_GetStatus,__ComM_GetStatus_function_end-ComM_GetStatus
.L227:
	; End of function
	
	.sdecl	'.text.ComM..cocofun_1',code,cluster('.cocofun_1')
	.sect	'.text.ComM..cocofun_1'
	.align	2
; Function .cocofun_1
.L166:
.cocofun_1:	.type	func
; Function body .cocofun_1, coco_iter:0
	movh.a	a15,#@his(ComM_InitStatus)
.L543:
	ld.bu	d15,[a15]@los(ComM_InitStatus)
.L904:
	fret
.L367:
	; End of function
	.sdecl	'.text.ComM.ComM_RequestComMode',code,cluster('ComM_RequestComMode')
	.sect	'.text.ComM.ComM_RequestComMode'
	.align	2
	
	.global	ComM_RequestComMode

; ..\component\ComM\Implementation\ComM.c	  4282  
; ..\component\ComM\Implementation\ComM.c	  4283  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4284   *  ComM_RequestComMode()
; ..\component\ComM\Implementation\ComM.c	  4285   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4286  /*!
; ..\component\ComM\Implementation\ComM.c	  4287   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4288   *
; ..\component\ComM\Implementation\ComM.c	  4289   *
; ..\component\ComM\Implementation\ComM.c	  4290   *
; ..\component\ComM\Implementation\ComM.c	  4291   *
; ..\component\ComM\Implementation\ComM.c	  4292   *
; ..\component\ComM\Implementation\ComM.c	  4293   *
; ..\component\ComM\Implementation\ComM.c	  4294   *
; ..\component\ComM\Implementation\ComM.c	  4295   *
; ..\component\ComM\Implementation\ComM.c	  4296   */
; ..\component\ComM\Implementation\ComM.c	  4297  FUNC(Std_ReturnType, COMM_CODE) ComM_RequestComMode(ComM_UserHandleType User, ComM_ModeType ComMode)
; Function ComM_RequestComMode
.L168:
ComM_RequestComMode:	.type	func
	mov	d8,d5
.L546:

; ..\component\ComM\Implementation\ComM.c	  4298  {
; ..\component\ComM\Implementation\ComM.c	  4299    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4300    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  4301    uint8 errorId = COMM_E_NO_ERROR;
	mov	d9,#0
.L547:

; ..\component\ComM\Implementation\ComM.c	  4302  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4303    ComM_UserPncByteMaskIterType iByteMaskPncIndex;
; ..\component\ComM\Implementation\ComM.c	  4304  #endif
; ..\component\ComM\Implementation\ComM.c	  4305    ComM_UserByteMaskIterType iByteMaskUserIndex;
; ..\component\ComM\Implementation\ComM.c	  4306    ComM_UserReqFullComType userReqFullCom;
; ..\component\ComM\Implementation\ComM.c	  4307  
; ..\component\ComM\Implementation\ComM.c	  4308  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4309    ComM_UserReqPncFullComType userReqPncFullCom;
; ..\component\ComM\Implementation\ComM.c	  4310  #endif
; ..\component\ComM\Implementation\ComM.c	  4311  
; ..\component\ComM\Implementation\ComM.c	  4312    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4313  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4314    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  4315    retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  4316    if (ComM_InitStatus != COMM_INIT)
	mov	d10,#1
	fcall	.cocofun_1
.L654:
	jeq	d15,#1,.L30
.L655:

; ..\component\ComM\Implementation\ComM.c	  4317    {
; ..\component\ComM\Implementation\ComM.c	  4318      errorId = COMM_E_NOT_INITED;
	mov	d9,d10
.L656:

; ..\component\ComM\Implementation\ComM.c	  4319      retVal = COMM_E_UNINIT;
	mov	d10,#3
	j	.L31
.L30:

; ..\component\ComM\Implementation\ComM.c	  4320    }
; ..\component\ComM\Implementation\ComM.c	  4321    /* #20 Check parameter 'User'. */
; ..\component\ComM\Implementation\ComM.c	  4322    else if (User >= ComM_GetSizeOfUser())
	jne	d4,#0,.L32
.L657:

; ..\component\ComM\Implementation\ComM.c	  4323    {
; ..\component\ComM\Implementation\ComM.c	  4324      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  4325    }
; ..\component\ComM\Implementation\ComM.c	  4326    /* #30 Check parameter 'ComMode'. */
; ..\component\ComM\Implementation\ComM.c	  4327    /* If called with ComMode != COMM_NO_COMMUNICATION && ComMode != COMM_FULL_COMMUNICATION (ESCAN00068871) */
; ..\component\ComM\Implementation\ComM.c	  4328    else if ((ComMode != COMM_NO_COMMUNICATION) && (ComMode != COMM_FULL_COMMUNICATION))
	jeq	d8,#0,.L33
.L658:
	jeq	d8,#2,.L34
.L32:

; ..\component\ComM\Implementation\ComM.c	  4329    {
; ..\component\ComM\Implementation\ComM.c	  4330      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d9,#2
	j	.L35
.L34:
.L33:

; ..\component\ComM\Implementation\ComM.c	  4331    }
; ..\component\ComM\Implementation\ComM.c	  4332    else
; ..\component\ComM\Implementation\ComM.c	  4333  # endif
; ..\component\ComM\Implementation\ComM.c	  4334    {
; ..\component\ComM\Implementation\ComM.c	  4335      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4336      retVal = E_OK; /* Can be set to COMM_E_MODE_LIMITATION later. */
; ..\component\ComM\Implementation\ComM.c	  4337  
; ..\component\ComM\Implementation\ComM.c	  4338      SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_0();
	mov	d10,#0
	call	SuspendAllInterrupts
.L544:

; ..\component\ComM\Implementation\ComM.c	  4339  
; ..\component\ComM\Implementation\ComM.c	  4340      /* #40 If COMM_NO_COMMUNICATION is requested, clear the user request in each related byte of UserReqFullCom and UserReqPncFullCom. */
; ..\component\ComM\Implementation\ComM.c	  4341      if( ComMode == COMM_NO_COMMUNICATION )
; ..\component\ComM\Implementation\ComM.c	  4342      {
; ..\component\ComM\Implementation\ComM.c	  4343        for(iByteMaskUserIndex = ComM_GetUserByteMaskStartIdxOfUser(User); iByteMaskUserIndex < ComM_GetUserByteMaskEndIdxOfUser(User); iByteMaskUserIndex++)
; ..\component\ComM\Implementation\ComM.c	  4344        {
; ..\component\ComM\Implementation\ComM.c	  4345          userReqFullCom = (ComM_UserReqFullComType)(ComM_GetUserReqFullCom(ComM_GetUserReqFullComIdxOfUserByteMask(iByteMaskUserIndex)) & ComM_GetClearMaskOfUserByteMask(iByteMaskUserIndex));
	movh.a	a15,#@his(ComM_UserReqFullCom)
	lea	a15,[a15]@los(ComM_UserReqFullCom)
	ld.bu	d15,[a15]
.L659:
	jne	d8,#0,.L36
.L545:
	and	d15,#254
	j	.L37
.L36:

; ..\component\ComM\Implementation\ComM.c	  4346          ComM_SetUserReqFullCom(ComM_GetUserReqFullComIdxOfUserByteMask(iByteMaskUserIndex), userReqFullCom); /* SBSW_COMM_UserReqFullCom_over_ChannelPb_or_ByteMask_CSL03 */
; ..\component\ComM\Implementation\ComM.c	  4347        }
; ..\component\ComM\Implementation\ComM.c	  4348  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4349  # if (COMM_PNC_CHECK_ENABLED_AT_RUNTIME == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4350        if(ComM_HasPncPb())
; ..\component\ComM\Implementation\ComM.c	  4351  # endif
; ..\component\ComM\Implementation\ComM.c	  4352        {
; ..\component\ComM\Implementation\ComM.c	  4353          if (ComM_IsPncUserOfUser(User))
; ..\component\ComM\Implementation\ComM.c	  4354          {
; ..\component\ComM\Implementation\ComM.c	  4355            /* clear bit for full request */
; ..\component\ComM\Implementation\ComM.c	  4356            for(iByteMaskPncIndex = ComM_GetUserPncByteMaskStartIdxOfUser(User); iByteMaskPncIndex < ComM_GetUserPncByteMaskEndIdxOfUser(User); iByteMaskPncIndex++)
; ..\component\ComM\Implementation\ComM.c	  4357            {
; ..\component\ComM\Implementation\ComM.c	  4358              userReqPncFullCom = (ComM_UserReqPncFullComType)(ComM_GetUserReqPncFullCom(ComM_GetUserReqPncFullComIdxOfUserPncByteMask(iByteMaskPncIndex)) & ComM_GetClearMaskOfUserPncByteMask(iByteMaskPncIndex));
; ..\component\ComM\Implementation\ComM.c	  4359              ComM_SetUserReqPncFullCom(ComM_GetUserReqPncFullComIdxOfUserPncByteMask(iByteMaskPncIndex), userReqPncFullCom); /* SBSW_COMM_UserReqPncFullCom_over_UserPncByteMask_or_PncPb_CSL03 */
; ..\component\ComM\Implementation\ComM.c	  4360            }
; ..\component\ComM\Implementation\ComM.c	  4361          }
; ..\component\ComM\Implementation\ComM.c	  4362        }
; ..\component\ComM\Implementation\ComM.c	  4363  #endif
; ..\component\ComM\Implementation\ComM.c	  4364      }
; ..\component\ComM\Implementation\ComM.c	  4365      else
; ..\component\ComM\Implementation\ComM.c	  4366      {
; ..\component\ComM\Implementation\ComM.c	  4367        /* #50 If COMM_FULL_COMMUNICATION is requested, set the user request in each related byte of UserReqFullCom and UserReqPncFullCom. */
; ..\component\ComM\Implementation\ComM.c	  4368        for(iByteMaskUserIndex = ComM_GetUserByteMaskStartIdxOfUser(User); iByteMaskUserIndex < ComM_GetUserByteMaskEndIdxOfUser(User); iByteMaskUserIndex++)
; ..\component\ComM\Implementation\ComM.c	  4369        {
; ..\component\ComM\Implementation\ComM.c	  4370          userReqFullCom = (ComM_UserReqFullComType)(ComM_GetUserReqFullCom(ComM_GetUserReqFullComIdxOfUserByteMask(iByteMaskUserIndex)) | ComM_GetSetMaskOfUserByteMask(iByteMaskUserIndex));
	or	d15,#1
.L37:

; ..\component\ComM\Implementation\ComM.c	  4371          ComM_SetUserReqFullCom(ComM_GetUserReqFullComIdxOfUserByteMask(iByteMaskUserIndex), userReqFullCom); /* SBSW_COMM_UserReqFullCom_over_ChannelPb_or_ByteMask_CSL03 */
; ..\component\ComM\Implementation\ComM.c	  4372  
; ..\component\ComM\Implementation\ComM.c	  4373          /* #60 If Node Limitation NO_COM or Prevent Wake-up is active, ComM stores the FULL_COM request but does not perform it. */
; ..\component\ComM\Implementation\ComM.c	  4374  #if (((COMM_MODE_LIMITATION == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF)) || (COMM_WAKEUP_INHIBITION == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  4375  # if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4376          if (ComM_ChannelIsLimited(ComM_GetChannelOfUserByteMask(iByteMaskUserIndex)) == TRUE)
; ..\component\ComM\Implementation\ComM.c	  4377  # endif
; ..\component\ComM\Implementation\ComM.c	  4378          {
; ..\component\ComM\Implementation\ComM.c	  4379            retVal = COMM_E_MODE_LIMITATION;
; ..\component\ComM\Implementation\ComM.c	  4380          }
; ..\component\ComM\Implementation\ComM.c	  4381  #endif
; ..\component\ComM\Implementation\ComM.c	  4382        }
; ..\component\ComM\Implementation\ComM.c	  4383  
; ..\component\ComM\Implementation\ComM.c	  4384  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4385  # if (COMM_PNC_CHECK_ENABLED_AT_RUNTIME == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4386        if(ComM_HasPncPb())
; ..\component\ComM\Implementation\ComM.c	  4387  # endif
; ..\component\ComM\Implementation\ComM.c	  4388        {
; ..\component\ComM\Implementation\ComM.c	  4389          if (ComM_IsPncUserOfUser(User))
; ..\component\ComM\Implementation\ComM.c	  4390          {
; ..\component\ComM\Implementation\ComM.c	  4391            for(iByteMaskPncIndex = ComM_GetUserPncByteMaskStartIdxOfUser(User); iByteMaskPncIndex < ComM_GetUserPncByteMaskEndIdxOfUser(User); iByteMaskPncIndex++)
; ..\component\ComM\Implementation\ComM.c	  4392            {
; ..\component\ComM\Implementation\ComM.c	  4393              userReqPncFullCom = (ComM_UserReqPncFullComType)(ComM_GetUserReqPncFullCom(ComM_GetUserReqPncFullComIdxOfUserPncByteMask(iByteMaskPncIndex)) | ComM_GetSetMaskOfUserPncByteMask(iByteMaskPncIndex));
; ..\component\ComM\Implementation\ComM.c	  4394              ComM_SetUserReqPncFullCom(ComM_GetUserReqPncFullComIdxOfUserPncByteMask(iByteMaskPncIndex), userReqPncFullCom); /* SBSW_COMM_UserReqPncFullCom_over_UserPncByteMask_or_PncPb_CSL03 */
; ..\component\ComM\Implementation\ComM.c	  4395            }
; ..\component\ComM\Implementation\ComM.c	  4396          }
; ..\component\ComM\Implementation\ComM.c	  4397        }
; ..\component\ComM\Implementation\ComM.c	  4398  #endif
; ..\component\ComM\Implementation\ComM.c	  4399      }
; ..\component\ComM\Implementation\ComM.c	  4400  
; ..\component\ComM\Implementation\ComM.c	  4401      /* #70 If FULL_COM request is inhibited, increment the inhibition counter and store it in NvM. */
; ..\component\ComM\Implementation\ComM.c	  4402  #if (((COMM_MODE_LIMITATION == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF)) || (COMM_WAKEUP_INHIBITION == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  4403      if (retVal == COMM_E_MODE_LIMITATION)
; ..\component\ComM\Implementation\ComM.c	  4404      {
; ..\component\ComM\Implementation\ComM.c	  4405        if (ComM_Inhibition.ComM_InhibitCnt < 65535u)
; ..\component\ComM\Implementation\ComM.c	  4406        {
; ..\component\ComM\Implementation\ComM.c	  4407          ComM_Inhibition.ComM_InhibitCnt++;
; ..\component\ComM\Implementation\ComM.c	  4408  # if (COMM_NVM_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4409          ComM_NvMStoreReq = TRUE;
; ..\component\ComM\Implementation\ComM.c	  4410  # endif
; ..\component\ComM\Implementation\ComM.c	  4411        }
; ..\component\ComM\Implementation\ComM.c	  4412      }
; ..\component\ComM\Implementation\ComM.c	  4413  #endif
; ..\component\ComM\Implementation\ComM.c	  4414  
; ..\component\ComM\Implementation\ComM.c	  4415      SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_0();
	st.b	[a15],d15
.L660:
	call	ResumeAllInterrupts
.L35:
.L31:

; ..\component\ComM\Implementation\ComM.c	  4416    }
; ..\component\ComM\Implementation\ComM.c	  4417  
; ..\component\ComM\Implementation\ComM.c	  4418    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4419  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4420    if (errorId != COMM_E_NO_ERROR)
	jeq	d9,#0,.L38
.L661:

; ..\component\ComM\Implementation\ComM.c	  4421    {
; ..\component\ComM\Implementation\ComM.c	  4422      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_REQUESTCOMMODE, errorId );
	fcall	.cocofun_2
.L662:
	mov	d6,#5
.L663:
	mov	d7,d9
	call	Det_ReportError
.L38:

; ..\component\ComM\Implementation\ComM.c	  4423    }
; ..\component\ComM\Implementation\ComM.c	  4424  # else
; ..\component\ComM\Implementation\ComM.c	  4425    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4426  #  if ((COMM_ISDEF_USERBYTEMASKSTARTIDXOFUSER == STD_ON) && (COMM_PNC_SUPPORT == STD_OFF))
; ..\component\ComM\Implementation\ComM.c	  4427    COMM_DUMMY_STATEMENT(User); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4428  #  endif
; ..\component\ComM\Implementation\ComM.c	  4429  # endif
; ..\component\ComM\Implementation\ComM.c	  4430  
; ..\component\ComM\Implementation\ComM.c	  4431    return retVal;
; ..\component\ComM\Implementation\ComM.c	  4432  } /* PRQA S 6010, 6030, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STMIF */
	mov	d2,d10
	ret
.L417:
	
__ComM_RequestComMode_function_end:
	.size	ComM_RequestComMode,__ComM_RequestComMode_function_end-ComM_RequestComMode
.L237:
	; End of function
	
	.sdecl	'.text.ComM.ComM_GetMaxComMode',code,cluster('ComM_GetMaxComMode')
	.sect	'.text.ComM.ComM_GetMaxComMode'
	.align	2
	
	.global	ComM_GetMaxComMode

; ..\component\ComM\Implementation\ComM.c	  4433  
; ..\component\ComM\Implementation\ComM.c	  4434  
; ..\component\ComM\Implementation\ComM.c	  4435  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4436   *  ComM_GetMaxComMode()
; ..\component\ComM\Implementation\ComM.c	  4437   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4438  /*!
; ..\component\ComM\Implementation\ComM.c	  4439   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4440   *
; ..\component\ComM\Implementation\ComM.c	  4441   *
; ..\component\ComM\Implementation\ComM.c	  4442   *
; ..\component\ComM\Implementation\ComM.c	  4443   *
; ..\component\ComM\Implementation\ComM.c	  4444   *
; ..\component\ComM\Implementation\ComM.c	  4445   *
; ..\component\ComM\Implementation\ComM.c	  4446   *
; ..\component\ComM\Implementation\ComM.c	  4447   */
; ..\component\ComM\Implementation\ComM.c	  4448  FUNC(Std_ReturnType, COMM_CODE) ComM_GetMaxComMode(ComM_UserHandleType User, P2VAR(ComM_ModeType, AUTOMATIC, COMM_APPL_VAR) ComMode)
; Function ComM_GetMaxComMode
.L170:
ComM_GetMaxComMode:	.type	func

; ..\component\ComM\Implementation\ComM.c	  4449  {
; ..\component\ComM\Implementation\ComM.c	  4450    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4451    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  4452    uint8 errorId = COMM_E_NO_ERROR;
	mov	d7,#0
.L549:

; ..\component\ComM\Implementation\ComM.c	  4453  #if (((COMM_MODE_LIMITATION == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF)) || (COMM_WAKEUP_INHIBITION == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  4454    ComM_UserByteMaskEndIdxOfUserType iByteMaskIndex;
; ..\component\ComM\Implementation\ComM.c	  4455  #endif
; ..\component\ComM\Implementation\ComM.c	  4456  
; ..\component\ComM\Implementation\ComM.c	  4457    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4458  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4459    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  4460    retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  4461    if (ComM_InitStatus != COMM_INIT)
	mov	d8,#1
	fcall	.cocofun_1
.L668:
	jeq	d15,#1,.L40
.L669:

; ..\component\ComM\Implementation\ComM.c	  4462    {
; ..\component\ComM\Implementation\ComM.c	  4463      errorId = COMM_E_NOT_INITED;
	mov	d7,d8
.L670:

; ..\component\ComM\Implementation\ComM.c	  4464      retVal = COMM_E_UNINIT;
	mov	d8,#3
	j	.L41
.L40:

; ..\component\ComM\Implementation\ComM.c	  4465    }
; ..\component\ComM\Implementation\ComM.c	  4466    /* #20 Check parameter 'ComMode': it must be a valid pointer. */
; ..\component\ComM\Implementation\ComM.c	  4467    else if (ComMode == NULL_PTR)
	jz.a	a4,.L42
.L671:

; ..\component\ComM\Implementation\ComM.c	  4468    {
; ..\component\ComM\Implementation\ComM.c	  4469      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  4470    }
; ..\component\ComM\Implementation\ComM.c	  4471    /* #30 Check parameter 'User': it must be valid. */
; ..\component\ComM\Implementation\ComM.c	  4472    else if (User >= ComM_GetSizeOfUser())
	jeq	d4,#0,.L43
.L42:

; ..\component\ComM\Implementation\ComM.c	  4473    {
; ..\component\ComM\Implementation\ComM.c	  4474      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d7,#2
	j	.L44
.L43:

; ..\component\ComM\Implementation\ComM.c	  4475    }
; ..\component\ComM\Implementation\ComM.c	  4476    else
; ..\component\ComM\Implementation\ComM.c	  4477  # endif
; ..\component\ComM\Implementation\ComM.c	  4478    {
; ..\component\ComM\Implementation\ComM.c	  4479      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4480      /* #40 If parameter checks are successful, get the maximum allowed communication mode of the user:
; ..\component\ComM\Implementation\ComM.c	  4481       *     NO_COM if Mode Limitation NO_COM or Prevent Wake-up is active on at least one channel mapped to the user,
; ..\component\ComM\Implementation\ComM.c	  4482       *     FULL_COM otherwise. */
; ..\component\ComM\Implementation\ComM.c	  4483      *ComMode = (ComM_ModeType)COMM_FULL_COMMUNICATION; /* SBSW_COMM_PARAMETER_PTR_WRITE */ /* PRQA S 2982 */ /* MD_ComM_2982 */
	mov	d15,#2
	st.b	[a4],d15
.L672:

; ..\component\ComM\Implementation\ComM.c	  4484  
; ..\component\ComM\Implementation\ComM.c	  4485  #if (((COMM_MODE_LIMITATION == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF)) || (COMM_WAKEUP_INHIBITION == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  4486      for (iByteMaskIndex = ComM_GetUserByteMaskStartIdxOfUser(User); iByteMaskIndex < ComM_GetUserByteMaskEndIdxOfUser(User); iByteMaskIndex++)
; ..\component\ComM\Implementation\ComM.c	  4487      {
; ..\component\ComM\Implementation\ComM.c	  4488  # if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4489        if (ComM_ChannelIsLimited(ComM_GetChannelOfUserByteMask(iByteMaskIndex)) == TRUE)
; ..\component\ComM\Implementation\ComM.c	  4490  # endif
; ..\component\ComM\Implementation\ComM.c	  4491        {
; ..\component\ComM\Implementation\ComM.c	  4492          *ComMode = (ComM_ModeType)COMM_NO_COMMUNICATION; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4493        }
; ..\component\ComM\Implementation\ComM.c	  4494      }
; ..\component\ComM\Implementation\ComM.c	  4495  #endif
; ..\component\ComM\Implementation\ComM.c	  4496      retVal = E_OK;
	mov	d8,#0
.L44:
.L41:

; ..\component\ComM\Implementation\ComM.c	  4497    }
; ..\component\ComM\Implementation\ComM.c	  4498  
; ..\component\ComM\Implementation\ComM.c	  4499    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4500  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4501    if (errorId != COMM_E_NO_ERROR)
	jeq	d7,#0,.L45
.L673:

; ..\component\ComM\Implementation\ComM.c	  4502    {
; ..\component\ComM\Implementation\ComM.c	  4503      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_GETMAXCOMMODE, errorId );
	fcall	.cocofun_2
.L548:
	mov	d6,#6
	call	Det_ReportError
.L45:

; ..\component\ComM\Implementation\ComM.c	  4504    }
; ..\component\ComM\Implementation\ComM.c	  4505  # else
; ..\component\ComM\Implementation\ComM.c	  4506    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4507  # endif
; ..\component\ComM\Implementation\ComM.c	  4508  
; ..\component\ComM\Implementation\ComM.c	  4509    COMM_DUMMY_STATEMENT_CONST(User); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4510  
; ..\component\ComM\Implementation\ComM.c	  4511    return retVal;
; ..\component\ComM\Implementation\ComM.c	  4512  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	mov	d2,d8
	ret
.L424:
	
__ComM_GetMaxComMode_function_end:
	.size	ComM_GetMaxComMode,__ComM_GetMaxComMode_function_end-ComM_GetMaxComMode
.L242:
	; End of function
	
	.sdecl	'.text.ComM.ComM_GetRequestedComMode',code,cluster('ComM_GetRequestedComMode')
	.sect	'.text.ComM.ComM_GetRequestedComMode'
	.align	2
	
	.global	ComM_GetRequestedComMode

; ..\component\ComM\Implementation\ComM.c	  4513  
; ..\component\ComM\Implementation\ComM.c	  4514  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4515   *  ComM_GetRequestedComMode()
; ..\component\ComM\Implementation\ComM.c	  4516   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4517  /*!
; ..\component\ComM\Implementation\ComM.c	  4518   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4519   *
; ..\component\ComM\Implementation\ComM.c	  4520   *
; ..\component\ComM\Implementation\ComM.c	  4521   *
; ..\component\ComM\Implementation\ComM.c	  4522   *
; ..\component\ComM\Implementation\ComM.c	  4523   *
; ..\component\ComM\Implementation\ComM.c	  4524   *
; ..\component\ComM\Implementation\ComM.c	  4525   *
; ..\component\ComM\Implementation\ComM.c	  4526   *
; ..\component\ComM\Implementation\ComM.c	  4527   */
; ..\component\ComM\Implementation\ComM.c	  4528  FUNC(Std_ReturnType, COMM_CODE) ComM_GetRequestedComMode(ComM_UserHandleType User, P2VAR(ComM_ModeType, AUTOMATIC, COMM_APPL_VAR) ComMode)
; Function ComM_GetRequestedComMode
.L172:
ComM_GetRequestedComMode:	.type	func
	fcall	.cocofun_3
.L550:

; ..\component\ComM\Implementation\ComM.c	  4529  {
; ..\component\ComM\Implementation\ComM.c	  4530    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4531    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  4532    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  4533    ComM_UserByteMaskEndIdxOfUserType iByteMaskIndex;
; ..\component\ComM\Implementation\ComM.c	  4534  
; ..\component\ComM\Implementation\ComM.c	  4535    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4536  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4537    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  4538    retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  4539    if (ComM_InitStatus != COMM_INIT)
	jeq	d15,#1,.L47
.L678:

; ..\component\ComM\Implementation\ComM.c	  4540    {
; ..\component\ComM\Implementation\ComM.c	  4541      errorId = COMM_E_NOT_INITED;
	mov	d8,d9
.L679:

; ..\component\ComM\Implementation\ComM.c	  4542      retVal = COMM_E_UNINIT;
	mov	d9,#3
	j	.L48
.L47:

; ..\component\ComM\Implementation\ComM.c	  4543    }
; ..\component\ComM\Implementation\ComM.c	  4544    /* #20 Check parameter 'ComMode'. */
; ..\component\ComM\Implementation\ComM.c	  4545    else if (ComMode == NULL_PTR)
	jz.a	a15,.L49
.L680:

; ..\component\ComM\Implementation\ComM.c	  4546    {
; ..\component\ComM\Implementation\ComM.c	  4547      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  4548    }
; ..\component\ComM\Implementation\ComM.c	  4549    /* #30 Check parameter 'User'. */
; ..\component\ComM\Implementation\ComM.c	  4550    else if (User >= ComM_GetSizeOfUser())
	jeq	d4,#0,.L50
.L49:

; ..\component\ComM\Implementation\ComM.c	  4551    {
; ..\component\ComM\Implementation\ComM.c	  4552      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d8,#2
	j	.L51
.L50:

; ..\component\ComM\Implementation\ComM.c	  4553    }
; ..\component\ComM\Implementation\ComM.c	  4554    else
; ..\component\ComM\Implementation\ComM.c	  4555  # endif
; ..\component\ComM\Implementation\ComM.c	  4556    {
; ..\component\ComM\Implementation\ComM.c	  4557      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4558      /* #40 If parameter checks are successful, get the requested mode of the user:
; ..\component\ComM\Implementation\ComM.c	  4559       *     NO_COM if at least one channel mapped to the user is not requested or
; ..\component\ComM\Implementation\ComM.c	  4560       *       if this PNC user is mapped to PNCs without channels (special case) and at least one PNC is not requested.
; ..\component\ComM\Implementation\ComM.c	  4561       *     FULL_COM otherwise. */
; ..\component\ComM\Implementation\ComM.c	  4562      SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_0();
	call	SuspendAllInterrupts
.L551:

; ..\component\ComM\Implementation\ComM.c	  4563  
; ..\component\ComM\Implementation\ComM.c	  4564      /* Set the default value to NO_COM to consider users having no channels and no PNCs, in this case the function does not change it. ESCAN00092198 */
; ..\component\ComM\Implementation\ComM.c	  4565      *ComMode = COMM_NO_COMMUNICATION; /* SBSW_COMM_PARAMETER_PTR_WRITE */
	mov	d15,#0
	st.b	[a15],d15
.L681:

; ..\component\ComM\Implementation\ComM.c	  4566  #if (COMM_PNC_EXTENDED_FUNCTIONALITY_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4567  # if (COMM_PNC_EXISTS_PNC_WITHOUT_CHANNELS == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4568      if (ComM_IsUserMappedToPncWithoutChannels(User) == TRUE)
; ..\component\ComM\Implementation\ComM.c	  4569      {
; ..\component\ComM\Implementation\ComM.c	  4570        /* Special case: this PNC user is mapped to PNCs without channels */
; ..\component\ComM\Implementation\ComM.c	  4571        for(iByteMaskIndex = ComM_GetUserPncByteMaskStartIdxOfUser(User); iByteMaskIndex < ComM_GetUserPncByteMaskEndIdxOfUser(User); iByteMaskIndex++)
; ..\component\ComM\Implementation\ComM.c	  4572        {
; ..\component\ComM\Implementation\ComM.c	  4573          if( (ComM_GetUserReqPncFullCom(ComM_GetUserReqPncFullComIdxOfUserPncByteMask(iByteMaskIndex)) & ComM_GetSetMaskOfUserPncByteMask(iByteMaskIndex)) != COMM_NO_REQUESTS)
; ..\component\ComM\Implementation\ComM.c	  4574          {
; ..\component\ComM\Implementation\ComM.c	  4575            *ComMode = COMM_FULL_COMMUNICATION; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4576          }
; ..\component\ComM\Implementation\ComM.c	  4577          else
; ..\component\ComM\Implementation\ComM.c	  4578          {
; ..\component\ComM\Implementation\ComM.c	  4579            *ComMode = COMM_NO_COMMUNICATION; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4580            break;
; ..\component\ComM\Implementation\ComM.c	  4581          }
; ..\component\ComM\Implementation\ComM.c	  4582        }
; ..\component\ComM\Implementation\ComM.c	  4583      }
; ..\component\ComM\Implementation\ComM.c	  4584      else
; ..\component\ComM\Implementation\ComM.c	  4585  # endif
; ..\component\ComM\Implementation\ComM.c	  4586  #endif
; ..\component\ComM\Implementation\ComM.c	  4587      {
; ..\component\ComM\Implementation\ComM.c	  4588        for(iByteMaskIndex = ComM_GetUserByteMaskStartIdxOfUser(User); iByteMaskIndex < ComM_GetUserByteMaskEndIdxOfUser(User); iByteMaskIndex++)
; ..\component\ComM\Implementation\ComM.c	  4589        {
; ..\component\ComM\Implementation\ComM.c	  4590          if( (ComM_GetUserReqFullCom(ComM_GetUserReqFullComIdxOfUserByteMask(iByteMaskIndex)) & ComM_GetSetMaskOfUserByteMask(iByteMaskIndex)) != COMM_NO_REQUESTS)
	movh.a	a2,#@his(ComM_UserReqFullCom)
	ld.bu	d15,[a2]@los(ComM_UserReqFullCom)
.L682:
	and	d15,#1
.L683:
	ne	d15,d15,#0
.L684:

; ..\component\ComM\Implementation\ComM.c	  4591          {
; ..\component\ComM\Implementation\ComM.c	  4592            *ComMode = COMM_FULL_COMMUNICATION; /* SBSW_COMM_PARAMETER_PTR_WRITE */
	sha	d15,#1
	st.b	[a15],d15
.L685:

; ..\component\ComM\Implementation\ComM.c	  4593          }
; ..\component\ComM\Implementation\ComM.c	  4594          else
; ..\component\ComM\Implementation\ComM.c	  4595          {
; ..\component\ComM\Implementation\ComM.c	  4596            *ComMode = COMM_NO_COMMUNICATION; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4597            break;
; ..\component\ComM\Implementation\ComM.c	  4598          }
; ..\component\ComM\Implementation\ComM.c	  4599        }
; ..\component\ComM\Implementation\ComM.c	  4600      }
; ..\component\ComM\Implementation\ComM.c	  4601  
; ..\component\ComM\Implementation\ComM.c	  4602      SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_0();
	call	ResumeAllInterrupts
.L686:

; ..\component\ComM\Implementation\ComM.c	  4603      retVal = E_OK;
	mov	d9,#0
.L51:
.L48:

; ..\component\ComM\Implementation\ComM.c	  4604    }
; ..\component\ComM\Implementation\ComM.c	  4605  
; ..\component\ComM\Implementation\ComM.c	  4606    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4607  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4608    if (errorId != COMM_E_NO_ERROR)
	jeq	d8,#0,.L52
.L687:

; ..\component\ComM\Implementation\ComM.c	  4609    {
; ..\component\ComM\Implementation\ComM.c	  4610      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_GETREQUESTEDCOMMODE, errorId );
	fcall	.cocofun_2
.L688:
	mov	d6,#7
.L689:
	mov	d7,d8
	call	Det_ReportError
.L52:

; ..\component\ComM\Implementation\ComM.c	  4611    }
; ..\component\ComM\Implementation\ComM.c	  4612  # else
; ..\component\ComM\Implementation\ComM.c	  4613    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4614    COMM_DUMMY_STATEMENT(User); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4615  # endif
; ..\component\ComM\Implementation\ComM.c	  4616    return retVal;
; ..\component\ComM\Implementation\ComM.c	  4617  } /* PRQA S 6010, 6080 */ /* MD_MSR_STPTH, MD_MSR_STMIF */
	mov	d2,d9
	ret
.L430:
	
__ComM_GetRequestedComMode_function_end:
	.size	ComM_GetRequestedComMode,__ComM_GetRequestedComMode_function_end-ComM_GetRequestedComMode
.L247:
	; End of function
	
	.sdecl	'.text.ComM.ComM_GetCurrentComMode',code,cluster('ComM_GetCurrentComMode')
	.sect	'.text.ComM.ComM_GetCurrentComMode'
	.align	2
	
	.global	ComM_GetCurrentComMode

; ..\component\ComM\Implementation\ComM.c	  4618  
; ..\component\ComM\Implementation\ComM.c	  4619  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4620   *  ComM_GetCurrentComMode()
; ..\component\ComM\Implementation\ComM.c	  4621   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4622  /*!
; ..\component\ComM\Implementation\ComM.c	  4623   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4624   *
; ..\component\ComM\Implementation\ComM.c	  4625   *
; ..\component\ComM\Implementation\ComM.c	  4626   *
; ..\component\ComM\Implementation\ComM.c	  4627   *
; ..\component\ComM\Implementation\ComM.c	  4628   *
; ..\component\ComM\Implementation\ComM.c	  4629   */
; ..\component\ComM\Implementation\ComM.c	  4630  FUNC(Std_ReturnType, COMM_CODE) ComM_GetCurrentComMode(ComM_UserHandleType User, P2VAR(ComM_ModeType, AUTOMATIC, COMM_APPL_VAR) ComMode)
; Function ComM_GetCurrentComMode
.L174:
ComM_GetCurrentComMode:	.type	func
	sub.a	a10,#8
.L552:
	fcall	.cocofun_3
.L554:

; ..\component\ComM\Implementation\ComM.c	  4631  {
; ..\component\ComM\Implementation\ComM.c	  4632    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4633    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  4634    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  4635    ComM_UserByteMaskEndIdxOfUserType iByteMaskIndex;
; ..\component\ComM\Implementation\ComM.c	  4636    ComM_ModeType tmpComMode;
; ..\component\ComM\Implementation\ComM.c	  4637  
; ..\component\ComM\Implementation\ComM.c	  4638    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4639  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4640    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  4641    retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  4642    if (ComM_InitStatus != COMM_INIT)
	jeq	d15,#1,.L54
.L694:

; ..\component\ComM\Implementation\ComM.c	  4643    {
; ..\component\ComM\Implementation\ComM.c	  4644      errorId = COMM_E_NOT_INITED;
	mov	d8,d9
.L695:

; ..\component\ComM\Implementation\ComM.c	  4645      retVal = COMM_E_UNINIT;
	mov	d9,#3
	j	.L55
.L54:

; ..\component\ComM\Implementation\ComM.c	  4646    }
; ..\component\ComM\Implementation\ComM.c	  4647    /* #20 Check parameter 'User': it must be a valid user identifier. */
; ..\component\ComM\Implementation\ComM.c	  4648    else if (User >= ComM_GetSizeOfUser())
	jne	d4,#0,.L56
.L696:

; ..\component\ComM\Implementation\ComM.c	  4649    {
; ..\component\ComM\Implementation\ComM.c	  4650      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  4651    }
; ..\component\ComM\Implementation\ComM.c	  4652    /* #30 Check parameter 'ComMode': it must be a valid pointer. */
; ..\component\ComM\Implementation\ComM.c	  4653    else if (ComMode == NULL_PTR)
	jnz.a	a15,.L57
.L56:

; ..\component\ComM\Implementation\ComM.c	  4654    {
; ..\component\ComM\Implementation\ComM.c	  4655      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d8,#2
	j	.L58
.L57:

; ..\component\ComM\Implementation\ComM.c	  4656    }
; ..\component\ComM\Implementation\ComM.c	  4657    else
; ..\component\ComM\Implementation\ComM.c	  4658  # endif
; ..\component\ComM\Implementation\ComM.c	  4659    {
; ..\component\ComM\Implementation\ComM.c	  4660      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4661      /* #40 If parameter checks are successful, get the lowest BusSM mode of all channels mapped to the user.  */
; ..\component\ComM\Implementation\ComM.c	  4662      SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_0();
	call	SuspendAllInterrupts
.L553:

; ..\component\ComM\Implementation\ComM.c	  4663  
; ..\component\ComM\Implementation\ComM.c	  4664      /* Set the default value to NO_COM to consider users having no channels and no PNCs, in this case the function does not change it. ESCAN00092198 */
; ..\component\ComM\Implementation\ComM.c	  4665      *ComMode = COMM_NO_COMMUNICATION; /* PRQA S 2982 */ /* MD_ComM_2982 */ /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4666      for(iByteMaskIndex = ComM_GetUserByteMaskStartIdxOfUser(User); iByteMaskIndex < ComM_GetUserByteMaskEndIdxOfUser(User); iByteMaskIndex = ComM_GetUserByteMaskEndIdxOfUser(User))
; ..\component\ComM\Implementation\ComM.c	  4667      {
; ..\component\ComM\Implementation\ComM.c	  4668        /* If user has channels or PNCs, set the default value to FULL_COM by executing this loop exactly once. */
; ..\component\ComM\Implementation\ComM.c	  4669        *ComMode = COMM_FULL_COMMUNICATION; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4670      }
; ..\component\ComM\Implementation\ComM.c	  4671  
; ..\component\ComM\Implementation\ComM.c	  4672      for(iByteMaskIndex = ComM_GetUserByteMaskStartIdxOfUser(User); iByteMaskIndex < ComM_GetUserByteMaskEndIdxOfUser(User); iByteMaskIndex++)
	mov	d15,#2
	st.b	[a15],d15
.L697:

; ..\component\ComM\Implementation\ComM.c	  4673      {
; ..\component\ComM\Implementation\ComM.c	  4674        ComM_GetCurrentBusSMMode(ComM_GetChannelOfUserByteMask(iByteMaskIndex), &tmpComMode); /* SBSW_COMM_CALL_WITH_PTR_TO_LOCAL_VARIABLE */
	mov	d4,#0
	mov.aa	a4,a10
	call	ComM_GetCurrentBusSMMode
.L698:

; ..\component\ComM\Implementation\ComM.c	  4675        if(tmpComMode < *ComMode)
	ld.bu	d15,[a10]
.L699:
	ld.bu	d0,[a15]
.L700:

; ..\component\ComM\Implementation\ComM.c	  4676        {
; ..\component\ComM\Implementation\ComM.c	  4677          *ComMode = tmpComMode; /* SBSW_COMM_PARAMETER_PTR_WRITE */
	min.u	d15,d15,d0
	st.b	[a15],d15
.L701:

; ..\component\ComM\Implementation\ComM.c	  4678        }
; ..\component\ComM\Implementation\ComM.c	  4679      }
; ..\component\ComM\Implementation\ComM.c	  4680  
; ..\component\ComM\Implementation\ComM.c	  4681      SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_0();
	call	ResumeAllInterrupts
.L702:

; ..\component\ComM\Implementation\ComM.c	  4682      retVal = E_OK;
	mov	d9,#0
.L58:
.L55:

; ..\component\ComM\Implementation\ComM.c	  4683    }
; ..\component\ComM\Implementation\ComM.c	  4684  
; ..\component\ComM\Implementation\ComM.c	  4685    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4686  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4687    if (errorId != COMM_E_NO_ERROR)
	jeq	d8,#0,.L59
.L703:

; ..\component\ComM\Implementation\ComM.c	  4688    {
; ..\component\ComM\Implementation\ComM.c	  4689      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_GETCURRENTCOMMODE, errorId );
	fcall	.cocofun_2
.L704:
	mov	d6,#8
.L705:
	mov	d7,d8
	call	Det_ReportError
.L59:

; ..\component\ComM\Implementation\ComM.c	  4690    }
; ..\component\ComM\Implementation\ComM.c	  4691  # else
; ..\component\ComM\Implementation\ComM.c	  4692    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4693  #  if (COMM_ISDEF_USERBYTEMASKSTARTIDXOFUSER == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4694    COMM_DUMMY_STATEMENT(User); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4695  #  endif
; ..\component\ComM\Implementation\ComM.c	  4696  # endif
; ..\component\ComM\Implementation\ComM.c	  4697  
; ..\component\ComM\Implementation\ComM.c	  4698    return retVal;
; ..\component\ComM\Implementation\ComM.c	  4699  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	mov	d2,d9
	ret
.L435:
	
__ComM_GetCurrentComMode_function_end:
	.size	ComM_GetCurrentComMode,__ComM_GetCurrentComMode_function_end-ComM_GetCurrentComMode
.L252:
	; End of function
	
	.sdecl	'.text.ComM.ComM_GetInhibitionStatus',code,cluster('ComM_GetInhibitionStatus')
	.sect	'.text.ComM.ComM_GetInhibitionStatus'
	.align	2
	
	.global	ComM_GetInhibitionStatus

; ..\component\ComM\Implementation\ComM.c	  4700  
; ..\component\ComM\Implementation\ComM.c	  4701  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4702   *  ComM_GetInhibitionStatus()
; ..\component\ComM\Implementation\ComM.c	  4703   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4704  /*!
; ..\component\ComM\Implementation\ComM.c	  4705   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4706   *
; ..\component\ComM\Implementation\ComM.c	  4707   *
; ..\component\ComM\Implementation\ComM.c	  4708   *
; ..\component\ComM\Implementation\ComM.c	  4709   *
; ..\component\ComM\Implementation\ComM.c	  4710   *
; ..\component\ComM\Implementation\ComM.c	  4711   */
; ..\component\ComM\Implementation\ComM.c	  4712  FUNC(Std_ReturnType, COMM_CODE) ComM_GetInhibitionStatus( NetworkHandleType Channel, P2VAR(ComM_InhibitionStatusType, AUTOMATIC, COMM_APPL_VAR) Status)
; Function ComM_GetInhibitionStatus
.L176:
ComM_GetInhibitionStatus:	.type	func

; ..\component\ComM\Implementation\ComM.c	  4713  {
; ..\component\ComM\Implementation\ComM.c	  4714    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4715    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  4716    uint8 errorId = COMM_E_NO_ERROR;
	mov	d7,#0
.L556:

; ..\component\ComM\Implementation\ComM.c	  4717  
; ..\component\ComM\Implementation\ComM.c	  4718    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4719  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4720    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  4721    retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  4722    if (ComM_InitStatus != COMM_INIT)
	mov	d8,#1
	fcall	.cocofun_1
.L710:
	jeq	d15,#1,.L61
.L711:

; ..\component\ComM\Implementation\ComM.c	  4723    {
; ..\component\ComM\Implementation\ComM.c	  4724      errorId = COMM_E_NOT_INITED;
	mov	d7,d8
.L712:

; ..\component\ComM\Implementation\ComM.c	  4725      retVal = COMM_E_UNINIT;
	mov	d8,#3
	j	.L62
.L61:

; ..\component\ComM\Implementation\ComM.c	  4726    }
; ..\component\ComM\Implementation\ComM.c	  4727    /* #20 Check parameter 'Status': it must be valid pointer. */
; ..\component\ComM\Implementation\ComM.c	  4728    else if (Status == NULL_PTR)
	jz.a	a4,.L63
.L713:

; ..\component\ComM\Implementation\ComM.c	  4729    {
; ..\component\ComM\Implementation\ComM.c	  4730      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  4731    }
; ..\component\ComM\Implementation\ComM.c	  4732    /* #30 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  4733    else if ((Channel >= COMM_ACTIVE_CHANNEL)
	jeq	d4,#0,.L64
.L63:

; ..\component\ComM\Implementation\ComM.c	  4734  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4735     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  4736  #  endif
; ..\component\ComM\Implementation\ComM.c	  4737         )
; ..\component\ComM\Implementation\ComM.c	  4738    {
; ..\component\ComM\Implementation\ComM.c	  4739      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d7,#2
	j	.L65
.L64:

; ..\component\ComM\Implementation\ComM.c	  4740    }
; ..\component\ComM\Implementation\ComM.c	  4741    else
; ..\component\ComM\Implementation\ComM.c	  4742  # endif
; ..\component\ComM\Implementation\ComM.c	  4743    {
; ..\component\ComM\Implementation\ComM.c	  4744      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4745      /* #40 If parameter checks are successful, store the inhibition status of the channel. */
; ..\component\ComM\Implementation\ComM.c	  4746      *Status = ComM_Inhibition.ComM_InhibitionStatus[Channel]; /* SBSW_COMM_PARAMETER_PTR_WRITE */
	movh.a	a15,#@his(ComM_Inhibition+4)
.L714:

; ..\component\ComM\Implementation\ComM.c	  4747      retVal = E_OK;
	mov	d8,#0
	ld.bu	d15,[a15]@los(ComM_Inhibition+4)
.L715:
	st.b	[a4],d15
.L65:
.L62:

; ..\component\ComM\Implementation\ComM.c	  4748    }
; ..\component\ComM\Implementation\ComM.c	  4749  
; ..\component\ComM\Implementation\ComM.c	  4750    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4751  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4752    if (errorId != COMM_E_NO_ERROR)
	jeq	d7,#0,.L66
.L716:

; ..\component\ComM\Implementation\ComM.c	  4753    {
; ..\component\ComM\Implementation\ComM.c	  4754      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_GETINHIBITIONSTATUS, errorId );
	fcall	.cocofun_2
.L555:
	mov	d6,#4
	call	Det_ReportError
.L66:

; ..\component\ComM\Implementation\ComM.c	  4755    }
; ..\component\ComM\Implementation\ComM.c	  4756  # else
; ..\component\ComM\Implementation\ComM.c	  4757    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4758  # endif
; ..\component\ComM\Implementation\ComM.c	  4759  
; ..\component\ComM\Implementation\ComM.c	  4760    return retVal;
; ..\component\ComM\Implementation\ComM.c	  4761  }
	mov	d2,d8
	ret
.L441:
	
__ComM_GetInhibitionStatus_function_end:
	.size	ComM_GetInhibitionStatus,__ComM_GetInhibitionStatus_function_end-ComM_GetInhibitionStatus
.L257:
	; End of function
	
	.sdecl	'.text.ComM.ComM_PreventWakeUp',code,cluster('ComM_PreventWakeUp')
	.sect	'.text.ComM.ComM_PreventWakeUp'
	.align	2
	
	.global	ComM_PreventWakeUp

; ..\component\ComM\Implementation\ComM.c	  4762  
; ..\component\ComM\Implementation\ComM.c	  4763  
; ..\component\ComM\Implementation\ComM.c	  4764  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4765   *  ComM_PreventWakeUp()
; ..\component\ComM\Implementation\ComM.c	  4766   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4767  /*!
; ..\component\ComM\Implementation\ComM.c	  4768   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4769   *
; ..\component\ComM\Implementation\ComM.c	  4770   *
; ..\component\ComM\Implementation\ComM.c	  4771   *
; ..\component\ComM\Implementation\ComM.c	  4772   *
; ..\component\ComM\Implementation\ComM.c	  4773   *
; ..\component\ComM\Implementation\ComM.c	  4774   *
; ..\component\ComM\Implementation\ComM.c	  4775   *
; ..\component\ComM\Implementation\ComM.c	  4776   */
; ..\component\ComM\Implementation\ComM.c	  4777  FUNC(Std_ReturnType, COMM_CODE) ComM_PreventWakeUp( NetworkHandleType Channel, boolean Status)
; Function ComM_PreventWakeUp
.L178:
ComM_PreventWakeUp:	.type	func

; ..\component\ComM\Implementation\ComM.c	  4778  {
; ..\component\ComM\Implementation\ComM.c	  4779    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4780    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  4781    uint8 errorId = COMM_E_NO_ERROR;
	mov	d7,#0
.L558:

; ..\component\ComM\Implementation\ComM.c	  4782  
; ..\component\ComM\Implementation\ComM.c	  4783    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4784  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4785    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  4786    retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  4787    if (ComM_InitStatus != COMM_INIT)
	mov	d8,#1
	fcall	.cocofun_1
.L721:
	jeq	d15,#1,.L68
.L722:

; ..\component\ComM\Implementation\ComM.c	  4788    {
; ..\component\ComM\Implementation\ComM.c	  4789      errorId = COMM_E_NOT_INITED;
	mov	d7,d8
.L723:

; ..\component\ComM\Implementation\ComM.c	  4790      retVal = COMM_E_UNINIT;
	mov	d8,#3
	j	.L69
.L68:

; ..\component\ComM\Implementation\ComM.c	  4791    }
; ..\component\ComM\Implementation\ComM.c	  4792    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  4793    else if ((Channel >= COMM_ACTIVE_CHANNEL)
	jeq	d4,#0,.L70
.L724:

; ..\component\ComM\Implementation\ComM.c	  4794  # if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4795     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  4796  # endif
; ..\component\ComM\Implementation\ComM.c	  4797         )
; ..\component\ComM\Implementation\ComM.c	  4798    {
; ..\component\ComM\Implementation\ComM.c	  4799      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d7,#2
.L70:
.L69:

; ..\component\ComM\Implementation\ComM.c	  4800    }
; ..\component\ComM\Implementation\ComM.c	  4801    else
; ..\component\ComM\Implementation\ComM.c	  4802  #endif
; ..\component\ComM\Implementation\ComM.c	  4803    {
; ..\component\ComM\Implementation\ComM.c	  4804      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4805      /* #30 If parameter checks are successful and the feature Prevent Wake-up is enabled, process the request. */
; ..\component\ComM\Implementation\ComM.c	  4806  #if ( COMM_WAKEUP_INHIBITION == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  4807    SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_0();
; ..\component\ComM\Implementation\ComM.c	  4808    if(Status == TRUE)
; ..\component\ComM\Implementation\ComM.c	  4809    {
; ..\component\ComM\Implementation\ComM.c	  4810      /* #40 Only accept the request if ECU Group Classification supports Prevent Wake-up. */
; ..\component\ComM\Implementation\ComM.c	  4811      /* ESCAN00068902 */
; ..\component\ComM\Implementation\ComM.c	  4812      if( (ComM_Inhibition.ComM_ECUGroupClassification & COMM_WAKEUP_INHIBITION_MASK) == COMM_WAKEUP_INHIBITION_MASK )
; ..\component\ComM\Implementation\ComM.c	  4813      {
; ..\component\ComM\Implementation\ComM.c	  4814        ComM_Inhibition.ComM_InhibitionStatus[Channel] |= COMM_WAKEUP_INHIBITION_MASK; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4815  # if (COMM_NVM_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4816        ComM_NvMStoreReq = TRUE;
; ..\component\ComM\Implementation\ComM.c	  4817  # endif
; ..\component\ComM\Implementation\ComM.c	  4818        retVal = E_OK;
; ..\component\ComM\Implementation\ComM.c	  4819      }
; ..\component\ComM\Implementation\ComM.c	  4820      else
; ..\component\ComM\Implementation\ComM.c	  4821      {
; ..\component\ComM\Implementation\ComM.c	  4822        retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  4823      }
; ..\component\ComM\Implementation\ComM.c	  4824    }
; ..\component\ComM\Implementation\ComM.c	  4825    else
; ..\component\ComM\Implementation\ComM.c	  4826    {
; ..\component\ComM\Implementation\ComM.c	  4827      /* #50 Always accept releasing the Prevent Wake-up. */
; ..\component\ComM\Implementation\ComM.c	  4828      ComM_Inhibition.ComM_InhibitionStatus[Channel] &= COMM_WAKEUP_INHIBITION_CLEAR_MASK; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4829  # if (COMM_NVM_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4830      ComM_NvMStoreReq = TRUE;
; ..\component\ComM\Implementation\ComM.c	  4831  # endif
; ..\component\ComM\Implementation\ComM.c	  4832      retVal = E_OK;
; ..\component\ComM\Implementation\ComM.c	  4833    }
; ..\component\ComM\Implementation\ComM.c	  4834  
; ..\component\ComM\Implementation\ComM.c	  4835    SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_0();
; ..\component\ComM\Implementation\ComM.c	  4836  #else
; ..\component\ComM\Implementation\ComM.c	  4837      /* #60 Reject the request if the feature Prevent Wake-up is disabled. */
; ..\component\ComM\Implementation\ComM.c	  4838      /* ESCAN00068896 */
; ..\component\ComM\Implementation\ComM.c	  4839      retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  4840  #endif
; ..\component\ComM\Implementation\ComM.c	  4841    }
; ..\component\ComM\Implementation\ComM.c	  4842  
; ..\component\ComM\Implementation\ComM.c	  4843    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4844  #if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4845  # if ( COMM_WAKEUP_INHIBITION == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  4846    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  4847  # endif
; ..\component\ComM\Implementation\ComM.c	  4848    {
; ..\component\ComM\Implementation\ComM.c	  4849      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_PREVENTWAKEUP, errorId );
	fcall	.cocofun_2
.L557:
	mov	d6,#9
	call	Det_ReportError
.L559:

; ..\component\ComM\Implementation\ComM.c	  4850    }
; ..\component\ComM\Implementation\ComM.c	  4851  #else
; ..\component\ComM\Implementation\ComM.c	  4852    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4853  #endif
; ..\component\ComM\Implementation\ComM.c	  4854  
; ..\component\ComM\Implementation\ComM.c	  4855  #if ( COMM_WAKEUP_INHIBITION == STD_OFF )
; ..\component\ComM\Implementation\ComM.c	  4856    COMM_DUMMY_STATEMENT_CONST(Status); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4857  # if ( COMM_DEV_ERROR_DETECT == STD_OFF )
; ..\component\ComM\Implementation\ComM.c	  4858    COMM_DUMMY_STATEMENT(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4859  # endif
; ..\component\ComM\Implementation\ComM.c	  4860  #endif
; ..\component\ComM\Implementation\ComM.c	  4861  
; ..\component\ComM\Implementation\ComM.c	  4862    return retVal;
; ..\component\ComM\Implementation\ComM.c	  4863  }
	mov	d2,d8
	ret
.L447:
	
__ComM_PreventWakeUp_function_end:
	.size	ComM_PreventWakeUp,__ComM_PreventWakeUp_function_end-ComM_PreventWakeUp
.L262:
	; End of function
	
	.sdecl	'.text.ComM.ComM_LimitChannelToNoComMode',code,cluster('ComM_LimitChannelToNoComMode')
	.sect	'.text.ComM.ComM_LimitChannelToNoComMode'
	.align	2
	
	.global	ComM_LimitChannelToNoComMode

; ..\component\ComM\Implementation\ComM.c	  4864  
; ..\component\ComM\Implementation\ComM.c	  4865  
; ..\component\ComM\Implementation\ComM.c	  4866  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4867   *  ComM_LimitChannelToNoComMode()
; ..\component\ComM\Implementation\ComM.c	  4868   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4869  /*!
; ..\component\ComM\Implementation\ComM.c	  4870   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4871   *
; ..\component\ComM\Implementation\ComM.c	  4872   *
; ..\component\ComM\Implementation\ComM.c	  4873   *
; ..\component\ComM\Implementation\ComM.c	  4874   *
; ..\component\ComM\Implementation\ComM.c	  4875   *
; ..\component\ComM\Implementation\ComM.c	  4876   *
; ..\component\ComM\Implementation\ComM.c	  4877   *
; ..\component\ComM\Implementation\ComM.c	  4878   *
; ..\component\ComM\Implementation\ComM.c	  4879   *
; ..\component\ComM\Implementation\ComM.c	  4880   *
; ..\component\ComM\Implementation\ComM.c	  4881   *
; ..\component\ComM\Implementation\ComM.c	  4882   */
; ..\component\ComM\Implementation\ComM.c	  4883  FUNC(Std_ReturnType, COMM_CODE) ComM_LimitChannelToNoComMode( NetworkHandleType Channel, boolean Status)
; Function ComM_LimitChannelToNoComMode
.L180:
ComM_LimitChannelToNoComMode:	.type	func

; ..\component\ComM\Implementation\ComM.c	  4884  {
; ..\component\ComM\Implementation\ComM.c	  4885    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4886    Std_ReturnType retVal = E_NOT_OK;
	mov	d8,#1
.L561:

; ..\component\ComM\Implementation\ComM.c	  4887    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  4888  
; ..\component\ComM\Implementation\ComM.c	  4889    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4890  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4891    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  4892    if (ComM_InitStatus != COMM_INIT)
	mov	d7,#0
	fcall	.cocofun_1
.L729:
	jeq	d15,#1,.L73
.L730:

; ..\component\ComM\Implementation\ComM.c	  4893    {
; ..\component\ComM\Implementation\ComM.c	  4894      errorId = COMM_E_NOT_INITED;
	mov	d7,d8
.L731:

; ..\component\ComM\Implementation\ComM.c	  4895      retVal = COMM_E_UNINIT;
	mov	d8,#3
	j	.L74
.L73:

; ..\component\ComM\Implementation\ComM.c	  4896    }
; ..\component\ComM\Implementation\ComM.c	  4897    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  4898    else if ((Channel >= COMM_ACTIVE_CHANNEL)
; ..\component\ComM\Implementation\ComM.c	  4899  # if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4900     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  4901  # endif
; ..\component\ComM\Implementation\ComM.c	  4902         )
; ..\component\ComM\Implementation\ComM.c	  4903    {
; ..\component\ComM\Implementation\ComM.c	  4904      errorId = COMM_E_WRONG_PARAMETERS;
	seln	d7,d4,d7,#2
.L74:

; ..\component\ComM\Implementation\ComM.c	  4905    }
; ..\component\ComM\Implementation\ComM.c	  4906    else
; ..\component\ComM\Implementation\ComM.c	  4907  #endif
; ..\component\ComM\Implementation\ComM.c	  4908    {
; ..\component\ComM\Implementation\ComM.c	  4909      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4910      /* #30 If parameter checks are successful and the feature Mode Limitation to NO_COM is enabled and
; ..\component\ComM\Implementation\ComM.c	  4911       *     at least one channel has Nm Type other than PASSIVE, process the request. */
; ..\component\ComM\Implementation\ComM.c	  4912  #if ((COMM_MODE_LIMITATION == STD_ON) && (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  4913      SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_0();
; ..\component\ComM\Implementation\ComM.c	  4914  
; ..\component\ComM\Implementation\ComM.c	  4915      if (Status == TRUE)
; ..\component\ComM\Implementation\ComM.c	  4916      {
; ..\component\ComM\Implementation\ComM.c	  4917        /* #40 Accept a request for Mode Limitation to NO_COM if
; ..\component\ComM\Implementation\ComM.c	  4918         *     1) the channel is in state COMM_FULL_COM_NETWORK_REQUESTED and
; ..\component\ComM\Implementation\ComM.c	  4919         *     2) the channel has Nm Type other than NONE (because ComM does not shutdown communication on NONE) and
; ..\component\ComM\Implementation\ComM.c	  4920         *     3) ECU Group Classification supports Mode Limitation NO_COM. */
; ..\component\ComM\Implementation\ComM.c	  4921        /* ESCAN00068896 */
; ..\component\ComM\Implementation\ComM.c	  4922  # if (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  4923  #  if (COMM_EXISTS_NONE_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4924        if (ComM_GetNmTypeOfChannel(Channel) != COMM_NONE_NMTYPEOFCHANNEL)
; ..\component\ComM\Implementation\ComM.c	  4925  #  endif
; ..\component\ComM\Implementation\ComM.c	  4926        {
; ..\component\ComM\Implementation\ComM.c	  4927          if ((ComM_ActiveComMode[Channel] == COMM_FULL_COM_NETWORK_REQUESTED) &&
; ..\component\ComM\Implementation\ComM.c	  4928              ((ComM_Inhibition.ComM_ECUGroupClassification & COMM_MODE_LIMITATION_MASK) == COMM_MODE_LIMITATION_MASK ))
; ..\component\ComM\Implementation\ComM.c	  4929          {
; ..\component\ComM\Implementation\ComM.c	  4930            ComM_Inhibition.ComM_InhibitionStatus[Channel] |= COMM_MODE_LIMITATION_MASK; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4931            retVal = E_OK;
; ..\component\ComM\Implementation\ComM.c	  4932          }
; ..\component\ComM\Implementation\ComM.c	  4933        }
; ..\component\ComM\Implementation\ComM.c	  4934  # endif
; ..\component\ComM\Implementation\ComM.c	  4935      }
; ..\component\ComM\Implementation\ComM.c	  4936      else
; ..\component\ComM\Implementation\ComM.c	  4937      {
; ..\component\ComM\Implementation\ComM.c	  4938        /* #50 Accept releasing the Mode Limitation to NO_COM if the channel has Nm Type other than PASSIVE. */
; ..\component\ComM\Implementation\ComM.c	  4939        /* Note: a possible use case for NONE is when limitation has been set initially in the configuration. */
; ..\component\ComM\Implementation\ComM.c	  4940  # if (COMM_EXISTS_PASSIVE_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4941        if (ComM_GetNmTypeOfChannel(Channel) != COMM_PASSIVE_NMTYPEOFCHANNEL)
; ..\component\ComM\Implementation\ComM.c	  4942  # endif
; ..\component\ComM\Implementation\ComM.c	  4943        {
; ..\component\ComM\Implementation\ComM.c	  4944          ComM_Inhibition.ComM_InhibitionStatus[Channel] &= COMM_MODE_LIMITATION_CLEAR_MASK; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  4945          retVal = E_OK;
; ..\component\ComM\Implementation\ComM.c	  4946        }
; ..\component\ComM\Implementation\ComM.c	  4947      }
; ..\component\ComM\Implementation\ComM.c	  4948      SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_0();
; ..\component\ComM\Implementation\ComM.c	  4949  #endif
; ..\component\ComM\Implementation\ComM.c	  4950      /* #60 Reject the request if the feature Mode Limitation to NO_COM is disabled or all channels have Nm Type PASSIVE. */
; ..\component\ComM\Implementation\ComM.c	  4951      /* ESCAN00068896 */
; ..\component\ComM\Implementation\ComM.c	  4952    }
; ..\component\ComM\Implementation\ComM.c	  4953  
; ..\component\ComM\Implementation\ComM.c	  4954    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4955  #if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4956    if (errorId != COMM_E_NO_ERROR)
	jeq	d7,#0,.L76
.L732:

; ..\component\ComM\Implementation\ComM.c	  4957    {
; ..\component\ComM\Implementation\ComM.c	  4958      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_LIMITCHANNELTONOCOMMODE, errorId );
	fcall	.cocofun_2
.L560:
	mov	d6,#11
	call	Det_ReportError
.L76:

; ..\component\ComM\Implementation\ComM.c	  4959    }
; ..\component\ComM\Implementation\ComM.c	  4960  #else
; ..\component\ComM\Implementation\ComM.c	  4961    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4962  #endif
; ..\component\ComM\Implementation\ComM.c	  4963  
; ..\component\ComM\Implementation\ComM.c	  4964  #if ((COMM_MODE_LIMITATION == STD_OFF) || (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_OFF) || (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  4965    COMM_DUMMY_STATEMENT_CONST(Status); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4966  # if (COMM_DEV_ERROR_DETECT == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  4967    COMM_DUMMY_STATEMENT(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  4968  # endif
; ..\component\ComM\Implementation\ComM.c	  4969  #endif
; ..\component\ComM\Implementation\ComM.c	  4970  
; ..\component\ComM\Implementation\ComM.c	  4971    return retVal;
; ..\component\ComM\Implementation\ComM.c	  4972  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
	mov	d2,d8
	ret
.L452:
	
__ComM_LimitChannelToNoComMode_function_end:
	.size	ComM_LimitChannelToNoComMode,__ComM_LimitChannelToNoComMode_function_end-ComM_LimitChannelToNoComMode
.L267:
	; End of function
	
	.sdecl	'.text.ComM.ComM_LimitECUToNoComMode',code,cluster('ComM_LimitECUToNoComMode')
	.sect	'.text.ComM.ComM_LimitECUToNoComMode'
	.align	2
	
	.global	ComM_LimitECUToNoComMode

; ..\component\ComM\Implementation\ComM.c	  4973  
; ..\component\ComM\Implementation\ComM.c	  4974  
; ..\component\ComM\Implementation\ComM.c	  4975  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  4976   *  ComM_LimitECUToNoComMode()
; ..\component\ComM\Implementation\ComM.c	  4977   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  4978  /*!
; ..\component\ComM\Implementation\ComM.c	  4979   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  4980   *
; ..\component\ComM\Implementation\ComM.c	  4981   *
; ..\component\ComM\Implementation\ComM.c	  4982   *
; ..\component\ComM\Implementation\ComM.c	  4983   *
; ..\component\ComM\Implementation\ComM.c	  4984   *
; ..\component\ComM\Implementation\ComM.c	  4985   *
; ..\component\ComM\Implementation\ComM.c	  4986   */
; ..\component\ComM\Implementation\ComM.c	  4987  FUNC(Std_ReturnType, COMM_CODE) ComM_LimitECUToNoComMode(boolean Status)
; Function ComM_LimitECUToNoComMode
.L182:
ComM_LimitECUToNoComMode:	.type	func

; ..\component\ComM\Implementation\ComM.c	  4988  {
; ..\component\ComM\Implementation\ComM.c	  4989    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4990    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  4991    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  4992  #if ( (COMM_MODE_LIMITATION == STD_ON) && (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF) )
; ..\component\ComM\Implementation\ComM.c	  4993    NetworkHandleType ComM_ChannelIndex;
; ..\component\ComM\Implementation\ComM.c	  4994  #endif
; ..\component\ComM\Implementation\ComM.c	  4995  
; ..\component\ComM\Implementation\ComM.c	  4996    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  4997  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  4998    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  4999    if (ComM_InitStatus != COMM_INIT)
	mov	d0,#0
	fcall	.cocofun_1
.L737:
	jeq	d15,#1,.L78
.L738:

; ..\component\ComM\Implementation\ComM.c	  5000    {
; ..\component\ComM\Implementation\ComM.c	  5001      errorId = COMM_E_NOT_INITED;
	mov	d0,#1
.L739:

; ..\component\ComM\Implementation\ComM.c	  5002      retVal = COMM_E_UNINIT;
	mov	d15,#3
.L78:

; ..\component\ComM\Implementation\ComM.c	  5003    }
; ..\component\ComM\Implementation\ComM.c	  5004    else
; ..\component\ComM\Implementation\ComM.c	  5005  #endif
; ..\component\ComM\Implementation\ComM.c	  5006    {
; ..\component\ComM\Implementation\ComM.c	  5007      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5008      /* #20 If parameter checks are successful and the feature Mode Limitation to NO_COM is enabled and
; ..\component\ComM\Implementation\ComM.c	  5009       *     at least one channel has Nm Type other than PASSIVE and channels other than only Nm Type NONE exist, request mode limitation for each channel. */
; ..\component\ComM\Implementation\ComM.c	  5010  #if ( (COMM_MODE_LIMITATION == STD_ON) && (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON) && (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_OFF) )
; ..\component\ComM\Implementation\ComM.c	  5011      retVal = E_OK;
; ..\component\ComM\Implementation\ComM.c	  5012      for(ComM_ChannelIndex = 0; ComM_ChannelIndex < ComM_GetSizeOfChannel(); ComM_ChannelIndex++)
; ..\component\ComM\Implementation\ComM.c	  5013      {
; ..\component\ComM\Implementation\ComM.c	  5014  # if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5015        if(ComM_IsEnabledOfChannel(ComM_ChannelIndex))
; ..\component\ComM\Implementation\ComM.c	  5016  # endif
; ..\component\ComM\Implementation\ComM.c	  5017        {
; ..\component\ComM\Implementation\ComM.c	  5018          if( ComM_LimitChannelToNoComMode(ComM_ChannelIndex, Status) != E_OK )
; ..\component\ComM\Implementation\ComM.c	  5019          {
; ..\component\ComM\Implementation\ComM.c	  5020            /* #30 If the request failed for at least one channel, the overall status shall be E_NOT_OK as well. */
; ..\component\ComM\Implementation\ComM.c	  5021            /* ESCAN00068896 */
; ..\component\ComM\Implementation\ComM.c	  5022            retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  5023          }
; ..\component\ComM\Implementation\ComM.c	  5024        }
; ..\component\ComM\Implementation\ComM.c	  5025      }
; ..\component\ComM\Implementation\ComM.c	  5026  #else
; ..\component\ComM\Implementation\ComM.c	  5027      /* #40 Reject the request if the feature Mode Limitation to NO_COM is disabled or all channels have Nm Type PASSIVE or all channels have only Nm Type NONE. */
; ..\component\ComM\Implementation\ComM.c	  5028      /* (ESCAN00068896) */
; ..\component\ComM\Implementation\ComM.c	  5029      retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  5030  #endif
; ..\component\ComM\Implementation\ComM.c	  5031    }
; ..\component\ComM\Implementation\ComM.c	  5032  
; ..\component\ComM\Implementation\ComM.c	  5033    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5034  #if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5035    if (errorId != COMM_E_NO_ERROR)
	jeq	d0,#0,.L80
.L740:

; ..\component\ComM\Implementation\ComM.c	  5036    {
; ..\component\ComM\Implementation\ComM.c	  5037      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_LIMITECUTONOCOMMODE, errorId );
	fcall	.cocofun_2
.L562:
	mov	d6,d4
.L741:
	mov	d7,#1
	call	Det_ReportError
.L80:

; ..\component\ComM\Implementation\ComM.c	  5038    }
; ..\component\ComM\Implementation\ComM.c	  5039  #else
; ..\component\ComM\Implementation\ComM.c	  5040    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5041  #endif
; ..\component\ComM\Implementation\ComM.c	  5042  
; ..\component\ComM\Implementation\ComM.c	  5043  #if ( ((COMM_MODE_LIMITATION == STD_OFF) || (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_OFF)) || (COMM_EXISTS_ONLY_NONE_NMTYPEOFCHANNEL == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  5044    COMM_DUMMY_STATEMENT_CONST(Status); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5045  #endif
; ..\component\ComM\Implementation\ComM.c	  5046  
; ..\component\ComM\Implementation\ComM.c	  5047    return retVal;
; ..\component\ComM\Implementation\ComM.c	  5048  }
	mov	d2,d15
	ret
.L457:
	
__ComM_LimitECUToNoComMode_function_end:
	.size	ComM_LimitECUToNoComMode,__ComM_LimitECUToNoComMode_function_end-ComM_LimitECUToNoComMode
.L272:
	; End of function
	
	.sdecl	'.text.ComM.ComM_ReadInhibitCounter',code,cluster('ComM_ReadInhibitCounter')
	.sect	'.text.ComM.ComM_ReadInhibitCounter'
	.align	2
	
	.global	ComM_ReadInhibitCounter

; ..\component\ComM\Implementation\ComM.c	  5049  
; ..\component\ComM\Implementation\ComM.c	  5050  
; ..\component\ComM\Implementation\ComM.c	  5051  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5052   *  ComM_ReadInhibitCounter()
; ..\component\ComM\Implementation\ComM.c	  5053   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5054  /*!
; ..\component\ComM\Implementation\ComM.c	  5055   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5056   *
; ..\component\ComM\Implementation\ComM.c	  5057   *
; ..\component\ComM\Implementation\ComM.c	  5058   *
; ..\component\ComM\Implementation\ComM.c	  5059   *
; ..\component\ComM\Implementation\ComM.c	  5060   */
; ..\component\ComM\Implementation\ComM.c	  5061  FUNC(Std_ReturnType, COMM_CODE) ComM_ReadInhibitCounter(P2VAR(uint16, AUTOMATIC, COMM_APPL_VAR) CounterValue)
; Function ComM_ReadInhibitCounter
.L184:
ComM_ReadInhibitCounter:	.type	func

; ..\component\ComM\Implementation\ComM.c	  5062  {
; ..\component\ComM\Implementation\ComM.c	  5063    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5064    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  5065    uint8 errorId = COMM_E_NO_ERROR;
	mov	d7,#0
.L563:

; ..\component\ComM\Implementation\ComM.c	  5066  
; ..\component\ComM\Implementation\ComM.c	  5067    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5068  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5069    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  5070    retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  5071    if (ComM_InitStatus != COMM_INIT)
	mov	d8,#1
	fcall	.cocofun_1
.L746:
	jeq	d15,#1,.L82
.L747:

; ..\component\ComM\Implementation\ComM.c	  5072    {
; ..\component\ComM\Implementation\ComM.c	  5073      errorId = COMM_E_NOT_INITED;
	mov	d7,d8
.L748:

; ..\component\ComM\Implementation\ComM.c	  5074      retVal = COMM_E_UNINIT;
	mov	d8,#3
	j	.L83
.L82:

; ..\component\ComM\Implementation\ComM.c	  5075    }
; ..\component\ComM\Implementation\ComM.c	  5076    /* #20 Check parameter 'CounterValue': it must be a valid pointer. */
; ..\component\ComM\Implementation\ComM.c	  5077    else if (CounterValue == NULL_PTR)
	jnz.a	a4,.L84
.L749:

; ..\component\ComM\Implementation\ComM.c	  5078    {
; ..\component\ComM\Implementation\ComM.c	  5079      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d7,#2
	j	.L85
.L84:

; ..\component\ComM\Implementation\ComM.c	  5080    }
; ..\component\ComM\Implementation\ComM.c	  5081    else
; ..\component\ComM\Implementation\ComM.c	  5082  #endif
; ..\component\ComM\Implementation\ComM.c	  5083    {
; ..\component\ComM\Implementation\ComM.c	  5084      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5085      /* #40 If parameter checks are successful, store the inhibition counter. */
; ..\component\ComM\Implementation\ComM.c	  5086      *CounterValue = ComM_Inhibition.ComM_InhibitCnt; /* SBSW_COMM_PARAMETER_PTR_WRITE */
	movh.a	a15,#@his(ComM_Inhibition+2)
.L750:

; ..\component\ComM\Implementation\ComM.c	  5087      retVal = E_OK;
	mov	d8,#0
	ld.hu	d15,[a15]@los(ComM_Inhibition+2)
.L751:
	st.h	[a4],d15
.L85:
.L83:

; ..\component\ComM\Implementation\ComM.c	  5088    }
; ..\component\ComM\Implementation\ComM.c	  5089  
; ..\component\ComM\Implementation\ComM.c	  5090    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5091  #if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5092    if (errorId != COMM_E_NO_ERROR)
	jeq	d7,#0,.L86
.L752:

; ..\component\ComM\Implementation\ComM.c	  5093    {
; ..\component\ComM\Implementation\ComM.c	  5094      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_READINHIBITCOUNTER, errorId );
	fcall	.cocofun_2
.L753:
	mov	d6,#13
	call	Det_ReportError
.L86:

; ..\component\ComM\Implementation\ComM.c	  5095    }
; ..\component\ComM\Implementation\ComM.c	  5096  #else
; ..\component\ComM\Implementation\ComM.c	  5097    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5098  #endif
; ..\component\ComM\Implementation\ComM.c	  5099  
; ..\component\ComM\Implementation\ComM.c	  5100    return retVal;
; ..\component\ComM\Implementation\ComM.c	  5101  }
	mov	d2,d8
	ret
.L461:
	
__ComM_ReadInhibitCounter_function_end:
	.size	ComM_ReadInhibitCounter,__ComM_ReadInhibitCounter_function_end-ComM_ReadInhibitCounter
.L277:
	; End of function
	
	.sdecl	'.text.ComM.ComM_ResetInhibitCounter',code,cluster('ComM_ResetInhibitCounter')
	.sect	'.text.ComM.ComM_ResetInhibitCounter'
	.align	2
	
	.global	ComM_ResetInhibitCounter

; ..\component\ComM\Implementation\ComM.c	  5102  
; ..\component\ComM\Implementation\ComM.c	  5103  
; ..\component\ComM\Implementation\ComM.c	  5104  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5105   *  ComM_ResetInhibitCounter()
; ..\component\ComM\Implementation\ComM.c	  5106   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5107  /*!
; ..\component\ComM\Implementation\ComM.c	  5108   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5109   *
; ..\component\ComM\Implementation\ComM.c	  5110   *
; ..\component\ComM\Implementation\ComM.c	  5111   *
; ..\component\ComM\Implementation\ComM.c	  5112   */
; ..\component\ComM\Implementation\ComM.c	  5113  FUNC(Std_ReturnType, COMM_CODE) ComM_ResetInhibitCounter(void)
; Function ComM_ResetInhibitCounter
.L186:
ComM_ResetInhibitCounter:	.type	func

; ..\component\ComM\Implementation\ComM.c	  5114  {
; ..\component\ComM\Implementation\ComM.c	  5115    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5116    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  5117    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  5118  
; ..\component\ComM\Implementation\ComM.c	  5119    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5120  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5121    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  5122    if (ComM_InitStatus != COMM_INIT)
	mov	d0,#0
	fcall	.cocofun_1
.L758:
	jeq	d15,#1,.L88
.L759:

; ..\component\ComM\Implementation\ComM.c	  5123    {
; ..\component\ComM\Implementation\ComM.c	  5124      errorId = COMM_E_NOT_INITED;
	mov	d0,#1
.L760:

; ..\component\ComM\Implementation\ComM.c	  5125      retVal = COMM_E_UNINIT;
	mov	d15,#3
	j	.L89
.L88:

; ..\component\ComM\Implementation\ComM.c	  5126    }
; ..\component\ComM\Implementation\ComM.c	  5127    else
; ..\component\ComM\Implementation\ComM.c	  5128  #endif
; ..\component\ComM\Implementation\ComM.c	  5129    {
; ..\component\ComM\Implementation\ComM.c	  5130      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5131      /* #30 If parameter checks are successful, set the inhibition counter to 0 and mark NvM data to be stored if NvM support is enabled. */
; ..\component\ComM\Implementation\ComM.c	  5132      ComM_Inhibition.ComM_InhibitCnt = (uint16)0x00;
	movh.a	a15,#@his(ComM_Inhibition+2)
.L761:
	mov	d15,#0
	st.h	[a15]@los(ComM_Inhibition+2),d15
.L89:

; ..\component\ComM\Implementation\ComM.c	  5133  
; ..\component\ComM\Implementation\ComM.c	  5134  #if (COMM_NVM_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5135      ComM_NvMStoreReq = TRUE;
; ..\component\ComM\Implementation\ComM.c	  5136  #endif
; ..\component\ComM\Implementation\ComM.c	  5137      retVal = E_OK;
; ..\component\ComM\Implementation\ComM.c	  5138    }
; ..\component\ComM\Implementation\ComM.c	  5139  
; ..\component\ComM\Implementation\ComM.c	  5140    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5141  #if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5142    if (errorId != COMM_E_NO_ERROR)
	jeq	d0,#0,.L90
.L762:

; ..\component\ComM\Implementation\ComM.c	  5143    {
; ..\component\ComM\Implementation\ComM.c	  5144      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_RESETINHIBITCOUNTER, errorId );
	fcall	.cocofun_2
.L763:
	mov	d6,#14
.L764:
	mov	d7,#1
	call	Det_ReportError
.L90:

; ..\component\ComM\Implementation\ComM.c	  5145    }
; ..\component\ComM\Implementation\ComM.c	  5146  #else
; ..\component\ComM\Implementation\ComM.c	  5147    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5148  #endif
; ..\component\ComM\Implementation\ComM.c	  5149  
; ..\component\ComM\Implementation\ComM.c	  5150    return retVal;
; ..\component\ComM\Implementation\ComM.c	  5151  }
	mov	d2,d15
	ret
.L466:
	
__ComM_ResetInhibitCounter_function_end:
	.size	ComM_ResetInhibitCounter,__ComM_ResetInhibitCounter_function_end-ComM_ResetInhibitCounter
.L282:
	; End of function
	
	.sdecl	'.text.ComM.ComM_SetECUGroupClassification',code,cluster('ComM_SetECUGroupClassification')
	.sect	'.text.ComM.ComM_SetECUGroupClassification'
	.align	2
	
	.global	ComM_SetECUGroupClassification

; ..\component\ComM\Implementation\ComM.c	  5152  
; ..\component\ComM\Implementation\ComM.c	  5153  
; ..\component\ComM\Implementation\ComM.c	  5154  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5155   *  ComM_SetECUGroupClassification()
; ..\component\ComM\Implementation\ComM.c	  5156   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5157  /*!
; ..\component\ComM\Implementation\ComM.c	  5158   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5159   *
; ..\component\ComM\Implementation\ComM.c	  5160   *
; ..\component\ComM\Implementation\ComM.c	  5161   *
; ..\component\ComM\Implementation\ComM.c	  5162   *
; ..\component\ComM\Implementation\ComM.c	  5163   */
; ..\component\ComM\Implementation\ComM.c	  5164  FUNC(Std_ReturnType, COMM_CODE) ComM_SetECUGroupClassification(ComM_InhibitionStatusType Status)
; Function ComM_SetECUGroupClassification
.L188:
ComM_SetECUGroupClassification:	.type	func

; ..\component\ComM\Implementation\ComM.c	  5165  {
; ..\component\ComM\Implementation\ComM.c	  5166    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5167    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  5168    uint8 errorId = COMM_E_NO_ERROR;
	mov	d7,#0
.L565:

; ..\component\ComM\Implementation\ComM.c	  5169  
; ..\component\ComM\Implementation\ComM.c	  5170    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5171  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5172    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  5173    retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  5174    if (ComM_InitStatus != COMM_INIT)
	mov	d8,#1
	fcall	.cocofun_1
.L769:
	jeq	d15,#1,.L92
.L770:

; ..\component\ComM\Implementation\ComM.c	  5175    {
; ..\component\ComM\Implementation\ComM.c	  5176      errorId = COMM_E_NOT_INITED;
	mov	d7,d8
.L771:

; ..\component\ComM\Implementation\ComM.c	  5177      retVal = COMM_E_UNINIT;
	mov	d8,#3
	j	.L93
.L92:

; ..\component\ComM\Implementation\ComM.c	  5178    }
; ..\component\ComM\Implementation\ComM.c	  5179    /* #20 Check parameter 'Status': it must have a value between 0 and 3. */
; ..\component\ComM\Implementation\ComM.c	  5180    else if (Status > 0x03u)
	jlt.u	d4,#4,.L94
.L772:

; ..\component\ComM\Implementation\ComM.c	  5181    {
; ..\component\ComM\Implementation\ComM.c	  5182      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d7,#2
	j	.L95
.L94:

; ..\component\ComM\Implementation\ComM.c	  5183    }
; ..\component\ComM\Implementation\ComM.c	  5184    else
; ..\component\ComM\Implementation\ComM.c	  5185  #endif
; ..\component\ComM\Implementation\ComM.c	  5186    {
; ..\component\ComM\Implementation\ComM.c	  5187      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5188      /* #30 If parameter checks are successful, set ECU group classification and mark NvM data to be stored if NvM is supported. */
; ..\component\ComM\Implementation\ComM.c	  5189      ComM_Inhibition.ComM_ECUGroupClassification = Status;
; ..\component\ComM\Implementation\ComM.c	  5190  
; ..\component\ComM\Implementation\ComM.c	  5191  #if (COMM_NVM_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5192      ComM_NvMStoreReq = TRUE;
; ..\component\ComM\Implementation\ComM.c	  5193  #endif
; ..\component\ComM\Implementation\ComM.c	  5194      retVal = E_OK;
	mov	d8,#0
	movh.a	a15,#@his(ComM_Inhibition)
.L773:
	st.b	[a15]@los(ComM_Inhibition),d4
.L95:
.L93:

; ..\component\ComM\Implementation\ComM.c	  5195    }
; ..\component\ComM\Implementation\ComM.c	  5196  
; ..\component\ComM\Implementation\ComM.c	  5197    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5198  #if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5199    if (errorId != COMM_E_NO_ERROR)
	jeq	d7,#0,.L96
.L774:

; ..\component\ComM\Implementation\ComM.c	  5200    {
; ..\component\ComM\Implementation\ComM.c	  5201      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_SETECUGROUPCLASSIFICATION, errorId );
	fcall	.cocofun_2
.L564:
	mov	d6,#15
	call	Det_ReportError
.L96:

; ..\component\ComM\Implementation\ComM.c	  5202    }
; ..\component\ComM\Implementation\ComM.c	  5203  #else
; ..\component\ComM\Implementation\ComM.c	  5204    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5205  #endif
; ..\component\ComM\Implementation\ComM.c	  5206  
; ..\component\ComM\Implementation\ComM.c	  5207    return retVal;
; ..\component\ComM\Implementation\ComM.c	  5208  }
	mov	d2,d8
	ret
.L469:
	
__ComM_SetECUGroupClassification_function_end:
	.size	ComM_SetECUGroupClassification,__ComM_SetECUGroupClassification_function_end-ComM_SetECUGroupClassification
.L287:
	; End of function
	
	.sdecl	'.text.ComM.ComM_CommunicationAllowed',code,cluster('ComM_CommunicationAllowed')
	.sect	'.text.ComM.ComM_CommunicationAllowed'
	.align	2
	
	.global	ComM_CommunicationAllowed

; ..\component\ComM\Implementation\ComM.c	  5209  
; ..\component\ComM\Implementation\ComM.c	  5210  
; ..\component\ComM\Implementation\ComM.c	  5211  #if (COMM_VERSION_INFO_API == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5212  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5213   *  ComM_GetVersionInfo()
; ..\component\ComM\Implementation\ComM.c	  5214   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5215  /*!
; ..\component\ComM\Implementation\ComM.c	  5216   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5217   *
; ..\component\ComM\Implementation\ComM.c	  5218   *
; ..\component\ComM\Implementation\ComM.c	  5219   *
; ..\component\ComM\Implementation\ComM.c	  5220   */
; ..\component\ComM\Implementation\ComM.c	  5221  FUNC(void, COMM_CODE) ComM_GetVersionInfo(P2VAR(Std_VersionInfoType, AUTOMATIC, COMM_APPL_VAR) Versioninfo)
; ..\component\ComM\Implementation\ComM.c	  5222  {
; ..\component\ComM\Implementation\ComM.c	  5223    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5224    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  5225  
; ..\component\ComM\Implementation\ComM.c	  5226    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5227  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5228    /* #10 Check Versioninfo for NULL pointer. Note: no initialization check is needed. */
; ..\component\ComM\Implementation\ComM.c	  5229    if (Versioninfo == NULL_PTR)
; ..\component\ComM\Implementation\ComM.c	  5230    {
; ..\component\ComM\Implementation\ComM.c	  5231      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  5232    }
; ..\component\ComM\Implementation\ComM.c	  5233    else
; ..\component\ComM\Implementation\ComM.c	  5234  # endif
; ..\component\ComM\Implementation\ComM.c	  5235    {
; ..\component\ComM\Implementation\ComM.c	  5236      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5237      /* #20 Set Versioninfo with corresponding macros from component header. */
; ..\component\ComM\Implementation\ComM.c	  5238      Versioninfo->vendorID = COMM_VENDOR_ID; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5239      Versioninfo->moduleID = COMM_MODULE_ID; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5240      Versioninfo->sw_major_version = (uint8)COMM_SW_MAJOR_VERSION; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5241      Versioninfo->sw_minor_version = COMM_SW_MINOR_VERSION; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5242      Versioninfo->sw_patch_version = COMM_SW_PATCH_VERSION; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5243    }
; ..\component\ComM\Implementation\ComM.c	  5244  
; ..\component\ComM\Implementation\ComM.c	  5245    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5246  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5247    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  5248    {
; ..\component\ComM\Implementation\ComM.c	  5249      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_GETVERSIONINFO, errorId );
; ..\component\ComM\Implementation\ComM.c	  5250    }
; ..\component\ComM\Implementation\ComM.c	  5251  # else
; ..\component\ComM\Implementation\ComM.c	  5252    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5253  # endif
; ..\component\ComM\Implementation\ComM.c	  5254  }
; ..\component\ComM\Implementation\ComM.c	  5255  #endif
; ..\component\ComM\Implementation\ComM.c	  5256  
; ..\component\ComM\Implementation\ComM.c	  5257  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5258   *  ComM_CommunicationAllowed()
; ..\component\ComM\Implementation\ComM.c	  5259   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5260  /*!
; ..\component\ComM\Implementation\ComM.c	  5261   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5262   *
; ..\component\ComM\Implementation\ComM.c	  5263   *
; ..\component\ComM\Implementation\ComM.c	  5264   *
; ..\component\ComM\Implementation\ComM.c	  5265   *
; ..\component\ComM\Implementation\ComM.c	  5266   */
; ..\component\ComM\Implementation\ComM.c	  5267  FUNC(void, COMM_CODE) ComM_CommunicationAllowed(NetworkHandleType Channel, boolean Allowed)
; Function ComM_CommunicationAllowed
.L190:
ComM_CommunicationAllowed:	.type	func

; ..\component\ComM\Implementation\ComM.c	  5268  {
; ..\component\ComM\Implementation\ComM.c	  5269    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5270    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  5271  
; ..\component\ComM\Implementation\ComM.c	  5272    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5273  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5274    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  5275    if (ComM_InitStatus != COMM_INIT)
	mov	d7,#0
	fcall	.cocofun_1
.L779:
	jeq	d15,#1,.L98
.L780:

; ..\component\ComM\Implementation\ComM.c	  5276    {
; ..\component\ComM\Implementation\ComM.c	  5277      errorId = COMM_E_NOT_INITED;
	mov	d7,#1
	j	.L99
.L98:

; ..\component\ComM\Implementation\ComM.c	  5278    }
; ..\component\ComM\Implementation\ComM.c	  5279    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  5280    else if ((Channel >= COMM_ACTIVE_CHANNEL)
	jeq	d4,#0,.L100
.L781:

; ..\component\ComM\Implementation\ComM.c	  5281  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5282     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  5283  #  endif
; ..\component\ComM\Implementation\ComM.c	  5284         )
; ..\component\ComM\Implementation\ComM.c	  5285    {
; ..\component\ComM\Implementation\ComM.c	  5286      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d7,#2
	j	.L101
.L100:

; ..\component\ComM\Implementation\ComM.c	  5287    }
; ..\component\ComM\Implementation\ComM.c	  5288    else
; ..\component\ComM\Implementation\ComM.c	  5289  # endif
; ..\component\ComM\Implementation\ComM.c	  5290    {
; ..\component\ComM\Implementation\ComM.c	  5291      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5292      /* #30 If parameter checks are successful, store the Communication Allowed status of the Channel. */
; ..\component\ComM\Implementation\ComM.c	  5293      ComM_ComAllowed[Channel] = Allowed; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
	movh.a	a15,#@his(ComM_ComAllowed)
.L782:
	st.b	[a15]@los(ComM_ComAllowed),d5
.L101:
.L99:

; ..\component\ComM\Implementation\ComM.c	  5294    }
; ..\component\ComM\Implementation\ComM.c	  5295  
; ..\component\ComM\Implementation\ComM.c	  5296    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5297  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5298    if (errorId != COMM_E_NO_ERROR)
	jeq	d7,#0,.L102
.L783:

; ..\component\ComM\Implementation\ComM.c	  5299    {
; ..\component\ComM\Implementation\ComM.c	  5300      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_COMMUNICATIONALLOWED, errorId );
	fcall	.cocofun_2
.L566:
	mov	d6,#53
.L784:
	j	Det_ReportError
.L102:

; ..\component\ComM\Implementation\ComM.c	  5301    }
; ..\component\ComM\Implementation\ComM.c	  5302  # else
; ..\component\ComM\Implementation\ComM.c	  5303    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5304  # endif
; ..\component\ComM\Implementation\ComM.c	  5305  }
	ret
.L473:
	
__ComM_CommunicationAllowed_function_end:
	.size	ComM_CommunicationAllowed,__ComM_CommunicationAllowed_function_end-ComM_CommunicationAllowed
.L292:
	; End of function
	
	.sdecl	'.text.ComM.ComM_MainFunction',code,cluster('ComM_MainFunction')
	.sect	'.text.ComM.ComM_MainFunction'
	.align	2
	
	.global	ComM_MainFunction

; ..\component\ComM\Implementation\ComM.c	  5306  
; ..\component\ComM\Implementation\ComM.c	  5307  #if (COMM_DCM_INDICATION == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5308  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5309   *  ComM_GetDcmRequestStatus()
; ..\component\ComM\Implementation\ComM.c	  5310   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5311  /*!
; ..\component\ComM\Implementation\ComM.c	  5312   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5313   *
; ..\component\ComM\Implementation\ComM.c	  5314   *
; ..\component\ComM\Implementation\ComM.c	  5315   *
; ..\component\ComM\Implementation\ComM.c	  5316   *
; ..\component\ComM\Implementation\ComM.c	  5317   *
; ..\component\ComM\Implementation\ComM.c	  5318   */
; ..\component\ComM\Implementation\ComM.c	  5319  FUNC(Std_ReturnType, COMM_CODE) ComM_GetDcmRequestStatus(NetworkHandleType Channel, P2VAR(boolean, AUTOMATIC, COMM_APPL_VAR) Status)
; ..\component\ComM\Implementation\ComM.c	  5320  {
; ..\component\ComM\Implementation\ComM.c	  5321    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5322    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  5323    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  5324  
; ..\component\ComM\Implementation\ComM.c	  5325    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5326  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5327    retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  5328    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  5329    if (ComM_InitStatus != COMM_INIT)
; ..\component\ComM\Implementation\ComM.c	  5330    {
; ..\component\ComM\Implementation\ComM.c	  5331      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  5332      retVal = COMM_E_UNINIT;
; ..\component\ComM\Implementation\ComM.c	  5333    }
; ..\component\ComM\Implementation\ComM.c	  5334    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  5335    else if ((Channel >= COMM_ACTIVE_CHANNEL)
; ..\component\ComM\Implementation\ComM.c	  5336  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5337     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  5338  #  endif
; ..\component\ComM\Implementation\ComM.c	  5339         )
; ..\component\ComM\Implementation\ComM.c	  5340    {
; ..\component\ComM\Implementation\ComM.c	  5341      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  5342    }
; ..\component\ComM\Implementation\ComM.c	  5343    /* #30 Check parameter 'Status': it must be a valid pointer. */
; ..\component\ComM\Implementation\ComM.c	  5344    else if (Status == NULL_PTR)
; ..\component\ComM\Implementation\ComM.c	  5345    {
; ..\component\ComM\Implementation\ComM.c	  5346      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  5347    }
; ..\component\ComM\Implementation\ComM.c	  5348    else
; ..\component\ComM\Implementation\ComM.c	  5349  # endif
; ..\component\ComM\Implementation\ComM.c	  5350    {
; ..\component\ComM\Implementation\ComM.c	  5351      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5352      /* #40 Store TRUE if Dcm indicated active diagnostic. Store FALSE otherwise. */
; ..\component\ComM\Implementation\ComM.c	  5353  # if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5354      if (ComM_IsDcmRequestActive(Channel)) /* COV_COMM_NM_LINSLAVE_ONLY XF */
; ..\component\ComM\Implementation\ComM.c	  5355      {
; ..\component\ComM\Implementation\ComM.c	  5356        *Status = TRUE; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5357      }
; ..\component\ComM\Implementation\ComM.c	  5358      else
; ..\component\ComM\Implementation\ComM.c	  5359  # endif
; ..\component\ComM\Implementation\ComM.c	  5360      {
; ..\component\ComM\Implementation\ComM.c	  5361        *Status = FALSE; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5362      }
; ..\component\ComM\Implementation\ComM.c	  5363  
; ..\component\ComM\Implementation\ComM.c	  5364      retVal = E_OK;
; ..\component\ComM\Implementation\ComM.c	  5365    }
; ..\component\ComM\Implementation\ComM.c	  5366  
; ..\component\ComM\Implementation\ComM.c	  5367    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5368  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5369    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  5370    {
; ..\component\ComM\Implementation\ComM.c	  5371      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_GETDCMREQUESTSTATUS, errorId );
; ..\component\ComM\Implementation\ComM.c	  5372    }
; ..\component\ComM\Implementation\ComM.c	  5373  # else
; ..\component\ComM\Implementation\ComM.c	  5374    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5375    COMM_DUMMY_STATEMENT(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5376  # endif
; ..\component\ComM\Implementation\ComM.c	  5377  
; ..\component\ComM\Implementation\ComM.c	  5378    return retVal;
; ..\component\ComM\Implementation\ComM.c	  5379  }
; ..\component\ComM\Implementation\ComM.c	  5380  #endif
; ..\component\ComM\Implementation\ComM.c	  5381  
; ..\component\ComM\Implementation\ComM.c	  5382  #if (COMM_MINFULLCOMTIMEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5383  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5384   *  ComM_GetMinFullComModeTimerStatus()
; ..\component\ComM\Implementation\ComM.c	  5385   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5386  /*!
; ..\component\ComM\Implementation\ComM.c	  5387   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5388   *
; ..\component\ComM\Implementation\ComM.c	  5389   *
; ..\component\ComM\Implementation\ComM.c	  5390   *
; ..\component\ComM\Implementation\ComM.c	  5391   *
; ..\component\ComM\Implementation\ComM.c	  5392   *
; ..\component\ComM\Implementation\ComM.c	  5393   */
; ..\component\ComM\Implementation\ComM.c	  5394  FUNC(Std_ReturnType, COMM_CODE) ComM_GetMinFullComModeTimerStatus(NetworkHandleType Channel, P2VAR(boolean, AUTOMATIC, COMM_APPL_VAR) Status)
; ..\component\ComM\Implementation\ComM.c	  5395  {
; ..\component\ComM\Implementation\ComM.c	  5396    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5397    Std_ReturnType retVal;
; ..\component\ComM\Implementation\ComM.c	  5398    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  5399  
; ..\component\ComM\Implementation\ComM.c	  5400    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5401  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5402    retVal = E_NOT_OK;
; ..\component\ComM\Implementation\ComM.c	  5403    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  5404    if (ComM_InitStatus != COMM_INIT)
; ..\component\ComM\Implementation\ComM.c	  5405    {
; ..\component\ComM\Implementation\ComM.c	  5406      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  5407      retVal = COMM_E_UNINIT;
; ..\component\ComM\Implementation\ComM.c	  5408    }
; ..\component\ComM\Implementation\ComM.c	  5409    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  5410    else if ((Channel >= COMM_ACTIVE_CHANNEL)
; ..\component\ComM\Implementation\ComM.c	  5411  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5412     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  5413  #  endif
; ..\component\ComM\Implementation\ComM.c	  5414         )
; ..\component\ComM\Implementation\ComM.c	  5415    {
; ..\component\ComM\Implementation\ComM.c	  5416      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  5417    }
; ..\component\ComM\Implementation\ComM.c	  5418    /* #30 Check parameter 'Status': it must be a valid pointer. */
; ..\component\ComM\Implementation\ComM.c	  5419    else if (Status == NULL_PTR)
; ..\component\ComM\Implementation\ComM.c	  5420    {
; ..\component\ComM\Implementation\ComM.c	  5421      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  5422    }
; ..\component\ComM\Implementation\ComM.c	  5423    else
; ..\component\ComM\Implementation\ComM.c	  5424  # endif
; ..\component\ComM\Implementation\ComM.c	  5425    {
; ..\component\ComM\Implementation\ComM.c	  5426      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5427      /* #40 Store TRUE if MinFullComModeTimer is running. Store FALSE otherwise. */
; ..\component\ComM\Implementation\ComM.c	  5428      if (ComM_GetMinFullComModeTimer(Channel) > 0x00u)
; ..\component\ComM\Implementation\ComM.c	  5429      {
; ..\component\ComM\Implementation\ComM.c	  5430        *Status = TRUE; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5431      }
; ..\component\ComM\Implementation\ComM.c	  5432      else
; ..\component\ComM\Implementation\ComM.c	  5433      {
; ..\component\ComM\Implementation\ComM.c	  5434        *Status = FALSE; /* SBSW_COMM_PARAMETER_PTR_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5435      }
; ..\component\ComM\Implementation\ComM.c	  5436  
; ..\component\ComM\Implementation\ComM.c	  5437      retVal = E_OK;
; ..\component\ComM\Implementation\ComM.c	  5438    }
; ..\component\ComM\Implementation\ComM.c	  5439  
; ..\component\ComM\Implementation\ComM.c	  5440    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5441  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5442    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  5443    {
; ..\component\ComM\Implementation\ComM.c	  5444      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_GETMINFULLCOMMODETIMERSTATUS, errorId );
; ..\component\ComM\Implementation\ComM.c	  5445    }
; ..\component\ComM\Implementation\ComM.c	  5446  # else
; ..\component\ComM\Implementation\ComM.c	  5447    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5448  # endif
; ..\component\ComM\Implementation\ComM.c	  5449  
; ..\component\ComM\Implementation\ComM.c	  5450    return retVal;
; ..\component\ComM\Implementation\ComM.c	  5451  }
; ..\component\ComM\Implementation\ComM.c	  5452  #endif
; ..\component\ComM\Implementation\ComM.c	  5453  
; ..\component\ComM\Implementation\ComM.c	  5454  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5455   *  ComM_MainFunction()
; ..\component\ComM\Implementation\ComM.c	  5456   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5457  /*!
; ..\component\ComM\Implementation\ComM.c	  5458   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5459   *
; ..\component\ComM\Implementation\ComM.c	  5460   *
; ..\component\ComM\Implementation\ComM.c	  5461   *
; ..\component\ComM\Implementation\ComM.c	  5462   *
; ..\component\ComM\Implementation\ComM.c	  5463   *
; ..\component\ComM\Implementation\ComM.c	  5464   *
; ..\component\ComM\Implementation\ComM.c	  5465   *
; ..\component\ComM\Implementation\ComM.c	  5466   *
; ..\component\ComM\Implementation\ComM.c	  5467   *
; ..\component\ComM\Implementation\ComM.c	  5468   *
; ..\component\ComM\Implementation\ComM.c	  5469   *
; ..\component\ComM\Implementation\ComM.c	  5470   *
; ..\component\ComM\Implementation\ComM.c	  5471   *
; ..\component\ComM\Implementation\ComM.c	  5472   *
; ..\component\ComM\Implementation\ComM.c	  5473   *
; ..\component\ComM\Implementation\ComM.c	  5474   *
; ..\component\ComM\Implementation\ComM.c	  5475   *
; ..\component\ComM\Implementation\ComM.c	  5476   *
; ..\component\ComM\Implementation\ComM.c	  5477   */
; ..\component\ComM\Implementation\ComM.c	  5478  FUNC(void, COMM_CODE) ComM_MainFunction(NetworkHandleType Channel)
; Function ComM_MainFunction
.L192:
ComM_MainFunction:	.type	func
	sub.a	a10,#8
.L567:

; ..\component\ComM\Implementation\ComM.c	  5479  {
; ..\component\ComM\Implementation\ComM.c	  5480    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5481    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  5482    ComM_StateType  highestComModeReq;     /* The highest Com mode request */
; ..\component\ComM\Implementation\ComM.c	  5483    boolean  internalRequest;
; ..\component\ComM\Implementation\ComM.c	  5484  
; ..\component\ComM\Implementation\ComM.c	  5485    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5486    /* #10 Check that module is initialized. If not, the function returns immediately without performing any functionality and without raising any errors. */
; ..\component\ComM\Implementation\ComM.c	  5487    if (ComM_InitStatus != COMM_INIT)
	mov	d8,#0
	fcall	.cocofun_1
.L584:
	jne	d15,#1,.L103
.L585:

; ..\component\ComM\Implementation\ComM.c	  5488    {
; ..\component\ComM\Implementation\ComM.c	  5489      /* no error reporting */
; ..\component\ComM\Implementation\ComM.c	  5490    }
; ..\component\ComM\Implementation\ComM.c	  5491  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5492    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  5493    else if (Channel >= COMM_ACTIVE_CHANNEL)
	jeq	d4,#0,.L104
.L586:

; ..\component\ComM\Implementation\ComM.c	  5494    {
; ..\component\ComM\Implementation\ComM.c	  5495      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d8,#2
	j	.L105
.L104:

; ..\component\ComM\Implementation\ComM.c	  5496    }
; ..\component\ComM\Implementation\ComM.c	  5497  #endif
; ..\component\ComM\Implementation\ComM.c	  5498    else
; ..\component\ComM\Implementation\ComM.c	  5499    {
; ..\component\ComM\Implementation\ComM.c	  5500      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5501  #if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5502      /* If the channel is de-activated in the current variant, the main function shall do nothing
; ..\component\ComM\Implementation\ComM.c	  5503      * besides handling of PN prepare sleep timer. */
; ..\component\ComM\Implementation\ComM.c	  5504      if (ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  5505  #endif
; ..\component\ComM\Implementation\ComM.c	  5506      {
; ..\component\ComM\Implementation\ComM.c	  5507        SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_1();
	call	SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_1
.L568:

; ..\component\ComM\Implementation\ComM.c	  5508  
; ..\component\ComM\Implementation\ComM.c	  5509        /* #30 If parameter checks are successful and the channel is active in the current variant, get the highest
; ..\component\ComM\Implementation\ComM.c	  5510         *     requested communication mode and perform a state transition accordingly. */
; ..\component\ComM\Implementation\ComM.c	  5511        highestComModeReq = ComM_CalculateHighestComMode(Channel, &internalRequest); /* SBSW_COMM_CALL_WITH_PTR_TO_LOCAL_VARIABLE */
	mov	d4,#0
	mov.aa	a4,a10
	call	ComM_CalculateHighestComMode
.L569:

; ..\component\ComM\Implementation\ComM.c	  5512  
; ..\component\ComM\Implementation\ComM.c	  5513        /* #31 If Extended RAM Check functionality is used and communication needs to be started on the channel,
; ..\component\ComM\Implementation\ComM.c	  5514         *     limit the highest requested mode according to the RAM Check result. */
; ..\component\ComM\Implementation\ComM.c	  5515  #if (COMM_EXTENDED_RAM_CHECK == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5516        if ((ComM_ActiveComMode[Channel] <= COMM_NO_COM_REQUEST_PENDING) && (highestComModeReq > COMM_NO_COM_REQUEST_PENDING))
; ..\component\ComM\Implementation\ComM.c	  5517        {
; ..\component\ComM\Implementation\ComM.c	  5518          highestComModeReq = ComM_ChannelGetMaxStateAfterExtRamCheck( Channel, highestComModeReq );
; ..\component\ComM\Implementation\ComM.c	  5519        }
; ..\component\ComM\Implementation\ComM.c	  5520  #endif
; ..\component\ComM\Implementation\ComM.c	  5521  
; ..\component\ComM\Implementation\ComM.c	  5522        ComM_ChannelStateTransition(Channel, highestComModeReq);
	mov	d4,#0
.L587:
	mov	d5,d2
	call	ComM_ChannelStateTransition
.L570:

; ..\component\ComM\Implementation\ComM.c	  5523  
; ..\component\ComM\Implementation\ComM.c	  5524        /* #40 If User Mode Notification is enabled and BusSM indicated a state change on the channel or the last notification failed,
; ..\component\ComM\Implementation\ComM.c	  5525         *     notify the mode change of channel users via RTE Mode Switch Interface.
; ..\component\ComM\Implementation\ComM.c	  5526         *     Note: do it outside of the exclusive area to avoid that calls to RTE extend the interrupt lock time. */
; ..\component\ComM\Implementation\ComM.c	  5527  #if (COMM_USERMODENOTIFUNC == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5528  # if (COMM_USERMODENOTIFUNC_PNC_USER_ONLY == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  5529        if (ComM_StateChange[Channel] != COMM_NO_STATE_CHANGE)
; ..\component\ComM\Implementation\ComM.c	  5530        {
; ..\component\ComM\Implementation\ComM.c	  5531          SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_1();
; ..\component\ComM\Implementation\ComM.c	  5532          ComM_StateChangeNotification(Channel);
; ..\component\ComM\Implementation\ComM.c	  5533          SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_1();
; ..\component\ComM\Implementation\ComM.c	  5534        }
; ..\component\ComM\Implementation\ComM.c	  5535  # endif
; ..\component\ComM\Implementation\ComM.c	  5536  #endif
; ..\component\ComM\Implementation\ComM.c	  5537  
; ..\component\ComM\Implementation\ComM.c	  5538        /* #50 If Notification of Channel Requesters is enabled, update the data via RTE Sender-Receiver Interface if applicable.
; ..\component\ComM\Implementation\ComM.c	  5539         *     Note: do it outside of the exclusive area to avoid that calls to RTE extend the interrupt lock time. */
; ..\component\ComM\Implementation\ComM.c	  5540  #if( COMM_FULL_COMM_REQUEST_NOTIF == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  5541        SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_1();
; ..\component\ComM\Implementation\ComM.c	  5542        ComM_CurrentChannelRequestUpdate( Channel );
; ..\component\ComM\Implementation\ComM.c	  5543        SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_1();
; ..\component\ComM\Implementation\ComM.c	  5544  #endif
; ..\component\ComM\Implementation\ComM.c	  5545  
; ..\component\ComM\Implementation\ComM.c	  5546        /* #60 If Minimum FULL_COM Mode or Nm Light timer are enabled, handle the timers. */
; ..\component\ComM\Implementation\ComM.c	  5547  #if ((COMM_MINFULLCOMTIMEOFCHANNEL == STD_ON) || (COMM_NMLIGHTDURATIONOFCHANNEL == STD_ON) || (COMM_NMLIGHTSILENTDURATIONOFCHANNEL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  5548        ComM_ChannelHandleTimers(Channel, internalRequest);
; ..\component\ComM\Implementation\ComM.c	  5549  #endif
; ..\component\ComM\Implementation\ComM.c	  5550  
; ..\component\ComM\Implementation\ComM.c	  5551        SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_1();
	call	SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_1
.L105:
.L103:

; ..\component\ComM\Implementation\ComM.c	  5552      } /* ComM_IsEnabledOfChannel(Channel) */
; ..\component\ComM\Implementation\ComM.c	  5553  
; ..\component\ComM\Implementation\ComM.c	  5554      /* #70 If Partial Networking is enabled and the current channel id is 0:
; ..\component\ComM\Implementation\ComM.c	  5555       *     1) handle the optional PNC Prepare Sleep Timer. Note: the timer value is same for all PNCs, it is calculated based on the cycle time of channel 0.
; ..\component\ComM\Implementation\ComM.c	  5556       *     2) if PNC Extended Functionality is enabled, handle PNCs without channels and perform state transitions if applicable. */
; ..\component\ComM\Implementation\ComM.c	  5557      /* #80 If Partial Networking is enabled and the current channel is enabled, handle PNCs with channels and perform state transitions if applicable. */
; ..\component\ComM\Implementation\ComM.c	  5558  #if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5559      SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_1();
; ..\component\ComM\Implementation\ComM.c	  5560  
; ..\component\ComM\Implementation\ComM.c	  5561  # if (COMM_ACTIVE_CHANNEL > 1U)
; ..\component\ComM\Implementation\ComM.c	  5562      if (Channel == 0u)
; ..\component\ComM\Implementation\ComM.c	  5563  # endif
; ..\component\ComM\Implementation\ComM.c	  5564      {
; ..\component\ComM\Implementation\ComM.c	  5565  # if (COMM_PNC_PS_TIMER > 0U)
; ..\component\ComM\Implementation\ComM.c	  5566        ComM_HandlePncPrepareSleepTimer();
; ..\component\ComM\Implementation\ComM.c	  5567  # endif
; ..\component\ComM\Implementation\ComM.c	  5568  # if (COMM_PNC_EXTENDED_FUNCTIONALITY_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5569  #  if (COMM_PNC_EXISTS_PNC_WITHOUT_CHANNELS == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5570        ComM_PncModeArbitrationWithoutChannels();
; ..\component\ComM\Implementation\ComM.c	  5571  #  endif
; ..\component\ComM\Implementation\ComM.c	  5572  # endif
; ..\component\ComM\Implementation\ComM.c	  5573      }
; ..\component\ComM\Implementation\ComM.c	  5574  
; ..\component\ComM\Implementation\ComM.c	  5575  # if (COMM_PNCCHANNELMAPPING == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5576  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5577      /* If the channel is de-activated in the current variant, the main function shall do nothing
; ..\component\ComM\Implementation\ComM.c	  5578       * besides handling of PN prepare sleep timer. */
; ..\component\ComM\Implementation\ComM.c	  5579      if (ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  5580  #  endif
; ..\component\ComM\Implementation\ComM.c	  5581      {
; ..\component\ComM\Implementation\ComM.c	  5582        ComM_PncModeArbitration(Channel);
; ..\component\ComM\Implementation\ComM.c	  5583      }
; ..\component\ComM\Implementation\ComM.c	  5584  # endif
; ..\component\ComM\Implementation\ComM.c	  5585  
; ..\component\ComM\Implementation\ComM.c	  5586      SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_1();
; ..\component\ComM\Implementation\ComM.c	  5587  
; ..\component\ComM\Implementation\ComM.c	  5588      /* #90 If User Mode Notification is enabled, notify the mode change of PNC users via RTE Mode Switch Port. */
; ..\component\ComM\Implementation\ComM.c	  5589  # if (COMM_USERMODENOTIFUNC == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5590      if( ComM_NotifyPncStateChange == TRUE )
; ..\component\ComM\Implementation\ComM.c	  5591      {
; ..\component\ComM\Implementation\ComM.c	  5592        /* PNC users: a PNC changed the state from FULL_COM to NO_COM or vice versa or the last mode notification failed (ESCAN00067386) */
; ..\component\ComM\Implementation\ComM.c	  5593        if( ComM_PncStateChangeNotification() == E_OK )
; ..\component\ComM\Implementation\ComM.c	  5594        {
; ..\component\ComM\Implementation\ComM.c	  5595          /* All PNC users have been successfully notified about new mode, reset the flag.
; ..\component\ComM\Implementation\ComM.c	  5596           * Otherwise, if at least one user mode notification failed, ComM will try again in the next task (ESCAN00067423) */
; ..\component\ComM\Implementation\ComM.c	  5597          ComM_NotifyPncStateChange = FALSE;
; ..\component\ComM\Implementation\ComM.c	  5598        }
; ..\component\ComM\Implementation\ComM.c	  5599      }
; ..\component\ComM\Implementation\ComM.c	  5600  # endif
; ..\component\ComM\Implementation\ComM.c	  5601  #endif
; ..\component\ComM\Implementation\ComM.c	  5602    }
; ..\component\ComM\Implementation\ComM.c	  5603  
; ..\component\ComM\Implementation\ComM.c	  5604    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5605  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5606    if (errorId != COMM_E_NO_ERROR)
	jeq	d8,#0,.L106
.L588:

; ..\component\ComM\Implementation\ComM.c	  5607    {
; ..\component\ComM\Implementation\ComM.c	  5608      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_MAINFUNCTION, errorId );
	fcall	.cocofun_2
.L589:
	mov	d6,#96
.L590:
	mov	d7,d8
.L571:
	j	Det_ReportError
.L106:

; ..\component\ComM\Implementation\ComM.c	  5609    }
; ..\component\ComM\Implementation\ComM.c	  5610  # else
; ..\component\ComM\Implementation\ComM.c	  5611    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5612  # endif
; ..\component\ComM\Implementation\ComM.c	  5613  } /* PRQA S 6010, 6030, 6050, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STCAL, MD_MSR_STMIF */
	ret
.L394:
	
__ComM_MainFunction_function_end:
	.size	ComM_MainFunction,__ComM_MainFunction_function_end-ComM_MainFunction
.L207:
	; End of function
	
	.sdecl	'.text.ComM.ComM_ChannelStateTransition',code,cluster('ComM_ChannelStateTransition')
	.sect	'.text.ComM.ComM_ChannelStateTransition'
	.align	2
	

; ..\component\ComM\Implementation\ComM.c	  5614  
; ..\component\ComM\Implementation\ComM.c	  5615  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5616   *  ComM_ChannelStateTransition()
; ..\component\ComM\Implementation\ComM.c	  5617   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5618  /*!
; ..\component\ComM\Implementation\ComM.c	  5619   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5620   *
; ..\component\ComM\Implementation\ComM.c	  5621   *
; ..\component\ComM\Implementation\ComM.c	  5622   *
; ..\component\ComM\Implementation\ComM.c	  5623   *
; ..\component\ComM\Implementation\ComM.c	  5624   *
; ..\component\ComM\Implementation\ComM.c	  5625   *
; ..\component\ComM\Implementation\ComM.c	  5626   *
; ..\component\ComM\Implementation\ComM.c	  5627   *
; ..\component\ComM\Implementation\ComM.c	  5628   *
; ..\component\ComM\Implementation\ComM.c	  5629   *
; ..\component\ComM\Implementation\ComM.c	  5630   *
; ..\component\ComM\Implementation\ComM.c	  5631   */
; ..\component\ComM\Implementation\ComM.c	  5632  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_ChannelStateTransition(NetworkHandleType channel, ComM_StateType highestComModeReq)
; Function ComM_ChannelStateTransition
.L194:
ComM_ChannelStateTransition:	.type	func

; ..\component\ComM\Implementation\ComM.c	  5633  {
; ..\component\ComM\Implementation\ComM.c	  5634    ComM_StateType  calculatedComModeReq;  /* the calculated ComM mode */
; ..\component\ComM\Implementation\ComM.c	  5635    ComM_StateType  localhighestComModeReq = highestComModeReq;
; ..\component\ComM\Implementation\ComM.c	  5636    do
; ..\component\ComM\Implementation\ComM.c	  5637    {
; ..\component\ComM\Implementation\ComM.c	  5638      /* #10 Check if a timer is running for Nm Variants FULL or LIGHT. Do not perform any state transitions if
; ..\component\ComM\Implementation\ComM.c	  5639       *    1) Nm Light timer is running and there is no FULL_COM request by users or DCM (applicable in COMM_FULL_COM_READY_SLEEP or COMM_SILENT_COM) or
; ..\component\ComM\Implementation\ComM.c	  5640       *    2) Min FULL_COM mode timer is running.
; ..\component\ComM\Implementation\ComM.c	  5641       */
; ..\component\ComM\Implementation\ComM.c	  5642  #if ((COMM_MINFULLCOMTIMEOFCHANNEL == STD_ON) || (COMM_NMLIGHTDURATIONOFCHANNEL == STD_ON) || (COMM_NMLIGHTSILENTDURATIONOFCHANNEL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  5643      if(
; ..\component\ComM\Implementation\ComM.c	  5644  # if ((COMM_NMLIGHTDURATIONOFCHANNEL == STD_ON) || (COMM_NMLIGHTSILENTDURATIONOFCHANNEL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  5645         ((ComM_GetNmLightTimer(channel) > 0x00u) && (localhighestComModeReq == COMM_NO_COM_NO_PENDING_REQUEST)) ||
; ..\component\ComM\Implementation\ComM.c	  5646  # endif
; ..\component\ComM\Implementation\ComM.c	  5647         (ComM_GetMinFullComModeTimer(channel) > 0x00u)
; ..\component\ComM\Implementation\ComM.c	  5648        ) /* COV_COMM_TIMER_INIT_VALUE_CAN_BE_ONE */
; ..\component\ComM\Implementation\ComM.c	  5649      {
; ..\component\ComM\Implementation\ComM.c	  5650        localhighestComModeReq = ComM_ActiveComMode[channel];
; ..\component\ComM\Implementation\ComM.c	  5651      }
; ..\component\ComM\Implementation\ComM.c	  5652      /* #20 If no timer is running, calculate the next state transition step and perform as many transitions as needed
; ..\component\ComM\Implementation\ComM.c	  5653       *     to reach the target state, which is defined by the highest requested communication mode. */
; ..\component\ComM\Implementation\ComM.c	  5654      else
; ..\component\ComM\Implementation\ComM.c	  5655  #endif
; ..\component\ComM\Implementation\ComM.c	  5656      {
; ..\component\ComM\Implementation\ComM.c	  5657        calculatedComModeReq = ComM_TransitionTable[localhighestComModeReq][ComM_ActiveComMode[channel]];
	mov	d8,d5
	movh.a	a12,#@his(ComM_TransitionTable)
.L572:
	lea	a12,[a12]@los(ComM_TransitionTable)
.L871:
	movh.a	a13,#@his(ComM_ActiveComMode)
	lea	a13,[a13]@los(ComM_ActiveComMode)
.L872:
	ld.bu	d15,[a13]
.L873:

; ..\component\ComM\Implementation\ComM.c	  5658        if ((ComM_ActiveComMode[channel] < COMM_MAX_NUMBER_OF_STATES) && (calculatedComModeReq < COMM_MAX_NUMBER_OF_STATES))
; ..\component\ComM\Implementation\ComM.c	  5659        {
; ..\component\ComM\Implementation\ComM.c	  5660          if ((ComM_ActiveComMode[channel] == COMM_NO_COM_REQUEST_PENDING) && (calculatedComModeReq > COMM_NO_COM_REQUEST_PENDING))
; ..\component\ComM\Implementation\ComM.c	  5661          {
; ..\component\ComM\Implementation\ComM.c	  5662            /* #30 If the channel is in COMM_NO_COM_REQUEST_PENDING state and there is a pending request to start communication,
; ..\component\ComM\Implementation\ComM.c	  5663             *     check the Communication Allowed flag. If Communication Allowed is FALSE, stay in COMM_NO_COM_REQUEST_PENDING state
; ..\component\ComM\Implementation\ComM.c	  5664             *     and try again in the next task if request is still pending. */
; ..\component\ComM\Implementation\ComM.c	  5665            if( ComM_ComAllowed[channel] == FALSE )
	movh.a	a14,#@his(ComM_ComAllowed)

; ..\component\ComM\Implementation\ComM.c	  5666            {
; ..\component\ComM\Implementation\ComM.c	  5667              localhighestComModeReq = ComM_ActiveComMode[channel];
; ..\component\ComM\Implementation\ComM.c	  5668            }
; ..\component\ComM\Implementation\ComM.c	  5669          }
; ..\component\ComM\Implementation\ComM.c	  5670  
; ..\component\ComM\Implementation\ComM.c	  5671          if (localhighestComModeReq != ComM_ActiveComMode[channel])
; ..\component\ComM\Implementation\ComM.c	  5672          {
; ..\component\ComM\Implementation\ComM.c	  5673            ComM_TransitionFctTable[calculatedComModeReq][ComM_ActiveComMode[channel]](channel); /* SBSW_COMM_TransitionFct_PointerCall */
; ..\component\ComM\Implementation\ComM.c	  5674            /* #40 If current channel is Nm variant LINSLAVE and current state is COMM_FULL_COM_READY_SLEEP, but the Bus Sleep Mode indication is still pending,
; ..\component\ComM\Implementation\ComM.c	  5675                   channel remains in state COMM_FULL_COM_READY_SLEEP. */
; ..\component\ComM\Implementation\ComM.c	  5676  #if (COMM_EXISTS_LINSLAVE_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5677            if ( !(ComM_IsBusSleepModeIndicated(channel)) && (ComM_ActiveComMode[channel] == COMM_FULL_COM_READY_SLEEP) && (calculatedComModeReq == COMM_SILENT_COM)
; ..\component\ComM\Implementation\ComM.c	  5678  # if (COMM_ISDEF_NMTYPEOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  5679              && (ComM_GetNmTypeOfChannel(channel) == COMM_LINSLAVE_NMTYPEOFCHANNEL)
; ..\component\ComM\Implementation\ComM.c	  5680  # endif
; ..\component\ComM\Implementation\ComM.c	  5681              )
; ..\component\ComM\Implementation\ComM.c	  5682            {
; ..\component\ComM\Implementation\ComM.c	  5683              /* Set localhighestComModeReq to state COMM_FULL_COM_READY_SLEEP in order to remain in state Ready Sleep and to prevent endless while loop. */
; ..\component\ComM\Implementation\ComM.c	  5684              localhighestComModeReq = COMM_FULL_COM_READY_SLEEP;
; ..\component\ComM\Implementation\ComM.c	  5685            }
; ..\component\ComM\Implementation\ComM.c	  5686            else
; ..\component\ComM\Implementation\ComM.c	  5687  #endif
; ..\component\ComM\Implementation\ComM.c	  5688            {
; ..\component\ComM\Implementation\ComM.c	  5689              ComM_ActiveComMode[channel] = calculatedComModeReq;                                  /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5690            }
; ..\component\ComM\Implementation\ComM.c	  5691          }
; ..\component\ComM\Implementation\ComM.c	  5692        }
; ..\component\ComM\Implementation\ComM.c	  5693        else
; ..\component\ComM\Implementation\ComM.c	  5694        {
; ..\component\ComM\Implementation\ComM.c	  5695          localhighestComModeReq = ComM_ActiveComMode[channel];
; ..\component\ComM\Implementation\ComM.c	  5696        }
; ..\component\ComM\Implementation\ComM.c	  5697      }
; ..\component\ComM\Implementation\ComM.c	  5698    } while (ComM_ActiveComMode[channel] != localhighestComModeReq);
.L107:
	mul	d0,d8,#5
	addsc.a	a15,a12,d0,#0
.L874:
	addsc.a	a15,a15,d15,#0
	ld.bu	d9,[a15]
.L573:
	jge.u	d15,#5,.L108
.L875:
	jge.u	d9,#5,.L109
.L876:
	jne	d15,#1,.L110
.L877:
	jlt.u	d9,#2,.L111
.L878:
	ld.bu	d0,[a14]@los(ComM_ComAllowed)
.L879:
	sel	d8,d0,d8,#1
.L111:
.L110:
	jeq	d15,d8,.L113
.L880:
	mul	d0,d9,#20
	movh.a	a15,#@his(ComM_TransitionFctTable)
	lea	a15,[a15]@los(ComM_TransitionFctTable)
.L881:
	addsc.a	a15,a15,d0,#0
.L882:
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
.L883:
	mov	d4,#0
	calli	a15
.L884:
	st.b	[a13],d9
.L885:
	mov	d15,d9
	j	.L114
.L109:
.L108:
	mov	d8,d15
.L114:
.L113:
	jne	d15,d8,.L107
.L886:

; ..\component\ComM\Implementation\ComM.c	  5699  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	ret
.L506:
	
__ComM_ChannelStateTransition_function_end:
	.size	ComM_ChannelStateTransition,__ComM_ChannelStateTransition_function_end-ComM_ChannelStateTransition
.L352:
	; End of function
	
	.sdecl	'.text.ComM.ComM_EcuM_WakeUpIndication',code,cluster('ComM_EcuM_WakeUpIndication')
	.sect	'.text.ComM.ComM_EcuM_WakeUpIndication'
	.align	2
	
	.global	ComM_EcuM_WakeUpIndication

; ..\component\ComM\Implementation\ComM.c	  5700  
; ..\component\ComM\Implementation\ComM.c	  5701  #if ((COMM_MINFULLCOMTIMEOFCHANNEL == STD_ON) || (COMM_NMLIGHTDURATIONOFCHANNEL == STD_ON) || (COMM_NMLIGHTSILENTDURATIONOFCHANNEL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  5702  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5703   *  ComM_ChannelHandleTimers()
; ..\component\ComM\Implementation\ComM.c	  5704   **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5705  /*!
; ..\component\ComM\Implementation\ComM.c	  5706   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5707   *
; ..\component\ComM\Implementation\ComM.c	  5708   *
; ..\component\ComM\Implementation\ComM.c	  5709   *
; ..\component\ComM\Implementation\ComM.c	  5710   *
; ..\component\ComM\Implementation\ComM.c	  5711   *
; ..\component\ComM\Implementation\ComM.c	  5712   *
; ..\component\ComM\Implementation\ComM.c	  5713   *
; ..\component\ComM\Implementation\ComM.c	  5714   *
; ..\component\ComM\Implementation\ComM.c	  5715   *
; ..\component\ComM\Implementation\ComM.c	  5716   *
; ..\component\ComM\Implementation\ComM.c	  5717   */
; ..\component\ComM\Implementation\ComM.c	  5718  COMM_LOCAL_INLINE FUNC(void, COMM_CODE) ComM_ChannelHandleTimers(NetworkHandleType channel, boolean internalRequest)
; ..\component\ComM\Implementation\ComM.c	  5719  {
; ..\component\ComM\Implementation\ComM.c	  5720    /* #10 If Minimum FULL_COM mode timer is running, decrement the timer.
; ..\component\ComM\Implementation\ComM.c	  5721     *     Cancel the timer in case an internal request (ComM user or Dcm) exists and the channel has Nm Variant LIGHT. */
; ..\component\ComM\Implementation\ComM.c	  5722    if(ComM_GetMinFullComModeTimer(channel) > 0x00u)
; ..\component\ComM\Implementation\ComM.c	  5723    {
; ..\component\ComM\Implementation\ComM.c	  5724      ComM_DecMinFullComModeTimer(channel); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  5725  
; ..\component\ComM\Implementation\ComM.c	  5726  #  if (COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5727  #   if (COMM_ISDEF_NMTYPEOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  5728      if (ComM_GetNmTypeOfChannel(channel) == COMM_LIGHT_NMTYPEOFCHANNEL) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  5729  #   endif
; ..\component\ComM\Implementation\ComM.c	  5730      {
; ..\component\ComM\Implementation\ComM.c	  5731        if (internalRequest == TRUE)
; ..\component\ComM\Implementation\ComM.c	  5732        {
; ..\component\ComM\Implementation\ComM.c	  5733          ComM_SetMinFullComModeTimer(channel, 0x00); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  5734        }
; ..\component\ComM\Implementation\ComM.c	  5735      }
; ..\component\ComM\Implementation\ComM.c	  5736  #  endif
; ..\component\ComM\Implementation\ComM.c	  5737  
; ..\component\ComM\Implementation\ComM.c	  5738      /* #20 If Minimum FULL_COM mode timer is expired, the communication is not required anymore and channel can leave Network Requested state.
; ..\component\ComM\Implementation\ComM.c	  5739       *     If Nm Variant is FULL the next state is Ready Sleep where ComM waits for a shutdown trigger from Nm.
; ..\component\ComM\Implementation\ComM.c	  5740       *     If Nm Variant is LIGHT the target state is NO_COM, the transition depends on configuration of Nm Light and Nm Light Silent timers. */
; ..\component\ComM\Implementation\ComM.c	  5741      if (ComM_GetMinFullComModeTimer(channel) == 0x00u)
; ..\component\ComM\Implementation\ComM.c	  5742      {
; ..\component\ComM\Implementation\ComM.c	  5743        /* Set the default state, it's accepted to overwrite it later (if Nm Type is FULL) to keep the code cleaner */
; ..\component\ComM\Implementation\ComM.c	  5744        ComM_BusComModeReq[channel] = COMM_NO_COM_NO_PENDING_REQUEST; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5745  
; ..\component\ComM\Implementation\ComM.c	  5746  #  if (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5747  #   if (COMM_ISDEF_NMTYPEOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  5748        if (ComM_GetNmTypeOfChannel(channel) == COMM_FULL_NMTYPEOFCHANNEL) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  5749  #   endif
; ..\component\ComM\Implementation\ComM.c	  5750        {
; ..\component\ComM\Implementation\ComM.c	  5751          ComM_BusComModeReq[channel] = COMM_FULL_COM_READY_SLEEP; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5752        }
; ..\component\ComM\Implementation\ComM.c	  5753  #  endif
; ..\component\ComM\Implementation\ComM.c	  5754      }
; ..\component\ComM\Implementation\ComM.c	  5755    }
; ..\component\ComM\Implementation\ComM.c	  5756  
; ..\component\ComM\Implementation\ComM.c	  5757    /* #30 If Nm Light or Nm Light Silent timer is running, decrement the timer.
; ..\component\ComM\Implementation\ComM.c	  5758     *     If the timer is expired set the target state is NO_COM. Note that the variable ComM_NmLightTimer is
; ..\component\ComM\Implementation\ComM.c	  5759     *     shared by Nm Light and Nm Light Silent timers. If Nm Light timer is expired, the target state is NO_COM but
; ..\component\ComM\Implementation\ComM.c	  5760     *     the next state will be SI_COM in case Nm Light Silent timer is configured. */
; ..\component\ComM\Implementation\ComM.c	  5761  # if ((COMM_NMLIGHTDURATIONOFCHANNEL == STD_ON) || (COMM_NMLIGHTSILENTDURATIONOFCHANNEL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  5762    if( ComM_GetNmLightTimer(channel) > 0x00u )
; ..\component\ComM\Implementation\ComM.c	  5763    {
; ..\component\ComM\Implementation\ComM.c	  5764      ComM_DecNmLightTimer(channel); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  5765  
; ..\component\ComM\Implementation\ComM.c	  5766      if(ComM_GetNmLightTimer(channel) == 0x00u) /* COV_COMM_TIMER_INIT_VALUE_CAN_BE_ONE */
; ..\component\ComM\Implementation\ComM.c	  5767      {
; ..\component\ComM\Implementation\ComM.c	  5768        ComM_BusComModeReq[channel] = COMM_NO_COM_NO_PENDING_REQUEST; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5769      }
; ..\component\ComM\Implementation\ComM.c	  5770    }
; ..\component\ComM\Implementation\ComM.c	  5771  # endif
; ..\component\ComM\Implementation\ComM.c	  5772  
; ..\component\ComM\Implementation\ComM.c	  5773  # if (COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  5774    COMM_DUMMY_STATEMENT(internalRequest); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5775  # endif
; ..\component\ComM\Implementation\ComM.c	  5776  }
; ..\component\ComM\Implementation\ComM.c	  5777  #endif
; ..\component\ComM\Implementation\ComM.c	  5778  
; ..\component\ComM\Implementation\ComM.c	  5779  
; ..\component\ComM\Implementation\ComM.c	  5780  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5781    CALLBACK FUNCTIONS (AUTOSAR NM)
; ..\component\ComM\Implementation\ComM.c	  5782  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5783  
; ..\component\ComM\Implementation\ComM.c	  5784  #if (COMM_NMSUPPORTOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5785  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5786   *  ComM_Nm_NetworkStartIndication()
; ..\component\ComM\Implementation\ComM.c	  5787   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5788  /*!
; ..\component\ComM\Implementation\ComM.c	  5789   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5790   *
; ..\component\ComM\Implementation\ComM.c	  5791   *
; ..\component\ComM\Implementation\ComM.c	  5792   *
; ..\component\ComM\Implementation\ComM.c	  5793   *
; ..\component\ComM\Implementation\ComM.c	  5794   */
; ..\component\ComM\Implementation\ComM.c	  5795  FUNC(void, COMM_CODE) ComM_Nm_NetworkStartIndication(NetworkHandleType Channel)
; ..\component\ComM\Implementation\ComM.c	  5796  {
; ..\component\ComM\Implementation\ComM.c	  5797    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5798    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  5799  
; ..\component\ComM\Implementation\ComM.c	  5800    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5801  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5802    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  5803    if (ComM_InitStatus != COMM_INIT)
; ..\component\ComM\Implementation\ComM.c	  5804    {
; ..\component\ComM\Implementation\ComM.c	  5805      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  5806    }
; ..\component\ComM\Implementation\ComM.c	  5807    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  5808    else if ((Channel >= COMM_ACTIVE_CHANNEL)
; ..\component\ComM\Implementation\ComM.c	  5809  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5810     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  5811  #  endif
; ..\component\ComM\Implementation\ComM.c	  5812         )
; ..\component\ComM\Implementation\ComM.c	  5813    {
; ..\component\ComM\Implementation\ComM.c	  5814      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  5815    }
; ..\component\ComM\Implementation\ComM.c	  5816    else
; ..\component\ComM\Implementation\ComM.c	  5817  # endif
; ..\component\ComM\Implementation\ComM.c	  5818    {
; ..\component\ComM\Implementation\ComM.c	  5819      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5820      /* #30 If parameter checks are successful and Nm support is enabled, forward the indication to the passive wake-up processing. */
; ..\component\ComM\Implementation\ComM.c	  5821      ComM_ProcessPassiveWakeUp( Channel );
; ..\component\ComM\Implementation\ComM.c	  5822    }
; ..\component\ComM\Implementation\ComM.c	  5823  
; ..\component\ComM\Implementation\ComM.c	  5824    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5825  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5826    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  5827    {
; ..\component\ComM\Implementation\ComM.c	  5828      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_CBK_NM_NETWORKSTARTINDICATION, errorId );
; ..\component\ComM\Implementation\ComM.c	  5829    }
; ..\component\ComM\Implementation\ComM.c	  5830  # else
; ..\component\ComM\Implementation\ComM.c	  5831    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5832  # endif
; ..\component\ComM\Implementation\ComM.c	  5833  }
; ..\component\ComM\Implementation\ComM.c	  5834  #endif
; ..\component\ComM\Implementation\ComM.c	  5835  
; ..\component\ComM\Implementation\ComM.c	  5836  #if (COMM_NMSUPPORTOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5837  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5838   *  ComM_Nm_NetworkMode()
; ..\component\ComM\Implementation\ComM.c	  5839   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5840  /*!
; ..\component\ComM\Implementation\ComM.c	  5841   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5842   *
; ..\component\ComM\Implementation\ComM.c	  5843   *
; ..\component\ComM\Implementation\ComM.c	  5844   *
; ..\component\ComM\Implementation\ComM.c	  5845   *
; ..\component\ComM\Implementation\ComM.c	  5846   *
; ..\component\ComM\Implementation\ComM.c	  5847   *
; ..\component\ComM\Implementation\ComM.c	  5848   *
; ..\component\ComM\Implementation\ComM.c	  5849   *
; ..\component\ComM\Implementation\ComM.c	  5850   */
; ..\component\ComM\Implementation\ComM.c	  5851  FUNC(void, COMM_CODE) ComM_Nm_NetworkMode(NetworkHandleType Channel)
; ..\component\ComM\Implementation\ComM.c	  5852  {
; ..\component\ComM\Implementation\ComM.c	  5853    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5854    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  5855  
; ..\component\ComM\Implementation\ComM.c	  5856    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5857  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5858    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  5859    if (ComM_InitStatus != COMM_INIT)
; ..\component\ComM\Implementation\ComM.c	  5860    {
; ..\component\ComM\Implementation\ComM.c	  5861      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  5862    }
; ..\component\ComM\Implementation\ComM.c	  5863    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  5864    else if ((Channel >= COMM_ACTIVE_CHANNEL)
; ..\component\ComM\Implementation\ComM.c	  5865  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5866     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  5867  #  endif
; ..\component\ComM\Implementation\ComM.c	  5868         )
; ..\component\ComM\Implementation\ComM.c	  5869    {
; ..\component\ComM\Implementation\ComM.c	  5870      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  5871    }
; ..\component\ComM\Implementation\ComM.c	  5872    else
; ..\component\ComM\Implementation\ComM.c	  5873  # endif
; ..\component\ComM\Implementation\ComM.c	  5874    {
; ..\component\ComM\Implementation\ComM.c	  5875      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5876      /* #30 If parameter checks are successful and Nm support is enabled, process Network Mode notification. */
; ..\component\ComM\Implementation\ComM.c	  5877      /* #40 If Prepare Bus-Sleep Mode is supported and Network Mode is notified while ComM is in SI_COM and Nm
; ..\component\ComM\Implementation\ComM.c	  5878       *     has notified Prepare Bus Sleep Mode before it, immediately enter the target wake-up state of the channel
; ..\component\ComM\Implementation\ComM.c	  5879       *     (Network Requested or Ready Sleep) and trigger BusSM to enter FULL_COM to ensure that Nm message
; ..\component\ComM\Implementation\ComM.c	  5880       *     can be sent as first message on the bus. */
; ..\component\ComM\Implementation\ComM.c	  5881  # if (COMM_SILENTSUPPORTOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5882      if(( ComM_ActiveComMode[Channel] == COMM_SILENT_COM ) && ( ComM_BusComModeReq[Channel] == COMM_SILENT_COM ))
; ..\component\ComM\Implementation\ComM.c	  5883      {
; ..\component\ComM\Implementation\ComM.c	  5884        /* ESCAN00066282 Note: ComM_ActiveComMode is set first to ensure that condition is not re-entered. */
; ..\component\ComM\Implementation\ComM.c	  5885        ComM_ActiveComMode[Channel] = ComM_GetWakeupStateOfChannel(Channel); /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5886        ComM_TransitionFctTable[ComM_GetWakeupStateOfChannel(Channel)][COMM_SILENT_COM](Channel); /* SBSW_COMM_TransitionFct_PointerCall */
; ..\component\ComM\Implementation\ComM.c	  5887      }
; ..\component\ComM\Implementation\ComM.c	  5888  # endif
; ..\component\ComM\Implementation\ComM.c	  5889  
; ..\component\ComM\Implementation\ComM.c	  5890  # if (COMM_DEV_ERROR_DETECT == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  5891  #  if(COMM_SILENTSUPPORTOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  5892      COMM_DUMMY_STATEMENT(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5893  #  endif
; ..\component\ComM\Implementation\ComM.c	  5894  # endif
; ..\component\ComM\Implementation\ComM.c	  5895    }
; ..\component\ComM\Implementation\ComM.c	  5896  
; ..\component\ComM\Implementation\ComM.c	  5897    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5898  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5899    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  5900    {
; ..\component\ComM\Implementation\ComM.c	  5901      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_CBK_NM_NETWORKMODE, errorId );
; ..\component\ComM\Implementation\ComM.c	  5902    }
; ..\component\ComM\Implementation\ComM.c	  5903  # else
; ..\component\ComM\Implementation\ComM.c	  5904    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5905  # endif
; ..\component\ComM\Implementation\ComM.c	  5906  }
; ..\component\ComM\Implementation\ComM.c	  5907  #endif
; ..\component\ComM\Implementation\ComM.c	  5908  
; ..\component\ComM\Implementation\ComM.c	  5909  #if ((COMM_NMSUPPORTOFCHANNEL == STD_ON) && (COMM_SILENTSUPPORTOFCHANNEL == STD_ON))
; ..\component\ComM\Implementation\ComM.c	  5910  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5911   *  ComM_Nm_PrepareBusSleepMode()
; ..\component\ComM\Implementation\ComM.c	  5912   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5913  /*!
; ..\component\ComM\Implementation\ComM.c	  5914   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5915   *
; ..\component\ComM\Implementation\ComM.c	  5916   *
; ..\component\ComM\Implementation\ComM.c	  5917   *
; ..\component\ComM\Implementation\ComM.c	  5918   *
; ..\component\ComM\Implementation\ComM.c	  5919   */
; ..\component\ComM\Implementation\ComM.c	  5920  FUNC(void, COMM_CODE) ComM_Nm_PrepareBusSleepMode(NetworkHandleType Channel)
; ..\component\ComM\Implementation\ComM.c	  5921  {
; ..\component\ComM\Implementation\ComM.c	  5922    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5923    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  5924  
; ..\component\ComM\Implementation\ComM.c	  5925    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5926  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5927    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  5928    if (ComM_InitStatus != COMM_INIT)
; ..\component\ComM\Implementation\ComM.c	  5929    {
; ..\component\ComM\Implementation\ComM.c	  5930      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  5931    }
; ..\component\ComM\Implementation\ComM.c	  5932    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  5933    else if ((Channel >= COMM_ACTIVE_CHANNEL)
; ..\component\ComM\Implementation\ComM.c	  5934  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5935     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  5936  #  endif
; ..\component\ComM\Implementation\ComM.c	  5937         )
; ..\component\ComM\Implementation\ComM.c	  5938    {
; ..\component\ComM\Implementation\ComM.c	  5939      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  5940    }
; ..\component\ComM\Implementation\ComM.c	  5941    else
; ..\component\ComM\Implementation\ComM.c	  5942  # endif
; ..\component\ComM\Implementation\ComM.c	  5943    {
; ..\component\ComM\Implementation\ComM.c	  5944      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5945      /* #30 If parameter checks are successful and Prepare Bus-Sleep mode is supported, initiate the state transition to SI_COM. */
; ..\component\ComM\Implementation\ComM.c	  5946      ComM_BusComModeReq[Channel] = COMM_SILENT_COM; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5947  
; ..\component\ComM\Implementation\ComM.c	  5948      ComM_TF_Full_SiCom(Channel);
; ..\component\ComM\Implementation\ComM.c	  5949  
; ..\component\ComM\Implementation\ComM.c	  5950      ComM_ActiveComMode[Channel] = COMM_SILENT_COM; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  5951    }
; ..\component\ComM\Implementation\ComM.c	  5952  
; ..\component\ComM\Implementation\ComM.c	  5953    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5954  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5955    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  5956    {
; ..\component\ComM\Implementation\ComM.c	  5957      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_CBK_NM_PREPAREBUSSLEEPMODE, errorId );
; ..\component\ComM\Implementation\ComM.c	  5958    }
; ..\component\ComM\Implementation\ComM.c	  5959  # else
; ..\component\ComM\Implementation\ComM.c	  5960    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  5961  # endif
; ..\component\ComM\Implementation\ComM.c	  5962  }
; ..\component\ComM\Implementation\ComM.c	  5963  #endif
; ..\component\ComM\Implementation\ComM.c	  5964  
; ..\component\ComM\Implementation\ComM.c	  5965  #if (COMM_NMSUPPORTOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5966  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  5967   *  ComM_Nm_BusSleepMode()
; ..\component\ComM\Implementation\ComM.c	  5968   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  5969  /*!
; ..\component\ComM\Implementation\ComM.c	  5970   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  5971   *
; ..\component\ComM\Implementation\ComM.c	  5972   *
; ..\component\ComM\Implementation\ComM.c	  5973   *
; ..\component\ComM\Implementation\ComM.c	  5974   *
; ..\component\ComM\Implementation\ComM.c	  5975   *
; ..\component\ComM\Implementation\ComM.c	  5976   *
; ..\component\ComM\Implementation\ComM.c	  5977   *
; ..\component\ComM\Implementation\ComM.c	  5978   *
; ..\component\ComM\Implementation\ComM.c	  5979   *
; ..\component\ComM\Implementation\ComM.c	  5980   *
; ..\component\ComM\Implementation\ComM.c	  5981   *
; ..\component\ComM\Implementation\ComM.c	  5982   */
; ..\component\ComM\Implementation\ComM.c	  5983  FUNC(void, COMM_CODE) ComM_Nm_BusSleepMode(NetworkHandleType Channel)
; ..\component\ComM\Implementation\ComM.c	  5984  {
; ..\component\ComM\Implementation\ComM.c	  5985    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5986    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  5987  
; ..\component\ComM\Implementation\ComM.c	  5988    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  5989  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5990    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  5991    if (ComM_InitStatus != COMM_INIT)
; ..\component\ComM\Implementation\ComM.c	  5992    {
; ..\component\ComM\Implementation\ComM.c	  5993      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  5994    }
; ..\component\ComM\Implementation\ComM.c	  5995    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  5996    else if ((Channel >= COMM_ACTIVE_CHANNEL)
; ..\component\ComM\Implementation\ComM.c	  5997  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  5998     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  5999  #  endif
; ..\component\ComM\Implementation\ComM.c	  6000         )
; ..\component\ComM\Implementation\ComM.c	  6001    {
; ..\component\ComM\Implementation\ComM.c	  6002      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  6003    }
; ..\component\ComM\Implementation\ComM.c	  6004    else
; ..\component\ComM\Implementation\ComM.c	  6005  # endif
; ..\component\ComM\Implementation\ComM.c	  6006    {
; ..\component\ComM\Implementation\ComM.c	  6007      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6008      /* #30 If parameter checks are successful and support of Network Management is enabled, process the Bus Sleep Mode indication. */
; ..\component\ComM\Implementation\ComM.c	  6009  # if( COMM_BUS_TYPE_FR_PRESENT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  6010  #  if (COMM_ISDEF_BUSTYPEOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  6011      if (ComM_GetBusTypeOfChannel(Channel) == COMM_BUS_TYPE_FR)
; ..\component\ComM\Implementation\ComM.c	  6012  #  endif
; ..\component\ComM\Implementation\ComM.c	  6013      {
; ..\component\ComM\Implementation\ComM.c	  6014        /* #40 Store the status that shutdown on a FlexRay channel has started (this is to counteract the so-called 'clique problem' on FlexRay). */
; ..\component\ComM\Implementation\ComM.c	  6015        ComM_FrShutdown[Channel] = TRUE; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6016      }
; ..\component\ComM\Implementation\ComM.c	  6017  # endif
; ..\component\ComM\Implementation\ComM.c	  6018  
; ..\component\ComM\Implementation\ComM.c	  6019      ComM_BusComModeReq[Channel] = COMM_NO_COM_NO_PENDING_REQUEST; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6020  
; ..\component\ComM\Implementation\ComM.c	  6021      /* #50 There are two use cases how Nm calls the function which can be identified through ComM_ActiveComMode: */
; ..\component\ComM\Implementation\ComM.c	  6022  # if (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6023      if (ComM_ActiveComMode[Channel] == COMM_FULL_COM_NETWORK_REQUESTED)
; ..\component\ComM\Implementation\ComM.c	  6024      {
; ..\component\ComM\Implementation\ComM.c	  6025        /* #60 ComM_Nm_BusSleepMode() is called in context of Nm_NetworkRelease() while ComM performs the state transition COMM_FULL_COM_NETWORK_REQUESTED to COMM_FULL_COM_READY_SLEEP.
; ..\component\ComM\Implementation\ComM.c	  6026         *     This is only possible if LinNm without coordination (ESCAN00061388, ESCAN00072736) or J1939Nm (ESCAN00071329) is configured on the channel.
; ..\component\ComM\Implementation\ComM.c	  6027         *     Do nothing here and perform the transition to NoCom in the next ComM_MainFunction(). */
; ..\component\ComM\Implementation\ComM.c	  6028      }
; ..\component\ComM\Implementation\ComM.c	  6029      else
; ..\component\ComM\Implementation\ComM.c	  6030  # endif
; ..\component\ComM\Implementation\ComM.c	  6031      {
; ..\component\ComM\Implementation\ComM.c	  6032        /* #70 ComM_Nm_BusSleepMode() is called from the main function of a Nm module, this is the normal case. ComM shall perform the transition to NoCom immediately. */
; ..\component\ComM\Implementation\ComM.c	  6033        ComM_TF_SiCom_NoCom(Channel);
; ..\component\ComM\Implementation\ComM.c	  6034      }
; ..\component\ComM\Implementation\ComM.c	  6035  
; ..\component\ComM\Implementation\ComM.c	  6036      /* #80 If FrSM reached NO_COM state, set the FlexRay shutdown status as finished. */
; ..\component\ComM\Implementation\ComM.c	  6037  # if (COMM_BUS_TYPE_FR_PRESENT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6038  #  if (COMM_ISDEF_BUSTYPEOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  6039      if (ComM_GetBusTypeOfChannel(Channel) == COMM_BUS_TYPE_FR)
; ..\component\ComM\Implementation\ComM.c	  6040  #  endif
; ..\component\ComM\Implementation\ComM.c	  6041      {
; ..\component\ComM\Implementation\ComM.c	  6042        if ((ComM_BusSmState[Channel] == COMM_NO_COMMUNICATION) && (ComM_FrShutdown[Channel] == TRUE))
; ..\component\ComM\Implementation\ComM.c	  6043        {
; ..\component\ComM\Implementation\ComM.c	  6044          ComM_FrShutdown[Channel] = FALSE; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6045        }
; ..\component\ComM\Implementation\ComM.c	  6046      }
; ..\component\ComM\Implementation\ComM.c	  6047  # endif
; ..\component\ComM\Implementation\ComM.c	  6048    }
; ..\component\ComM\Implementation\ComM.c	  6049  
; ..\component\ComM\Implementation\ComM.c	  6050    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6051  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6052    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  6053    {
; ..\component\ComM\Implementation\ComM.c	  6054      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_CBK_NM_BUSSLEEPMODE, errorId );
; ..\component\ComM\Implementation\ComM.c	  6055    }
; ..\component\ComM\Implementation\ComM.c	  6056  # else
; ..\component\ComM\Implementation\ComM.c	  6057    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6058  # endif
; ..\component\ComM\Implementation\ComM.c	  6059  }
; ..\component\ComM\Implementation\ComM.c	  6060  #endif
; ..\component\ComM\Implementation\ComM.c	  6061  
; ..\component\ComM\Implementation\ComM.c	  6062  #if (COMM_NMSUPPORTOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6063  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  6064   *  ComM_Nm_RestartIndication()
; ..\component\ComM\Implementation\ComM.c	  6065   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  6066  /*!
; ..\component\ComM\Implementation\ComM.c	  6067   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  6068   *
; ..\component\ComM\Implementation\ComM.c	  6069   *
; ..\component\ComM\Implementation\ComM.c	  6070   *
; ..\component\ComM\Implementation\ComM.c	  6071   *
; ..\component\ComM\Implementation\ComM.c	  6072   */
; ..\component\ComM\Implementation\ComM.c	  6073  FUNC(void, COMM_CODE) ComM_Nm_RestartIndication(NetworkHandleType Channel)
; ..\component\ComM\Implementation\ComM.c	  6074  {
; ..\component\ComM\Implementation\ComM.c	  6075    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6076    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  6077  
; ..\component\ComM\Implementation\ComM.c	  6078    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6079  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6080    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  6081    if (ComM_InitStatus != COMM_INIT)
; ..\component\ComM\Implementation\ComM.c	  6082    {
; ..\component\ComM\Implementation\ComM.c	  6083      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  6084    }
; ..\component\ComM\Implementation\ComM.c	  6085    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  6086    else if ((Channel >= COMM_ACTIVE_CHANNEL)
; ..\component\ComM\Implementation\ComM.c	  6087  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6088     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  6089  #  endif
; ..\component\ComM\Implementation\ComM.c	  6090         )
; ..\component\ComM\Implementation\ComM.c	  6091    {
; ..\component\ComM\Implementation\ComM.c	  6092      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  6093    }
; ..\component\ComM\Implementation\ComM.c	  6094    else
; ..\component\ComM\Implementation\ComM.c	  6095  # endif
; ..\component\ComM\Implementation\ComM.c	  6096    {
; ..\component\ComM\Implementation\ComM.c	  6097      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6098      /* #30 If parameter checks are successful and Nm support is enabled, forward the indication to the passive wake-up processing. */
; ..\component\ComM\Implementation\ComM.c	  6099      ComM_ProcessPassiveWakeUp( Channel );
; ..\component\ComM\Implementation\ComM.c	  6100    }
; ..\component\ComM\Implementation\ComM.c	  6101  
; ..\component\ComM\Implementation\ComM.c	  6102    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6103  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6104    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  6105    {
; ..\component\ComM\Implementation\ComM.c	  6106      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_CBK_NM_RESTARTINDICATION, errorId );
; ..\component\ComM\Implementation\ComM.c	  6107    }
; ..\component\ComM\Implementation\ComM.c	  6108  # else
; ..\component\ComM\Implementation\ComM.c	  6109    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6110  # endif
; ..\component\ComM\Implementation\ComM.c	  6111  }
; ..\component\ComM\Implementation\ComM.c	  6112  #endif
; ..\component\ComM\Implementation\ComM.c	  6113  
; ..\component\ComM\Implementation\ComM.c	  6114  #if (COMM_PNC_TO_CHANNEL_ROUTING_LIMITATION_ENABLED == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6115  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  6116   *  ComM_Nm_StateChangeNotification()
; ..\component\ComM\Implementation\ComM.c	  6117   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  6118  /*!
; ..\component\ComM\Implementation\ComM.c	  6119   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  6120   *
; ..\component\ComM\Implementation\ComM.c	  6121   *
; ..\component\ComM\Implementation\ComM.c	  6122   *
; ..\component\ComM\Implementation\ComM.c	  6123   *
; ..\component\ComM\Implementation\ComM.c	  6124   *
; ..\component\ComM\Implementation\ComM.c	  6125   *
; ..\component\ComM\Implementation\ComM.c	  6126   *
; ..\component\ComM\Implementation\ComM.c	  6127   *
; ..\component\ComM\Implementation\ComM.c	  6128   *
; ..\component\ComM\Implementation\ComM.c	  6129   *
; ..\component\ComM\Implementation\ComM.c	  6130   *
; ..\component\ComM\Implementation\ComM.c	  6131   */
; ..\component\ComM\Implementation\ComM.c	  6132  FUNC(void, COMM_CODE) ComM_Nm_StateChangeNotification( CONST(NetworkHandleType, AUTOMATIC) Channel, CONST(Nm_StateType, AUTOMATIC) NmPreviousState, CONST(Nm_StateType, AUTOMATIC) NmCurrentState )
; ..\component\ComM\Implementation\ComM.c	  6133  {
; ..\component\ComM\Implementation\ComM.c	  6134    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6135    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  6136    ComM_PncIterType pnc;
; ..\component\ComM\Implementation\ComM.c	  6137    ComM_PncChannelMappingIterType pncChIdx;
; ..\component\ComM\Implementation\ComM.c	  6138    ComM_SizeOfPncSignalType signalIndex;
; ..\component\ComM\Implementation\ComM.c	  6139    boolean sendSignal = FALSE;
; ..\component\ComM\Implementation\ComM.c	  6140  
; ..\component\ComM\Implementation\ComM.c	  6141    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6142  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6143    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  6144    if (ComM_InitStatus != COMM_INIT)
; ..\component\ComM\Implementation\ComM.c	  6145    {
; ..\component\ComM\Implementation\ComM.c	  6146      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  6147    }
; ..\component\ComM\Implementation\ComM.c	  6148    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  6149    else if ((Channel >= COMM_ACTIVE_CHANNEL)
; ..\component\ComM\Implementation\ComM.c	  6150  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6151     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  6152  #  endif
; ..\component\ComM\Implementation\ComM.c	  6153         )
; ..\component\ComM\Implementation\ComM.c	  6154    {
; ..\component\ComM\Implementation\ComM.c	  6155      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  6156    }
; ..\component\ComM\Implementation\ComM.c	  6157    else
; ..\component\ComM\Implementation\ComM.c	  6158  # endif
; ..\component\ComM\Implementation\ComM.c	  6159    {
; ..\component\ComM\Implementation\ComM.c	  6160      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6161      /* PRQA S 0715 SUPPRESS_0715 */ /* MD_MSR_1.1 */
; ..\component\ComM\Implementation\ComM.c	  6162      if (ComM_IsPncLimitationUsedOfChannelPb(Channel)) /* PRQA S 4304 */ /* MD_MSR_AutosarBoolean */ /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  6163      {
; ..\component\ComM\Implementation\ComM.c	  6164        if (NmCurrentState == NM_STATE_REPEAT_MESSAGE)
; ..\component\ComM\Implementation\ComM.c	  6165        {
; ..\component\ComM\Implementation\ComM.c	  6166          /* #30 If Nm entered NM_STATE_REPEAT_MESSAGE state, set the status bit accordingly. */
; ..\component\ComM\Implementation\ComM.c	  6167          if( ComM_PncToChannelRoutingState[Channel] == COMM_PNCROUTING_LIMITED )
; ..\component\ComM\Implementation\ComM.c	  6168          {
; ..\component\ComM\Implementation\ComM.c	  6169            /* #300 If PNC routing is limited on the channel, immediately send PNC bits = 1 for all PNC's connected to the channel
; ..\component\ComM\Implementation\ComM.c	  6170             *      and being in state PNC_REQUESTED.
; ..\component\ComM\Implementation\ComM.c	  6171             */
; ..\component\ComM\Implementation\ComM.c	  6172            for (signalIndex = 0; signalIndex < ComM_GetSizeOfPncSignal(); signalIndex++) /* COV_COMM_FOR_LOOP_OPTIMIZATION */
; ..\component\ComM\Implementation\ComM.c	  6173            {
; ..\component\ComM\Implementation\ComM.c	  6174              if ((ComM_GetTypeOfPncSignal(signalIndex) == COMM_EIRA_TX_TYPEOFPNCSIGNAL) && (ComM_GetChannelIdxOfPncSignal(signalIndex) == Channel))
; ..\component\ComM\Implementation\ComM.c	  6175              {
; ..\component\ComM\Implementation\ComM.c	  6176                for (pnc = 0; pnc < ComM_GetSizeOfPnc(); pnc++)
; ..\component\ComM\Implementation\ComM.c	  6177                {
; ..\component\ComM\Implementation\ComM.c	  6178                  for (pncChIdx = ComM_GetPncChannelMappingStartIdxOfPncPb(pnc); pncChIdx < ComM_GetPncChannelMappingEndIdxOfPncPb(pnc); pncChIdx++)
; ..\component\ComM\Implementation\ComM.c	  6179                  {
; ..\component\ComM\Implementation\ComM.c	  6180                    /* PRQA S 3415 3 */ /* MD_ComM_3415 */
; ..\component\ComM\Implementation\ComM.c	  6181                    if ((!ComM_IsSignalStoredPncBitSet(signalIndex, pnc)) &&
; ..\component\ComM\Implementation\ComM.c	  6182                        (ComM_GetPncChannelMapping(pncChIdx) == Channel) &&
; ..\component\ComM\Implementation\ComM.c	  6183                        (ComM_PncGetGwChannelState(Channel, ComM_GetActivePncComMode(pnc)) == COMM_FULL_COM_NETWORK_REQUESTED))
; ..\component\ComM\Implementation\ComM.c	  6184                    {
; ..\component\ComM\Implementation\ComM.c	  6185                      /* #310 Attaching the channel: PNC Routing Limitation becomes temporarily disabled, send PNC bit = 1 if
; ..\component\ComM\Implementation\ComM.c	  6186                       *      1) PNC state is COMM_PNC_REQUESTED (the highest activation), then send bit = 1 on each channel or
; ..\component\ComM\Implementation\ComM.c	  6187                       *      2) PNC state is COMM_PNC_REQUESTED_PASSIVE (lower activation), then send bit = 1 on ACTIVE channels only.
; ..\component\ComM\Implementation\ComM.c	  6188                       */
; ..\component\ComM\Implementation\ComM.c	  6189                      ComM_PncSetBitInSignal(signalIndex, pnc);
; ..\component\ComM\Implementation\ComM.c	  6190                      sendSignal = TRUE;
; ..\component\ComM\Implementation\ComM.c	  6191                    }
; ..\component\ComM\Implementation\ComM.c	  6192                  }
; ..\component\ComM\Implementation\ComM.c	  6193                }
; ..\component\ComM\Implementation\ComM.c	  6194  
; ..\component\ComM\Implementation\ComM.c	  6195                if (sendSignal == TRUE)
; ..\component\ComM\Implementation\ComM.c	  6196                {
; ..\component\ComM\Implementation\ComM.c	  6197                  ComM_ExecuteComSendSignal(signalIndex, ComM_GetAddrPncSignalValues(ComM_GetPncSignalValuesStartIdxOfPncSignal(signalIndex))); /* SBSW_COMM_CALL_WITH_PTR_TO_CONST */
; ..\component\ComM\Implementation\ComM.c	  6198                }
; ..\component\ComM\Implementation\ComM.c	  6199                break; /* There is only one EIRA_TX signal per channel */
; ..\component\ComM\Implementation\ComM.c	  6200              }
; ..\component\ComM\Implementation\ComM.c	  6201            }
; ..\component\ComM\Implementation\ComM.c	  6202          }
; ..\component\ComM\Implementation\ComM.c	  6203  
; ..\component\ComM\Implementation\ComM.c	  6204          /* Example sequence: Routing Limitation is enabled on a channel and a PNC is already in PNC_REQUESTED.
; ..\component\ComM\Implementation\ComM.c	  6205           * Channel user requests FULL_COM, channel enters COMM_NETWORK_REQUESTED and Nm enters NM_STATE_REPEAT_MESSAGE.
; ..\component\ComM\Implementation\ComM.c	  6206           * Then the user requests NO_COM while Nm is still in NM_STATE_REPEAT_MESSAGE. In this case
; ..\component\ComM\Implementation\ComM.c	  6207           * ComM_PncToChannelRoutingState[Channel] shall be COMM_PNCROUTING_NM_REPEAT_MESSAGE and PNC bit=1 shall be
; ..\component\ComM\Implementation\ComM.c	  6208           * sent as long as Nm is in Repeat Message state.
; ..\component\ComM\Implementation\ComM.c	  6209           */
; ..\component\ComM\Implementation\ComM.c	  6210          ComM_PncToChannelRoutingState[Channel] |= COMM_PNCROUTING_NM_REPEAT_MESSAGE; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6211        }
; ..\component\ComM\Implementation\ComM.c	  6212        else if (NmPreviousState == NM_STATE_REPEAT_MESSAGE)
; ..\component\ComM\Implementation\ComM.c	  6213        {
; ..\component\ComM\Implementation\ComM.c	  6214          /* #40 If Nm has left NM_STATE_REPEAT_MESSAGE, clear the status bit. If PNC routing status changes to COMM_PNCROUTING_LIMITED,
; ..\component\ComM\Implementation\ComM.c	  6215           *     ComM will set PNC bits to 0 for all PNC's connected to the channel and being in state PNC_REQUESTED in the next ComM_MainFunction().
; ..\component\ComM\Implementation\ComM.c	  6216           */
; ..\component\ComM\Implementation\ComM.c	  6217          ComM_PncToChannelRoutingState[Channel] &= COMM_PNCROUTING_NM_REPEAT_MESSAGE_CLEAR; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6218        }
; ..\component\ComM\Implementation\ComM.c	  6219        else
; ..\component\ComM\Implementation\ComM.c	  6220        {
; ..\component\ComM\Implementation\ComM.c	  6221          /* nothing to do */
; ..\component\ComM\Implementation\ComM.c	  6222        }
; ..\component\ComM\Implementation\ComM.c	  6223      }
; ..\component\ComM\Implementation\ComM.c	  6224      /* PRQA L:SUPPRESS_0715 */
; ..\component\ComM\Implementation\ComM.c	  6225    }
; ..\component\ComM\Implementation\ComM.c	  6226  
; ..\component\ComM\Implementation\ComM.c	  6227    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6228  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6229    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  6230    {
; ..\component\ComM\Implementation\ComM.c	  6231      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_CBK_NM_STATECHANGENOTIFICATION, errorId );
; ..\component\ComM\Implementation\ComM.c	  6232    }
; ..\component\ComM\Implementation\ComM.c	  6233  # else
; ..\component\ComM\Implementation\ComM.c	  6234    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6235  # endif
; ..\component\ComM\Implementation\ComM.c	  6236  
; ..\component\ComM\Implementation\ComM.c	  6237  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\ComM\Implementation\ComM.c	  6238  #endif
; ..\component\ComM\Implementation\ComM.c	  6239  
; ..\component\ComM\Implementation\ComM.c	  6240  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  6241    CALLBACK FUNCTIONS (AUTOSAR DCM)
; ..\component\ComM\Implementation\ComM.c	  6242  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  6243  
; ..\component\ComM\Implementation\ComM.c	  6244  #if (COMM_DCM_INDICATION == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6245  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  6246   *  ComM_DCM_ActiveDiagnostic()
; ..\component\ComM\Implementation\ComM.c	  6247   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  6248  /*!
; ..\component\ComM\Implementation\ComM.c	  6249   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  6250   *
; ..\component\ComM\Implementation\ComM.c	  6251   *
; ..\component\ComM\Implementation\ComM.c	  6252   *
; ..\component\ComM\Implementation\ComM.c	  6253   *
; ..\component\ComM\Implementation\ComM.c	  6254   *
; ..\component\ComM\Implementation\ComM.c	  6255   */
; ..\component\ComM\Implementation\ComM.c	  6256  FUNC(void, COMM_CODE) ComM_DCM_ActiveDiagnostic(NetworkHandleType Channel)
; ..\component\ComM\Implementation\ComM.c	  6257  {
; ..\component\ComM\Implementation\ComM.c	  6258    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6259    uint8 errorId = COMM_E_NO_ERROR; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\ComM\Implementation\ComM.c	  6260  # if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6261  #  if ( (COMM_EXISTS_PASSIVE_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_LINSLAVE_NMTYPEOFCHANNEL == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  6262    boolean isPassiveOrLinSlaveOfChannel;
; ..\component\ComM\Implementation\ComM.c	  6263  #  endif
; ..\component\ComM\Implementation\ComM.c	  6264  # endif
; ..\component\ComM\Implementation\ComM.c	  6265  
; ..\component\ComM\Implementation\ComM.c	  6266    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6267  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6268    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  6269    if (ComM_InitStatus != COMM_INIT)
; ..\component\ComM\Implementation\ComM.c	  6270    {
; ..\component\ComM\Implementation\ComM.c	  6271      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  6272    }
; ..\component\ComM\Implementation\ComM.c	  6273    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  6274    else if ((Channel >= COMM_ACTIVE_CHANNEL)
; ..\component\ComM\Implementation\ComM.c	  6275  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6276     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  6277  #  endif
; ..\component\ComM\Implementation\ComM.c	  6278         )
; ..\component\ComM\Implementation\ComM.c	  6279    {
; ..\component\ComM\Implementation\ComM.c	  6280      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  6281    }
; ..\component\ComM\Implementation\ComM.c	  6282    else
; ..\component\ComM\Implementation\ComM.c	  6283  # endif
; ..\component\ComM\Implementation\ComM.c	  6284    {
; ..\component\ComM\Implementation\ComM.c	  6285      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6286      /* #30 Check that Nm Variant of the channel is not PASSIVE or LINSLAVE. */
; ..\component\ComM\Implementation\ComM.c	  6287  # if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6288  #  if ( (COMM_EXISTS_PASSIVE_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_LINSLAVE_NMTYPEOFCHANNEL == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  6289      isPassiveOrLinSlaveOfChannel = (boolean)ComM_IsPassiveOrLinSlaveOfChannel(Channel); /* PRQA S 4304 */ /* MD_MSR_AutosarBoolean */
; ..\component\ComM\Implementation\ComM.c	  6290      /* PRQA S 2991, 2995 1 */ /* MD_ComM_2995_2991 */
; ..\component\ComM\Implementation\ComM.c	  6291      if (isPassiveOrLinSlaveOfChannel == TRUE) /* COV_COMM_NM_LINSLAVE_OR_PASSIVE_ONLY TX */ /*lint !e506 */
; ..\component\ComM\Implementation\ComM.c	  6292      {
; ..\component\ComM\Implementation\ComM.c	  6293        errorId = COMM_E_DIAGNOSTIC_NOT_SUPPORTED; /* ESCAN00072762 */
; ..\component\ComM\Implementation\ComM.c	  6294      }
; ..\component\ComM\Implementation\ComM.c	  6295      else
; ..\component\ComM\Implementation\ComM.c	  6296  #  endif
; ..\component\ComM\Implementation\ComM.c	  6297      /* #40 If parameter checks are successful, store the active status of the diagnostic session on the channel. */
; ..\component\ComM\Implementation\ComM.c	  6298      {
; ..\component\ComM\Implementation\ComM.c	  6299  #  if ( (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_NONE_NMTYPEOFCHANNEL == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  6300        ComM_SetDcmRequestActive(Channel, TRUE); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  6301  #  endif
; ..\component\ComM\Implementation\ComM.c	  6302      }
; ..\component\ComM\Implementation\ComM.c	  6303  # else
; ..\component\ComM\Implementation\ComM.c	  6304      errorId = COMM_E_DIAGNOSTIC_NOT_SUPPORTED; /* ESCAN00072762 */
; ..\component\ComM\Implementation\ComM.c	  6305  # endif
; ..\component\ComM\Implementation\ComM.c	  6306    }
; ..\component\ComM\Implementation\ComM.c	  6307  
; ..\component\ComM\Implementation\ComM.c	  6308    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6309  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6310  #  if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  6311    /* Don't need a condition because errorId == COMM_E_DIAGNOSTIC_NOT_SUPPORTED in this case */
; ..\component\ComM\Implementation\ComM.c	  6312    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6313  #  else
; ..\component\ComM\Implementation\ComM.c	  6314  #   if ( (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_NONE_NMTYPEOFCHANNEL == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  6315    if (errorId != COMM_E_NO_ERROR) /* COV_COMM_NM_LINSLAVE_OR_PASSIVE_ONLY TX */
; ..\component\ComM\Implementation\ComM.c	  6316  #   endif
; ..\component\ComM\Implementation\ComM.c	  6317  #  endif
; ..\component\ComM\Implementation\ComM.c	  6318    {
; ..\component\ComM\Implementation\ComM.c	  6319      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_CBK_DCM_ACTIVEDIAGNOSTIC, errorId );
; ..\component\ComM\Implementation\ComM.c	  6320    }
; ..\component\ComM\Implementation\ComM.c	  6321  # else
; ..\component\ComM\Implementation\ComM.c	  6322    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6323    COMM_DUMMY_STATEMENT(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6324  # endif
; ..\component\ComM\Implementation\ComM.c	  6325  }
; ..\component\ComM\Implementation\ComM.c	  6326  #endif
; ..\component\ComM\Implementation\ComM.c	  6327  
; ..\component\ComM\Implementation\ComM.c	  6328  #if (COMM_DCM_INDICATION == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6329  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  6330   *  ComM_DCM_InactiveDiagnostic()
; ..\component\ComM\Implementation\ComM.c	  6331   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  6332  /*!
; ..\component\ComM\Implementation\ComM.c	  6333   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  6334   *
; ..\component\ComM\Implementation\ComM.c	  6335   *
; ..\component\ComM\Implementation\ComM.c	  6336   *
; ..\component\ComM\Implementation\ComM.c	  6337   *
; ..\component\ComM\Implementation\ComM.c	  6338   *
; ..\component\ComM\Implementation\ComM.c	  6339   */
; ..\component\ComM\Implementation\ComM.c	  6340  FUNC(void, COMM_CODE) ComM_DCM_InactiveDiagnostic(NetworkHandleType Channel)
; ..\component\ComM\Implementation\ComM.c	  6341  {
; ..\component\ComM\Implementation\ComM.c	  6342    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6343    uint8 errorId = COMM_E_NO_ERROR; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\ComM\Implementation\ComM.c	  6344  # if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6345  #  if ( (COMM_EXISTS_PASSIVE_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_LINSLAVE_NMTYPEOFCHANNEL == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  6346    boolean isPassiveOrLinSlaveOfChannel;
; ..\component\ComM\Implementation\ComM.c	  6347  #  endif
; ..\component\ComM\Implementation\ComM.c	  6348  # endif
; ..\component\ComM\Implementation\ComM.c	  6349  
; ..\component\ComM\Implementation\ComM.c	  6350    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6351  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6352    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  6353    if (ComM_InitStatus != COMM_INIT)
; ..\component\ComM\Implementation\ComM.c	  6354    {
; ..\component\ComM\Implementation\ComM.c	  6355      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  6356    }
; ..\component\ComM\Implementation\ComM.c	  6357    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  6358    else if ((Channel >= COMM_ACTIVE_CHANNEL)
; ..\component\ComM\Implementation\ComM.c	  6359  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6360     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  6361  #  endif
; ..\component\ComM\Implementation\ComM.c	  6362         )
; ..\component\ComM\Implementation\ComM.c	  6363    {
; ..\component\ComM\Implementation\ComM.c	  6364      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  6365    }
; ..\component\ComM\Implementation\ComM.c	  6366    else
; ..\component\ComM\Implementation\ComM.c	  6367  # endif
; ..\component\ComM\Implementation\ComM.c	  6368    {
; ..\component\ComM\Implementation\ComM.c	  6369      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6370      /* #30 Check that Nm Variant of the channel is not PASSIVE or LINSLAVE. */
; ..\component\ComM\Implementation\ComM.c	  6371  # if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6372  #  if ( (COMM_EXISTS_PASSIVE_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_LINSLAVE_NMTYPEOFCHANNEL == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  6373      isPassiveOrLinSlaveOfChannel = (boolean) ComM_IsPassiveOrLinSlaveOfChannel(Channel); /* PRQA S 4304 */ /* MD_MSR_AutosarBoolean */
; ..\component\ComM\Implementation\ComM.c	  6374      /* PRQA S 2991, 2995 1 */ /* MD_ComM_2995_2991 */
; ..\component\ComM\Implementation\ComM.c	  6375      if (isPassiveOrLinSlaveOfChannel == TRUE) /* COV_COMM_NM_LINSLAVE_OR_PASSIVE_ONLY TX */ /*lint !e506 */
; ..\component\ComM\Implementation\ComM.c	  6376      {
; ..\component\ComM\Implementation\ComM.c	  6377        errorId = COMM_E_DIAGNOSTIC_NOT_SUPPORTED; /* ESCAN00072762 */
; ..\component\ComM\Implementation\ComM.c	  6378      }
; ..\component\ComM\Implementation\ComM.c	  6379      else
; ..\component\ComM\Implementation\ComM.c	  6380  #  endif
; ..\component\ComM\Implementation\ComM.c	  6381      /* #40 If parameter checks are successful, store the inactive status of the diagnostic session on the channel. */
; ..\component\ComM\Implementation\ComM.c	  6382      {
; ..\component\ComM\Implementation\ComM.c	  6383  #  if ( (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_NONE_NMTYPEOFCHANNEL == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  6384        ComM_SetDcmRequestActive(Channel, FALSE); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  6385  #  endif
; ..\component\ComM\Implementation\ComM.c	  6386      }
; ..\component\ComM\Implementation\ComM.c	  6387  # else
; ..\component\ComM\Implementation\ComM.c	  6388      errorId = COMM_E_DIAGNOSTIC_NOT_SUPPORTED; /* ESCAN00072762 */
; ..\component\ComM\Implementation\ComM.c	  6389  # endif
; ..\component\ComM\Implementation\ComM.c	  6390    }
; ..\component\ComM\Implementation\ComM.c	  6391  
; ..\component\ComM\Implementation\ComM.c	  6392    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6393  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6394  #  if (COMM_KEEP_AWAKE_CHANNELS_SUPPORT == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  6395    /* Don't need a condition because errorId == COMM_E_DIAGNOSTIC_NOT_SUPPORTED in this case */
; ..\component\ComM\Implementation\ComM.c	  6396    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6397  #  else
; ..\component\ComM\Implementation\ComM.c	  6398  #   if ( (COMM_EXISTS_FULL_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_LIGHT_NMTYPEOFCHANNEL == STD_ON) || (COMM_EXISTS_NONE_NMTYPEOFCHANNEL == STD_ON) )
; ..\component\ComM\Implementation\ComM.c	  6399    if (errorId != COMM_E_NO_ERROR) /* COV_COMM_NM_LINSLAVE_OR_PASSIVE_ONLY TX */
; ..\component\ComM\Implementation\ComM.c	  6400  #   endif
; ..\component\ComM\Implementation\ComM.c	  6401  #  endif
; ..\component\ComM\Implementation\ComM.c	  6402    {
; ..\component\ComM\Implementation\ComM.c	  6403      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_CBK_DCM_INACTIVEDIAGNOSTIC, errorId );
; ..\component\ComM\Implementation\ComM.c	  6404    }
; ..\component\ComM\Implementation\ComM.c	  6405  # else
; ..\component\ComM\Implementation\ComM.c	  6406    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6407    COMM_DUMMY_STATEMENT(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6408  # endif
; ..\component\ComM\Implementation\ComM.c	  6409  }
; ..\component\ComM\Implementation\ComM.c	  6410  #endif
; ..\component\ComM\Implementation\ComM.c	  6411  
; ..\component\ComM\Implementation\ComM.c	  6412  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  6413    CALLBACK FUNCTIONS (AUTOSAR EcuM)
; ..\component\ComM\Implementation\ComM.c	  6414  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  6415  
; ..\component\ComM\Implementation\ComM.c	  6416  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  6417   *  ComM_EcuM_WakeUpIndication()
; ..\component\ComM\Implementation\ComM.c	  6418   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  6419  /*!
; ..\component\ComM\Implementation\ComM.c	  6420   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  6421   *
; ..\component\ComM\Implementation\ComM.c	  6422   *
; ..\component\ComM\Implementation\ComM.c	  6423   *
; ..\component\ComM\Implementation\ComM.c	  6424   *
; ..\component\ComM\Implementation\ComM.c	  6425   *
; ..\component\ComM\Implementation\ComM.c	  6426   *
; ..\component\ComM\Implementation\ComM.c	  6427   *
; ..\component\ComM\Implementation\ComM.c	  6428   *
; ..\component\ComM\Implementation\ComM.c	  6429   *
; ..\component\ComM\Implementation\ComM.c	  6430   *
; ..\component\ComM\Implementation\ComM.c	  6431   *
; ..\component\ComM\Implementation\ComM.c	  6432   *
; ..\component\ComM\Implementation\ComM.c	  6433   */
; ..\component\ComM\Implementation\ComM.c	  6434  FUNC(void, COMM_CODE) ComM_EcuM_WakeUpIndication(NetworkHandleType Channel)
; Function ComM_EcuM_WakeUpIndication
.L196:
ComM_EcuM_WakeUpIndication:	.type	func

; ..\component\ComM\Implementation\ComM.c	  6435  {
; ..\component\ComM\Implementation\ComM.c	  6436    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6437  #if ( COMM_SYNCHRONOUS_WAKE_UP == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  6438    uint8 ComM_ChannelIndex;
; ..\component\ComM\Implementation\ComM.c	  6439  # if ( COMM_PNC_SUPPORT == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  6440  #  if (COMM_PNC_PS_TIMER > 0U) /* ESCAN00067357 */
; ..\component\ComM\Implementation\ComM.c	  6441    ComM_PncIterType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  6442  #  endif
; ..\component\ComM\Implementation\ComM.c	  6443  # endif
; ..\component\ComM\Implementation\ComM.c	  6444  #endif
; ..\component\ComM\Implementation\ComM.c	  6445    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  6446  
; ..\component\ComM\Implementation\ComM.c	  6447    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6448  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6449    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  6450    if (ComM_InitStatus != COMM_INIT)
	mov	d7,#0
	fcall	.cocofun_1
.L789:
	jeq	d15,#1,.L115
.L790:

; ..\component\ComM\Implementation\ComM.c	  6451    {
; ..\component\ComM\Implementation\ComM.c	  6452      errorId = COMM_E_NOT_INITED;
	mov	d7,#1
	j	.L116
.L115:

; ..\component\ComM\Implementation\ComM.c	  6453    }
; ..\component\ComM\Implementation\ComM.c	  6454    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  6455    else if ((Channel >= COMM_ACTIVE_CHANNEL)
	jeq	d4,#0,.L117
.L791:

; ..\component\ComM\Implementation\ComM.c	  6456  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6457     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  6458  #  endif
; ..\component\ComM\Implementation\ComM.c	  6459         )
; ..\component\ComM\Implementation\ComM.c	  6460    {
; ..\component\ComM\Implementation\ComM.c	  6461      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d7,#2
	j	.L118
.L117:

; ..\component\ComM\Implementation\ComM.c	  6462    }
; ..\component\ComM\Implementation\ComM.c	  6463    else
; ..\component\ComM\Implementation\ComM.c	  6464  # endif
; ..\component\ComM\Implementation\ComM.c	  6465    {
; ..\component\ComM\Implementation\ComM.c	  6466      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6467      /* #30 If Synchronous Wake-up is enabled, notify passive wake-up to all ComM channels being in NO_COM or SI_COM state.
; ..\component\ComM\Implementation\ComM.c	  6468       *     This is done by setting the bus-side requested state to FULL_COM (Network Requested or Ready Sleep). */
; ..\component\ComM\Implementation\ComM.c	  6469  #if ( COMM_SYNCHRONOUS_WAKE_UP == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  6470      for(ComM_ChannelIndex = 0; ComM_ChannelIndex < ComM_GetSizeOfChannel(); ComM_ChannelIndex++)
; ..\component\ComM\Implementation\ComM.c	  6471      {
; ..\component\ComM\Implementation\ComM.c	  6472        if((ComM_ActiveComMode[ComM_ChannelIndex] & COMM_FULL_COMMUNICATION) == 0u)
	movh.a	a2,#@his(ComM_ActiveComMode)
.L792:
	ld.bu	d15,[a2]@los(ComM_ActiveComMode)
.L793:

; ..\component\ComM\Implementation\ComM.c	  6473        {
; ..\component\ComM\Implementation\ComM.c	  6474          ComM_BusComModeReq[ComM_ChannelIndex] = ComM_GetWakeupStateOfChannel(ComM_ChannelIndex); /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
	movh.a	a15,#@his(ComM_BusComModeReq)
.L794:
	and	d15,#2
	ld.bu	d0,[a15]@los(ComM_BusComModeReq)
.L795:
	cmovn	d0,d15,#2
	st.b	[a15]@los(ComM_BusComModeReq),d0
.L118:
.L116:

; ..\component\ComM\Implementation\ComM.c	  6475  
; ..\component\ComM\Implementation\ComM.c	  6476          /* #31 If NM Gateway Extension is enabled notify Nm_PassiveStartUp() for each channel with Nm. */
; ..\component\ComM\Implementation\ComM.c	  6477  # if( COMM_NM_GW_EXT_ENABLED == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  6478  #  if (COMM_ISDEF_NMSUPPORTOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  6479          if (ComM_IsNmSupportOfChannel(ComM_ChannelIndex))
; ..\component\ComM\Implementation\ComM.c	  6480  #  endif
; ..\component\ComM\Implementation\ComM.c	  6481          {
; ..\component\ComM\Implementation\ComM.c	  6482            (void)Nm_PassiveStartUp(ComM_ChannelIndex);
; ..\component\ComM\Implementation\ComM.c	  6483          }
; ..\component\ComM\Implementation\ComM.c	  6484  # endif
; ..\component\ComM\Implementation\ComM.c	  6485        }
; ..\component\ComM\Implementation\ComM.c	  6486      }
; ..\component\ComM\Implementation\ComM.c	  6487  
; ..\component\ComM\Implementation\ComM.c	  6488      /* #40 If Synchronous Wake-up is enabled, activate all PNCs at least for the duration of the PNC Prepare Sleep Timer. */
; ..\component\ComM\Implementation\ComM.c	  6489  # if (COMM_PNC_SUPPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6490  #  if (COMM_PNC_PS_TIMER > 0U) /* ESCAN00067357 */
; ..\component\ComM\Implementation\ComM.c	  6491  #   if (COMM_PNC_CHECK_ENABLED_AT_RUNTIME == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6492      if(ComM_HasPncPb())
; ..\component\ComM\Implementation\ComM.c	  6493  #   endif
; ..\component\ComM\Implementation\ComM.c	  6494      {
; ..\component\ComM\Implementation\ComM.c	  6495        for(pncIndex = 0; pncIndex < ComM_GetSizeOfPnc(); pncIndex++)
; ..\component\ComM\Implementation\ComM.c	  6496        {
; ..\component\ComM\Implementation\ComM.c	  6497          if( (ComM_GetActivePncComMode(pncIndex) == COMM_PNC_NO_COMMUNICATION) && (ComM_GetBusPncComModeReq(pncIndex) == COMM_PNC_NO_COMMUNICATION) )
; ..\component\ComM\Implementation\ComM.c	  6498          {
; ..\component\ComM\Implementation\ComM.c	  6499            ComM_SetBusPncComModeReq(pncIndex, COMM_PNC_PREPARE_SLEEP); /* SBSW_COMM_PNC_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  6500          }
; ..\component\ComM\Implementation\ComM.c	  6501        }
; ..\component\ComM\Implementation\ComM.c	  6502      }
; ..\component\ComM\Implementation\ComM.c	  6503  #  endif
; ..\component\ComM\Implementation\ComM.c	  6504  # endif
; ..\component\ComM\Implementation\ComM.c	  6505  
; ..\component\ComM\Implementation\ComM.c	  6506  #else /* #if ( COMM_SYNCHRONOUS_WAKE_UP == STD_OFF ) */
; ..\component\ComM\Implementation\ComM.c	  6507  
; ..\component\ComM\Implementation\ComM.c	  6508      /* #50 If Synchronous Wake-up is disabled, notify passive wake-up to the channel by setting the bus-side
; ..\component\ComM\Implementation\ComM.c	  6509       *     requested state to FULL_COM (Network Requested or Ready Sleep). Ignore the wake-up in FULL_COM mode. */
; ..\component\ComM\Implementation\ComM.c	  6510      if((ComM_ActiveComMode[Channel] & COMM_FULL_COMMUNICATION) == 0u) /* ESCAN00091475 */
; ..\component\ComM\Implementation\ComM.c	  6511      {
; ..\component\ComM\Implementation\ComM.c	  6512        ComM_BusComModeReq[Channel] = ComM_GetWakeupStateOfChannel(Channel); /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6513  
; ..\component\ComM\Implementation\ComM.c	  6514        /* #51 If NM Gateway Extension is enabled notify Nm_PassiveStartUp(). */
; ..\component\ComM\Implementation\ComM.c	  6515  # if( COMM_NM_GW_EXT_ENABLED == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  6516  #  if (COMM_ISDEF_NMSUPPORTOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  6517        if (ComM_IsNmSupportOfChannel(Channel)) /* COV_COMM_SUBSET_OF_ELEMENTS */
; ..\component\ComM\Implementation\ComM.c	  6518  #  endif
; ..\component\ComM\Implementation\ComM.c	  6519        {
; ..\component\ComM\Implementation\ComM.c	  6520          (void)Nm_PassiveStartUp(Channel);
; ..\component\ComM\Implementation\ComM.c	  6521        }
; ..\component\ComM\Implementation\ComM.c	  6522  # endif
; ..\component\ComM\Implementation\ComM.c	  6523      }
; ..\component\ComM\Implementation\ComM.c	  6524  # if ( COMM_MANAGINGCHANNELOFCHANNEL == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  6525      /* #52 If the indicated channel is a managed channel, notify the passive wake-up also to the corresponding managing channel
; ..\component\ComM\Implementation\ComM.c	  6526      by setting the bus-side requested state to FULL_COM. Ignore the wake-up in FULL_COM mode. */
; ..\component\ComM\Implementation\ComM.c	  6527      if ( ComM_GetManagingChannelIdOfChannel(Channel) != COMM_NO_MANAGINGCHANNELIDOFCHANNEL )
; ..\component\ComM\Implementation\ComM.c	  6528      {
; ..\component\ComM\Implementation\ComM.c	  6529        if ((ComM_ActiveComMode[ComM_GetManagingChannelIdOfChannel(Channel)] & COMM_FULL_COMMUNICATION) == 0u)
; ..\component\ComM\Implementation\ComM.c	  6530        {
; ..\component\ComM\Implementation\ComM.c	  6531          ComM_BusComModeReq[ComM_GetManagingChannelIdOfChannel(Channel)] = ComM_GetWakeupStateOfChannel(ComM_GetManagingChannelIdOfChannel(Channel)); /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6532  #  if( COMM_NM_GW_EXT_ENABLED == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  6533          {
; ..\component\ComM\Implementation\ComM.c	  6534            (void)Nm_PassiveStartUp(ComM_GetManagingChannelIdOfChannel(Channel));
; ..\component\ComM\Implementation\ComM.c	  6535          }
; ..\component\ComM\Implementation\ComM.c	  6536  #  endif
; ..\component\ComM\Implementation\ComM.c	  6537        }
; ..\component\ComM\Implementation\ComM.c	  6538      }
; ..\component\ComM\Implementation\ComM.c	  6539  # endif
; ..\component\ComM\Implementation\ComM.c	  6540  #endif /* #if ( COMM_SYNCHRONOUS_WAKE_UP == STD_ON ) */
; ..\component\ComM\Implementation\ComM.c	  6541    }
; ..\component\ComM\Implementation\ComM.c	  6542  
; ..\component\ComM\Implementation\ComM.c	  6543    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6544  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6545    if (errorId != COMM_E_NO_ERROR)
	jeq	d7,#0,.L120
.L796:

; ..\component\ComM\Implementation\ComM.c	  6546    {
; ..\component\ComM\Implementation\ComM.c	  6547      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_CBK_ECUM_WAKEUPINDICATION, errorId );
	fcall	.cocofun_2
.L574:
	mov	d6,#42
.L797:
	j	Det_ReportError
.L120:

; ..\component\ComM\Implementation\ComM.c	  6548    }
; ..\component\ComM\Implementation\ComM.c	  6549  # else
; ..\component\ComM\Implementation\ComM.c	  6550    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6551  #  if (COMM_SYNCHRONOUS_WAKE_UP == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6552    COMM_DUMMY_STATEMENT(Channel); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6553  #  endif
; ..\component\ComM\Implementation\ComM.c	  6554  # endif
; ..\component\ComM\Implementation\ComM.c	  6555  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
	ret
.L477:
	
__ComM_EcuM_WakeUpIndication_function_end:
	.size	ComM_EcuM_WakeUpIndication,__ComM_EcuM_WakeUpIndication_function_end-ComM_EcuM_WakeUpIndication
.L297:
	; End of function
	
	.sdecl	'.text.ComM.ComM_BusSM_ModeIndication',code,cluster('ComM_BusSM_ModeIndication')
	.sect	'.text.ComM.ComM_BusSM_ModeIndication'
	.align	2
	
	.global	ComM_BusSM_ModeIndication

; ..\component\ComM\Implementation\ComM.c	  6556  
; ..\component\ComM\Implementation\ComM.c	  6557  #if ((COMM_WAKEUPENABLEDOFPNC == STD_ON) && (COMM_PNC_PS_TIMER > 0U))
; ..\component\ComM\Implementation\ComM.c	  6558  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  6559   *  ComM_EcuM_PNCWakeUpIndication()
; ..\component\ComM\Implementation\ComM.c	  6560   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  6561  /*!
; ..\component\ComM\Implementation\ComM.c	  6562   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  6563   *
; ..\component\ComM\Implementation\ComM.c	  6564   *
; ..\component\ComM\Implementation\ComM.c	  6565   *
; ..\component\ComM\Implementation\ComM.c	  6566   *
; ..\component\ComM\Implementation\ComM.c	  6567   *
; ..\component\ComM\Implementation\ComM.c	  6568   *
; ..\component\ComM\Implementation\ComM.c	  6569   *
; ..\component\ComM\Implementation\ComM.c	  6570   */
; ..\component\ComM\Implementation\ComM.c	  6571  FUNC(void, COMM_CODE) ComM_EcuM_PNCWakeUpIndication( PNCHandleType PNCid )
; ..\component\ComM\Implementation\ComM.c	  6572  {
; ..\component\ComM\Implementation\ComM.c	  6573    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6574    uint8 errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  6575    ComM_PncIterType pncIndex;
; ..\component\ComM\Implementation\ComM.c	  6576    ComM_PncChannelMappingIterType pncChannelMappingIndex;
; ..\component\ComM\Implementation\ComM.c	  6577    ComM_ChannelIterType channelIndex;
; ..\component\ComM\Implementation\ComM.c	  6578  
; ..\component\ComM\Implementation\ComM.c	  6579    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6580  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6581    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  6582    if (ComM_InitStatus == (ComM_InitStatusType)COMM_UNINIT)
; ..\component\ComM\Implementation\ComM.c	  6583    {
; ..\component\ComM\Implementation\ComM.c	  6584      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  6585    }
; ..\component\ComM\Implementation\ComM.c	  6586    else
; ..\component\ComM\Implementation\ComM.c	  6587  # endif
; ..\component\ComM\Implementation\ComM.c	  6588    {
; ..\component\ComM\Implementation\ComM.c	  6589      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6590  # if (COMM_PNC_CHECK_ENABLED_AT_RUNTIME == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6591      if(ComM_HasPncPb())
; ..\component\ComM\Implementation\ComM.c	  6592  # endif
; ..\component\ComM\Implementation\ComM.c	  6593      {
; ..\component\ComM\Implementation\ComM.c	  6594        /* Get the internal PNC index from the given PNC identifier */
; ..\component\ComM\Implementation\ComM.c	  6595        for (pncIndex = 0; pncIndex < ComM_GetSizeOfPnc(); pncIndex++)
; ..\component\ComM\Implementation\ComM.c	  6596        {
; ..\component\ComM\Implementation\ComM.c	  6597          if (PNCid == ComM_GetPncIdOfPnc(pncIndex))
; ..\component\ComM\Implementation\ComM.c	  6598          {
; ..\component\ComM\Implementation\ComM.c	  6599            break;
; ..\component\ComM\Implementation\ComM.c	  6600          }
; ..\component\ComM\Implementation\ComM.c	  6601        }
; ..\component\ComM\Implementation\ComM.c	  6602  
; ..\component\ComM\Implementation\ComM.c	  6603        /* #20 Check parameter 'PNCid': it must be a valid PNC identifier. */
; ..\component\ComM\Implementation\ComM.c	  6604        if (pncIndex < ComM_GetSizeOfPnc())
; ..\component\ComM\Implementation\ComM.c	  6605        {
; ..\component\ComM\Implementation\ComM.c	  6606          /* #30 Wakeup the PNC if it is in NO_COM state and no wake-up occurred before. */
; ..\component\ComM\Implementation\ComM.c	  6607          if ((ComM_GetActivePncComMode(pncIndex) == COMM_PNC_NO_COMMUNICATION) && (ComM_GetBusPncComModeReq(pncIndex) == COMM_PNC_NO_COMMUNICATION)) /*lint !e661 */
; ..\component\ComM\Implementation\ComM.c	  6608          {
; ..\component\ComM\Implementation\ComM.c	  6609            ComM_SetBusPncComModeReq(pncIndex, COMM_PNC_PREPARE_SLEEP); /* SBSW_COMM_PNC_CSL02 */ /*lint !e661 */
; ..\component\ComM\Implementation\ComM.c	  6610          }
; ..\component\ComM\Implementation\ComM.c	  6611  
; ..\component\ComM\Implementation\ComM.c	  6612          /* #40 Propagate the wake-up to all channels that are mapped to the PNC and are in NO_COM or SI_COM state. */
; ..\component\ComM\Implementation\ComM.c	  6613          for (pncChannelMappingIndex = ComM_GetPncChannelMappingStartIdxOfPncPb(pncIndex);
; ..\component\ComM\Implementation\ComM.c	  6614               pncChannelMappingIndex < ComM_GetPncChannelMappingEndIdxOfPncPb(pncIndex);
; ..\component\ComM\Implementation\ComM.c	  6615               pncChannelMappingIndex++)
; ..\component\ComM\Implementation\ComM.c	  6616          {
; ..\component\ComM\Implementation\ComM.c	  6617            channelIndex = ComM_GetPncChannelMapping(pncChannelMappingIndex);
; ..\component\ComM\Implementation\ComM.c	  6618  
; ..\component\ComM\Implementation\ComM.c	  6619            if ((ComM_ActiveComMode[channelIndex] & COMM_FULL_COMMUNICATION) == 0u)
; ..\component\ComM\Implementation\ComM.c	  6620            {
; ..\component\ComM\Implementation\ComM.c	  6621              ComM_BusComModeReq[channelIndex] = ComM_GetWakeupStateOfChannel(channelIndex); /* SBSW_COMM_BusComModeReq_over_PncChannelMapping_CSL03 */
; ..\component\ComM\Implementation\ComM.c	  6622            }
; ..\component\ComM\Implementation\ComM.c	  6623          }
; ..\component\ComM\Implementation\ComM.c	  6624  
; ..\component\ComM\Implementation\ComM.c	  6625          /* #50 If Synchronous Wake-up is enabled, propagate the wake-up to all channels that are in NO_COM or SI_COM state. */
; ..\component\ComM\Implementation\ComM.c	  6626  # if (COMM_SYNCHRONOUS_WAKE_UP == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6627          for(channelIndex = 0; channelIndex < ComM_GetSizeOfChannel(); channelIndex++)
; ..\component\ComM\Implementation\ComM.c	  6628          {
; ..\component\ComM\Implementation\ComM.c	  6629            if((ComM_ActiveComMode[channelIndex] & COMM_FULL_COMMUNICATION) == 0u)
; ..\component\ComM\Implementation\ComM.c	  6630            {
; ..\component\ComM\Implementation\ComM.c	  6631              ComM_BusComModeReq[channelIndex] = ComM_GetWakeupStateOfChannel(channelIndex); /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6632            }
; ..\component\ComM\Implementation\ComM.c	  6633          }
; ..\component\ComM\Implementation\ComM.c	  6634  # endif
; ..\component\ComM\Implementation\ComM.c	  6635  
; ..\component\ComM\Implementation\ComM.c	  6636  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6637          errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  6638  # endif
; ..\component\ComM\Implementation\ComM.c	  6639        }
; ..\component\ComM\Implementation\ComM.c	  6640      }
; ..\component\ComM\Implementation\ComM.c	  6641    }
; ..\component\ComM\Implementation\ComM.c	  6642  
; ..\component\ComM\Implementation\ComM.c	  6643    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6644  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6645    /* #60 Report errors if applicable. */
; ..\component\ComM\Implementation\ComM.c	  6646    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  6647    {
; ..\component\ComM\Implementation\ComM.c	  6648      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_CBK_ECUM_PNCWAKEUPINDICATION, errorId );
; ..\component\ComM\Implementation\ComM.c	  6649    }
; ..\component\ComM\Implementation\ComM.c	  6650  # else
; ..\component\ComM\Implementation\ComM.c	  6651    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6652  # endif
; ..\component\ComM\Implementation\ComM.c	  6653  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\ComM\Implementation\ComM.c	  6654  #endif
; ..\component\ComM\Implementation\ComM.c	  6655  
; ..\component\ComM\Implementation\ComM.c	  6656  /**********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  6657    CALLBACK FUNCTIONS (AUTOSAR BusSM)
; ..\component\ComM\Implementation\ComM.c	  6658  **********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  6659  
; ..\component\ComM\Implementation\ComM.c	  6660  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  6661   *  ComM_BusSM_ModeIndication()
; ..\component\ComM\Implementation\ComM.c	  6662   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  6663  /*!
; ..\component\ComM\Implementation\ComM.c	  6664   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  6665   *
; ..\component\ComM\Implementation\ComM.c	  6666   *
; ..\component\ComM\Implementation\ComM.c	  6667   *
; ..\component\ComM\Implementation\ComM.c	  6668   *
; ..\component\ComM\Implementation\ComM.c	  6669   *
; ..\component\ComM\Implementation\ComM.c	  6670   *
; ..\component\ComM\Implementation\ComM.c	  6671   *
; ..\component\ComM\Implementation\ComM.c	  6672   *
; ..\component\ComM\Implementation\ComM.c	  6673   *
; ..\component\ComM\Implementation\ComM.c	  6674   */
; ..\component\ComM\Implementation\ComM.c	  6675  /* PRQA S 3673 1 */ /* MD_ComM_3673 */
; ..\component\ComM\Implementation\ComM.c	  6676  FUNC(void, COMM_CODE) ComM_BusSM_ModeIndication(NetworkHandleType Channel, P2VAR(ComM_ModeType, AUTOMATIC, COMM_APPL_VAR) ComMode)
; Function ComM_BusSM_ModeIndication
.L198:
ComM_BusSM_ModeIndication:	.type	func

; ..\component\ComM\Implementation\ComM.c	  6677  {
; ..\component\ComM\Implementation\ComM.c	  6678    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6679    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  6680  
; ..\component\ComM\Implementation\ComM.c	  6681    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6682  #if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6683    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  6684    if (ComM_InitStatus != COMM_INIT)
	mov	d8,#0
	fcall	.cocofun_1
.L802:
	jeq	d15,#1,.L121
.L803:

; ..\component\ComM\Implementation\ComM.c	  6685    {
; ..\component\ComM\Implementation\ComM.c	  6686      errorId = COMM_E_NOT_INITED;
	mov	d8,#1
	j	.L122
.L121:

; ..\component\ComM\Implementation\ComM.c	  6687    }
; ..\component\ComM\Implementation\ComM.c	  6688    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  6689    else if ((Channel >= COMM_ACTIVE_CHANNEL)
	jne	d4,#0,.L123
.L804:

; ..\component\ComM\Implementation\ComM.c	  6690  # if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6691     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  6692  # endif
; ..\component\ComM\Implementation\ComM.c	  6693         )
; ..\component\ComM\Implementation\ComM.c	  6694    {
; ..\component\ComM\Implementation\ComM.c	  6695      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  6696    }
; ..\component\ComM\Implementation\ComM.c	  6697    /* #30 Check parameter 'ComMode': it must be a valid pointer and its value must be a valid communication mode. */
; ..\component\ComM\Implementation\ComM.c	  6698    else if (ComMode == NULL_PTR)
	jz.a	a4,.L124
.L805:

; ..\component\ComM\Implementation\ComM.c	  6699    {
; ..\component\ComM\Implementation\ComM.c	  6700      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  6701    }
; ..\component\ComM\Implementation\ComM.c	  6702    else if (*ComMode > COMM_FULL_COMMUNICATION)
	ld.bu	d5,[a4]
.L806:
	jlt.u	d5,#3,.L125
.L124:
.L123:

; ..\component\ComM\Implementation\ComM.c	  6703    {
; ..\component\ComM\Implementation\ComM.c	  6704      errorId = COMM_E_WRONG_PARAMETERS;
	mov	d8,#2
	j	.L126
.L125:

; ..\component\ComM\Implementation\ComM.c	  6705    }
; ..\component\ComM\Implementation\ComM.c	  6706    else
; ..\component\ComM\Implementation\ComM.c	  6707  #endif
; ..\component\ComM\Implementation\ComM.c	  6708    {
; ..\component\ComM\Implementation\ComM.c	  6709      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6710      if (ComM_BusSmState[Channel] != *ComMode)
	movh.a	a15,#@his(ComM_BusSmState)
	lea	a15,[a15]@los(ComM_BusSmState)
.L807:
	ld.bu	d15,[a15]
.L808:
	jeq	d15,d5,.L127
.L809:

; ..\component\ComM\Implementation\ComM.c	  6711      {
; ..\component\ComM\Implementation\ComM.c	  6712        /* #40 If BusSM indicated a new mode, store it and propagate to BswM. */
; ..\component\ComM\Implementation\ComM.c	  6713        /* ESCAN00065236 */
; ..\component\ComM\Implementation\ComM.c	  6714        ComM_BusSmState[Channel] = *ComMode; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
	st.b	[a15],d5
.L810:

; ..\component\ComM\Implementation\ComM.c	  6715        BswM_ComM_CurrentMode(Channel, *ComMode);
	call	BswM_ComM_CurrentMode
.L127:
.L126:
.L122:

; ..\component\ComM\Implementation\ComM.c	  6716  
; ..\component\ComM\Implementation\ComM.c	  6717        /* #50 If a passive wake-up occurred during shutdown of FR, restore the target requested mode to start communication in the next main function. */
; ..\component\ComM\Implementation\ComM.c	  6718  #if (COMM_BUS_TYPE_FR_PRESENT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6719  # if (COMM_ISDEF_BUSTYPEOFCHANNEL == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  6720        if (ComM_GetBusTypeOfChannel(Channel) == COMM_BUS_TYPE_FR)
; ..\component\ComM\Implementation\ComM.c	  6721  # endif
; ..\component\ComM\Implementation\ComM.c	  6722        {
; ..\component\ComM\Implementation\ComM.c	  6723          if (*ComMode == COMM_NO_COMMUNICATION)
; ..\component\ComM\Implementation\ComM.c	  6724          {
; ..\component\ComM\Implementation\ComM.c	  6725            ComM_FrShutdown[Channel] = FALSE; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6726  
; ..\component\ComM\Implementation\ComM.c	  6727            /* ESCAN00081330: ComM_BusComModeReqFrShutdown can be COMM_FULL_COM_NETWORK_REQUESTED or COMM_FULL_COM_READY_SLEEP depending on Min Full Com Mode Duration. */
; ..\component\ComM\Implementation\ComM.c	  6728            if (ComM_BusComModeReqFrShutdown[Channel] != COMM_NO_COM_NO_PENDING_REQUEST)
; ..\component\ComM\Implementation\ComM.c	  6729            {
; ..\component\ComM\Implementation\ComM.c	  6730              ComM_BusComModeReq[Channel] = ComM_BusComModeReqFrShutdown[Channel]; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6731              ComM_BusComModeReqFrShutdown[Channel] = COMM_NO_COM_NO_PENDING_REQUEST; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6732            }
; ..\component\ComM\Implementation\ComM.c	  6733          }
; ..\component\ComM\Implementation\ComM.c	  6734        }
; ..\component\ComM\Implementation\ComM.c	  6735  #endif
; ..\component\ComM\Implementation\ComM.c	  6736  
; ..\component\ComM\Implementation\ComM.c	  6737        /* #60 Store the new mode to handle User Mode Notification in the next main function. */
; ..\component\ComM\Implementation\ComM.c	  6738  #if (COMM_USERMODENOTIFUNC == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6739  # if (COMM_USERMODENOTIFUNC_PNC_USER_ONLY == STD_OFF)
; ..\component\ComM\Implementation\ComM.c	  6740        ComM_StateChange[Channel] = *ComMode; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6741  # endif
; ..\component\ComM\Implementation\ComM.c	  6742  #endif
; ..\component\ComM\Implementation\ComM.c	  6743  
; ..\component\ComM\Implementation\ComM.c	  6744        /* #70 Notify Dcm about the new mode. */
; ..\component\ComM\Implementation\ComM.c	  6745  #if (COMM_DCM_INDICATION == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6746        switch (*ComMode)
; ..\component\ComM\Implementation\ComM.c	  6747        {
; ..\component\ComM\Implementation\ComM.c	  6748        case COMM_FULL_COMMUNICATION:
; ..\component\ComM\Implementation\ComM.c	  6749          Dcm_ComM_FullComModeEntered(Channel);
; ..\component\ComM\Implementation\ComM.c	  6750          break;
; ..\component\ComM\Implementation\ComM.c	  6751  
; ..\component\ComM\Implementation\ComM.c	  6752        case COMM_SILENT_COMMUNICATION:
; ..\component\ComM\Implementation\ComM.c	  6753          Dcm_ComM_SilentComModeEntered(Channel);
; ..\component\ComM\Implementation\ComM.c	  6754          break;
; ..\component\ComM\Implementation\ComM.c	  6755  
; ..\component\ComM\Implementation\ComM.c	  6756        case COMM_NO_COMMUNICATION:
; ..\component\ComM\Implementation\ComM.c	  6757          Dcm_ComM_NoComModeEntered(Channel);
; ..\component\ComM\Implementation\ComM.c	  6758          break;
; ..\component\ComM\Implementation\ComM.c	  6759  
; ..\component\ComM\Implementation\ComM.c	  6760        default: /* COV_COMM_MISRA */
; ..\component\ComM\Implementation\ComM.c	  6761          break;
; ..\component\ComM\Implementation\ComM.c	  6762        }
; ..\component\ComM\Implementation\ComM.c	  6763  #endif
; ..\component\ComM\Implementation\ComM.c	  6764  
; ..\component\ComM\Implementation\ComM.c	  6765        /* #80 If NO_COM is indicated and Reset after Forcing NO_COM is enabled, check if a reset can be performed. */
; ..\component\ComM\Implementation\ComM.c	  6766  #if (COMM_RESETAFTERFORCINGNOCOMMOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6767        if (*ComMode == COMM_NO_COMMUNICATION)
; ..\component\ComM\Implementation\ComM.c	  6768        {
; ..\component\ComM\Implementation\ComM.c	  6769          ComM_ChannelResetAfterForcingNoComm();
; ..\component\ComM\Implementation\ComM.c	  6770        }
; ..\component\ComM\Implementation\ComM.c	  6771  #endif
; ..\component\ComM\Implementation\ComM.c	  6772      }
; ..\component\ComM\Implementation\ComM.c	  6773    }
; ..\component\ComM\Implementation\ComM.c	  6774  
; ..\component\ComM\Implementation\ComM.c	  6775    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6776  #if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6777    if (errorId != COMM_E_NO_ERROR)
	jeq	d8,#0,.L128
.L811:

; ..\component\ComM\Implementation\ComM.c	  6778    {
; ..\component\ComM\Implementation\ComM.c	  6779      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_CBK_BUSSMMODEINDICATION, errorId );
	fcall	.cocofun_2
.L812:
	mov	d6,#51
.L813:
	mov	d7,d8
.L575:
	j	Det_ReportError
.L128:

; ..\component\ComM\Implementation\ComM.c	  6780    }
; ..\component\ComM\Implementation\ComM.c	  6781  #else
; ..\component\ComM\Implementation\ComM.c	  6782    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6783  #endif
; ..\component\ComM\Implementation\ComM.c	  6784  } /* PRQA S 6010, 6030, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STMIF */
	ret
.L480:
	
__ComM_BusSM_ModeIndication_function_end:
	.size	ComM_BusSM_ModeIndication,__ComM_BusSM_ModeIndication_function_end-ComM_BusSM_ModeIndication
.L302:
	; End of function
	
	.sdecl	'.rodata.ComM.ComM_TransitionTable',data,rom,cluster('ComM_TransitionTable')
	.sect	'.rodata.ComM.ComM_TransitionTable'
ComM_TransitionTable:	.type	object
	.size	ComM_TransitionTable,25
	.byte	5
	.space	1
	.byte	3,4
	.space	1
	.byte	1,5,5,5
	.byte	5,1,2,5
	.byte	2,2,1,3
	.byte	3,5,3,5
	.byte	5,3,4,5
	.sdecl	'.rodata.ComM.ComM_TransitionFctTable',data,rom,cluster('ComM_TransitionFctTable')
	.sect	'.rodata.ComM.ComM_TransitionFctTable'
	.align	4
ComM_TransitionFctTable:	.type	object
	.size	ComM_TransitionFctTable,100
	.word	ComM_TF_No_Transition,ComM_TF_No_Action,ComM_TF_NetReq_ReadyS,ComM_TF_Full_SiCom
	.word	ComM_TF_SiCom_NoCom,ComM_TF_No_Action,ComM_TF_No_Transition,ComM_TF_No_Transition
	.word	ComM_TF_No_Transition,ComM_TF_No_Transition,ComM_TF_No_Action,ComM_TF_NoCom_NetReq
	.word	ComM_TF_No_Transition,ComM_TF_ReadyS_NetReq,ComM_TF_NoCom_NetReq,ComM_TF_No_Action
	.word	ComM_TF_NoCom_FullReadySleep,ComM_TF_NetReq_ReadyS,ComM_TF_No_Transition,ComM_TF_NoCom_FullReadySleep
	.word	ComM_TF_No_Transition,ComM_TF_No_Transition,ComM_TF_NetReq_ReadyS,ComM_TF_Full_SiCom
	.word	ComM_TF_No_Transition
	.sdecl	'.data.ComM.ComM_InitStatus',data,cluster('ComM_InitStatus')
	.sect	'.data.ComM.ComM_InitStatus'
ComM_InitStatus:	.type	object
	.size	ComM_InitStatus,1
	.space	1
	.sdecl	'.bss.ComM.ComM_BusSmState',data,cluster('ComM_BusSmState')
	.sect	'.bss.ComM.ComM_BusSmState'
ComM_BusSmState:	.type	object
	.size	ComM_BusSmState,1
	.space	1
	.sdecl	'.bss.ComM.ComM_ComAllowed',data,cluster('ComM_ComAllowed')
	.sect	'.bss.ComM.ComM_ComAllowed'
ComM_ComAllowed:	.type	object
	.size	ComM_ComAllowed,1
	.space	1
	.sdecl	'.bss.ComM.ComM_ActiveComMode',data,cluster('ComM_ActiveComMode')
	.sect	'.bss.ComM.ComM_ActiveComMode'
ComM_ActiveComMode:	.type	object
	.size	ComM_ActiveComMode,1
	.space	1
	.sdecl	'.bss.ComM.ComM_BusComModeReq',data,cluster('ComM_BusComModeReq')
	.sect	'.bss.ComM.ComM_BusComModeReq'
ComM_BusComModeReq:	.type	object
	.size	ComM_BusComModeReq,1
	.space	1
	.sdecl	'.bss.ComM.ComM_Inhibition',data,cluster('ComM_Inhibition')
	.sect	'.bss.ComM.ComM_Inhibition'
	.global	ComM_Inhibition
	.align	2
ComM_Inhibition:	.type	object
	.size	ComM_Inhibition,6
	.space	6
	.calls	'__INDIRECT__','ComM_TF_NoCom_NetReq'
	.calls	'__INDIRECT__','ComM_TF_NoCom_FullReadySleep'
	.calls	'__INDIRECT__','ComM_TF_Full_SiCom'
	.calls	'__INDIRECT__','ComM_TF_ReadyS_NetReq'
	.calls	'__INDIRECT__','ComM_TF_SiCom_NoCom'
	.calls	'__INDIRECT__','ComM_TF_NetReq_ReadyS'
	.calls	'__INDIRECT__','ComM_TF_No_Action'
	.calls	'__INDIRECT__','ComM_TF_No_Transition'
	.calls	'ComM_CalculateHighestComMode','SuspendAllInterrupts'
	.calls	'ComM_CalculateHighestComMode','ComM_IsUserRequestingChannel'
	.calls	'ComM_CalculateHighestComMode','ResumeAllInterrupts'
	.calls	'ComM_TF_NoCom_NetReq','ComM_RequestBusSMMode'
	.calls	'ComM_TF_No_Transition','Det_ReportError'
	.calls	'ComM_Init','Det_ReportError'
	.calls	'ComM_DeInit','ComM_InitMemory'
	.calls	'ComM_GetState','ComM_ChannelIsRequestPending'
	.calls	'ComM_GetState','Det_ReportError'
	.calls	'ComM_GetStatus','Det_ReportError'
	.calls	'ComM_RequestComMode','SuspendAllInterrupts'
	.calls	'ComM_RequestComMode','ResumeAllInterrupts'
	.calls	'ComM_RequestComMode','Det_ReportError'
	.calls	'ComM_GetMaxComMode','Det_ReportError'
	.calls	'ComM_GetRequestedComMode','SuspendAllInterrupts'
	.calls	'ComM_GetRequestedComMode','ResumeAllInterrupts'
	.calls	'ComM_GetRequestedComMode','Det_ReportError'
	.calls	'ComM_GetCurrentComMode','SuspendAllInterrupts'
	.calls	'ComM_GetCurrentComMode','ComM_GetCurrentBusSMMode'
	.calls	'ComM_GetCurrentComMode','ResumeAllInterrupts'
	.calls	'ComM_GetCurrentComMode','Det_ReportError'
	.calls	'ComM_GetInhibitionStatus','Det_ReportError'
	.calls	'ComM_PreventWakeUp','Det_ReportError'
	.calls	'ComM_LimitChannelToNoComMode','Det_ReportError'
	.calls	'ComM_LimitECUToNoComMode','Det_ReportError'
	.calls	'ComM_ReadInhibitCounter','Det_ReportError'
	.calls	'ComM_ResetInhibitCounter','Det_ReportError'
	.calls	'ComM_SetECUGroupClassification','Det_ReportError'
	.calls	'ComM_CommunicationAllowed','Det_ReportError'
	.calls	'ComM_MainFunction','SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_1'
	.calls	'ComM_MainFunction','ComM_CalculateHighestComMode'
	.calls	'ComM_MainFunction','ComM_ChannelStateTransition'
	.calls	'ComM_MainFunction','SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_1'
	.calls	'ComM_MainFunction','Det_ReportError'
	.calls	'ComM_ChannelStateTransition','__INDIRECT__'
	.calls	'ComM_EcuM_WakeUpIndication','Det_ReportError'
	.calls	'ComM_BusSM_ModeIndication','BswM_ComM_CurrentMode'
	.calls	'ComM_BusSM_ModeIndication','Det_ReportError'
	.calls	'ComM_TF_No_Transition','.cocofun_2'
	.calls	'ComM_Init','.cocofun_2'
	.calls	'ComM_GetState','.cocofun_3'
	.calls	'ComM_GetState','.cocofun_2'
	.calls	'ComM_GetStatus','.cocofun_1'
	.calls	'ComM_GetStatus','.cocofun_2'
	.calls	'ComM_RequestComMode','.cocofun_1'
	.calls	'ComM_RequestComMode','.cocofun_2'
	.calls	'ComM_GetMaxComMode','.cocofun_1'
	.calls	'ComM_GetMaxComMode','.cocofun_2'
	.calls	'ComM_GetRequestedComMode','.cocofun_3'
	.calls	'ComM_GetRequestedComMode','.cocofun_2'
	.calls	'ComM_GetCurrentComMode','.cocofun_3'
	.calls	'ComM_GetCurrentComMode','.cocofun_2'
	.calls	'ComM_GetInhibitionStatus','.cocofun_1'
	.calls	'ComM_GetInhibitionStatus','.cocofun_2'
	.calls	'ComM_PreventWakeUp','.cocofun_1'
	.calls	'ComM_PreventWakeUp','.cocofun_2'
	.calls	'ComM_LimitChannelToNoComMode','.cocofun_1'
	.calls	'ComM_LimitChannelToNoComMode','.cocofun_2'
	.calls	'ComM_LimitECUToNoComMode','.cocofun_1'
	.calls	'ComM_LimitECUToNoComMode','.cocofun_2'
	.calls	'ComM_ReadInhibitCounter','.cocofun_1'
	.calls	'ComM_ReadInhibitCounter','.cocofun_2'
	.calls	'ComM_ResetInhibitCounter','.cocofun_1'
	.calls	'ComM_ResetInhibitCounter','.cocofun_2'
	.calls	'ComM_SetECUGroupClassification','.cocofun_1'
	.calls	'ComM_SetECUGroupClassification','.cocofun_2'
	.calls	'ComM_CommunicationAllowed','.cocofun_1'
	.calls	'ComM_CommunicationAllowed','.cocofun_2'
	.calls	'ComM_MainFunction','.cocofun_1'
	.calls	'ComM_MainFunction','.cocofun_2'
	.calls	'ComM_EcuM_WakeUpIndication','.cocofun_1'
	.calls	'ComM_EcuM_WakeUpIndication','.cocofun_2'
	.calls	'ComM_BusSM_ModeIndication','.cocofun_1'
	.calls	'ComM_BusSM_ModeIndication','.cocofun_2'
	.calls	'ComM_CalculateHighestComMode','',0
	.calls	'ComM_IsUserRequestingChannel','',0
	.calls	'ComM_ChannelIsRequestPending','',0
	.calls	'ComM_TF_NoCom_NetReq','',0
	.calls	'ComM_TF_NoCom_FullReadySleep','',0
	.calls	'ComM_TF_Full_SiCom','',0
	.calls	'ComM_TF_ReadyS_NetReq','',0
	.calls	'ComM_TF_SiCom_NoCom','',0
	.calls	'ComM_TF_NetReq_ReadyS','',0
	.calls	'ComM_TF_No_Action','',0
	.calls	'ComM_TF_No_Transition','',0
	.calls	'.cocofun_2','',0
	.calls	'ComM_Init','',0
	.calls	'ComM_DeInit','',0
	.calls	'ComM_InitMemory','',0
	.calls	'ComM_GetState','',0
	.calls	'.cocofun_3','',0
	.calls	'ComM_GetStatus','',0
	.calls	'.cocofun_1','',0
	.calls	'ComM_RequestComMode','',0
	.calls	'ComM_GetMaxComMode','',0
	.calls	'ComM_GetRequestedComMode','',0
	.calls	'ComM_GetCurrentComMode','',8
	.calls	'ComM_GetInhibitionStatus','',0
	.calls	'ComM_PreventWakeUp','',0
	.calls	'ComM_LimitChannelToNoComMode','',0
	.calls	'ComM_LimitECUToNoComMode','',0
	.calls	'ComM_ReadInhibitCounter','',0
	.calls	'ComM_ResetInhibitCounter','',0
	.calls	'ComM_SetECUGroupClassification','',0
	.calls	'ComM_CommunicationAllowed','',0
	.calls	'ComM_MainFunction','',8
	.calls	'ComM_ChannelStateTransition','',0
	.calls	'ComM_EcuM_WakeUpIndication','',0
	.extern	Det_ReportError
	.extern	ComM_ECUGroupClassInit
	.extern	ComM_RequestBusSMMode
	.extern	ComM_GetCurrentBusSMMode
	.extern	ComM_UserReqFullCom
	.extern	BswM_ComM_CurrentMode
	.extern	SuspendAllInterrupts
	.extern	ResumeAllInterrupts
	.extern	SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_1
	.extern	SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_1
	.extern	__INDIRECT__
	.calls	'ComM_BusSM_ModeIndication','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L200:
	.word	9664
	.half	3
	.word	.L201
	.byte	4
.L199:
	.byte	1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L202
	.byte	2
	.byte	'int',0,4,5,3
	.word	133
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	140
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	182
	.byte	7
	.word	182
	.byte	8
	.byte	'__cmpswapw',0
	.word	198
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	203
	.byte	9
	.byte	'value',0
	.word	182
	.byte	9
	.byte	'compare',0
	.word	182
	.byte	0
.L395:
	.byte	2
	.byte	'unsigned char',0,1,8
.L418:
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'Det_ReportError',0,1,154,2,32
	.word	260
	.byte	1,1,1,1,11
	.byte	'ModuleId',0,1,154,2,56
	.word	277
	.byte	11
	.byte	'InstanceId',0,1,154,2,72
	.word	260
	.byte	11
	.byte	'ApiId',0,1,154,2,90
	.word	260
	.byte	11
	.byte	'ErrorId',0,1,154,2,103
	.word	260
	.byte	0,12
	.byte	'ComM_RequestBusSMMode',0,2,109,30,1,1,1,1,11
	.byte	'Channel',0,2,109,70
	.word	260
	.byte	11
	.byte	'ComMode',0,2,109,93
	.word	260
	.byte	0
.L426:
	.byte	7
	.word	260
	.byte	12
	.byte	'ComM_GetCurrentBusSMMode',0,2,122,30,1,1,1,1,11
	.byte	'Channel',0,2,122,73
	.word	260
	.byte	11
	.byte	'ComMode',0,2,122,125
	.word	462
	.byte	0
.L405:
	.byte	7
	.word	260
.L412:
	.byte	7
	.word	260
.L443:
	.byte	7
	.word	260
.L462:
	.byte	7
	.word	277
	.byte	12
	.byte	'BswM_ComM_CurrentMode',0,3,82,30,1,1,1,1,11
	.byte	'Network',0,3,82,70
	.word	260
	.byte	11
	.byte	'RequestedMode',0,3,82,93
	.word	260
	.byte	0,13
	.byte	'SuspendAllInterrupts',0,4,222,10,21,1,1,1,1,13
	.byte	'ResumeAllInterrupts',0,4,241,10,21,1,1,1,1,13
	.byte	'SchM_Enter_ComM_COMM_EXCLUSIVE_AREA_1',0,5,49,22,1,1,1,1,13
	.byte	'SchM_Exit_ComM_COMM_EXCLUSIVE_AREA_1',0,5,50,22,1,1,1,1
.L503:
	.byte	7
	.word	260
	.byte	14
	.byte	'__INDIRECT__',0,6,1,1,1,1,1,15,1,7
	.word	797
	.byte	16
	.byte	'__codeptr',0,6,1,1
	.word	799
	.byte	16
	.byte	'boolean',0,7,101,31
	.word	260
	.byte	16
	.byte	'uint8',0,7,104,31
	.word	260
	.byte	16
	.byte	'uint16',0,7,106,31
	.word	277
	.byte	2
	.byte	'long int',0,4,5,16
	.byte	'sint32',0,7,107,31
	.word	867
	.byte	2
	.byte	'unsigned long int',0,4,7,16
	.byte	'uint32',0,7,108,31
	.word	894
	.byte	16
	.byte	'uint8_least',0,7,111,31
	.word	260
	.byte	2
	.byte	'unsigned long long int',0,8,7,16
	.byte	'uint64',0,7,121,30
	.word	950
	.byte	16
	.byte	'StatusType',0,8,127,23
	.word	260
	.byte	16
	.byte	'Std_ReturnType',0,8,132,1,15
	.word	260
	.byte	16
	.byte	'PduLengthType',0,9,65,15
	.word	260
	.byte	7
	.word	260
	.byte	16
	.byte	'SduDataPtrType',0,10,196,1,54
	.word	1056
	.byte	16
	.byte	'NetworkHandleType',0,10,215,1,22
	.word	260
	.byte	17,10,219,1,9,1,18
	.byte	'TP_DATACONF',0,0,18
	.byte	'TP_DATARETRY',0,1,18
	.byte	'TP_CONFPENDING',0,2,0,16
	.byte	'TpDataStateType',0,10,226,1,3
	.word	1112
	.byte	19
	.byte	'sDet_PCConfigType',0,11,238,1,16,1,20
	.byte	'Det_PCConfigNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,16
	.byte	'Det_PCConfigType',0,11,241,1,3
	.word	1190
	.byte	16
	.byte	'ComM_InhibitionStatusType',0,12,37,15
	.word	260
	.byte	16
	.byte	'ComM_UserHandleType',0,12,40,16
	.word	277
	.byte	16
	.byte	'ComM_ModeType',0,12,58,15
	.word	260
	.byte	21,1
	.word	260
	.byte	22,0,0
.L517:
	.byte	19
	.byte	'ComM_InhibitionTypeTag',0,13,55,16,6,20
	.byte	'ComM_ECUGroupClassification',0
	.word	260
	.byte	1,2,35,0,20
	.byte	'ComM_InhibitCnt',0
	.word	277
	.byte	2,2,35,2,20
	.byte	'ComM_InhibitionStatus',0
	.word	1356
	.byte	1,2,35,4,0,16
	.byte	'ComM_InhibitionType',0,13,60,3
	.word	1365
	.byte	16
	.byte	'ComM_InitStatusType',0,14,82,15
	.word	260
	.byte	16
	.byte	'ComM_StateType',0,14,86,15
	.word	260
	.byte	16
	.byte	'ComM_PncUserOfUserType',0,15,136,4,17
	.word	260
	.byte	16
	.byte	'ComM_UserReqFullComType',0,15,160,4,15
	.word	260
	.byte	19
	.byte	'sComM_ChannelType',0,15,176,4,16,1,20
	.byte	'ComM_ChannelNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,16
	.byte	'ComM_ChannelType',0,15,179,4,3
	.word	1631
	.byte	19
	.byte	'sComM_ChannelPbType',0,15,182,4,16,1,20
	.byte	'ComM_ChannelPbNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,16
	.byte	'ComM_ChannelPbType',0,15,185,4,3
	.word	1713
	.byte	19
	.byte	'sComM_UserType',0,15,188,4,16,1,20
	.byte	'PncUserOfUser',0
	.word	260
	.byte	1,2,35,0,0,16
	.byte	'ComM_UserType',0,15,191,4,3
	.word	1801
	.byte	19
	.byte	'sComM_UserByteMaskType',0,15,194,4,16,1,20
	.byte	'ComM_UserByteMaskNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,16
	.byte	'ComM_UserByteMaskType',0,15,197,4,3
	.word	1869
	.byte	19
	.byte	'sComM_PCConfigType',0,15,233,4,16,1,20
	.byte	'ComM_PCConfigNeverUsed',0
	.word	260
	.byte	1,2,35,0,0,16
	.byte	'ComM_PCConfigType',0,15,236,4,3
	.word	1966
	.byte	3
	.word	260
	.byte	23
	.byte	'ComM_ECUGroupClassInit',0,2,62,53
	.word	2051
	.byte	1,1,21,1
	.word	260
	.byte	22,0,0,23
	.byte	'ComM_UserReqFullCom',0,16,151,2,54
	.word	2089
	.byte	1,1,17,17,147,1,9,1,18
	.byte	'Default_Init_Task',0,0,18
	.byte	'Default_Init_Task_Trusted',0,1,18
	.byte	'IdleTask_OsCore0',0,2,18
	.byte	'bsw_task',0,3,18
	.byte	'swc_init',0,4,18
	.byte	'swc_task',0,5,18
	.byte	'INVALID_TASK',0,6,18
	.byte	'OS_TASKID_COUNT',0,6,0,16
	.byte	'TaskType',0,17,157,1,3
	.word	2129
	.byte	16
	.byte	'Os_Hal_AddressType',0,18,61,16
	.word	894
	.byte	21,64
	.word	894
	.byte	22,15,0,19
	.byte	'Os_ExceptionContextType_Tag',0,19,71,8,160,1,20
	.byte	'AddressRegisters',0
	.word	2314
	.byte	64,2,35,0,20
	.byte	'DataRegisters',0
	.word	2314
	.byte	64,2,35,64,20
	.byte	'Ra',0
	.word	894
	.byte	4,3,35,128,1,20
	.byte	'Psw',0
	.word	894
	.byte	4,3,35,132,1,20
	.byte	'ExceptionSource',0
	.word	894
	.byte	4,3,35,136,1,20
	.byte	'Pcpn',0
	.word	894
	.byte	4,3,35,140,1,20
	.byte	'Pie',0
	.word	894
	.byte	4,3,35,144,1,20
	.byte	'MpuRegionForStackLow',0
	.word	894
	.byte	4,3,35,148,1,20
	.byte	'MpuRegionForStackUpper',0
	.word	894
	.byte	4,3,35,152,1,20
	.byte	'RawPCXI',0
	.word	894
	.byte	4,3,35,156,1,0,16
	.byte	'Os_ExceptionContextType',0,18,66,44
	.word	2323
	.byte	16
	.byte	'Os_InterruptSourceIdType',0,20,238,1,16
	.word	894
	.byte	16
	.byte	'Os_ExceptionSourceIdType',0,20,246,1,16
	.word	894
	.byte	17,20,161,2,9,1,18
	.byte	'RUNNING',0,0,18
	.byte	'READY',0,1,18
	.byte	'WAITING',0,2,18
	.byte	'SUSPENDED',0,3,0,16
	.byte	'TaskStateType',0,20,175,2,3
	.word	2671
	.byte	16
	.byte	'EventMaskType',0,20,182,2,16
	.word	950
	.byte	16
	.byte	'Os_TickType',0,20,200,2,19
	.word	894
	.byte	16
	.byte	'TickType',0,20,206,2,21
	.word	894
	.byte	24,20,220,2,9,12,20
	.byte	'maxallowedvalue',0
	.word	894
	.byte	4,2,35,0,20
	.byte	'ticksperbase',0
	.word	894
	.byte	4,2,35,4,20
	.byte	'mincycle',0
	.word	894
	.byte	4,2,35,8,0,16
	.byte	'AlarmBaseType',0,20,228,2,2
	.word	2803
	.byte	17,20,128,3,9,1,18
	.byte	'APPLICATION_TERMINATED',0,0,18
	.byte	'APPLICATION_RESTARTING',0,1,18
	.byte	'APPLICATION_ACCESSIBLE',0,2,0,16
	.byte	'ApplicationStateType',0,20,133,3,3
	.word	2898
	.byte	17,20,177,3,9,1,18
	.byte	'OSServiceId_GetApplicationID',0,0,18
	.byte	'OSServiceId_GetISRID',0,1,18
	.byte	'OSServiceId_CallTrustedFunction',0,2,18
	.byte	'OSServiceId_CheckISRMemoryAccess',0,3,18
	.byte	'OSServiceId_CheckTaskMemoryAccess',0,4,18
	.byte	'OSServiceId_CheckObjectAccess',0,5,18
	.byte	'OSServiceId_CheckObjectOwnership',0,6,18
	.byte	'OSServiceId_StartScheduleTableRel',0,7,18
	.byte	'OSServiceId_StartScheduleTableAbs',0,8,18
	.byte	'OSServiceId_StopScheduleTable',0,9,18
	.byte	'OSServiceId_NextScheduleTable',0,10,18
	.byte	'OSServiceId_StartScheduleTableSynchron',0,11,18
	.byte	'OSServiceId_SyncScheduleTable',0,12,18
	.byte	'OSServiceId_SetScheduleTableAsync',0,13,18
	.byte	'OSServiceId_GetScheduleTableStatus',0,14,18
	.byte	'OSServiceId_IncrementCounter',0,15,18
	.byte	'OSServiceId_GetCounterValue',0,16,18
	.byte	'OSServiceId_GetElapsedValue',0,17,18
	.byte	'OSServiceId_TerminateApplication',0,18,18
	.byte	'OSServiceId_AllowAccess',0,19,18
	.byte	'OSServiceId_GetApplicationState',0,20,18
	.byte	'OSServiceId_GetNumberOfActivatedCores',0,21,18
	.byte	'OSServiceId_GetCoreID',0,22,18
	.byte	'OSServiceId_StartCore',0,23,18
	.byte	'OSServiceId_StartNonAutosarCore',0,24,18
	.byte	'OSServiceId_GetSpinlock',0,25,18
	.byte	'OSServiceId_ReleaseSpinlock',0,26,18
	.byte	'OSServiceId_TryToGetSpinlock',0,27,18
	.byte	'OSServiceId_ShutdownAllCores',0,28,18
	.byte	'OSServiceId_ControlIdle',0,29,18
	.byte	'OSServiceId_IocSend',0,30,18
	.byte	'OSServiceId_IocWrite',0,31,18
	.byte	'OSServiceId_IocSendGroup',0,32,18
	.byte	'OSServiceId_IocWriteGroup',0,33,18
	.byte	'OSServiceId_IocReceive',0,34,18
	.byte	'OSServiceId_IocRead',0,35,18
	.byte	'OSServiceId_IocReceiveGroup',0,36,18
	.byte	'OSServiceId_IocReadGroup',0,37,18
	.byte	'OSServiceId_IocEmptyQueue',0,38,18
	.byte	'OSServiceId_GetCurrentApplicationID',0,39,18
	.byte	'OSServiceId_GetExceptionContext',0,160,1,18
	.byte	'OSServiceId_SetExceptionContext',0,161,1,18
	.byte	'OSServiceId_CallNonTrustedFunction',0,162,1,18
	.byte	'OSServiceId_AppKill',0,163,1,18
	.byte	'OSServiceId_AlarmActionSetEvent',0,164,1,18
	.byte	'OSServiceId_AlarmActionActivateTask',0,165,1,18
	.byte	'OSServiceId_AlarmActionIncrementCounter',0,166,1,18
	.byte	'OSServiceId_AlarmActionCallback',0,167,1,18
	.byte	'OSServiceId_TimerIsr',0,168,1,18
	.byte	'OSServiceId_IsrWrapper',0,169,1,18
	.byte	'OSServiceId_GetTaskStackUsage',0,170,1,18
	.byte	'OSServiceId_GetISRStackUsage',0,171,1,18
	.byte	'OSServiceId_GetKernelStackUsage',0,172,1,18
	.byte	'OSServiceId_GetStartupHookStackUsage',0,173,1,18
	.byte	'OSServiceId_GetErrorHookStackUsage',0,174,1,18
	.byte	'OSServiceId_GetShutdownHookStackUsage',0,175,1,18
	.byte	'OSServiceId_GetProtectionHookStackUsage',0,176,1,18
	.byte	'OSServiceId_GetSemaphore',0,177,1,18
	.byte	'OSServiceId_ReleaseSemaphore',0,178,1,18
	.byte	'OSServiceId_ScheduleTableActivateTask',0,179,1,18
	.byte	'OSServiceId_ScheduleTableSetEvent',0,180,1,18
	.byte	'OSServiceId_DisableInterruptSource',0,181,1,18
	.byte	'OSServiceId_EnableInterruptSource',0,182,1,18
	.byte	'OSServiceId_ClearPendingInterrupt',0,183,1,18
	.byte	'OSServiceId_GetUnhandledIrq',0,184,1,18
	.byte	'OSServiceId_GetUnhandledExc',0,185,1,18
	.byte	'OSServiceId_HookCallCallback',0,186,1,18
	.byte	'OSServiceId_IsInterruptSourceEnabled',0,187,1,18
	.byte	'OSServiceId_IsInterruptPending',0,188,1,18
	.byte	'OSServiceId_CallFastTrustedFunction',0,189,1,18
	.byte	'OSServiceId_BarrierSynchronize',0,190,1,18
	.byte	'OSServiceId_InitialEnableInterruptSources',0,191,1,18
	.byte	'OSServiceId_GetCoreStartState',0,192,1,18
	.byte	'OSServiceId_StartOS',0,208,1,18
	.byte	'OSServiceId_GetActiveApplicationMode',0,210,1,18
	.byte	'OSServiceId_DisableAllInterrupts',0,211,1,18
	.byte	'OSServiceId_EnableAllInterrupts',0,212,1,18
	.byte	'OSServiceId_SuspendAllInterrupts',0,213,1,18
	.byte	'OSServiceId_ResumeAllInterrupts',0,214,1,18
	.byte	'OSServiceId_SuspendOSInterrupts',0,215,1,18
	.byte	'OSServiceId_ResumeOSInterrupts',0,216,1,18
	.byte	'OSServiceId_ActivateTask',0,217,1,18
	.byte	'OSServiceId_TerminateTask',0,218,1,18
	.byte	'OSServiceId_ChainTask',0,219,1,18
	.byte	'OSServiceId_GetTaskID',0,220,1,18
	.byte	'OSServiceId_GetTaskState',0,221,1,18
	.byte	'OSServiceId_Schedule',0,222,1,18
	.byte	'OSServiceId_SetEvent',0,223,1,18
	.byte	'OSServiceId_ClearEvent',0,224,1,18
	.byte	'OSServiceId_GetEvent',0,225,1,18
	.byte	'OSServiceId_WaitEvent',0,226,1,18
	.byte	'OSServiceId_GetAlarmBase',0,227,1,18
	.byte	'OSServiceId_GetAlarm',0,228,1,18
	.byte	'OSServiceId_SetRelAlarm',0,229,1,18
	.byte	'OSServiceId_SetAbsAlarm',0,230,1,18
	.byte	'OSServiceId_CancelAlarm',0,231,1,18
	.byte	'OSServiceId_GetResource',0,232,1,18
	.byte	'OSServiceId_ReleaseResource',0,233,1,18
	.byte	'OSSERVICEID_COUNT',0,255,1,0,16
	.byte	'OSServiceIdType',0,20,156,4,3
	.word	3010
	.byte	17,20,172,4,9,2,18
	.byte	'OS_STATUS_OK',0,0,18
	.byte	'OS_STATUS_CALLEVEL',0,2,18
	.byte	'OS_STATUS_LIMIT',0,4,18
	.byte	'OS_STATUS_RESOURCE',0,6,18
	.byte	'OS_STATUS_SERVICEID',0,9,18
	.byte	'OS_STATUS_ILLEGAL_ADDRESS',0,10,18
	.byte	'OS_STATUS_MISSINGEND',0,11,18
	.byte	'OS_STATUS_DISABLEDINT',0,12,18
	.byte	'OS_STATUS_STACKFAULT',0,13,18
	.byte	'OS_STATUS_PROTECTION_MEMORY',0,14,18
	.byte	'OS_STATUS_PROTECTION_TIME',0,15,18
	.byte	'OS_STATUS_PROTECTION_ARRIVAL',0,16,18
	.byte	'OS_STATUS_PROTECTION_LOCKED',0,17,18
	.byte	'OS_STATUS_PROTECTION_EXCEPTION',0,18,18
	.byte	'OS_STATUS_INTERFERENCE_DEADLOCK',0,19,18
	.byte	'OS_STATUS_NESTING_DEADLOCK',0,20,18
	.byte	'OS_STATUS_SPINLOCK',0,21,18
	.byte	'OS_STATUS_CORE',0,22,18
	.byte	'OS_STATUS_OVERFLOW',0,245,1,18
	.byte	'OS_STATUS_KILL_KERNEL_OBJ',0,246,1,18
	.byte	'OS_STATUS_NO_RESTARTTASK',0,247,1,18
	.byte	'OS_STATUS_CALL_NOT_ALLOWED',0,248,1,18
	.byte	'OS_STATUS_FUNCTION_UNAVAILABLE',0,249,1,18
	.byte	'OS_STATUS_PROTECTION_SYSCALL',0,250,1,18
	.byte	'OS_STATUS_PROTECTION_IRQ',0,251,1,18
	.byte	'OS_STATUS_API_ERROR',0,252,1,18
	.byte	'OS_STATUS_ASSERTION',0,253,1,18
	.byte	'OS_STATUS_OVERLOAD',0,254,1,18
	.byte	'OS_STATUS_ACCESSRIGHTS_1',0,129,2,18
	.byte	'OS_STATUS_CALLEVEL_SHARED_STACK',0,130,2,18
	.byte	'OS_STATUS_ID_1',0,131,2,18
	.byte	'OS_STATUS_UNLOCKED',0,133,2,18
	.byte	'OS_STATUS_STATE_1',0,135,2,18
	.byte	'OS_STATUS_VALUE_IS_ZERO_1',0,136,2,18
	.byte	'OS_STATUS_CORE_CROSS_DATA',0,150,2,18
	.byte	'OS_STATUS_PARAM_POINTER_1',0,151,2,18
	.byte	'OS_STATUS_STACKUSAGE_DISABLED_BY_CONFIG',0,241,3,18
	.byte	'OS_STATUS_NO_BARRIER_PARTICIPANT',0,242,3,18
	.byte	'OS_STATUS_UNIMPLEMENTED_CLEARPENDING',0,243,3,18
	.byte	'OS_STATUS_NO_NTFSTACK_POOL_EMPTY',0,244,3,18
	.byte	'OS_STATUS_ACCESSRIGHTS_2',0,129,4,18
	.byte	'OS_STATUS_CALLEVEL_CROSS_CORE_SYNC',0,130,4,18
	.byte	'OS_STATUS_ID_2',0,131,4,18
	.byte	'OS_STATUS_NOFUNC_1',0,133,4,18
	.byte	'OS_STATUS_STATE_2',0,135,4,18
	.byte	'OS_STATUS_VALUE_IS_ZERO_2',0,136,4,18
	.byte	'OS_STATUS_PARAM_POINTER_2',0,151,4,18
	.byte	'OS_STATUS_EVENT_DISABLED_BY_CONFIG',0,241,5,18
	.byte	'OS_STATUS_UNIMPLEMENTED_EXCEPTIONCONTEXT',0,243,5,18
	.byte	'OS_STATUS_NO_NTFSTACK_APPLIMIT_EXCEEDED',0,244,5,18
	.byte	'OS_STATUS_NOTACCESSIBLE_1',0,129,6,18
	.byte	'OS_STATUS_ID_TYPE_1',0,131,6,18
	.byte	'OS_STATUS_NOFUNC_2',0,133,6,18
	.byte	'OS_STATUS_STATE_STOPPED',0,135,6,18
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_1',0,136,6,18
	.byte	'OS_STATUS_PARAM_POINTER_3',0,151,6,18
	.byte	'OS_STATUS_NOTACCESSIBLE_2',0,129,8,18
	.byte	'OS_STATUS_ID_DIFFERENT_COUNTER',0,131,8,18
	.byte	'OS_STATUS_SPINLOCK_ORDER',0,133,8,18
	.byte	'OS_STATUS_STATE_RUNNING',0,135,8,18
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_2',0,136,8,18
	.byte	'OS_STATUS_NOEXTENDEDTASK_1',0,129,10,18
	.byte	'OS_STATUS_ID_DIFFERENT_SYNC',0,131,10,18
	.byte	'OS_STATUS_STOPPED_1',0,133,10,18
	.byte	'OS_STATUS_STATE_NEXTED',0,135,10,18
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_3',0,136,10,18
	.byte	'OS_STATUS_NOEXTENDEDTASK_2',0,129,12,18
	.byte	'OS_STATUS_HOOK_NOT_AVAILABLE',0,131,12,18
	.byte	'OS_STATUS_NOT_STOPPED_2',0,133,12,18
	.byte	'OS_STATUS_STATE_WAITING',0,135,12,18
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_1',0,136,12,18
	.byte	'OS_STATUS_NOEXTENDEDTASK_CALLER',0,129,14,18
	.byte	'OS_STATUS_NEXTED_1',0,133,14,18
	.byte	'OS_STATUS_STATE_NO_RESTART',0,135,14,18
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_2',0,136,14,18
	.byte	'OS_STATUS_LOCKED',0,129,16,18
	.byte	'OS_STATUS_KILLING_IS_DISABLED',0,133,16,18
	.byte	'OS_STATUS_STATE_ALREADY_TERMINATED',0,135,16,18
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_1',0,136,16,18
	.byte	'OS_STATUS_PRIORITY',0,129,18,18
	.byte	'OS_STATUS_ORDER',0,133,18,18
	.byte	'OS_STATUS_STATE_RESTARTING_NO_MEMBER',0,135,18,18
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_2',0,136,18,18
	.byte	'OS_STATUS_NOT_THE_OWNER_1',0,129,20,18
	.byte	'OS_STATUS_STATE_ALREADY_RESTARTING',0,135,20,18
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_3',0,136,20,18
	.byte	'OS_STATUS_VALUE_IS_NOT_BOOLEAN',0,136,22,0,16
	.byte	'Os_StatusType',0,20,232,5,3
	.word	6180
	.byte	24,20,133,6,9,4,20
	.byte	'Service',0
	.word	3010
	.byte	1,2,35,0,20
	.byte	'Error',0
	.word	260
	.byte	1,2,35,1,20
	.byte	'DetailedError',0
	.word	6180
	.byte	2,2,35,2,0,16
	.byte	'Os_ErrorInformationType',0,20,143,6,3
	.word	8710
	.byte	17,20,175,6,9,1,18
	.byte	'SCHEDULETABLE_STOPPED',0,0,18
	.byte	'SCHEDULETABLE_NEXT',0,1,18
	.byte	'SCHEDULETABLE_WAITING',0,2,18
	.byte	'SCHEDULETABLE_RUNNING',0,3,18
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,16
	.byte	'ScheduleTableStatusType',0,20,192,6,3
	.word	8805
	.byte	16
	.byte	'Os_AccessCheckAddress',0,20,199,6,29
	.word	894
	.byte	17,20,211,6,9,1,18
	.byte	'OS_MEM_ACCESS_TYPE_NON',0,0,18
	.byte	'OS_MEM_ACCESS_TYPE_R',0,1,18
	.byte	'OS_MEM_ACCESS_TYPE_READ',0,1,18
	.byte	'OS_MEM_ACCESS_TYPE_W',0,2,18
	.byte	'OS_MEM_ACCESS_TYPE_WRITE',0,2,18
	.byte	'OS_MEM_ACCESS_TYPE_RW',0,3,18
	.byte	'OS_MEM_ACCESS_TYPE_EXECUTE',0,4,18
	.byte	'OS_MEM_ACCESS_TYPE_X',0,4,18
	.byte	'OS_MEM_ACCESS_TYPE_RX',0,5,18
	.byte	'OS_MEM_ACCESS_TYPE_WX',0,6,18
	.byte	'OS_MEM_ACCESS_TYPE_RWX',0,7,18
	.byte	'OS_MEM_ACCESS_TYPE_S',0,8,18
	.byte	'OS_MEM_ACCESS_TYPE_STACK',0,8,18
	.byte	'OS_MEM_ACCESS_TYPE_RS',0,9,18
	.byte	'OS_MEM_ACCESS_TYPE_WS',0,10,18
	.byte	'OS_MEM_ACCESS_TYPE_RWS',0,11,18
	.byte	'OS_MEM_ACCESS_TYPE_XS',0,12,18
	.byte	'OS_MEM_ACCESS_TYPE_RXS',0,13,18
	.byte	'OS_MEM_ACCESS_TYPE_WXS',0,14,18
	.byte	'OS_MEM_ACCESS_TYPE_RWXS',0,15,0,16
	.byte	'Os_MemAccessType',0,20,233,6,3
	.word	9009
	.byte	25,1,1,5
	.word	260
	.byte	0,7
	.word	9538
	.byte	16
	.byte	'ComM_TransitionFunctionType',0,6,202,1,9
	.word	9547
	.byte	21,5
	.word	260
	.byte	22,4,0,21,25
	.word	9589
	.byte	22,4,0
.L518:
	.byte	3
	.word	9598
	.byte	21,20
	.word	9552
	.byte	22,4,0,21,100
	.word	9612
	.byte	22,4,0
.L519:
	.byte	3
	.word	9621
	.byte	7
	.word	9538
.L520:
	.byte	21,1
	.word	260
	.byte	22,0,0
.L521:
	.byte	21,1
	.word	260
	.byte	22,0,0
.L522:
	.byte	21,1
	.word	260
	.byte	22,0,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L201:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,11
	.byte	5,0,3,8,58,15,59,15,57,15,73,19,0,0,12,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,13,46,0
	.byte	3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,14,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0
	.byte	15,21,0,54,15,0,0,16,22,0,3,8,58,15,59,15,57,15,73,19,0,0,17,4,1,58,15,59,15,57,15,11,15,0,0,18,40,0,3
	.byte	8,28,13,0,0,19,19,1,3,8,58,15,59,15,57,15,11,15,0,0,20,13,0,3,8,73,19,11,15,56,9,0,0,21,1,1,11,15,73,19
	.byte	0,0,22,33,0,47,15,0,0,23,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,24,19,1,58,15,59,15,57,15,11
	.byte	15,0,0,25,21,1,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L202:
	.word	.L577-.L576
.L576:
	.half	3
	.word	.L579-.L578
.L578:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\appl\\GenData',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\BswM\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\ComM\\Implementation',0,0
	.byte	'Det.h',0,1,0,0
	.byte	'ComM_Lcfg.h',0,2,0,0
	.byte	'BswM_ComM.h',0,3,0,0
	.byte	'Os.h',0,4,0,0
	.byte	'SchM_ComM.h',0,2,0,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0
	.byte	'Platform_Types.h',0,5,0,0
	.byte	'Std_Types.h',0,5,0,0
	.byte	'ComStack_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,5,0,0
	.byte	'Det_Cfg.h',0,2,0,0
	.byte	'Rte_Type.h',0,2,0,0
	.byte	'ComM_GenTypes.h',0,2,0,0
	.byte	'ComM_Types.h',0,6,0,0
	.byte	'ComM_Cfg.h',0,2,0,0
	.byte	'ComM_Private_Cfg.h',0,2,0,0
	.byte	'Os_Types_Lcfg.h',0,2,0,0
	.byte	'Os_Hal_Os_Types.h',0,4,0,0
	.byte	'Os_Hal_OsInt.h',0,4,0,0
	.byte	'Os_Types.h',0,4,0,0,0
.L579:
.L577:
	.sdecl	'.debug_info',debug,cluster('ComM_MainFunction')
	.sect	'.debug_info'
.L203:
	.word	290
	.half	3
	.word	.L204
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L206,.L205
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_MainFunction',0,1,230,42,23,1,1,1
	.word	.L192,.L394,.L191
	.byte	4
	.byte	'Channel',0,1,230,42,59
	.word	.L395,.L396
	.byte	5
	.word	.L192,.L394
	.byte	6
	.byte	'errorId',0,1,233,42,9
	.word	.L395,.L397
	.byte	6
	.byte	'highestComModeReq',0,1,234,42,19
	.word	.L395,.L398
	.byte	6
	.byte	'internalRequest',0,1,235,42,12
	.word	.L395,.L399
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_MainFunction')
	.sect	'.debug_abbrev'
.L204:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_MainFunction')
	.sect	'.debug_line'
.L205:
	.word	.L581-.L580
.L580:
	.half	3
	.word	.L583-.L582
.L582:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L583:
	.byte	5,23,7,0,5,2
	.word	.L192
	.byte	3,229,42,1,5,17,9
	.half	.L567-.L192
	.byte	3,3,1,5,7,3,6,1,5,3,9
	.half	.L584-.L567
	.byte	1,5,8,7,9
	.half	.L585-.L584
	.byte	3,6,1,5,13,7,9
	.half	.L586-.L585
	.byte	3,2,1,5,38,1,5,44,9
	.half	.L104-.L586
	.byte	3,12,1,5,56,9
	.half	.L568-.L104
	.byte	3,4,1,5,66,1,5,35,9
	.half	.L569-.L568
	.byte	3,11,1,5,44,9
	.half	.L587-.L569
	.byte	1,5,43,9
	.half	.L570-.L587
	.byte	3,29,1,5,3,9
	.half	.L103-.L570
	.byte	3,55,1,5,28,7,9
	.half	.L588-.L103
	.byte	3,2,1,5,66,9
	.half	.L589-.L588
	.byte	1,5,89,9
	.half	.L590-.L589
	.byte	1,5,1,9
	.half	.L106-.L590
	.byte	3,5,1,7,9
	.half	.L207-.L106
	.byte	0,1,1
.L581:
	.sdecl	'.debug_ranges',debug,cluster('ComM_MainFunction')
	.sect	'.debug_ranges'
.L206:
	.word	-1,.L192,0,.L207-.L192,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_Init')
	.sect	'.debug_info'
.L208:
	.word	201
	.half	3
	.word	.L209
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L211,.L210
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_Init',0,1,202,29,23,1,1,1
	.word	.L154,.L400,.L153
	.byte	4
	.word	.L154,.L400
	.byte	5
	.byte	'errorId',0,1,206,29,9
	.word	.L395,.L401
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_Init')
	.sect	'.debug_abbrev'
.L209:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_Init')
	.sect	'.debug_line'
.L210:
	.word	.L592-.L591
.L591:
	.half	3
	.word	.L594-.L593
.L593:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L594:
	.byte	5,7,7,0,5,2
	.word	.L154
	.byte	3,230,29,1,5,17,9
	.half	.L595-.L154
	.byte	3,103,1,5,3,9
	.half	.L534-.L595
	.byte	3,25,1,5,13,7,9
	.half	.L596-.L534
	.byte	3,2,1,5,41,1,5,7,9
	.half	.L13-.L596
	.byte	3,35,1,5,53,9
	.half	.L597-.L13
	.byte	1,5,51,9
	.half	.L598-.L597
	.byte	1,5,53,9
	.half	.L599-.L598
	.byte	3,1,1,5,51,1,5,28,9
	.half	.L600-.L599
	.byte	3,199,0,1,5,7,9
	.half	.L601-.L600
	.byte	3,101,1,5,28,9
	.half	.L602-.L601
	.byte	3,27,1,5,7,9
	.half	.L603-.L602
	.byte	3,91,1,5,28,9
	.half	.L604-.L603
	.byte	3,37,1,5,7,9
	.half	.L605-.L604
	.byte	3,90,1,5,28,9
	.half	.L606-.L605
	.byte	3,38,1,5,7,9
	.half	.L607-.L606
	.byte	3,79,1,5,28,9
	.half	.L608-.L607
	.byte	3,49,1,5,7,9
	.half	.L609-.L608
	.byte	3,2,1,5,34,9
	.half	.L610-.L609
	.byte	3,20,1,5,25,9
	.half	.L611-.L610
	.byte	1,5,23,1,5,3,9
	.half	.L14-.L611
	.byte	3,6,1,5,28,7,9
	.half	.L612-.L14
	.byte	3,2,1,5,66,9
	.half	.L613-.L612
	.byte	1,5,81,9
	.half	.L614-.L613
	.byte	1,5,1,7,9
	.half	.L15-.L614
	.byte	3,6,1,7,9
	.half	.L212-.L15
	.byte	0,1,1
.L592:
	.sdecl	'.debug_ranges',debug,cluster('ComM_Init')
	.sect	'.debug_ranges'
.L211:
	.word	-1,.L154,0,.L212-.L154,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_InitMemory')
	.sect	'.debug_info'
.L213:
	.word	185
	.half	3
	.word	.L214
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L216,.L215
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_InitMemory',0,1,175,32,23,1,1,1
	.word	.L158,.L402,.L157
	.byte	4
	.word	.L158,.L402
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_InitMemory')
	.sect	'.debug_abbrev'
.L214:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_InitMemory')
	.sect	'.debug_line'
.L215:
	.word	.L616-.L615
.L615:
	.half	3
	.word	.L618-.L617
.L617:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L618:
	.byte	5,3,7,0,5,2
	.word	.L158
	.byte	3,177,32,1,5,21,9
	.half	.L619-.L158
	.byte	1,5,19,1,5,1,9
	.half	.L620-.L619
	.byte	3,4,1,7,9
	.half	.L217-.L620
	.byte	0,1,1
.L616:
	.sdecl	'.debug_ranges',debug,cluster('ComM_InitMemory')
	.sect	'.debug_ranges'
.L216:
	.word	-1,.L158,0,.L217-.L158,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_DeInit')
	.sect	'.debug_info'
.L218:
	.word	181
	.half	3
	.word	.L219
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L221,.L220
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_DeInit',0,1,240,31,23,1,1,1
	.word	.L156,.L403,.L155
	.byte	4
	.word	.L156,.L403
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_DeInit')
	.sect	'.debug_abbrev'
.L219:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_DeInit')
	.sect	'.debug_line'
.L220:
	.word	.L622-.L621
.L621:
	.half	3
	.word	.L624-.L623
.L623:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L624:
	.byte	5,8,7,0,5,2
	.word	.L156
	.byte	3,144,32,1,5,26,9
	.half	.L625-.L156
	.byte	1,5,3,9
	.half	.L626-.L625
	.byte	3,6,1,5,20,7,9
	.half	.L627-.L626
	.byte	3,2,1,5,1,7,9
	.half	.L16-.L627
	.byte	3,12,1,7,9
	.half	.L222-.L16
	.byte	0,1,1
.L622:
	.sdecl	'.debug_ranges',debug,cluster('ComM_DeInit')
	.sect	'.debug_ranges'
.L221:
	.word	-1,.L156,0,.L222-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_GetStatus')
	.sect	'.debug_info'
.L223:
	.word	246
	.half	3
	.word	.L224
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L226,.L225
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_GetStatus',0,1,151,33,33
	.word	.L395
	.byte	1,1,1
	.word	.L164,.L404,.L163
	.byte	4
	.byte	'Status',0,1,151,33,102
	.word	.L405,.L406
	.byte	5
	.word	.L407
	.byte	6
	.byte	'retVal',0,1,154,33,18
	.word	.L395,.L408
	.byte	6
	.byte	'errorId',0,1,155,33,9
	.word	.L395,.L409
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_GetStatus')
	.sect	'.debug_abbrev'
.L224:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_GetStatus')
	.sect	'.debug_line'
.L225:
	.word	.L629-.L628
.L628:
	.half	3
	.word	.L631-.L630
.L630:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L631:
	.byte	5,17,7,0,5,2
	.word	.L164
	.byte	3,154,33,1,5,10,9
	.half	.L540-.L164
	.byte	3,5,1,5,3,3,1,1,5,13,7,9
	.half	.L541-.L540
	.byte	3,2,1,5,38,1,5,15,9
	.half	.L26-.L541
	.byte	3,7,1,5,13,9
	.half	.L542-.L26
	.byte	1,5,12,9
	.half	.L632-.L542
	.byte	3,1,1,5,3,9
	.half	.L27-.L632
	.byte	3,5,1,5,28,7,9
	.half	.L633-.L27
	.byte	3,2,1,5,66,9
	.half	.L634-.L633
	.byte	1,5,86,1,5,3,9
	.half	.L28-.L634
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L227-.L28
	.byte	0,1,1
.L629:
	.sdecl	'.debug_ranges',debug,cluster('ComM_GetStatus')
	.sect	'.debug_ranges'
.L226:
	.word	-1,.L164,0,.L227-.L164,0,0
.L407:
	.word	-1,.L164,0,.L404-.L164,-1,.L166,0,.L367-.L166,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_GetState')
	.sect	'.debug_info'
.L228:
	.word	265
	.half	3
	.word	.L229
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L231,.L230
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_GetState',0,1,200,32,33
	.word	.L395
	.byte	1,1,1
	.word	.L160,.L410,.L159
	.byte	4
	.byte	'Channel',0,1,200,32,66
	.word	.L395,.L411
	.byte	4
	.byte	'State',0,1,200,32,123
	.word	.L412,.L413
	.byte	5
	.word	.L414
	.byte	6
	.byte	'retVal',0,1,203,32,18
	.word	.L395,.L415
	.byte	6
	.byte	'errorId',0,1,204,32,9
	.word	.L395,.L416
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_GetState')
	.sect	'.debug_abbrev'
.L229:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_GetState')
	.sect	'.debug_line'
.L230:
	.word	.L636-.L635
.L635:
	.half	3
	.word	.L638-.L637
.L637:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L638:
	.byte	5,33,7,0,5,2
	.word	.L160
	.byte	3,199,32,1,5,3,9
	.half	.L537-.L160
	.byte	3,10,1,5,13,7,9
	.half	.L639-.L537
	.byte	3,2,1,5,12,9
	.half	.L640-.L639
	.byte	3,1,1,5,32,3,127,1,5,8,9
	.half	.L17-.L640
	.byte	3,4,1,7,9
	.half	.L641-.L17
	.byte	3,9,1,5,13,7,9
	.half	.L19-.L641
	.byte	3,2,1,5,38,1,5,14,9
	.half	.L20-.L19
	.byte	3,7,1,5,32,9
	.half	.L642-.L20
	.byte	1,5,12,9
	.half	.L643-.L642
	.byte	1,5,5,9
	.half	.L644-.L643
	.byte	3,7,1,5,40,7,9
	.half	.L645-.L644
	.byte	3,2,1,5,7,9
	.half	.L538-.L645
	.byte	1,5,18,7,9
	.half	.L646-.L538
	.byte	3,5,1,5,16,1,5,12,9
	.half	.L22-.L646
	.byte	3,5,1,5,3,9
	.half	.L18-.L22
	.byte	3,5,1,5,28,7,9
	.half	.L647-.L18
	.byte	3,2,1,5,66,9
	.half	.L648-.L647
	.byte	1,5,85,9
	.half	.L649-.L648
	.byte	1,5,3,9
	.half	.L24-.L649
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L232-.L24
	.byte	0,1,1
.L636:
	.sdecl	'.debug_ranges',debug,cluster('ComM_GetState')
	.sect	'.debug_ranges'
.L231:
	.word	-1,.L160,0,.L232-.L160,0,0
.L414:
	.word	-1,.L160,0,.L410-.L160,-1,.L162,0,.L377-.L162,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_RequestComMode')
	.sect	'.debug_info'
.L233:
	.word	302
	.half	3
	.word	.L234
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L236,.L235
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_RequestComMode',0,1,201,33,33
	.word	.L395
	.byte	1,1,1
	.word	.L168,.L417,.L167
	.byte	4
	.byte	'User',0,1,201,33,73
	.word	.L418,.L419
	.byte	4
	.byte	'ComMode',0,1,201,33,93
	.word	.L395,.L420
	.byte	5
	.word	.L168,.L417
	.byte	6
	.byte	'retVal',0,1,204,33,18
	.word	.L395,.L421
	.byte	6
	.byte	'errorId',0,1,205,33,9
	.word	.L395,.L422
	.byte	6
	.byte	'userReqFullCom',0,1,210,33,27
	.word	.L395,.L423
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_RequestComMode')
	.sect	'.debug_abbrev'
.L234:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_RequestComMode')
	.sect	'.debug_line'
.L235:
	.word	.L651-.L650
.L650:
	.half	3
	.word	.L653-.L652
.L652:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L653:
	.byte	5,33,7,0,5,2
	.word	.L168
	.byte	3,200,33,1,5,17,9
	.half	.L546-.L168
	.byte	3,4,1,5,10,9
	.half	.L547-.L546
	.byte	3,14,1,5,7,3,1,1,5,3,9
	.half	.L654-.L547
	.byte	1,5,13,7,9
	.half	.L655-.L654
	.byte	3,2,1,5,12,9
	.half	.L656-.L655
	.byte	3,1,1,5,32,3,127,1,5,8,9
	.half	.L30-.L656
	.byte	3,4,1,5,12,7,9
	.half	.L657-.L30
	.byte	3,6,1,5,59,7,9
	.half	.L658-.L657
	.byte	1,5,13,7,9
	.half	.L32-.L658
	.byte	3,2,1,5,38,1,5,12,9
	.half	.L33-.L32
	.byte	3,6,1,5,5,3,2,1,5,52,9
	.half	.L544-.L33
	.byte	3,7,1,5,5,9
	.half	.L659-.L544
	.byte	3,124,1,5,136,1,7,9
	.half	.L545-.L659
	.byte	3,4,1,5,133,1,3,126,1,5,136,1,9
	.half	.L36-.L545
	.byte	3,27,1,5,43,9
	.half	.L37-.L36
	.byte	3,45,1,5,5,9
	.half	.L660-.L37
	.byte	1,5,3,9
	.half	.L31-.L660
	.byte	3,5,1,5,28,7,9
	.half	.L661-.L31
	.byte	3,2,1,5,66,9
	.half	.L662-.L661
	.byte	1,5,91,9
	.half	.L663-.L662
	.byte	1,5,3,9
	.half	.L38-.L663
	.byte	3,9,1,5,1,3,1,1,7,9
	.half	.L237-.L38
	.byte	0,1,1
.L651:
	.sdecl	'.debug_ranges',debug,cluster('ComM_RequestComMode')
	.sect	'.debug_ranges'
.L236:
	.word	-1,.L168,0,.L237-.L168,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_GetMaxComMode')
	.sect	'.debug_info'
.L238:
	.word	273
	.half	3
	.word	.L239
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L241,.L240
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_GetMaxComMode',0,1,224,34,33
	.word	.L395
	.byte	1,1,1
	.word	.L170,.L424,.L169
	.byte	4
	.byte	'User',0,1,224,34,72
	.word	.L418,.L425
	.byte	4
	.byte	'ComMode',0,1,224,34,125
	.word	.L426,.L427
	.byte	5
	.word	.L170,.L424
	.byte	6
	.byte	'retVal',0,1,227,34,18
	.word	.L395,.L428
	.byte	6
	.byte	'errorId',0,1,228,34,9
	.word	.L395,.L429
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_GetMaxComMode')
	.sect	'.debug_abbrev'
.L239:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_GetMaxComMode')
	.sect	'.debug_line'
.L240:
	.word	.L665-.L664
.L664:
	.half	3
	.word	.L667-.L666
.L666:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L667:
	.byte	5,17,7,0,5,2
	.word	.L170
	.byte	3,227,34,1,5,10,9
	.half	.L549-.L170
	.byte	3,8,1,5,7,3,1,1,5,3,9
	.half	.L668-.L549
	.byte	1,5,13,7,9
	.half	.L669-.L668
	.byte	3,2,1,5,12,9
	.half	.L670-.L669
	.byte	3,1,1,5,32,3,127,1,5,8,9
	.half	.L40-.L670
	.byte	3,4,1,7,9
	.half	.L671-.L40
	.byte	3,5,1,5,13,7,9
	.half	.L42-.L671
	.byte	3,2,1,5,38,1,5,16,9
	.half	.L43-.L42
	.byte	3,9,1,5,14,1,5,12,9
	.half	.L672-.L43
	.byte	3,13,1,5,3,9
	.half	.L41-.L672
	.byte	3,5,1,5,28,7,9
	.half	.L673-.L41
	.byte	3,2,1,5,66,9
	.half	.L548-.L673
	.byte	1,5,90,1,5,3,9
	.half	.L45-.L548
	.byte	3,8,1,5,1,3,1,1,7,9
	.half	.L242-.L45
	.byte	0,1,1
.L665:
	.sdecl	'.debug_ranges',debug,cluster('ComM_GetMaxComMode')
	.sect	'.debug_ranges'
.L241:
	.word	-1,.L170,0,.L242-.L170,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_GetRequestedComMode')
	.sect	'.debug_info'
.L243:
	.word	280
	.half	3
	.word	.L244
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L246,.L245
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_GetRequestedComMode',0,1,176,35,33
	.word	.L395
	.byte	1,1,1
	.word	.L172,.L430,.L171
	.byte	4
	.byte	'User',0,1,176,35,78
	.word	.L418,.L431
	.byte	4
	.byte	'ComMode',0,1,176,35,131,1
	.word	.L426,.L432
	.byte	5
	.word	.L172,.L430
	.byte	6
	.byte	'retVal',0,1,179,35,18
	.word	.L395,.L433
	.byte	6
	.byte	'errorId',0,1,180,35,9
	.word	.L395,.L434
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_GetRequestedComMode')
	.sect	'.debug_abbrev'
.L244:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_GetRequestedComMode')
	.sect	'.debug_line'
.L245:
	.word	.L675-.L674
.L674:
	.half	3
	.word	.L677-.L676
.L676:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L677:
	.byte	5,33,7,0,5,2
	.word	.L172
	.byte	3,175,35,1,5,3,9
	.half	.L550-.L172
	.byte	3,11,1,5,13,7,9
	.half	.L678-.L550
	.byte	3,2,1,5,12,9
	.half	.L679-.L678
	.byte	3,1,1,5,32,3,127,1,5,8,9
	.half	.L47-.L679
	.byte	3,4,1,7,9
	.half	.L680-.L47
	.byte	3,5,1,5,13,7,9
	.half	.L49-.L680
	.byte	3,2,1,5,38,1,5,5,9
	.half	.L50-.L49
	.byte	3,10,1,5,16,9
	.half	.L551-.L50
	.byte	3,3,1,5,14,1,9
	.half	.L681-.L551
	.byte	3,25,1,5,94,9
	.half	.L682-.L681
	.byte	1,5,143,1,9
	.half	.L683-.L682
	.byte	1,5,20,9
	.half	.L684-.L683
	.byte	3,2,1,5,5,9
	.half	.L685-.L684
	.byte	3,10,1,5,12,9
	.half	.L686-.L685
	.byte	3,1,1,5,3,9
	.half	.L48-.L686
	.byte	3,5,1,5,28,7,9
	.half	.L687-.L48
	.byte	3,2,1,5,66,9
	.half	.L688-.L687
	.byte	1,5,96,9
	.half	.L689-.L688
	.byte	1,5,3,9
	.half	.L52-.L689
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L247-.L52
	.byte	0,1,1
.L675:
	.sdecl	'.debug_ranges',debug,cluster('ComM_GetRequestedComMode')
	.sect	'.debug_ranges'
.L246:
	.word	-1,.L172,0,.L247-.L172,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_GetCurrentComMode')
	.sect	'.debug_info'
.L248:
	.word	302
	.half	3
	.word	.L249
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L251,.L250
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_GetCurrentComMode',0,1,150,36,33
	.word	.L395
	.byte	1,1,1
	.word	.L174,.L435,.L173
	.byte	4
	.byte	'User',0,1,150,36,76
	.word	.L418,.L436
	.byte	4
	.byte	'ComMode',0,1,150,36,129,1
	.word	.L426,.L437
	.byte	5
	.word	.L174,.L435
	.byte	6
	.byte	'retVal',0,1,153,36,18
	.word	.L395,.L438
	.byte	6
	.byte	'errorId',0,1,154,36,9
	.word	.L395,.L439
	.byte	6
	.byte	'tmpComMode',0,1,156,36,17
	.word	.L395,.L440
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_GetCurrentComMode')
	.sect	'.debug_abbrev'
.L249:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_GetCurrentComMode')
	.sect	'.debug_line'
.L250:
	.word	.L691-.L690
.L690:
	.half	3
	.word	.L693-.L692
.L692:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L693:
	.byte	5,33,7,0,5,2
	.word	.L174
	.byte	3,149,36,1,5,3,9
	.half	.L554-.L174
	.byte	3,12,1,5,13,7,9
	.half	.L694-.L554
	.byte	3,2,1,5,12,9
	.half	.L695-.L694
	.byte	3,1,1,5,32,3,127,1,5,8,9
	.half	.L54-.L695
	.byte	3,4,1,7,9
	.half	.L696-.L54
	.byte	3,5,1,5,13,7,9
	.half	.L56-.L696
	.byte	3,2,1,5,38,1,5,5,9
	.half	.L57-.L56
	.byte	3,7,1,5,123,9
	.half	.L553-.L57
	.byte	3,10,1,5,32,9
	.half	.L697-.L553
	.byte	3,2,1,5,80,1,5,10,9
	.half	.L698-.L697
	.byte	3,1,1,5,23,9
	.half	.L699-.L698
	.byte	1,5,21,9
	.half	.L700-.L699
	.byte	1,5,18,3,2,1,5,5,9
	.half	.L701-.L700
	.byte	3,4,1,5,12,9
	.half	.L702-.L701
	.byte	3,1,1,5,3,9
	.half	.L55-.L702
	.byte	3,5,1,5,28,7,9
	.half	.L703-.L55
	.byte	3,2,1,5,66,9
	.half	.L704-.L703
	.byte	1,5,94,9
	.half	.L705-.L704
	.byte	1,5,3,9
	.half	.L59-.L705
	.byte	3,9,1,5,1,3,1,1,7,9
	.half	.L252-.L59
	.byte	0,1,1
.L691:
	.sdecl	'.debug_ranges',debug,cluster('ComM_GetCurrentComMode')
	.sect	'.debug_ranges'
.L251:
	.word	-1,.L174,0,.L252-.L174,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_GetInhibitionStatus')
	.sect	'.debug_info'
.L253:
	.word	282
	.half	3
	.word	.L254
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L256,.L255
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_GetInhibitionStatus',0,1,232,36,33
	.word	.L395
	.byte	1,1,1
	.word	.L176,.L441,.L175
	.byte	4
	.byte	'Channel',0,1,232,36,77
	.word	.L395,.L442
	.byte	4
	.byte	'Status',0,1,232,36,145,1
	.word	.L443,.L444
	.byte	5
	.word	.L176,.L441
	.byte	6
	.byte	'retVal',0,1,235,36,18
	.word	.L395,.L445
	.byte	6
	.byte	'errorId',0,1,236,36,9
	.word	.L395,.L446
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_GetInhibitionStatus')
	.sect	'.debug_abbrev'
.L254:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_GetInhibitionStatus')
	.sect	'.debug_line'
.L255:
	.word	.L707-.L706
.L706:
	.half	3
	.word	.L709-.L708
.L708:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L709:
	.byte	5,17,7,0,5,2
	.word	.L176
	.byte	3,235,36,1,5,10,9
	.half	.L556-.L176
	.byte	3,5,1,5,7,3,1,1,5,3,9
	.half	.L710-.L556
	.byte	1,5,13,7,9
	.half	.L711-.L710
	.byte	3,2,1,5,12,9
	.half	.L712-.L711
	.byte	3,1,1,5,32,3,127,1,5,8,9
	.half	.L61-.L712
	.byte	3,4,1,7,9
	.half	.L713-.L61
	.byte	3,5,1,5,13,7,9
	.half	.L63-.L713
	.byte	3,6,1,5,38,1,5,15,9
	.half	.L64-.L63
	.byte	3,7,1,5,12,9
	.half	.L714-.L64
	.byte	3,1,1,5,52,3,127,1,5,13,9
	.half	.L715-.L714
	.byte	1,5,3,9
	.half	.L62-.L715
	.byte	3,6,1,5,28,7,9
	.half	.L716-.L62
	.byte	3,2,1,5,66,9
	.half	.L555-.L716
	.byte	1,5,96,1,5,3,9
	.half	.L66-.L555
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L257-.L66
	.byte	0,1,1
.L707:
	.sdecl	'.debug_ranges',debug,cluster('ComM_GetInhibitionStatus')
	.sect	'.debug_ranges'
.L256:
	.word	-1,.L176,0,.L257-.L176,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_PreventWakeUp')
	.sect	'.debug_info'
.L258:
	.word	275
	.half	3
	.word	.L259
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L261,.L260
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_PreventWakeUp',0,1,169,37,33
	.word	.L395
	.byte	1,1,1
	.word	.L178,.L447,.L177
	.byte	4
	.byte	'Channel',0,1,169,37,71
	.word	.L395,.L448
	.byte	4
	.byte	'Status',0,1,169,37,88
	.word	.L395,.L449
	.byte	5
	.word	.L178,.L447
	.byte	6
	.byte	'retVal',0,1,172,37,18
	.word	.L395,.L450
	.byte	6
	.byte	'errorId',0,1,173,37,9
	.word	.L395,.L451
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_PreventWakeUp')
	.sect	'.debug_abbrev'
.L259:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_PreventWakeUp')
	.sect	'.debug_line'
.L260:
	.word	.L718-.L717
.L717:
	.half	3
	.word	.L720-.L719
.L719:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L720:
	.byte	5,17,7,0,5,2
	.word	.L178
	.byte	3,172,37,1,5,10,9
	.half	.L558-.L178
	.byte	3,5,1,5,7,3,1,1,5,3,9
	.half	.L721-.L558
	.byte	1,5,13,7,9
	.half	.L722-.L721
	.byte	3,2,1,5,12,9
	.half	.L723-.L722
	.byte	3,1,1,5,32,3,127,1,5,8,9
	.half	.L68-.L723
	.byte	3,4,1,5,13,7,9
	.half	.L724-.L68
	.byte	3,6,1,5,28,9
	.half	.L69-.L724
	.byte	3,50,1,5,66,9
	.half	.L557-.L69
	.byte	1,5,90,1,5,3,9
	.half	.L559-.L557
	.byte	3,13,1,5,1,3,1,1,7,9
	.half	.L262-.L559
	.byte	0,1,1
.L718:
	.sdecl	'.debug_ranges',debug,cluster('ComM_PreventWakeUp')
	.sect	'.debug_ranges'
.L261:
	.word	-1,.L178,0,.L262-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_LimitChannelToNoComMode')
	.sect	'.debug_info'
.L263:
	.word	285
	.half	3
	.word	.L264
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L266,.L265
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_LimitChannelToNoComMode',0,1,147,38,33
	.word	.L395
	.byte	1,1,1
	.word	.L180,.L452,.L179
	.byte	4
	.byte	'Channel',0,1,147,38,81
	.word	.L395,.L453
	.byte	4
	.byte	'Status',0,1,147,38,98
	.word	.L395,.L454
	.byte	5
	.word	.L180,.L452
	.byte	6
	.byte	'retVal',0,1,150,38,18
	.word	.L395,.L455
	.byte	6
	.byte	'errorId',0,1,151,38,9
	.word	.L395,.L456
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_LimitChannelToNoComMode')
	.sect	'.debug_abbrev'
.L264:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_LimitChannelToNoComMode')
	.sect	'.debug_line'
.L265:
	.word	.L726-.L725
.L725:
	.half	3
	.word	.L728-.L727
.L727:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L728:
	.byte	5,25,7,0,5,2
	.word	.L180
	.byte	3,149,38,1,5,17,9
	.half	.L561-.L180
	.byte	3,1,1,5,7,3,5,1,5,3,9
	.half	.L729-.L561
	.byte	1,5,13,7,9
	.half	.L730-.L729
	.byte	3,2,1,5,12,9
	.half	.L731-.L730
	.byte	3,1,1,5,32,3,127,1,5,13,9
	.half	.L73-.L731
	.byte	3,10,1,5,3,9
	.half	.L74-.L73
	.byte	3,52,1,5,28,7,9
	.half	.L732-.L74
	.byte	3,2,1,5,66,9
	.half	.L560-.L732
	.byte	1,5,100,1,5,3,9
	.half	.L76-.L560
	.byte	3,13,1,5,1,3,1,1,7,9
	.half	.L267-.L76
	.byte	0,1,1
.L726:
	.sdecl	'.debug_ranges',debug,cluster('ComM_LimitChannelToNoComMode')
	.sect	'.debug_ranges'
.L266:
	.word	-1,.L180,0,.L267-.L180,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_LimitECUToNoComMode')
	.sect	'.debug_info'
.L268:
	.word	260
	.half	3
	.word	.L269
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L271,.L270
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_LimitECUToNoComMode',0,1,251,38,33
	.word	.L395
	.byte	1,1,1
	.word	.L182,.L457,.L181
	.byte	4
	.byte	'Status',0,1,251,38,66
	.word	.L395,.L458
	.byte	5
	.word	.L182,.L457
	.byte	6
	.byte	'retVal',0,1,254,38,18
	.word	.L395,.L459
	.byte	6
	.byte	'errorId',0,1,255,38,9
	.word	.L395,.L460
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_LimitECUToNoComMode')
	.sect	'.debug_abbrev'
.L269:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_LimitECUToNoComMode')
	.sect	'.debug_line'
.L270:
	.word	.L734-.L733
.L733:
	.half	3
	.word	.L736-.L735
.L735:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L736:
	.byte	5,17,7,0,5,2
	.word	.L182
	.byte	3,254,38,1,5,7,3,8,1,5,3,9
	.half	.L737-.L182
	.byte	1,5,13,7,9
	.half	.L738-.L737
	.byte	3,2,1,5,12,9
	.half	.L739-.L738
	.byte	3,1,1,5,3,9
	.half	.L78-.L739
	.byte	3,33,1,5,28,7,9
	.half	.L740-.L78
	.byte	3,2,1,5,66,9
	.half	.L562-.L740
	.byte	1,5,96,9
	.half	.L741-.L562
	.byte	1,5,3,9
	.half	.L80-.L741
	.byte	3,10,1,5,1,3,1,1,7,9
	.half	.L272-.L80
	.byte	0,1,1
.L734:
	.sdecl	'.debug_ranges',debug,cluster('ComM_LimitECUToNoComMode')
	.sect	'.debug_ranges'
.L271:
	.word	-1,.L182,0,.L272-.L182,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_ReadInhibitCounter')
	.sect	'.debug_info'
.L273:
	.word	265
	.half	3
	.word	.L274
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L276,.L275
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_ReadInhibitCounter',0,1,197,39,33
	.word	.L395
	.byte	1,1,1
	.word	.L184,.L461,.L183
	.byte	4
	.byte	'CounterValue',0,1,197,39,97
	.word	.L462,.L463
	.byte	5
	.word	.L184,.L461
	.byte	6
	.byte	'retVal',0,1,200,39,18
	.word	.L395,.L464
	.byte	6
	.byte	'errorId',0,1,201,39,9
	.word	.L395,.L465
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_ReadInhibitCounter')
	.sect	'.debug_abbrev'
.L274:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_ReadInhibitCounter')
	.sect	'.debug_line'
.L275:
	.word	.L743-.L742
.L742:
	.half	3
	.word	.L745-.L744
.L744:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L745:
	.byte	5,17,7,0,5,2
	.word	.L184
	.byte	3,200,39,1,5,10,9
	.half	.L563-.L184
	.byte	3,5,1,5,7,3,1,1,5,3,9
	.half	.L746-.L563
	.byte	1,5,13,7,9
	.half	.L747-.L746
	.byte	3,2,1,5,12,9
	.half	.L748-.L747
	.byte	3,1,1,5,32,3,127,1,5,8,9
	.half	.L82-.L748
	.byte	3,4,1,5,13,7,9
	.half	.L749-.L82
	.byte	3,2,1,5,38,1,5,21,9
	.half	.L84-.L749
	.byte	3,7,1,5,12,9
	.half	.L750-.L84
	.byte	3,1,1,5,36,3,127,1,5,19,9
	.half	.L751-.L750
	.byte	1,5,3,9
	.half	.L83-.L751
	.byte	3,6,1,5,28,7,9
	.half	.L752-.L83
	.byte	3,2,1,5,66,9
	.half	.L753-.L752
	.byte	1,5,95,1,5,3,9
	.half	.L86-.L753
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L277-.L86
	.byte	0,1,1
.L743:
	.sdecl	'.debug_ranges',debug,cluster('ComM_ReadInhibitCounter')
	.sect	'.debug_ranges'
.L276:
	.word	-1,.L184,0,.L277-.L184,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_ResetInhibitCounter')
	.sect	'.debug_info'
.L278:
	.word	240
	.half	3
	.word	.L279
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L281,.L280
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_ResetInhibitCounter',0,1,249,39,33
	.word	.L395
	.byte	1,1,1
	.word	.L186,.L466,.L185
	.byte	4
	.word	.L186,.L466
	.byte	5
	.byte	'retVal',0,1,252,39,18
	.word	.L395,.L467
	.byte	5
	.byte	'errorId',0,1,253,39,9
	.word	.L395,.L468
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_ResetInhibitCounter')
	.sect	'.debug_abbrev'
.L279:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_ResetInhibitCounter')
	.sect	'.debug_line'
.L280:
	.word	.L755-.L754
.L754:
	.half	3
	.word	.L757-.L756
.L756:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L757:
	.byte	5,17,7,0,5,2
	.word	.L186
	.byte	3,252,39,1,5,7,3,5,1,5,3,9
	.half	.L758-.L186
	.byte	1,5,13,7,9
	.half	.L759-.L758
	.byte	3,2,1,5,12,9
	.half	.L760-.L759
	.byte	3,1,1,5,32,3,127,1,5,5,9
	.half	.L88-.L760
	.byte	3,8,1,5,39,9
	.half	.L761-.L88
	.byte	1,5,37,1,5,3,9
	.half	.L89-.L761
	.byte	3,10,1,5,28,7,9
	.half	.L762-.L89
	.byte	3,2,1,5,66,9
	.half	.L763-.L762
	.byte	1,5,96,9
	.half	.L764-.L763
	.byte	1,5,3,9
	.half	.L90-.L764
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L282-.L90
	.byte	0,1,1
.L755:
	.sdecl	'.debug_ranges',debug,cluster('ComM_ResetInhibitCounter')
	.sect	'.debug_ranges'
.L281:
	.word	-1,.L186,0,.L282-.L186,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_SetECUGroupClassification')
	.sect	'.debug_info'
.L283:
	.word	266
	.half	3
	.word	.L284
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L286,.L285
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_SetECUGroupClassification',0,1,172,40,33
	.word	.L395
	.byte	1,1,1
	.word	.L188,.L469,.L187
	.byte	4
	.byte	'Status',0,1,172,40,90
	.word	.L395,.L470
	.byte	5
	.word	.L188,.L469
	.byte	6
	.byte	'retVal',0,1,175,40,18
	.word	.L395,.L471
	.byte	6
	.byte	'errorId',0,1,176,40,9
	.word	.L395,.L472
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_SetECUGroupClassification')
	.sect	'.debug_abbrev'
.L284:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_SetECUGroupClassification')
	.sect	'.debug_line'
.L285:
	.word	.L766-.L765
.L765:
	.half	3
	.word	.L768-.L767
.L767:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L768:
	.byte	5,17,7,0,5,2
	.word	.L188
	.byte	3,175,40,1,5,10,9
	.half	.L565-.L188
	.byte	3,5,1,5,7,3,1,1,5,3,9
	.half	.L769-.L565
	.byte	1,5,13,7,9
	.half	.L770-.L769
	.byte	3,2,1,5,12,9
	.half	.L771-.L770
	.byte	3,1,1,5,32,3,127,1,5,8,9
	.half	.L92-.L771
	.byte	3,4,1,5,13,7,9
	.half	.L772-.L92
	.byte	3,2,1,5,38,1,5,12,9
	.half	.L94-.L772
	.byte	3,12,1,5,5,3,123,1,5,49,9
	.half	.L773-.L94
	.byte	1,5,3,9
	.half	.L93-.L773
	.byte	3,10,1,5,28,7,9
	.half	.L774-.L93
	.byte	3,2,1,5,66,9
	.half	.L564-.L774
	.byte	1,5,102,1,5,3,9
	.half	.L96-.L564
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L287-.L96
	.byte	0,1,1
.L766:
	.sdecl	'.debug_ranges',debug,cluster('ComM_SetECUGroupClassification')
	.sect	'.debug_ranges'
.L286:
	.word	-1,.L188,0,.L287-.L188,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_CommunicationAllowed')
	.sect	'.debug_info'
.L288:
	.word	259
	.half	3
	.word	.L289
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L291,.L290
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_CommunicationAllowed',0,1,147,41,23,1,1,1
	.word	.L190,.L473,.L189
	.byte	4
	.byte	'Channel',0,1,147,41,67
	.word	.L395,.L474
	.byte	4
	.byte	'Allowed',0,1,147,41,84
	.word	.L395,.L475
	.byte	5
	.word	.L190,.L473
	.byte	6
	.byte	'errorId',0,1,150,41,9
	.word	.L395,.L476
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_CommunicationAllowed')
	.sect	'.debug_abbrev'
.L289:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_CommunicationAllowed')
	.sect	'.debug_line'
.L290:
	.word	.L776-.L775
.L775:
	.half	3
	.word	.L778-.L777
.L777:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L778:
	.byte	5,17,7,0,5,2
	.word	.L190
	.byte	3,149,41,1,5,7,3,5,1,5,3,9
	.half	.L779-.L190
	.byte	1,5,13,7,9
	.half	.L780-.L779
	.byte	3,2,1,5,32,1,5,8,9
	.half	.L98-.L780
	.byte	3,3,1,5,13,7,9
	.half	.L781-.L98
	.byte	3,6,1,5,38,1,5,5,9
	.half	.L100-.L781
	.byte	3,7,1,5,30,9
	.half	.L782-.L100
	.byte	1,5,3,9
	.half	.L99-.L782
	.byte	3,5,1,5,28,7,9
	.half	.L783-.L99
	.byte	3,2,1,5,66,9
	.half	.L566-.L783
	.byte	1,5,97,9
	.half	.L784-.L566
	.byte	1,5,1,7,9
	.half	.L102-.L784
	.byte	3,5,1,7,9
	.half	.L292-.L102
	.byte	0,1,1
.L776:
	.sdecl	'.debug_ranges',debug,cluster('ComM_CommunicationAllowed')
	.sect	'.debug_ranges'
.L291:
	.word	-1,.L190,0,.L292-.L190,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_EcuM_WakeUpIndication')
	.sect	'.debug_info'
.L293:
	.word	239
	.half	3
	.word	.L294
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L296,.L295
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_EcuM_WakeUpIndication',0,1,162,50,23,1,1,1
	.word	.L196,.L477,.L195
	.byte	4
	.byte	'Channel',0,1,162,50,68
	.word	.L395,.L478
	.byte	5
	.word	.L196,.L477
	.byte	6
	.byte	'errorId',0,1,173,50,9
	.word	.L395,.L479
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_EcuM_WakeUpIndication')
	.sect	'.debug_abbrev'
.L294:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_EcuM_WakeUpIndication')
	.sect	'.debug_line'
.L295:
	.word	.L786-.L785
.L785:
	.half	3
	.word	.L788-.L787
.L787:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L788:
	.byte	5,17,7,0,5,2
	.word	.L196
	.byte	3,172,50,1,5,7,3,5,1,5,3,9
	.half	.L789-.L196
	.byte	1,5,13,7,9
	.half	.L790-.L789
	.byte	3,2,1,5,32,1,5,8,9
	.half	.L115-.L790
	.byte	3,3,1,5,13,7,9
	.half	.L791-.L115
	.byte	3,6,1,5,38,1,5,11,9
	.half	.L117-.L791
	.byte	3,11,1,5,29,9
	.half	.L792-.L117
	.byte	1,5,9,9
	.half	.L793-.L792
	.byte	3,2,1,5,7,9
	.half	.L794-.L793
	.byte	3,126,1,5,9,3,2,1,5,47,9
	.half	.L795-.L794
	.byte	1,5,3,3,117,1,9
	.half	.L116-.L795
	.byte	3,210,0,1,5,28,7,9
	.half	.L796-.L116
	.byte	3,2,1,5,66,9
	.half	.L574-.L796
	.byte	1,5,102,9
	.half	.L797-.L574
	.byte	1,5,1,7,9
	.half	.L120-.L797
	.byte	3,8,1,7,9
	.half	.L297-.L120
	.byte	0,1,1
.L786:
	.sdecl	'.debug_ranges',debug,cluster('ComM_EcuM_WakeUpIndication')
	.sect	'.debug_ranges'
.L296:
	.word	-1,.L196,0,.L297-.L196,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_BusSM_ModeIndication')
	.sect	'.debug_info'
.L298:
	.word	259
	.half	3
	.word	.L299
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L301,.L300
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_BusSM_ModeIndication',0,1,148,52,23,1,1,1
	.word	.L198,.L480,.L197
	.byte	4
	.byte	'Channel',0,1,148,52,67
	.word	.L395,.L481
	.byte	4
	.byte	'ComMode',0,1,148,52,123
	.word	.L426,.L482
	.byte	5
	.word	.L198,.L480
	.byte	6
	.byte	'errorId',0,1,151,52,9
	.word	.L395,.L483
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_BusSM_ModeIndication')
	.sect	'.debug_abbrev'
.L299:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_BusSM_ModeIndication')
	.sect	'.debug_line'
.L300:
	.word	.L799-.L798
.L798:
	.half	3
	.word	.L801-.L800
.L800:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L801:
	.byte	5,17,7,0,5,2
	.word	.L198
	.byte	3,150,52,1,5,7,3,5,1,5,3,9
	.half	.L802-.L198
	.byte	1,5,13,7,9
	.half	.L803-.L802
	.byte	3,2,1,5,32,1,5,8,9
	.half	.L121-.L803
	.byte	3,3,1,7,9
	.half	.L804-.L121
	.byte	3,9,1,5,12,7,9
	.half	.L805-.L804
	.byte	3,4,1,5,8,9
	.half	.L806-.L805
	.byte	1,5,13,7,9
	.half	.L123-.L806
	.byte	3,2,1,5,38,1,5,9,9
	.half	.L125-.L123
	.byte	3,6,1,5,24,9
	.half	.L807-.L125
	.byte	1,5,5,9
	.half	.L808-.L807
	.byte	1,5,32,7,9
	.half	.L809-.L808
	.byte	3,4,1,5,38,9
	.half	.L810-.L809
	.byte	3,1,1,5,3,9
	.half	.L122-.L810
	.byte	3,62,1,5,28,7,9
	.half	.L811-.L122
	.byte	3,2,1,5,66,9
	.half	.L812-.L811
	.byte	1,5,100,9
	.half	.L813-.L812
	.byte	1,5,1,9
	.half	.L128-.L813
	.byte	3,5,1,7,9
	.half	.L302-.L128
	.byte	0,1,1
.L799:
	.sdecl	'.debug_ranges',debug,cluster('ComM_BusSM_ModeIndication')
	.sect	'.debug_ranges'
.L301:
	.word	-1,.L198,0,.L302-.L198,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_TF_NoCom_NetReq')
	.sect	'.debug_info'
.L303:
	.word	210
	.half	3
	.word	.L304
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L306,.L305
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_TF_NoCom_NetReq',0,1,175,24,34,1,1
	.word	.L136,.L484,.L135
	.byte	4
	.byte	'Channel',0,1,175,24,73
	.word	.L395,.L485
	.byte	5
	.word	.L136,.L484
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_TF_NoCom_NetReq')
	.sect	'.debug_abbrev'
.L304:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_TF_NoCom_NetReq')
	.sect	'.debug_line'
.L305:
	.word	.L815-.L814
.L814:
	.half	3
	.word	.L817-.L816
.L816:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L817:
	.byte	5,34,7,0,5,2
	.word	.L136
	.byte	3,174,24,1,5,35,9
	.half	.L531-.L136
	.byte	3,5,1,5,5,9
	.half	.L530-.L531
	.byte	3,8,1,5,23,9
	.half	.L818-.L530
	.byte	1,5,35,9
	.half	.L819-.L818
	.byte	1,5,33,9
	.half	.L532-.L819
	.byte	1,5,1,9
	.half	.L820-.L532
	.byte	3,38,1,7,9
	.half	.L307-.L820
	.byte	0,1,1
.L815:
	.sdecl	'.debug_ranges',debug,cluster('ComM_TF_NoCom_NetReq')
	.sect	'.debug_ranges'
.L306:
	.word	-1,.L136,0,.L307-.L136,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_TF_NoCom_FullReadySleep')
	.sect	'.debug_info'
.L308:
	.word	218
	.half	3
	.word	.L309
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L311,.L310
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_TF_NoCom_FullReadySleep',0,1,236,24,34,1,1
	.word	.L138,.L486,.L137
	.byte	4
	.byte	'Channel',0,1,236,24,81
	.word	.L395,.L487
	.byte	5
	.word	.L138,.L486
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_TF_NoCom_FullReadySleep')
	.sect	'.debug_abbrev'
.L309:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_TF_NoCom_FullReadySleep')
	.sect	'.debug_line'
.L310:
	.word	.L822-.L821
.L821:
	.half	3
	.word	.L824-.L823
.L823:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L824:
	.byte	5,1,7,0,5,2
	.word	.L138
	.byte	3,254,24,1,7,9
	.half	.L312-.L138
	.byte	0,1,1
.L822:
	.sdecl	'.debug_ranges',debug,cluster('ComM_TF_NoCom_FullReadySleep')
	.sect	'.debug_ranges'
.L311:
	.word	-1,.L138,0,.L312-.L138,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_TF_Full_SiCom')
	.sect	'.debug_info'
.L313:
	.word	208
	.half	3
	.word	.L314
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L316,.L315
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_TF_Full_SiCom',0,1,139,25,34,1,1
	.word	.L140,.L488,.L139
	.byte	4
	.byte	'Channel',0,1,139,25,72
	.word	.L395,.L489
	.byte	5
	.word	.L140,.L488
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_TF_Full_SiCom')
	.sect	'.debug_abbrev'
.L314:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_TF_Full_SiCom')
	.sect	'.debug_line'
.L315:
	.word	.L826-.L825
.L825:
	.half	3
	.word	.L828-.L827
.L827:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L828:
	.byte	5,1,7,0,5,2
	.word	.L140
	.byte	3,162,25,1,7,9
	.half	.L317-.L140
	.byte	0,1,1
.L826:
	.sdecl	'.debug_ranges',debug,cluster('ComM_TF_Full_SiCom')
	.sect	'.debug_ranges'
.L316:
	.word	-1,.L140,0,.L317-.L140,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_TF_ReadyS_NetReq')
	.sect	'.debug_info'
.L318:
	.word	211
	.half	3
	.word	.L319
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L321,.L320
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_TF_ReadyS_NetReq',0,1,175,25,34,1,1
	.word	.L142,.L490,.L141
	.byte	4
	.byte	'Channel',0,1,175,25,74
	.word	.L395,.L491
	.byte	5
	.word	.L142,.L490
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_TF_ReadyS_NetReq')
	.sect	'.debug_abbrev'
.L319:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_TF_ReadyS_NetReq')
	.sect	'.debug_line'
.L320:
	.word	.L830-.L829
.L829:
	.half	3
	.word	.L832-.L831
.L831:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L832:
	.byte	5,1,7,0,5,2
	.word	.L142
	.byte	3,209,25,1,7,9
	.half	.L322-.L142
	.byte	0,1,1
.L830:
	.sdecl	'.debug_ranges',debug,cluster('ComM_TF_ReadyS_NetReq')
	.sect	'.debug_ranges'
.L321:
	.word	-1,.L142,0,.L322-.L142,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_TF_SiCom_NoCom')
	.sect	'.debug_info'
.L323:
	.word	209
	.half	3
	.word	.L324
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L326,.L325
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_TF_SiCom_NoCom',0,1,223,25,34,1,1
	.word	.L144,.L492,.L143
	.byte	4
	.byte	'Channel',0,1,223,25,72
	.word	.L395,.L493
	.byte	5
	.word	.L144,.L492
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_TF_SiCom_NoCom')
	.sect	'.debug_abbrev'
.L324:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_TF_SiCom_NoCom')
	.sect	'.debug_line'
.L325:
	.word	.L834-.L833
.L833:
	.half	3
	.word	.L836-.L835
.L835:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L836:
	.byte	5,3,7,0,5,2
	.word	.L144
	.byte	3,233,25,1,5,21,9
	.half	.L837-.L144
	.byte	1,5,33,9
	.half	.L838-.L837
	.byte	1,5,31,9
	.half	.L839-.L838
	.byte	1,5,1,9
	.half	.L840-.L839
	.byte	3,63,1,7,9
	.half	.L327-.L840
	.byte	0,1,1
.L834:
	.sdecl	'.debug_ranges',debug,cluster('ComM_TF_SiCom_NoCom')
	.sect	'.debug_ranges'
.L326:
	.word	-1,.L144,0,.L327-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_TF_NetReq_ReadyS')
	.sect	'.debug_info'
.L328:
	.word	211
	.half	3
	.word	.L329
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L331,.L330
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_TF_NetReq_ReadyS',0,1,181,26,34,1,1
	.word	.L146,.L494,.L145
	.byte	4
	.byte	'Channel',0,1,181,26,74
	.word	.L395,.L495
	.byte	5
	.word	.L146,.L494
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_TF_NetReq_ReadyS')
	.sect	'.debug_abbrev'
.L329:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_TF_NetReq_ReadyS')
	.sect	'.debug_line'
.L330:
	.word	.L842-.L841
.L841:
	.half	3
	.word	.L844-.L843
.L843:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L844:
	.byte	5,1,7,0,5,2
	.word	.L146
	.byte	3,222,26,1,7,9
	.half	.L332-.L146
	.byte	0,1,1
.L842:
	.sdecl	'.debug_ranges',debug,cluster('ComM_TF_NetReq_ReadyS')
	.sect	'.debug_ranges'
.L331:
	.word	-1,.L146,0,.L332-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_TF_No_Action')
	.sect	'.debug_info'
.L333:
	.word	207
	.half	3
	.word	.L334
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L336,.L335
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_TF_No_Action',0,1,235,26,34,1,1
	.word	.L148,.L496,.L147
	.byte	4
	.byte	'Channel',0,1,235,26,70
	.word	.L395,.L497
	.byte	5
	.word	.L148,.L496
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_TF_No_Action')
	.sect	'.debug_abbrev'
.L334:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_TF_No_Action')
	.sect	'.debug_line'
.L335:
	.word	.L846-.L845
.L845:
	.half	3
	.word	.L848-.L847
.L847:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L848:
	.byte	5,1,7,0,5,2
	.word	.L148
	.byte	3,241,26,1,7,9
	.half	.L337-.L148
	.byte	0,1,1
.L846:
	.sdecl	'.debug_ranges',debug,cluster('ComM_TF_No_Action')
	.sect	'.debug_ranges'
.L336:
	.word	-1,.L148,0,.L337-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_TF_No_Transition')
	.sect	'.debug_info'
.L338:
	.word	207
	.half	3
	.word	.L339
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L341,.L340
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_TF_No_Transition',0,1,252,26,34,1,1
	.word	.L150,.L498,.L149
	.byte	4
	.byte	'Channel',0,1,252,26,74
	.word	.L395,.L499
	.byte	5
	.word	.L500
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_TF_No_Transition')
	.sect	'.debug_abbrev'
.L339:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_TF_No_Transition')
	.sect	'.debug_line'
.L340:
	.word	.L850-.L849
.L849:
	.half	3
	.word	.L852-.L851
.L851:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L852:
	.byte	5,26,7,0,5,2
	.word	.L150
	.byte	3,255,26,1,5,64,9
	.half	.L853-.L150
	.byte	1,5,87,9
	.half	.L854-.L853
	.byte	1,5,1,9
	.half	.L342-.L854
	.byte	3,4,0,1,1
.L850:
	.sdecl	'.debug_ranges',debug,cluster('ComM_TF_No_Transition')
	.sect	'.debug_ranges'
.L341:
	.word	-1,.L150,0,.L342-.L150,0,0
.L500:
	.word	-1,.L150,0,.L498-.L150,-1,.L152,0,.L372-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_CalculateHighestComMode')
	.sect	'.debug_info'
.L343:
	.word	281
	.half	3
	.word	.L344
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L346,.L345
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_CalculateHighestComMode',0,1,250,15,46
	.word	.L395
	.byte	1,1
	.word	.L130,.L501,.L129
	.byte	4
	.byte	'channel',0,1,250,15,94
	.word	.L395,.L502
	.byte	4
	.byte	'internalRequest',0,1,250,15,112
	.word	.L503,.L504
	.byte	5
	.word	.L130,.L501
	.byte	6
	.byte	'lHighestRequest',0,1,253,15,18
	.word	.L395,.L505
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_CalculateHighestComMode')
	.sect	'.debug_abbrev'
.L344:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_CalculateHighestComMode')
	.sect	'.debug_line'
.L345:
	.word	.L856-.L855
.L855:
	.half	3
	.word	.L858-.L857
.L857:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L858:
	.byte	5,46,7,0,5,2
	.word	.L130
	.byte	3,249,15,1,5,22,9
	.half	.L524-.L130
	.byte	3,4,1,5,20,1,5,3,9
	.half	.L859-.L524
	.byte	3,3,1,5,19,9
	.half	.L523-.L859
	.byte	3,7,1,5,40,9
	.half	.L526-.L523
	.byte	3,11,1,5,7,9
	.half	.L860-.L526
	.byte	1,5,25,7,9
	.half	.L861-.L860
	.byte	3,2,1,5,28,9
	.half	.L862-.L861
	.byte	3,1,1,5,26,1,5,7,9
	.half	.L2-.L862
	.byte	3,208,0,1,5,10,7,9
	.half	.L863-.L2
	.byte	3,2,1,5,28,9
	.half	.L525-.L863
	.byte	1,5,38,9
	.half	.L864-.L525
	.byte	1,5,23,7,9
	.half	.L3-.L864
	.byte	3,5,1,5,41,9
	.half	.L865-.L3
	.byte	1,5,3,9
	.half	.L4-.L865
	.byte	3,5,1,9
	.half	.L866-.L4
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L347-.L866
	.byte	0,1,1
.L856:
	.sdecl	'.debug_ranges',debug,cluster('ComM_CalculateHighestComMode')
	.sect	'.debug_ranges'
.L346:
	.word	-1,.L130,0,.L347-.L130,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_ChannelStateTransition')
	.sect	'.debug_info'
.L348:
	.word	319
	.half	3
	.word	.L349
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L351,.L350
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_ChannelStateTransition',0,1,128,44,41,1,1
	.word	.L194,.L506,.L193
	.byte	4
	.byte	'channel',0,1,128,44,87
	.word	.L395,.L507
	.byte	4
	.byte	'highestComModeReq',0,1,128,44,111
	.word	.L395,.L508
	.byte	5
	.word	.L194,.L506
	.byte	6
	.byte	'calculatedComModeReq',0,1,130,44,19
	.word	.L395,.L509
	.byte	6
	.byte	'localhighestComModeReq',0,1,131,44,19
	.word	.L395,.L510
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_ChannelStateTransition')
	.sect	'.debug_abbrev'
.L349:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_ChannelStateTransition')
	.sect	'.debug_line'
.L350:
	.word	.L868-.L867
.L867:
	.half	3
	.word	.L870-.L869
.L869:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L870:
	.byte	5,42,7,0,5,2
	.word	.L194
	.byte	3,130,44,1,5,30,3,22,1,5,75,9
	.half	.L871-.L194
	.byte	1,5,93,9
	.half	.L872-.L871
	.byte	1,5,15,9
	.half	.L873-.L872
	.byte	3,8,1,5,50,9
	.half	.L107-.L873
	.byte	3,120,1,5,74,9
	.half	.L874-.L107
	.byte	1,5,11,9
	.half	.L573-.L874
	.byte	3,1,1,5,94,7,9
	.half	.L875-.L573
	.byte	1,5,13,7,9
	.half	.L876-.L875
	.byte	3,2,1,5,99,7,9
	.half	.L877-.L876
	.byte	1,5,30,7,9
	.half	.L878-.L877
	.byte	3,5,1,5,36,9
	.half	.L879-.L878
	.byte	3,2,1,5,9,9
	.half	.L110-.L879
	.byte	3,4,1,5,34,7,9
	.half	.L880-.L110
	.byte	3,2,1,5,11,1,5,34,9
	.half	.L881-.L880
	.byte	1,5,56,9
	.half	.L882-.L881
	.byte	1,5,86,9
	.half	.L883-.L882
	.byte	1,5,41,9
	.half	.L884-.L883
	.byte	3,16,1,5,7,9
	.half	.L885-.L884
	.byte	3,4,1,5,9,3,106,1,5,32,9
	.half	.L108-.L885
	.byte	3,24,1,5,66,9
	.half	.L113-.L108
	.byte	3,3,1,5,1,7,9
	.half	.L886-.L113
	.byte	3,1,1,7,9
	.half	.L352-.L886
	.byte	0,1,1
.L868:
	.sdecl	'.debug_ranges',debug,cluster('ComM_ChannelStateTransition')
	.sect	'.debug_ranges'
.L351:
	.word	-1,.L194,0,.L352-.L194,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_IsUserRequestingChannel')
	.sect	'.debug_info'
.L353:
	.word	222
	.half	3
	.word	.L354
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L356,.L355
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_IsUserRequestingChannel',0,1,185,17,44
	.word	.L395
	.byte	1,1
	.word	.L132,.L511,.L131
	.byte	4
	.byte	'channel',0,1,185,17,91
	.word	.L395,.L512
	.byte	5
	.word	.L132,.L511
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_IsUserRequestingChannel')
	.sect	'.debug_abbrev'
.L354:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_IsUserRequestingChannel')
	.sect	'.debug_line'
.L355:
	.word	.L888-.L887
.L887:
	.half	3
	.word	.L890-.L889
.L889:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L890:
	.byte	5,10,7,0,5,2
	.word	.L132
	.byte	3,206,17,1,5,54,9
	.half	.L891-.L132
	.byte	1,5,1,3,40,1,7,9
	.half	.L357-.L891
	.byte	0,1,1
.L888:
	.sdecl	'.debug_ranges',debug,cluster('ComM_IsUserRequestingChannel')
	.sect	'.debug_ranges'
.L356:
	.word	-1,.L132,0,.L357-.L132,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_ChannelIsRequestPending')
	.sect	'.debug_info'
.L358:
	.word	286
	.half	3
	.word	.L359
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L361,.L360
	.byte	2
	.word	.L199
	.byte	3
	.byte	'ComM_ChannelIsRequestPending',0,1,134,18,44
	.word	.L395
	.byte	1,1
	.word	.L134,.L513,.L133
	.byte	4
	.byte	'channel',0,1,134,18,92
	.word	.L395,.L514
	.byte	5
	.word	.L134,.L513
	.byte	6
	.byte	'isRequestPending',0,1,137,18,11
	.word	.L395,.L515
	.byte	6
	.byte	'userReqFullComIndex',0,1,139,18,31
	.word	.L395,.L516
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_ChannelIsRequestPending')
	.sect	'.debug_abbrev'
.L359:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ComM_ChannelIsRequestPending')
	.sect	'.debug_line'
.L360:
	.word	.L893-.L892
.L892:
	.half	3
	.word	.L895-.L894
.L894:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L895:
	.byte	5,7,7,0,5,2
	.word	.L134
	.byte	3,149,18,1,5,25,9
	.half	.L896-.L134
	.byte	1,5,28,9
	.half	.L897-.L896
	.byte	3,115,1,5,3,9
	.half	.L527-.L897
	.byte	3,13,1,5,32,7,9
	.half	.L898-.L527
	.byte	3,21,1,5,13,3,4,1,5,82,9
	.half	.L528-.L898
	.byte	3,125,1,5,13,9
	.half	.L9-.L528
	.byte	3,3,1,5,9,9
	.half	.L529-.L9
	.byte	1,5,28,7,9
	.half	.L7-.L529
	.byte	3,2,1,5,1,3,48,1,5,31,7,9
	.half	.L10-.L7
	.byte	3,76,1,5,82,9
	.half	.L8-.L10
	.byte	3,127,1,5,1,7,9
	.half	.L899-.L8
	.byte	3,53,1,7,9
	.half	.L362-.L899
	.byte	0,1,1
.L893:
	.sdecl	'.debug_ranges',debug,cluster('ComM_ChannelIsRequestPending')
	.sect	'.debug_ranges'
.L361:
	.word	-1,.L134,0,.L362-.L134,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_1')
	.sect	'.debug_info'
.L363:
	.word	168
	.half	3
	.word	.L364
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L366,.L365
	.byte	2
	.word	.L199
	.byte	3
	.byte	'.cocofun_1',0,1,151,33,33,1
	.word	.L166,.L367,.L165
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_1')
	.sect	'.debug_abbrev'
.L364:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_1')
	.sect	'.debug_line'
.L365:
	.word	.L901-.L900
.L900:
	.half	3
	.word	.L903-.L902
.L902:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L903:
	.byte	5,15,7,0,5,2
	.word	.L166
	.byte	3,169,33,1,9
	.half	.L367-.L166
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,219,33,1,5,15,9
	.half	.L904-.L166
	.byte	3,78,1,7,9
	.half	.L367-.L904
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,236,34,1,5,15,9
	.half	.L904-.L166
	.byte	3,189,126,1,7,9
	.half	.L367-.L904
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,241,36,1,5,15,9
	.half	.L904-.L166
	.byte	3,184,124,1,7,9
	.half	.L367-.L904
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,178,37,1,5,15,9
	.half	.L904-.L166
	.byte	3,247,123,1,7,9
	.half	.L367-.L904
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,155,38,1,5,15,9
	.half	.L904-.L166
	.byte	3,142,123,1,7,9
	.half	.L367-.L904
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,134,39,1,5,15,9
	.half	.L904-.L166
	.byte	3,163,122,1,7,9
	.half	.L367-.L904
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,206,39,1,5,15,9
	.half	.L904-.L166
	.byte	3,219,121,1,7,9
	.half	.L367-.L904
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,129,40,1,5,15,9
	.half	.L904-.L166
	.byte	3,168,121,1,7,9
	.half	.L367-.L904
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,181,40,1,5,15,9
	.half	.L904-.L166
	.byte	3,244,120,1,7,9
	.half	.L367-.L904
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,154,41,1,5,15,9
	.half	.L904-.L166
	.byte	3,143,120,1,7,9
	.half	.L367-.L904
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,238,42,1,5,15,9
	.half	.L904-.L166
	.byte	3,187,118,1,7,9
	.half	.L367-.L904
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,177,50,1,5,15,9
	.half	.L904-.L166
	.byte	3,248,110,1,7,9
	.half	.L367-.L904
	.byte	0,1,1,5,7,0,5,2
	.word	.L166
	.byte	3,155,52,1,5,15,9
	.half	.L904-.L166
	.byte	3,142,109,1,7,9
	.half	.L367-.L904
	.byte	0,1,1
.L901:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_1')
	.sect	'.debug_ranges'
.L366:
	.word	-1,.L166,0,.L367-.L166,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L368:
	.word	168
	.half	3
	.word	.L369
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L371,.L370
	.byte	2
	.word	.L199
	.byte	3
	.byte	'.cocofun_2',0,1,252,26,34,1
	.word	.L152,.L372,.L151
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L369:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L370:
	.word	.L906-.L905
.L905:
	.half	3
	.word	.L908-.L907
.L907:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L908:
	.byte	5,26,7,0,5,2
	.word	.L152
	.byte	3,255,26,1,5,42,9
	.half	.L533-.L152
	.byte	1,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,241,30,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,142,124,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,131,33,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,252,121,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,177,33,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,206,121,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,197,34,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,186,120,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,150,35,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,233,119,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,129,36,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,254,118,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,208,36,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,175,118,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,145,37,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,238,117,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,240,37,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,143,117,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,221,38,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,162,116,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,172,39,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,211,115,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,229,39,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,154,115,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,151,40,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,232,114,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,208,40,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,175,114,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,179,41,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,204,113,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,231,43,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,152,111,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,146,51,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,237,103,1,7,9
	.half	.L372-.L533
	.byte	0,1,1,5,28,0,5,2
	.word	.L152
	.byte	3,250,52,1,5,44,9
	.half	.L533-.L152
	.byte	1,5,42,3,133,102,1,7,9
	.half	.L372-.L533
	.byte	0,1,1
.L906:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L371:
	.word	-1,.L152,0,.L372-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L373:
	.word	168
	.half	3
	.word	.L374
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L376,.L375
	.byte	2
	.word	.L199
	.byte	3
	.byte	'.cocofun_3',0,1,200,32,33,1
	.word	.L162,.L377,.L161
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L374:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L375:
	.word	.L910-.L909
.L909:
	.half	3
	.word	.L912-.L911
.L911:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0,0,0,0,0
.L912:
	.byte	5,17,7,0,5,2
	.word	.L162
	.byte	3,203,32,1,5,7,3,6,1,5,10,9
	.half	.L535-.L162
	.byte	3,127,1,5,7,3,1,1,5,33,9
	.half	.L536-.L535
	.byte	3,118,1,5,7,9
	.half	.L539-.L536
	.byte	3,10,1,7,9
	.half	.L377-.L539
	.byte	0,1,1,5,17,0,5,2
	.word	.L162
	.byte	3,179,35,1,5,7,3,7,1,5,10,9
	.half	.L535-.L162
	.byte	3,127,1,5,7,3,1,1,5,33,9
	.half	.L536-.L535
	.byte	3,117,1,5,7,9
	.half	.L539-.L536
	.byte	3,162,125,1,7,9
	.half	.L377-.L539
	.byte	0,1,1,5,17,0,5,2
	.word	.L162
	.byte	3,153,36,1,5,7,3,8,1,5,10,9
	.half	.L535-.L162
	.byte	3,127,1,5,7,3,1,1,5,33,9
	.half	.L536-.L535
	.byte	3,116,1,5,7,9
	.half	.L539-.L536
	.byte	3,188,124,1,7,9
	.half	.L377-.L539
	.byte	0,1,1
.L910:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L376:
	.word	-1,.L162,0,.L377-.L162,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_Inhibition')
	.sect	'.debug_info'
.L378:
	.word	163
	.half	3
	.word	.L379
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L199
	.byte	3
	.byte	'ComM_Inhibition',0,6,201,3,59
	.word	.L517
	.byte	1,5,3
	.word	ComM_Inhibition
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_Inhibition')
	.sect	'.debug_abbrev'
.L379:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_TransitionTable')
	.sect	'.debug_info'
.L380:
	.word	167
	.half	3
	.word	.L381
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L199
	.byte	3
	.byte	'ComM_TransitionTable',0,6,201,2,46
	.word	.L518
	.byte	5,3
	.word	ComM_TransitionTable
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_TransitionTable')
	.sect	'.debug_abbrev'
.L381:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_TransitionFctTable')
	.sect	'.debug_info'
.L382:
	.word	170
	.half	3
	.word	.L383
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L199
	.byte	3
	.byte	'ComM_TransitionFctTable',0,6,230,2,59
	.word	.L519
	.byte	5,3
	.word	ComM_TransitionFctTable
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_TransitionFctTable')
	.sect	'.debug_abbrev'
.L383:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_InitStatus')
	.sect	'.debug_info'
.L384:
	.word	162
	.half	3
	.word	.L385
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L199
	.byte	3
	.byte	'ComM_InitStatus',0,6,137,3,59
	.word	.L395
	.byte	5,3
	.word	ComM_InitStatus
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_InitStatus')
	.sect	'.debug_abbrev'
.L385:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_BusSmState')
	.sect	'.debug_info'
.L386:
	.word	162
	.half	3
	.word	.L387
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L199
	.byte	3
	.byte	'ComM_BusSmState',0,6,147,3,59
	.word	.L520
	.byte	5,3
	.word	ComM_BusSmState
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_BusSmState')
	.sect	'.debug_abbrev'
.L387:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_ComAllowed')
	.sect	'.debug_info'
.L388:
	.word	162
	.half	3
	.word	.L389
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L199
	.byte	3
	.byte	'ComM_ComAllowed',0,6,171,3,59
	.word	.L521
	.byte	5,3
	.word	ComM_ComAllowed
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_ComAllowed')
	.sect	'.debug_abbrev'
.L389:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_ActiveComMode')
	.sect	'.debug_info'
.L390:
	.word	165
	.half	3
	.word	.L391
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L199
	.byte	3
	.byte	'ComM_ActiveComMode',0,6,174,3,59
	.word	.L522
	.byte	5,3
	.word	ComM_ActiveComMode
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_ActiveComMode')
	.sect	'.debug_abbrev'
.L391:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('ComM_BusComModeReq')
	.sect	'.debug_info'
.L392:
	.word	165
	.half	3
	.word	.L393
	.byte	4,1
	.byte	'..\\component\\ComM\\Implementation\\ComM.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L199
	.byte	3
	.byte	'ComM_BusComModeReq',0,6,176,3,59
	.word	.L522
	.byte	5,3
	.word	ComM_BusComModeReq
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ComM_BusComModeReq')
	.sect	'.debug_abbrev'
.L393:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_1')
	.sect	'.debug_loc'
.L165:
	.word	-1,.L166,0,.L367-.L166
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L152,0,.L372-.L152
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L161:
	.word	-1,.L162,0,.L377-.L162
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_BusSM_ModeIndication')
	.sect	'.debug_loc'
.L481:
	.word	-1,.L198,.L543-.L198,.L367-.L198
	.half	1
	.byte	84
	.word	0,.L122-.L198
	.half	1
	.byte	84
	.word	0,0
.L197:
	.word	-1,.L198,0,.L480-.L198
	.half	2
	.byte	138,0
	.word	0,0
.L482:
	.word	-1,.L198,.L543-.L198,.L367-.L198
	.half	1
	.byte	100
	.word	0,.L122-.L198
	.half	1
	.byte	100
	.word	0,0
.L483:
	.word	-1,.L198,.L543-.L198,.L367-.L198
	.half	1
	.byte	88
	.word	.L152-.L198,.L372-.L198
	.half	1
	.byte	88
	.word	0,.L480-.L198
	.half	1
	.byte	88
	.word	.L575-.L198,.L128-.L198
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_CalculateHighestComMode')
	.sect	'.debug_loc'
.L129:
	.word	-1,.L130,0,.L501-.L130
	.half	2
	.byte	138,0
	.word	0,0
.L502:
	.word	-1,.L130,0,.L523-.L130
	.half	1
	.byte	84
	.word	0,0
.L504:
	.word	-1,.L130,0,.L523-.L130
	.half	1
	.byte	100
	.word	.L524-.L130,.L525-.L130
	.half	1
	.byte	111
	.word	0,0
.L505:
	.word	-1,.L130,.L526-.L130,.L501-.L130
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_ChannelIsRequestPending')
	.sect	'.debug_loc'
.L133:
	.word	-1,.L134,0,.L513-.L134
	.half	2
	.byte	138,0
	.word	0,0
.L514:
	.word	-1,.L134,0,.L513-.L134
	.half	1
	.byte	84
	.word	0,0
.L515:
	.word	-1,.L134,.L527-.L134,.L513-.L134
	.half	1
	.byte	82
	.word	0,0
.L516:
	.word	-1,.L134,.L528-.L134,.L529-.L134
	.half	1
	.byte	95
	.word	.L8-.L134,.L513-.L134
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_ChannelStateTransition')
	.sect	'.debug_loc'
.L193:
	.word	-1,.L194,0,.L506-.L194
	.half	2
	.byte	138,0
	.word	0,0
.L509:
	.word	-1,.L194,.L573-.L194,.L506-.L194
	.half	1
	.byte	89
	.word	0,0
.L507:
	.word	-1,.L194,0,.L107-.L194
	.half	1
	.byte	84
	.word	0,0
.L508:
	.word	-1,.L194,0,.L107-.L194
	.half	1
	.byte	85
	.word	0,0
.L510:
	.word	-1,.L194,.L572-.L194,.L506-.L194
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_CommunicationAllowed')
	.sect	'.debug_loc'
.L475:
	.word	-1,.L190,.L543-.L190,.L367-.L190
	.half	1
	.byte	85
	.word	0,.L566-.L190
	.half	1
	.byte	85
	.word	.L152-.L190,.L372-.L190
	.half	1
	.byte	85
	.word	.L102-.L190,.L473-.L190
	.half	1
	.byte	85
	.word	0,0
.L474:
	.word	-1,.L190,.L543-.L190,.L367-.L190
	.half	1
	.byte	84
	.word	0,.L566-.L190
	.half	1
	.byte	84
	.word	.L152-.L190,.L533-.L190
	.half	1
	.byte	84
	.word	.L102-.L190,.L473-.L190
	.half	1
	.byte	84
	.word	0,0
.L189:
	.word	-1,.L190,0,.L473-.L190
	.half	2
	.byte	138,0
	.word	0,0
.L476:
	.word	-1,.L190,.L543-.L190,.L367-.L190
	.half	1
	.byte	87
	.word	.L152-.L190,.L372-.L190
	.half	1
	.byte	87
	.word	0,.L473-.L190
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_DeInit')
	.sect	'.debug_loc'
.L155:
	.word	-1,.L156,0,.L403-.L156
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_EcuM_WakeUpIndication')
	.sect	'.debug_loc'
.L478:
	.word	-1,.L196,.L543-.L196,.L367-.L196
	.half	1
	.byte	84
	.word	0,.L574-.L196
	.half	1
	.byte	84
	.word	.L152-.L196,.L533-.L196
	.half	1
	.byte	84
	.word	.L120-.L196,.L477-.L196
	.half	1
	.byte	84
	.word	0,0
.L195:
	.word	-1,.L196,0,.L477-.L196
	.half	2
	.byte	138,0
	.word	0,0
.L479:
	.word	-1,.L196,.L543-.L196,.L367-.L196
	.half	1
	.byte	87
	.word	.L152-.L196,.L372-.L196
	.half	1
	.byte	87
	.word	0,.L477-.L196
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_GetCurrentComMode')
	.sect	'.debug_loc'
.L173:
	.word	-1,.L174,0,.L552-.L174
	.half	2
	.byte	138,0
	.word	.L552-.L174,.L435-.L174
	.half	2
	.byte	138,8
	.word	.L435-.L174,.L435-.L174
	.half	2
	.byte	138,0
	.word	0,0
.L437:
	.word	-1,.L174,.L162-.L174,.L377-.L174
	.half	1
	.byte	100
	.word	0,.L553-.L174
	.half	1
	.byte	100
	.word	.L539-.L174,.L377-.L174
	.half	1
	.byte	111
	.word	.L152-.L174,.L372-.L174
	.half	1
	.byte	111
	.word	.L554-.L174,.L435-.L174
	.half	1
	.byte	111
	.word	0,0
.L436:
	.word	-1,.L174,.L162-.L174,.L377-.L174
	.half	1
	.byte	84
	.word	0,.L553-.L174
	.half	1
	.byte	84
	.word	0,0
.L439:
	.word	-1,.L174,.L162-.L174,.L377-.L174
	.half	1
	.byte	88
	.word	.L152-.L174,.L372-.L174
	.half	1
	.byte	88
	.word	.L554-.L174,.L435-.L174
	.half	1
	.byte	88
	.word	0,0
.L438:
	.word	-1,.L174,.L535-.L174,.L377-.L174
	.half	1
	.byte	89
	.word	.L152-.L174,.L372-.L174
	.half	1
	.byte	89
	.word	.L554-.L174,.L435-.L174
	.half	1
	.byte	89
	.word	0,0
.L440:
	.word	-1,.L174,.L162-.L174,.L377-.L174
	.half	2
	.byte	145,120
	.word	.L152-.L174,.L372-.L174
	.half	2
	.byte	145,120
	.word	0,.L435-.L174
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_GetInhibitionStatus')
	.sect	'.debug_loc'
.L442:
	.word	-1,.L176,.L543-.L176,.L367-.L176
	.half	1
	.byte	84
	.word	0,.L555-.L176
	.half	1
	.byte	84
	.word	.L152-.L176,.L533-.L176
	.half	1
	.byte	84
	.word	0,0
.L175:
	.word	-1,.L176,0,.L441-.L176
	.half	2
	.byte	138,0
	.word	0,0
.L444:
	.word	-1,.L176,.L543-.L176,.L367-.L176
	.half	1
	.byte	100
	.word	.L152-.L176,.L372-.L176
	.half	1
	.byte	100
	.word	0,.L66-.L176
	.half	1
	.byte	100
	.word	0,0
.L446:
	.word	-1,.L176,.L543-.L176,.L367-.L176
	.half	1
	.byte	87
	.word	.L152-.L176,.L372-.L176
	.half	1
	.byte	87
	.word	.L556-.L176,.L66-.L176
	.half	1
	.byte	87
	.word	0,0
.L445:
	.word	-1,.L176,.L543-.L176,.L367-.L176
	.half	1
	.byte	88
	.word	.L152-.L176,.L372-.L176
	.half	1
	.byte	88
	.word	.L556-.L176,.L441-.L176
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_GetMaxComMode')
	.sect	'.debug_loc'
.L169:
	.word	-1,.L170,0,.L424-.L170
	.half	2
	.byte	138,0
	.word	0,0
.L427:
	.word	-1,.L170,.L543-.L170,.L367-.L170
	.half	1
	.byte	100
	.word	.L152-.L170,.L372-.L170
	.half	1
	.byte	100
	.word	0,.L45-.L170
	.half	1
	.byte	100
	.word	0,0
.L425:
	.word	-1,.L170,.L543-.L170,.L367-.L170
	.half	1
	.byte	84
	.word	0,.L548-.L170
	.half	1
	.byte	84
	.word	.L152-.L170,.L533-.L170
	.half	1
	.byte	84
	.word	0,0
.L429:
	.word	-1,.L170,.L543-.L170,.L367-.L170
	.half	1
	.byte	87
	.word	.L152-.L170,.L372-.L170
	.half	1
	.byte	87
	.word	.L549-.L170,.L45-.L170
	.half	1
	.byte	87
	.word	0,0
.L428:
	.word	-1,.L170,.L543-.L170,.L367-.L170
	.half	1
	.byte	88
	.word	.L152-.L170,.L372-.L170
	.half	1
	.byte	88
	.word	.L549-.L170,.L424-.L170
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_GetRequestedComMode')
	.sect	'.debug_loc'
.L171:
	.word	-1,.L172,0,.L430-.L172
	.half	2
	.byte	138,0
	.word	0,0
.L432:
	.word	-1,.L172,.L162-.L172,.L377-.L172
	.half	1
	.byte	100
	.word	.L550-.L172,.L551-.L172
	.half	1
	.byte	100
	.word	.L539-.L172,.L377-.L172
	.half	1
	.byte	111
	.word	.L152-.L172,.L372-.L172
	.half	1
	.byte	111
	.word	.L550-.L172,.L430-.L172
	.half	1
	.byte	111
	.word	0,0
.L431:
	.word	-1,.L172,.L162-.L172,.L377-.L172
	.half	1
	.byte	84
	.word	.L550-.L172,.L551-.L172
	.half	1
	.byte	84
	.word	0,0
.L434:
	.word	-1,.L172,.L162-.L172,.L377-.L172
	.half	1
	.byte	88
	.word	.L152-.L172,.L372-.L172
	.half	1
	.byte	88
	.word	.L550-.L172,.L430-.L172
	.half	1
	.byte	88
	.word	0,0
.L433:
	.word	-1,.L172,.L535-.L172,.L377-.L172
	.half	1
	.byte	89
	.word	.L152-.L172,.L372-.L172
	.half	1
	.byte	89
	.word	.L550-.L172,.L430-.L172
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_GetState')
	.sect	'.debug_loc'
.L411:
	.word	-1,.L160,.L162-.L160,.L377-.L160
	.half	1
	.byte	84
	.word	.L537-.L160,.L538-.L160
	.half	1
	.byte	84
	.word	0,0
.L159:
	.word	-1,.L160,0,.L410-.L160
	.half	2
	.byte	138,0
	.word	0,0
.L413:
	.word	-1,.L160,.L162-.L160,.L377-.L160
	.half	1
	.byte	100
	.word	.L539-.L160,.L377-.L160
	.half	1
	.byte	111
	.word	.L537-.L160,.L538-.L160
	.half	1
	.byte	100
	.word	.L152-.L160,.L372-.L160
	.half	1
	.byte	111
	.word	.L537-.L160,.L410-.L160
	.half	1
	.byte	111
	.word	0,0
.L416:
	.word	-1,.L160,.L535-.L160,.L377-.L160
	.half	1
	.byte	88
	.word	.L152-.L160,.L372-.L160
	.half	1
	.byte	88
	.word	.L537-.L160,.L410-.L160
	.half	1
	.byte	88
	.word	0,0
.L415:
	.word	-1,.L160,.L536-.L160,.L377-.L160
	.half	1
	.byte	89
	.word	.L152-.L160,.L372-.L160
	.half	1
	.byte	89
	.word	.L537-.L160,.L410-.L160
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_GetStatus')
	.sect	'.debug_loc'
.L163:
	.word	-1,.L164,0,.L404-.L164
	.half	2
	.byte	138,0
	.word	0,0
.L406:
	.word	-1,.L164,0,.L26-.L164
	.half	1
	.byte	100
	.word	.L166-.L164,.L367-.L164
	.half	1
	.byte	100
	.word	.L152-.L164,.L372-.L164
	.half	1
	.byte	100
	.word	.L542-.L164,.L28-.L164
	.half	1
	.byte	100
	.word	0,0
.L409:
	.word	-1,.L164,.L540-.L164,.L26-.L164
	.half	1
	.byte	87
	.word	.L166-.L164,.L367-.L164
	.half	1
	.byte	87
	.word	.L152-.L164,.L372-.L164
	.half	1
	.byte	87
	.word	.L542-.L164,.L28-.L164
	.half	1
	.byte	87
	.word	0,0
.L408:
	.word	-1,.L164,.L541-.L164,.L26-.L164
	.half	1
	.byte	95
	.word	.L166-.L164,.L367-.L164
	.half	1
	.byte	95
	.word	.L152-.L164,.L372-.L164
	.half	1
	.byte	95
	.word	.L27-.L164,.L404-.L164
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_Init')
	.sect	'.debug_loc'
.L153:
	.word	-1,.L154,0,.L400-.L154
	.half	2
	.byte	138,0
	.word	0,0
.L401:
	.word	-1,.L154,.L152-.L154,.L372-.L154
	.half	1
	.byte	87
	.word	.L534-.L154,.L400-.L154
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_InitMemory')
	.sect	'.debug_loc'
.L157:
	.word	-1,.L158,0,.L402-.L158
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_IsUserRequestingChannel')
	.sect	'.debug_loc'
.L131:
	.word	-1,.L132,0,.L511-.L132
	.half	2
	.byte	138,0
	.word	0,0
.L512:
	.word	-1,.L132,0,.L511-.L132
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_LimitChannelToNoComMode')
	.sect	'.debug_loc'
.L453:
	.word	-1,.L180,.L543-.L180,.L367-.L180
	.half	1
	.byte	84
	.word	0,.L560-.L180
	.half	1
	.byte	84
	.word	.L152-.L180,.L533-.L180
	.half	1
	.byte	84
	.word	0,0
.L179:
	.word	-1,.L180,0,.L452-.L180
	.half	2
	.byte	138,0
	.word	0,0
.L454:
	.word	-1,.L180,.L543-.L180,.L367-.L180
	.half	1
	.byte	85
	.word	0,.L560-.L180
	.half	1
	.byte	85
	.word	.L152-.L180,.L372-.L180
	.half	1
	.byte	85
	.word	0,0
.L456:
	.word	-1,.L180,.L543-.L180,.L367-.L180
	.half	1
	.byte	87
	.word	.L152-.L180,.L372-.L180
	.half	1
	.byte	87
	.word	.L561-.L180,.L76-.L180
	.half	1
	.byte	87
	.word	0,0
.L455:
	.word	-1,.L180,.L543-.L180,.L367-.L180
	.half	1
	.byte	88
	.word	.L152-.L180,.L372-.L180
	.half	1
	.byte	88
	.word	.L561-.L180,.L452-.L180
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_LimitECUToNoComMode')
	.sect	'.debug_loc'
.L181:
	.word	-1,.L182,0,.L457-.L182
	.half	2
	.byte	138,0
	.word	0,0
.L458:
	.word	-1,.L182,.L543-.L182,.L367-.L182
	.half	1
	.byte	84
	.word	0,.L562-.L182
	.half	1
	.byte	84
	.word	.L152-.L182,.L533-.L182
	.half	1
	.byte	84
	.word	0,0
.L460:
	.word	-1,.L182,.L543-.L182,.L367-.L182
	.half	5
	.byte	144,32,157,32,0
	.word	.L152-.L182,.L372-.L182
	.half	5
	.byte	144,32,157,32,0
	.word	0,.L80-.L182
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L459:
	.word	-1,.L182,.L80-.L182,.L457-.L182
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_MainFunction')
	.sect	'.debug_loc'
.L396:
	.word	-1,.L192,.L543-.L192,.L367-.L192
	.half	1
	.byte	84
	.word	0,.L568-.L192
	.half	1
	.byte	84
	.word	0,0
.L191:
	.word	-1,.L192,0,.L567-.L192
	.half	2
	.byte	138,0
	.word	.L567-.L192,.L106-.L192
	.half	2
	.byte	138,8
	.word	.L106-.L192,.L106-.L192
	.half	2
	.byte	138,0
	.word	.L106-.L192,.L394-.L192
	.half	2
	.byte	138,8
	.word	.L394-.L192,.L394-.L192
	.half	2
	.byte	138,0
	.word	0,0
.L397:
	.word	-1,.L192,.L543-.L192,.L367-.L192
	.half	1
	.byte	88
	.word	.L152-.L192,.L372-.L192
	.half	1
	.byte	88
	.word	.L567-.L192,.L394-.L192
	.half	1
	.byte	88
	.word	.L571-.L192,.L106-.L192
	.half	1
	.byte	87
	.word	0,0
.L398:
	.word	-1,.L192,.L569-.L192,.L570-.L192
	.half	1
	.byte	82
	.word	0,0
.L399:
	.word	-1,.L192,.L543-.L192,.L367-.L192
	.half	2
	.byte	145,120
	.word	.L152-.L192,.L372-.L192
	.half	2
	.byte	145,120
	.word	0,.L394-.L192
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_PreventWakeUp')
	.sect	'.debug_loc'
.L448:
	.word	-1,.L178,.L543-.L178,.L367-.L178
	.half	1
	.byte	84
	.word	0,.L557-.L178
	.half	1
	.byte	84
	.word	.L152-.L178,.L533-.L178
	.half	1
	.byte	84
	.word	0,0
.L177:
	.word	-1,.L178,0,.L447-.L178
	.half	2
	.byte	138,0
	.word	0,0
.L449:
	.word	-1,.L178,.L543-.L178,.L367-.L178
	.half	1
	.byte	85
	.word	0,.L557-.L178
	.half	1
	.byte	85
	.word	.L152-.L178,.L372-.L178
	.half	1
	.byte	85
	.word	0,0
.L451:
	.word	-1,.L178,.L543-.L178,.L367-.L178
	.half	1
	.byte	87
	.word	.L152-.L178,.L372-.L178
	.half	1
	.byte	87
	.word	.L558-.L178,.L559-.L178
	.half	1
	.byte	87
	.word	0,0
.L450:
	.word	-1,.L178,.L543-.L178,.L367-.L178
	.half	1
	.byte	88
	.word	.L152-.L178,.L372-.L178
	.half	1
	.byte	88
	.word	.L558-.L178,.L447-.L178
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_ReadInhibitCounter')
	.sect	'.debug_loc'
.L183:
	.word	-1,.L184,0,.L461-.L184
	.half	2
	.byte	138,0
	.word	0,0
.L463:
	.word	-1,.L184,.L543-.L184,.L367-.L184
	.half	1
	.byte	100
	.word	.L152-.L184,.L372-.L184
	.half	1
	.byte	100
	.word	0,.L86-.L184
	.half	1
	.byte	100
	.word	0,0
.L465:
	.word	-1,.L184,.L543-.L184,.L367-.L184
	.half	1
	.byte	87
	.word	.L152-.L184,.L372-.L184
	.half	1
	.byte	87
	.word	.L563-.L184,.L86-.L184
	.half	1
	.byte	87
	.word	0,0
.L464:
	.word	-1,.L184,.L543-.L184,.L367-.L184
	.half	1
	.byte	88
	.word	.L152-.L184,.L372-.L184
	.half	1
	.byte	88
	.word	.L563-.L184,.L461-.L184
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_RequestComMode')
	.sect	'.debug_loc'
.L167:
	.word	-1,.L168,0,.L417-.L168
	.half	2
	.byte	138,0
	.word	0,0
.L420:
	.word	-1,.L168,.L543-.L168,.L367-.L168
	.half	1
	.byte	85
	.word	.L543-.L168,.L367-.L168
	.half	1
	.byte	88
	.word	0,.L544-.L168
	.half	1
	.byte	85
	.word	.L152-.L168,.L372-.L168
	.half	1
	.byte	88
	.word	.L546-.L168,.L417-.L168
	.half	1
	.byte	88
	.word	0,0
.L419:
	.word	-1,.L168,.L543-.L168,.L367-.L168
	.half	1
	.byte	84
	.word	0,.L544-.L168
	.half	1
	.byte	84
	.word	0,0
.L422:
	.word	-1,.L168,.L543-.L168,.L367-.L168
	.half	1
	.byte	89
	.word	.L152-.L168,.L372-.L168
	.half	1
	.byte	89
	.word	.L547-.L168,.L417-.L168
	.half	1
	.byte	89
	.word	0,0
.L421:
	.word	-1,.L168,.L543-.L168,.L367-.L168
	.half	1
	.byte	90
	.word	.L152-.L168,.L372-.L168
	.half	1
	.byte	90
	.word	.L547-.L168,.L417-.L168
	.half	1
	.byte	90
	.word	0,0
.L423:
	.word	-1,.L168,.L545-.L168,.L31-.L168
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_ResetInhibitCounter')
	.sect	'.debug_loc'
.L185:
	.word	-1,.L186,0,.L466-.L186
	.half	2
	.byte	138,0
	.word	0,0
.L468:
	.word	-1,.L186,.L543-.L186,.L367-.L186
	.half	5
	.byte	144,32,157,32,0
	.word	.L152-.L186,.L372-.L186
	.half	5
	.byte	144,32,157,32,0
	.word	0,.L90-.L186
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L467:
	.word	-1,.L186,.L152-.L186,.L372-.L186
	.half	1
	.byte	95
	.word	.L89-.L186,.L466-.L186
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_SetECUGroupClassification')
	.sect	'.debug_loc'
.L187:
	.word	-1,.L188,0,.L469-.L188
	.half	2
	.byte	138,0
	.word	0,0
.L470:
	.word	-1,.L188,.L543-.L188,.L367-.L188
	.half	1
	.byte	84
	.word	0,.L564-.L188
	.half	1
	.byte	84
	.word	.L152-.L188,.L533-.L188
	.half	1
	.byte	84
	.word	0,0
.L472:
	.word	-1,.L188,.L543-.L188,.L367-.L188
	.half	1
	.byte	87
	.word	.L152-.L188,.L372-.L188
	.half	1
	.byte	87
	.word	.L565-.L188,.L96-.L188
	.half	1
	.byte	87
	.word	0,0
.L471:
	.word	-1,.L188,.L543-.L188,.L367-.L188
	.half	1
	.byte	88
	.word	.L152-.L188,.L372-.L188
	.half	1
	.byte	88
	.word	.L565-.L188,.L469-.L188
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_TF_Full_SiCom')
	.sect	'.debug_loc'
.L489:
	.word	-1,.L140,0,.L488-.L140
	.half	1
	.byte	84
	.word	0,0
.L139:
	.word	-1,.L140,0,.L488-.L140
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_TF_NetReq_ReadyS')
	.sect	'.debug_loc'
.L495:
	.word	-1,.L146,0,.L494-.L146
	.half	1
	.byte	84
	.word	0,0
.L145:
	.word	-1,.L146,0,.L494-.L146
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_TF_NoCom_FullReadySleep')
	.sect	'.debug_loc'
.L487:
	.word	-1,.L138,0,.L486-.L138
	.half	1
	.byte	84
	.word	0,0
.L137:
	.word	-1,.L138,0,.L486-.L138
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_TF_NoCom_NetReq')
	.sect	'.debug_loc'
.L485:
	.word	-1,.L136,0,.L530-.L136
	.half	1
	.byte	84
	.word	.L531-.L136,.L532-.L136
	.half	1
	.byte	95
	.word	0,0
.L135:
	.word	-1,.L136,0,.L484-.L136
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_TF_No_Action')
	.sect	'.debug_loc'
.L497:
	.word	-1,.L148,0,.L496-.L148
	.half	1
	.byte	84
	.word	0,0
.L147:
	.word	-1,.L148,0,.L496-.L148
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_TF_No_Transition')
	.sect	'.debug_loc'
.L499:
	.word	-1,.L150,.L152-.L150,.L533-.L150
	.half	1
	.byte	84
	.word	0,0
.L149:
	.word	-1,.L150,0,.L498-.L150
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_TF_ReadyS_NetReq')
	.sect	'.debug_loc'
.L491:
	.word	-1,.L142,0,.L490-.L142
	.half	1
	.byte	84
	.word	0,0
.L141:
	.word	-1,.L142,0,.L490-.L142
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ComM_TF_SiCom_NoCom')
	.sect	'.debug_loc'
.L493:
	.word	-1,.L144,0,.L492-.L144
	.half	1
	.byte	84
	.word	0,0
.L143:
	.word	-1,.L144,0,.L492-.L144
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L913:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('ComM_CalculateHighestComMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L130,.L501-.L130
	.sdecl	'.debug_frame',debug,cluster('ComM_IsUserRequestingChannel')
	.sect	'.debug_frame'
	.word	24
	.word	.L913,.L132,.L511-.L132
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('ComM_ChannelIsRequestPending')
	.sect	'.debug_frame'
	.word	24
	.word	.L913,.L134,.L513-.L134
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('ComM_TF_NoCom_NetReq')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L136,.L484-.L136
	.sdecl	'.debug_frame',debug,cluster('ComM_TF_NoCom_FullReadySleep')
	.sect	'.debug_frame'
	.word	24
	.word	.L913,.L138,.L486-.L138
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('ComM_TF_Full_SiCom')
	.sect	'.debug_frame'
	.word	24
	.word	.L913,.L140,.L488-.L140
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('ComM_TF_ReadyS_NetReq')
	.sect	'.debug_frame'
	.word	24
	.word	.L913,.L142,.L490-.L142
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('ComM_TF_SiCom_NoCom')
	.sect	'.debug_frame'
	.word	24
	.word	.L913,.L144,.L492-.L144
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('ComM_TF_NetReq_ReadyS')
	.sect	'.debug_frame'
	.word	24
	.word	.L913,.L146,.L494-.L146
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('ComM_TF_No_Action')
	.sect	'.debug_frame'
	.word	24
	.word	.L913,.L148,.L496-.L148
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('ComM_TF_No_Transition')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L150,.L498-.L150
	.sdecl	'.debug_frame',debug,cluster('ComM_Init')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L154,.L400-.L154
	.sdecl	'.debug_frame',debug,cluster('ComM_DeInit')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L156,.L403-.L156
	.sdecl	'.debug_frame',debug,cluster('ComM_InitMemory')
	.sect	'.debug_frame'
	.word	24
	.word	.L913,.L158,.L402-.L158
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('ComM_GetState')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L160,.L410-.L160
	.sdecl	'.debug_frame',debug,cluster('ComM_GetStatus')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L164,.L404-.L164
	.sdecl	'.debug_frame',debug,cluster('ComM_RequestComMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L168,.L417-.L168
	.sdecl	'.debug_frame',debug,cluster('ComM_GetMaxComMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L170,.L424-.L170
	.sdecl	'.debug_frame',debug,cluster('ComM_GetRequestedComMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L172,.L430-.L172
	.sdecl	'.debug_frame',debug,cluster('ComM_GetCurrentComMode')
	.sect	'.debug_frame'
	.word	36
	.word	.L913,.L174,.L435-.L174
	.byte	4
	.word	(.L552-.L174)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L435-.L552)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('ComM_GetInhibitionStatus')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L176,.L441-.L176
	.sdecl	'.debug_frame',debug,cluster('ComM_PreventWakeUp')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L178,.L447-.L178
	.sdecl	'.debug_frame',debug,cluster('ComM_LimitChannelToNoComMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L180,.L452-.L180
	.sdecl	'.debug_frame',debug,cluster('ComM_LimitECUToNoComMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L182,.L457-.L182
	.sdecl	'.debug_frame',debug,cluster('ComM_ReadInhibitCounter')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L184,.L461-.L184
	.sdecl	'.debug_frame',debug,cluster('ComM_ResetInhibitCounter')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L186,.L466-.L186
	.sdecl	'.debug_frame',debug,cluster('ComM_SetECUGroupClassification')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L188,.L469-.L188
	.sdecl	'.debug_frame',debug,cluster('ComM_CommunicationAllowed')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L190,.L473-.L190
	.sdecl	'.debug_frame',debug,cluster('ComM_MainFunction')
	.sect	'.debug_frame'
	.word	52
	.word	.L913,.L192,.L394-.L192
	.byte	4
	.word	(.L567-.L192)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L106-.L567)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L394-.L106)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('ComM_ChannelStateTransition')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L194,.L506-.L194
	.sdecl	'.debug_frame',debug,cluster('ComM_EcuM_WakeUpIndication')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L196,.L477-.L196
	.sdecl	'.debug_frame',debug,cluster('ComM_BusSM_ModeIndication')
	.sect	'.debug_frame'
	.word	12
	.word	.L913,.L198,.L480-.L198
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L914:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L914,.L152,.L372-.L152
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L914,.L162,.L377-.L162
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_1')
	.sect	'.debug_frame'
	.word	24
	.word	.L914,.L166,.L367-.L166
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\component\ComM\Implementation\ComM.c	  6785  
; ..\component\ComM\Implementation\ComM.c	  6786  #if ( COMM_EXISTS_LINSLAVE_NMTYPEOFCHANNEL == STD_ON )
; ..\component\ComM\Implementation\ComM.c	  6787  /*********************************************************************************************************************
; ..\component\ComM\Implementation\ComM.c	  6788   *  ComM_BusSM_BusSleepMode()
; ..\component\ComM\Implementation\ComM.c	  6789   *********************************************************************************************************************/
; ..\component\ComM\Implementation\ComM.c	  6790  /*!
; ..\component\ComM\Implementation\ComM.c	  6791   * Internal comment removed.
; ..\component\ComM\Implementation\ComM.c	  6792   *
; ..\component\ComM\Implementation\ComM.c	  6793   *
; ..\component\ComM\Implementation\ComM.c	  6794   *
; ..\component\ComM\Implementation\ComM.c	  6795   *
; ..\component\ComM\Implementation\ComM.c	  6796   *
; ..\component\ComM\Implementation\ComM.c	  6797   */
; ..\component\ComM\Implementation\ComM.c	  6798  FUNC(void, COMM_CODE) ComM_BusSM_BusSleepMode( NetworkHandleType Channel )
; ..\component\ComM\Implementation\ComM.c	  6799  {
; ..\component\ComM\Implementation\ComM.c	  6800    /* ----- Local Variables ---------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6801    uint8 errorId = COMM_E_NO_ERROR;
; ..\component\ComM\Implementation\ComM.c	  6802  
; ..\component\ComM\Implementation\ComM.c	  6803    /* ----- Development Error Checks ------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6804  # if (COMM_DEV_ERROR_DETECT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6805    /* #10 Check that module is initialized. */
; ..\component\ComM\Implementation\ComM.c	  6806    if (ComM_InitStatus != COMM_INIT)
; ..\component\ComM\Implementation\ComM.c	  6807    {
; ..\component\ComM\Implementation\ComM.c	  6808      errorId = COMM_E_NOT_INITED;
; ..\component\ComM\Implementation\ComM.c	  6809    }
; ..\component\ComM\Implementation\ComM.c	  6810    /* #20 Check parameter 'Channel': it must be valid and active in the current variant. */
; ..\component\ComM\Implementation\ComM.c	  6811    else if ((Channel >= COMM_ACTIVE_CHANNEL)
; ..\component\ComM\Implementation\ComM.c	  6812  #  if (COMM_ENABLEDOFCHANNEL == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6813     || (!ComM_IsEnabledOfChannel(Channel))
; ..\component\ComM\Implementation\ComM.c	  6814  #  endif
; ..\component\ComM\Implementation\ComM.c	  6815         )
; ..\component\ComM\Implementation\ComM.c	  6816    {
; ..\component\ComM\Implementation\ComM.c	  6817      errorId = COMM_E_WRONG_PARAMETERS;
; ..\component\ComM\Implementation\ComM.c	  6818    }
; ..\component\ComM\Implementation\ComM.c	  6819    else
; ..\component\ComM\Implementation\ComM.c	  6820  # endif
; ..\component\ComM\Implementation\ComM.c	  6821    {
; ..\component\ComM\Implementation\ComM.c	  6822      /* ----- Implementation ----------------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6823      if ( (ComM_ActiveComMode[Channel] == COMM_FULL_COM_NETWORK_REQUESTED) || (ComM_ActiveComMode[Channel] == COMM_FULL_COM_READY_SLEEP) )
; ..\component\ComM\Implementation\ComM.c	  6824      {
; ..\component\ComM\Implementation\ComM.c	  6825        /* #30 If current channel is in FULL_COMMUNICATION mode, store the Bus Sleep Mode indicated by the BusSM. */
; ..\component\ComM\Implementation\ComM.c	  6826        ComM_SetBusSleepModeIndicated(Channel, TRUE); /* SBSW_COMM_CHANNEL_CSL02 */
; ..\component\ComM\Implementation\ComM.c	  6827      }
; ..\component\ComM\Implementation\ComM.c	  6828  
; ..\component\ComM\Implementation\ComM.c	  6829      /* #40 Set externally requested Com Mode to COMM_NO_COM_NO_PENDING_REQUEST. */
; ..\component\ComM\Implementation\ComM.c	  6830      ComM_BusComModeReq[Channel] = COMM_NO_COM_NO_PENDING_REQUEST; /* SBSW_COMM_ARRAY_CHANNEL_WRITE */
; ..\component\ComM\Implementation\ComM.c	  6831    }
; ..\component\ComM\Implementation\ComM.c	  6832  
; ..\component\ComM\Implementation\ComM.c	  6833    /* ----- Development Error Report --------------------------------------- */
; ..\component\ComM\Implementation\ComM.c	  6834  # if (COMM_DEV_ERROR_REPORT == STD_ON)
; ..\component\ComM\Implementation\ComM.c	  6835    if (errorId != COMM_E_NO_ERROR)
; ..\component\ComM\Implementation\ComM.c	  6836    {
; ..\component\ComM\Implementation\ComM.c	  6837      (void)Det_ReportError( COMM_MODULE_ID, COMM_INSTANCE_ID_DET, COMM_SID_CBK_BUSSMBUSSLEEPMODE, errorId );
; ..\component\ComM\Implementation\ComM.c	  6838    }
; ..\component\ComM\Implementation\ComM.c	  6839  # else
; ..\component\ComM\Implementation\ComM.c	  6840    COMM_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */ /*lint -e{438} */
; ..\component\ComM\Implementation\ComM.c	  6841  # endif
; ..\component\ComM\Implementation\ComM.c	  6842  }
; ..\component\ComM\Implementation\ComM.c	  6843  #endif
; ..\component\ComM\Implementation\ComM.c	  6844  
; ..\component\ComM\Implementation\ComM.c	  6845  /* module specific MISRA deviations:
; ..\component\ComM\Implementation\ComM.c	  6846  MD_ComM_2018:
; ..\component\ComM\Implementation\ComM.c	  6847        Reason:       Default label is provided as a defensive measure against possible future code changes and to comply with rule 15.3.
; ..\component\ComM\Implementation\ComM.c	  6848        Risk:         There is no risk.
; ..\component\ComM\Implementation\ComM.c	  6849        Prevention:   Covered by code review.
; ..\component\ComM\Implementation\ComM.c	  6850  MD_ComM_3218:
; ..\component\ComM\Implementation\ComM.c	  6851        Reason:       Some compilers are not able to compile code with static declarations inside functions.
; ..\component\ComM\Implementation\ComM.c	  6852        Risk:         There is no risk.
; ..\component\ComM\Implementation\ComM.c	  6853        Prevention:   N/A
; ..\component\ComM\Implementation\ComM.c	  6854  MD_ComM_3415:
; ..\component\ComM\Implementation\ComM.c	  6855        Reason:       The function does not have any side-effects (it does not change the module' state').
; ..\component\ComM\Implementation\ComM.c	  6856        Risk:         There is no risk.
; ..\component\ComM\Implementation\ComM.c	  6857        Prevention:   Covered by code review.
; ..\component\ComM\Implementation\ComM.c	  6858  MD_ComM_3451_3449:
; ..\component\ComM\Implementation\ComM.c	  6859        Reason:       It is ensured by code generator that the declarations remain compatible.
; ..\component\ComM\Implementation\ComM.c	  6860                      1. The first declaration is in ComM_Private_Cfg.h, which is not included via ComM.h.The second declaration is in ComM_Lcfg.h, which is included via ComM.h and therefore visible to other modules.
; ..\component\ComM\Implementation\ComM.c	  6861                      2. The first declaration is in ComM.h. The second declaration is in Rte_ComM.h. Multiple external declarations of the functions exist so that other components can use that function as well.
; ..\component\ComM\Implementation\ComM.c	  6862        Risk:         There is no risk.
; ..\component\ComM\Implementation\ComM.c	  6863        Prevention:   Covered by code review.
; ..\component\ComM\Implementation\ComM.c	  6864  MD_ComM_3673:
; ..\component\ComM\Implementation\ComM.c	  6865        Reason:       The function parameter list is required by the AUTOSAR specification.
; ..\component\ComM\Implementation\ComM.c	  6866        Risk:         There is no risk.
; ..\component\ComM\Implementation\ComM.c	  6867        Prevention:   N/A.
; ..\component\ComM\Implementation\ComM.c	  6868  MD_ComM_2842_2843:
; ..\component\ComM\Implementation\ComM.c	  6869        Reason:       A function parameter is used to access an array element. The parameter is always either passed by an internal ComM function (e.g. by ComM_MainFunction) that ensures that the parameter
; ..\component\ComM\Implementation\ComM.c	  6870                      is in a valid range or the function itself, which uses the function paramter, validates the value of the parameter during runtime. The parameter cannot be written by other BSW module
; ..\component\ComM\Implementation\ComM.c	  6871                      or application. Additional run-time check is therefore omitted.
; ..\component\ComM\Implementation\ComM.c	  6872        Risk:         There is no risk.
; ..\component\ComM\Implementation\ComM.c	  6873        Prevention:   Covered by code review.
; ..\component\ComM\Implementation\ComM.c	  6874  MD_ComM_2995_2991:
; ..\component\ComM\Implementation\ComM.c	  6875        Reason:       A run-time check of generated data is performed. This is done by either checking the generated array size that shall always return true or by checking a generated, channel specific value (e.g. Nm Variant), for which
; ..\component\ComM\Implementation\ComM.c	  6876                      the statement always returns true in certain configurations (e.g. only Nm Variant LINSLAVE or PASSIVE).
; ..\component\ComM\Implementation\ComM.c	  6877        Risk:         There is no risk.
; ..\component\ComM\Implementation\ComM.c	  6878        Prevention:   Covered by code review.
; ..\component\ComM\Implementation\ComM.c	  6879  MD_ComM_2996_2992:
; ..\component\ComM\Implementation\ComM.c	  6880        Reason:       A run-time check of generated data is performed. This is done by checking the generated array size that shall always return false.
; ..\component\ComM\Implementation\ComM.c	  6881        Risk:         There is no risk.
; ..\component\ComM\Implementation\ComM.c	  6882        Prevention:   Covered by code review.
; ..\component\ComM\Implementation\ComM.c	  6883  MD_ComM_2985:
; ..\component\ComM\Implementation\ComM.c	  6884        Reason:       The operation is needed if the left hand operand is non zero.
; ..\component\ComM\Implementation\ComM.c	  6885        Risk:         No Risk.
; ..\component\ComM\Implementation\ComM.c	  6886        Prevention:   Covered by code review.
; ..\component\ComM\Implementation\ComM.c	  6887  MD_ComM_2982:
; ..\component\ComM\Implementation\ComM.c	  6888        Reason:       The assignment is needed to set the default value.
; ..\component\ComM\Implementation\ComM.c	  6889        Risk:         No Risk.
; ..\component\ComM\Implementation\ComM.c	  6890        Prevention:   Covered by code review.
; ..\component\ComM\Implementation\ComM.c	  6891  MD_ComM_1039:
; ..\component\ComM\Implementation\ComM.c	  6892        Reason:       The array can have the length one depending on configuration. However, the array is never used as a flexible array member.
; ..\component\ComM\Implementation\ComM.c	  6893                      It is always accessed with the index zero in this case.
; ..\component\ComM\Implementation\ComM.c	  6894        Risk:         No Risk.
; ..\component\ComM\Implementation\ComM.c	  6895        Prevention:   Covered by code review.
; ..\component\ComM\Implementation\ComM.c	  6896  MD_ComM_0315:
; ..\component\ComM\Implementation\ComM.c	  6897        Reason:       Com_SendSignal and Com_RecieveSignal have a void pointer as a function parameter. This is defined by AUTOSAR.
; ..\component\ComM\Implementation\ComM.c	  6898        Risk:         No risk, because the underlying uint8 pointer type is known.
; ..\component\ComM\Implementation\ComM.c	  6899        Prevention:   No prevention necessary.
; ..\component\ComM\Implementation\ComM.c	  6900  MD_ComM_1533:
; ..\component\ComM\Implementation\ComM.c	  6901        Reason:       The value of the object is generated, therefore cannot be moved to the static file ComM.c.
; ..\component\ComM\Implementation\ComM.c	  6902        Risk:         No Risk.
; ..\component\ComM\Implementation\ComM.c	  6903        Prevention:   Covered by code review.
; ..\component\ComM\Implementation\ComM.c	  6904  MD_ComM_1339:
; ..\component\ComM\Implementation\ComM.c	  6905        Reason:       The value of the object is never modified
; ..\component\ComM\Implementation\ComM.c	  6906        Risk:         No Risk.
; ..\component\ComM\Implementation\ComM.c	  6907        Prevention:   Covered by code review.
; ..\component\ComM\Implementation\ComM.c	  6908  MD_ComM_2823:
; ..\component\ComM\Implementation\ComM.c	  6909        Reason:       It is ensured by the generator that the value of the pointer is never NULL.
; ..\component\ComM\Implementation\ComM.c	  6910        Risk:         No Risk.
; ..\component\ComM\Implementation\ComM.c	  6911        Prevention:   Covered by code review.
; ..\component\ComM\Implementation\ComM.c	  6912  */
; ..\component\ComM\Implementation\ComM.c	  6913  
; ..\component\ComM\Implementation\ComM.c	  6914  /* SBSW_JUSTIFICATION_BEGIN
; ..\component\ComM\Implementation\ComM.c	  6915  
; ..\component\ComM\Implementation\ComM.c	  6916  \ID                SBSW_COMM_CSL01
; ..\component\ComM\Implementation\ComM.c	  6917  \DESCRIPTION       Access to an array using the GetSizeOf macro of the this array.
; ..\component\ComM\Implementation\ComM.c	  6918  \COUNTERMEASURE \N Qualified use-case CSL01 of ComStackLib
; ..\component\ComM\Implementation\ComM.c	  6919  
; ..\component\ComM\Implementation\ComM.c	  6920  \ID                SBSW_COMM_UserReqFullCom_over_ChannelPb_or_ByteMask_CSL03
; ..\component\ComM\Implementation\ComM.c	  6921  \DESCRIPTION       Access to ComM_UserReqFullCom via indirection over ComM_UserByteMask or ComM_ChannelPb structure respectively.
; ..\component\ComM\Implementation\ComM.c	  6922  \COUNTERMEASURE \N Qualified use-case CSL03 of ComStackLib
; ..\component\ComM\Implementation\ComM.c	  6923  
; ..\component\ComM\Implementation\ComM.c	  6924  \ID                SBSW_COMM_UserReqPncFullCom_over_UserPncByteMask_or_PncPb_CSL03
; ..\component\ComM\Implementation\ComM.c	  6925  \DESCRIPTION       Access to ComM_UserReqPncFullCom via indirection over ComM_UserPncByteMask or ComM_PncPb structure respectively.
; ..\component\ComM\Implementation\ComM.c	  6926  \COUNTERMEASURE \N Qualified use-case CSL03 of ComStackLib
; ..\component\ComM\Implementation\ComM.c	  6927  
; ..\component\ComM\Implementation\ComM.c	  6928  \ID                SBSW_COMM_BusComModeReq_over_PncChannelMapping_CSL03
; ..\component\ComM\Implementation\ComM.c	  6929  \DESCRIPTION       Access to ComM_BusComModeReq via indirection over ComM_PncChannelMapping structure.
; ..\component\ComM\Implementation\ComM.c	  6930  \COUNTERMEASURE \N Qualified use-case CSL03 of ComStackLib
; ..\component\ComM\Implementation\ComM.c	  6931  
; ..\component\ComM\Implementation\ComM.c	  6932  \ID                SBSW_COMM_PNC_CSL02
; ..\component\ComM\Implementation\ComM.c	  6933  \DESCRIPTION       Access to an array that has a size relation to ComM_Pnc.
; ..\component\ComM\Implementation\ComM.c	  6934  \COUNTERMEASURE \N Qualified use-case CSL02 of ComStackLib
; ..\component\ComM\Implementation\ComM.c	  6935  
; ..\component\ComM\Implementation\ComM.c	  6936  \ID                SBSW_COMM_USER_CSL02
; ..\component\ComM\Implementation\ComM.c	  6937  \DESCRIPTION       Access to an array that has a size relation to ComM_User.
; ..\component\ComM\Implementation\ComM.c	  6938  \COUNTERMEASURE \N Qualified use-case CSL02 of ComStackLib
; ..\component\ComM\Implementation\ComM.c	  6939  
; ..\component\ComM\Implementation\ComM.c	  6940  \ID                SBSW_COMM_CHANNEL_CSL02
; ..\component\ComM\Implementation\ComM.c	  6941  \DESCRIPTION       Access to an array that has a size relation to ComM_Channel.
; ..\component\ComM\Implementation\ComM.c	  6942  \COUNTERMEASURE \N Qualified use-case CSL02 of ComStackLib
; ..\component\ComM\Implementation\ComM.c	  6943  
; ..\component\ComM\Implementation\ComM.c	  6944  \ID                SBSW_COMM_ARRAY_CHANNEL_WRITE
; ..\component\ComM\Implementation\ComM.c	  6945  \DESCRIPTION       Write access to an array of size COMM_ACTIVE_CHANNEL.
; ..\component\ComM\Implementation\ComM.c	  6946  \COUNTERMEASURE \N A preprocessor check ensures that COMM_ACTIVE_CHANNEL == ComM_GetSizeOfChannel(). The reason is that some channel-based arrays are
; ..\component\ComM\Implementation\ComM.c	  6947                     defined locally in this file and some are defined using the ComStackLib. The check is needed to ensure that arrays have the same size.
; ..\component\ComM\Implementation\ComM.c	  6948                     For all implementation variant ComM_GetSizeOfChannel() is always defined to a constant number.
; ..\component\ComM\Implementation\ComM.c	  6949                     If used in a for loop, the array index is always smaller than ComM_GetSizeOfChannel(). If a function parameter
; ..\component\ComM\Implementation\ComM.c	  6950                     is used as array index, the validity is ensured by a DET check.
; ..\component\ComM\Implementation\ComM.c	  6951  
; ..\component\ComM\Implementation\ComM.c	  6952  \ID                SBSW_COMM_PARAMETER_PTR_WRITE
; ..\component\ComM\Implementation\ComM.c	  6953  \DESCRIPTION       The function writes to the pointer parameter.
; ..\component\ComM\Implementation\ComM.c	  6954  \COUNTERMEASURE \N The caller ensures that the parameters of the following functions point to a valid memory location:
; ..\component\ComM\Implementation\ComM.c	  6955                     'Status': ComM_GetStatus(), ComM_GetInhibitionStatus();
; ..\component\ComM\Implementation\ComM.c	  6956                     'State': ComM_GetState();
; ..\component\ComM\Implementation\ComM.c	  6957                     'ComMode': ComM_GetMaxComMode(), ComM_GetRequestedComMode(), ComM_GetCurrentComMode();
; ..\component\ComM\Implementation\ComM.c	  6958                     'CounterValue': ComM_ReadInhibitCounter();
; ..\component\ComM\Implementation\ComM.c	  6959                     'Versioninfo': ComM_GetVersionInfo().
; ..\component\ComM\Implementation\ComM.c	  6960  
; ..\component\ComM\Implementation\ComM.c	  6961  \ID                SBSW_COMM_CALL_WITH_PTR_TO_CONST
; ..\component\ComM\Implementation\ComM.c	  6962  \DESCRIPTION       A pointer to constant data is passed to a called function.
; ..\component\ComM\Implementation\ComM.c	  6963  \COUNTERMEASURE \N The pointed data is constant and cannot be written.
; ..\component\ComM\Implementation\ComM.c	  6964  
; ..\component\ComM\Implementation\ComM.c	  6965  \ID                SBSW_COMM_CALL_BUSSM_GET_CURRENT_COMMODE
; ..\component\ComM\Implementation\ComM.c	  6966  \DESCRIPTION       A pointer is passed to a BusSM function as parameter and could be used within the function directly to write to a memory location.
; ..\component\ComM\Implementation\ComM.c	  6967  \COUNTERMEASURE \N This function is called by ComM_GetCurrentComMode() only, which provides a pointer to a local variable.
; ..\component\ComM\Implementation\ComM.c	  6968                     This pointer is passed to the callee (BusSM) without changes. This ensures that the callee always gets a valid pointer.
; ..\component\ComM\Implementation\ComM.c	  6969  
; ..\component\ComM\Implementation\ComM.c	  6970  \ID                SBSW_COMM_PASSED_PTR_WRITE_ACCESS
; ..\component\ComM\Implementation\ComM.c	  6971  \DESCRIPTION       A pointer is passed to ComM_GetCurrentBusSMMode() and is used within the function directly to write to a memory location.
; ..\component\ComM\Implementation\ComM.c	  6972  \COUNTERMEASURE \N This function is called by ComM_GetCurrentComMode() only, which provides a pointer to a local variable.
; ..\component\ComM\Implementation\ComM.c	  6973  
; ..\component\ComM\Implementation\ComM.c	  6974  \ID                SBSW_COMM_CALL_WITH_PTR_TO_LOCAL_VARIABLE
; ..\component\ComM\Implementation\ComM.c	  6975  \DESCRIPTION       A pointer is passed to a function as parameter and is used within the function directly to write to a memory location.
; ..\component\ComM\Implementation\ComM.c	  6976  \COUNTERMEASURE \N The passed pointer references a local stack variable and is therefore always valid.
; ..\component\ComM\Implementation\ComM.c	  6977  
; ..\component\ComM\Implementation\ComM.c	  6978  \ID                SBSW_COMM_ARRAY_CHANNEL_REQUESTORS_WRITE
; ..\component\ComM\Implementation\ComM.c	  6979  \DESCRIPTION       The function writes to the array handleArray[]. The index is limited by a generated define containing the array size.
; ..\component\ComM\Implementation\ComM.c	  6980                     The type of the array is defined by RTE because it is used to exchange data via Sender-Receiver Interface ComM_CurrentChannelRequest.
; ..\component\ComM\Implementation\ComM.c	  6981  \COUNTERMEASURE \S Verify that the array size generated by ComM matches to the array size in the type definition of RTE. The following procedure shall be
; ..\component\ComM\Implementation\ComM.c	  6982                     applied to each channel that has activated the ComM parameter 'Full Comm Request Notification Enabled'.
; ..\component\ComM\Implementation\ComM.c	  6983                     1) ComM_Cfg.h contains array size definition in the format COMM_MAX_CR_<ShortNameOfChannel>
; ..\component\ComM\Implementation\ComM.c	  6984                     2) rte_type.h contains the definition of the corresponding structure type in the format ComM_UserHandleArrayType_<ShortNameOfChannel>
; ..\component\ComM\Implementation\ComM.c	  6985                     3) Verify that the structure member 'handleArray' has the same size as the corresponding define value of ComM in 1).
; ..\component\ComM\Implementation\ComM.c	  6986                     4) Verify the content of the generated functions ComM_CurrentChannelRequestInit and ComM_CurrentChannelRequestNotification to ensure that
; ..\component\ComM\Implementation\ComM.c	  6987                        the proper define COMM_MAX_CR_<ShortNameOfChannel> is used to limit the array index when writing to
; ..\component\ComM\Implementation\ComM.c	  6988                        ComM_UserHandleArrayType_<ShortNameOfChannel>.handleArray[]. [SMI-94]
; ..\component\ComM\Implementation\ComM.c	  6989  
; ..\component\ComM\Implementation\ComM.c	  6990  \ID                SBSW_COMM_CALL_COM_RECEIVE_SIGNAL
; ..\component\ComM\Implementation\ComM.c	  6991  \DESCRIPTION       This function passes a pointer to Com_ReceiveSignal(), which uses the pointer to write to a memory location.
; ..\component\ComM\Implementation\ComM.c	  6992  \COUNTERMEASURE \S Verify that the value of ComSignalLength (byte) in Com module is smaller or equal to the value of COMM_PNC_SIGNAL_LENGTH (can be found in ComM_Cfg.h).
; ..\component\ComM\Implementation\ComM.c	  6993                     This shall be verified for each ComPncSignal referenced by Partial Network Clusters and having ComMPncComSignalDirection = RX. [SMI-95]
; ..\component\ComM\Implementation\ComM.c	  6994  
; ..\component\ComM\Implementation\ComM.c	  6995  \ID                SBSW_COMM_TransitionFct_PointerCall
; ..\component\ComM\Implementation\ComM.c	  6996  \DESCRIPTION       Calling a function pointer defined in ComM_TransitionFctTable[].
; ..\component\ComM\Implementation\ComM.c	  6997  \COUNTERMEASURE \R A runtime check ensures that array index never exceeds the size of ComM_TransitionFctTable[]. It is ensured by code inspection that the elements
; ..\component\ComM\Implementation\ComM.c	  6998                     of ComM_TransitionFctTable[] are valid state transition functions and the size of the array is COMM_MAX_NUMBER_OF_STATES.
; ..\component\ComM\Implementation\ComM.c	  6999  
; ..\component\ComM\Implementation\ComM.c	  7000  \ID                SBSW_COMM_UserModeNotiFunc_PointerCall
; ..\component\ComM\Implementation\ComM.c	  7001  \DESCRIPTION       Calling a function pointer defined in ComM_UserModeNotiFunc[].
; ..\component\ComM\Implementation\ComM.c	  7002  \COUNTERMEASURE \S The user of MICROSAR Safe shall verify that each element of ComM_UserModeNotiFunc[] is either a valid function pointer or NULL_PTR.
; ..\component\ComM\Implementation\ComM.c	  7003                     This measure is only needed if at least one ComM user has enabled the parameter 'User Mode Notification'. [SMI-1046]
; ..\component\ComM\Implementation\ComM.c	  7004                  \R A runtime check prevents dereferencing a NULL pointer.
; ..\component\ComM\Implementation\ComM.c	  7005                  \R Qualified use-case CSL01 of ComStackLib because ComM_GetSizeOfUserModeNotiFunc() is used to check the array index.
; ..\component\ComM\Implementation\ComM.c	  7006  
; ..\component\ComM\Implementation\ComM.c	  7007  \ID                SBSW_COMM_CSL_VAR_ACCESS
; ..\component\ComM\Implementation\ComM.c	  7008  \DESCRIPTION       A ComStackLib generated variable is accessed.
; ..\component\ComM\Implementation\ComM.c	  7009  \COUNTERMEASURE \N The variable is written using a generated macro of the CSL. It immediately dereferences the variables address without pointer arithmetic.
; ..\component\ComM\Implementation\ComM.c	  7010  
; ..\component\ComM\Implementation\ComM.c	  7011  SBSW_JUSTIFICATION_END */
; ..\component\ComM\Implementation\ComM.c	  7012  
; ..\component\ComM\Implementation\ComM.c	  7013  /* START_COVERAGE_JUSTIFICATION
; ..\component\ComM\Implementation\ComM.c	  7014  
; ..\component\ComM\Implementation\ComM.c	  7015  \ID COV_COMM_MISRA
; ..\component\ComM\Implementation\ComM.c	  7016    \ACCEPT XX
; ..\component\ComM\Implementation\ComM.c	  7017    \REASON [MSR_COV_MISRA]
; ..\component\ComM\Implementation\ComM.c	  7018  
; ..\component\ComM\Implementation\ComM.c	  7019  \ID COV_COMM_GENDATA_CHECK
; ..\component\ComM\Implementation\ComM.c	  7020    \ACCEPT TX
; ..\component\ComM\Implementation\ComM.c	  7021    \ACCEPT XF
; ..\component\ComM\Implementation\ComM.c	  7022    \REASON The condition is for plausibility checks of the generated data. The code is verified by code inspection.
; ..\component\ComM\Implementation\ComM.c	  7023  
; ..\component\ComM\Implementation\ComM.c	  7024  \ID COV_COMM_MAGICNUMBER_CHECK
; ..\component\ComM\Implementation\ComM.c	  7025    \ACCEPT XF
; ..\component\ComM\Implementation\ComM.c	  7026    \REASON The condition is for magic number check of the post-build data. The code is verified by code inspection.
; ..\component\ComM\Implementation\ComM.c	  7027  
; ..\component\ComM\Implementation\ComM.c	  7028  \ID COV_COMM_FOR_LOOP_OPTIMIZATION
; ..\component\ComM\Implementation\ComM.c	  7029    \ACCEPT TX
; ..\component\ComM\Implementation\ComM.c	  7030    \ACCEPT TF tf tx
; ..\component\ComM\Implementation\ComM.c	  7031    \REASON A run-time optimization to cut short a for loop using a break statement. The loop goes through an element list where exactly one element meets certain
; ..\component\ComM\Implementation\ComM.c	  7032            conditions inside the loop. Once the element is found, the loop can be terminated to save run-time.
; ..\component\ComM\Implementation\ComM.c	  7033  
; ..\component\ComM\Implementation\ComM.c	  7034  \ID COV_COMM_SUBSET_OF_ELEMENTS
; ..\component\ComM\Implementation\ComM.c	  7035    \ACCEPT TX
; ..\component\ComM\Implementation\ComM.c	  7036    \ACCEPT XF
; ..\component\ComM\Implementation\ComM.c	  7037    \REASON There is an iteration loop over elements such as channels or PNCs or signals and an action (e.g. an API call) has to be performed if an element has a
; ..\component\ComM\Implementation\ComM.c	  7038            certain configuration parameter set to true. This parameter is used to select a subset of elements at run-time and it may be true for all relevant elements
; ..\component\ComM\Implementation\ComM.c	  7039            in some configurations so that the run-time decision always returns true. An encapsulation of such run-time decisions would substantially degrade
; ..\component\ComM\Implementation\ComM.c	  7040            readability of the code. The run-time decisions do not have an else branch.
; ..\component\ComM\Implementation\ComM.c	  7041  
; ..\component\ComM\Implementation\ComM.c	  7042  \ID COV_COMM_NM_LINSLAVE_ONLY
; ..\component\ComM\Implementation\ComM.c	  7043    \REASON In some configurations it is possible to have only channels with Nm variant LINSLAVE. In this case, this runtime check will always return false for the check
; ..\component\ComM\Implementation\ComM.c	  7044            if a DCM request is active (ComM_IsDcmRequestActive()).
; ..\component\ComM\Implementation\ComM.c	  7045  
; ..\component\ComM\Implementation\ComM.c	  7046  \ID COV_COMM_NM_LINSLAVE_OR_PASSIVE_ONLY
; ..\component\ComM\Implementation\ComM.c	  7047    \REASON In some configurations it is possible to have only channels with Nm variant LINSLAVE or PASSIVE. In this case, this runtime check will always return true.
; ..\component\ComM\Implementation\ComM.c	  7048  
; ..\component\ComM\Implementation\ComM.c	  7049  \ID COV_COMM_TIMER_INIT_VALUE_CAN_BE_ONE
; ..\component\ComM\Implementation\ComM.c	  7050    \ACCEPT TX
; ..\component\ComM\Implementation\ComM.c	  7051    \ACCEPT TF tf tx tf
; ..\component\ComM\Implementation\ComM.c	  7052    \REASON A timer value can be configured to exactly one main function period of the corresponding channel. In this case after decrementing the timer its value is always 0.
; ..\component\ComM\Implementation\ComM.c	  7053  
; ..\component\ComM\Implementation\ComM.c	  7054  \ID COV_COMM_COMMON_USER_WITH_MODE_NOTIFICATION
; ..\component\ComM\Implementation\ComM.c	  7055    \ACCEPT TX
; ..\component\ComM\Implementation\ComM.c	  7056    \REASON In some configurations a user can be mapped to all channels. If such a user has mode notification enabled,
; ..\component\ComM\Implementation\ComM.c	  7057            every state change of a channel triggers a re-calculation of the lowest mode of this user.
; ..\component\ComM\Implementation\ComM.c	  7058  
; ..\component\ComM\Implementation\ComM.c	  7059  \ID COV_COMM_PNC_EXTENDED_NO_ERA_ON_ACTIVE_CHANNEL
; ..\component\ComM\Implementation\ComM.c	  7060    \ACCEPT XF xf xx
; ..\component\ComM\Implementation\ComM.c	  7061    \REASON In configurations with COMM_PNC_EXTENDED_FUNCTIONALITY_ENABLED == STD_ON it is possible to assign Gateway Type ACTIVE to so called additional channels (e.g. LIN)
; ..\component\ComM\Implementation\ComM.c	  7062            in order to keep those channels awake via PNC. But ERA signals cannot be received on those channels.
; ..\component\ComM\Implementation\ComM.c	  7063  
; ..\component\ComM\Implementation\ComM.c	  7064  \ID COV_COMM_PNC_EXTENDED_SINGLE_ERA
; ..\component\ComM\Implementation\ComM.c	  7065    \ACCEPT TX
; ..\component\ComM\Implementation\ComM.c	  7066    \REASON In configurations with COMM_PNC_EXTENDED_FUNCTIONALITY_ENABLED == STD_ON it is possible to have only one ERA signal. When this ERA signal is received
; ..\component\ComM\Implementation\ComM.c	  7067            and PNC bit is 0 the corresponding PNC system user shall be released. Note that having multiple ERA signals is the most common use case.
; ..\component\ComM\Implementation\ComM.c	  7068  
; ..\component\ComM\Implementation\ComM.c	  7069  \ID COV_COMM_PNC_ON_CHANNELS_NM_PASSIVE
; ..\component\ComM\Implementation\ComM.c	  7070    \ACCEPT TF tf tx
; ..\component\ComM\Implementation\ComM.c	  7071    \ACCEPT TX
; ..\component\ComM\Implementation\ComM.c	  7072    \REASON In configurations where PNCs are mapped only to channels with Nm Type PASSIVE all user requests to those PNCs are ignored.
; ..\component\ComM\Implementation\ComM.c	  7073  
; ..\component\ComM\Implementation\ComM.c	  7074  END_COVERAGE_JUSTIFICATION */
; ..\component\ComM\Implementation\ComM.c	  7075  
; ..\component\ComM\Implementation\ComM.c	  7076  #define COMM_STOP_SEC_CODE
; ..\component\ComM\Implementation\ComM.c	  7077  /* PRQA S 5087 1 */ /* MD_MSR_MemMap */
; ..\component\ComM\Implementation\ComM.c	  7078  #include "MemMap.h"

	; Module end
