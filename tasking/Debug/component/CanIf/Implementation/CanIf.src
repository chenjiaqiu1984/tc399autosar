	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 21092262 SN 73118428"
	.compiler_invocation	"ctc --dep-file=component\\CanIf\\Implementation\\.CanIf.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc39xb -D__CPU_TC39XB__ --core=tc1.6.2 --iso=99 -DBRS_COMP_TASKING -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\testdemo\\taskingdemo\\demo001 -ID:\\Zonal\\demo011\\tasking\\component\\PduR -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Generator -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Com -ID:\\Zonal\\demo011\\tasking\\component\\Com\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Com\\DaVinciCfg_VASE -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Com\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\ComM -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Det -ID:\\Zonal\\demo011\\tasking\\component\\Det\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Det\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\demo011\\tasking\\appl -ID:\\Zonal\\demo011\\tasking\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\Components -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\ContractPhase -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\inc -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\appl\\Include -ID:\\Zonal\\demo011\\tasking\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\appl\\Source\\swc_test -ID:\\Zonal\\demo011\\tasking\\component -ID:\\Zonal\\demo011\\tasking\\component\\_Common -ID:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os\\TC39xQ -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Os\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug -ID:\\Zonal\\demo011\\tasking\\Debug\\appl -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\Debug\\component -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\src -g2 --make-target=component\\CanIf\\Implementation\\CanIf.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o component\\CanIf\\Implementation\\CanIf.src ..\\component\\CanIf\\Implementation\\CanIf.c"
	.compiler_name		"ctc"
	;source	'..\\component\\CanIf\\Implementation\\CanIf.c'

	
$TC162
	
	.sdecl	'.text.CanIf.CanIf_SetPrioByCanIdTxPduAsQueued',code,cluster('CanIf_SetPrioByCanIdTxPduAsQueued')
	.sect	'.text.CanIf.CanIf_SetPrioByCanIdTxPduAsQueued'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	     1  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	     2   *  COPYRIGHT
; ..\component\CanIf\Implementation\CanIf.c	     3   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\CanIf\Implementation\CanIf.c	     4   *  \verbatim
; ..\component\CanIf\Implementation\CanIf.c	     5   *  Copyright (c) 2020 by Vector Informatik GmbH.                                                  All rights reserved.
; ..\component\CanIf\Implementation\CanIf.c	     6   *
; ..\component\CanIf\Implementation\CanIf.c	     7   *                This software is copyright protected and proprietary to Vector Informatik GmbH.
; ..\component\CanIf\Implementation\CanIf.c	     8   *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
; ..\component\CanIf\Implementation\CanIf.c	     9   *                All other rights remain with Vector Informatik GmbH.
; ..\component\CanIf\Implementation\CanIf.c	    10   *  \endverbatim
; ..\component\CanIf\Implementation\CanIf.c	    11   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\CanIf\Implementation\CanIf.c	    12   *  FILE DESCRIPTION
; ..\component\CanIf\Implementation\CanIf.c	    13   *  -----------------------------------------------------------------------------------------------------------------*/
; ..\component\CanIf\Implementation\CanIf.c	    14  /**        \file  CanIf.c
; ..\component\CanIf\Implementation\CanIf.c	    15   *        \brief  CAN Interface source file.
; ..\component\CanIf\Implementation\CanIf.c	    16   *
; ..\component\CanIf\Implementation\CanIf.c	    17   *      \details  This file contains the implementation of the AUTOSAR CAN Interface module.
; ..\component\CanIf\Implementation\CanIf.c	    18   *
; ..\component\CanIf\Implementation\CanIf.c	    19   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	    20  
; ..\component\CanIf\Implementation\CanIf.c	    21  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	    22   *  REVISION HISTORY
; ..\component\CanIf\Implementation\CanIf.c	    23   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\CanIf\Implementation\CanIf.c	    24   *  Refer to the module's header file.
; ..\component\CanIf\Implementation\CanIf.c	    25   * 
; ..\component\CanIf\Implementation\CanIf.c	    26   *  FILE VERSION
; ..\component\CanIf\Implementation\CanIf.c	    27   *  -------------------------------------------------------------------------------------------------------------------
; ..\component\CanIf\Implementation\CanIf.c	    28   *  Refer to the VERSION CHECK below.
; ..\component\CanIf\Implementation\CanIf.c	    29   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	    30  
; ..\component\CanIf\Implementation\CanIf.c	    31  #define CANIF_SOURCE
; ..\component\CanIf\Implementation\CanIf.c	    32  
; ..\component\CanIf\Implementation\CanIf.c	    33  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	    34   *  INCLUDES
; ..\component\CanIf\Implementation\CanIf.c	    35   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	    36   
; ..\component\CanIf\Implementation\CanIf.c	    37  /* ECO_IGNORE_BLOCK_BEGIN */
; ..\component\CanIf\Implementation\CanIf.c	    38  /* \trace SPEC-1880, SPEC-3742, SPEC-1915, SPEC-1891, SPEC-1914, SPEC-1932, SPEC-1929 */
; ..\component\CanIf\Implementation\CanIf.c	    39  #include "CanIf.h"
; ..\component\CanIf\Implementation\CanIf.c	    40  
; ..\component\CanIf\Implementation\CanIf.c	    41  #include "CanIf_Cbk.h"
; ..\component\CanIf\Implementation\CanIf.c	    42  
; ..\component\CanIf\Implementation\CanIf.c	    43  /* \trace SPEC-1225, SPEC-1859, SPEC-1891 */
; ..\component\CanIf\Implementation\CanIf.c	    44  /* Can.h with implied Can_Cfg.h is already included in file CanIf_Cfg.h */
; ..\component\CanIf\Implementation\CanIf.c	    45  
; ..\component\CanIf\Implementation\CanIf.c	    46  #if !defined (CANIF_AVOID_VSTDLIB_COPY)
; ..\component\CanIf\Implementation\CanIf.c	    47  /* For VStdLib / CanIf.h/CanIf_Cfg.h has to be included before       */
; ..\component\CanIf\Implementation\CanIf.c	    48  /* possibility to explicitely avoid usage of VStdLib copy algorithm  */
; ..\component\CanIf\Implementation\CanIf.c	    49  # include "vstdlib.h"
; ..\component\CanIf\Implementation\CanIf.c	    50  
; ..\component\CanIf\Implementation\CanIf.c	    51  /* Check if VStdlib is system                                        */
; ..\component\CanIf\Implementation\CanIf.c	    52  #  if defined (VSTD_HL_USE_VSTD_RAMMEMCPY) /* COV_CANIF_ONLY_VECTOR_VSTDLIB_USED */
; ..\component\CanIf\Implementation\CanIf.c	    53  /* Copy algorithm is available                                       */
; ..\component\CanIf\Implementation\CanIf.c	    54  #   define CANIF_USES_VSTDLIB_COPY      STD_ON
; ..\component\CanIf\Implementation\CanIf.c	    55  #  endif
; ..\component\CanIf\Implementation\CanIf.c	    56  #endif
; ..\component\CanIf\Implementation\CanIf.c	    57  
; ..\component\CanIf\Implementation\CanIf.c	    58  #if !defined (CANIF_USES_VSTDLIB_COPY)
; ..\component\CanIf\Implementation\CanIf.c	    59  # define CANIF_USES_VSTDLIB_COPY      STD_OFF
; ..\component\CanIf\Implementation\CanIf.c	    60  #endif
; ..\component\CanIf\Implementation\CanIf.c	    61  
; ..\component\CanIf\Implementation\CanIf.c	    62  #if (CANIF_TRCV_HANDLING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	    63  # include "CanIf_CanTrcv.h"
; ..\component\CanIf\Implementation\CanIf.c	    64  #endif
; ..\component\CanIf\Implementation\CanIf.c	    65  
; ..\component\CanIf\Implementation\CanIf.c	    66  /* \trace SPEC-3741, SPEC-1838 */
; ..\component\CanIf\Implementation\CanIf.c	    67  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	    68  # include "Det.h"
; ..\component\CanIf\Implementation\CanIf.c	    69  #endif
; ..\component\CanIf\Implementation\CanIf.c	    70  
; ..\component\CanIf\Implementation\CanIf.c	    71  
; ..\component\CanIf\Implementation\CanIf.c	    72  #include "SchM_CanIf.h"
; ..\component\CanIf\Implementation\CanIf.c	    73  
; ..\component\CanIf\Implementation\CanIf.c	    74  #if (CANIF_BUS_MIRRORING_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	    75  # include "Mirror_Cbk.h"
; ..\component\CanIf\Implementation\CanIf.c	    76  #endif
; ..\component\CanIf\Implementation\CanIf.c	    77  
; ..\component\CanIf\Implementation\CanIf.c	    78  #if (CANIF_ENABLE_SECURITY_EVENT_REPORTING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	    79  # include "IdsM.h"
; ..\component\CanIf\Implementation\CanIf.c	    80  #endif
; ..\component\CanIf\Implementation\CanIf.c	    81  
; ..\component\CanIf\Implementation\CanIf.c	    82  /* ECO_IGNORE_BLOCK_END */
; ..\component\CanIf\Implementation\CanIf.c	    83  
; ..\component\CanIf\Implementation\CanIf.c	    84  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	    85   *  VERSION CHECK
; ..\component\CanIf\Implementation\CanIf.c	    86   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	    87   
; ..\component\CanIf\Implementation\CanIf.c	    88  /* CanIf_Cbk.h version check */
; ..\component\CanIf\Implementation\CanIf.c	    89  #if (CANIF_CBK_MAJOR_VERSION != 0x05u)
; ..\component\CanIf\Implementation\CanIf.c	    90  # error "Vendor specific major version number of CanIf.c and CanIf_Cbk.h are inconsistent!"
; ..\component\CanIf\Implementation\CanIf.c	    91  #endif
; ..\component\CanIf\Implementation\CanIf.c	    92  
; ..\component\CanIf\Implementation\CanIf.c	    93  #if (CANIF_CBK_MINOR_VERSION != 0x07u)
; ..\component\CanIf\Implementation\CanIf.c	    94  # error "Vendor specific minor version number of CanIf.c and CanIf_Cbk.h are inconsistent!"
; ..\component\CanIf\Implementation\CanIf.c	    95  #endif
; ..\component\CanIf\Implementation\CanIf.c	    96  
; ..\component\CanIf\Implementation\CanIf.c	    97  #if (CANIF_CBK_PATCH_VERSION != 0x00u)
; ..\component\CanIf\Implementation\CanIf.c	    98  # error "Vendor specific patch version number of CanIf.c and CanIf_Cbk.h are inconsistent!"
; ..\component\CanIf\Implementation\CanIf.c	    99  #endif
; ..\component\CanIf\Implementation\CanIf.c	   100  
; ..\component\CanIf\Implementation\CanIf.c	   101  /* CanIf_Types.h version check */
; ..\component\CanIf\Implementation\CanIf.c	   102  #if (CANIF_TYPES_MAJOR_VERSION != 0x06u)
; ..\component\CanIf\Implementation\CanIf.c	   103  # error "Vendor specific major version number of CanIf.c and CanIf_Types.h are inconsistent!"
; ..\component\CanIf\Implementation\CanIf.c	   104  #endif
; ..\component\CanIf\Implementation\CanIf.c	   105  
; ..\component\CanIf\Implementation\CanIf.c	   106  #if (CANIF_TYPES_MINOR_VERSION != 0x20u)
; ..\component\CanIf\Implementation\CanIf.c	   107  # error "Vendor specific minor version number of CanIf.c and CanIf_Types.h are inconsistent!"
; ..\component\CanIf\Implementation\CanIf.c	   108  #endif
; ..\component\CanIf\Implementation\CanIf.c	   109  
; ..\component\CanIf\Implementation\CanIf.c	   110  #if (CANIF_TYPES_PATCH_VERSION != 0x00u)
; ..\component\CanIf\Implementation\CanIf.c	   111  # error "Vendor specific patch version number of CanIf.c and CanIf_Types.h are inconsistent!"
; ..\component\CanIf\Implementation\CanIf.c	   112  #endif
; ..\component\CanIf\Implementation\CanIf.c	   113  
; ..\component\CanIf\Implementation\CanIf.c	   114  /* CanIf.h version check */
; ..\component\CanIf\Implementation\CanIf.c	   115  #if (CANIF_API_MAJOR_VERSION != 0x06u)
; ..\component\CanIf\Implementation\CanIf.c	   116  # error "Vendor specific major version number of CanIf.c and CanIf.h are inconsistent!"
; ..\component\CanIf\Implementation\CanIf.c	   117  #endif
; ..\component\CanIf\Implementation\CanIf.c	   118  
; ..\component\CanIf\Implementation\CanIf.c	   119  #if (CANIF_API_MINOR_VERSION != 0x25u)
; ..\component\CanIf\Implementation\CanIf.c	   120  # error "Vendor specific minor version number of CanIf.c and CanIf.h are inconsistent!"
; ..\component\CanIf\Implementation\CanIf.c	   121  #endif
; ..\component\CanIf\Implementation\CanIf.c	   122  
; ..\component\CanIf\Implementation\CanIf.c	   123  #if (CANIF_API_PATCH_VERSION != 0x00u)
; ..\component\CanIf\Implementation\CanIf.c	   124  # error "Vendor specific patch version number of CanIf.c and CanIf.h are inconsistent!"
; ..\component\CanIf\Implementation\CanIf.c	   125  #endif
; ..\component\CanIf\Implementation\CanIf.c	   126  
; ..\component\CanIf\Implementation\CanIf.c	   127  #if (CANIF_CPU_TYPE_SET_IN_ECUC_MODULE != CPU_TYPE)
; ..\component\CanIf\Implementation\CanIf.c	   128  # error "Invalid configuration! CPUType configured in EcuC-module differs from \"CPU_TYPE\" set in \"Platform_Types.h\"."
; ..\component\CanIf\Implementation\CanIf.c	   129  #endif
; ..\component\CanIf\Implementation\CanIf.c	   130  
; ..\component\CanIf\Implementation\CanIf.c	   131  /* Check the compatibility version of generator */
; ..\component\CanIf\Implementation\CanIf.c	   132  # if (CANIF_CFG5_GENERATOR_COMPATIBILITY_VERSION != CANIF_GENDATA_COMPATIBILITY_VERSION)
; ..\component\CanIf\Implementation\CanIf.c	   133  #  error "Module CanIf: Source and Generated Header files are inconsistent! Please check the version of the generator."
; ..\component\CanIf\Implementation\CanIf.c	   134  # endif
; ..\component\CanIf\Implementation\CanIf.c	   135  
; ..\component\CanIf\Implementation\CanIf.c	   136  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   137   *  COMPATIBILITY / DEFAULTS
; ..\component\CanIf\Implementation\CanIf.c	   138   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   139   
; ..\component\CanIf\Implementation\CanIf.c	   140  /* ESCAN00084557 */
; ..\component\CanIf\Implementation\CanIf.c	   141  #if defined (CANIF_RX_PASS_STATIC_DLC)    /* COV_CANIF_FEATURE_DISCONTINUED */
; ..\component\CanIf\Implementation\CanIf.c	   142  # if (CANIF_RX_PASS_STATIC_DLC == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   143  #  error "Feature CANIF_RX_PASS_STATIC_DLC is NOT supported by CAN interface anymore."
; ..\component\CanIf\Implementation\CanIf.c	   144  # endif
; ..\component\CanIf\Implementation\CanIf.c	   145  #endif
; ..\component\CanIf\Implementation\CanIf.c	   146  
; ..\component\CanIf\Implementation\CanIf.c	   147  /* WakeUp Validation without WakeUp support not acceptable */
; ..\component\CanIf\Implementation\CanIf.c	   148  #if (CANIF_WAKEUP_VALIDATION == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   149  # if (CANIF_WAKEUP_SUPPORT == STD_OFF)
; ..\component\CanIf\Implementation\CanIf.c	   150  #  error "Invalid configuration: Wake up validation (CANIF_WAKEUP_VALIDATION) is activated without activating wake up support (CANIF_WAKEUP_SUPPORT)"
; ..\component\CanIf\Implementation\CanIf.c	   151  # endif
; ..\component\CanIf\Implementation\CanIf.c	   152  #endif
; ..\component\CanIf\Implementation\CanIf.c	   153  
; ..\component\CanIf\Implementation\CanIf.c	   154  #if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	   155  # if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   156  #  error "Invalid configuration: One channel optimization not possible with transceiver mapping"
; ..\component\CanIf\Implementation\CanIf.c	   157  # endif
; ..\component\CanIf\Implementation\CanIf.c	   158  #endif  
; ..\component\CanIf\Implementation\CanIf.c	   159  
; ..\component\CanIf\Implementation\CanIf.c	   160  #if (CANIF_WAKEUP_VALIDATION == STD_OFF)
; ..\component\CanIf\Implementation\CanIf.c	   161  # if (CANIF_WAKEUP_VALID_ALL_RX_MSGS == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   162  #  error "Invalid configuration"
; ..\component\CanIf\Implementation\CanIf.c	   163  # endif
; ..\component\CanIf\Implementation\CanIf.c	   164  #endif
; ..\component\CanIf\Implementation\CanIf.c	   165  
; ..\component\CanIf\Implementation\CanIf.c	   166  #if (CANIF_PN_TRCV_HANDLING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   167  # if (CANIF_TRCV_HANDLING == STD_OFF)
; ..\component\CanIf\Implementation\CanIf.c	   168  #  error "Invalid configuration: Partial networking transceiver handling (CANIF_PN_TRCV_HANDLING) is enabled while transceiver handling is disabled (CANIF_TRCV_HANDLING)"
; ..\component\CanIf\Implementation\CanIf.c	   169  # endif
; ..\component\CanIf\Implementation\CanIf.c	   170  #endif /* (CANIF_PN_TRCV_HANDLING == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	   171  
; ..\component\CanIf\Implementation\CanIf.c	   172  #if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   173  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	   174  #  error "Invalid configuration: One channel optimization not possible if multiple CAN drivers are used"
; ..\component\CanIf\Implementation\CanIf.c	   175  # endif
; ..\component\CanIf\Implementation\CanIf.c	   176  #endif
; ..\component\CanIf\Implementation\CanIf.c	   177  
; ..\component\CanIf\Implementation\CanIf.c	   178  #if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   179  # if (CANIF_TRANSMIT_CANCELLATION == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   180  #  error "HW Tx-cancellation is NOT supported in combination with Tx-Buffer Type FIFO!"
; ..\component\CanIf\Implementation\CanIf.c	   181  # endif
; ..\component\CanIf\Implementation\CanIf.c	   182  #endif
; ..\component\CanIf\Implementation\CanIf.c	   183  
; ..\component\CanIf\Implementation\CanIf.c	   184  /* J1939DynAddr support without ExtendedIds support is not acceptable */
; ..\component\CanIf\Implementation\CanIf.c	   185  #if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	   186  # if (CANIF_EXTENDEDID_SUPPORT == STD_OFF)
; ..\component\CanIf\Implementation\CanIf.c	   187  #  error "Invalid configuration: J1939DynAddr support (CANIF_J1939_DYN_ADDR_SUPPORT) is activated without activating ExtendedIds support (CANIF_EXTENDEDID_SUPPORT)"
; ..\component\CanIf\Implementation\CanIf.c	   188  # endif
; ..\component\CanIf\Implementation\CanIf.c	   189  #endif
; ..\component\CanIf\Implementation\CanIf.c	   190  
; ..\component\CanIf\Implementation\CanIf.c	   191  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   192   *  LOCAL CONSTANT MACROS / LOCAL FUNCTION MACROS
; ..\component\CanIf\Implementation\CanIf.c	   193   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   194  #if (CANIF_EXTENDEDID_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   195  /* coded in CANIF_CFG_RX_CANID */
; ..\component\CanIf\Implementation\CanIf.c	   196  # define CANIF_MASKCODE_RANGE   0x20000000u /* changed due to ESCAN00075241 */
; ..\component\CanIf\Implementation\CanIf.c	   197  # define CANIF_FDFLAG           0x40000000u
; ..\component\CanIf\Implementation\CanIf.c	   198  # define CANIF_FDFLAGSHIFTPOS   30u
; ..\component\CanIf\Implementation\CanIf.c	   199  /* coded in CANIF_CFG_RX_MASK */
; ..\component\CanIf\Implementation\CanIf.c	   200  # define CANIF_STOP_FLAG        0x40000000u
; ..\component\CanIf\Implementation\CanIf.c	   201  # define CANIF_RANGE_FLAG       0x20000000u
; ..\component\CanIf\Implementation\CanIf.c	   202  #else
; ..\component\CanIf\Implementation\CanIf.c	   203  /* coded in CANIF_CFG_RX_CANID */
; ..\component\CanIf\Implementation\CanIf.c	   204  # define CANIF_MASKCODE_RANGE   0x2000u /* changed due to ESCAN00075241 */
; ..\component\CanIf\Implementation\CanIf.c	   205  # define CANIF_FDFLAG           0x4000u
; ..\component\CanIf\Implementation\CanIf.c	   206  # define CANIF_FDFLAGSHIFTPOS   14u
; ..\component\CanIf\Implementation\CanIf.c	   207  /* coded in CANIF_CFG_RX_MASK */
; ..\component\CanIf\Implementation\CanIf.c	   208  # define CANIF_STOP_FLAG        0x4000u
; ..\component\CanIf\Implementation\CanIf.c	   209  # define CANIF_RANGE_FLAG       0x2000u
; ..\component\CanIf\Implementation\CanIf.c	   210  #endif
; ..\component\CanIf\Implementation\CanIf.c	   211  
; ..\component\CanIf\Implementation\CanIf.c	   212  /* Determine MsgType (FD or none FD) from CanId */
; ..\component\CanIf\Implementation\CanIf.c	   213  /* IN: CanId (has to contain the FD-Flag) */
; ..\component\CanIf\Implementation\CanIf.c	   214  /* OUT: 0: None FD / 1: FD */
; ..\component\CanIf\Implementation\CanIf.c	   215  #define CanIf_GetShiftedFdFlag(canId) (uint8)(((canId) & CANIF_FDFLAG) >> CANIF_FDFLAGSHIFTPOS) /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\CanIf\Implementation\CanIf.c	   216  
; ..\component\CanIf\Implementation\CanIf.c	   217  /* J1939 specific constants
; ..\component\CanIf\Implementation\CanIf.c	   218   *  DA == Destination Address
; ..\component\CanIf\Implementation\CanIf.c	   219   *  SA == Source Address
; ..\component\CanIf\Implementation\CanIf.c	   220   *  INV == inverted
; ..\component\CanIf\Implementation\CanIf.c	   221   *  ADDR == address
; ..\component\CanIf\Implementation\CanIf.c	   222   *  RQST == request
; ..\component\CanIf\Implementation\CanIf.c	   223   *  PGN == Parameter Group Number
; ..\component\CanIf\Implementation\CanIf.c	   224   *  PDU1 -> 4.BYTE == SA, 3.BYTE == DA, possible values: 0..EF
; ..\component\CanIf\Implementation\CanIf.c	   225   *  PDU2 -> 4.BYTE == SA, 3.BYTE == part of PGN
; ..\component\CanIf\Implementation\CanIf.c	   226   *  */
; ..\component\CanIf\Implementation\CanIf.c	   227  #define CANIF_J1939_NULL_ADDR                 0xFEu
; ..\component\CanIf\Implementation\CanIf.c	   228  #define CANIF_J1939_BROADCAST_ADDR            0xFFu
; ..\component\CanIf\Implementation\CanIf.c	   229  #define CANIF_J1939_DATA_PAGE_MASK            0x03000000u
; ..\component\CanIf\Implementation\CanIf.c	   230  #define CANIF_J1939_PGN_MASK                  0x03FF0000u
; ..\component\CanIf\Implementation\CanIf.c	   231  #define CANIF_J1939_AC_PGN                    0x00EE0000u
; ..\component\CanIf\Implementation\CanIf.c	   232  #define CANIF_J1939_MIN_PDU2_MASK             0x00F00000u
; ..\component\CanIf\Implementation\CanIf.c	   233  #define CANIF_J1939_DA_MASK                   0x0000FF00u
; ..\component\CanIf\Implementation\CanIf.c	   234  #define CANIF_J1939_INV_DA_MASK               0xFFFF00FFu
; ..\component\CanIf\Implementation\CanIf.c	   235  #define CANIF_J1939_SA_MASK                   0x000000FFu
; ..\component\CanIf\Implementation\CanIf.c	   236  #define CANIF_J1939_INV_SA_MASK               0xFFFFFF00u
; ..\component\CanIf\Implementation\CanIf.c	   237  #define CANIF_J1939_RQST_PGN                  0x00EA0000u
; ..\component\CanIf\Implementation\CanIf.c	   238  #define CANIF_J1939_ACKM_ACKADDR_POS          4u
; ..\component\CanIf\Implementation\CanIf.c	   239  #define CANIF_J1939_ACKM_PGN                  0x00E80000u
; ..\component\CanIf\Implementation\CanIf.c	   240  #define CANIF_J1939_CTRL_ADDR_TBL_SIZE        256u
; ..\component\CanIf\Implementation\CanIf.c	   241  
; ..\component\CanIf\Implementation\CanIf.c	   242  /* SBSW_CANIF_30 */
; ..\component\CanIf\Implementation\CanIf.c	   243  #if (CANIF_META_DATA_RX_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   244  # if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED) 
; ..\component\CanIf\Implementation\CanIf.c	   245  #  if(CANIF_CFG_MAXRXDLC_PLUS_MAXMETADATALEN <= CANIF_J1939_ACKM_ACKADDR_POS)
; ..\component\CanIf\Implementation\CanIf.c	   246  #   error "Invalid generated data: CANIF_CFG_MAXRXDLC_PLUS_MAXMETADATALEN is too small"
; ..\component\CanIf\Implementation\CanIf.c	   247  #  endif
; ..\component\CanIf\Implementation\CanIf.c	   248  # endif
; ..\component\CanIf\Implementation\CanIf.c	   249  #endif
; ..\component\CanIf\Implementation\CanIf.c	   250  
; ..\component\CanIf\Implementation\CanIf.c	   251  
; ..\component\CanIf\Implementation\CanIf.c	   252  /* ParameterList: uint8 Hrh, PduIdType PduId, P2CONST(uint8, AUTOMATIC, CANIF_CBK_DRV_VAR) CanSduPtr, uint8 CanDlc, Can_IdType CanId */
; ..\component\CanIf\Implementation\CanIf.c	   253  #if ((CANIF_SUPPORT_NMOSEK_INDICATION == STD_ON) || (CANIF_META_DATA_RX_SUPPORT == STD_ON) || (CANIF_RX_INDICATION_TYPE_IV_IS_USED == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	   254  # define CanIf_Indirect_HlIndication(hrh, pduid, cansduptr, candlc, canid)     CanIf_HlIndication((hrh), (pduid), (cansduptr), (candlc), (canid)) /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\CanIf\Implementation\CanIf.c	   255  #else
; ..\component\CanIf\Implementation\CanIf.c	   256  # define CanIf_Indirect_HlIndication(hrh, pduid, cansduptr, candlc, canid)     CanIf_HlIndication((hrh), (pduid), (cansduptr), (candlc)) /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\CanIf\Implementation\CanIf.c	   257  #endif
; ..\component\CanIf\Implementation\CanIf.c	   258  
; ..\component\CanIf\Implementation\CanIf.c	   259  
; ..\component\CanIf\Implementation\CanIf.c	   260  /* generated types */
; ..\component\CanIf\Implementation\CanIf.c	   261  
; ..\component\CanIf\Implementation\CanIf.c	   262  #define CanIf_ControllerType                               CanIf_CtrlStatesIdxOfTxPduConfigType
; ..\component\CanIf\Implementation\CanIf.c	   263  #define CanIf_RxIndFctListIdxType                          CanIf_RxIndicationFctListIdxOfRxPduConfigType
; ..\component\CanIf\Implementation\CanIf.c	   264  #define CanIf_TxConfFctListIdxType                         CanIf_TxConfirmationFctListIdxOfTxPduConfigType
; ..\component\CanIf\Implementation\CanIf.c	   265  #define CanIf_TxPduQueueType                               CanIf_TxPduQueueIndexStartIdxOfControllerConfigType
; ..\component\CanIf\Implementation\CanIf.c	   266  #define CanIf_CanTrcvFctTblIdx                             CanIf_CanTrcvFctTblIdxOfTransceiverUpToLowMapType
; ..\component\CanIf\Implementation\CanIf.c	   267  
; ..\component\CanIf\Implementation\CanIf.c	   268  
; ..\component\CanIf\Implementation\CanIf.c	   269  #define  CanIf_AnyIdxType uint32_least
; ..\component\CanIf\Implementation\CanIf.c	   270  
; ..\component\CanIf\Implementation\CanIf.c	   271  
; ..\component\CanIf\Implementation\CanIf.c	   272  /* \trace SPEC-5228 */
; ..\component\CanIf\Implementation\CanIf.c	   273  #if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	   274  # define CANIF_CHANNEL_CANTYPE_FIRST
; ..\component\CanIf\Implementation\CanIf.c	   275  # define CANIF_CHANNEL_CANTYPE_ONLY                   void
; ..\component\CanIf\Implementation\CanIf.c	   276  # define CANIF_CHANNEL_CANPARA_ONLY
; ..\component\CanIf\Implementation\CanIf.c	   277  # define CANIF_CHANNEL_CANPARA_FIRST
; ..\component\CanIf\Implementation\CanIf.c	   278  # define CANIF_CHANNEL_CANPARA_FIRST_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	   279  # define CanIf_Controller_Value                       0u
; ..\component\CanIf\Implementation\CanIf.c	   280  # define CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	   281  # define CANIF_WUCHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	   282  # define CanIf_Controller_Value_Local                 0u
; ..\component\CanIf\Implementation\CanIf.c	   283  # define CanIf_WU_Controller_Value_Local              0u
; ..\component\CanIf\Implementation\CanIf.c	   284  # define CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE     CanIf_GetMaxTrcvHandleIdPlusOne()
; ..\component\CanIf\Implementation\CanIf.c	   285  #else
; ..\component\CanIf\Implementation\CanIf.c	   286  # define CANIF_CHANNEL_CANTYPE_FIRST                  CanIf_ControllerType ControllerId,
; ..\component\CanIf\Implementation\CanIf.c	   287  # define CANIF_CHANNEL_CANTYPE_ONLY                   CanIf_ControllerType ControllerId
; ..\component\CanIf\Implementation\CanIf.c	   288  # define CANIF_CHANNEL_CANPARA_ONLY                   ControllerId
; ..\component\CanIf\Implementation\CanIf.c	   289  # define CANIF_CHANNEL_CANPARA_FIRST                  ControllerId,
; ..\component\CanIf\Implementation\CanIf.c	   290  # define CANIF_CHANNEL_CANPARA_FIRST_LOCAL            controller,
; ..\component\CanIf\Implementation\CanIf.c	   291  # define CanIf_Controller_Value                       ControllerId
; ..\component\CanIf\Implementation\CanIf.c	   292  # define CANIF_CHANNEL_CANTYPE_LOCAL                  CanIf_ControllerType controller;
; ..\component\CanIf\Implementation\CanIf.c	   293  # define CANIF_WUCHANNEL_CANTYPE_LOCAL                CanIf_ControllerType wuController;
; ..\component\CanIf\Implementation\CanIf.c	   294  # define CanIf_Controller_Value_Local                 controller
; ..\component\CanIf\Implementation\CanIf.c	   295  # define CanIf_WU_Controller_Value_Local              wuController
; ..\component\CanIf\Implementation\CanIf.c	   296  # define CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE     CanIf_GetMaxTrcvHandleIdPlusOne()
; ..\component\CanIf\Implementation\CanIf.c	   297  #endif
; ..\component\CanIf\Implementation\CanIf.c	   298  
; ..\component\CanIf\Implementation\CanIf.c	   299  # define CANIF_CFG_MAX_CONTROLLER                     CanIf_GetSizeOfCtrlStates()
; ..\component\CanIf\Implementation\CanIf.c	   300  # define CANIF_CFG_TX_CONTROLLER(index)               CanIf_GetCtrlStatesIdxOfTxPduConfig(index) /* PRQA S 3453 */ /* MD_MSR_FctLikeMacro */
; ..\component\CanIf\Implementation\CanIf.c	   301  
; ..\component\CanIf\Implementation\CanIf.c	   302  /* MAX valid TransceiverId with which the transceiver indication functions may be called */
; ..\component\CanIf\Implementation\CanIf.c	   303  #if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   304  # define CANIF_CFG_MAX_CANTRCV_TRCVHANDLEIDPLUSONE    CanIf_GetSizeOfTransceiverUpToUpperMap()
; ..\component\CanIf\Implementation\CanIf.c	   305  #else
; ..\component\CanIf\Implementation\CanIf.c	   306  # define CANIF_CFG_MAX_CANTRCV_TRCVHANDLEIDPLUSONE    CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE
; ..\component\CanIf\Implementation\CanIf.c	   307  #endif
; ..\component\CanIf\Implementation\CanIf.c	   308  
; ..\component\CanIf\Implementation\CanIf.c	   309  #if (CANIF_TRCV_HANDLING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   310  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	   311  #  define CanIf_TrcvIdUpper                     0u
; ..\component\CanIf\Implementation\CanIf.c	   312  # else
; ..\component\CanIf\Implementation\CanIf.c	   313  #  define CanIf_TrcvIdUpper                     TransceiverId
; ..\component\CanIf\Implementation\CanIf.c	   314  # endif
; ..\component\CanIf\Implementation\CanIf.c	   315  #endif
; ..\component\CanIf\Implementation\CanIf.c	   316  
; ..\component\CanIf\Implementation\CanIf.c	   317  #define CANIF_CFG_GENERATORCOMPATIBILITYVERSION            CanIf_GetGeneratorCompatibilityVersion()
; ..\component\CanIf\Implementation\CanIf.c	   318  #define CANIF_CFG_MAGICNUMBER                              CanIf_GetFinalMagicNumber()
; ..\component\CanIf\Implementation\CanIf.c	   319  
; ..\component\CanIf\Implementation\CanIf.c	   320  #define CANIF_CFG_MAX_MAILBOXES                            CanIf_GetSizeOfMailBoxConfig()
; ..\component\CanIf\Implementation\CanIf.c	   321  #define CANIF_CFG_MAX_TXPDUS                               CanIf_GetSizeOfTxPduConfig()
; ..\component\CanIf\Implementation\CanIf.c	   322  #define CANIF_CFG_MAX_ULTXPDUS                             CanIf_GetSizeOfUlTxPduId2InternalTxPduId()
; ..\component\CanIf\Implementation\CanIf.c	   323                                                             
; ..\component\CanIf\Implementation\CanIf.c	   324  #define CANIF_CFG_MAX_TXCONFIRMATIONS                      CanIf_GetSizeOfTxConfirmationFctList()
; ..\component\CanIf\Implementation\CanIf.c	   325  #define CANIF_CFG_MAX_RXPDUS                               CanIf_GetSizeOfRxPduConfig()
; ..\component\CanIf\Implementation\CanIf.c	   326  #define CANIF_CFG_MAX_ULRXPDUS                             CanIf_GetSizeOfUlRxPduId2InternalRxPduId()
; ..\component\CanIf\Implementation\CanIf.c	   327  
; ..\component\CanIf\Implementation\CanIf.c	   328  #define CANIF_CFG_MAX_RXINDICATIONS                        CanIf_GetSizeOfRxIndicationFctList()
; ..\component\CanIf\Implementation\CanIf.c	   329  #define CANIF_CFG_MAX_WAKEUPSOURCES                        CanIf_GetMaxWakeUpSources()
; ..\component\CanIf\Implementation\CanIf.c	   330  
; ..\component\CanIf\Implementation\CanIf.c	   331  /* PRQA S 3453 CANIF_FUNCTION_LIKE_MACRO */ /* MD_MSR_FctLikeMacro */
; ..\component\CanIf\Implementation\CanIf.c	   332  
; ..\component\CanIf\Implementation\CanIf.c	   333  /* USAGE: Only if  CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	   334  /* IN: Index get by CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX() */
; ..\component\CanIf\Implementation\CanIf.c	   335  /* OUT: CanIf-internal hxh-offset in order to be able to calculate the CanDrv specific hxh-index. For calculation just
; ..\component\CanIf\Implementation\CanIf.c	   336     subtract the offset from the CanIf specific one which e.g. retrieved via CANIF_CFG_TX_HTH(). */
; ..\component\CanIf\Implementation\CanIf.c	   337  #define CANIF_CFG_MULTIPLECANDRV_HXHOFFSET(index)          CanIf_GetHxhOffset(index)
; ..\component\CanIf\Implementation\CanIf.c	   338  
; ..\component\CanIf\Implementation\CanIf.c	   339  /* Access to table: CanIf_CanIfCtrlId2MappedTxBuffersConfig */
; ..\component\CanIf\Implementation\CanIf.c	   340  /* IN: CanIf-internal CAN channel handle ID */
; ..\component\CanIf\Implementation\CanIf.c	   341  /* OUT: Start-index for corresponding CAN channel into table CanIf_MappedTxBuffersConfig */
; ..\component\CanIf\Implementation\CanIf.c	   342  #define CANIF_CFG_CTRL_STARTIDX2MAPPEDTXBUFFERS(index)     CanIf_GetMappedTxBuffersConfigStartIdxOfCanIfCtrlId2MappedTxBuffersConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   343  /* IN: CanIf-internal CAN channel handle ID */
; ..\component\CanIf\Implementation\CanIf.c	   344  /* OUT: Stop-index for corresponding CAN channel into table CanIf_MappedTxBuffersConfig */
; ..\component\CanIf\Implementation\CanIf.c	   345  #define CANIF_CFG_CTRL_STOPIDX2MAPPEDTXBUFFERS(index)      CanIf_GetMappedTxBuffersConfigEndIdxOfCanIfCtrlId2MappedTxBuffersConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   346  
; ..\component\CanIf\Implementation\CanIf.c	   347  /* Access to table: CanIf_MappedTxBuffersConfig */
; ..\component\CanIf\Implementation\CanIf.c	   348  /* IN: Index retrieved via macros: CANIF_CFG_CTRL_STARTIDX2MAPPEDTXBUFFERS / CANIF_CFG_CTRL_STOPIDX2MAPPEDTXBUFFERS */
; ..\component\CanIf\Implementation\CanIf.c	   349  /* OUT: Index into table CanIf_MailboxConfig */
; ..\component\CanIf\Implementation\CanIf.c	   350  #define CANIF_CFG_MAPPEDTXBUFFERS(index)                   CanIf_GetMailBoxConfigIdxOfMappedTxBuffersConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   351  
; ..\component\CanIf\Implementation\CanIf.c	   352  /* TRUE: CAN driver index valid, FALSE CAN driver index NOT valid
; ..\component\CanIf\Implementation\CanIf.c	   353   * Only relevant in PBS-configurations! FALSE only makes sense in PBS-configurations, where a CAN driver may be disabled in an identity.
; ..\component\CanIf\Implementation\CanIf.c	   354   * Only if this one returns TRUE any CAN driver function may be read from table "CanIf_CanDrvFctTbl" */
; ..\component\CanIf\Implementation\CanIf.c	   355  #define CANIF_CFG_IS_CANDRVINDEXVALID(index)               CanIf_IsCanDrvFctTblUsedOfCanChannelIdUpToLowMap(index)  /* Input: CanIfChannel, Output: TRUE / FALSE */
; ..\component\CanIf\Implementation\CanIf.c	   356  #define CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(index)        CanIf_GetCanDrvFctTblIdxOfCanChannelIdUpToLowMap(index)  /* Input: CanIfChannel, Output: CanDriverIndex  */
; ..\component\CanIf\Implementation\CanIf.c	   357  
; ..\component\CanIf\Implementation\CanIf.c	   358  /* J1939(Nm) configuration */
; ..\component\CanIf\Implementation\CanIf.c	   359  #define CANIF_CFG_CTRLJ1939DYNADDRSUPPORT(index)           CanIf_GetJ1939DynAddrSupportOfCtrlConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   360  /* NOTE: The value returned from following table may only be used if the CAN channel (== index) was verified with following condition
; ..\component\CanIf\Implementation\CanIf.c	   361   * "CANIF_CFG_CTRLJ1939DYNADDRSUPPORT(index) != CANIF_J1939_DYN_ADDR_DISABLED"
; ..\component\CanIf\Implementation\CanIf.c	   362   * ONLY if this condition is TRUE the value returned from following table may be used! */
; ..\component\CanIf\Implementation\CanIf.c	   363  #define CANIF_CFG_CTRLID2J1939DYNADDROFFSET(index)         CanIf_GetJ1939DynAddrOffsetOfCtrlConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   364  
; ..\component\CanIf\Implementation\CanIf.c	   365  
; ..\component\CanIf\Implementation\CanIf.c	   366  #if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   367  # define CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(index)      CanIf_GetChannelIndexOfCanChannelIdUpToLowMap(index) /* Input:CanIfChannel Output:CanChannelIndex */
; ..\component\CanIf\Implementation\CanIf.c	   368  # define CANIF_GET_CANSETCTRLMODEFCT(index)                CanIf_GetSetControllerModeFctOfCanDrvFctTbl(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(index))
; ..\component\CanIf\Implementation\CanIf.c	   369  #else
; ..\component\CanIf\Implementation\CanIf.c	   370  # define CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(index)      (index)
; ..\component\CanIf\Implementation\CanIf.c	   371  # define canSetCtrlModeFct                                 Can_SetControllerMode
; ..\component\CanIf\Implementation\CanIf.c	   372  #endif
; ..\component\CanIf\Implementation\CanIf.c	   373  
; ..\component\CanIf\Implementation\CanIf.c	   374   
; ..\component\CanIf\Implementation\CanIf.c	   375  #if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   376  # define CANIF_GET_CANCANCELTXFCT(index)                   CanIf_GetCancelTxFctOfCanDrvFctTbl(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(index))
; ..\component\CanIf\Implementation\CanIf.c	   377  #else
; ..\component\CanIf\Implementation\CanIf.c	   378  # define canCancelTxFct                                    Can_CancelTx
; ..\component\CanIf\Implementation\CanIf.c	   379  #endif
; ..\component\CanIf\Implementation\CanIf.c	   380  
; ..\component\CanIf\Implementation\CanIf.c	   381  /* Access to table: CanIf_RxPduConfig */
; ..\component\CanIf\Implementation\CanIf.c	   382  #define CANIF_CFG_RX_RXINDICATION(index)                   CanIf_GetRxIndicationFctListIdxOfRxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   383  #define CANIF_CFG_RX_DLC(index)                            CanIf_GetRxPduDlcOfRxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   384  #define CANIF_CFG_RX_UPPERPDUID(index)                     CanIf_GetUpperPduIdOfRxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   385  #define CANIF_CFG_RX_MASK(index)                           CanIf_GetRxPduMaskOfRxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   386  #define CANIF_CFG_RX_CANID(index)                          CanIf_GetRxPduCanIdOfRxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   387  #define CANIF_CFG_RX_RXMETADATALENGTH(index)               CanIf_GetRxMetaDataLengthOfRxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   388  #define CANIF_CFG_RX_MSGTYPE(index)                        CanIf_GetMsgTypeOfRxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   389  /* IN: Internal CanIfRxPduId to access table CanIf_RxPduConfig[] */
; ..\component\CanIf\Implementation\CanIf.c	   390  /* OUT: TRUE: data checksum Rx-PDU, FALSE: None data checksum Rx-PDU */
; ..\component\CanIf\Implementation\CanIf.c	   391  #define CANIF_CFG_RX_ISDATACHECKSUMPDU(index)              CanIf_IsIsDataChecksumRxPduOfRxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   392  /* IN: Internal CanIfRxPduId to access table CanIf_RxPduConfig[] */
; ..\component\CanIf\Implementation\CanIf.c	   393  /* OUT: TRUE:  ReceptionMode  Rx-PDU, FALSE: None ReceptionMode  Rx-PDU */
; ..\component\CanIf\Implementation\CanIf.c	   394  #define CANIF_CFG_RX_ISRECEPTIONMODEPDU(index)             CanIf_IsPduRxModeUsedOfRxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   395  /* IN: Internal CanIfRxPduId to access table CanIf_RxPduConfig[] */
; ..\component\CanIf\Implementation\CanIf.c	   396  /* OUT: Index to access the array CanIf_PduReceptionMode[] */
; ..\component\CanIf\Implementation\CanIf.c	   397  #define CANIF_CFG_RX_PDURECEPTIONMODEIDX(Index)            CanIf_GetPduRxModeIdxOfRxPduConfig(Index)
; ..\component\CanIf\Implementation\CanIf.c	   398  /* IN: External CanIfRxPduId */
; ..\component\CanIf\Implementation\CanIf.c	   399  /* OUT: Internal CanIfRxPduId */
; ..\component\CanIf\Implementation\CanIf.c	   400  #define CANIF_CFG_EXTRXPDUID2INTRXPDUID(index)             CanIf_GetRxPduConfigIdxOfUlRxPduId2InternalRxPduId(index)
; ..\component\CanIf\Implementation\CanIf.c	   401  /* IN: Internal CanIfRxPduId */
; ..\component\CanIf\Implementation\CanIf.c	   402  /* OUT: External CanIfRxPduId */
; ..\component\CanIf\Implementation\CanIf.c	   403  #define CANIF_CFG_INTRXPDUID2EXTRXPDUID(index)             CanIf_GetCanIfRxPduIdOfRxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   404  /* IN: Internal CanIfRxPduId to access table CanIf_RxPduConfig[] */
; ..\component\CanIf\Implementation\CanIf.c	   405  /* OUT: TRUE: CAN-Nm Rx-PDU (for Wakeup validation), FALSE: No CAN-Nm Rx-PDU */
; ..\component\CanIf\Implementation\CanIf.c	   406  #define CANIF_ISCANNMRXPDU(index)                          CanIf_IsIsCanNmRxPduOfRxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   407  
; ..\component\CanIf\Implementation\CanIf.c	   408  
; ..\component\CanIf\Implementation\CanIf.c	   409  /* Read/write-access to variable CanIf_PduReceptionMode[] */
; ..\component\CanIf\Implementation\CanIf.c	   410  #define CANIF_VAR_SET_PDU_RECEPTION_MODE(Index, Value)     CanIf_SetPduRxMode(Index, Value)
; ..\component\CanIf\Implementation\CanIf.c	   411  #define CANIF_VAR_GET_PDU_RECEPTION_MODE(Index)            CanIf_GetPduRxMode(Index)
; ..\component\CanIf\Implementation\CanIf.c	   412  
; ..\component\CanIf\Implementation\CanIf.c	   413  /* NOTE: Please see description of "CANIF_CFG_CTRLID2J1939DYNADDROFFSET" before usage! */
; ..\component\CanIf\Implementation\CanIf.c	   414  #if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	   415  # define CANIF_VAR_J1939RXADDR_LOOKUP(ch, addr)            CanIf_GetJ1939RxAddr_Lookup(addr)
; ..\component\CanIf\Implementation\CanIf.c	   416  # define CANIF_VAR_SET_J1939RXADDR_LOOKUP(ch, addr, value) CanIf_SetJ1939RxAddr_Lookup((addr), (value))
; ..\component\CanIf\Implementation\CanIf.c	   417  #else
; ..\component\CanIf\Implementation\CanIf.c	   418  # define CANIF_VAR_J1939RXADDR_LOOKUP(ch, addr)            CanIf_GetJ1939RxAddr_Lookup(CANIF_CFG_CTRLID2J1939DYNADDROFFSET(ch) + (addr))
; ..\component\CanIf\Implementation\CanIf.c	   419  # define CANIF_VAR_SET_J1939RXADDR_LOOKUP(ch, addr, value) CanIf_SetJ1939RxAddr_Lookup((CANIF_CFG_CTRLID2J1939DYNADDROFFSET(ch) + (addr)), (value))
; ..\component\CanIf\Implementation\CanIf.c	   420  #endif
; ..\component\CanIf\Implementation\CanIf.c	   421  
; ..\component\CanIf\Implementation\CanIf.c	   422  /* Access to table: CanIf_TxPduConfig */
; ..\component\CanIf\Implementation\CanIf.c	   423  #define CANIF_CFG_TX_CANID(index)                          CanIf_GetCanIdOfTxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   424  #define CANIF_CFG_TX_HTH(index)                            CanIf_GetMailBoxConfigIdxOfTxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   425  #define CANIF_CFG_TX_TXCONFIRMATION(index)                 CanIf_GetTxConfirmationFctListIdxOfTxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   426  #define CANIF_CFG_TX_UPPERLAYERTXPDUID(index)              CanIf_GetUpperLayerTxPduIdOfTxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   427  #define CANIF_CFG_TX_TXMETADATALENGTH(index)               CanIf_GetTxMetaDataLengthOfTxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   428  #define CANIF_CFG_TX_LENGTH(index)                         CanIf_GetTxPduLengthOfTxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   429  #define CANIF_CFG_TX_CANIDTXMASK(index)                    CanIf_GetCanIdTxMaskOfTxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   430  /* IN: Internal CanIfTxPduId to access table: CanIf_TxPduConfig[] */
; ..\component\CanIf\Implementation\CanIf.c	   431  /* OUT: TRUE: data checksum Tx-PDU, FALSE: None data checksum Tx-PDU */
; ..\component\CanIf\Implementation\CanIf.c	   432  #define CANIF_CFG_TX_ISDATACHECKSUMPDU(index)              CanIf_IsIsDataChecksumTxPduOfTxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   433  /* IN: Internal CanIfTxPduId to access table: CanIf_TxPduConfig[] */
; ..\component\CanIf\Implementation\CanIf.c	   434  /* OUT: TRUE: Tx-PDU will pass the Pn Wakeup filter, FALSE: Tx-PDU won't pass the Pn Wakeup filter */
; ..\component\CanIf\Implementation\CanIf.c	   435  #define CANIF_CFG_ISPNWUTXPDU(index)                       CanIf_IsIsPnWuTxPduOfTxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   436  /* IN: Internal CanIfTxPduId to access table: CanIf_TxPduConfig[] */
; ..\component\CanIf\Implementation\CanIf.c	   437  /* OUT: TRUE: Truncation of Tx-PDU is enabled, FALSE: Truncation of Tx-PDU is disabled */
; ..\component\CanIf\Implementation\CanIf.c	   438  #define CANIF_CFG_TX_ISPDUTRUNCATION(index)                CanIf_IsIsTxPduTruncationOfTxPduConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   439  
; ..\component\CanIf\Implementation\CanIf.c	   440  /* Access to table: CanIf_UlTxPduId2InternalTxPduId */
; ..\component\CanIf\Implementation\CanIf.c	   441  /* IN: Upper layer TxPduId */
; ..\component\CanIf\Implementation\CanIf.c	   442  /* OUT: Internal CanIfTxPduId */
; ..\component\CanIf\Implementation\CanIf.c	   443  #define CANIF_CFG_TXPDUID2INTTXPDUID(index)                CanIf_GetUlTxPduId2InternalTxPduId(index)
; ..\component\CanIf\Implementation\CanIf.c	   444  
; ..\component\CanIf\Implementation\CanIf.c	   445  /* Access to table: CanIf_TxPduQueueIndex */
; ..\component\CanIf\Implementation\CanIf.c	   446  /* IN: Internal CanIfTxPduId */
; ..\component\CanIf\Implementation\CanIf.c	   447  /* OUT: Index to table CanIf_TxQueue[] */
; ..\component\CanIf\Implementation\CanIf.c	   448  #define CANIF_CFG_TX_QUEUEINDEX(index)                     CanIf_GetTxQueueIdxOfTxPduQueueIndex(index)
; ..\component\CanIf\Implementation\CanIf.c	   449  
; ..\component\CanIf\Implementation\CanIf.c	   450  /* Access to table: CanIf_TxBufferFifoConfig */
; ..\component\CanIf\Implementation\CanIf.c	   451  /* IN: Index get by CANIF_CFG_MAILBOX_TXBUFFERIDX() in case of CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE() == FIFO. This applies for all CANIF_CFG_TXBUFFERFIFO_* access-macros. */
; ..\component\CanIf\Implementation\CanIf.c	   452  /* OUT: Access-index into variable CanIf_TxBufferFifoBase[] */
; ..\component\CanIf\Implementation\CanIf.c	   453  #define CANIF_CFG_TXBUFFERFIFO_BUFFERBASEIDX(index)        CanIf_GetTxBufferFifoBaseIdxOfTxBufferFifoConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   454  /* OUT: Access-start-index into variable CanIf_TxFifoQueueBase[] */
; ..\component\CanIf\Implementation\CanIf.c	   455  #define CANIF_CFG_TXBUFFERFIFO_QUEUEBASESTARTIDX(index)    CanIf_GetTxFifoQueueBaseStartIdxOfTxBufferFifoConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   456  #define CANIF_CFG_TXBUFFERFIFO_QUEUEBASEENDIDX(index)      CanIf_GetTxFifoQueueBaseEndIdxOfTxBufferFifoConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   457  /* OUT: Access-start-index into variable CanIf_TxFifoQueueData[] */
; ..\component\CanIf\Implementation\CanIf.c	   458  #define CANIF_CFG_TXBUFFFERFIFO_QUEUEDATASTARTIDX(index)   CanIf_GetTxFifoQueueDataStartIdxOfTxBufferFifoConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   459  /* OUT: Size of FIFO (== how many Tx-PDUs may be stored at all) */
; ..\component\CanIf\Implementation\CanIf.c	   460  #define CANIF_CFG_TXBUFFERFIFO_QUEUESIZE(index)            CanIf_GetTxFifoQueueBaseLengthOfTxBufferFifoConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   461  /* OUT: Size of one FIFO payload element [bytes] (== how many data bytes can be stored within one FIFO-queue-element) */
; ..\component\CanIf\Implementation\CanIf.c	   462  #define CANIF_CFG_TXBUFFERFIFO_SIZEOFONEPAYLOADEL(index)   CanIf_GetSizeOfOnePayloadElOfTxBufferFifoConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   463  
; ..\component\CanIf\Implementation\CanIf.c	   464  /* Read-access to variable CanIf_TxBufferFifoBase[] */
; ..\component\CanIf\Implementation\CanIf.c	   465  /* Possible values for field: eWriteIdx, eReadIdx, eQueueCounter */
; ..\component\CanIf\Implementation\CanIf.c	   466  #define CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(index, field)    CanIf_GetTxBufferFifoBase(index).field
; ..\component\CanIf\Implementation\CanIf.c	   467  /* Read-access to variable CanIf_TxFifoQueueBase[] */
; ..\component\CanIf\Implementation\CanIf.c	   468  /* Possible values for field: eQueued, eBaseParams (includes: eCanId, eSduLength) */
; ..\component\CanIf\Implementation\CanIf.c	   469  #define CANIF_VAR_TXBUFFERFIFO_QUEUEBASE(index, field)     CanIf_GetTxFifoQueueBase(index).field
; ..\component\CanIf\Implementation\CanIf.c	   470  /* Read/write/address-access to variable CanIf_TxFifoQueueData[] */
; ..\component\CanIf\Implementation\CanIf.c	   471  #define CANIF_VAR_TXBUFFERFIFO_QUEUEDATA(index)            CanIf_GetTxFifoQueueData(index)
; ..\component\CanIf\Implementation\CanIf.c	   472  #define CANIF_VAR_SET_TXBUFFERFIFO_QUEUEDATA(index)        CanIf_SetTxFifoQueueData(index)
; ..\component\CanIf\Implementation\CanIf.c	   473  #define CANIF_ADDR_VAR_TXBUFFERFIFO_QUEUEDATA(index)       CanIf_GetAddrTxFifoQueueData(index)
; ..\component\CanIf\Implementation\CanIf.c	   474  /* Read/write/address-access to variable CanIf_TxQueueIndex2FifoEl[] */
; ..\component\CanIf\Implementation\CanIf.c	   475  #define CANIF_VAR_TXBUFFERFIFO_QUEUEIDX2FIFOEL(index)      CanIf_GetTxQueueIndex2FifoEl(index)
; ..\component\CanIf\Implementation\CanIf.c	   476  #define CANIF_VAR_SET_TXBUFFERFIFO_QUEUEIDX2FIFOEL(index, value)  CanIf_SetTxQueueIndex2FifoEl(index, value)
; ..\component\CanIf\Implementation\CanIf.c	   477  /* Get size of buffer size */
; ..\component\CanIf\Implementation\CanIf.c	   478  #define CANIF_CFG_SIZEOF_FIFO_BUFFER                       CanIf_GetSizeOfTxFifoQueueData()
; ..\component\CanIf\Implementation\CanIf.c	   479  
; ..\component\CanIf\Implementation\CanIf.c	   480  /* Access to table: CanIf_TxBufferPrioByCanIdByteQueueConfig */
; ..\component\CanIf\Implementation\CanIf.c	   481  /* IN: Index get by CANIF_CFG_MAILBOX_TXBUFFERIDX() in case of CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE() == PRIO_BY_CANID and CANIF_BITQUEUE == STD_OFF.
; ..\component\CanIf\Implementation\CanIf.c	   482   * This applies for all CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_* access-macros. */
; ..\component\CanIf\Implementation\CanIf.c	   483  /* OUT: Access-index into variable CanIf_TxBufferPrioByCanIdBase: QueueCounter */
; ..\component\CanIf\Implementation\CanIf.c	   484  
; ..\component\CanIf\Implementation\CanIf.c	   485  
; ..\component\CanIf\Implementation\CanIf.c	   486  #define CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_BUFFERBASEIDX(index)            CanIf_GetTxBufferPrioByCanIdBaseIdxOfTxBufferPrioByCanIdByteQueueConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   487  /* OUT: Size of buffer (== how many Tx-PDUs may be stored at all) */
; ..\component\CanIf\Implementation\CanIf.c	   488  #define CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_QUEUESIZE(index)                CanIf_GetTxBufferPrioByCanIdByteQueueMappedTxPdusLengthOfTxBufferPrioByCanIdByteQueueConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   489  /* OUT: Start-index into table CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdus with Tx-PDUs mapped to Tx-buffer (CanIf-internal Tx-PDU-Ids for access into CanIf_TxPduConfig[]) */
; ..\component\CanIf\Implementation\CanIf.c	   490  #define CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_STARTIDX2MAPPEDTXPDUS(index)    CanIf_GetTxBufferPrioByCanIdByteQueueMappedTxPdusStartIdxOfTxBufferPrioByCanIdByteQueueConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   491  /* OUT: Stop-index into table CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdus with Tx-PDUs mapped to Tx-buffer (CanIf-internal Tx-PDU-Ids for access into CanIf_TxPduConfig[]) */
; ..\component\CanIf\Implementation\CanIf.c	   492  #define CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_STOPIDX2MAPPEDTXPDUS(index)     CanIf_GetTxBufferPrioByCanIdByteQueueMappedTxPdusEndIdxOfTxBufferPrioByCanIdByteQueueConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   493  /* OUT: Index into table CanIf_TxPduConfig. */
; ..\component\CanIf\Implementation\CanIf.c	   494  #define CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_MAPPEDTXPDUS(index)             CanIf_GetTxPduConfigIdxOfTxBufferPrioByCanIdByteQueueMappedTxPdus(index)
; ..\component\CanIf\Implementation\CanIf.c	   495  
; ..\component\CanIf\Implementation\CanIf.c	   496  /* IN: Index get by CANIF_CFG_MAILBOX_TXBUFFERIDX() in case of CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE() == PRIO_BY_CANID and CANIF_BITQUEUE == STD_ON/STD_OFF.
; ..\component\CanIf\Implementation\CanIf.c	   497   * This applies for all CANIF_CFG_TXBUFFERPRIOBYCANID_* access-macros. */
; ..\component\CanIf\Implementation\CanIf.c	   498  /* Read-access to variable CanIf_TxBufferPrioByCanIdBase[] */
; ..\component\CanIf\Implementation\CanIf.c	   499  /* Possible values for field: eQueueCounter */
; ..\component\CanIf\Implementation\CanIf.c	   500  #define CANIF_VAR_TXBUFFERPRIOBYCANID_BUFFERBASE(index, field)                 CanIf_GetTxBufferPrioByCanIdBase(index).field
; ..\component\CanIf\Implementation\CanIf.c	   501  
; ..\component\CanIf\Implementation\CanIf.c	   502  /* Access to table: CanIf_TxBufferPrioByCanIdBitQueueConfig */
; ..\component\CanIf\Implementation\CanIf.c	   503  /* IN: Index get by CANIF_CFG_MAILBOX_TXBUFFERIDX() in case of CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE() == PRIO_BY_CANID and CANIF_BITQUEUE == STD_ON.
; ..\component\CanIf\Implementation\CanIf.c	   504   * This applies for all CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_* access-macros. */
; ..\component\CanIf\Implementation\CanIf.c	   505  /* OUT: Access-index into variable CanIf_TxBufferPrioByCanIdBase: QueueCounter. */
; ..\component\CanIf\Implementation\CanIf.c	   506  #define CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_BUFFERBASEIDX(index)             CanIf_GetTxBufferPrioByCanIdBaseIdxOfTxBufferPrioByCanIdBitQueueConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   507  /* OUT: Start-index into variable: CanIf_TxQueueFlags */
; ..\component\CanIf\Implementation\CanIf.c	   508  #define CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUESTARTIDX(index)             CanIf_GetTxQueueFlagsStartIdxOfTxBufferPrioByCanIdBitQueueConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   509  #define CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUESTOPIDX(index)              CanIf_GetTxQueueFlagsEndIdxOfTxBufferPrioByCanIdBitQueueConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   510  #define CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_BITPOS2TXPDUIDOFFSET(index)      CanIf_GetBitPos2TxPduIdOffsetOfTxBufferPrioByCanIdBitQueueConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   511  
; ..\component\CanIf\Implementation\CanIf.c	   512  
; ..\component\CanIf\Implementation\CanIf.c	   513  /* NOTE: Please see description of "CANIF_CFG_CTRLID2J1939DYNADDROFFSET" before usage! */
; ..\component\CanIf\Implementation\CanIf.c	   514  #if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	   515  # define CANIF_VAR_J1939TXADDR_LOOKUP(ch, addr)            CanIf_GetJ1939TxAddr_Lookup(addr)
; ..\component\CanIf\Implementation\CanIf.c	   516  # define CANIF_VAR_SET_J1939TXADDR_LOOKUP(ch, addr, value) CanIf_SetJ1939TxAddr_Lookup((addr), (value))
; ..\component\CanIf\Implementation\CanIf.c	   517  #else
; ..\component\CanIf\Implementation\CanIf.c	   518  # define CANIF_VAR_J1939TXADDR_LOOKUP(ch, addr)            CanIf_GetJ1939TxAddr_Lookup(CANIF_CFG_CTRLID2J1939DYNADDROFFSET(ch) + (addr))
; ..\component\CanIf\Implementation\CanIf.c	   519  # define CANIF_VAR_SET_J1939TXADDR_LOOKUP(ch, addr, value) CanIf_SetJ1939TxAddr_Lookup((CANIF_CFG_CTRLID2J1939DYNADDROFFSET(ch) + (addr)), (value))
; ..\component\CanIf\Implementation\CanIf.c	   520  #endif
; ..\component\CanIf\Implementation\CanIf.c	   521  
; ..\component\CanIf\Implementation\CanIf.c	   522  /* Access to table: CanIf_MailboxConfig  */
; ..\component\CanIf\Implementation\CanIf.c	   523  #define CANIF_CFG_MAILBOX_PDUIDFIRST(index)                CanIf_GetPduIdFirstOfMailBoxConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   524  #define CANIF_CFG_MAILBOX_PDUIDLAST(index)                 CanIf_GetPduIdLastOfMailBoxConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   525  #define CANIF_CFG_MAILBOX_MAILBOXTYPE(index)               CanIf_GetMailBoxTypeOfMailBoxConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   526  #define CANIF_CFG_MAILBOX_CONTROLLER(index)                CanIf_GetCtrlStatesIdxOfMailBoxConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   527  #define CANIF_CFG_MAILBOX_TXBUFFERIDX(index)               CanIf_GetTxBufferCfgIdxOfMailBoxConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   528  #define CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE(index)      CanIf_GetTxBufferHandlingTypeOfMailBoxConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   529  #define CANIF_CFG_MAILBOX_HASTXBUFFER(index)               CanIf_IsTxBufferCfgUsedOfMailBoxConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   530  
; ..\component\CanIf\Implementation\CanIf.c	   531  #define CANIF_CFG_WAKEUP_WAKEUPSOURCE(index)               CanIf_GetWakeUpSourceOfWakeUpConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   532  #define CANIF_CFG_WAKEUP_WAKEUPTARGETMODULE(index)         CanIf_GetWakeUpTargetModuleOfWakeUpConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   533  #define CANIF_CFG_WAKEUP_WAKEUPTARGETADDRESS(index)        CanIf_GetWakeUpTargetAddressOfWakeUpConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   534  #define CANIF_CFG_WAKEUP_CONTROLLER(index)                 CanIf_GetControllerOfWakeUpConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   535  
; ..\component\CanIf\Implementation\CanIf.c	   536  #define CANIF_CFG_TRCVUPTOLOWMAP_DRIVERINDEX(index)        CanIf_GetCanTrcvFctTblIdxOfTransceiverUpToLowMap(index)
; ..\component\CanIf\Implementation\CanIf.c	   537  #define CANIF_CFG_TRCVUPTOLOWMAP_CHANNELINDEX(index)       CanIf_GetChannelIndexOfTransceiverUpToLowMap(index)
; ..\component\CanIf\Implementation\CanIf.c	   538  
; ..\component\CanIf\Implementation\CanIf.c	   539  #define CanIf_GetCanTrcv_SetOpModeFctMap(index)            CanIf_GetSetOpModeFctOfCanTrcvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   540  #define CanIf_GetCanTrcv_GetOpModeFctMap(index)            CanIf_GetGetOpModeFctOfCanTrcvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   541  #define CanIf_GetCanTrcv_GetBusWuReasonFctMap(index)       CanIf_GetGetBusWuReasonFctOfCanTrcvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   542  #define CanIf_GetCanTrcv_SetWakeupModeFctMap(index)        CanIf_GetSetWakeupModeFctOfCanTrcvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   543  #define CanIf_GetCanTrcv_CheckWakeupFctMap(index)          CanIf_GetCheckWakeupFctOfCanTrcvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   544  
; ..\component\CanIf\Implementation\CanIf.c	   545  #define CanIf_GetCanTrcv_ClearTrcvWufFlagFctMap(index)     CanIf_GetClearTrcvWufFlagFctOfCanTrcvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   546  #define CanIf_GetCanTrcv_CheckWakeFlagFctMap(index)        CanIf_GetCheckWakeFlagFctOfCanTrcvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   547  
; ..\component\CanIf\Implementation\CanIf.c	   548  
; ..\component\CanIf\Implementation\CanIf.c	   549  #define CANIF_CFG_RXDHRANDOMNUMBER1(index)                 CanIf_GetRxDHRandomNumber1OfCtrlConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   550  #define CANIF_CFG_RXDHRANDOMNUMBER2(index)                 CanIf_GetRxDHRandomNumber2OfCtrlConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   551  
; ..\component\CanIf\Implementation\CanIf.c	   552  #define CANIF_CFG_RXDHADJUST(index)                        CanIf_GetRxDHAdjust(index)
; ..\component\CanIf\Implementation\CanIf.c	   553  #define CANIF_CFG_RXDHADJUSTCOUNT                          CanIf_GetSizeOfRxDHAdjust()
; ..\component\CanIf\Implementation\CanIf.c	   554  
; ..\component\CanIf\Implementation\CanIf.c	   555  #define CANIF_CFG_STAT2DYN_INDIRECTION(index)                                       CanIf_GetTxPduStatic2DynamicIndirection(index)
; ..\component\CanIf\Implementation\CanIf.c	   556  #define CANIF_CFG_TXBUFFERPRIOBYCANID_STATFDQUEUE_QUEUEIDX2DATASTARTSTOP(index)     CanIf_GetTxQueueIndex2DataStartStopIdxOfTxPduQueueIndex(index)
; ..\component\CanIf\Implementation\CanIf.c	   557  /* Access to table: CanIf_TxQueueIndex2DataStartStop in order to redirect into variable CanIf_TxQueueData in case of static FD-queue */
; ..\component\CanIf\Implementation\CanIf.c	   558  #define CANIF_CFG_TXBUFFERPRIOBYCANID_STATFDQUEUE_DATASTARTIDX(index)               CanIf_GetTxQueueDataStartIdxOfTxQueueIndex2DataStartStop(CANIF_CFG_TXBUFFERPRIOBYCANID_STATFDQUEUE_QUEUEIDX2DATASTARTSTOP(index))
; ..\component\CanIf\Implementation\CanIf.c	   559  #define CANIF_CFG_TXBUFFERPRIOBYCANID_STATFDQUEUE_MAXDATALENGTH(index)              CanIf_GetTxQueueDataLengthOfTxQueueIndex2DataStartStop(CANIF_CFG_TXBUFFERPRIOBYCANID_STATFDQUEUE_QUEUEIDX2DATASTARTSTOP(index))
; ..\component\CanIf\Implementation\CanIf.c	   560  
; ..\component\CanIf\Implementation\CanIf.c	   561  #define CANIF_CFG_ISFEATUREPNWUTXPDUFILTERENABLED(index)   CanIf_IsFeaturePnWuTxPduFilterEnabledOfCtrlConfig(index)
; ..\component\CanIf\Implementation\CanIf.c	   562  #define CANIF_CFG_TRCVTOCTRLMAP(index)                     CanIf_GetTrcvToCtrlMap(index)
; ..\component\CanIf\Implementation\CanIf.c	   563  #define CANIF_CFG_TRCVUPTOUPPERMAP(index)                  CanIf_GetTransceiverUpToUpperMap(index)
; ..\component\CanIf\Implementation\CanIf.c	   564  
; ..\component\CanIf\Implementation\CanIf.c	   565  /* Access to variable: CanIf_TxQueue */
; ..\component\CanIf\Implementation\CanIf.c	   566  /* Possible values for field: eQueued, eQueueParams (Includes: eSdu[], eBaseParams (Includes: eCanId, eSduLength))  */
; ..\component\CanIf\Implementation\CanIf.c	   567  #define CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(index, field)                      CanIf_GetTxQueue(index).field
; ..\component\CanIf\Implementation\CanIf.c	   568  /* Access to variable: CanIf_TxQueueData (static FD-queue) */
; ..\component\CanIf\Implementation\CanIf.c	   569  #define CANIF_VAR_TXBUFFERPRIOBYCANID_STATFDQUEUE_QUEUEDATA(index)             CanIf_GetTxQueueData(index)
; ..\component\CanIf\Implementation\CanIf.c	   570  #define CANIF_ADDR_VAR_TXBUFFERPRIOBYCANID_STATFDQUEUE_QUEUEDATA(index)        CanIf_GetAddrTxQueueData(index)
; ..\component\CanIf\Implementation\CanIf.c	   571  /* Access to variable: CanIf_TxQueueFlags */
; ..\component\CanIf\Implementation\CanIf.c	   572  #define CANIF_VAR_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUEFLAGS(index)                CanIf_GetTxQueueFlags(index)
; ..\component\CanIf\Implementation\CanIf.c	   573  #define CANIF_VAR_SET_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUEFLAGS(index, value)     CanIf_SetTxQueueFlags((index), (value))
; ..\component\CanIf\Implementation\CanIf.c	   574  /* Access to variable: CanIf_DynTxId */
; ..\component\CanIf\Implementation\CanIf.c	   575  #define CANIF_VAR_DYNTXID(index)                                               CanIf_GetDynTxId(index)
; ..\component\CanIf\Implementation\CanIf.c	   576  
; ..\component\CanIf\Implementation\CanIf.c	   577  #define CANIF_CFG_RXINDICATION_FUNCTION(index)             CanIf_GetRxIndicationFctOfRxIndicationFctList(index)
; ..\component\CanIf\Implementation\CanIf.c	   578  #define CANIF_CFG_RXINDICATION_FUNCTIONLAYOUT(index)       CanIf_GetRxIndicationLayoutOfRxIndicationFctList(index)
; ..\component\CanIf\Implementation\CanIf.c	   579  #define CANIF_CFG_TXCONFIRMATION(index)                    CanIf_GetTxConfirmationFctList(index)
; ..\component\CanIf\Implementation\CanIf.c	   580  
; ..\component\CanIf\Implementation\CanIf.c	   581  #define CANIF_CFG_BUSOFFNOTIFICATION()                     CanIf_GetBusOffNotificationFctPtr()
; ..\component\CanIf\Implementation\CanIf.c	   582  #define CANIF_CFG_WAKEUPVALIDATION()                       CanIf_GetWakeUpValidationFctPtr()
; ..\component\CanIf\Implementation\CanIf.c	   583  #define CANIF_CFG_CTRLMODEINDICATIONFCT()                  CanIf_GetCtrlModeIndicationFctPtr()
; ..\component\CanIf\Implementation\CanIf.c	   584  
; ..\component\CanIf\Implementation\CanIf.c	   585  /* FEAT-598: (Extended) RAM-check indications */
; ..\component\CanIf\Implementation\CanIf.c	   586  #define CANIF_CFG_RAMCHECKCORRUPTMAILBOXINDFCT()           CanIf_GetRamCheckCorruptMailboxIndFctPtr()
; ..\component\CanIf\Implementation\CanIf.c	   587  #define CANIF_CFG_RAMCHECKCORRUPTCONTROLLERINDFCT()        CanIf_GetRamCheckCorruptControllerIndFctPtr()
; ..\component\CanIf\Implementation\CanIf.c	   588  
; ..\component\CanIf\Implementation\CanIf.c	   589  
; ..\component\CanIf\Implementation\CanIf.c	   590  #define CANIF_CFG_TRCVMODEINDICATIONFCT()                  CanIf_GetTrcvModeIndicationFctPtr()
; ..\component\CanIf\Implementation\CanIf.c	   591  #define CANIF_CFG_CHECKTRCVWAKEFLAGINDICATIONFCT()         CanIf_GetCheckTrcvWakeFlagIndicationFctPtr()
; ..\component\CanIf\Implementation\CanIf.c	   592  #define CANIF_CFG_CLEARTRCVWUFFLAGINDICATIONFCT()          CanIf_GetClearTrcvWufFlagIndicationFctPtr()
; ..\component\CanIf\Implementation\CanIf.c	   593  #define CANIF_CFG_CONFIRMPNAVAILABILITYFCT()               CanIf_GetConfirmPnAvailabilityFctPtr()
; ..\component\CanIf\Implementation\CanIf.c	   594  
; ..\component\CanIf\Implementation\CanIf.c	   595  
; ..\component\CanIf\Implementation\CanIf.c	   596  #define CanIf_SetCtrlMode(index, value)                    CanIf_SetCtrlModeOfCtrlStates((index), (value))
; ..\component\CanIf\Implementation\CanIf.c	   597  #define CanIf_GetCtrlMode(index)                           CanIf_GetCtrlModeOfCtrlStates(index)
; ..\component\CanIf\Implementation\CanIf.c	   598  
; ..\component\CanIf\Implementation\CanIf.c	   599  #define CanIf_SetChannelMode(index, value)                 CanIf_SetPduModeOfCtrlStates((index), (value))
; ..\component\CanIf\Implementation\CanIf.c	   600  #define CanIf_GetChannelMode(index)                        CanIf_GetPduModeOfCtrlStates(index)
; ..\component\CanIf\Implementation\CanIf.c	   601  
; ..\component\CanIf\Implementation\CanIf.c	   602  #define CanIf_SetPnWuTxPduFilterActive(index, value)       CanIf_SetPnWuTxPduFilterActiveOfCtrlStates((index), (value))
; ..\component\CanIf\Implementation\CanIf.c	   603  #define CanIf_IsPnWuTxPduFilterActive(index)               CanIf_IsPnWuTxPduFilterActiveOfCtrlStates(index)
; ..\component\CanIf\Implementation\CanIf.c	   604  
; ..\component\CanIf\Implementation\CanIf.c	   605  #define CanIf_SetTxConfState(index, value)                 CanIf_SetTxConfStateOfCtrlStates((index), (value))
; ..\component\CanIf\Implementation\CanIf.c	   606  #define CanIf_GetTxConfState(index)                        CanIf_GetTxConfStateOfCtrlStates(index)
; ..\component\CanIf\Implementation\CanIf.c	   607  
; ..\component\CanIf\Implementation\CanIf.c	   608  #define CanIf_SetWakeUpValidationState(index, value)       CanIf_SetWakeUpValidationStateOfCtrlStates((index), (value))
; ..\component\CanIf\Implementation\CanIf.c	   609  #define CanIf_GetWakeUpValidationState(index)              CanIf_GetWakeUpValidationStateOfCtrlStates(index)
; ..\component\CanIf\Implementation\CanIf.c	   610  
; ..\component\CanIf\Implementation\CanIf.c	   611  #define CanIf_ChangeMirroring(index, value)                CanIf_SetBusMirroringActiveOfCtrlStates((index), (value))
; ..\component\CanIf\Implementation\CanIf.c	   612  #define CanIf_IsMirroringEnabled(index)                    CanIf_IsBusMirroringActiveOfCtrlStates(index)
; ..\component\CanIf\Implementation\CanIf.c	   613  
; ..\component\CanIf\Implementation\CanIf.c	   614  /* FEAT-1429 */
; ..\component\CanIf\Implementation\CanIf.c	   615  #define CanIf_SetTxQueueCounter(index, value)              (CanIf_GetTxBufferPrioByCanIdBase(index).eQueueCounter = (value))
; ..\component\CanIf\Implementation\CanIf.c	   616  #define CanIf_GetTxQueueCounter(index)                     (CanIf_GetTxBufferPrioByCanIdBase(index).eQueueCounter)
; ..\component\CanIf\Implementation\CanIf.c	   617  #define CanIf_IncTxQueueCounter(index)                     (++CanIf_GetTxBufferPrioByCanIdBase(index).eQueueCounter)
; ..\component\CanIf\Implementation\CanIf.c	   618  #define CanIf_DecTxQueueCounter(index)                     (--CanIf_GetTxBufferPrioByCanIdBase(index).eQueueCounter)
; ..\component\CanIf\Implementation\CanIf.c	   619  
; ..\component\CanIf\Implementation\CanIf.c	   620  
; ..\component\CanIf\Implementation\CanIf.c	   621  #define CanIf_GetCan_WriteFctMap(index)                    CanIf_GetWriteFctOfCanDrvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   622  #define CanIf_GetCan_CheckWakeupFctMap(index)              CanIf_GetCheckWakeupFctOfCanDrvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   623  #define CanIf_GetCan_CheckBaudrateFctMap(index)            CanIf_GetCheckBaudrateFctOfCanDrvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   624  #define CanIf_GetCan_ChangeBaudrateFctMap(index)           CanIf_GetChangeBaudrateFctOfCanDrvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   625  #define CanIf_GetCan_SetBaudrateFctMap(index)              CanIf_GetSetBaudrateFctOfCanDrvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   626  /* FEAT-598: (Extended) RAM-check APIs (only Multiple CanDrv) */
; ..\component\CanIf\Implementation\CanIf.c	   627  #define CanIf_GetCan_RamCheckExecuteFctMap(index)          CanIf_GetRamCheckExecuteFctOfCanDrvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   628  #define CanIf_GetCan_RamCheckEnableMailboxFctMap(index)    CanIf_GetRamCheckEnableMailboxFctOfCanDrvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   629  #define CanIf_GetCan_RamCheckEnableControllerFctMap(index) CanIf_GetRamCheckEnableControllerFctOfCanDrvFctTbl(index)
; ..\component\CanIf\Implementation\CanIf.c	   630  
; ..\component\CanIf\Implementation\CanIf.c	   631  #define CanIf_GetCan_GetControllerErrorStateFctMap(index)      CanIf_GetGetControllerErrorStateFctOfCanDrvFctTbl(index)      
; ..\component\CanIf\Implementation\CanIf.c	   632  #define CanIf_GetCan_GetControllerRxErrorCounterFctMap(index)  CanIf_GetGetControllerRxErrorCounterOfCanDrvFctTbl(index)     
; ..\component\CanIf\Implementation\CanIf.c	   633  #define CanIf_GetCan_GetControllerTxErrorCounterFctMap(index)  CanIf_GetGetControllerTxErrorCounterOfCanDrvFctTbl(index) 
; ..\component\CanIf\Implementation\CanIf.c	   634  
; ..\component\CanIf\Implementation\CanIf.c	   635  /*
; ..\component\CanIf\Implementation\CanIf.c	   636  |<DataModelStart>| CanIf_AdaptCanCheckWakeupRetVal
; ..\component\CanIf\Implementation\CanIf.c	   637  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	   638  CanIfWakeup # from this function #
; ..\component\CanIf\Implementation\CanIf.c	   639  CanIfWakeup, CanIfMultipleDriver # from caller CanIf_CheckWakeup #
; ..\component\CanIf\Implementation\CanIf.c	   640  Relation:
; ..\component\CanIf\Implementation\CanIf.c	   641  CanIfCheckWakeupCanRetType
; ..\component\CanIf\Implementation\CanIf.c	   642  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	   643  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	   644  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	   645  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	   646  */
; ..\component\CanIf\Implementation\CanIf.c	   647  /* ESCAN00094121: [Only if not Vector CanDrv is used] CanIf does not fullfill the requirements: CANIF720, CANIF678 in relation to CanDrv */
; ..\component\CanIf\Implementation\CanIf.c	   648  #if (CANIF_WAKEUP_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   649  # if (CANIF_CHECK_WAKEUP_CAN_RET_TYPE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   650  /* If Can_CheckWakeup() has return type Can_ReturnType this macro adapts return value CAN_OK/CAN_NOT_OK to value E_OK/E_NOT_OK from Std_ReturnType */
; ..\component\CanIf\Implementation\CanIf.c	   651  #  define CanIf_AdaptCanCheckWakeupRetVal(retVal) (((retVal) == CAN_OK) ? E_OK : E_NOT_OK)
; ..\component\CanIf\Implementation\CanIf.c	   652  # else
; ..\component\CanIf\Implementation\CanIf.c	   653  /* If Can_CheckWakeup() has return type Std_ReturnType nothing needs to be adapted */
; ..\component\CanIf\Implementation\CanIf.c	   654  #  define CanIf_AdaptCanCheckWakeupRetVal(retVal) (retVal)
; ..\component\CanIf\Implementation\CanIf.c	   655  # endif /* CANIF_CHECK_WAKEUP_CAN_RET_TYPE == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	   656  #endif /* CANIF_WAKEUP_SUPPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	   657  
; ..\component\CanIf\Implementation\CanIf.c	   658  /* PRQA L: CANIF_FUNCTION_LIKE_MACRO */
; ..\component\CanIf\Implementation\CanIf.c	   659  
; ..\component\CanIf\Implementation\CanIf.c	   660  #define CanIf_EnterCritical(area)     SchM_Enter_CanIf_##area()  /* PRQA S 0342 */ /*  MD_MSR_Rule20.10_0342 */
; ..\component\CanIf\Implementation\CanIf.c	   661  #define CanIf_LeaveCritical(area)     SchM_Exit_CanIf_##area()   /* PRQA S 0342 */ /*  MD_MSR_Rule20.10_0342 */
; ..\component\CanIf\Implementation\CanIf.c	   662  
; ..\component\CanIf\Implementation\CanIf.c	   663  #define CANIF_NOP      ((uint8)0xFFu)
; ..\component\CanIf\Implementation\CanIf.c	   664  
; ..\component\CanIf\Implementation\CanIf.c	   665  #if (CANIF_BITQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   666  # if ( CPU_TYPE == CPU_TYPE_8 ) /* COV_CANIF_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	   667  #  define kCanTxQueueShift     3u
; ..\component\CanIf\Implementation\CanIf.c	   668  #  define elemStartBitIdx      7u
; ..\component\CanIf\Implementation\CanIf.c	   669  # elif ( CPU_TYPE == CPU_TYPE_16 ) /* COV_CANIF_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	   670  #  define kCanTxQueueShift     4u
; ..\component\CanIf\Implementation\CanIf.c	   671  #  define elemStartBitIdx      15u
; ..\component\CanIf\Implementation\CanIf.c	   672  # else /* CPU_TYPE_32 || CPU_TYPE_64 */
; ..\component\CanIf\Implementation\CanIf.c	   673  #  define kCanTxQueueShift     5u
; ..\component\CanIf\Implementation\CanIf.c	   674  #  define elemStartBitIdx      31u
; ..\component\CanIf\Implementation\CanIf.c	   675  # endif
; ..\component\CanIf\Implementation\CanIf.c	   676  
; ..\component\CanIf\Implementation\CanIf.c	   677  
; ..\component\CanIf\Implementation\CanIf.c	   678  
; ..\component\CanIf\Implementation\CanIf.c	   679  /* mask used to get the flag index from the handle */
; ..\component\CanIf\Implementation\CanIf.c	   680  # define kCanTxQueueMask      (((uint8)1u << kCanTxQueueShift) - (uint8)1u)
; ..\component\CanIf\Implementation\CanIf.c	   681  #endif
; ..\component\CanIf\Implementation\CanIf.c	   682  
; ..\component\CanIf\Implementation\CanIf.c	   683  #if (CANIF_ENABLE_SECURITY_EVENT_REPORTING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   684  /* Rx/tx error counter threshold for error state passive */
; ..\component\CanIf\Implementation\CanIf.c	   685  # define CANIF_ERROR_COUNTER_THRESHOLD    127u
; ..\component\CanIf\Implementation\CanIf.c	   686  /* Result values for CANIF_CONTEXTDATA_THRESHOLD_POS:
; ..\component\CanIf\Implementation\CanIf.c	   687     which error counter exceeded the threshold? */
; ..\component\CanIf\Implementation\CanIf.c	   688  # define CANIF_RX_TX_THRESHOLD_EXCEEDED   0u
; ..\component\CanIf\Implementation\CanIf.c	   689  # define CANIF_TX_THRESHOLD_EXCEEDED      1u
; ..\component\CanIf\Implementation\CanIf.c	   690  # define CANIF_RX_THRESHOLD_EXCEEDED      2u
; ..\component\CanIf\Implementation\CanIf.c	   691  /* Size of context data as number of bytes */
; ..\component\CanIf\Implementation\CanIf.c	   692  # define CANIF_CONTEXTDATA_SIZE_BUSOFF    1u
; ..\component\CanIf\Implementation\CanIf.c	   693  # define CANIF_CONTEXTDATA_SIZE_PASSIVE   2u
; ..\component\CanIf\Implementation\CanIf.c	   694  # define CANIF_CONTEXTDATA_SIZE_CANERROR  2u
; ..\component\CanIf\Implementation\CanIf.c	   695  /* Position in context data as byte number */
; ..\component\CanIf\Implementation\CanIf.c	   696  # define CANIF_CONTEXTDATA_CTRLID_POS     0u
; ..\component\CanIf\Implementation\CanIf.c	   697  # define CANIF_CONTEXTDATA_CANERROR_POS   1u
; ..\component\CanIf\Implementation\CanIf.c	   698  # define CANIF_CONTEXTDATA_THRESHOLD_POS  1u
; ..\component\CanIf\Implementation\CanIf.c	   699  
; ..\component\CanIf\Implementation\CanIf.c	   700  /* CM_CANIF_1 */
; ..\component\CanIf\Implementation\CanIf.c	   701  # if (CANIF_CONTEXTDATA_SIZE_BUSOFF <= CANIF_CONTEXTDATA_CTRLID_POS)
; ..\component\CanIf\Implementation\CanIf.c	   702  #  error "Invalid static data: CANIF_CONTEXTDATA_SIZE_BUSOFF is too small"
; ..\component\CanIf\Implementation\CanIf.c	   703  # endif
; ..\component\CanIf\Implementation\CanIf.c	   704  
; ..\component\CanIf\Implementation\CanIf.c	   705  /* CM_CANIF_1 */
; ..\component\CanIf\Implementation\CanIf.c	   706  # if ((CANIF_CONTEXTDATA_SIZE_PASSIVE <= CANIF_CONTEXTDATA_CTRLID_POS) || (CANIF_CONTEXTDATA_SIZE_PASSIVE <= CANIF_CONTEXTDATA_THRESHOLD_POS))
; ..\component\CanIf\Implementation\CanIf.c	   707  #  error "Invalid static data: CANIF_CONTEXTDATA_SIZE_PASSIVE is too small"
; ..\component\CanIf\Implementation\CanIf.c	   708  # endif
; ..\component\CanIf\Implementation\CanIf.c	   709  
; ..\component\CanIf\Implementation\CanIf.c	   710  /* CM_CANIF_1 */
; ..\component\CanIf\Implementation\CanIf.c	   711  # if (CANIF_CONTEXTDATA_SIZE_CANERROR <= CANIF_CONTEXTDATA_CTRLID_POS) || (CANIF_CONTEXTDATA_SIZE_CANERROR <= CANIF_CONTEXTDATA_CANERROR_POS)
; ..\component\CanIf\Implementation\CanIf.c	   712  #  error "Invalid static data: CANIF_CONTEXTDATA_SIZE_CANERROR is too small"
; ..\component\CanIf\Implementation\CanIf.c	   713  # endif
; ..\component\CanIf\Implementation\CanIf.c	   714  
; ..\component\CanIf\Implementation\CanIf.c	   715  #endif /* CANIF_ENABLE_SECURITY_EVENT_REPORTING == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	   716  
; ..\component\CanIf\Implementation\CanIf.c	   717  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   718   *  GLOBAL DATA
; ..\component\CanIf\Implementation\CanIf.c	   719   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   720   
; ..\component\CanIf\Implementation\CanIf.c	   721  #define CANIF_START_SEC_CONST_8BIT
; ..\component\CanIf\Implementation\CanIf.c	   722  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanIf\Implementation\CanIf.c	   723  
; ..\component\CanIf\Implementation\CanIf.c	   724  CONST(uint8, CANIF_CONST) CanIf_MainVersion         = (uint8)CANIF_SW_MAJOR_VERSION;
; ..\component\CanIf\Implementation\CanIf.c	   725  CONST(uint8, CANIF_CONST) CanIf_SubVersion          = (uint8)CANIF_SW_MINOR_VERSION;
; ..\component\CanIf\Implementation\CanIf.c	   726  CONST(uint8, CANIF_CONST) CanIf_ReleaseVersion      = (uint8)CANIF_SW_PATCH_VERSION;
; ..\component\CanIf\Implementation\CanIf.c	   727  
; ..\component\CanIf\Implementation\CanIf.c	   728  #define CANIF_STOP_SEC_CONST_8BIT
; ..\component\CanIf\Implementation\CanIf.c	   729  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanIf\Implementation\CanIf.c	   730  
; ..\component\CanIf\Implementation\CanIf.c	   731  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   732   *  LOCAL FUNCTION PROTOTYPES
; ..\component\CanIf\Implementation\CanIf.c	   733   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   734  
; ..\component\CanIf\Implementation\CanIf.c	   735  #define CANIF_START_SEC_CODE
; ..\component\CanIf\Implementation\CanIf.c	   736  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanIf\Implementation\CanIf.c	   737  
; ..\component\CanIf\Implementation\CanIf.c	   738  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	   739  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   740   *  CanIf_TxQueueTreatment()
; ..\component\CanIf\Implementation\CanIf.c	   741   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   742  /*! \brief       Checks if queued PDUs have to be transmitted.
; ..\component\CanIf\Implementation\CanIf.c	   743   *  \details     Called out of CanIf_TxConfirmation(), CanIf_CancelTxConfirmation(), CanIf_CancelTxNotification().
; ..\component\CanIf\Implementation\CanIf.c	   744   *  \param[in]   hth: Index of the hardware transmit handle. Parameter must be smaller than CANIF_CFG_MAX_MAILBOXES.
; ..\component\CanIf\Implementation\CanIf.c	   745   *  \return      E_OK: Any Tx-PDU transmitted.
; ..\component\CanIf\Implementation\CanIf.c	   746   *               E_NOT_OK: No Tx-PDU transmitted.
; ..\component\CanIf\Implementation\CanIf.c	   747   *  \pre         Must be called with entered critical section in order to secure the Tx-queue.
; ..\component\CanIf\Implementation\CanIf.c	   748   *               Must only be called for "hth" to which any Tx-buffer is mapped.        
; ..\component\CanIf\Implementation\CanIf.c	   749   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   750   *  \reentrant   FALSE
; ..\component\CanIf\Implementation\CanIf.c	   751   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   752   *  \config      CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON || CANIF_TRANSMIT_BUFFER_FIFO == STD_ON
; ..\component\CanIf\Implementation\CanIf.c	   753   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   754  CANIF_LOCAL FUNC(Std_ReturnType, CANIF_CODE) CanIf_TxQueueTreatment(CanIf_HwHandleType hth);
; ..\component\CanIf\Implementation\CanIf.c	   755  
; ..\component\CanIf\Implementation\CanIf.c	   756  
; ..\component\CanIf\Implementation\CanIf.c	   757  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   758   *  CanIf_TxQueueTransmit()
; ..\component\CanIf\Implementation\CanIf.c	   759   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   760  /*! \brief       Transmits a Tx-PDU and removes it from the Tx-queue.
; ..\component\CanIf\Implementation\CanIf.c	   761   *  \details     Called out of CanIf_TxQueueTreatment().
; ..\component\CanIf\Implementation\CanIf.c	   762   *  \param[in]   PduId: Internal Tx-PDU ID. Parameter must be smaller than CANIF_CFG_MAX_TXPDUS. 
; ..\component\CanIf\Implementation\CanIf.c	   763   *  \return      E_OK: Can_Write returned with E_OK or BUSY.
; ..\component\CanIf\Implementation\CanIf.c	   764   *               E_NOT_OK: Can_Write returned with E_NOT_OK.
; ..\component\CanIf\Implementation\CanIf.c	   765   *  \pre         Must be called with entered critical section in order to secure Tx-queue.
; ..\component\CanIf\Implementation\CanIf.c	   766   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   767   *  \reentrant   FALSE
; ..\component\CanIf\Implementation\CanIf.c	   768   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   769   *  \config      CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON || CANIF_TRANSMIT_BUFFER_FIFO == STD_ON
; ..\component\CanIf\Implementation\CanIf.c	   770   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   771  CANIF_LOCAL FUNC(Std_ReturnType, CANIF_CODE) CanIf_TxQueueTransmit(PduIdType PduId);
; ..\component\CanIf\Implementation\CanIf.c	   772  
; ..\component\CanIf\Implementation\CanIf.c	   773  
; ..\component\CanIf\Implementation\CanIf.c	   774  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   775   *  CanIf_ClearQueue()
; ..\component\CanIf\Implementation\CanIf.c	   776   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   777  /*! \brief       Initializes and resets the Tx-queue.
; ..\component\CanIf\Implementation\CanIf.c	   778   *  \details     This API initializes the Tx-queue for CAN channel given by CANIF_CHANNEL_CANTYPE_ONLY. 
; ..\component\CanIf\Implementation\CanIf.c	   779   *               Called out of CanIf_SetControllerMode(), CanIf_ControllerBusOff(), CanIf_SetPduMode(), CanIf_Init().
; ..\component\CanIf\Implementation\CanIf.c	   780   *  \param[in]   CANIF_CHANNEL_CANTYPE_ONLY: Index of CAN channel. Parameter must be smaller than CANIF_CFG_MAX_CONTROLLER.
; ..\component\CanIf\Implementation\CanIf.c	   781   *  \pre         Check if parameter is in range from 0 to CANIF_CFG_MAX_CONTROLLER-1.
; ..\component\CanIf\Implementation\CanIf.c	   782   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   783   *  \reentrant   FALSE
; ..\component\CanIf\Implementation\CanIf.c	   784   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   785   *  \config      CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON OR CANIF_TRANSMIT_BUFFER_FIFO == STD_ON
; ..\component\CanIf\Implementation\CanIf.c	   786   *  \note        The validity of parameter value is NOT checked
; ..\component\CanIf\Implementation\CanIf.c	   787   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   788  CANIF_LOCAL FUNC(void, CANIF_CODE) CanIf_ClearQueue(CANIF_CHANNEL_CANTYPE_ONLY);
; ..\component\CanIf\Implementation\CanIf.c	   789  #endif
; ..\component\CanIf\Implementation\CanIf.c	   790  
; ..\component\CanIf\Implementation\CanIf.c	   791  
; ..\component\CanIf\Implementation\CanIf.c	   792  #if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   793  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   794   *  CanIf_SetPrioByCanIdTxPduAsQueued()
; ..\component\CanIf\Implementation\CanIf.c	   795   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   796  /*! \brief       Sets the flag "is buffered".
; ..\component\CanIf\Implementation\CanIf.c	   797   *  \details     This API sets the flag of the corresponding TxPdu and returns if it was set before.
; ..\component\CanIf\Implementation\CanIf.c	   798   *               Called out of CanIf_Transmit(), CanIf_CancelTxConfirmation().
; ..\component\CanIf\Implementation\CanIf.c	   799   *  \param[in]   PduId: Internal Tx-PDU ID for which the "is buffered" flag is set. Parameter must be smaller than CANIF_CFG_MAX_TXPDUS.
; ..\component\CanIf\Implementation\CanIf.c	   800   *  \return      E_OK: PduId was not already buffered.
; ..\component\CanIf\Implementation\CanIf.c	   801   *               E_NOT_OK: PduId was already buffered.
; ..\component\CanIf\Implementation\CanIf.c	   802   *  \pre         Check if a PrioByCanId transmit buffer is assigned to the TxPdu.
; ..\component\CanIf\Implementation\CanIf.c	   803   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   804   *  \reentrant   FALSE
; ..\component\CanIf\Implementation\CanIf.c	   805   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   806   *  \config      CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON
; ..\component\CanIf\Implementation\CanIf.c	   807   *  \note        The validity of parameter value is NOT checked.
; ..\component\CanIf\Implementation\CanIf.c	   808   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   809  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_SetPrioByCanIdTxPduAsQueued(PduIdType PduId);
; ..\component\CanIf\Implementation\CanIf.c	   810  
; ..\component\CanIf\Implementation\CanIf.c	   811  
; ..\component\CanIf\Implementation\CanIf.c	   812  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   813   *  CanIf_ClearPrioByCanIdTxPduAsQueued()
; ..\component\CanIf\Implementation\CanIf.c	   814   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   815  /*! \brief       Resets the flag "is buffered".
; ..\component\CanIf\Implementation\CanIf.c	   816   *  \details     This API resets the flag of the corresponding TxPdu and returns if it was reset before.
; ..\component\CanIf\Implementation\CanIf.c	   817   *               Called out of CanIf_Transmit(), CanIf_CancelTransmit(), CanIf_TxQueueTransmit(), CanIf_CancelTransmit().
; ..\component\CanIf\Implementation\CanIf.c	   818   *  \param[in]   PduId: Internal Tx-PDU ID for which the "is buffered" flag is reset. Parameter must be smaller than CANIF_CFG_MAX_TXPDUS.
; ..\component\CanIf\Implementation\CanIf.c	   819   *  \return      E_OK: PduId was not already buffered.
; ..\component\CanIf\Implementation\CanIf.c	   820   *               E_NOT_OK: PduId was already buffered.
; ..\component\CanIf\Implementation\CanIf.c	   821   *  \pre         Check if a PrioByCanId transmit buffer is assigned to the TxPdu.
; ..\component\CanIf\Implementation\CanIf.c	   822   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   823   *  \reentrant   FALSE
; ..\component\CanIf\Implementation\CanIf.c	   824   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   825   *  \config      CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON
; ..\component\CanIf\Implementation\CanIf.c	   826   *  \note        The validity of parameter value is NOT checked.
; ..\component\CanIf\Implementation\CanIf.c	   827   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   828  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_ClearPrioByCanIdTxPduAsQueued(PduIdType PduId);
; ..\component\CanIf\Implementation\CanIf.c	   829  #endif
; ..\component\CanIf\Implementation\CanIf.c	   830  
; ..\component\CanIf\Implementation\CanIf.c	   831  
; ..\component\CanIf\Implementation\CanIf.c	   832  #if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   833  # if  (CANIF_CANCEL_SUPPORT_API == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   834  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   835   *  CanIf_InitSubInitFifoQueue()
; ..\component\CanIf\Implementation\CanIf.c	   836   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   837  /*! \brief       Resets the flag "is buffered".
; ..\component\CanIf\Implementation\CanIf.c	   838   *  \details     This API resets the flag for the complete Fifo buffer. Called out of CanIf_Init().
; ..\component\CanIf\Implementation\CanIf.c	   839   *  \param[in]   -
; ..\component\CanIf\Implementation\CanIf.c	   840   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	   841   *  \context     TASK
; ..\component\CanIf\Implementation\CanIf.c	   842   *  \reentrant   FALSE
; ..\component\CanIf\Implementation\CanIf.c	   843   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   844   *  \config      CANIF_TRANSMIT_BUFFER_FIFO == STD_ON && CANIF_CANCEL_SUPPORT_API == STD_ON   
; ..\component\CanIf\Implementation\CanIf.c	   845   **********************************************************************************************************************/  
; ..\component\CanIf\Implementation\CanIf.c	   846  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_InitSubInitFifoQueue(void);
; ..\component\CanIf\Implementation\CanIf.c	   847  # endif
; ..\component\CanIf\Implementation\CanIf.c	   848  #endif
; ..\component\CanIf\Implementation\CanIf.c	   849  
; ..\component\CanIf\Implementation\CanIf.c	   850  
; ..\component\CanIf\Implementation\CanIf.c	   851  #if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   852    /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   853   *  CanIf_TransmitSubCheckFiFoQueueEmpty()
; ..\component\CanIf\Implementation\CanIf.c	   854   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   855  /*! \brief       Checks if the FIFO corresponding to the Tx PDU ID is empty.
; ..\component\CanIf\Implementation\CanIf.c	   856   *  \details     Called out of CanIf_Transmit().
; ..\component\CanIf\Implementation\CanIf.c	   857   *  \param[in]   CanTxPduId: Internal Tx-PDU ID to be checked. Parameter must be smaller than CANIF_CFG_MAX_TXPDUS.
; ..\component\CanIf\Implementation\CanIf.c	   858   *  \return      E_OK:     Buffer is empty.
; ..\component\CanIf\Implementation\CanIf.c	   859   *               E_NOT_OK: Buffer is not still empty.
; ..\component\CanIf\Implementation\CanIf.c	   860   *  \pre         CanTxPduId must be mapped to a Tx-Buffer of handling type: FIFO
; ..\component\CanIf\Implementation\CanIf.c	   861   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   862   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	   863   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   864   *  \config      CANIF_TRANSMIT_BUFFER_FIFO == STD_ON
; ..\component\CanIf\Implementation\CanIf.c	   865   **********************************************************************************************************************/  
; ..\component\CanIf\Implementation\CanIf.c	   866  CANIF_LOCAL_INLINE FUNC(boolean, CANIF_CODE) CanIf_TransmitSubCheckFiFoQueueEmpty(PduIdType CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	   867  #endif
; ..\component\CanIf\Implementation\CanIf.c	   868  
; ..\component\CanIf\Implementation\CanIf.c	   869  
; ..\component\CanIf\Implementation\CanIf.c	   870  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   871   *  CanIf_HlIndication()
; ..\component\CanIf\Implementation\CanIf.c	   872   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   873  /*! \brief       Reports a received message to upper layer.
; ..\component\CanIf\Implementation\CanIf.c	   874   *  \details     Additionally it handles: wake-up validation state, DLC check, meta data. Called out of CanIf_RxIndication().
; ..\component\CanIf\Implementation\CanIf.c	   875   *  \param[in]   Hrh: hardware receive handle. Parameter must be smaller than CANIF_CFG_MAX_MAILBOXES.
; ..\component\CanIf\Implementation\CanIf.c	   876   *  \param[in]   PduId: Internal Rx-PDU ID. Parameter must be smaller than CANIF_CFG_MAX_RXPDUS.
; ..\component\CanIf\Implementation\CanIf.c	   877   *  \param[in]   CanSduPtr: pointer to Rx-data
; ..\component\CanIf\Implementation\CanIf.c	   878   *  \param[in]   CanDlc: length of Rx-data
; ..\component\CanIf\Implementation\CanIf.c	   879   *  \param[in]   CanId: CAN identifier (depends on configuration)
; ..\component\CanIf\Implementation\CanIf.c	   880   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	   881   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   882   *  \reentrant   FALSE
; ..\component\CanIf\Implementation\CanIf.c	   883   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   884   *  \config      -
; ..\component\CanIf\Implementation\CanIf.c	   885   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   886  #if ((CANIF_SUPPORT_NMOSEK_INDICATION == STD_ON) || (CANIF_META_DATA_RX_SUPPORT == STD_ON) || (CANIF_RX_INDICATION_TYPE_IV_IS_USED == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	   887  /* static void CanIf_HlIndication(CanIf_HwHandleType Hrh, PduIdType PduId, const uint8 *CanSduPtr, uint8 CanDlc, Can_IdType CanId); */
; ..\component\CanIf\Implementation\CanIf.c	   888  CANIF_LOCAL FUNC(void, CANIF_CODE) CanIf_HlIndication(CanIf_HwHandleType  Hrh, PduIdType PduId, P2CONST(uint8, AUTOMATIC, CANIF_CBK_DRV_VAR) CanSduPtr, uint8 CanDlc, Can_IdType CanId);
; ..\component\CanIf\Implementation\CanIf.c	   889  #else
; ..\component\CanIf\Implementation\CanIf.c	   890  CANIF_LOCAL FUNC(void, CANIF_CODE) CanIf_HlIndication(CanIf_HwHandleType  Hrh, PduIdType PduId, P2CONST(uint8, AUTOMATIC, CANIF_CBK_DRV_VAR) CanSduPtr, uint8 CanDlc);
; ..\component\CanIf\Implementation\CanIf.c	   891  #endif
; ..\component\CanIf\Implementation\CanIf.c	   892  
; ..\component\CanIf\Implementation\CanIf.c	   893  
; ..\component\CanIf\Implementation\CanIf.c	   894  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   895   *  CanIf_HlTxConfirmation()
; ..\component\CanIf\Implementation\CanIf.c	   896   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   897  /*! \brief       Reports the confirmation for a successful transmission.
; ..\component\CanIf\Implementation\CanIf.c	   898   *  \details     Called out of CanIf_TxConfirmation(), CanIf_Transmit().
; ..\component\CanIf\Implementation\CanIf.c	   899   *  \param[in]   CanTxPduId: Internal Tx-PDU ID. Parameter must be smaller than CANIF_CFG_MAX_TXPDUS.
; ..\component\CanIf\Implementation\CanIf.c	   900   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	   901   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   902   *  \reentrant   TRUE only for different Tx-PDUs (CanTxPduId).
; ..\component\CanIf\Implementation\CanIf.c	   903   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   904   *  \config      -
; ..\component\CanIf\Implementation\CanIf.c	   905   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   906  CANIF_LOCAL FUNC(void, CANIF_CODE) CanIf_HlTxConfirmation(PduIdType CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	   907  
; ..\component\CanIf\Implementation\CanIf.c	   908  
; ..\component\CanIf\Implementation\CanIf.c	   909  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   910   *  CanIf_TransmitSubVerifyPduLength()
; ..\component\CanIf\Implementation\CanIf.c	   911   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   912  /*! \brief       Verifies the Tx-PDU length and truncates it if necessary.
; ..\component\CanIf\Implementation\CanIf.c	   913   *  \details     Called out of CanIf_Transmit().
; ..\component\CanIf\Implementation\CanIf.c	   914   *  \param[in]   CanTxPduId: Internal Tx-PDU ID. Parameter must be smaller than CANIF_CFG_MAX_TXPDUS.
; ..\component\CanIf\Implementation\CanIf.c	   915   *  \param[in]   localPduPtr: Pointer to Tx-PDU data (length, CAN identifier, handle ID) to be transmitted.
; ..\component\CanIf\Implementation\CanIf.c	   916   *  \return      CANIF_DO_TRANSMIT: Tx-PDU may be transmitted.
; ..\component\CanIf\Implementation\CanIf.c	   917   *               CANIF_DO_NOT_TRANSMIT: Tx-PDU may not be transmitted.
; ..\component\CanIf\Implementation\CanIf.c	   918   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	   919   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   920   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	   921   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   922   *  \config      -
; ..\component\CanIf\Implementation\CanIf.c	   923   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   924  CANIF_LOCAL_INLINE FUNC(CanIf_TransmitStateType, CANIF_CODE) CanIf_TransmitSubVerifyPduLength(CONST(PduIdType, AUTOMATIC) CanTxPduId, P2VAR(Can_PduType, AUTOMATIC, AUTOMATIC) localPduPtr);
; ..\component\CanIf\Implementation\CanIf.c	   925  
; ..\component\CanIf\Implementation\CanIf.c	   926  
; ..\component\CanIf\Implementation\CanIf.c	   927  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   928  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   929   *  CanIf_TransmitSubHandleTxPduFilter()
; ..\component\CanIf\Implementation\CanIf.c	   930   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   931  /*! \brief       Verifies whether the requested Tx-PDU may be transmitted or NOT.
; ..\component\CanIf\Implementation\CanIf.c	   932   *  \details     While the PN filter is active only dedicated Tx PDUs are transmitted. Called out of CanIf_Transmit().
; ..\component\CanIf\Implementation\CanIf.c	   933   *  \param[in]   CANIF_CHANNEL_CANTYPE_FIRST: Index of CAN channel. Parameter must be smaller than CANIF_CFG_MAX_CONTROLLER.
; ..\component\CanIf\Implementation\CanIf.c	   934   *  \param[in]   CanTxPduId: Internal Tx-PDU ID. Parameter must be smaller than CANIF_CFG_MAX_TXPDUS.
; ..\component\CanIf\Implementation\CanIf.c	   935   *  \return      CANIF_DO_TRANSMIT: Tx-PDU may be transmitted.
; ..\component\CanIf\Implementation\CanIf.c	   936   *               CANIF_DO_NOT_TRANSMIT: Tx-PDU may not be transmitted.
; ..\component\CanIf\Implementation\CanIf.c	   937   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	   938   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   939   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	   940   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   941   *  \config      CANIF_PN_WU_TX_PDU_FILTER == STD_ON
; ..\component\CanIf\Implementation\CanIf.c	   942   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   943  CANIF_LOCAL_INLINE FUNC(CanIf_TransmitStateType, CANIF_CODE) CanIf_TransmitSubHandleTxPduFilter(CANIF_CHANNEL_CANTYPE_FIRST CONST(PduIdType, AUTOMATIC) CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	   944  #endif
; ..\component\CanIf\Implementation\CanIf.c	   945  
; ..\component\CanIf\Implementation\CanIf.c	   946  
; ..\component\CanIf\Implementation\CanIf.c	   947  #if (CANIF_META_DATA_TX_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	   948  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   949   *  CanIf_TransmitSubHandleMetaData()
; ..\component\CanIf\Implementation\CanIf.c	   950   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   951  /*! \brief       Extracts for a meta data Tx-PDU the meta data from passed payload and adapts the CAN identifier accordingly.
; ..\component\CanIf\Implementation\CanIf.c	   952   *  \details     Called out of CanIf_Transmit().
; ..\component\CanIf\Implementation\CanIf.c	   953   *  \param[in]   PduInfoPtr: PDU Info Pointer for payload including the meta data.
; ..\component\CanIf\Implementation\CanIf.c	   954   *  \param[in]   localPduPtr: Pointer to Tx-PDU data (length, CAN identifier, handle ID) to be transmitted.
; ..\component\CanIf\Implementation\CanIf.c	   955   *  \pre         All members of PduInfoPtr and localPduPtr except localPduPtr->length must have valid values. No parameter values are checked.
; ..\component\CanIf\Implementation\CanIf.c	   956   *               Consistency of PduInfoPtr must be ensured. Hence this API must be called protected with critical area.
; ..\component\CanIf\Implementation\CanIf.c	   957   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   958   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	   959   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   960   *  \config      CANIF_META_DATA_TX_SUPPORT == STD_ON
; ..\component\CanIf\Implementation\CanIf.c	   961   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   962  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_TransmitSubHandleMetaData(P2CONST(PduInfoType, AUTOMATIC, CANIF_APPL_MSG_VAR) PduInfoPtr, P2VAR(Can_PduType, AUTOMATIC, AUTOMATIC) localPduPtr);
; ..\component\CanIf\Implementation\CanIf.c	   963  #endif
; ..\component\CanIf\Implementation\CanIf.c	   964  
; ..\component\CanIf\Implementation\CanIf.c	   965  
; ..\component\CanIf\Implementation\CanIf.c	   966  #if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED) 
; ..\component\CanIf\Implementation\CanIf.c	   967  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   968   *  CanIf_TransmitSubJ1939DynAddr()
; ..\component\CanIf\Implementation\CanIf.c	   969   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   970  /*! \brief       Modifies the CAN identifier according to J1939 specification.
; ..\component\CanIf\Implementation\CanIf.c	   971   *  \details     Called out of CanIf_Transmit().
; ..\component\CanIf\Implementation\CanIf.c	   972   *  \param[in]   CANIF_CHANNEL_CANTYPE_FIRST: Index of CAN channel. Parameter must be smaller than CANIF_CFG_MAX_CONTROLLER.
; ..\component\CanIf\Implementation\CanIf.c	   973   *  \param[in]   localPduPtr: Pointer to PDU data.
; ..\component\CanIf\Implementation\CanIf.c	   974   *  \return      E_OK: Modification of CAN identifier succeeded.
; ..\component\CanIf\Implementation\CanIf.c	   975   *               E_NOT_OK: Modification of CAN identifier failed. In this case the processing of PDU must be cancelled.
; ..\component\CanIf\Implementation\CanIf.c	   976   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	   977   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   978   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	   979   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   980   *  \config      CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED
; ..\component\CanIf\Implementation\CanIf.c	   981   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   982  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_TransmitSubJ1939DynAddr(CANIF_CHANNEL_CANTYPE_FIRST P2VAR(Can_PduType, AUTOMATIC, AUTOMATIC)localPduPtr);
; ..\component\CanIf\Implementation\CanIf.c	   983  #endif
; ..\component\CanIf\Implementation\CanIf.c	   984  
; ..\component\CanIf\Implementation\CanIf.c	   985  
; ..\component\CanIf\Implementation\CanIf.c	   986  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	   987  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	   988   *  CanIf_TransmitSubHandleTxResBusy()
; ..\component\CanIf\Implementation\CanIf.c	   989   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	   990  /*! \brief       Handles the Tx-queue.
; ..\component\CanIf\Implementation\CanIf.c	   991   *  \details     Called out of CanIf_Transmit().
; ..\component\CanIf\Implementation\CanIf.c	   992   *  \param[in]   localPduPtr: Pointer to PDU data.
; ..\component\CanIf\Implementation\CanIf.c	   993   *  \return      E_OK: PDU was successfully buffered.
; ..\component\CanIf\Implementation\CanIf.c	   994   *               E_NOT_OK: PDU could not be buffered.
; ..\component\CanIf\Implementation\CanIf.c	   995   *  \pre         Due to write access to Tx-buffer this API must be called protected with critical area!
; ..\component\CanIf\Implementation\CanIf.c	   996   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	   997   *  \reentrant   TRUE (only for a different (localPduPtr->swPduHandle))
; ..\component\CanIf\Implementation\CanIf.c	   998   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	   999   *  \config      CANIF_TRANSMIT_BUFFER == STD_ON
; ..\component\CanIf\Implementation\CanIf.c	  1000   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1001  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_TransmitSubHandleTxResBusy(P2CONST(Can_PduType, AUTOMATIC, AUTOMATIC) localPduPtr);
; ..\component\CanIf\Implementation\CanIf.c	  1002  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1003  
; ..\component\CanIf\Implementation\CanIf.c	  1004  
; ..\component\CanIf\Implementation\CanIf.c	  1005  #if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	  1006  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1007   *  CanIf_RxIndicationSubJ1939DynAddr()
; ..\component\CanIf\Implementation\CanIf.c	  1008   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1009  /*! \brief       Modifies the CAN identifier according to J1939 specification.
; ..\component\CanIf\Implementation\CanIf.c	  1010   *  \details     Called out of CanIf_RxIndicationAsr403().
; ..\component\CanIf\Implementation\CanIf.c	  1011   *  \param[in]   rxSearchParams: Parameters needed for J1939 dynamic addressing.
; ..\component\CanIf\Implementation\CanIf.c	  1012   *  \return      E_OK: Modification of CAN identifier succeeded.
; ..\component\CanIf\Implementation\CanIf.c	  1013   *               E_NOT_OK: Modification of CAN identifier failed. In this case the processing of PDU must be cancelled.
; ..\component\CanIf\Implementation\CanIf.c	  1014   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	  1015   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1016   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1017   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1018   *  \config      CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED
; ..\component\CanIf\Implementation\CanIf.c	  1019   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1020  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_RxIndicationSubJ1939DynAddr(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams);
; ..\component\CanIf\Implementation\CanIf.c	  1021  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1022  
; ..\component\CanIf\Implementation\CanIf.c	  1023  
; ..\component\CanIf\Implementation\CanIf.c	  1024  #if (CANIF_SEARCH_ALGORITHM == CANIF_BINARY)
; ..\component\CanIf\Implementation\CanIf.c	  1025  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1026   *  CanIf_RxIndicationSubBinarySearch()
; ..\component\CanIf\Implementation\CanIf.c	  1027   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1028  /*! \brief       Searches for a matched Rx-message according to binary search algorithm.
; ..\component\CanIf\Implementation\CanIf.c	  1029   *  \details     Called out of CanIf_RxIndicationAsr403().
; ..\component\CanIf\Implementation\CanIf.c	  1030   *  \param[in]   rxSearchParams: Parameters needed for search.
; ..\component\CanIf\Implementation\CanIf.c	  1031   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	  1032   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1033   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1034   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1035   *  \config      CANIF_SEARCH_ALGORITHM == CANIF_BINARY
; ..\component\CanIf\Implementation\CanIf.c	  1036   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1037  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubBinarySearch(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams);
; ..\component\CanIf\Implementation\CanIf.c	  1038  
; ..\component\CanIf\Implementation\CanIf.c	  1039  
; ..\component\CanIf\Implementation\CanIf.c	  1040  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1041   *  CanIf_RxIndicationSubBinarySearchSubCheckMsgType()
; ..\component\CanIf\Implementation\CanIf.c	  1042   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1043  /*! \brief       Checks the message type for a matched Rx-message according to binary search algorithm.
; ..\component\CanIf\Implementation\CanIf.c	  1044   *  \details     Called out of CanIf_RxIndicationSubBinarySearch().
; ..\component\CanIf\Implementation\CanIf.c	  1045   *  \param[in]   rxSearchParams: Parameters needed for message type check.
; ..\component\CanIf\Implementation\CanIf.c	  1046   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	  1047   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1048   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1049   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1050   *  \config      (CANIF_SEARCH_ALGORITHM == CANIF_BINARY) && (CANIF_RX_SEARCH_CONSIDER_MSG_TYPE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1051    **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1052  # if (CANIF_RX_SEARCH_CONSIDER_MSG_TYPE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1053  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubBinarySearchSubCheckMsgType(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams);
; ..\component\CanIf\Implementation\CanIf.c	  1054  # endif
; ..\component\CanIf\Implementation\CanIf.c	  1055  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1056  
; ..\component\CanIf\Implementation\CanIf.c	  1057  
; ..\component\CanIf\Implementation\CanIf.c	  1058  #if (CANIF_SEARCH_ALGORITHM == CANIF_DOUBLE_HASH)
; ..\component\CanIf\Implementation\CanIf.c	  1059  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1060   *  CanIf_RxIndicationSubDoubleHashSearch()
; ..\component\CanIf\Implementation\CanIf.c	  1061   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1062  /*! \brief       Searches for a matched Rx-message according to double-hash search algorithm.
; ..\component\CanIf\Implementation\CanIf.c	  1063   *  \details     Called out of CanIf_RxIndicationAsr403().
; ..\component\CanIf\Implementation\CanIf.c	  1064   *  \param[in]   rxSearchParams: Parameters needed for search.
; ..\component\CanIf\Implementation\CanIf.c	  1065   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	  1066   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1067   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1068   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1069   *  \config      CANIF_SEARCH_ALGORITHM == CANIF_DOUBLE_HASH
; ..\component\CanIf\Implementation\CanIf.c	  1070   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1071  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubDoubleHashSearch(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams);
; ..\component\CanIf\Implementation\CanIf.c	  1072  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1073  
; ..\component\CanIf\Implementation\CanIf.c	  1074  
; ..\component\CanIf\Implementation\CanIf.c	  1075  #if (CANIF_SEARCH_ALGORITHM == CANIF_LINEAR)
; ..\component\CanIf\Implementation\CanIf.c	  1076  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1077   *  CanIf_RxIndicationSubLinearSearch()
; ..\component\CanIf\Implementation\CanIf.c	  1078   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1079  /*! \brief       Searches for a matched Rx-message according to linear search algorithm.
; ..\component\CanIf\Implementation\CanIf.c	  1080   *  \details     Called out of CanIf_RxIndicationAsr403().
; ..\component\CanIf\Implementation\CanIf.c	  1081   *  \param[in]   rxSearchParams: Parameters needed for search.
; ..\component\CanIf\Implementation\CanIf.c	  1082   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	  1083   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1084   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1085   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1086   *  \config      CANIF_SEARCH_ALGORITHM == CANIF_LINEAR
; ..\component\CanIf\Implementation\CanIf.c	  1087   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1088  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubLinearSearch(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams);
; ..\component\CanIf\Implementation\CanIf.c	  1089  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1090  
; ..\component\CanIf\Implementation\CanIf.c	  1091  
; ..\component\CanIf\Implementation\CanIf.c	  1092  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1093   *  CanIf_RxIndicationSubReceptionPduMode()
; ..\component\CanIf\Implementation\CanIf.c	  1094   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1095  /*! \brief       Checks if FD format and PDU reception mode match.
; ..\component\CanIf\Implementation\CanIf.c	  1096   *  \details     Is called out from CanIf_RxIndicationSubRangeSearch() and CanIf_RxIndicationAsr403().
; ..\component\CanIf\Implementation\CanIf.c	  1097   *  \param[in]   rxSearchParams: Parameters needed for search.
; ..\component\CanIf\Implementation\CanIf.c	  1098   *  \return      CANIF_NO_NOTIFICATION: RxPduId did not match regarding FD format and PDU reception mode.
; ..\component\CanIf\Implementation\CanIf.c	  1099   *               CANIF_TX_RX_NOTIFICATION: RxPduId did match regarding FD format and PDU reception mode.
; ..\component\CanIf\Implementation\CanIf.c	  1100   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	  1101   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1102   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1103   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1104   *  \config      -
; ..\component\CanIf\Implementation\CanIf.c	  1105   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1106  CANIF_LOCAL_INLINE FUNC(CanIf_NotifStatusType, CANIF_CODE) CanIf_RxIndicationSubReceptionPduMode(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams);
; ..\component\CanIf\Implementation\CanIf.c	  1107  
; ..\component\CanIf\Implementation\CanIf.c	  1108  
; ..\component\CanIf\Implementation\CanIf.c	  1109  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1110   *  CanIf_RxIndicationSubRangeSearch()
; ..\component\CanIf\Implementation\CanIf.c	  1111   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1112  /*! \brief       Searches for a matched Rx-range.
; ..\component\CanIf\Implementation\CanIf.c	  1113   *  \details     This API uses the search algorithm linear. Called out of CanIf_RxIndicationAsr403().
; ..\component\CanIf\Implementation\CanIf.c	  1114   *  \param[in]   rxSearchParams: Parameters needed for search.
; ..\component\CanIf\Implementation\CanIf.c	  1115   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	  1116   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1117   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1118   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1119   *  \config      -
; ..\component\CanIf\Implementation\CanIf.c	  1120   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1121  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubRangeSearch(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams);
; ..\component\CanIf\Implementation\CanIf.c	  1122  
; ..\component\CanIf\Implementation\CanIf.c	  1123  
; ..\component\CanIf\Implementation\CanIf.c	  1124  #if ((CANIF_WAKEUP_VALIDATION == STD_ON) && (CANIF_WAKEUP_VALID_ALL_RX_MSGS == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  1125  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1126   *  CanIf_RxIndicationSubWakeupValidation()
; ..\component\CanIf\Implementation\CanIf.c	  1127   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1128  /*! \brief       Handles the wake-up validation state.
; ..\component\CanIf\Implementation\CanIf.c	  1129   *  \details     Called out of CanIf_RxIndicationAsr403().
; ..\component\CanIf\Implementation\CanIf.c	  1130   *  \param[in]   rxSearchParams: Required parameters.
; ..\component\CanIf\Implementation\CanIf.c	  1131   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	  1132   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1133   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1134   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1135   *  \config      (CANIF_WAKEUP_VALIDATION == STD_ON) && (CANIF_WAKEUP_VALID_ALL_RX_MSGS == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1136   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1137  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubWakeupValidation(P2CONST(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams);
; ..\component\CanIf\Implementation\CanIf.c	  1138  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1139  
; ..\component\CanIf\Implementation\CanIf.c	  1140  
; ..\component\CanIf\Implementation\CanIf.c	  1141  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1142   *  CanIf_TransmitSubWrite()
; ..\component\CanIf\Implementation\CanIf.c	  1143   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1144  /*! \brief       Tries to transmit  a Tx-PDU via CAN driver. In case of CAN driver is busy and the Tx-PDU is mapped
; ..\component\CanIf\Implementation\CanIf.c	  1145   *               to a Tx-buffer the Tx-PDU is buffered otherwise discarded.
; ..\component\CanIf\Implementation\CanIf.c	  1146   *  \details     Called out of CanIf_Transmit().
; ..\component\CanIf\Implementation\CanIf.c	  1147   *  \param[in]   localPduPtr: Pointer to Tx-PDU data (length, CAN identifier, handle ID) to be transmitted.
; ..\component\CanIf\Implementation\CanIf.c	  1148   *  \return      E_OK: PDU was successfuly handled. 
; ..\component\CanIf\Implementation\CanIf.c	  1149   *               E_NOT_OK: It was not possible to write the PDU to CAN driver or to buffer it.
; ..\component\CanIf\Implementation\CanIf.c	  1150   *  \pre         Must be called in context of entered CANIF_EXCLUSIVE_AREA_4.
; ..\component\CanIf\Implementation\CanIf.c	  1151   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1152   *  \reentrant   TRUE (only for a different (localPduPtr->swPduHandle))
; ..\component\CanIf\Implementation\CanIf.c	  1153   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1154   *  \config      -
; ..\component\CanIf\Implementation\CanIf.c	  1155   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1156  CANIF_LOCAL_INLINE FUNC (Std_ReturnType, CANIF_CODE) CanIf_TransmitSubWrite(P2CONST(Can_PduType, AUTOMATIC, AUTOMATIC) localPduPtr);
; ..\component\CanIf\Implementation\CanIf.c	  1157  
; ..\component\CanIf\Implementation\CanIf.c	  1158  
; ..\component\CanIf\Implementation\CanIf.c	  1159  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1160   *  CanIf_RxIndicationSubBasicCan()
; ..\component\CanIf\Implementation\CanIf.c	  1161   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1162  /*! \brief       Handles the reception if a Rx-PDU which is mapped to a BasicCAN HW-object.
; ..\component\CanIf\Implementation\CanIf.c	  1163   *  \details     Called out of CanIf_RxIndicationAsr403().
; ..\component\CanIf\Implementation\CanIf.c	  1164   *  \param[in]   rxSearchParamsPtr: Pointer to parameters needed for search.
; ..\component\CanIf\Implementation\CanIf.c	  1165   *  \pre         Must only be called if Hrh is of type: BasicCAN.
; ..\component\CanIf\Implementation\CanIf.c	  1166   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1167   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1168   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1169   *  \config      -
; ..\component\CanIf\Implementation\CanIf.c	  1170   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1171  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubBasicCan(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams);
; ..\component\CanIf\Implementation\CanIf.c	  1172  
; ..\component\CanIf\Implementation\CanIf.c	  1173  
; ..\component\CanIf\Implementation\CanIf.c	  1174  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1175   *  CanIf_HlIndicationSubULCall()
; ..\component\CanIf\Implementation\CanIf.c	  1176   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1177  /*! \brief       Calls the uppper layer during reception.
; ..\component\CanIf\Implementation\CanIf.c	  1178   *  \details     Called out of CanIf_HlIndication().
; ..\component\CanIf\Implementation\CanIf.c	  1179   *  \param[in]   PduId: Internal Rx-PDU ID. Parameter must be smaller than CANIF_CFG_MAX_RXPDUS.
; ..\component\CanIf\Implementation\CanIf.c	  1180   *  \param[in]   CanSduPtr: pointer to Rx-data
; ..\component\CanIf\Implementation\CanIf.c	  1181   *  \param[in]   CanDlc: length of Rx-data
; ..\component\CanIf\Implementation\CanIf.c	  1182   *  \param[in]   CanId: CAN identifier (depends on configuration)
; ..\component\CanIf\Implementation\CanIf.c	  1183   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	  1184   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1185   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1186   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1187   *  \config      -
; ..\component\CanIf\Implementation\CanIf.c	  1188   **********************************************************************************************************************/  
; ..\component\CanIf\Implementation\CanIf.c	  1189  #if (CANIF_SUPPORT_NMOSEK_INDICATION == STD_ON) || (CANIF_RX_INDICATION_TYPE_IV_IS_USED == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1190  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_HlIndicationSubULCall(PduIdType PduId, P2CONST(uint8, AUTOMATIC, CANIF_CBK_DRV_VAR) CanSduPtr, uint8 CanDlc, Can_IdType CanId);
; ..\component\CanIf\Implementation\CanIf.c	  1191  #else
; ..\component\CanIf\Implementation\CanIf.c	  1192  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_HlIndicationSubULCall(PduIdType PduId, P2CONST(uint8, AUTOMATIC, CANIF_CBK_DRV_VAR) CanSduPtr, uint8 CanDlc);
; ..\component\CanIf\Implementation\CanIf.c	  1193  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1194  
; ..\component\CanIf\Implementation\CanIf.c	  1195  
; ..\component\CanIf\Implementation\CanIf.c	  1196  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1197   *  CanIf_SetControllerModeSubSwitch()
; ..\component\CanIf\Implementation\CanIf.c	  1198   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1199  /*! \brief       Sets the controllermode.
; ..\component\CanIf\Implementation\CanIf.c	  1200   *  \details     Called out of CanIf_SetControllerMode().
; ..\component\CanIf\Implementation\CanIf.c	  1201   *  \param[in]   CANIF_CHANNEL_CANTYPE_FIRST: Index of CAN channel. Parameter must be smaller than CANIF_CFG_MAX_CONTROLLER.
; ..\component\CanIf\Implementation\CanIf.c	  1202   *  \param[in]   ControllerMode: target controller mode
; ..\component\CanIf\Implementation\CanIf.c	  1203   *  \return      E_OK: Modification was successfull.
; ..\component\CanIf\Implementation\CanIf.c	  1204   *               E_NOT_OK: Buffer does not fit meta data.  
; ..\component\CanIf\Implementation\CanIf.c	  1205   *  \pre         Must be called in context of entered CANIF_EXCLUSIVE_AREA_0
; ..\component\CanIf\Implementation\CanIf.c	  1206   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1207   *  \reentrant   FALSE
; ..\component\CanIf\Implementation\CanIf.c	  1208   *  \synchronous FALSE
; ..\component\CanIf\Implementation\CanIf.c	  1209   *  \config      -
; ..\component\CanIf\Implementation\CanIf.c	  1210   **********************************************************************************************************************/ 
; ..\component\CanIf\Implementation\CanIf.c	  1211  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_SetControllerModeSubSwitch(CANIF_CHANNEL_CANTYPE_FIRST CanIf_ControllerModeType ControllerMode);
; ..\component\CanIf\Implementation\CanIf.c	  1212  
; ..\component\CanIf\Implementation\CanIf.c	  1213  
; ..\component\CanIf\Implementation\CanIf.c	  1214  #if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1215  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1216   *  CanIf_TxBufferPrioByCanIdQueuePdu()
; ..\component\CanIf\Implementation\CanIf.c	  1217   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1218  /*! \brief       Stores a PDU within the Tx-buffer of type: PRIO_BY_CANID
; ..\component\CanIf\Implementation\CanIf.c	  1219   *  \details     Called out of CanIf_TransmitSubHandleTxResBusy().
; ..\component\CanIf\Implementation\CanIf.c	  1220   *  \param[in]   PduInfoPtr:  Contains length, PduId and datapointer.
; ..\component\CanIf\Implementation\CanIf.c	  1221   *  \pre         Must be called within entered CANIF_EXCLUSIVE_AREA_1 or CANIF_EXCLUSIVE_AREA_4
; ..\component\CanIf\Implementation\CanIf.c	  1222   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1223   *  \reentrant   TRUE (only for a different (PduInfoPtr->swPduHandle))
; ..\component\CanIf\Implementation\CanIf.c	  1224   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1225   *  \config      CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON
; ..\component\CanIf\Implementation\CanIf.c	  1226   **********************************************************************************************************************/ 
; ..\component\CanIf\Implementation\CanIf.c	  1227  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_TxBufferPrioByCanIdQueuePdu(P2CONST(Can_PduType, AUTOMATIC, CANIF_CBK_DRV_VAR) PduInfoPtr);
; ..\component\CanIf\Implementation\CanIf.c	  1228  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1229  
; ..\component\CanIf\Implementation\CanIf.c	  1230  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1231  # if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	  1232  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1233   *  CanIf_InitSubCheckJ1939AddrTables()
; ..\component\CanIf\Implementation\CanIf.c	  1234   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1235  /*! \brief       Check the J1939 address tables configuration.
; ..\component\CanIf\Implementation\CanIf.c	  1236   *  \details     Called out of CanIf_Init().
; ..\component\CanIf\Implementation\CanIf.c	  1237   *  \return      E_OK: J1939 address tables configuration is consistent.
; ..\component\CanIf\Implementation\CanIf.c	  1238   *               E_NOT_OK: J1939 address tables configuration is inconsistent.
; ..\component\CanIf\Implementation\CanIf.c	  1239   *  \pre         -
; ..\component\CanIf\Implementation\CanIf.c	  1240   *  \context     ANY
; ..\component\CanIf\Implementation\CanIf.c	  1241   *  \reentrant   TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1242   *  \synchronous TRUE
; ..\component\CanIf\Implementation\CanIf.c	  1243   *  \config      (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED) && (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1244   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1245  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_InitSubCheckJ1939AddrTables(void);
; ..\component\CanIf\Implementation\CanIf.c	  1246  # endif
; ..\component\CanIf\Implementation\CanIf.c	  1247  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1248  
; ..\component\CanIf\Implementation\CanIf.c	  1249  #define CANIF_STOP_SEC_CODE
; ..\component\CanIf\Implementation\CanIf.c	  1250  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanIf\Implementation\CanIf.c	  1251  
; ..\component\CanIf\Implementation\CanIf.c	  1252  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1253   *  LOCAL DATA PROTOTYPES
; ..\component\CanIf\Implementation\CanIf.c	  1254   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1255  
; ..\component\CanIf\Implementation\CanIf.c	  1256  #define CANIF_START_SEC_CONST_UNSPECIFIED
; ..\component\CanIf\Implementation\CanIf.c	  1257  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanIf\Implementation\CanIf.c	  1258  
; ..\component\CanIf\Implementation\CanIf.c	  1259  /*
; ..\component\CanIf\Implementation\CanIf.c	  1260   * 1. Dim. -> CanIf_GetPduModeType
; ..\component\CanIf\Implementation\CanIf.c	  1261   * 2. Dim. -> CanIf_SetPduModeType
; ..\component\CanIf\Implementation\CanIf.c	  1262   *
; ..\component\CanIf\Implementation\CanIf.c	  1263   * typedef enum {
; ..\component\CanIf\Implementation\CanIf.c	  1264   * CANIF_SET_OFFLINE = 0,
; ..\component\CanIf\Implementation\CanIf.c	  1265   * CANIF_SET_RX_OFFLINE,
; ..\component\CanIf\Implementation\CanIf.c	  1266   * CANIF_SET_RX_ONLINE,
; ..\component\CanIf\Implementation\CanIf.c	  1267   * CANIF_SET_TX_OFFLINE,
; ..\component\CanIf\Implementation\CanIf.c	  1268   * CANIF_SET_TX_ONLINE,
; ..\component\CanIf\Implementation\CanIf.c	  1269   * CANIF_SET_ONLINE,
; ..\component\CanIf\Implementation\CanIf.c	  1270   * CANIF_SET_TX_OFFLINE_ACTIVE
; ..\component\CanIf\Implementation\CanIf.c	  1271   *} CanIf_SetPduModeType;
; ..\component\CanIf\Implementation\CanIf.c	  1272   *
; ..\component\CanIf\Implementation\CanIf.c	  1273   */
; ..\component\CanIf\Implementation\CanIf.c	  1274  CANIF_LOCAL CONST(uint8, CANIF_CONST) CanIfState[CANIF_NO_MODE_PDU_GET_MODE_TYPE_END][CANIF_NO_MODE_PDU_SET_MODE_TYPE_END] = /* PRQA S 1514, 3218 */ /* MD_CanIf_Rule8.9, MD_CanIf_Rule8.9 */ 
; ..\component\CanIf\Implementation\CanIf.c	  1275  {
; ..\component\CanIf\Implementation\CanIf.c	  1276    /* actual state CANIF_GET_OFFLINE: */  
; ..\component\CanIf\Implementation\CanIf.c	  1277    { 
; ..\component\CanIf\Implementation\CanIf.c	  1278      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1279      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1280      (uint8)(CANIF_GET_RX_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1281      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1282      (uint8)(CANIF_GET_TX_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1283      (uint8)(CANIF_GET_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1284      (uint8)(CANIF_GET_OFFLINE_ACTIVE)
; ..\component\CanIf\Implementation\CanIf.c	  1285  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1286  ,   (uint8)(CANIF_GET_ONLINE_WAKF),        /* CANIF_SET_ONLINE_WAKF */
; ..\component\CanIf\Implementation\CanIf.c	  1287      (uint8)(CANIF_GET_TX_ONLINE_WAKF)      /* CANIF_SET_TX_ONLINE_WAKF */
; ..\component\CanIf\Implementation\CanIf.c	  1288  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1289    },
; ..\component\CanIf\Implementation\CanIf.c	  1290    
; ..\component\CanIf\Implementation\CanIf.c	  1291    /* actual state CANIF_GET_RX_ONLINE: */  
; ..\component\CanIf\Implementation\CanIf.c	  1292    {
; ..\component\CanIf\Implementation\CanIf.c	  1293      (uint8)(CANIF_GET_OFFLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1294      (uint8)(CANIF_GET_OFFLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1295      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1296      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1297      (uint8)(CANIF_GET_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1298      (uint8)(CANIF_GET_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1299      (uint8)(CANIF_GET_OFFLINE_ACTIVE_RX_ONLINE)
; ..\component\CanIf\Implementation\CanIf.c	  1300  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1301  ,   (uint8)(CANIF_GET_ONLINE_WAKF),             /* CANIF_SET_ONLINE_WAKF */
; ..\component\CanIf\Implementation\CanIf.c	  1302      (uint8)(CANIF_GET_ONLINE_WAKF)              /* CANIF_SET_TX_ONLINE_WAKF */
; ..\component\CanIf\Implementation\CanIf.c	  1303  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1304    },
; ..\component\CanIf\Implementation\CanIf.c	  1305    
; ..\component\CanIf\Implementation\CanIf.c	  1306    /* actual state CANIF_GET_TX_ONLINE: */  
; ..\component\CanIf\Implementation\CanIf.c	  1307    {
; ..\component\CanIf\Implementation\CanIf.c	  1308      (uint8)(CANIF_GET_OFFLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1309      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1310      (uint8)(CANIF_GET_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1311      (uint8)(CANIF_GET_OFFLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1312      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1313      (uint8)(CANIF_GET_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1314      (uint8)(CANIF_GET_OFFLINE_ACTIVE)
; ..\component\CanIf\Implementation\CanIf.c	  1315  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1316  ,   (uint8)(CANIF_GET_ONLINE_WAKF),   /* CANIF_SET_ONLINE_WAKF */
; ..\component\CanIf\Implementation\CanIf.c	  1317      (uint8)(CANIF_GET_TX_ONLINE_WAKF) /* CANIF_SET_TX_ONLINE_WAKF */
; ..\component\CanIf\Implementation\CanIf.c	  1318  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1319    },
; ..\component\CanIf\Implementation\CanIf.c	  1320      
; ..\component\CanIf\Implementation\CanIf.c	  1321    /* actual state CANIF_GET_ONLINE: */  
; ..\component\CanIf\Implementation\CanIf.c	  1322    {
; ..\component\CanIf\Implementation\CanIf.c	  1323      (uint8)(CANIF_GET_OFFLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1324      (uint8)(CANIF_GET_TX_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1325      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1326      (uint8)(CANIF_GET_RX_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1327      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1328      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1329      (uint8)(CANIF_GET_OFFLINE_ACTIVE_RX_ONLINE) 
; ..\component\CanIf\Implementation\CanIf.c	  1330  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1331  ,   (uint8)(CANIF_GET_ONLINE_WAKF),             /* CANIF_SET_ONLINE_WAKF */
; ..\component\CanIf\Implementation\CanIf.c	  1332      (uint8)(CANIF_GET_ONLINE_WAKF)              /* CANIF_SET_TX_ONLINE_WAKF */
; ..\component\CanIf\Implementation\CanIf.c	  1333  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1334    },
; ..\component\CanIf\Implementation\CanIf.c	  1335      
; ..\component\CanIf\Implementation\CanIf.c	  1336    /* actual state CANIF_GET_OFFLINE_ACTIVE: */  
; ..\component\CanIf\Implementation\CanIf.c	  1337    { 
; ..\component\CanIf\Implementation\CanIf.c	  1338      (uint8)(CANIF_GET_OFFLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1339      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1340      (uint8)(CANIF_GET_OFFLINE_ACTIVE_RX_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1341      (uint8)(CANIF_GET_OFFLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1342      (uint8)(CANIF_GET_TX_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1343      (uint8)(CANIF_GET_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1344      (uint8)(CANIF_NOP)
; ..\component\CanIf\Implementation\CanIf.c	  1345  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1346  ,   (uint8)(CANIF_GET_ONLINE_WAKF),              /* CANIF_SET_ONLINE_WAKF */
; ..\component\CanIf\Implementation\CanIf.c	  1347      (uint8)(CANIF_GET_TX_ONLINE_WAKF)            /* CANIF_SET_TX_ONLINE_WAKF */
; ..\component\CanIf\Implementation\CanIf.c	  1348  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1349    },
; ..\component\CanIf\Implementation\CanIf.c	  1350          
; ..\component\CanIf\Implementation\CanIf.c	  1351    /* actual state CANIF_GET_OFFLINE_ACTIVE_RX_ONLINE: */  
; ..\component\CanIf\Implementation\CanIf.c	  1352    {
; ..\component\CanIf\Implementation\CanIf.c	  1353      (uint8)(CANIF_GET_OFFLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1354      (uint8)(CANIF_GET_OFFLINE_ACTIVE),
; ..\component\CanIf\Implementation\CanIf.c	  1355      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1356      (uint8)(CANIF_GET_RX_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1357      (uint8)(CANIF_GET_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1358      (uint8)(CANIF_GET_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1359      (uint8)(CANIF_NOP)
; ..\component\CanIf\Implementation\CanIf.c	  1360  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1361  ,   (uint8)(CANIF_GET_ONLINE_WAKF),    /* CANIF_SET_ONLINE_WAKF */
; ..\component\CanIf\Implementation\CanIf.c	  1362      (uint8)(CANIF_GET_ONLINE_WAKF)     /* CANIF_SET_TX_ONLINE_WAKF */
; ..\component\CanIf\Implementation\CanIf.c	  1363  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1364    }
; ..\component\CanIf\Implementation\CanIf.c	  1365  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1366  ,
; ..\component\CanIf\Implementation\CanIf.c	  1367    /* actual state CANIF_GET_ONLINE_WAKF: */
; ..\component\CanIf\Implementation\CanIf.c	  1368    {
; ..\component\CanIf\Implementation\CanIf.c	  1369      (uint8)(CANIF_GET_OFFLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1370      (uint8)(CANIF_GET_TX_ONLINE_WAKF),
; ..\component\CanIf\Implementation\CanIf.c	  1371      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1372      (uint8)(CANIF_GET_RX_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1373      (uint8)(CANIF_GET_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1374      (uint8)(CANIF_GET_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1375      (uint8)(CANIF_GET_OFFLINE_ACTIVE_RX_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1376      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1377      (uint8)(CANIF_NOP)
; ..\component\CanIf\Implementation\CanIf.c	  1378    },
; ..\component\CanIf\Implementation\CanIf.c	  1379    /* actual state CANIF_GET_TX_ONLINE_WAKF: */
; ..\component\CanIf\Implementation\CanIf.c	  1380    {
; ..\component\CanIf\Implementation\CanIf.c	  1381      (uint8)(CANIF_GET_OFFLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1382      (uint8)(CANIF_NOP),
; ..\component\CanIf\Implementation\CanIf.c	  1383      (uint8)(CANIF_GET_ONLINE_WAKF),
; ..\component\CanIf\Implementation\CanIf.c	  1384      (uint8)(CANIF_GET_OFFLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1385      (uint8)(CANIF_GET_TX_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1386      (uint8)(CANIF_GET_ONLINE),
; ..\component\CanIf\Implementation\CanIf.c	  1387      (uint8)(CANIF_GET_OFFLINE_ACTIVE),
; ..\component\CanIf\Implementation\CanIf.c	  1388      (uint8)(CANIF_GET_ONLINE_WAKF),
; ..\component\CanIf\Implementation\CanIf.c	  1389      (uint8)(CANIF_NOP)
; ..\component\CanIf\Implementation\CanIf.c	  1390    }
; ..\component\CanIf\Implementation\CanIf.c	  1391  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1392  };
; ..\component\CanIf\Implementation\CanIf.c	  1393  
; ..\component\CanIf\Implementation\CanIf.c	  1394  #if (CANIF_BITQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1395  /* lookup table for setting the flags in the queue */
; ..\component\CanIf\Implementation\CanIf.c	  1396  CANIF_LOCAL CONST(CanIf_TxQueueFlagType, CANIF_CONST) CanShiftLookUp[1u << kCanTxQueueShift] =
; ..\component\CanIf\Implementation\CanIf.c	  1397  {
; ..\component\CanIf\Implementation\CanIf.c	  1398    (CanIf_TxQueueFlagType)0x00000001u, (CanIf_TxQueueFlagType)0x00000002u, (CanIf_TxQueueFlagType)0x00000004u, (CanIf_TxQueueFlagType)0x00000008u,
; ..\component\CanIf\Implementation\CanIf.c	  1399    (CanIf_TxQueueFlagType)0x00000010u, (CanIf_TxQueueFlagType)0x00000020u, (CanIf_TxQueueFlagType)0x00000040u, (CanIf_TxQueueFlagType)0x00000080u
; ..\component\CanIf\Implementation\CanIf.c	  1400  # if ( CPU_TYPE > CPU_TYPE_8 ) /* COV_CANIF_PLATFORM_DEPENDENCY */
; ..\component\CanIf\Implementation\CanIf.c	  1401  ,  (CanIf_TxQueueFlagType)0x00000100u, (CanIf_TxQueueFlagType)0x00000200u, (CanIf_TxQueueFlagType)0x00000400u, (CanIf_TxQueueFlagType)0x00000800u,
; ..\component\CanIf\Implementation\CanIf.c	  1402     (CanIf_TxQueueFlagType)0x00001000u, (CanIf_TxQueueFlagType)0x00002000u, (CanIf_TxQueueFlagType)0x00004000u, (CanIf_TxQueueFlagType)0x00008000u
; ..\component\CanIf\Implementation\CanIf.c	  1403  # endif
; ..\component\CanIf\Implementation\CanIf.c	  1404  # if ( CPU_TYPE > CPU_TYPE_16 ) /* COV_CANIF_PLATFORM_DEPENDENCY */
; ..\component\CanIf\Implementation\CanIf.c	  1405  ,  (CanIf_TxQueueFlagType)0x00010000u, (CanIf_TxQueueFlagType)0x00020000u, (CanIf_TxQueueFlagType)0x00040000u, (CanIf_TxQueueFlagType)0x00080000u,
; ..\component\CanIf\Implementation\CanIf.c	  1406     (CanIf_TxQueueFlagType)0x00100000u, (CanIf_TxQueueFlagType)0x00200000u, (CanIf_TxQueueFlagType)0x00400000u, (CanIf_TxQueueFlagType)0x00800000u,
; ..\component\CanIf\Implementation\CanIf.c	  1407     (CanIf_TxQueueFlagType)0x01000000u, (CanIf_TxQueueFlagType)0x02000000u, (CanIf_TxQueueFlagType)0x04000000u, (CanIf_TxQueueFlagType)0x08000000u,
; ..\component\CanIf\Implementation\CanIf.c	  1408     (CanIf_TxQueueFlagType)0x10000000u, (CanIf_TxQueueFlagType)0x20000000u, (CanIf_TxQueueFlagType)0x40000000u, (CanIf_TxQueueFlagType)0x80000000u
; ..\component\CanIf\Implementation\CanIf.c	  1409  # endif
; ..\component\CanIf\Implementation\CanIf.c	  1410  };
; ..\component\CanIf\Implementation\CanIf.c	  1411  #endif 
; ..\component\CanIf\Implementation\CanIf.c	  1412  
; ..\component\CanIf\Implementation\CanIf.c	  1413  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1414  /* lookup table for maximum value of RxDlc */
; ..\component\CanIf\Implementation\CanIf.c	  1415  CANIF_LOCAL CONST(uint8, CANIF_CONST) RxDlcMaxValueLookUp[2] = /* PRQA S 3218 */ /* MD_CanIf_Rule8.9 */ 
; ..\component\CanIf\Implementation\CanIf.c	  1416  {
; ..\component\CanIf\Implementation\CanIf.c	  1417    8, /* 0: NONE FD */
; ..\component\CanIf\Implementation\CanIf.c	  1418    64 /* 1: FD */
; ..\component\CanIf\Implementation\CanIf.c	  1419  };
; ..\component\CanIf\Implementation\CanIf.c	  1420  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1421  
; ..\component\CanIf\Implementation\CanIf.c	  1422  #define CANIF_STOP_SEC_CONST_UNSPECIFIED
; ..\component\CanIf\Implementation\CanIf.c	  1423  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanIf\Implementation\CanIf.c	  1424  
; ..\component\CanIf\Implementation\CanIf.c	  1425  
; ..\component\CanIf\Implementation\CanIf.c	  1426  #define CANIF_START_SEC_VAR_INIT_UNSPECIFIED
; ..\component\CanIf\Implementation\CanIf.c	  1427  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanIf\Implementation\CanIf.c	  1428  
; ..\component\CanIf\Implementation\CanIf.c	  1429  # if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1430  P2CONST(CanIf_ConfigType, CANIF_VAR_INIT, CANIF_XCFG) CanIf_ConfigDataPtr = NULL_PTR; /* UREQ00035484 */
; ..\component\CanIf\Implementation\CanIf.c	  1431  
; ..\component\CanIf\Implementation\CanIf.c	  1432  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1433  CANIF_LOCAL VAR(boolean, CANIF_VAR_INIT) CanIf_SystemInit = FALSE;
; ..\component\CanIf\Implementation\CanIf.c	  1434  # endif
; ..\component\CanIf\Implementation\CanIf.c	  1435  # endif /* CANIF_USE_INIT_POINTER == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  1436  
; ..\component\CanIf\Implementation\CanIf.c	  1437  
; ..\component\CanIf\Implementation\CanIf.c	  1438  #define CANIF_STOP_SEC_VAR_INIT_UNSPECIFIED
; ..\component\CanIf\Implementation\CanIf.c	  1439  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanIf\Implementation\CanIf.c	  1440  
; ..\component\CanIf\Implementation\CanIf.c	  1441  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1442   *  LOCAL FUNCTIONS / GLOBAL FUNCTIONS
; ..\component\CanIf\Implementation\CanIf.c	  1443   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1444  
; ..\component\CanIf\Implementation\CanIf.c	  1445  #define CANIF_START_SEC_CODE
; ..\component\CanIf\Implementation\CanIf.c	  1446  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanIf\Implementation\CanIf.c	  1447  
; ..\component\CanIf\Implementation\CanIf.c	  1448  #if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1449  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1450   *  CanIf_TransmitSubCheckFiFoQueueEmpty()
; ..\component\CanIf\Implementation\CanIf.c	  1451   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1452  /*
; ..\component\CanIf\Implementation\CanIf.c	  1453  |<DataModelStart>| CanIf_TransmitSubCheckFiFoQueueEmpty
; ..\component\CanIf\Implementation\CanIf.c	  1454  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  1455  IfTxBuffer # from this function #
; ..\component\CanIf\Implementation\CanIf.c	  1456  IfTxBuffer # from caller CanIf_TransmitSubWrite #
; ..\component\CanIf\Implementation\CanIf.c	  1457  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  1458  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  1459  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  1460  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  1461  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  1462  */
; ..\component\CanIf\Implementation\CanIf.c	  1463   /*!
; ..\component\CanIf\Implementation\CanIf.c	  1464   *
; ..\component\CanIf\Implementation\CanIf.c	  1465   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  1466   *
; ..\component\CanIf\Implementation\CanIf.c	  1467   *
; ..\component\CanIf\Implementation\CanIf.c	  1468   *
; ..\component\CanIf\Implementation\CanIf.c	  1469   *
; ..\component\CanIf\Implementation\CanIf.c	  1470   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1471  CANIF_LOCAL_INLINE FUNC(boolean, CANIF_CODE) CanIf_TransmitSubCheckFiFoQueueEmpty(PduIdType CanTxPduId)
; ..\component\CanIf\Implementation\CanIf.c	  1472  {
; ..\component\CanIf\Implementation\CanIf.c	  1473    boolean  retVal = FALSE;
; ..\component\CanIf\Implementation\CanIf.c	  1474    CanIf_AnyIdxType txBufferCfgIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1475    CanIf_AnyIdxType hth;
; ..\component\CanIf\Implementation\CanIf.c	  1476    /* #100 Has PDU a buffer and is it handled as FIFO? */
; ..\component\CanIf\Implementation\CanIf.c	  1477    hth = CANIF_CFG_TX_HTH(CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  1478    txBufferCfgIdx = CANIF_CFG_MAILBOX_TXBUFFERIDX(hth);
; ..\component\CanIf\Implementation\CanIf.c	  1479    /* #110 Only if the FIFO is empty at all, the Tx-PDU may be transmitted directly otherwise the Tx-PDU must be queued into FIFO in order to ensure FIFO-behavior. */
; ..\component\CanIf\Implementation\CanIf.c	  1480    if (CANIF_VAR_TXBUFFERFIFO_BUFFERBASE((CANIF_CFG_TXBUFFERFIFO_BUFFERBASEIDX(txBufferCfgIdx)), eQueueCounter) == 0u)
; ..\component\CanIf\Implementation\CanIf.c	  1481    {
; ..\component\CanIf\Implementation\CanIf.c	  1482      /* NO */
; ..\component\CanIf\Implementation\CanIf.c	  1483      retVal = TRUE;
; ..\component\CanIf\Implementation\CanIf.c	  1484    }
; ..\component\CanIf\Implementation\CanIf.c	  1485    return retVal;
; ..\component\CanIf\Implementation\CanIf.c	  1486  }
; ..\component\CanIf\Implementation\CanIf.c	  1487  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1488  
; ..\component\CanIf\Implementation\CanIf.c	  1489  #if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1490  # if (CANIF_CANCEL_SUPPORT_API == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  1491  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1492   *  CanIf_InitSubInitFifoQueue()
; ..\component\CanIf\Implementation\CanIf.c	  1493   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1494  /*
; ..\component\CanIf\Implementation\CanIf.c	  1495  |<DataModelStart>| CanIf_InitSubInitFifoQueue
; ..\component\CanIf\Implementation\CanIf.c	  1496  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  1497  IfTxBuffer, TransmitCancellationAPI # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  1498  IfTxBuffer, TransmitCancellationAPI # from caller CanIf_Init #
; ..\component\CanIf\Implementation\CanIf.c	  1499  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  1500  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  1501  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  1502  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  1503  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  1504  */ 
; ..\component\CanIf\Implementation\CanIf.c	  1505   /*!
; ..\component\CanIf\Implementation\CanIf.c	  1506   *
; ..\component\CanIf\Implementation\CanIf.c	  1507   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  1508   *
; ..\component\CanIf\Implementation\CanIf.c	  1509   *
; ..\component\CanIf\Implementation\CanIf.c	  1510   *
; ..\component\CanIf\Implementation\CanIf.c	  1511   ********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1512  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_InitSubInitFifoQueue(void)
; ..\component\CanIf\Implementation\CanIf.c	  1513  {
; ..\component\CanIf\Implementation\CanIf.c	  1514    CanIf_AnyIdxType counter;
; ..\component\CanIf\Implementation\CanIf.c	  1515    /* #100 Iterate over all CanIf_TxQueueIndex2FifoEl and set them invalid */
; ..\component\CanIf\Implementation\CanIf.c	  1516    for(counter = 0; counter < CanIf_GetSizeOfTxQueueIndex2FifoEl(); counter++)
; ..\component\CanIf\Implementation\CanIf.c	  1517    {
; ..\component\CanIf\Implementation\CanIf.c	  1518      CANIF_VAR_SET_TXBUFFERFIFO_QUEUEIDX2FIFOEL((counter), CANIF_NO_ENTRY_IN_TX_FIFO);  /* SBSW_CANIF_15 */
; ..\component\CanIf\Implementation\CanIf.c	  1519    }
; ..\component\CanIf\Implementation\CanIf.c	  1520    /* #200 Iterate over all CanIf_TxFifoQueueBase and set them "not queued" */
; ..\component\CanIf\Implementation\CanIf.c	  1521    for(counter = 0; counter < CanIf_GetSizeOfTxFifoQueueBase(); counter++)
; ..\component\CanIf\Implementation\CanIf.c	  1522    {
; ..\component\CanIf\Implementation\CanIf.c	  1523      CANIF_VAR_TXBUFFERFIFO_QUEUEBASE( counter, eQueued) = 0;                           /* SBSW_CANIF_15 */
; ..\component\CanIf\Implementation\CanIf.c	  1524    }
; ..\component\CanIf\Implementation\CanIf.c	  1525  }
; ..\component\CanIf\Implementation\CanIf.c	  1526  # endif
; ..\component\CanIf\Implementation\CanIf.c	  1527  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1528  
; ..\component\CanIf\Implementation\CanIf.c	  1529  #if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1530  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1531   *  CanIf_SetPrioByCanIdTxPduAsQueued()
; ..\component\CanIf\Implementation\CanIf.c	  1532   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1533  /*
; ..\component\CanIf\Implementation\CanIf.c	  1534  |<DataModelStart>| CanIf_SetPrioByCanIdTxPduAsQueued
; ..\component\CanIf\Implementation\CanIf.c	  1535  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  1536  CanIfTxBuffer # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  1537  CanIfTxBuffer # from caller CanIf_TransmitSubHandleTxResBusy #
; ..\component\CanIf\Implementation\CanIf.c	  1538  CanIfTxBuffer, CanIfTransmitCancellationAPI # from caller CanIf_CancelTxConfirmation #
; ..\component\CanIf\Implementation\CanIf.c	  1539  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  1540  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  1541  CanIfTxBuffer, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  1542  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  1543  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  1544  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  1545  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  1546  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  1547  */ 
; ..\component\CanIf\Implementation\CanIf.c	  1548   /*!
; ..\component\CanIf\Implementation\CanIf.c	  1549   *
; ..\component\CanIf\Implementation\CanIf.c	  1550   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  1551   *
; ..\component\CanIf\Implementation\CanIf.c	  1552   *
; ..\component\CanIf\Implementation\CanIf.c	  1553   *
; ..\component\CanIf\Implementation\CanIf.c	  1554   *
; ..\component\CanIf\Implementation\CanIf.c	  1555   *
; ..\component\CanIf\Implementation\CanIf.c	  1556   *
; ..\component\CanIf\Implementation\CanIf.c	  1557   *
; ..\component\CanIf\Implementation\CanIf.c	  1558   *
; ..\component\CanIf\Implementation\CanIf.c	  1559   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1560  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_SetPrioByCanIdTxPduAsQueued(PduIdType PduId)
; Function CanIf_SetPrioByCanIdTxPduAsQueued
.L207:
CanIf_SetPrioByCanIdTxPduAsQueued:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  1561  {
; ..\component\CanIf\Implementation\CanIf.c	  1562  # if (CANIF_BITQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1563    CanIf_AnyIdxType  queueElementIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1564    uint8         elementBitIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1565    PduIdType     queueBitPos;
; ..\component\CanIf\Implementation\CanIf.c	  1566  # endif  
; ..\component\CanIf\Implementation\CanIf.c	  1567    uint8 errorId;
; ..\component\CanIf\Implementation\CanIf.c	  1568    CanIf_AnyIdxType txBufferCfgIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1569    Std_ReturnType retval = E_NOT_OK;
	fcall	.cocofun_1
.L684:

; ..\component\CanIf\Implementation\CanIf.c	  1570    errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  1571    txBufferCfgIdx = CANIF_CFG_MAILBOX_TXBUFFERIDX(CANIF_CFG_TX_HTH(PduId));
; ..\component\CanIf\Implementation\CanIf.c	  1572    /* #100 BitQueue */
; ..\component\CanIf\Implementation\CanIf.c	  1573  # if (CANIF_BITQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1574    /* #110 Compute the elementIdx and the element bit position */
; ..\component\CanIf\Implementation\CanIf.c	  1575    queueBitPos  =  (PduIdType)(PduId - CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_BITPOS2TXPDUIDOFFSET(txBufferCfgIdx));
; ..\component\CanIf\Implementation\CanIf.c	  1576    queueElementIdx = (((uint16_least)queueBitPos) >> kCanTxQueueShift) + CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUESTARTIDX(txBufferCfgIdx); /* PRQA S 2842 */ /* MD_CanIf_Dir4.1_2842 */ 
; ..\component\CanIf\Implementation\CanIf.c	  1577    elementBitIdx  = (uint8)(queueBitPos & kCanTxQueueMask);
; ..\component\CanIf\Implementation\CanIf.c	  1578    /* #120 Is flag already set for given PduId ?*/
; ..\component\CanIf\Implementation\CanIf.c	  1579    if( (CANIF_VAR_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUEFLAGS(queueElementIdx) & CanShiftLookUp[elementBitIdx]) == (CanIf_TxQueueFlagType)0 ) /* PRQA S 2842 */ /* MD_CanIf_Dir4.1_2842 */ 
; ..\component\CanIf\Implementation\CanIf.c	  1580    {  
; ..\component\CanIf\Implementation\CanIf.c	  1581  #  if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1582      if (queueElementIdx >= CanIf_GetSizeOfTxQueueFlags()) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  1583      {
; ..\component\CanIf\Implementation\CanIf.c	  1584        errorId = CANIF_E_FATAL;
; ..\component\CanIf\Implementation\CanIf.c	  1585      }
; ..\component\CanIf\Implementation\CanIf.c	  1586      else
; ..\component\CanIf\Implementation\CanIf.c	  1587  #  endif      
; ..\component\CanIf\Implementation\CanIf.c	  1588      {
; ..\component\CanIf\Implementation\CanIf.c	  1589        /* #130 If not already set do it now and increment counter */
; ..\component\CanIf\Implementation\CanIf.c	  1590        CANIF_VAR_SET_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUEFLAGS(queueElementIdx, (CANIF_VAR_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUEFLAGS(queueElementIdx) | CanShiftLookUp[elementBitIdx]));  /* SBSW_CANIF_20 */
; ..\component\CanIf\Implementation\CanIf.c	  1591        CanIf_IncTxQueueCounter(CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_BUFFERBASEIDX(txBufferCfgIdx)); /* SBSW_CANIF_25 */
; ..\component\CanIf\Implementation\CanIf.c	  1592        retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  1593      }
; ..\component\CanIf\Implementation\CanIf.c	  1594    }
; ..\component\CanIf\Implementation\CanIf.c	  1595    /* #200 ByteQueue */
; ..\component\CanIf\Implementation\CanIf.c	  1596  # else
; ..\component\CanIf\Implementation\CanIf.c	  1597    /* #210 Is flag already set for given PduId? */
; ..\component\CanIf\Implementation\CanIf.c	  1598    if (CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(CANIF_CFG_TX_QUEUEINDEX(PduId), eQueued) == 0u)
	jne	d0,#0,.L2
.L1004:

; ..\component\CanIf\Implementation\CanIf.c	  1599    {
; ..\component\CanIf\Implementation\CanIf.c	  1600      /* #220 If not already set do it now and increment counter */
; ..\component\CanIf\Implementation\CanIf.c	  1601      CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(CANIF_CFG_TX_QUEUEINDEX(PduId), eQueued) = 1u; /* SBSW_CANIF_6 */
	fcall	.cocofun_3
.L685:

; ..\component\CanIf\Implementation\CanIf.c	  1602      CanIf_IncTxQueueCounter(CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_BUFFERBASEIDX(txBufferCfgIdx) ); /* SBSW_CANIF_25 */
	add	d15,#1
	st.b	[a15],d15
.L1005:

; ..\component\CanIf\Implementation\CanIf.c	  1603      retval = E_OK;
	mov	d2,#0
.L2:

; ..\component\CanIf\Implementation\CanIf.c	  1604    }
; ..\component\CanIf\Implementation\CanIf.c	  1605  # endif
; ..\component\CanIf\Implementation\CanIf.c	  1606    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  1607  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1608    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */ /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  1609    {
; ..\component\CanIf\Implementation\CanIf.c	  1610      CanIf_Det_ReportError(CANIF_INIT_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  1611    }
; ..\component\CanIf\Implementation\CanIf.c	  1612  # else
; ..\component\CanIf\Implementation\CanIf.c	  1613    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  1614  # endif
; ..\component\CanIf\Implementation\CanIf.c	  1615    return retval;  
; ..\component\CanIf\Implementation\CanIf.c	  1616  }
	ret
.L608:
	
__CanIf_SetPrioByCanIdTxPduAsQueued_function_end:
	.size	CanIf_SetPrioByCanIdTxPduAsQueued,__CanIf_SetPrioByCanIdTxPduAsQueued_function_end-CanIf_SetPrioByCanIdTxPduAsQueued
.L368:
	; End of function
	
	.sdecl	'.text.CanIf..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.CanIf..cocofun_3'
	.align	2
; Function .cocofun_3
.L209:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	st.b	[a15],d2
.L1180:
	fcall	.cocofun_11
.L686:
	movh.a	a15,#@his(CanIf_TxBufferPrioByCanIdBase)
	lea	a15,[a15]@los(CanIf_TxBufferPrioByCanIdBase)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L1181:
	fret
.L448:
	; End of function
	.sdecl	'.text.CanIf..cocofun_11',code,cluster('.cocofun_11')
	.sect	'.text.CanIf..cocofun_11'
	.align	2
; Function .cocofun_11
.L211:
.cocofun_11:	.type	func
; Function body .cocofun_11, coco_iter:1
	movh.a	a15,#@his(CanIf_TxBufferPrioByCanIdByteQueueConfig)
	lea	a15,[a15]@los(CanIf_TxBufferPrioByCanIdByteQueueConfig)
	addsc.a	a15,a15,d15,#2
	ld.bu	d15,[a15]
.L1221:
	fret
.L488:
	; End of function
	.sdecl	'.text.CanIf..cocofun_1',code,cluster('.cocofun_1')
	.sect	'.text.CanIf..cocofun_1'
	.align	2
; Function .cocofun_1
.L213:
.cocofun_1:	.type	func
; Function body .cocofun_1, coco_iter:0
	mov	d2,#1
	fcall	.cocofun_9
.L678:
	fcall	.cocofun_10
.L682:
	ld.bu	d15,[a15]3
.L683:
	fcall	.cocofun_12
.L1170:
	addsc.a	a15,a15,d4,#1
	ld.bu	d0,[a15]
	movh.a	a15,#@his(CanIf_TxQueue)
	lea	a15,[a15]@los(CanIf_TxQueue)
	addsc.a	a15,a15,d0,#1
	ld.bu	d0,[+a15]1
.L1171:
	fret
.L438:
	; End of function
	.sdecl	'.text.CanIf..cocofun_12',code,cluster('.cocofun_12')
	.sect	'.text.CanIf..cocofun_12'
	.align	2
; Function .cocofun_12
.L215:
.cocofun_12:	.type	func
; Function body .cocofun_12, coco_iter:1
	movh.a	a15,#@his(CanIf_TxPduQueueIndex)
	lea	a15,[a15]@los(CanIf_TxPduQueueIndex)
.L1226:
	fret
.L493:
	; End of function
	.sdecl	'.text.CanIf..cocofun_10',code,cluster('.cocofun_10')
	.sect	'.text.CanIf..cocofun_10'
	.align	2
; Function .cocofun_10
.L217:
.cocofun_10:	.type	func
; Function body .cocofun_10, coco_iter:1
	ld.bu	d15,[a15]5
	mul	d15,d15,#6
.L1216:
	fcall	.cocofun_13
.L681:
	fret
.L483:
	; End of function
	.sdecl	'.text.CanIf..cocofun_13',code,cluster('.cocofun_13')
	.sect	'.text.CanIf..cocofun_13'
	.align	2
; Function .cocofun_13
.L219:
.cocofun_13:	.type	func
; Function body .cocofun_13, coco_iter:2
	movh.a	a15,#@his(CanIf_MailBoxConfig)
	lea	a15,[a15]@los(CanIf_MailBoxConfig)
	addsc.a	a15,a15,d15,#0
.L1231:
	fret
.L498:
	; End of function
	.sdecl	'.text.CanIf..cocofun_9',code,cluster('.cocofun_9')
	.sect	'.text.CanIf..cocofun_9'
	.align	2
; Function .cocofun_9
.L221:
.cocofun_9:	.type	func
; Function body .cocofun_9, coco_iter:1
	fcall	.cocofun_14
.L680:
	addsc.a	a15,a15,d4,#3
.L1211:
	fret
.L478:
	; End of function
	.sdecl	'.text.CanIf..cocofun_14',code,cluster('.cocofun_14')
	.sect	'.text.CanIf..cocofun_14'
	.align	2
; Function .cocofun_14
.L223:
.cocofun_14:	.type	func
; Function body .cocofun_14, coco_iter:2
	movh.a	a15,#@his(CanIf_TxPduConfig)
.L679:
	lea	a15,[a15]@los(CanIf_TxPduConfig)
.L1236:
	fret
.L503:
	; End of function
	.sdecl	'.text.CanIf.CanIf_ClearPrioByCanIdTxPduAsQueued',code,cluster('CanIf_ClearPrioByCanIdTxPduAsQueued')
	.sect	'.text.CanIf.CanIf_ClearPrioByCanIdTxPduAsQueued'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  1617  
; ..\component\CanIf\Implementation\CanIf.c	  1618  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1619   *  CanIf_ClearPrioByCanIdTxPduAsQueued()
; ..\component\CanIf\Implementation\CanIf.c	  1620   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1621  /*
; ..\component\CanIf\Implementation\CanIf.c	  1622  |<DataModelStart>| CanIf_ClearPrioByCanIdTxPduAsQueued
; ..\component\CanIf\Implementation\CanIf.c	  1623  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  1624  CanIfTxBuffer # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  1625  CanIfTxBuffer # from caller CanIf_TransmitSubWrite, CanIf_TxQueueTransmit #
; ..\component\CanIf\Implementation\CanIf.c	  1626  CanIfTxBuffer, CanIfTransmitCancellationAPI # from caller CanIf_CancelTransmit #
; ..\component\CanIf\Implementation\CanIf.c	  1627  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  1628  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  1629  CanIfTxBuffer, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  1630  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  1631  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  1632  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  1633  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  1634  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  1635  */ 
; ..\component\CanIf\Implementation\CanIf.c	  1636   /*!
; ..\component\CanIf\Implementation\CanIf.c	  1637   *
; ..\component\CanIf\Implementation\CanIf.c	  1638   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  1639   *
; ..\component\CanIf\Implementation\CanIf.c	  1640   *
; ..\component\CanIf\Implementation\CanIf.c	  1641   *
; ..\component\CanIf\Implementation\CanIf.c	  1642   *
; ..\component\CanIf\Implementation\CanIf.c	  1643   *
; ..\component\CanIf\Implementation\CanIf.c	  1644   *
; ..\component\CanIf\Implementation\CanIf.c	  1645   *
; ..\component\CanIf\Implementation\CanIf.c	  1646   *
; ..\component\CanIf\Implementation\CanIf.c	  1647   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1648  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_ClearPrioByCanIdTxPduAsQueued(PduIdType PduId)
; Function CanIf_ClearPrioByCanIdTxPduAsQueued
.L225:
CanIf_ClearPrioByCanIdTxPduAsQueued:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  1649  {
; ..\component\CanIf\Implementation\CanIf.c	  1650  # if (CANIF_BITQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1651    CanIf_AnyIdxType  queueElementIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1652    uint8         elementBitIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1653    PduIdType     queueBitPos;
; ..\component\CanIf\Implementation\CanIf.c	  1654  # endif  
; ..\component\CanIf\Implementation\CanIf.c	  1655    uint8 errorId;
; ..\component\CanIf\Implementation\CanIf.c	  1656    CanIf_AnyIdxType txBufferCfgIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1657    Std_ReturnType retval = E_NOT_OK;
	fcall	.cocofun_1
.L687:

; ..\component\CanIf\Implementation\CanIf.c	  1658    errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  1659    txBufferCfgIdx = CANIF_CFG_MAILBOX_TXBUFFERIDX(CANIF_CFG_TX_HTH(PduId));
; ..\component\CanIf\Implementation\CanIf.c	  1660    /* #100 BitQueue */
; ..\component\CanIf\Implementation\CanIf.c	  1661  # if (CANIF_BITQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1662    /* #110 Compute the elementIdx and the element bit position */
; ..\component\CanIf\Implementation\CanIf.c	  1663    queueBitPos  =  (PduIdType)(PduId - CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_BITPOS2TXPDUIDOFFSET(txBufferCfgIdx));
; ..\component\CanIf\Implementation\CanIf.c	  1664    queueElementIdx = (((uint16_least)queueBitPos) >> kCanTxQueueShift) + CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUESTARTIDX(txBufferCfgIdx); /* PRQA S 2842 */ /* MD_CanIf_Dir4.1_2842 */
; ..\component\CanIf\Implementation\CanIf.c	  1665    elementBitIdx  = (uint8)(queueBitPos & kCanTxQueueMask);
; ..\component\CanIf\Implementation\CanIf.c	  1666    /* #120 Is flag set for given PduId ?*/
; ..\component\CanIf\Implementation\CanIf.c	  1667    if( (CANIF_VAR_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUEFLAGS(queueElementIdx) & CanShiftLookUp[elementBitIdx]) != (CanIf_TxQueueFlagType)0 ) /* PRQA S 2842 */ /* MD_CanIf_Dir4.1_2842 */ 
; ..\component\CanIf\Implementation\CanIf.c	  1668    {
; ..\component\CanIf\Implementation\CanIf.c	  1669  #  if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1670      if (queueElementIdx >= CanIf_GetSizeOfTxQueueFlags()) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  1671      {
; ..\component\CanIf\Implementation\CanIf.c	  1672        errorId = CANIF_E_FATAL;
; ..\component\CanIf\Implementation\CanIf.c	  1673      }
; ..\component\CanIf\Implementation\CanIf.c	  1674      else
; ..\component\CanIf\Implementation\CanIf.c	  1675  #  endif          
; ..\component\CanIf\Implementation\CanIf.c	  1676      {
; ..\component\CanIf\Implementation\CanIf.c	  1677        /* #130 If set clear it and decrement counter */
; ..\component\CanIf\Implementation\CanIf.c	  1678        CANIF_VAR_SET_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUEFLAGS(queueElementIdx, (CANIF_VAR_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUEFLAGS(queueElementIdx) & ((CanIf_TxQueueFlagType) ~CanShiftLookUp[elementBitIdx]))); /* SBSW_CANIF_20 */
; ..\component\CanIf\Implementation\CanIf.c	  1679        CanIf_DecTxQueueCounter(CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_BUFFERBASEIDX(txBufferCfgIdx));  /* SBSW_CANIF_25 */
; ..\component\CanIf\Implementation\CanIf.c	  1680        retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  1681      }
; ..\component\CanIf\Implementation\CanIf.c	  1682    }
; ..\component\CanIf\Implementation\CanIf.c	  1683    /* #200 ByteQueue */
; ..\component\CanIf\Implementation\CanIf.c	  1684  # else    
; ..\component\CanIf\Implementation\CanIf.c	  1685    /* #210 Is flag set for given PduId ?*/
; ..\component\CanIf\Implementation\CanIf.c	  1686    if (CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(CANIF_CFG_TX_QUEUEINDEX(PduId), eQueued) == 1u)
	jne	d0,#1,.L4
.L1010:

; ..\component\CanIf\Implementation\CanIf.c	  1687    {
; ..\component\CanIf\Implementation\CanIf.c	  1688      /* #220 If set clear it and decrement counter */
; ..\component\CanIf\Implementation\CanIf.c	  1689      CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(CANIF_CFG_TX_QUEUEINDEX(PduId), eQueued) = 0u; /* SBSW_CANIF_6 */
	mov	d2,#0
	fcall	.cocofun_3
.L688:

; ..\component\CanIf\Implementation\CanIf.c	  1690      CanIf_DecTxQueueCounter(CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_BUFFERBASEIDX(txBufferCfgIdx)); /* SBSW_CANIF_25 */
	add	d15,#-1
	st.b	[a15],d15
.L4:

; ..\component\CanIf\Implementation\CanIf.c	  1691      retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  1692    }
; ..\component\CanIf\Implementation\CanIf.c	  1693  # endif
; ..\component\CanIf\Implementation\CanIf.c	  1694    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  1695  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1696    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */ /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  1697    {
; ..\component\CanIf\Implementation\CanIf.c	  1698      CanIf_Det_ReportError(CANIF_INIT_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  1699    }
; ..\component\CanIf\Implementation\CanIf.c	  1700  # else
; ..\component\CanIf\Implementation\CanIf.c	  1701    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  1702  # endif
; ..\component\CanIf\Implementation\CanIf.c	  1703    return retval;  
; ..\component\CanIf\Implementation\CanIf.c	  1704  }
	ret
.L613:
	
__CanIf_ClearPrioByCanIdTxPduAsQueued_function_end:
	.size	CanIf_ClearPrioByCanIdTxPduAsQueued,__CanIf_ClearPrioByCanIdTxPduAsQueued_function_end-CanIf_ClearPrioByCanIdTxPduAsQueued
.L373:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_ClearQueue',code,cluster('CanIf_ClearQueue')
	.sect	'.text.CanIf.CanIf_ClearQueue'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  1705  #endif
; ..\component\CanIf\Implementation\CanIf.c	  1706  
; ..\component\CanIf\Implementation\CanIf.c	  1707  
; ..\component\CanIf\Implementation\CanIf.c	  1708  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  1709  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1710   *  CanIf_ClearQueue()
; ..\component\CanIf\Implementation\CanIf.c	  1711   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1712  /*
; ..\component\CanIf\Implementation\CanIf.c	  1713  |<DataModelStart>| CanIf_ClearQueue
; ..\component\CanIf\Implementation\CanIf.c	  1714  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  1715  CanIfTxBuffer, CanIfOneChOpt, CanIfControllerAmount # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  1716  CanIfTxBuffer, CanIfOneChOpt, CanIfControllerAmount # from caller CanIf_Init, CanIf_SetControllerModeSubSwitch, CanIf_ControllerBusOff, CanIf_SetPduMode #
; ..\component\CanIf\Implementation\CanIf.c	  1717  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  1718  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  1719  CanIfTxBuffer, CanIfTransmitCancellationAPI
; ..\component\CanIf\Implementation\CanIf.c	  1720  CanIfOneChOpt, CanIfControllerAmount, TxBasicAmount # CanIfControllerAmount/TxBasicAmount: Data variance for amount of Tx-Buffer per controller #
; ..\component\CanIf\Implementation\CanIf.c	  1721  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  1722  CanIfTxBuffer, CanIfTransmitCancellationAPI
; ..\component\CanIf\Implementation\CanIf.c	  1723  CanIfTxBuffer, CanIfTransmitCancellationAPI, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  1724  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  1725  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  1726  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  1727  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  1728  */ 
; ..\component\CanIf\Implementation\CanIf.c	  1729   /*!
; ..\component\CanIf\Implementation\CanIf.c	  1730   *
; ..\component\CanIf\Implementation\CanIf.c	  1731   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  1732   *
; ..\component\CanIf\Implementation\CanIf.c	  1733   *
; ..\component\CanIf\Implementation\CanIf.c	  1734   *
; ..\component\CanIf\Implementation\CanIf.c	  1735   *
; ..\component\CanIf\Implementation\CanIf.c	  1736   *
; ..\component\CanIf\Implementation\CanIf.c	  1737   *
; ..\component\CanIf\Implementation\CanIf.c	  1738   *
; ..\component\CanIf\Implementation\CanIf.c	  1739   *
; ..\component\CanIf\Implementation\CanIf.c	  1740   *
; ..\component\CanIf\Implementation\CanIf.c	  1741   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1742  CANIF_LOCAL FUNC(void, CANIF_CODE) CanIf_ClearQueue(CANIF_CHANNEL_CANTYPE_ONLY)
; Function CanIf_ClearQueue
.L227:
CanIf_ClearQueue:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  1743  { 
; ..\component\CanIf\Implementation\CanIf.c	  1744    CanIf_AnyIdxType idx2MappedTxBufferCfg;
; ..\component\CanIf\Implementation\CanIf.c	  1745    CanIf_AnyIdxType hth;
; ..\component\CanIf\Implementation\CanIf.c	  1746  # if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1747    CanIf_AnyIdxType txBufferBaseIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1748  #  if (CANIF_BITQUEUE == STD_ON)  
; ..\component\CanIf\Implementation\CanIf.c	  1749    CanIf_AnyIdxType TxQueueFlagsIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1750  #  else
; ..\component\CanIf\Implementation\CanIf.c	  1751    CanIf_AnyIdxType MappedTxPdusIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1752    CanIf_AnyIdxType TxPduId;      
; ..\component\CanIf\Implementation\CanIf.c	  1753  #  endif    
; ..\component\CanIf\Implementation\CanIf.c	  1754  # endif
; ..\component\CanIf\Implementation\CanIf.c	  1755  # if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1756    CanIf_AnyIdxType txBufferFifoBaseIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1757  #  if (CANIF_CANCEL_SUPPORT_API == STD_ON)  
; ..\component\CanIf\Implementation\CanIf.c	  1758    CanIf_AnyIdxType txFifoQueueBaseStartIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1759    CanIf_TxBufferSizeType readIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1760    CanIf_TxBufferSizeType counter;
; ..\component\CanIf\Implementation\CanIf.c	  1761  #  endif  
; ..\component\CanIf\Implementation\CanIf.c	  1762  # endif  
; ..\component\CanIf\Implementation\CanIf.c	  1763    CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_1);
	call	SuspendAllInterrupts
.L985:

; ..\component\CanIf\Implementation\CanIf.c	  1764    /* #100 Get all HTHs with configured Tx-buffer of affected CAN-channel */
; ..\component\CanIf\Implementation\CanIf.c	  1765    for(idx2MappedTxBufferCfg = CANIF_CFG_CTRL_STARTIDX2MAPPEDTXBUFFERS(CanIf_Controller_Value); idx2MappedTxBufferCfg < CANIF_CFG_CTRL_STOPIDX2MAPPEDTXBUFFERS(CanIf_Controller_Value); idx2MappedTxBufferCfg++ ) 
	movh.a	a15,#@his(CanIf_CanIfCtrlId2MappedTxBuffersConfig)
	lea	a15,[a15]@los(CanIf_CanIfCtrlId2MappedTxBuffersConfig)
.L601:

; ..\component\CanIf\Implementation\CanIf.c	  1766    {
; ..\component\CanIf\Implementation\CanIf.c	  1767      CanIf_AnyIdxType txBufferCfgIdx;
; ..\component\CanIf\Implementation\CanIf.c	  1768      hth = CANIF_CFG_MAPPEDTXBUFFERS(idx2MappedTxBufferCfg); /* hth to access CanIf_MailBoxConfig[] */
; ..\component\CanIf\Implementation\CanIf.c	  1769      txBufferCfgIdx = CANIF_CFG_MAILBOX_TXBUFFERIDX(hth);
; ..\component\CanIf\Implementation\CanIf.c	  1770      /* #110 Clear the Tx-buffer dependent on it's Tx-buffer handling type */
; ..\component\CanIf\Implementation\CanIf.c	  1771      switch (CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE(hth))
; ..\component\CanIf\Implementation\CanIf.c	  1772      {
; ..\component\CanIf\Implementation\CanIf.c	  1773  # if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1774        case CANIF_TXBUFFER_HANDLINGTYPE_PRIOBYCANID:
; ..\component\CanIf\Implementation\CanIf.c	  1775  #  if (CANIF_BITQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1776          /* #200 Clearing of PRIO_BY_CANID: BIT_QUEUE */
; ..\component\CanIf\Implementation\CanIf.c	  1777          for( TxQueueFlagsIdx = CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUESTARTIDX(txBufferCfgIdx); TxQueueFlagsIdx < CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUESTOPIDX(txBufferCfgIdx); TxQueueFlagsIdx++)
; ..\component\CanIf\Implementation\CanIf.c	  1778          {
; ..\component\CanIf\Implementation\CanIf.c	  1779            CANIF_VAR_SET_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUEFLAGS(TxQueueFlagsIdx, 0);  /* SBSW_CANIF_26 */
; ..\component\CanIf\Implementation\CanIf.c	  1780          }
; ..\component\CanIf\Implementation\CanIf.c	  1781          txBufferBaseIdx = CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_BUFFERBASEIDX(txBufferCfgIdx);
; ..\component\CanIf\Implementation\CanIf.c	  1782  # else
; ..\component\CanIf\Implementation\CanIf.c	  1783          /* #300 Clearing of PRIO_BY_CANID: BYTE_QUEUE */
; ..\component\CanIf\Implementation\CanIf.c	  1784          for (MappedTxPdusIdx = CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_STARTIDX2MAPPEDTXPDUS(txBufferCfgIdx); MappedTxPdusIdx < CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_STOPIDX2MAPPEDTXPDUS(txBufferCfgIdx); MappedTxPdusIdx++)
	mov	d2,#0
	ld.bu	d0,[a15]1
.L689:
	mov	d3,d2
	movh.a	a2,#@his(CanIf_MappedTxBuffersConfig)
.L602:
	lea	a2,[a2]@los(CanIf_MappedTxBuffersConfig)
	addsc.a	a7,a2,d0,#0
.L603:
	movh.a	a12,#@his(CanIf_MailBoxConfig)
.L604:
	ld.bu	d1,[a15]
.L605:
	lea	a12,[a12]@los(CanIf_MailBoxConfig)
.L606:
	j	.L6
.L7:
	ld.bu	d15,[a7+]
.L690:
	mul	d15,d15,#6
.L691:
	addsc.a	a15,a12,d15,#0
.L986:
	ld.bu	d4,[a15]4
.L987:
	ld.bu	d15,[a15]3
.L692:
	jne	d4,#1,.L8
.L988:
	movh.a	a15,#@his(CanIf_TxBufferPrioByCanIdByteQueueConfig)
	lea	a15,[a15]@los(CanIf_TxBufferPrioByCanIdByteQueueConfig)
	addsc.a	a15,a15,d15,#2
.L989:

; ..\component\CanIf\Implementation\CanIf.c	  1785          {
; ..\component\CanIf\Implementation\CanIf.c	  1786            TxPduId =  CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_MAPPEDTXPDUS(MappedTxPdusIdx);
	movh.a	a2,#@his(CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdus)
.L990:
	ld.bu	d4,[a15]3
.L693:
	lea	a2,[a2]@los(CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdus)
	addsc.a	a2,a2,d4,#0
.L991:

; ..\component\CanIf\Implementation\CanIf.c	  1787            CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(CANIF_CFG_TX_QUEUEINDEX(TxPduId), eQueued) = 0;  /* SBSW_CANIF_28 */
	movh.a	a4,#@his(CanIf_TxPduQueueIndex)
	movh.a	a5,#@his(CanIf_TxQueue)
	lea	a4,[a4]@los(CanIf_TxPduQueueIndex)
	lea	a5,[a5]@los(CanIf_TxQueue)
.L992:
	j	.L9
.L10:
	ld.bu	d15,[a2+]
.L993:
	add	d4,#1
.L994:
	addsc.a	a6,a4,d15,#1
	ld.bu	d15,[a6]
	addsc.a	a6,a5,d15,#1
.L995:
	st.b	[a6]1,d2
.L9:
	ld.bu	d15,[a15]1
.L996:
	jlt.u	d4,d15,.L10
.L997:

; ..\component\CanIf\Implementation\CanIf.c	  1788          }
; ..\component\CanIf\Implementation\CanIf.c	  1789          txBufferBaseIdx = CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_BUFFERBASEIDX(txBufferCfgIdx);
	ld.bu	d15,[a15]
.L998:

; ..\component\CanIf\Implementation\CanIf.c	  1790  # endif  
; ..\component\CanIf\Implementation\CanIf.c	  1791          /* #400  Set QueueCounter to 0 */
; ..\component\CanIf\Implementation\CanIf.c	  1792          CanIf_SetTxQueueCounter(txBufferBaseIdx, 0);  /* SBSW_CANIF_27 */
	movh.a	a15,#@his(CanIf_TxBufferPrioByCanIdBase)
	lea	a15,[a15]@los(CanIf_TxBufferPrioByCanIdBase)
	addsc.a	a15,a15,d15,#0
	st.b	[a15],d3

; ..\component\CanIf\Implementation\CanIf.c	  1793          break;
; ..\component\CanIf\Implementation\CanIf.c	  1794  # endif  
; ..\component\CanIf\Implementation\CanIf.c	  1795  # if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1796        case CANIF_TXBUFFER_HANDLINGTYPE_FIFO:
; ..\component\CanIf\Implementation\CanIf.c	  1797          /* #500 Clearing of FIFO */
; ..\component\CanIf\Implementation\CanIf.c	  1798          txBufferFifoBaseIdx = CANIF_CFG_TXBUFFERFIFO_BUFFERBASEIDX((txBufferCfgIdx));
; ..\component\CanIf\Implementation\CanIf.c	  1799          
; ..\component\CanIf\Implementation\CanIf.c	  1800          /* #520 In case of CANIF_CANCEL_SUPPORT_API == STD_ON and module is just initialized, re-set all indirections in CanIf_TxQueueIndex2FifoEl and the flags for TxFifoQueueBase */
; ..\component\CanIf\Implementation\CanIf.c	  1801  #  if (CANIF_CANCEL_SUPPORT_API == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1802          if(CanIf_GetCtrlMode(CanIf_Controller_Value) != CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  1803          {
; ..\component\CanIf\Implementation\CanIf.c	  1804            readIdx = CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx);
; ..\component\CanIf\Implementation\CanIf.c	  1805            counter =  CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eQueueCounter);
; ..\component\CanIf\Implementation\CanIf.c	  1806            txFifoQueueBaseStartIdx = CANIF_CFG_TXBUFFERFIFO_QUEUEBASESTARTIDX(txBufferCfgIdx);
; ..\component\CanIf\Implementation\CanIf.c	  1807          
; ..\component\CanIf\Implementation\CanIf.c	  1808            while(counter > 0u)
; ..\component\CanIf\Implementation\CanIf.c	  1809            {
; ..\component\CanIf\Implementation\CanIf.c	  1810              CANIF_VAR_SET_TXBUFFERFIFO_QUEUEIDX2FIFOEL(CANIF_CFG_TX_QUEUEINDEX(CANIF_VAR_TXBUFFERFIFO_QUEUEBASE((readIdx + txFifoQueueBaseStartIdx), eTxPduId)), CANIF_NO_ENTRY_IN_TX_FIFO); /* SBSW_CANIF_35 */
; ..\component\CanIf\Implementation\CanIf.c	  1811              CANIF_VAR_TXBUFFERFIFO_QUEUEBASE((readIdx + txFifoQueueBaseStartIdx), eQueued) = 0;  /* SBSW_CANIF_34 */
; ..\component\CanIf\Implementation\CanIf.c	  1812  
; ..\component\CanIf\Implementation\CanIf.c	  1813              readIdx++;
; ..\component\CanIf\Implementation\CanIf.c	  1814              if(readIdx == CANIF_CFG_TXBUFFERFIFO_QUEUESIZE(txBufferCfgIdx)) 
; ..\component\CanIf\Implementation\CanIf.c	  1815              {
; ..\component\CanIf\Implementation\CanIf.c	  1816                readIdx = 0;
; ..\component\CanIf\Implementation\CanIf.c	  1817              }
; ..\component\CanIf\Implementation\CanIf.c	  1818              counter--;
; ..\component\CanIf\Implementation\CanIf.c	  1819            }
; ..\component\CanIf\Implementation\CanIf.c	  1820          }
; ..\component\CanIf\Implementation\CanIf.c	  1821  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  1822          /* #530 Set ReadIdx, WriteIdx and QueueCounter to 0 */
; ..\component\CanIf\Implementation\CanIf.c	  1823          CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eWriteIdx) = 0;      /* SBSW_CANIF_33 */
; ..\component\CanIf\Implementation\CanIf.c	  1824          CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx) = 0;       /* SBSW_CANIF_33 */
; ..\component\CanIf\Implementation\CanIf.c	  1825          CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eQueueCounter) = 0;  /* SBSW_CANIF_33 */
; ..\component\CanIf\Implementation\CanIf.c	  1826  
; ..\component\CanIf\Implementation\CanIf.c	  1827          break;
; ..\component\CanIf\Implementation\CanIf.c	  1828  # endif            
; ..\component\CanIf\Implementation\CanIf.c	  1829        default:  /* COV_CANIF_GENDATA_FAILURE */
.L8:
	add	d0,#1
.L6:
	jlt.u	d0,d1,.L7
.L999:

; ..\component\CanIf\Implementation\CanIf.c	  1830          break;
; ..\component\CanIf\Implementation\CanIf.c	  1831      }
; ..\component\CanIf\Implementation\CanIf.c	  1832    }
; ..\component\CanIf\Implementation\CanIf.c	  1833    CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_1);
	j	ResumeAllInterrupts
.L596:
	
__CanIf_ClearQueue_function_end:
	.size	CanIf_ClearQueue,__CanIf_ClearQueue_function_end-CanIf_ClearQueue
.L363:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_Init',code,cluster('CanIf_Init')
	.sect	'.text.CanIf.CanIf_Init'
	.align	2
	
	.global	CanIf_Init

; ..\component\CanIf\Implementation\CanIf.c	  1834  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  1835  #endif  /* ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)) */
; ..\component\CanIf\Implementation\CanIf.c	  1836  
; ..\component\CanIf\Implementation\CanIf.c	  1837  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1838  # if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	  1839  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1840   *  CanIf_InitSubCheckJ1939AddrTables()
; ..\component\CanIf\Implementation\CanIf.c	  1841   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1842  /*
; ..\component\CanIf\Implementation\CanIf.c	  1843  |<DataModelStart>| CanIf_InitSubCheckJ1939AddrTables
; ..\component\CanIf\Implementation\CanIf.c	  1844  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  1845  CanIfDevErrorDetect, CanIfJ1939 # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  1846  CanIfDevErrorDetect, CanIfJ1939 # from caller CanIf_Init #
; ..\component\CanIf\Implementation\CanIf.c	  1847  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  1848  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  1849  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  1850  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  1851  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  1852  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  1853  */
; ..\component\CanIf\Implementation\CanIf.c	  1854   /*!
; ..\component\CanIf\Implementation\CanIf.c	  1855   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  1856   *
; ..\component\CanIf\Implementation\CanIf.c	  1857   *
; ..\component\CanIf\Implementation\CanIf.c	  1858   *
; ..\component\CanIf\Implementation\CanIf.c	  1859   *
; ..\component\CanIf\Implementation\CanIf.c	  1860   *
; ..\component\CanIf\Implementation\CanIf.c	  1861   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1862  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_InitSubCheckJ1939AddrTables(void)
; ..\component\CanIf\Implementation\CanIf.c	  1863  {
; ..\component\CanIf\Implementation\CanIf.c	  1864    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  1865    Std_ReturnType retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  1866    uint8 j1939CtrlCount = 0;
; ..\component\CanIf\Implementation\CanIf.c	  1867    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  1868  #   if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  1869    uint16 maxAddrOffset = 0;
; ..\component\CanIf\Implementation\CanIf.c	  1870  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  1871  
; ..\component\CanIf\Implementation\CanIf.c	  1872    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  1873  
; ..\component\CanIf\Implementation\CanIf.c	  1874    /* #10 Run through all CAN controllers */
; ..\component\CanIf\Implementation\CanIf.c	  1875  #   if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  1876    for (controller = 0; controller < CANIF_CFG_MAX_CONTROLLER; controller++)
; ..\component\CanIf\Implementation\CanIf.c	  1877  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  1878    {
; ..\component\CanIf\Implementation\CanIf.c	  1879      if(CANIF_CFG_CTRLJ1939DYNADDRSUPPORT(CanIf_Controller_Value_Local) != CANIF_J1939_DYN_ADDR_DISABLED ) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  1880      {
; ..\component\CanIf\Implementation\CanIf.c	  1881        /* #20 Count the number of CAN controllers with activated J1939 support */
; ..\component\CanIf\Implementation\CanIf.c	  1882        j1939CtrlCount++;
; ..\component\CanIf\Implementation\CanIf.c	  1883  
; ..\component\CanIf\Implementation\CanIf.c	  1884  #   if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  1885        /* #30 Get the biggest address table offset */
; ..\component\CanIf\Implementation\CanIf.c	  1886        if(CANIF_CFG_CTRLID2J1939DYNADDROFFSET(CanIf_Controller_Value_Local) > maxAddrOffset)
; ..\component\CanIf\Implementation\CanIf.c	  1887        {
; ..\component\CanIf\Implementation\CanIf.c	  1888          maxAddrOffset = (uint16)CANIF_CFG_CTRLID2J1939DYNADDROFFSET(CanIf_Controller_Value_Local);
; ..\component\CanIf\Implementation\CanIf.c	  1889        }
; ..\component\CanIf\Implementation\CanIf.c	  1890  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  1891      }
; ..\component\CanIf\Implementation\CanIf.c	  1892    }
; ..\component\CanIf\Implementation\CanIf.c	  1893  
; ..\component\CanIf\Implementation\CanIf.c	  1894    /* J1939 support can be enabled also when no current CAN controller has it activated */
; ..\component\CanIf\Implementation\CanIf.c	  1895    if(j1939CtrlCount > 0u) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  1896    {
; ..\component\CanIf\Implementation\CanIf.c	  1897      /* #100 Check that the address tables are big enough */
; ..\component\CanIf\Implementation\CanIf.c	  1898      if ( ((CANIF_J1939_CTRL_ADDR_TBL_SIZE * (CanIf_SizeOfJ1939TxAddr_LookupType)j1939CtrlCount) > CanIf_GetSizeOfJ1939TxAddr_Lookup()) || /* PRQA S 2992, 2996 */ /* MD_CanIf_J1939ConstData */
; ..\component\CanIf\Implementation\CanIf.c	  1899           ((CANIF_J1939_CTRL_ADDR_TBL_SIZE * (CanIf_SizeOfJ1939RxAddr_LookupType)j1939CtrlCount) > CanIf_GetSizeOfJ1939RxAddr_Lookup()) /* PRQA S 2996 */ /* MD_CanIf_J1939ConstData */
; ..\component\CanIf\Implementation\CanIf.c	  1900  #   if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  1901            || ((CANIF_J1939_CTRL_ADDR_TBL_SIZE + (CanIf_SizeOfJ1939TxAddr_LookupType)maxAddrOffset) > CanIf_GetSizeOfJ1939TxAddr_Lookup())
; ..\component\CanIf\Implementation\CanIf.c	  1902            || ((CANIF_J1939_CTRL_ADDR_TBL_SIZE + (CanIf_SizeOfJ1939RxAddr_LookupType)maxAddrOffset) > CanIf_GetSizeOfJ1939RxAddr_Lookup()) /* PRQA S 2996 */ /* MD_CanIf_J1939ConstData */
; ..\component\CanIf\Implementation\CanIf.c	  1903  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  1904          ) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  1905      {
; ..\component\CanIf\Implementation\CanIf.c	  1906        retval = E_NOT_OK; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  1907      }
; ..\component\CanIf\Implementation\CanIf.c	  1908    }
; ..\component\CanIf\Implementation\CanIf.c	  1909  
; ..\component\CanIf\Implementation\CanIf.c	  1910    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  1911  }
; ..\component\CanIf\Implementation\CanIf.c	  1912  # endif /* CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED */
; ..\component\CanIf\Implementation\CanIf.c	  1913  #endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  1914  
; ..\component\CanIf\Implementation\CanIf.c	  1915  /* \trace SPEC-1829 */
; ..\component\CanIf\Implementation\CanIf.c	  1916  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  1917   *  CanIf_Init()
; ..\component\CanIf\Implementation\CanIf.c	  1918   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1919   /*
; ..\component\CanIf\Implementation\CanIf.c	  1920  |<DataModelStart>| CanIf_Init
; ..\component\CanIf\Implementation\CanIf.c	  1921  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  1922  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  1923  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  1924  CanIfVariant, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  1925  CanIfDevErrorDetect, CanIfIDType
; ..\component\CanIf\Implementation\CanIf.c	  1926  CanIfDevErrorDetect, CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  1927  CanIfDevErrorDetect, CanIfJ1939
; ..\component\CanIf\Implementation\CanIf.c	  1928  CanIfDynTx
; ..\component\CanIf\Implementation\CanIf.c	  1929  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  1930  CanIfOneChOpt, CanIfControllerAmount, CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  1931  CanIfPnEnable, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  1932  CanIfTxConfPollSupport, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  1933  CanIfJ1939, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  1934  CanIfBusMirroringSupport, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  1935  CanIfTxBuffer, CanIfTransmitCancellationAPI
; ..\component\CanIf\Implementation\CanIf.c	  1936  CanIfRxPduReceptionMode
; ..\component\CanIf\Implementation\CanIf.c	  1937  CanIfVariant, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  1938  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  1939  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  1940  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  1941  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  1942  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  1943  */
; ..\component\CanIf\Implementation\CanIf.c	  1944  /*! Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  1945   *
; ..\component\CanIf\Implementation\CanIf.c	  1946   *
; ..\component\CanIf\Implementation\CanIf.c	  1947   *
; ..\component\CanIf\Implementation\CanIf.c	  1948   *
; ..\component\CanIf\Implementation\CanIf.c	  1949   *
; ..\component\CanIf\Implementation\CanIf.c	  1950   *
; ..\component\CanIf\Implementation\CanIf.c	  1951   *
; ..\component\CanIf\Implementation\CanIf.c	  1952   *
; ..\component\CanIf\Implementation\CanIf.c	  1953   *
; ..\component\CanIf\Implementation\CanIf.c	  1954   *
; ..\component\CanIf\Implementation\CanIf.c	  1955   *
; ..\component\CanIf\Implementation\CanIf.c	  1956   *
; ..\component\CanIf\Implementation\CanIf.c	  1957   *
; ..\component\CanIf\Implementation\CanIf.c	  1958   *
; ..\component\CanIf\Implementation\CanIf.c	  1959   *
; ..\component\CanIf\Implementation\CanIf.c	  1960   *
; ..\component\CanIf\Implementation\CanIf.c	  1961   *
; ..\component\CanIf\Implementation\CanIf.c	  1962   *
; ..\component\CanIf\Implementation\CanIf.c	  1963   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  1964  FUNC(void, CANIF_CODE) CanIf_Init(P2CONST(CanIf_ConfigType, AUTOMATIC, CANIF_XCFG) ConfigPtr)
; Function CanIf_Init
.L229:
CanIf_Init:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  1965  {
; ..\component\CanIf\Implementation\CanIf.c	  1966    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  1967    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  1968    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  1969  
; ..\component\CanIf\Implementation\CanIf.c	  1970    /* \trace SPEC-1966 automatically supported due to only one valid configuration supported */
; ..\component\CanIf\Implementation\CanIf.c	  1971    /* Store the initialization pointer */
; ..\component\CanIf\Implementation\CanIf.c	  1972  #if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  1973    CanIf_ConfigDataPtr = ConfigPtr;
; ..\component\CanIf\Implementation\CanIf.c	  1974  
; ..\component\CanIf\Implementation\CanIf.c	  1975    /* ----- Development Error Checks --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  1976  # if ((CANIF_DEV_ERROR_DETECT == STD_ON ) || (CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME))
; ..\component\CanIf\Implementation\CanIf.c	  1977    /* #10 Check if parameter ConfigPtr is valid */
; ..\component\CanIf\Implementation\CanIf.c	  1978    if (CanIf_ConfigDataPtr == NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  1979    {
; ..\component\CanIf\Implementation\CanIf.c	  1980  #  if (CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME)
; ..\component\CanIf\Implementation\CanIf.c	  1981      EcuM_BswErrorHook((uint16) CANIF_MODULE_ID, (uint8) ECUM_BSWERROR_NULLPTR);
; ..\component\CanIf\Implementation\CanIf.c	  1982  #  else
; ..\component\CanIf\Implementation\CanIf.c	  1983      errorId = CANIF_E_PARAM_POINTER;
; ..\component\CanIf\Implementation\CanIf.c	  1984  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  1985      }
; ..\component\CanIf\Implementation\CanIf.c	  1986      else
; ..\component\CanIf\Implementation\CanIf.c	  1987  # endif
; ..\component\CanIf\Implementation\CanIf.c	  1988  # if (CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME)
; ..\component\CanIf\Implementation\CanIf.c	  1989    /* UREQ00035482 */
; ..\component\CanIf\Implementation\CanIf.c	  1990    /* #20 Check generator version */
; ..\component\CanIf\Implementation\CanIf.c	  1991    if(CANIF_CFG_GENERATORCOMPATIBILITYVERSION != CANIF_GENDATA_COMPATIBILITY_VERSION)
; ..\component\CanIf\Implementation\CanIf.c	  1992    {
; ..\component\CanIf\Implementation\CanIf.c	  1993      EcuM_BswErrorHook((uint16) CANIF_MODULE_ID, (uint8) ECUM_BSWERROR_COMPATIBILITYVERSION);
; ..\component\CanIf\Implementation\CanIf.c	  1994    }
; ..\component\CanIf\Implementation\CanIf.c	  1995    /* #30 Check the magic number */
; ..\component\CanIf\Implementation\CanIf.c	  1996    else if (CANIF_CFG_MAGICNUMBER != CANIF_MAGIC_NUMBER)
; ..\component\CanIf\Implementation\CanIf.c	  1997    {
; ..\component\CanIf\Implementation\CanIf.c	  1998      /* UREQ00035483 */
; ..\component\CanIf\Implementation\CanIf.c	  1999      EcuM_BswErrorHook((uint16) CANIF_MODULE_ID, (uint8) ECUM_BSWERROR_MAGICNUMBER);
; ..\component\CanIf\Implementation\CanIf.c	  2000    }
; ..\component\CanIf\Implementation\CanIf.c	  2001    else
; ..\component\CanIf\Implementation\CanIf.c	  2002  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2003  #else
; ..\component\CanIf\Implementation\CanIf.c	  2004    CANIF_DUMMY_STATEMENT(ConfigPtr); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  2005  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2006  
; ..\component\CanIf\Implementation\CanIf.c	  2007  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2008    /* #40 Check the size of type Can_IdType */
; ..\component\CanIf\Implementation\CanIf.c	  2009  # if (CANIF_EXTENDEDID_SUPPORT != STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2010    if (sizeof (Can_IdType) != 2u) /* PRQA S 2742 */ /* MD_CanIf_Rule14.3_GenData */ /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  2011    {
; ..\component\CanIf\Implementation\CanIf.c	  2012      errorId = CANIF_E_INVALID_CANIDTYPESIZE; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  2013    }
; ..\component\CanIf\Implementation\CanIf.c	  2014  # else
; ..\component\CanIf\Implementation\CanIf.c	  2015    if (sizeof (Can_IdType) != 4u) /* PRQA S 2742 */ /* MD_CanIf_Rule14.3_GenData */ /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  2016    {
; ..\component\CanIf\Implementation\CanIf.c	  2017      errorId = CANIF_E_INVALID_CANIDTYPESIZE; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  2018    }
; ..\component\CanIf\Implementation\CanIf.c	  2019  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2020  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2021    else
; ..\component\CanIf\Implementation\CanIf.c	  2022    /*  ESCAN00092230 FEAT-2004: Release of FEAT-912 (Support of several CAN Drivers in one ECU configuration) */
; ..\component\CanIf\Implementation\CanIf.c	  2023    if ( CanIf_GetSizeOfCanChannelIdUpToLowMap() < CANIF_CFG_MAX_CONTROLLER) /* PRQA S 2742 */ /* MD_CanIf_Rule14.3_GenData */ /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  2024    {
; ..\component\CanIf\Implementation\CanIf.c	  2025      errorId = CANIF_E_FATAL; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  2026    }
; ..\component\CanIf\Implementation\CanIf.c	  2027  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2028  
; ..\component\CanIf\Implementation\CanIf.c	  2029  # if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	  2030    /* #50 Check the J1939 address tables configuration */
; ..\component\CanIf\Implementation\CanIf.c	  2031    else if(CanIf_InitSubCheckJ1939AddrTables() == E_NOT_OK) /* PRQA S 2992, 2996 */ /* MD_CanIf_J1939ConstData */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2032    {
; ..\component\CanIf\Implementation\CanIf.c	  2033      errorId = CANIF_E_FATAL;
; ..\component\CanIf\Implementation\CanIf.c	  2034    }
; ..\component\CanIf\Implementation\CanIf.c	  2035  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2036    else
; ..\component\CanIf\Implementation\CanIf.c	  2037  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2038    {
; ..\component\CanIf\Implementation\CanIf.c	  2039      /* #100 Initialize all dynamic Tx-PDUs */
; ..\component\CanIf\Implementation\CanIf.c	  2040  #if (CANIF_SETDYNAMICTXID_API == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2041      PduIdType DynamicPduId;
; ..\component\CanIf\Implementation\CanIf.c	  2042      PduIdType CanPduId;
; ..\component\CanIf\Implementation\CanIf.c	  2043      for(CanPduId = 0; CanPduId < CANIF_CFG_MAX_TXPDUS; CanPduId++)
; ..\component\CanIf\Implementation\CanIf.c	  2044      {
; ..\component\CanIf\Implementation\CanIf.c	  2045        DynamicPduId = CANIF_CFG_STAT2DYN_INDIRECTION(CanPduId);
; ..\component\CanIf\Implementation\CanIf.c	  2046        if(DynamicPduId < CanIf_GetSizeOfDynTxId())
; ..\component\CanIf\Implementation\CanIf.c	  2047        {
; ..\component\CanIf\Implementation\CanIf.c	  2048          CANIF_VAR_DYNTXID(DynamicPduId) = CANIF_CFG_TX_CANID(CanPduId);  /* SBSW_CANIF_14 */
; ..\component\CanIf\Implementation\CanIf.c	  2049        }
; ..\component\CanIf\Implementation\CanIf.c	  2050      }
; ..\component\CanIf\Implementation\CanIf.c	  2051  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2052      /* #110 Run through all CAN channels and initialize them */
; ..\component\CanIf\Implementation\CanIf.c	  2053  #if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  2054      for (controller = 0; controller < CANIF_CFG_MAX_CONTROLLER; controller++)
; ..\component\CanIf\Implementation\CanIf.c	  2055  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2056      {
; ..\component\CanIf\Implementation\CanIf.c	  2057  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  2058        /* \trace SPEC-3665 */
; ..\component\CanIf\Implementation\CanIf.c	  2059        /* #120 Initialize the Tx-queue */
; ..\component\CanIf\Implementation\CanIf.c	  2060        /* ESCAN00087530 after CanIf_ClearQueue() in state CANIF_CS_UNINIT, WriteIdx, ReadIdx and QueueCounter are initialized */
; ..\component\CanIf\Implementation\CanIf.c	  2061  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION==STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  2062        CanIf_ClearQueue();
	call	CanIf_ClearQueue
.L694:

; ..\component\CanIf\Implementation\CanIf.c	  2063  # else
; ..\component\CanIf\Implementation\CanIf.c	  2064        CanIf_ClearQueue(CanIf_Controller_Value_Local);
; ..\component\CanIf\Implementation\CanIf.c	  2065  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2066  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2067        /* \trace SPEC-3750, SPEC-3755, SPEC-3752 */
; ..\component\CanIf\Implementation\CanIf.c	  2068        /* #130 Initialize controller mode */
; ..\component\CanIf\Implementation\CanIf.c	  2069        CanIf_SetCtrlMode(CanIf_Controller_Value_Local, CANIF_CS_STOPPED);  /* SBSW_CANIF_3 */
	movh.a	a15,#@his(CanIf_CtrlStates)
	lea	a15,[a15]@los(CanIf_CtrlStates)
	mov	d15,#1
	st.b	[a15],d15
.L815:

; ..\component\CanIf\Implementation\CanIf.c	  2070        /* #140 Initialize PDU mode */
; ..\component\CanIf\Implementation\CanIf.c	  2071        CanIf_SetChannelMode(CanIf_Controller_Value_Local, CANIF_GET_OFFLINE); /* SBSW_CANIF_3 */
	mov	d15,#0
	st.b	[a15]1,d15
.L816:

; ..\component\CanIf\Implementation\CanIf.c	  2072  #if (CANIF_WAKEUP_VALIDATION == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2073        /* \trace SPEC-3754 */
; ..\component\CanIf\Implementation\CanIf.c	  2074        /* #150 Initialize wake-up validation state */
; ..\component\CanIf\Implementation\CanIf.c	  2075        CanIf_SetWakeUpValidationState(CanIf_Controller_Value_Local, CANIF_WUVALIDATION_ARMED); /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  2076  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2077  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2078        /* #160 Initialize the Tx-filter state */
; ..\component\CanIf\Implementation\CanIf.c	  2079        CanIf_SetPnWuTxPduFilterActive(CanIf_Controller_Value_Local, FALSE); /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  2080  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2081  
; ..\component\CanIf\Implementation\CanIf.c	  2082  #if (CANIF_PUBLIC_TX_CONFIRM_POLLING_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2083        /* #170 Initialize the Tx-confirmation state */
; ..\component\CanIf\Implementation\CanIf.c	  2084        CanIf_SetTxConfState(CanIf_Controller_Value_Local, CANIF_NO_NOTIFICATION); /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  2085  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2086  
; ..\component\CanIf\Implementation\CanIf.c	  2087  #if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	  2088        {
; ..\component\CanIf\Implementation\CanIf.c	  2089          uint8 index;
; ..\component\CanIf\Implementation\CanIf.c	  2090          
; ..\component\CanIf\Implementation\CanIf.c	  2091          /* #180 Initialize the dynamic address lookup table (only for J1939Nm channel) */
; ..\component\CanIf\Implementation\CanIf.c	  2092          if(CANIF_CFG_CTRLJ1939DYNADDRSUPPORT(CanIf_Controller_Value_Local) != CANIF_J1939_DYN_ADDR_DISABLED ) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2093          {
; ..\component\CanIf\Implementation\CanIf.c	  2094            for(index = 0; index < 0xFFu; index++)
; ..\component\CanIf\Implementation\CanIf.c	  2095            {
; ..\component\CanIf\Implementation\CanIf.c	  2096              CANIF_VAR_SET_J1939RXADDR_LOOKUP(CanIf_Controller_Value_Local, index, CANIF_J1939_NULL_ADDR); /* SBSW_CANIF_17 */
; ..\component\CanIf\Implementation\CanIf.c	  2097              CANIF_VAR_SET_J1939TXADDR_LOOKUP(CanIf_Controller_Value_Local, index, CANIF_J1939_NULL_ADDR); /* SBSW_CANIF_17 */
; ..\component\CanIf\Implementation\CanIf.c	  2098            }
; ..\component\CanIf\Implementation\CanIf.c	  2099            CANIF_VAR_SET_J1939RXADDR_LOOKUP(CanIf_Controller_Value_Local, 0xFFu, CANIF_J1939_BROADCAST_ADDR); /* SBSW_CANIF_17 */
; ..\component\CanIf\Implementation\CanIf.c	  2100            CANIF_VAR_SET_J1939TXADDR_LOOKUP(CanIf_Controller_Value_Local, 0xFFu, CANIF_J1939_BROADCAST_ADDR); /* SBSW_CANIF_17 */
; ..\component\CanIf\Implementation\CanIf.c	  2101          }
; ..\component\CanIf\Implementation\CanIf.c	  2102        }
; ..\component\CanIf\Implementation\CanIf.c	  2103  #endif /* CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED */
; ..\component\CanIf\Implementation\CanIf.c	  2104  
; ..\component\CanIf\Implementation\CanIf.c	  2105  #if (CANIF_BUS_MIRRORING_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2106        /* #190 Initialize mirroring to disabled */
; ..\component\CanIf\Implementation\CanIf.c	  2107        CanIf_ChangeMirroring(CanIf_Controller_Value_Local, FALSE); /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  2108  #endif /* CANIF_BUS_MIRRORING_SUPPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  2109      } /* FOR-loop: Run through all channels */
; ..\component\CanIf\Implementation\CanIf.c	  2110  #if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2111  # if (CANIF_CANCEL_SUPPORT_API == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  2112      /* #200 Initialize SW-cancellation part of FIFO */
; ..\component\CanIf\Implementation\CanIf.c	  2113      CanIf_InitSubInitFifoQueue(); /* PRQA S 2987 */ /* MD_CanIf_FctCall */
; ..\component\CanIf\Implementation\CanIf.c	  2114  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2115  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2116  #if (CANIF_SET_PDU_RECEPTION_MODE_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2117      {
; ..\component\CanIf\Implementation\CanIf.c	  2118        CanIf_PduRxModeIterType index;
; ..\component\CanIf\Implementation\CanIf.c	  2119        /* #300 Set the reception mode to default value */
; ..\component\CanIf\Implementation\CanIf.c	  2120        for(index = 0; index < CanIf_GetSizeOfPduRxMode(); index++)
; ..\component\CanIf\Implementation\CanIf.c	  2121        {
; ..\component\CanIf\Implementation\CanIf.c	  2122          CANIF_VAR_SET_PDU_RECEPTION_MODE(index, CANIF_RMT_RECEIVE_STOP); /* SBSW_CANIF_23 */
; ..\component\CanIf\Implementation\CanIf.c	  2123        }
; ..\component\CanIf\Implementation\CanIf.c	  2124      }
; ..\component\CanIf\Implementation\CanIf.c	  2125  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2126  #if ((CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  2127      CanIf_SystemInit = TRUE;  /* ESCAN00083271 */
; ..\component\CanIf\Implementation\CanIf.c	  2128  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2129    }
; ..\component\CanIf\Implementation\CanIf.c	  2130    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2131  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2132    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2133    {
; ..\component\CanIf\Implementation\CanIf.c	  2134      CanIf_Det_ReportError(CANIF_INIT_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  2135    }
; ..\component\CanIf\Implementation\CanIf.c	  2136  #else
; ..\component\CanIf\Implementation\CanIf.c	  2137    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  2138  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2139  } /* PRQA S 6010, 6030, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STMIF */
	ret
.L515:
	
__CanIf_Init_function_end:
	.size	CanIf_Init,__CanIf_Init_function_end-CanIf_Init
.L303:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_SetControllerModeSubSwitch',code,cluster('CanIf_SetControllerModeSubSwitch')
	.sect	'.text.CanIf.CanIf_SetControllerModeSubSwitch'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  2140  
; ..\component\CanIf\Implementation\CanIf.c	  2141  
; ..\component\CanIf\Implementation\CanIf.c	  2142  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  2143   *  CanIf_SetControllerModeSubSwitch()
; ..\component\CanIf\Implementation\CanIf.c	  2144   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2145  /*
; ..\component\CanIf\Implementation\CanIf.c	  2146  |<DataModelStart>| CanIf_SetControllerModeSubSwitch
; ..\component\CanIf\Implementation\CanIf.c	  2147  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  2148  CanIfOneChOpt, CanIfControllerAmount # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  2149  CanIfOneChOpt, CanIfControllerAmount # from caller CanIf_SetControllerMode #
; ..\component\CanIf\Implementation\CanIf.c	  2150  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  2151  CanIfMultipleDriver, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  2152  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  2153  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  2154  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  2155  CanIfWakeupValidation, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  2156  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  2157  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  2158  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  2159  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  2160  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  2161  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  2162  */
; ..\component\CanIf\Implementation\CanIf.c	  2163   /*! Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  2164   *
; ..\component\CanIf\Implementation\CanIf.c	  2165   *
; ..\component\CanIf\Implementation\CanIf.c	  2166   *
; ..\component\CanIf\Implementation\CanIf.c	  2167   *
; ..\component\CanIf\Implementation\CanIf.c	  2168   *
; ..\component\CanIf\Implementation\CanIf.c	  2169   *
; ..\component\CanIf\Implementation\CanIf.c	  2170   *
; ..\component\CanIf\Implementation\CanIf.c	  2171   *
; ..\component\CanIf\Implementation\CanIf.c	  2172   *
; ..\component\CanIf\Implementation\CanIf.c	  2173   *
; ..\component\CanIf\Implementation\CanIf.c	  2174   *
; ..\component\CanIf\Implementation\CanIf.c	  2175   *
; ..\component\CanIf\Implementation\CanIf.c	  2176   *
; ..\component\CanIf\Implementation\CanIf.c	  2177   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2178  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_SetControllerModeSubSwitch(CANIF_CHANNEL_CANTYPE_FIRST CanIf_ControllerModeType ControllerMode)
; Function CanIf_SetControllerModeSubSwitch
.L231:
CanIf_SetControllerModeSubSwitch:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  2179  {
; ..\component\CanIf\Implementation\CanIf.c	  2180    Std_ReturnType retval;
; ..\component\CanIf\Implementation\CanIf.c	  2181  #if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2182    CanIf_Can_SetControllerModeFctType canSetCtrlModeFct;
; ..\component\CanIf\Implementation\CanIf.c	  2183    /* if(CANIF_MULTIPLE_CANDRV_SUPPORT == STD_OFF) canSetCtrlModeFct is defined to Can_SetControllerMode */
; ..\component\CanIf\Implementation\CanIf.c	  2184    canSetCtrlModeFct = CANIF_GET_CANSETCTRLMODEFCT(CanIf_Controller_Value);
; ..\component\CanIf\Implementation\CanIf.c	  2185  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2186    retval = E_NOT_OK;
	mov	d8,#1
.L701:

; ..\component\CanIf\Implementation\CanIf.c	  2187      
; ..\component\CanIf\Implementation\CanIf.c	  2188    /* #100 Do the switch based on the desired target controller mode */
; ..\component\CanIf\Implementation\CanIf.c	  2189    switch (ControllerMode)
; ..\component\CanIf\Implementation\CanIf.c	  2190    {
; ..\component\CanIf\Implementation\CanIf.c	  2191      case CANIF_CS_STOPPED:
	jeq	d4,#1,.L11
.L1135:

; ..\component\CanIf\Implementation\CanIf.c	  2192        /* #200 Transition to STOP: Transition possible from any mode */
; ..\component\CanIf\Implementation\CanIf.c	  2193        /* \trace SPEC-3763 */
; ..\component\CanIf\Implementation\CanIf.c	  2194        switch(CanIf_GetCtrlMode(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  2195        {
; ..\component\CanIf\Implementation\CanIf.c	  2196          case CANIF_CS_SLEEP:
; ..\component\CanIf\Implementation\CanIf.c	  2197            /* #210 Set CAN driver to WAKEUP if currently in SLEEP mode */
; ..\component\CanIf\Implementation\CanIf.c	  2198            /* CAN Driver transition to WakeUp and Stop required if WakeUp is initiated by application */
; ..\component\CanIf\Implementation\CanIf.c	  2199            /* \trace SPEC-1845, SPEC-1996 */
; ..\component\CanIf\Implementation\CanIf.c	  2200            if (canSetCtrlModeFct((uint8)CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), CAN_T_WAKEUP) == CAN_OK) /* SBSW_CANIF_41 */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2201            {
; ..\component\CanIf\Implementation\CanIf.c	  2202              retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2203            }
; ..\component\CanIf\Implementation\CanIf.c	  2204            break;
; ..\component\CanIf\Implementation\CanIf.c	  2205  
; ..\component\CanIf\Implementation\CanIf.c	  2206          case CANIF_CS_STARTED:
; ..\component\CanIf\Implementation\CanIf.c	  2207            /* \trace SPEC-5124 */          
; ..\component\CanIf\Implementation\CanIf.c	  2208            /* \trace SPEC-1845, SPEC-1996 */
; ..\component\CanIf\Implementation\CanIf.c	  2209            /* #220 Request CAN driver to STOP if currently in START mode */
; ..\component\CanIf\Implementation\CanIf.c	  2210            if (canSetCtrlModeFct((uint8)CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), CAN_T_STOP) == CAN_OK) /* SBSW_CANIF_41 */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2211            {
; ..\component\CanIf\Implementation\CanIf.c	  2212  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  2213              /* \trace SPEC-3764 */
; ..\component\CanIf\Implementation\CanIf.c	  2214              /*#230 If CAN driver confirms the request clear the Tx-queue */
; ..\component\CanIf\Implementation\CanIf.c	  2215              CanIf_ClearQueue(CANIF_CHANNEL_CANPARA_ONLY);
; ..\component\CanIf\Implementation\CanIf.c	  2216  #endif            
; ..\component\CanIf\Implementation\CanIf.c	  2217              retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2218            }
; ..\component\CanIf\Implementation\CanIf.c	  2219            break;
; ..\component\CanIf\Implementation\CanIf.c	  2220  
; ..\component\CanIf\Implementation\CanIf.c	  2221          /* \trace SPEC-3753 */
; ..\component\CanIf\Implementation\CanIf.c	  2222          case CANIF_CS_STOPPED:
; ..\component\CanIf\Implementation\CanIf.c	  2223            /* \trace SPEC-1845, SPEC-1996 */
; ..\component\CanIf\Implementation\CanIf.c	  2224            /* #240 Request CAN driver to STOP if currently in STOP mode */
; ..\component\CanIf\Implementation\CanIf.c	  2225            if (canSetCtrlModeFct((uint8)CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), CAN_T_STOP) == CAN_OK) /* SBSW_CANIF_41 */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2226            {
; ..\component\CanIf\Implementation\CanIf.c	  2227              retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2228            }
; ..\component\CanIf\Implementation\CanIf.c	  2229            break;
; ..\component\CanIf\Implementation\CanIf.c	  2230  
; ..\component\CanIf\Implementation\CanIf.c	  2231          default:
; ..\component\CanIf\Implementation\CanIf.c	  2232            /* CAN Interface in invalid mode */
; ..\component\CanIf\Implementation\CanIf.c	  2233            /* retval already set to E_NOT_OK as default */
; ..\component\CanIf\Implementation\CanIf.c	  2234            break;
; ..\component\CanIf\Implementation\CanIf.c	  2235        }
; ..\component\CanIf\Implementation\CanIf.c	  2236        break;
; ..\component\CanIf\Implementation\CanIf.c	  2237      case CANIF_CS_STARTED:  
	jeq	d4,#2,.L12
.L1136:

; ..\component\CanIf\Implementation\CanIf.c	  2238        /* #300 Transition to START: Transition only possible from STOP mode */
; ..\component\CanIf\Implementation\CanIf.c	  2239        /* \trace SPEC-3757 */
; ..\component\CanIf\Implementation\CanIf.c	  2240        
; ..\component\CanIf\Implementation\CanIf.c	  2241        switch(CanIf_GetCtrlMode(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  2242        {
; ..\component\CanIf\Implementation\CanIf.c	  2243          case CANIF_CS_STOPPED:
; ..\component\CanIf\Implementation\CanIf.c	  2244            /* \trace SPEC-1845, SPEC-1996 */
; ..\component\CanIf\Implementation\CanIf.c	  2245            /* #310 Request CAN driver to START if currently in STOP mode */
; ..\component\CanIf\Implementation\CanIf.c	  2246            if (canSetCtrlModeFct((uint8)CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), CAN_T_START) == CAN_OK) /* SBSW_CANIF_41 */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2247            {
; ..\component\CanIf\Implementation\CanIf.c	  2248              retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2249            }
; ..\component\CanIf\Implementation\CanIf.c	  2250            break;
; ..\component\CanIf\Implementation\CanIf.c	  2251            
; ..\component\CanIf\Implementation\CanIf.c	  2252          case CANIF_CS_STARTED:
; ..\component\CanIf\Implementation\CanIf.c	  2253            /* \trace SPEC-1845, SPEC-1996 */
; ..\component\CanIf\Implementation\CanIf.c	  2254            /* #320 Request CAN driver to START if currently in START mode */
; ..\component\CanIf\Implementation\CanIf.c	  2255            if (canSetCtrlModeFct((uint8)CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), CAN_T_START) == CAN_OK) /* SBSW_CANIF_41 */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2256            {
; ..\component\CanIf\Implementation\CanIf.c	  2257              retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2258            }
; ..\component\CanIf\Implementation\CanIf.c	  2259            break;
; ..\component\CanIf\Implementation\CanIf.c	  2260            
; ..\component\CanIf\Implementation\CanIf.c	  2261          default:
; ..\component\CanIf\Implementation\CanIf.c	  2262            /* retval already set to E_NOT_OK as default */
; ..\component\CanIf\Implementation\CanIf.c	  2263            break;
; ..\component\CanIf\Implementation\CanIf.c	  2264        }
; ..\component\CanIf\Implementation\CanIf.c	  2265        break;
; ..\component\CanIf\Implementation\CanIf.c	  2266      case CANIF_CS_SLEEP:
	jeq	d4,#3,.L13
.L1137:
	j	.L14
.L11:
	fcall	.cocofun_6
.L1138:
	jeq	d15,#1,.L15
.L1139:
	jeq	d15,#2,.L16
.L1140:
	mov	d5,#3
	jne	d15,#3,.L18
.L1141:
	mov	d4,#0
	call	Can_SetControllerMode
.L695:
	jne	d2,#1,.L19
.L1142:
	j	.L20
.L16:
	mov	d4,#0
.L696:
	mov	d5,#1
	call	Can_SetControllerMode
.L1143:
	jne	d2,#1,.L21
.L1144:
	call	CanIf_ClearQueue
.L1145:
	j	.L22
.L15:
	mov	d4,#0
.L697:
	mov	d5,#1
	call	Can_SetControllerMode
.L1146:
	jne	d2,#1,.L23
.L1147:
	j	.L24
.L12:
	fcall	.cocofun_6
.L1148:
	jeq	d15,#1,.L25
.L1149:
	jeq	d15,#2,.L26
.L1150:
	j	.L27
.L25:
	mov	d4,#0
.L698:
	mov	d5,d4
	call	Can_SetControllerMode
.L1151:
	jne	d2,#1,.L28
.L1152:
	j	.L29
.L26:
	mov	d4,#0
.L699:
	mov	d5,d4
	call	Can_SetControllerMode
.L1153:
	jne	d2,#1,.L30
.L1154:
	j	.L31
.L13:

; ..\component\CanIf\Implementation\CanIf.c	  2267        /* #400 Transition to SLEEP: Transition only possible from STOP mode */
; ..\component\CanIf\Implementation\CanIf.c	  2268        /* CanIf_ControllerMode is now CANIF_CS_STOPPED unless an error occurred -> E_NOT_OK still set in case of incomplete transition */
; ..\component\CanIf\Implementation\CanIf.c	  2269        /* \trace SPEC-3759 */
; ..\component\CanIf\Implementation\CanIf.c	  2270  
; ..\component\CanIf\Implementation\CanIf.c	  2271        switch(CanIf_GetCtrlMode(CanIf_Controller_Value))
	fcall	.cocofun_6
.L1155:

; ..\component\CanIf\Implementation\CanIf.c	  2272        {
; ..\component\CanIf\Implementation\CanIf.c	  2273          case CANIF_CS_STOPPED:
	jeq	d15,#1,.L32
.L1156:

; ..\component\CanIf\Implementation\CanIf.c	  2274            /* \trace SPEC-1845, SPEC-1996 */
; ..\component\CanIf\Implementation\CanIf.c	  2275            /* #410 Request CAN driver to SLEEP if currently in STOP mode */
; ..\component\CanIf\Implementation\CanIf.c	  2276            if (canSetCtrlModeFct((uint8)CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), CAN_T_SLEEP) == CAN_OK) /* SBSW_CANIF_41 */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2277            {
; ..\component\CanIf\Implementation\CanIf.c	  2278  #if (CANIF_WAKEUP_VALIDATION == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2279              /* ESCAN00079059 Reset of stored wake-up validation event moved to this place */
; ..\component\CanIf\Implementation\CanIf.c	  2280              /* CANIF756 */
; ..\component\CanIf\Implementation\CanIf.c	  2281              /* #420 Reset the wake-up validation state */
; ..\component\CanIf\Implementation\CanIf.c	  2282              CanIf_SetWakeUpValidationState(CanIf_Controller_Value, CANIF_WUVALIDATION_ARMED); /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  2283  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2284              retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2285            }
; ..\component\CanIf\Implementation\CanIf.c	  2286            break;
; ..\component\CanIf\Implementation\CanIf.c	  2287            
; ..\component\CanIf\Implementation\CanIf.c	  2288          case CANIF_CS_SLEEP:
	jne	d15,#3,.L34
.L32:

; ..\component\CanIf\Implementation\CanIf.c	  2289            if (canSetCtrlModeFct((uint8)CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), CAN_T_SLEEP) == CAN_OK)  /* SBSW_CANIF_41 */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
	mov	d4,#0
.L700:
	mov	d5,#2
	call	Can_SetControllerMode
.L1157:
	jne	d2,#1,.L35

; ..\component\CanIf\Implementation\CanIf.c	  2290            {
; ..\component\CanIf\Implementation\CanIf.c	  2291              retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2292            }
; ..\component\CanIf\Implementation\CanIf.c	  2293            break;
; ..\component\CanIf\Implementation\CanIf.c	  2294            
; ..\component\CanIf\Implementation\CanIf.c	  2295          default:
; ..\component\CanIf\Implementation\CanIf.c	  2296            /* Transition not allowed */
; ..\component\CanIf\Implementation\CanIf.c	  2297            /* E_NOT_OK already set */
; ..\component\CanIf\Implementation\CanIf.c	  2298            break;
; ..\component\CanIf\Implementation\CanIf.c	  2299        }
; ..\component\CanIf\Implementation\CanIf.c	  2300        break;
; ..\component\CanIf\Implementation\CanIf.c	  2301      default: /* PRQA S 2016 */ /* MD_MSR_EmptyClause */
; ..\component\CanIf\Implementation\CanIf.c	  2302        /* \trace SPEC-21340 */
; ..\component\CanIf\Implementation\CanIf.c	  2303  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2304        CanIf_Det_ReportError(CANIF_SETCONTROLLERMODE_API, CANIF_E_PARAM_CTRLMODE);
; ..\component\CanIf\Implementation\CanIf.c	  2305  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2306        break;
; ..\component\CanIf\Implementation\CanIf.c	  2307      }
; ..\component\CanIf\Implementation\CanIf.c	  2308      return retval;
.L31:
.L29:
.L24:
.L22:
.L20:
	mov	d8,#0
	j	.L36
.L14:
	fcall	.cocofun_2
	mov	d6,#3
.L703:
	mov	d7,#21
	call	Det_ReportError
.L36:
.L35:
.L34:
.L30:
.L28:
.L27:
.L23:
.L21:
.L19:
.L18:

; ..\component\CanIf\Implementation\CanIf.c	  2309  } /* PRQA S 6030 */ /* MD_MSR_STCYC */
	mov	d2,d8
	ret
.L666:
	
__CanIf_SetControllerModeSubSwitch_function_end:
	.size	CanIf_SetControllerModeSubSwitch,__CanIf_SetControllerModeSubSwitch_function_end-CanIf_SetControllerModeSubSwitch
.L428:
	; End of function
	
	.sdecl	'.text.CanIf..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.CanIf..cocofun_6'
	.align	2
; Function .cocofun_6
.L233:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0
	movh.a	a15,#@his(CanIf_CtrlStates)
	ld.bu	d15,[a15]@los(CanIf_CtrlStates)
.L1196:
	fret
.L463:
	; End of function
	.sdecl	'.text.CanIf..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.CanIf..cocofun_2'
	.align	2
; Function .cocofun_2
.L235:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0
	mov	d4,#60
.L702:
	mov	d5,#0
	fret
.L443:
	; End of function
	.sdecl	'.text.CanIf.CanIf_SetControllerMode',code,cluster('CanIf_SetControllerMode')
	.sect	'.text.CanIf.CanIf_SetControllerMode'
	.align	2
	
	.global	CanIf_SetControllerMode

; ..\component\CanIf\Implementation\CanIf.c	  2310  
; ..\component\CanIf\Implementation\CanIf.c	  2311  
; ..\component\CanIf\Implementation\CanIf.c	  2312  /* \trace SPEC-1830 */
; ..\component\CanIf\Implementation\CanIf.c	  2313  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  2314   *  CanIf_SetControllerMode()
; ..\component\CanIf\Implementation\CanIf.c	  2315   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2316  /*
; ..\component\CanIf\Implementation\CanIf.c	  2317  |<DataModelStart>| CanIf_SetControllerMode
; ..\component\CanIf\Implementation\CanIf.c	  2318  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  2319  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  2320  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  2321  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  2322  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  2323  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  2324  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  2325  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  2326  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  2327  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  2328  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  2329  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  2330  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  2331  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  2332  */
; ..\component\CanIf\Implementation\CanIf.c	  2333   /*! Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  2334   *
; ..\component\CanIf\Implementation\CanIf.c	  2335   *
; ..\component\CanIf\Implementation\CanIf.c	  2336   *
; ..\component\CanIf\Implementation\CanIf.c	  2337   *
; ..\component\CanIf\Implementation\CanIf.c	  2338   *
; ..\component\CanIf\Implementation\CanIf.c	  2339   *
; ..\component\CanIf\Implementation\CanIf.c	  2340   *
; ..\component\CanIf\Implementation\CanIf.c	  2341   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2342  FUNC(Std_ReturnType, CANIF_CODE) CanIf_SetControllerMode(uint8 ControllerId, CanIf_ControllerModeType ControllerMode)
; Function CanIf_SetControllerMode
.L237:
CanIf_SetControllerMode:	.type	func
	mov	d8,d5
.L707:

; ..\component\CanIf\Implementation\CanIf.c	  2343  {
; ..\component\CanIf\Implementation\CanIf.c	  2344    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2345    /* \trace SPEC-3751 */
; ..\component\CanIf\Implementation\CanIf.c	  2346    Std_ReturnType retval = E_NOT_OK;
	mov	d9,#1
.L705:

; ..\component\CanIf\Implementation\CanIf.c	  2347    uint8 errorId = CANIF_E_NO_ERROR;
	mov	d15,#0
.L708:

; ..\component\CanIf\Implementation\CanIf.c	  2348  
; ..\component\CanIf\Implementation\CanIf.c	  2349    /* ----- Development Error Checks --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2350  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2351  # if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2352    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  2353    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  2354    {
; ..\component\CanIf\Implementation\CanIf.c	  2355      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  2356      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  2357    }
; ..\component\CanIf\Implementation\CanIf.c	  2358    else
; ..\component\CanIf\Implementation\CanIf.c	  2359  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2360    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  2361    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
	jeq	d4,#0,.L38
.L821:

; ..\component\CanIf\Implementation\CanIf.c	  2362    {
; ..\component\CanIf\Implementation\CanIf.c	  2363      /* \trace SPEC-1997 */
; ..\component\CanIf\Implementation\CanIf.c	  2364      errorId = CANIF_E_PARAM_CONTROLLERID;
	mov	d15,#15
	j	.L39
.L38:

; ..\component\CanIf\Implementation\CanIf.c	  2365    }
; ..\component\CanIf\Implementation\CanIf.c	  2366    /* #30 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  2367    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
	movh.a	a15,#@his(CanIf_CtrlStates)
	ld.bu	d0,[a15]@los(CanIf_CtrlStates)
.L822:
	jne	d0,#0,.L40
.L823:

; ..\component\CanIf\Implementation\CanIf.c	  2368    {
; ..\component\CanIf\Implementation\CanIf.c	  2369      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  2370      errorId = CANIF_E_UNINIT;
	mov	d15,#30
	j	.L41
.L40:

; ..\component\CanIf\Implementation\CanIf.c	  2371    }
; ..\component\CanIf\Implementation\CanIf.c	  2372  # if ((CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON) && (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  2373    /* #40 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  2374    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  2375    {
; ..\component\CanIf\Implementation\CanIf.c	  2376      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  2377    }
; ..\component\CanIf\Implementation\CanIf.c	  2378  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2379    else
; ..\component\CanIf\Implementation\CanIf.c	  2380  #endif /* (CANIF_DEV_ERROR_DETECT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  2381    {
; ..\component\CanIf\Implementation\CanIf.c	  2382      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2383      /* return E_NOT_OK if controller is in state CANIF_CS_UNINIT */
; ..\component\CanIf\Implementation\CanIf.c	  2384  
; ..\component\CanIf\Implementation\CanIf.c	  2385  #if (CANIF_DEV_ERROR_DETECT == STD_OFF)
; ..\component\CanIf\Implementation\CanIf.c	  2386      /* #100 Do mode transition only if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  2387      if (CanIf_GetCtrlMode(CanIf_Controller_Value) != CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  2388  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2389      {
; ..\component\CanIf\Implementation\CanIf.c	  2390        /* return E_NOT_OK if requested device mode already active */
; ..\component\CanIf\Implementation\CanIf.c	  2391        /* #110 Perform mode transition only within critical section */
; ..\component\CanIf\Implementation\CanIf.c	  2392        CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_0);
	call	SchM_Enter_CanIf_CANIF_EXCLUSIVE_AREA_0
.L704:

; ..\component\CanIf\Implementation\CanIf.c	  2393        retval = CanIf_SetControllerModeSubSwitch(CANIF_CHANNEL_CANPARA_FIRST ControllerMode);
	mov	d4,d8
	call	CanIf_SetControllerModeSubSwitch
.L706:

; ..\component\CanIf\Implementation\CanIf.c	  2394        CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_0);
	mov	d9,d2
	call	SchM_Exit_CanIf_CANIF_EXCLUSIVE_AREA_0
.L41:
.L39:

; ..\component\CanIf\Implementation\CanIf.c	  2395      }
; ..\component\CanIf\Implementation\CanIf.c	  2396    }
; ..\component\CanIf\Implementation\CanIf.c	  2397  
; ..\component\CanIf\Implementation\CanIf.c	  2398    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2399  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2400    if (errorId != CANIF_E_NO_ERROR)
	jeq	d15,#0,.L42
.L824:

; ..\component\CanIf\Implementation\CanIf.c	  2401    {
; ..\component\CanIf\Implementation\CanIf.c	  2402      CanIf_Det_ReportError(CANIF_SETCONTROLLERMODE_API, errorId);
	fcall	.cocofun_2
	mov	d6,#3
	mov	d7,d15
	call	Det_ReportError
.L42:

; ..\component\CanIf\Implementation\CanIf.c	  2403    }
; ..\component\CanIf\Implementation\CanIf.c	  2404  #else
; ..\component\CanIf\Implementation\CanIf.c	  2405    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  2406  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2407  
; ..\component\CanIf\Implementation\CanIf.c	  2408  #if ((CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) && (CANIF_DEV_ERROR_DETECT == STD_OFF)) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  2409    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  2410  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2411    /* \trace SPEC-3751 */
; ..\component\CanIf\Implementation\CanIf.c	  2412    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  2413  }  /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
	mov	d2,d9
	ret
.L519:
	
__CanIf_SetControllerMode_function_end:
	.size	CanIf_SetControllerMode,__CanIf_SetControllerMode_function_end-CanIf_SetControllerMode
.L308:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_GetControllerMode',code,cluster('CanIf_GetControllerMode')
	.sect	'.text.CanIf.CanIf_GetControllerMode'
	.align	2
	
	.global	CanIf_GetControllerMode

; ..\component\CanIf\Implementation\CanIf.c	  2414  
; ..\component\CanIf\Implementation\CanIf.c	  2415  /* \trace SPEC-1916 */
; ..\component\CanIf\Implementation\CanIf.c	  2416  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  2417   *  CanIf_GetControllerMode()
; ..\component\CanIf\Implementation\CanIf.c	  2418   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2419  /*
; ..\component\CanIf\Implementation\CanIf.c	  2420  |<DataModelStart>| CanIf_GetControllerMode
; ..\component\CanIf\Implementation\CanIf.c	  2421  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  2422  CanIfOneChOpt # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  2423  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  2424  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  2425  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  2426  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  2427  CanIfOneChOpt, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  2428  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  2429  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  2430  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  2431  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  2432  */
; ..\component\CanIf\Implementation\CanIf.c	  2433   /*! Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  2434   *
; ..\component\CanIf\Implementation\CanIf.c	  2435   *
; ..\component\CanIf\Implementation\CanIf.c	  2436   *
; ..\component\CanIf\Implementation\CanIf.c	  2437   *
; ..\component\CanIf\Implementation\CanIf.c	  2438   *
; ..\component\CanIf\Implementation\CanIf.c	  2439   *
; ..\component\CanIf\Implementation\CanIf.c	  2440   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2441  FUNC(Std_ReturnType, CANIF_CODE) CanIf_GetControllerMode(uint8 ControllerId, P2VAR(CanIf_ControllerModeType, AUTOMATIC, CANIF_APPL_STATE_VAR) ControllerModePtr)
; Function CanIf_GetControllerMode
.L239:
CanIf_GetControllerMode:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  2442  {
; ..\component\CanIf\Implementation\CanIf.c	  2443    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2444    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
	mov	d8,#1
.L709:

; ..\component\CanIf\Implementation\CanIf.c	  2445    uint8 errorId = CANIF_E_NO_ERROR;
	mov	d7,#0
.L710:

; ..\component\CanIf\Implementation\CanIf.c	  2446  
; ..\component\CanIf\Implementation\CanIf.c	  2447    /* ----- Development Error Checks --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2448  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2449  # if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2450    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  2451    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  2452    {
; ..\component\CanIf\Implementation\CanIf.c	  2453      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  2454      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  2455    }
; ..\component\CanIf\Implementation\CanIf.c	  2456    else
; ..\component\CanIf\Implementation\CanIf.c	  2457  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2458    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  2459    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
	jeq	d4,#0,.L44
.L829:

; ..\component\CanIf\Implementation\CanIf.c	  2460    {
; ..\component\CanIf\Implementation\CanIf.c	  2461      /* \trace SPEC-1998 */
; ..\component\CanIf\Implementation\CanIf.c	  2462      errorId = CANIF_E_PARAM_CONTROLLERID;
	mov	d7,#15
	j	.L45
.L44:

; ..\component\CanIf\Implementation\CanIf.c	  2463    }
; ..\component\CanIf\Implementation\CanIf.c	  2464    /* #30 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  2465    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
	fcall	.cocofun_6
.L711:
	jne	d15,#0,.L46
.L830:

; ..\component\CanIf\Implementation\CanIf.c	  2466    {
; ..\component\CanIf\Implementation\CanIf.c	  2467      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  2468      errorId = CANIF_E_UNINIT;
	mov	d7,#30
	j	.L47
.L46:

; ..\component\CanIf\Implementation\CanIf.c	  2469    }
; ..\component\CanIf\Implementation\CanIf.c	  2470    /* #40 Check if parameter ControllerModePtr is valid */
; ..\component\CanIf\Implementation\CanIf.c	  2471    else if (ControllerModePtr == NULL_PTR)
	jnz.a	a4,.L48
.L831:

; ..\component\CanIf\Implementation\CanIf.c	  2472    {
; ..\component\CanIf\Implementation\CanIf.c	  2473      /* \trace SPEC-5232 */
; ..\component\CanIf\Implementation\CanIf.c	  2474      errorId = CANIF_E_PARAM_POINTER;
	mov	d7,#20
	j	.L49
.L48:

; ..\component\CanIf\Implementation\CanIf.c	  2475    }
; ..\component\CanIf\Implementation\CanIf.c	  2476    else
; ..\component\CanIf\Implementation\CanIf.c	  2477  #endif /* (CANIF_DEV_ERROR_DETECT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  2478  
; ..\component\CanIf\Implementation\CanIf.c	  2479    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2480    {
; ..\component\CanIf\Implementation\CanIf.c	  2481      /* \trace SPEC-5065 */
; ..\component\CanIf\Implementation\CanIf.c	  2482      /* #100 Retrieve the actual mode */
; ..\component\CanIf\Implementation\CanIf.c	  2483      *ControllerModePtr = CanIf_GetCtrlMode(CanIf_Controller_Value); /* SBSW_CANIF_4 */
; ..\component\CanIf\Implementation\CanIf.c	  2484      retval = E_OK;
	mov	d8,#0
	st.b	[a4],d15
.L49:
.L47:
.L45:

; ..\component\CanIf\Implementation\CanIf.c	  2485    }
; ..\component\CanIf\Implementation\CanIf.c	  2486  
; ..\component\CanIf\Implementation\CanIf.c	  2487    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2488  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2489    if (errorId != CANIF_E_NO_ERROR)
	jeq	d7,#0,.L50
.L832:

; ..\component\CanIf\Implementation\CanIf.c	  2490    {
; ..\component\CanIf\Implementation\CanIf.c	  2491      CanIf_Det_ReportError(CANIF_GETCONTROLLERMODE_API, errorId);
	fcall	.cocofun_2
.L712:
	mov	d6,#4
	call	Det_ReportError
.L50:

; ..\component\CanIf\Implementation\CanIf.c	  2492    }
; ..\component\CanIf\Implementation\CanIf.c	  2493  #else
; ..\component\CanIf\Implementation\CanIf.c	  2494    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  2495  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2496  
; ..\component\CanIf\Implementation\CanIf.c	  2497  #if ((CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) && (CANIF_DEV_ERROR_DETECT == STD_OFF)) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  2498    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  2499  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2500    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  2501  }
	mov	d2,d8
	ret
.L525:
	
__CanIf_GetControllerMode_function_end:
	.size	CanIf_GetControllerMode,__CanIf_GetControllerMode_function_end-CanIf_GetControllerMode
.L313:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_TransmitSubVerifyPduLength',code,cluster('CanIf_TransmitSubVerifyPduLength')
	.sect	'.text.CanIf.CanIf_TransmitSubVerifyPduLength'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  2502  
; ..\component\CanIf\Implementation\CanIf.c	  2503  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  2504   *  CanIf_TransmitSubVerifyPduLength()
; ..\component\CanIf\Implementation\CanIf.c	  2505   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2506  /*
; ..\component\CanIf\Implementation\CanIf.c	  2507  |<DataModelStart>| CanIf_TransmitSubVerifyPduLength
; ..\component\CanIf\Implementation\CanIf.c	  2508  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  2509  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  2510  CanIfTxMetaDataSupport
; ..\component\CanIf\Implementation\CanIf.c	  2511  CanIfTxMetaDataSupport,CanIfTxPduTruncation
; ..\component\CanIf\Implementation\CanIf.c	  2512  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  2513  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  2514  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  2515  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  2516  */
; ..\component\CanIf\Implementation\CanIf.c	  2517   /*! Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  2518   *
; ..\component\CanIf\Implementation\CanIf.c	  2519   *
; ..\component\CanIf\Implementation\CanIf.c	  2520   *
; ..\component\CanIf\Implementation\CanIf.c	  2521   *
; ..\component\CanIf\Implementation\CanIf.c	  2522   *
; ..\component\CanIf\Implementation\CanIf.c	  2523   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2524  CANIF_LOCAL_INLINE FUNC(CanIf_TransmitStateType, CANIF_CODE) CanIf_TransmitSubVerifyPduLength(CONST(PduIdType, AUTOMATIC) CanTxPduId, P2VAR(Can_PduType, AUTOMATIC, AUTOMATIC) localPduPtr)
; Function CanIf_TransmitSubVerifyPduLength
.L241:
CanIf_TransmitSubVerifyPduLength:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  2525  {
; ..\component\CanIf\Implementation\CanIf.c	  2526    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2527    CanIf_TransmitStateType txState = CANIF_DO_TRANSMIT;
; ..\component\CanIf\Implementation\CanIf.c	  2528  
; ..\component\CanIf\Implementation\CanIf.c	  2529    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2530  #if (CANIF_META_DATA_TX_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2531    /* #100 Remove tx meta data length from PDU length (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  2532    if (localPduPtr->length >= CANIF_CFG_TX_TXMETADATALENGTH(CanTxPduId)) /* Not applicable if the PDU length is too short */
; ..\component\CanIf\Implementation\CanIf.c	  2533    {
; ..\component\CanIf\Implementation\CanIf.c	  2534      localPduPtr->length = (uint8)(localPduPtr->length - CANIF_CFG_TX_TXMETADATALENGTH(CanTxPduId)); /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  2535    }
; ..\component\CanIf\Implementation\CanIf.c	  2536  #endif /* CANIF_META_DATA_TX_SUPPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  2537  
; ..\component\CanIf\Implementation\CanIf.c	  2538    /* #110 Verify if PDU length exceeding the configured maximum length */
; ..\component\CanIf\Implementation\CanIf.c	  2539    if(localPduPtr->length > CANIF_CFG_TX_LENGTH(CanTxPduId))
	mov	d2,#0
	fcall	.cocofun_9
	ld.bu	d0,[a15]7
.L1035:
	ld.bu	d15,[a4]2
.L1036:
	jge.u	d0,d15,.L52
.L1037:

; ..\component\CanIf\Implementation\CanIf.c	  2540    {
; ..\component\CanIf\Implementation\CanIf.c	  2541      /* #200 If TxPduTruncation is enabled, truncate PDU length to the configured maximum length */
; ..\component\CanIf\Implementation\CanIf.c	  2542      if(CANIF_CFG_TX_ISPDUTRUNCATION(CanTxPduId))
	ld.bu	d15,[a15]3
.L1038:
	jeq	d15,#0,.L53
.L1039:

; ..\component\CanIf\Implementation\CanIf.c	  2543      { 
; ..\component\CanIf\Implementation\CanIf.c	  2544        /* \trace SPEC-7204475 */
; ..\component\CanIf\Implementation\CanIf.c	  2545        localPduPtr->length = CANIF_CFG_TX_LENGTH(CanTxPduId); /* SBSW_CANIF_9 */
	st.b	[a4]2,d0
.L52:

; ..\component\CanIf\Implementation\CanIf.c	  2546      }
; ..\component\CanIf\Implementation\CanIf.c	  2547      /* #300 If TxPduTruncation is disabled, prevent transmission */
; ..\component\CanIf\Implementation\CanIf.c	  2548      else
; ..\component\CanIf\Implementation\CanIf.c	  2549      { 
; ..\component\CanIf\Implementation\CanIf.c	  2550        /* \trace SPEC-7204476 */
; ..\component\CanIf\Implementation\CanIf.c	  2551        txState = CANIF_DO_NOT_TRANSMIT;
; ..\component\CanIf\Implementation\CanIf.c	  2552      }
; ..\component\CanIf\Implementation\CanIf.c	  2553    }
; ..\component\CanIf\Implementation\CanIf.c	  2554  
; ..\component\CanIf\Implementation\CanIf.c	  2555    return txState;
; ..\component\CanIf\Implementation\CanIf.c	  2556  }
	ret
.L53:
	mov	d2,#1
	ret
.L630:
	
__CanIf_TransmitSubVerifyPduLength_function_end:
	.size	CanIf_TransmitSubVerifyPduLength,__CanIf_TransmitSubVerifyPduLength_function_end-CanIf_TransmitSubVerifyPduLength
.L388:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_TxBufferPrioByCanIdQueuePdu',code,cluster('CanIf_TxBufferPrioByCanIdQueuePdu')
	.sect	'.text.CanIf.CanIf_TxBufferPrioByCanIdQueuePdu'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  2557  
; ..\component\CanIf\Implementation\CanIf.c	  2558  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2559  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  2560   *  CanIf_TransmitSubHandleTxPduFilter()
; ..\component\CanIf\Implementation\CanIf.c	  2561   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2562  /*
; ..\component\CanIf\Implementation\CanIf.c	  2563  |<DataModelStart>| CanIf_TransmitSubHandleTxPduFilter
; ..\component\CanIf\Implementation\CanIf.c	  2564  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  2565  CanIfPnEnable, CanIfOneChOpt, CanIfControllerAmount # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  2566  CanIfPnEnable, CanIfOneChOpt, CanIfControllerAmount # from caller CanIf_Transmit #
; ..\component\CanIf\Implementation\CanIf.c	  2567  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  2568  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  2569  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  2570  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  2571  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  2572  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  2573  */
; ..\component\CanIf\Implementation\CanIf.c	  2574   /*! Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  2575   *
; ..\component\CanIf\Implementation\CanIf.c	  2576   *
; ..\component\CanIf\Implementation\CanIf.c	  2577   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2578  CANIF_LOCAL_INLINE FUNC(CanIf_TransmitStateType, CANIF_CODE) CanIf_TransmitSubHandleTxPduFilter(CANIF_CHANNEL_CANTYPE_FIRST CONST(PduIdType, AUTOMATIC) CanTxPduId)
; ..\component\CanIf\Implementation\CanIf.c	  2579  {
; ..\component\CanIf\Implementation\CanIf.c	  2580    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2581    CanIf_TransmitStateType pnTxState = CANIF_DO_TRANSMIT;
; ..\component\CanIf\Implementation\CanIf.c	  2582  
; ..\component\CanIf\Implementation\CanIf.c	  2583    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2584    /* #100 Determine basing on state of Tx-PDU filter of corresponding CAN channel whether the Tx-PDU may be transmitted or NOT */
; ..\component\CanIf\Implementation\CanIf.c	  2585    if (CANIF_CFG_ISFEATUREPNWUTXPDUFILTERENABLED(CanIf_Controller_Value)) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2586    {
; ..\component\CanIf\Implementation\CanIf.c	  2587      /* CANIF750 */
; ..\component\CanIf\Implementation\CanIf.c	  2588      if (CanIf_IsPnWuTxPduFilterActive(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  2589      {
; ..\component\CanIf\Implementation\CanIf.c	  2590        if (!CANIF_CFG_ISPNWUTXPDU(CanTxPduId))
; ..\component\CanIf\Implementation\CanIf.c	  2591        {
; ..\component\CanIf\Implementation\CanIf.c	  2592          /* TxPdu does not pass the PnWuFilter -> transmission not allowed */
; ..\component\CanIf\Implementation\CanIf.c	  2593          pnTxState = CANIF_DO_NOT_TRANSMIT;
; ..\component\CanIf\Implementation\CanIf.c	  2594        }
; ..\component\CanIf\Implementation\CanIf.c	  2595      }
; ..\component\CanIf\Implementation\CanIf.c	  2596    }
; ..\component\CanIf\Implementation\CanIf.c	  2597  
; ..\component\CanIf\Implementation\CanIf.c	  2598    return pnTxState;
; ..\component\CanIf\Implementation\CanIf.c	  2599  }
; ..\component\CanIf\Implementation\CanIf.c	  2600  #endif /* (CANIF_PN_WU_TX_PDU_FILTER == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  2601  
; ..\component\CanIf\Implementation\CanIf.c	  2602  
; ..\component\CanIf\Implementation\CanIf.c	  2603  #if (CANIF_META_DATA_TX_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2604  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  2605   *  CanIf_TransmitSubHandleMetaData()
; ..\component\CanIf\Implementation\CanIf.c	  2606   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2607  /*
; ..\component\CanIf\Implementation\CanIf.c	  2608  |<DataModelStart>| CanIf_TransmitSubHandleMetaData
; ..\component\CanIf\Implementation\CanIf.c	  2609  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  2610  CanIfTxMetaDataSupport # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  2611  CanIfTxMetaDataSupport # from caller CanIf_Transmit #
; ..\component\CanIf\Implementation\CanIf.c	  2612  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  2613  CanIfIDType, CanIfFdSupport # used because TxIdMask value is depending of CanIfIDType/Fd #
; ..\component\CanIf\Implementation\CanIf.c	  2614  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  2615  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  2616  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  2617  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  2618  */
; ..\component\CanIf\Implementation\CanIf.c	  2619   /*! Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  2620   *
; ..\component\CanIf\Implementation\CanIf.c	  2621   *
; ..\component\CanIf\Implementation\CanIf.c	  2622   *
; ..\component\CanIf\Implementation\CanIf.c	  2623   *
; ..\component\CanIf\Implementation\CanIf.c	  2624   *
; ..\component\CanIf\Implementation\CanIf.c	  2625   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2626  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_TransmitSubHandleMetaData(P2CONST(PduInfoType, AUTOMATIC, CANIF_APPL_MSG_VAR) PduInfoPtr, P2VAR(Can_PduType, AUTOMATIC, AUTOMATIC) localPduPtr)
; ..\component\CanIf\Implementation\CanIf.c	  2627  {
; ..\component\CanIf\Implementation\CanIf.c	  2628    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2629    uint8 startPos;
; ..\component\CanIf\Implementation\CanIf.c	  2630    uint8 endPos;
; ..\component\CanIf\Implementation\CanIf.c	  2631    Can_IdType localId;
; ..\component\CanIf\Implementation\CanIf.c	  2632  
; ..\component\CanIf\Implementation\CanIf.c	  2633    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2634    /* #100 Tx-PDU has meta data configured? */
; ..\component\CanIf\Implementation\CanIf.c	  2635    if(CANIF_CFG_TX_TXMETADATALENGTH(localPduPtr->swPduHandle) > 0u)
; ..\component\CanIf\Implementation\CanIf.c	  2636    {
; ..\component\CanIf\Implementation\CanIf.c	  2637      localId = 0;
; ..\component\CanIf\Implementation\CanIf.c	  2638      endPos = (uint8)(PduInfoPtr->SduLength); /* ESCAN00074166 */
; ..\component\CanIf\Implementation\CanIf.c	  2639  
; ..\component\CanIf\Implementation\CanIf.c	  2640      /* #200 Extract the meta data from the payload according to configuration */
; ..\component\CanIf\Implementation\CanIf.c	  2641      if (PduInfoPtr->SduLength >= CANIF_CFG_TX_TXMETADATALENGTH(localPduPtr->swPduHandle)) /* Not applicable if the TxPduLenght (SduLength) is too short */
; ..\component\CanIf\Implementation\CanIf.c	  2642      {
; ..\component\CanIf\Implementation\CanIf.c	  2643        startPos = (uint8)((PduInfoPtr->SduLength) - 1u); /* DLC - 1 */
; ..\component\CanIf\Implementation\CanIf.c	  2644        endPos = (uint8)(endPos - CANIF_CFG_TX_TXMETADATALENGTH(localPduPtr->swPduHandle)); /* TxPduLenght (SduLength) - MetaDataLength */
; ..\component\CanIf\Implementation\CanIf.c	  2645  
; ..\component\CanIf\Implementation\CanIf.c	  2646        /* #210 Calculate the CAN identifier from extracted meta data */
; ..\component\CanIf\Implementation\CanIf.c	  2647        while(startPos > endPos) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2648        {
; ..\component\CanIf\Implementation\CanIf.c	  2649          localId |= PduInfoPtr->SduDataPtr[startPos];
; ..\component\CanIf\Implementation\CanIf.c	  2650          localId = localId << 8;
; ..\component\CanIf\Implementation\CanIf.c	  2651          startPos--;
; ..\component\CanIf\Implementation\CanIf.c	  2652        }
; ..\component\CanIf\Implementation\CanIf.c	  2653        localId |= PduInfoPtr->SduDataPtr[startPos];
; ..\component\CanIf\Implementation\CanIf.c	  2654  
; ..\component\CanIf\Implementation\CanIf.c	  2655        /* #220 Adapt the CAN identifier of Tx-PDU according to calculated one from meta data */
; ..\component\CanIf\Implementation\CanIf.c	  2656        localPduPtr->id = (Can_IdType)(((localPduPtr->id & CANIF_CFG_TX_CANIDTXMASK(localPduPtr->swPduHandle)) | (localId & (Can_IdType)(~CANIF_CFG_TX_CANIDTXMASK(localPduPtr->swPduHandle))))); /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  2657      }
; ..\component\CanIf\Implementation\CanIf.c	  2658    }
; ..\component\CanIf\Implementation\CanIf.c	  2659  }
; ..\component\CanIf\Implementation\CanIf.c	  2660  #endif /* (CANIF_META_DATA_TX_SUPPORT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  2661  
; ..\component\CanIf\Implementation\CanIf.c	  2662  #if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	  2663  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  2664   *  CanIf_TransmitSubJ1939DynAddr()
; ..\component\CanIf\Implementation\CanIf.c	  2665   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2666  /*
; ..\component\CanIf\Implementation\CanIf.c	  2667  |<DataModelStart>| CanIf_TransmitSubJ1939DynAddr
; ..\component\CanIf\Implementation\CanIf.c	  2668  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  2669  CanIfJ1939, CanIfOneChOpt, CanIfControllerAmount # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  2670  CanIfJ1939, CanIfOneChOpt, CanIfControllerAmount # from caller CanIf_Transmit #
; ..\component\CanIf\Implementation\CanIf.c	  2671  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  2672  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  2673  CanIfJ1939
; ..\component\CanIf\Implementation\CanIf.c	  2674  CanIfJ1939, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  2675  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  2676  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  2677  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  2678  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  2679  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  2680  */
; ..\component\CanIf\Implementation\CanIf.c	  2681   /*! Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  2682   *
; ..\component\CanIf\Implementation\CanIf.c	  2683   *
; ..\component\CanIf\Implementation\CanIf.c	  2684   *
; ..\component\CanIf\Implementation\CanIf.c	  2685   *
; ..\component\CanIf\Implementation\CanIf.c	  2686   *
; ..\component\CanIf\Implementation\CanIf.c	  2687   *
; ..\component\CanIf\Implementation\CanIf.c	  2688   *
; ..\component\CanIf\Implementation\CanIf.c	  2689   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2690  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_TransmitSubJ1939DynAddr(CANIF_CHANNEL_CANTYPE_FIRST P2VAR(Can_PduType, AUTOMATIC, AUTOMATIC)localPduPtr)
; ..\component\CanIf\Implementation\CanIf.c	  2691  {
; ..\component\CanIf\Implementation\CanIf.c	  2692    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2693    uint8 da;      /* destinationAddress */
; ..\component\CanIf\Implementation\CanIf.c	  2694    uint8 sa;      /* sourceAddress */
; ..\component\CanIf\Implementation\CanIf.c	  2695    uint8 sa_t;    /* sourceAddress transformed with lookup table */
; ..\component\CanIf\Implementation\CanIf.c	  2696    uint8 ackAddr; /* exchange address in data */
; ..\component\CanIf\Implementation\CanIf.c	  2697    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  2698    Std_ReturnType retVal = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2699  
; ..\component\CanIf\Implementation\CanIf.c	  2700    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2701  
; ..\component\CanIf\Implementation\CanIf.c	  2702    /* #100 Do J1939-conform address conversion only for J1939Nm CAN channel */
; ..\component\CanIf\Implementation\CanIf.c	  2703    if( CANIF_CFG_CTRLJ1939DYNADDRSUPPORT(CanIf_Controller_Value) != CANIF_J1939_DYN_ADDR_DISABLED ) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2704    {
; ..\component\CanIf\Implementation\CanIf.c	  2705      /* #110 Distinguish between standard and extended CAN identifier */
; ..\component\CanIf\Implementation\CanIf.c	  2706      if(((localPduPtr)->id & CANIF_EXT_CANID_MASK) == CANIF_EXT_CANID_MASK) /* ext. ID */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2707      {
; ..\component\CanIf\Implementation\CanIf.c	  2708        /* #200 Extended CAN identifier: */
; ..\component\CanIf\Implementation\CanIf.c	  2709        if ((((localPduPtr)->id & CANIF_J1939_DATA_PAGE_MASK) != CANIF_J1939_DATA_PAGE_MASK) && (((localPduPtr)->id & CANIF_J1939_PGN_MASK) != CANIF_J1939_AC_PGN))
; ..\component\CanIf\Implementation\CanIf.c	  2710        {
; ..\component\CanIf\Implementation\CanIf.c	  2711          /* #210 Destination and source addresses are substituted with J1939 format but not for address claimed */
; ..\component\CanIf\Implementation\CanIf.c	  2712          if (((localPduPtr)->id & CANIF_J1939_MIN_PDU2_MASK) < CANIF_J1939_MIN_PDU2_MASK)  /* PDU Format 1 (second byte < 0xF0) */
; ..\component\CanIf\Implementation\CanIf.c	  2713          {
; ..\component\CanIf\Implementation\CanIf.c	  2714            da = (uint8)(((localPduPtr)->id & CANIF_J1939_DA_MASK) >> 8);
; ..\component\CanIf\Implementation\CanIf.c	  2715            da = CANIF_VAR_J1939TXADDR_LOOKUP(CanIf_Controller_Value, da);
; ..\component\CanIf\Implementation\CanIf.c	  2716            if (da == CANIF_J1939_NULL_ADDR)
; ..\component\CanIf\Implementation\CanIf.c	  2717            {
; ..\component\CanIf\Implementation\CanIf.c	  2718              errorId = CANIF_E_INVALID_DA;
; ..\component\CanIf\Implementation\CanIf.c	  2719              retVal = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2720            }
; ..\component\CanIf\Implementation\CanIf.c	  2721            (localPduPtr)->id = (Can_IdType)(((localPduPtr)->id & CANIF_J1939_INV_DA_MASK) | (((Can_IdType)da) << 8u)); /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  2722            if (((localPduPtr)->id & CANIF_J1939_PGN_MASK) == CANIF_J1939_ACKM_PGN)  /* Acknowledgement message, exchange address in data */
; ..\component\CanIf\Implementation\CanIf.c	  2723            {
; ..\component\CanIf\Implementation\CanIf.c	  2724              if (((localPduPtr)->sdu != NULL_PTR) && ((localPduPtr)->length > CANIF_J1939_ACKM_ACKADDR_POS))
; ..\component\CanIf\Implementation\CanIf.c	  2725              {
; ..\component\CanIf\Implementation\CanIf.c	  2726                ackAddr = CANIF_VAR_J1939TXADDR_LOOKUP(CanIf_Controller_Value, (localPduPtr)->sdu[CANIF_J1939_ACKM_ACKADDR_POS]);
; ..\component\CanIf\Implementation\CanIf.c	  2727                if (ackAddr == CANIF_J1939_NULL_ADDR)
; ..\component\CanIf\Implementation\CanIf.c	  2728                {
; ..\component\CanIf\Implementation\CanIf.c	  2729                  errorId = CANIF_E_INVALID_DA;
; ..\component\CanIf\Implementation\CanIf.c	  2730                  retVal = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2731                }
; ..\component\CanIf\Implementation\CanIf.c	  2732  
; ..\component\CanIf\Implementation\CanIf.c	  2733                (localPduPtr)->sdu[CANIF_J1939_ACKM_ACKADDR_POS] = ackAddr;  /* SBSW_CANIF_29 */
; ..\component\CanIf\Implementation\CanIf.c	  2734              }
; ..\component\CanIf\Implementation\CanIf.c	  2735              else
; ..\component\CanIf\Implementation\CanIf.c	  2736              {
; ..\component\CanIf\Implementation\CanIf.c	  2737                /* data buffer does not fit */
; ..\component\CanIf\Implementation\CanIf.c	  2738                errorId = CANIF_E_CONFIG;
; ..\component\CanIf\Implementation\CanIf.c	  2739                retVal  = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2740              }
; ..\component\CanIf\Implementation\CanIf.c	  2741            }
; ..\component\CanIf\Implementation\CanIf.c	  2742          }
; ..\component\CanIf\Implementation\CanIf.c	  2743  
; ..\component\CanIf\Implementation\CanIf.c	  2744          sa = (uint8)((localPduPtr)->id & CANIF_J1939_SA_MASK);
; ..\component\CanIf\Implementation\CanIf.c	  2745          sa_t = CANIF_VAR_J1939TXADDR_LOOKUP(CanIf_Controller_Value, sa);
; ..\component\CanIf\Implementation\CanIf.c	  2746  
; ..\component\CanIf\Implementation\CanIf.c	  2747          if ((sa == CANIF_J1939_BROADCAST_ADDR) || ((sa != CANIF_J1939_NULL_ADDR) && (sa_t == CANIF_J1939_NULL_ADDR)) || ((sa == CANIF_J1939_NULL_ADDR) && (((localPduPtr)->id & CANIF_J1939_PGN_MASK) != CANIF_J1939_RQST_PGN))) /* invalid SA or NULL SA for anything but Request */
; ..\component\CanIf\Implementation\CanIf.c	  2748          {
; ..\component\CanIf\Implementation\CanIf.c	  2749            errorId = CANIF_E_INVALID_SA;
; ..\component\CanIf\Implementation\CanIf.c	  2750            retVal = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2751          }
; ..\component\CanIf\Implementation\CanIf.c	  2752          (localPduPtr)->id = (Can_IdType)(((localPduPtr)->id & CANIF_J1939_INV_SA_MASK) | sa_t); /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  2753        }
; ..\component\CanIf\Implementation\CanIf.c	  2754      }
; ..\component\CanIf\Implementation\CanIf.c	  2755  #  if (CANIF_J1939_DYN_ADDR_SUPPORT == CANIF_J1939_DYN_ADDR_MIXED_CANID)
; ..\component\CanIf\Implementation\CanIf.c	  2756      else
; ..\component\CanIf\Implementation\CanIf.c	  2757      {
; ..\component\CanIf\Implementation\CanIf.c	  2758        /* #300 Standard CAN identifier: */
; ..\component\CanIf\Implementation\CanIf.c	  2759        if( CANIF_CFG_CTRLJ1939DYNADDRSUPPORT(CanIf_Controller_Value) != CANIF_J1939_DYN_ADDR_EXT_CANID ) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2760        {
; ..\component\CanIf\Implementation\CanIf.c	  2761          /* #310 Only source address is substituted */
; ..\component\CanIf\Implementation\CanIf.c	  2762          sa = (uint8)((localPduPtr)->id & CANIF_J1939_SA_MASK);
; ..\component\CanIf\Implementation\CanIf.c	  2763          sa = CANIF_VAR_J1939TXADDR_LOOKUP(CanIf_Controller_Value, sa);
; ..\component\CanIf\Implementation\CanIf.c	  2764          if (sa == CANIF_J1939_NULL_ADDR)
; ..\component\CanIf\Implementation\CanIf.c	  2765          {
; ..\component\CanIf\Implementation\CanIf.c	  2766            errorId = CANIF_E_INVALID_SA;
; ..\component\CanIf\Implementation\CanIf.c	  2767            retVal = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2768          }
; ..\component\CanIf\Implementation\CanIf.c	  2769          (localPduPtr)->id = (Can_IdType)(((localPduPtr)->id & CANIF_J1939_INV_SA_MASK) | sa); /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  2770        }
; ..\component\CanIf\Implementation\CanIf.c	  2771      }
; ..\component\CanIf\Implementation\CanIf.c	  2772  #  endif /* CANIF_J1939_DYN_ADDR_SUPPORT == CANIF_J1939_DYN_ADDR_MIXED_CANID */
; ..\component\CanIf\Implementation\CanIf.c	  2773    }
; ..\component\CanIf\Implementation\CanIf.c	  2774  
; ..\component\CanIf\Implementation\CanIf.c	  2775    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2776  #  if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2777    if (errorId != CANIF_E_NO_ERROR) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  2778    {
; ..\component\CanIf\Implementation\CanIf.c	  2779      CanIf_Det_ReportError(CANIF_TRANSMIT_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  2780    }
; ..\component\CanIf\Implementation\CanIf.c	  2781  #  else
; ..\component\CanIf\Implementation\CanIf.c	  2782    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  2783  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  2784  
; ..\component\CanIf\Implementation\CanIf.c	  2785    return retVal;
; ..\component\CanIf\Implementation\CanIf.c	  2786  } /* PRQA S 6030, 6080 */ /*  MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  2787  #endif /* CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED */
; ..\component\CanIf\Implementation\CanIf.c	  2788  
; ..\component\CanIf\Implementation\CanIf.c	  2789  
; ..\component\CanIf\Implementation\CanIf.c	  2790  #if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2791  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  2792   *  CanIf_TxBufferPrioByCanIdQueuePdu()
; ..\component\CanIf\Implementation\CanIf.c	  2793   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2794  /*
; ..\component\CanIf\Implementation\CanIf.c	  2795  |<DataModelStart>| CanIf_TxBufferPrioByCanIdQueuePdu
; ..\component\CanIf\Implementation\CanIf.c	  2796  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  2797  CanIfTxBuffer # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  2798  CanIfTxBuffer # from caller CanIf_TransmitSubHandleTxResBusy, CanIf_CancelTxConfirmation #
; ..\component\CanIf\Implementation\CanIf.c	  2799  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  2800  CanIfVStdLibCopy
; ..\component\CanIf\Implementation\CanIf.c	  2801  CanIfVStdLibCopy, CanIfFdSupport # used for CANIF_STATIC_FD_TXQUEUE #
; ..\component\CanIf\Implementation\CanIf.c	  2802  CanIfDynTx, CanIfJ1939, CanIfTxMetaDataSupport
; ..\component\CanIf\Implementation\CanIf.c	  2803  CanIfVStdLibCopy, CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  2804  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  2805  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  2806  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  2807  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  2808  */
; ..\component\CanIf\Implementation\CanIf.c	  2809   /*! Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  2810   *
; ..\component\CanIf\Implementation\CanIf.c	  2811   *
; ..\component\CanIf\Implementation\CanIf.c	  2812   *
; ..\component\CanIf\Implementation\CanIf.c	  2813   *
; ..\component\CanIf\Implementation\CanIf.c	  2814   **********************************************************************************************************************/  
; ..\component\CanIf\Implementation\CanIf.c	  2815  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_TxBufferPrioByCanIdQueuePdu(P2CONST(Can_PduType, AUTOMATIC, CANIF_CBK_DRV_VAR) PduInfoPtr )
; Function CanIf_TxBufferPrioByCanIdQueuePdu
.L243:
CanIf_TxBufferPrioByCanIdQueuePdu:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  2816  {
; ..\component\CanIf\Implementation\CanIf.c	  2817    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2818    CanIf_AnyIdxType queueindex = CANIF_CFG_TX_QUEUEINDEX(PduInfoPtr->swPduHandle);
	fcall	.cocofun_12
.L713:
	ld.bu	d15,[a4]8
	addsc.a	a2,a15,d15,#1
	ld.bu	d15,[a2]
.L1162:

; ..\component\CanIf\Implementation\CanIf.c	  2819  # if (CANIF_USES_VSTDLIB_COPY == STD_OFF)
; ..\component\CanIf\Implementation\CanIf.c	  2820    PduLengthType i;
; ..\component\CanIf\Implementation\CanIf.c	  2821  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2822  
; ..\component\CanIf\Implementation\CanIf.c	  2823    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2824  
; ..\component\CanIf\Implementation\CanIf.c	  2825    /* #100 Store the CAN identifier of the Tx-PDU */
; ..\component\CanIf\Implementation\CanIf.c	  2826  # if((CANIF_SETDYNAMICTXID_API == STD_ON) || (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED) || (CANIF_META_DATA_TX_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  2827    CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(queueindex, eQueueParams.eBaseParams.eCanId) = PduInfoPtr->id; /* SBSW_CANIF_6 */
; ..\component\CanIf\Implementation\CanIf.c	  2828  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2829    /* #110 Store the data length of the Tx-PDU */
; ..\component\CanIf\Implementation\CanIf.c	  2830    CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(queueindex, eQueueParams.eBaseParams.eSduLength) = PduInfoPtr->length; /* SBSW_CANIF_6 */
	movh.a	a2,#@his(CanIf_TxQueue)
	lea	a2,[a2]@los(CanIf_TxQueue)
	addsc.a	a2,a2,d15,#1
.L1163:
	ld.bu	d15,[a4]2
.L1164:
	st.b	[a2],d15
.L1165:

; ..\component\CanIf\Implementation\CanIf.c	  2831  
; ..\component\CanIf\Implementation\CanIf.c	  2832    /* #120 Store the payload of the Tx-PDU */
; ..\component\CanIf\Implementation\CanIf.c	  2833  # if (CANIF_USES_VSTDLIB_COPY == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2834  #  if (CANIF_STATIC_FD_TXQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2835    VStdMemCpyRamToRam(CANIF_ADDR_VAR_TXBUFFERPRIOBYCANID_STATFDQUEUE_QUEUEDATA(CANIF_CFG_TXBUFFERPRIOBYCANID_STATFDQUEUE_DATASTARTIDX(PduInfoPtr->swPduHandle)), PduInfoPtr->sdu, PduInfoPtr->length);  /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_CANIF_18 */
	ld.bu	d15,[a4]8
	addsc.a	a15,a15,d15,#1
	fcall	.cocofun_4
	ld.a	a5,[a4]4
	ld.bu	d4,[a4]2
	mov.aa	a4,a15
.L714:
	j	VStdLib_MemCpy
.L670:
	
__CanIf_TxBufferPrioByCanIdQueuePdu_function_end:
	.size	CanIf_TxBufferPrioByCanIdQueuePdu,__CanIf_TxBufferPrioByCanIdQueuePdu_function_end-CanIf_TxBufferPrioByCanIdQueuePdu
.L433:
	; End of function
	
	.sdecl	'.text.CanIf..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.CanIf..cocofun_4'
	.align	2
; Function .cocofun_4
.L245:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	ld.bu	d15,[a15]1
	movh.a	a15,#@his(CanIf_TxQueueIndex2DataStartStop)
	lea	a15,[a15]@los(CanIf_TxQueueIndex2DataStartStop)
	addsc.a	a15,a15,d15,#2
	ld.bu	d15,[a15]2
	movh.a	a15,#@his(CanIf_TxQueueData)
	lea	a15,[a15]@los(CanIf_TxQueueData)
	addsc.a	a15,a15,d15,#0
.L1186:
	fret
.L453:
	; End of function
	.sdecl	'.text.CanIf.CanIf_TransmitSubHandleTxResBusy',code,cluster('CanIf_TransmitSubHandleTxResBusy')
	.sect	'.text.CanIf.CanIf_TransmitSubHandleTxResBusy'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  2836  #  else
; ..\component\CanIf\Implementation\CanIf.c	  2837    VStdMemCpyRamToRam(CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(queueindex, eQueueParams.eSdu), PduInfoPtr->sdu, PduInfoPtr->length); /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_CANIF_7 */
; ..\component\CanIf\Implementation\CanIf.c	  2838  #  endif /* (CANIF_STATIC_FD_TXQUEUE == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  2839  # else
; ..\component\CanIf\Implementation\CanIf.c	  2840    for (i = 0; i < PduInfoPtr->length; i++)
; ..\component\CanIf\Implementation\CanIf.c	  2841    {
; ..\component\CanIf\Implementation\CanIf.c	  2842  #  if (CANIF_STATIC_FD_TXQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2843      CanIf_SetTxQueueData((CANIF_CFG_TXBUFFERPRIOBYCANID_STATFDQUEUE_DATASTARTIDX(PduInfoPtr->swPduHandle))+i, PduInfoPtr->sdu[i]); /* SBSW_CANIF_40 */
; ..\component\CanIf\Implementation\CanIf.c	  2844  #  else
; ..\component\CanIf\Implementation\CanIf.c	  2845      CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(queueindex, eQueueParams.eSdu[i]) = PduInfoPtr->sdu[i]; /* SBSW_CANIF_6 */
; ..\component\CanIf\Implementation\CanIf.c	  2846  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  2847    }
; ..\component\CanIf\Implementation\CanIf.c	  2848  # endif /* (CANIF_USES_VSTDLIB_COPY == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  2849  }
; ..\component\CanIf\Implementation\CanIf.c	  2850  #endif
; ..\component\CanIf\Implementation\CanIf.c	  2851  
; ..\component\CanIf\Implementation\CanIf.c	  2852  
; ..\component\CanIf\Implementation\CanIf.c	  2853  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  2854  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  2855   *  CanIf_TransmitSubHandleTxResBusy()
; ..\component\CanIf\Implementation\CanIf.c	  2856   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  2857  /*
; ..\component\CanIf\Implementation\CanIf.c	  2858  |<DataModelStart>| CanIf_TransmitSubHandleTxResBusy
; ..\component\CanIf\Implementation\CanIf.c	  2859  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  2860  CanIfTxBuffer # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  2861  CanIfTxBuffer # from caller CanIf_TransmitSubWrite #
; ..\component\CanIf\Implementation\CanIf.c	  2862  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  2863  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  2864  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  2865  CanIfTxBuffer, CanIfVStdLibCopy
; ..\component\CanIf\Implementation\CanIf.c	  2866  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  2867  CanIfTxBuffer, CanIfFdSupport # used for CANIF_STATIC_FD_TXQUEUE #
; ..\component\CanIf\Implementation\CanIf.c	  2868  CanIfTxBuffer, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  2869  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  2870  CanIfTxBuffer, CanIfDynTx, CanIfJ1939, CanIfTxMetaDataSupport
; ..\component\CanIf\Implementation\CanIf.c	  2871  CanIfTxBuffer, CanIfDevErrorDetect 
; ..\component\CanIf\Implementation\CanIf.c	  2872  CanIfTxBuffer, CanIfVStdLibCopy
; ..\component\CanIf\Implementation\CanIf.c	  2873  CanIfTxBuffer, CanIfTransmitCancellationAPI
; ..\component\CanIf\Implementation\CanIf.c	  2874  CanIfTxBuffer, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  2875  CanIfDevErrorDetect 
; ..\component\CanIf\Implementation\CanIf.c	  2876  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  2877  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  2878  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  2879  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  2880  */
; ..\component\CanIf\Implementation\CanIf.c	  2881   /*!
; ..\component\CanIf\Implementation\CanIf.c	  2882   *
; ..\component\CanIf\Implementation\CanIf.c	  2883   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  2884   *
; ..\component\CanIf\Implementation\CanIf.c	  2885   *
; ..\component\CanIf\Implementation\CanIf.c	  2886   *
; ..\component\CanIf\Implementation\CanIf.c	  2887   *
; ..\component\CanIf\Implementation\CanIf.c	  2888   *
; ..\component\CanIf\Implementation\CanIf.c	  2889   *
; ..\component\CanIf\Implementation\CanIf.c	  2890   *
; ..\component\CanIf\Implementation\CanIf.c	  2891   *
; ..\component\CanIf\Implementation\CanIf.c	  2892   *
; ..\component\CanIf\Implementation\CanIf.c	  2893   *
; ..\component\CanIf\Implementation\CanIf.c	  2894   *
; ..\component\CanIf\Implementation\CanIf.c	  2895   *
; ..\component\CanIf\Implementation\CanIf.c	  2896   *
; ..\component\CanIf\Implementation\CanIf.c	  2897   *
; ..\component\CanIf\Implementation\CanIf.c	  2898   *
; ..\component\CanIf\Implementation\CanIf.c	  2899   *
; ..\component\CanIf\Implementation\CanIf.c	  2900   *
; ..\component\CanIf\Implementation\CanIf.c	  2901   *
; ..\component\CanIf\Implementation\CanIf.c	  2902   *
; ..\component\CanIf\Implementation\CanIf.c	  2903   *
; ..\component\CanIf\Implementation\CanIf.c	  2904   *
; ..\component\CanIf\Implementation\CanIf.c	  2905   *
; ..\component\CanIf\Implementation\CanIf.c	  2906   *
; ..\component\CanIf\Implementation\CanIf.c	  2907   */
; ..\component\CanIf\Implementation\CanIf.c	  2908  CANIF_LOCAL_INLINE FUNC (Std_ReturnType, CANIF_CODE) CanIf_TransmitSubHandleTxResBusy(P2CONST(Can_PduType, AUTOMATIC, AUTOMATIC) localPduPtr)
; Function CanIf_TransmitSubHandleTxResBusy
.L247:
CanIf_TransmitSubHandleTxResBusy:	.type	func
	mov.aa	a15,a4
.L719:

; ..\component\CanIf\Implementation\CanIf.c	  2909  {
; ..\component\CanIf\Implementation\CanIf.c	  2910    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  2911    Std_ReturnType retval; 
; ..\component\CanIf\Implementation\CanIf.c	  2912    CanIf_AnyIdxType hth;
; ..\component\CanIf\Implementation\CanIf.c	  2913    uint8 errorId;
; ..\component\CanIf\Implementation\CanIf.c	  2914  
; ..\component\CanIf\Implementation\CanIf.c	  2915  # if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2916    CanIf_TxBufferSizeType writeIdx;
; ..\component\CanIf\Implementation\CanIf.c	  2917    CanIf_AnyIdxType queueDataStartIdx;
; ..\component\CanIf\Implementation\CanIf.c	  2918    CanIf_AnyIdxType txBufferCfgIdx;
; ..\component\CanIf\Implementation\CanIf.c	  2919    CanIf_AnyIdxType txBufferFifoBaseIdx;
; ..\component\CanIf\Implementation\CanIf.c	  2920    CanIf_AnyIdxType txFifoQueueBaseStartIdx;
; ..\component\CanIf\Implementation\CanIf.c	  2921  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2922    errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  2923    retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2924    hth = CANIF_CFG_TX_HTH(localPduPtr->swPduHandle);
	ld.bu	d0,[a15]8
	movh.a	a2,#@his(CanIf_TxPduConfig)
	lea	a2,[a2]@los(CanIf_TxPduConfig)
	addsc.a	a2,a2,d0,#3
.L1044:
	mov	d8,#0
.L718:
	ld.bu	d15,[a2]5
.L716:

; ..\component\CanIf\Implementation\CanIf.c	  2925    /* #100 Is TxPDU a BasicCAN-PDU and has it a buffer? */
; ..\component\CanIf\Implementation\CanIf.c	  2926    if (CANIF_CFG_MAILBOX_HASTXBUFFER(hth)) /* COV_CANIF_NO_TX_BUFFER */
	movh.a	a2,#@his(CanIf_MailBoxConfig)
	mul	d15,d15,#6
	lea	a2,[a2]@los(CanIf_MailBoxConfig)
.L717:
	mov	d9,#1
.L720:
	addsc.a	a2,a2,d15,#0
	mov	d15,#255
	ld.bu	d1,[a2]3
.L1045:
	jeq	d15,d1,.L56
.L1046:

; ..\component\CanIf\Implementation\CanIf.c	  2927    {
; ..\component\CanIf\Implementation\CanIf.c	  2928      /* \trace SPEC-1233, SPEC-1232 */
; ..\component\CanIf\Implementation\CanIf.c	  2929  
; ..\component\CanIf\Implementation\CanIf.c	  2930  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2931      if ((localPduPtr->sdu == NULL_PTR) && (localPduPtr->length != 0u))
	ld.w	d15,[a15]4
.L1047:
	jne	d15,#0,.L57
.L1048:
	ld.bu	d15,[a15]2
.L1049:
	jeq	d15,#0,.L58
.L1050:

; ..\component\CanIf\Implementation\CanIf.c	  2932      {
; ..\component\CanIf\Implementation\CanIf.c	  2933        errorId = CANIF_E_PARAM_POINTER;
	mov	d8,#20
	j	.L59
.L58:
.L57:

; ..\component\CanIf\Implementation\CanIf.c	  2934      }
; ..\component\CanIf\Implementation\CanIf.c	  2935      else
; ..\component\CanIf\Implementation\CanIf.c	  2936  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2937      {
; ..\component\CanIf\Implementation\CanIf.c	  2938  # if ((CANIF_USES_VSTDLIB_COPY != STD_ON) && (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  2939        PduLengthType i;
; ..\component\CanIf\Implementation\CanIf.c	  2940  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2941        switch (CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE(hth))
	ld.bu	d15,[a2]4
.L1051:
	jne	d15,#1,.L60
.L1052:

; ..\component\CanIf\Implementation\CanIf.c	  2942        {
; ..\component\CanIf\Implementation\CanIf.c	  2943  # if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2944          /* #200 Do PrioByCan queue handling */
; ..\component\CanIf\Implementation\CanIf.c	  2945          case CANIF_TXBUFFER_HANDLINGTYPE_PRIOBYCANID:
; ..\component\CanIf\Implementation\CanIf.c	  2946            /* #210 PDU length fits */
; ..\component\CanIf\Implementation\CanIf.c	  2947  #  if (CANIF_STATIC_FD_TXQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2948            if(localPduPtr->length <= CANIF_CFG_TXBUFFERPRIOBYCANID_STATFDQUEUE_MAXDATALENGTH(localPduPtr->swPduHandle))
	movh.a	a2,#@his(CanIf_TxPduQueueIndex)
	lea	a2,[a2]@los(CanIf_TxPduQueueIndex)
	addsc.a	a2,a2,d0,#1
.L1053:
	ld.bu	d1,[a15]2
.L1054:
	ld.bu	d15,[a2]1
	movh.a	a2,#@his(CanIf_TxQueueIndex2DataStartStop)
	lea	a2,[a2]@los(CanIf_TxQueueIndex2DataStartStop)
	addsc.a	a2,a2,d15,#2
	ld.bu	d15,[a2]1
.L1055:
	jlt.u	d15,d1,.L61
.L1056:

; ..\component\CanIf\Implementation\CanIf.c	  2949  #  else
; ..\component\CanIf\Implementation\CanIf.c	  2950            if(localPduPtr->length <= CANIF_STATIC_BUFFER_SIZE)
; ..\component\CanIf\Implementation\CanIf.c	  2951  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  2952            {
; ..\component\CanIf\Implementation\CanIf.c	  2953              /* #220 Queue information */
; ..\component\CanIf\Implementation\CanIf.c	  2954              CanIf_TxBufferPrioByCanIdQueuePdu(localPduPtr); /* SBSW_CANIF_5 */
	call	CanIf_TxBufferPrioByCanIdQueuePdu
.L715:

; ..\component\CanIf\Implementation\CanIf.c	  2955   
; ..\component\CanIf\Implementation\CanIf.c	  2956              /* #230 Set queue flag for current PDU and return E_OK */
; ..\component\CanIf\Implementation\CanIf.c	  2957              (void)CanIf_SetPrioByCanIdTxPduAsQueued(localPduPtr->swPduHandle);
	ld.bu	d4,[a15]8
	call	CanIf_SetPrioByCanIdTxPduAsQueued
.L1057:

; ..\component\CanIf\Implementation\CanIf.c	  2958              retval = E_OK;
	mov	d9,#0
	j	.L62
.L61:

; ..\component\CanIf\Implementation\CanIf.c	  2959            }
; ..\component\CanIf\Implementation\CanIf.c	  2960            else
; ..\component\CanIf\Implementation\CanIf.c	  2961            /* #240 PDU length does not fit */
; ..\component\CanIf\Implementation\CanIf.c	  2962            {
; ..\component\CanIf\Implementation\CanIf.c	  2963  #  if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2964              errorId = CANIF_E_PARAM_DLC;
	mov	d8,#11
.L56:
.L62:

; ..\component\CanIf\Implementation\CanIf.c	  2965  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  2966              retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  2967            }
; ..\component\CanIf\Implementation\CanIf.c	  2968            break;
; ..\component\CanIf\Implementation\CanIf.c	  2969  # endif
; ..\component\CanIf\Implementation\CanIf.c	  2970  # if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2971          /* #300 Do FIFO queue handling */
; ..\component\CanIf\Implementation\CanIf.c	  2972          case CANIF_TXBUFFER_HANDLINGTYPE_FIFO:
; ..\component\CanIf\Implementation\CanIf.c	  2973            txBufferCfgIdx = CANIF_CFG_MAILBOX_TXBUFFERIDX(hth);
; ..\component\CanIf\Implementation\CanIf.c	  2974            /* #310 Buffer element size big enough to record the data? */
; ..\component\CanIf\Implementation\CanIf.c	  2975            if(localPduPtr->length <= CANIF_CFG_TXBUFFERFIFO_SIZEOFONEPAYLOADEL(txBufferCfgIdx))
; ..\component\CanIf\Implementation\CanIf.c	  2976            {
; ..\component\CanIf\Implementation\CanIf.c	  2977              txBufferFifoBaseIdx = CANIF_CFG_TXBUFFERFIFO_BUFFERBASEIDX((txBufferCfgIdx));
; ..\component\CanIf\Implementation\CanIf.c	  2978              /* #400 One element of the FIFO free?*/
; ..\component\CanIf\Implementation\CanIf.c	  2979              if (CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eQueueCounter) < CANIF_CFG_TXBUFFERFIFO_QUEUESIZE(txBufferCfgIdx))
; ..\component\CanIf\Implementation\CanIf.c	  2980              {
; ..\component\CanIf\Implementation\CanIf.c	  2981                /* #410 Evaluate FIFO-WriteIdx */
; ..\component\CanIf\Implementation\CanIf.c	  2982                txFifoQueueBaseStartIdx = CANIF_CFG_TXBUFFERFIFO_QUEUEBASESTARTIDX(txBufferCfgIdx);
; ..\component\CanIf\Implementation\CanIf.c	  2983                writeIdx = CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eWriteIdx);
; ..\component\CanIf\Implementation\CanIf.c	  2984                /* #420 Store length of Tx-PDU at FIFO-WriteIdx */
; ..\component\CanIf\Implementation\CanIf.c	  2985                CANIF_VAR_TXBUFFERFIFO_QUEUEBASE((writeIdx + txFifoQueueBaseStartIdx), eBaseParams.eSduLength) = localPduPtr->length; /* SBSW_CANIF_34 */
; ..\component\CanIf\Implementation\CanIf.c	  2986  #  if ((CANIF_SETDYNAMICTXID_API == STD_ON) || (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED) || (CANIF_META_DATA_TX_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  2987                /* #430 Store CanId of Tx-PDU at FIFO-WriteIdx */
; ..\component\CanIf\Implementation\CanIf.c	  2988                CANIF_VAR_TXBUFFERFIFO_QUEUEBASE((writeIdx + txFifoQueueBaseStartIdx), eBaseParams.eCanId) = localPduPtr->id;         /* SBSW_CANIF_34 */
; ..\component\CanIf\Implementation\CanIf.c	  2989  #  endif  
; ..\component\CanIf\Implementation\CanIf.c	  2990                /* #440 Store the PDU ID of the Tx-PDU at FIFO-WriteIdx */
; ..\component\CanIf\Implementation\CanIf.c	  2991                CANIF_VAR_TXBUFFERFIFO_QUEUEBASE((writeIdx + txFifoQueueBaseStartIdx), eTxPduId) = localPduPtr->swPduHandle;          /* SBSW_CANIF_34 */
; ..\component\CanIf\Implementation\CanIf.c	  2992                /* #450 Evaluate the startindex into the CanIf_TxFifoQueueData */
; ..\component\CanIf\Implementation\CanIf.c	  2993                queueDataStartIdx = ((uint32_least)writeIdx * (uint32_least)CANIF_CFG_TXBUFFERFIFO_SIZEOFONEPAYLOADEL(txBufferCfgIdx)) + CANIF_CFG_TXBUFFFERFIFO_QUEUEDATASTARTIDX(txBufferCfgIdx);
; ..\component\CanIf\Implementation\CanIf.c	  2994  #  if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  2995                /* #460 Check if the actual writeindex + length does not write out of bounds */
; ..\component\CanIf\Implementation\CanIf.c	  2996                if ((queueDataStartIdx + localPduPtr->length) >  CANIF_CFG_SIZEOF_FIFO_BUFFER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  2997                {
; ..\component\CanIf\Implementation\CanIf.c	  2998                  errorId = CANIF_E_FATAL;
; ..\component\CanIf\Implementation\CanIf.c	  2999                  retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  3000                }
; ..\component\CanIf\Implementation\CanIf.c	  3001                else
; ..\component\CanIf\Implementation\CanIf.c	  3002  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  3003                {
; ..\component\CanIf\Implementation\CanIf.c	  3004                  /* #470 Store data of Tx-PDU at FIFO-WriteIdx */
; ..\component\CanIf\Implementation\CanIf.c	  3005  #  if (CANIF_USES_VSTDLIB_COPY == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3006                  VStdMemCpyRamToRam(CANIF_ADDR_VAR_TXBUFFERFIFO_QUEUEDATA(queueDataStartIdx), localPduPtr->sdu, localPduPtr->length); /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_CANIF_32 */
; ..\component\CanIf\Implementation\CanIf.c	  3007  #  else
; ..\component\CanIf\Implementation\CanIf.c	  3008                  for (i = 0u; i < localPduPtr->length; i++)
; ..\component\CanIf\Implementation\CanIf.c	  3009                  {
; ..\component\CanIf\Implementation\CanIf.c	  3010                    CanIf_SetTxFifoQueueData((queueDataStartIdx+i), localPduPtr->sdu[i]);                                              /* SBSW_CANIF_32 */
; ..\component\CanIf\Implementation\CanIf.c	  3011                  }
; ..\component\CanIf\Implementation\CanIf.c	  3012  #  endif         
; ..\component\CanIf\Implementation\CanIf.c	  3013  #  if CANIF_CANCEL_SUPPORT_API == STD_ON    
; ..\component\CanIf\Implementation\CanIf.c	  3014                  /* #480 Set that the buffered Tx-PDU is valid at FIFO-WriteIdx */
; ..\component\CanIf\Implementation\CanIf.c	  3015                  CANIF_VAR_TXBUFFERFIFO_QUEUEBASE((writeIdx + txFifoQueueBaseStartIdx), eQueued) = 1;   /* SBSW_CANIF_34 */
; ..\component\CanIf\Implementation\CanIf.c	  3016                  /* #490 Set the reference to CanIf_TxQueueIndex2FifoEl */
; ..\component\CanIf\Implementation\CanIf.c	  3017                  CANIF_VAR_SET_TXBUFFERFIFO_QUEUEIDX2FIFOEL(CANIF_CFG_TX_QUEUEINDEX(localPduPtr->swPduHandle), writeIdx );  /* SBSW_CANIF_36 */
; ..\component\CanIf\Implementation\CanIf.c	  3018  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  3019                  /* #500 Increment the FIFO-counter */
; ..\component\CanIf\Implementation\CanIf.c	  3020                  (CANIF_VAR_TXBUFFERFIFO_BUFFERBASE( txBufferFifoBaseIdx, eQueueCounter))++; /* SBSW_CANIF_37 */
; ..\component\CanIf\Implementation\CanIf.c	  3021                  
; ..\component\CanIf\Implementation\CanIf.c	  3022                  /* #510 Increment the FIFO-WriteIdx. */
; ..\component\CanIf\Implementation\CanIf.c	  3023                  (CANIF_VAR_TXBUFFERFIFO_BUFFERBASE( txBufferFifoBaseIdx, eWriteIdx))++; /* SBSW_CANIF_37 */
; ..\component\CanIf\Implementation\CanIf.c	  3024                  if(CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eWriteIdx) == (CANIF_CFG_TXBUFFERFIFO_QUEUESIZE(txBufferCfgIdx)))
; ..\component\CanIf\Implementation\CanIf.c	  3025                  {
; ..\component\CanIf\Implementation\CanIf.c	  3026                    /* If WriteIdx equals the QueueSize reset it to 0. */
; ..\component\CanIf\Implementation\CanIf.c	  3027                    CANIF_VAR_TXBUFFERFIFO_BUFFERBASE( txBufferFifoBaseIdx, eWriteIdx) = 0; /* SBSW_CANIF_37 */
; ..\component\CanIf\Implementation\CanIf.c	  3028                  }
; ..\component\CanIf\Implementation\CanIf.c	  3029                  retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  3030                }
; ..\component\CanIf\Implementation\CanIf.c	  3031              }
; ..\component\CanIf\Implementation\CanIf.c	  3032  #  if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3033              else
; ..\component\CanIf\Implementation\CanIf.c	  3034              {
; ..\component\CanIf\Implementation\CanIf.c	  3035                errorId = CANIF_E_FULL_TX_BUFFER_FIFO;
; ..\component\CanIf\Implementation\CanIf.c	  3036              }
; ..\component\CanIf\Implementation\CanIf.c	  3037  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  3038            }
; ..\component\CanIf\Implementation\CanIf.c	  3039            else
; ..\component\CanIf\Implementation\CanIf.c	  3040            {
; ..\component\CanIf\Implementation\CanIf.c	  3041            /* #600 Do not buffer, return with E_NOT_OK */
; ..\component\CanIf\Implementation\CanIf.c	  3042  #  if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3043              errorId = CANIF_E_PARAM_DLC;
; ..\component\CanIf\Implementation\CanIf.c	  3044  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  3045              retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  3046            }
; ..\component\CanIf\Implementation\CanIf.c	  3047            break;
; ..\component\CanIf\Implementation\CanIf.c	  3048  # endif            
; ..\component\CanIf\Implementation\CanIf.c	  3049        default: /* COV_CANIF_GENDATA_FAILURE */
.L60:
.L59:

; ..\component\CanIf\Implementation\CanIf.c	  3050          break; 
; ..\component\CanIf\Implementation\CanIf.c	  3051        }
; ..\component\CanIf\Implementation\CanIf.c	  3052      }/* Development error check SduDataPtr == NULL_PTR */
; ..\component\CanIf\Implementation\CanIf.c	  3053    } 
; ..\component\CanIf\Implementation\CanIf.c	  3054    else
; ..\component\CanIf\Implementation\CanIf.c	  3055    {
; ..\component\CanIf\Implementation\CanIf.c	  3056      /* #110 PduId has no Tx Buffer: Reject the Tx-request */
; ..\component\CanIf\Implementation\CanIf.c	  3057      retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  3058    }
; ..\component\CanIf\Implementation\CanIf.c	  3059    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3060  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3061    if (errorId != CANIF_E_NO_ERROR)
	jeq	d8,#0,.L63
.L1058:

; ..\component\CanIf\Implementation\CanIf.c	  3062    {
; ..\component\CanIf\Implementation\CanIf.c	  3063      CanIf_Det_ReportError(CANIF_TRANSMIT_API, errorId);
	fcall	.cocofun_2
	mov	d6,#5
	mov	d7,d8
	call	Det_ReportError
.L63:

; ..\component\CanIf\Implementation\CanIf.c	  3064    }
; ..\component\CanIf\Implementation\CanIf.c	  3065  # else
; ..\component\CanIf\Implementation\CanIf.c	  3066    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  3067  # endif
; ..\component\CanIf\Implementation\CanIf.c	  3068    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  3069  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
	mov	d2,d9
	ret
.L636:
	
__CanIf_TransmitSubHandleTxResBusy_function_end:
	.size	CanIf_TransmitSubHandleTxResBusy,__CanIf_TransmitSubHandleTxResBusy_function_end-CanIf_TransmitSubHandleTxResBusy
.L393:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_TransmitSubWrite',code,cluster('CanIf_TransmitSubWrite')
	.sect	'.text.CanIf.CanIf_TransmitSubWrite'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  3070  #endif /* ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)) */
; ..\component\CanIf\Implementation\CanIf.c	  3071  
; ..\component\CanIf\Implementation\CanIf.c	  3072  
; ..\component\CanIf\Implementation\CanIf.c	  3073  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  3074   *  CanIf_TransmitSubWrite()
; ..\component\CanIf\Implementation\CanIf.c	  3075   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  3076  /*
; ..\component\CanIf\Implementation\CanIf.c	  3077  |<DataModelStart>| CanIf_TransmitSubWrite
; ..\component\CanIf\Implementation\CanIf.c	  3078  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  3079  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  3080  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  3081  CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  3082  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  3083  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  3084  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  3085  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  3086  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  3087  */
; ..\component\CanIf\Implementation\CanIf.c	  3088   /*!
; ..\component\CanIf\Implementation\CanIf.c	  3089   *
; ..\component\CanIf\Implementation\CanIf.c	  3090   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  3091   *
; ..\component\CanIf\Implementation\CanIf.c	  3092   *
; ..\component\CanIf\Implementation\CanIf.c	  3093   *
; ..\component\CanIf\Implementation\CanIf.c	  3094   *
; ..\component\CanIf\Implementation\CanIf.c	  3095   *
; ..\component\CanIf\Implementation\CanIf.c	  3096   *
; ..\component\CanIf\Implementation\CanIf.c	  3097   *
; ..\component\CanIf\Implementation\CanIf.c	  3098   */
; ..\component\CanIf\Implementation\CanIf.c	  3099  CANIF_LOCAL_INLINE FUNC (Std_ReturnType, CANIF_CODE) CanIf_TransmitSubWrite(P2CONST(Can_PduType, AUTOMATIC, AUTOMATIC) localPduPtr)
; Function CanIf_TransmitSubWrite
.L249:
CanIf_TransmitSubWrite:	.type	func
	mov.aa	a15,a4
.L722:

; ..\component\CanIf\Implementation\CanIf.c	  3100  {
; ..\component\CanIf\Implementation\CanIf.c	  3101    Std_ReturnType  retval;
; ..\component\CanIf\Implementation\CanIf.c	  3102    Can_ReturnType txResult;
; ..\component\CanIf\Implementation\CanIf.c	  3103  #if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3104    boolean doCanWrite;
; ..\component\CanIf\Implementation\CanIf.c	  3105  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3106  #if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3107    txResult = CAN_BUSY;
; ..\component\CanIf\Implementation\CanIf.c	  3108    doCanWrite = TRUE;
; ..\component\CanIf\Implementation\CanIf.c	  3109    if( CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE(CANIF_CFG_TX_HTH(localPduPtr->swPduHandle)) == CANIF_TXBUFFER_HANDLINGTYPE_FIFO)
; ..\component\CanIf\Implementation\CanIf.c	  3110    {
; ..\component\CanIf\Implementation\CanIf.c	  3111      /* #100 If Tx-PDU is mapped to Tx-buffer of handling type FIFO it must only be transmitted directly if FIFO is empty */
; ..\component\CanIf\Implementation\CanIf.c	  3112      doCanWrite = CanIf_TransmitSubCheckFiFoQueueEmpty(localPduPtr->swPduHandle);
; ..\component\CanIf\Implementation\CanIf.c	  3113    }
; ..\component\CanIf\Implementation\CanIf.c	  3114    if (doCanWrite == TRUE)
; ..\component\CanIf\Implementation\CanIf.c	  3115  #endif  
; ..\component\CanIf\Implementation\CanIf.c	  3116    {
; ..\component\CanIf\Implementation\CanIf.c	  3117      /* #200 Pass the request to the CAN driver */
; ..\component\CanIf\Implementation\CanIf.c	  3118  #if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3119      {
; ..\component\CanIf\Implementation\CanIf.c	  3120        CanIf_Can_WriteFctType canWriteFct;
; ..\component\CanIf\Implementation\CanIf.c	  3121        Can_HwHandleType canDrvHth;
; ..\component\CanIf\Implementation\CanIf.c	  3122                     
; ..\component\CanIf\Implementation\CanIf.c	  3123        canWriteFct = CanIf_GetCan_WriteFctMap(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CANIF_CFG_TX_CONTROLLER(localPduPtr->swPduHandle)));
; ..\component\CanIf\Implementation\CanIf.c	  3124        canDrvHth = (Can_HwHandleType)(CANIF_CFG_TX_HTH(localPduPtr->swPduHandle) - CANIF_CFG_MULTIPLECANDRV_HXHOFFSET(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CANIF_CFG_TX_CONTROLLER(localPduPtr->swPduHandle))));
; ..\component\CanIf\Implementation\CanIf.c	  3125                      
; ..\component\CanIf\Implementation\CanIf.c	  3126        txResult = canWriteFct(canDrvHth, (P2CONST(Can_PduType, AUTOMATIC, CANIF_VAR_STACK))localPduPtr); /* SBSW_CANIF_46 */
; ..\component\CanIf\Implementation\CanIf.c	  3127      }
; ..\component\CanIf\Implementation\CanIf.c	  3128  #else
; ..\component\CanIf\Implementation\CanIf.c	  3129      txResult = Can_Write((CanIf_HwHandleType)CANIF_CFG_TX_HTH(localPduPtr->swPduHandle), (P2CONST(Can_PduType, AUTOMATIC, CANIF_VAR_STACK))localPduPtr); /* SBSW_CANIF_5 */
	ld.bu	d15,[a15]8
	movh.a	a12,#@his(CanIf_TxPduConfig)
	lea	a12,[a12]@los(CanIf_TxPduConfig)
	addsc.a	a2,a12,d15,#3
	ld.bu	d4,[a2]5
.L1107:
	call	Can_Write
.L721:

; ..\component\CanIf\Implementation\CanIf.c	  3130  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3131    }
; ..\component\CanIf\Implementation\CanIf.c	  3132    if (txResult == CAN_BUSY)
	jne	d2,#2,.L65
.L1108:

; ..\component\CanIf\Implementation\CanIf.c	  3133    {
; ..\component\CanIf\Implementation\CanIf.c	  3134  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  3135      /* #300 CAN driver is busy, do the queueing according to the selected queueing method */
; ..\component\CanIf\Implementation\CanIf.c	  3136      /* \trace SPEC-3668 */
; ..\component\CanIf\Implementation\CanIf.c	  3137      retval = CanIf_TransmitSubHandleTxResBusy(localPduPtr); /* SBSW_CANIF_5 */
	mov.aa	a4,a15
.L724:
	j	CanIf_TransmitSubHandleTxResBusy
.L65:

; ..\component\CanIf\Implementation\CanIf.c	  3138  #else
; ..\component\CanIf\Implementation\CanIf.c	  3139      retval = E_NOT_OK;  /* ESCAN00092426 */
; ..\component\CanIf\Implementation\CanIf.c	  3140  #endif /* ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)) */
; ..\component\CanIf\Implementation\CanIf.c	  3141    }
; ..\component\CanIf\Implementation\CanIf.c	  3142    else if (txResult == CAN_NOT_OK)
	jne	d2,#0,.L67
.L1109:

; ..\component\CanIf\Implementation\CanIf.c	  3143    {
; ..\component\CanIf\Implementation\CanIf.c	  3144      /* #400 CAN driver reports FAILED: Reject the Tx-request */
; ..\component\CanIf\Implementation\CanIf.c	  3145      retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  3146    }
; ..\component\CanIf\Implementation\CanIf.c	  3147    else
; ..\component\CanIf\Implementation\CanIf.c	  3148    {
; ..\component\CanIf\Implementation\CanIf.c	  3149      /* \trace SPEC-1903 */
; ..\component\CanIf\Implementation\CanIf.c	  3150     /* #500 CAN driver reports SUCCEEDED: */
; ..\component\CanIf\Implementation\CanIf.c	  3151      /* ESCAN00066390 - start */
; ..\component\CanIf\Implementation\CanIf.c	  3152  #if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3153      /* #510 If a Tx-PDU mapped to a PRIO_BY_CANID-Tx-buffer was transmitted do clear the corresponding queue flag */
; ..\component\CanIf\Implementation\CanIf.c	  3154      if(CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE(CANIF_CFG_TX_HTH(localPduPtr->swPduHandle)) == CANIF_TXBUFFER_HANDLINGTYPE_PRIOBYCANID) /* COV_CANIF_NO_TX_BUFFER */
; ..\component\CanIf\Implementation\CanIf.c	  3155      {
; ..\component\CanIf\Implementation\CanIf.c	  3156        (void)CanIf_ClearPrioByCanIdTxPduAsQueued(localPduPtr->swPduHandle);
; ..\component\CanIf\Implementation\CanIf.c	  3157      }
; ..\component\CanIf\Implementation\CanIf.c	  3158  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3159      /* ESCAN00066390 - end */
; ..\component\CanIf\Implementation\CanIf.c	  3160      retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  3161    } /* txResult == CAN_OK */
; ..\component\CanIf\Implementation\CanIf.c	  3162    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  3163  }
	mov	d2,#1
	ret
.L67:
	ld.bu	d4,[a15]8
	addsc.a	a15,a12,d4,#3
	fcall	.cocofun_10
.L723:
	ld.bu	d15,[a15]4
.L1110:
	jne	d15,#1,.L69
.L1111:
	call	CanIf_ClearPrioByCanIdTxPduAsQueued
.L69:
	mov	d2,#0
	ret
.L650:
	
__CanIf_TransmitSubWrite_function_end:
	.size	CanIf_TransmitSubWrite,__CanIf_TransmitSubWrite_function_end-CanIf_TransmitSubWrite
.L413:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_Transmit',code,cluster('CanIf_Transmit')
	.sect	'.text.CanIf.CanIf_Transmit'
	.align	2
	
	.global	CanIf_Transmit

; ..\component\CanIf\Implementation\CanIf.c	  3164  
; ..\component\CanIf\Implementation\CanIf.c	  3165  
; ..\component\CanIf\Implementation\CanIf.c	  3166  /***********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  3167   *  CanIf_Transmit()
; ..\component\CanIf\Implementation\CanIf.c	  3168   **********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  3169  /*
; ..\component\CanIf\Implementation\CanIf.c	  3170  |<DataModelStart>| CanIf_Transmit
; ..\component\CanIf\Implementation\CanIf.c	  3171  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  3172  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  3173  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3174  CanIfDataChecksum
; ..\component\CanIf\Implementation\CanIf.c	  3175  CanIfDynTx
; ..\component\CanIf\Implementation\CanIf.c	  3176  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  3177  CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  3178  CanIfVariant, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  3179  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  3180  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3181  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  3182  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3183  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3184  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3185  CanIfPnEnable, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3186  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3187  CanIfDynTx
; ..\component\CanIf\Implementation\CanIf.c	  3188  CanIfTxMetaDataSupport
; ..\component\CanIf\Implementation\CanIf.c	  3189  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3190  CanIfJ1939
; ..\component\CanIf\Implementation\CanIf.c	  3191  CanIfDataChecksum
; ..\component\CanIf\Implementation\CanIf.c	  3192  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3193  CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  3194  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  3195  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  3196  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  3197  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  3198  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  3199  */
; ..\component\CanIf\Implementation\CanIf.c	  3200   /*!
; ..\component\CanIf\Implementation\CanIf.c	  3201   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  3202   *
; ..\component\CanIf\Implementation\CanIf.c	  3203   *
; ..\component\CanIf\Implementation\CanIf.c	  3204   *
; ..\component\CanIf\Implementation\CanIf.c	  3205   *
; ..\component\CanIf\Implementation\CanIf.c	  3206   *
; ..\component\CanIf\Implementation\CanIf.c	  3207   *
; ..\component\CanIf\Implementation\CanIf.c	  3208   *
; ..\component\CanIf\Implementation\CanIf.c	  3209   *
; ..\component\CanIf\Implementation\CanIf.c	  3210   *
; ..\component\CanIf\Implementation\CanIf.c	  3211   *
; ..\component\CanIf\Implementation\CanIf.c	  3212   *
; ..\component\CanIf\Implementation\CanIf.c	  3213   *
; ..\component\CanIf\Implementation\CanIf.c	  3214   *
; ..\component\CanIf\Implementation\CanIf.c	  3215   *
; ..\component\CanIf\Implementation\CanIf.c	  3216   *
; ..\component\CanIf\Implementation\CanIf.c	  3217   *
; ..\component\CanIf\Implementation\CanIf.c	  3218   *
; ..\component\CanIf\Implementation\CanIf.c	  3219   *
; ..\component\CanIf\Implementation\CanIf.c	  3220   *
; ..\component\CanIf\Implementation\CanIf.c	  3221   *
; ..\component\CanIf\Implementation\CanIf.c	  3222   */
; ..\component\CanIf\Implementation\CanIf.c	  3223  FUNC(Std_ReturnType, CANIF_CODE) CanIf_Transmit(PduIdType CanTxPduId, P2CONST(PduInfoType, AUTOMATIC, CANIF_APPL_MSG_VAR)PduInfoPtr)
; Function CanIf_Transmit
.L251:
CanIf_Transmit:	.type	func
	mov	d8,d4
	mov.aa	a12,a4
.L726:

; ..\component\CanIf\Implementation\CanIf.c	  3224  {
; ..\component\CanIf\Implementation\CanIf.c	  3225    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3226    Std_ReturnType retval = E_NOT_OK;
	mov	d9,#1
	sub.a	a10,#16
.L725:

; ..\component\CanIf\Implementation\CanIf.c	  3227    uint8 errorId = CANIF_E_NO_ERROR;
	mov	d10,#0
.L727:

; ..\component\CanIf\Implementation\CanIf.c	  3228  #if (CANIF_DATA_CHECKSUM_TX_SUPPORT == STD_ON)    
; ..\component\CanIf\Implementation\CanIf.c	  3229    uint8 txPduDataWithChecksum[CANIF_CFG_MAXTXDLC_PLUS_DATACHECKSUM];
; ..\component\CanIf\Implementation\CanIf.c	  3230  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3231    Can_PduType     localPdu;
; ..\component\CanIf\Implementation\CanIf.c	  3232  #if CANIF_SETDYNAMICTXID_API == STD_ON
; ..\component\CanIf\Implementation\CanIf.c	  3233    PduIdType     DynamicPduId;
; ..\component\CanIf\Implementation\CanIf.c	  3234  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3235    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  3236      
; ..\component\CanIf\Implementation\CanIf.c	  3237    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3238  #if ((CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  3239    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  3240    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  3241    {
; ..\component\CanIf\Implementation\CanIf.c	  3242      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  3243      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  3244    }
; ..\component\CanIf\Implementation\CanIf.c	  3245    else
; ..\component\CanIf\Implementation\CanIf.c	  3246  #endif /* (CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  3247  
; ..\component\CanIf\Implementation\CanIf.c	  3248  #if ((CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME) || (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  3249  # if (CANIF_DEV_ERROR_DETECT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  3250    /* #20 Check if parameter CanTxPduId is valid if a CanTxPduId indirection is done */
; ..\component\CanIf\Implementation\CanIf.c	  3251    if (CanTxPduId >= CANIF_CFG_MAX_ULTXPDUS)
; ..\component\CanIf\Implementation\CanIf.c	  3252    {
; ..\component\CanIf\Implementation\CanIf.c	  3253      /* \trace SPEC-2007 */
; ..\component\CanIf\Implementation\CanIf.c	  3254      errorId = CANIF_E_INVALID_TXPDUID;
; ..\component\CanIf\Implementation\CanIf.c	  3255    }
; ..\component\CanIf\Implementation\CanIf.c	  3256    else
; ..\component\CanIf\Implementation\CanIf.c	  3257  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  3258    {
; ..\component\CanIf\Implementation\CanIf.c	  3259      /* for PB and LT configurations the TxPduId order between CanIf and higher layers may differ and needs to be indirected */
; ..\component\CanIf\Implementation\CanIf.c	  3260      CanTxPduId = CANIF_CFG_TXPDUID2INTTXPDUID(CanTxPduId); /* PRQA S 1338 */ /* MD_CanIf_Rule17.8 */
; ..\component\CanIf\Implementation\CanIf.c	  3261  #endif /* (CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME) || (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  3262  
; ..\component\CanIf\Implementation\CanIf.c	  3263  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3264      /* #30 Check if parameter CanTxPduId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  3265      if (CanTxPduId >= CANIF_CFG_MAX_TXPDUS)
	jlt.u	d8,#3,.L71
.L837:

; ..\component\CanIf\Implementation\CanIf.c	  3266      {
; ..\component\CanIf\Implementation\CanIf.c	  3267        /* \trace SPEC-2007 */
; ..\component\CanIf\Implementation\CanIf.c	  3268        errorId = CANIF_E_INVALID_TXPDUID;
	mov	d10,#50
	j	.L72
.L71:

; ..\component\CanIf\Implementation\CanIf.c	  3269      }
; ..\component\CanIf\Implementation\CanIf.c	  3270      else
; ..\component\CanIf\Implementation\CanIf.c	  3271  #endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  3272      {
; ..\component\CanIf\Implementation\CanIf.c	  3273  #if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  3274        /* Determine the CAN controller channel */
; ..\component\CanIf\Implementation\CanIf.c	  3275        controller = CANIF_CFG_TX_CONTROLLER(CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  3276  #endif /* CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF */
; ..\component\CanIf\Implementation\CanIf.c	  3277  
; ..\component\CanIf\Implementation\CanIf.c	  3278  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3279        /* #40 Check if parameter PduInfoPtr is valid */
; ..\component\CanIf\Implementation\CanIf.c	  3280        if (PduInfoPtr == NULL_PTR)
	jnz.a	a12,.L73
.L838:

; ..\component\CanIf\Implementation\CanIf.c	  3281        {
; ..\component\CanIf\Implementation\CanIf.c	  3282          /* \trace SPEC-2003 */
; ..\component\CanIf\Implementation\CanIf.c	  3283          errorId = CANIF_E_PARAM_POINTER;
	mov	d10,#20
	j	.L74
.L73:

; ..\component\CanIf\Implementation\CanIf.c	  3284        }
; ..\component\CanIf\Implementation\CanIf.c	  3285        /* #50 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  3286        else if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_UNINIT)
	fcall	.cocofun_5
.L728:
	jne	d15,#0,.L75
.L839:

; ..\component\CanIf\Implementation\CanIf.c	  3287        {
; ..\component\CanIf\Implementation\CanIf.c	  3288          errorId = CANIF_E_UNINIT;
	mov	d10,#30
	j	.L76
.L75:

; ..\component\CanIf\Implementation\CanIf.c	  3289          /* retval default E_NOT_OK */
; ..\component\CanIf\Implementation\CanIf.c	  3290        }
; ..\component\CanIf\Implementation\CanIf.c	  3291        else
; ..\component\CanIf\Implementation\CanIf.c	  3292  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3293  #  if (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  3294        /* #60 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  3295        if (!CANIF_CFG_IS_CANDRVINDEXVALID(CanIf_Controller_Value_Local))
; ..\component\CanIf\Implementation\CanIf.c	  3296        {
; ..\component\CanIf\Implementation\CanIf.c	  3297          errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  3298        }
; ..\component\CanIf\Implementation\CanIf.c	  3299        else
; ..\component\CanIf\Implementation\CanIf.c	  3300  #  endif /* CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  3301  # endif /* CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  3302  #endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  3303        {
; ..\component\CanIf\Implementation\CanIf.c	  3304  
; ..\component\CanIf\Implementation\CanIf.c	  3305          /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3306  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3307          /* #100 Apply PnWuFilter (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  3308          if (CANIF_DO_TRANSMIT == CanIf_TransmitSubHandleTxPduFilter(CANIF_CHANNEL_CANPARA_FIRST_LOCAL CanTxPduId))
; ..\component\CanIf\Implementation\CanIf.c	  3309  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3310          {
; ..\component\CanIf\Implementation\CanIf.c	  3311            /* #200 Process only if CAN channel is started */
; ..\component\CanIf\Implementation\CanIf.c	  3312            if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_STARTED)
	jne	d15,#2,.L77
.L840:

; ..\component\CanIf\Implementation\CanIf.c	  3313            {
; ..\component\CanIf\Implementation\CanIf.c	  3314              /* #210 Process only if PDU mode is online */
; ..\component\CanIf\Implementation\CanIf.c	  3315              /* \trace SPEC-1849, SPEC-3854, SPEC-3765, SPEC-1850 */
; ..\component\CanIf\Implementation\CanIf.c	  3316              if ((CanIf_GetChannelMode(CanIf_Controller_Value_Local) == CANIF_GET_ONLINE) ||
	ld.bu	d15,[a15]1
.L841:
	jeq	d15,#3,.L78
.L842:

; ..\component\CanIf\Implementation\CanIf.c	  3317                (CanIf_GetChannelMode(CanIf_Controller_Value_Local) == CANIF_GET_TX_ONLINE)
	jne	d15,#2,.L79
.L78:

; ..\component\CanIf\Implementation\CanIf.c	  3318  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3319                || (CanIf_GetChannelMode(CanIf_Controller_Value_Local) == CANIF_GET_ONLINE_WAKF)
; ..\component\CanIf\Implementation\CanIf.c	  3320                || (CanIf_GetChannelMode(CanIf_Controller_Value_Local) == CANIF_GET_TX_ONLINE_WAKF)
; ..\component\CanIf\Implementation\CanIf.c	  3321  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3322                )
; ..\component\CanIf\Implementation\CanIf.c	  3323              {
; ..\component\CanIf\Implementation\CanIf.c	  3324                /* \trace SPEC-1227 */
; ..\component\CanIf\Implementation\CanIf.c	  3325                /* #220 Process the Tx-request only within critical section */
; ..\component\CanIf\Implementation\CanIf.c	  3326                CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_4);
	call	SuspendAllInterrupts
.L729:

; ..\component\CanIf\Implementation\CanIf.c	  3327  
; ..\component\CanIf\Implementation\CanIf.c	  3328                /* #230 Verify PDU length */
; ..\component\CanIf\Implementation\CanIf.c	  3329                localPdu.length = (uint8)(PduInfoPtr->SduLength);
	ld.bu	d15,[a12]4
.L843:
	st.b	[a10]2,d15
.L844:

; ..\component\CanIf\Implementation\CanIf.c	  3330                if(CANIF_DO_TRANSMIT == CanIf_TransmitSubVerifyPduLength(CanTxPduId, &localPdu)) /* SBSW_CANIF_5 */
	mov.aa	a4,a10
	mov	d4,d8
	call	CanIf_TransmitSubVerifyPduLength
.L845:
	jne	d2,#0,.L80
.L846:

; ..\component\CanIf\Implementation\CanIf.c	  3331                {
; ..\component\CanIf\Implementation\CanIf.c	  3332                  /* #300 Depending on type of Tx-PDU (dynamic / static) get the CAN identifier */
; ..\component\CanIf\Implementation\CanIf.c	  3333  #if (CANIF_SETDYNAMICTXID_API == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3334                  DynamicPduId = CANIF_CFG_STAT2DYN_INDIRECTION(CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  3335                  if(DynamicPduId != CanIf_TxPduHnd_INVALID)
; ..\component\CanIf\Implementation\CanIf.c	  3336                  {
; ..\component\CanIf\Implementation\CanIf.c	  3337                    (localPdu).id = CANIF_VAR_DYNTXID(DynamicPduId);
; ..\component\CanIf\Implementation\CanIf.c	  3338                  }
; ..\component\CanIf\Implementation\CanIf.c	  3339                  else
; ..\component\CanIf\Implementation\CanIf.c	  3340                  {
; ..\component\CanIf\Implementation\CanIf.c	  3341                    (localPdu).id = CANIF_CFG_TX_CANID(CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  3342                  }
; ..\component\CanIf\Implementation\CanIf.c	  3343  #else
; ..\component\CanIf\Implementation\CanIf.c	  3344                  (localPdu).id = CANIF_CFG_TX_CANID(CanTxPduId);
	fcall	.cocofun_8
	ld.hu	d15,[a15]0
.L847:
	st.h	[a10],d15
.L848:

; ..\component\CanIf\Implementation\CanIf.c	  3345  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3346  
; ..\component\CanIf\Implementation\CanIf.c	  3347                  localPdu.sdu = (PduInfoPtr->SduDataPtr);
	ld.a	a15,[a12]
.L849:
	st.a	[a10]4,a15
.L850:

; ..\component\CanIf\Implementation\CanIf.c	  3348                  localPdu.swPduHandle = (CanTxPduId);
	st.b	[a10]8,d8
.L851:

; ..\component\CanIf\Implementation\CanIf.c	  3349  
; ..\component\CanIf\Implementation\CanIf.c	  3350  #if (CANIF_META_DATA_TX_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3351                  /* #310 Handle meta data of Tx-PDU (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  3352                  CanIf_TransmitSubHandleMetaData(PduInfoPtr, &localPdu); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  3353  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3354  
; ..\component\CanIf\Implementation\CanIf.c	  3355  #if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	  3356                  /* #320 Adapt the CAN identifier according to J1939 specification (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  3357                  retval = CanIf_TransmitSubJ1939DynAddr(CANIF_CHANNEL_CANPARA_FIRST_LOCAL &localPdu); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  3358                  if (retval == E_OK) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  3359  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3360                  {
; ..\component\CanIf\Implementation\CanIf.c	  3361  #if (CANIF_DATA_CHECKSUM_TX_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3362                    /* #330 Is data checksum Tx-PDU? (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  3363                    if (CANIF_CFG_TX_ISDATACHECKSUMPDU(CanTxPduId))
; ..\component\CanIf\Implementation\CanIf.c	  3364                    {
; ..\component\CanIf\Implementation\CanIf.c	  3365                     /* #400 Calculate data checksum */
; ..\component\CanIf\Implementation\CanIf.c	  3366                      CanIf_TransmitSubDataChecksumTxAppend(&localPdu, &txPduDataWithChecksum[0]); /* SBSW_CANIF_31 */
; ..\component\CanIf\Implementation\CanIf.c	  3367  
; ..\component\CanIf\Implementation\CanIf.c	  3368                      /* #410 Adapt that Tx-PDU is transmitted including checksum */
; ..\component\CanIf\Implementation\CanIf.c	  3369                      localPdu.sdu = (P2VAR(uint8, TYPEDEF, CAN_APPL_VAR))(&txPduDataWithChecksum[0]);
; ..\component\CanIf\Implementation\CanIf.c	  3370                    }
; ..\component\CanIf\Implementation\CanIf.c	  3371  #endif /* (CANIF_DATA_CHECKSUM_TX_SUPPORT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  3372  
; ..\component\CanIf\Implementation\CanIf.c	  3373                    /* #340 Transmit PDU */
; ..\component\CanIf\Implementation\CanIf.c	  3374                    retval = CanIf_TransmitSubWrite(&localPdu); /* SBSW_CANIF_5 */
	mov.aa	a4,a10
	call	CanIf_TransmitSubWrite
.L731:
	mov	d9,d2
	j	.L81
.L80:

; ..\component\CanIf\Implementation\CanIf.c	  3375                  }
; ..\component\CanIf\Implementation\CanIf.c	  3376                }
; ..\component\CanIf\Implementation\CanIf.c	  3377                else
; ..\component\CanIf\Implementation\CanIf.c	  3378                {
; ..\component\CanIf\Implementation\CanIf.c	  3379                  /* Verification of PDU length failed */
; ..\component\CanIf\Implementation\CanIf.c	  3380                  /* default retval = E_NOT_OK */
; ..\component\CanIf\Implementation\CanIf.c	  3381                  /* \trace SPEC-7204476 */
; ..\component\CanIf\Implementation\CanIf.c	  3382                  errorId = CANIF_E_TXPDU_LENGTH_EXCEEDED;
	mov	d10,#90
.L81:

; ..\component\CanIf\Implementation\CanIf.c	  3383                }
; ..\component\CanIf\Implementation\CanIf.c	  3384                /* \trace SPEC-1227 */
; ..\component\CanIf\Implementation\CanIf.c	  3385                CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_4);
	call	ResumeAllInterrupts
.L852:
	j	.L82
.L79:

; ..\component\CanIf\Implementation\CanIf.c	  3386              }
; ..\component\CanIf\Implementation\CanIf.c	  3387              /* \trace SPEC-1848 */
; ..\component\CanIf\Implementation\CanIf.c	  3388              else if ((CanIf_GetChannelMode(CanIf_Controller_Value_Local) == CANIF_GET_OFFLINE_ACTIVE) ||
	jeq	d15,#4,.L83
.L853:

; ..\component\CanIf\Implementation\CanIf.c	  3389                      (CanIf_GetChannelMode(CanIf_Controller_Value_Local) == CANIF_GET_OFFLINE_ACTIVE_RX_ONLINE))
	jne	d15,#5,.L84
.L83:

; ..\component\CanIf\Implementation\CanIf.c	  3390              {
; ..\component\CanIf\Implementation\CanIf.c	  3391                retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  3392                /* \trace SPEC-5215 */
; ..\component\CanIf\Implementation\CanIf.c	  3393                /* #240 If PDU mode is Tx-passive call the Tx-confirmation */
; ..\component\CanIf\Implementation\CanIf.c	  3394                CanIf_HlTxConfirmation(CanTxPduId);
	mov	d9,#0
	call	CanIf_HlTxConfirmation
.L732:
	j	.L85
.L77:

; ..\component\CanIf\Implementation\CanIf.c	  3395              }
; ..\component\CanIf\Implementation\CanIf.c	  3396              else /* CANIF_GET_OFFLINE or CANIF_GET_RX_ONLINE */
; ..\component\CanIf\Implementation\CanIf.c	  3397              {
; ..\component\CanIf\Implementation\CanIf.c	  3398                /* \trace SPEC-3673 */
; ..\component\CanIf\Implementation\CanIf.c	  3399                /* default retval = E_NOT_OK */
; ..\component\CanIf\Implementation\CanIf.c	  3400                errorId = CANIF_E_STOPPED;
; ..\component\CanIf\Implementation\CanIf.c	  3401              }
; ..\component\CanIf\Implementation\CanIf.c	  3402            } /* if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_STARTED) */
; ..\component\CanIf\Implementation\CanIf.c	  3403            /* \trace SPEC-5339 */
; ..\component\CanIf\Implementation\CanIf.c	  3404            else if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_STOPPED)
	jne	d15,#1,.L86
.L84:

; ..\component\CanIf\Implementation\CanIf.c	  3405            {
; ..\component\CanIf\Implementation\CanIf.c	  3406              /* If current mode is STOP do report DET */
; ..\component\CanIf\Implementation\CanIf.c	  3407              errorId = CANIF_E_STOPPED;
	mov	d10,#70
.L86:
.L85:
.L82:
.L76:
.L74:
.L72:

; ..\component\CanIf\Implementation\CanIf.c	  3408            }
; ..\component\CanIf\Implementation\CanIf.c	  3409            else
; ..\component\CanIf\Implementation\CanIf.c	  3410            {
; ..\component\CanIf\Implementation\CanIf.c	  3411              /*  CtrlMode here can only be CANIF_CS_SLEEP, transmit is not allowed */
; ..\component\CanIf\Implementation\CanIf.c	  3412              /* default retval = E_NOT_OK */
; ..\component\CanIf\Implementation\CanIf.c	  3413            }
; ..\component\CanIf\Implementation\CanIf.c	  3414          }
; ..\component\CanIf\Implementation\CanIf.c	  3415        }
; ..\component\CanIf\Implementation\CanIf.c	  3416      }
; ..\component\CanIf\Implementation\CanIf.c	  3417  #if ((CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME) || (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON))     
; ..\component\CanIf\Implementation\CanIf.c	  3418    } 
; ..\component\CanIf\Implementation\CanIf.c	  3419  #endif  
; ..\component\CanIf\Implementation\CanIf.c	  3420    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3421  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3422    if (errorId != CANIF_E_NO_ERROR)
	jeq	d10,#0,.L87
.L854:

; ..\component\CanIf\Implementation\CanIf.c	  3423    {
; ..\component\CanIf\Implementation\CanIf.c	  3424      CanIf_Det_ReportError(CANIF_TRANSMIT_API, errorId);
	fcall	.cocofun_2
	mov	d6,#5
	mov	d7,d10
	call	Det_ReportError
.L87:

; ..\component\CanIf\Implementation\CanIf.c	  3425    }
; ..\component\CanIf\Implementation\CanIf.c	  3426  #else
; ..\component\CanIf\Implementation\CanIf.c	  3427    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  3428  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3429  
; ..\component\CanIf\Implementation\CanIf.c	  3430    
; ..\component\CanIf\Implementation\CanIf.c	  3431    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  3432  } /* PRQA S 6010, 6030, 6050, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STCAL, MD_MSR_STMIF */
	mov	d2,d9
	ret
.L531:
	
__CanIf_Transmit_function_end:
	.size	CanIf_Transmit,__CanIf_Transmit_function_end-CanIf_Transmit
.L318:
	; End of function
	
	.sdecl	'.text.CanIf..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.CanIf..cocofun_8'
	.align	2
; Function .cocofun_8
.L253:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:0
	fcall	.cocofun_14
.L730:
	addsc.a	a15,a15,d8,#3
.L1206:
	fret
.L473:
	; End of function
	.sdecl	'.text.CanIf..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.CanIf..cocofun_5'
	.align	2
; Function .cocofun_5
.L255:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0
	movh.a	a15,#@his(CanIf_CtrlStates)
.L771:
	lea	a15,[a15]@los(CanIf_CtrlStates)
	ld.bu	d15,[a15]
.L1191:
	fret
.L458:
	; End of function
	.sdecl	'.text.CanIf.CanIf_HlTxConfirmation',code,cluster('CanIf_HlTxConfirmation')
	.sect	'.text.CanIf.CanIf_HlTxConfirmation'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  3433  
; ..\component\CanIf\Implementation\CanIf.c	  3434  
; ..\component\CanIf\Implementation\CanIf.c	  3435  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  3436   *  CanIf_HlTxConfirmation()
; ..\component\CanIf\Implementation\CanIf.c	  3437   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  3438  /*
; ..\component\CanIf\Implementation\CanIf.c	  3439  |<DataModelStart>| CanIf_HlTxConfirmation
; ..\component\CanIf\Implementation\CanIf.c	  3440  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  3441  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  3442  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  3443  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  3444  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  3445  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  3446  */
; ..\component\CanIf\Implementation\CanIf.c	  3447   /*!
; ..\component\CanIf\Implementation\CanIf.c	  3448   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  3449   *
; ..\component\CanIf\Implementation\CanIf.c	  3450   *
; ..\component\CanIf\Implementation\CanIf.c	  3451   *
; ..\component\CanIf\Implementation\CanIf.c	  3452   *
; ..\component\CanIf\Implementation\CanIf.c	  3453   */
; ..\component\CanIf\Implementation\CanIf.c	  3454  CANIF_LOCAL FUNC(void, CANIF_CODE) CanIf_HlTxConfirmation(PduIdType CanTxPduId)
; Function CanIf_HlTxConfirmation
.L257:
CanIf_HlTxConfirmation:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  3455  {
; ..\component\CanIf\Implementation\CanIf.c	  3456  
; ..\component\CanIf\Implementation\CanIf.c	  3457    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3458    /* conform to requirement \trace SPEC-1877 */
; ..\component\CanIf\Implementation\CanIf.c	  3459    CanIf_TxConfFctListIdxType index;
; ..\component\CanIf\Implementation\CanIf.c	  3460    PduIdType upperLayerTxPduId;
; ..\component\CanIf\Implementation\CanIf.c	  3461    CanIf_TxConfirmationFctType txConfirmationFct;
; ..\component\CanIf\Implementation\CanIf.c	  3462  
; ..\component\CanIf\Implementation\CanIf.c	  3463    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3464    
; ..\component\CanIf\Implementation\CanIf.c	  3465    /* #100 Get the Tx-confirmation function */
; ..\component\CanIf\Implementation\CanIf.c	  3466    index = CANIF_CFG_TX_TXCONFIRMATION(CanTxPduId);
	fcall	.cocofun_9
.L733:
	ld.bu	d15,[a15]6
.L735:

; ..\component\CanIf\Implementation\CanIf.c	  3467  
; ..\component\CanIf\Implementation\CanIf.c	  3468    /* #110 Convert the CanIf internal TxPduId to the upper layer one */
; ..\component\CanIf\Implementation\CanIf.c	  3469    upperLayerTxPduId = CANIF_CFG_TX_UPPERLAYERTXPDUID(CanTxPduId);
	ld.bu	d4,[a15]2
.L734:

; ..\component\CanIf\Implementation\CanIf.c	  3470  
; ..\component\CanIf\Implementation\CanIf.c	  3471    txConfirmationFct = CANIF_CFG_TXCONFIRMATION(index);
	movh.a	a15,#@his(CanIf_TxConfirmationFctList)
	lea	a15,[a15]@los(CanIf_TxConfirmationFctList)
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
.L736:

; ..\component\CanIf\Implementation\CanIf.c	  3472  
; ..\component\CanIf\Implementation\CanIf.c	  3473    if (txConfirmationFct != NULL_PTR)
	jz.a	a15,.L89
.L1030:

; ..\component\CanIf\Implementation\CanIf.c	  3474    {
; ..\component\CanIf\Implementation\CanIf.c	  3475      /* #120 If configured, call the Tx-confirmation function */
; ..\component\CanIf\Implementation\CanIf.c	  3476        txConfirmationFct(upperLayerTxPduId);  /* SBSW_CANIF_11 */
	ji	a15
.L89:

; ..\component\CanIf\Implementation\CanIf.c	  3477    }
; ..\component\CanIf\Implementation\CanIf.c	  3478  }
	ret
.L623:
	
__CanIf_HlTxConfirmation_function_end:
	.size	CanIf_HlTxConfirmation,__CanIf_HlTxConfirmation_function_end-CanIf_HlTxConfirmation
.L383:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_TxConfirmation',code,cluster('CanIf_TxConfirmation')
	.sect	'.text.CanIf.CanIf_TxConfirmation'
	.align	2
	
	.global	CanIf_TxConfirmation

; ..\component\CanIf\Implementation\CanIf.c	  3479  
; ..\component\CanIf\Implementation\CanIf.c	  3480  
; ..\component\CanIf\Implementation\CanIf.c	  3481  /* \trace SPEC-3686 */
; ..\component\CanIf\Implementation\CanIf.c	  3482  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  3483   *  CanIf_TxConfirmation()
; ..\component\CanIf\Implementation\CanIf.c	  3484   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  3485  /*
; ..\component\CanIf\Implementation\CanIf.c	  3486  |<DataModelStart>| CanIf_TxConfirmation
; ..\component\CanIf\Implementation\CanIf.c	  3487  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  3488  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  3489  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  3490  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  3491  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  3492  CanIfPnEnable
; ..\component\CanIf\Implementation\CanIf.c	  3493  CanIfPnEnable, CanIfTxConfPollSupport
; ..\component\CanIf\Implementation\CanIf.c	  3494  CanIfPnEnable, CanIfTxConfPollSupport, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3495  CanIfPnEnable, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3496  CanIfTxConfPollSupport,  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3497  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  3498  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  3499  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  3500  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  3501  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  3502  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  3503  */
; ..\component\CanIf\Implementation\CanIf.c	  3504   /*!
; ..\component\CanIf\Implementation\CanIf.c	  3505   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  3506   *
; ..\component\CanIf\Implementation\CanIf.c	  3507   *
; ..\component\CanIf\Implementation\CanIf.c	  3508   *
; ..\component\CanIf\Implementation\CanIf.c	  3509   *
; ..\component\CanIf\Implementation\CanIf.c	  3510   *
; ..\component\CanIf\Implementation\CanIf.c	  3511   *
; ..\component\CanIf\Implementation\CanIf.c	  3512   *
; ..\component\CanIf\Implementation\CanIf.c	  3513   *
; ..\component\CanIf\Implementation\CanIf.c	  3514   *
; ..\component\CanIf\Implementation\CanIf.c	  3515   *
; ..\component\CanIf\Implementation\CanIf.c	  3516   */
; ..\component\CanIf\Implementation\CanIf.c	  3517  FUNC(void, CANIF_CODE) CanIf_TxConfirmation(PduIdType CanTxPduId)
; Function CanIf_TxConfirmation
.L259:
CanIf_TxConfirmation:	.type	func
	mov	d9,d4
.L737:

; ..\component\CanIf\Implementation\CanIf.c	  3518  {
; ..\component\CanIf\Implementation\CanIf.c	  3519    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3520    uint8 errorId = CANIF_E_NO_ERROR;
	mov	d10,#0
.L738:

; ..\component\CanIf\Implementation\CanIf.c	  3521  
; ..\component\CanIf\Implementation\CanIf.c	  3522    /* \trace SPEC-3701 */
; ..\component\CanIf\Implementation\CanIf.c	  3523    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3524  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3525  # if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3526    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  3527    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  3528    {
; ..\component\CanIf\Implementation\CanIf.c	  3529      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  3530      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  3531    }
; ..\component\CanIf\Implementation\CanIf.c	  3532    else
; ..\component\CanIf\Implementation\CanIf.c	  3533  # endif
; ..\component\CanIf\Implementation\CanIf.c	  3534    /* #20 Check if parameter CanTxPduId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  3535    if (CanTxPduId >=  CANIF_CFG_MAX_TXPDUS)
	jlt.u	d9,#3,.L90
.L905:

; ..\component\CanIf\Implementation\CanIf.c	  3536    {
; ..\component\CanIf\Implementation\CanIf.c	  3537      /* \trace SPEC-3700 */
; ..\component\CanIf\Implementation\CanIf.c	  3538      errorId = CANIF_E_PARAM_LPDU;
	mov	d10,#13
	j	.L91
.L90:

; ..\component\CanIf\Implementation\CanIf.c	  3539    }
; ..\component\CanIf\Implementation\CanIf.c	  3540    /* #30 Check if corresponding CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  3541    else if (CanIf_GetCtrlMode(CANIF_CFG_TX_CONTROLLER(CanTxPduId)) == CANIF_CS_UNINIT )
	fcall	.cocofun_14
.L740:
	addsc.a	a15,a15,d9,#3
	movh.a	a2,#@his(CanIf_CtrlStates)
	ld.bu	d15,[a15]4
	lea	a2,[a2]@los(CanIf_CtrlStates)
	addsc.a	a2,a2,d15,#1
	ld.bu	d15,[a2]
.L906:
	jne	d15,#0,.L92
.L907:

; ..\component\CanIf\Implementation\CanIf.c	  3542    {
; ..\component\CanIf\Implementation\CanIf.c	  3543      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  3544      errorId = CANIF_E_UNINIT;
	mov	d10,#30
	j	.L93
.L92:

; ..\component\CanIf\Implementation\CanIf.c	  3545    }
; ..\component\CanIf\Implementation\CanIf.c	  3546  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3547  #  if (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  3548    /* #40 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  3549    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CANIF_CFG_TX_CONTROLLER(CanTxPduId)))
; ..\component\CanIf\Implementation\CanIf.c	  3550    {
; ..\component\CanIf\Implementation\CanIf.c	  3551      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  3552    }
; ..\component\CanIf\Implementation\CanIf.c	  3553  #  endif  
; ..\component\CanIf\Implementation\CanIf.c	  3554  # endif
; ..\component\CanIf\Implementation\CanIf.c	  3555    else
; ..\component\CanIf\Implementation\CanIf.c	  3556  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3557    {
; ..\component\CanIf\Implementation\CanIf.c	  3558      /* \trace SPEC-3703 */
; ..\component\CanIf\Implementation\CanIf.c	  3559      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3560      /* #100 Process only if CAN channel is active */
; ..\component\CanIf\Implementation\CanIf.c	  3561      if (CanIf_GetCtrlMode(CANIF_CFG_TX_CONTROLLER(CanTxPduId)) == CANIF_CS_STARTED)
	jne	d15,#2,.L94
.L908:

; ..\component\CanIf\Implementation\CanIf.c	  3562      {
; ..\component\CanIf\Implementation\CanIf.c	  3563        if ( (CanIf_GetChannelMode(CANIF_CFG_TX_CONTROLLER(CanTxPduId)) == CANIF_GET_ONLINE) ||
	ld.bu	d15,[a2]1
.L909:
	jeq	d15,#3,.L95
.L910:

; ..\component\CanIf\Implementation\CanIf.c	  3564               (CanIf_GetChannelMode(CANIF_CFG_TX_CONTROLLER(CanTxPduId)) == CANIF_GET_TX_ONLINE)
	jne	d15,#2,.L96
.L95:

; ..\component\CanIf\Implementation\CanIf.c	  3565  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3566          || (CanIf_GetChannelMode(CANIF_CFG_TX_CONTROLLER(CanTxPduId)) == CANIF_GET_ONLINE_WAKF)
; ..\component\CanIf\Implementation\CanIf.c	  3567          || (CanIf_GetChannelMode(CANIF_CFG_TX_CONTROLLER(CanTxPduId)) == CANIF_GET_TX_ONLINE_WAKF)
; ..\component\CanIf\Implementation\CanIf.c	  3568  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3569           )
; ..\component\CanIf\Implementation\CanIf.c	  3570        {
; ..\component\CanIf\Implementation\CanIf.c	  3571  #if ((CANIF_PN_WU_TX_PDU_FILTER == STD_ON) || (CANIF_PUBLIC_TX_CONFIRM_POLLING_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  3572          CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  3573  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  3574          controller = CANIF_CFG_TX_CONTROLLER(CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  3575  # endif
; ..\component\CanIf\Implementation\CanIf.c	  3576  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3577  
; ..\component\CanIf\Implementation\CanIf.c	  3578  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3579          /* CANIF751 */
; ..\component\CanIf\Implementation\CanIf.c	  3580          /* #110 Deactivate Tx-PDU-filter */
; ..\component\CanIf\Implementation\CanIf.c	  3581          CanIf_SetPnWuTxPduFilterActive(CanIf_Controller_Value_Local, FALSE); /* SBSW_CANIF_8 */
; ..\component\CanIf\Implementation\CanIf.c	  3582  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3583  
; ..\component\CanIf\Implementation\CanIf.c	  3584  #if (CANIF_PUBLIC_TX_CONFIRM_POLLING_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3585          /* \trace SPEC-9981 */
; ..\component\CanIf\Implementation\CanIf.c	  3586          /* #120 Log that any Tx-confirmation occurred */
; ..\component\CanIf\Implementation\CanIf.c	  3587          CanIf_SetTxConfState(CanIf_Controller_Value_Local, CANIF_TX_RX_NOTIFICATION);  /* SBSW_CANIF_8 */
; ..\component\CanIf\Implementation\CanIf.c	  3588  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3589  
; ..\component\CanIf\Implementation\CanIf.c	  3590  
; ..\component\CanIf\Implementation\CanIf.c	  3591  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  3592          {
; ..\component\CanIf\Implementation\CanIf.c	  3593            CanIf_AnyIdxType hth;
; ..\component\CanIf\Implementation\CanIf.c	  3594            hth = CANIF_CFG_TX_HTH(CanTxPduId);
	ld.bu	d8,[a15]5
.L742:

; ..\component\CanIf\Implementation\CanIf.c	  3595            /* \trace SPEC-3676 */
; ..\component\CanIf\Implementation\CanIf.c	  3596            /* Check if Tx-queue is affected (BasicCAN Tx-PDU which has a buffer) */
; ..\component\CanIf\Implementation\CanIf.c	  3597            if (CANIF_CFG_MAILBOX_HASTXBUFFER(hth)) /* COV_CANIF_NO_TX_BUFFER */
	fcall	.cocofun_7
	ld.bu	d0,[a15]3
	mov	d15,#255
.L911:
	jeq	d15,d0,.L97
.L912:

; ..\component\CanIf\Implementation\CanIf.c	  3598            {
; ..\component\CanIf\Implementation\CanIf.c	  3599              /* #130 If transmission of a BasicCAN PDU, which has a buffer, was confirmed, handle the Tx-queue (critical section is used) */
; ..\component\CanIf\Implementation\CanIf.c	  3600              /* \trace SPEC-1227 */
; ..\component\CanIf\Implementation\CanIf.c	  3601              CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_2);
	call	SuspendAllInterrupts
.L741:

; ..\component\CanIf\Implementation\CanIf.c	  3602              /* \trace SPEC-5275, SPEC-1231 */
; ..\component\CanIf\Implementation\CanIf.c	  3603              
; ..\component\CanIf\Implementation\CanIf.c	  3604              /* parameter hth out of CanTxPduId */
; ..\component\CanIf\Implementation\CanIf.c	  3605              (void)CanIf_TxQueueTreatment((CanIf_HwHandleType)hth);
	mov	d4,d8
	call	CanIf_TxQueueTreatment
.L913:

; ..\component\CanIf\Implementation\CanIf.c	  3606              /* \trace SPEC-1227 */ /* lock over queue handling + write call (driver does not expect direct call inbetween) */
; ..\component\CanIf\Implementation\CanIf.c	  3607              CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_2);
	call	ResumeAllInterrupts
.L97:

; ..\component\CanIf\Implementation\CanIf.c	  3608            }
; ..\component\CanIf\Implementation\CanIf.c	  3609          }
; ..\component\CanIf\Implementation\CanIf.c	  3610  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3611          /* \trace SPEC-3666 */
; ..\component\CanIf\Implementation\CanIf.c	  3612          /* #140 Inform upper layer about transmitted PDU */
; ..\component\CanIf\Implementation\CanIf.c	  3613          CanIf_HlTxConfirmation(CanTxPduId);
	mov	d4,d9
	call	CanIf_HlTxConfirmation
.L96:
.L94:
.L93:
.L91:

; ..\component\CanIf\Implementation\CanIf.c	  3614        }
; ..\component\CanIf\Implementation\CanIf.c	  3615      }
; ..\component\CanIf\Implementation\CanIf.c	  3616    }
; ..\component\CanIf\Implementation\CanIf.c	  3617  
; ..\component\CanIf\Implementation\CanIf.c	  3618    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3619  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3620    if (errorId != CANIF_E_NO_ERROR)
	jeq	d10,#0,.L98
.L914:

; ..\component\CanIf\Implementation\CanIf.c	  3621    {
; ..\component\CanIf\Implementation\CanIf.c	  3622      CanIf_Det_ReportError(CANIF_TXCONFIRMATION_API, errorId);
	fcall	.cocofun_2
	mov	d6,#19
	mov	d7,d10
.L743:
	j	Det_ReportError
.L98:

; ..\component\CanIf\Implementation\CanIf.c	  3623    }
; ..\component\CanIf\Implementation\CanIf.c	  3624  #else
; ..\component\CanIf\Implementation\CanIf.c	  3625    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  3626  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3627  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	ret
.L558:
	
__CanIf_TxConfirmation_function_end:
	.size	CanIf_TxConfirmation,__CanIf_TxConfirmation_function_end-CanIf_TxConfirmation
.L338:
	; End of function
	
	.sdecl	'.text.CanIf..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.CanIf..cocofun_7'
	.align	2
; Function .cocofun_7
.L261:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	mul	d15,d8,#6
.L1201:
	fcall	.cocofun_13
.L739:
	fret
.L468:
	; End of function
	.sdecl	'.text.CanIf.CanIf_RxIndicationSubLinearSearch',code,cluster('CanIf_RxIndicationSubLinearSearch')
	.sect	'.text.CanIf.CanIf_RxIndicationSubLinearSearch'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  3628  
; ..\component\CanIf\Implementation\CanIf.c	  3629  
; ..\component\CanIf\Implementation\CanIf.c	  3630  #if  (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	  3631  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  3632   *  CanIf_RxIndicationSubJ1939DynAddr()
; ..\component\CanIf\Implementation\CanIf.c	  3633   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  3634  /*
; ..\component\CanIf\Implementation\CanIf.c	  3635  |<DataModelStart>| CanIf_RxIndicationSubJ1939DynAddr
; ..\component\CanIf\Implementation\CanIf.c	  3636  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  3637  CanIfJ1939 # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  3638  CanIfJ1939 # from caller CanIf_RxIndicationAsr403 #
; ..\component\CanIf\Implementation\CanIf.c	  3639  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  3640  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3641  CanIfJ1939, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  3642  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  3643  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  3644  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  3645  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  3646  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  3647  */
; ..\component\CanIf\Implementation\CanIf.c	  3648   /*!
; ..\component\CanIf\Implementation\CanIf.c	  3649   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  3650   *
; ..\component\CanIf\Implementation\CanIf.c	  3651   *
; ..\component\CanIf\Implementation\CanIf.c	  3652   *
; ..\component\CanIf\Implementation\CanIf.c	  3653   *
; ..\component\CanIf\Implementation\CanIf.c	  3654   *
; ..\component\CanIf\Implementation\CanIf.c	  3655   *
; ..\component\CanIf\Implementation\CanIf.c	  3656   *
; ..\component\CanIf\Implementation\CanIf.c	  3657   */
; ..\component\CanIf\Implementation\CanIf.c	  3658  CANIF_LOCAL_INLINE FUNC(Std_ReturnType, CANIF_CODE) CanIf_RxIndicationSubJ1939DynAddr(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams)
; ..\component\CanIf\Implementation\CanIf.c	  3659  {
; ..\component\CanIf\Implementation\CanIf.c	  3660    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3661    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  3662    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  3663    Std_ReturnType retVal = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  3664  
; ..\component\CanIf\Implementation\CanIf.c	  3665  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  3666    CanIf_Controller_Value_Local = CANIF_CFG_MAILBOX_CONTROLLER(rxSearchParams->eHrh);
; ..\component\CanIf\Implementation\CanIf.c	  3667  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  3668  
; ..\component\CanIf\Implementation\CanIf.c	  3669    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3670    /* #100 Do J1939-conform address conversion only for J1939Nm CAN channel */
; ..\component\CanIf\Implementation\CanIf.c	  3671    if( CANIF_CFG_CTRLJ1939DYNADDRSUPPORT(CanIf_Controller_Value_Local) != CANIF_J1939_DYN_ADDR_DISABLED ) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  3672    {
; ..\component\CanIf\Implementation\CanIf.c	  3673      uint8 da;   /* destinationAddress */
; ..\component\CanIf\Implementation\CanIf.c	  3674      uint8 sa;   /* sourceAddress */
; ..\component\CanIf\Implementation\CanIf.c	  3675      uint8 sa_t; /* sourceAddress transformed with lookup table */
; ..\component\CanIf\Implementation\CanIf.c	  3676  
; ..\component\CanIf\Implementation\CanIf.c	  3677      /* #110 Distinguish between standard and extended CAN identifier */
; ..\component\CanIf\Implementation\CanIf.c	  3678      if(((rxSearchParams->eCanId) & CANIF_EXT_CANID_MASK) == CANIF_EXT_CANID_MASK) /* ext. ID */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  3679      {
; ..\component\CanIf\Implementation\CanIf.c	  3680        /* #200 Extended CAN identifier: */
; ..\component\CanIf\Implementation\CanIf.c	  3681        if ((((rxSearchParams->eCanId) & CANIF_J1939_DATA_PAGE_MASK) != CANIF_J1939_DATA_PAGE_MASK) && (((rxSearchParams->eCanId) & CANIF_J1939_PGN_MASK) != CANIF_J1939_AC_PGN))   /* J1939 format and not AddressClaimed */
; ..\component\CanIf\Implementation\CanIf.c	  3682        {
; ..\component\CanIf\Implementation\CanIf.c	  3683          /* #210 Destination and source addresses are substituted with J1939 format but not for address claimed (critical section is used)*/
; ..\component\CanIf\Implementation\CanIf.c	  3684          /* Critical section is required to ensure consistency for the pair: da and sa_t */
; ..\component\CanIf\Implementation\CanIf.c	  3685          CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_7);
; ..\component\CanIf\Implementation\CanIf.c	  3686  
; ..\component\CanIf\Implementation\CanIf.c	  3687          if (((rxSearchParams->eCanId) & CANIF_J1939_MIN_PDU2_MASK) < CANIF_J1939_MIN_PDU2_MASK)  /* PDU Format 1 (second byte < 0xF0) */
; ..\component\CanIf\Implementation\CanIf.c	  3688          {
; ..\component\CanIf\Implementation\CanIf.c	  3689            da = (uint8)(((rxSearchParams->eCanId) & CANIF_J1939_DA_MASK) >> 8);
; ..\component\CanIf\Implementation\CanIf.c	  3690            da = CANIF_VAR_J1939RXADDR_LOOKUP(CanIf_Controller_Value_Local, da);
; ..\component\CanIf\Implementation\CanIf.c	  3691            if (da == CANIF_J1939_NULL_ADDR)
; ..\component\CanIf\Implementation\CanIf.c	  3692            {
; ..\component\CanIf\Implementation\CanIf.c	  3693              errorId = CANIF_E_INVALID_DA;
; ..\component\CanIf\Implementation\CanIf.c	  3694              retVal = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  3695            }
; ..\component\CanIf\Implementation\CanIf.c	  3696            (rxSearchParams->eCanId) = (Can_IdType)(((rxSearchParams->eCanId) & CANIF_J1939_INV_DA_MASK) | (((Can_IdType)da) << 8u));  /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3697          }
; ..\component\CanIf\Implementation\CanIf.c	  3698  
; ..\component\CanIf\Implementation\CanIf.c	  3699          sa = (uint8)((rxSearchParams->eCanId) & CANIF_J1939_SA_MASK);
; ..\component\CanIf\Implementation\CanIf.c	  3700          sa_t = CANIF_VAR_J1939RXADDR_LOOKUP(CanIf_Controller_Value_Local, sa);
; ..\component\CanIf\Implementation\CanIf.c	  3701  
; ..\component\CanIf\Implementation\CanIf.c	  3702          CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_7);
; ..\component\CanIf\Implementation\CanIf.c	  3703  
; ..\component\CanIf\Implementation\CanIf.c	  3704          if ((sa == CANIF_J1939_BROADCAST_ADDR) || ((sa != CANIF_J1939_NULL_ADDR) && (sa_t == CANIF_J1939_NULL_ADDR)) || ((sa == CANIF_J1939_NULL_ADDR) && (((rxSearchParams->eCanId) & CANIF_J1939_PGN_MASK) != CANIF_J1939_RQST_PGN))) /* invalid SA or NULL SA for anything but Request */
; ..\component\CanIf\Implementation\CanIf.c	  3705          {
; ..\component\CanIf\Implementation\CanIf.c	  3706            errorId = CANIF_E_INVALID_SA;
; ..\component\CanIf\Implementation\CanIf.c	  3707            retVal = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  3708          }
; ..\component\CanIf\Implementation\CanIf.c	  3709          (rxSearchParams->eCanId) = (Can_IdType)(((rxSearchParams->eCanId) & CANIF_J1939_INV_SA_MASK) | sa_t); /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3710        }
; ..\component\CanIf\Implementation\CanIf.c	  3711      }
; ..\component\CanIf\Implementation\CanIf.c	  3712  #  if (CANIF_J1939_DYN_ADDR_SUPPORT == CANIF_J1939_DYN_ADDR_MIXED_CANID)
; ..\component\CanIf\Implementation\CanIf.c	  3713      else
; ..\component\CanIf\Implementation\CanIf.c	  3714      {
; ..\component\CanIf\Implementation\CanIf.c	  3715        /* #300 Standard CAN identifier: */
; ..\component\CanIf\Implementation\CanIf.c	  3716        if( CANIF_CFG_CTRLJ1939DYNADDRSUPPORT(CanIf_Controller_Value_Local) == CANIF_J1939_DYN_ADDR_MIXED_CANID ) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  3717        {
; ..\component\CanIf\Implementation\CanIf.c	  3718          /* #310 Only source address is substituted */
; ..\component\CanIf\Implementation\CanIf.c	  3719          sa = (uint8)((rxSearchParams->eCanId) & CANIF_J1939_SA_MASK);
; ..\component\CanIf\Implementation\CanIf.c	  3720          sa = CANIF_VAR_J1939RXADDR_LOOKUP(CanIf_Controller_Value_Local, sa);
; ..\component\CanIf\Implementation\CanIf.c	  3721          if (sa == CANIF_J1939_NULL_ADDR)
; ..\component\CanIf\Implementation\CanIf.c	  3722          {
; ..\component\CanIf\Implementation\CanIf.c	  3723            errorId = CANIF_E_INVALID_SA;
; ..\component\CanIf\Implementation\CanIf.c	  3724            retVal = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  3725          }
; ..\component\CanIf\Implementation\CanIf.c	  3726          (rxSearchParams->eCanId) = (Can_IdType)(((rxSearchParams->eCanId) & CANIF_J1939_INV_SA_MASK) | sa); /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3727        }
; ..\component\CanIf\Implementation\CanIf.c	  3728      }
; ..\component\CanIf\Implementation\CanIf.c	  3729  #  endif /* CANIF_J1939_DYN_ADDR_SUPPORT == CANIF_J1939_DYN_ADDR_MIXED_CANID */
; ..\component\CanIf\Implementation\CanIf.c	  3730    }
; ..\component\CanIf\Implementation\CanIf.c	  3731  
; ..\component\CanIf\Implementation\CanIf.c	  3732  #  if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3733    if (errorId != CANIF_E_NO_ERROR) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  3734    {
; ..\component\CanIf\Implementation\CanIf.c	  3735      CanIf_Det_ReportError(CANIF_RXINDICATION_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  3736    }
; ..\component\CanIf\Implementation\CanIf.c	  3737  #  else
; ..\component\CanIf\Implementation\CanIf.c	  3738    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  3739  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  3740  
; ..\component\CanIf\Implementation\CanIf.c	  3741    return retVal;
; ..\component\CanIf\Implementation\CanIf.c	  3742  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  3743  #endif
; ..\component\CanIf\Implementation\CanIf.c	  3744  
; ..\component\CanIf\Implementation\CanIf.c	  3745  
; ..\component\CanIf\Implementation\CanIf.c	  3746  #if (CANIF_SEARCH_ALGORITHM == CANIF_BINARY)
; ..\component\CanIf\Implementation\CanIf.c	  3747  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  3748   *  CanIf_RxIndicationSubBinarySearch()
; ..\component\CanIf\Implementation\CanIf.c	  3749   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  3750  /*
; ..\component\CanIf\Implementation\CanIf.c	  3751  |<DataModelStart>| CanIf_RxIndicationSubBinarySearch
; ..\component\CanIf\Implementation\CanIf.c	  3752  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  3753  CanIfRxSearch # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  3754  CanIfRxSearch # from caller CanIf_RxIndicationSubBasicCan #
; ..\component\CanIf\Implementation\CanIf.c	  3755  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  3756  CanIfRxSearchMsgType
; ..\component\CanIf\Implementation\CanIf.c	  3757  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  3758  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  3759  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  3760  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  3761  */
; ..\component\CanIf\Implementation\CanIf.c	  3762   /*!
; ..\component\CanIf\Implementation\CanIf.c	  3763   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  3764   *
; ..\component\CanIf\Implementation\CanIf.c	  3765   *
; ..\component\CanIf\Implementation\CanIf.c	  3766   *
; ..\component\CanIf\Implementation\CanIf.c	  3767   *
; ..\component\CanIf\Implementation\CanIf.c	  3768   *
; ..\component\CanIf\Implementation\CanIf.c	  3769   *
; ..\component\CanIf\Implementation\CanIf.c	  3770   *
; ..\component\CanIf\Implementation\CanIf.c	  3771   *
; ..\component\CanIf\Implementation\CanIf.c	  3772   *
; ..\component\CanIf\Implementation\CanIf.c	  3773   *
; ..\component\CanIf\Implementation\CanIf.c	  3774   */
; ..\component\CanIf\Implementation\CanIf.c	  3775  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubBinarySearch(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams)
; ..\component\CanIf\Implementation\CanIf.c	  3776  {
; ..\component\CanIf\Implementation\CanIf.c	  3777    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3778    PduIdType firstRxPduId;
; ..\component\CanIf\Implementation\CanIf.c	  3779    PduIdType lastRxPduId;
; ..\component\CanIf\Implementation\CanIf.c	  3780    PduIdType midRxPduId;
; ..\component\CanIf\Implementation\CanIf.c	  3781    PduIdType resultId  = CanIf_RxPduHnd_INVALID;
; ..\component\CanIf\Implementation\CanIf.c	  3782  
; ..\component\CanIf\Implementation\CanIf.c	  3783    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3784  
; ..\component\CanIf\Implementation\CanIf.c	  3785    /* #100 Determine the inital search range of Rx-PDU-Ids */
; ..\component\CanIf\Implementation\CanIf.c	  3786    firstRxPduId = CANIF_CFG_MAILBOX_PDUIDFIRST(rxSearchParams->eHrh);
; ..\component\CanIf\Implementation\CanIf.c	  3787    lastRxPduId = rxSearchParams->eRxPduId;
; ..\component\CanIf\Implementation\CanIf.c	  3788  
; ..\component\CanIf\Implementation\CanIf.c	  3789    /* #200 Run through the search range of Rx-PDU-Ids (CAN-Ids are sorted in descending order) */
; ..\component\CanIf\Implementation\CanIf.c	  3790    while (firstRxPduId <= lastRxPduId) /* PRQA S 0771 */ /* MD_CanIf_MultipleBreak */
; ..\component\CanIf\Implementation\CanIf.c	  3791    {
; ..\component\CanIf\Implementation\CanIf.c	  3792      /* #210 Calculate the middle Rx-PDU-Id of the search range of Rx-PDU-Ids*/
; ..\component\CanIf\Implementation\CanIf.c	  3793      midRxPduId = (PduIdType)((lastRxPduId + firstRxPduId) >> 1);
; ..\component\CanIf\Implementation\CanIf.c	  3794  
; ..\component\CanIf\Implementation\CanIf.c	  3795      /* #220 CAN-Id of the middle Rx-PDU-Id matches the searched CAN-Id (matched Rx-PDU found) */
; ..\component\CanIf\Implementation\CanIf.c	  3796      if(CANIF_CFG_RX_CANID(midRxPduId) == rxSearchParams->eCanId)
; ..\component\CanIf\Implementation\CanIf.c	  3797      {
; ..\component\CanIf\Implementation\CanIf.c	  3798        resultId = midRxPduId;
; ..\component\CanIf\Implementation\CanIf.c	  3799        break;
; ..\component\CanIf\Implementation\CanIf.c	  3800      }
; ..\component\CanIf\Implementation\CanIf.c	  3801      /* #230 CAN-Id of the middle Rx-PDU-Id is bigger than the searched CAN-Id (continue search between middle Rx-PDU-Id and last Rx-PDU-Id) */
; ..\component\CanIf\Implementation\CanIf.c	  3802      else if(CANIF_CFG_RX_CANID(midRxPduId) > rxSearchParams->eCanId)
; ..\component\CanIf\Implementation\CanIf.c	  3803      {
; ..\component\CanIf\Implementation\CanIf.c	  3804        firstRxPduId = midRxPduId + 1u;
; ..\component\CanIf\Implementation\CanIf.c	  3805      }
; ..\component\CanIf\Implementation\CanIf.c	  3806      /* #240 CAN-Id of the middle Rx-PDU-Id is smaller than the searched CAN-Id */
; ..\component\CanIf\Implementation\CanIf.c	  3807      else
; ..\component\CanIf\Implementation\CanIf.c	  3808      {
; ..\component\CanIf\Implementation\CanIf.c	  3809        /* #300 Middle Rx-PDU-Id is the first Rx-PDU-Id from the inital search range (no matched Rx-PDU found) */
; ..\component\CanIf\Implementation\CanIf.c	  3810        if(midRxPduId == CANIF_CFG_MAILBOX_PDUIDFIRST(rxSearchParams->eHrh))
; ..\component\CanIf\Implementation\CanIf.c	  3811        {
; ..\component\CanIf\Implementation\CanIf.c	  3812          break;
; ..\component\CanIf\Implementation\CanIf.c	  3813        }
; ..\component\CanIf\Implementation\CanIf.c	  3814        /* #310 Continue search between middle Rx-PDU-Id and first Rx-PDU-Id */
; ..\component\CanIf\Implementation\CanIf.c	  3815        else
; ..\component\CanIf\Implementation\CanIf.c	  3816        {
; ..\component\CanIf\Implementation\CanIf.c	  3817          lastRxPduId = midRxPduId - 1u;
; ..\component\CanIf\Implementation\CanIf.c	  3818        }
; ..\component\CanIf\Implementation\CanIf.c	  3819      }
; ..\component\CanIf\Implementation\CanIf.c	  3820  
; ..\component\CanIf\Implementation\CanIf.c	  3821    } /* while (firstRxPduId <= lastRxPduId)*/
; ..\component\CanIf\Implementation\CanIf.c	  3822  
; ..\component\CanIf\Implementation\CanIf.c	  3823    if (resultId != CanIf_RxPduHnd_INVALID)
; ..\component\CanIf\Implementation\CanIf.c	  3824    {
; ..\component\CanIf\Implementation\CanIf.c	  3825      /* #400 If matched Rx-PDU found verify the message type regarding FD format (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  3826  # if (CANIF_RX_SEARCH_CONSIDER_MSG_TYPE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3827      /* Set for possible match-candidate */
; ..\component\CanIf\Implementation\CanIf.c	  3828      rxSearchParams->eRxPduIdMatch = resultId; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3829      CanIf_RxIndicationSubBinarySearchSubCheckMsgType(rxSearchParams); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  3830  # else
; ..\component\CanIf\Implementation\CanIf.c	  3831      /* \trace SPEC-3677, SPEC-1230 */
; ..\component\CanIf\Implementation\CanIf.c	  3832      rxSearchParams->eRxPduIdMatch = resultId; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3833      rxSearchParams->eContinueSearch = FALSE; /* no range search necessary */ /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3834  # endif
; ..\component\CanIf\Implementation\CanIf.c	  3835    }
; ..\component\CanIf\Implementation\CanIf.c	  3836  }
; ..\component\CanIf\Implementation\CanIf.c	  3837  
; ..\component\CanIf\Implementation\CanIf.c	  3838   
; ..\component\CanIf\Implementation\CanIf.c	  3839  # if (CANIF_RX_SEARCH_CONSIDER_MSG_TYPE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3840  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  3841   *  CanIf_RxIndicationSubBinarySearchSubCheckMsgType()
; ..\component\CanIf\Implementation\CanIf.c	  3842   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  3843  /*
; ..\component\CanIf\Implementation\CanIf.c	  3844  |<DataModelStart>| CanIf_RxIndicationSubBinarySearchSubCheckMsgType
; ..\component\CanIf\Implementation\CanIf.c	  3845  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  3846  CanIfRxSearch, CanIfRxSearchMsgType # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  3847  CanIfRxSearch, CanIfRxSearchMsgType # from caller CanIf_RxIndicationSubBinarySearch #
; ..\component\CanIf\Implementation\CanIf.c	  3848  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  3849  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  3850  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  3851  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  3852  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  3853  */
; ..\component\CanIf\Implementation\CanIf.c	  3854   /*!
; ..\component\CanIf\Implementation\CanIf.c	  3855   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  3856   *
; ..\component\CanIf\Implementation\CanIf.c	  3857   *
; ..\component\CanIf\Implementation\CanIf.c	  3858   *
; ..\component\CanIf\Implementation\CanIf.c	  3859   *
; ..\component\CanIf\Implementation\CanIf.c	  3860   * NOTE:
; ..\component\CanIf\Implementation\CanIf.c	  3861   * - rxSearchParams->eContinueSearch == FALSE -> signals match FOUND otherwise NOT found
; ..\component\CanIf\Implementation\CanIf.c	  3862   * - Within rxSearchParams->eRxPduIdMatch already possible match-candidate is stored. If NO message-type-match found then this one must be set to CanIf_RxPduHnd_INVALID!
; ..\component\CanIf\Implementation\CanIf.c	  3863   */
; ..\component\CanIf\Implementation\CanIf.c	  3864  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubBinarySearchSubCheckMsgType(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams)
; ..\component\CanIf\Implementation\CanIf.c	  3865  {
; ..\component\CanIf\Implementation\CanIf.c	  3866    /* #100 Verify the message type regarding FD format */
; ..\component\CanIf\Implementation\CanIf.c	  3867    if ((CANIF_CFG_RX_MSGTYPE(rxSearchParams->eRxPduIdMatch) == CANIF_MSG_TYPE_CAN) || (CANIF_CFG_RX_MSGTYPE(rxSearchParams->eRxPduIdMatch) == rxSearchParams->eRxMsgType))
; ..\component\CanIf\Implementation\CanIf.c	  3868    {
; ..\component\CanIf\Implementation\CanIf.c	  3869      /* \trace SPEC-3677, SPEC-1230 */
; ..\component\CanIf\Implementation\CanIf.c	  3870      /* eRxPduIdMatch already set correctly */
; ..\component\CanIf\Implementation\CanIf.c	  3871      rxSearchParams->eContinueSearch = FALSE; /* no range search necessary */ /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3872    }
; ..\component\CanIf\Implementation\CanIf.c	  3873    else
; ..\component\CanIf\Implementation\CanIf.c	  3874    {
; ..\component\CanIf\Implementation\CanIf.c	  3875      /* #110 If message type does NOT match verify the "neighbours" for matching of CAN identifier and message type (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  3876      if(rxSearchParams->eRxPduIdMatch < CANIF_CFG_MAILBOX_PDUIDLAST(rxSearchParams->eHrh)) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  3877      {
; ..\component\CanIf\Implementation\CanIf.c	  3878        /* Verify the UPPER neighbor: CAN identifier */
; ..\component\CanIf\Implementation\CanIf.c	  3879        if(rxSearchParams->eCanId == CANIF_CFG_RX_CANID(rxSearchParams->eRxPduIdMatch + 1u)) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  3880        {
; ..\component\CanIf\Implementation\CanIf.c	  3881          /* Verify the UPPER neighbor: message type */
; ..\component\CanIf\Implementation\CanIf.c	  3882          /* There must not be two different Rx-PDUs configured with the same CAN ID and the same FD identifier but who knows -> redundant validation */
; ..\component\CanIf\Implementation\CanIf.c	  3883          if(CANIF_CFG_RX_MSGTYPE(rxSearchParams->eRxPduIdMatch + 1u) == rxSearchParams->eRxMsgType) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  3884          {
; ..\component\CanIf\Implementation\CanIf.c	  3885            rxSearchParams->eRxPduIdMatch = rxSearchParams->eRxPduIdMatch + 1u; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3886            rxSearchParams->eContinueSearch = FALSE; /* no range search necessary */ /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3887          }
; ..\component\CanIf\Implementation\CanIf.c	  3888        }
; ..\component\CanIf\Implementation\CanIf.c	  3889      }
; ..\component\CanIf\Implementation\CanIf.c	  3890  
; ..\component\CanIf\Implementation\CanIf.c	  3891      if(rxSearchParams->eContinueSearch == TRUE) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  3892      {
; ..\component\CanIf\Implementation\CanIf.c	  3893        if(rxSearchParams->eRxPduIdMatch > CANIF_CFG_MAILBOX_PDUIDFIRST(rxSearchParams->eHrh) )
; ..\component\CanIf\Implementation\CanIf.c	  3894        {
; ..\component\CanIf\Implementation\CanIf.c	  3895          /* Verify the LOWER neighbor: CAN identifier */
; ..\component\CanIf\Implementation\CanIf.c	  3896          if(rxSearchParams->eCanId == CANIF_CFG_RX_CANID(rxSearchParams->eRxPduIdMatch - 1u)) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  3897          {
; ..\component\CanIf\Implementation\CanIf.c	  3898            /* Verify the LOWER neighbor: message type */
; ..\component\CanIf\Implementation\CanIf.c	  3899            /* There must not be two different Rx-PDUs configured with the same CAN ID and the same FD identifier but who knows -> redundant validation */
; ..\component\CanIf\Implementation\CanIf.c	  3900            if(CANIF_CFG_RX_MSGTYPE(rxSearchParams->eRxPduIdMatch - 1u) == rxSearchParams->eRxMsgType) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  3901            {
; ..\component\CanIf\Implementation\CanIf.c	  3902              rxSearchParams->eRxPduIdMatch = rxSearchParams->eRxPduIdMatch - 1u; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3903              rxSearchParams->eContinueSearch = FALSE; /* no range search necessary */ /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3904            }
; ..\component\CanIf\Implementation\CanIf.c	  3905          }
; ..\component\CanIf\Implementation\CanIf.c	  3906        }
; ..\component\CanIf\Implementation\CanIf.c	  3907      }
; ..\component\CanIf\Implementation\CanIf.c	  3908  
; ..\component\CanIf\Implementation\CanIf.c	  3909      /* Verify whether any match found? */
; ..\component\CanIf\Implementation\CanIf.c	  3910      if (rxSearchParams->eContinueSearch == TRUE)
; ..\component\CanIf\Implementation\CanIf.c	  3911      {
; ..\component\CanIf\Implementation\CanIf.c	  3912        /* NO match found */
; ..\component\CanIf\Implementation\CanIf.c	  3913        rxSearchParams->eRxPduIdMatch = CanIf_RxPduHnd_INVALID; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3914      }
; ..\component\CanIf\Implementation\CanIf.c	  3915    }
; ..\component\CanIf\Implementation\CanIf.c	  3916  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  3917  # endif /* (CANIF_RX_SEARCH_CONSIDER_MSG_TYPE == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  3918  #endif /* CANIF_SEARCH_ALGORITHM == CANIF_BINARY */
; ..\component\CanIf\Implementation\CanIf.c	  3919  
; ..\component\CanIf\Implementation\CanIf.c	  3920  
; ..\component\CanIf\Implementation\CanIf.c	  3921  #if (CANIF_SEARCH_ALGORITHM == CANIF_DOUBLE_HASH)
; ..\component\CanIf\Implementation\CanIf.c	  3922  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  3923   *  CanIf_RxIndicationSubDoubleHashSearch()
; ..\component\CanIf\Implementation\CanIf.c	  3924   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  3925  /*
; ..\component\CanIf\Implementation\CanIf.c	  3926  |<DataModelStart>| CanIf_RxIndicationSubDoubleHashSearch
; ..\component\CanIf\Implementation\CanIf.c	  3927  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  3928  CanIfRxSearch # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  3929  CanIfRxSearch # from caller CanIf_RxIndicationSubBasicCan #
; ..\component\CanIf\Implementation\CanIf.c	  3930  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  3931  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  3932  CanIfRxSearchMsgType
; ..\component\CanIf\Implementation\CanIf.c	  3933  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  3934  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  3935  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  3936  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  3937  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  3938  */
; ..\component\CanIf\Implementation\CanIf.c	  3939   /*!
; ..\component\CanIf\Implementation\CanIf.c	  3940   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  3941   *
; ..\component\CanIf\Implementation\CanIf.c	  3942   *
; ..\component\CanIf\Implementation\CanIf.c	  3943   *
; ..\component\CanIf\Implementation\CanIf.c	  3944   *
; ..\component\CanIf\Implementation\CanIf.c	  3945   *
; ..\component\CanIf\Implementation\CanIf.c	  3946   *
; ..\component\CanIf\Implementation\CanIf.c	  3947   *
; ..\component\CanIf\Implementation\CanIf.c	  3948   *
; ..\component\CanIf\Implementation\CanIf.c	  3949   */
; ..\component\CanIf\Implementation\CanIf.c	  3950  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubDoubleHashSearch(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams)
; ..\component\CanIf\Implementation\CanIf.c	  3951  {
; ..\component\CanIf\Implementation\CanIf.c	  3952    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3953    Can_IdType hash1;
; ..\component\CanIf\Implementation\CanIf.c	  3954    Can_IdType hash2;
; ..\component\CanIf\Implementation\CanIf.c	  3955    uint16_least dhCalcRxPduId; /* ESCAN00087755 */
; ..\component\CanIf\Implementation\CanIf.c	  3956    uint8 errorId = CANIF_E_NO_ERROR; /* ESCAN00087755 */
; ..\component\CanIf\Implementation\CanIf.c	  3957  
; ..\component\CanIf\Implementation\CanIf.c	  3958    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  3959    /* \trace SPEC-3746 */
; ..\component\CanIf\Implementation\CanIf.c	  3960    /* \trace SPEC-1911 */
; ..\component\CanIf\Implementation\CanIf.c	  3961    /* #100 Calculate the RxPduId basing on received CAN identifier and the double hash numbers */
; ..\component\CanIf\Implementation\CanIf.c	  3962    hash1 = (rxSearchParams->eCanId ^ (Can_IdType)CANIF_CFG_RXDHRANDOMNUMBER1(CANIF_CFG_MAILBOX_CONTROLLER(rxSearchParams->eHrh))) % (Can_IdType)CANIF_CFG_RXDHADJUSTCOUNT;
; ..\component\CanIf\Implementation\CanIf.c	  3963    hash2 = (rxSearchParams->eCanId ^ (Can_IdType)CANIF_CFG_RXDHRANDOMNUMBER2(CANIF_CFG_MAILBOX_CONTROLLER(rxSearchParams->eHrh))) % (Can_IdType)CANIF_CFG_RXDHADJUSTCOUNT;
; ..\component\CanIf\Implementation\CanIf.c	  3964    dhCalcRxPduId = (uint16_least)CANIF_CFG_RXDHADJUST(hash1) + (uint16_least)CANIF_CFG_RXDHADJUST(hash2);
; ..\component\CanIf\Implementation\CanIf.c	  3965  
; ..\component\CanIf\Implementation\CanIf.c	  3966    if (dhCalcRxPduId >= CANIF_CFG_MAX_RXPDUS) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  3967    {
; ..\component\CanIf\Implementation\CanIf.c	  3968      /* #110 If calculated RxPduId exceeds the number of configured Rx-PDUs reduce the calculated one by number of Rx-PDUs */
; ..\component\CanIf\Implementation\CanIf.c	  3969      rxSearchParams->eRxPduId = (PduIdType)(dhCalcRxPduId - CANIF_CFG_MAX_RXPDUS); /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3970    }
; ..\component\CanIf\Implementation\CanIf.c	  3971    else
; ..\component\CanIf\Implementation\CanIf.c	  3972    {
; ..\component\CanIf\Implementation\CanIf.c	  3973      rxSearchParams->eRxPduId = (PduIdType)(dhCalcRxPduId); /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3974    }
; ..\component\CanIf\Implementation\CanIf.c	  3975  
; ..\component\CanIf\Implementation\CanIf.c	  3976    /* #120 Verify the CAN identifier for matching */
; ..\component\CanIf\Implementation\CanIf.c	  3977    if (CANIF_CFG_RX_CANID(rxSearchParams->eRxPduId) == rxSearchParams->eCanId)
; ..\component\CanIf\Implementation\CanIf.c	  3978    {
; ..\component\CanIf\Implementation\CanIf.c	  3979  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3980      /* #10 Check if the matched RxPduId calculated via double hash is in valid range (== matches the corresponding CAN channel, ESCAN00087755). */
; ..\component\CanIf\Implementation\CanIf.c	  3981      if ((rxSearchParams->eRxPduId >= CANIF_CFG_MAILBOX_PDUIDFIRST(rxSearchParams->eHrh)) && (rxSearchParams->eRxPduId <= CANIF_CFG_MAILBOX_PDUIDLAST(rxSearchParams->eHrh))) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  3982  # endif
; ..\component\CanIf\Implementation\CanIf.c	  3983      {
; ..\component\CanIf\Implementation\CanIf.c	  3984        /* #130 If CAN identifier matches verify the message type regarding FD format (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  3985  # if (CANIF_RX_SEARCH_CONSIDER_MSG_TYPE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3986        if ((CANIF_CFG_RX_MSGTYPE(rxSearchParams->eRxPduId) == CANIF_MSG_TYPE_CAN) || (CANIF_CFG_RX_MSGTYPE(rxSearchParams->eRxPduId) == rxSearchParams->eRxMsgType))
; ..\component\CanIf\Implementation\CanIf.c	  3987  # endif
; ..\component\CanIf\Implementation\CanIf.c	  3988        {
; ..\component\CanIf\Implementation\CanIf.c	  3989          /* \trace SPEC-3677 */ /* ID matches - Pdu identified */
; ..\component\CanIf\Implementation\CanIf.c	  3990          rxSearchParams->eRxPduIdMatch = rxSearchParams->eRxPduId;  /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3991          rxSearchParams->eContinueSearch = FALSE; /* no range search necessary */ /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  3992        }
; ..\component\CanIf\Implementation\CanIf.c	  3993  # if (CANIF_RX_SEARCH_CONSIDER_MSG_TYPE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  3994        else
; ..\component\CanIf\Implementation\CanIf.c	  3995        {
; ..\component\CanIf\Implementation\CanIf.c	  3996          /* #140 If message type does NOT match verify the CAN identifier and message type of the lower neighbour one (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  3997          /* Make sure that eRxPduId does not point on the last Basic CAN ID with decided CAN Identifier, increment does not effect pointer on range */
; ..\component\CanIf\Implementation\CanIf.c	  3998          if(rxSearchParams->eRxPduId > CANIF_CFG_MAILBOX_PDUIDFIRST(rxSearchParams->eHrh))
; ..\component\CanIf\Implementation\CanIf.c	  3999          {
; ..\component\CanIf\Implementation\CanIf.c	  4000            rxSearchParams->eRxPduId--;  /* for double hash the hash hits always for the msg with the higher prio if the CAN ID exist for two times */ /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  4001            if ((CANIF_CFG_RX_CANID(rxSearchParams->eRxPduId) & (~CANIF_FDFLAG)) == rxSearchParams->eCanId) /* Fix of ESCAN00092931 */
; ..\component\CanIf\Implementation\CanIf.c	  4002            {
; ..\component\CanIf\Implementation\CanIf.c	  4003              if(CANIF_CFG_RX_MSGTYPE(rxSearchParams->eRxPduId) == rxSearchParams->eRxMsgType) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  4004              {
; ..\component\CanIf\Implementation\CanIf.c	  4005                /* \trace SPEC-3677 */ /* ID matches - Pdu identified */
; ..\component\CanIf\Implementation\CanIf.c	  4006                rxSearchParams->eRxPduIdMatch = rxSearchParams->eRxPduId; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  4007                rxSearchParams->eContinueSearch = FALSE; /* no range search necessary */ /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  4008              }
; ..\component\CanIf\Implementation\CanIf.c	  4009            }
; ..\component\CanIf\Implementation\CanIf.c	  4010          }
; ..\component\CanIf\Implementation\CanIf.c	  4011        }
; ..\component\CanIf\Implementation\CanIf.c	  4012  # endif
; ..\component\CanIf\Implementation\CanIf.c	  4013      }
; ..\component\CanIf\Implementation\CanIf.c	  4014  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4015      else
; ..\component\CanIf\Implementation\CanIf.c	  4016      {
; ..\component\CanIf\Implementation\CanIf.c	  4017        /* #20 The RxPduId calculated via double hash algorithm is NOT in valid range. Report this error. */
; ..\component\CanIf\Implementation\CanIf.c	  4018        errorId = CANIF_E_INVALID_DOUBLEHASH_CALC;
; ..\component\CanIf\Implementation\CanIf.c	  4019      }
; ..\component\CanIf\Implementation\CanIf.c	  4020  # endif
; ..\component\CanIf\Implementation\CanIf.c	  4021    }
; ..\component\CanIf\Implementation\CanIf.c	  4022  
; ..\component\CanIf\Implementation\CanIf.c	  4023    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  4024  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4025    if (errorId != CANIF_E_NO_ERROR) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  4026    {
; ..\component\CanIf\Implementation\CanIf.c	  4027      CanIf_Det_ReportError(CANIF_RXINDICATION_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  4028    }
; ..\component\CanIf\Implementation\CanIf.c	  4029  # else
; ..\component\CanIf\Implementation\CanIf.c	  4030    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  4031  # endif
; ..\component\CanIf\Implementation\CanIf.c	  4032  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  4033  #endif /* CANIF_SEARCH_ALGORITHM == CANIF_DOUBLE_HASH */
; ..\component\CanIf\Implementation\CanIf.c	  4034  
; ..\component\CanIf\Implementation\CanIf.c	  4035  
; ..\component\CanIf\Implementation\CanIf.c	  4036  #if (CANIF_SEARCH_ALGORITHM == CANIF_LINEAR)
; ..\component\CanIf\Implementation\CanIf.c	  4037  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  4038   *  CanIf_RxIndicationSubLinearSearch()
; ..\component\CanIf\Implementation\CanIf.c	  4039   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  4040  /*
; ..\component\CanIf\Implementation\CanIf.c	  4041  |<DataModelStart>| CanIf_RxIndicationSubLinearSearch
; ..\component\CanIf\Implementation\CanIf.c	  4042  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  4043  CanIfRxSearch # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  4044  CanIfRxSearch # from caller CanIf_RxIndicationSubBasicCan #
; ..\component\CanIf\Implementation\CanIf.c	  4045  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  4046  CanIfRxSearchMsgType
; ..\component\CanIf\Implementation\CanIf.c	  4047  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  4048  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  4049  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  4050  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  4051  */
; ..\component\CanIf\Implementation\CanIf.c	  4052   /*!
; ..\component\CanIf\Implementation\CanIf.c	  4053   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  4054   *
; ..\component\CanIf\Implementation\CanIf.c	  4055   *
; ..\component\CanIf\Implementation\CanIf.c	  4056   *
; ..\component\CanIf\Implementation\CanIf.c	  4057   *
; ..\component\CanIf\Implementation\CanIf.c	  4058   *
; ..\component\CanIf\Implementation\CanIf.c	  4059   */
; ..\component\CanIf\Implementation\CanIf.c	  4060  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubLinearSearch(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; Function CanIf_RxIndicationSubLinearSearch
.L263:
CanIf_RxIndicationSubLinearSearch:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  4061  {
; ..\component\CanIf\Implementation\CanIf.c	  4062    /* \trace SPEC-3746 */
; ..\component\CanIf\Implementation\CanIf.c	  4063    /* \trace SPEC-1911 */
; ..\component\CanIf\Implementation\CanIf.c	  4064    /* Basic CAN message */
; ..\component\CanIf\Implementation\CanIf.c	  4065    /* Checked for invalid RxPduId earlier */
; ..\component\CanIf\Implementation\CanIf.c	  4066  
; ..\component\CanIf\Implementation\CanIf.c	  4067    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  4068  
; ..\component\CanIf\Implementation\CanIf.c	  4069    /* #100 Run linear through whole search area until the first Rx-range */
; ..\component\CanIf\Implementation\CanIf.c	  4070    while (((CANIF_CFG_RX_MASK(rxSearchParams->eRxPduId) & CANIF_RANGE_FLAG) != CANIF_RANGE_FLAG)) /* PRQA S 0771 */ /* MD_CanIf_MultipleBreak */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
	movh.a	a2,#@his(CanIf_RxPduConfig)
	lea	a2,[a2]@los(CanIf_RxPduConfig)
.L1063:
	j	.L99
.L100:

; ..\component\CanIf\Implementation\CanIf.c	  4071    {
; ..\component\CanIf\Implementation\CanIf.c	  4072      /* #110 Check the CAN identifier for matching */
; ..\component\CanIf\Implementation\CanIf.c	  4073      if (CANIF_CFG_RX_CANID(rxSearchParams->eRxPduId) == rxSearchParams->eCanId)
	ld.bu	d0,[a4]2
.L1064:
	ld.hu	d1,[a4]0
.L1065:
	mul	d15,d0,#6
	addsc.a	a15,a2,d15,#0
	ld.bu	d15,[a15]4
.L1066:
	jne	d15,d1,.L101
.L1067:

; ..\component\CanIf\Implementation\CanIf.c	  4074      {
; ..\component\CanIf\Implementation\CanIf.c	  4075        /* #120 If CAN identifier matches verify the message type regarding FD format (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  4076  # if (CANIF_RX_SEARCH_CONSIDER_MSG_TYPE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4077        if ((CANIF_CFG_RX_MSGTYPE(rxSearchParams->eRxPduId)  == CANIF_MSG_TYPE_CAN) || (CANIF_CFG_RX_MSGTYPE(rxSearchParams->eRxPduId) == rxSearchParams->eRxMsgType))
; ..\component\CanIf\Implementation\CanIf.c	  4078  # endif
; ..\component\CanIf\Implementation\CanIf.c	  4079        {
; ..\component\CanIf\Implementation\CanIf.c	  4080          /* ID matches - Pdu identified */ /* \trace SPEC-3677 */
; ..\component\CanIf\Implementation\CanIf.c	  4081          rxSearchParams->eRxPduIdMatch = rxSearchParams->eRxPduId; /* SBSW_CANIF_9 */
	st.b	[a4]3,d0
.L1068:

; ..\component\CanIf\Implementation\CanIf.c	  4082          rxSearchParams->eContinueSearch = FALSE; /* no range search necessary */ /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  4083          break;
	j	.L102
.L101:

; ..\component\CanIf\Implementation\CanIf.c	  4084        }
; ..\component\CanIf\Implementation\CanIf.c	  4085      }
; ..\component\CanIf\Implementation\CanIf.c	  4086  
; ..\component\CanIf\Implementation\CanIf.c	  4087      if ((CANIF_CFG_RX_MASK(rxSearchParams->eRxPduId) & CANIF_STOP_FLAG) != 0u)  /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
	ld.hu	d15,[a15]0
.L1069:
	jz.t	d15:14,.L103

; ..\component\CanIf\Implementation\CanIf.c	  4088      {
; ..\component\CanIf\Implementation\CanIf.c	  4089        /* #130 If search range completed do break the search */
; ..\component\CanIf\Implementation\CanIf.c	  4090        rxSearchParams->eContinueSearch = FALSE; /* no range search necessary */ /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  4091        break;
; ..\component\CanIf\Implementation\CanIf.c	  4092      }
; ..\component\CanIf\Implementation\CanIf.c	  4093      else
; ..\component\CanIf\Implementation\CanIf.c	  4094      {
; ..\component\CanIf\Implementation\CanIf.c	  4095        rxSearchParams->eRxPduId--; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  4096      }
; ..\component\CanIf\Implementation\CanIf.c	  4097    }
; ..\component\CanIf\Implementation\CanIf.c	  4098  }
.L102:
	mov	d15,#0
	st.b	[a4]5,d15
.L1070:
	ret
.L103:
	add	d15,d0,#-1
	st.b	[a4]2,d15
.L99:
	ld.bu	d15,[a4]2
	mul	d15,d15,#6
	addsc.a	a15,a2,d15,#0
	ld.hu	d15,[a15]0
.L1071:
	jz.t	d15:13,.L100
.L1072:
	ret
.L642:
	
__CanIf_RxIndicationSubLinearSearch_function_end:
	.size	CanIf_RxIndicationSubLinearSearch,__CanIf_RxIndicationSubLinearSearch_function_end-CanIf_RxIndicationSubLinearSearch
.L398:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_RxIndicationSubReceptionPduMode',code,cluster('CanIf_RxIndicationSubReceptionPduMode')
	.sect	'.text.CanIf.CanIf_RxIndicationSubReceptionPduMode'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  4099  #endif /* CANIF_SEARCH_ALGORITHM == CANIF_LINEAR */
; ..\component\CanIf\Implementation\CanIf.c	  4100  
; ..\component\CanIf\Implementation\CanIf.c	  4101  
; ..\component\CanIf\Implementation\CanIf.c	  4102  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  4103   *  CanIf_RxIndicationSubReceptionPduMode()
; ..\component\CanIf\Implementation\CanIf.c	  4104   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  4105  /*
; ..\component\CanIf\Implementation\CanIf.c	  4106  |<DataModelStart>| CanIf_RxIndicationSubReceptionPduMode
; ..\component\CanIf\Implementation\CanIf.c	  4107  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  4108  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  4109  CanIfRxPduReceptionMode, CanIfRxSearchMsgType
; ..\component\CanIf\Implementation\CanIf.c	  4110  CanIfRxSearchMsgType
; ..\component\CanIf\Implementation\CanIf.c	  4111  CanIfRxPduReceptionMode
; ..\component\CanIf\Implementation\CanIf.c	  4112  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  4113  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  4114  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  4115  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  4116  */
; ..\component\CanIf\Implementation\CanIf.c	  4117   /*!
; ..\component\CanIf\Implementation\CanIf.c	  4118   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  4119   *
; ..\component\CanIf\Implementation\CanIf.c	  4120   *
; ..\component\CanIf\Implementation\CanIf.c	  4121   *
; ..\component\CanIf\Implementation\CanIf.c	  4122   *
; ..\component\CanIf\Implementation\CanIf.c	  4123   *
; ..\component\CanIf\Implementation\CanIf.c	  4124   */
; ..\component\CanIf\Implementation\CanIf.c	  4125  CANIF_LOCAL_INLINE FUNC(CanIf_NotifStatusType, CANIF_CODE) CanIf_RxIndicationSubReceptionPduMode(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams)
; Function CanIf_RxIndicationSubReceptionPduMode
.L265:
CanIf_RxIndicationSubReceptionPduMode:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  4126  {
; ..\component\CanIf\Implementation\CanIf.c	  4127    CanIf_NotifStatusType retVal;
; ..\component\CanIf\Implementation\CanIf.c	  4128  #if (CANIF_SET_PDU_RECEPTION_MODE_SUPPORT == STD_ON) || (CANIF_RX_SEARCH_CONSIDER_MSG_TYPE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4129    retVal = CANIF_NO_NOTIFICATION;
; ..\component\CanIf\Implementation\CanIf.c	  4130  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4131  #if (CANIF_RX_SEARCH_CONSIDER_MSG_TYPE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4132    /* #100 Check the message type regarding FD format (only if configured) */ 
; ..\component\CanIf\Implementation\CanIf.c	  4133    if ((CANIF_CFG_RX_MSGTYPE(rxSearchParams->eRxPduId)  == CANIF_MSG_TYPE_CAN) || (CANIF_CFG_RX_MSGTYPE(rxSearchParams->eRxPduId) == rxSearchParams->eRxMsgType))
; ..\component\CanIf\Implementation\CanIf.c	  4134  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4135    {
; ..\component\CanIf\Implementation\CanIf.c	  4136  #if (CANIF_SET_PDU_RECEPTION_MODE_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4137      /* #200 Check the PDU reception mode */
; ..\component\CanIf\Implementation\CanIf.c	  4138      if (CANIF_CFG_RX_ISRECEPTIONMODEPDU(rxSearchParams->eRxPduId))
; ..\component\CanIf\Implementation\CanIf.c	  4139      {
; ..\component\CanIf\Implementation\CanIf.c	  4140        if (CANIF_VAR_GET_PDU_RECEPTION_MODE(CANIF_CFG_RX_PDURECEPTIONMODEIDX(rxSearchParams->eRxPduId)) == CANIF_RMT_RECEIVE_STOP)
; ..\component\CanIf\Implementation\CanIf.c	  4141  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4142        {
; ..\component\CanIf\Implementation\CanIf.c	  4143          /* #210 CAN ID matches - Pdu Id identified - break the search */
; ..\component\CanIf\Implementation\CanIf.c	  4144          rxSearchParams->eRxPduIdMatch = rxSearchParams->eRxPduId; /* SBSW_CANIF_9 */
	ld.bu	d15,[a4]2
.L1077:
	st.b	[a4]3,d15
.L1078:

; ..\component\CanIf\Implementation\CanIf.c	  4145          retVal = CANIF_TX_RX_NOTIFICATION;
; ..\component\CanIf\Implementation\CanIf.c	  4146        }
; ..\component\CanIf\Implementation\CanIf.c	  4147  #if (CANIF_SET_PDU_RECEPTION_MODE_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4148      }
; ..\component\CanIf\Implementation\CanIf.c	  4149      else
; ..\component\CanIf\Implementation\CanIf.c	  4150      /* #300 CAN ID matches - Pdu Id identified - break the search (no PduReceptioMode PDU) */            
; ..\component\CanIf\Implementation\CanIf.c	  4151      {
; ..\component\CanIf\Implementation\CanIf.c	  4152        rxSearchParams->eRxPduIdMatch = rxSearchParams->eRxPduId; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  4153        retVal = CANIF_TX_RX_NOTIFICATION;
; ..\component\CanIf\Implementation\CanIf.c	  4154      }
; ..\component\CanIf\Implementation\CanIf.c	  4155  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4156    }  
; ..\component\CanIf\Implementation\CanIf.c	  4157    return retVal;
; ..\component\CanIf\Implementation\CanIf.c	  4158  }
	mov	d2,#1
	ret
.L646:
	
__CanIf_RxIndicationSubReceptionPduMode_function_end:
	.size	CanIf_RxIndicationSubReceptionPduMode,__CanIf_RxIndicationSubReceptionPduMode_function_end-CanIf_RxIndicationSubReceptionPduMode
.L403:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_RxIndicationSubRangeSearch',code,cluster('CanIf_RxIndicationSubRangeSearch')
	.sect	'.text.CanIf.CanIf_RxIndicationSubRangeSearch'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  4159  
; ..\component\CanIf\Implementation\CanIf.c	  4160  
; ..\component\CanIf\Implementation\CanIf.c	  4161  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  4162   *  CanIf_RxIndicationSubRangeSearch()
; ..\component\CanIf\Implementation\CanIf.c	  4163   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  4164  /*
; ..\component\CanIf\Implementation\CanIf.c	  4165  |<DataModelStart>| CanIf_RxIndicationSubRangeSearch
; ..\component\CanIf\Implementation\CanIf.c	  4166  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  4167  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  4168  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  4169  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  4170  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  4171  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  4172  */
; ..\component\CanIf\Implementation\CanIf.c	  4173   /*!
; ..\component\CanIf\Implementation\CanIf.c	  4174   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  4175   *
; ..\component\CanIf\Implementation\CanIf.c	  4176   *
; ..\component\CanIf\Implementation\CanIf.c	  4177   *
; ..\component\CanIf\Implementation\CanIf.c	  4178   *
; ..\component\CanIf\Implementation\CanIf.c	  4179   *
; ..\component\CanIf\Implementation\CanIf.c	  4180   *
; ..\component\CanIf\Implementation\CanIf.c	  4181   *
; ..\component\CanIf\Implementation\CanIf.c	  4182   *
; ..\component\CanIf\Implementation\CanIf.c	  4183   *
; ..\component\CanIf\Implementation\CanIf.c	  4184   *
; ..\component\CanIf\Implementation\CanIf.c	  4185   *
; ..\component\CanIf\Implementation\CanIf.c	  4186   */
; ..\component\CanIf\Implementation\CanIf.c	  4187  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubRangeSearch(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams) /* COV_CANIF_NO_RANGE_SEARCH */
; Function CanIf_RxIndicationSubRangeSearch
.L267:
CanIf_RxIndicationSubRangeSearch:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  4188  {
; ..\component\CanIf\Implementation\CanIf.c	  4189    /* #100 Run linear through Rx-range search area until the last Rx-range */
; ..\component\CanIf\Implementation\CanIf.c	  4190    while ((CANIF_CFG_RX_MASK(rxSearchParams->eRxPduId) & (CANIF_STOP_FLAG | CANIF_RANGE_FLAG)) == CANIF_RANGE_FLAG) /* PRQA S 0771 */ /* MD_CanIf_MultipleBreak */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
	mov	d8,#8192
	movh.a	a12,#@his(CanIf_RxPduConfig)
.L1083:
	mov	d9,#24576
	mov.aa	a15,a4
.L744:
	lea	a12,[a12]@los(CanIf_RxPduConfig)
.L1084:
	j	.L106
.L107:

; ..\component\CanIf\Implementation\CanIf.c	  4191    {
; ..\component\CanIf\Implementation\CanIf.c	  4192      /* #110 Handle code-mask Rx-range */
; ..\component\CanIf\Implementation\CanIf.c	  4193      if ((CANIF_CFG_RX_CANID(rxSearchParams->eRxPduId) & CANIF_MASKCODE_RANGE) == CANIF_MASKCODE_RANGE) /* PRQA S 2992, 2996 */ /* MD_CanIf_RxPduConstData */
; ..\component\CanIf\Implementation\CanIf.c	  4194      {
; ..\component\CanIf\Implementation\CanIf.c	  4195        if (CANIF_CFG_RX_CANID(rxSearchParams->eRxPduId) == ((rxSearchParams->eCanId & (CANIF_CFG_RX_MASK(rxSearchParams->eRxPduId) )) | CANIF_MASKCODE_RANGE )) /* PRQA S 2996 */ /* MD_CanIf_RxPduConstData */
; ..\component\CanIf\Implementation\CanIf.c	  4196        {
; ..\component\CanIf\Implementation\CanIf.c	  4197          /* #120 Check the message type regarding FD format and PDU reception mode */
; ..\component\CanIf\Implementation\CanIf.c	  4198          if (CanIf_RxIndicationSubReceptionPduMode(rxSearchParams) == CANIF_TX_RX_NOTIFICATION)  /* PRQA S 2991, 2995 */ /* MD_CanIf_RxPduConstData */ /* SBSW_CANIF_5 */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  4199          {
; ..\component\CanIf\Implementation\CanIf.c	  4200            break;
; ..\component\CanIf\Implementation\CanIf.c	  4201          }
; ..\component\CanIf\Implementation\CanIf.c	  4202        }
; ..\component\CanIf\Implementation\CanIf.c	  4203      }
; ..\component\CanIf\Implementation\CanIf.c	  4204      else
; ..\component\CanIf\Implementation\CanIf.c	  4205      /* #130 Handle upper-lower CAN identifier Rx-range */
; ..\component\CanIf\Implementation\CanIf.c	  4206      {
; ..\component\CanIf\Implementation\CanIf.c	  4207        if ((rxSearchParams->eCanId >= CANIF_CFG_RX_CANID(rxSearchParams->eRxPduId)) && (rxSearchParams->eCanId <= ((CANIF_CFG_RX_MASK(rxSearchParams->eRxPduId) & ~(CANIF_STOP_FLAG | CANIF_RANGE_FLAG)))))
	ld.bu	d15,[a15]2
	mul	d15,d15,#6
	addsc.a	a2,a12,d15,#0
.L1085:
	ld.hu	d0,[a15]0
.L1086:
	ld.bu	d15,[a2]4
.L1087:
	jlt.u	d0,d15,.L108
.L1088:
	ld.hu	d1,[a2]0
.L1089:
	insert	d1,d1,#0,#13,#2
.L1090:
	jlt.u	d1,d0,.L109
.L1091:

; ..\component\CanIf\Implementation\CanIf.c	  4208        {
; ..\component\CanIf\Implementation\CanIf.c	  4209          /* #140 Check the message type regarding FD format and PDU reception mode */
; ..\component\CanIf\Implementation\CanIf.c	  4210          if (CanIf_RxIndicationSubReceptionPduMode(rxSearchParams) == CANIF_TX_RX_NOTIFICATION) /* PRQA S 2991, 2995 */ /* MD_CanIf_RxPduConstData */ /* SBSW_CANIF_5 */ /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
	mov.aa	a4,a15
.L745:
	call	CanIf_RxIndicationSubReceptionPduMode
.L746:
	jeq	d2,#1,.L110
.L109:
.L108:

; ..\component\CanIf\Implementation\CanIf.c	  4211          {
; ..\component\CanIf\Implementation\CanIf.c	  4212            break;
; ..\component\CanIf\Implementation\CanIf.c	  4213          }
; ..\component\CanIf\Implementation\CanIf.c	  4214        }
; ..\component\CanIf\Implementation\CanIf.c	  4215      }
; ..\component\CanIf\Implementation\CanIf.c	  4216      rxSearchParams->eRxPduId--; /* SBSW_CANIF_9 */
	ld.bu	d15,[a15]2
.L1092:
	add	d15,#-1
	st.b	[a15]2,d15
.L106:
	ld.bu	d15,[a15]2
	mul	d15,d15,#6
	addsc.a	a2,a12,d15,#0
	ld.hu	d15,[a2]0
.L1093:
	and	d15,d9
.L1094:
	jeq	d15,d8,.L107

; ..\component\CanIf\Implementation\CanIf.c	  4217    } /* while-loop */
; ..\component\CanIf\Implementation\CanIf.c	  4218  
; ..\component\CanIf\Implementation\CanIf.c	  4219    /* #200 Process the last / if only one Rx-range is configured separately */
; ..\component\CanIf\Implementation\CanIf.c	  4220    if ((CANIF_CFG_RX_MASK(rxSearchParams->eRxPduId) & (CANIF_STOP_FLAG | CANIF_RANGE_FLAG)) == (CANIF_STOP_FLAG | CANIF_RANGE_FLAG)) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
.L110:
	ld.bu	d15,[a15]2
	mul	d15,d15,#6
	addsc.a	a2,a12,d15,#0
	ld.hu	d0,[a2]0
.L1095:
	and	d15,d0,d9
.L1096:
	jne	d15,d9,.L111
.L1097:

; ..\component\CanIf\Implementation\CanIf.c	  4221    {
; ..\component\CanIf\Implementation\CanIf.c	  4222      /* #210 Handle code-mask Rx-range */
; ..\component\CanIf\Implementation\CanIf.c	  4223      if ((CANIF_CFG_RX_CANID(rxSearchParams->eRxPduId) & CANIF_MASKCODE_RANGE) == CANIF_MASKCODE_RANGE) /* PRQA S 2992, 2996 */ /* MD_CanIf_RxPduConstData */
; ..\component\CanIf\Implementation\CanIf.c	  4224      {
; ..\component\CanIf\Implementation\CanIf.c	  4225        /* End flag for Search algorithm is set, this means no more messages to search for */
; ..\component\CanIf\Implementation\CanIf.c	  4226        if (CANIF_CFG_RX_CANID(rxSearchParams->eRxPduId) == ((rxSearchParams->eCanId & CANIF_CFG_RX_MASK(rxSearchParams->eRxPduId)) | CANIF_MASKCODE_RANGE )) /* PRQA S 2996 */ /* MD_CanIf_RxPduConstData */
; ..\component\CanIf\Implementation\CanIf.c	  4227        {
; ..\component\CanIf\Implementation\CanIf.c	  4228          /* #220 Check the message type regarding FD format and PDU reception mode */
; ..\component\CanIf\Implementation\CanIf.c	  4229          (void)CanIf_RxIndicationSubReceptionPduMode(rxSearchParams);  /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  4230        }
; ..\component\CanIf\Implementation\CanIf.c	  4231      }
; ..\component\CanIf\Implementation\CanIf.c	  4232      else
; ..\component\CanIf\Implementation\CanIf.c	  4233      /* #230 Handle upper-lower CAN identifier Rx-range */
; ..\component\CanIf\Implementation\CanIf.c	  4234      {
; ..\component\CanIf\Implementation\CanIf.c	  4235        /* End flag for Search algorithm is set, this means no more messages to search for */
; ..\component\CanIf\Implementation\CanIf.c	  4236        if ((rxSearchParams->eCanId >= CANIF_CFG_RX_CANID(rxSearchParams->eRxPduId)) && (rxSearchParams->eCanId <= ((CANIF_CFG_RX_MASK(rxSearchParams->eRxPduId) & ~(CANIF_STOP_FLAG | CANIF_RANGE_FLAG)))))
	ld.hu	d1,[a15]0
.L1098:
	ld.bu	d15,[a2]4
.L1099:
	jlt.u	d1,d15,.L112
.L1100:
	insert	d15,d0,#0,#13,#2
.L1101:
	jlt.u	d15,d1,.L113
.L1102:

; ..\component\CanIf\Implementation\CanIf.c	  4237        {
; ..\component\CanIf\Implementation\CanIf.c	  4238          /* #240 Check the message type regarding FD format and PDU reception mode */
; ..\component\CanIf\Implementation\CanIf.c	  4239          (void)CanIf_RxIndicationSubReceptionPduMode(rxSearchParams);  /* SBSW_CANIF_5 */
	mov.aa	a4,a15
.L747:
	j	CanIf_RxIndicationSubReceptionPduMode
.L113:
.L112:
.L111:

; ..\component\CanIf\Implementation\CanIf.c	  4240        }
; ..\component\CanIf\Implementation\CanIf.c	  4241      }
; ..\component\CanIf\Implementation\CanIf.c	  4242    }
; ..\component\CanIf\Implementation\CanIf.c	  4243  } /* PRQA S 6030 */ /* MD_MSR_STCYC */
	ret
.L648:
	
__CanIf_RxIndicationSubRangeSearch_function_end:
	.size	CanIf_RxIndicationSubRangeSearch,__CanIf_RxIndicationSubRangeSearch_function_end-CanIf_RxIndicationSubRangeSearch
.L408:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_RxIndicationSubBasicCan',code,cluster('CanIf_RxIndicationSubBasicCan')
	.sect	'.text.CanIf.CanIf_RxIndicationSubBasicCan'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  4244  
; ..\component\CanIf\Implementation\CanIf.c	  4245  
; ..\component\CanIf\Implementation\CanIf.c	  4246  #if ((CANIF_WAKEUP_VALIDATION == STD_ON) && (CANIF_WAKEUP_VALID_ALL_RX_MSGS == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  4247  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  4248   *  CanIf_RxIndicationSubWakeupValidation()
; ..\component\CanIf\Implementation\CanIf.c	  4249   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  4250  /*
; ..\component\CanIf\Implementation\CanIf.c	  4251  |<DataModelStart>| CanIf_RxIndicationSubWakeupValidation
; ..\component\CanIf\Implementation\CanIf.c	  4252  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  4253  CanIfWakeupValidation # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  4254  CanIfWakeupValidation # from caller CanIf_RxIndicationAsr403 #
; ..\component\CanIf\Implementation\CanIf.c	  4255  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  4256  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  4257  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  4258  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  4259  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  4260  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  4261  */
; ..\component\CanIf\Implementation\CanIf.c	  4262   /*!
; ..\component\CanIf\Implementation\CanIf.c	  4263   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  4264   *
; ..\component\CanIf\Implementation\CanIf.c	  4265   *
; ..\component\CanIf\Implementation\CanIf.c	  4266   */
; ..\component\CanIf\Implementation\CanIf.c	  4267  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubWakeupValidation(P2CONST(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams)
; ..\component\CanIf\Implementation\CanIf.c	  4268  {
; ..\component\CanIf\Implementation\CanIf.c	  4269    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  4270  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  4271    /* Acquire controller from CanIf_Mailbox struct */
; ..\component\CanIf\Implementation\CanIf.c	  4272    controller = CANIF_CFG_MAILBOX_CONTROLLER(rxSearchParams->eHrh);
; ..\component\CanIf\Implementation\CanIf.c	  4273  # else
; ..\component\CanIf\Implementation\CanIf.c	  4274    CANIF_DUMMY_STATEMENT(rxSearchParams); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  4275  # endif
; ..\component\CanIf\Implementation\CanIf.c	  4276    if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_STARTED)
; ..\component\CanIf\Implementation\CanIf.c	  4277    {
; ..\component\CanIf\Implementation\CanIf.c	  4278      /* \trace SPEC-21407 */ /* All messages will be used for validation only in controller mode STARTED */
; ..\component\CanIf\Implementation\CanIf.c	  4279      /* #100 If CAN channel is active set validation state to DETECTED (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  4280      CanIf_SetWakeUpValidationState(CanIf_Controller_Value_Local, CANIF_WUVALIDATION_DETECTED); /* SBSW_CANIF_19 */
; ..\component\CanIf\Implementation\CanIf.c	  4281    }
; ..\component\CanIf\Implementation\CanIf.c	  4282  }
; ..\component\CanIf\Implementation\CanIf.c	  4283  #endif /* ((CANIF_WAKEUP_VALIDATION == STD_ON) && (CANIF_WAKEUP_VALID_ALL_RX_MSGS == STD_ON)) */
; ..\component\CanIf\Implementation\CanIf.c	  4284  
; ..\component\CanIf\Implementation\CanIf.c	  4285  
; ..\component\CanIf\Implementation\CanIf.c	  4286  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  4287   *  CanIf_RxIndicationSubBasicCan()
; ..\component\CanIf\Implementation\CanIf.c	  4288   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  4289  /*
; ..\component\CanIf\Implementation\CanIf.c	  4290  |<DataModelStart>| CanIf_RxIndicationSubBasicCan
; ..\component\CanIf\Implementation\CanIf.c	  4291  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  4292  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  4293  CanIfRxSearch
; ..\component\CanIf\Implementation\CanIf.c	  4294  CanIfRxPduReceptionMode
; ..\component\CanIf\Implementation\CanIf.c	  4295  CanIfRxSearch, CanIfRxPduReceptionMode
; ..\component\CanIf\Implementation\CanIf.c	  4296  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  4297  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  4298  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  4299  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  4300  */
; ..\component\CanIf\Implementation\CanIf.c	  4301   /*!
; ..\component\CanIf\Implementation\CanIf.c	  4302   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  4303   *
; ..\component\CanIf\Implementation\CanIf.c	  4304   *
; ..\component\CanIf\Implementation\CanIf.c	  4305   *
; ..\component\CanIf\Implementation\CanIf.c	  4306   *
; ..\component\CanIf\Implementation\CanIf.c	  4307   *
; ..\component\CanIf\Implementation\CanIf.c	  4308   *
; ..\component\CanIf\Implementation\CanIf.c	  4309   *
; ..\component\CanIf\Implementation\CanIf.c	  4310   *
; ..\component\CanIf\Implementation\CanIf.c	  4311   *
; ..\component\CanIf\Implementation\CanIf.c	  4312   *
; ..\component\CanIf\Implementation\CanIf.c	  4313   */
; ..\component\CanIf\Implementation\CanIf.c	  4314  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_RxIndicationSubBasicCan(P2VAR(CanIf_RxSearchParamsType, AUTOMATIC, AUTOMATIC) rxSearchParams) /* COV_CANIF_FULLCAN */
; Function CanIf_RxIndicationSubBasicCan
.L269:
CanIf_RxIndicationSubBasicCan:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  4315  {
; ..\component\CanIf\Implementation\CanIf.c	  4316    rxSearchParams->eContinueSearch = TRUE; /* SBSW_CANIF_9 */
	mov	d15,#1
	mov.aa	a15,a4
.L748:
	st.b	[a15]5,d15
.L1116:

; ..\component\CanIf\Implementation\CanIf.c	  4317    /* #10 Check if not only ranges are configured */
; ..\component\CanIf\Implementation\CanIf.c	  4318    if((CANIF_CFG_RX_MASK(rxSearchParams->eRxPduId) & CANIF_RANGE_FLAG) != CANIF_RANGE_FLAG) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
	movh.a	a2,#@his(CanIf_RxPduConfig)
	ld.bu	d15,[a15]2
	lea	a2,[a2]@los(CanIf_RxPduConfig)
	mul	d15,d15,#6
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]0
.L1117:
	jnz.t	d15:13,.L114
.L1118:

; ..\component\CanIf\Implementation\CanIf.c	  4319    {
; ..\component\CanIf\Implementation\CanIf.c	  4320  #if (CANIF_SEARCH_ALGORITHM == CANIF_BINARY)
; ..\component\CanIf\Implementation\CanIf.c	  4321      /* #100 Binary search */
; ..\component\CanIf\Implementation\CanIf.c	  4322      CanIf_RxIndicationSubBinarySearch(rxSearchParams); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  4323  #endif /* CANIF_SEARCH_ALGORITHM == CANIF_BINARY */
; ..\component\CanIf\Implementation\CanIf.c	  4324  
; ..\component\CanIf\Implementation\CanIf.c	  4325  #if (CANIF_SEARCH_ALGORITHM == CANIF_DOUBLE_HASH)
; ..\component\CanIf\Implementation\CanIf.c	  4326      /* #200 DoubleHash search */
; ..\component\CanIf\Implementation\CanIf.c	  4327      CanIf_RxIndicationSubDoubleHashSearch(rxSearchParams); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  4328  #endif /* CANIF_SEARCH_ALGORITHM == CANIF_DOUBLE_HASH */
; ..\component\CanIf\Implementation\CanIf.c	  4329  
; ..\component\CanIf\Implementation\CanIf.c	  4330  #if (CANIF_SEARCH_ALGORITHM == CANIF_LINEAR)
; ..\component\CanIf\Implementation\CanIf.c	  4331      /* #300 Linear search */
; ..\component\CanIf\Implementation\CanIf.c	  4332      CanIf_RxIndicationSubLinearSearch(rxSearchParams); /* SBSW_CANIF_5 */
	call	CanIf_RxIndicationSubLinearSearch
.L114:

; ..\component\CanIf\Implementation\CanIf.c	  4333  #endif /* CANIF_SEARCH_ALGORITHM == CANIF_LINEAR */
; ..\component\CanIf\Implementation\CanIf.c	  4334  #if (CANIF_SET_PDU_RECEPTION_MODE_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4335      /* #400 Match found */
; ..\component\CanIf\Implementation\CanIf.c	  4336      if(rxSearchParams->eRxPduIdMatch != CanIf_RxPduHnd_INVALID)
; ..\component\CanIf\Implementation\CanIf.c	  4337      {
; ..\component\CanIf\Implementation\CanIf.c	  4338        /* #410 Check the PDU reception mode */
; ..\component\CanIf\Implementation\CanIf.c	  4339        if (CANIF_CFG_RX_ISRECEPTIONMODEPDU(rxSearchParams->eRxPduIdMatch))
; ..\component\CanIf\Implementation\CanIf.c	  4340        {
; ..\component\CanIf\Implementation\CanIf.c	  4341          /* #420 If Pdu reception mode for matched PDU is CANIF_RMT_IGNORE_CONTINUE, match will be discarded */
; ..\component\CanIf\Implementation\CanIf.c	  4342          if (CANIF_VAR_GET_PDU_RECEPTION_MODE(CANIF_CFG_RX_PDURECEPTIONMODEIDX(rxSearchParams->eRxPduIdMatch)) == CANIF_RMT_IGNORE_CONTINUE)
; ..\component\CanIf\Implementation\CanIf.c	  4343          {
; ..\component\CanIf\Implementation\CanIf.c	  4344            rxSearchParams->eRxPduIdMatch = CanIf_RxPduHnd_INVALID; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  4345            /* #430 If ranges are defined at all, range search will continue */
; ..\component\CanIf\Implementation\CanIf.c	  4346            if((CANIF_CFG_RX_MASK(CANIF_CFG_MAILBOX_PDUIDFIRST(rxSearchParams->eHrh)) & CANIF_STOP_FLAG) == 0u) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  4347            {
; ..\component\CanIf\Implementation\CanIf.c	  4348              rxSearchParams->eContinueSearch = TRUE; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  4349            }
; ..\component\CanIf\Implementation\CanIf.c	  4350          }
; ..\component\CanIf\Implementation\CanIf.c	  4351        }
; ..\component\CanIf\Implementation\CanIf.c	  4352      }
; ..\component\CanIf\Implementation\CanIf.c	  4353  #endif                  
; ..\component\CanIf\Implementation\CanIf.c	  4354      /* Ranges will be checked for all search algorithms */
; ..\component\CanIf\Implementation\CanIf.c	  4355      /* \trace SPEC-1911, SPEC-1844, SPEC-3704 */
; ..\component\CanIf\Implementation\CanIf.c	  4356  
; ..\component\CanIf\Implementation\CanIf.c	  4357  #if (CANIF_SEARCH_ALGORITHM != CANIF_LINEAR) || (CANIF_SET_PDU_RECEPTION_MODE_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4358      /* for doubleHash/binary search the RxPduId is still set on CANIF_CFG_MAILBOX(rxSearchParams.eHrh, ePduIdLast) */
; ..\component\CanIf\Implementation\CanIf.c	  4359      /* RxPduId needs to be set on CANIF_CFG_MAILBOX_PDUIDFIRST(rxSearchParams->eHrh) - 1 if Ranges are available */
; ..\component\CanIf\Implementation\CanIf.c	  4360      rxSearchParams->eRxPduId = CANIF_CFG_MAILBOX_PDUIDFIRST(rxSearchParams->eHrh); /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  4361      if((CANIF_CFG_RX_MASK(rxSearchParams->eRxPduId) & CANIF_STOP_FLAG) == 0u) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  4362      {
; ..\component\CanIf\Implementation\CanIf.c	  4363        rxSearchParams->eRxPduId--; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  4364      }
; ..\component\CanIf\Implementation\CanIf.c	  4365      else
; ..\component\CanIf\Implementation\CanIf.c	  4366      {
; ..\component\CanIf\Implementation\CanIf.c	  4367        rxSearchParams->eContinueSearch = FALSE; /* no ranges defined */ /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  4368      }
; ..\component\CanIf\Implementation\CanIf.c	  4369  #endif /* CANIF_SEARCH_ALGORITHM != CANIF_LINEAR */
; ..\component\CanIf\Implementation\CanIf.c	  4370    } /* ESCAN00079651 */
; ..\component\CanIf\Implementation\CanIf.c	  4371  
; ..\component\CanIf\Implementation\CanIf.c	  4372    /* #500 Search for Rx-ranges separately */
; ..\component\CanIf\Implementation\CanIf.c	  4373    if (rxSearchParams->eContinueSearch == TRUE) /* Range processing */ /* COV_CANIF_NO_RANGE_SEARCH */
	ld.bu	d15,[a15]5
.L1119:
	jne	d15,#1,.L115
.L1120:

; ..\component\CanIf\Implementation\CanIf.c	  4374    {
; ..\component\CanIf\Implementation\CanIf.c	  4375      CanIf_RxIndicationSubRangeSearch(rxSearchParams);  /* SBSW_CANIF_5 */
	mov.aa	a4,a15
.L749:
	j	CanIf_RxIndicationSubRangeSearch
.L115:

; ..\component\CanIf\Implementation\CanIf.c	  4376    }
; ..\component\CanIf\Implementation\CanIf.c	  4377  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	ret
.L654:
	
__CanIf_RxIndicationSubBasicCan_function_end:
	.size	CanIf_RxIndicationSubBasicCan,__CanIf_RxIndicationSubBasicCan_function_end-CanIf_RxIndicationSubBasicCan
.L418:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_RxIndicationAsr403',code,cluster('CanIf_RxIndicationAsr403')
	.sect	'.text.CanIf.CanIf_RxIndicationAsr403'
	.align	2
	
	.global	CanIf_RxIndicationAsr403

; ..\component\CanIf\Implementation\CanIf.c	  4378  
; ..\component\CanIf\Implementation\CanIf.c	  4379  
; ..\component\CanIf\Implementation\CanIf.c	  4380  /* \trace SPEC-1836, SPEC-1228, SPEC-1931, SPEC-1235 */
; ..\component\CanIf\Implementation\CanIf.c	  4381  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  4382   *  CanIf_RxIndicationAsr403()
; ..\component\CanIf\Implementation\CanIf.c	  4383   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  4384  /*
; ..\component\CanIf\Implementation\CanIf.c	  4385  |<DataModelStart>| CanIf_RxIndicationAsr403
; ..\component\CanIf\Implementation\CanIf.c	  4386  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  4387  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  4388  CanIfJ1939
; ..\component\CanIf\Implementation\CanIf.c	  4389  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  4390  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  4391  CanIfDevErrorDetect, CanIfIDType
; ..\component\CanIf\Implementation\CanIf.c	  4392  CanIfBusMirroringSupport
; ..\component\CanIf\Implementation\CanIf.c	  4393  CanIfRxSearchMsgType, CanIfRxMetaDataSupport, CanIfFdSupport # used because RxMetaData/MsgType is depending of Fd #
; ..\component\CanIf\Implementation\CanIf.c	  4394  CanIfPnEnable
; ..\component\CanIf\Implementation\CanIf.c	  4395  CanIfWakeupValidation
; ..\component\CanIf\Implementation\CanIf.c	  4396  CanIfJ1939
; ..\component\CanIf\Implementation\CanIf.c	  4397  CanIfRxFullCANSupport, CanIfRxBasicCANSupport
; ..\component\CanIf\Implementation\CanIf.c	  4398  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  4399  CanIfDataChecksum
; ..\component\CanIf\Implementation\CanIf.c	  4400  CanIfDataChecksum, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  4401  CanIfRxMetaDataSupport, CanIfFdSupport # used because RxMetaData is depending of Fd #
; ..\component\CanIf\Implementation\CanIf.c	  4402  CanIfRxIndicationUsedTypeIII, CanIfRxMetaDataSupport, CanIfRxIndicationUsedTypeIV
; ..\component\CanIf\Implementation\CanIf.c	  4403  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  4404  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  4405  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  4406  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  4407  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  4408  */
; ..\component\CanIf\Implementation\CanIf.c	  4409   /*!
; ..\component\CanIf\Implementation\CanIf.c	  4410   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  4411   *
; ..\component\CanIf\Implementation\CanIf.c	  4412   *
; ..\component\CanIf\Implementation\CanIf.c	  4413   *
; ..\component\CanIf\Implementation\CanIf.c	  4414   *
; ..\component\CanIf\Implementation\CanIf.c	  4415   *
; ..\component\CanIf\Implementation\CanIf.c	  4416   *
; ..\component\CanIf\Implementation\CanIf.c	  4417   *
; ..\component\CanIf\Implementation\CanIf.c	  4418   *
; ..\component\CanIf\Implementation\CanIf.c	  4419   *
; ..\component\CanIf\Implementation\CanIf.c	  4420   *
; ..\component\CanIf\Implementation\CanIf.c	  4421   *
; ..\component\CanIf\Implementation\CanIf.c	  4422   *
; ..\component\CanIf\Implementation\CanIf.c	  4423   *
; ..\component\CanIf\Implementation\CanIf.c	  4424   *
; ..\component\CanIf\Implementation\CanIf.c	  4425   *
; ..\component\CanIf\Implementation\CanIf.c	  4426   *
; ..\component\CanIf\Implementation\CanIf.c	  4427   *
; ..\component\CanIf\Implementation\CanIf.c	  4428   *
; ..\component\CanIf\Implementation\CanIf.c	  4429   *
; ..\component\CanIf\Implementation\CanIf.c	  4430   *
; ..\component\CanIf\Implementation\CanIf.c	  4431   *
; ..\component\CanIf\Implementation\CanIf.c	  4432   *
; ..\component\CanIf\Implementation\CanIf.c	  4433   */
; ..\component\CanIf\Implementation\CanIf.c	  4434  FUNC(void, CANIF_CODE) CanIf_RxIndicationAsr403(CanIf_HwHandleType Hrh, Can_IdType CanId, uint8 CanDlc, P2CONST(uint8, AUTOMATIC, CANIF_CBK_DRV_VAR)CanSduPtr)
; Function CanIf_RxIndicationAsr403
.L271:
CanIf_RxIndicationAsr403:	.type	func
	sub.a	a10,#8
.L750:
	mov	e8,d6,d4
	mov.aa	a12,a4
.L762:

; ..\component\CanIf\Implementation\CanIf.c	  4435  {
; ..\component\CanIf\Implementation\CanIf.c	  4436    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  4437    CanIf_RxSearchParamsType rxSearchParams;
; ..\component\CanIf\Implementation\CanIf.c	  4438  #if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	  4439    Std_ReturnType j1939DynAddrRetVal; 
; ..\component\CanIf\Implementation\CanIf.c	  4440  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4441    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  4442  
; ..\component\CanIf\Implementation\CanIf.c	  4443  
; ..\component\CanIf\Implementation\CanIf.c	  4444    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  4445  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4446  # if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4447    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  4448    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  4449    {
; ..\component\CanIf\Implementation\CanIf.c	  4450      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  4451      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  4452    }
; ..\component\CanIf\Implementation\CanIf.c	  4453    else
; ..\component\CanIf\Implementation\CanIf.c	  4454  # endif
; ..\component\CanIf\Implementation\CanIf.c	  4455    /* #20 Check if parameter CanSduPtr is valid */
; ..\component\CanIf\Implementation\CanIf.c	  4456    if (CanSduPtr == NULL_PTR)
	mov	d10,#0
	jnz.a	a12,.L116
.L763:

; ..\component\CanIf\Implementation\CanIf.c	  4457    {
; ..\component\CanIf\Implementation\CanIf.c	  4458      /* \trace SPEC-3714 */
; ..\component\CanIf\Implementation\CanIf.c	  4459      errorId = CANIF_E_PARAM_POINTER;
	mov	d10,#20
	j	.L117
.L116:

; ..\component\CanIf\Implementation\CanIf.c	  4460    }
; ..\component\CanIf\Implementation\CanIf.c	  4461  # if (CANIF_EXTENDEDID_SUPPORT != STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4462    /* #30 Check if parameter CanId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  4463    else if ((CanId & (~CANIF_FDFLAG)) > 0x7FFu)
	insert	d0,d5,#0,#14,#1
.L919:
	mov	d1,#2047
.L920:
	jge.u	d1,d0,.L118
.L921:

; ..\component\CanIf\Implementation\CanIf.c	  4464    {
; ..\component\CanIf\Implementation\CanIf.c	  4465      /* \trace SPEC-3698 */
; ..\component\CanIf\Implementation\CanIf.c	  4466      errorId = CANIF_E_PARAM_CANID;
	mov	d10,#10
	j	.L119
.L118:

; ..\component\CanIf\Implementation\CanIf.c	  4467    }
; ..\component\CanIf\Implementation\CanIf.c	  4468  # endif
; ..\component\CanIf\Implementation\CanIf.c	  4469    /* #40 Check if parameter CanDlc is valid */
; ..\component\CanIf\Implementation\CanIf.c	  4470    else if (CanDlc > RxDlcMaxValueLookUp[CanIf_GetShiftedFdFlag(CanId)])
	mov	d0,#16384
	movh.a	a15,#@his(RxDlcMaxValueLookUp)
.L922:
	and	d0,d5
	lea	a15,[a15]@los(RxDlcMaxValueLookUp)
.L923:
	sha	d15,d0,#-14
.L924:
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L751:
	jge.u	d15,d9,.L120
.L752:

; ..\component\CanIf\Implementation\CanIf.c	  4471    {
; ..\component\CanIf\Implementation\CanIf.c	  4472      /* \trace SPEC-3715 */
; ..\component\CanIf\Implementation\CanIf.c	  4473      errorId = CANIF_E_PARAM_DLC;
	mov	d10,#11
	j	.L121
.L120:

; ..\component\CanIf\Implementation\CanIf.c	  4474    }
; ..\component\CanIf\Implementation\CanIf.c	  4475    /* #50 Check if parameter Hrh is valid */
; ..\component\CanIf\Implementation\CanIf.c	  4476    else if (Hrh >= CANIF_CFG_MAX_MAILBOXES)
	jlt.u	d8,#2,.L122
.L753:

; ..\component\CanIf\Implementation\CanIf.c	  4477    {
; ..\component\CanIf\Implementation\CanIf.c	  4478      /* \trace SPEC-3697 */
; ..\component\CanIf\Implementation\CanIf.c	  4479      errorId = CANIF_E_PARAM_HRH;
	mov	d10,#12
	j	.L123
.L122:

; ..\component\CanIf\Implementation\CanIf.c	  4480    }
; ..\component\CanIf\Implementation\CanIf.c	  4481    else
; ..\component\CanIf\Implementation\CanIf.c	  4482  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4483    {
; ..\component\CanIf\Implementation\CanIf.c	  4484      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  4485  
; ..\component\CanIf\Implementation\CanIf.c	  4486  #if (CANIF_BUS_MIRRORING_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4487      /* #100 Report CAN frame to mirror module, if mirroring is enabled for the CAN controller */
; ..\component\CanIf\Implementation\CanIf.c	  4488      if(CanIf_IsMirroringEnabled(CANIF_CFG_MAILBOX_CONTROLLER(Hrh)))
; ..\component\CanIf\Implementation\CanIf.c	  4489      {
; ..\component\CanIf\Implementation\CanIf.c	  4490        Mirror_ReportCanFrame(CANIF_CFG_MAILBOX_CONTROLLER(Hrh), CanId, CanDlc, CanSduPtr); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  4491      }
; ..\component\CanIf\Implementation\CanIf.c	  4492  #endif /* CANIF_BUS_MIRRORING_SUPPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  4493  
; ..\component\CanIf\Implementation\CanIf.c	  4494  #if (CANIF_RX_SEARCH_CONSIDER_MSG_TYPE == STD_ON) || (CANIF_META_DATA_RX_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4495      /* #110 Determine the message type */
; ..\component\CanIf\Implementation\CanIf.c	  4496      if ((CanId & CANIF_FDFLAG) == CANIF_FDFLAG)
; ..\component\CanIf\Implementation\CanIf.c	  4497      {
; ..\component\CanIf\Implementation\CanIf.c	  4498        rxSearchParams.eRxMsgType = CANIF_MSG_TYPE_FD_CAN;
; ..\component\CanIf\Implementation\CanIf.c	  4499      }
; ..\component\CanIf\Implementation\CanIf.c	  4500      else
; ..\component\CanIf\Implementation\CanIf.c	  4501      {
; ..\component\CanIf\Implementation\CanIf.c	  4502        rxSearchParams.eRxMsgType = CANIF_MSG_TYPE_NO_FD_CAN;
; ..\component\CanIf\Implementation\CanIf.c	  4503      }
; ..\component\CanIf\Implementation\CanIf.c	  4504  #endif /* CANIF_RX_SEARCH_CONSIDER_MSG_TYPE == STD_ON || CANIF_META_DATA_RX_SUPPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  4505  
; ..\component\CanIf\Implementation\CanIf.c	  4506      /* #120 Remove FD-flag from CAN identifier */
; ..\component\CanIf\Implementation\CanIf.c	  4507      CanId = (CanId & (~CANIF_FDFLAG)); /* The FD Flag is no part of the CAN ID */ /* PRQA S 1338 */ /* MD_CanIf_Rule17.8 */
	mov.u	d15,#49151
.L925:

; ..\component\CanIf\Implementation\CanIf.c	  4508      rxSearchParams.eCanId = CanId;
	and	d5,d15
	st.h	[a10],d5
.L754:

; ..\component\CanIf\Implementation\CanIf.c	  4509      rxSearchParams.eHrh = Hrh;
	st.b	[a10]4,d8
.L926:

; ..\component\CanIf\Implementation\CanIf.c	  4510  
; ..\component\CanIf\Implementation\CanIf.c	  4511  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4512      /* FEAT-2076 ESCAN00091870 */
; ..\component\CanIf\Implementation\CanIf.c	  4513      /* #130 Deactivate Tx-PDU-filter */
; ..\component\CanIf\Implementation\CanIf.c	  4514      CanIf_SetPnWuTxPduFilterActive(CANIF_CFG_MAILBOX_CONTROLLER(Hrh), FALSE); /* SBSW_CANIF_8 */
; ..\component\CanIf\Implementation\CanIf.c	  4515  #endif  
; ..\component\CanIf\Implementation\CanIf.c	  4516  
; ..\component\CanIf\Implementation\CanIf.c	  4517  #if ((CANIF_WAKEUP_VALIDATION == STD_ON) && (CANIF_WAKEUP_VALID_ALL_RX_MSGS == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  4518      /* #140 Handle wake-up validation state (only if configured)) */
; ..\component\CanIf\Implementation\CanIf.c	  4519      CanIf_RxIndicationSubWakeupValidation(&rxSearchParams); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  4520  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4521  
; ..\component\CanIf\Implementation\CanIf.c	  4522  #if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	  4523      /* #150 Adapt the CAN identifier according to J1939 specification (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  4524      j1939DynAddrRetVal = CanIf_RxIndicationSubJ1939DynAddr(&rxSearchParams); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  4525      if (j1939DynAddrRetVal == E_OK) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  4526  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4527      {
; ..\component\CanIf\Implementation\CanIf.c	  4528        /* #200 Do search only if any Rx-PDU or range is configured. */
; ..\component\CanIf\Implementation\CanIf.c	  4529        if (CANIF_CFG_MAX_RXPDUS != 0u) /* PRQA S 2741 */ /* MD_CanIf_Rule14.3_GenData */ /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  4530        {
; ..\component\CanIf\Implementation\CanIf.c	  4531          rxSearchParams.eRxPduId = CANIF_CFG_MAILBOX_PDUIDLAST(Hrh);
	fcall	.cocofun_7
.L755:

; ..\component\CanIf\Implementation\CanIf.c	  4532          /* check if PduId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  4533          if (rxSearchParams.eRxPduId != CanIf_RxPduHnd_INVALID) /* PRQA S 2991, 2995 */ /* MD_CanIf_RxPduConstData */ /* COV_CANIF_GENDATA_FAILURE */
	mov	d15,#255
	ld.bu	d0,[a15]2
.L927:
	st.b	[a10]2,d0
.L928:
	jeq	d15,d0,.L124
.L929:

; ..\component\CanIf\Implementation\CanIf.c	  4534          {
; ..\component\CanIf\Implementation\CanIf.c	  4535            rxSearchParams.eRxPduIdMatch = CanIf_RxPduHnd_INVALID;
	st.b	[a10]3,d15
.L930:

; ..\component\CanIf\Implementation\CanIf.c	  4536  
; ..\component\CanIf\Implementation\CanIf.c	  4537            /* #300 If FullCAN then nothing to search required */
; ..\component\CanIf\Implementation\CanIf.c	  4538            if (CANIF_CFG_MAILBOX_MAILBOXTYPE(Hrh) == CANIF_RxFullCANMailbox) /* COV_CANIF_FULLCAN */
	ld.bu	d15,[a15]5
.L931:
	jne	d15,#1,.L125
.L932:

; ..\component\CanIf\Implementation\CanIf.c	  4539            {
; ..\component\CanIf\Implementation\CanIf.c	  4540              /* #310 Check the message type regarding FD format and PDU reception mode */
; ..\component\CanIf\Implementation\CanIf.c	  4541              (void)CanIf_RxIndicationSubReceptionPduMode(&rxSearchParams);  /* SBSW_CANIF_5 */
	mov.aa	a4,a10
.L757:
	call	CanIf_RxIndicationSubReceptionPduMode
.L756:
	j	.L126
.L125:

; ..\component\CanIf\Implementation\CanIf.c	  4542            }
; ..\component\CanIf\Implementation\CanIf.c	  4543            else if (CANIF_CFG_MAILBOX_MAILBOXTYPE(Hrh) == CANIF_RxBasicCANMailbox) /* COV_CANIF_GENDATA_FAILURE */
	jne	d15,#0,.L127
.L933:

; ..\component\CanIf\Implementation\CanIf.c	  4544            /* BASIC-CAN */
; ..\component\CanIf\Implementation\CanIf.c	  4545            /* #320 If BasicCAN search for matching using: linear, binary or double hash algorithm (dependent on configuration) */
; ..\component\CanIf\Implementation\CanIf.c	  4546            {
; ..\component\CanIf\Implementation\CanIf.c	  4547              CanIf_RxIndicationSubBasicCan(&rxSearchParams); /* SBSW_CANIF_5 */
	mov.aa	a4,a10
.L759:
	call	CanIf_RxIndicationSubBasicCan
.L758:
	j	.L128
.L127:

; ..\component\CanIf\Implementation\CanIf.c	  4548            } /* else if BASIC-CAN */
; ..\component\CanIf\Implementation\CanIf.c	  4549            else
; ..\component\CanIf\Implementation\CanIf.c	  4550            {
; ..\component\CanIf\Implementation\CanIf.c	  4551              /* Hrh does not belong to Rx Mailbox, returns without an indication */
; ..\component\CanIf\Implementation\CanIf.c	  4552  #if (CANIF_DEV_ERROR_DETECT == STD_ON)           
; ..\component\CanIf\Implementation\CanIf.c	  4553              errorId = CANIF_E_CONFIG;
	mov	d10,#45
.L128:
.L126:

; ..\component\CanIf\Implementation\CanIf.c	  4554  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4555            }
; ..\component\CanIf\Implementation\CanIf.c	  4556  
; ..\component\CanIf\Implementation\CanIf.c	  4557            /* #330 Matched Rx-PDU found? */
; ..\component\CanIf\Implementation\CanIf.c	  4558            if (rxSearchParams.eRxPduIdMatch != CanIf_RxPduHnd_INVALID) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
	ld.bu	d5,[a10]3
.L934:
	mov	d15,#255
.L935:
	jeq	d15,d5,.L129
.L760:

; ..\component\CanIf\Implementation\CanIf.c	  4559            {
; ..\component\CanIf\Implementation\CanIf.c	  4560  #if (CANIF_DATA_CHECKSUM_RX_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4561              Std_ReturnType localRetVal;
; ..\component\CanIf\Implementation\CanIf.c	  4562  
; ..\component\CanIf\Implementation\CanIf.c	  4563              if (CANIF_CFG_RX_ISDATACHECKSUMPDU(rxSearchParams.eRxPduIdMatch))
; ..\component\CanIf\Implementation\CanIf.c	  4564              {
; ..\component\CanIf\Implementation\CanIf.c	  4565  # if ((CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME) || (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  4566                /* for PB and LT configurations the RxPduId order between CanIf and higher layers may differ and needs to be indirected */
; ..\component\CanIf\Implementation\CanIf.c	  4567                PduIdType CanIfRxPduId = CANIF_CFG_INTRXPDUID2EXTRXPDUID(rxSearchParams.eRxPduIdMatch);
; ..\component\CanIf\Implementation\CanIf.c	  4568  # else
; ..\component\CanIf\Implementation\CanIf.c	  4569                PduIdType CanIfRxPduId = rxSearchParams.eRxPduIdMatch;  
; ..\component\CanIf\Implementation\CanIf.c	  4570  # endif                
; ..\component\CanIf\Implementation\CanIf.c	  4571                /* #400 Data checksum Rx-PDU: Verify the checksum. (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  4572                /* Note: Explicitly the CanId of received message is used (Not the manipulated one in case of J1939 dynamic address support). */
; ..\component\CanIf\Implementation\CanIf.c	  4573                localRetVal = CanIf_RxIndicationSubDataChecksumRxVerify(CanIfRxPduId, CanId, CanDlc, CanSduPtr); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  4574              }
; ..\component\CanIf\Implementation\CanIf.c	  4575              else
; ..\component\CanIf\Implementation\CanIf.c	  4576              {
; ..\component\CanIf\Implementation\CanIf.c	  4577                /* #410 None data checksum Rx-PDU: Verification passed. (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  4578                localRetVal = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  4579              }
; ..\component\CanIf\Implementation\CanIf.c	  4580  
; ..\component\CanIf\Implementation\CanIf.c	  4581              /* #420 Data checksum verification passed? (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  4582              if (localRetVal == E_OK)
; ..\component\CanIf\Implementation\CanIf.c	  4583  #endif /* (CANIF_DATA_CHECKSUM_RX_SUPPORT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  4584              {
; ..\component\CanIf\Implementation\CanIf.c	  4585  #if (CANIF_META_DATA_RX_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4586                /* #430 Restore FD-flag in CAN identifier */
; ..\component\CanIf\Implementation\CanIf.c	  4587                if (rxSearchParams.eRxMsgType == CANIF_MSG_TYPE_FD_CAN)
; ..\component\CanIf\Implementation\CanIf.c	  4588                {
; ..\component\CanIf\Implementation\CanIf.c	  4589                  rxSearchParams.eCanId |= CANIF_FDFLAG;
; ..\component\CanIf\Implementation\CanIf.c	  4590                }
; ..\component\CanIf\Implementation\CanIf.c	  4591  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4592                /* #440 Report received Rx-PDU to upper layer */
; ..\component\CanIf\Implementation\CanIf.c	  4593                CanIf_Indirect_HlIndication(Hrh, rxSearchParams.eRxPduIdMatch, CanSduPtr, CanDlc, rxSearchParams.eCanId); /* SBSW_CANIF_10 */
	mov	d4,d8
	mov.aa	a4,a12
.L761:
	mov	d6,d9
	call	CanIf_HlIndication
.L129:
.L124:
.L123:
.L121:
.L119:
.L117:

; ..\component\CanIf\Implementation\CanIf.c	  4594              }
; ..\component\CanIf\Implementation\CanIf.c	  4595            }
; ..\component\CanIf\Implementation\CanIf.c	  4596          } /* if (RxPduId != CanIf_RxPduHnd_INVALID) */
; ..\component\CanIf\Implementation\CanIf.c	  4597        } /* if (CANIF_CFG_MAX_RXPDUS != 0)  */
; ..\component\CanIf\Implementation\CanIf.c	  4598      }
; ..\component\CanIf\Implementation\CanIf.c	  4599    }
; ..\component\CanIf\Implementation\CanIf.c	  4600  
; ..\component\CanIf\Implementation\CanIf.c	  4601    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  4602  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4603    if (errorId != CANIF_E_NO_ERROR)
	jeq	d10,#0,.L130
.L936:

; ..\component\CanIf\Implementation\CanIf.c	  4604    {
; ..\component\CanIf\Implementation\CanIf.c	  4605      CanIf_Det_ReportError(CANIF_RXINDICATION_API, errorId);
	fcall	.cocofun_2
	mov	d6,#20
	mov	d7,d10
.L764:
	j	Det_ReportError
.L130:

; ..\component\CanIf\Implementation\CanIf.c	  4606    }
; ..\component\CanIf\Implementation\CanIf.c	  4607  #else
; ..\component\CanIf\Implementation\CanIf.c	  4608    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  4609  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4610  } /* PRQA S 6010, 6030, 6050, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STCAL, MD_MSR_STMIF */
	ret
.L564:
	
__CanIf_RxIndicationAsr403_function_end:
	.size	CanIf_RxIndicationAsr403,__CanIf_RxIndicationAsr403_function_end-CanIf_RxIndicationAsr403
.L343:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_HlIndicationSubULCall',code,cluster('CanIf_HlIndicationSubULCall')
	.sect	'.text.CanIf.CanIf_HlIndicationSubULCall'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  4611  
; ..\component\CanIf\Implementation\CanIf.c	  4612  
; ..\component\CanIf\Implementation\CanIf.c	  4613  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  4614   *  CanIf_HlIndicationSubULCall()
; ..\component\CanIf\Implementation\CanIf.c	  4615   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  4616  /*
; ..\component\CanIf\Implementation\CanIf.c	  4617  |<DataModelStart>| CanIf_HlIndicationSubULCall
; ..\component\CanIf\Implementation\CanIf.c	  4618  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  4619  CanIfRxIndicationUsedTypeIII, CanIfRxIndicationUsedTypeIV # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  4620  CanIfRxIndicationUsedTypeIII, CanIfRxIndicationUsedTypeIV # from caller CanIf_HlIndication #
; ..\component\CanIf\Implementation\CanIf.c	  4621  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  4622  CanIfRxIndicationUsedTypeI
; ..\component\CanIf\Implementation\CanIf.c	  4623  CanIfRxIndicationUsedTypeIII
; ..\component\CanIf\Implementation\CanIf.c	  4624  CanIfRxIndicationUsedTypeIV
; ..\component\CanIf\Implementation\CanIf.c	  4625  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  4626  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  4627  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  4628  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  4629  */
; ..\component\CanIf\Implementation\CanIf.c	  4630   /*!
; ..\component\CanIf\Implementation\CanIf.c	  4631   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  4632   *
; ..\component\CanIf\Implementation\CanIf.c	  4633   *
; ..\component\CanIf\Implementation\CanIf.c	  4634   *
; ..\component\CanIf\Implementation\CanIf.c	  4635   *
; ..\component\CanIf\Implementation\CanIf.c	  4636   *
; ..\component\CanIf\Implementation\CanIf.c	  4637   *
; ..\component\CanIf\Implementation\CanIf.c	  4638   */
; ..\component\CanIf\Implementation\CanIf.c	  4639  #if (CANIF_SUPPORT_NMOSEK_INDICATION == STD_ON) || (CANIF_RX_INDICATION_TYPE_IV_IS_USED == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4640  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_HlIndicationSubULCall(PduIdType PduId, P2CONST(uint8, AUTOMATIC, CANIF_CBK_DRV_VAR) CanSduPtr, uint8 CanDlc, Can_IdType CanId)
; ..\component\CanIf\Implementation\CanIf.c	  4641  #else
; ..\component\CanIf\Implementation\CanIf.c	  4642  CANIF_LOCAL_INLINE FUNC(void, CANIF_CODE) CanIf_HlIndicationSubULCall(PduIdType PduId, P2CONST(uint8, AUTOMATIC, CANIF_CBK_DRV_VAR) CanSduPtr, uint8 CanDlc )
; Function CanIf_HlIndicationSubULCall
.L273:
CanIf_HlIndicationSubULCall:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  4643  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4644  {
; ..\component\CanIf\Implementation\CanIf.c	  4645    CanIf_RxIndFctListIdxType index;
; ..\component\CanIf\Implementation\CanIf.c	  4646    index = CANIF_CFG_RX_RXINDICATION(PduId);
	mul	d15,d4,#6
	movh.a	a15,#@his(CanIf_RxPduConfig)
	lea	a15,[a15]@los(CanIf_RxPduConfig)
	addsc.a	a15,a15,d15,#0
.L1125:

; ..\component\CanIf\Implementation\CanIf.c	  4647  
; ..\component\CanIf\Implementation\CanIf.c	  4648    /* #100 Report received message to upper layer */
; ..\component\CanIf\Implementation\CanIf.c	  4649  #if (CANIF_RX_INDICATION_TYPE_I_IS_USED == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4650    if (CANIF_CFG_RXINDICATION_FUNCTIONLAYOUT(index) == CanIf_SimpleRxIndicationLayout)
; ..\component\CanIf\Implementation\CanIf.c	  4651    {
; ..\component\CanIf\Implementation\CanIf.c	  4652      /* #200 CanIf_SimpleRxIndicationLayout API */
; ..\component\CanIf\Implementation\CanIf.c	  4653      CanIf_SimpleRxIndicationFctType rxIndicationFct;
; ..\component\CanIf\Implementation\CanIf.c	  4654      rxIndicationFct = CANIF_CFG_RXINDICATION_FUNCTION(index).eSimpleRxIndicationType;
; ..\component\CanIf\Implementation\CanIf.c	  4655      if (rxIndicationFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  4656      {
; ..\component\CanIf\Implementation\CanIf.c	  4657        /* \trace SPEC-1885 */
; ..\component\CanIf\Implementation\CanIf.c	  4658        /* CA cast (-> to get the const ) */
; ..\component\CanIf\Implementation\CanIf.c	  4659        /* CANIF_APPL_VAR -> located in CAN Driver */
; ..\component\CanIf\Implementation\CanIf.c	  4660        rxIndicationFct(CANIF_CFG_RX_UPPERPDUID(PduId), (P2CONST(uint8, AUTOMATIC, CANIF_UL_STANDARD_VAR))CanSduPtr); /* SBSW_CANIF_12 */
; ..\component\CanIf\Implementation\CanIf.c	  4661      }
; ..\component\CanIf\Implementation\CanIf.c	  4662    } 
; ..\component\CanIf\Implementation\CanIf.c	  4663    else
; ..\component\CanIf\Implementation\CanIf.c	  4664  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4665  
; ..\component\CanIf\Implementation\CanIf.c	  4666  #if (CANIF_SUPPORT_NMOSEK_INDICATION == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4667    if (CANIF_CFG_RXINDICATION_FUNCTIONLAYOUT(index) == CanIf_NmOsekRxIndicationLayout)
; ..\component\CanIf\Implementation\CanIf.c	  4668    {
; ..\component\CanIf\Implementation\CanIf.c	  4669      /* #300 CanIf_NmOsekRxIndicationLayout API */
; ..\component\CanIf\Implementation\CanIf.c	  4670      CanIf_NmOsekRxIndicationFctType rxIndicationFct;
; ..\component\CanIf\Implementation\CanIf.c	  4671      rxIndicationFct = CANIF_CFG_RXINDICATION_FUNCTION(index).eNmOsekRxIndicationType;
; ..\component\CanIf\Implementation\CanIf.c	  4672      if (rxIndicationFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  4673      {
; ..\component\CanIf\Implementation\CanIf.c	  4674        /* \trace SPEC-1841, SPEC-1885 */
; ..\component\CanIf\Implementation\CanIf.c	  4675        /* CA cast (-> to get the const ) */
; ..\component\CanIf\Implementation\CanIf.c	  4676        /* CANIF_APPL_VAR -> located in CAN Driver */
; ..\component\CanIf\Implementation\CanIf.c	  4677        rxIndicationFct(CANIF_CFG_RX_UPPERPDUID(PduId), (P2CONST(uint8, AUTOMATIC, CANIF_UL_OSEKNM_VAR))CanSduPtr, CanId); /* SBSW_CANIF_12 */
; ..\component\CanIf\Implementation\CanIf.c	  4678      }
; ..\component\CanIf\Implementation\CanIf.c	  4679    }
; ..\component\CanIf\Implementation\CanIf.c	  4680    else
; ..\component\CanIf\Implementation\CanIf.c	  4681  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4682  
; ..\component\CanIf\Implementation\CanIf.c	  4683  #if (CANIF_RX_INDICATION_TYPE_IV_IS_USED == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4684    if (CANIF_CFG_RXINDICATION_FUNCTIONLAYOUT(index) == CanIf_CddRxIndicationLayout)
; ..\component\CanIf\Implementation\CanIf.c	  4685    {
; ..\component\CanIf\Implementation\CanIf.c	  4686      /* #400 CanIf_CddRxIndicationLayout API */
; ..\component\CanIf\Implementation\CanIf.c	  4687      CanIf_CddRxIndicationFctType rxIndicationFct;
; ..\component\CanIf\Implementation\CanIf.c	  4688      PduInfoType pduinfo;
; ..\component\CanIf\Implementation\CanIf.c	  4689      /* cast from CANIF_CBK_DRV_VAR to AUTOSAR_COMSTACKDATA --> has to be resolved in compiler abstraction configuration */
; ..\component\CanIf\Implementation\CanIf.c	  4690      /* const to non-const cast is not avoidable */
; ..\component\CanIf\Implementation\CanIf.c	  4691      pduinfo.SduDataPtr = (P2VAR(uint8, AUTOMATIC, AUTOSAR_COMSTACKDATA))CanSduPtr; /* PRQA S 0311 */ /* MD_CanIf_Rule11.8 */
; ..\component\CanIf\Implementation\CanIf.c	  4692      /* CANIF262: Currently received DLC value is passed to upper layer */
; ..\component\CanIf\Implementation\CanIf.c	  4693      pduinfo.SduLength = CanDlc;
; ..\component\CanIf\Implementation\CanIf.c	  4694  
; ..\component\CanIf\Implementation\CanIf.c	  4695      rxIndicationFct = CANIF_CFG_RXINDICATION_FUNCTION(index).eCddRxIndicationType;
; ..\component\CanIf\Implementation\CanIf.c	  4696      if (rxIndicationFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  4697      {
; ..\component\CanIf\Implementation\CanIf.c	  4698        /* \trace SPEC-1885 */
; ..\component\CanIf\Implementation\CanIf.c	  4699        /* CA cast (-> to get the const ) */
; ..\component\CanIf\Implementation\CanIf.c	  4700        /* CANIF_APPL_VAR -> located in CAN Driver */
; ..\component\CanIf\Implementation\CanIf.c	  4701        rxIndicationFct(CANIF_CFG_RX_UPPERPDUID(PduId), (P2CONST(PduInfoType, AUTOMATIC, CANIF_UL_ADVANCED_VAR))&pduinfo, CanId); /* SBSW_CANIF_12 */
; ..\component\CanIf\Implementation\CanIf.c	  4702      }
; ..\component\CanIf\Implementation\CanIf.c	  4703    } 
; ..\component\CanIf\Implementation\CanIf.c	  4704    else
; ..\component\CanIf\Implementation\CanIf.c	  4705  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4706  
; ..\component\CanIf\Implementation\CanIf.c	  4707    if (CANIF_CFG_RXINDICATION_FUNCTIONLAYOUT(index) == CanIf_AdvancedRxIndicationLayout) /* PRQA S 2004 */ /* MD_MSR_EmptyClause */
	movh.a	a2,#@his(CanIf_RxIndicationFctList)
.L1126:
	ld.bu	d15,[a15]3
.L768:
	lea	a2,[a2]@los(CanIf_RxIndicationFctList)
	addsc.a	a2,a2,d15,#3
.L1127:
	sub.a	a10,#8
.L765:
	ld.bu	d15,[a2]4
.L769:
	jne	d15,#1,.L131
.L661:

; ..\component\CanIf\Implementation\CanIf.c	  4708    {
; ..\component\CanIf\Implementation\CanIf.c	  4709      /* #500 CanIf_AdvancedRxIndicationLayout API */
; ..\component\CanIf\Implementation\CanIf.c	  4710      CanIf_AdvancedRxIndicationFctType rxIndicationFct;
; ..\component\CanIf\Implementation\CanIf.c	  4711      PduInfoType pduinfo;
; ..\component\CanIf\Implementation\CanIf.c	  4712      /* cast from CANIF_CBK_DRV_VAR to AUTOSAR_COMSTACKDATA --> has to be resolved in compiler abstraction configuration */
; ..\component\CanIf\Implementation\CanIf.c	  4713      /* const to non-const cast is not avoidable */
; ..\component\CanIf\Implementation\CanIf.c	  4714      pduinfo.SduDataPtr = (P2VAR(uint8, AUTOMATIC, AUTOSAR_COMSTACKDATA))CanSduPtr; /* PRQA S 0311 */ /* MD_CanIf_Rule11.8 */
	st.a	[a10],a4
.L1128:

; ..\component\CanIf\Implementation\CanIf.c	  4715      /* CANIF262: Currently received DLC value is passed to upper layer */
; ..\component\CanIf\Implementation\CanIf.c	  4716      pduinfo.SduLength = CanDlc;
	st.b	[a10]4,d5
.L1129:

; ..\component\CanIf\Implementation\CanIf.c	  4717  
; ..\component\CanIf\Implementation\CanIf.c	  4718      rxIndicationFct = CANIF_CFG_RXINDICATION_FUNCTION(index).eAdvancedRxIndicationType;
	ld.a	a2,[a2]
.L770:

; ..\component\CanIf\Implementation\CanIf.c	  4719      if (rxIndicationFct != NULL_PTR)
	jz.a	a2,.L132
.L1130:

; ..\component\CanIf\Implementation\CanIf.c	  4720      {
; ..\component\CanIf\Implementation\CanIf.c	  4721        /* \trace SPEC-1841, SPEC-1885 */
; ..\component\CanIf\Implementation\CanIf.c	  4722        /* CA cast (-> to get the const ) */
; ..\component\CanIf\Implementation\CanIf.c	  4723        /* PTR to Stack -> AUTOMATIC */
; ..\component\CanIf\Implementation\CanIf.c	  4724        rxIndicationFct(CANIF_CFG_RX_UPPERPDUID(PduId), (P2CONST(PduInfoType, AUTOMATIC, CANIF_UL_ADVANCED_VAR))&pduinfo); /* SBSW_CANIF_12 */
	ld.bu	d4,[a15]2
.L767:
	mov.aa	a4,a10
.L766:
	ji	a2
.L132:
.L131:

; ..\component\CanIf\Implementation\CanIf.c	  4725      }
; ..\component\CanIf\Implementation\CanIf.c	  4726    }
; ..\component\CanIf\Implementation\CanIf.c	  4727  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	ret
.L656:
	
__CanIf_HlIndicationSubULCall_function_end:
	.size	CanIf_HlIndicationSubULCall,__CanIf_HlIndicationSubULCall_function_end-CanIf_HlIndicationSubULCall
.L423:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_HlIndication',code,cluster('CanIf_HlIndication')
	.sect	'.text.CanIf.CanIf_HlIndication'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  4728  
; ..\component\CanIf\Implementation\CanIf.c	  4729  
; ..\component\CanIf\Implementation\CanIf.c	  4730  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  4731   *  CanIf_HlIndication()
; ..\component\CanIf\Implementation\CanIf.c	  4732   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  4733  /*
; ..\component\CanIf\Implementation\CanIf.c	  4734  |<DataModelStart>| CanIf_HlIndication
; ..\component\CanIf\Implementation\CanIf.c	  4735  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  4736  CanIfRxIndicationUsedTypeIII, CanIfRxMetaDataSupport, CanIfRxIndicationUsedTypeIV # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  4737  CanIfRxIndicationUsedTypeIII, CanIfRxMetaDataSupport, CanIfRxIndicationUsedTypeIV # from caller CanIf_RxIndicationAsr403 #
; ..\component\CanIf\Implementation\CanIf.c	  4738  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  4739  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  4740  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  4741  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  4742  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  4743  CanIfWakeupValidation, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  4744  CanIfPnEnable, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  4745  CanIfDlcCheck
; ..\component\CanIf\Implementation\CanIf.c	  4746  CanIfRxMetaDataSupport
; ..\component\CanIf\Implementation\CanIf.c	  4747  CanIfRxMetaDataSupport, CanIfVStdLibCopy
; ..\component\CanIf\Implementation\CanIf.c	  4748  CanIfRxMetaDataSupport, CanIfIDType
; ..\component\CanIf\Implementation\CanIf.c	  4749  CanIfRxMetaDataSupport, CanIfJ1939, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  4750  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  4751  CanIfRxIndicationUsedTypeIII, CanIfRxIndicationUsedTypeIV
; ..\component\CanIf\Implementation\CanIf.c	  4752  CanIfRxIndicationUsedTypeIII, CanIfRxIndicationUsedTypeIV, CanIfRxMetaDataSupport, CanIfFdSupport # used because RxMetaData is depending of Fd #
; ..\component\CanIf\Implementation\CanIf.c	  4753  CanIfRxMetaDataSupport
; ..\component\CanIf\Implementation\CanIf.c	  4754  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  4755  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  4756  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  4757  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  4758  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  4759  */
; ..\component\CanIf\Implementation\CanIf.c	  4760   /*!
; ..\component\CanIf\Implementation\CanIf.c	  4761   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  4762   *
; ..\component\CanIf\Implementation\CanIf.c	  4763   *
; ..\component\CanIf\Implementation\CanIf.c	  4764   *
; ..\component\CanIf\Implementation\CanIf.c	  4765   *
; ..\component\CanIf\Implementation\CanIf.c	  4766   *
; ..\component\CanIf\Implementation\CanIf.c	  4767   *
; ..\component\CanIf\Implementation\CanIf.c	  4768   *
; ..\component\CanIf\Implementation\CanIf.c	  4769   *
; ..\component\CanIf\Implementation\CanIf.c	  4770   *
; ..\component\CanIf\Implementation\CanIf.c	  4771   *
; ..\component\CanIf\Implementation\CanIf.c	  4772   *
; ..\component\CanIf\Implementation\CanIf.c	  4773   */
; ..\component\CanIf\Implementation\CanIf.c	  4774  #if ((CANIF_SUPPORT_NMOSEK_INDICATION == STD_ON) || (CANIF_META_DATA_RX_SUPPORT == STD_ON) || (CANIF_RX_INDICATION_TYPE_IV_IS_USED == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  4775  /* static void CanIf_HlIndication(uint8 Hrh, PduIdType PduId, const uint8 *CanSduPtr, uint8 CanDlc, Can_IdType CanId) */
; ..\component\CanIf\Implementation\CanIf.c	  4776  CANIF_LOCAL FUNC(void, CANIF_CODE) CanIf_HlIndication(CanIf_HwHandleType  Hrh, PduIdType PduId, P2CONST(uint8, AUTOMATIC, CANIF_CBK_DRV_VAR) CanSduPtr, uint8 CanDlc, Can_IdType CanId)
; ..\component\CanIf\Implementation\CanIf.c	  4777  #else
; ..\component\CanIf\Implementation\CanIf.c	  4778  /* static void CanIf_HlIndication(uint8 Hrh, PduIdType PduId, const uint8 *CanSduPtr, uint8 CanDlc) */
; ..\component\CanIf\Implementation\CanIf.c	  4779  CANIF_LOCAL FUNC(void, CANIF_CODE) CanIf_HlIndication(CanIf_HwHandleType  Hrh, PduIdType PduId, P2CONST(uint8, AUTOMATIC, CANIF_CBK_DRV_VAR) CanSduPtr, uint8 CanDlc)
; Function CanIf_HlIndication
.L275:
CanIf_HlIndication:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  4780  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4781  {
; ..\component\CanIf\Implementation\CanIf.c	  4782    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  4783    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  4784    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  4785  
; ..\component\CanIf\Implementation\CanIf.c	  4786  #if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  4787    CANIF_DUMMY_STATEMENT(Hrh); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  4788  #else
; ..\component\CanIf\Implementation\CanIf.c	  4789    /* Determine the channel from Hrh */
; ..\component\CanIf\Implementation\CanIf.c	  4790    controller = CANIF_CFG_MAILBOX_CONTROLLER(Hrh);
; ..\component\CanIf\Implementation\CanIf.c	  4791  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4792  
; ..\component\CanIf\Implementation\CanIf.c	  4793    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  4794  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4795  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  4796    /* #10 Check if CAN channel is valid */
; ..\component\CanIf\Implementation\CanIf.c	  4797    if (CanIf_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  4798    {
; ..\component\CanIf\Implementation\CanIf.c	  4799      errorId = CANIF_E_CONFIG;
; ..\component\CanIf\Implementation\CanIf.c	  4800    } 
; ..\component\CanIf\Implementation\CanIf.c	  4801    else
; ..\component\CanIf\Implementation\CanIf.c	  4802  # endif /* CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF */
; ..\component\CanIf\Implementation\CanIf.c	  4803    /* #20 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  4804    if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_UNINIT)
	mov	d8,#0
	fcall	.cocofun_5
.L1015:
	jne	d15,#0,.L133
.L1016:

; ..\component\CanIf\Implementation\CanIf.c	  4805    {
; ..\component\CanIf\Implementation\CanIf.c	  4806      /* \trace SPEC-3718, SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  4807      errorId = CANIF_E_UNINIT;
	mov	d8,#30
	j	.L134
.L133:

; ..\component\CanIf\Implementation\CanIf.c	  4808    }
; ..\component\CanIf\Implementation\CanIf.c	  4809    else 
; ..\component\CanIf\Implementation\CanIf.c	  4810  #endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  4811    {
; ..\component\CanIf\Implementation\CanIf.c	  4812  
; ..\component\CanIf\Implementation\CanIf.c	  4813      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  4814      /* \trace SPEC-3711 */
; ..\component\CanIf\Implementation\CanIf.c	  4815      /* #100 Process only if CAN channel is active */
; ..\component\CanIf\Implementation\CanIf.c	  4816      if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_STARTED)
	jne	d15,#2,.L135
.L1017:

; ..\component\CanIf\Implementation\CanIf.c	  4817      {
; ..\component\CanIf\Implementation\CanIf.c	  4818  #if (CANIF_WAKEUP_VALIDATION == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4819  # if (CANIF_WAKEUP_VALID_ALL_RX_MSGS != STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4820       /* CANIF741 */
; ..\component\CanIf\Implementation\CanIf.c	  4821  #  if (CANIF_WAKEUP_VALID_ONLY_NM_RX_MSGS == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4822        if(CANIF_ISCANNMRXPDU(PduId)) /* Check if RxPdu is from CAN-Nm to validate wakeup */
; ..\component\CanIf\Implementation\CanIf.c	  4823  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  4824        {
; ..\component\CanIf\Implementation\CanIf.c	  4825          /* \trace SPEC-21407 */ /* Only ECUs receive list will validate an Rx event / Controller mode: Started, PduMode: Don't care */
; ..\component\CanIf\Implementation\CanIf.c	  4826          /* #110 Set wake-up validation state to DETECTED (only if configured) */
; ..\component\CanIf\Implementation\CanIf.c	  4827          CanIf_SetWakeUpValidationState(CanIf_Controller_Value_Local, CANIF_WUVALIDATION_DETECTED); /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  4828        }
; ..\component\CanIf\Implementation\CanIf.c	  4829  # endif
; ..\component\CanIf\Implementation\CanIf.c	  4830  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4831  
; ..\component\CanIf\Implementation\CanIf.c	  4832        if ( (CanIf_GetChannelMode(CanIf_Controller_Value_Local) == CANIF_GET_ONLINE) || /* \trace SPEC-1849, SPEC-1850 */
	ld.bu	d15,[a15]1
.L1018:
	jeq	d15,#3,.L136
.L1019:

; ..\component\CanIf\Implementation\CanIf.c	  4833             (CanIf_GetChannelMode(CanIf_Controller_Value_Local) == CANIF_GET_RX_ONLINE) || /* \trace SPEC-3855 */
	jeq	d15,#1,.L137
.L1020:

; ..\component\CanIf\Implementation\CanIf.c	  4834             (CanIf_GetChannelMode(CanIf_Controller_Value_Local) == CANIF_GET_OFFLINE_ACTIVE_RX_ONLINE)
	jne	d15,#5,.L138
.L137:
.L136:

; ..\component\CanIf\Implementation\CanIf.c	  4835  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4836          || (CanIf_GetChannelMode(CanIf_Controller_Value_Local) == CANIF_GET_ONLINE_WAKF)
; ..\component\CanIf\Implementation\CanIf.c	  4837  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4838           )
; ..\component\CanIf\Implementation\CanIf.c	  4839        {
; ..\component\CanIf\Implementation\CanIf.c	  4840  #if (CANIF_DLC_CHECK == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4841          /* #120 Check if parameter CanDlc is valid */
; ..\component\CanIf\Implementation\CanIf.c	  4842          /* DLC check - if configured DLC == 0 the following condition is always false and DLC check is deactivated */
; ..\component\CanIf\Implementation\CanIf.c	  4843          /* \trace SPEC-1846, SPEC-3672 */
; ..\component\CanIf\Implementation\CanIf.c	  4844          if (CanDlc < CANIF_CFG_RX_DLC(PduId))
	mul	d15,d5,#6
	movh.a	a15,#@his(CanIf_RxPduConfig)
	lea	a15,[a15]@los(CanIf_RxPduConfig)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]5
.L1021:
	jge.u	d6,d15,.L139
.L1022:

; ..\component\CanIf\Implementation\CanIf.c	  4845          {
; ..\component\CanIf\Implementation\CanIf.c	  4846            /* \trace SPEC-1900 */
; ..\component\CanIf\Implementation\CanIf.c	  4847            /* Notification to DET */
; ..\component\CanIf\Implementation\CanIf.c	  4848            errorId = CANIF_E_INVALID_DLC;
	mov	d8,#61
	j	.L140
.L139:

; ..\component\CanIf\Implementation\CanIf.c	  4849          } 
; ..\component\CanIf\Implementation\CanIf.c	  4850          else 
; ..\component\CanIf\Implementation\CanIf.c	  4851          /* \trace SPEC-1964 */
; ..\component\CanIf\Implementation\CanIf.c	  4852  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4853          {
; ..\component\CanIf\Implementation\CanIf.c	  4854            /* #130 Handle meta data of Rx-PDU: Copy payload of received Rx-PDU into local buffer and add CAN identifier or parts of it to it (only if meta data Rx-PDU) */
; ..\component\CanIf\Implementation\CanIf.c	  4855  #if (CANIF_META_DATA_RX_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4856            uint8 CanSduLocal[CANIF_CFG_MAXRXDLC_PLUS_MAXMETADATALEN];
; ..\component\CanIf\Implementation\CanIf.c	  4857            uint8_least i;
; ..\component\CanIf\Implementation\CanIf.c	  4858            uint8_least j;
; ..\component\CanIf\Implementation\CanIf.c	  4859            if ((CANIF_CFG_RX_RXMETADATALENGTH(PduId) > 0u) && ((CanDlc + CANIF_CFG_RX_RXMETADATALENGTH(PduId)) > CANIF_CFG_MAXRXDLC_PLUS_MAXMETADATALEN))
; ..\component\CanIf\Implementation\CanIf.c	  4860            {
; ..\component\CanIf\Implementation\CanIf.c	  4861              errorId = CANIF_E_INVALID_DLC_METADATA;
; ..\component\CanIf\Implementation\CanIf.c	  4862            }
; ..\component\CanIf\Implementation\CanIf.c	  4863            else
; ..\component\CanIf\Implementation\CanIf.c	  4864            {
; ..\component\CanIf\Implementation\CanIf.c	  4865              if(CANIF_CFG_RX_RXMETADATALENGTH(PduId) > 0u)
; ..\component\CanIf\Implementation\CanIf.c	  4866              {
; ..\component\CanIf\Implementation\CanIf.c	  4867  # if (CANIF_USES_VSTDLIB_COPY == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4868                VStdMemCpyRamToRam(CanSduLocal, CanSduPtr, CanDlc); /* PRQA S 0315 */ /* MD_MSR_VStdLibCopy */ /* SBSW_CANIF_7 */
; ..\component\CanIf\Implementation\CanIf.c	  4869                i = CanDlc;
; ..\component\CanIf\Implementation\CanIf.c	  4870  # else          
; ..\component\CanIf\Implementation\CanIf.c	  4871                for (i = 0; i < CanDlc; i++)
; ..\component\CanIf\Implementation\CanIf.c	  4872                {
; ..\component\CanIf\Implementation\CanIf.c	  4873                  CanSduLocal[i] = CanSduPtr[i];  /* copy received data on local data buffer */ /* SBSW_CANIF_16 */
; ..\component\CanIf\Implementation\CanIf.c	  4874                }
; ..\component\CanIf\Implementation\CanIf.c	  4875  # endif
; ..\component\CanIf\Implementation\CanIf.c	  4876  # if (CANIF_EXTENDEDID_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4877                {
; ..\component\CanIf\Implementation\CanIf.c	  4878                  Can_IdType CanIdLocal;
; ..\component\CanIf\Implementation\CanIf.c	  4879                  CanIdLocal = CanId;
; ..\component\CanIf\Implementation\CanIf.c	  4880  
; ..\component\CanIf\Implementation\CanIf.c	  4881                  for (j = 0; j < CANIF_CFG_RX_RXMETADATALENGTH(PduId); j++)
; ..\component\CanIf\Implementation\CanIf.c	  4882                  {
; ..\component\CanIf\Implementation\CanIf.c	  4883                    CanSduLocal[i] = (uint8)(CanIdLocal & 0x000000FFu); /* SBSW_CANIF_16 */
; ..\component\CanIf\Implementation\CanIf.c	  4884                    i++;
; ..\component\CanIf\Implementation\CanIf.c	  4885                    CanIdLocal = CanIdLocal >> 8;
; ..\component\CanIf\Implementation\CanIf.c	  4886                  }
; ..\component\CanIf\Implementation\CanIf.c	  4887                }
; ..\component\CanIf\Implementation\CanIf.c	  4888  # else
; ..\component\CanIf\Implementation\CanIf.c	  4889                {
; ..\component\CanIf\Implementation\CanIf.c	  4890                  Can_IdType CanIdLocal;
; ..\component\CanIf\Implementation\CanIf.c	  4891                  uint8_least shiftCounter;
; ..\component\CanIf\Implementation\CanIf.c	  4892                  CanIdLocal = CanId;
; ..\component\CanIf\Implementation\CanIf.c	  4893                  shiftCounter = 0;
; ..\component\CanIf\Implementation\CanIf.c	  4894                  for (j = 0; j < CANIF_CFG_RX_RXMETADATALENGTH(PduId); j++)
; ..\component\CanIf\Implementation\CanIf.c	  4895                  {
; ..\component\CanIf\Implementation\CanIf.c	  4896                    if (shiftCounter < 2u)  /* MetaDataLength is max 4 */
; ..\component\CanIf\Implementation\CanIf.c	  4897                    {
; ..\component\CanIf\Implementation\CanIf.c	  4898                      CanSduLocal[i] = (uint8)(CanIdLocal & 0x00FFu); /* SBSW_CANIF_16 */
; ..\component\CanIf\Implementation\CanIf.c	  4899                      CanIdLocal = CanIdLocal >> 8u;
; ..\component\CanIf\Implementation\CanIf.c	  4900                      shiftCounter++;
; ..\component\CanIf\Implementation\CanIf.c	  4901                    }
; ..\component\CanIf\Implementation\CanIf.c	  4902                    else
; ..\component\CanIf\Implementation\CanIf.c	  4903                    {
; ..\component\CanIf\Implementation\CanIf.c	  4904                      CanSduLocal[i] = 0x00; /* SBSW_CANIF_16 */
; ..\component\CanIf\Implementation\CanIf.c	  4905                    }
; ..\component\CanIf\Implementation\CanIf.c	  4906                    i++;
; ..\component\CanIf\Implementation\CanIf.c	  4907                  }
; ..\component\CanIf\Implementation\CanIf.c	  4908                }
; ..\component\CanIf\Implementation\CanIf.c	  4909  # endif
; ..\component\CanIf\Implementation\CanIf.c	  4910  # if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	  4911                /* #140 If the received message is a acknowledgment message the address in the data is changed */
; ..\component\CanIf\Implementation\CanIf.c	  4912                if((CANIF_CFG_CTRLJ1939DYNADDRSUPPORT(CanIf_Controller_Value_Local) != CANIF_J1939_DYN_ADDR_DISABLED) && 
; ..\component\CanIf\Implementation\CanIf.c	  4913                  ((CanId & CANIF_EXT_CANID_MASK) == CANIF_EXT_CANID_MASK) &&
; ..\component\CanIf\Implementation\CanIf.c	  4914                  ((CanId & CANIF_J1939_PGN_MASK) == CANIF_J1939_ACKM_PGN)) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  4915                {
; ..\component\CanIf\Implementation\CanIf.c	  4916                  uint8 ackAddr = CANIF_VAR_J1939RXADDR_LOOKUP(CanIf_Controller_Value_Local, CanSduPtr[CANIF_J1939_ACKM_ACKADDR_POS]);
; ..\component\CanIf\Implementation\CanIf.c	  4917                  if (ackAddr == CANIF_J1939_NULL_ADDR)
; ..\component\CanIf\Implementation\CanIf.c	  4918                  {
; ..\component\CanIf\Implementation\CanIf.c	  4919                    errorId = CANIF_E_INVALID_DA;
; ..\component\CanIf\Implementation\CanIf.c	  4920                  }
; ..\component\CanIf\Implementation\CanIf.c	  4921                  CanSduLocal[CANIF_J1939_ACKM_ACKADDR_POS] = ackAddr;  /* SBSW_CANIF_30 */
; ..\component\CanIf\Implementation\CanIf.c	  4922                }
; ..\component\CanIf\Implementation\CanIf.c	  4923  # endif
; ..\component\CanIf\Implementation\CanIf.c	  4924                CanSduPtr =  CanSduLocal; /* PRQA S 1338 */ /* MD_CanIf_Rule17.8 */
; ..\component\CanIf\Implementation\CanIf.c	  4925                CanDlc = (uint8)i; /* increment DLC */ /* PRQA S 1338 */ /* MD_CanIf_Rule17.8 */
; ..\component\CanIf\Implementation\CanIf.c	  4926              }
; ..\component\CanIf\Implementation\CanIf.c	  4927  #endif 
; ..\component\CanIf\Implementation\CanIf.c	  4928              /* #150 Check if Rx-indication function is valid */
; ..\component\CanIf\Implementation\CanIf.c	  4929  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4930              if ( CANIF_CFG_RX_RXINDICATION(PduId) >= CANIF_CFG_MAX_RXINDICATIONS )
	ld.bu	d15,[a15]3
.L1023:
	jlt.u	d15,#2,.L141
.L1024:

; ..\component\CanIf\Implementation\CanIf.c	  4931              {
; ..\component\CanIf\Implementation\CanIf.c	  4932                errorId = CANIF_E_CONFIG;
	mov	d8,#45
	j	.L142
.L141:

; ..\component\CanIf\Implementation\CanIf.c	  4933              } 
; ..\component\CanIf\Implementation\CanIf.c	  4934              else
; ..\component\CanIf\Implementation\CanIf.c	  4935  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4936              {
; ..\component\CanIf\Implementation\CanIf.c	  4937                /* #160 Report received message to upper layer */
; ..\component\CanIf\Implementation\CanIf.c	  4938  #if (CANIF_SUPPORT_NMOSEK_INDICATION == STD_ON) || (CANIF_RX_INDICATION_TYPE_IV_IS_USED == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4939  # if (CANIF_META_DATA_RX_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4940                /* #170 Remove FD-flag from CAN identifier */
; ..\component\CanIf\Implementation\CanIf.c	  4941                CanId = (CanId & (~CANIF_FDFLAG)); /* The FD Flag is no part of the CAN ID */ /* PRQA S 1338 */ /* MD_CanIf_Rule17.8 */
; ..\component\CanIf\Implementation\CanIf.c	  4942  # endif
; ..\component\CanIf\Implementation\CanIf.c	  4943                CanIf_HlIndicationSubULCall(PduId, CanSduPtr, CanDlc, CanId); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  4944  #else
; ..\component\CanIf\Implementation\CanIf.c	  4945                CanIf_HlIndicationSubULCall(PduId, CanSduPtr, CanDlc); /* SBSW_CANIF_5 */
	mov	d4,d5
.L772:
	mov	d5,d6
	call	CanIf_HlIndicationSubULCall
.L142:
.L140:
.L138:
.L135:
.L134:

; ..\component\CanIf\Implementation\CanIf.c	  4946  #endif  
; ..\component\CanIf\Implementation\CanIf.c	  4947              }
; ..\component\CanIf\Implementation\CanIf.c	  4948  #if (CANIF_META_DATA_RX_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4949            }
; ..\component\CanIf\Implementation\CanIf.c	  4950  
; ..\component\CanIf\Implementation\CanIf.c	  4951  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4952          }
; ..\component\CanIf\Implementation\CanIf.c	  4953        }
; ..\component\CanIf\Implementation\CanIf.c	  4954      }
; ..\component\CanIf\Implementation\CanIf.c	  4955    }
; ..\component\CanIf\Implementation\CanIf.c	  4956  
; ..\component\CanIf\Implementation\CanIf.c	  4957    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  4958  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  4959    if (errorId != CANIF_E_NO_ERROR)
	jeq	d8,#0,.L143
.L1025:

; ..\component\CanIf\Implementation\CanIf.c	  4960    {
; ..\component\CanIf\Implementation\CanIf.c	  4961      CanIf_Det_ReportError(CANIF_RXINDICATION_API, errorId);
	fcall	.cocofun_2
	mov	d6,#20
	mov	d7,d8
.L773:
	j	Det_ReportError
.L143:

; ..\component\CanIf\Implementation\CanIf.c	  4962    }
; ..\component\CanIf\Implementation\CanIf.c	  4963  #else
; ..\component\CanIf\Implementation\CanIf.c	  4964    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  4965  #endif
; ..\component\CanIf\Implementation\CanIf.c	  4966  
; ..\component\CanIf\Implementation\CanIf.c	  4967  } /* PRQA S 6010, 6030, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STMIF */
	ret
.L617:
	
__CanIf_HlIndication_function_end:
	.size	CanIf_HlIndication,__CanIf_HlIndication_function_end-CanIf_HlIndication
.L378:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_ControllerBusOff',code,cluster('CanIf_ControllerBusOff')
	.sect	'.text.CanIf.CanIf_ControllerBusOff'
	.align	2
	
	.global	CanIf_ControllerBusOff

; ..\component\CanIf\Implementation\CanIf.c	  4968  
; ..\component\CanIf\Implementation\CanIf.c	  4969  
; ..\component\CanIf\Implementation\CanIf.c	  4970  /* \trace SPEC-1912, SPEC-3725 */
; ..\component\CanIf\Implementation\CanIf.c	  4971  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  4972   *  CanIf_ControllerBusOff()
; ..\component\CanIf\Implementation\CanIf.c	  4973   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  4974  /*
; ..\component\CanIf\Implementation\CanIf.c	  4975  |<DataModelStart>| CanIf_ControllerBusOff
; ..\component\CanIf\Implementation\CanIf.c	  4976  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  4977  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  4978  CanIfSecurityEventReporting
; ..\component\CanIf\Implementation\CanIf.c	  4979  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  4980  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  4981  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  4982  CanIfTxBuffer, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  4983  CanIfTxConfPollSupport, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  4984  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  4985  CanIfSecurityEventReporting
; ..\component\CanIf\Implementation\CanIf.c	  4986  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  4987  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  4988  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  4989  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  4990  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  4991  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  4992  */
; ..\component\CanIf\Implementation\CanIf.c	  4993   /*!
; ..\component\CanIf\Implementation\CanIf.c	  4994   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  4995   *
; ..\component\CanIf\Implementation\CanIf.c	  4996   *
; ..\component\CanIf\Implementation\CanIf.c	  4997   *
; ..\component\CanIf\Implementation\CanIf.c	  4998   *
; ..\component\CanIf\Implementation\CanIf.c	  4999   *
; ..\component\CanIf\Implementation\CanIf.c	  5000   *
; ..\component\CanIf\Implementation\CanIf.c	  5001   *
; ..\component\CanIf\Implementation\CanIf.c	  5002   *
; ..\component\CanIf\Implementation\CanIf.c	  5003   *
; ..\component\CanIf\Implementation\CanIf.c	  5004   *
; ..\component\CanIf\Implementation\CanIf.c	  5005   */
; ..\component\CanIf\Implementation\CanIf.c	  5006  FUNC(void, CANIF_CODE) CanIf_ControllerBusOff(uint8 ControllerId)
; Function CanIf_ControllerBusOff
.L277:
CanIf_ControllerBusOff:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  5007  {
; ..\component\CanIf\Implementation\CanIf.c	  5008    /* conform to requirement \trace SPEC-1877 */
; ..\component\CanIf\Implementation\CanIf.c	  5009  
; ..\component\CanIf\Implementation\CanIf.c	  5010    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5011    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  5012    CanIf_BusOffNotificationFctType busoffnotificationFct = CANIF_CFG_BUSOFFNOTIFICATION();
	mov	d15,#0
	movh.a	a15,#@his(CanIf_BusOffNotificationFctPtr)
.L776:
	ld.a	a15,[a15]@los(CanIf_BusOffNotificationFctPtr)
.L775:

; ..\component\CanIf\Implementation\CanIf.c	  5013  
; ..\component\CanIf\Implementation\CanIf.c	  5014  #if (CANIF_ENABLE_SECURITY_EVENT_REPORTING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5015    IdsM_ContextDataType contextData[CANIF_CONTEXTDATA_SIZE_BUSOFF];
; ..\component\CanIf\Implementation\CanIf.c	  5016  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5017  
; ..\component\CanIf\Implementation\CanIf.c	  5018    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5019  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5020  # if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5021    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  5022    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  5023    {
; ..\component\CanIf\Implementation\CanIf.c	  5024      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  5025      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  5026    }
; ..\component\CanIf\Implementation\CanIf.c	  5027    else
; ..\component\CanIf\Implementation\CanIf.c	  5028  # endif
; ..\component\CanIf\Implementation\CanIf.c	  5029    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  5030    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
	jeq	d4,#0,.L144
.L941:

; ..\component\CanIf\Implementation\CanIf.c	  5031    {
; ..\component\CanIf\Implementation\CanIf.c	  5032      /* \trace SPEC-3717 */
; ..\component\CanIf\Implementation\CanIf.c	  5033      errorId = CANIF_E_PARAM_CONTROLLER;
	mov	d15,#14
	j	.L145
.L144:

; ..\component\CanIf\Implementation\CanIf.c	  5034    }
; ..\component\CanIf\Implementation\CanIf.c	  5035    else
; ..\component\CanIf\Implementation\CanIf.c	  5036  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5037    {
; ..\component\CanIf\Implementation\CanIf.c	  5038      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5039      
; ..\component\CanIf\Implementation\CanIf.c	  5040      /* #30 Verify if affected CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  5041      /* \trace SPEC-3705 */
; ..\component\CanIf\Implementation\CanIf.c	  5042      if (CanIf_GetCtrlMode(CanIf_Controller_Value) != CANIF_CS_UNINIT)
	movh.a	a12,#@his(CanIf_CtrlStates)
	lea	a12,[a12]@los(CanIf_CtrlStates)
	ld.bu	d0,[a12]
.L942:
	jeq	d0,#0,.L146
.L943:

; ..\component\CanIf\Implementation\CanIf.c	  5043      {
; ..\component\CanIf\Implementation\CanIf.c	  5044        /* #100 Deactivate the communication via the affected CAN channel (controller and PDU mode) */
; ..\component\CanIf\Implementation\CanIf.c	  5045        /* ESCAN00051423, avoids ESCAN00051329 */
; ..\component\CanIf\Implementation\CanIf.c	  5046        /* Explicitely cast to void as return value cannot be used here */
; ..\component\CanIf\Implementation\CanIf.c	  5047        (void)CanIf_SetPduMode(CanIf_Controller_Value, CANIF_SET_TX_OFFLINE);
	mov	d5,#3
	call	CanIf_SetPduMode
.L774:

; ..\component\CanIf\Implementation\CanIf.c	  5048  
; ..\component\CanIf\Implementation\CanIf.c	  5049        /* Set CAN Interface to Stopped mode, CAN Controller is BusOff */
; ..\component\CanIf\Implementation\CanIf.c	  5050        /* ASR4 CANController is already in STOP -> only internal variable must be set */
; ..\component\CanIf\Implementation\CanIf.c	  5051        /* \trace SPEC-3761, SPEC-1965 */
; ..\component\CanIf\Implementation\CanIf.c	  5052        CanIf_SetCtrlMode(CanIf_Controller_Value, CANIF_CS_STOPPED);  /* SBSW_CANIF_3 */
	mov	d0,#1
	st.b	[a12],d0
.L944:

; ..\component\CanIf\Implementation\CanIf.c	  5053  
; ..\component\CanIf\Implementation\CanIf.c	  5054  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  5055        /* #110 Clear the Tx-queue */
; ..\component\CanIf\Implementation\CanIf.c	  5056        CanIf_ClearQueue(CANIF_CHANNEL_CANPARA_ONLY);
	call	CanIf_ClearQueue
.L945:

; ..\component\CanIf\Implementation\CanIf.c	  5057  #endif    
; ..\component\CanIf\Implementation\CanIf.c	  5058  
; ..\component\CanIf\Implementation\CanIf.c	  5059  #if (CANIF_PUBLIC_TX_CONFIRM_POLLING_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5060        /* #120 Reset the Tx-confirmation state */
; ..\component\CanIf\Implementation\CanIf.c	  5061        /* \trace SPEC-9980 */
; ..\component\CanIf\Implementation\CanIf.c	  5062        /* TxConfirmationState is reset always when CAN controller is stopped
; ..\component\CanIf\Implementation\CanIf.c	  5063        * - BusOff
; ..\component\CanIf\Implementation\CanIf.c	  5064        * - Going to _SLEEP
; ..\component\CanIf\Implementation\CanIf.c	  5065        * - CanIf_InitController() is called */
; ..\component\CanIf\Implementation\CanIf.c	  5066        CanIf_SetTxConfState(CanIf_Controller_Value, CANIF_NO_NOTIFICATION); /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  5067  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5068  
; ..\component\CanIf\Implementation\CanIf.c	  5069        /* #130 Verify if notification function to upper layer is configured */
; ..\component\CanIf\Implementation\CanIf.c	  5070        if (busoffnotificationFct != NULL_PTR)
	jz.a	a15,.L147
.L946:

; ..\component\CanIf\Implementation\CanIf.c	  5071        {
; ..\component\CanIf\Implementation\CanIf.c	  5072          /* #140 Call BusOff notification function */
; ..\component\CanIf\Implementation\CanIf.c	  5073          /* \trace SPEC-5346 */
; ..\component\CanIf\Implementation\CanIf.c	  5074          busoffnotificationFct(CanIf_Controller_Value); /* SBSW_CANIF_13 */
	mov	d4,#0
	calli	a15
.L947:
	j	.L148
.L146:

; ..\component\CanIf\Implementation\CanIf.c	  5075        }
; ..\component\CanIf\Implementation\CanIf.c	  5076  
; ..\component\CanIf\Implementation\CanIf.c	  5077  #if (CANIF_ENABLE_SECURITY_EVENT_REPORTING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5078        /* #200 Report security event to the IdsM with ControllerId in context data */
; ..\component\CanIf\Implementation\CanIf.c	  5079        contextData[CANIF_CONTEXTDATA_CTRLID_POS] = ControllerId; /* SBSW_CANIF_49 */
; ..\component\CanIf\Implementation\CanIf.c	  5080        IdsM_SetSecurityEventWithContextData(CANIF_SEV_ERRORSTATE_BUSOFF, (CONSTP2CONST(IdsM_ContextDataType, AUTOMATIC, IDSM_APPL_DATA)) contextData, CANIF_CONTEXTDATA_SIZE_BUSOFF); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  5081  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5082      }
; ..\component\CanIf\Implementation\CanIf.c	  5083      else
; ..\component\CanIf\Implementation\CanIf.c	  5084      {
; ..\component\CanIf\Implementation\CanIf.c	  5085        /* \trace SPEC-3709, SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  5086        errorId = CANIF_E_UNINIT;
	mov	d15,#30
.L148:
.L147:
.L145:

; ..\component\CanIf\Implementation\CanIf.c	  5087      }
; ..\component\CanIf\Implementation\CanIf.c	  5088    }
; ..\component\CanIf\Implementation\CanIf.c	  5089  
; ..\component\CanIf\Implementation\CanIf.c	  5090    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5091  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5092    if (errorId != CANIF_E_NO_ERROR)
	jeq	d15,#0,.L149
.L948:

; ..\component\CanIf\Implementation\CanIf.c	  5093    {
; ..\component\CanIf\Implementation\CanIf.c	  5094      CanIf_Det_ReportError(CANIF_CONTROLLERBUSOFF_API, errorId);
	fcall	.cocofun_2
	mov	d6,#22
	mov	d7,d15
.L777:
	j	Det_ReportError
.L149:

; ..\component\CanIf\Implementation\CanIf.c	  5095    }
; ..\component\CanIf\Implementation\CanIf.c	  5096  #else
; ..\component\CanIf\Implementation\CanIf.c	  5097    CANIF_DUMMY_STATEMENT(errorId);  /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  5098  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5099  
; ..\component\CanIf\Implementation\CanIf.c	  5100  #if ((CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) && (CANIF_DEV_ERROR_DETECT == STD_OFF) && (CANIF_ENABLE_SECURITY_EVENT_REPORTING == STD_OFF)) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  5101      CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  5102  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5103  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	ret
.L574:
	
__CanIf_ControllerBusOff_function_end:
	.size	CanIf_ControllerBusOff,__CanIf_ControllerBusOff_function_end-CanIf_ControllerBusOff
.L348:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_SetPduMode',code,cluster('CanIf_SetPduMode')
	.sect	'.text.CanIf.CanIf_SetPduMode'
	.align	2
	
	.global	CanIf_SetPduMode

; ..\component\CanIf\Implementation\CanIf.c	  5104  
; ..\component\CanIf\Implementation\CanIf.c	  5105  
; ..\component\CanIf\Implementation\CanIf.c	  5106  /* \trace SPEC-1832 */
; ..\component\CanIf\Implementation\CanIf.c	  5107  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  5108   *  CanIf_SetPduMode()
; ..\component\CanIf\Implementation\CanIf.c	  5109   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  5110  /*
; ..\component\CanIf\Implementation\CanIf.c	  5111  |<DataModelStart>| CanIf_SetPduMode
; ..\component\CanIf\Implementation\CanIf.c	  5112  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  5113  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  5114  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5115  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  5116  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  5117  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  5118  CanIfPnEnable
; ..\component\CanIf\Implementation\CanIf.c	  5119  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  5120  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  5121  CanIfPnEnable, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  5122  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  5123  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5124  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5125  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  5126  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  5127  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  5128  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  5129  */
; ..\component\CanIf\Implementation\CanIf.c	  5130   /*!
; ..\component\CanIf\Implementation\CanIf.c	  5131   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  5132   *
; ..\component\CanIf\Implementation\CanIf.c	  5133   *
; ..\component\CanIf\Implementation\CanIf.c	  5134   *
; ..\component\CanIf\Implementation\CanIf.c	  5135   *
; ..\component\CanIf\Implementation\CanIf.c	  5136   *
; ..\component\CanIf\Implementation\CanIf.c	  5137   *
; ..\component\CanIf\Implementation\CanIf.c	  5138   *
; ..\component\CanIf\Implementation\CanIf.c	  5139   *
; ..\component\CanIf\Implementation\CanIf.c	  5140   *
; ..\component\CanIf\Implementation\CanIf.c	  5141   *
; ..\component\CanIf\Implementation\CanIf.c	  5142   *
; ..\component\CanIf\Implementation\CanIf.c	  5143   *
; ..\component\CanIf\Implementation\CanIf.c	  5144   */
; ..\component\CanIf\Implementation\CanIf.c	  5145  FUNC(Std_ReturnType, CANIF_CODE) CanIf_SetPduMode(uint8 ControllerId, CanIf_PduSetModeType PduModeRequest)
; Function CanIf_SetPduMode
.L279:
CanIf_SetPduMode:	.type	func
	mov	d8,d5
.L779:

; ..\component\CanIf\Implementation\CanIf.c	  5146  {
; ..\component\CanIf\Implementation\CanIf.c	  5147    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5148    Std_ReturnType retval = E_NOT_OK;
	mov	d9,#1
.L781:

; ..\component\CanIf\Implementation\CanIf.c	  5149    uint8 errorId = CANIF_E_NO_ERROR; 
	mov	d10,#0
.L780:

; ..\component\CanIf\Implementation\CanIf.c	  5150  
; ..\component\CanIf\Implementation\CanIf.c	  5151    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5152  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5153  # if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5154    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  5155    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  5156    {
; ..\component\CanIf\Implementation\CanIf.c	  5157      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  5158      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  5159    }
; ..\component\CanIf\Implementation\CanIf.c	  5160    else
; ..\component\CanIf\Implementation\CanIf.c	  5161  # endif
; ..\component\CanIf\Implementation\CanIf.c	  5162    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  5163    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
	jeq	d4,#0,.L150
.L859:

; ..\component\CanIf\Implementation\CanIf.c	  5164    {
; ..\component\CanIf\Implementation\CanIf.c	  5165      /* \trace SPEC-3537 */
; ..\component\CanIf\Implementation\CanIf.c	  5166      errorId = CANIF_E_PARAM_CONTROLLERID;
	mov	d10,#15
	j	.L151
.L150:

; ..\component\CanIf\Implementation\CanIf.c	  5167    }
; ..\component\CanIf\Implementation\CanIf.c	  5168    /* #30 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  5169    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
	movh.a	a12,#@his(CanIf_CtrlStates)
	lea	a12,[a12]@los(CanIf_CtrlStates)
	ld.bu	d15,[a12]
.L860:
	jne	d15,#0,.L152
.L861:

; ..\component\CanIf\Implementation\CanIf.c	  5170    {
; ..\component\CanIf\Implementation\CanIf.c	  5171      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  5172      errorId = CANIF_E_UNINIT;
	mov	d10,#30
	j	.L153
.L152:

; ..\component\CanIf\Implementation\CanIf.c	  5173    }
; ..\component\CanIf\Implementation\CanIf.c	  5174    /* #40 Check if PduModeRequest is valid */
; ..\component\CanIf\Implementation\CanIf.c	  5175    else if(PduModeRequest >= CANIF_NO_MODE_PDU_SET_MODE_TYPE_END)
	jlt.u	d8,#7,.L154
.L862:

; ..\component\CanIf\Implementation\CanIf.c	  5176    {
; ..\component\CanIf\Implementation\CanIf.c	  5177      errorId = CANIF_E_PARAM_PDU_MODE;
	mov	d10,#22
	j	.L155
.L154:

; ..\component\CanIf\Implementation\CanIf.c	  5178    }
; ..\component\CanIf\Implementation\CanIf.c	  5179    else
; ..\component\CanIf\Implementation\CanIf.c	  5180  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5181    {
; ..\component\CanIf\Implementation\CanIf.c	  5182      /* ----- Implementation --------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5183  
; ..\component\CanIf\Implementation\CanIf.c	  5184      /* #100 Change PDU mode only if CAN channel is in STARTED mode */
; ..\component\CanIf\Implementation\CanIf.c	  5185      if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_STARTED)
	jne	d15,#2,.L156
.L863:

; ..\component\CanIf\Implementation\CanIf.c	  5186      {
; ..\component\CanIf\Implementation\CanIf.c	  5187        /* #110 Process PDU mode change within critical section */
; ..\component\CanIf\Implementation\CanIf.c	  5188        retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  5189        CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_3);
	mov	d9,#0
	call	SuspendAllInterrupts
.L778:

; ..\component\CanIf\Implementation\CanIf.c	  5190  
; ..\component\CanIf\Implementation\CanIf.c	  5191        /* #120 Do allow PDU mode transitions only if required */
; ..\component\CanIf\Implementation\CanIf.c	  5192        if(CanIfState[CanIf_GetChannelMode(CanIf_Controller_Value)][PduModeRequest] != CANIF_NOP)
	ld.bu	d0,[+a12]1
.L864:
	movh.a	a15,#@his(CanIfState)
.L865:
	mul	d15,d0,#7
	lea	a15,[a15]@los(CanIfState)
.L866:
	addsc.a	a2,a15,d15,#0
.L867:
	mov	d15,#255
.L868:
	addsc.a	a2,a2,d8,#0
	ld.bu	d1,[a2]
.L869:
	jeq	d15,d1,.L157
.L870:

; ..\component\CanIf\Implementation\CanIf.c	  5193        {
; ..\component\CanIf\Implementation\CanIf.c	  5194          switch (PduModeRequest)
; ..\component\CanIf\Implementation\CanIf.c	  5195          {
; ..\component\CanIf\Implementation\CanIf.c	  5196            case CANIF_SET_OFFLINE:
	jeq	d8,#0,.L158
.L871:

; ..\component\CanIf\Implementation\CanIf.c	  5197            case CANIF_SET_TX_OFFLINE:
	jeq	d8,#3,.L159
.L872:

; ..\component\CanIf\Implementation\CanIf.c	  5198            case CANIF_SET_TX_OFFLINE_ACTIVE:
	jne	d8,#6,.L161
.L159:
.L158:

; ..\component\CanIf\Implementation\CanIf.c	  5199              switch(CanIf_GetChannelMode(CanIf_Controller_Value))
	add	d0,#-2
	extr.u	d15,d0,#0,#8
.L873:
	jge.u	d15,#2,.L162
.L874:

; ..\component\CanIf\Implementation\CanIf.c	  5200              {
; ..\component\CanIf\Implementation\CanIf.c	  5201                case CANIF_GET_TX_ONLINE:
; ..\component\CanIf\Implementation\CanIf.c	  5202                case CANIF_GET_ONLINE:
; ..\component\CanIf\Implementation\CanIf.c	  5203                /* \trace SPEC-1849, SPEC-3765 */
; ..\component\CanIf\Implementation\CanIf.c	  5204  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON) /* ESCAN00057578 */
; ..\component\CanIf\Implementation\CanIf.c	  5205                case CANIF_GET_TX_ONLINE_WAKF:
; ..\component\CanIf\Implementation\CanIf.c	  5206                case CANIF_GET_ONLINE_WAKF:
; ..\component\CanIf\Implementation\CanIf.c	  5207  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5208  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  5209                  /* #130 If Tx-direction is deactivated clear the Tx-queue */
; ..\component\CanIf\Implementation\CanIf.c	  5210                  CanIf_ClearQueue(CANIF_CHANNEL_CANPARA_ONLY);
	call	CanIf_ClearQueue

; ..\component\CanIf\Implementation\CanIf.c	  5211  #endif                  
; ..\component\CanIf\Implementation\CanIf.c	  5212                  break;
; ..\component\CanIf\Implementation\CanIf.c	  5213                default: /* COV_CANIF_GENDATA_FAILURE */
.L162:

; ..\component\CanIf\Implementation\CanIf.c	  5214                  break;
; ..\component\CanIf\Implementation\CanIf.c	  5215              }
; ..\component\CanIf\Implementation\CanIf.c	  5216              /* #140 In case of any WAKF-mode is left disable the wake-up Tx-filter */
; ..\component\CanIf\Implementation\CanIf.c	  5217  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5218              CanIf_SetPnWuTxPduFilterActive(CanIf_Controller_Value, FALSE);  /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  5219  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5220              break;
; ..\component\CanIf\Implementation\CanIf.c	  5221            case CANIF_SET_ONLINE:
; ..\component\CanIf\Implementation\CanIf.c	  5222            case CANIF_SET_TX_ONLINE:
; ..\component\CanIf\Implementation\CanIf.c	  5223  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5224              CanIf_SetPnWuTxPduFilterActive(CanIf_Controller_Value, FALSE);  /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  5225  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5226              break;
; ..\component\CanIf\Implementation\CanIf.c	  5227  #if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5228            case CANIF_SET_ONLINE_WAKF:
; ..\component\CanIf\Implementation\CanIf.c	  5229            case CANIF_SET_TX_ONLINE_WAKF:
; ..\component\CanIf\Implementation\CanIf.c	  5230              /* CANIF752 */
; ..\component\CanIf\Implementation\CanIf.c	  5231              /* #150 In case of WAKF-mode is requested AND the corresponding channel requires the Tx-filter enable it */
; ..\component\CanIf\Implementation\CanIf.c	  5232              if(CANIF_CFG_ISFEATUREPNWUTXPDUFILTERENABLED(CanIf_Controller_Value)) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  5233              {
; ..\component\CanIf\Implementation\CanIf.c	  5234                /* CANIF749 */
; ..\component\CanIf\Implementation\CanIf.c	  5235                CanIf_SetPnWuTxPduFilterActive(CanIf_Controller_Value, TRUE);  /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  5236              }
; ..\component\CanIf\Implementation\CanIf.c	  5237              break;
; ..\component\CanIf\Implementation\CanIf.c	  5238  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5239            default: /* PRQA S 2016 */ /* MD_MSR_EmptyClause */
.L161:

; ..\component\CanIf\Implementation\CanIf.c	  5240              break;
; ..\component\CanIf\Implementation\CanIf.c	  5241          }
; ..\component\CanIf\Implementation\CanIf.c	  5242          /* Get the next valid state by reading the table: CanIfState */
; ..\component\CanIf\Implementation\CanIf.c	  5243          /* #160 Determine and set the requested PDU-mode */
; ..\component\CanIf\Implementation\CanIf.c	  5244          CanIf_SetChannelMode(CanIf_Controller_Value, (CanIf_PduGetModeType)CanIfState[CanIf_GetChannelMode(CanIf_Controller_Value)][PduModeRequest]); /* PRQA S 4342 */ /* MD_CanIf_Rule10.5_4342 */ /* SBSW_CANIF_3 */
	ld.bu	d15,[a12]
	mul	d15,d15,#7
	addsc.a	a15,a15,d15,#0
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
	st.b	[a12],d15
.L157:

; ..\component\CanIf\Implementation\CanIf.c	  5245        }
; ..\component\CanIf\Implementation\CanIf.c	  5246        CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_3);
	call	ResumeAllInterrupts
.L156:
.L155:
.L153:
.L151:

; ..\component\CanIf\Implementation\CanIf.c	  5247      }
; ..\component\CanIf\Implementation\CanIf.c	  5248    }
; ..\component\CanIf\Implementation\CanIf.c	  5249  
; ..\component\CanIf\Implementation\CanIf.c	  5250    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5251  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5252    if (errorId != CANIF_E_NO_ERROR)
	jeq	d10,#0,.L163
.L875:

; ..\component\CanIf\Implementation\CanIf.c	  5253    {
; ..\component\CanIf\Implementation\CanIf.c	  5254      CanIf_Det_ReportError(CANIF_SETPDUMODE_API, errorId);
	fcall	.cocofun_2
	mov	d6,#9
	mov	d7,d10
	call	Det_ReportError
.L163:

; ..\component\CanIf\Implementation\CanIf.c	  5255    }
; ..\component\CanIf\Implementation\CanIf.c	  5256  #else
; ..\component\CanIf\Implementation\CanIf.c	  5257    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  5258  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5259  
; ..\component\CanIf\Implementation\CanIf.c	  5260  #if ((CANIF_ONE_CONTROLLER_OPTIMIZATION==STD_ON) && (CANIF_DEV_ERROR_DETECT == STD_OFF)) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  5261    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  5262  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5263    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  5264  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
	mov	d2,d9
	ret
.L540:
	
__CanIf_SetPduMode_function_end:
	.size	CanIf_SetPduMode,__CanIf_SetPduMode_function_end-CanIf_SetPduMode
.L323:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_GetPduMode',code,cluster('CanIf_GetPduMode')
	.sect	'.text.CanIf.CanIf_GetPduMode'
	.align	2
	
	.global	CanIf_GetPduMode

; ..\component\CanIf\Implementation\CanIf.c	  5265  
; ..\component\CanIf\Implementation\CanIf.c	  5266  
; ..\component\CanIf\Implementation\CanIf.c	  5267  /* \trace SPEC-1835 */
; ..\component\CanIf\Implementation\CanIf.c	  5268  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  5269   *  CanIf_GetPduMode()
; ..\component\CanIf\Implementation\CanIf.c	  5270   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  5271  /*
; ..\component\CanIf\Implementation\CanIf.c	  5272  |<DataModelStart>| CanIf_GetPduMode
; ..\component\CanIf\Implementation\CanIf.c	  5273  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  5274  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  5275  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5276  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  5277  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  5278  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  5279  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5280  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  5281  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  5282  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  5283  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  5284  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  5285  */
; ..\component\CanIf\Implementation\CanIf.c	  5286   /*!
; ..\component\CanIf\Implementation\CanIf.c	  5287   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  5288   *
; ..\component\CanIf\Implementation\CanIf.c	  5289   *
; ..\component\CanIf\Implementation\CanIf.c	  5290   *
; ..\component\CanIf\Implementation\CanIf.c	  5291   *
; ..\component\CanIf\Implementation\CanIf.c	  5292   *
; ..\component\CanIf\Implementation\CanIf.c	  5293   *
; ..\component\CanIf\Implementation\CanIf.c	  5294   */
; ..\component\CanIf\Implementation\CanIf.c	  5295  FUNC(Std_ReturnType, CANIF_CODE) CanIf_GetPduMode(uint8 ControllerId, P2VAR(CanIf_PduGetModeType, AUTOMATIC, CANIF_APPL_STATE_VAR) PduModePtr)
; Function CanIf_GetPduMode
.L281:
CanIf_GetPduMode:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  5296  {
; ..\component\CanIf\Implementation\CanIf.c	  5297    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5298    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
	mov	d8,#1
.L782:

; ..\component\CanIf\Implementation\CanIf.c	  5299    uint8 errorId = CANIF_E_NO_ERROR;
	mov	d7,#0
.L783:

; ..\component\CanIf\Implementation\CanIf.c	  5300  
; ..\component\CanIf\Implementation\CanIf.c	  5301    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5302  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5303  # if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5304    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  5305    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  5306    {
; ..\component\CanIf\Implementation\CanIf.c	  5307      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  5308      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  5309    }
; ..\component\CanIf\Implementation\CanIf.c	  5310    else
; ..\component\CanIf\Implementation\CanIf.c	  5311  # endif
; ..\component\CanIf\Implementation\CanIf.c	  5312    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  5313    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
	jeq	d4,#0,.L165
.L880:

; ..\component\CanIf\Implementation\CanIf.c	  5314    {
; ..\component\CanIf\Implementation\CanIf.c	  5315      /* \trace SPEC-3555 */
; ..\component\CanIf\Implementation\CanIf.c	  5316      errorId = CANIF_E_PARAM_CONTROLLERID;
	mov	d7,#15
	j	.L166
.L165:

; ..\component\CanIf\Implementation\CanIf.c	  5317    }
; ..\component\CanIf\Implementation\CanIf.c	  5318    /* #30 Check if channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  5319    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
	fcall	.cocofun_5
.L784:
	jne	d15,#0,.L167
.L881:

; ..\component\CanIf\Implementation\CanIf.c	  5320    {
; ..\component\CanIf\Implementation\CanIf.c	  5321      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  5322      errorId = CANIF_E_UNINIT;
	mov	d7,#30
	j	.L168
.L167:

; ..\component\CanIf\Implementation\CanIf.c	  5323    }
; ..\component\CanIf\Implementation\CanIf.c	  5324    /* #40 Check if parameter PduModePtr is valid */
; ..\component\CanIf\Implementation\CanIf.c	  5325    else if (PduModePtr == NULL_PTR)
	jnz.a	a4,.L169
.L882:

; ..\component\CanIf\Implementation\CanIf.c	  5326    {
; ..\component\CanIf\Implementation\CanIf.c	  5327      /* \trace SPEC-5236 */
; ..\component\CanIf\Implementation\CanIf.c	  5328      errorId = CANIF_E_PARAM_POINTER;
	mov	d7,#20
	j	.L170
.L169:

; ..\component\CanIf\Implementation\CanIf.c	  5329    }
; ..\component\CanIf\Implementation\CanIf.c	  5330    else
; ..\component\CanIf\Implementation\CanIf.c	  5331  #endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  5332    {
; ..\component\CanIf\Implementation\CanIf.c	  5333      /* ----- Implementation --------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5334  
; ..\component\CanIf\Implementation\CanIf.c	  5335      /* #100 Get the actual PDU mode */
; ..\component\CanIf\Implementation\CanIf.c	  5336      *PduModePtr = CanIf_GetChannelMode(CanIf_Controller_Value); /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  5337      retval = E_OK;
	mov	d8,#0
	ld.bu	d15,[a15]1
.L883:
	st.b	[a4],d15
.L170:
.L168:
.L166:

; ..\component\CanIf\Implementation\CanIf.c	  5338    }
; ..\component\CanIf\Implementation\CanIf.c	  5339  
; ..\component\CanIf\Implementation\CanIf.c	  5340    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5341  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5342    if (errorId != CANIF_E_NO_ERROR)
	jeq	d7,#0,.L171
.L884:

; ..\component\CanIf\Implementation\CanIf.c	  5343    {
; ..\component\CanIf\Implementation\CanIf.c	  5344      CanIf_Det_ReportError(CANIF_GETPDUMODE_API, errorId);
	fcall	.cocofun_2
.L785:
	mov	d6,#10
	call	Det_ReportError
.L171:

; ..\component\CanIf\Implementation\CanIf.c	  5345    }
; ..\component\CanIf\Implementation\CanIf.c	  5346  #else
; ..\component\CanIf\Implementation\CanIf.c	  5347    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  5348  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5349  
; ..\component\CanIf\Implementation\CanIf.c	  5350  #if ((CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON)) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  5351    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  5352  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5353    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  5354  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
	mov	d2,d8
	ret
.L546:
	
__CanIf_GetPduMode_function_end:
	.size	CanIf_GetPduMode,__CanIf_GetPduMode_function_end-CanIf_GetPduMode
.L328:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_TxQueueTransmit',code,cluster('CanIf_TxQueueTransmit')
	.sect	'.text.CanIf.CanIf_TxQueueTransmit'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  5355  
; ..\component\CanIf\Implementation\CanIf.c	  5356  
; ..\component\CanIf\Implementation\CanIf.c	  5357  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  5358  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  5359   *  CanIf_TxQueueTransmit()
; ..\component\CanIf\Implementation\CanIf.c	  5360   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  5361  /*
; ..\component\CanIf\Implementation\CanIf.c	  5362  |<DataModelStart>| CanIf_TxQueueTransmit
; ..\component\CanIf\Implementation\CanIf.c	  5363  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  5364  CanIfTxBuffer # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  5365  CanIfTxBuffer # from caller CanIf_TxQueueTreatment #
; ..\component\CanIf\Implementation\CanIf.c	  5366  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  5367  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  5368  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5369  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  5370  CanIfTxBuffer, CanIfDynTx, CanIfJ1939, CanIfTxMetaDataSupport
; ..\component\CanIf\Implementation\CanIf.c	  5371  CanIfTxBuffer, CanIfFdSupport # used for CANIF_STATIC_FD_TXQUEUE #
; ..\component\CanIf\Implementation\CanIf.c	  5372  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  5373  CanIfTxBuffer, CanIfDynTx, CanIfJ1939, CanIfTxMetaDataSupport
; ..\component\CanIf\Implementation\CanIf.c	  5374  CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  5375  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  5376  CanIfTxBuffer, CanIfTransmitCancellationAPI
; ..\component\CanIf\Implementation\CanIf.c	  5377  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5378  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  5379  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  5380  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  5381  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  5382  */
; ..\component\CanIf\Implementation\CanIf.c	  5383   /*!
; ..\component\CanIf\Implementation\CanIf.c	  5384   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  5385   *
; ..\component\CanIf\Implementation\CanIf.c	  5386   *
; ..\component\CanIf\Implementation\CanIf.c	  5387   *
; ..\component\CanIf\Implementation\CanIf.c	  5388   *
; ..\component\CanIf\Implementation\CanIf.c	  5389   *
; ..\component\CanIf\Implementation\CanIf.c	  5390   */
; ..\component\CanIf\Implementation\CanIf.c	  5391  CANIF_LOCAL FUNC(Std_ReturnType, CANIF_CODE) CanIf_TxQueueTransmit( PduIdType PduId)
; Function CanIf_TxQueueTransmit
.L283:
CanIf_TxQueueTransmit:	.type	func
	mov	d8,d4
	sub.a	a10,#16
.L786:

; ..\component\CanIf\Implementation\CanIf.c	  5392  {
; ..\component\CanIf\Implementation\CanIf.c	  5393    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5394    Can_PduType localPdu;
; ..\component\CanIf\Implementation\CanIf.c	  5395    Can_ReturnType txResult;
; ..\component\CanIf\Implementation\CanIf.c	  5396    Std_ReturnType retval;
; ..\component\CanIf\Implementation\CanIf.c	  5397    CanIf_AnyIdxType hth;
; ..\component\CanIf\Implementation\CanIf.c	  5398    
; ..\component\CanIf\Implementation\CanIf.c	  5399    uint8 errorId = CANIF_E_NO_ERROR;
	mov	d9,#0
.L787:

; ..\component\CanIf\Implementation\CanIf.c	  5400    
; ..\component\CanIf\Implementation\CanIf.c	  5401  # if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5402    CanIf_AnyIdxType txBufferCfgIdx;
; ..\component\CanIf\Implementation\CanIf.c	  5403    CanIf_AnyIdxType txFifoQueueBaseStartIdx;
; ..\component\CanIf\Implementation\CanIf.c	  5404    CanIf_AnyIdxType txBufferFifoBaseIdx;
; ..\component\CanIf\Implementation\CanIf.c	  5405  # endif  
; ..\component\CanIf\Implementation\CanIf.c	  5406  
; ..\component\CanIf\Implementation\CanIf.c	  5407    retval = E_NOT_OK;
	mov	d10,#1
.L788:

; ..\component\CanIf\Implementation\CanIf.c	  5408  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5409  /* #10 Check if parameter PduId is valid. */
; ..\component\CanIf\Implementation\CanIf.c	  5410    if (PduId >= CANIF_CFG_MAX_TXPDUS)
	jlt.u	d8,#3,.L173
.L968:

; ..\component\CanIf\Implementation\CanIf.c	  5411    {
; ..\component\CanIf\Implementation\CanIf.c	  5412      /* \trace SPEC-2007 */
; ..\component\CanIf\Implementation\CanIf.c	  5413      errorId = CANIF_E_INVALID_TXPDUID;
	mov	d9,#50
	j	.L174
.L173:

; ..\component\CanIf\Implementation\CanIf.c	  5414    }
; ..\component\CanIf\Implementation\CanIf.c	  5415    else
; ..\component\CanIf\Implementation\CanIf.c	  5416  # endif        
; ..\component\CanIf\Implementation\CanIf.c	  5417  /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5418    {
; ..\component\CanIf\Implementation\CanIf.c	  5419      hth = CANIF_CFG_TX_HTH(PduId);
	fcall	.cocofun_8
.L789:
	ld.bu	d4,[a15]5
.L790:

; ..\component\CanIf\Implementation\CanIf.c	  5420  # if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5421      txBufferCfgIdx = CANIF_CFG_MAILBOX_TXBUFFERIDX(hth);
; ..\component\CanIf\Implementation\CanIf.c	  5422  # endif
; ..\component\CanIf\Implementation\CanIf.c	  5423  
; ..\component\CanIf\Implementation\CanIf.c	  5424      switch (CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE(hth))
	mul	d15,d4,#6
	movh.a	a2,#@his(CanIf_MailBoxConfig)
	lea	a2,[a2]@los(CanIf_MailBoxConfig)
	addsc.a	a12,a2,d15,#0
	ld.bu	d0,[+a12]4
.L969:
	jne	d0,#1,.L175
.L970:

; ..\component\CanIf\Implementation\CanIf.c	  5425      {
; ..\component\CanIf\Implementation\CanIf.c	  5426  # if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5427        case CANIF_TXBUFFER_HANDLINGTYPE_PRIOBYCANID:
; ..\component\CanIf\Implementation\CanIf.c	  5428          /* #100 Prepare the Tx-PDU to be transmitted (CAN identifier, DLC, payload) */
; ..\component\CanIf\Implementation\CanIf.c	  5429  #  if((CANIF_SETDYNAMICTXID_API == STD_ON) || (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED) || (CANIF_META_DATA_TX_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  5430          (localPdu).id = CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(CANIF_CFG_TX_QUEUEINDEX(PduId), eQueueParams.eBaseParams.eCanId);
; ..\component\CanIf\Implementation\CanIf.c	  5431  #  else 
; ..\component\CanIf\Implementation\CanIf.c	  5432          (localPdu).id = CANIF_CFG_TX_CANID(PduId);
	ld.hu	d0,[a15]0
.L971:
	st.h	[a10],d0
.L972:

; ..\component\CanIf\Implementation\CanIf.c	  5433  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  5434          (localPdu).length = (uint8)CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(CANIF_CFG_TX_QUEUEINDEX(PduId), eQueueParams.eBaseParams.eSduLength);
	fcall	.cocofun_12
	addsc.a	a15,a15,d8,#1
	movh.a	a2,#@his(CanIf_TxQueue)
	ld.bu	d15,[a15]
	lea	a2,[a2]@los(CanIf_TxQueue)
	addsc.a	a2,a2,d15,#1
	ld.bu	d15,[a2]
.L973:
	st.b	[a10]2,d15
.L974:

; ..\component\CanIf\Implementation\CanIf.c	  5435  #  if(CANIF_STATIC_FD_TXQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5436          (localPdu).sdu = CANIF_ADDR_VAR_TXBUFFERPRIOBYCANID_STATFDQUEUE_QUEUEDATA(CANIF_CFG_TXBUFFERPRIOBYCANID_STATFDQUEUE_DATASTARTIDX(PduId));
	fcall	.cocofun_4
.L975:
	st.a	[a10]4,a15
.L976:

; ..\component\CanIf\Implementation\CanIf.c	  5437  #  else
; ..\component\CanIf\Implementation\CanIf.c	  5438          (localPdu).sdu = CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(CANIF_CFG_TX_QUEUEINDEX(PduId), eQueueParams.eSdu);
; ..\component\CanIf\Implementation\CanIf.c	  5439  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  5440          (localPdu).swPduHandle = (PduId);
	st.b	[a10]8,d8

; ..\component\CanIf\Implementation\CanIf.c	  5441          break;
; ..\component\CanIf\Implementation\CanIf.c	  5442  # endif                    
; ..\component\CanIf\Implementation\CanIf.c	  5443  # if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5444        case CANIF_TXBUFFER_HANDLINGTYPE_FIFO:
; ..\component\CanIf\Implementation\CanIf.c	  5445          txBufferFifoBaseIdx = CANIF_CFG_TXBUFFERFIFO_BUFFERBASEIDX(txBufferCfgIdx);
; ..\component\CanIf\Implementation\CanIf.c	  5446          txFifoQueueBaseStartIdx = CANIF_CFG_TXBUFFERFIFO_QUEUEBASESTARTIDX(txBufferCfgIdx);
; ..\component\CanIf\Implementation\CanIf.c	  5447        
; ..\component\CanIf\Implementation\CanIf.c	  5448  #  if((CANIF_SETDYNAMICTXID_API == STD_ON) || (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED) || (CANIF_META_DATA_TX_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  5449          (localPdu).id = CANIF_VAR_TXBUFFERFIFO_QUEUEBASE( (CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx  ) + txFifoQueueBaseStartIdx ), eBaseParams.eCanId );
; ..\component\CanIf\Implementation\CanIf.c	  5450  #  else 
; ..\component\CanIf\Implementation\CanIf.c	  5451          (localPdu).id = CANIF_CFG_TX_CANID(PduId);
; ..\component\CanIf\Implementation\CanIf.c	  5452  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  5453          (localPdu).length = CANIF_VAR_TXBUFFERFIFO_QUEUEBASE( (CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx  ) + txFifoQueueBaseStartIdx ), eBaseParams.eSduLength );
; ..\component\CanIf\Implementation\CanIf.c	  5454          (localPdu).sdu = CANIF_ADDR_VAR_TXBUFFERFIFO_QUEUEDATA((CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx) * (uint32)CANIF_CFG_TXBUFFERFIFO_SIZEOFONEPAYLOADEL(txBufferCfgIdx)) + CANIF_CFG_TXBUFFFERFIFO_QUEUEDATASTARTIDX(txBufferCfgIdx));
; ..\component\CanIf\Implementation\CanIf.c	  5455          (localPdu).swPduHandle = (PduId);
; ..\component\CanIf\Implementation\CanIf.c	  5456            break;
; ..\component\CanIf\Implementation\CanIf.c	  5457  # endif            
; ..\component\CanIf\Implementation\CanIf.c	  5458        default: /* COV_CANIF_GENDATA_FAILURE */
.L175:

; ..\component\CanIf\Implementation\CanIf.c	  5459          break; 
; ..\component\CanIf\Implementation\CanIf.c	  5460      }
; ..\component\CanIf\Implementation\CanIf.c	  5461        /* \trace SPEC-1845 */
; ..\component\CanIf\Implementation\CanIf.c	  5462    
; ..\component\CanIf\Implementation\CanIf.c	  5463        /* #110 Pass the Tx-request to CAN driver */
; ..\component\CanIf\Implementation\CanIf.c	  5464  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5465      {
; ..\component\CanIf\Implementation\CanIf.c	  5466        CanIf_Can_WriteFctType canWriteFct;
; ..\component\CanIf\Implementation\CanIf.c	  5467        Can_HwHandleType canDrvHth;
; ..\component\CanIf\Implementation\CanIf.c	  5468        
; ..\component\CanIf\Implementation\CanIf.c	  5469        canWriteFct = CanIf_GetCan_WriteFctMap(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CANIF_CFG_TX_CONTROLLER(PduId)));
; ..\component\CanIf\Implementation\CanIf.c	  5470        canDrvHth = (Can_HwHandleType)(hth - CANIF_CFG_MULTIPLECANDRV_HXHOFFSET(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CANIF_CFG_TX_CONTROLLER(PduId))));
; ..\component\CanIf\Implementation\CanIf.c	  5471  
; ..\component\CanIf\Implementation\CanIf.c	  5472        txResult = canWriteFct(canDrvHth, &localPdu); /* SBSW_CANIF_47 */ /* PRQA S 2972 */ /* MD_CanIf_Rule9.1 */
; ..\component\CanIf\Implementation\CanIf.c	  5473      }
; ..\component\CanIf\Implementation\CanIf.c	  5474  # else
; ..\component\CanIf\Implementation\CanIf.c	  5475      txResult = Can_Write((CanIf_HwHandleType)hth, &localPdu);  /* SBSW_CANIF_5 */  /* PRQA S 2972 */ /* MD_CanIf_Rule9.1 */
	mov.aa	a4,a10
	call	Can_Write
.L791:

; ..\component\CanIf\Implementation\CanIf.c	  5476  # endif
; ..\component\CanIf\Implementation\CanIf.c	  5477  
; ..\component\CanIf\Implementation\CanIf.c	  5478      if (txResult == CAN_OK)
	jne	d2,#1,.L176
.L977:

; ..\component\CanIf\Implementation\CanIf.c	  5479      {
; ..\component\CanIf\Implementation\CanIf.c	  5480        /* \trace SPEC-1897 */
; ..\component\CanIf\Implementation\CanIf.c	  5481        /* #120 If the Tx-request succeeds, remove the Tx-PDU from Tx-queue */
; ..\component\CanIf\Implementation\CanIf.c	  5482        switch (CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE(hth))
	ld.bu	d15,[a12]
.L978:
	jne	d15,#1,.L177
.L979:

; ..\component\CanIf\Implementation\CanIf.c	  5483        {
; ..\component\CanIf\Implementation\CanIf.c	  5484  # if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5485          case CANIF_TXBUFFER_HANDLINGTYPE_PRIOBYCANID:    
; ..\component\CanIf\Implementation\CanIf.c	  5486            (void)CanIf_ClearPrioByCanIdTxPduAsQueued(PduId);
	mov	d4,d8
	call	CanIf_ClearPrioByCanIdTxPduAsQueued
.L792:

; ..\component\CanIf\Implementation\CanIf.c	  5487            break;
; ..\component\CanIf\Implementation\CanIf.c	  5488  # endif
; ..\component\CanIf\Implementation\CanIf.c	  5489  
; ..\component\CanIf\Implementation\CanIf.c	  5490  # if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5491          case CANIF_TXBUFFER_HANDLINGTYPE_FIFO:
; ..\component\CanIf\Implementation\CanIf.c	  5492            txBufferFifoBaseIdx = CANIF_CFG_TXBUFFERFIFO_BUFFERBASEIDX(txBufferCfgIdx);
; ..\component\CanIf\Implementation\CanIf.c	  5493  #  if (CANIF_CANCEL_SUPPORT_API == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5494            CANIF_VAR_TXBUFFERFIFO_QUEUEBASE(( CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx)+CANIF_CFG_TXBUFFERFIFO_QUEUEBASESTARTIDX( txBufferCfgIdx)), eQueued) = 0; /* SBSW_CANIF_38 */
; ..\component\CanIf\Implementation\CanIf.c	  5495            CANIF_VAR_SET_TXBUFFERFIFO_QUEUEIDX2FIFOEL(CANIF_CFG_TX_QUEUEINDEX(PduId), CANIF_NO_ENTRY_IN_TX_FIFO); /* SBSW_CANIF_36 */
; ..\component\CanIf\Implementation\CanIf.c	  5496  #  endif  
; ..\component\CanIf\Implementation\CanIf.c	  5497            CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx)++; /* SBSW_CANIF_37 */
; ..\component\CanIf\Implementation\CanIf.c	  5498            if(CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx) == CANIF_CFG_TXBUFFERFIFO_QUEUESIZE(txBufferCfgIdx)) 
; ..\component\CanIf\Implementation\CanIf.c	  5499            {
; ..\component\CanIf\Implementation\CanIf.c	  5500              CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx) = 0; /* SBSW_CANIF_37 */
; ..\component\CanIf\Implementation\CanIf.c	  5501            }
; ..\component\CanIf\Implementation\CanIf.c	  5502            CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eQueueCounter)--; /* SBSW_CANIF_37 */
; ..\component\CanIf\Implementation\CanIf.c	  5503            break;
; ..\component\CanIf\Implementation\CanIf.c	  5504  # endif        
; ..\component\CanIf\Implementation\CanIf.c	  5505          default: /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  5506            break;
; ..\component\CanIf\Implementation\CanIf.c	  5507        }
; ..\component\CanIf\Implementation\CanIf.c	  5508        retval = E_OK;
	j	.L178
.L176:

; ..\component\CanIf\Implementation\CanIf.c	  5509      } 
; ..\component\CanIf\Implementation\CanIf.c	  5510      else if (txResult == CAN_BUSY) /* PRQA S 2004 */ /* MD_MSR_EmptyClause */
	jne	d2,#2,.L179
.L178:
.L177:

; ..\component\CanIf\Implementation\CanIf.c	  5511      {
; ..\component\CanIf\Implementation\CanIf.c	  5512        /* also ok due to confirmation queue handling may be interrupted by CanIf_Transmit() or just a cancel request */
; ..\component\CanIf\Implementation\CanIf.c	  5513        retval = E_OK;
	mov	d10,#0
.L179:
.L174:

; ..\component\CanIf\Implementation\CanIf.c	  5514      }
; ..\component\CanIf\Implementation\CanIf.c	  5515    }
; ..\component\CanIf\Implementation\CanIf.c	  5516    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5517  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5518    if (errorId != CANIF_E_NO_ERROR)
	jeq	d9,#0,.L180
.L980:

; ..\component\CanIf\Implementation\CanIf.c	  5519    {
; ..\component\CanIf\Implementation\CanIf.c	  5520      CanIf_Det_ReportError(CANIF_CANCELTRANSMIT_API, errorId);
	fcall	.cocofun_2
	mov	d6,#250
	mov	d7,d9
	call	Det_ReportError
.L180:

; ..\component\CanIf\Implementation\CanIf.c	  5521    }
; ..\component\CanIf\Implementation\CanIf.c	  5522  # else
; ..\component\CanIf\Implementation\CanIf.c	  5523    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  5524  # endif
; ..\component\CanIf\Implementation\CanIf.c	  5525    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  5526  }
	mov	d2,d10
	ret
.L588:
	
__CanIf_TxQueueTransmit_function_end:
	.size	CanIf_TxQueueTransmit,__CanIf_TxQueueTransmit_function_end-CanIf_TxQueueTransmit
.L358:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_TxQueueTreatment',code,cluster('CanIf_TxQueueTreatment')
	.sect	'.text.CanIf.CanIf_TxQueueTreatment'
	.align	2
	

; ..\component\CanIf\Implementation\CanIf.c	  5527  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5528  
; ..\component\CanIf\Implementation\CanIf.c	  5529  
; ..\component\CanIf\Implementation\CanIf.c	  5530  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  5531  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  5532   *  CanIf_TxQueueTreatment()
; ..\component\CanIf\Implementation\CanIf.c	  5533   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  5534  /*
; ..\component\CanIf\Implementation\CanIf.c	  5535  |<DataModelStart>| CanIf_TxQueueTreatment
; ..\component\CanIf\Implementation\CanIf.c	  5536  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  5537  CanIfTxBuffer # from this local function #
; ..\component\CanIf\Implementation\CanIf.c	  5538  CanIfTxBuffer, CanIfTransmitCancellationAPI # from caller CanIf_CancelTxConfirmation, CanIf_CancelTxNotification #
; ..\component\CanIf\Implementation\CanIf.c	  5539  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  5540  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  5541  CanIfTxBuffer, CanIfTransmitCancellationAPI
; ..\component\CanIf\Implementation\CanIf.c	  5542  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  5543  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  5544  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  5545  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  5546  */
; ..\component\CanIf\Implementation\CanIf.c	  5547   /*!
; ..\component\CanIf\Implementation\CanIf.c	  5548   *
; ..\component\CanIf\Implementation\CanIf.c	  5549   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  5550   *
; ..\component\CanIf\Implementation\CanIf.c	  5551   *
; ..\component\CanIf\Implementation\CanIf.c	  5552   *
; ..\component\CanIf\Implementation\CanIf.c	  5553   *
; ..\component\CanIf\Implementation\CanIf.c	  5554   *
; ..\component\CanIf\Implementation\CanIf.c	  5555   *
; ..\component\CanIf\Implementation\CanIf.c	  5556   *
; ..\component\CanIf\Implementation\CanIf.c	  5557   *
; ..\component\CanIf\Implementation\CanIf.c	  5558   *
; ..\component\CanIf\Implementation\CanIf.c	  5559   *
; ..\component\CanIf\Implementation\CanIf.c	  5560   *
; ..\component\CanIf\Implementation\CanIf.c	  5561   *
; ..\component\CanIf\Implementation\CanIf.c	  5562   *
; ..\component\CanIf\Implementation\CanIf.c	  5563   *
; ..\component\CanIf\Implementation\CanIf.c	  5564   *
; ..\component\CanIf\Implementation\CanIf.c	  5565   *
; ..\component\CanIf\Implementation\CanIf.c	  5566   *
; ..\component\CanIf\Implementation\CanIf.c	  5567   *
; ..\component\CanIf\Implementation\CanIf.c	  5568   *
; ..\component\CanIf\Implementation\CanIf.c	  5569   */
; ..\component\CanIf\Implementation\CanIf.c	  5570  CANIF_LOCAL FUNC(Std_ReturnType, CANIF_CODE) CanIf_TxQueueTreatment(CanIf_HwHandleType hth)
; Function CanIf_TxQueueTreatment
.L285:
CanIf_TxQueueTreatment:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  5571  {
; ..\component\CanIf\Implementation\CanIf.c	  5572    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5573  # if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5574  #  if (CANIF_BITQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5575    /* FOR-loop: count variable */
; ..\component\CanIf\Implementation\CanIf.c	  5576    sint16_least queueElementIdx; 
; ..\component\CanIf\Implementation\CanIf.c	  5577    /* FOR-loop: stores the end-condition, improves performance */
; ..\component\CanIf\Implementation\CanIf.c	  5578    sint16_least queueEndElementIdx;
; ..\component\CanIf\Implementation\CanIf.c	  5579    sint8_least elementBitIdx;
; ..\component\CanIf\Implementation\CanIf.c	  5580    CanIf_TxQueueFlagType  elem;
; ..\component\CanIf\Implementation\CanIf.c	  5581    PduIdType PduId;
; ..\component\CanIf\Implementation\CanIf.c	  5582  #  else
; ..\component\CanIf\Implementation\CanIf.c	  5583    CanIf_AnyIdxType idx2MappedTxPdus;
; ..\component\CanIf\Implementation\CanIf.c	  5584  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  5585    CanIf_AnyIdxType txBufferPrioByCanIdBaseIdx;
; ..\component\CanIf\Implementation\CanIf.c	  5586  # endif
; ..\component\CanIf\Implementation\CanIf.c	  5587  # if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5588    CanIf_AnyIdxType txBufferFifoBaseIdx;  
; ..\component\CanIf\Implementation\CanIf.c	  5589    CanIf_AnyIdxType txBufferFifoQueueBaseStartIdx;
; ..\component\CanIf\Implementation\CanIf.c	  5590    CanIf_TxBufferSizeType txBufferFifoActReadIdx;
; ..\component\CanIf\Implementation\CanIf.c	  5591  # endif    
; ..\component\CanIf\Implementation\CanIf.c	  5592    Std_ReturnType retval;
; ..\component\CanIf\Implementation\CanIf.c	  5593    CanIf_AnyIdxType txBufferCfgIdx;
; ..\component\CanIf\Implementation\CanIf.c	  5594  
; ..\component\CanIf\Implementation\CanIf.c	  5595    retval = E_NOT_OK; /* default nothing to send */
; ..\component\CanIf\Implementation\CanIf.c	  5596    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5597  
; ..\component\CanIf\Implementation\CanIf.c	  5598    txBufferCfgIdx = CANIF_CFG_MAILBOX_TXBUFFERIDX(hth);
	mul	d15,d4,#6
.L953:
	mov	d2,#1
.L795:
	fcall	.cocofun_13
.L954:

; ..\component\CanIf\Implementation\CanIf.c	  5599    /* #100 To which type of buffer belongs the HTH to? */
; ..\component\CanIf\Implementation\CanIf.c	  5600    switch (CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE(hth))
	ld.bu	d0,[a15]4
.L955:
	ld.bu	d15,[a15]3
.L793:
	jne	d0,#1,.L182
.L956:

; ..\component\CanIf\Implementation\CanIf.c	  5601    {
; ..\component\CanIf\Implementation\CanIf.c	  5602  # if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5603      case CANIF_TXBUFFER_HANDLINGTYPE_PRIOBYCANID:
; ..\component\CanIf\Implementation\CanIf.c	  5604  #  if (CANIF_BITQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5605        /* #200 PRIO_BY_CANID: BIT_QUEUE-handling: */
; ..\component\CanIf\Implementation\CanIf.c	  5606        txBufferPrioByCanIdBaseIdx = CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_BUFFERBASEIDX(txBufferCfgIdx);
; ..\component\CanIf\Implementation\CanIf.c	  5607         /* #210 Anything buffered? */ 
; ..\component\CanIf\Implementation\CanIf.c	  5608        if (CanIf_GetTxQueueCounter(txBufferPrioByCanIdBaseIdx) != 0u)
; ..\component\CanIf\Implementation\CanIf.c	  5609        {
; ..\component\CanIf\Implementation\CanIf.c	  5610          /* Get the end-condition of the following FOR-loop */
; ..\component\CanIf\Implementation\CanIf.c	  5611          queueEndElementIdx = (sint16_least)(CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUESTARTIDX(txBufferCfgIdx));
; ..\component\CanIf\Implementation\CanIf.c	  5612          /* process from last to first */
; ..\component\CanIf\Implementation\CanIf.c	  5613          /* #220 Compute the next buffered PDU ID with the highest priority */
; ..\component\CanIf\Implementation\CanIf.c	  5614          for(queueElementIdx = (((sint16_least)CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUESTOPIDX(txBufferCfgIdx)) - (sint16_least)1); queueElementIdx >= queueEndElementIdx; queueElementIdx--)
; ..\component\CanIf\Implementation\CanIf.c	  5615          { 
; ..\component\CanIf\Implementation\CanIf.c	  5616            elem = CANIF_VAR_TXBUFFERPRIOBYCANIDBITQUEUE_QUEUEFLAGS((uint16_least)queueElementIdx);
; ..\component\CanIf\Implementation\CanIf.c	  5617            if(elem != (CanIf_TxQueueFlagType)0) /* is there any flag set in the queue element? */
; ..\component\CanIf\Implementation\CanIf.c	  5618            {
; ..\component\CanIf\Implementation\CanIf.c	  5619              /* iterate through all flags and request transmission for highest priority PDU */
; ..\component\CanIf\Implementation\CanIf.c	  5620              for(elementBitIdx = (sint8_least)elemStartBitIdx; elementBitIdx >= (sint8_least)0; elementBitIdx--)
; ..\component\CanIf\Implementation\CanIf.c	  5621              { 
; ..\component\CanIf\Implementation\CanIf.c	  5622                if( ( elem & CanShiftLookUp[elementBitIdx] ) != (CanIf_TxQueueFlagType)0)
; ..\component\CanIf\Implementation\CanIf.c	  5623                {
; ..\component\CanIf\Implementation\CanIf.c	  5624                  PduId = ((((PduIdType)queueElementIdx - (PduIdType)queueEndElementIdx) << kCanTxQueueShift) + (PduIdType)elementBitIdx) + (PduIdType)CANIF_CFG_TXBUFFERPRIOBYCANIDBITQUEUE_BITPOS2TXPDUIDOFFSET(txBufferCfgIdx);
; ..\component\CanIf\Implementation\CanIf.c	  5625                  /* #230 Call CanIf_TxQueueTransmit() for the corresponding TxPdu ID */
; ..\component\CanIf\Implementation\CanIf.c	  5626                  retval = CanIf_TxQueueTransmit(PduId);
; ..\component\CanIf\Implementation\CanIf.c	  5627                  break;
; ..\component\CanIf\Implementation\CanIf.c	  5628                }
; ..\component\CanIf\Implementation\CanIf.c	  5629              }
; ..\component\CanIf\Implementation\CanIf.c	  5630              /* transmission has been requested for the buffered PDU ID with the highest priority */
; ..\component\CanIf\Implementation\CanIf.c	  5631              break;
; ..\component\CanIf\Implementation\CanIf.c	  5632            }
; ..\component\CanIf\Implementation\CanIf.c	  5633          }
; ..\component\CanIf\Implementation\CanIf.c	  5634        }
; ..\component\CanIf\Implementation\CanIf.c	  5635  #  else
; ..\component\CanIf\Implementation\CanIf.c	  5636        /* #300 PRIO_BY_CANID: BYTE_QUEUE handling: */
; ..\component\CanIf\Implementation\CanIf.c	  5637        txBufferPrioByCanIdBaseIdx = CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_BUFFERBASEIDX(txBufferCfgIdx);
	fcall	.cocofun_11
.L794:

; ..\component\CanIf\Implementation\CanIf.c	  5638         
; ..\component\CanIf\Implementation\CanIf.c	  5639        /* #310 Anything buffered? */
; ..\component\CanIf\Implementation\CanIf.c	  5640        if (CanIf_GetTxQueueCounter(txBufferPrioByCanIdBaseIdx) != 0u)
	movh.a	a2,#@his(CanIf_TxBufferPrioByCanIdBase)
	lea	a2,[a2]@los(CanIf_TxBufferPrioByCanIdBase)
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L957:
	jeq	d15,#0,.L183
.L958:

; ..\component\CanIf\Implementation\CanIf.c	  5641        {
; ..\component\CanIf\Implementation\CanIf.c	  5642          /* #320 Compute the next buffered PDU ID with the highest priority */  
; ..\component\CanIf\Implementation\CanIf.c	  5643          for (idx2MappedTxPdus = ((CanIf_AnyIdxType)CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_STOPIDX2MAPPEDTXPDUS(txBufferCfgIdx)-1u); idx2MappedTxPdus >= CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_STARTIDX2MAPPEDTXPDUS(txBufferCfgIdx); idx2MappedTxPdus--)     
	ld.bu	d15,[a15]1
.L959:

; ..\component\CanIf\Implementation\CanIf.c	  5644          {
; ..\component\CanIf\Implementation\CanIf.c	  5645            CanIf_AnyIdxType TxPduId;
; ..\component\CanIf\Implementation\CanIf.c	  5646            TxPduId = CANIF_CFG_TXBUFFERPRIOBYCANIDBYTEQUEUE_MAPPEDTXPDUS(idx2MappedTxPdus);
	movh.a	a2,#@his(CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdus)
.L960:
	add	d0,d15,#-1
	lea	a2,[a2]@los(CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdus)
.L796:
	addsc.a	a2,a2,d0,#0
.L585:

; ..\component\CanIf\Implementation\CanIf.c	  5647            
; ..\component\CanIf\Implementation\CanIf.c	  5648            if (CANIF_VAR_TXBUFFERPRIOBYCANID_QUEUE(CANIF_CFG_TX_QUEUEINDEX(TxPduId), eQueued) != 0u)
	movh.a	a4,#@his(CanIf_TxPduQueueIndex)
	movh.a	a5,#@his(CanIf_TxQueue)
	lea	a4,[a4]@los(CanIf_TxPduQueueIndex)
	lea	a5,[a5]@los(CanIf_TxQueue)
.L586:
	j	.L184
.L185:
	ld.bu	d4,[a2]
.L797:
	addsc.a	a6,a4,d4,#1
	ld.bu	d15,[a6]
	addsc.a	a6,a5,d15,#1
	ld.bu	d15,[a6]1
.L961:
	jeq	d15,#0,.L186
.L962:

; ..\component\CanIf\Implementation\CanIf.c	  5649            {
; ..\component\CanIf\Implementation\CanIf.c	  5650              /* Send and remove from queue */
; ..\component\CanIf\Implementation\CanIf.c	  5651              /* #330 Call CanIf_TxQueueTransmit() for the corresponding TxPdu ID */
; ..\component\CanIf\Implementation\CanIf.c	  5652              retval = CanIf_TxQueueTransmit((PduIdType)TxPduId);
	j	CanIf_TxQueueTransmit
.L186:
	add	d0,#-1
	add.a	a2,#-1
.L184:
	ld.bu	d15,[a15]3
.L963:
	jge.u	d0,d15,.L185
.L183:

; ..\component\CanIf\Implementation\CanIf.c	  5653              break;
; ..\component\CanIf\Implementation\CanIf.c	  5654            }
; ..\component\CanIf\Implementation\CanIf.c	  5655          }
; ..\component\CanIf\Implementation\CanIf.c	  5656        }
; ..\component\CanIf\Implementation\CanIf.c	  5657  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  5658        break;
; ..\component\CanIf\Implementation\CanIf.c	  5659  # endif  
; ..\component\CanIf\Implementation\CanIf.c	  5660  # if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5661      case CANIF_TXBUFFER_HANDLINGTYPE_FIFO:
; ..\component\CanIf\Implementation\CanIf.c	  5662        /* #400 FIFO buffer handling */
; ..\component\CanIf\Implementation\CanIf.c	  5663        txBufferFifoBaseIdx = CANIF_CFG_TXBUFFERFIFO_BUFFERBASEIDX(txBufferCfgIdx);
; ..\component\CanIf\Implementation\CanIf.c	  5664        txBufferFifoQueueBaseStartIdx = CANIF_CFG_TXBUFFERFIFO_QUEUEBASESTARTIDX(txBufferCfgIdx);
; ..\component\CanIf\Implementation\CanIf.c	  5665        /* #410 Anything buffered? */
; ..\component\CanIf\Implementation\CanIf.c	  5666        if (CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eQueueCounter) != 0u)
; ..\component\CanIf\Implementation\CanIf.c	  5667        {
; ..\component\CanIf\Implementation\CanIf.c	  5668  #  if (CANIF_CANCEL_SUPPORT_API == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5669          /* #420 Some entries in CanIf_TxFifoQueueBase may be cancelled */
; ..\component\CanIf\Implementation\CanIf.c	  5670          txBufferFifoActReadIdx = CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx);
; ..\component\CanIf\Implementation\CanIf.c	  5671          /* #430 Repeat until a queued element is found or the queue is empty */
; ..\component\CanIf\Implementation\CanIf.c	  5672          while ((CANIF_VAR_TXBUFFERFIFO_QUEUEBASE((txBufferFifoActReadIdx + txBufferFifoQueueBaseStartIdx), eQueued) == 0u) && ((CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eQueueCounter)) != 0u)) 
; ..\component\CanIf\Implementation\CanIf.c	  5673          {
; ..\component\CanIf\Implementation\CanIf.c	  5674            /* #440 Decrement ReadIdx and manage the underflow */
; ..\component\CanIf\Implementation\CanIf.c	  5675            CANIF_VAR_TXBUFFERFIFO_BUFFERBASE( txBufferFifoBaseIdx, eReadIdx) ++;  /* SBSW_CANIF_37 */
; ..\component\CanIf\Implementation\CanIf.c	  5676  
; ..\component\CanIf\Implementation\CanIf.c	  5677            if(CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx) == CANIF_CFG_TXBUFFERFIFO_QUEUESIZE(txBufferCfgIdx)) 
; ..\component\CanIf\Implementation\CanIf.c	  5678            {
; ..\component\CanIf\Implementation\CanIf.c	  5679              CANIF_VAR_TXBUFFERFIFO_BUFFERBASE( txBufferFifoBaseIdx, eReadIdx) = 0; /* SBSW_CANIF_37 */
; ..\component\CanIf\Implementation\CanIf.c	  5680            }
; ..\component\CanIf\Implementation\CanIf.c	  5681            
; ..\component\CanIf\Implementation\CanIf.c	  5682            /* #450 Decrement the FIFO-counter */
; ..\component\CanIf\Implementation\CanIf.c	  5683            CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eQueueCounter)--; /* SBSW_CANIF_37 */
; ..\component\CanIf\Implementation\CanIf.c	  5684            
; ..\component\CanIf\Implementation\CanIf.c	  5685            /* #460 Update the FIFO-ReadIdx */
; ..\component\CanIf\Implementation\CanIf.c	  5686            txBufferFifoActReadIdx = CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx);
; ..\component\CanIf\Implementation\CanIf.c	  5687          }
; ..\component\CanIf\Implementation\CanIf.c	  5688          /* #500 Is FIFO already empty? */
; ..\component\CanIf\Implementation\CanIf.c	  5689          if (CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eQueueCounter) != 0u)
; ..\component\CanIf\Implementation\CanIf.c	  5690  #  endif  
; ..\component\CanIf\Implementation\CanIf.c	  5691          {
; ..\component\CanIf\Implementation\CanIf.c	  5692            /* #510 If any valid Tx-PDU within the FIFO found, transmit it. */
; ..\component\CanIf\Implementation\CanIf.c	  5693            txBufferFifoActReadIdx = CANIF_VAR_TXBUFFERFIFO_BUFFERBASE(txBufferFifoBaseIdx, eReadIdx);
; ..\component\CanIf\Implementation\CanIf.c	  5694            retval = CanIf_TxQueueTransmit(CANIF_VAR_TXBUFFERFIFO_QUEUEBASE((txBufferFifoActReadIdx + txBufferFifoQueueBaseStartIdx), eTxPduId));
; ..\component\CanIf\Implementation\CanIf.c	  5695          }
; ..\component\CanIf\Implementation\CanIf.c	  5696        }
; ..\component\CanIf\Implementation\CanIf.c	  5697        break;
; ..\component\CanIf\Implementation\CanIf.c	  5698  # endif            
; ..\component\CanIf\Implementation\CanIf.c	  5699      default: /* PRQA S 2016 */ /* MD_MSR_EmptyClause */
.L182:

; ..\component\CanIf\Implementation\CanIf.c	  5700        break;
; ..\component\CanIf\Implementation\CanIf.c	  5701    }
; ..\component\CanIf\Implementation\CanIf.c	  5702    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  5703  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
	ret
.L579:
	
__CanIf_TxQueueTreatment_function_end:
	.size	CanIf_TxQueueTreatment,__CanIf_TxQueueTreatment_function_end-CanIf_TxQueueTreatment
.L353:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_InitMemory',code,cluster('CanIf_InitMemory')
	.sect	'.text.CanIf.CanIf_InitMemory'
	.align	2
	
	.global	CanIf_InitMemory

; ..\component\CanIf\Implementation\CanIf.c	  5704  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5705  
; ..\component\CanIf\Implementation\CanIf.c	  5706  
; ..\component\CanIf\Implementation\CanIf.c	  5707  /* \trace CANIF-3550 */
; ..\component\CanIf\Implementation\CanIf.c	  5708  #if (CANIF_VERSION_INFO_API == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5709  /* \trace SPEC-1896 */
; ..\component\CanIf\Implementation\CanIf.c	  5710  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  5711   *  CanIf_GetVersionInfo()
; ..\component\CanIf\Implementation\CanIf.c	  5712   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  5713  /*
; ..\component\CanIf\Implementation\CanIf.c	  5714  |<DataModelStart>| CanIf_GetVersionInfo
; ..\component\CanIf\Implementation\CanIf.c	  5715  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  5716  CanIfVersionInfoApi # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  5717  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  5718  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5719  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  5720  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  5721  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  5722  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  5723  */
; ..\component\CanIf\Implementation\CanIf.c	  5724   /*!
; ..\component\CanIf\Implementation\CanIf.c	  5725   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  5726   *
; ..\component\CanIf\Implementation\CanIf.c	  5727   *
; ..\component\CanIf\Implementation\CanIf.c	  5728   *
; ..\component\CanIf\Implementation\CanIf.c	  5729   */
; ..\component\CanIf\Implementation\CanIf.c	  5730  FUNC(void, CANIF_CODE) CanIf_GetVersionInfo(P2VAR(Std_VersionInfoType, AUTOMATIC, CANIF_APPL_VAR) VersionInfo)
; ..\component\CanIf\Implementation\CanIf.c	  5731  {
; ..\component\CanIf\Implementation\CanIf.c	  5732    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5733    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  5734  
; ..\component\CanIf\Implementation\CanIf.c	  5735    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5736  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5737    /* #10 Check if parameter VersionInfo is valid */
; ..\component\CanIf\Implementation\CanIf.c	  5738    if (VersionInfo == NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  5739    {
; ..\component\CanIf\Implementation\CanIf.c	  5740      /* \trace SPEC-5235 */
; ..\component\CanIf\Implementation\CanIf.c	  5741      errorId = CANIF_E_PARAM_POINTER;
; ..\component\CanIf\Implementation\CanIf.c	  5742    }
; ..\component\CanIf\Implementation\CanIf.c	  5743    else
; ..\component\CanIf\Implementation\CanIf.c	  5744  # endif
; ..\component\CanIf\Implementation\CanIf.c	  5745    {
; ..\component\CanIf\Implementation\CanIf.c	  5746      /* ----- Implementation --------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5747  
; ..\component\CanIf\Implementation\CanIf.c	  5748      /* \trace SPEC-3552 */
; ..\component\CanIf\Implementation\CanIf.c	  5749      /* #100 Get the version information: vendor ID, module ID, SW version */
; ..\component\CanIf\Implementation\CanIf.c	  5750      VersionInfo->vendorID         = CANIF_VENDOR_ID; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  5751      VersionInfo->moduleID         = CANIF_MODULE_ID; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  5752      VersionInfo->sw_major_version = CANIF_SW_MAJOR_VERSION; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  5753      VersionInfo->sw_minor_version = CANIF_SW_MINOR_VERSION; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  5754      VersionInfo->sw_patch_version = CANIF_SW_PATCH_VERSION; /* SBSW_CANIF_9 */
; ..\component\CanIf\Implementation\CanIf.c	  5755    }
; ..\component\CanIf\Implementation\CanIf.c	  5756  
; ..\component\CanIf\Implementation\CanIf.c	  5757    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5758  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5759    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  5760    {
; ..\component\CanIf\Implementation\CanIf.c	  5761      CanIf_Det_ReportError(CANIF_GETVERSIONINFO_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  5762    }
; ..\component\CanIf\Implementation\CanIf.c	  5763  # else
; ..\component\CanIf\Implementation\CanIf.c	  5764    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  5765  # endif
; ..\component\CanIf\Implementation\CanIf.c	  5766  }
; ..\component\CanIf\Implementation\CanIf.c	  5767  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5768  
; ..\component\CanIf\Implementation\CanIf.c	  5769  
; ..\component\CanIf\Implementation\CanIf.c	  5770  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  5771   *  CanIf_InitMemory
; ..\component\CanIf\Implementation\CanIf.c	  5772   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  5773  /*
; ..\component\CanIf\Implementation\CanIf.c	  5774  |<DataModelStart>| CanIf_InitMemory
; ..\component\CanIf\Implementation\CanIf.c	  5775  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  5776  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  5777  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  5778  CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  5779  CanIfVariant, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5780  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  5781  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  5782  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  5783  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  5784  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  5785  */
; ..\component\CanIf\Implementation\CanIf.c	  5786   /*!
; ..\component\CanIf\Implementation\CanIf.c	  5787   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  5788   *
; ..\component\CanIf\Implementation\CanIf.c	  5789   *
; ..\component\CanIf\Implementation\CanIf.c	  5790   *
; ..\component\CanIf\Implementation\CanIf.c	  5791   */
; ..\component\CanIf\Implementation\CanIf.c	  5792  FUNC(void, CANIF_CODE) CanIf_InitMemory(void)
; Function CanIf_InitMemory
.L287:
CanIf_InitMemory:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  5793  {
; ..\component\CanIf\Implementation\CanIf.c	  5794    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5795    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  5796    
; ..\component\CanIf\Implementation\CanIf.c	  5797    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5798  #if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5799    /* #100 Initialize the configuration pointer */
; ..\component\CanIf\Implementation\CanIf.c	  5800    CanIf_ConfigDataPtr = NULL_PTR;
; ..\component\CanIf\Implementation\CanIf.c	  5801  
; ..\component\CanIf\Implementation\CanIf.c	  5802  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5803    CanIf_SystemInit = FALSE; /* ESCAN00083271 */
; ..\component\CanIf\Implementation\CanIf.c	  5804  # endif
; ..\component\CanIf\Implementation\CanIf.c	  5805  #endif /* CANIF_USE_INIT_POINTER == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  5806  
; ..\component\CanIf\Implementation\CanIf.c	  5807  #if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  5808    for (controller = 0; controller < (sizeof(CanIf_CtrlStates) / sizeof(CanIf_CtrlStatesType)); controller++)
; ..\component\CanIf\Implementation\CanIf.c	  5809  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5810    {
; ..\component\CanIf\Implementation\CanIf.c	  5811      /* #110 Run through all CAN channels and set the state to UNINIT */
; ..\component\CanIf\Implementation\CanIf.c	  5812      CanIf_SetCtrlMode(CanIf_Controller_Value_Local, CANIF_CS_UNINIT);  /* SBSW_CANIF_24 */
	movh.a	a15,#@his(CanIf_CtrlStates)
	mov	d15,#0
	st.b	[a15]@los(CanIf_CtrlStates),d15
.L810:

; ..\component\CanIf\Implementation\CanIf.c	  5813    } /* FOR-loop all CAN channels */
; ..\component\CanIf\Implementation\CanIf.c	  5814  }
	ret
.L514:
	
__CanIf_InitMemory_function_end:
	.size	CanIf_InitMemory,__CanIf_InitMemory_function_end-CanIf_InitMemory
.L298:
	; End of function
	
	.sdecl	'.text.CanIf.CanIf_ControllerModeIndication',code,cluster('CanIf_ControllerModeIndication')
	.sect	'.text.CanIf.CanIf_ControllerModeIndication'
	.align	2
	
	.global	CanIf_ControllerModeIndication

; ..\component\CanIf\Implementation\CanIf.c	  5815  
; ..\component\CanIf\Implementation\CanIf.c	  5816  
; ..\component\CanIf\Implementation\CanIf.c	  5817  #if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5818  # if (CANIF_TRANSMIT_BUFFER_FIFO == STD_OFF)
; ..\component\CanIf\Implementation\CanIf.c	  5819  #  if (CANIF_TRANSMIT_CANCELLATION == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5820  /* \trace SPEC-3716 */
; ..\component\CanIf\Implementation\CanIf.c	  5821  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  5822   *  CanIf_CancelTxConfirmation()
; ..\component\CanIf\Implementation\CanIf.c	  5823   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  5824  /*
; ..\component\CanIf\Implementation\CanIf.c	  5825  |<DataModelStart>| CanIf_CancelTxConfirmation
; ..\component\CanIf\Implementation\CanIf.c	  5826  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  5827  CanIfTxBuffer, CanIfHwCancelTx # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  5828  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  5829  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5830  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  5831  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  5832  CanIfFdSupport # used for CANIF_STATIC_FD_TXQUEUE #
; ..\component\CanIf\Implementation\CanIf.c	  5833  CanIfFdSupport, CanIfDevErrorDetect # used for CANIF_STATIC_FD_TXQUEUE #
; ..\component\CanIf\Implementation\CanIf.c	  5834  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5835  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  5836  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  5837  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  5838  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  5839  */
; ..\component\CanIf\Implementation\CanIf.c	  5840   /*!
; ..\component\CanIf\Implementation\CanIf.c	  5841   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  5842   *
; ..\component\CanIf\Implementation\CanIf.c	  5843   *
; ..\component\CanIf\Implementation\CanIf.c	  5844   *
; ..\component\CanIf\Implementation\CanIf.c	  5845   *
; ..\component\CanIf\Implementation\CanIf.c	  5846   *
; ..\component\CanIf\Implementation\CanIf.c	  5847   *
; ..\component\CanIf\Implementation\CanIf.c	  5848   *
; ..\component\CanIf\Implementation\CanIf.c	  5849   *
; ..\component\CanIf\Implementation\CanIf.c	  5850   *
; ..\component\CanIf\Implementation\CanIf.c	  5851   *
; ..\component\CanIf\Implementation\CanIf.c	  5852   *
; ..\component\CanIf\Implementation\CanIf.c	  5853   */
; ..\component\CanIf\Implementation\CanIf.c	  5854  FUNC(void, CANIF_CODE) CanIf_CancelTxConfirmation(PduIdType CanTxPduId, P2CONST(Can_PduType, AUTOMATIC, CANIF_CBK_DRV_VAR) PduInfoPtr)
; ..\component\CanIf\Implementation\CanIf.c	  5855  {
; ..\component\CanIf\Implementation\CanIf.c	  5856    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5857    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  5858  
; ..\component\CanIf\Implementation\CanIf.c	  5859    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5860  #    if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5861  #     if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5862    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  5863    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  5864    {
; ..\component\CanIf\Implementation\CanIf.c	  5865      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  5866      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  5867    }
; ..\component\CanIf\Implementation\CanIf.c	  5868    else
; ..\component\CanIf\Implementation\CanIf.c	  5869  #     endif
; ..\component\CanIf\Implementation\CanIf.c	  5870    /* #20 Check if parameter PduInfoPtr is valid */
; ..\component\CanIf\Implementation\CanIf.c	  5871    if (PduInfoPtr == NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  5872    {
; ..\component\CanIf\Implementation\CanIf.c	  5873      errorId = CANIF_E_PARAM_POINTER;
; ..\component\CanIf\Implementation\CanIf.c	  5874    }
; ..\component\CanIf\Implementation\CanIf.c	  5875    /* #30 Check if parameter PduInfoPtr->swPduHandle is valid */
; ..\component\CanIf\Implementation\CanIf.c	  5876    else if (PduInfoPtr->swPduHandle >= CANIF_CFG_MAX_TXPDUS)
; ..\component\CanIf\Implementation\CanIf.c	  5877    {
; ..\component\CanIf\Implementation\CanIf.c	  5878      /* \trace SPEC-3712 */
; ..\component\CanIf\Implementation\CanIf.c	  5879      errorId = CANIF_E_PARAM_LPDU;
; ..\component\CanIf\Implementation\CanIf.c	  5880    }
; ..\component\CanIf\Implementation\CanIf.c	  5881    /* #40 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  5882    else if (CanIf_GetCtrlMode(CANIF_CFG_TX_CONTROLLER(PduInfoPtr->swPduHandle)) == CANIF_CS_UNINIT )
; ..\component\CanIf\Implementation\CanIf.c	  5883    {
; ..\component\CanIf\Implementation\CanIf.c	  5884      /* \trace SPEC-3708, SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  5885      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  5886    }
; ..\component\CanIf\Implementation\CanIf.c	  5887  #     if ((CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON) && (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  5888    /* #50 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  5889    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CANIF_CFG_TX_CONTROLLER(PduInfoPtr->swPduHandle)))
; ..\component\CanIf\Implementation\CanIf.c	  5890    {
; ..\component\CanIf\Implementation\CanIf.c	  5891      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  5892    }
; ..\component\CanIf\Implementation\CanIf.c	  5893  #     endif
; ..\component\CanIf\Implementation\CanIf.c	  5894    else
; ..\component\CanIf\Implementation\CanIf.c	  5895  #    endif
; ..\component\CanIf\Implementation\CanIf.c	  5896    {
; ..\component\CanIf\Implementation\CanIf.c	  5897      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5898  
; ..\component\CanIf\Implementation\CanIf.c	  5899      /* #100 Is TxPDU a BasicCAN-PDU and has it a buffer? */
; ..\component\CanIf\Implementation\CanIf.c	  5900      if (CANIF_CFG_MAILBOX_HASTXBUFFER(CANIF_CFG_TX_HTH(PduInfoPtr->swPduHandle))) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  5901      {
; ..\component\CanIf\Implementation\CanIf.c	  5902        /* #110 Verify the DLC of cancelled Tx-PDU (only if FD-Tx-queue is configured) */
; ..\component\CanIf\Implementation\CanIf.c	  5903  #    if(CANIF_STATIC_FD_TXQUEUE == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5904        if(PduInfoPtr->length <= CANIF_CFG_TXBUFFERPRIOBYCANID_STATFDQUEUE_MAXDATALENGTH(PduInfoPtr->swPduHandle))
; ..\component\CanIf\Implementation\CanIf.c	  5905  #    else
; ..\component\CanIf\Implementation\CanIf.c	  5906        if(PduInfoPtr->length <= CANIF_STATIC_BUFFER_SIZE)
; ..\component\CanIf\Implementation\CanIf.c	  5907  #    endif
; ..\component\CanIf\Implementation\CanIf.c	  5908        {
; ..\component\CanIf\Implementation\CanIf.c	  5909          /* #120 Check if cancelled Tx-PDU is already buffered in Tx-queue (critical section is used) */
; ..\component\CanIf\Implementation\CanIf.c	  5910          CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_1);
; ..\component\CanIf\Implementation\CanIf.c	  5911          if (CanIf_SetPrioByCanIdTxPduAsQueued(PduInfoPtr->swPduHandle) == E_OK)
; ..\component\CanIf\Implementation\CanIf.c	  5912          {
; ..\component\CanIf\Implementation\CanIf.c	  5913            CanIf_TxBufferPrioByCanIdQueuePdu(PduInfoPtr); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  5914          }
; ..\component\CanIf\Implementation\CanIf.c	  5915          else
; ..\component\CanIf\Implementation\CanIf.c	  5916          {
; ..\component\CanIf\Implementation\CanIf.c	  5917            /* #130 Newer Tx-PDU is already buffered, discard the cancelled one */
; ..\component\CanIf\Implementation\CanIf.c	  5918          }
; ..\component\CanIf\Implementation\CanIf.c	  5919          CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_1);
; ..\component\CanIf\Implementation\CanIf.c	  5920        }
; ..\component\CanIf\Implementation\CanIf.c	  5921  #    if ((CANIF_STATIC_FD_TXQUEUE == STD_ON) && (CANIF_DEV_ERROR_DETECT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  5922        else
; ..\component\CanIf\Implementation\CanIf.c	  5923        {
; ..\component\CanIf\Implementation\CanIf.c	  5924          errorId = CANIF_E_PARAM_DLC;
; ..\component\CanIf\Implementation\CanIf.c	  5925        }
; ..\component\CanIf\Implementation\CanIf.c	  5926  #    endif
; ..\component\CanIf\Implementation\CanIf.c	  5927        /* #140 Trigger the transmission of the queue */
; ..\component\CanIf\Implementation\CanIf.c	  5928        CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_2);
; ..\component\CanIf\Implementation\CanIf.c	  5929        (void)CanIf_TxQueueTreatment((CanIf_HwHandleType)CANIF_CFG_TX_HTH(PduInfoPtr->swPduHandle));
; ..\component\CanIf\Implementation\CanIf.c	  5930        CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_2); /* lock over queue handling + write call (driver does not expect direct call inbetween) */
; ..\component\CanIf\Implementation\CanIf.c	  5931      }
; ..\component\CanIf\Implementation\CanIf.c	  5932      else
; ..\component\CanIf\Implementation\CanIf.c	  5933      {
; ..\component\CanIf\Implementation\CanIf.c	  5934        /* FullCANs won't be cancelled */
; ..\component\CanIf\Implementation\CanIf.c	  5935      }
; ..\component\CanIf\Implementation\CanIf.c	  5936    }
; ..\component\CanIf\Implementation\CanIf.c	  5937  
; ..\component\CanIf\Implementation\CanIf.c	  5938    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  5939  #    if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5940    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  5941    {
; ..\component\CanIf\Implementation\CanIf.c	  5942      CanIf_Det_ReportError(CANIF_CANCELTXCONFIRMATION_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  5943    }
; ..\component\CanIf\Implementation\CanIf.c	  5944  #    else
; ..\component\CanIf\Implementation\CanIf.c	  5945    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  5946  #    endif
; ..\component\CanIf\Implementation\CanIf.c	  5947    CANIF_DUMMY_STATEMENT(CanTxPduId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  5948  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  5949  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  5950  # endif
; ..\component\CanIf\Implementation\CanIf.c	  5951  #endif
; ..\component\CanIf\Implementation\CanIf.c	  5952  
; ..\component\CanIf\Implementation\CanIf.c	  5953  
; ..\component\CanIf\Implementation\CanIf.c	  5954  /* \trace SPEC-4718 */
; ..\component\CanIf\Implementation\CanIf.c	  5955  #if (CANIF_CANCEL_SUPPORT_API == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  5956  /* \trace SPEC-4715 */
; ..\component\CanIf\Implementation\CanIf.c	  5957  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  5958   *  CanIf_CancelTransmit()
; ..\component\CanIf\Implementation\CanIf.c	  5959   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  5960  /*
; ..\component\CanIf\Implementation\CanIf.c	  5961  |<DataModelStart>| CanIf_CancelTransmit
; ..\component\CanIf\Implementation\CanIf.c	  5962  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  5963  CanIfTransmitCancellationAPI # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  5964  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  5965  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  5966  CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  5967  CanIfVariant, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5968  CanIfVariant, CanIfDevErrorDetect, CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  5969  CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  5970  CanIfMultipleDriver, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  5971  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  5972  CanIfMultipleDriver, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  5973  CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  5974  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  5975  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  5976  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  5977  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  5978  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  5979  */
; ..\component\CanIf\Implementation\CanIf.c	  5980   /*!
; ..\component\CanIf\Implementation\CanIf.c	  5981   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  5982   *
; ..\component\CanIf\Implementation\CanIf.c	  5983   *
; ..\component\CanIf\Implementation\CanIf.c	  5984   *
; ..\component\CanIf\Implementation\CanIf.c	  5985   *
; ..\component\CanIf\Implementation\CanIf.c	  5986   *
; ..\component\CanIf\Implementation\CanIf.c	  5987   *
; ..\component\CanIf\Implementation\CanIf.c	  5988   *
; ..\component\CanIf\Implementation\CanIf.c	  5989   *
; ..\component\CanIf\Implementation\CanIf.c	  5990   *
; ..\component\CanIf\Implementation\CanIf.c	  5991   *
; ..\component\CanIf\Implementation\CanIf.c	  5992   *
; ..\component\CanIf\Implementation\CanIf.c	  5993   *
; ..\component\CanIf\Implementation\CanIf.c	  5994   *
; ..\component\CanIf\Implementation\CanIf.c	  5995   *
; ..\component\CanIf\Implementation\CanIf.c	  5996   */
; ..\component\CanIf\Implementation\CanIf.c	  5997  FUNC(Std_ReturnType, CANIF_CODE) CanIf_CancelTransmit(PduIdType CanTxPduId)
; ..\component\CanIf\Implementation\CanIf.c	  5998  {
; ..\component\CanIf\Implementation\CanIf.c	  5999    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6000    Std_ReturnType retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  6001    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  6002  
; ..\component\CanIf\Implementation\CanIf.c	  6003    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6004  # if ((CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  6005    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  6006    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  6007    {
; ..\component\CanIf\Implementation\CanIf.c	  6008      retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  6009      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  6010      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6011    }
; ..\component\CanIf\Implementation\CanIf.c	  6012    else
; ..\component\CanIf\Implementation\CanIf.c	  6013  # endif /* (CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  6014  # if ((CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME) || (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  6015  #  if (CANIF_DEV_ERROR_DETECT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  6016    /* #20 Check if parameter CanTxPduId is valid if a CanTxPduId indirection is done. */
; ..\component\CanIf\Implementation\CanIf.c	  6017    if (CanTxPduId >= CANIF_CFG_MAX_ULTXPDUS)
; ..\component\CanIf\Implementation\CanIf.c	  6018    {
; ..\component\CanIf\Implementation\CanIf.c	  6019      retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  6020      /* \trace SPEC-2007 */
; ..\component\CanIf\Implementation\CanIf.c	  6021      errorId = CANIF_E_INVALID_TXPDUID;
; ..\component\CanIf\Implementation\CanIf.c	  6022    }
; ..\component\CanIf\Implementation\CanIf.c	  6023    else
; ..\component\CanIf\Implementation\CanIf.c	  6024  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6025    {
; ..\component\CanIf\Implementation\CanIf.c	  6026      /* for PB and LT configurations the TxPduId order between CanIF and higher layers may differ and needs to be indirected */
; ..\component\CanIf\Implementation\CanIf.c	  6027      CanTxPduId = CANIF_CFG_TXPDUID2INTTXPDUID(CanTxPduId); /* PRQA S 1338 */ /* MD_CanIf_Rule17.8 */
; ..\component\CanIf\Implementation\CanIf.c	  6028  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6029  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6030      /* #30 Check if parameter CanTxPduId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  6031      if (CanTxPduId >= CANIF_CFG_MAX_TXPDUS)
; ..\component\CanIf\Implementation\CanIf.c	  6032      {
; ..\component\CanIf\Implementation\CanIf.c	  6033        retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  6034        /* \trace SPEC-2007 */
; ..\component\CanIf\Implementation\CanIf.c	  6035        errorId = CANIF_E_INVALID_TXPDUID;
; ..\component\CanIf\Implementation\CanIf.c	  6036      }
; ..\component\CanIf\Implementation\CanIf.c	  6037      else
; ..\component\CanIf\Implementation\CanIf.c	  6038  # endif        
; ..\component\CanIf\Implementation\CanIf.c	  6039      {
; ..\component\CanIf\Implementation\CanIf.c	  6040        {
; ..\component\CanIf\Implementation\CanIf.c	  6041  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6042          /* #40 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  6043          if (CanIf_GetCtrlMode(CANIF_CFG_TX_CONTROLLER(CanTxPduId)) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  6044          {
; ..\component\CanIf\Implementation\CanIf.c	  6045            retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  6046            errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6047          }
; ..\component\CanIf\Implementation\CanIf.c	  6048  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6049  #   if (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  6050          /* #50 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  6051          else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CANIF_CFG_TX_CONTROLLER(CanTxPduId)))
; ..\component\CanIf\Implementation\CanIf.c	  6052          {
; ..\component\CanIf\Implementation\CanIf.c	  6053            retval = E_NOT_OK; /* ESCAN00093796 */
; ..\component\CanIf\Implementation\CanIf.c	  6054            errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  6055          }
; ..\component\CanIf\Implementation\CanIf.c	  6056  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  6057  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6058          else
; ..\component\CanIf\Implementation\CanIf.c	  6059  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  6060          {
; ..\component\CanIf\Implementation\CanIf.c	  6061            
; ..\component\CanIf\Implementation\CanIf.c	  6062            /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6063            CanIf_AnyIdxType  hth;
; ..\component\CanIf\Implementation\CanIf.c	  6064  # if  (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6065            CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  6066            controller = CANIF_CFG_TX_CONTROLLER(CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  6067  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6068            hth = CANIF_CFG_TX_HTH(CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  6069            {
; ..\component\CanIf\Implementation\CanIf.c	  6070  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6071              Can_HwHandleType canDrvHth;
; ..\component\CanIf\Implementation\CanIf.c	  6072              CanIf_Can_CancelTxFctType canCancelTxFct;
; ..\component\CanIf\Implementation\CanIf.c	  6073              canCancelTxFct = CANIF_GET_CANCANCELTXFCT(CanIf_Controller_Value_Local);
; ..\component\CanIf\Implementation\CanIf.c	  6074              
; ..\component\CanIf\Implementation\CanIf.c	  6075              canDrvHth = (Can_HwHandleType)(hth - CANIF_CFG_MULTIPLECANDRV_HXHOFFSET(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CanIf_Controller_Value_Local)));
; ..\component\CanIf\Implementation\CanIf.c	  6076  
; ..\component\CanIf\Implementation\CanIf.c	  6077              if (canCancelTxFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  6078  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6079              {
; ..\component\CanIf\Implementation\CanIf.c	  6080  # if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  6081                /* #100 Check if it is a buffered Tx-PDU */
; ..\component\CanIf\Implementation\CanIf.c	  6082                if (CANIF_CFG_MAILBOX_HASTXBUFFER(hth)) /* COV_CANIF_NO_TX_BUFFER */
; ..\component\CanIf\Implementation\CanIf.c	  6083                {
; ..\component\CanIf\Implementation\CanIf.c	  6084                  /* #200 Cancel the Tx-PDU from Tx-buffer (critical section is used) */
; ..\component\CanIf\Implementation\CanIf.c	  6085                  CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_1);
; ..\component\CanIf\Implementation\CanIf.c	  6086                  /* #210 Do handle depending on corresponding Tx-buffer handling type */
; ..\component\CanIf\Implementation\CanIf.c	  6087                  switch (CANIF_CFG_MAILBOX_TXBUFFERHANDLINGTYPE(hth))
; ..\component\CanIf\Implementation\CanIf.c	  6088                  {
; ..\component\CanIf\Implementation\CanIf.c	  6089  #  if (CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6090                    /* #300 PRIOBYCANID buffer handling */
; ..\component\CanIf\Implementation\CanIf.c	  6091                    case CANIF_TXBUFFER_HANDLINGTYPE_PRIOBYCANID:
; ..\component\CanIf\Implementation\CanIf.c	  6092                      (void)CanIf_ClearPrioByCanIdTxPduAsQueued(CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  6093                      break;
; ..\component\CanIf\Implementation\CanIf.c	  6094  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6095  #  if (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6096                    /* #400 FIFO buffer handling */
; ..\component\CanIf\Implementation\CanIf.c	  6097                    case CANIF_TXBUFFER_HANDLINGTYPE_FIFO:
; ..\component\CanIf\Implementation\CanIf.c	  6098                      {
; ..\component\CanIf\Implementation\CanIf.c	  6099                        CanIf_AnyIdxType queueindex;
; ..\component\CanIf\Implementation\CanIf.c	  6100                        CanIf_AnyIdxType txBufferCfgIdx;
; ..\component\CanIf\Implementation\CanIf.c	  6101                        queueindex = CANIF_CFG_TX_QUEUEINDEX(CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  6102                        txBufferCfgIdx = CANIF_CFG_MAILBOX_TXBUFFERIDX(hth);
; ..\component\CanIf\Implementation\CanIf.c	  6103                    
; ..\component\CanIf\Implementation\CanIf.c	  6104                        /* #410 Set the flag in CanIf_TxQueueIndex2FifoEl to invalid if set */
; ..\component\CanIf\Implementation\CanIf.c	  6105                        if(CANIF_VAR_TXBUFFERFIFO_QUEUEIDX2FIFOEL(queueindex) != CANIF_NO_ENTRY_IN_TX_FIFO)
; ..\component\CanIf\Implementation\CanIf.c	  6106                        {
; ..\component\CanIf\Implementation\CanIf.c	  6107                          CANIF_VAR_TXBUFFERFIFO_QUEUEBASE((CANIF_VAR_TXBUFFERFIFO_QUEUEIDX2FIFOEL(queueindex) + CANIF_CFG_TXBUFFERFIFO_QUEUEBASESTARTIDX(txBufferCfgIdx)), eQueued) = 0; /* set Fifo position to invalid */ /* SBSW_CANIF_39 */
; ..\component\CanIf\Implementation\CanIf.c	  6108                          CANIF_VAR_SET_TXBUFFERFIFO_QUEUEIDX2FIFOEL(queueindex, CANIF_NO_ENTRY_IN_TX_FIFO); /* SBSW_CANIF_36 */
; ..\component\CanIf\Implementation\CanIf.c	  6109                        }
; ..\component\CanIf\Implementation\CanIf.c	  6110                      }
; ..\component\CanIf\Implementation\CanIf.c	  6111                      break;
; ..\component\CanIf\Implementation\CanIf.c	  6112  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6113                  default: /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  6114                      break;
; ..\component\CanIf\Implementation\CanIf.c	  6115                  }
; ..\component\CanIf\Implementation\CanIf.c	  6116                  /* ESCAN00054772 */
; ..\component\CanIf\Implementation\CanIf.c	  6117                  CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_1);
; ..\component\CanIf\Implementation\CanIf.c	  6118                  /* #220 Cancel the Tx-PDU from CAN driver */
; ..\component\CanIf\Implementation\CanIf.c	  6119  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6120                  canCancelTxFct(canDrvHth, CanTxPduId); /* SBSW_CANIF_43 */  
; ..\component\CanIf\Implementation\CanIf.c	  6121  #  else
; ..\component\CanIf\Implementation\CanIf.c	  6122                  canCancelTxFct((CanIf_HwHandleType)hth, CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  6123  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6124                }
; ..\component\CanIf\Implementation\CanIf.c	  6125                else
; ..\component\CanIf\Implementation\CanIf.c	  6126                {
; ..\component\CanIf\Implementation\CanIf.c	  6127                  /* #120 FullCAN or BasicCAN without buffer: Cancel the Tx-PDU from CAN driver */
; ..\component\CanIf\Implementation\CanIf.c	  6128  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6129                  canCancelTxFct(canDrvHth, CanTxPduId); /* SBSW_CANIF_43 */  
; ..\component\CanIf\Implementation\CanIf.c	  6130  #  else
; ..\component\CanIf\Implementation\CanIf.c	  6131                  canCancelTxFct((CanIf_HwHandleType)hth, CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  6132  #  endif                
; ..\component\CanIf\Implementation\CanIf.c	  6133                }
; ..\component\CanIf\Implementation\CanIf.c	  6134  # else  /* CANIF_TRANSMIT_BUFFER */
; ..\component\CanIf\Implementation\CanIf.c	  6135  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6136                canCancelTxFct(canDrvHth, CanTxPduId); /* SBSW_CANIF_43 */  
; ..\component\CanIf\Implementation\CanIf.c	  6137  #  else
; ..\component\CanIf\Implementation\CanIf.c	  6138                canCancelTxFct((CanIf_HwHandleType)hth, CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  6139  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6140  # endif /* CANIF_TRANSMIT_BUFFER */
; ..\component\CanIf\Implementation\CanIf.c	  6141              }
; ..\component\CanIf\Implementation\CanIf.c	  6142  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6143              else  /* if (canCancelTxFct != NULL_PTR) */
; ..\component\CanIf\Implementation\CanIf.c	  6144              {
; ..\component\CanIf\Implementation\CanIf.c	  6145                retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  6146              }
; ..\component\CanIf\Implementation\CanIf.c	  6147  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6148            }
; ..\component\CanIf\Implementation\CanIf.c	  6149          }
; ..\component\CanIf\Implementation\CanIf.c	  6150        }
; ..\component\CanIf\Implementation\CanIf.c	  6151      }
; ..\component\CanIf\Implementation\CanIf.c	  6152  # if ((CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME) || (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  6153    }
; ..\component\CanIf\Implementation\CanIf.c	  6154  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6155    
; ..\component\CanIf\Implementation\CanIf.c	  6156    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6157  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6158    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  6159    {
; ..\component\CanIf\Implementation\CanIf.c	  6160      CanIf_Det_ReportError(CANIF_CANCELTRANSMIT_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  6161    }
; ..\component\CanIf\Implementation\CanIf.c	  6162  # else
; ..\component\CanIf\Implementation\CanIf.c	  6163    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  6164  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6165    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  6166  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  6167  #endif /* CANIF_CANCEL_SUPPORT_API == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  6168  
; ..\component\CanIf\Implementation\CanIf.c	  6169  
; ..\component\CanIf\Implementation\CanIf.c	  6170  #if (CANIF_CANCEL_SUPPORT_API == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6171  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  6172   *  CanIf_CancelTxNotification()
; ..\component\CanIf\Implementation\CanIf.c	  6173   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  6174  /*
; ..\component\CanIf\Implementation\CanIf.c	  6175  |<DataModelStart>| CanIf_CancelTxNotification
; ..\component\CanIf\Implementation\CanIf.c	  6176  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  6177  CanIfTransmitCancellationAPI # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  6178  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  6179  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6180  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  6181  CanIfDevErrorDetect, CanIfVariant, CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  6182  CanIfPnEnable
; ..\component\CanIf\Implementation\CanIf.c	  6183  CanIfTxBuffer
; ..\component\CanIf\Implementation\CanIf.c	  6184  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6185  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  6186  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  6187  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  6188  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  6189  */
; ..\component\CanIf\Implementation\CanIf.c	  6190   /*!
; ..\component\CanIf\Implementation\CanIf.c	  6191   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  6192   *
; ..\component\CanIf\Implementation\CanIf.c	  6193   *
; ..\component\CanIf\Implementation\CanIf.c	  6194   *
; ..\component\CanIf\Implementation\CanIf.c	  6195   *
; ..\component\CanIf\Implementation\CanIf.c	  6196   *
; ..\component\CanIf\Implementation\CanIf.c	  6197   *
; ..\component\CanIf\Implementation\CanIf.c	  6198   *
; ..\component\CanIf\Implementation\CanIf.c	  6199   */
; ..\component\CanIf\Implementation\CanIf.c	  6200  FUNC(void, CANIF_CODE) CanIf_CancelTxNotification(PduIdType PduId, CanIf_CancelResultType IsCancelled)
; ..\component\CanIf\Implementation\CanIf.c	  6201  {
; ..\component\CanIf\Implementation\CanIf.c	  6202    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6203    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  6204  
; ..\component\CanIf\Implementation\CanIf.c	  6205    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6206  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6207  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6208    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  6209    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  6210    {
; ..\component\CanIf\Implementation\CanIf.c	  6211      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  6212      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6213    }
; ..\component\CanIf\Implementation\CanIf.c	  6214    else
; ..\component\CanIf\Implementation\CanIf.c	  6215  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6216    /* #20 Check if parameter PduId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  6217    if (PduId >=  CANIF_CFG_MAX_TXPDUS)
; ..\component\CanIf\Implementation\CanIf.c	  6218    {
; ..\component\CanIf\Implementation\CanIf.c	  6219      errorId = CANIF_E_PARAM_LPDU;
; ..\component\CanIf\Implementation\CanIf.c	  6220    }
; ..\component\CanIf\Implementation\CanIf.c	  6221    /* #30 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  6222    else if (CanIf_GetCtrlMode(CANIF_CFG_TX_CONTROLLER(PduId)) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  6223    {
; ..\component\CanIf\Implementation\CanIf.c	  6224      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6225    }
; ..\component\CanIf\Implementation\CanIf.c	  6226  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6227  #   if (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  6228    /* #40 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  6229    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CANIF_CFG_TX_CONTROLLER(PduId)))
; ..\component\CanIf\Implementation\CanIf.c	  6230    {
; ..\component\CanIf\Implementation\CanIf.c	  6231      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  6232    }
; ..\component\CanIf\Implementation\CanIf.c	  6233  #   endif 
; ..\component\CanIf\Implementation\CanIf.c	  6234  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6235    else
; ..\component\CanIf\Implementation\CanIf.c	  6236  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6237    {
; ..\component\CanIf\Implementation\CanIf.c	  6238      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6239  
; ..\component\CanIf\Implementation\CanIf.c	  6240      /* #100 Process only if CAN channel is active */
; ..\component\CanIf\Implementation\CanIf.c	  6241      if (CanIf_GetCtrlMode(CANIF_CFG_TX_CONTROLLER(PduId)) == CANIF_CS_STARTED)
; ..\component\CanIf\Implementation\CanIf.c	  6242      {
; ..\component\CanIf\Implementation\CanIf.c	  6243        if ( (CanIf_GetChannelMode(CANIF_CFG_TX_CONTROLLER(PduId)) == CANIF_GET_ONLINE) ||
; ..\component\CanIf\Implementation\CanIf.c	  6244             (CanIf_GetChannelMode(CANIF_CFG_TX_CONTROLLER(PduId)) == CANIF_GET_TX_ONLINE)
; ..\component\CanIf\Implementation\CanIf.c	  6245  # if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6246           || (CanIf_GetChannelMode(CANIF_CFG_TX_CONTROLLER(PduId)) == CANIF_GET_ONLINE_WAKF)
; ..\component\CanIf\Implementation\CanIf.c	  6247           || (CanIf_GetChannelMode(CANIF_CFG_TX_CONTROLLER(PduId)) == CANIF_GET_TX_ONLINE_WAKF)
; ..\component\CanIf\Implementation\CanIf.c	  6248  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6249         )
; ..\component\CanIf\Implementation\CanIf.c	  6250        {
; ..\component\CanIf\Implementation\CanIf.c	  6251  #if ((CANIF_TRANSMIT_BUFFER_PRIO_BY_CANID == STD_ON) || (CANIF_TRANSMIT_BUFFER_FIFO == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  6252          if (CANIF_CFG_MAILBOX_HASTXBUFFER(CANIF_CFG_TX_HTH(PduId))) /* COV_CANIF_NO_TX_BUFFER */
; ..\component\CanIf\Implementation\CanIf.c	  6253          {
; ..\component\CanIf\Implementation\CanIf.c	  6254            /* \trace SPEC-1227 */
; ..\component\CanIf\Implementation\CanIf.c	  6255            /* #110 If Tx-queue is affected send queued messages directly */
; ..\component\CanIf\Implementation\CanIf.c	  6256            CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_2);
; ..\component\CanIf\Implementation\CanIf.c	  6257            (void)CanIf_TxQueueTreatment((CanIf_HwHandleType)CANIF_CFG_TX_HTH(PduId));
; ..\component\CanIf\Implementation\CanIf.c	  6258            /* \trace SPEC-1227 */ /* lock over queue handling + write call (driver does not expect direct call inbetween) */
; ..\component\CanIf\Implementation\CanIf.c	  6259            CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_2);
; ..\component\CanIf\Implementation\CanIf.c	  6260          }
; ..\component\CanIf\Implementation\CanIf.c	  6261  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6262        }
; ..\component\CanIf\Implementation\CanIf.c	  6263      }
; ..\component\CanIf\Implementation\CanIf.c	  6264    }
; ..\component\CanIf\Implementation\CanIf.c	  6265  
; ..\component\CanIf\Implementation\CanIf.c	  6266    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6267  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6268    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  6269    {
; ..\component\CanIf\Implementation\CanIf.c	  6270      CanIf_Det_ReportError(CANIF_TXNOTIFICATION_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  6271    }
; ..\component\CanIf\Implementation\CanIf.c	  6272  # else
; ..\component\CanIf\Implementation\CanIf.c	  6273    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  6274  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6275    CANIF_DUMMY_STATEMENT(IsCancelled); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  6276  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  6277  #endif
; ..\component\CanIf\Implementation\CanIf.c	  6278  
; ..\component\CanIf\Implementation\CanIf.c	  6279  
; ..\component\CanIf\Implementation\CanIf.c	  6280  /* \trace SPEC-3595 */
; ..\component\CanIf\Implementation\CanIf.c	  6281  #if (CANIF_TRCV_HANDLING == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  6282  /* \trace SPEC-1933 */
; ..\component\CanIf\Implementation\CanIf.c	  6283  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  6284   *  CanIf_SetTrcvMode()
; ..\component\CanIf\Implementation\CanIf.c	  6285   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  6286  /*
; ..\component\CanIf\Implementation\CanIf.c	  6287  |<DataModelStart>| CanIf_SetTrcvMode
; ..\component\CanIf\Implementation\CanIf.c	  6288  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  6289  CanIfTransceiverHandling # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  6290  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  6291  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6292  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6293  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6294  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  6295  CanIfDevErrorDetect, CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  6296  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6297  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6298  CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  6299  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6300  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  6301  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  6302  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  6303  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  6304  */
; ..\component\CanIf\Implementation\CanIf.c	  6305   /*!
; ..\component\CanIf\Implementation\CanIf.c	  6306   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  6307   *
; ..\component\CanIf\Implementation\CanIf.c	  6308   *
; ..\component\CanIf\Implementation\CanIf.c	  6309   *
; ..\component\CanIf\Implementation\CanIf.c	  6310   *
; ..\component\CanIf\Implementation\CanIf.c	  6311   *
; ..\component\CanIf\Implementation\CanIf.c	  6312   *
; ..\component\CanIf\Implementation\CanIf.c	  6313   *
; ..\component\CanIf\Implementation\CanIf.c	  6314   *
; ..\component\CanIf\Implementation\CanIf.c	  6315   */
; ..\component\CanIf\Implementation\CanIf.c	  6316  FUNC(Std_ReturnType, CANIF_CODE) CanIf_SetTrcvMode(uint8 TransceiverId, CanTrcv_TrcvModeType TransceiverMode)
; ..\component\CanIf\Implementation\CanIf.c	  6317  {
; ..\component\CanIf\Implementation\CanIf.c	  6318    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6319    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  6320    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  6321  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6322    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  6323  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6324  
; ..\component\CanIf\Implementation\CanIf.c	  6325    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6326  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6327  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6328    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  6329    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  6330    {
; ..\component\CanIf\Implementation\CanIf.c	  6331      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6332    }
; ..\component\CanIf\Implementation\CanIf.c	  6333    else
; ..\component\CanIf\Implementation\CanIf.c	  6334  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6335    /* #20 Check if parameter TransceiverId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  6336    if (TransceiverId >= CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE)
; ..\component\CanIf\Implementation\CanIf.c	  6337    {
; ..\component\CanIf\Implementation\CanIf.c	  6338      /* \trace SPEC-5064 */
; ..\component\CanIf\Implementation\CanIf.c	  6339      errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  6340    }
; ..\component\CanIf\Implementation\CanIf.c	  6341    else
; ..\component\CanIf\Implementation\CanIf.c	  6342  #  if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6343    /* #30 Check if parameter TransceiverId is valid if transceiver mapping is active */
; ..\component\CanIf\Implementation\CanIf.c	  6344    if (TransceiverId >= CanIf_GetSizeOfTransceiverUpToLowMap()) /* PRQA S 2992, 2996 */ /* MD_CanIf_CanTrcvMapConstData */ /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  6345    {
; ..\component\CanIf\Implementation\CanIf.c	  6346      errorId = CANIF_E_PARAM_TRCV; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  6347    }
; ..\component\CanIf\Implementation\CanIf.c	  6348    else
; ..\component\CanIf\Implementation\CanIf.c	  6349  #  endif      
; ..\component\CanIf\Implementation\CanIf.c	  6350  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6351    {
; ..\component\CanIf\Implementation\CanIf.c	  6352  # if(CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6353  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  6354      /* #40 Check if a CAN channel is mapped to transceiver channel */
; ..\component\CanIf\Implementation\CanIf.c	  6355      CanIf_Controller_Value_Local = CANIF_CFG_TRCVTOCTRLMAP(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  6356      if (CanIf_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  6357      {
; ..\component\CanIf\Implementation\CanIf.c	  6358        errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	  6359      }
; ..\component\CanIf\Implementation\CanIf.c	  6360      else
; ..\component\CanIf\Implementation\CanIf.c	  6361  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6362      if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  6363      {
; ..\component\CanIf\Implementation\CanIf.c	  6364        errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6365      }
; ..\component\CanIf\Implementation\CanIf.c	  6366      /* #50 Check if parameter TransceiverMode is valid */
; ..\component\CanIf\Implementation\CanIf.c	  6367      else if ((TransceiverMode != CANTRCV_TRCVMODE_NORMAL) &&
; ..\component\CanIf\Implementation\CanIf.c	  6368               (TransceiverMode != CANTRCV_TRCVMODE_STANDBY) &&
; ..\component\CanIf\Implementation\CanIf.c	  6369               (TransceiverMode != CANTRCV_TRCVMODE_SLEEP))
; ..\component\CanIf\Implementation\CanIf.c	  6370      {
; ..\component\CanIf\Implementation\CanIf.c	  6371        /* \trace SPEC-5213 */
; ..\component\CanIf\Implementation\CanIf.c	  6372        errorId = CANIF_E_PARAM_TRCVMODE; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  6373      }
; ..\component\CanIf\Implementation\CanIf.c	  6374      else
; ..\component\CanIf\Implementation\CanIf.c	  6375  # endif /* CANIF_DEV_ERROR_DETECT */
; ..\component\CanIf\Implementation\CanIf.c	  6376      {
; ..\component\CanIf\Implementation\CanIf.c	  6377        /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6378  
; ..\component\CanIf\Implementation\CanIf.c	  6379        /* #100 If several transceiver drivers are configured, convert TransceiverId to the driver specific one */
; ..\component\CanIf\Implementation\CanIf.c	  6380  # if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6381        uint8                           lowIndex;
; ..\component\CanIf\Implementation\CanIf.c	  6382        CanIf_CanTrcvFctTblIdx          lowAddress;
; ..\component\CanIf\Implementation\CanIf.c	  6383        CanIf_CanTrcv_SetOpModeFctType  lowFct;
; ..\component\CanIf\Implementation\CanIf.c	  6384  
; ..\component\CanIf\Implementation\CanIf.c	  6385        lowIndex   = CANIF_CFG_TRCVUPTOLOWMAP_CHANNELINDEX(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  6386        lowAddress = CANIF_CFG_TRCVUPTOLOWMAP_DRIVERINDEX(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  6387  
; ..\component\CanIf\Implementation\CanIf.c	  6388        lowFct = CanIf_GetCanTrcv_SetOpModeFctMap(lowAddress);
; ..\component\CanIf\Implementation\CanIf.c	  6389  
; ..\component\CanIf\Implementation\CanIf.c	  6390        if (lowFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  6391        {
; ..\component\CanIf\Implementation\CanIf.c	  6392          /* \trace SPEC-1967 */
; ..\component\CanIf\Implementation\CanIf.c	  6393          /* #110 Pass the request to the transceiver driver */
; ..\component\CanIf\Implementation\CanIf.c	  6394          retval = lowFct(lowIndex, TransceiverMode);  /* SBSW_CANIF_22 */
; ..\component\CanIf\Implementation\CanIf.c	  6395        }
; ..\component\CanIf\Implementation\CanIf.c	  6396  # else
; ..\component\CanIf\Implementation\CanIf.c	  6397        /* \trace SPEC-3586, SPEC-1967 */
; ..\component\CanIf\Implementation\CanIf.c	  6398        retval = CanTrcv_SetOpMode(TransceiverId, TransceiverMode);
; ..\component\CanIf\Implementation\CanIf.c	  6399  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6400      }
; ..\component\CanIf\Implementation\CanIf.c	  6401    } /* Valid TransceiverId */
; ..\component\CanIf\Implementation\CanIf.c	  6402  
; ..\component\CanIf\Implementation\CanIf.c	  6403    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6404  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6405    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  6406    {
; ..\component\CanIf\Implementation\CanIf.c	  6407      CanIf_Det_ReportError(CANIF_SETTRCVMODE_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  6408    }
; ..\component\CanIf\Implementation\CanIf.c	  6409  # else
; ..\component\CanIf\Implementation\CanIf.c	  6410    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  6411  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6412    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  6413  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  6414  #endif
; ..\component\CanIf\Implementation\CanIf.c	  6415  
; ..\component\CanIf\Implementation\CanIf.c	  6416  /* \trace SPEC-3596 */
; ..\component\CanIf\Implementation\CanIf.c	  6417  
; ..\component\CanIf\Implementation\CanIf.c	  6418  #if (CANIF_TRCV_HANDLING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6419  
; ..\component\CanIf\Implementation\CanIf.c	  6420  /* \trace SPEC-1937 */
; ..\component\CanIf\Implementation\CanIf.c	  6421  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  6422   *  CanIf_GetTrcvMode()
; ..\component\CanIf\Implementation\CanIf.c	  6423   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  6424  /*
; ..\component\CanIf\Implementation\CanIf.c	  6425  |<DataModelStart>| CanIf_GetTrcvMode
; ..\component\CanIf\Implementation\CanIf.c	  6426  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  6427  CanIfTransceiverHandling # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  6428  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  6429  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6430  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6431  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  6432  CanIfDevErrorDetect, CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  6433  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6434  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6435  CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  6436  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6437  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  6438  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  6439  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  6440  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  6441  */
; ..\component\CanIf\Implementation\CanIf.c	  6442   /*!
; ..\component\CanIf\Implementation\CanIf.c	  6443   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  6444   *
; ..\component\CanIf\Implementation\CanIf.c	  6445   *
; ..\component\CanIf\Implementation\CanIf.c	  6446   *
; ..\component\CanIf\Implementation\CanIf.c	  6447   *
; ..\component\CanIf\Implementation\CanIf.c	  6448   *
; ..\component\CanIf\Implementation\CanIf.c	  6449   *
; ..\component\CanIf\Implementation\CanIf.c	  6450   *
; ..\component\CanIf\Implementation\CanIf.c	  6451   *
; ..\component\CanIf\Implementation\CanIf.c	  6452   *
; ..\component\CanIf\Implementation\CanIf.c	  6453   */
; ..\component\CanIf\Implementation\CanIf.c	  6454  FUNC(Std_ReturnType, CANIF_CODE) CanIf_GetTrcvMode(P2VAR(CanTrcv_TrcvModeType, AUTOMATIC, CANIF_APPL_STATE_VAR) TransceiverModePtr, uint8 TransceiverId )
; ..\component\CanIf\Implementation\CanIf.c	  6455  {
; ..\component\CanIf\Implementation\CanIf.c	  6456    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6457    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  6458    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  6459  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6460    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  6461  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6462  
; ..\component\CanIf\Implementation\CanIf.c	  6463    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6464  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6465  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6466    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  6467    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  6468    {
; ..\component\CanIf\Implementation\CanIf.c	  6469      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6470    }
; ..\component\CanIf\Implementation\CanIf.c	  6471    else
; ..\component\CanIf\Implementation\CanIf.c	  6472  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6473    /* #20 Check if parameter TransceiverId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  6474    if (TransceiverId >= CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE)
; ..\component\CanIf\Implementation\CanIf.c	  6475    {
; ..\component\CanIf\Implementation\CanIf.c	  6476      /* \trace SPEC-3593 */
; ..\component\CanIf\Implementation\CanIf.c	  6477      errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  6478    }
; ..\component\CanIf\Implementation\CanIf.c	  6479    else
; ..\component\CanIf\Implementation\CanIf.c	  6480  #  if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6481    /* #30 Check if parameter TransceiverId is valid if transceiver mapping is active */
; ..\component\CanIf\Implementation\CanIf.c	  6482    if (TransceiverId >= CanIf_GetSizeOfTransceiverUpToLowMap()) /* PRQA S 2992, 2996 */ /* MD_CanIf_CanTrcvMapConstData */ /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  6483    {
; ..\component\CanIf\Implementation\CanIf.c	  6484      errorId = CANIF_E_PARAM_TRCV; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  6485    }
; ..\component\CanIf\Implementation\CanIf.c	  6486    else
; ..\component\CanIf\Implementation\CanIf.c	  6487  #  endif  
; ..\component\CanIf\Implementation\CanIf.c	  6488  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6489    {
; ..\component\CanIf\Implementation\CanIf.c	  6490  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6491  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  6492      CanIf_Controller_Value_Local = CANIF_CFG_TRCVTOCTRLMAP(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  6493      /* #40 Check if a CAN channel is mapped to transceiver channel */
; ..\component\CanIf\Implementation\CanIf.c	  6494      if (CanIf_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  6495      {
; ..\component\CanIf\Implementation\CanIf.c	  6496        errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	  6497      }
; ..\component\CanIf\Implementation\CanIf.c	  6498      else
; ..\component\CanIf\Implementation\CanIf.c	  6499  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6500      /* #50 Check if parameter TransceiverModePtr is valid */
; ..\component\CanIf\Implementation\CanIf.c	  6501      if (TransceiverModePtr == NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  6502      {
; ..\component\CanIf\Implementation\CanIf.c	  6503        /* \trace SPEC-5227 */
; ..\component\CanIf\Implementation\CanIf.c	  6504        errorId = CANIF_E_PARAM_POINTER;
; ..\component\CanIf\Implementation\CanIf.c	  6505      }
; ..\component\CanIf\Implementation\CanIf.c	  6506      /* #60 Check if corresponding CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  6507      else if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  6508      {
; ..\component\CanIf\Implementation\CanIf.c	  6509        /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  6510        errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6511      }
; ..\component\CanIf\Implementation\CanIf.c	  6512      else
; ..\component\CanIf\Implementation\CanIf.c	  6513  # endif /* CANIF_DEV_ERROR_DETECT */
; ..\component\CanIf\Implementation\CanIf.c	  6514      {
; ..\component\CanIf\Implementation\CanIf.c	  6515        /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6516  
; ..\component\CanIf\Implementation\CanIf.c	  6517        /* #100 If several transceiver drivers are configured, convert TransceiverId to the driver specific one */
; ..\component\CanIf\Implementation\CanIf.c	  6518  # if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6519        uint8                           lowIndex;
; ..\component\CanIf\Implementation\CanIf.c	  6520        CanIf_CanTrcvFctTblIdx          lowAddress;
; ..\component\CanIf\Implementation\CanIf.c	  6521        CanIf_CanTrcv_GetOpModeFctType  lowFct;
; ..\component\CanIf\Implementation\CanIf.c	  6522  
; ..\component\CanIf\Implementation\CanIf.c	  6523        lowIndex   = CANIF_CFG_TRCVUPTOLOWMAP_CHANNELINDEX(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  6524        lowAddress = CANIF_CFG_TRCVUPTOLOWMAP_DRIVERINDEX(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  6525        lowFct = CanIf_GetCanTrcv_GetOpModeFctMap(lowAddress);
; ..\component\CanIf\Implementation\CanIf.c	  6526  
; ..\component\CanIf\Implementation\CanIf.c	  6527        if (lowFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  6528        {
; ..\component\CanIf\Implementation\CanIf.c	  6529          /* \trace SPEC-1967 */
; ..\component\CanIf\Implementation\CanIf.c	  6530          /* #110 Pass the request to the transceiver driver */
; ..\component\CanIf\Implementation\CanIf.c	  6531          retval = lowFct(lowIndex, TransceiverModePtr); /* SBSW_CANIF_44 */
; ..\component\CanIf\Implementation\CanIf.c	  6532        }
; ..\component\CanIf\Implementation\CanIf.c	  6533  # else
; ..\component\CanIf\Implementation\CanIf.c	  6534        /* \trace SPEC-3594, SPEC-1967 */
; ..\component\CanIf\Implementation\CanIf.c	  6535        retval = CanTrcv_GetOpMode(TransceiverId, TransceiverModePtr);  /* SBSW_CANIF_21 */
; ..\component\CanIf\Implementation\CanIf.c	  6536  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6537      }
; ..\component\CanIf\Implementation\CanIf.c	  6538    } /* Valid TransceiverId */
; ..\component\CanIf\Implementation\CanIf.c	  6539  
; ..\component\CanIf\Implementation\CanIf.c	  6540    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6541  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6542    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  6543    {
; ..\component\CanIf\Implementation\CanIf.c	  6544      CanIf_Det_ReportError(CANIF_GETTRCVMODE_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  6545    }
; ..\component\CanIf\Implementation\CanIf.c	  6546  # else
; ..\component\CanIf\Implementation\CanIf.c	  6547    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  6548  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6549    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  6550  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  6551  #endif
; ..\component\CanIf\Implementation\CanIf.c	  6552  
; ..\component\CanIf\Implementation\CanIf.c	  6553  
; ..\component\CanIf\Implementation\CanIf.c	  6554  /* \trace SPEC-3600 */
; ..\component\CanIf\Implementation\CanIf.c	  6555  #if (CANIF_TRCV_HANDLING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6556  /* \trace SPEC-1934 */
; ..\component\CanIf\Implementation\CanIf.c	  6557  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  6558   *  CanIf_GetTrcvWakeupReason()
; ..\component\CanIf\Implementation\CanIf.c	  6559   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  6560  /*
; ..\component\CanIf\Implementation\CanIf.c	  6561  |<DataModelStart>| CanIf_GetTrcvWakeupReason
; ..\component\CanIf\Implementation\CanIf.c	  6562  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  6563  CanIfTransceiverHandling # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  6564  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  6565  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6566  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6567  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  6568  CanIfDevErrorDetect, CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  6569  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6570  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6571  CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  6572  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6573  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  6574  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  6575  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  6576  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  6577  */
; ..\component\CanIf\Implementation\CanIf.c	  6578   /*!
; ..\component\CanIf\Implementation\CanIf.c	  6579   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  6580   *
; ..\component\CanIf\Implementation\CanIf.c	  6581   *
; ..\component\CanIf\Implementation\CanIf.c	  6582   *
; ..\component\CanIf\Implementation\CanIf.c	  6583   *
; ..\component\CanIf\Implementation\CanIf.c	  6584   *
; ..\component\CanIf\Implementation\CanIf.c	  6585   *
; ..\component\CanIf\Implementation\CanIf.c	  6586   *
; ..\component\CanIf\Implementation\CanIf.c	  6587   *
; ..\component\CanIf\Implementation\CanIf.c	  6588   *
; ..\component\CanIf\Implementation\CanIf.c	  6589   */
; ..\component\CanIf\Implementation\CanIf.c	  6590  FUNC(Std_ReturnType, CANIF_CODE) CanIf_GetTrcvWakeupReason(uint8 TransceiverId, P2VAR(CanTrcv_TrcvWakeupReasonType, AUTOMATIC, CANIF_APPL_STATE_VAR) TrcvWuReasonPtr)
; ..\component\CanIf\Implementation\CanIf.c	  6591  {
; ..\component\CanIf\Implementation\CanIf.c	  6592    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6593    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  6594    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  6595  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6596    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  6597  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6598  
; ..\component\CanIf\Implementation\CanIf.c	  6599    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6600  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6601  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6602    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  6603    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  6604    {
; ..\component\CanIf\Implementation\CanIf.c	  6605      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6606    }
; ..\component\CanIf\Implementation\CanIf.c	  6607    else
; ..\component\CanIf\Implementation\CanIf.c	  6608  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6609    /* #20 Check if parameter TransceiverId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  6610    if (TransceiverId >= CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE)
; ..\component\CanIf\Implementation\CanIf.c	  6611    {
; ..\component\CanIf\Implementation\CanIf.c	  6612      /* \trace SPEC-5057 */
; ..\component\CanIf\Implementation\CanIf.c	  6613      errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  6614    }
; ..\component\CanIf\Implementation\CanIf.c	  6615    else
; ..\component\CanIf\Implementation\CanIf.c	  6616  #  if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6617    /* #30 Check if parameter TransceiverId is valid if transceiver mapping is active */
; ..\component\CanIf\Implementation\CanIf.c	  6618    if (TransceiverId >= CanIf_GetSizeOfTransceiverUpToLowMap()) /* PRQA S 2992, 2996 */ /* MD_CanIf_CanTrcvMapConstData */ /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  6619    {
; ..\component\CanIf\Implementation\CanIf.c	  6620      errorId = CANIF_E_PARAM_TRCV; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  6621    }
; ..\component\CanIf\Implementation\CanIf.c	  6622    else
; ..\component\CanIf\Implementation\CanIf.c	  6623  #  endif              
; ..\component\CanIf\Implementation\CanIf.c	  6624  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6625    {
; ..\component\CanIf\Implementation\CanIf.c	  6626  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6627  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  6628      CanIf_Controller_Value_Local = CANIF_CFG_TRCVTOCTRLMAP(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  6629      /* #40 Check if a CAN channel is mapped to transceiver channel */
; ..\component\CanIf\Implementation\CanIf.c	  6630      if (CanIf_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  6631      {
; ..\component\CanIf\Implementation\CanIf.c	  6632        errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	  6633      }
; ..\component\CanIf\Implementation\CanIf.c	  6634      else
; ..\component\CanIf\Implementation\CanIf.c	  6635  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6636      /* #50 Check if parameter TrcvWuReasonPtr is valid */
; ..\component\CanIf\Implementation\CanIf.c	  6637      if (TrcvWuReasonPtr == NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  6638      {
; ..\component\CanIf\Implementation\CanIf.c	  6639        /* \trace SPEC-5221 */
; ..\component\CanIf\Implementation\CanIf.c	  6640        errorId = CANIF_E_PARAM_POINTER;
; ..\component\CanIf\Implementation\CanIf.c	  6641      }
; ..\component\CanIf\Implementation\CanIf.c	  6642      /* #60 Check if corresponding CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  6643      else if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  6644      {
; ..\component\CanIf\Implementation\CanIf.c	  6645        /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  6646        errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6647      }
; ..\component\CanIf\Implementation\CanIf.c	  6648      else
; ..\component\CanIf\Implementation\CanIf.c	  6649  # endif /* CANIF_DEV_ERROR_DETECT */
; ..\component\CanIf\Implementation\CanIf.c	  6650      {
; ..\component\CanIf\Implementation\CanIf.c	  6651        /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6652  
; ..\component\CanIf\Implementation\CanIf.c	  6653        /* #100 If several transceiver drivers are configured, convert TransceiverId to the driver specific one */
; ..\component\CanIf\Implementation\CanIf.c	  6654  # if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6655        uint8                                 lowIndex;
; ..\component\CanIf\Implementation\CanIf.c	  6656        CanIf_CanTrcvFctTblIdx                lowAddress;
; ..\component\CanIf\Implementation\CanIf.c	  6657        CanIf_CanTrcv_GetBusWuReasonFctType   lowFct;
; ..\component\CanIf\Implementation\CanIf.c	  6658  
; ..\component\CanIf\Implementation\CanIf.c	  6659        lowIndex   = CANIF_CFG_TRCVUPTOLOWMAP_CHANNELINDEX(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  6660        lowAddress = CANIF_CFG_TRCVUPTOLOWMAP_DRIVERINDEX(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  6661  
; ..\component\CanIf\Implementation\CanIf.c	  6662        /* #110 Pass the request to the transceiver driver */
; ..\component\CanIf\Implementation\CanIf.c	  6663        lowFct = CanIf_GetCanTrcv_GetBusWuReasonFctMap(lowAddress);
; ..\component\CanIf\Implementation\CanIf.c	  6664  
; ..\component\CanIf\Implementation\CanIf.c	  6665        if (lowFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  6666        {
; ..\component\CanIf\Implementation\CanIf.c	  6667          /* \trace SPEC-1967 */
; ..\component\CanIf\Implementation\CanIf.c	  6668          retval = lowFct(lowIndex, TrcvWuReasonPtr); /* SBSW_CANIF_44 */
; ..\component\CanIf\Implementation\CanIf.c	  6669        }
; ..\component\CanIf\Implementation\CanIf.c	  6670  # else
; ..\component\CanIf\Implementation\CanIf.c	  6671        /* \trace SPEC-3598, SPEC-1967 */
; ..\component\CanIf\Implementation\CanIf.c	  6672        retval = CanTrcv_GetBusWuReason(TransceiverId, TrcvWuReasonPtr); /* SBSW_CANIF_21 */
; ..\component\CanIf\Implementation\CanIf.c	  6673  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6674      }
; ..\component\CanIf\Implementation\CanIf.c	  6675    }
; ..\component\CanIf\Implementation\CanIf.c	  6676  
; ..\component\CanIf\Implementation\CanIf.c	  6677    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6678  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6679    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  6680    {
; ..\component\CanIf\Implementation\CanIf.c	  6681      CanIf_Det_ReportError(CANIF_GETTRCVWAKEUPREASON_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  6682    }
; ..\component\CanIf\Implementation\CanIf.c	  6683  # else
; ..\component\CanIf\Implementation\CanIf.c	  6684    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  6685  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6686    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  6687  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  6688  #endif
; ..\component\CanIf\Implementation\CanIf.c	  6689  
; ..\component\CanIf\Implementation\CanIf.c	  6690  
; ..\component\CanIf\Implementation\CanIf.c	  6691  /* \trace SPEC-3603 */
; ..\component\CanIf\Implementation\CanIf.c	  6692  #if (CANIF_TRCV_HANDLING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6693  /* \trace SPEC-3680 */
; ..\component\CanIf\Implementation\CanIf.c	  6694  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  6695   *  CanIf_SetTrcvWakeupMode()
; ..\component\CanIf\Implementation\CanIf.c	  6696   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  6697  /*
; ..\component\CanIf\Implementation\CanIf.c	  6698  |<DataModelStart>| CanIf_SetTrcvWakeupMode
; ..\component\CanIf\Implementation\CanIf.c	  6699  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  6700  CanIfTransceiverHandling # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  6701  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  6702  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6703  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6704  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  6705  CanIfDevErrorDetect, CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  6706  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6707  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6708  CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  6709  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6710  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  6711  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  6712  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  6713  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  6714  */
; ..\component\CanIf\Implementation\CanIf.c	  6715   /*!
; ..\component\CanIf\Implementation\CanIf.c	  6716   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  6717   *
; ..\component\CanIf\Implementation\CanIf.c	  6718   *
; ..\component\CanIf\Implementation\CanIf.c	  6719   *
; ..\component\CanIf\Implementation\CanIf.c	  6720   *
; ..\component\CanIf\Implementation\CanIf.c	  6721   *
; ..\component\CanIf\Implementation\CanIf.c	  6722   *
; ..\component\CanIf\Implementation\CanIf.c	  6723   *
; ..\component\CanIf\Implementation\CanIf.c	  6724   *
; ..\component\CanIf\Implementation\CanIf.c	  6725   *
; ..\component\CanIf\Implementation\CanIf.c	  6726   */
; ..\component\CanIf\Implementation\CanIf.c	  6727  FUNC(Std_ReturnType, CANIF_CODE) CanIf_SetTrcvWakeupMode(uint8 TransceiverId, CanTrcv_TrcvWakeupModeType TrcvWakeupMode)
; ..\component\CanIf\Implementation\CanIf.c	  6728  {
; ..\component\CanIf\Implementation\CanIf.c	  6729    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6730    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  6731    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  6732  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6733    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  6734  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6735  
; ..\component\CanIf\Implementation\CanIf.c	  6736    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6737  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6738  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6739    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  6740    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  6741    { 
; ..\component\CanIf\Implementation\CanIf.c	  6742      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6743    }
; ..\component\CanIf\Implementation\CanIf.c	  6744    else
; ..\component\CanIf\Implementation\CanIf.c	  6745  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6746    /* #20 Check if parameter TransceiverId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  6747    if (TransceiverId >= CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE)
; ..\component\CanIf\Implementation\CanIf.c	  6748    {
; ..\component\CanIf\Implementation\CanIf.c	  6749      /* \trace SPEC-5055 */
; ..\component\CanIf\Implementation\CanIf.c	  6750      errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  6751    }
; ..\component\CanIf\Implementation\CanIf.c	  6752    else
; ..\component\CanIf\Implementation\CanIf.c	  6753  #  if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6754    /* #30 Check if parameter TransceiverId is valid if transceiver mapping is active */
; ..\component\CanIf\Implementation\CanIf.c	  6755    if (TransceiverId >= CanIf_GetSizeOfTransceiverUpToLowMap()) /* PRQA S 2992, 2996 */ /* MD_CanIf_CanTrcvMapConstData */ /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  6756    {
; ..\component\CanIf\Implementation\CanIf.c	  6757      errorId = CANIF_E_PARAM_TRCV; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  6758    }
; ..\component\CanIf\Implementation\CanIf.c	  6759    else
; ..\component\CanIf\Implementation\CanIf.c	  6760  #  endif      
; ..\component\CanIf\Implementation\CanIf.c	  6761  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6762    {
; ..\component\CanIf\Implementation\CanIf.c	  6763  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6764  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  6765      CanIf_Controller_Value_Local = CANIF_CFG_TRCVTOCTRLMAP(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  6766      /* #40 Check if a CAN channel is mapped to transceiver channel */
; ..\component\CanIf\Implementation\CanIf.c	  6767      if (CanIf_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  6768      {
; ..\component\CanIf\Implementation\CanIf.c	  6769        errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	  6770      }
; ..\component\CanIf\Implementation\CanIf.c	  6771      else
; ..\component\CanIf\Implementation\CanIf.c	  6772  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6773      /* #50 Check if parameter TrcvWakeupMode is valid */
; ..\component\CanIf\Implementation\CanIf.c	  6774      if ((TrcvWakeupMode != CANTRCV_WUMODE_ENABLE) &&   
; ..\component\CanIf\Implementation\CanIf.c	  6775          (TrcvWakeupMode != CANTRCV_WUMODE_DISABLE) &&
; ..\component\CanIf\Implementation\CanIf.c	  6776          (TrcvWakeupMode != CANTRCV_WUMODE_CLEAR))
; ..\component\CanIf\Implementation\CanIf.c	  6777      {
; ..\component\CanIf\Implementation\CanIf.c	  6778        /* \trace SPEC-5049 */
; ..\component\CanIf\Implementation\CanIf.c	  6779        errorId = CANIF_E_PARAM_TRCVWAKEUPMODE; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  6780      }
; ..\component\CanIf\Implementation\CanIf.c	  6781      /* #60 Check if corresponding CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  6782      else if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  6783      {
; ..\component\CanIf\Implementation\CanIf.c	  6784        /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  6785        errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6786      }
; ..\component\CanIf\Implementation\CanIf.c	  6787      else
; ..\component\CanIf\Implementation\CanIf.c	  6788  # endif /* CANIF_DEV_ERROR_DETECT */
; ..\component\CanIf\Implementation\CanIf.c	  6789      {
; ..\component\CanIf\Implementation\CanIf.c	  6790        /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6791  
; ..\component\CanIf\Implementation\CanIf.c	  6792        /* #100 If several transceiver drivers are configured, convert TransceiverId to the driver specific one */
; ..\component\CanIf\Implementation\CanIf.c	  6793  # if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6794        uint8                                 lowIndex;
; ..\component\CanIf\Implementation\CanIf.c	  6795        CanIf_CanTrcvFctTblIdx                lowAddress;
; ..\component\CanIf\Implementation\CanIf.c	  6796        CanIf_CanTrcv_SetWakeupModeFctType    lowFct;
; ..\component\CanIf\Implementation\CanIf.c	  6797  
; ..\component\CanIf\Implementation\CanIf.c	  6798        lowIndex   = CANIF_CFG_TRCVUPTOLOWMAP_CHANNELINDEX(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  6799        lowAddress = CANIF_CFG_TRCVUPTOLOWMAP_DRIVERINDEX(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  6800        lowFct = CanIf_GetCanTrcv_SetWakeupModeFctMap(lowAddress);
; ..\component\CanIf\Implementation\CanIf.c	  6801  
; ..\component\CanIf\Implementation\CanIf.c	  6802        /* #110 Pass the request to the transceiver driver */
; ..\component\CanIf\Implementation\CanIf.c	  6803        if (lowFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  6804        {
; ..\component\CanIf\Implementation\CanIf.c	  6805          /* \trace SPEC-1967 */
; ..\component\CanIf\Implementation\CanIf.c	  6806          retval = lowFct(lowIndex, TrcvWakeupMode); /* SBSW_CANIF_22 */
; ..\component\CanIf\Implementation\CanIf.c	  6807        }
; ..\component\CanIf\Implementation\CanIf.c	  6808  # else
; ..\component\CanIf\Implementation\CanIf.c	  6809        /* \trace SPEC-3602, SPEC-1967 */
; ..\component\CanIf\Implementation\CanIf.c	  6810        retval = CanTrcv_SetWakeupMode(TransceiverId, TrcvWakeupMode);
; ..\component\CanIf\Implementation\CanIf.c	  6811  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6812      }
; ..\component\CanIf\Implementation\CanIf.c	  6813    } /* Valid TransceiverId */
; ..\component\CanIf\Implementation\CanIf.c	  6814  
; ..\component\CanIf\Implementation\CanIf.c	  6815    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6816  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6817    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  6818    {
; ..\component\CanIf\Implementation\CanIf.c	  6819      CanIf_Det_ReportError(CANIF_SETTRCVWAKEUPMODE_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  6820    }
; ..\component\CanIf\Implementation\CanIf.c	  6821  #else
; ..\component\CanIf\Implementation\CanIf.c	  6822    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  6823  #endif
; ..\component\CanIf\Implementation\CanIf.c	  6824    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  6825  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  6826  #endif
; ..\component\CanIf\Implementation\CanIf.c	  6827  
; ..\component\CanIf\Implementation\CanIf.c	  6828  
; ..\component\CanIf\Implementation\CanIf.c	  6829  /* \trace SPEC-21399 */
; ..\component\CanIf\Implementation\CanIf.c	  6830  #if (CANIF_TRCV_HANDLING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6831  /* CANIF764, \trace SPEC-5333 */
; ..\component\CanIf\Implementation\CanIf.c	  6832  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  6833   *  CanIf_TrcvModeIndication()
; ..\component\CanIf\Implementation\CanIf.c	  6834   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  6835  /*
; ..\component\CanIf\Implementation\CanIf.c	  6836  |<DataModelStart>| CanIf_TrcvModeIndication
; ..\component\CanIf\Implementation\CanIf.c	  6837  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  6838  CanIfTransceiverHandling # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  6839  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  6840  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6841  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6842  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  6843  CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  6844  CanIfTransceiverMapping, CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  6845  CanIfTransceiverMapping, CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  6846  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6847  CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  6848  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6849  CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  6850  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6851  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6852  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  6853  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  6854  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  6855  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  6856  */
; ..\component\CanIf\Implementation\CanIf.c	  6857   /*!
; ..\component\CanIf\Implementation\CanIf.c	  6858   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  6859   *
; ..\component\CanIf\Implementation\CanIf.c	  6860   *
; ..\component\CanIf\Implementation\CanIf.c	  6861   *
; ..\component\CanIf\Implementation\CanIf.c	  6862   *
; ..\component\CanIf\Implementation\CanIf.c	  6863   *
; ..\component\CanIf\Implementation\CanIf.c	  6864   *
; ..\component\CanIf\Implementation\CanIf.c	  6865   *
; ..\component\CanIf\Implementation\CanIf.c	  6866   */
; ..\component\CanIf\Implementation\CanIf.c	  6867  FUNC(void, CANIF_CODE) CanIf_TrcvModeIndication(uint8 TransceiverId, CanTrcv_TrcvModeType TransceiverMode)
; ..\component\CanIf\Implementation\CanIf.c	  6868  {
; ..\component\CanIf\Implementation\CanIf.c	  6869    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6870    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  6871    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  6872    CanIf_TrcvModeIndicationFctType  trcvModeIndicationFct;
; ..\component\CanIf\Implementation\CanIf.c	  6873    
; ..\component\CanIf\Implementation\CanIf.c	  6874    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6875  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6876  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6877    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  6878    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  6879    {
; ..\component\CanIf\Implementation\CanIf.c	  6880      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6881    }
; ..\component\CanIf\Implementation\CanIf.c	  6882    else
; ..\component\CanIf\Implementation\CanIf.c	  6883  #  endif /* CANIF_USE_INIT_POINTER == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  6884    /* \trace SPEC-5303, NOTE: check the given parameter explicitly -> CASE "CanIfOptimizeOneController" is enabled but NO trcv channel
; ..\component\CanIf\Implementation\CanIf.c	  6885     * is mapped to CAN channel.
; ..\component\CanIf\Implementation\CanIf.c	  6886     * */
; ..\component\CanIf\Implementation\CanIf.c	  6887    /* #20 Check if parameter TransceiverId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  6888    if (TransceiverId >= CANIF_CFG_MAX_CANTRCV_TRCVHANDLEIDPLUSONE)
; ..\component\CanIf\Implementation\CanIf.c	  6889    {
; ..\component\CanIf\Implementation\CanIf.c	  6890      errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  6891    }
; ..\component\CanIf\Implementation\CanIf.c	  6892    else
; ..\component\CanIf\Implementation\CanIf.c	  6893  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  6894    {
; ..\component\CanIf\Implementation\CanIf.c	  6895  # if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6896      CanIf_TrcvIdUpper = CANIF_CFG_TRCVUPTOUPPERMAP(TransceiverId); /* PRQA S 1338 */ /* MD_CanIf_Rule17.8 */
; ..\component\CanIf\Implementation\CanIf.c	  6897  
; ..\component\CanIf\Implementation\CanIf.c	  6898  #  if(CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6899      /* #30 Check if upper layer TransceiverId is valid (if transceiver mapping is configured) */
; ..\component\CanIf\Implementation\CanIf.c	  6900      if (CanIf_TrcvIdUpper >= CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  6901      {
; ..\component\CanIf\Implementation\CanIf.c	  6902        errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  6903      }
; ..\component\CanIf\Implementation\CanIf.c	  6904      else
; ..\component\CanIf\Implementation\CanIf.c	  6905  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  6906  # endif /* CANIF_TRCV_MAPPING == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  6907      {
; ..\component\CanIf\Implementation\CanIf.c	  6908  
; ..\component\CanIf\Implementation\CanIf.c	  6909  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  6910        CanIf_Controller_Value_Local = CANIF_CFG_TRCVTOCTRLMAP(CanIf_TrcvIdUpper);
; ..\component\CanIf\Implementation\CanIf.c	  6911  
; ..\component\CanIf\Implementation\CanIf.c	  6912  #  if(CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6913        /* #40 Check if a CAN channel is mapped to transceiver channel */
; ..\component\CanIf\Implementation\CanIf.c	  6914        if (CanIf_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  6915        {
; ..\component\CanIf\Implementation\CanIf.c	  6916          errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	  6917        }
; ..\component\CanIf\Implementation\CanIf.c	  6918        else
; ..\component\CanIf\Implementation\CanIf.c	  6919  #  endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  6920  # endif /* CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF */
; ..\component\CanIf\Implementation\CanIf.c	  6921  
; ..\component\CanIf\Implementation\CanIf.c	  6922        /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6923        /* \trace SPEC-5334 */
; ..\component\CanIf\Implementation\CanIf.c	  6924        /* #50 Check if corresponding CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  6925        if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) != CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  6926        {
; ..\component\CanIf\Implementation\CanIf.c	  6927          /* \trace SPEC-5335 */
; ..\component\CanIf\Implementation\CanIf.c	  6928          /* #100 Notify the upper layer about the mode transition, if configured */
; ..\component\CanIf\Implementation\CanIf.c	  6929          trcvModeIndicationFct = CANIF_CFG_TRCVMODEINDICATIONFCT();
; ..\component\CanIf\Implementation\CanIf.c	  6930          if (trcvModeIndicationFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  6931          {
; ..\component\CanIf\Implementation\CanIf.c	  6932            trcvModeIndicationFct(CanIf_TrcvIdUpper, TransceiverMode);  /* SBSW_CANIF_13 */
; ..\component\CanIf\Implementation\CanIf.c	  6933          }
; ..\component\CanIf\Implementation\CanIf.c	  6934        }
; ..\component\CanIf\Implementation\CanIf.c	  6935  # if(CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6936        else
; ..\component\CanIf\Implementation\CanIf.c	  6937        {
; ..\component\CanIf\Implementation\CanIf.c	  6938          errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  6939        }
; ..\component\CanIf\Implementation\CanIf.c	  6940  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  6941      }
; ..\component\CanIf\Implementation\CanIf.c	  6942    }
; ..\component\CanIf\Implementation\CanIf.c	  6943  
; ..\component\CanIf\Implementation\CanIf.c	  6944    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  6945  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  6946    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  6947    {
; ..\component\CanIf\Implementation\CanIf.c	  6948      CanIf_Det_ReportError(CANIF_TRCVMODEINDICATION_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  6949    }
; ..\component\CanIf\Implementation\CanIf.c	  6950  # else
; ..\component\CanIf\Implementation\CanIf.c	  6951    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  6952  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  6953    CANIF_DUMMY_STATEMENT(TransceiverId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  6954  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  6955  # endif
; ..\component\CanIf\Implementation\CanIf.c	  6956  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  6957  #endif /* (CANIF_TRCV_HANDLING == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  6958  
; ..\component\CanIf\Implementation\CanIf.c	  6959  
; ..\component\CanIf\Implementation\CanIf.c	  6960  #if ((CANIF_TRCV_HANDLING == STD_ON) && (CANIF_PN_TRCV_HANDLING == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  6961  /* \trace SPEC-9957 */
; ..\component\CanIf\Implementation\CanIf.c	  6962  
; ..\component\CanIf\Implementation\CanIf.c	  6963  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  6964   *  CanIf_ConfirmPnAvailability()
; ..\component\CanIf\Implementation\CanIf.c	  6965   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  6966  /*
; ..\component\CanIf\Implementation\CanIf.c	  6967  |<DataModelStart>| CanIf_ConfirmPnAvailability
; ..\component\CanIf\Implementation\CanIf.c	  6968  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  6969  CanIfTransceiverHandling, CanIfTransceiverPn # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  6970  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  6971  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6972  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6973  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  6974  CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  6975  CanIfTransceiverMapping, CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  6976  CanIfTransceiverMapping, CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  6977  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6978  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6979  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  6980  CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  6981  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  6982  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  6983  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  6984  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  6985  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  6986  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  6987  */
; ..\component\CanIf\Implementation\CanIf.c	  6988   /*!
; ..\component\CanIf\Implementation\CanIf.c	  6989   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  6990   *
; ..\component\CanIf\Implementation\CanIf.c	  6991   *
; ..\component\CanIf\Implementation\CanIf.c	  6992   *
; ..\component\CanIf\Implementation\CanIf.c	  6993   *
; ..\component\CanIf\Implementation\CanIf.c	  6994   *
; ..\component\CanIf\Implementation\CanIf.c	  6995   *
; ..\component\CanIf\Implementation\CanIf.c	  6996   *
; ..\component\CanIf\Implementation\CanIf.c	  6997   */
; ..\component\CanIf\Implementation\CanIf.c	  6998  FUNC(void, CANIF_CODE) CanIf_ConfirmPnAvailability(uint8 TransceiverId)
; ..\component\CanIf\Implementation\CanIf.c	  6999  {
; ..\component\CanIf\Implementation\CanIf.c	  7000    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7001    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  7002    CanIf_ConfirmPnAvailabilityFctType cbkFct;
; ..\component\CanIf\Implementation\CanIf.c	  7003  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7004    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  7005  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7006  
; ..\component\CanIf\Implementation\CanIf.c	  7007    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7008  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7009  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7010    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  7011    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  7012    {
; ..\component\CanIf\Implementation\CanIf.c	  7013      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7014    }
; ..\component\CanIf\Implementation\CanIf.c	  7015    else
; ..\component\CanIf\Implementation\CanIf.c	  7016  #  endif /* CANIF_USE_INIT_POINTER == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7017    /* NOTE: check the given parameter explicitly -> CASE "CanIfOptimizeOneController" is enabled but NO trcv channel
; ..\component\CanIf\Implementation\CanIf.c	  7018     * is mapped to CAN channel.
; ..\component\CanIf\Implementation\CanIf.c	  7019     * */
; ..\component\CanIf\Implementation\CanIf.c	  7020    /* #20 Check if parameter TransceiverId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  7021    if (TransceiverId >= CANIF_CFG_MAX_CANTRCV_TRCVHANDLEIDPLUSONE)
; ..\component\CanIf\Implementation\CanIf.c	  7022    {
; ..\component\CanIf\Implementation\CanIf.c	  7023      /* \trace SPEC-21351 */
; ..\component\CanIf\Implementation\CanIf.c	  7024      errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  7025    }
; ..\component\CanIf\Implementation\CanIf.c	  7026    else
; ..\component\CanIf\Implementation\CanIf.c	  7027  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7028    {
; ..\component\CanIf\Implementation\CanIf.c	  7029  # if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7030      CanIf_TrcvIdUpper = CANIF_CFG_TRCVUPTOUPPERMAP(TransceiverId); /* PRQA S 1338 */ /* MD_CanIf_Rule17.8 */
; ..\component\CanIf\Implementation\CanIf.c	  7031  
; ..\component\CanIf\Implementation\CanIf.c	  7032  #  if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7033      /* #30 Check if upper layer TransceiverId is valid (if transceiver mapping is configured) */
; ..\component\CanIf\Implementation\CanIf.c	  7034      if (CanIf_TrcvIdUpper >= CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7035      {
; ..\component\CanIf\Implementation\CanIf.c	  7036        errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  7037      }
; ..\component\CanIf\Implementation\CanIf.c	  7038      else
; ..\component\CanIf\Implementation\CanIf.c	  7039  #  endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7040  # endif /* CANIF_TRCV_MAPPING == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7041      {
; ..\component\CanIf\Implementation\CanIf.c	  7042  
; ..\component\CanIf\Implementation\CanIf.c	  7043  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7044  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  7045        CanIf_Controller_Value_Local = CANIF_CFG_TRCVTOCTRLMAP(CanIf_TrcvIdUpper);
; ..\component\CanIf\Implementation\CanIf.c	  7046  
; ..\component\CanIf\Implementation\CanIf.c	  7047        /* #40 Check if a CAN channel is mapped to transceiver channel */
; ..\component\CanIf\Implementation\CanIf.c	  7048        if (CanIf_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7049        {
; ..\component\CanIf\Implementation\CanIf.c	  7050          errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	  7051        }
; ..\component\CanIf\Implementation\CanIf.c	  7052        else
; ..\component\CanIf\Implementation\CanIf.c	  7053  #  endif /* CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF */
; ..\component\CanIf\Implementation\CanIf.c	  7054        /* \trace SPEC-5238, SPEC-21337 */
; ..\component\CanIf\Implementation\CanIf.c	  7055        /* #50 Check if corresponding CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  7056        if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  7057        {
; ..\component\CanIf\Implementation\CanIf.c	  7058         errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7059        }
; ..\component\CanIf\Implementation\CanIf.c	  7060        else
; ..\component\CanIf\Implementation\CanIf.c	  7061  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7062        {
; ..\component\CanIf\Implementation\CanIf.c	  7063          /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7064          /* CANIF753 */
; ..\component\CanIf\Implementation\CanIf.c	  7065          /* #100 If configured notify the upper layer about the PN availability */
; ..\component\CanIf\Implementation\CanIf.c	  7066          cbkFct = CANIF_CFG_CONFIRMPNAVAILABILITYFCT();
; ..\component\CanIf\Implementation\CanIf.c	  7067  
; ..\component\CanIf\Implementation\CanIf.c	  7068          if (cbkFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  7069          { 
; ..\component\CanIf\Implementation\CanIf.c	  7070            cbkFct(CanIf_TrcvIdUpper); /* SBSW_CANIF_13 */
; ..\component\CanIf\Implementation\CanIf.c	  7071          }
; ..\component\CanIf\Implementation\CanIf.c	  7072        }
; ..\component\CanIf\Implementation\CanIf.c	  7073      }
; ..\component\CanIf\Implementation\CanIf.c	  7074    }
; ..\component\CanIf\Implementation\CanIf.c	  7075  
; ..\component\CanIf\Implementation\CanIf.c	  7076    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7077  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7078    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  7079    {
; ..\component\CanIf\Implementation\CanIf.c	  7080      CanIf_Det_ReportError(CANIF_CONFIRMPNAVAILABILITY_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  7081    }
; ..\component\CanIf\Implementation\CanIf.c	  7082  # else
; ..\component\CanIf\Implementation\CanIf.c	  7083    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  7084  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  7085    CANIF_DUMMY_STATEMENT(TransceiverId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  7086  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  7087  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7088  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  7089  #endif /* ((CANIF_TRCV_HANDLING == STD_ON) && (CANIF_PN_TRCV_HANDLING == STD_ON)) */
; ..\component\CanIf\Implementation\CanIf.c	  7090  
; ..\component\CanIf\Implementation\CanIf.c	  7091  
; ..\component\CanIf\Implementation\CanIf.c	  7092  #if ((CANIF_TRCV_HANDLING == STD_ON) && (CANIF_PN_TRCV_HANDLING == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  7093  /* CANIF762 */
; ..\component\CanIf\Implementation\CanIf.c	  7094  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  7095   *  CanIf_ClearTrcvWufFlagIndication()
; ..\component\CanIf\Implementation\CanIf.c	  7096   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  7097  /*
; ..\component\CanIf\Implementation\CanIf.c	  7098  |<DataModelStart>| CanIf_ClearTrcvWufFlagIndication
; ..\component\CanIf\Implementation\CanIf.c	  7099  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  7100  CanIfTransceiverHandling, CanIfTransceiverPn # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  7101  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  7102  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7103  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7104  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  7105  CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  7106  CanIfTransceiverMapping, CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  7107  CanIfTransceiverMapping, CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  7108  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7109  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7110  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  7111  CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  7112  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7113  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7114  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  7115  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  7116  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  7117  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  7118  */
; ..\component\CanIf\Implementation\CanIf.c	  7119   /*!
; ..\component\CanIf\Implementation\CanIf.c	  7120   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  7121   *
; ..\component\CanIf\Implementation\CanIf.c	  7122   *
; ..\component\CanIf\Implementation\CanIf.c	  7123   *
; ..\component\CanIf\Implementation\CanIf.c	  7124   *
; ..\component\CanIf\Implementation\CanIf.c	  7125   *
; ..\component\CanIf\Implementation\CanIf.c	  7126   *
; ..\component\CanIf\Implementation\CanIf.c	  7127   *
; ..\component\CanIf\Implementation\CanIf.c	  7128   */
; ..\component\CanIf\Implementation\CanIf.c	  7129  FUNC(void, CANIF_CODE) CanIf_ClearTrcvWufFlagIndication(uint8 TransceiverId)
; ..\component\CanIf\Implementation\CanIf.c	  7130  {
; ..\component\CanIf\Implementation\CanIf.c	  7131    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7132    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  7133    CanIf_ClearTrcvWufFlagIndicationFctType cbkFct;
; ..\component\CanIf\Implementation\CanIf.c	  7134  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7135    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  7136  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7137      
; ..\component\CanIf\Implementation\CanIf.c	  7138    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7139  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7140  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7141    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  7142    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  7143    {
; ..\component\CanIf\Implementation\CanIf.c	  7144      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7145    }
; ..\component\CanIf\Implementation\CanIf.c	  7146    else
; ..\component\CanIf\Implementation\CanIf.c	  7147  #  endif /* CANIF_USE_INIT_POINTER == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7148    /* \trace SPEC-21321, NOTE: check the given parameter explicitly -> CASE "CanIfOptimizeOneController" is enabled but NO trcv channel
; ..\component\CanIf\Implementation\CanIf.c	  7149    * is mapped to CAN channel.
; ..\component\CanIf\Implementation\CanIf.c	  7150    * */
; ..\component\CanIf\Implementation\CanIf.c	  7151    /* #20 Check if parameter TransceiverId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  7152    if (TransceiverId >= CANIF_CFG_MAX_CANTRCV_TRCVHANDLEIDPLUSONE)
; ..\component\CanIf\Implementation\CanIf.c	  7153    {
; ..\component\CanIf\Implementation\CanIf.c	  7154      errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  7155    }
; ..\component\CanIf\Implementation\CanIf.c	  7156    else
; ..\component\CanIf\Implementation\CanIf.c	  7157  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7158    {
; ..\component\CanIf\Implementation\CanIf.c	  7159  # if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7160      CanIf_TrcvIdUpper = CANIF_CFG_TRCVUPTOUPPERMAP(TransceiverId); /* PRQA S 1338 */ /* MD_CanIf_Rule17.8 */
; ..\component\CanIf\Implementation\CanIf.c	  7161  
; ..\component\CanIf\Implementation\CanIf.c	  7162  #   if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7163      /* #30 Check if upper layer TransceiverId is valid (if transceiver mapping is configured) */
; ..\component\CanIf\Implementation\CanIf.c	  7164      if (CanIf_TrcvIdUpper >= CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7165      {
; ..\component\CanIf\Implementation\CanIf.c	  7166        errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  7167      }
; ..\component\CanIf\Implementation\CanIf.c	  7168      else
; ..\component\CanIf\Implementation\CanIf.c	  7169  #   endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7170  # endif /* CANIF_TRCV_MAPPING == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7171      {
; ..\component\CanIf\Implementation\CanIf.c	  7172  
; ..\component\CanIf\Implementation\CanIf.c	  7173  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7174  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  7175        CanIf_Controller_Value_Local = CANIF_CFG_TRCVTOCTRLMAP(CanIf_TrcvIdUpper);
; ..\component\CanIf\Implementation\CanIf.c	  7176  
; ..\component\CanIf\Implementation\CanIf.c	  7177        /* #40 Check if a CAN channel is mapped to transceiver channel */
; ..\component\CanIf\Implementation\CanIf.c	  7178        if (CanIf_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7179        {
; ..\component\CanIf\Implementation\CanIf.c	  7180          errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	  7181        }
; ..\component\CanIf\Implementation\CanIf.c	  7182        else
; ..\component\CanIf\Implementation\CanIf.c	  7183  #  endif /* CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF */
; ..\component\CanIf\Implementation\CanIf.c	  7184        /* \trace SPEC-21345, SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  7185        /* #50 Check if corresponding CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  7186        if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  7187        {
; ..\component\CanIf\Implementation\CanIf.c	  7188          errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7189        }
; ..\component\CanIf\Implementation\CanIf.c	  7190        else
; ..\component\CanIf\Implementation\CanIf.c	  7191  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7192        {
; ..\component\CanIf\Implementation\CanIf.c	  7193          /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7194          /* CANIF757 */
; ..\component\CanIf\Implementation\CanIf.c	  7195          /* #100 If configured notify the upper layer that WufFlag was cleared */
; ..\component\CanIf\Implementation\CanIf.c	  7196          cbkFct = CANIF_CFG_CLEARTRCVWUFFLAGINDICATIONFCT();
; ..\component\CanIf\Implementation\CanIf.c	  7197  
; ..\component\CanIf\Implementation\CanIf.c	  7198          if (cbkFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  7199          {
; ..\component\CanIf\Implementation\CanIf.c	  7200            cbkFct(CanIf_TrcvIdUpper);  /* SBSW_CANIF_13 */
; ..\component\CanIf\Implementation\CanIf.c	  7201          }
; ..\component\CanIf\Implementation\CanIf.c	  7202        }
; ..\component\CanIf\Implementation\CanIf.c	  7203      }
; ..\component\CanIf\Implementation\CanIf.c	  7204    }
; ..\component\CanIf\Implementation\CanIf.c	  7205  
; ..\component\CanIf\Implementation\CanIf.c	  7206    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7207  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7208    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  7209    {
; ..\component\CanIf\Implementation\CanIf.c	  7210      CanIf_Det_ReportError(CANIF_CLEARTRCVWUFFLAGINDICATION_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  7211    }
; ..\component\CanIf\Implementation\CanIf.c	  7212  # else
; ..\component\CanIf\Implementation\CanIf.c	  7213    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  7214  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  7215    CANIF_DUMMY_STATEMENT(TransceiverId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  7216  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  7217  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7218  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  7219  #endif /* ((CANIF_TRCV_HANDLING == STD_ON) && (CANIF_PN_TRCV_HANDLING == STD_ON)) */
; ..\component\CanIf\Implementation\CanIf.c	  7220  
; ..\component\CanIf\Implementation\CanIf.c	  7221  
; ..\component\CanIf\Implementation\CanIf.c	  7222  #if ((CANIF_TRCV_HANDLING == STD_ON) && (CANIF_PN_TRCV_HANDLING == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  7223  /* CANIF763 */
; ..\component\CanIf\Implementation\CanIf.c	  7224  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  7225   *  CanIf_CheckTrcvWakeFlagIndication()
; ..\component\CanIf\Implementation\CanIf.c	  7226   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  7227  /*
; ..\component\CanIf\Implementation\CanIf.c	  7228  |<DataModelStart>| CanIf_CheckTrcvWakeFlagIndication
; ..\component\CanIf\Implementation\CanIf.c	  7229  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  7230  CanIfTransceiverHandling, CanIfTransceiverPn # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  7231  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  7232  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7233  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7234  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  7235  CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  7236  CanIfTransceiverMapping, CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  7237  CanIfTransceiverMapping, CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  7238  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7239  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7240  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  7241  CanIfOneChOpt, CanIfControllerAmount, CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  7242  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7243  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7244  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  7245  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  7246  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  7247  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  7248  */
; ..\component\CanIf\Implementation\CanIf.c	  7249   /*!
; ..\component\CanIf\Implementation\CanIf.c	  7250   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  7251   *
; ..\component\CanIf\Implementation\CanIf.c	  7252   *
; ..\component\CanIf\Implementation\CanIf.c	  7253   *
; ..\component\CanIf\Implementation\CanIf.c	  7254   *
; ..\component\CanIf\Implementation\CanIf.c	  7255   *
; ..\component\CanIf\Implementation\CanIf.c	  7256   *
; ..\component\CanIf\Implementation\CanIf.c	  7257   *
; ..\component\CanIf\Implementation\CanIf.c	  7258   */
; ..\component\CanIf\Implementation\CanIf.c	  7259  FUNC(void, CANIF_CODE) CanIf_CheckTrcvWakeFlagIndication(uint8 TransceiverId)
; ..\component\CanIf\Implementation\CanIf.c	  7260  {
; ..\component\CanIf\Implementation\CanIf.c	  7261    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7262    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  7263    CanIf_CheckTrcvWakeFlagIndicationFctType cbkFct;
; ..\component\CanIf\Implementation\CanIf.c	  7264  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7265    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  7266  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7267      
; ..\component\CanIf\Implementation\CanIf.c	  7268    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7269  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7270  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7271    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  7272    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  7273    {
; ..\component\CanIf\Implementation\CanIf.c	  7274      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7275    }
; ..\component\CanIf\Implementation\CanIf.c	  7276    else
; ..\component\CanIf\Implementation\CanIf.c	  7277  #  endif /* CANIF_USE_INIT_POINTER == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7278    /* \trace SPEC-21324, NOTE: check the given parameter explicitly -> CASE "CanIfOptimizeOneController" is enabled but NO trcv channel
; ..\component\CanIf\Implementation\CanIf.c	  7279    * is mapped to CAN channel.
; ..\component\CanIf\Implementation\CanIf.c	  7280    * */
; ..\component\CanIf\Implementation\CanIf.c	  7281    /* #20 Check if parameter TransceiverId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  7282    if (TransceiverId >= CANIF_CFG_MAX_CANTRCV_TRCVHANDLEIDPLUSONE)
; ..\component\CanIf\Implementation\CanIf.c	  7283    {
; ..\component\CanIf\Implementation\CanIf.c	  7284      errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  7285    }
; ..\component\CanIf\Implementation\CanIf.c	  7286    else
; ..\component\CanIf\Implementation\CanIf.c	  7287  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7288    {
; ..\component\CanIf\Implementation\CanIf.c	  7289  # if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7290      CanIf_TrcvIdUpper = CANIF_CFG_TRCVUPTOUPPERMAP(TransceiverId); /* PRQA S 1338 */ /* MD_CanIf_Rule17.8 */
; ..\component\CanIf\Implementation\CanIf.c	  7291  
; ..\component\CanIf\Implementation\CanIf.c	  7292  #  if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7293      /* #30 Check if upper layer TransceiverId is valid (if transceiver mapping is configured) */
; ..\component\CanIf\Implementation\CanIf.c	  7294      if (CanIf_TrcvIdUpper >= CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7295      {
; ..\component\CanIf\Implementation\CanIf.c	  7296        errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  7297      }
; ..\component\CanIf\Implementation\CanIf.c	  7298      else
; ..\component\CanIf\Implementation\CanIf.c	  7299  #  endif /* CANIF_TRCV_MAPPING == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7300  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7301      {
; ..\component\CanIf\Implementation\CanIf.c	  7302  
; ..\component\CanIf\Implementation\CanIf.c	  7303  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7304  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  7305        CanIf_Controller_Value_Local = CANIF_CFG_TRCVTOCTRLMAP(CanIf_TrcvIdUpper);
; ..\component\CanIf\Implementation\CanIf.c	  7306  
; ..\component\CanIf\Implementation\CanIf.c	  7307        /* #40 Check if a CAN channel is mapped to transceiver channel */
; ..\component\CanIf\Implementation\CanIf.c	  7308        if (CanIf_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7309        {
; ..\component\CanIf\Implementation\CanIf.c	  7310          errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	  7311        }
; ..\component\CanIf\Implementation\CanIf.c	  7312        else
; ..\component\CanIf\Implementation\CanIf.c	  7313  #  endif /* CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF */
; ..\component\CanIf\Implementation\CanIf.c	  7314        /* \trace SPEC-21350, SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  7315        /* #50 Check if corresponding CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  7316        if (CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  7317        {
; ..\component\CanIf\Implementation\CanIf.c	  7318          errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7319        }
; ..\component\CanIf\Implementation\CanIf.c	  7320        else
; ..\component\CanIf\Implementation\CanIf.c	  7321  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7322        {
; ..\component\CanIf\Implementation\CanIf.c	  7323          /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7324          /* CANIF759 */
; ..\component\CanIf\Implementation\CanIf.c	  7325          /* #100 If configured notify the upper layer that wake flag was checked */
; ..\component\CanIf\Implementation\CanIf.c	  7326          cbkFct = CANIF_CFG_CHECKTRCVWAKEFLAGINDICATIONFCT();
; ..\component\CanIf\Implementation\CanIf.c	  7327  
; ..\component\CanIf\Implementation\CanIf.c	  7328          if (cbkFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  7329          {
; ..\component\CanIf\Implementation\CanIf.c	  7330            cbkFct(CanIf_TrcvIdUpper);  /* SBSW_CANIF_13 */
; ..\component\CanIf\Implementation\CanIf.c	  7331          }
; ..\component\CanIf\Implementation\CanIf.c	  7332        }
; ..\component\CanIf\Implementation\CanIf.c	  7333      }
; ..\component\CanIf\Implementation\CanIf.c	  7334    }
; ..\component\CanIf\Implementation\CanIf.c	  7335  
; ..\component\CanIf\Implementation\CanIf.c	  7336    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7337  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7338    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  7339    {
; ..\component\CanIf\Implementation\CanIf.c	  7340      CanIf_Det_ReportError(CANIF_CHECKTRCVWAKEFLAGINDICATION_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  7341    }
; ..\component\CanIf\Implementation\CanIf.c	  7342  #else
; ..\component\CanIf\Implementation\CanIf.c	  7343    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  7344  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  7345    CANIF_DUMMY_STATEMENT(TransceiverId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  7346  # endif  
; ..\component\CanIf\Implementation\CanIf.c	  7347  #endif
; ..\component\CanIf\Implementation\CanIf.c	  7348  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  7349  #endif /* ((CANIF_TRCV_HANDLING == STD_ON) && (CANIF_PN_TRCV_HANDLING == STD_ON)) */
; ..\component\CanIf\Implementation\CanIf.c	  7350  
; ..\component\CanIf\Implementation\CanIf.c	  7351  
; ..\component\CanIf\Implementation\CanIf.c	  7352  #if ((CANIF_TRCV_HANDLING == STD_ON) && (CANIF_PN_TRCV_HANDLING == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  7353  /* CANIF763 */
; ..\component\CanIf\Implementation\CanIf.c	  7354  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  7355   *  CanIf_ClearTrcvWufFlag()
; ..\component\CanIf\Implementation\CanIf.c	  7356   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  7357  /*
; ..\component\CanIf\Implementation\CanIf.c	  7358  |<DataModelStart>| CanIf_ClearTrcvWufFlag
; ..\component\CanIf\Implementation\CanIf.c	  7359  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  7360  CanIfTransceiverHandling, CanIfTransceiverPn # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  7361  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  7362  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7363  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7364  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  7365  CanIfDevErrorDetect, CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  7366  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7367  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7368  CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  7369  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7370  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  7371  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  7372  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  7373  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  7374  */
; ..\component\CanIf\Implementation\CanIf.c	  7375   /*!
; ..\component\CanIf\Implementation\CanIf.c	  7376   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  7377   *
; ..\component\CanIf\Implementation\CanIf.c	  7378   *
; ..\component\CanIf\Implementation\CanIf.c	  7379   *
; ..\component\CanIf\Implementation\CanIf.c	  7380   *
; ..\component\CanIf\Implementation\CanIf.c	  7381   *
; ..\component\CanIf\Implementation\CanIf.c	  7382   *
; ..\component\CanIf\Implementation\CanIf.c	  7383   *
; ..\component\CanIf\Implementation\CanIf.c	  7384   *
; ..\component\CanIf\Implementation\CanIf.c	  7385   */
; ..\component\CanIf\Implementation\CanIf.c	  7386  FUNC(Std_ReturnType, CANIF_CODE) CanIf_ClearTrcvWufFlag(uint8 TransceiverId)
; ..\component\CanIf\Implementation\CanIf.c	  7387  {
; ..\component\CanIf\Implementation\CanIf.c	  7388    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7389    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  7390    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  7391  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7392    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  7393  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7394  
; ..\component\CanIf\Implementation\CanIf.c	  7395    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7396  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7397  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7398    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  7399    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  7400    {
; ..\component\CanIf\Implementation\CanIf.c	  7401      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7402    }
; ..\component\CanIf\Implementation\CanIf.c	  7403    else
; ..\component\CanIf\Implementation\CanIf.c	  7404  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  7405    /* #20 Check if parameter TransceiverId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  7406    if (TransceiverId >= CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE)
; ..\component\CanIf\Implementation\CanIf.c	  7407    {
; ..\component\CanIf\Implementation\CanIf.c	  7408      /* \trace SPEC-21406 */
; ..\component\CanIf\Implementation\CanIf.c	  7409      errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  7410    }
; ..\component\CanIf\Implementation\CanIf.c	  7411    else
; ..\component\CanIf\Implementation\CanIf.c	  7412  #  if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7413    /* #30 Check if parameter TransceiverId is valid if transceiver mapping is active */
; ..\component\CanIf\Implementation\CanIf.c	  7414    if (TransceiverId >= CanIf_GetSizeOfTransceiverUpToLowMap()) /* PRQA S 2992, 2996 */ /* MD_CanIf_CanTrcvMapConstData */ /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7415    {
; ..\component\CanIf\Implementation\CanIf.c	  7416      errorId = CANIF_E_PARAM_TRCV; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  7417    }
; ..\component\CanIf\Implementation\CanIf.c	  7418    else
; ..\component\CanIf\Implementation\CanIf.c	  7419  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  7420  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7421    {
; ..\component\CanIf\Implementation\CanIf.c	  7422  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7423  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  7424      CanIf_Controller_Value_Local = CANIF_CFG_TRCVTOCTRLMAP(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  7425      /* #40 Check if a CAN channel is mapped to transceiver channel */
; ..\component\CanIf\Implementation\CanIf.c	  7426      if (CanIf_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7427      {
; ..\component\CanIf\Implementation\CanIf.c	  7428        errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	  7429      }
; ..\component\CanIf\Implementation\CanIf.c	  7430      else
; ..\component\CanIf\Implementation\CanIf.c	  7431  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  7432      /* #50 Check if corresponding CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  7433      if(CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  7434      {
; ..\component\CanIf\Implementation\CanIf.c	  7435        /* CANIF767 */
; ..\component\CanIf\Implementation\CanIf.c	  7436        errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7437      }
; ..\component\CanIf\Implementation\CanIf.c	  7438      else
; ..\component\CanIf\Implementation\CanIf.c	  7439  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7440      {
; ..\component\CanIf\Implementation\CanIf.c	  7441        /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7442  
; ..\component\CanIf\Implementation\CanIf.c	  7443        /* #100 If several transceiver drivers are configured, convert TransceiverId to the driver specific one */
; ..\component\CanIf\Implementation\CanIf.c	  7444  # if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7445        /* \trace SPEC-9964 */
; ..\component\CanIf\Implementation\CanIf.c	  7446        uint8                                  TrcvChannelId;
; ..\component\CanIf\Implementation\CanIf.c	  7447        CanIf_CanTrcvFctTblIdx                 TrcvDriverId;
; ..\component\CanIf\Implementation\CanIf.c	  7448        CanIf_CanTrcv_ClearTrcvWufFlagFctType  lowFct;
; ..\component\CanIf\Implementation\CanIf.c	  7449  
; ..\component\CanIf\Implementation\CanIf.c	  7450        /* Get transceiver IDs */
; ..\component\CanIf\Implementation\CanIf.c	  7451        TrcvChannelId = CANIF_CFG_TRCVUPTOLOWMAP_CHANNELINDEX(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  7452        TrcvDriverId = CANIF_CFG_TRCVUPTOLOWMAP_DRIVERINDEX(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  7453  
; ..\component\CanIf\Implementation\CanIf.c	  7454        /* get the corresponding transceiver API */
; ..\component\CanIf\Implementation\CanIf.c	  7455        lowFct = CanIf_GetCanTrcv_ClearTrcvWufFlagFctMap(TrcvDriverId);
; ..\component\CanIf\Implementation\CanIf.c	  7456  
; ..\component\CanIf\Implementation\CanIf.c	  7457        if (lowFct != (CanIf_CanTrcv_ClearTrcvWufFlagFctType)NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  7458        {
; ..\component\CanIf\Implementation\CanIf.c	  7459          /* #110 Pass the request to the transceiver driver */
; ..\component\CanIf\Implementation\CanIf.c	  7460          retval = lowFct(TrcvChannelId);  /* SBSW_CANIF_22 */
; ..\component\CanIf\Implementation\CanIf.c	  7461        }
; ..\component\CanIf\Implementation\CanIf.c	  7462        else
; ..\component\CanIf\Implementation\CanIf.c	  7463        {
; ..\component\CanIf\Implementation\CanIf.c	  7464          errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  7465          /* retval is already set to E_NOT_OK */
; ..\component\CanIf\Implementation\CanIf.c	  7466        }
; ..\component\CanIf\Implementation\CanIf.c	  7467  # else
; ..\component\CanIf\Implementation\CanIf.c	  7468        /* \trace SPEC-9964 */
; ..\component\CanIf\Implementation\CanIf.c	  7469        retval = CanTrcv_ClearTrcvWufFlag(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  7470  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7471      }
; ..\component\CanIf\Implementation\CanIf.c	  7472    } /* Valid TransceiverId */
; ..\component\CanIf\Implementation\CanIf.c	  7473  
; ..\component\CanIf\Implementation\CanIf.c	  7474    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7475  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7476    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  7477    {
; ..\component\CanIf\Implementation\CanIf.c	  7478      CanIf_Det_ReportError(CANIF_CLEARTRCVWUFFLAG_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  7479    }
; ..\component\CanIf\Implementation\CanIf.c	  7480  # else
; ..\component\CanIf\Implementation\CanIf.c	  7481    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  7482  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7483    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  7484  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  7485  #endif /* ((CANIF_TRCV_HANDLING == STD_ON) && (CANIF_PN_TRCV_HANDLING == STD_ON)) */
; ..\component\CanIf\Implementation\CanIf.c	  7486  
; ..\component\CanIf\Implementation\CanIf.c	  7487  
; ..\component\CanIf\Implementation\CanIf.c	  7488  #if ((CANIF_TRCV_HANDLING == STD_ON) && (CANIF_PN_TRCV_HANDLING == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  7489  /* CANIF761 */
; ..\component\CanIf\Implementation\CanIf.c	  7490  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  7491   *  CanIf_CheckTrcvWakeFlag()
; ..\component\CanIf\Implementation\CanIf.c	  7492   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  7493  /*
; ..\component\CanIf\Implementation\CanIf.c	  7494  |<DataModelStart>| CanIf_CheckTrcvWakeFlag
; ..\component\CanIf\Implementation\CanIf.c	  7495  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  7496  CanIfTransceiverHandling, CanIfTransceiverPn # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  7497  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  7498  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7499  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7500  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  7501  CanIfDevErrorDetect, CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  7502  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7503  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7504  CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  7505  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7506  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  7507  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  7508  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  7509  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  7510  */
; ..\component\CanIf\Implementation\CanIf.c	  7511   /*!
; ..\component\CanIf\Implementation\CanIf.c	  7512   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  7513   *
; ..\component\CanIf\Implementation\CanIf.c	  7514   *
; ..\component\CanIf\Implementation\CanIf.c	  7515   *
; ..\component\CanIf\Implementation\CanIf.c	  7516   *
; ..\component\CanIf\Implementation\CanIf.c	  7517   *
; ..\component\CanIf\Implementation\CanIf.c	  7518   *
; ..\component\CanIf\Implementation\CanIf.c	  7519   *
; ..\component\CanIf\Implementation\CanIf.c	  7520   */
; ..\component\CanIf\Implementation\CanIf.c	  7521  FUNC(Std_ReturnType, CANIF_CODE) CanIf_CheckTrcvWakeFlag(uint8 TransceiverId)
; ..\component\CanIf\Implementation\CanIf.c	  7522  {
; ..\component\CanIf\Implementation\CanIf.c	  7523    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7524    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  7525    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  7526  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7527    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  7528  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7529  
; ..\component\CanIf\Implementation\CanIf.c	  7530    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7531  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7532  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7533    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  7534    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  7535    {
; ..\component\CanIf\Implementation\CanIf.c	  7536      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7537    }
; ..\component\CanIf\Implementation\CanIf.c	  7538    else
; ..\component\CanIf\Implementation\CanIf.c	  7539  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  7540    /* #20 Check if parameter TransceiverId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  7541    if (TransceiverId >= CANIF_CFG_MAX_TRANSCEIVERHANDLEIDPLUSONE)
; ..\component\CanIf\Implementation\CanIf.c	  7542    {
; ..\component\CanIf\Implementation\CanIf.c	  7543      /* \trace SPEC-21413 */
; ..\component\CanIf\Implementation\CanIf.c	  7544      errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  7545    }
; ..\component\CanIf\Implementation\CanIf.c	  7546    else
; ..\component\CanIf\Implementation\CanIf.c	  7547  #  if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7548    if (TransceiverId >= CanIf_GetSizeOfTransceiverUpToLowMap()) /* PRQA S 2992, 2996 */ /* MD_CanIf_CanTrcvMapConstData */ /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7549    {
; ..\component\CanIf\Implementation\CanIf.c	  7550      errorId = CANIF_E_PARAM_TRCV; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  7551    }
; ..\component\CanIf\Implementation\CanIf.c	  7552    else
; ..\component\CanIf\Implementation\CanIf.c	  7553  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  7554  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7555    {
; ..\component\CanIf\Implementation\CanIf.c	  7556  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7557  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  7558      CanIf_Controller_Value_Local = CANIF_CFG_TRCVTOCTRLMAP(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  7559      /* #30 Check if a CAN channel is mapped to transceiver channel */
; ..\component\CanIf\Implementation\CanIf.c	  7560      if (CanIf_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7561      {
; ..\component\CanIf\Implementation\CanIf.c	  7562        errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	  7563      }
; ..\component\CanIf\Implementation\CanIf.c	  7564      else
; ..\component\CanIf\Implementation\CanIf.c	  7565  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  7566      /* #40 Check if corresponding CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  7567      if(CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  7568      {
; ..\component\CanIf\Implementation\CanIf.c	  7569        /* CANIF768 */
; ..\component\CanIf\Implementation\CanIf.c	  7570        errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7571      }
; ..\component\CanIf\Implementation\CanIf.c	  7572      else
; ..\component\CanIf\Implementation\CanIf.c	  7573  # endif /* (CANIF_DEV_ERROR_DETECT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  7574      {
; ..\component\CanIf\Implementation\CanIf.c	  7575        /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7576        /* #100 If several transceiver drivers are configured, convert TransceiverId to the driver specific one */
; ..\component\CanIf\Implementation\CanIf.c	  7577  # if (CANIF_TRCV_MAPPING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7578        /* \trace SPEC-9961 */
; ..\component\CanIf\Implementation\CanIf.c	  7579        uint8                               TrcvChannelId;
; ..\component\CanIf\Implementation\CanIf.c	  7580        CanIf_CanTrcvFctTblIdx              TrcvDriverId;
; ..\component\CanIf\Implementation\CanIf.c	  7581        CanIf_CanTrcv_CheckWakeFlagFctType  lowFct;
; ..\component\CanIf\Implementation\CanIf.c	  7582  
; ..\component\CanIf\Implementation\CanIf.c	  7583        /* Get transceiver IDs */
; ..\component\CanIf\Implementation\CanIf.c	  7584        TrcvChannelId = CANIF_CFG_TRCVUPTOLOWMAP_CHANNELINDEX(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  7585        TrcvDriverId = CANIF_CFG_TRCVUPTOLOWMAP_DRIVERINDEX(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  7586  
; ..\component\CanIf\Implementation\CanIf.c	  7587        /* get the corresponding transceiver API */
; ..\component\CanIf\Implementation\CanIf.c	  7588        lowFct = CanIf_GetCanTrcv_CheckWakeFlagFctMap(TrcvDriverId);
; ..\component\CanIf\Implementation\CanIf.c	  7589  
; ..\component\CanIf\Implementation\CanIf.c	  7590        if (lowFct != (CanIf_CanTrcv_CheckWakeFlagFctType)NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  7591        {
; ..\component\CanIf\Implementation\CanIf.c	  7592          /* #110 Pass the request to the transceiver driver */
; ..\component\CanIf\Implementation\CanIf.c	  7593          retval = lowFct(TrcvChannelId);  /* SBSW_CANIF_22 */
; ..\component\CanIf\Implementation\CanIf.c	  7594        }
; ..\component\CanIf\Implementation\CanIf.c	  7595        else
; ..\component\CanIf\Implementation\CanIf.c	  7596        {
; ..\component\CanIf\Implementation\CanIf.c	  7597          errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  7598          /* retval is already set to E_NOT_OK */
; ..\component\CanIf\Implementation\CanIf.c	  7599        }
; ..\component\CanIf\Implementation\CanIf.c	  7600  # else
; ..\component\CanIf\Implementation\CanIf.c	  7601        retval = CanTrcv_CheckWakeFlag(TransceiverId);
; ..\component\CanIf\Implementation\CanIf.c	  7602  # endif /* (CANIF_TRCV_MAPPING == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  7603      }
; ..\component\CanIf\Implementation\CanIf.c	  7604    } /* Valid TransceiverId */
; ..\component\CanIf\Implementation\CanIf.c	  7605  
; ..\component\CanIf\Implementation\CanIf.c	  7606    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7607  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7608    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  7609    {
; ..\component\CanIf\Implementation\CanIf.c	  7610      CanIf_Det_ReportError(CANIF_CHECKTRCVWAKEFLAG_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  7611    }
; ..\component\CanIf\Implementation\CanIf.c	  7612  # else
; ..\component\CanIf\Implementation\CanIf.c	  7613    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  7614  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7615    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  7616  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  7617  #endif /* ((CANIF_TRCV_HANDLING == STD_ON) && (CANIF_PN_TRCV_HANDLING == STD_ON)) */
; ..\component\CanIf\Implementation\CanIf.c	  7618  
; ..\component\CanIf\Implementation\CanIf.c	  7619  
; ..\component\CanIf\Implementation\CanIf.c	  7620  /* \trace SPEC-1898, SPEC-3681 */
; ..\component\CanIf\Implementation\CanIf.c	  7621  #if (CANIF_WAKEUP_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7622  /* \trace SPEC-1910 */
; ..\component\CanIf\Implementation\CanIf.c	  7623  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  7624   *  CanIf_CheckWakeup()
; ..\component\CanIf\Implementation\CanIf.c	  7625   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  7626  /*
; ..\component\CanIf\Implementation\CanIf.c	  7627  |<DataModelStart>| CanIf_CheckWakeup
; ..\component\CanIf\Implementation\CanIf.c	  7628  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  7629  CanIfWakeup # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  7630  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  7631  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  7632  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7633  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7634  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7635  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7636  CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  7637  CanIfMultipleDriver, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7638  CanIfMultipleDriver, CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  7639  CanIfTransceiverHandling
; ..\component\CanIf\Implementation\CanIf.c	  7640  CanIfTransceiverHandling, CanIfTransceiverMapping
; ..\component\CanIf\Implementation\CanIf.c	  7641  CanIfTransceiverHandling, CanIfTransceiverMapping, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7642  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7643  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  7644  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  7645  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  7646  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  7647  */
; ..\component\CanIf\Implementation\CanIf.c	  7648   /*!
; ..\component\CanIf\Implementation\CanIf.c	  7649   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  7650   *
; ..\component\CanIf\Implementation\CanIf.c	  7651   *
; ..\component\CanIf\Implementation\CanIf.c	  7652   *
; ..\component\CanIf\Implementation\CanIf.c	  7653   *
; ..\component\CanIf\Implementation\CanIf.c	  7654   *
; ..\component\CanIf\Implementation\CanIf.c	  7655   *
; ..\component\CanIf\Implementation\CanIf.c	  7656   *
; ..\component\CanIf\Implementation\CanIf.c	  7657   *
; ..\component\CanIf\Implementation\CanIf.c	  7658   *
; ..\component\CanIf\Implementation\CanIf.c	  7659   *
; ..\component\CanIf\Implementation\CanIf.c	  7660   *
; ..\component\CanIf\Implementation\CanIf.c	  7661   *
; ..\component\CanIf\Implementation\CanIf.c	  7662   *
; ..\component\CanIf\Implementation\CanIf.c	  7663   */
; ..\component\CanIf\Implementation\CanIf.c	  7664  FUNC(Std_ReturnType, CANIF_CODE) CanIf_CheckWakeup(EcuM_WakeupSourceType WakeupSource)
; ..\component\CanIf\Implementation\CanIf.c	  7665  {
; ..\component\CanIf\Implementation\CanIf.c	  7666    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7667    /* \trace SPEC-5345 */
; ..\component\CanIf\Implementation\CanIf.c	  7668    Std_ReturnType retval = E_OK; /* WakeUp request will be accepted */
; ..\component\CanIf\Implementation\CanIf.c	  7669    
; ..\component\CanIf\Implementation\CanIf.c	  7670    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  7671    Std_ReturnType localRetval;
; ..\component\CanIf\Implementation\CanIf.c	  7672    EcuM_WakeupSourceType wokenUpSources;
; ..\component\CanIf\Implementation\CanIf.c	  7673    uint8 numWUsrc;
; ..\component\CanIf\Implementation\CanIf.c	  7674    wokenUpSources = 0u;
; ..\component\CanIf\Implementation\CanIf.c	  7675         
; ..\component\CanIf\Implementation\CanIf.c	  7676    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7677  # if ((CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  7678    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  7679    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  7680    {
; ..\component\CanIf\Implementation\CanIf.c	  7681      retval = E_NOT_OK; /* PRQA S 2982 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  7682      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  7683      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7684    }
; ..\component\CanIf\Implementation\CanIf.c	  7685    else
; ..\component\CanIf\Implementation\CanIf.c	  7686  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7687  
; ..\component\CanIf\Implementation\CanIf.c	  7688    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7689    {
; ..\component\CanIf\Implementation\CanIf.c	  7690      /* #100 Run through all configured wake-up sources */
; ..\component\CanIf\Implementation\CanIf.c	  7691      /* Find the first WakeUp Source which pretends to be the responsible */
; ..\component\CanIf\Implementation\CanIf.c	  7692      for (numWUsrc = 0u; numWUsrc < CANIF_CFG_MAX_WAKEUPSOURCES; numWUsrc++)
; ..\component\CanIf\Implementation\CanIf.c	  7693      {
; ..\component\CanIf\Implementation\CanIf.c	  7694        EcuM_WakeupSourceType                 wuSrc;
; ..\component\CanIf\Implementation\CanIf.c	  7695        CanIf_WakeUpTargetType                wuTrgtmodule;
; ..\component\CanIf\Implementation\CanIf.c	  7696        uint8                                 wuTrgtaddress;
; ..\component\CanIf\Implementation\CanIf.c	  7697        CANIF_WUCHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  7698  
; ..\component\CanIf\Implementation\CanIf.c	  7699        /* #110 Acquire wake-up source information: wake-up source value, module (CAN / transceiver), channel ID */
; ..\component\CanIf\Implementation\CanIf.c	  7700        wuSrc         = CANIF_CFG_WAKEUP_WAKEUPSOURCE(numWUsrc);
; ..\component\CanIf\Implementation\CanIf.c	  7701        wuTrgtmodule  = CANIF_CFG_WAKEUP_WAKEUPTARGETMODULE(numWUsrc);
; ..\component\CanIf\Implementation\CanIf.c	  7702        wuTrgtaddress = CANIF_CFG_WAKEUP_WAKEUPTARGETADDRESS(numWUsrc);
; ..\component\CanIf\Implementation\CanIf.c	  7703  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION==STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  7704        /* Find the correct CAN Controller */
; ..\component\CanIf\Implementation\CanIf.c	  7705        /* indirect check of wake-up-source -> \trace SPEC-3687 */
; ..\component\CanIf\Implementation\CanIf.c	  7706        wuController = CANIF_CFG_WAKEUP_CONTROLLER(numWUsrc);
; ..\component\CanIf\Implementation\CanIf.c	  7707  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7708        /* Initialize localRetval for WakeUpSources which are not handled by CanIf */
; ..\component\CanIf\Implementation\CanIf.c	  7709        localRetval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  7710  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7711        /* DET error occurred other sources will be checked return value will be E_NOT_OK */
; ..\component\CanIf\Implementation\CanIf.c	  7712  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  7713        /* #120 Check the CAN channel parameter */
; ..\component\CanIf\Implementation\CanIf.c	  7714        if (CanIf_WU_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7715        {
; ..\component\CanIf\Implementation\CanIf.c	  7716          retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  7717          /* \trace SPEC-3687 */
; ..\component\CanIf\Implementation\CanIf.c	  7718          errorId = CANIF_E_PARAM_WAKEUPSOURCE;
; ..\component\CanIf\Implementation\CanIf.c	  7719        }
; ..\component\CanIf\Implementation\CanIf.c	  7720        else
; ..\component\CanIf\Implementation\CanIf.c	  7721  #  endif /* CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF */
; ..\component\CanIf\Implementation\CanIf.c	  7722        /* #130 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  7723        if (CanIf_GetCtrlMode(CanIf_WU_Controller_Value_Local) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  7724        {
; ..\component\CanIf\Implementation\CanIf.c	  7725          retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  7726          /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  7727          errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7728        }
; ..\component\CanIf\Implementation\CanIf.c	  7729        else
; ..\component\CanIf\Implementation\CanIf.c	  7730  # endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7731        {
; ..\component\CanIf\Implementation\CanIf.c	  7732          /* #140 Is it the wake-up source which shall be checked for wake-up? */
; ..\component\CanIf\Implementation\CanIf.c	  7733          if ((WakeupSource & wuSrc) != 0u)
; ..\component\CanIf\Implementation\CanIf.c	  7734          {
; ..\component\CanIf\Implementation\CanIf.c	  7735            /* \trace SPEC-5284 */
; ..\component\CanIf\Implementation\CanIf.c	  7736            /* #150 Process only if CAN channel is either in SLEEP or in STOP */
; ..\component\CanIf\Implementation\CanIf.c	  7737            if ((CanIf_GetCtrlMode(CanIf_WU_Controller_Value_Local) == CANIF_CS_SLEEP) || (CanIf_GetCtrlMode(CanIf_WU_Controller_Value_Local) == CANIF_CS_STOPPED))
; ..\component\CanIf\Implementation\CanIf.c	  7738            {
; ..\component\CanIf\Implementation\CanIf.c	  7739              /* #200 If it is a wake-up source of a CAN channel pass the request to the corresponding CAN channel */
; ..\component\CanIf\Implementation\CanIf.c	  7740              if (wuTrgtmodule == CANIF_WAKEUPREQUEST_CAN) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  7741              {
; ..\component\CanIf\Implementation\CanIf.c	  7742                /* \trace SPEC-3684, SPEC-1967 */
; ..\component\CanIf\Implementation\CanIf.c	  7743  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7744  #  if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7745                if (wuTrgtaddress >= CanIf_GetSizeOfCanChannelIdUpToLowMap()) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7746                {
; ..\component\CanIf\Implementation\CanIf.c	  7747                  errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  7748                  retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  7749                }
; ..\component\CanIf\Implementation\CanIf.c	  7750                else                  
; ..\component\CanIf\Implementation\CanIf.c	  7751  #   if(CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7752                /* #210 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  7753                if (!CANIF_CFG_IS_CANDRVINDEXVALID(wuTrgtaddress))
; ..\component\CanIf\Implementation\CanIf.c	  7754                {
; ..\component\CanIf\Implementation\CanIf.c	  7755                  errorId = CANIF_E_PARAM_WAKEUPSOURCE;
; ..\component\CanIf\Implementation\CanIf.c	  7756                  retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  7757                }
; ..\component\CanIf\Implementation\CanIf.c	  7758                else
; ..\component\CanIf\Implementation\CanIf.c	  7759  #   endif                  
; ..\component\CanIf\Implementation\CanIf.c	  7760  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  7761                {
; ..\component\CanIf\Implementation\CanIf.c	  7762                  CanIf_Can_CheckWakeupFctType canCheckWakeupFct;
; ..\component\CanIf\Implementation\CanIf.c	  7763                  canCheckWakeupFct = CanIf_GetCan_CheckWakeupFctMap(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(wuTrgtaddress));
; ..\component\CanIf\Implementation\CanIf.c	  7764                  if (canCheckWakeupFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  7765                  {
; ..\component\CanIf\Implementation\CanIf.c	  7766                    localRetval = CanIf_AdaptCanCheckWakeupRetVal(canCheckWakeupFct(CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(wuTrgtaddress)));  /* SBSW_CANIF_41 */
; ..\component\CanIf\Implementation\CanIf.c	  7767                  }
; ..\component\CanIf\Implementation\CanIf.c	  7768                }
; ..\component\CanIf\Implementation\CanIf.c	  7769  # else /* CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7770                localRetval = CanIf_AdaptCanCheckWakeupRetVal(Can_CheckWakeup(wuTrgtaddress));
; ..\component\CanIf\Implementation\CanIf.c	  7771  # endif /* CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7772              } /* wuTrgtmodule == CANIF_WAKEUPREQUEST_CAN */
; ..\component\CanIf\Implementation\CanIf.c	  7773  # if (CANIF_TRCV_HANDLING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7774              /* #300 If it is wake-up source of a transceiver channel pass the request to the corresponding transceiver channel */
; ..\component\CanIf\Implementation\CanIf.c	  7775              else if (wuTrgtmodule == CANIF_WAKEUPREQUEST_TRCV) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  7776              {
; ..\component\CanIf\Implementation\CanIf.c	  7777  #  if (CANIF_TRCV_MAPPING == STD_ON) /* more than one transceiver respectively controller */
; ..\component\CanIf\Implementation\CanIf.c	  7778                /* Indirection here */
; ..\component\CanIf\Implementation\CanIf.c	  7779                uint8                                 lowIndex;
; ..\component\CanIf\Implementation\CanIf.c	  7780                CanIf_CanTrcvFctTblIdx                lowAddress;
; ..\component\CanIf\Implementation\CanIf.c	  7781                CanIf_CanTrcv_CheckWakeupFctType   lowFct;
; ..\component\CanIf\Implementation\CanIf.c	  7782  #   if (CANIF_DEV_ERROR_DETECT == STD_ON)                        
; ..\component\CanIf\Implementation\CanIf.c	  7783                if (wuTrgtaddress >= CanIf_GetSizeOfTransceiverUpToLowMap()) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7784                {
; ..\component\CanIf\Implementation\CanIf.c	  7785                  errorId = CANIF_E_PARAM_TRCV;
; ..\component\CanIf\Implementation\CanIf.c	  7786                  retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  7787                }
; ..\component\CanIf\Implementation\CanIf.c	  7788                else                  
; ..\component\CanIf\Implementation\CanIf.c	  7789  #   endif                  
; ..\component\CanIf\Implementation\CanIf.c	  7790                {
; ..\component\CanIf\Implementation\CanIf.c	  7791                  lowIndex   = CANIF_CFG_TRCVUPTOLOWMAP_CHANNELINDEX(wuTrgtaddress); /* get the call-parameter for the transceiver-function */
; ..\component\CanIf\Implementation\CanIf.c	  7792                  lowAddress = CANIF_CFG_TRCVUPTOLOWMAP_DRIVERINDEX(wuTrgtaddress);
; ..\component\CanIf\Implementation\CanIf.c	  7793         
; ..\component\CanIf\Implementation\CanIf.c	  7794                  /* get the corresponding transceiver-function */
; ..\component\CanIf\Implementation\CanIf.c	  7795                  lowFct = CanIf_GetCanTrcv_CheckWakeupFctMap(lowAddress);
; ..\component\CanIf\Implementation\CanIf.c	  7796         
; ..\component\CanIf\Implementation\CanIf.c	  7797                  if (lowFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  7798                  {
; ..\component\CanIf\Implementation\CanIf.c	  7799                    /* call the corresponding transceiver function */
; ..\component\CanIf\Implementation\CanIf.c	  7800                    /* \trace SPEC-1967 */
; ..\component\CanIf\Implementation\CanIf.c	  7801                    localRetval = lowFct(lowIndex);  /* SBSW_CANIF_22 */
; ..\component\CanIf\Implementation\CanIf.c	  7802                  }
; ..\component\CanIf\Implementation\CanIf.c	  7803                }
; ..\component\CanIf\Implementation\CanIf.c	  7804  #  else  /* CANIF_TRCV_MAPPING -> only one transceiver respectively one controller */
; ..\component\CanIf\Implementation\CanIf.c	  7805                /* \trace SPEC-3684, SPEC-1967 */
; ..\component\CanIf\Implementation\CanIf.c	  7806                localRetval = CanTrcv_CheckWakeup(wuTrgtaddress);
; ..\component\CanIf\Implementation\CanIf.c	  7807  #  endif /* (CANIF_TRCV_MAPPING == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  7808              } /* wuTrgtmodule == CANIF_WAKEUPREQUEST_TRCV */
; ..\component\CanIf\Implementation\CanIf.c	  7809  # endif /* CANIF_TRCV_HANDLING == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  7810              else
; ..\component\CanIf\Implementation\CanIf.c	  7811              {
; ..\component\CanIf\Implementation\CanIf.c	  7812                /* CANIF_WAKEUPREQUEST_NONE nothing to do */
; ..\component\CanIf\Implementation\CanIf.c	  7813              }
; ..\component\CanIf\Implementation\CanIf.c	  7814    
; ..\component\CanIf\Implementation\CanIf.c	  7815              /* localRetval is E_OK if the requested source is responsible for the wakeup */
; ..\component\CanIf\Implementation\CanIf.c	  7816              if (localRetval == E_OK)
; ..\component\CanIf\Implementation\CanIf.c	  7817              {
; ..\component\CanIf\Implementation\CanIf.c	  7818                /* #400 Mark if the wake-up request was confirmed by CAN channel / transceiver channel */
; ..\component\CanIf\Implementation\CanIf.c	  7819                wokenUpSources |= wuSrc;
; ..\component\CanIf\Implementation\CanIf.c	  7820              }
; ..\component\CanIf\Implementation\CanIf.c	  7821            } /* CAN controller in CANIF_CS_SLEEP || CANIF_CS_STOPPED? */
; ..\component\CanIf\Implementation\CanIf.c	  7822            else
; ..\component\CanIf\Implementation\CanIf.c	  7823            {
; ..\component\CanIf\Implementation\CanIf.c	  7824              /* != CANIF_CS_SLEEP || CANIF_CS_STOPPED */
; ..\component\CanIf\Implementation\CanIf.c	  7825              /* \trace SPEC-5284 */
; ..\component\CanIf\Implementation\CanIf.c	  7826              retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  7827              /* Report DET error */
; ..\component\CanIf\Implementation\CanIf.c	  7828              errorId = CANIF_E_NOT_SLEEP;
; ..\component\CanIf\Implementation\CanIf.c	  7829            }
; ..\component\CanIf\Implementation\CanIf.c	  7830          } /* ValidWakeUpSource? */
; ..\component\CanIf\Implementation\CanIf.c	  7831        } /* DET Error occurred */
; ..\component\CanIf\Implementation\CanIf.c	  7832      } /* WakeUp-Source FOR-Loop */
; ..\component\CanIf\Implementation\CanIf.c	  7833    } /* (CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  7834  
; ..\component\CanIf\Implementation\CanIf.c	  7835    /* \trace SPEC-5278, SPEC-5345 */
; ..\component\CanIf\Implementation\CanIf.c	  7836    if (wokenUpSources == 0u)
; ..\component\CanIf\Implementation\CanIf.c	  7837    {
; ..\component\CanIf\Implementation\CanIf.c	  7838      /* #500 If no wake-up sources were confirmed return E_NOT_OK */
; ..\component\CanIf\Implementation\CanIf.c	  7839      retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  7840    }
; ..\component\CanIf\Implementation\CanIf.c	  7841  
; ..\component\CanIf\Implementation\CanIf.c	  7842    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7843  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7844    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  7845    {
; ..\component\CanIf\Implementation\CanIf.c	  7846      CanIf_Det_ReportError(CANIF_CHECKWAKEUP_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  7847    }
; ..\component\CanIf\Implementation\CanIf.c	  7848  # else
; ..\component\CanIf\Implementation\CanIf.c	  7849    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  7850  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7851    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  7852    } /* PRQA S 6010, 6030, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  7853  #endif /* CANIF_WAKEUP_SUPPORT */
; ..\component\CanIf\Implementation\CanIf.c	  7854  
; ..\component\CanIf\Implementation\CanIf.c	  7855  
; ..\component\CanIf\Implementation\CanIf.c	  7856  /* \trace SPEC-1936, SPEC-3693, SPEC-5234 */
; ..\component\CanIf\Implementation\CanIf.c	  7857  #if (CANIF_WAKEUP_VALIDATION == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7858  /* \trace SPEC-1902 */
; ..\component\CanIf\Implementation\CanIf.c	  7859  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  7860   *  CanIf_CheckValidation()
; ..\component\CanIf\Implementation\CanIf.c	  7861   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  7862  /*
; ..\component\CanIf\Implementation\CanIf.c	  7863  |<DataModelStart>| CanIf_CheckValidation
; ..\component\CanIf\Implementation\CanIf.c	  7864  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  7865  CanIfWakeupValidation # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  7866  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  7867  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  7868  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7869  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7870  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7871  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  7872  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  7873  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  7874  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  7875  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  7876  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  7877  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  7878  */
; ..\component\CanIf\Implementation\CanIf.c	  7879   /*!
; ..\component\CanIf\Implementation\CanIf.c	  7880   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  7881   *
; ..\component\CanIf\Implementation\CanIf.c	  7882   *
; ..\component\CanIf\Implementation\CanIf.c	  7883   *
; ..\component\CanIf\Implementation\CanIf.c	  7884   *
; ..\component\CanIf\Implementation\CanIf.c	  7885   *
; ..\component\CanIf\Implementation\CanIf.c	  7886   *
; ..\component\CanIf\Implementation\CanIf.c	  7887   *
; ..\component\CanIf\Implementation\CanIf.c	  7888   *
; ..\component\CanIf\Implementation\CanIf.c	  7889   *
; ..\component\CanIf\Implementation\CanIf.c	  7890   *
; ..\component\CanIf\Implementation\CanIf.c	  7891   */
; ..\component\CanIf\Implementation\CanIf.c	  7892  FUNC(Std_ReturnType, CANIF_CODE) CanIf_CheckValidation(EcuM_WakeupSourceType WakeupSource)
; ..\component\CanIf\Implementation\CanIf.c	  7893  {
; ..\component\CanIf\Implementation\CanIf.c	  7894    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7895    Std_ReturnType retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  7896    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  7897    EcuM_WakeupSourceType wokenUpSources;
; ..\component\CanIf\Implementation\CanIf.c	  7898    uint8  numWUsrc;       
; ..\component\CanIf\Implementation\CanIf.c	  7899    wokenUpSources = 0u;
; ..\component\CanIf\Implementation\CanIf.c	  7900    
; ..\component\CanIf\Implementation\CanIf.c	  7901    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7902  # if ((CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  7903    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  7904    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  7905    {
; ..\component\CanIf\Implementation\CanIf.c	  7906      retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  7907      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  7908      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7909    }
; ..\component\CanIf\Implementation\CanIf.c	  7910    else
; ..\component\CanIf\Implementation\CanIf.c	  7911  # endif /* (CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  7912    {
; ..\component\CanIf\Implementation\CanIf.c	  7913      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7914      
; ..\component\CanIf\Implementation\CanIf.c	  7915      /* #100 Run through all configured wake-up sources */
; ..\component\CanIf\Implementation\CanIf.c	  7916      for (numWUsrc = 0u; numWUsrc < CANIF_CFG_MAX_WAKEUPSOURCES; numWUsrc++)
; ..\component\CanIf\Implementation\CanIf.c	  7917      {
; ..\component\CanIf\Implementation\CanIf.c	  7918        EcuM_WakeupSourceType                 wuSrc;
; ..\component\CanIf\Implementation\CanIf.c	  7919        CANIF_WUCHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  7920  
; ..\component\CanIf\Implementation\CanIf.c	  7921        /* #110 Acquire wake-up source information: wake-up source value, module (CAN / transceiver), channel ID */
; ..\component\CanIf\Implementation\CanIf.c	  7922        wuSrc         = CANIF_CFG_WAKEUP_WAKEUPSOURCE(numWUsrc);
; ..\component\CanIf\Implementation\CanIf.c	  7923  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  7924        /* Find the correct CAN Controller */
; ..\component\CanIf\Implementation\CanIf.c	  7925        /* indirect check of wake-up source -> \trace SPEC-3690 */
; ..\component\CanIf\Implementation\CanIf.c	  7926        wuController  = CANIF_CFG_WAKEUP_CONTROLLER(numWUsrc);
; ..\component\CanIf\Implementation\CanIf.c	  7927  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7928  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7929        /* DET error occurred other sources will be checked return value will be E_NOT_OK */
; ..\component\CanIf\Implementation\CanIf.c	  7930  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  7931        /* #120 Check the CAN channel parameter */
; ..\component\CanIf\Implementation\CanIf.c	  7932        if (CanIf_WU_Controller_Value_Local >= CANIF_CFG_MAX_CONTROLLER) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  7933        {
; ..\component\CanIf\Implementation\CanIf.c	  7934          retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  7935          /* \trace SPEC-3690 */
; ..\component\CanIf\Implementation\CanIf.c	  7936          errorId = CANIF_E_PARAM_WAKEUPSOURCE;
; ..\component\CanIf\Implementation\CanIf.c	  7937        }
; ..\component\CanIf\Implementation\CanIf.c	  7938        else
; ..\component\CanIf\Implementation\CanIf.c	  7939  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  7940        /* #130 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  7941        if (CanIf_GetCtrlMode(CanIf_WU_Controller_Value_Local) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  7942        {
; ..\component\CanIf\Implementation\CanIf.c	  7943          retval = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  7944          /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  7945          errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  7946        }
; ..\component\CanIf\Implementation\CanIf.c	  7947        else
; ..\component\CanIf\Implementation\CanIf.c	  7948  # endif /* CANIF_DEV_ERROR_DETECT */
; ..\component\CanIf\Implementation\CanIf.c	  7949        {
; ..\component\CanIf\Implementation\CanIf.c	  7950  
; ..\component\CanIf\Implementation\CanIf.c	  7951          /* #140 Is it the wake-up source which shall be validated? */
; ..\component\CanIf\Implementation\CanIf.c	  7952          if ((WakeupSource & wuSrc) != 0u)
; ..\component\CanIf\Implementation\CanIf.c	  7953          {
; ..\component\CanIf\Implementation\CanIf.c	  7954            /* #150 Determine whether the passed wake-up source was validated */
; ..\component\CanIf\Implementation\CanIf.c	  7955            if ( CanIf_GetWakeUpValidationState(CanIf_WU_Controller_Value_Local) == CANIF_WUVALIDATION_DETECTED )
; ..\component\CanIf\Implementation\CanIf.c	  7956            {
; ..\component\CanIf\Implementation\CanIf.c	  7957              /* We detected a wake up validation */
; ..\component\CanIf\Implementation\CanIf.c	  7958              /* #160 Store the wake-up source if it was validated */
; ..\component\CanIf\Implementation\CanIf.c	  7959              wokenUpSources |= wuSrc;
; ..\component\CanIf\Implementation\CanIf.c	  7960            }
; ..\component\CanIf\Implementation\CanIf.c	  7961          } /* ValidWakeUpSource */
; ..\component\CanIf\Implementation\CanIf.c	  7962          else
; ..\component\CanIf\Implementation\CanIf.c	  7963          {
; ..\component\CanIf\Implementation\CanIf.c	  7964            /* Invalid wake up source passed / or no wake up occurred */
; ..\component\CanIf\Implementation\CanIf.c	  7965            /* Nothing to do */
; ..\component\CanIf\Implementation\CanIf.c	  7966          }
; ..\component\CanIf\Implementation\CanIf.c	  7967        } /* DET Error occurred */
; ..\component\CanIf\Implementation\CanIf.c	  7968  
; ..\component\CanIf\Implementation\CanIf.c	  7969        /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  7970  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7971        if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  7972        {
; ..\component\CanIf\Implementation\CanIf.c	  7973          CanIf_Det_ReportError(CANIF_CHECKVALIDATIONUP_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  7974        }
; ..\component\CanIf\Implementation\CanIf.c	  7975  # endif
; ..\component\CanIf\Implementation\CanIf.c	  7976      } /* WakeUp-Source Loop */
; ..\component\CanIf\Implementation\CanIf.c	  7977    } /* (CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  7978  
; ..\component\CanIf\Implementation\CanIf.c	  7979    if (wokenUpSources != 0u) /* ESCAN00085941 */
; ..\component\CanIf\Implementation\CanIf.c	  7980    {
; ..\component\CanIf\Implementation\CanIf.c	  7981      /* \trace SPEC-1905 */
; ..\component\CanIf\Implementation\CanIf.c	  7982      /* #200 Only if any wakeup source was validated successfully notify the upper layer */
; ..\component\CanIf\Implementation\CanIf.c	  7983      CanIf_WakeUpValidationFctType wakeupValidationFct;
; ..\component\CanIf\Implementation\CanIf.c	  7984      wakeupValidationFct = CANIF_CFG_WAKEUPVALIDATION();
; ..\component\CanIf\Implementation\CanIf.c	  7985      if (wakeupValidationFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  7986      {
; ..\component\CanIf\Implementation\CanIf.c	  7987        wakeupValidationFct(wokenUpSources & WakeupSource); /* SBSW_CANIF_13 */  /* ESCAN00090296 */
; ..\component\CanIf\Implementation\CanIf.c	  7988      }
; ..\component\CanIf\Implementation\CanIf.c	  7989    }
; ..\component\CanIf\Implementation\CanIf.c	  7990  
; ..\component\CanIf\Implementation\CanIf.c	  7991  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7992  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  7993    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  7994    {
; ..\component\CanIf\Implementation\CanIf.c	  7995      CanIf_Det_ReportError(CANIF_CHECKVALIDATIONUP_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  7996    }
; ..\component\CanIf\Implementation\CanIf.c	  7997  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  7998  # else
; ..\component\CanIf\Implementation\CanIf.c	  7999    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8000  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8001    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  8002  } /* PRQA S 6010, 6030, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  8003  #endif /* (CANIF_WAKEUP_SUPPORT == STD_ON) && (CANIF_WAKEUP_VALIDATION == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  8004  
; ..\component\CanIf\Implementation\CanIf.c	  8005  
; ..\component\CanIf\Implementation\CanIf.c	  8006  /* \trace SPEC-3588 */
; ..\component\CanIf\Implementation\CanIf.c	  8007  #if (CANIF_SETDYNAMICTXID_API == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8008  /* \trace SPEC-1899 */
; ..\component\CanIf\Implementation\CanIf.c	  8009  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  8010   *  CanIf_SetDynamicTxId()
; ..\component\CanIf\Implementation\CanIf.c	  8011   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  8012  /*
; ..\component\CanIf\Implementation\CanIf.c	  8013  |<DataModelStart>| CanIf_SetDynamicTxId
; ..\component\CanIf\Implementation\CanIf.c	  8014  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  8015  CanIfDynTx # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  8016  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  8017  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8018  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  8019  CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  8020  CanIfVariant, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8021  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8022  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8023  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8024  CanIfDevErrorDetect, CanIfIDType
; ..\component\CanIf\Implementation\CanIf.c	  8025  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8026  CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  8027  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8028  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  8029  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  8030  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  8031  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  8032  */
; ..\component\CanIf\Implementation\CanIf.c	  8033   /*!
; ..\component\CanIf\Implementation\CanIf.c	  8034   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  8035   *
; ..\component\CanIf\Implementation\CanIf.c	  8036   *
; ..\component\CanIf\Implementation\CanIf.c	  8037   *
; ..\component\CanIf\Implementation\CanIf.c	  8038   *
; ..\component\CanIf\Implementation\CanIf.c	  8039   *
; ..\component\CanIf\Implementation\CanIf.c	  8040   *
; ..\component\CanIf\Implementation\CanIf.c	  8041   *
; ..\component\CanIf\Implementation\CanIf.c	  8042   *
; ..\component\CanIf\Implementation\CanIf.c	  8043   *
; ..\component\CanIf\Implementation\CanIf.c	  8044   */
; ..\component\CanIf\Implementation\CanIf.c	  8045  FUNC(void, CANIF_CODE) CanIf_SetDynamicTxId(PduIdType CanTxPduId, Can_IdType CanId)
; ..\component\CanIf\Implementation\CanIf.c	  8046  {
; ..\component\CanIf\Implementation\CanIf.c	  8047    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8048    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  8049    CANIF_CHANNEL_CANTYPE_LOCAL
; ..\component\CanIf\Implementation\CanIf.c	  8050    PduIdType dynamicPduId;
; ..\component\CanIf\Implementation\CanIf.c	  8051  
; ..\component\CanIf\Implementation\CanIf.c	  8052    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8053  # if ((CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  8054    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  8055    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  8056    {
; ..\component\CanIf\Implementation\CanIf.c	  8057      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  8058      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8059    }
; ..\component\CanIf\Implementation\CanIf.c	  8060    else
; ..\component\CanIf\Implementation\CanIf.c	  8061  # endif /* (CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  8062  
; ..\component\CanIf\Implementation\CanIf.c	  8063  # if ((CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME) || (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  8064  #  if (CANIF_DEV_ERROR_DETECT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  8065    /* #20 Check if parameter CanTxPduId is valid if a CanTxPduId indirection is done.*/
; ..\component\CanIf\Implementation\CanIf.c	  8066    if (CanTxPduId >= CANIF_CFG_MAX_ULTXPDUS)
; ..\component\CanIf\Implementation\CanIf.c	  8067    {
; ..\component\CanIf\Implementation\CanIf.c	  8068      /* \trace SPEC-2007 */
; ..\component\CanIf\Implementation\CanIf.c	  8069      errorId = CANIF_E_INVALID_TXPDUID;
; ..\component\CanIf\Implementation\CanIf.c	  8070    }
; ..\component\CanIf\Implementation\CanIf.c	  8071    else
; ..\component\CanIf\Implementation\CanIf.c	  8072  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  8073    {
; ..\component\CanIf\Implementation\CanIf.c	  8074      /* for PB and LT configurations the TxPduId order between CanIf and higher layers may differ and needs to be indirected */
; ..\component\CanIf\Implementation\CanIf.c	  8075      CanTxPduId = CANIF_CFG_TXPDUID2INTTXPDUID(CanTxPduId); /* PRQA S 1338 */ /* MD_CanIf_Rule17.8 */ /* ESCAN00075868 */
; ..\component\CanIf\Implementation\CanIf.c	  8076  # endif      
; ..\component\CanIf\Implementation\CanIf.c	  8077  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8078      /* #30 Check if parameter CanTxPduId is valid. */
; ..\component\CanIf\Implementation\CanIf.c	  8079      if (CanTxPduId >= CANIF_CFG_MAX_TXPDUS)
; ..\component\CanIf\Implementation\CanIf.c	  8080      {
; ..\component\CanIf\Implementation\CanIf.c	  8081        /* \trace SPEC-2007 */
; ..\component\CanIf\Implementation\CanIf.c	  8082        errorId = CANIF_E_INVALID_TXPDUID;
; ..\component\CanIf\Implementation\CanIf.c	  8083      }
; ..\component\CanIf\Implementation\CanIf.c	  8084      else
; ..\component\CanIf\Implementation\CanIf.c	  8085  # endif        
; ..\component\CanIf\Implementation\CanIf.c	  8086      {
; ..\component\CanIf\Implementation\CanIf.c	  8087  
; ..\component\CanIf\Implementation\CanIf.c	  8088  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  8089        /* Collect configuration data */
; ..\component\CanIf\Implementation\CanIf.c	  8090        controller = CANIF_CFG_TX_CONTROLLER(CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  8091  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8092        dynamicPduId = CANIF_CFG_STAT2DYN_INDIRECTION(CanTxPduId);
; ..\component\CanIf\Implementation\CanIf.c	  8093  
; ..\component\CanIf\Implementation\CanIf.c	  8094  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8095        /* #40 Check if the ID of corresponding dynamic PDU is valid */
; ..\component\CanIf\Implementation\CanIf.c	  8096        if (dynamicPduId >= CanIf_GetSizeOfDynTxId()) /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  8097        {
; ..\component\CanIf\Implementation\CanIf.c	  8098          /* no ASR-requirement, just verify the dynamicPduId */
; ..\component\CanIf\Implementation\CanIf.c	  8099          errorId = CANIF_E_INVALID_TXPDUID;
; ..\component\CanIf\Implementation\CanIf.c	  8100        }
; ..\component\CanIf\Implementation\CanIf.c	  8101  #  if (CANIF_EXTENDEDID_SUPPORT != STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8102        /* #50 Check if parameter CanId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  8103        else if ((CanId & (~CANIF_FDFLAG)) > 0x7FFu)
; ..\component\CanIf\Implementation\CanIf.c	  8104        {
; ..\component\CanIf\Implementation\CanIf.c	  8105          /* \trace SPEC-3596 */
; ..\component\CanIf\Implementation\CanIf.c	  8106          errorId = CANIF_E_PARAM_CANID;
; ..\component\CanIf\Implementation\CanIf.c	  8107        }
; ..\component\CanIf\Implementation\CanIf.c	  8108  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  8109        /* #60 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  8110        else if(CanIf_GetCtrlMode(CanIf_Controller_Value_Local) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  8111        {
; ..\component\CanIf\Implementation\CanIf.c	  8112          /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  8113          errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8114        }
; ..\component\CanIf\Implementation\CanIf.c	  8115        else
; ..\component\CanIf\Implementation\CanIf.c	  8116  # endif /* (CANIF_DEV_ERROR_DETECT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  8117        {
; ..\component\CanIf\Implementation\CanIf.c	  8118          /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8119          /* \trace SPEC-3589 */
; ..\component\CanIf\Implementation\CanIf.c	  8120  # if (CANIF_DEV_ERROR_DETECT == STD_OFF)
; ..\component\CanIf\Implementation\CanIf.c	  8121          /* #100 Process only if corresponding CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  8122          if(CanIf_GetCtrlMode(CanIf_Controller_Value_Local) != CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  8123  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8124          {
; ..\component\CanIf\Implementation\CanIf.c	  8125            /* \trace SPEC-5271 preemptive call of CanTransmit */
; ..\component\CanIf\Implementation\CanIf.c	  8126            CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_5);
; ..\component\CanIf\Implementation\CanIf.c	  8127            /* \trace SPEC-1906 identifier extension flag will be passed */
; ..\component\CanIf\Implementation\CanIf.c	  8128            /* #110 Set the CAN identifier (protected by critical section) */
; ..\component\CanIf\Implementation\CanIf.c	  8129            CANIF_VAR_DYNTXID(dynamicPduId) = CanId;  /* SBSW_CANIF_14 */
; ..\component\CanIf\Implementation\CanIf.c	  8130            CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_5);
; ..\component\CanIf\Implementation\CanIf.c	  8131          }
; ..\component\CanIf\Implementation\CanIf.c	  8132        } /* (CANIF_DEV_ERROR_DETECT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  8133      } /* (CANIF_DEV_ERROR_DETECT == STD_ON) && (CANIF_USE_INIT_POINTER == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  8134  # if ((CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME) || (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON))      
; ..\component\CanIf\Implementation\CanIf.c	  8135    }
; ..\component\CanIf\Implementation\CanIf.c	  8136  # endif  
; ..\component\CanIf\Implementation\CanIf.c	  8137    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8138  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8139    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  8140    {
; ..\component\CanIf\Implementation\CanIf.c	  8141      CanIf_Det_ReportError(CANIF_SETDYNAMICTXID_API_ID, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  8142    }
; ..\component\CanIf\Implementation\CanIf.c	  8143  # else
; ..\component\CanIf\Implementation\CanIf.c	  8144    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8145  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8146  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  8147  #endif /* (CANIF_SETDYNAMICTXID_API == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  8148  
; ..\component\CanIf\Implementation\CanIf.c	  8149  
; ..\component\CanIf\Implementation\CanIf.c	  8150  /* \trace SPEC-5307, SPEC-5308 */
; ..\component\CanIf\Implementation\CanIf.c	  8151  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  8152   *  CanIf_ControllerModeIndication()
; ..\component\CanIf\Implementation\CanIf.c	  8153   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  8154  /*
; ..\component\CanIf\Implementation\CanIf.c	  8155  |<DataModelStart>| CanIf_ControllerModeIndication
; ..\component\CanIf\Implementation\CanIf.c	  8156  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  8157  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  8158  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8159  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  8160  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8161  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8162  CanIfTxConfPollSupport, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8163  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8164  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8165  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8166  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  8167  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  8168  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  8169  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  8170  */
; ..\component\CanIf\Implementation\CanIf.c	  8171   /*!
; ..\component\CanIf\Implementation\CanIf.c	  8172   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  8173   *
; ..\component\CanIf\Implementation\CanIf.c	  8174   *
; ..\component\CanIf\Implementation\CanIf.c	  8175   *
; ..\component\CanIf\Implementation\CanIf.c	  8176   *
; ..\component\CanIf\Implementation\CanIf.c	  8177   *
; ..\component\CanIf\Implementation\CanIf.c	  8178   *
; ..\component\CanIf\Implementation\CanIf.c	  8179   *
; ..\component\CanIf\Implementation\CanIf.c	  8180   *
; ..\component\CanIf\Implementation\CanIf.c	  8181   *
; ..\component\CanIf\Implementation\CanIf.c	  8182   *
; ..\component\CanIf\Implementation\CanIf.c	  8183   *
; ..\component\CanIf\Implementation\CanIf.c	  8184   *
; ..\component\CanIf\Implementation\CanIf.c	  8185   *
; ..\component\CanIf\Implementation\CanIf.c	  8186   *
; ..\component\CanIf\Implementation\CanIf.c	  8187   *
; ..\component\CanIf\Implementation\CanIf.c	  8188   *
; ..\component\CanIf\Implementation\CanIf.c	  8189   *
; ..\component\CanIf\Implementation\CanIf.c	  8190   */
; ..\component\CanIf\Implementation\CanIf.c	  8191  FUNC(void, CANIF_CODE) CanIf_ControllerModeIndication(uint8 ControllerId, CanIf_ControllerModeType ControllerMode)
; Function CanIf_ControllerModeIndication
.L289:
CanIf_ControllerModeIndication:	.type	func

; ..\component\CanIf\Implementation\CanIf.c	  8192  {
; ..\component\CanIf\Implementation\CanIf.c	  8193    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8194    uint8 errorId = CANIF_E_NO_ERROR;
	mov	d8,#0
.L798:

; ..\component\CanIf\Implementation\CanIf.c	  8195  
; ..\component\CanIf\Implementation\CanIf.c	  8196    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8197  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8198  # if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8199    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  8200    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  8201    {
; ..\component\CanIf\Implementation\CanIf.c	  8202      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  8203      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8204    }
; ..\component\CanIf\Implementation\CanIf.c	  8205    else
; ..\component\CanIf\Implementation\CanIf.c	  8206  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8207    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  8208    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
	jeq	d4,#0,.L189
.L889:

; ..\component\CanIf\Implementation\CanIf.c	  8209    {
; ..\component\CanIf\Implementation\CanIf.c	  8210      /* \trace SPEC-5302 */
; ..\component\CanIf\Implementation\CanIf.c	  8211      errorId = CANIF_E_PARAM_CONTROLLER;
	mov	d8,#14
	j	.L190
.L189:

; ..\component\CanIf\Implementation\CanIf.c	  8212    }
; ..\component\CanIf\Implementation\CanIf.c	  8213    /* #30 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  8214    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
	fcall	.cocofun_5
.L799:
	jne	d15,#0,.L191
.L890:

; ..\component\CanIf\Implementation\CanIf.c	  8215    {
; ..\component\CanIf\Implementation\CanIf.c	  8216      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  8217      errorId = CANIF_E_UNINIT;
	mov	d8,#30
	j	.L192
.L191:

; ..\component\CanIf\Implementation\CanIf.c	  8218    }
; ..\component\CanIf\Implementation\CanIf.c	  8219    else
; ..\component\CanIf\Implementation\CanIf.c	  8220  #endif
; ..\component\CanIf\Implementation\CanIf.c	  8221      {
; ..\component\CanIf\Implementation\CanIf.c	  8222  #if (CANIF_DEV_ERROR_DETECT == STD_OFF)
; ..\component\CanIf\Implementation\CanIf.c	  8223      /* \trace SPEC-5305 */
; ..\component\CanIf\Implementation\CanIf.c	  8224      /* #100 Process only if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  8225      if (CANIF_CS_UNINIT != CanIf_GetCtrlMode(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  8226  #endif
; ..\component\CanIf\Implementation\CanIf.c	  8227      {
; ..\component\CanIf\Implementation\CanIf.c	  8228        /* pointer to callback function */
; ..\component\CanIf\Implementation\CanIf.c	  8229        CanIf_CtrlModeIndicationFctType cbkFct;
; ..\component\CanIf\Implementation\CanIf.c	  8230  
; ..\component\CanIf\Implementation\CanIf.c	  8231        /* outer "switch" -> indication mode changed (call parameter of the function */
; ..\component\CanIf\Implementation\CanIf.c	  8232        /* inner "switch" -> actual mode */
; ..\component\CanIf\Implementation\CanIf.c	  8233        switch(ControllerMode)
; ..\component\CanIf\Implementation\CanIf.c	  8234        {
; ..\component\CanIf\Implementation\CanIf.c	  8235          case CANIF_CS_STOPPED:
	jeq	d5,#1,.L193
.L891:

; ..\component\CanIf\Implementation\CanIf.c	  8236            /* #200 Transition to STOP confirmed */
; ..\component\CanIf\Implementation\CanIf.c	  8237            switch(CanIf_GetCtrlMode(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  8238            {
; ..\component\CanIf\Implementation\CanIf.c	  8239              case CANIF_CS_STARTED:
; ..\component\CanIf\Implementation\CanIf.c	  8240              case CANIF_CS_SLEEP:
; ..\component\CanIf\Implementation\CanIf.c	  8241                /* \trace SPEC-5347, SPEC-5340 */
; ..\component\CanIf\Implementation\CanIf.c	  8242                /* #210 Set the internal mode to STOP if currently in START or SLEEP mode */
; ..\component\CanIf\Implementation\CanIf.c	  8243                CanIf_SetCtrlMode(CanIf_Controller_Value, CANIF_CS_STOPPED); /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  8244  #if (CANIF_PUBLIC_TX_CONFIRM_POLLING_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8245                /* \trace SPEC-9980 */
; ..\component\CanIf\Implementation\CanIf.c	  8246                /* TxConfirmationState is reset always when CAN controller is stopped
; ..\component\CanIf\Implementation\CanIf.c	  8247                * - BusOff
; ..\component\CanIf\Implementation\CanIf.c	  8248                * - Going to _SLEEP
; ..\component\CanIf\Implementation\CanIf.c	  8249                * - CanIf_InitController() is called */
; ..\component\CanIf\Implementation\CanIf.c	  8250                /* #220 Reset the Tx-confirmation state */
; ..\component\CanIf\Implementation\CanIf.c	  8251                CanIf_SetTxConfState(CanIf_Controller_Value, CANIF_NO_NOTIFICATION); /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  8252  #endif
; ..\component\CanIf\Implementation\CanIf.c	  8253                break;
; ..\component\CanIf\Implementation\CanIf.c	  8254              case CANIF_CS_STOPPED:
; ..\component\CanIf\Implementation\CanIf.c	  8255                /* #230 Do nothing if currently in STOP mode */
; ..\component\CanIf\Implementation\CanIf.c	  8256                /* Change to STOP confirmed */
; ..\component\CanIf\Implementation\CanIf.c	  8257                /* CANIF713 nothing to do */
; ..\component\CanIf\Implementation\CanIf.c	  8258                break;
; ..\component\CanIf\Implementation\CanIf.c	  8259              default: /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  8260                /* not defined in ASR4-specification */
; ..\component\CanIf\Implementation\CanIf.c	  8261                break;
; ..\component\CanIf\Implementation\CanIf.c	  8262            }
; ..\component\CanIf\Implementation\CanIf.c	  8263            break;
; ..\component\CanIf\Implementation\CanIf.c	  8264          case CANIF_CS_STARTED:
	jeq	d5,#2,.L194
.L892:

; ..\component\CanIf\Implementation\CanIf.c	  8265            /* #300 Transition to START confirmed */
; ..\component\CanIf\Implementation\CanIf.c	  8266            switch(CanIf_GetCtrlMode(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  8267            {
; ..\component\CanIf\Implementation\CanIf.c	  8268              case CANIF_CS_STOPPED:
; ..\component\CanIf\Implementation\CanIf.c	  8269                /* \trace SPEC-5351 */
; ..\component\CanIf\Implementation\CanIf.c	  8270                /* #310 Set the internal mode to START if currently in STOP mode */
; ..\component\CanIf\Implementation\CanIf.c	  8271                CanIf_SetCtrlMode(CanIf_Controller_Value, CANIF_CS_STARTED);  /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  8272                break;
; ..\component\CanIf\Implementation\CanIf.c	  8273              case CANIF_CS_STARTED:
; ..\component\CanIf\Implementation\CanIf.c	  8274                /* \trace SPEC-5341 */
; ..\component\CanIf\Implementation\CanIf.c	  8275                /* #320 If currently in START nothing to do */
; ..\component\CanIf\Implementation\CanIf.c	  8276                break;
; ..\component\CanIf\Implementation\CanIf.c	  8277              case CANIF_CS_SLEEP:
; ..\component\CanIf\Implementation\CanIf.c	  8278                /* \trace SPEC-5340 */
; ..\component\CanIf\Implementation\CanIf.c	  8279                /* #330 If currently in SLEEP then transition is not allowed. Do nothing. */
; ..\component\CanIf\Implementation\CanIf.c	  8280                break;
; ..\component\CanIf\Implementation\CanIf.c	  8281              default: /* COV_CANIF_GENDATA_FAILURE */
; ..\component\CanIf\Implementation\CanIf.c	  8282                /* not defined in ASR4-specification */
; ..\component\CanIf\Implementation\CanIf.c	  8283                break;
; ..\component\CanIf\Implementation\CanIf.c	  8284            }
; ..\component\CanIf\Implementation\CanIf.c	  8285            break;
; ..\component\CanIf\Implementation\CanIf.c	  8286          case CANIF_CS_SLEEP:
	jeq	d5,#3,.L195
.L893:
	j	.L196
.L193:
	add	d0,d15,#-2
	extr.u	d0,d0,#0,#8
.L894:
	jge.u	d0,#2,.L197
.L895:
	mov	d15,#1
	j	.L198
.L194:
	jne	d15,#1,.L199
.L896:
	mov	d15,#2
	j	.L200
.L195:

; ..\component\CanIf\Implementation\CanIf.c	  8287            /* #400 Transition to SLEEP confirmed */
; ..\component\CanIf\Implementation\CanIf.c	  8288            switch(CanIf_GetCtrlMode(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  8289            {
; ..\component\CanIf\Implementation\CanIf.c	  8290              case CANIF_CS_STOPPED:
	jeq	d15,#1,.L201
.L897:

; ..\component\CanIf\Implementation\CanIf.c	  8291              case CANIF_CS_SLEEP:
	jne	d15,#3,.L203
.L201:

; ..\component\CanIf\Implementation\CanIf.c	  8292                /* \trace SPEC-5348, SPEC-5344 */
; ..\component\CanIf\Implementation\CanIf.c	  8293                /* #410 Set the internal mode to SLEEP if currently in STOP / SLEEP mode */
; ..\component\CanIf\Implementation\CanIf.c	  8294                CanIf_SetCtrlMode(CanIf_Controller_Value, CANIF_CS_SLEEP);  /* SBSW_CANIF_3 */
	mov	d15,#3

; ..\component\CanIf\Implementation\CanIf.c	  8295                break;
; ..\component\CanIf\Implementation\CanIf.c	  8296              case CANIF_CS_STARTED:
; ..\component\CanIf\Implementation\CanIf.c	  8297                /* #420 If currently in START mode then transition is not allowed. Do nothing. */
; ..\component\CanIf\Implementation\CanIf.c	  8298                break;
; ..\component\CanIf\Implementation\CanIf.c	  8299              default: /* COV_CANIF_GENDATA_FAILURE */
.L203:

; ..\component\CanIf\Implementation\CanIf.c	  8300                /* not defined in ASR4-specification  */
; ..\component\CanIf\Implementation\CanIf.c	  8301                break;
; ..\component\CanIf\Implementation\CanIf.c	  8302            }
; ..\component\CanIf\Implementation\CanIf.c	  8303            break;
; ..\component\CanIf\Implementation\CanIf.c	  8304          default:
; ..\component\CanIf\Implementation\CanIf.c	  8305            /* not defined in ASR4-specification  */
; ..\component\CanIf\Implementation\CanIf.c	  8306            break;
; ..\component\CanIf\Implementation\CanIf.c	  8307        }
; ..\component\CanIf\Implementation\CanIf.c	  8308        /* \trace SPEC-5331 */
; ..\component\CanIf\Implementation\CanIf.c	  8309        /* #500 Inform the upper layer about the mode transition */
; ..\component\CanIf\Implementation\CanIf.c	  8310        cbkFct = CANIF_CFG_CTRLMODEINDICATIONFCT();
.L200:
.L199:
.L198:
.L197:
.L196:
	st.b	[a15],d15
.L898:
	movh.a	a15,#@his(CanIf_CtrlModeIndicationFctPtr)
	ld.a	a15,[a15]@los(CanIf_CtrlModeIndicationFctPtr)
.L800:

; ..\component\CanIf\Implementation\CanIf.c	  8311  
; ..\component\CanIf\Implementation\CanIf.c	  8312        /* check if the callback function is available  */
; ..\component\CanIf\Implementation\CanIf.c	  8313        if (cbkFct != NULL_PTR)
	jz.a	a15,.L204
.L899:

; ..\component\CanIf\Implementation\CanIf.c	  8314        {
; ..\component\CanIf\Implementation\CanIf.c	  8315          /* call the callback function */
; ..\component\CanIf\Implementation\CanIf.c	  8316          cbkFct(CanIf_Controller_Value, ControllerMode);  /* SBSW_CANIF_13 */
	calli	a15
.L204:
.L192:
.L190:

; ..\component\CanIf\Implementation\CanIf.c	  8317        }
; ..\component\CanIf\Implementation\CanIf.c	  8318      } /* (CANIF_CS_UNINIT == CanIf_GetCtrlMode(Controller)) */
; ..\component\CanIf\Implementation\CanIf.c	  8319    }
; ..\component\CanIf\Implementation\CanIf.c	  8320  
; ..\component\CanIf\Implementation\CanIf.c	  8321    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8322  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8323    if (errorId != CANIF_E_NO_ERROR)
	jeq	d8,#0,.L205
.L900:

; ..\component\CanIf\Implementation\CanIf.c	  8324    {
; ..\component\CanIf\Implementation\CanIf.c	  8325      CanIf_Det_ReportError(CANIF_CONTROLLERMODEINDICATION_API, errorId);
	fcall	.cocofun_2
	mov	d6,#23
	mov	d7,d8
.L801:
	j	Det_ReportError
.L205:

; ..\component\CanIf\Implementation\CanIf.c	  8326    }
; ..\component\CanIf\Implementation\CanIf.c	  8327  #else
; ..\component\CanIf\Implementation\CanIf.c	  8328    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8329  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  8330    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8331  # endif  
; ..\component\CanIf\Implementation\CanIf.c	  8332  #endif
; ..\component\CanIf\Implementation\CanIf.c	  8333  } /* PRQA S 6030, 6080 */ /* MD_MSR_STCYC, MD_MSR_STMIF */
	ret
.L552:
	
__CanIf_ControllerModeIndication_function_end:
	.size	CanIf_ControllerModeIndication,__CanIf_ControllerModeIndication_function_end-CanIf_ControllerModeIndication
.L333:
	; End of function
	
	.sdecl	'.rodata.CanIf.CanIf_MainVersion',data,rom,cluster('CanIf_MainVersion')
	.sect	'.rodata.CanIf.CanIf_MainVersion'
	.global	CanIf_MainVersion
CanIf_MainVersion:	.type	object
	.size	CanIf_MainVersion,1
	.byte	6
	.sdecl	'.rodata.CanIf.CanIf_SubVersion',data,rom,cluster('CanIf_SubVersion')
	.sect	'.rodata.CanIf.CanIf_SubVersion'
	.global	CanIf_SubVersion
CanIf_SubVersion:	.type	object
	.size	CanIf_SubVersion,1
	.byte	37
	.sdecl	'.rodata.CanIf.CanIf_ReleaseVersion',data,rom,cluster('CanIf_ReleaseVersion')
	.sect	'.rodata.CanIf.CanIf_ReleaseVersion'
	.global	CanIf_ReleaseVersion
CanIf_ReleaseVersion:	.type	object
	.size	CanIf_ReleaseVersion,1
	.space	1
	.sdecl	'.rodata.CanIf.CanIfState',data,rom,cluster('CanIfState')
	.sect	'.rodata.CanIf.CanIfState'
CanIfState:	.type	object
	.size	CanIfState,42
	.byte	255,255,1,255
	.byte	2,3,4
	.space	2
	.byte	255,255,3,3
	.byte	5
	.space	1
	.byte	255,3
	.space	1
	.byte	255,3,4
	.space	1
	.byte	2,255,1,255
	.byte	255,5
	.space	1
	.byte	255,5
	.space	1
	.byte	2,3,255
	.space	1
	.byte	4,255,1,3
	.byte	3,255
	.sdecl	'.rodata.CanIf.RxDlcMaxValueLookUp',data,rom,cluster('RxDlcMaxValueLookUp')
	.sect	'.rodata.CanIf.RxDlcMaxValueLookUp'
RxDlcMaxValueLookUp:	.type	object
	.size	RxDlcMaxValueLookUp,2
	.byte	8,64
	.calls	'CanIf_ClearQueue','SuspendAllInterrupts'
	.calls	'CanIf_ClearQueue','ResumeAllInterrupts'
	.calls	'CanIf_Init','CanIf_ClearQueue'
	.calls	'CanIf_SetControllerModeSubSwitch','Can_SetControllerMode'
	.calls	'CanIf_SetControllerModeSubSwitch','CanIf_ClearQueue'
	.calls	'CanIf_SetControllerModeSubSwitch','Det_ReportError'
	.calls	'CanIf_SetControllerMode','SchM_Enter_CanIf_CANIF_EXCLUSIVE_AREA_0'
	.calls	'CanIf_SetControllerMode','CanIf_SetControllerModeSubSwitch'
	.calls	'CanIf_SetControllerMode','SchM_Exit_CanIf_CANIF_EXCLUSIVE_AREA_0'
	.calls	'CanIf_SetControllerMode','Det_ReportError'
	.calls	'CanIf_GetControllerMode','Det_ReportError'
	.calls	'CanIf_TxBufferPrioByCanIdQueuePdu','VStdLib_MemCpy'
	.calls	'CanIf_TransmitSubHandleTxResBusy','CanIf_TxBufferPrioByCanIdQueuePdu'
	.calls	'CanIf_TransmitSubHandleTxResBusy','CanIf_SetPrioByCanIdTxPduAsQueued'
	.calls	'CanIf_TransmitSubHandleTxResBusy','Det_ReportError'
	.calls	'CanIf_TransmitSubWrite','Can_Write'
	.calls	'CanIf_TransmitSubWrite','CanIf_TransmitSubHandleTxResBusy'
	.calls	'CanIf_TransmitSubWrite','CanIf_ClearPrioByCanIdTxPduAsQueued'
	.calls	'CanIf_Transmit','SuspendAllInterrupts'
	.calls	'CanIf_Transmit','CanIf_TransmitSubVerifyPduLength'
	.calls	'CanIf_Transmit','CanIf_TransmitSubWrite'
	.calls	'CanIf_Transmit','ResumeAllInterrupts'
	.calls	'CanIf_Transmit','CanIf_HlTxConfirmation'
	.calls	'CanIf_Transmit','Det_ReportError'
	.calls	'CanIf_HlTxConfirmation','__INDIRECT__'
	.calls	'CanIf_TxConfirmation','SuspendAllInterrupts'
	.calls	'CanIf_TxConfirmation','CanIf_TxQueueTreatment'
	.calls	'CanIf_TxConfirmation','ResumeAllInterrupts'
	.calls	'CanIf_TxConfirmation','CanIf_HlTxConfirmation'
	.calls	'CanIf_TxConfirmation','Det_ReportError'
	.calls	'CanIf_RxIndicationSubRangeSearch','CanIf_RxIndicationSubReceptionPduMode'
	.calls	'CanIf_RxIndicationSubBasicCan','CanIf_RxIndicationSubLinearSearch'
	.calls	'CanIf_RxIndicationSubBasicCan','CanIf_RxIndicationSubRangeSearch'
	.calls	'CanIf_RxIndicationAsr403','CanIf_RxIndicationSubReceptionPduMode'
	.calls	'CanIf_RxIndicationAsr403','CanIf_RxIndicationSubBasicCan'
	.calls	'CanIf_RxIndicationAsr403','CanIf_HlIndication'
	.calls	'CanIf_RxIndicationAsr403','Det_ReportError'
	.calls	'CanIf_HlIndicationSubULCall','__INDIRECT__'
	.calls	'CanIf_HlIndication','CanIf_HlIndicationSubULCall'
	.calls	'CanIf_HlIndication','Det_ReportError'
	.calls	'CanIf_ControllerBusOff','CanIf_SetPduMode'
	.calls	'CanIf_ControllerBusOff','CanIf_ClearQueue'
	.calls	'CanIf_ControllerBusOff','__INDIRECT__'
	.calls	'CanIf_ControllerBusOff','Det_ReportError'
	.calls	'CanIf_SetPduMode','SuspendAllInterrupts'
	.calls	'CanIf_SetPduMode','CanIf_ClearQueue'
	.calls	'CanIf_SetPduMode','ResumeAllInterrupts'
	.calls	'CanIf_SetPduMode','Det_ReportError'
	.calls	'CanIf_GetPduMode','Det_ReportError'
	.calls	'CanIf_TxQueueTransmit','Can_Write'
	.calls	'CanIf_TxQueueTransmit','CanIf_ClearPrioByCanIdTxPduAsQueued'
	.calls	'CanIf_TxQueueTransmit','Det_ReportError'
	.calls	'CanIf_TxQueueTreatment','CanIf_TxQueueTransmit'
	.calls	'CanIf_ControllerModeIndication','__INDIRECT__'
	.calls	'CanIf_ControllerModeIndication','Det_ReportError'
	.calls	'CanIf_SetPrioByCanIdTxPduAsQueued','.cocofun_1'
	.calls	'CanIf_SetPrioByCanIdTxPduAsQueued','.cocofun_3'
	.calls	'.cocofun_3','.cocofun_11'
	.calls	'.cocofun_1','.cocofun_9'
	.calls	'.cocofun_1','.cocofun_10'
	.calls	'.cocofun_1','.cocofun_12'
	.calls	'.cocofun_10','.cocofun_13'
	.calls	'.cocofun_9','.cocofun_14'
	.calls	'CanIf_ClearPrioByCanIdTxPduAsQueued','.cocofun_1'
	.calls	'CanIf_ClearPrioByCanIdTxPduAsQueued','.cocofun_3'
	.calls	'CanIf_SetControllerModeSubSwitch','.cocofun_6'
	.calls	'CanIf_SetControllerModeSubSwitch','.cocofun_2'
	.calls	'CanIf_SetControllerMode','.cocofun_2'
	.calls	'CanIf_GetControllerMode','.cocofun_6'
	.calls	'CanIf_GetControllerMode','.cocofun_2'
	.calls	'CanIf_TransmitSubVerifyPduLength','.cocofun_9'
	.calls	'CanIf_TxBufferPrioByCanIdQueuePdu','.cocofun_12'
	.calls	'CanIf_TxBufferPrioByCanIdQueuePdu','.cocofun_4'
	.calls	'CanIf_TransmitSubHandleTxResBusy','.cocofun_2'
	.calls	'CanIf_TransmitSubWrite','.cocofun_10'
	.calls	'CanIf_Transmit','.cocofun_5'
	.calls	'CanIf_Transmit','.cocofun_8'
	.calls	'CanIf_Transmit','.cocofun_2'
	.calls	'.cocofun_8','.cocofun_14'
	.calls	'CanIf_HlTxConfirmation','.cocofun_9'
	.calls	'CanIf_TxConfirmation','.cocofun_14'
	.calls	'CanIf_TxConfirmation','.cocofun_7'
	.calls	'CanIf_TxConfirmation','.cocofun_2'
	.calls	'.cocofun_7','.cocofun_13'
	.calls	'CanIf_RxIndicationAsr403','.cocofun_7'
	.calls	'CanIf_RxIndicationAsr403','.cocofun_2'
	.calls	'CanIf_HlIndication','.cocofun_5'
	.calls	'CanIf_HlIndication','.cocofun_2'
	.calls	'CanIf_ControllerBusOff','.cocofun_2'
	.calls	'CanIf_SetPduMode','.cocofun_2'
	.calls	'CanIf_GetPduMode','.cocofun_5'
	.calls	'CanIf_GetPduMode','.cocofun_2'
	.calls	'CanIf_TxQueueTransmit','.cocofun_8'
	.calls	'CanIf_TxQueueTransmit','.cocofun_12'
	.calls	'CanIf_TxQueueTransmit','.cocofun_4'
	.calls	'CanIf_TxQueueTransmit','.cocofun_2'
	.calls	'CanIf_TxQueueTreatment','.cocofun_13'
	.calls	'CanIf_TxQueueTreatment','.cocofun_11'
	.calls	'CanIf_ControllerModeIndication','.cocofun_5'
	.calls	'CanIf_ControllerModeIndication','.cocofun_2'
	.calls	'CanIf_SetPrioByCanIdTxPduAsQueued','',0
	.calls	'.cocofun_3','',0
	.calls	'.cocofun_11','',0
	.calls	'.cocofun_1','',0
	.calls	'.cocofun_12','',0
	.calls	'.cocofun_10','',0
	.calls	'.cocofun_13','',0
	.calls	'.cocofun_9','',0
	.calls	'.cocofun_14','',0
	.calls	'CanIf_ClearPrioByCanIdTxPduAsQueued','',0
	.calls	'CanIf_ClearQueue','',0
	.calls	'CanIf_Init','',0
	.calls	'CanIf_SetControllerModeSubSwitch','',0
	.calls	'.cocofun_6','',0
	.calls	'.cocofun_2','',0
	.calls	'CanIf_SetControllerMode','',0
	.calls	'CanIf_GetControllerMode','',0
	.calls	'CanIf_TransmitSubVerifyPduLength','',0
	.calls	'CanIf_TxBufferPrioByCanIdQueuePdu','',0
	.calls	'.cocofun_4','',0
	.calls	'CanIf_TransmitSubHandleTxResBusy','',0
	.calls	'CanIf_TransmitSubWrite','',0
	.calls	'CanIf_Transmit','',16
	.calls	'.cocofun_8','',0
	.calls	'.cocofun_5','',0
	.calls	'CanIf_HlTxConfirmation','',0
	.calls	'CanIf_TxConfirmation','',0
	.calls	'.cocofun_7','',0
	.calls	'CanIf_RxIndicationSubLinearSearch','',0
	.calls	'CanIf_RxIndicationSubReceptionPduMode','',0
	.calls	'CanIf_RxIndicationSubRangeSearch','',0
	.calls	'CanIf_RxIndicationSubBasicCan','',0
	.calls	'CanIf_RxIndicationAsr403','',8
	.calls	'CanIf_HlIndicationSubULCall','',8
	.calls	'CanIf_HlIndication','',0
	.calls	'CanIf_ControllerBusOff','',0
	.calls	'CanIf_SetPduMode','',0
	.calls	'CanIf_GetPduMode','',0
	.calls	'CanIf_TxQueueTransmit','',16
	.calls	'CanIf_TxQueueTreatment','',0
	.calls	'CanIf_InitMemory','',0
	.extern	Can_SetControllerMode
	.extern	Can_Write
	.extern	CanIf_BusOffNotificationFctPtr
	.extern	CanIf_CanIfCtrlId2MappedTxBuffersConfig
	.extern	CanIf_CtrlModeIndicationFctPtr
	.extern	CanIf_MailBoxConfig
	.extern	CanIf_MappedTxBuffersConfig
	.extern	CanIf_RxIndicationFctList
	.extern	CanIf_RxPduConfig
	.extern	CanIf_TxBufferPrioByCanIdByteQueueConfig
	.extern	CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdus
	.extern	CanIf_TxConfirmationFctList
	.extern	CanIf_TxPduConfig
	.extern	CanIf_TxPduQueueIndex
	.extern	CanIf_TxQueueIndex2DataStartStop
	.extern	CanIf_CtrlStates
	.extern	CanIf_TxBufferPrioByCanIdBase
	.extern	CanIf_TxQueue
	.extern	CanIf_TxQueueData
	.extern	VStdLib_MemCpy
	.extern	Det_ReportError
	.extern	SuspendAllInterrupts
	.extern	ResumeAllInterrupts
	.extern	SchM_Enter_CanIf_CANIF_EXCLUSIVE_AREA_0
	.extern	SchM_Exit_CanIf_CANIF_EXCLUSIVE_AREA_0
	.extern	__INDIRECT__
	.calls	'CanIf_ControllerModeIndication','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L291:
	.word	27330
	.half	3
	.word	.L292
	.byte	4
.L290:
	.byte	1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L293
	.byte	2
	.byte	'int',0,4,5,3
	.word	135
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	142
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	184
	.byte	7
	.word	184
	.byte	8
	.byte	'__cmpswapw',0
	.word	200
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	205
	.byte	9
	.byte	'value',0
	.word	184
	.byte	9
	.byte	'compare',0
	.word	184
	.byte	0
.L591:
	.byte	10,2,91,9,1,11
	.byte	'CAN_NOT_OK',0,0,11
	.byte	'CAN_OK',0,1,11
	.byte	'CAN_BUSY',0,2,11
	.byte	'CAN_NOT_SUPPORTED',0,3,11
	.byte	'CAN_REQUESTED',0,4,0
.L518:
	.byte	2
	.byte	'unsigned char',0,1,8,10,2,70,9,1,11
	.byte	'CAN_T_START',0,0,11
	.byte	'CAN_T_STOP',0,1,11
	.byte	'CAN_T_SLEEP',0,2,11
	.byte	'CAN_T_WAKEUP',0,3,0,12
	.byte	'Can_SetControllerMode',0,1,186,13,42
	.word	262
	.byte	1,1,1,1,13
	.byte	'Controller',0,1,186,13,71
	.word	337
	.byte	13
	.byte	'Transition',0,1,186,13,107
	.word	354
	.byte	0
.L566:
	.byte	2
	.byte	'unsigned short int',0,2,7,7
	.word	337
	.byte	14
	.byte	'Can_SduPtrType',0,2,58,45
	.word	514
.L538:
	.byte	15
	.byte	'Can_PduTypeTag',0,2,61,16,12,16
	.byte	'id',0
	.word	492
	.byte	2,2,35,0,16
	.byte	'length',0
	.word	337
	.byte	1,2,35,2,16
	.byte	'sdu',0
	.word	519
	.byte	4,2,35,4,16
	.byte	'swPduHandle',0
	.word	337
	.byte	1,2,35,8,0,3
	.word	542
.L637:
	.byte	7
	.word	625
	.byte	14
	.byte	'Can_PduInfoPtrType',0,1,208,8,61
	.word	630
	.byte	12
	.byte	'Can_Write',0,1,204,13,42
	.word	262
	.byte	1,1,1,1,13
	.byte	'Hth',0,1,204,13,70
	.word	337
	.byte	13
	.byte	'PduInfo',0,1,204,13,94
	.word	635
	.byte	0,3
	.word	542
	.byte	7
	.word	717
	.byte	7
	.word	337
	.byte	15
	.byte	'sCanIf_PCConfigType',0,3,189,12,16,1,16
	.byte	'CanIf_PCConfigNeverUsed',0
	.word	337
	.byte	1,2,35,0,0,3
	.word	732
.L516:
	.byte	7
	.word	792
.L521:
	.byte	10,4,189,2,9,1,11
	.byte	'CANIF_CS_UNINIT',0,0,11
	.byte	'CANIF_CS_STOPPED',0,1,11
	.byte	'CANIF_CS_STARTED',0,2,11
	.byte	'CANIF_CS_SLEEP',0,3,0
.L527:
	.byte	7
	.word	802
	.byte	14
	.byte	'SduDataPtrType',0,5,196,1,54
	.word	514
.L664:
	.byte	17,5,197,1,9,8,16
	.byte	'SduDataPtr',0
	.word	887
	.byte	4,2,35,0,16
	.byte	'SduLength',0
	.word	337
	.byte	1,2,35,4,0,3
	.word	911
.L533:
	.byte	7
	.word	957
	.byte	7
	.word	337
.L542:
	.byte	10,4,198,2,9,1,11
	.byte	'CANIF_SET_OFFLINE',0,0,11
	.byte	'CANIF_SET_RX_OFFLINE',0,1,11
	.byte	'CANIF_SET_RX_ONLINE',0,2,11
	.byte	'CANIF_SET_TX_OFFLINE',0,3,11
	.byte	'CANIF_SET_TX_ONLINE',0,4,11
	.byte	'CANIF_SET_ONLINE',0,5,11
	.byte	'CANIF_SET_TX_OFFLINE_ACTIVE',0,6,11
	.byte	'CANIF_NO_MODE_PDU_SET_MODE_TYPE_END',0,7,0,10,4,215,2,9,1,11
	.byte	'CANIF_GET_OFFLINE',0,0,11
	.byte	'CANIF_GET_RX_ONLINE',0,1,11
	.byte	'CANIF_GET_TX_ONLINE',0,2,11
	.byte	'CANIF_GET_ONLINE',0,3,11
	.byte	'CANIF_GET_OFFLINE_ACTIVE',0,4,11
	.byte	'CANIF_GET_OFFLINE_ACTIVE_RX_ONLINE',0,5,11
	.byte	'CANIF_NO_MODE_PDU_GET_MODE_TYPE_END',0,6,0
.L548:
	.byte	7
	.word	1176
	.byte	18,1,1,5
	.word	337
	.byte	5
	.word	802
	.byte	0,7
	.word	1373
	.byte	7
	.word	1373
.L556:
	.byte	14
	.byte	'CanIf_CtrlModeIndicationFctType',0,4,198,3,9
	.word	1392
.L562:
	.byte	2
	.byte	'unsigned long int',0,4,7,3
	.word	337
.L569:
	.byte	7
	.word	1459
.L571:
	.byte	15
	.byte	'sCanIf_RxSearchParamsType',0,4,161,3,16,6,16
	.byte	'eCanId',0
	.word	492
	.byte	2,2,35,0,16
	.byte	'eRxPduId',0
	.word	337
	.byte	1,2,35,2,16
	.byte	'eRxPduIdMatch',0
	.word	337
	.byte	1,2,35,3,16
	.byte	'eHrh',0
	.word	337
	.byte	1,2,35,4,16
	.byte	'eContinueSearch',0
	.word	337
	.byte	1,2,35,5,0,18,1,1,5
	.word	337
	.byte	0,7
	.word	1598
	.byte	7
	.word	1598
.L577:
	.byte	14
	.byte	'CanIf_BusOffNotificationFctType',0,4,202,3,9
	.word	1612
	.byte	19
	.byte	'void',0,7
	.word	1658
	.byte	3
	.word	1658
	.byte	7
	.word	1669
	.byte	20
	.byte	'VStdLib_MemCpy',0,6,245,2,26,1,1,1,1,13
	.byte	'pDst',0,6,245,2,81
	.word	1664
	.byte	13
	.byte	'pSrc',0,6,246,2,83
	.word	1674
	.byte	13
	.byte	'nCnt',0,6,247,2,57
	.word	1438
	.byte	0,12
	.byte	'Det_ReportError',0,7,154,2,32
	.word	337
	.byte	1,1,1,1,13
	.byte	'ModuleId',0,7,154,2,56
	.word	492
	.byte	13
	.byte	'InstanceId',0,7,154,2,72
	.word	337
	.byte	13
	.byte	'ApiId',0,7,154,2,90
	.word	337
	.byte	13
	.byte	'ErrorId',0,7,154,2,103
	.word	337
	.byte	0,21
	.byte	'SuspendAllInterrupts',0,8,222,10,21,1,1,1,1,21
	.byte	'ResumeAllInterrupts',0,8,241,10,21,1,1,1,1,21
	.byte	'SchM_Enter_CanIf_CANIF_EXCLUSIVE_AREA_0',0,9,65,22,1,1,1,1,21
	.byte	'SchM_Exit_CanIf_CANIF_EXCLUSIVE_AREA_0',0,9,66,22,1,1,1,1,7
	.word	1598
.L627:
	.byte	14
	.byte	'CanIf_TxConfirmationFctType',0,4,175,3,9
	.word	1612
.L629:
	.byte	10,4,142,3,9,1,11
	.byte	'CANIF_DO_TRANSMIT',0,0,11
	.byte	'CANIF_DO_NOT_TRANSMIT',0,1,0
.L631:
	.byte	3
	.word	337
.L633:
	.byte	7
	.word	542
.L643:
	.byte	7
	.word	1469
.L645:
	.byte	10,4,250,2,9,1,11
	.byte	'CANIF_NO_NOTIFICATION',0,0,11
	.byte	'CANIF_TX_RX_NOTIFICATION',0,1,0,3
	.word	911
	.byte	7
	.word	2166
	.byte	18,1,1,5
	.word	337
	.byte	5
	.word	2171
	.byte	0,7
	.word	2176
	.byte	7
	.word	2176
.L662:
	.byte	14
	.byte	'CanIf_AdvancedRxIndicationFctType',0,4,186,3,9
	.word	2195
	.byte	22
	.byte	'__INDIRECT__',0,10,1,1,1,1,1,23,1,7
	.word	2263
	.byte	14
	.byte	'__codeptr',0,10,1,1
	.word	2265
	.byte	14
	.byte	'boolean',0,11,101,31
	.word	337
	.byte	14
	.byte	'uint8',0,11,104,31
	.word	337
	.byte	2
	.byte	'short int',0,2,5,14
	.byte	'sint16',0,11,105,31
	.word	2318
	.byte	14
	.byte	'uint16',0,11,106,31
	.word	492
	.byte	2
	.byte	'long int',0,4,5,14
	.byte	'sint32',0,11,107,31
	.word	2361
	.byte	14
	.byte	'uint32',0,11,108,31
	.word	1438
	.byte	14
	.byte	'uint8_least',0,11,111,31
	.word	337
	.byte	14
	.byte	'uint32_least',0,11,115,31
	.word	1438
	.byte	2
	.byte	'unsigned long long int',0,8,7,14
	.byte	'uint64',0,11,121,30
	.word	2444
	.byte	14
	.byte	'StatusType',0,12,127,23
	.word	337
	.byte	14
	.byte	'Std_ReturnType',0,12,132,1,15
	.word	337
	.byte	17,12,134,1,9,8,16
	.byte	'vendorID',0
	.word	492
	.byte	2,2,35,0,16
	.byte	'moduleID',0
	.word	492
	.byte	2,2,35,2,16
	.byte	'sw_major_version',0
	.word	337
	.byte	1,2,35,4,16
	.byte	'sw_minor_version',0
	.word	337
	.byte	1,2,35,5,16
	.byte	'sw_patch_version',0
	.word	337
	.byte	1,2,35,6,0,14
	.byte	'Std_VersionInfoType',0,12,141,1,3
	.word	2528
	.byte	14
	.byte	'PduIdType',0,13,63,15
	.word	337
	.byte	14
	.byte	'PduLengthType',0,13,65,15
	.word	337
	.byte	14
	.byte	'PduInfoType',0,5,201,1,3
	.word	911
	.byte	10,5,219,1,9,1,11
	.byte	'TP_DATACONF',0,0,11
	.byte	'TP_DATARETRY',0,1,11
	.byte	'TP_CONFPENDING',0,2,0,14
	.byte	'TpDataStateType',0,5,226,1,3
	.word	2739
	.byte	14
	.byte	'Can_IdType',0,2,52,30
	.word	492
	.byte	14
	.byte	'Can_HwHandleType',0,2,55,29
	.word	337
	.byte	14
	.byte	'Can_PduType',0,2,67,3
	.word	542
	.byte	14
	.byte	'Can_StateTransitionType',0,2,75,3
	.word	354
	.byte	10,2,77,9,1,11
	.byte	'CAN_CS_UNINIT',0,0,11
	.byte	'CAN_CS_STARTED',0,1,11
	.byte	'CAN_CS_STOPPED',0,2,11
	.byte	'CAN_CS_SLEEP',0,3,0,14
	.byte	'Can_ControllerStateType',0,2,82,3
	.word	2913
	.byte	10,2,84,9,1,11
	.byte	'CAN_ERRORSTATE_ACTIVE',0,0,11
	.byte	'CAN_ERRORSTATE_PASSIVE',0,1,11
	.byte	'CAN_ERRORSTATE_BUSOFF',0,2,0,14
	.byte	'Can_ErrorStateType',0,2,88,3
	.word	3016
	.byte	14
	.byte	'Can_ReturnType',0,2,98,3
	.word	262
	.byte	14
	.byte	'tCanLLCanIntOld',0,14,161,3,37
	.word	1438
	.byte	14
	.byte	'Can_OsIsrType',0,14,167,3,15
	.word	337
	.byte	14
	.byte	'Can_ExternalTickType',0,14,180,3,16
	.word	1438
	.byte	24,32
	.word	1438
	.byte	25,7,0,14
	.byte	'Can_LoopTimeout_dim_type',0,14,183,3,44
	.word	3223
	.byte	14
	.byte	'Can_ControllerConfigIterType',0,14,192,13,21
	.word	337
	.byte	14
	.byte	'Can_PduOfActiveSendObjectType',0,14,148,14,19
	.word	337
	.byte	14
	.byte	'Can_StateOfActiveSendObjectType',0,14,151,14,16
	.word	492
	.byte	14
	.byte	'Can_BTPType',0,14,154,14,16
	.word	1438
	.byte	14
	.byte	'Can_RXBCOfBufferConfigType',0,14,160,14,15
	.word	337
	.byte	14
	.byte	'Can_RXF0COfBufferConfigType',0,14,163,14,16
	.word	1438
	.byte	14
	.byte	'Can_RXF1COfBufferConfigType',0,14,166,14,15
	.word	337
	.byte	14
	.byte	'Can_TXBCOfBufferConfigType',0,14,169,14,16
	.word	1438
	.byte	14
	.byte	'Can_TXEFCOfBufferConfigType',0,14,172,14,15
	.word	337
	.byte	14
	.byte	'Can_CanIfChannelIdType',0,14,190,14,15
	.word	337
	.byte	14
	.byte	'Can_CanSubSystemBaseAdrType',0,14,193,14,16
	.word	1438
	.byte	14
	.byte	'Can_BasisAdrOfControllerConfigType',0,14,196,14,16
	.word	1438
	.byte	14
	.byte	'Can_CanControllerDefaultBaudrateIdxOfControllerConfigType',0,14,199,14,15
	.word	337
	.byte	14
	.byte	'Can_CanControllerDefaultBaudrateOfControllerConfigType',0,14,202,14,16
	.word	492
	.byte	14
	.byte	'Can_IsTTCanOfControllerConfigType',0,14,205,14,17
	.word	337
	.byte	14
	.byte	'Can_MailboxRxBasicEndIdxOfControllerConfigType',0,14,208,14,15
	.word	337
	.byte	14
	.byte	'Can_MailboxRxBasicLengthOfControllerConfigType',0,14,211,14,15
	.word	337
	.byte	14
	.byte	'Can_MailboxRxBasicStartIdxOfControllerConfigType',0,14,214,14,15
	.word	337
	.byte	14
	.byte	'Can_MailboxTxBasicEndIdxOfControllerConfigType',0,14,220,14,15
	.word	337
	.byte	14
	.byte	'Can_MailboxTxBasicLengthOfControllerConfigType',0,14,223,14,15
	.word	337
	.byte	14
	.byte	'Can_MailboxTxBasicStartIdxOfControllerConfigType',0,14,226,14,15
	.word	337
	.byte	14
	.byte	'Can_RxBasicHwStartOfControllerConfigType',0,14,232,14,15
	.word	337
	.byte	14
	.byte	'Can_RxBasicHwStopOfControllerConfigType',0,14,235,14,15
	.word	337
	.byte	14
	.byte	'Can_RxFullHwStartOfControllerConfigType',0,14,238,14,15
	.word	337
	.byte	14
	.byte	'Can_RxFullHwStopOfControllerConfigType',0,14,241,14,15
	.word	337
	.byte	14
	.byte	'Can_RxSelectionOfControllerConfigType',0,14,244,14,15
	.word	337
	.byte	14
	.byte	'Can_TxBasicHwStartOfControllerConfigType',0,14,247,14,15
	.word	337
	.byte	14
	.byte	'Can_TxBasicHwStopOfControllerConfigType',0,14,250,14,15
	.word	337
	.byte	14
	.byte	'Can_TxFullHwStartOfControllerConfigType',0,14,253,14,15
	.word	337
	.byte	14
	.byte	'Can_TxFullHwStopOfControllerConfigType',0,14,128,15,15
	.word	337
	.byte	14
	.byte	'Can_UnusedHwStartOfControllerConfigType',0,14,131,15,15
	.word	337
	.byte	14
	.byte	'Can_UnusedHwStopOfControllerConfigType',0,14,134,15,15
	.word	337
	.byte	14
	.byte	'Can_BusOffNotificationOfControllerDataType',0,14,137,15,15
	.word	337
	.byte	14
	.byte	'Can_BusOffTransitionRequestOfControllerDataType',0,14,140,15,15
	.word	337
	.byte	14
	.byte	'Can_CanInterruptCounterOfControllerDataType',0,14,143,15,15
	.word	337
	.byte	14
	.byte	'Can_IntEnableOfControllerDataType',0,14,146,15,16
	.word	1438
	.byte	14
	.byte	'Can_IsBusOffOfControllerDataType',0,14,149,15,17
	.word	337
	.byte	14
	.byte	'Can_LastInitObjectOfControllerDataType',0,14,152,15,15
	.word	337
	.byte	14
	.byte	'Can_LastStateOfControllerDataType',0,14,155,15,15
	.word	337
	.byte	14
	.byte	'Can_LogStatusOfControllerDataType',0,14,158,15,15
	.word	337
	.byte	14
	.byte	'Can_ModeTransitionRequestOfControllerDataType',0,14,161,15,15
	.word	337
	.byte	14
	.byte	'Can_NonFdObjectsPendingFlagOfControllerDataType',0,14,164,15,16
	.word	1438
	.byte	14
	.byte	'Can_PrevModeOfControllerDataType',0,14,167,15,15
	.word	337
	.byte	14
	.byte	'Can_RamCheckTransitionRequestOfControllerDataType',0,14,170,15,15
	.word	337
	.byte	14
	.byte	'Can_TXBCROfControllerDataType',0,14,173,15,16
	.word	1438
	.byte	14
	.byte	'Can_TXBRPOfControllerDataType',0,14,176,15,16
	.word	1438
	.byte	14
	.byte	'Can_FBTPType',0,14,179,15,16
	.word	1438
	.byte	14
	.byte	'Can_GFCType',0,14,182,15,15
	.word	337
	.byte	14
	.byte	'Can_INT_PriorityType',0,14,185,15,15
	.word	337
	.byte	14
	.byte	'Can_INT_RoutingGroupType',0,14,188,15,15
	.word	337
	.byte	14
	.byte	'Can_InitObjectBaudrateType',0,14,191,15,16
	.word	492
	.byte	14
	.byte	'Can_InitObjectFdBrsConfigType',0,14,194,15,15
	.word	337
	.byte	14
	.byte	'Can_InitObjectStartIndexType',0,14,197,15,15
	.word	337
	.byte	14
	.byte	'Can_ActiveSendObjectOfMailboxType',0,14,200,15,15
	.word	337
	.byte	14
	.byte	'Can_ControllerConfigIdxOfMailboxType',0,14,203,15,15
	.word	337
	.byte	14
	.byte	'Can_FdPaddingOfMailboxType',0,14,206,15,15
	.word	337
	.byte	14
	.byte	'Can_HwHandleOfMailboxType',0,14,209,15,15
	.word	337
	.byte	14
	.byte	'Can_IDValueOfMailboxType',0,14,212,15,15
	.word	337
	.byte	14
	.byte	'Can_MailboxSizeOfMailboxType',0,14,215,15,15
	.word	337
	.byte	14
	.byte	'Can_MailboxTypeOfMailboxType',0,14,218,15,15
	.word	337
	.byte	14
	.byte	'Can_MaxDataLenOfMailboxType',0,14,221,15,15
	.word	337
	.byte	14
	.byte	'Can_MemorySectionsIndexOfMailboxType',0,14,224,15,15
	.word	337
	.byte	14
	.byte	'Can_MemorySectionStartOfMemorySectionInfoType',0,14,227,15,15
	.word	337
	.byte	14
	.byte	'Can_HwHandleOfMemorySectionObjectsType',0,14,230,15,15
	.word	337
	.byte	14
	.byte	'Can_MailboxElementOfMemorySectionObjectsType',0,14,233,15,15
	.word	337
	.byte	14
	.byte	'Can_MailboxHandleOfMemorySectionObjectsType',0,14,236,15,15
	.word	337
	.byte	14
	.byte	'Can_FLSSAOfSIDFCType',0,14,242,15,15
	.word	337
	.byte	14
	.byte	'Can_LSSOfSIDFCType',0,14,245,15,15
	.word	337
	.byte	14
	.byte	'Can_SIDFEEndIdxOfSIDFCType',0,14,248,15,15
	.word	337
	.byte	14
	.byte	'Can_SIDFEStartIdxOfSIDFCType',0,14,251,15,15
	.word	337
	.byte	14
	.byte	'Can_SIDFEType',0,14,129,16,16
	.word	1438
	.byte	14
	.byte	'Can_SRN_AddressType',0,14,132,16,16
	.word	1438
	.byte	14
	.byte	'Can_RXBAOfShmAdrType',0,14,135,16,16
	.word	1438
	.byte	14
	.byte	'Can_RXF0AOfShmAdrType',0,14,138,16,16
	.word	1438
	.byte	14
	.byte	'Can_RXF1AOfShmAdrType',0,14,141,16,16
	.word	1438
	.byte	14
	.byte	'Can_SIDFAOfShmAdrType',0,14,144,16,16
	.word	1438
	.byte	14
	.byte	'Can_StartAdrOfShmAdrType',0,14,147,16,16
	.word	1438
	.byte	14
	.byte	'Can_StopAdrOfShmAdrType',0,14,150,16,16
	.word	1438
	.byte	14
	.byte	'Can_TXBAOfShmAdrType',0,14,153,16,16
	.word	1438
	.byte	14
	.byte	'Can_TXEFAOfShmAdrType',0,14,156,16,16
	.word	1438
	.byte	14
	.byte	'Can_XIDFAOfShmAdrType',0,14,159,16,16
	.word	1438
	.byte	14
	.byte	'Can_F0DSOfShmElementSizeType',0,14,162,16,15
	.word	337
	.byte	14
	.byte	'Can_F1DSOfShmElementSizeType',0,14,165,16,15
	.word	337
	.byte	14
	.byte	'Can_RBDSOfShmElementSizeType',0,14,168,16,15
	.word	337
	.byte	14
	.byte	'Can_TBDSOfShmElementSizeType',0,14,171,16,15
	.word	337
	.byte	14
	.byte	'Can_TEFBDSOfShmElementSizeType',0,14,174,16,15
	.word	337
	.byte	14
	.byte	'Can_TDCRType',0,14,130,17,15
	.word	337
	.byte	14
	.byte	'Can_XIDAMType',0,14,133,17,16
	.word	1438
	.byte	14
	.byte	'Can_FLESAOfXIDFCType',0,14,136,17,15
	.word	337
	.byte	14
	.byte	'Can_LSEOfXIDFCType',0,14,139,17,15
	.word	337
	.byte	14
	.byte	'Can_EIDFE_0OfXIDFEType',0,14,142,17,15
	.word	337
	.byte	14
	.byte	'Can_EIDFE_1OfXIDFEType',0,14,145,17,15
	.word	337
	.byte	15
	.byte	'sCan_ActiveSendObjectType',0,14,161,17,16,4,16
	.byte	'StateOfActiveSendObject',0
	.word	492
	.byte	2,2,35,0,16
	.byte	'PduOfActiveSendObject',0
	.word	337
	.byte	1,2,35,2,0,14
	.byte	'Can_ActiveSendObjectType',0,14,165,17,3
	.word	7031
	.byte	15
	.byte	'sCan_BufferConfigType',0,14,168,17,16,12,16
	.byte	'RXF0COfBufferConfig',0
	.word	1438
	.byte	4,2,35,0,16
	.byte	'TXBCOfBufferConfig',0
	.word	1438
	.byte	4,2,35,4,16
	.byte	'RXBCOfBufferConfig',0
	.word	337
	.byte	1,2,35,8,16
	.byte	'RXF1COfBufferConfig',0
	.word	337
	.byte	1,2,35,9,16
	.byte	'TXEFCOfBufferConfig',0
	.word	337
	.byte	1,2,35,10,0,14
	.byte	'Can_BufferConfigType',0,14,175,17,3
	.word	7162
	.byte	15
	.byte	'sCan_ControllerConfigType',0,14,178,17,16,28,16
	.byte	'BasisAdrOfControllerConfig',0
	.word	1438
	.byte	4,2,35,0,16
	.byte	'CanControllerDefaultBaudrateOfControllerConfig',0
	.word	492
	.byte	2,2,35,4,16
	.byte	'IsTTCanOfControllerConfig',0
	.word	337
	.byte	1,2,35,6,16
	.byte	'CanControllerDefaultBaudrateIdxOfControllerConfig',0
	.word	337
	.byte	1,2,35,7,16
	.byte	'MailboxRxBasicEndIdxOfControllerConfig',0
	.word	337
	.byte	1,2,35,8,16
	.byte	'MailboxRxBasicLengthOfControllerConfig',0
	.word	337
	.byte	1,2,35,9,16
	.byte	'MailboxRxBasicStartIdxOfControllerConfig',0
	.word	337
	.byte	1,2,35,10,16
	.byte	'MailboxTxBasicEndIdxOfControllerConfig',0
	.word	337
	.byte	1,2,35,11,16
	.byte	'MailboxTxBasicLengthOfControllerConfig',0
	.word	337
	.byte	1,2,35,12,16
	.byte	'MailboxTxBasicStartIdxOfControllerConfig',0
	.word	337
	.byte	1,2,35,13,16
	.byte	'RxBasicHwStartOfControllerConfig',0
	.word	337
	.byte	1,2,35,14,16
	.byte	'RxBasicHwStopOfControllerConfig',0
	.word	337
	.byte	1,2,35,15,16
	.byte	'RxFullHwStartOfControllerConfig',0
	.word	337
	.byte	1,2,35,16,16
	.byte	'RxFullHwStopOfControllerConfig',0
	.word	337
	.byte	1,2,35,17,16
	.byte	'RxSelectionOfControllerConfig',0
	.word	337
	.byte	1,2,35,18,16
	.byte	'TxBasicHwStartOfControllerConfig',0
	.word	337
	.byte	1,2,35,19,16
	.byte	'TxBasicHwStopOfControllerConfig',0
	.word	337
	.byte	1,2,35,20,16
	.byte	'TxFullHwStartOfControllerConfig',0
	.word	337
	.byte	1,2,35,21,16
	.byte	'TxFullHwStopOfControllerConfig',0
	.word	337
	.byte	1,2,35,22,16
	.byte	'UnusedHwStartOfControllerConfig',0
	.word	337
	.byte	1,2,35,23,16
	.byte	'UnusedHwStopOfControllerConfig',0
	.word	337
	.byte	1,2,35,24,0,14
	.byte	'Can_ControllerConfigType',0,14,201,17,3
	.word	7364
	.byte	15
	.byte	'sCan_ControllerDataType',0,14,204,17,16,64,16
	.byte	'IntEnableOfControllerData',0
	.word	1438
	.byte	4,2,35,0,16
	.byte	'NonFdObjectsPendingFlagOfControllerData',0
	.word	1438
	.byte	4,2,35,4,16
	.byte	'TXBCROfControllerData',0
	.word	1438
	.byte	4,2,35,8,16
	.byte	'TXBRPOfControllerData',0
	.word	1438
	.byte	4,2,35,12,16
	.byte	'BusOffNotificationOfControllerData',0
	.word	337
	.byte	1,2,35,16,16
	.byte	'BusOffTransitionRequestOfControllerData',0
	.word	337
	.byte	1,2,35,17,16
	.byte	'CanInterruptCounterOfControllerData',0
	.word	337
	.byte	1,2,35,18,16
	.byte	'IsBusOffOfControllerData',0
	.word	337
	.byte	1,2,35,19,16
	.byte	'LastInitObjectOfControllerData',0
	.word	337
	.byte	1,2,35,20,16
	.byte	'LastStateOfControllerData',0
	.word	337
	.byte	1,2,35,21,16
	.byte	'LogStatusOfControllerData',0
	.word	337
	.byte	1,2,35,22,16
	.byte	'ModeTransitionRequestOfControllerData',0
	.word	337
	.byte	1,2,35,23,16
	.byte	'PrevModeOfControllerData',0
	.word	337
	.byte	1,2,35,24,16
	.byte	'RamCheckTransitionRequestOfControllerData',0
	.word	337
	.byte	1,2,35,25,16
	.byte	'CanInterruptOldStatusOfControllerData',0
	.word	1438
	.byte	4,2,35,26,16
	.byte	'LoopTimeoutOfControllerData',0
	.word	3232
	.byte	32,2,35,30,0,14
	.byte	'Can_ControllerDataType',0,14,222,17,3
	.word	8357
	.byte	24,32
	.word	1438
	.byte	25,7,0,15
	.byte	'sCan_MailboxType',0,14,225,17,16,12,16
	.byte	'ActiveSendObjectOfMailbox',0
	.word	337
	.byte	1,2,35,0,16
	.byte	'ControllerConfigIdxOfMailbox',0
	.word	337
	.byte	1,2,35,1,16
	.byte	'FdPaddingOfMailbox',0
	.word	337
	.byte	1,2,35,2,16
	.byte	'HwHandleOfMailbox',0
	.word	337
	.byte	1,2,35,3,16
	.byte	'IDValueOfMailbox',0
	.word	337
	.byte	1,2,35,4,16
	.byte	'MailboxSizeOfMailbox',0
	.word	337
	.byte	1,2,35,5,16
	.byte	'MailboxTypeOfMailbox',0
	.word	337
	.byte	1,2,35,6,16
	.byte	'MaxDataLenOfMailbox',0
	.word	337
	.byte	1,2,35,7,16
	.byte	'MemorySectionsIndexOfMailbox',0
	.word	337
	.byte	1,2,35,8,0,14
	.byte	'Can_MailboxType',0,14,236,17,3
	.word	9073
	.byte	15
	.byte	'sCan_MemorySectionInfoType',0,14,239,17,16,1,16
	.byte	'MemorySectionStartOfMemorySectionInfo',0
	.word	337
	.byte	1,2,35,0,0,14
	.byte	'Can_MemorySectionInfoType',0,14,242,17,3
	.word	9403
	.byte	15
	.byte	'sCan_MemorySectionObjectsType',0,14,245,17,16,4,16
	.byte	'HwHandleOfMemorySectionObjects',0
	.word	337
	.byte	1,2,35,0,16
	.byte	'MailboxElementOfMemorySectionObjects',0
	.word	337
	.byte	1,2,35,1,16
	.byte	'MailboxHandleOfMemorySectionObjects',0
	.word	337
	.byte	1,2,35,2,0,14
	.byte	'Can_MemorySectionObjectsType',0,14,250,17,3
	.word	9519
	.byte	15
	.byte	'sCan_SIDFCType',0,14,253,17,16,4,16
	.byte	'FLSSAOfSIDFC',0
	.word	337
	.byte	1,2,35,0,16
	.byte	'LSSOfSIDFC',0
	.word	337
	.byte	1,2,35,1,16
	.byte	'SIDFEEndIdxOfSIDFC',0
	.word	337
	.byte	1,2,35,2,16
	.byte	'SIDFEStartIdxOfSIDFC',0
	.word	337
	.byte	1,2,35,3,0,14
	.byte	'Can_SIDFCType',0,14,131,18,3
	.word	9725
	.byte	15
	.byte	'sCan_ShmAdrType',0,14,134,18,16,36,16
	.byte	'RXBAOfShmAdr',0
	.word	1438
	.byte	4,2,35,0,16
	.byte	'RXF0AOfShmAdr',0
	.word	1438
	.byte	4,2,35,4,16
	.byte	'RXF1AOfShmAdr',0
	.word	1438
	.byte	4,2,35,8,16
	.byte	'SIDFAOfShmAdr',0
	.word	1438
	.byte	4,2,35,12,16
	.byte	'StartAdrOfShmAdr',0
	.word	1438
	.byte	4,2,35,16,16
	.byte	'StopAdrOfShmAdr',0
	.word	1438
	.byte	4,2,35,20,16
	.byte	'TXBAOfShmAdr',0
	.word	1438
	.byte	4,2,35,24,16
	.byte	'TXEFAOfShmAdr',0
	.word	1438
	.byte	4,2,35,28,16
	.byte	'XIDFAOfShmAdr',0
	.word	1438
	.byte	4,2,35,32,0,14
	.byte	'Can_ShmAdrType',0,14,145,18,3
	.word	9870
	.byte	15
	.byte	'sCan_ShmElementSizeType',0,14,148,18,16,6,16
	.byte	'F0DSOfShmElementSize',0
	.word	337
	.byte	1,2,35,0,16
	.byte	'F1DSOfShmElementSize',0
	.word	337
	.byte	1,2,35,1,16
	.byte	'RBDSOfShmElementSize',0
	.word	337
	.byte	1,2,35,2,16
	.byte	'TBDSOfShmElementSize',0
	.word	337
	.byte	1,2,35,3,16
	.byte	'TEFBDSOfShmElementSize',0
	.word	337
	.byte	1,2,35,4,0,14
	.byte	'Can_ShmElementSizeType',0,14,155,18,3
	.word	10127
	.byte	15
	.byte	'sCan_XIDFCType',0,14,158,18,16,2,16
	.byte	'FLESAOfXIDFC',0
	.word	337
	.byte	1,2,35,0,16
	.byte	'LSEOfXIDFC',0
	.word	337
	.byte	1,2,35,1,0,14
	.byte	'Can_XIDFCType',0,14,162,18,3
	.word	10342
	.byte	15
	.byte	'sCan_XIDFEType',0,14,165,18,16,2,16
	.byte	'EIDFE_0OfXIDFE',0
	.word	337
	.byte	1,2,35,0,16
	.byte	'EIDFE_1OfXIDFE',0
	.word	337
	.byte	1,2,35,1,0,14
	.byte	'Can_XIDFEType',0,14,169,18,3
	.word	10429
	.byte	15
	.byte	'sCan_PCConfigType',0,14,143,19,16,1,16
	.byte	'Can_PCConfigNeverUsed',0
	.word	337
	.byte	1,2,35,0,0,14
	.byte	'Can_PCConfigType',0,14,146,19,3
	.word	10522
	.byte	14
	.byte	'Can_ConfigType',0,14,148,19,26
	.word	10522
	.byte	6
	.word	1438
	.byte	6
	.word	1438
	.byte	24,64
	.word	1438
	.byte	25,15,0,6
	.word	10638
	.byte	15
	.byte	'tElmTypeTag',0,1,145,9,25,72,16
	.byte	'E0',0
	.word	10628
	.byte	4,2,35,0,16
	.byte	'E1',0
	.word	10633
	.byte	4,2,35,4,16
	.byte	'data',0
	.word	10647
	.byte	64,2,35,8,0,6
	.word	10652
	.byte	14
	.byte	'tElmType',0,1,162,9,3
	.word	10709
	.byte	6
	.word	1438
	.byte	6
	.word	337
	.byte	6
	.word	337
	.byte	6
	.word	337
	.byte	17,1,224,9,5,4,26
	.byte	'ID',0,4
	.word	10732
	.byte	29,3,2,35,0,26
	.byte	'RTR',0,1
	.word	10737
	.byte	1,2,2,35,3,26
	.byte	'XTD',0,1
	.word	10742
	.byte	1,1,2,35,3,26
	.byte	'ESI',0,1
	.word	10747
	.byte	1,0,2,35,3,0,6
	.word	1438
	.byte	27,1,222,9,3,4,16
	.byte	'b0',0
	.word	10752
	.byte	4,2,35,0,16
	.byte	'B0',0
	.word	10818
	.byte	4,2,35,0,0,6
	.word	492
	.byte	6
	.word	337
	.byte	6
	.word	337
	.byte	6
	.word	337
	.byte	6
	.word	337
	.byte	6
	.word	337
	.byte	6
	.word	337
	.byte	17,1,235,9,5,4,26
	.byte	'RXTS',0,2
	.word	10854
	.byte	16,0,2,35,0,26
	.byte	'DLC',0,1
	.word	10859
	.byte	4,4,2,35,2,26
	.byte	'BRS',0,1
	.word	10864
	.byte	1,3,2,35,2,26
	.byte	'FDF',0,1
	.word	10869
	.byte	1,2,2,35,2,26
	.byte	'r0',0,1
	.word	10874
	.byte	2,0,2,35,2,26
	.byte	'FIDX',0,1
	.word	10879
	.byte	7,1,2,35,3,26
	.byte	'ANMF',0,1
	.word	10884
	.byte	1,0,2,35,3,0,6
	.word	492
	.byte	6
	.word	337
	.byte	6
	.word	337
	.byte	6
	.word	337
	.byte	6
	.word	337
	.byte	6
	.word	337
	.byte	6
	.word	337
	.byte	17,1,245,9,5,4,26
	.byte	'r1',0,2
	.word	11003
	.byte	16,0,2,35,0,26
	.byte	'DLC',0,1
	.word	11008
	.byte	4,4,2,35,2,26
	.byte	'BRS',0,1
	.word	11013
	.byte	1,3,2,35,2,26
	.byte	'FDF',0,1
	.word	11018
	.byte	1,2,2,35,2,26
	.byte	'r0',0,1
	.word	11023
	.byte	1,1,2,35,2,26
	.byte	'EFC',0,1
	.word	11028
	.byte	1,0,2,35,2,26
	.byte	'MM',0,1
	.word	11033
	.byte	8,0,2,35,3,0,27,1,233,9,3,4,16
	.byte	'rb1',0
	.word	10889
	.byte	4,2,35,0,16
	.byte	'tb1',0
	.word	11038
	.byte	4,2,35,0,16
	.byte	'B1',0
	.word	1438
	.byte	4,2,35,0,0,6
	.word	10638
	.byte	15
	.byte	'tCanChipMsgPtrTag',0,1,220,9,25,72,16
	.byte	'uB0',0
	.word	10823
	.byte	4,2,35,0,16
	.byte	'uB1',0
	.word	11147
	.byte	4,2,35,4,16
	.byte	'data',0
	.word	11192
	.byte	64,2,35,8,0,6
	.word	11197
	.byte	14
	.byte	'tCanChipMsgPtr',0,1,134,10,3
	.word	11262
	.byte	17,1,141,10,3,4,26
	.byte	'FnFL',0,1
	.word	337
	.byte	7,1,2,35,0,26
	.byte	'r2',0,1
	.word	337
	.byte	1,0,2,35,0,26
	.byte	'FnGI',0,1
	.word	337
	.byte	6,2,2,35,1,26
	.byte	'r1',0,4
	.word	1438
	.byte	10,8,2,35,0,26
	.byte	'FnF',0,1
	.word	337
	.byte	1,7,2,35,3,26
	.byte	'RFnL',0,1
	.word	337
	.byte	1,6,2,35,3,26
	.byte	'r0',0,1
	.word	337
	.byte	6,0,2,35,3,0,28
	.byte	'tRXFnSTag',0,1,138,10,15,4,16
	.byte	'R',0
	.word	1438
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	11291
	.byte	4,2,35,0,0,14
	.byte	'tRXFnS',0,1,151,10,3
	.word	11403
	.byte	17,1,156,10,3,4,29,1
	.word	337
	.byte	2,6,2,35,0,26
	.byte	'FOSA',0,2
	.word	492
	.byte	14,0,2,35,0,26
	.byte	'F0S',0,1
	.word	337
	.byte	7,1,2,35,2,29,1
	.word	337
	.byte	1,0,2,35,2,26
	.byte	'F0WM',0,1
	.word	337
	.byte	7,1,2,35,3,29,1
	.word	337
	.byte	1,0,2,35,3,0,28
	.byte	'tRXFnCTag',0,1,153,10,15,4,16
	.byte	'R',0
	.word	1438
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	11458
	.byte	4,2,35,0,0,14
	.byte	'tRXFnC',0,1,165,10,3
	.word	11545
	.byte	17,1,171,10,3,4,26
	.byte	'F0DS',0,1
	.word	337
	.byte	3,5,2,35,0,29,1
	.word	337
	.byte	1,4,2,35,0,26
	.byte	'F1DS',0,1
	.word	337
	.byte	3,1,2,35,0,29,1
	.word	337
	.byte	1,0,2,35,0,26
	.byte	'RBDS',0,1
	.word	337
	.byte	3,5,2,35,1,29,4
	.word	1438
	.byte	21,0,2,35,0,0,28
	.byte	'tRXESCTag',0,1,168,10,15,4,16
	.byte	'R',0
	.word	1438
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	11600
	.byte	4,2,35,0,0,14
	.byte	'tRXESC',0,1,180,10,3
	.word	11688
	.byte	17,1,185,10,3,4,26
	.byte	'TFFL',0,1
	.word	337
	.byte	6,2,2,35,0,29,1
	.word	337
	.byte	2,0,2,35,0,26
	.byte	'TFGI',0,1
	.word	337
	.byte	5,3,2,35,1,29,1
	.word	337
	.byte	3,0,2,35,1,26
	.byte	'TFQPI',0,1
	.word	337
	.byte	5,3,2,35,2,26
	.byte	'TFQF',0,1
	.word	337
	.byte	1,2,2,35,2,29,2
	.word	492
	.byte	10,0,2,35,2,0,28
	.byte	'tTXFQSTag',0,1,182,10,15,4,16
	.byte	'R',0
	.word	1438
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	11743
	.byte	4,2,35,0,0,14
	.byte	'tTXFQS',0,1,195,10,3
	.word	11848
	.byte	17,1,200,10,3,4,26
	.byte	'EFFL',0,1
	.word	337
	.byte	6,2,2,35,0,26
	.byte	'r1',0,1
	.word	337
	.byte	2,0,2,35,0,26
	.byte	'EFGI',0,1
	.word	337
	.byte	5,3,2,35,1,29,4
	.word	1438
	.byte	11,8,2,35,0,26
	.byte	'EFF',0,1
	.word	337
	.byte	1,7,2,35,3,26
	.byte	'TEFL',0,1
	.word	337
	.byte	1,6,2,35,3,26
	.byte	'r0',0,1
	.word	337
	.byte	6,0,2,35,3,0,28
	.byte	'tTXEFSTag',0,1,197,10,15,4,16
	.byte	'R',0
	.word	1438
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	11903
	.byte	4,2,35,0,0,14
	.byte	'tTXEFS',0,1,210,10,3
	.word	12012
	.byte	14
	.byte	'CanIf_TxBufferSizeType',0,3,184,1,15
	.word	337
	.byte	14
	.byte	'CanIf_ControllerModeType',0,4,195,2,3
	.word	802
	.byte	14
	.byte	'CanIf_PduSetModeType',0,4,212,2,3
	.word	972
	.byte	14
	.byte	'CanIf_PduGetModeType',0,4,228,2,3
	.word	1176
	.byte	10,4,231,2,9,1,11
	.byte	'CANIF_RxBasicCANMailbox',0,0,11
	.byte	'CANIF_RxFullCANMailbox',0,1,11
	.byte	'CANIF_TxBasicCANMailbox',0,2,11
	.byte	'CANIF_TxFullCANMailbox',0,3,11
	.byte	'CANIF_UnusedCANMailbox',0,4,0,14
	.byte	'CanIf_MailBoxTypeType',0,4,238,2,3
	.word	12193
	.byte	10,4,241,2,9,1,11
	.byte	'CanIf_SimpleRxIndicationLayout',0,0,11
	.byte	'CanIf_AdvancedRxIndicationLayout',0,1,11
	.byte	'CanIf_NmOsekRxIndicationLayout',0,2,11
	.byte	'CanIf_CddRxIndicationLayout',0,3,0,14
	.byte	'CanIf_RxIndicationLayoutType',0,4,247,2,3
	.word	12358
	.byte	14
	.byte	'CanIf_NotifStatusType',0,4,254,2,3
	.word	2108
	.byte	14
	.byte	'CanIf_TransmitStateType',0,4,146,3,3
	.word	2042
	.byte	14
	.byte	'CanIf_RxSearchParamsType',0,4,171,3,3
	.word	1469
	.byte	3
	.word	337
	.byte	7
	.word	12632
	.byte	18,1,1,5
	.word	337
	.byte	5
	.word	12637
	.byte	0,7
	.word	12642
	.byte	14
	.byte	'CanIf_SimpleRxIndicationFctType',0,4,181,3,9
	.word	12656
	.byte	18,1,1,5
	.word	337
	.byte	5
	.word	12637
	.byte	5
	.word	492
	.byte	0,7
	.word	12702
	.byte	14
	.byte	'CanIf_NmOsekRxIndicationFctType',0,4,190,3,9
	.word	12721
	.byte	18,1,1,5
	.word	337
	.byte	5
	.word	2171
	.byte	5
	.word	492
	.byte	0,7
	.word	12767
	.byte	14
	.byte	'CanIf_CddRxIndicationFctType',0,4,194,3,9
	.word	12786
	.byte	27,4,203,4,9,4,16
	.byte	'eSimpleRxIndicationType',0
	.word	12661
	.byte	4,2,35,0,16
	.byte	'eAdvancedRxIndicationType',0
	.word	2200
	.byte	4,2,35,0,16
	.byte	'eNmOsekRxIndicationType',0
	.word	12726
	.byte	4,2,35,0,16
	.byte	'eCddRxIndicationType',0
	.word	12791
	.byte	4,2,35,0,0,14
	.byte	'CanIf_RxIndicationFctType',0,4,209,4,3
	.word	12829
	.byte	7
	.word	12642
	.byte	7
	.word	12702
	.byte	7
	.word	12767
	.byte	15
	.byte	'sCanIf_TxQueueBaseType',0,4,222,4,16,1,16
	.byte	'eSduLength',0
	.word	337
	.byte	1,2,35,0,0,14
	.byte	'CanIf_TxQueueBaseType',0,4,228,4,3
	.word	13017
	.byte	15
	.byte	'sCanIf_TxQueueBaseWithDataType',0,4,231,4,16,1,16
	.byte	'eBaseParams',0
	.word	13017
	.byte	1,2,35,0,0,14
	.byte	'CanIf_TxQueueBaseWithDataType',0,4,237,4,3
	.word	13098
	.byte	15
	.byte	'sCanIf_TxPrioByCanIdByteQueueType',0,4,242,4,16,2,16
	.byte	'eQueueParams',0
	.word	13098
	.byte	1,2,35,0,16
	.byte	'eQueued',0
	.word	337
	.byte	1,2,35,1,0,14
	.byte	'CanIf_TxPrioByCanIdByteQueueType',0,4,246,4,3
	.word	13196
	.byte	15
	.byte	'sCanIf_TxBufferPrioByCanIdBaseType',0,4,128,5,16,1,16
	.byte	'eQueueCounter',0
	.word	337
	.byte	1,2,35,0,0,14
	.byte	'CanIf_TxBufferPrioByCanIdBaseType',0,4,131,5,3
	.word	13318
	.byte	14
	.byte	'CanIf_MappedTxBuffersConfigEndIdxOfCanIfCtrlId2MappedTxBuffersConfigType',0,3,138,9,15
	.word	337
	.byte	14
	.byte	'CanIf_MappedTxBuffersConfigStartIdxOfCanIfCtrlId2MappedTxBuffersConfigType',0,3,141,9,15
	.word	337
	.byte	14
	.byte	'CanIf_CtrlStatesIdxOfMailBoxConfigType',0,3,150,9,15
	.word	337
	.byte	14
	.byte	'CanIf_PduIdFirstOfMailBoxConfigType',0,3,153,9,15
	.word	337
	.byte	14
	.byte	'CanIf_PduIdLastOfMailBoxConfigType',0,3,156,9,15
	.word	337
	.byte	14
	.byte	'CanIf_TxBufferCfgIdxOfMailBoxConfigType',0,3,159,9,15
	.word	337
	.byte	14
	.byte	'CanIf_TxBufferHandlingTypeOfMailBoxConfigType',0,3,165,9,15
	.word	337
	.byte	14
	.byte	'CanIf_MailBoxConfigIdxOfMappedTxBuffersConfigType',0,3,168,9,15
	.word	337
	.byte	14
	.byte	'CanIf_RxIndicationFctListIdxOfRxPduConfigType',0,3,171,9,15
	.word	337
	.byte	14
	.byte	'CanIf_RxPduCanIdOfRxPduConfigType',0,3,174,9,15
	.word	337
	.byte	14
	.byte	'CanIf_RxPduDlcOfRxPduConfigType',0,3,177,9,15
	.word	337
	.byte	14
	.byte	'CanIf_RxPduMaskOfRxPduConfigType',0,3,180,9,16
	.word	492
	.byte	14
	.byte	'CanIf_UpperPduIdOfRxPduConfigType',0,3,183,9,19
	.word	337
	.byte	14
	.byte	'CanIf_TxBufferPrioByCanIdBaseIdxOfTxBufferPrioByCanIdByteQueueConfigType',0,3,231,9,15
	.word	337
	.byte	14
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusEndIdxOfTxBufferPrioByCanIdByteQueueConfigType',0,3,234
	.byte	9,15
	.word	337
	.byte	14
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusLengthOfTxBufferPrioByCanIdByteQueueConfigType',0,3,237
	.byte	9,15
	.word	337
	.byte	14
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusStartIdxOfTxBufferPrioByCanIdByteQueueConfigType',0,3,240
	.byte	9,15
	.word	337
	.byte	14
	.byte	'CanIf_TxPduConfigIdxOfTxBufferPrioByCanIdByteQueueMappedTxPdusType',0,3,243,9,15
	.word	337
	.byte	14
	.byte	'CanIf_CanIdOfTxPduConfigType',0,3,246,9,16
	.word	492
	.byte	14
	.byte	'CanIf_CtrlStatesIdxOfTxPduConfigType',0,3,249,9,15
	.word	337
	.byte	14
	.byte	'CanIf_IsTxPduTruncationOfTxPduConfigType',0,3,252,9,17
	.word	337
	.byte	14
	.byte	'CanIf_MailBoxConfigIdxOfTxPduConfigType',0,3,255,9,15
	.word	337
	.byte	14
	.byte	'CanIf_TxConfirmationFctListIdxOfTxPduConfigType',0,3,130,10,15
	.word	337
	.byte	14
	.byte	'CanIf_TxPduLengthOfTxPduConfigType',0,3,133,10,15
	.word	337
	.byte	14
	.byte	'CanIf_UpperLayerTxPduIdOfTxPduConfigType',0,3,136,10,19
	.word	337
	.byte	14
	.byte	'CanIf_TxQueueIdxOfTxPduQueueIndexType',0,3,139,10,15
	.word	337
	.byte	14
	.byte	'CanIf_TxQueueIndex2DataStartStopIdxOfTxPduQueueIndexType',0,3,142,10,15
	.word	337
	.byte	14
	.byte	'CanIf_TxQueueDataType',0,3,151,10,15
	.word	337
	.byte	14
	.byte	'CanIf_TxQueueDataEndIdxOfTxQueueIndex2DataStartStopType',0,3,154,10,15
	.word	337
	.byte	14
	.byte	'CanIf_TxQueueDataLengthOfTxQueueIndex2DataStartStopType',0,3,157,10,15
	.word	337
	.byte	14
	.byte	'CanIf_TxQueueDataStartIdxOfTxQueueIndex2DataStartStopType',0,3,160,10,15
	.word	337
	.byte	15
	.byte	'sCanIf_CanIfCtrlId2MappedTxBuffersConfigType',0,3,183,10,16,2,16
	.byte	'MappedTxBuffersConfigEndIdxOfCanIfCtrlId2MappedTxBuffersConfig',0
	.word	337
	.byte	1,2,35,0,16
	.byte	'MappedTxBuffersConfigStartIdxOfCanIfCtrlId2MappedTxBuffersConfig',0
	.word	337
	.byte	1,2,35,1,0,14
	.byte	'CanIf_CanIfCtrlId2MappedTxBuffersConfigType',0,3,187,10,3
	.word	15257
	.byte	15
	.byte	'sCanIf_CtrlStatesType',0,3,190,10,16,2,16
	.byte	'CtrlModeOfCtrlStates',0
	.word	802
	.byte	1,2,35,0,16
	.byte	'PduModeOfCtrlStates',0
	.word	1176
	.byte	1,2,35,1,0,14
	.byte	'CanIf_CtrlStatesType',0,3,194,10,3
	.word	15508
	.byte	15
	.byte	'sCanIf_MailBoxConfigType',0,3,200,10,16,6,16
	.byte	'CtrlStatesIdxOfMailBoxConfig',0
	.word	337
	.byte	1,2,35,0,16
	.byte	'PduIdFirstOfMailBoxConfig',0
	.word	337
	.byte	1,2,35,1,16
	.byte	'PduIdLastOfMailBoxConfig',0
	.word	337
	.byte	1,2,35,2,16
	.byte	'TxBufferCfgIdxOfMailBoxConfig',0
	.word	337
	.byte	1,2,35,3,16
	.byte	'TxBufferHandlingTypeOfMailBoxConfig',0
	.word	337
	.byte	1,2,35,4,16
	.byte	'MailBoxTypeOfMailBoxConfig',0
	.word	12193
	.byte	1,2,35,5,0,14
	.byte	'CanIf_MailBoxConfigType',0,3,208,10,3
	.word	15626
	.byte	15
	.byte	'sCanIf_MappedTxBuffersConfigType',0,3,214,10,16,1,16
	.byte	'MailBoxConfigIdxOfMappedTxBuffersConfig',0
	.word	337
	.byte	1,2,35,0,0,14
	.byte	'CanIf_MappedTxBuffersConfigType',0,3,217,10,3
	.word	15918
	.byte	15
	.byte	'sCanIf_RxIndicationFctListType',0,3,220,10,16,8,16
	.byte	'RxIndicationFctOfRxIndicationFctList',0
	.word	12829
	.byte	4,2,35,0,16
	.byte	'RxIndicationLayoutOfRxIndicationFctList',0
	.word	12358
	.byte	1,2,35,4,0,14
	.byte	'CanIf_RxIndicationFctListType',0,3,224,10,3
	.word	16048
	.byte	15
	.byte	'sCanIf_RxPduConfigType',0,3,230,10,16,6,16
	.byte	'RxPduMaskOfRxPduConfig',0
	.word	492
	.byte	2,2,35,0,16
	.byte	'UpperPduIdOfRxPduConfig',0
	.word	337
	.byte	1,2,35,2,16
	.byte	'RxIndicationFctListIdxOfRxPduConfig',0
	.word	337
	.byte	1,2,35,3,16
	.byte	'RxPduCanIdOfRxPduConfig',0
	.word	337
	.byte	1,2,35,4,16
	.byte	'RxPduDlcOfRxPduConfig',0
	.word	337
	.byte	1,2,35,5,0,14
	.byte	'CanIf_RxPduConfigType',0,3,237,10,3
	.word	16220
	.byte	15
	.byte	'sCanIf_TxBufferPrioByCanIdByteQueueConfigType',0,3,245,10,16,4,16
	.byte	'TxBufferPrioByCanIdBaseIdxOfTxBufferPrioByCanIdByteQueueConfig',0
	.word	337
	.byte	1,2,35,0,16
	.byte	'TxBufferPrioByCanIdByteQueueMappedTxPdusEndIdxOfTxBufferPrioByCanIdByteQueueConfig',0
	.word	337
	.byte	1,2,35,1,16
	.byte	'TxBufferPrioByCanIdByteQueueMappedTxPdusLengthOfTxBufferPrioByCanIdByteQueueConfig',0
	.word	337
	.byte	1,2,35,2,16
	.byte	'TxBufferPrioByCanIdByteQueueMappedTxPdusStartIdxOfTxBufferPrioByCanIdByteQueueConfig',0
	.word	337
	.byte	1,2,35,3,0,14
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueConfigType',0,3,251,10,3
	.word	16455
	.byte	15
	.byte	'sCanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusType',0,3,129,11,16,1,16
	.byte	'TxPduConfigIdxOfTxBufferPrioByCanIdByteQueueMappedTxPdus',0
	.word	337
	.byte	1,2,35,0,0,14
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdusType',0,3,132,11,3
	.word	16912
	.byte	15
	.byte	'sCanIf_TxPduConfigType',0,3,140,11,16,8,16
	.byte	'CanIdOfTxPduConfig',0
	.word	492
	.byte	2,2,35,0,16
	.byte	'UpperLayerTxPduIdOfTxPduConfig',0
	.word	337
	.byte	1,2,35,2,16
	.byte	'IsTxPduTruncationOfTxPduConfig',0
	.word	337
	.byte	1,2,35,3,16
	.byte	'CtrlStatesIdxOfTxPduConfig',0
	.word	337
	.byte	1,2,35,4,16
	.byte	'MailBoxConfigIdxOfTxPduConfig',0
	.word	337
	.byte	1,2,35,5,16
	.byte	'TxConfirmationFctListIdxOfTxPduConfig',0
	.word	337
	.byte	1,2,35,6,16
	.byte	'TxPduLengthOfTxPduConfig',0
	.word	337
	.byte	1,2,35,7,0,14
	.byte	'CanIf_TxPduConfigType',0,3,149,11,3
	.word	17097
	.byte	15
	.byte	'sCanIf_TxPduQueueIndexType',0,3,155,11,16,2,16
	.byte	'TxQueueIdxOfTxPduQueueIndex',0
	.word	337
	.byte	1,2,35,0,16
	.byte	'TxQueueIndex2DataStartStopIdxOfTxPduQueueIndex',0
	.word	337
	.byte	1,2,35,1,0,14
	.byte	'CanIf_TxPduQueueIndexType',0,3,159,11,3
	.word	17422
	.byte	15
	.byte	'sCanIf_TxQueueIndex2DataStartStopType',0,3,166,11,16,4,16
	.byte	'TxQueueDataEndIdxOfTxQueueIndex2DataStartStop',0
	.word	337
	.byte	1,2,35,0,16
	.byte	'TxQueueDataLengthOfTxQueueIndex2DataStartStop',0
	.word	337
	.byte	1,2,35,1,16
	.byte	'TxQueueDataStartIdxOfTxQueueIndex2DataStartStop',0
	.word	337
	.byte	1,2,35,2,0,14
	.byte	'CanIf_TxQueueIndex2DataStartStopType',0,3,171,11,3
	.word	17584
	.byte	15
	.byte	'CanIf_CtrlStatesStructSTag',0,3,183,11,16,2,16
	.byte	'CT_testCANFDdbc_2c920817',0
	.word	15508
	.byte	2,2,35,0,0,14
	.byte	'CanIf_CtrlStatesStructSType',0,3,186,11,3
	.word	17842
	.byte	15
	.byte	'CanIf_TxBufferPrioByCanIdBaseStructSTag',0,3,189,11,16,1,16
	.byte	'CHNL_7a25eeb6',0
	.word	13318
	.byte	1,2,35,0,0,14
	.byte	'CanIf_TxBufferPrioByCanIdBaseStructSType',0,3,192,11,3
	.word	17947
	.byte	15
	.byte	'CanIf_TxQueueStructSTag',0,3,195,11,16,6,16
	.byte	'TxMessage3_otestCANFDdbc_547b0ac5_Tx',0
	.word	13196
	.byte	2,2,35,0,16
	.byte	'TxMessage22_otestCANFDdbc_f66bbf36_Tx',0
	.word	13196
	.byte	2,2,35,2,16
	.byte	'TxMessage1_otestCANFDdbc_815f4c47_Tx',0
	.word	13196
	.byte	2,2,35,4,0,14
	.byte	'CanIf_TxQueueStructSType',0,3,200,11,3
	.word	18067
	.byte	24,32
	.word	337
	.byte	25,31,0,24,8
	.word	337
	.byte	25,7,0,24,64
	.word	337
	.byte	25,63,0,15
	.byte	'CanIf_TxQueueDataStructSTag',0,3,203,11,16,104,16
	.byte	'TxMessage3_otestCANFDdbc_547b0ac5_Tx',0
	.word	18271
	.byte	32,2,35,0,16
	.byte	'TxMessage22_otestCANFDdbc_f66bbf36_Tx',0
	.word	18280
	.byte	8,2,35,32,16
	.byte	'TxMessage1_otestCANFDdbc_815f4c47_Tx',0
	.word	18289
	.byte	64,2,35,40,0,14
	.byte	'CanIf_TxQueueDataStructSType',0,3,208,11,3
	.word	18298
	.byte	24,2
	.word	15508
	.byte	25,0,0,28
	.byte	'CanIf_CtrlStatesUTag',0,3,220,11,15,2,16
	.byte	'raw',0
	.word	18510
	.byte	2,2,35,0,16
	.byte	'str',0
	.word	17842
	.byte	2,2,35,0,0,14
	.byte	'CanIf_CtrlStatesUType',0,3,224,11,3
	.word	18519
	.byte	24,1
	.word	13318
	.byte	25,0,0,28
	.byte	'CanIf_TxBufferPrioByCanIdBaseUTag',0,3,227,11,15,1,16
	.byte	'raw',0
	.word	18604
	.byte	1,2,35,0,16
	.byte	'str',0
	.word	17947
	.byte	1,2,35,0,0,14
	.byte	'CanIf_TxBufferPrioByCanIdBaseUType',0,3,231,11,3
	.word	18613
	.byte	24,6
	.word	13196
	.byte	25,2,0,28
	.byte	'CanIf_TxQueueUTag',0,3,234,11,15,6,16
	.byte	'raw',0
	.word	18724
	.byte	6,2,35,0,16
	.byte	'str',0
	.word	18067
	.byte	6,2,35,0,0,14
	.byte	'CanIf_TxQueueUType',0,3,238,11,3
	.word	18733
	.byte	24,104
	.word	337
	.byte	25,103,0,28
	.byte	'CanIf_TxQueueDataUTag',0,3,241,11,15,104,16
	.byte	'raw',0
	.word	18812
	.byte	104,2,35,0,16
	.byte	'str',0
	.word	18298
	.byte	104,2,35,0,0,14
	.byte	'CanIf_TxQueueDataUType',0,3,245,11,3
	.word	18821
	.byte	14
	.byte	'CanIf_PCConfigType',0,3,192,12,3
	.word	732
	.byte	14
	.byte	'CanIf_ConfigType',0,3,194,12,28
	.word	732
	.byte	3
	.word	1617
	.byte	30
	.byte	'CanIf_BusOffNotificationFctPtr',0,3,234,12,60
	.word	18962
	.byte	1,1,24,2
	.word	15257
	.byte	25,0,0,3
	.word	19009
	.byte	30
	.byte	'CanIf_CanIfCtrlId2MappedTxBuffersConfig',0,3,255,12,72
	.word	19018
	.byte	1,1,3
	.word	1397
	.byte	30
	.byte	'CanIf_CtrlModeIndicationFctPtr',0,3,140,13,60
	.word	19074
	.byte	1,1,24,12
	.word	15626
	.byte	25,1,0,3
	.word	19121
	.byte	30
	.byte	'CanIf_MailBoxConfig',0,3,165,13,52
	.word	19130
	.byte	1,1,24,1
	.word	15918
	.byte	25,0,0,3
	.word	19166
	.byte	30
	.byte	'CanIf_MappedTxBuffersConfig',0,3,185,13,60
	.word	19175
	.byte	1,1,24,16
	.word	16048
	.byte	25,1,0,3
	.word	19219
	.byte	30
	.byte	'CanIf_RxIndicationFctList',0,3,206,13,58
	.word	19228
	.byte	1,1,24,6
	.word	16220
	.byte	25,0,0,3
	.word	19270
	.byte	30
	.byte	'CanIf_RxPduConfig',0,3,230,13,50
	.word	19279
	.byte	1,1,24,4
	.word	16455
	.byte	25,0,0,3
	.word	19313
	.byte	30
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueConfig',0,3,253,13,73
	.word	19322
	.byte	1,1,24,3
	.word	16912
	.byte	25,2,0,3
	.word	19379
	.byte	30
	.byte	'CanIf_TxBufferPrioByCanIdByteQueueMappedTxPdus',0,3,145,14,79
	.word	19388
	.byte	1,1,24,8
	.word	2005
	.byte	25,1,0,3
	.word	19451
	.byte	30
	.byte	'CanIf_TxConfirmationFctList',0,3,162,14,56
	.word	19460
	.byte	1,1,24,24
	.word	17097
	.byte	25,2,0,3
	.word	19504
	.byte	30
	.byte	'CanIf_TxPduConfig',0,3,188,14,50
	.word	19513
	.byte	1,1,24,6
	.word	17422
	.byte	25,2,0,3
	.word	19547
	.byte	30
	.byte	'CanIf_TxPduQueueIndex',0,3,209,14,54
	.word	19556
	.byte	1,1,24,12
	.word	17584
	.byte	25,2,0,3
	.word	19594
	.byte	30
	.byte	'CanIf_TxQueueIndex2DataStartStop',0,3,230,14,65
	.word	19603
	.byte	1,1,30
	.byte	'CanIf_CtrlStates',0,3,250,14,53
	.word	18519
	.byte	1,1,30
	.byte	'CanIf_TxBufferPrioByCanIdBase',0,3,139,15,66
	.word	18613
	.byte	1,1,30
	.byte	'CanIf_TxQueue',0,3,156,15,50
	.word	18733
	.byte	1,1,30
	.byte	'CanIf_TxQueueData',0,3,173,15,59
	.word	18821
	.byte	1,1
.L673:
	.byte	3
	.word	337
.L674:
	.byte	3
	.word	337
.L675:
	.byte	3
	.word	337
	.byte	14
	.byte	'VStdLib_CntType',0,6,100,22
	.word	1438
	.byte	15
	.byte	'sDet_PCConfigType',0,15,238,1,16,1,16
	.byte	'Det_PCConfigNeverUsed',0
	.word	337
	.byte	1,2,35,0,0,14
	.byte	'Det_PCConfigType',0,15,241,1,3
	.word	19814
	.byte	10,16,147,1,9,1,11
	.byte	'Default_Init_Task',0,0,11
	.byte	'Default_Init_Task_Trusted',0,1,11
	.byte	'IdleTask_OsCore0',0,2,11
	.byte	'bsw_task',0,3,11
	.byte	'swc_init',0,4,11
	.byte	'swc_task',0,5,11
	.byte	'INVALID_TASK',0,6,11
	.byte	'OS_TASKID_COUNT',0,6,0,14
	.byte	'TaskType',0,16,157,1,3
	.word	19896
	.byte	14
	.byte	'Os_Hal_AddressType',0,17,61,16
	.word	1438
	.byte	15
	.byte	'Os_ExceptionContextType_Tag',0,18,71,8,160,1,16
	.byte	'AddressRegisters',0
	.word	10638
	.byte	64,2,35,0,16
	.byte	'DataRegisters',0
	.word	10638
	.byte	64,2,35,64,16
	.byte	'Ra',0
	.word	1438
	.byte	4,3,35,128,1,16
	.byte	'Psw',0
	.word	1438
	.byte	4,3,35,132,1,16
	.byte	'ExceptionSource',0
	.word	1438
	.byte	4,3,35,136,1,16
	.byte	'Pcpn',0
	.word	1438
	.byte	4,3,35,140,1,16
	.byte	'Pie',0
	.word	1438
	.byte	4,3,35,144,1,16
	.byte	'MpuRegionForStackLow',0
	.word	1438
	.byte	4,3,35,148,1,16
	.byte	'MpuRegionForStackUpper',0
	.word	1438
	.byte	4,3,35,152,1,16
	.byte	'RawPCXI',0
	.word	1438
	.byte	4,3,35,156,1,0,14
	.byte	'Os_ExceptionContextType',0,17,66,44
	.word	20081
	.byte	14
	.byte	'Os_InterruptSourceIdType',0,19,238,1,16
	.word	1438
	.byte	14
	.byte	'Os_ExceptionSourceIdType',0,19,246,1,16
	.word	1438
	.byte	10,19,161,2,9,1,11
	.byte	'RUNNING',0,0,11
	.byte	'READY',0,1,11
	.byte	'WAITING',0,2,11
	.byte	'SUSPENDED',0,3,0,14
	.byte	'TaskStateType',0,19,175,2,3
	.word	20429
	.byte	14
	.byte	'EventMaskType',0,19,182,2,16
	.word	2444
	.byte	14
	.byte	'Os_TickType',0,19,200,2,19
	.word	1438
	.byte	14
	.byte	'TickType',0,19,206,2,21
	.word	1438
	.byte	17,19,220,2,9,12,16
	.byte	'maxallowedvalue',0
	.word	1438
	.byte	4,2,35,0,16
	.byte	'ticksperbase',0
	.word	1438
	.byte	4,2,35,4,16
	.byte	'mincycle',0
	.word	1438
	.byte	4,2,35,8,0,14
	.byte	'AlarmBaseType',0,19,228,2,2
	.word	20561
	.byte	10,19,128,3,9,1,11
	.byte	'APPLICATION_TERMINATED',0,0,11
	.byte	'APPLICATION_RESTARTING',0,1,11
	.byte	'APPLICATION_ACCESSIBLE',0,2,0,14
	.byte	'ApplicationStateType',0,19,133,3,3
	.word	20656
	.byte	10,19,177,3,9,1,11
	.byte	'OSServiceId_GetApplicationID',0,0,11
	.byte	'OSServiceId_GetISRID',0,1,11
	.byte	'OSServiceId_CallTrustedFunction',0,2,11
	.byte	'OSServiceId_CheckISRMemoryAccess',0,3,11
	.byte	'OSServiceId_CheckTaskMemoryAccess',0,4,11
	.byte	'OSServiceId_CheckObjectAccess',0,5,11
	.byte	'OSServiceId_CheckObjectOwnership',0,6,11
	.byte	'OSServiceId_StartScheduleTableRel',0,7,11
	.byte	'OSServiceId_StartScheduleTableAbs',0,8,11
	.byte	'OSServiceId_StopScheduleTable',0,9,11
	.byte	'OSServiceId_NextScheduleTable',0,10,11
	.byte	'OSServiceId_StartScheduleTableSynchron',0,11,11
	.byte	'OSServiceId_SyncScheduleTable',0,12,11
	.byte	'OSServiceId_SetScheduleTableAsync',0,13,11
	.byte	'OSServiceId_GetScheduleTableStatus',0,14,11
	.byte	'OSServiceId_IncrementCounter',0,15,11
	.byte	'OSServiceId_GetCounterValue',0,16,11
	.byte	'OSServiceId_GetElapsedValue',0,17,11
	.byte	'OSServiceId_TerminateApplication',0,18,11
	.byte	'OSServiceId_AllowAccess',0,19,11
	.byte	'OSServiceId_GetApplicationState',0,20,11
	.byte	'OSServiceId_GetNumberOfActivatedCores',0,21,11
	.byte	'OSServiceId_GetCoreID',0,22,11
	.byte	'OSServiceId_StartCore',0,23,11
	.byte	'OSServiceId_StartNonAutosarCore',0,24,11
	.byte	'OSServiceId_GetSpinlock',0,25,11
	.byte	'OSServiceId_ReleaseSpinlock',0,26,11
	.byte	'OSServiceId_TryToGetSpinlock',0,27,11
	.byte	'OSServiceId_ShutdownAllCores',0,28,11
	.byte	'OSServiceId_ControlIdle',0,29,11
	.byte	'OSServiceId_IocSend',0,30,11
	.byte	'OSServiceId_IocWrite',0,31,11
	.byte	'OSServiceId_IocSendGroup',0,32,11
	.byte	'OSServiceId_IocWriteGroup',0,33,11
	.byte	'OSServiceId_IocReceive',0,34,11
	.byte	'OSServiceId_IocRead',0,35,11
	.byte	'OSServiceId_IocReceiveGroup',0,36,11
	.byte	'OSServiceId_IocReadGroup',0,37,11
	.byte	'OSServiceId_IocEmptyQueue',0,38,11
	.byte	'OSServiceId_GetCurrentApplicationID',0,39,11
	.byte	'OSServiceId_GetExceptionContext',0,160,1,11
	.byte	'OSServiceId_SetExceptionContext',0,161,1,11
	.byte	'OSServiceId_CallNonTrustedFunction',0,162,1,11
	.byte	'OSServiceId_AppKill',0,163,1,11
	.byte	'OSServiceId_AlarmActionSetEvent',0,164,1,11
	.byte	'OSServiceId_AlarmActionActivateTask',0,165,1,11
	.byte	'OSServiceId_AlarmActionIncrementCounter',0,166,1,11
	.byte	'OSServiceId_AlarmActionCallback',0,167,1,11
	.byte	'OSServiceId_TimerIsr',0,168,1,11
	.byte	'OSServiceId_IsrWrapper',0,169,1,11
	.byte	'OSServiceId_GetTaskStackUsage',0,170,1,11
	.byte	'OSServiceId_GetISRStackUsage',0,171,1,11
	.byte	'OSServiceId_GetKernelStackUsage',0,172,1,11
	.byte	'OSServiceId_GetStartupHookStackUsage',0,173,1,11
	.byte	'OSServiceId_GetErrorHookStackUsage',0,174,1,11
	.byte	'OSServiceId_GetShutdownHookStackUsage',0,175,1,11
	.byte	'OSServiceId_GetProtectionHookStackUsage',0,176,1,11
	.byte	'OSServiceId_GetSemaphore',0,177,1,11
	.byte	'OSServiceId_ReleaseSemaphore',0,178,1,11
	.byte	'OSServiceId_ScheduleTableActivateTask',0,179,1,11
	.byte	'OSServiceId_ScheduleTableSetEvent',0,180,1,11
	.byte	'OSServiceId_DisableInterruptSource',0,181,1,11
	.byte	'OSServiceId_EnableInterruptSource',0,182,1,11
	.byte	'OSServiceId_ClearPendingInterrupt',0,183,1,11
	.byte	'OSServiceId_GetUnhandledIrq',0,184,1,11
	.byte	'OSServiceId_GetUnhandledExc',0,185,1,11
	.byte	'OSServiceId_HookCallCallback',0,186,1,11
	.byte	'OSServiceId_IsInterruptSourceEnabled',0,187,1,11
	.byte	'OSServiceId_IsInterruptPending',0,188,1,11
	.byte	'OSServiceId_CallFastTrustedFunction',0,189,1,11
	.byte	'OSServiceId_BarrierSynchronize',0,190,1,11
	.byte	'OSServiceId_InitialEnableInterruptSources',0,191,1,11
	.byte	'OSServiceId_GetCoreStartState',0,192,1,11
	.byte	'OSServiceId_StartOS',0,208,1,11
	.byte	'OSServiceId_GetActiveApplicationMode',0,210,1,11
	.byte	'OSServiceId_DisableAllInterrupts',0,211,1,11
	.byte	'OSServiceId_EnableAllInterrupts',0,212,1,11
	.byte	'OSServiceId_SuspendAllInterrupts',0,213,1,11
	.byte	'OSServiceId_ResumeAllInterrupts',0,214,1,11
	.byte	'OSServiceId_SuspendOSInterrupts',0,215,1,11
	.byte	'OSServiceId_ResumeOSInterrupts',0,216,1,11
	.byte	'OSServiceId_ActivateTask',0,217,1,11
	.byte	'OSServiceId_TerminateTask',0,218,1,11
	.byte	'OSServiceId_ChainTask',0,219,1,11
	.byte	'OSServiceId_GetTaskID',0,220,1,11
	.byte	'OSServiceId_GetTaskState',0,221,1,11
	.byte	'OSServiceId_Schedule',0,222,1,11
	.byte	'OSServiceId_SetEvent',0,223,1,11
	.byte	'OSServiceId_ClearEvent',0,224,1,11
	.byte	'OSServiceId_GetEvent',0,225,1,11
	.byte	'OSServiceId_WaitEvent',0,226,1,11
	.byte	'OSServiceId_GetAlarmBase',0,227,1,11
	.byte	'OSServiceId_GetAlarm',0,228,1,11
	.byte	'OSServiceId_SetRelAlarm',0,229,1,11
	.byte	'OSServiceId_SetAbsAlarm',0,230,1,11
	.byte	'OSServiceId_CancelAlarm',0,231,1,11
	.byte	'OSServiceId_GetResource',0,232,1,11
	.byte	'OSServiceId_ReleaseResource',0,233,1,11
	.byte	'OSSERVICEID_COUNT',0,255,1,0,14
	.byte	'OSServiceIdType',0,19,156,4,3
	.word	20768
	.byte	10,19,172,4,9,2,11
	.byte	'OS_STATUS_OK',0,0,11
	.byte	'OS_STATUS_CALLEVEL',0,2,11
	.byte	'OS_STATUS_LIMIT',0,4,11
	.byte	'OS_STATUS_RESOURCE',0,6,11
	.byte	'OS_STATUS_SERVICEID',0,9,11
	.byte	'OS_STATUS_ILLEGAL_ADDRESS',0,10,11
	.byte	'OS_STATUS_MISSINGEND',0,11,11
	.byte	'OS_STATUS_DISABLEDINT',0,12,11
	.byte	'OS_STATUS_STACKFAULT',0,13,11
	.byte	'OS_STATUS_PROTECTION_MEMORY',0,14,11
	.byte	'OS_STATUS_PROTECTION_TIME',0,15,11
	.byte	'OS_STATUS_PROTECTION_ARRIVAL',0,16,11
	.byte	'OS_STATUS_PROTECTION_LOCKED',0,17,11
	.byte	'OS_STATUS_PROTECTION_EXCEPTION',0,18,11
	.byte	'OS_STATUS_INTERFERENCE_DEADLOCK',0,19,11
	.byte	'OS_STATUS_NESTING_DEADLOCK',0,20,11
	.byte	'OS_STATUS_SPINLOCK',0,21,11
	.byte	'OS_STATUS_CORE',0,22,11
	.byte	'OS_STATUS_OVERFLOW',0,245,1,11
	.byte	'OS_STATUS_KILL_KERNEL_OBJ',0,246,1,11
	.byte	'OS_STATUS_NO_RESTARTTASK',0,247,1,11
	.byte	'OS_STATUS_CALL_NOT_ALLOWED',0,248,1,11
	.byte	'OS_STATUS_FUNCTION_UNAVAILABLE',0,249,1,11
	.byte	'OS_STATUS_PROTECTION_SYSCALL',0,250,1,11
	.byte	'OS_STATUS_PROTECTION_IRQ',0,251,1,11
	.byte	'OS_STATUS_API_ERROR',0,252,1,11
	.byte	'OS_STATUS_ASSERTION',0,253,1,11
	.byte	'OS_STATUS_OVERLOAD',0,254,1,11
	.byte	'OS_STATUS_ACCESSRIGHTS_1',0,129,2,11
	.byte	'OS_STATUS_CALLEVEL_SHARED_STACK',0,130,2,11
	.byte	'OS_STATUS_ID_1',0,131,2,11
	.byte	'OS_STATUS_UNLOCKED',0,133,2,11
	.byte	'OS_STATUS_STATE_1',0,135,2,11
	.byte	'OS_STATUS_VALUE_IS_ZERO_1',0,136,2,11
	.byte	'OS_STATUS_CORE_CROSS_DATA',0,150,2,11
	.byte	'OS_STATUS_PARAM_POINTER_1',0,151,2,11
	.byte	'OS_STATUS_STACKUSAGE_DISABLED_BY_CONFIG',0,241,3,11
	.byte	'OS_STATUS_NO_BARRIER_PARTICIPANT',0,242,3,11
	.byte	'OS_STATUS_UNIMPLEMENTED_CLEARPENDING',0,243,3,11
	.byte	'OS_STATUS_NO_NTFSTACK_POOL_EMPTY',0,244,3,11
	.byte	'OS_STATUS_ACCESSRIGHTS_2',0,129,4,11
	.byte	'OS_STATUS_CALLEVEL_CROSS_CORE_SYNC',0,130,4,11
	.byte	'OS_STATUS_ID_2',0,131,4,11
	.byte	'OS_STATUS_NOFUNC_1',0,133,4,11
	.byte	'OS_STATUS_STATE_2',0,135,4,11
	.byte	'OS_STATUS_VALUE_IS_ZERO_2',0,136,4,11
	.byte	'OS_STATUS_PARAM_POINTER_2',0,151,4,11
	.byte	'OS_STATUS_EVENT_DISABLED_BY_CONFIG',0,241,5,11
	.byte	'OS_STATUS_UNIMPLEMENTED_EXCEPTIONCONTEXT',0,243,5,11
	.byte	'OS_STATUS_NO_NTFSTACK_APPLIMIT_EXCEEDED',0,244,5,11
	.byte	'OS_STATUS_NOTACCESSIBLE_1',0,129,6,11
	.byte	'OS_STATUS_ID_TYPE_1',0,131,6,11
	.byte	'OS_STATUS_NOFUNC_2',0,133,6,11
	.byte	'OS_STATUS_STATE_STOPPED',0,135,6,11
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_1',0,136,6,11
	.byte	'OS_STATUS_PARAM_POINTER_3',0,151,6,11
	.byte	'OS_STATUS_NOTACCESSIBLE_2',0,129,8,11
	.byte	'OS_STATUS_ID_DIFFERENT_COUNTER',0,131,8,11
	.byte	'OS_STATUS_SPINLOCK_ORDER',0,133,8,11
	.byte	'OS_STATUS_STATE_RUNNING',0,135,8,11
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_2',0,136,8,11
	.byte	'OS_STATUS_NOEXTENDEDTASK_1',0,129,10,11
	.byte	'OS_STATUS_ID_DIFFERENT_SYNC',0,131,10,11
	.byte	'OS_STATUS_STOPPED_1',0,133,10,11
	.byte	'OS_STATUS_STATE_NEXTED',0,135,10,11
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_3',0,136,10,11
	.byte	'OS_STATUS_NOEXTENDEDTASK_2',0,129,12,11
	.byte	'OS_STATUS_HOOK_NOT_AVAILABLE',0,131,12,11
	.byte	'OS_STATUS_NOT_STOPPED_2',0,133,12,11
	.byte	'OS_STATUS_STATE_WAITING',0,135,12,11
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_1',0,136,12,11
	.byte	'OS_STATUS_NOEXTENDEDTASK_CALLER',0,129,14,11
	.byte	'OS_STATUS_NEXTED_1',0,133,14,11
	.byte	'OS_STATUS_STATE_NO_RESTART',0,135,14,11
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_2',0,136,14,11
	.byte	'OS_STATUS_LOCKED',0,129,16,11
	.byte	'OS_STATUS_KILLING_IS_DISABLED',0,133,16,11
	.byte	'OS_STATUS_STATE_ALREADY_TERMINATED',0,135,16,11
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_1',0,136,16,11
	.byte	'OS_STATUS_PRIORITY',0,129,18,11
	.byte	'OS_STATUS_ORDER',0,133,18,11
	.byte	'OS_STATUS_STATE_RESTARTING_NO_MEMBER',0,135,18,11
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_2',0,136,18,11
	.byte	'OS_STATUS_NOT_THE_OWNER_1',0,129,20,11
	.byte	'OS_STATUS_STATE_ALREADY_RESTARTING',0,135,20,11
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_3',0,136,20,11
	.byte	'OS_STATUS_VALUE_IS_NOT_BOOLEAN',0,136,22,0,14
	.byte	'Os_StatusType',0,19,232,5,3
	.word	23938
	.byte	17,19,133,6,9,4,16
	.byte	'Service',0
	.word	20768
	.byte	1,2,35,0,16
	.byte	'Error',0
	.word	337
	.byte	1,2,35,1,16
	.byte	'DetailedError',0
	.word	23938
	.byte	2,2,35,2,0,14
	.byte	'Os_ErrorInformationType',0,19,143,6,3
	.word	26468
	.byte	10,19,175,6,9,1,11
	.byte	'SCHEDULETABLE_STOPPED',0,0,11
	.byte	'SCHEDULETABLE_NEXT',0,1,11
	.byte	'SCHEDULETABLE_WAITING',0,2,11
	.byte	'SCHEDULETABLE_RUNNING',0,3,11
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,14
	.byte	'ScheduleTableStatusType',0,19,192,6,3
	.word	26563
	.byte	14
	.byte	'Os_AccessCheckAddress',0,19,199,6,29
	.word	1438
	.byte	10,19,211,6,9,1,11
	.byte	'OS_MEM_ACCESS_TYPE_NON',0,0,11
	.byte	'OS_MEM_ACCESS_TYPE_R',0,1,11
	.byte	'OS_MEM_ACCESS_TYPE_READ',0,1,11
	.byte	'OS_MEM_ACCESS_TYPE_W',0,2,11
	.byte	'OS_MEM_ACCESS_TYPE_WRITE',0,2,11
	.byte	'OS_MEM_ACCESS_TYPE_RW',0,3,11
	.byte	'OS_MEM_ACCESS_TYPE_EXECUTE',0,4,11
	.byte	'OS_MEM_ACCESS_TYPE_X',0,4,11
	.byte	'OS_MEM_ACCESS_TYPE_RX',0,5,11
	.byte	'OS_MEM_ACCESS_TYPE_WX',0,6,11
	.byte	'OS_MEM_ACCESS_TYPE_RWX',0,7,11
	.byte	'OS_MEM_ACCESS_TYPE_S',0,8,11
	.byte	'OS_MEM_ACCESS_TYPE_STACK',0,8,11
	.byte	'OS_MEM_ACCESS_TYPE_RS',0,9,11
	.byte	'OS_MEM_ACCESS_TYPE_WS',0,10,11
	.byte	'OS_MEM_ACCESS_TYPE_RWS',0,11,11
	.byte	'OS_MEM_ACCESS_TYPE_XS',0,12,11
	.byte	'OS_MEM_ACCESS_TYPE_RXS',0,13,11
	.byte	'OS_MEM_ACCESS_TYPE_WXS',0,14,11
	.byte	'OS_MEM_ACCESS_TYPE_RWXS',0,15,0,14
	.byte	'Os_MemAccessType',0,19,233,6,3
	.word	26767
	.byte	24,7
	.word	337
	.byte	25,6,0,24,42
	.word	27296
	.byte	25,5,0
.L676:
	.byte	3
	.word	27305
	.byte	24,2
	.word	337
	.byte	25,1,0
.L677:
	.byte	3
	.word	27319
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L292:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,4,1,58,15,59,15,57,15,11,15,0,0,11,40,0,3,8,28,13,0,0,12,46,1,3
	.byte	8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,13,5,0,3,8,58,15,59,15,57,15,73,19,0,0,14,22,0,3
	.byte	8,58,15,59,15,57,15,73,19,0,0,15,19,1,3,8,58,15,59,15,57,15,11,15,0,0,16,13,0,3,8,73,19,11,15,56,9,0,0
	.byte	17,19,1,58,15,59,15,57,15,11,15,0,0,18,21,1,54,15,39,12,0,0,19,59,0,3,8,0,0,20,46,1,3,8,58,15,59,15,57
	.byte	15,54,15,39,12,63,12,60,12,0,0,21,46,0,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,22,46,0,3,8,58
	.byte	15,59,15,57,15,54,15,63,12,60,12,0,0,23,21,0,54,15,0,0,24,1,1,11,15,73,19,0,0,25,33,0,47,15,0,0,26,13
	.byte	0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,27,23,1,58,15,59,15,57,15,11,15,0,0,28,23,1,3,8,58,15,59,15,57
	.byte	15,11,15,0,0,29,13,0,11,15,73,19,13,15,12,15,56,9,0,0,30,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12
	.byte	0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L293:
	.word	.L803-.L802
.L802:
	.half	3
	.word	.L805-.L804
.L804:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Can\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\appl\\GenData',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\CanIf\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation',0,0
	.byte	'Can.h',0,1,0,0
	.byte	'Can_DrvGeneralTypes.h',0,2,0,0
	.byte	'CanIf_Cfg.h',0,2,0,0
	.byte	'CanIf_Types.h',0,3,0,0
	.byte	'ComStack_Types.h',0,4,0,0
	.byte	'vstdlib.h',0,5,0,0
	.byte	'Det.h',0,6,0,0
	.byte	'Os.h',0,7,0,0
	.byte	'SchM_CanIf.h',0,2,0,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0
	.byte	'Platform_Types.h',0,4,0,0
	.byte	'Std_Types.h',0,4,0,0
	.byte	'ComStack_Cfg.h',0,2,0,0
	.byte	'Can_Cfg.h',0,2,0,0
	.byte	'Det_Cfg.h',0,2,0,0
	.byte	'Os_Types_Lcfg.h',0,2,0,0
	.byte	'Os_Hal_Os_Types.h',0,7,0,0
	.byte	'Os_Hal_OsInt.h',0,7,0,0
	.byte	'Os_Types.h',0,7,0,0,0
.L805:
.L803:
	.sdecl	'.debug_info',debug,cluster('CanIf_InitMemory')
	.sect	'.debug_info'
.L294:
	.word	188
	.half	3
	.word	.L295
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L297,.L296
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_InitMemory',0,1,160,45,24,1,1,1
	.word	.L287,.L514,.L286
	.byte	4
	.word	.L287,.L514
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_InitMemory')
	.sect	'.debug_abbrev'
.L295:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_InitMemory')
	.sect	'.debug_line'
.L296:
	.word	.L807-.L806
.L806:
	.half	3
	.word	.L809-.L808
.L808:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L809:
	.byte	5,5,7,0,5,2
	.word	.L287
	.byte	3,179,45,1,5,1,9
	.half	.L810-.L287
	.byte	3,2,1,7,9
	.half	.L298-.L810
	.byte	0,1,1
.L807:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_InitMemory')
	.sect	'.debug_ranges'
.L297:
	.word	-1,.L287,0,.L298-.L287,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_Init')
	.sect	'.debug_info'
.L299:
	.word	205
	.half	3
	.word	.L300
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L302,.L301
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_Init',0,1,172,15,24,1,1,1
	.word	.L229,.L515,.L228
	.byte	4
	.byte	'ConfigPtr',0,1,172,15,84
	.word	.L516,.L517
	.byte	5
	.word	.L229,.L515
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_Init')
	.sect	'.debug_abbrev'
.L300:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_Init')
	.sect	'.debug_line'
.L301:
	.word	.L812-.L811
.L811:
	.half	3
	.word	.L814-.L813
.L813:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L814:
	.byte	5,23,7,0,5,2
	.word	.L229
	.byte	3,141,16,1,5,7,9
	.half	.L694-.L229
	.byte	3,7,1,9
	.half	.L815-.L694
	.byte	3,2,1,5,1,9
	.half	.L816-.L815
	.byte	3,196,0,1,7,9
	.half	.L303-.L816
	.byte	0,1,1
.L812:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_Init')
	.sect	'.debug_ranges'
.L302:
	.word	-1,.L229,0,.L303-.L229,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_SetControllerMode')
	.sect	'.debug_info'
.L304:
	.word	295
	.half	3
	.word	.L305
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L307,.L306
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_SetControllerMode',0,1,166,18,34
	.word	.L518
	.byte	1,1,1
	.word	.L237,.L519,.L236
	.byte	4
	.byte	'ControllerId',0,1,166,18,64
	.word	.L518,.L520
	.byte	4
	.byte	'ControllerMode',0,1,166,18,103
	.word	.L521,.L522
	.byte	5
	.word	.L237,.L519
	.byte	6
	.byte	'retval',0,1,170,18,18
	.word	.L518,.L523
	.byte	6
	.byte	'errorId',0,1,171,18,9
	.word	.L518,.L524
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_SetControllerMode')
	.sect	'.debug_abbrev'
.L305:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_SetControllerMode')
	.sect	'.debug_line'
.L306:
	.word	.L818-.L817
.L817:
	.half	3
	.word	.L820-.L819
.L819:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L820:
	.byte	5,34,7,0,5,2
	.word	.L237
	.byte	3,165,18,1,5,25,9
	.half	.L707-.L237
	.byte	3,4,1,5,17,9
	.half	.L705-.L707
	.byte	3,1,1,5,3,9
	.half	.L708-.L705
	.byte	3,14,1,5,13,7,9
	.half	.L821-.L708
	.byte	3,3,1,5,41,1,5,12,9
	.half	.L38-.L821
	.byte	3,3,1,5,8,9
	.half	.L822-.L38
	.byte	1,5,13,7,9
	.half	.L823-.L822
	.byte	3,3,1,5,29,1,5,7,9
	.half	.L40-.L823
	.byte	3,22,1,5,77,9
	.half	.L704-.L40
	.byte	3,1,1,5,14,9
	.half	.L706-.L704
	.byte	1,5,7,3,1,1,5,3,9
	.half	.L39-.L706
	.byte	3,6,1,5,5,7,9
	.half	.L824-.L39
	.byte	3,2,1,5,3,9
	.half	.L42-.L824
	.byte	3,10,1,5,1,3,1,1,7,9
	.half	.L308-.L42
	.byte	0,1,1
.L818:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_SetControllerMode')
	.sect	'.debug_ranges'
.L307:
	.word	-1,.L237,0,.L308-.L237,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_GetControllerMode')
	.sect	'.debug_info'
.L309:
	.word	299
	.half	3
	.word	.L310
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L312,.L311
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_GetControllerMode',0,1,137,19,34
	.word	.L518
	.byte	1,1,1
	.word	.L239,.L525,.L238
	.byte	4
	.byte	'ControllerId',0,1,137,19,64
	.word	.L518,.L526
	.byte	4
	.byte	'ControllerModePtr',0,1,137,19,143,1
	.word	.L527,.L528
	.byte	5
	.word	.L239,.L525
	.byte	6
	.byte	'retval',0,1,140,19,18
	.word	.L518,.L529
	.byte	6
	.byte	'errorId',0,1,141,19,9
	.word	.L518,.L530
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_GetControllerMode')
	.sect	'.debug_abbrev'
.L310:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_GetControllerMode')
	.sect	'.debug_line'
.L311:
	.word	.L826-.L825
.L825:
	.half	3
	.word	.L828-.L827
.L827:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L828:
	.byte	5,25,7,0,5,2
	.word	.L239
	.byte	3,139,19,1,5,17,9
	.half	.L709-.L239
	.byte	3,1,1,5,3,9
	.half	.L710-.L709
	.byte	3,14,1,5,13,7,9
	.half	.L829-.L710
	.byte	3,3,1,5,41,1,5,12,9
	.half	.L44-.L829
	.byte	3,3,1,5,8,9
	.half	.L711-.L44
	.byte	1,5,13,7,9
	.half	.L830-.L711
	.byte	3,3,1,5,29,1,5,8,9
	.half	.L46-.L830
	.byte	3,3,1,5,13,7,9
	.half	.L831-.L46
	.byte	3,3,1,5,36,1,5,12,9
	.half	.L48-.L831
	.byte	3,10,1,5,24,3,127,1,5,3,9
	.half	.L45-.L48
	.byte	3,6,1,5,5,7,9
	.half	.L832-.L45
	.byte	3,2,1,5,3,9
	.half	.L50-.L832
	.byte	3,9,1,5,1,3,1,1,7,9
	.half	.L313-.L50
	.byte	0,1,1
.L826:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_GetControllerMode')
	.sect	'.debug_ranges'
.L312:
	.word	-1,.L239,0,.L313-.L239,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_Transmit')
	.sect	'.debug_info'
.L314:
	.word	298
	.half	3
	.word	.L315
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L317,.L316
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_Transmit',0,1,151,25,34
	.word	.L518
	.byte	1,1,1
	.word	.L251,.L531,.L250
	.byte	4
	.byte	'CanTxPduId',0,1,151,25,59
	.word	.L518,.L532
	.byte	4
	.byte	'PduInfoPtr',0,1,151,25,122
	.word	.L533,.L534
	.byte	5
	.word	.L535
	.byte	6
	.byte	'retval',0,1,154,25,18
	.word	.L518,.L536
	.byte	6
	.byte	'errorId',0,1,155,25,9
	.word	.L518,.L537
	.byte	6
	.byte	'localPdu',0,1,159,25,19
	.word	.L538,.L539
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_Transmit')
	.sect	'.debug_abbrev'
.L315:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_Transmit')
	.sect	'.debug_line'
.L316:
	.word	.L834-.L833
.L833:
	.half	3
	.word	.L836-.L835
.L835:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L836:
	.byte	5,34,7,0,5,2
	.word	.L251
	.byte	3,150,25,1,5,25,9
	.half	.L726-.L251
	.byte	3,3,1,5,34,3,125,1,5,17,9
	.half	.L725-.L726
	.byte	3,4,1,5,5,9
	.half	.L727-.L725
	.byte	3,38,1,5,15,7,9
	.half	.L837-.L727
	.byte	3,3,1,5,40,1,5,7,9
	.half	.L71-.L837
	.byte	3,12,1,5,17,7,9
	.half	.L838-.L71
	.byte	3,3,1,5,40,1,5,16,9
	.half	.L73-.L838
	.byte	3,3,1,5,12,9
	.half	.L728-.L73
	.byte	1,5,17,7,9
	.half	.L839-.L728
	.byte	3,2,1,5,33,1,5,11,9
	.half	.L75-.L839
	.byte	3,24,1,5,18,7,9
	.half	.L840-.L75
	.byte	3,4,1,5,17,9
	.half	.L841-.L840
	.byte	1,5,67,7,9
	.half	.L842-.L841
	.byte	3,1,1,5,15,7,9
	.half	.L78-.L842
	.byte	3,9,1,5,51,9
	.half	.L729-.L78
	.byte	3,3,1,5,31,9
	.half	.L843-.L729
	.byte	1,5,85,9
	.half	.L844-.L843
	.byte	3,1,1,5,15,9
	.half	.L845-.L844
	.byte	1,5,33,7,9
	.half	.L846-.L845
	.byte	3,14,1,5,31,9
	.half	.L847-.L846
	.byte	1,5,43,9
	.half	.L848-.L847
	.byte	3,3,1,5,30,9
	.half	.L849-.L848
	.byte	1,5,38,9
	.half	.L850-.L849
	.byte	3,1,1,5,52,9
	.half	.L851-.L850
	.byte	3,26,1,5,26,9
	.half	.L731-.L851
	.byte	1,5,63,3,98,1,5,25,9
	.half	.L80-.L731
	.byte	3,38,1,5,15,9
	.half	.L81-.L80
	.byte	3,3,1,5,58,9
	.half	.L852-.L81
	.byte	1,5,22,9
	.half	.L79-.L852
	.byte	3,3,1,5,73,7,9
	.half	.L853-.L79
	.byte	3,1,1,5,22,7,9
	.half	.L83-.L853
	.byte	3,2,1,5,38,3,3,1,5,28,9
	.half	.L732-.L83
	.byte	3,125,1,5,16,9
	.half	.L77-.L732
	.byte	3,13,1,5,21,7,9
	.half	.L84-.L77
	.byte	3,3,1,5,3,9
	.half	.L72-.L84
	.byte	3,15,1,5,5,7,9
	.half	.L854-.L72
	.byte	3,2,1,5,3,9
	.half	.L87-.L854
	.byte	3,7,1,5,1,3,1,1,7,9
	.half	.L318-.L87
	.byte	0,1,1
.L834:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_Transmit')
	.sect	'.debug_ranges'
.L317:
	.word	-1,.L251,0,.L318-.L251,0,0
.L535:
	.word	-1,.L251,0,.L531-.L251,-1,.L253,0,.L473-.L253,-1,.L255,0,.L458-.L255,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_SetPduMode')
	.sect	'.debug_info'
.L319:
	.word	288
	.half	3
	.word	.L320
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L322,.L321
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_SetPduMode',0,1,153,40,34
	.word	.L518
	.byte	1,1,1
	.word	.L279,.L540,.L278
	.byte	4
	.byte	'ControllerId',0,1,153,40,57
	.word	.L518,.L541
	.byte	4
	.byte	'PduModeRequest',0,1,153,40,92
	.word	.L542,.L543
	.byte	5
	.word	.L279,.L540
	.byte	6
	.byte	'retval',0,1,156,40,18
	.word	.L518,.L544
	.byte	6
	.byte	'errorId',0,1,157,40,9
	.word	.L518,.L545
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_SetPduMode')
	.sect	'.debug_abbrev'
.L320:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_SetPduMode')
	.sect	'.debug_line'
.L321:
	.word	.L856-.L855
.L855:
	.half	3
	.word	.L858-.L857
.L857:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L858:
	.byte	5,34,7,0,5,2
	.word	.L279
	.byte	3,152,40,1,5,25,9
	.half	.L779-.L279
	.byte	3,3,1,5,17,9
	.half	.L781-.L779
	.byte	3,1,1,5,3,9
	.half	.L780-.L781
	.byte	3,14,1,5,13,7,9
	.half	.L859-.L780
	.byte	3,3,1,5,41,1,5,12,9
	.half	.L150-.L859
	.byte	3,3,1,5,8,9
	.half	.L860-.L150
	.byte	1,5,13,7,9
	.half	.L861-.L860
	.byte	3,3,1,5,29,1,5,8,9
	.half	.L152-.L861
	.byte	3,3,1,5,13,7,9
	.half	.L862-.L152
	.byte	3,2,1,5,37,1,5,5,9
	.half	.L154-.L862
	.byte	3,8,1,5,14,7,9
	.half	.L863-.L154
	.byte	3,3,1,5,7,3,1,1,5,21,9
	.half	.L778-.L863
	.byte	3,3,1,5,10,9
	.half	.L864-.L778
	.byte	1,5,20,9
	.half	.L865-.L864
	.byte	1,5,10,1,5,20,9
	.half	.L866-.L865
	.byte	1,5,86,9
	.half	.L867-.L866
	.byte	1,5,66,9
	.half	.L868-.L867
	.byte	1,5,7,9
	.half	.L869-.L868
	.byte	1,5,16,7,9
	.half	.L870-.L869
	.byte	3,4,1,7,9
	.half	.L871-.L870
	.byte	3,1,1,7,9
	.half	.L872-.L871
	.byte	3,1,1,5,20,7,9
	.half	.L158-.L872
	.byte	3,1,1,5,13,9
	.half	.L873-.L158
	.byte	1,5,33,7,9
	.half	.L874-.L873
	.byte	3,11,1,5,9,9
	.half	.L161-.L874
	.byte	3,34,1,5,7,9
	.half	.L157-.L161
	.byte	3,2,1,5,3,9
	.half	.L151-.L157
	.byte	3,6,1,5,5,7,9
	.half	.L875-.L151
	.byte	3,2,1,5,3,9
	.half	.L163-.L875
	.byte	3,9,1,5,1,3,1,1,7,9
	.half	.L323-.L163
	.byte	0,1,1
.L856:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_SetPduMode')
	.sect	'.debug_ranges'
.L322:
	.word	-1,.L279,0,.L323-.L279,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_GetPduMode')
	.sect	'.debug_info'
.L324:
	.word	285
	.half	3
	.word	.L325
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L327,.L326
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_GetPduMode',0,1,175,41,34
	.word	.L518
	.byte	1,1,1
	.word	.L281,.L546,.L280
	.byte	4
	.byte	'ControllerId',0,1,175,41,57
	.word	.L518,.L547
	.byte	4
	.byte	'PduModePtr',0,1,175,41,132,1
	.word	.L548,.L549
	.byte	5
	.word	.L281,.L546
	.byte	6
	.byte	'retval',0,1,178,41,18
	.word	.L518,.L550
	.byte	6
	.byte	'errorId',0,1,179,41,9
	.word	.L518,.L551
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_GetPduMode')
	.sect	'.debug_abbrev'
.L325:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_GetPduMode')
	.sect	'.debug_line'
.L326:
	.word	.L877-.L876
.L876:
	.half	3
	.word	.L879-.L878
.L878:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L879:
	.byte	5,25,7,0,5,2
	.word	.L281
	.byte	3,177,41,1,5,17,9
	.half	.L782-.L281
	.byte	3,1,1,5,3,9
	.half	.L783-.L782
	.byte	3,14,1,5,13,7,9
	.half	.L880-.L783
	.byte	3,3,1,5,41,1,5,12,9
	.half	.L165-.L880
	.byte	3,3,1,5,8,9
	.half	.L784-.L165
	.byte	1,5,13,7,9
	.half	.L881-.L784
	.byte	3,3,1,5,29,1,5,8,9
	.half	.L167-.L881
	.byte	3,3,1,5,13,7,9
	.half	.L882-.L167
	.byte	3,3,1,5,36,1,5,12,9
	.half	.L169-.L882
	.byte	3,9,1,5,19,3,127,1,5,17,9
	.half	.L883-.L169
	.byte	1,5,3,9
	.half	.L166-.L883
	.byte	3,6,1,5,5,7,9
	.half	.L884-.L166
	.byte	3,2,1,5,3,9
	.half	.L171-.L884
	.byte	3,9,1,5,1,3,1,1,7,9
	.half	.L328-.L171
	.byte	0,1,1
.L877:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_GetPduMode')
	.sect	'.debug_ranges'
.L327:
	.word	-1,.L281,0,.L328-.L281,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_ControllerModeIndication')
	.sect	'.debug_info'
.L329:
	.word	308
	.half	3
	.word	.L330
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L332,.L331
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_ControllerModeIndication',0,1,255,63,24,1,1,1
	.word	.L289,.L552,.L288
	.byte	4
	.byte	'ControllerId',0,1,255,63,61
	.word	.L518,.L553
	.byte	4
	.byte	'ControllerMode',0,1,255,63,100
	.word	.L521,.L554
	.byte	5
	.word	.L289,.L552
	.byte	6
	.byte	'errorId',0,1,130,64,9
	.word	.L518,.L555
	.byte	5
	.word	.L191,.L190
	.byte	6
	.byte	'cbkFct',0,1,165,64,39
	.word	.L556,.L557
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_ControllerModeIndication')
	.sect	'.debug_abbrev'
.L330:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_ControllerModeIndication')
	.sect	'.debug_line'
.L331:
	.word	.L886-.L885
.L885:
	.half	3
	.word	.L888-.L887
.L887:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L888:
	.byte	5,17,7,0,5,2
	.word	.L289
	.byte	3,129,192,0,1,5,3,9
	.half	.L798-.L289
	.byte	3,14,1,5,13,7,9
	.half	.L889-.L798
	.byte	3,3,1,5,39,1,5,12,9
	.half	.L189-.L889
	.byte	3,3,1,5,8,9
	.half	.L799-.L189
	.byte	1,5,13,7,9
	.half	.L890-.L799
	.byte	3,3,1,5,29,1,5,14,9
	.half	.L191-.L890
	.byte	3,18,1,7,9
	.half	.L891-.L191
	.byte	3,29,1,7,9
	.half	.L892-.L891
	.byte	3,22,1,7,9
	.half	.L893-.L892
	.byte	1,5,18,9
	.half	.L193-.L893
	.byte	3,79,1,5,11,9
	.half	.L894-.L193
	.byte	1,5,15,7,9
	.half	.L895-.L894
	.byte	3,6,1,5,11,3,20,1,9
	.half	.L194-.L895
	.byte	3,3,1,5,15,7,9
	.half	.L896-.L194
	.byte	3,5,1,5,11,3,14,1,5,18,9
	.half	.L195-.L896
	.byte	3,5,1,7,9
	.half	.L897-.L195
	.byte	3,1,1,5,15,7,9
	.half	.L201-.L897
	.byte	3,3,1,5,49,9
	.half	.L196-.L201
	.byte	3,16,1,5,16,9
	.half	.L898-.L196
	.byte	1,5,7,9
	.half	.L800-.L898
	.byte	3,3,1,5,40,7,9
	.half	.L899-.L800
	.byte	3,3,1,5,3,9
	.half	.L190-.L899
	.byte	3,7,1,5,5,7,9
	.half	.L900-.L190
	.byte	3,2,1,5,1,9
	.half	.L205-.L900
	.byte	3,8,1,7,9
	.half	.L333-.L205
	.byte	0,1,1
.L886:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_ControllerModeIndication')
	.sect	'.debug_ranges'
.L332:
	.word	-1,.L289,0,.L333-.L289,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_TxConfirmation')
	.sect	'.debug_info'
.L334:
	.word	261
	.half	3
	.word	.L335
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L337,.L336
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_TxConfirmation',0,1,189,27,24,1,1,1
	.word	.L259,.L558,.L258
	.byte	4
	.byte	'CanTxPduId',0,1,189,27,55
	.word	.L518,.L559
	.byte	5
	.word	.L259,.L558
	.byte	6
	.byte	'errorId',0,1,192,27,9
	.word	.L518,.L560
	.byte	7
	.word	.L561
	.byte	6
	.byte	'hth',0,1,137,28,28
	.word	.L562,.L563
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_TxConfirmation')
	.sect	'.debug_abbrev'
.L335:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_TxConfirmation')
	.sect	'.debug_line'
.L336:
	.word	.L902-.L901
.L901:
	.half	3
	.word	.L904-.L903
.L903:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L904:
	.byte	5,24,7,0,5,2
	.word	.L259
	.byte	3,188,27,1,5,17,9
	.half	.L737-.L259
	.byte	3,3,1,5,3,9
	.half	.L738-.L737
	.byte	3,15,1,5,13,7,9
	.half	.L905-.L738
	.byte	3,3,1,5,33,1,5,12,9
	.half	.L90-.L905
	.byte	3,3,1,5,8,9
	.half	.L906-.L90
	.byte	1,5,13,7,9
	.half	.L907-.L906
	.byte	3,3,1,5,29,1,5,5,9
	.half	.L92-.L907
	.byte	3,17,1,5,13,7,9
	.half	.L908-.L92
	.byte	3,2,1,5,12,9
	.half	.L909-.L908
	.byte	1,5,73,7,9
	.half	.L910-.L909
	.byte	3,1,1,5,17,7,9
	.half	.L95-.L910
	.byte	3,30,1,5,15,9
	.half	.L742-.L95
	.byte	3,3,1,5,11,9
	.half	.L911-.L742
	.byte	1,5,13,7,9
	.half	.L912-.L911
	.byte	3,4,1,5,42,9
	.half	.L741-.L912
	.byte	3,4,1,5,13,9
	.half	.L913-.L741
	.byte	3,2,1,5,32,9
	.half	.L97-.L913
	.byte	3,6,1,5,3,9
	.half	.L91-.L97
	.byte	3,7,1,5,5,7,9
	.half	.L914-.L91
	.byte	3,2,1,5,1,9
	.half	.L98-.L914
	.byte	3,5,1,7,9
	.half	.L338-.L98
	.byte	0,1,1
.L902:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_TxConfirmation')
	.sect	'.debug_ranges'
.L337:
	.word	-1,.L259,0,.L338-.L259,0,0
.L561:
	.word	-1,.L259,.L95-.L259,.L97-.L259,-1,.L261,0,.L468-.L261,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_RxIndicationAsr403')
	.sect	'.debug_info'
.L339:
	.word	326
	.half	3
	.word	.L340
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L342,.L341
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_RxIndicationAsr403',0,1,210,34,24,1,1,1
	.word	.L271,.L564,.L270
	.byte	4
	.byte	'Hrh',0,1,210,34,68
	.word	.L518,.L565
	.byte	4
	.byte	'CanId',0,1,210,34,84
	.word	.L566,.L567
	.byte	4
	.byte	'CanDlc',0,1,210,34,97
	.word	.L518,.L568
	.byte	4
	.byte	'CanSduPtr',0,1,210,34,149,1
	.word	.L569,.L570
	.byte	5
	.word	.L271,.L564
	.byte	6
	.byte	'rxSearchParams',0,1,213,34,28
	.word	.L571,.L572
	.byte	6
	.byte	'errorId',0,1,217,34,9
	.word	.L518,.L573
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_RxIndicationAsr403')
	.sect	'.debug_abbrev'
.L340:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_RxIndicationAsr403')
	.sect	'.debug_line'
.L341:
	.word	.L916-.L915
.L915:
	.half	3
	.word	.L918-.L917
.L917:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L918:
	.byte	5,24,7,0,5,2
	.word	.L271
	.byte	3,209,34,1,5,17,9
	.half	.L762-.L271
	.byte	3,7,1,5,3,3,15,1,5,13,7,9
	.half	.L763-.L762
	.byte	3,3,1,5,36,1,5,19,9
	.half	.L116-.L763
	.byte	3,4,1,5,40,9
	.half	.L919-.L116
	.byte	1,5,8,9
	.half	.L920-.L919
	.byte	1,5,13,7,9
	.half	.L921-.L920
	.byte	3,3,1,5,34,1,5,41,9
	.half	.L118-.L921
	.byte	3,4,1,5,21,1,5,41,9
	.half	.L922-.L118
	.byte	1,5,21,1,5,41,9
	.half	.L923-.L922
	.byte	1,5,40,9
	.half	.L924-.L923
	.byte	1,5,8,9
	.half	.L751-.L924
	.byte	1,5,13,7,9
	.half	.L752-.L751
	.byte	3,3,1,5,32,1,5,8,9
	.half	.L120-.L752
	.byte	3,3,1,5,13,7,9
	.half	.L753-.L120
	.byte	3,3,1,5,32,1,5,23,9
	.half	.L122-.L753
	.byte	3,28,1,5,20,9
	.half	.L925-.L122
	.byte	1,5,27,3,1,1,5,25,9
	.half	.L754-.L925
	.byte	3,1,1,5,35,9
	.half	.L926-.L754
	.byte	3,22,1,5,40,9
	.half	.L755-.L926
	.byte	3,2,1,5,35,3,126,1,5,33,9
	.half	.L927-.L755
	.byte	1,5,9,9
	.half	.L928-.L927
	.byte	3,2,1,5,40,7,9
	.half	.L929-.L928
	.byte	3,2,1,5,15,9
	.half	.L930-.L929
	.byte	3,3,1,5,11,9
	.half	.L931-.L930
	.byte	1,5,58,7,9
	.half	.L932-.L931
	.byte	3,3,1,5,73,9
	.half	.L756-.L932
	.byte	1,5,16,9
	.half	.L125-.L756
	.byte	3,2,1,5,44,7,9
	.half	.L933-.L125
	.byte	3,4,1,5,59,9
	.half	.L758-.L933
	.byte	1,5,21,9
	.half	.L127-.L758
	.byte	3,6,1,5,29,9
	.half	.L126-.L127
	.byte	3,5,1,5,47,9
	.half	.L934-.L126
	.byte	1,5,11,9
	.half	.L935-.L934
	.byte	1,5,15,7,9
	.half	.L760-.L935
	.byte	3,35,1,5,3,9
	.half	.L117-.L760
	.byte	3,10,1,5,5,7,9
	.half	.L936-.L117
	.byte	3,2,1,5,1,9
	.half	.L130-.L936
	.byte	3,5,1,7,9
	.half	.L343-.L130
	.byte	0,1,1
.L916:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_RxIndicationAsr403')
	.sect	'.debug_ranges'
.L342:
	.word	-1,.L271,0,.L343-.L271,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_ControllerBusOff')
	.sect	'.debug_info'
.L344:
	.word	277
	.half	3
	.word	.L345
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L347,.L346
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_ControllerBusOff',0,1,142,39,24,1,1,1
	.word	.L277,.L574,.L276
	.byte	4
	.byte	'ControllerId',0,1,142,39,53
	.word	.L518,.L575
	.byte	5
	.word	.L277,.L574
	.byte	6
	.byte	'errorId',0,1,147,39,9
	.word	.L518,.L576
	.byte	6
	.byte	'busoffnotificationFct',0,1,148,39,35
	.word	.L577,.L578
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_ControllerBusOff')
	.sect	'.debug_abbrev'
.L345:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_ControllerBusOff')
	.sect	'.debug_line'
.L346:
	.word	.L938-.L937
.L937:
	.half	3
	.word	.L940-.L939
.L939:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L940:
	.byte	5,17,7,0,5,2
	.word	.L277
	.byte	3,146,39,1,5,59,3,1,1,5,3,9
	.half	.L775-.L277
	.byte	3,18,1,5,13,7,9
	.half	.L941-.L775
	.byte	3,3,1,5,39,1,5,9,9
	.half	.L144-.L941
	.byte	3,9,1,5,5,9
	.half	.L942-.L144
	.byte	1,5,54,7,9
	.half	.L943-.L942
	.byte	3,5,1,5,7,9
	.half	.L774-.L943
	.byte	3,5,1,5,23,9
	.half	.L944-.L774
	.byte	3,4,1,5,7,9
	.half	.L945-.L944
	.byte	3,14,1,5,31,7,9
	.half	.L946-.L945
	.byte	3,4,1,5,7,9
	.half	.L947-.L946
	.byte	3,124,1,5,15,9
	.half	.L146-.L947
	.byte	3,16,1,5,3,9
	.half	.L145-.L146
	.byte	3,6,1,5,5,7,9
	.half	.L948-.L145
	.byte	3,2,1,5,1,9
	.half	.L149-.L948
	.byte	3,9,1,7,9
	.half	.L348-.L149
	.byte	0,1,1
.L938:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_ControllerBusOff')
	.sect	'.debug_ranges'
.L347:
	.word	-1,.L277,0,.L348-.L277,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_TxQueueTreatment')
	.sect	'.debug_info'
.L349:
	.word	320
	.half	3
	.word	.L350
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L352,.L351
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_TxQueueTreatment',0,1,194,43,46
	.word	.L518
	.byte	1,1
	.word	.L285,.L579,.L284
	.byte	4
	.byte	'hth',0,1,194,43,88
	.word	.L518,.L580
	.byte	5
	.word	.L285,.L579
	.byte	6
	.byte	'idx2MappedTxPdus',0,1,207,43,20
	.word	.L562,.L581
	.byte	6
	.byte	'retval',0,1,216,43,18
	.word	.L518,.L582
	.byte	6
	.byte	'txBufferCfgIdx',0,1,217,43,20
	.word	.L562,.L583
	.byte	7
	.word	.L584
	.byte	6
	.byte	'TxPduId',0,1,141,44,28
	.word	.L562,.L587
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_TxQueueTreatment')
	.sect	'.debug_abbrev'
.L350:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_TxQueueTreatment')
	.sect	'.debug_line'
.L351:
	.word	.L950-.L949
.L949:
	.half	3
	.word	.L952-.L951
.L951:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L952:
	.byte	5,20,7,0,5,2
	.word	.L285
	.byte	3,221,43,1,5,10,9
	.half	.L953-.L285
	.byte	3,125,1,5,20,9
	.half	.L795-.L953
	.byte	3,3,1,5,11,9
	.half	.L954-.L795
	.byte	3,2,1,5,20,9
	.half	.L955-.L954
	.byte	3,126,1,5,3,9
	.half	.L793-.L955
	.byte	3,2,1,5,36,7,9
	.half	.L956-.L793
	.byte	3,37,1,5,11,9
	.half	.L794-.L956
	.byte	3,3,1,5,7,9
	.half	.L957-.L794
	.byte	1,5,52,7,9
	.half	.L958-.L957
	.byte	3,3,1,5,21,9
	.half	.L959-.L958
	.byte	3,3,1,5,127,9
	.half	.L960-.L959
	.byte	3,125,1,5,21,3,3,1,5,15,9
	.half	.L585-.L960
	.byte	3,2,1,5,229,1,9
	.half	.L586-.L585
	.byte	3,123,1,5,21,9
	.half	.L185-.L586
	.byte	3,3,1,5,15,9
	.half	.L797-.L185
	.byte	3,2,1,5,11,9
	.half	.L961-.L797
	.byte	1,5,44,7,9
	.half	.L962-.L961
	.byte	3,4,1,5,247,1,7,9
	.half	.L186-.L962
	.byte	3,119,1,5,153,1,9
	.half	.L184-.L186
	.byte	1,5,229,1,9
	.half	.L963-.L184
	.byte	1,5,1,7,9
	.half	.L182-.L963
	.byte	3,60,1,7,9
	.half	.L353-.L182
	.byte	0,1,1
.L950:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_TxQueueTreatment')
	.sect	'.debug_ranges'
.L352:
	.word	-1,.L285,0,.L353-.L285,0,0
.L584:
	.word	-1,.L285,.L585-.L285,.L586-.L285,.L185-.L285,.L186-.L285,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_TxQueueTransmit')
	.sect	'.debug_info'
.L354:
	.word	318
	.half	3
	.word	.L355
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L357,.L356
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_TxQueueTransmit',0,1,143,42,46
	.word	.L518
	.byte	1,1
	.word	.L283,.L588,.L282
	.byte	4
	.byte	'PduId',0,1,143,42,79
	.word	.L518,.L589
	.byte	5
	.word	.L283,.L588
	.byte	6
	.byte	'localPdu',0,1,146,42,15
	.word	.L538,.L590
	.byte	6
	.byte	'txResult',0,1,147,42,18
	.word	.L591,.L592
	.byte	6
	.byte	'retval',0,1,148,42,18
	.word	.L518,.L593
	.byte	6
	.byte	'hth',0,1,149,42,20
	.word	.L562,.L594
	.byte	6
	.byte	'errorId',0,1,151,42,9
	.word	.L518,.L595
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_TxQueueTransmit')
	.sect	'.debug_abbrev'
.L355:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_TxQueueTransmit')
	.sect	'.debug_line'
.L356:
	.word	.L965-.L964
.L964:
	.half	3
	.word	.L967-.L966
.L966:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L967:
	.byte	5,46,7,0,5,2
	.word	.L283
	.byte	3,142,42,1,5,17,9
	.half	.L786-.L283
	.byte	3,8,1,5,10,9
	.half	.L787-.L786
	.byte	3,8,1,5,3,9
	.half	.L788-.L787
	.byte	3,3,1,5,13,7,9
	.half	.L968-.L788
	.byte	3,3,1,5,38,1,5,11,9
	.half	.L173-.L968
	.byte	3,6,1,5,13,9
	.half	.L790-.L173
	.byte	3,5,1,5,5,9
	.half	.L969-.L790
	.byte	1,5,25,7,9
	.half	.L970-.L969
	.byte	3,8,1,5,23,9
	.half	.L971-.L970
	.byte	1,5,36,9
	.half	.L972-.L971
	.byte	3,2,1,5,27,9
	.half	.L973-.L972
	.byte	1,5,26,9
	.half	.L974-.L973
	.byte	3,2,1,5,24,9
	.half	.L975-.L974
	.byte	1,5,32,9
	.half	.L976-.L975
	.byte	3,4,1,5,52,9
	.half	.L175-.L976
	.byte	3,35,1,5,5,9
	.half	.L791-.L175
	.byte	3,3,1,5,15,7,9
	.half	.L977-.L791
	.byte	3,4,1,5,7,9
	.half	.L978-.L977
	.byte	1,5,53,7,9
	.half	.L979-.L978
	.byte	3,4,1,5,20,9
	.half	.L792-.L979
	.byte	3,22,1,5,10,9
	.half	.L176-.L792
	.byte	3,2,1,5,14,7,9
	.half	.L177-.L176
	.byte	3,3,1,5,3,9
	.half	.L174-.L177
	.byte	3,5,1,5,5,7,9
	.half	.L980-.L174
	.byte	3,2,1,5,3,9
	.half	.L180-.L980
	.byte	3,5,1,5,1,3,1,1,7,9
	.half	.L358-.L180
	.byte	0,1,1
.L965:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_TxQueueTransmit')
	.sect	'.debug_ranges'
.L357:
	.word	-1,.L283,0,.L358-.L283,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_ClearQueue')
	.sect	'.debug_info'
.L359:
	.word	303
	.half	3
	.word	.L360
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L362,.L361
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_ClearQueue',0,1,206,13,36,1,1
	.word	.L227,.L596,.L226
	.byte	4
	.word	.L227,.L596
	.byte	5
	.byte	'idx2MappedTxBufferCfg',0,1,208,13,20
	.word	.L562,.L597
	.byte	5
	.byte	'hth',0,1,209,13,20
	.word	.L562,.L598
	.byte	5
	.byte	'MappedTxPdusIdx',0,1,215,13,20
	.word	.L562,.L599
	.byte	6
	.word	.L600
	.byte	5
	.byte	'txBufferCfgIdx',0,1,231,13,22
	.word	.L562,.L607
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_ClearQueue')
	.sect	'.debug_abbrev'
.L360:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,11,1,85,6,0
	.byte	0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_ClearQueue')
	.sect	'.debug_line'
.L361:
	.word	.L982-.L981
.L981:
	.half	3
	.word	.L984-.L983
.L983:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L984:
	.byte	5,3,7,0,5,2
	.word	.L227
	.byte	3,226,13,1,5,31,9
	.half	.L985-.L227
	.byte	3,2,1,5,108,9
	.half	.L601-.L985
	.byte	3,19,1,5,31,3,109,1,5,203,1,9
	.half	.L689-.L601
	.byte	3,19,1,5,11,3,112,1,5,22,9
	.half	.L603-.L689
	.byte	3,1,1,5,120,9
	.half	.L604-.L603
	.byte	3,124,1,5,22,9
	.half	.L605-.L604
	.byte	3,4,1,5,182,1,9
	.half	.L606-.L605
	.byte	3,124,1,5,11,9
	.half	.L7-.L606
	.byte	3,3,1,5,22,9
	.half	.L690-.L7
	.byte	3,1,1,5,13,9
	.half	.L986-.L690
	.byte	3,2,1,5,22,9
	.half	.L987-.L986
	.byte	3,126,1,5,5,9
	.half	.L692-.L987
	.byte	3,2,1,5,32,7,9
	.half	.L988-.L692
	.byte	3,13,1,5,22,9
	.half	.L989-.L988
	.byte	3,2,1,5,32,9
	.half	.L990-.L989
	.byte	3,126,1,5,22,9
	.half	.L693-.L990
	.byte	3,2,1,5,11,9
	.half	.L991-.L693
	.byte	3,1,1,5,203,1,9
	.half	.L992-.L991
	.byte	3,125,1,5,22,9
	.half	.L10-.L992
	.byte	3,2,1,5,220,1,9
	.half	.L993-.L10
	.byte	3,126,1,5,11,9
	.half	.L994-.L993
	.byte	3,3,1,5,90,9
	.half	.L995-.L994
	.byte	1,5,128,1,9
	.half	.L9-.L995
	.byte	3,125,1,5,203,1,9
	.half	.L996-.L9
	.byte	1,5,27,7,9
	.half	.L997-.L996
	.byte	3,5,1,5,9,9
	.half	.L998-.L997
	.byte	3,3,1,5,205,1,9
	.half	.L8-.L998
	.byte	3,101,1,5,182,1,9
	.half	.L6-.L8
	.byte	1,5,3,7,9
	.half	.L999-.L6
	.byte	3,196,0,1,5,1,7,9
	.half	.L363-.L999
	.byte	3,1,0,1,1
.L982:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_ClearQueue')
	.sect	'.debug_ranges'
.L362:
	.word	-1,.L227,0,.L363-.L227,0,0
.L600:
	.word	-1,.L227,.L601-.L227,.L602-.L227,.L603-.L227,.L604-.L227,.L605-.L227,.L606-.L227,.L7-.L227,.L8-.L227,0
	.word	0
	.sdecl	'.debug_info',debug,cluster('CanIf_SetPrioByCanIdTxPduAsQueued')
	.sect	'.debug_info'
.L364:
	.word	272
	.half	3
	.word	.L365
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L367,.L366
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_SetPrioByCanIdTxPduAsQueued',0,1,152,12,53
	.word	.L518
	.byte	1,1
	.word	.L207,.L608,.L206
	.byte	4
	.byte	'PduId',0,1,152,12,97
	.word	.L518,.L609
	.byte	5
	.word	.L610
	.byte	6
	.byte	'txBufferCfgIdx',0,1,160,12,20
	.word	.L562,.L611
	.byte	6
	.byte	'retval',0,1,161,12,18
	.word	.L518,.L612
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_SetPrioByCanIdTxPduAsQueued')
	.sect	'.debug_abbrev'
.L365:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_SetPrioByCanIdTxPduAsQueued')
	.sect	'.debug_line'
.L366:
	.word	.L1001-.L1000
.L1000:
	.half	3
	.word	.L1003-.L1002
.L1002:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1003:
	.byte	5,25,7,0,5,2
	.word	.L207
	.byte	3,160,12,1,5,3,9
	.half	.L684-.L207
	.byte	3,29,1,5,82,7,9
	.half	.L1004-.L684
	.byte	3,3,1,5,5,9
	.half	.L685-.L1004
	.byte	3,1,1,5,12,9
	.half	.L1005-.L685
	.byte	3,1,1,5,1,9
	.half	.L2-.L1005
	.byte	3,13,1,7,9
	.half	.L368-.L2
	.byte	0,1,1
.L1001:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_SetPrioByCanIdTxPduAsQueued')
	.sect	'.debug_ranges'
.L367:
	.word	-1,.L207,0,.L368-.L207,0,0
.L610:
	.word	-1,.L207,0,.L608-.L207,-1,.L209,0,.L448-.L209,-1,.L211,0,.L488-.L211,-1,.L213,0,.L438-.L213,-1,.L215,0
	.word	.L493-.L215,-1,.L217,0,.L483-.L217,-1,.L219,0,.L498-.L219,-1,.L221,0,.L478-.L221,-1,.L223,0,.L503-.L223
	.word	0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_ClearPrioByCanIdTxPduAsQueued')
	.sect	'.debug_info'
.L369:
	.word	278
	.half	3
	.word	.L370
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L372,.L371
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_ClearPrioByCanIdTxPduAsQueued',0,1,240,12,53
	.word	.L518
	.byte	1,1
	.word	.L225,.L613,.L224
	.byte	4
	.byte	'PduId',0,1,240,12,99
	.word	.L518,.L614
	.byte	5
	.word	.L225,.L613
	.byte	6
	.byte	'txBufferCfgIdx',0,1,248,12,20
	.word	.L562,.L615
	.byte	6
	.byte	'retval',0,1,249,12,18
	.word	.L518,.L616
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_ClearPrioByCanIdTxPduAsQueued')
	.sect	'.debug_abbrev'
.L370:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_ClearPrioByCanIdTxPduAsQueued')
	.sect	'.debug_line'
.L371:
	.word	.L1007-.L1006
.L1006:
	.half	3
	.word	.L1009-.L1008
.L1008:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1009:
	.byte	5,25,7,0,5,2
	.word	.L225
	.byte	3,248,12,1,5,3,9
	.half	.L687-.L225
	.byte	3,29,1,5,84,7,9
	.half	.L1010-.L687
	.byte	3,3,1,5,82,1,5,5,9
	.half	.L688-.L1010
	.byte	3,1,1,5,1,9
	.half	.L4-.L688
	.byte	3,14,1,7,9
	.half	.L373-.L4
	.byte	0,1,1
.L1007:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_ClearPrioByCanIdTxPduAsQueued')
	.sect	'.debug_ranges'
.L372:
	.word	-1,.L225,0,.L373-.L225,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_HlIndication')
	.sect	'.debug_info'
.L374:
	.word	292
	.half	3
	.word	.L375
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L377,.L376
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_HlIndication',0,1,171,37,36,1,1
	.word	.L275,.L617,.L274
	.byte	4
	.byte	'Hrh',0,1,171,37,75
	.word	.L518,.L618
	.byte	4
	.byte	'PduId',0,1,171,37,90
	.word	.L518,.L619
	.byte	4
	.byte	'CanSduPtr',0,1,171,37,142,1
	.word	.L569,.L620
	.byte	4
	.byte	'CanDlc',0,1,171,37,159,1
	.word	.L518,.L621
	.byte	5
	.word	.L275,.L617
	.byte	6
	.byte	'errorId',0,1,175,37,9
	.word	.L518,.L622
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_HlIndication')
	.sect	'.debug_abbrev'
.L375:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_HlIndication')
	.sect	'.debug_line'
.L376:
	.word	.L1012-.L1011
.L1011:
	.half	3
	.word	.L1014-.L1013
.L1013:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1014:
	.byte	5,17,7,0,5,2
	.word	.L275
	.byte	3,174,37,1,5,7,3,21,1,5,3,9
	.half	.L1015-.L275
	.byte	1,5,13,7,9
	.half	.L1016-.L1015
	.byte	3,3,1,5,29,1,5,5,9
	.half	.L133-.L1016
	.byte	3,9,1,5,13,7,9
	.half	.L1017-.L133
	.byte	3,16,1,5,12,9
	.half	.L1018-.L1017
	.byte	1,5,64,7,9
	.half	.L1019-.L1018
	.byte	3,1,1,7,9
	.half	.L1020-.L1019
	.byte	3,1,1,5,22,7,9
	.half	.L136-.L1020
	.byte	3,10,1,5,9,9
	.half	.L1021-.L136
	.byte	1,5,19,7,9
	.half	.L1022-.L1021
	.byte	3,4,1,5,40,1,5,18,9
	.half	.L139-.L1022
	.byte	3,210,0,1,5,13,9
	.half	.L1023-.L139
	.byte	1,5,23,7,9
	.half	.L1024-.L1023
	.byte	3,2,1,5,39,1,5,61,9
	.half	.L141-.L1024
	.byte	3,13,1,5,3,9
	.half	.L134-.L141
	.byte	3,14,1,5,5,7,9
	.half	.L1025-.L134
	.byte	3,2,1,5,1,9
	.half	.L143-.L1025
	.byte	3,6,1,7,9
	.half	.L378-.L143
	.byte	0,1,1
.L1012:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_HlIndication')
	.sect	'.debug_ranges'
.L377:
	.word	-1,.L275,0,.L378-.L275,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_HlTxConfirmation')
	.sect	'.debug_info'
.L379:
	.word	299
	.half	3
	.word	.L380
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L382,.L381
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_HlTxConfirmation',0,1,254,26,36,1,1
	.word	.L257,.L623,.L256
	.byte	4
	.byte	'CanTxPduId',0,1,254,26,69
	.word	.L518,.L624
	.byte	5
	.word	.L257,.L623
	.byte	6
	.byte	'index',0,1,131,27,30
	.word	.L518,.L625
	.byte	6
	.byte	'upperLayerTxPduId',0,1,132,27,13
	.word	.L518,.L626
	.byte	6
	.byte	'txConfirmationFct',0,1,133,27,31
	.word	.L627,.L628
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_HlTxConfirmation')
	.sect	'.debug_abbrev'
.L380:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_HlTxConfirmation')
	.sect	'.debug_line'
.L381:
	.word	.L1027-.L1026
.L1026:
	.half	3
	.word	.L1029-.L1028
.L1028:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1029:
	.byte	5,11,7,0,5,2
	.word	.L257
	.byte	3,137,27,1,5,23,9
	.half	.L735-.L257
	.byte	3,3,1,9
	.half	.L734-.L735
	.byte	3,2,1,5,3,9
	.half	.L736-.L734
	.byte	3,2,1,5,25,7,9
	.half	.L1030-.L736
	.byte	3,3,1,5,1,7,9
	.half	.L89-.L1030
	.byte	3,2,1,7,9
	.half	.L383-.L89
	.byte	0,1,1
.L1027:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_HlTxConfirmation')
	.sect	'.debug_ranges'
.L382:
	.word	-1,.L257,0,.L383-.L257,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_TransmitSubVerifyPduLength')
	.sect	'.debug_info'
.L384:
	.word	279
	.half	3
	.word	.L385
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L387,.L386
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_TransmitSubVerifyPduLength',0,1,220,19,62
	.word	.L629
	.byte	1,1
	.word	.L241,.L630,.L240
	.byte	4
	.byte	'CanTxPduId',0,1,220,19,123
	.word	.L631,.L632
	.byte	4
	.byte	'localPduPtr',0,1,220,19,176,1
	.word	.L633,.L634
	.byte	5
	.word	.L241,.L630
	.byte	6
	.byte	'txState',0,1,223,19,27
	.word	.L629,.L635
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_TransmitSubVerifyPduLength')
	.sect	'.debug_abbrev'
.L385:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_TransmitSubVerifyPduLength')
	.sect	'.debug_line'
.L386:
	.word	.L1032-.L1031
.L1031:
	.half	3
	.word	.L1034-.L1033
.L1033:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1034:
	.byte	5,35,7,0,5,2
	.word	.L241
	.byte	3,222,19,1,5,28,3,12,1,5,17,9
	.half	.L1035-.L241
	.byte	1,5,3,9
	.half	.L1036-.L1035
	.byte	1,5,8,7,9
	.half	.L1037-.L1036
	.byte	3,3,1,5,5,9
	.half	.L1038-.L1037
	.byte	1,5,27,7,9
	.half	.L1039-.L1038
	.byte	3,3,1,5,1,9
	.half	.L52-.L1039
	.byte	3,11,1,5,15,7,9
	.half	.L53-.L52
	.byte	3,123,1,5,1,3,5,1,7,9
	.half	.L388-.L53
	.byte	0,1,1
.L1032:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_TransmitSubVerifyPduLength')
	.sect	'.debug_ranges'
.L387:
	.word	-1,.L241,0,.L388-.L241,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_TransmitSubHandleTxResBusy')
	.sect	'.debug_info'
.L389:
	.word	292
	.half	3
	.word	.L390
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L392,.L391
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_TransmitSubHandleTxResBusy',0,1,220,22,54
	.word	.L518
	.byte	1,1
	.word	.L247,.L636,.L246
	.byte	4
	.byte	'localPduPtr',0,1,220,22,130,1
	.word	.L637,.L638
	.byte	5
	.word	.L247,.L636
	.byte	6
	.byte	'retval',0,1,223,22,18
	.word	.L518,.L639
	.byte	6
	.byte	'hth',0,1,224,22,20
	.word	.L562,.L640
	.byte	6
	.byte	'errorId',0,1,225,22,9
	.word	.L518,.L641
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_TransmitSubHandleTxResBusy')
	.sect	'.debug_abbrev'
.L390:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_TransmitSubHandleTxResBusy')
	.sect	'.debug_line'
.L391:
	.word	.L1041-.L1040
.L1040:
	.half	3
	.word	.L1043-.L1042
.L1042:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1043:
	.byte	5,54,7,0,5,2
	.word	.L247
	.byte	3,219,22,1,5,9,9
	.half	.L719-.L247
	.byte	3,16,1,5,11,9
	.half	.L1044-.L719
	.byte	3,126,1,5,9,9
	.half	.L718-.L1044
	.byte	3,2,1,5,7,9
	.half	.L716-.L718
	.byte	3,2,1,5,10,9
	.half	.L717-.L716
	.byte	3,125,1,5,7,9
	.half	.L720-.L717
	.byte	3,3,1,5,3,9
	.half	.L1045-.L720
	.byte	1,5,21,7,9
	.half	.L1046-.L1045
	.byte	3,5,1,5,9,9
	.half	.L1047-.L1046
	.byte	1,5,55,7,9
	.half	.L1048-.L1047
	.byte	1,5,64,9
	.half	.L1049-.L1048
	.byte	1,5,15,7,9
	.half	.L1050-.L1049
	.byte	3,2,1,5,38,1,5,15,9
	.half	.L57-.L1050
	.byte	3,8,1,5,7,9
	.half	.L1051-.L57
	.byte	1,5,37,7,9
	.half	.L1052-.L1051
	.byte	3,7,1,5,25,9
	.half	.L1053-.L1052
	.byte	1,5,37,9
	.half	.L1054-.L1053
	.byte	1,5,11,9
	.half	.L1055-.L1054
	.byte	1,5,47,7,9
	.half	.L1056-.L1055
	.byte	3,6,1,5,64,9
	.half	.L715-.L1056
	.byte	3,3,1,5,20,9
	.half	.L1057-.L715
	.byte	3,1,1,5,59,3,124,1,5,21,9
	.half	.L61-.L1057
	.byte	3,10,1,5,3,9
	.half	.L59-.L61
	.byte	3,225,0,1,5,5,7,9
	.half	.L1058-.L59
	.byte	3,2,1,5,3,9
	.half	.L63-.L1058
	.byte	3,5,1,5,1,3,1,1,7,9
	.half	.L393-.L63
	.byte	0,1,1
.L1041:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_TransmitSubHandleTxResBusy')
	.sect	'.debug_ranges'
.L392:
	.word	-1,.L247,0,.L393-.L247,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_RxIndicationSubLinearSearch')
	.sect	'.debug_info'
.L394:
	.word	233
	.half	3
	.word	.L395
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L397,.L396
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_RxIndicationSubLinearSearch',0,1,220,31,43,1,1
	.word	.L263,.L642,.L262
	.byte	4
	.byte	'rxSearchParams',0,1,220,31,131,1
	.word	.L643,.L644
	.byte	5
	.word	.L263,.L642
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_RxIndicationSubLinearSearch')
	.sect	'.debug_abbrev'
.L395:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_RxIndicationSubLinearSearch')
	.sect	'.debug_line'
.L396:
	.word	.L1060-.L1059
.L1059:
	.half	3
	.word	.L1062-.L1061
.L1061:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1062:
	.byte	5,12,7,0,5,2
	.word	.L263
	.byte	3,229,31,1,5,96,9
	.half	.L1063-.L263
	.byte	1,5,9,9
	.half	.L100-.L1063
	.byte	3,3,1,5,71,9
	.half	.L1064-.L100
	.byte	1,5,9,9
	.half	.L1065-.L1064
	.byte	1,5,5,9
	.half	.L1066-.L1065
	.byte	1,5,39,7,9
	.half	.L1067-.L1066
	.byte	3,8,1,5,9,9
	.half	.L1068-.L1067
	.byte	3,2,1,5,10,9
	.half	.L101-.L1068
	.byte	3,4,1,5,5,9
	.half	.L1069-.L101
	.byte	1,5,41,7,9
	.half	.L102-.L1069
	.byte	3,3,1,5,39,1,5,1,9
	.half	.L1070-.L102
	.byte	3,8,1,5,31,7,9
	.half	.L103-.L1070
	.byte	3,125,1,5,12,9
	.half	.L99-.L103
	.byte	3,103,1,5,96,9
	.half	.L1071-.L99
	.byte	1,5,1,7,9
	.half	.L1072-.L1071
	.byte	3,28,1,7,9
	.half	.L398-.L1072
	.byte	0,1,1
.L1060:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_RxIndicationSubLinearSearch')
	.sect	'.debug_ranges'
.L397:
	.word	-1,.L263,0,.L398-.L263,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_RxIndicationSubReceptionPduMode')
	.sect	'.debug_info'
.L399:
	.word	241
	.half	3
	.word	.L400
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L402,.L401
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_RxIndicationSubReceptionPduMode',0,1,157,32,60
	.word	.L645
	.byte	1,1
	.word	.L265,.L646,.L264
	.byte	4
	.byte	'rxSearchParams',0,1,157,32,152,1
	.word	.L643,.L647
	.byte	5
	.word	.L265,.L646
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_RxIndicationSubReceptionPduMode')
	.sect	'.debug_abbrev'
.L400:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_RxIndicationSubReceptionPduMode')
	.sect	'.debug_line'
.L401:
	.word	.L1074-.L1073
.L1073:
	.half	3
	.word	.L1076-.L1075
.L1075:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1076:
	.byte	5,55,7,0,5,2
	.word	.L265
	.byte	3,175,32,1,5,39,9
	.half	.L1077-.L265
	.byte	1,5,10,9
	.half	.L1078-.L1077
	.byte	3,13,1,5,1,3,1,1,7,9
	.half	.L403-.L1078
	.byte	0,1,1
.L1074:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_RxIndicationSubReceptionPduMode')
	.sect	'.debug_ranges'
.L402:
	.word	-1,.L265,0,.L403-.L265,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_RxIndicationSubRangeSearch')
	.sect	'.debug_info'
.L404:
	.word	232
	.half	3
	.word	.L405
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L407,.L406
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_RxIndicationSubRangeSearch',0,1,219,32,43,1,1
	.word	.L267,.L648,.L266
	.byte	4
	.byte	'rxSearchParams',0,1,219,32,130,1
	.word	.L643,.L649
	.byte	5
	.word	.L267,.L648
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_RxIndicationSubRangeSearch')
	.sect	'.debug_abbrev'
.L405:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_RxIndicationSubRangeSearch')
	.sect	'.debug_line'
.L406:
	.word	.L1080-.L1079
.L1079:
	.half	3
	.word	.L1082-.L1081
.L1081:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1082:
	.byte	5,98,7,0,5,2
	.word	.L267
	.byte	3,221,32,1,5,11,1,5,74,9
	.half	.L1083-.L267
	.byte	1,5,43,3,125,1,5,11,9
	.half	.L744-.L1083
	.byte	3,3,1,5,114,9
	.half	.L1084-.L744
	.byte	1,5,38,9
	.half	.L107-.L1084
	.byte	3,17,1,5,26,9
	.half	.L1085-.L107
	.byte	1,5,38,9
	.half	.L1086-.L1085
	.byte	1,5,11,9
	.half	.L1087-.L1086
	.byte	1,5,116,7,9
	.half	.L1088-.L1087
	.byte	1,5,160,1,9
	.half	.L1089-.L1088
	.byte	1,5,111,9
	.half	.L1090-.L1089
	.byte	1,5,51,7,9
	.half	.L1091-.L1090
	.byte	3,3,1,5,9,9
	.half	.L746-.L1091
	.byte	1,5,19,7,9
	.half	.L108-.L746
	.byte	3,6,1,5,29,9
	.half	.L1092-.L108
	.byte	1,5,11,9
	.half	.L106-.L1092
	.byte	3,102,1,5,55,9
	.half	.L1093-.L106
	.byte	1,5,114,9
	.half	.L1094-.L1093
	.byte	1,5,8,7,9
	.half	.L110-.L1094
	.byte	3,30,1,5,52,9
	.half	.L1095-.L110
	.byte	1,5,3,9
	.half	.L1096-.L1095
	.byte	1,5,26,7,9
	.half	.L1097-.L1096
	.byte	3,16,1,5,38,9
	.half	.L1098-.L1097
	.byte	1,5,11,9
	.half	.L1099-.L1098
	.byte	1,5,160,1,7,9
	.half	.L1100-.L1099
	.byte	1,5,111,9
	.half	.L1101-.L1100
	.byte	1,5,53,7,9
	.half	.L1102-.L1101
	.byte	3,3,1,5,1,9
	.half	.L111-.L1102
	.byte	3,4,1,7,9
	.half	.L408-.L111
	.byte	0,1,1
.L1080:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_RxIndicationSubRangeSearch')
	.sect	'.debug_ranges'
.L407:
	.word	-1,.L267,0,.L408-.L267,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_TransmitSubWrite')
	.sect	'.debug_info'
.L409:
	.word	265
	.half	3
	.word	.L410
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L412,.L411
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_TransmitSubWrite',0,1,155,24,54
	.word	.L518
	.byte	1,1
	.word	.L249,.L650,.L248
	.byte	4
	.byte	'localPduPtr',0,1,155,24,120
	.word	.L637,.L651
	.byte	5
	.word	.L249,.L650
	.byte	6
	.byte	'retval',0,1,157,24,19
	.word	.L518,.L652
	.byte	6
	.byte	'txResult',0,1,158,24,18
	.word	.L591,.L653
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_TransmitSubWrite')
	.sect	'.debug_abbrev'
.L410:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_TransmitSubWrite')
	.sect	'.debug_line'
.L411:
	.word	.L1104-.L1103
.L1103:
	.half	3
	.word	.L1106-.L1105
.L1105:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1106:
	.byte	5,54,7,0,5,2
	.word	.L249
	.byte	3,154,24,1,5,46,9
	.half	.L722-.L249
	.byte	3,30,1,5,140,1,9
	.half	.L1107-.L722
	.byte	1,5,3,9
	.half	.L721-.L1107
	.byte	3,3,1,5,47,7,9
	.half	.L1108-.L721
	.byte	3,5,1,5,8,9
	.half	.L65-.L1108
	.byte	3,5,1,5,12,7,9
	.half	.L1109-.L65
	.byte	3,3,1,5,1,3,18,1,5,8,7,9
	.half	.L67-.L1109
	.byte	3,119,1,5,5,9
	.half	.L1110-.L67
	.byte	1,5,60,7,9
	.half	.L1111-.L1110
	.byte	3,2,1,5,12,9
	.half	.L69-.L1111
	.byte	3,4,1,5,1,3,3,1,7,9
	.half	.L413-.L69
	.byte	0,1,1
.L1104:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_TransmitSubWrite')
	.sect	'.debug_ranges'
.L412:
	.word	-1,.L249,0,.L413-.L249,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_RxIndicationSubBasicCan')
	.sect	'.debug_info'
.L414:
	.word	228
	.half	3
	.word	.L415
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L417,.L416
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_RxIndicationSubBasicCan',0,1,218,33,43,1,1
	.word	.L269,.L654,.L268
	.byte	4
	.byte	'rxSearchParams',0,1,218,33,127
	.word	.L643,.L655
	.byte	5
	.word	.L269,.L654
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_RxIndicationSubBasicCan')
	.sect	'.debug_abbrev'
.L415:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_RxIndicationSubBasicCan')
	.sect	'.debug_line'
.L416:
	.word	.L1113-.L1112
.L1112:
	.half	3
	.word	.L1115-.L1114
.L1114:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1115:
	.byte	5,37,7,0,5,2
	.word	.L269
	.byte	3,219,33,1,5,43,3,126,1,5,35,9
	.half	.L748-.L269
	.byte	3,2,1,5,7,9
	.half	.L1116-.L748
	.byte	3,2,1,5,3,9
	.half	.L1117-.L1116
	.byte	1,5,39,7,9
	.half	.L1118-.L1117
	.byte	3,14,1,5,21,9
	.half	.L114-.L1118
	.byte	3,41,1,5,3,9
	.half	.L1119-.L114
	.byte	1,5,38,7,9
	.half	.L1120-.L1119
	.byte	3,2,1,5,1,9
	.half	.L115-.L1120
	.byte	3,2,1,7,9
	.half	.L418-.L115
	.byte	0,1,1
.L1113:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_RxIndicationSubBasicCan')
	.sect	'.debug_ranges'
.L417:
	.word	-1,.L269,0,.L418-.L269,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_HlIndicationSubULCall')
	.sect	'.debug_info'
.L419:
	.word	342
	.half	3
	.word	.L420
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L422,.L421
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_HlIndicationSubULCall',0,1,162,36,43,1,1
	.word	.L273,.L656,.L272
	.byte	4
	.byte	'PduId',0,1,162,36,81
	.word	.L518,.L657
	.byte	4
	.byte	'CanSduPtr',0,1,162,36,133,1
	.word	.L569,.L658
	.byte	4
	.byte	'CanDlc',0,1,162,36,150,1
	.word	.L518,.L659
	.byte	5
	.word	.L273,.L656
	.byte	6
	.byte	'index',0,1,165,36,29
	.word	.L518,.L660
	.byte	5
	.word	.L661,.L131
	.byte	6
	.byte	'rxIndicationFct',0,1,230,36,39
	.word	.L662,.L663
	.byte	6
	.byte	'pduinfo',0,1,231,36,17
	.word	.L664,.L665
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_HlIndicationSubULCall')
	.sect	'.debug_abbrev'
.L420:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_HlIndicationSubULCall')
	.sect	'.debug_line'
.L421:
	.word	.L1122-.L1121
.L1121:
	.half	3
	.word	.L1124-.L1123
.L1123:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1124:
	.byte	5,11,7,0,5,2
	.word	.L273
	.byte	3,165,36,1,5,7,9
	.half	.L1125-.L273
	.byte	3,61,1,5,11,9
	.half	.L1126-.L1125
	.byte	3,67,1,5,7,9
	.half	.L768-.L1126
	.byte	3,61,1,5,43,9
	.half	.L1127-.L768
	.byte	3,191,127,1,5,7,9
	.half	.L765-.L1127
	.byte	3,193,0,1,5,3,9
	.half	.L769-.L765
	.byte	1,5,24,7,9
	.half	.L661-.L769
	.byte	3,7,1,5,23,9
	.half	.L1128-.L661
	.byte	3,2,1,5,61,9
	.half	.L1129-.L1128
	.byte	3,2,1,5,5,9
	.half	.L770-.L1129
	.byte	3,1,1,5,23,7,9
	.half	.L1130-.L770
	.byte	3,5,1,5,112,9
	.half	.L767-.L1130
	.byte	1,5,55,9
	.half	.L766-.L767
	.byte	1,5,1,7,9
	.half	.L131-.L766
	.byte	3,3,1,7,9
	.half	.L423-.L131
	.byte	0,1,1
.L1122:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_HlIndicationSubULCall')
	.sect	'.debug_ranges'
.L422:
	.word	-1,.L273,0,.L423-.L273,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_SetControllerModeSubSwitch')
	.sect	'.debug_info'
.L424:
	.word	253
	.half	3
	.word	.L425
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L427,.L426
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_SetControllerModeSubSwitch',0,1,130,17,53
	.word	.L518
	.byte	1,1
	.word	.L231,.L666,.L230
	.byte	4
	.byte	'ControllerMode',0,1,130,17,139,1
	.word	.L521,.L667
	.byte	5
	.word	.L668
	.byte	6
	.byte	'retval',0,1,132,17,18
	.word	.L518,.L669
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_SetControllerModeSubSwitch')
	.sect	'.debug_abbrev'
.L425:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_SetControllerModeSubSwitch')
	.sect	'.debug_line'
.L426:
	.word	.L1132-.L1131
.L1131:
	.half	3
	.word	.L1134-.L1133
.L1133:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1134:
	.byte	5,10,7,0,5,2
	.word	.L231
	.byte	3,137,17,1,9
	.half	.L701-.L231
	.byte	3,5,1,7,9
	.half	.L1135-.L701
	.byte	3,46,1,7,9
	.half	.L1136-.L1135
	.byte	3,29,1,7,9
	.half	.L1137-.L1136
	.byte	1,5,14,9
	.half	.L11-.L1137
	.byte	3,184,127,1,9
	.half	.L1138-.L11
	.byte	3,28,1,7,9
	.half	.L1139-.L1138
	.byte	3,112,1,7,9
	.half	.L1140-.L1139
	.byte	3,118,1,5,33,9
	.half	.L1141-.L1140
	.byte	3,4,1,5,103,1,5,11,9
	.half	.L695-.L1141
	.byte	1,7,9
	.half	.L1142-.L695
	.byte	3,4,1,5,33,9
	.half	.L16-.L1142
	.byte	3,6,1,5,103,9
	.half	.L696-.L16
	.byte	1,5,11,9
	.half	.L1143-.L696
	.byte	1,5,29,7,9
	.half	.L1144-.L1143
	.byte	3,5,1,5,11,9
	.half	.L1145-.L1144
	.byte	3,4,1,5,33,9
	.half	.L15-.L1145
	.byte	3,6,1,5,103,9
	.half	.L697-.L15
	.byte	1,5,11,9
	.half	.L1146-.L697
	.byte	1,5,7,7,9
	.half	.L1147-.L1146
	.byte	3,11,1,5,14,9
	.half	.L12-.L1147
	.byte	3,5,1,9
	.half	.L1148-.L12
	.byte	3,2,1,7,9
	.half	.L1149-.L1148
	.byte	3,9,1,7,9
	.half	.L1150-.L1149
	.byte	1,5,33,9
	.half	.L25-.L1150
	.byte	3,122,1,5,103,9
	.half	.L698-.L25
	.byte	1,5,11,9
	.half	.L1151-.L698
	.byte	1,7,9
	.half	.L1152-.L1151
	.byte	3,4,1,5,33,9
	.half	.L26-.L1152
	.byte	3,5,1,5,103,9
	.half	.L699-.L26
	.byte	1,5,11,9
	.half	.L1153-.L699
	.byte	1,5,7,7,9
	.half	.L1154-.L1153
	.byte	3,10,1,5,14,9
	.half	.L13-.L1154
	.byte	3,6,1,9
	.half	.L1155-.L13
	.byte	3,2,1,7,9
	.half	.L1156-.L1155
	.byte	3,15,1,5,33,7,9
	.half	.L32-.L1156
	.byte	3,1,1,5,103,9
	.half	.L700-.L32
	.byte	1,5,11,9
	.half	.L1157-.L700
	.byte	1,5,20,7,9
	.half	.L20-.L1157
	.byte	3,2,1,5,7,3,9,1,9
	.half	.L14-.L20
	.byte	3,4,1,5,5,9
	.half	.L18-.L14
	.byte	3,4,1,5,1,3,1,1,7,9
	.half	.L428-.L18
	.byte	0,1,1
.L1132:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_SetControllerModeSubSwitch')
	.sect	'.debug_ranges'
.L427:
	.word	-1,.L231,0,.L428-.L231,0,0
.L668:
	.word	-1,.L231,0,.L666-.L231,-1,.L233,0,.L463-.L233,-1,.L235,0,.L443-.L235,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_TxBufferPrioByCanIdQueuePdu')
	.sect	'.debug_info'
.L429:
	.word	225
	.half	3
	.word	.L430
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L432,.L431
	.byte	2
	.word	.L290
	.byte	3
	.byte	'CanIf_TxBufferPrioByCanIdQueuePdu',0,1,255,21,43,1,1
	.word	.L243,.L670,.L242
	.byte	4
	.byte	'PduInfoPtr',0,1,255,21,128,1
	.word	.L637,.L671
	.byte	5
	.word	.L672
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_TxBufferPrioByCanIdQueuePdu')
	.sect	'.debug_abbrev'
.L430:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanIf_TxBufferPrioByCanIdQueuePdu')
	.sect	'.debug_line'
.L431:
	.word	.L1159-.L1158
.L1158:
	.half	3
	.word	.L1161-.L1160
.L1160:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1161:
	.byte	5,33,7,0,5,2
	.word	.L243
	.byte	3,129,22,1,5,3,9
	.half	.L1162-.L243
	.byte	3,12,1,5,100,9
	.half	.L1163-.L1162
	.byte	1,5,88,9
	.half	.L1164-.L1163
	.byte	1,5,3,9
	.half	.L1165-.L1164
	.byte	3,5,1,5,1,9
	.half	.L433-.L1165
	.byte	3,14,0,1,1
.L1159:
	.sdecl	'.debug_ranges',debug,cluster('CanIf_TxBufferPrioByCanIdQueuePdu')
	.sect	'.debug_ranges'
.L432:
	.word	-1,.L243,0,.L433-.L243,0,0
.L672:
	.word	-1,.L243,0,.L670-.L243,-1,.L245,0,.L453-.L245,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_1')
	.sect	'.debug_info'
.L434:
	.word	170
	.half	3
	.word	.L435
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L437,.L436
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_1',0,1,152,12,53,1
	.word	.L213,.L438,.L212
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_1')
	.sect	'.debug_abbrev'
.L435:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_1')
	.sect	'.debug_line'
.L436:
	.word	.L1167-.L1166
.L1166:
	.half	3
	.word	.L1169-.L1168
.L1168:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1169:
	.byte	5,25,7,0,5,2
	.word	.L213
	.byte	3,160,12,1,5,20,3,2,1,5,7,9
	.half	.L683-.L213
	.byte	3,27,1,9
	.half	.L438-.L683
	.byte	0,1,1,5,25,0,5,2
	.word	.L213
	.byte	3,248,12,1,5,20,3,170,127,1,9
	.half	.L682-.L213
	.byte	3,216,0,1,5,7,9
	.half	.L683-.L682
	.byte	3,67,1,9
	.half	.L1170-.L683
	.byte	3,216,0,1,9
	.half	.L1171-.L1170
	.byte	3,168,127,1,7,9
	.half	.L438-.L1171
	.byte	0,1,1
.L1167:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_1')
	.sect	'.debug_ranges'
.L437:
	.word	-1,.L213,0,.L438-.L213,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L439:
	.word	170
	.half	3
	.word	.L440
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L442,.L441
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_2',0,1,130,17,53,1
	.word	.L235,.L443,.L234
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L440:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L441:
	.word	.L1173-.L1172
.L1172:
	.half	3
	.word	.L1175-.L1174
.L1174:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1175:
	.byte	5,7,7,0,5,2
	.word	.L235
	.byte	3,255,17,1,9
	.half	.L443-.L235
	.byte	0,1,1,5,5,0,5,2
	.word	.L235
	.byte	3,225,18,1,5,7,9
	.half	.L702-.L235
	.byte	3,158,127,1,7,9
	.half	.L443-.L702
	.byte	0,1,1,5,5,0,5,2
	.word	.L235
	.byte	3,186,19,1,5,7,9
	.half	.L702-.L235
	.byte	3,197,126,1,7,9
	.half	.L443-.L702
	.byte	0,1,1,5,5,0,5,2
	.word	.L235
	.byte	3,246,23,1,5,7,9
	.half	.L702-.L235
	.byte	3,137,122,1,7,9
	.half	.L443-.L702
	.byte	0,1,1,5,5,0,5,2
	.word	.L235
	.byte	3,223,26,1,5,7,9
	.half	.L702-.L235
	.byte	3,160,119,1,7,9
	.half	.L443-.L702
	.byte	0,1,1,5,5,0,5,2
	.word	.L235
	.byte	3,165,28,1,5,7,9
	.half	.L702-.L235
	.byte	3,218,117,1,7,9
	.half	.L443-.L702
	.byte	0,1,1,5,5,0,5,2
	.word	.L235
	.byte	3,252,35,1,5,7,9
	.half	.L702-.L235
	.byte	3,131,110,1,7,9
	.half	.L443-.L702
	.byte	0,1,1,5,5,0,5,2
	.word	.L235
	.byte	3,224,38,1,5,7,9
	.half	.L702-.L235
	.byte	3,159,107,1,7,9
	.half	.L443-.L702
	.byte	0,1,1,5,5,0,5,2
	.word	.L235
	.byte	3,229,39,1,5,7,9
	.half	.L702-.L235
	.byte	3,154,106,1,7,9
	.half	.L443-.L702
	.byte	0,1,1,5,5,0,5,2
	.word	.L235
	.byte	3,133,41,1,5,7,9
	.half	.L702-.L235
	.byte	3,250,104,1,7,9
	.half	.L443-.L702
	.byte	0,1,1,5,5,0,5,2
	.word	.L235
	.byte	3,223,41,1,5,7,9
	.half	.L702-.L235
	.byte	3,160,104,1,7,9
	.half	.L443-.L702
	.byte	0,1,1,5,5,0,5,2
	.word	.L235
	.byte	3,143,43,1,5,7,9
	.half	.L702-.L235
	.byte	3,240,102,1,7,9
	.half	.L443-.L702
	.byte	0,1,1,5,5,0,5,2
	.word	.L235
	.byte	3,132,193,0,1,5,7,9
	.half	.L702-.L235
	.byte	3,251,80,1,7,9
	.half	.L443-.L702
	.byte	0,1,1
.L1173:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L442:
	.word	-1,.L235,0,.L443-.L235,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L444:
	.word	170
	.half	3
	.word	.L445
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L447,.L446
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_3',0,1,152,12,53,1
	.word	.L209,.L448,.L208
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L445:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L446:
	.word	.L1177-.L1176
.L1176:
	.half	3
	.word	.L1179-.L1178
.L1178:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1179:
	.byte	5,82,7,0,5,2
	.word	.L209
	.byte	3,192,12,1,5,5,9
	.half	.L1180-.L209
	.byte	3,1,1,9
	.half	.L448-.L1180
	.byte	0,1,1,5,82,0,5,2
	.word	.L209
	.byte	3,152,13,1,5,5,9
	.half	.L1180-.L209
	.byte	3,169,127,1,9
	.half	.L686-.L1180
	.byte	3,216,0,1,9
	.half	.L1181-.L686
	.byte	3,168,127,1,7,9
	.half	.L448-.L1181
	.byte	0,1,1
.L1177:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L447:
	.word	-1,.L209,0,.L448-.L209,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L449:
	.word	170
	.half	3
	.word	.L450
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L452,.L451
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_4',0,1,255,21,43,1
	.word	.L245,.L453,.L244
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L450:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L451:
	.word	.L1183-.L1182
.L1182:
	.half	3
	.word	.L1185-.L1184
.L1184:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1185:
	.byte	5,3,7,0,5,2
	.word	.L245
	.byte	3,146,22,1,9
	.half	.L453-.L245
	.byte	0,1,1,5,26,0,5,2
	.word	.L245
	.byte	3,187,42,1,5,3,9
	.half	.L1186-.L245
	.byte	3,215,107,1,7,9
	.half	.L453-.L1186
	.byte	0,1,1
.L1183:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L452:
	.word	-1,.L245,0,.L453-.L245,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L454:
	.word	170
	.half	3
	.word	.L455
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L457,.L456
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_5',0,1,151,25,34,1
	.word	.L255,.L458,.L254
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L455:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L456:
	.word	.L1188-.L1187
.L1187:
	.half	3
	.word	.L1190-.L1189
.L1189:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1190:
	.byte	5,16,7,0,5,2
	.word	.L255
	.byte	3,213,25,1,9
	.half	.L458-.L255
	.byte	0,1,1,5,7,0,5,2
	.word	.L255
	.byte	3,195,37,1,5,16,9
	.half	.L1191-.L255
	.byte	3,146,116,1,7,9
	.half	.L458-.L1191
	.byte	0,1,1,5,12,0,5,2
	.word	.L255
	.byte	3,198,41,1,5,16,9
	.half	.L1191-.L255
	.byte	3,143,112,1,7,9
	.half	.L458-.L1191
	.byte	0,1,1,5,12,0,5,2
	.word	.L255
	.byte	3,149,192,0,1,5,16,9
	.half	.L1191-.L255
	.byte	3,192,89,1,7,9
	.half	.L458-.L1191
	.byte	0,1,1
.L1188:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L457:
	.word	-1,.L255,0,.L458-.L255,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L459:
	.word	170
	.half	3
	.word	.L460
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L462,.L461
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_6',0,1,130,17,53,1
	.word	.L233,.L463,.L232
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L460:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L461:
	.word	.L1193-.L1192
.L1192:
	.half	3
	.word	.L1195-.L1194
.L1194:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1195:
	.byte	5,14,7,0,5,2
	.word	.L233
	.byte	3,145,17,1,9
	.half	.L463-.L233
	.byte	0,1,1,5,14,0,5,2
	.word	.L233
	.byte	3,192,17,1,9
	.half	.L1196-.L233
	.byte	3,81,1,7,9
	.half	.L463-.L1196
	.byte	0,1,1,5,14,0,5,2
	.word	.L233
	.byte	3,222,17,1,9
	.half	.L1196-.L233
	.byte	3,179,127,1,7,9
	.half	.L463-.L1196
	.byte	0,1,1,5,12,0,5,2
	.word	.L233
	.byte	3,160,19,1,5,14,9
	.half	.L1196-.L233
	.byte	3,241,125,1,7,9
	.half	.L463-.L1196
	.byte	0,1,1
.L1193:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L462:
	.word	-1,.L233,0,.L463-.L233,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L464:
	.word	170
	.half	3
	.word	.L465
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L467,.L466
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_7',0,1,189,27,24,1
	.word	.L261,.L468,.L260
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L465:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L466:
	.word	.L1198-.L1197
.L1197:
	.half	3
	.word	.L1200-.L1199
.L1199:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1200:
	.byte	5,15,7,0,5,2
	.word	.L261
	.byte	3,140,28,1,9
	.half	.L468-.L261
	.byte	0,1,1,5,35,0,5,2
	.word	.L261
	.byte	3,178,35,1,5,15,9
	.half	.L1201-.L261
	.byte	3,218,120,1,9
	.half	.L468-.L1201
	.byte	0,1,1
.L1198:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L467:
	.word	-1,.L261,0,.L468-.L261,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L469:
	.word	170
	.half	3
	.word	.L470
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L472,.L471
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_8',0,1,151,25,34,1
	.word	.L253,.L473,.L252
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L470:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L471:
	.word	.L1203-.L1202
.L1202:
	.half	3
	.word	.L1205-.L1204
.L1204:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1205:
	.byte	5,33,7,0,5,2
	.word	.L253
	.byte	3,143,26,1,9
	.half	.L473-.L253
	.byte	0,1,1,5,33,0,5,2
	.word	.L253
	.byte	3,143,26,1,5,11,9
	.half	.L730-.L253
	.byte	3,155,16,1,5,33,9
	.half	.L1206-.L730
	.byte	3,229,111,1,7,9
	.half	.L473-.L1206
	.byte	0,1,1
.L1203:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L472:
	.word	-1,.L253,0,.L473-.L253,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_9')
	.sect	'.debug_info'
.L474:
	.word	170
	.half	3
	.word	.L475
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L477,.L476
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_9',0,1,152,12,53,1
	.word	.L221,.L478,.L220
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_9')
	.sect	'.debug_abbrev'
.L475:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_9')
	.sect	'.debug_line'
.L476:
	.word	.L1208-.L1207
.L1207:
	.half	3
	.word	.L1210-.L1209
.L1209:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1210:
	.byte	5,20,7,0,5,2
	.word	.L221
	.byte	3,162,12,1,9
	.half	.L478-.L221
	.byte	0,1,1,5,20,0,5,2
	.word	.L221
	.byte	3,162,12,1,9
	.half	.L680-.L221
	.byte	3,216,0,1,9
	.half	.L1211-.L680
	.byte	3,168,127,1,7,9
	.half	.L478-.L1211
	.byte	0,1,1,5,20,0,5,2
	.word	.L221
	.byte	3,162,12,1,5,28,9
	.half	.L680-.L221
	.byte	3,200,7,1,5,20,9
	.half	.L1211-.L680
	.byte	3,184,120,1,7,9
	.half	.L478-.L1211
	.byte	0,1,1,5,20,0,5,2
	.word	.L221
	.byte	3,162,12,1,5,11,9
	.half	.L680-.L221
	.byte	3,231,14,1,5,20,9
	.half	.L1211-.L680
	.byte	3,153,113,1,7,9
	.half	.L478-.L1211
	.byte	0,1,1
.L1208:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_9')
	.sect	'.debug_ranges'
.L477:
	.word	-1,.L221,0,.L478-.L221,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_10')
	.sect	'.debug_info'
.L479:
	.word	171
	.half	3
	.word	.L480
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L482,.L481
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_10',0,1,152,12,53,1
	.word	.L217,.L483,.L216
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_10')
	.sect	'.debug_abbrev'
.L480:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_10')
	.sect	'.debug_line'
.L481:
	.word	.L1213-.L1212
.L1212:
	.half	3
	.word	.L1215-.L1214
.L1214:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1215:
	.byte	5,20,7,0,5,2
	.word	.L217
	.byte	3,162,12,1,9
	.half	.L483-.L217
	.byte	0,1,1,5,20,0,5,2
	.word	.L217
	.byte	3,250,12,1,9
	.half	.L1216-.L217
	.byte	3,168,127,1,9
	.half	.L483-.L1216
	.byte	0,1,1,5,8,0,5,2
	.word	.L217
	.byte	3,209,24,1,5,20,9
	.half	.L1216-.L217
	.byte	3,209,115,1,9
	.half	.L483-.L1216
	.byte	0,1,1
.L1213:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_10')
	.sect	'.debug_ranges'
.L482:
	.word	-1,.L217,0,.L483-.L217,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_11')
	.sect	'.debug_info'
.L484:
	.word	171
	.half	3
	.word	.L485
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L487,.L486
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_11',0,1,152,12,53,1
	.word	.L211,.L488,.L210
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_11')
	.sect	'.debug_abbrev'
.L485:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_11')
	.sect	'.debug_line'
.L486:
	.word	.L1218-.L1217
.L1217:
	.half	3
	.word	.L1220-.L1219
.L1219:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1220:
	.byte	5,5,7,0,5,2
	.word	.L211
	.byte	3,193,12,1,9
	.half	.L488-.L211
	.byte	0,1,1,5,5,0,5,2
	.word	.L211
	.byte	3,153,13,1,9
	.half	.L1221-.L211
	.byte	3,168,127,1,7,9
	.half	.L488-.L1221
	.byte	0,1,1,5,36,0,5,2
	.word	.L211
	.byte	3,132,44,1,5,5,9
	.half	.L1221-.L211
	.byte	3,189,96,1,7,9
	.half	.L488-.L1221
	.byte	0,1,1
.L1218:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_11')
	.sect	'.debug_ranges'
.L487:
	.word	-1,.L211,0,.L488-.L211,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_12')
	.sect	'.debug_info'
.L489:
	.word	171
	.half	3
	.word	.L490
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L492,.L491
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_12',0,1,152,12,53,1
	.word	.L215,.L493,.L214
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_12')
	.sect	'.debug_abbrev'
.L490:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_12')
	.sect	'.debug_line'
.L491:
	.word	.L1223-.L1222
.L1222:
	.half	3
	.word	.L1225-.L1224
.L1224:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1225:
	.byte	5,7,7,0,5,2
	.word	.L215
	.byte	3,189,12,1,9
	.half	.L493-.L215
	.byte	0,1,1,5,7,0,5,2
	.word	.L215
	.byte	3,149,13,1,9
	.half	.L1226-.L215
	.byte	3,168,127,1,7,9
	.half	.L493-.L1226
	.byte	0,1,1,5,33,0,5,2
	.word	.L215
	.byte	3,129,22,1,5,7,9
	.half	.L1226-.L215
	.byte	3,188,118,1,7,9
	.half	.L493-.L1226
	.byte	0,1,1,5,36,0,5,2
	.word	.L215
	.byte	3,185,42,1,5,7,9
	.half	.L1226-.L215
	.byte	3,132,98,1,7,9
	.half	.L493-.L1226
	.byte	0,1,1
.L1223:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_12')
	.sect	'.debug_ranges'
.L492:
	.word	-1,.L215,0,.L493-.L215,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_13')
	.sect	'.debug_info'
.L494:
	.word	171
	.half	3
	.word	.L495
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L497,.L496
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_13',0,1,152,12,53,1
	.word	.L219,.L498,.L218
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_13')
	.sect	'.debug_abbrev'
.L495:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_13')
	.sect	'.debug_line'
.L496:
	.word	.L1228-.L1227
.L1227:
	.half	3
	.word	.L1230-.L1229
.L1229:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1230:
	.byte	5,20,7,0,5,2
	.word	.L219
	.byte	3,162,12,1,9
	.half	.L498-.L219
	.byte	0,1,1,5,20,0,5,2
	.word	.L219
	.byte	3,250,12,1,9
	.half	.L1231-.L219
	.byte	3,168,127,1,7,9
	.half	.L498-.L1231
	.byte	0,1,1,5,8,0,5,2
	.word	.L219
	.byte	3,209,24,1,5,20,9
	.half	.L1231-.L219
	.byte	3,209,115,1,7,9
	.half	.L498-.L1231
	.byte	0,1,1,5,15,0,5,2
	.word	.L219
	.byte	3,140,28,1,5,20,9
	.half	.L1231-.L219
	.byte	3,150,112,1,7,9
	.half	.L498-.L1231
	.byte	0,1,1,5,35,0,5,2
	.word	.L219
	.byte	3,178,35,1,5,20,9
	.half	.L1231-.L219
	.byte	3,240,104,1,7,9
	.half	.L498-.L1231
	.byte	0,1,1,5,20,0,5,2
	.word	.L219
	.byte	3,221,43,1,9
	.half	.L1231-.L219
	.byte	3,197,96,1,7,9
	.half	.L498-.L1231
	.byte	0,1,1
.L1228:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_13')
	.sect	'.debug_ranges'
.L497:
	.word	-1,.L219,0,.L498-.L219,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_14')
	.sect	'.debug_info'
.L499:
	.word	171
	.half	3
	.word	.L500
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L502,.L501
	.byte	2
	.word	.L290
	.byte	3
	.byte	'.cocofun_14',0,1,152,12,53,1
	.word	.L223,.L503,.L222
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_14')
	.sect	'.debug_abbrev'
.L500:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_14')
	.sect	'.debug_line'
.L501:
	.word	.L1233-.L1232
.L1232:
	.half	3
	.word	.L1235-.L1234
.L1234:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0,0,0,0,0
.L1235:
	.byte	5,20,7,0,5,2
	.word	.L223
	.byte	3,162,12,1,9
	.half	.L503-.L223
	.byte	0,1,1,5,20,0,5,2
	.word	.L223
	.byte	3,250,12,1,9
	.half	.L1236-.L223
	.byte	3,168,127,1,7,9
	.half	.L503-.L1236
	.byte	0,1,1,5,28,0,5,2
	.word	.L223
	.byte	3,234,19,1,5,20,9
	.half	.L1236-.L223
	.byte	3,184,120,1,7,9
	.half	.L503-.L1236
	.byte	0,1,1,5,11,0,5,2
	.word	.L223
	.byte	3,137,27,1,5,20,9
	.half	.L1236-.L223
	.byte	3,153,113,1,7,9
	.half	.L503-.L1236
	.byte	0,1,1,5,33,0,5,2
	.word	.L223
	.byte	3,143,26,1,5,20,9
	.half	.L1236-.L223
	.byte	3,147,114,1,7,9
	.half	.L503-.L1236
	.byte	0,1,1,5,11,0,5,2
	.word	.L223
	.byte	3,170,42,1,5,20,9
	.half	.L1236-.L223
	.byte	3,248,97,1,7,9
	.half	.L503-.L1236
	.byte	0,1,1,5,12,0,5,2
	.word	.L223
	.byte	3,212,27,1,5,20,9
	.half	.L1236-.L223
	.byte	3,206,112,1,7,9
	.half	.L503-.L1236
	.byte	0,1,1
.L1233:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_14')
	.sect	'.debug_ranges'
.L502:
	.word	-1,.L223,0,.L503-.L223,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_MainVersion')
	.sect	'.debug_info'
.L504:
	.word	167
	.half	3
	.word	.L505
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L290
	.byte	3
	.byte	'CanIf_MainVersion',0,10,212,5,27
	.word	.L673
	.byte	1,5,3
	.word	CanIf_MainVersion
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_MainVersion')
	.sect	'.debug_abbrev'
.L505:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_SubVersion')
	.sect	'.debug_info'
.L506:
	.word	166
	.half	3
	.word	.L507
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L290
	.byte	3
	.byte	'CanIf_SubVersion',0,10,213,5,27
	.word	.L674
	.byte	1,5,3
	.word	CanIf_SubVersion
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_SubVersion')
	.sect	'.debug_abbrev'
.L507:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanIf_ReleaseVersion')
	.sect	'.debug_info'
.L508:
	.word	170
	.half	3
	.word	.L509
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L290
	.byte	3
	.byte	'CanIf_ReleaseVersion',0,10,214,5,27
	.word	.L675
	.byte	1,5,3
	.word	CanIf_ReleaseVersion
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanIf_ReleaseVersion')
	.sect	'.debug_abbrev'
.L509:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanIfState')
	.sect	'.debug_info'
.L510:
	.word	159
	.half	3
	.word	.L511
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L290
	.byte	3
	.byte	'CanIfState',0,10,250,9,39
	.word	.L676
	.byte	5,3
	.word	CanIfState
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanIfState')
	.sect	'.debug_abbrev'
.L511:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('RxDlcMaxValueLookUp')
	.sect	'.debug_info'
.L512:
	.word	168
	.half	3
	.word	.L513
	.byte	4,1
	.byte	'..\\component\\CanIf\\Implementation\\CanIf.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L290
	.byte	3
	.byte	'RxDlcMaxValueLookUp',0,10,135,11,39
	.word	.L677
	.byte	5,3
	.word	RxDlcMaxValueLookUp
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('RxDlcMaxValueLookUp')
	.sect	'.debug_abbrev'
.L513:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_1')
	.sect	'.debug_loc'
.L212:
	.word	-1,.L213,0,.L438-.L213
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_10')
	.sect	'.debug_loc'
.L216:
	.word	-1,.L217,0,.L483-.L217
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_11')
	.sect	'.debug_loc'
.L210:
	.word	-1,.L211,0,.L488-.L211
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_12')
	.sect	'.debug_loc'
.L214:
	.word	-1,.L215,0,.L493-.L215
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_13')
	.sect	'.debug_loc'
.L218:
	.word	-1,.L219,0,.L498-.L219
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_14')
	.sect	'.debug_loc'
.L222:
	.word	-1,.L223,0,.L503-.L223
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L234:
	.word	-1,.L235,0,.L443-.L235
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L208:
	.word	-1,.L209,0,.L448-.L209
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L244:
	.word	-1,.L245,0,.L453-.L245
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L254:
	.word	-1,.L255,0,.L458-.L255
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L232:
	.word	-1,.L233,0,.L463-.L233
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L260:
	.word	-1,.L261,0,.L468-.L261
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L252:
	.word	-1,.L253,0,.L473-.L253
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_9')
	.sect	'.debug_loc'
.L220:
	.word	-1,.L221,0,.L478-.L221
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_ClearPrioByCanIdTxPduAsQueued')
	.sect	'.debug_loc'
.L224:
	.word	-1,.L225,0,.L613-.L225
	.half	2
	.byte	138,0
	.word	0,0
.L614:
	.word	-1,.L225,.L213-.L225,.L678-.L225
	.half	1
	.byte	84
	.word	.L223-.L225,.L503-.L225
	.half	1
	.byte	84
	.word	.L680-.L225,.L478-.L225
	.half	1
	.byte	84
	.word	.L217-.L225,.L681-.L225
	.half	1
	.byte	84
	.word	.L219-.L225,.L498-.L225
	.half	1
	.byte	84
	.word	.L215-.L225,.L493-.L225
	.half	1
	.byte	84
	.word	.L682-.L225,.L438-.L225
	.half	1
	.byte	84
	.word	.L211-.L225,.L488-.L225
	.half	1
	.byte	84
	.word	.L686-.L225,.L448-.L225
	.half	1
	.byte	84
	.word	.L687-.L225,.L613-.L225
	.half	1
	.byte	84
	.word	0,0
.L616:
	.word	-1,.L225,.L213-.L225,.L678-.L225
	.half	1
	.byte	82
	.word	.L223-.L225,.L503-.L225
	.half	1
	.byte	82
	.word	.L680-.L225,.L478-.L225
	.half	1
	.byte	82
	.word	.L217-.L225,.L681-.L225
	.half	1
	.byte	82
	.word	.L219-.L225,.L498-.L225
	.half	1
	.byte	82
	.word	.L215-.L225,.L493-.L225
	.half	1
	.byte	82
	.word	.L682-.L225,.L438-.L225
	.half	1
	.byte	82
	.word	.L211-.L225,.L488-.L225
	.half	1
	.byte	82
	.word	.L686-.L225,.L448-.L225
	.half	1
	.byte	82
	.word	.L687-.L225,.L613-.L225
	.half	1
	.byte	82
	.word	0,0
.L615:
	.word	-1,.L225,.L215-.L225,.L493-.L225
	.half	1
	.byte	95
	.word	.L683-.L225,.L438-.L225
	.half	1
	.byte	95
	.word	.L687-.L225,.L688-.L225
	.half	1
	.byte	95
	.word	.L211-.L225,.L488-.L225
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_ClearQueue')
	.sect	'.debug_loc'
.L226:
	.word	-1,.L227,0,.L596-.L227
	.half	2
	.byte	138,0
	.word	0,0
.L599:
	.word	-1,.L227,.L693-.L227,.L8-.L227
	.half	1
	.byte	84
	.word	0,0
.L598:
	.word	-1,.L227,.L690-.L227,.L691-.L227
	.half	1
	.byte	95
	.word	0,0
.L597:
	.word	-1,.L227,.L689-.L227,.L596-.L227
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L607:
	.word	-1,.L227,.L692-.L227,.L10-.L227
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_ControllerBusOff')
	.sect	'.debug_loc'
.L276:
	.word	-1,.L277,0,.L574-.L277
	.half	2
	.byte	138,0
	.word	0,0
.L575:
	.word	-1,.L277,0,.L774-.L277
	.half	1
	.byte	84
	.word	.L146-.L277,.L145-.L277
	.half	1
	.byte	84
	.word	0,0
.L578:
	.word	-1,.L277,.L235-.L277,.L443-.L277
	.half	1
	.byte	111
	.word	.L775-.L277,.L574-.L277
	.half	1
	.byte	111
	.word	0,0
.L576:
	.word	-1,.L277,.L235-.L277,.L443-.L277
	.half	1
	.byte	95
	.word	.L776-.L277,.L574-.L277
	.half	1
	.byte	95
	.word	.L777-.L277,.L149-.L277
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_ControllerModeIndication')
	.sect	'.debug_loc'
.L288:
	.word	-1,.L289,0,.L552-.L289
	.half	2
	.byte	138,0
	.word	0,0
.L553:
	.word	-1,.L289,0,.L189-.L289
	.half	1
	.byte	84
	.word	.L255-.L289,.L458-.L289
	.half	1
	.byte	84
	.word	.L799-.L289,.L190-.L289
	.half	1
	.byte	84
	.word	0,0
.L554:
	.word	-1,.L289,0,.L189-.L289
	.half	1
	.byte	85
	.word	.L255-.L289,.L458-.L289
	.half	1
	.byte	85
	.word	.L799-.L289,.L190-.L289
	.half	1
	.byte	85
	.word	0,0
.L557:
	.word	-1,.L289,.L800-.L289,.L190-.L289
	.half	1
	.byte	111
	.word	0,0
.L555:
	.word	-1,.L289,.L798-.L289,.L189-.L289
	.half	1
	.byte	88
	.word	.L255-.L289,.L458-.L289
	.half	1
	.byte	88
	.word	.L235-.L289,.L443-.L289
	.half	1
	.byte	88
	.word	.L799-.L289,.L552-.L289
	.half	1
	.byte	88
	.word	.L801-.L289,.L205-.L289
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_GetControllerMode')
	.sect	'.debug_loc'
.L238:
	.word	-1,.L239,0,.L525-.L239
	.half	2
	.byte	138,0
	.word	0,0
.L526:
	.word	-1,.L239,0,.L44-.L239
	.half	1
	.byte	84
	.word	.L233-.L239,.L463-.L239
	.half	1
	.byte	84
	.word	.L711-.L239,.L712-.L239
	.half	1
	.byte	84
	.word	.L235-.L239,.L702-.L239
	.half	1
	.byte	84
	.word	0,0
.L528:
	.word	-1,.L239,0,.L44-.L239
	.half	1
	.byte	100
	.word	.L233-.L239,.L463-.L239
	.half	1
	.byte	100
	.word	.L235-.L239,.L443-.L239
	.half	1
	.byte	100
	.word	.L711-.L239,.L50-.L239
	.half	1
	.byte	100
	.word	0,0
.L530:
	.word	-1,.L239,.L710-.L239,.L44-.L239
	.half	1
	.byte	87
	.word	.L233-.L239,.L463-.L239
	.half	1
	.byte	87
	.word	.L235-.L239,.L443-.L239
	.half	1
	.byte	87
	.word	.L711-.L239,.L50-.L239
	.half	1
	.byte	87
	.word	0,0
.L529:
	.word	-1,.L239,.L709-.L239,.L44-.L239
	.half	1
	.byte	88
	.word	.L233-.L239,.L463-.L239
	.half	1
	.byte	88
	.word	.L235-.L239,.L443-.L239
	.half	1
	.byte	88
	.word	.L711-.L239,.L525-.L239
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_GetPduMode')
	.sect	'.debug_loc'
.L280:
	.word	-1,.L281,0,.L546-.L281
	.half	2
	.byte	138,0
	.word	0,0
.L547:
	.word	-1,.L281,0,.L165-.L281
	.half	1
	.byte	84
	.word	.L255-.L281,.L458-.L281
	.half	1
	.byte	84
	.word	.L784-.L281,.L785-.L281
	.half	1
	.byte	84
	.word	.L235-.L281,.L702-.L281
	.half	1
	.byte	84
	.word	0,0
.L549:
	.word	-1,.L281,0,.L165-.L281
	.half	1
	.byte	100
	.word	.L255-.L281,.L458-.L281
	.half	1
	.byte	100
	.word	.L235-.L281,.L443-.L281
	.half	1
	.byte	100
	.word	.L784-.L281,.L171-.L281
	.half	1
	.byte	100
	.word	0,0
.L551:
	.word	-1,.L281,.L783-.L281,.L165-.L281
	.half	1
	.byte	87
	.word	.L255-.L281,.L458-.L281
	.half	1
	.byte	87
	.word	.L235-.L281,.L443-.L281
	.half	1
	.byte	87
	.word	.L784-.L281,.L171-.L281
	.half	1
	.byte	87
	.word	0,0
.L550:
	.word	-1,.L281,.L782-.L281,.L165-.L281
	.half	1
	.byte	88
	.word	.L255-.L281,.L458-.L281
	.half	1
	.byte	88
	.word	.L235-.L281,.L443-.L281
	.half	1
	.byte	88
	.word	.L784-.L281,.L546-.L281
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_HlIndication')
	.sect	'.debug_loc'
.L621:
	.word	-1,.L275,.L771-.L275,.L458-.L275
	.half	1
	.byte	86
	.word	0,.L134-.L275
	.half	1
	.byte	86
	.word	0,0
.L274:
	.word	-1,.L275,0,.L617-.L275
	.half	2
	.byte	138,0
	.word	0,0
.L620:
	.word	-1,.L275,.L771-.L275,.L458-.L275
	.half	1
	.byte	100
	.word	0,.L134-.L275
	.half	1
	.byte	100
	.word	0,0
.L618:
	.word	-1,.L275,.L771-.L275,.L458-.L275
	.half	1
	.byte	84
	.word	0,.L772-.L275
	.half	1
	.byte	84
	.word	0,0
.L619:
	.word	-1,.L275,.L771-.L275,.L458-.L275
	.half	1
	.byte	85
	.word	0,.L134-.L275
	.half	1
	.byte	85
	.word	.L772-.L275,.L134-.L275
	.half	1
	.byte	84
	.word	0,0
.L622:
	.word	-1,.L275,.L771-.L275,.L458-.L275
	.half	1
	.byte	88
	.word	.L235-.L275,.L443-.L275
	.half	1
	.byte	88
	.word	0,.L617-.L275
	.half	1
	.byte	88
	.word	.L773-.L275,.L143-.L275
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_HlIndicationSubULCall')
	.sect	'.debug_loc'
.L659:
	.word	-1,.L273,0,.L656-.L273
	.half	1
	.byte	85
	.word	0,0
.L272:
	.word	-1,.L273,0,.L765-.L273
	.half	2
	.byte	138,0
	.word	.L765-.L273,.L132-.L273
	.half	2
	.byte	138,8
	.word	.L132-.L273,.L132-.L273
	.half	2
	.byte	138,0
	.word	.L132-.L273,.L656-.L273
	.half	2
	.byte	138,8
	.word	.L656-.L273,.L656-.L273
	.half	2
	.byte	138,0
	.word	0,0
.L658:
	.word	-1,.L273,0,.L766-.L273
	.half	1
	.byte	100
	.word	.L131-.L273,.L656-.L273
	.half	1
	.byte	100
	.word	0,0
.L657:
	.word	-1,.L273,0,.L767-.L273
	.half	1
	.byte	84
	.word	.L131-.L273,.L656-.L273
	.half	1
	.byte	84
	.word	0,0
.L660:
	.word	-1,.L273,.L768-.L273,.L769-.L273
	.half	1
	.byte	95
	.word	0,0
.L665:
	.word	-1,.L273,0,.L656-.L273
	.half	2
	.byte	145,120
	.word	0,0
.L663:
	.word	-1,.L273,.L770-.L273,.L131-.L273
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_HlTxConfirmation')
	.sect	'.debug_loc'
.L256:
	.word	-1,.L257,0,.L623-.L257
	.half	2
	.byte	138,0
	.word	0,0
.L624:
	.word	-1,.L257,.L223-.L257,.L503-.L257
	.half	1
	.byte	84
	.word	.L680-.L257,.L478-.L257
	.half	1
	.byte	84
	.word	.L733-.L257,.L734-.L257
	.half	1
	.byte	84
	.word	0,0
.L625:
	.word	-1,.L257,.L735-.L257,.L623-.L257
	.half	1
	.byte	95
	.word	0,0
.L628:
	.word	-1,.L257,.L736-.L257,.L623-.L257
	.half	1
	.byte	111
	.word	0,0
.L626:
	.word	-1,.L257,.L734-.L257,.L623-.L257
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_Init')
	.sect	'.debug_loc'
.L228:
	.word	-1,.L229,0,.L515-.L229
	.half	2
	.byte	138,0
	.word	0,0
.L517:
	.word	-1,.L229,0,.L694-.L229
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_InitMemory')
	.sect	'.debug_loc'
.L286:
	.word	-1,.L287,0,.L514-.L287
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_RxIndicationAsr403')
	.sect	'.debug_loc'
.L568:
	.word	-1,.L271,.L751-.L271,.L752-.L271
	.half	1
	.byte	89
	.word	.L261-.L271,.L739-.L271
	.half	1
	.byte	86
	.word	.L219-.L271,.L498-.L271
	.half	1
	.byte	86
	.word	0,.L756-.L271
	.half	1
	.byte	86
	.word	.L125-.L271,.L758-.L271
	.half	1
	.byte	86
	.word	.L127-.L271,.L126-.L271
	.half	1
	.byte	86
	.word	.L761-.L271,.L117-.L271
	.half	1
	.byte	89
	.word	0,0
.L567:
	.word	-1,.L271,.L261-.L271,.L739-.L271
	.half	1
	.byte	85
	.word	.L219-.L271,.L498-.L271
	.half	1
	.byte	85
	.word	0,.L756-.L271
	.half	1
	.byte	85
	.word	.L125-.L271,.L758-.L271
	.half	1
	.byte	85
	.word	.L127-.L271,.L126-.L271
	.half	1
	.byte	85
	.word	0,0
.L270:
	.word	-1,.L271,0,.L750-.L271
	.half	2
	.byte	138,0
	.word	.L750-.L271,.L130-.L271
	.half	2
	.byte	138,8
	.word	.L130-.L271,.L130-.L271
	.half	2
	.byte	138,0
	.word	.L130-.L271,.L564-.L271
	.half	2
	.byte	138,8
	.word	.L564-.L271,.L564-.L271
	.half	2
	.byte	138,0
	.word	0,0
.L570:
	.word	-1,.L271,.L261-.L271,.L739-.L271
	.half	1
	.byte	108
	.word	.L261-.L271,.L739-.L271
	.half	1
	.byte	100
	.word	.L219-.L271,.L498-.L271
	.half	1
	.byte	108
	.word	.L219-.L271,.L498-.L271
	.half	1
	.byte	100
	.word	0,.L757-.L271
	.half	1
	.byte	100
	.word	.L125-.L271,.L759-.L271
	.half	1
	.byte	100
	.word	.L127-.L271,.L126-.L271
	.half	1
	.byte	100
	.word	.L761-.L271,.L117-.L271
	.half	1
	.byte	100
	.word	.L235-.L271,.L443-.L271
	.half	1
	.byte	108
	.word	.L762-.L271,.L564-.L271
	.half	1
	.byte	108
	.word	0,0
.L565:
	.word	-1,.L271,.L120-.L271,.L753-.L271
	.half	1
	.byte	88
	.word	.L754-.L271,.L755-.L271
	.half	1
	.byte	88
	.word	.L261-.L271,.L739-.L271
	.half	1
	.byte	88
	.word	.L261-.L271,.L739-.L271
	.half	1
	.byte	84
	.word	.L219-.L271,.L498-.L271
	.half	1
	.byte	84
	.word	0,.L756-.L271
	.half	1
	.byte	84
	.word	.L125-.L271,.L758-.L271
	.half	1
	.byte	84
	.word	.L127-.L271,.L126-.L271
	.half	1
	.byte	84
	.word	.L760-.L271,.L761-.L271
	.half	1
	.byte	88
	.word	.L761-.L271,.L117-.L271
	.half	1
	.byte	84
	.word	0,0
.L573:
	.word	-1,.L271,.L261-.L271,.L739-.L271
	.half	1
	.byte	90
	.word	.L219-.L271,.L498-.L271
	.half	1
	.byte	90
	.word	.L235-.L271,.L443-.L271
	.half	1
	.byte	90
	.word	.L763-.L271,.L564-.L271
	.half	1
	.byte	90
	.word	.L764-.L271,.L130-.L271
	.half	1
	.byte	87
	.word	0,0
.L572:
	.word	-1,.L271,.L261-.L271,.L739-.L271
	.half	2
	.byte	145,120
	.word	.L219-.L271,.L498-.L271
	.half	2
	.byte	145,120
	.word	.L235-.L271,.L443-.L271
	.half	2
	.byte	145,120
	.word	0,.L564-.L271
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_RxIndicationSubBasicCan')
	.sect	'.debug_loc'
.L268:
	.word	-1,.L269,0,.L654-.L269
	.half	2
	.byte	138,0
	.word	0,0
.L655:
	.word	-1,.L269,0,.L114-.L269
	.half	1
	.byte	100
	.word	.L748-.L269,.L654-.L269
	.half	1
	.byte	111
	.word	.L749-.L269,.L115-.L269
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_RxIndicationSubLinearSearch')
	.sect	'.debug_loc'
.L262:
	.word	-1,.L263,0,.L642-.L263
	.half	2
	.byte	138,0
	.word	0,0
.L644:
	.word	-1,.L263,0,.L642-.L263
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_RxIndicationSubRangeSearch')
	.sect	'.debug_loc'
.L266:
	.word	-1,.L267,0,.L648-.L267
	.half	2
	.byte	138,0
	.word	0,0
.L649:
	.word	-1,.L267,0,.L107-.L267
	.half	1
	.byte	100
	.word	.L744-.L267,.L648-.L267
	.half	1
	.byte	111
	.word	.L745-.L267,.L746-.L267
	.half	1
	.byte	100
	.word	.L747-.L267,.L111-.L267
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_RxIndicationSubReceptionPduMode')
	.sect	'.debug_loc'
.L264:
	.word	-1,.L265,0,.L646-.L265
	.half	2
	.byte	138,0
	.word	0,0
.L647:
	.word	-1,.L265,0,.L646-.L265
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_SetControllerMode')
	.sect	'.debug_loc'
.L236:
	.word	-1,.L237,0,.L519-.L237
	.half	2
	.byte	138,0
	.word	0,0
.L520:
	.word	-1,.L237,0,.L704-.L237
	.half	1
	.byte	84
	.word	0,0
.L522:
	.word	-1,.L237,0,.L704-.L237
	.half	1
	.byte	85
	.word	.L235-.L237,.L443-.L237
	.half	1
	.byte	88
	.word	.L707-.L237,.L519-.L237
	.half	1
	.byte	88
	.word	0,0
.L524:
	.word	-1,.L237,.L235-.L237,.L443-.L237
	.half	1
	.byte	95
	.word	.L708-.L237,.L519-.L237
	.half	1
	.byte	95
	.word	0,0
.L523:
	.word	-1,.L237,.L705-.L237,.L706-.L237
	.half	1
	.byte	89
	.word	.L706-.L237,.L39-.L237
	.half	1
	.byte	82
	.word	.L235-.L237,.L443-.L237
	.half	1
	.byte	89
	.word	.L39-.L237,.L519-.L237
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_SetControllerModeSubSwitch')
	.sect	'.debug_loc'
.L230:
	.word	-1,.L231,0,.L666-.L231
	.half	2
	.byte	138,0
	.word	0,0
.L667:
	.word	-1,.L231,.L233-.L231,.L463-.L231
	.half	1
	.byte	84
	.word	0,.L695-.L231
	.half	1
	.byte	84
	.word	.L16-.L231,.L696-.L231
	.half	1
	.byte	84
	.word	.L15-.L231,.L697-.L231
	.half	1
	.byte	84
	.word	.L12-.L231,.L698-.L231
	.half	1
	.byte	84
	.word	.L26-.L231,.L699-.L231
	.half	1
	.byte	84
	.word	.L13-.L231,.L700-.L231
	.half	1
	.byte	84
	.word	.L235-.L231,.L702-.L231
	.half	1
	.byte	84
	.word	0,0
.L669:
	.word	-1,.L231,.L233-.L231,.L463-.L231
	.half	1
	.byte	88
	.word	.L701-.L231,.L14-.L231
	.half	1
	.byte	88
	.word	.L235-.L231,.L443-.L231
	.half	1
	.byte	88
	.word	.L703-.L231,.L666-.L231
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_SetPduMode')
	.sect	'.debug_loc'
.L278:
	.word	-1,.L279,0,.L540-.L279
	.half	2
	.byte	138,0
	.word	0,0
.L541:
	.word	-1,.L279,0,.L778-.L279
	.half	1
	.byte	84
	.word	0,0
.L543:
	.word	-1,.L279,0,.L778-.L279
	.half	1
	.byte	85
	.word	.L235-.L279,.L443-.L279
	.half	1
	.byte	88
	.word	.L779-.L279,.L540-.L279
	.half	1
	.byte	88
	.word	0,0
.L545:
	.word	-1,.L279,.L235-.L279,.L443-.L279
	.half	1
	.byte	90
	.word	.L780-.L279,.L540-.L279
	.half	1
	.byte	90
	.word	0,0
.L544:
	.word	-1,.L279,.L235-.L279,.L443-.L279
	.half	1
	.byte	89
	.word	.L781-.L279,.L540-.L279
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_SetPrioByCanIdTxPduAsQueued')
	.sect	'.debug_loc'
.L206:
	.word	-1,.L207,0,.L608-.L207
	.half	2
	.byte	138,0
	.word	0,0
.L609:
	.word	-1,.L207,.L213-.L207,.L678-.L207
	.half	1
	.byte	84
	.word	.L679-.L207,.L503-.L207
	.half	1
	.byte	84
	.word	.L680-.L207,.L478-.L207
	.half	1
	.byte	84
	.word	.L217-.L207,.L681-.L207
	.half	1
	.byte	84
	.word	.L219-.L207,.L498-.L207
	.half	1
	.byte	84
	.word	.L215-.L207,.L493-.L207
	.half	1
	.byte	84
	.word	.L682-.L207,.L438-.L207
	.half	1
	.byte	84
	.word	.L211-.L207,.L488-.L207
	.half	1
	.byte	84
	.word	.L209-.L207,.L448-.L207
	.half	1
	.byte	84
	.word	.L684-.L207,.L608-.L207
	.half	1
	.byte	84
	.word	0,0
.L612:
	.word	-1,.L207,.L213-.L207,.L678-.L207
	.half	1
	.byte	82
	.word	.L679-.L207,.L503-.L207
	.half	1
	.byte	82
	.word	.L680-.L207,.L478-.L207
	.half	1
	.byte	82
	.word	.L217-.L207,.L681-.L207
	.half	1
	.byte	82
	.word	.L219-.L207,.L498-.L207
	.half	1
	.byte	82
	.word	.L215-.L207,.L493-.L207
	.half	1
	.byte	82
	.word	.L682-.L207,.L438-.L207
	.half	1
	.byte	82
	.word	.L211-.L207,.L488-.L207
	.half	1
	.byte	82
	.word	.L209-.L207,.L448-.L207
	.half	1
	.byte	82
	.word	.L684-.L207,.L608-.L207
	.half	1
	.byte	82
	.word	0,0
.L611:
	.word	-1,.L207,.L215-.L207,.L493-.L207
	.half	1
	.byte	95
	.word	.L683-.L207,.L438-.L207
	.half	1
	.byte	95
	.word	.L684-.L207,.L685-.L207
	.half	1
	.byte	95
	.word	.L209-.L207,.L686-.L207
	.half	1
	.byte	95
	.word	.L211-.L207,.L488-.L207
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_Transmit')
	.sect	'.debug_loc'
.L250:
	.word	-1,.L251,0,.L725-.L251
	.half	2
	.byte	138,0
	.word	.L725-.L251,.L531-.L251
	.half	2
	.byte	138,16
	.word	.L531-.L251,.L531-.L251
	.half	2
	.byte	138,0
	.word	0,0
.L532:
	.word	-1,.L251,0,.L73-.L251
	.half	1
	.byte	84
	.word	.L726-.L251,.L73-.L251
	.half	1
	.byte	88
	.word	.L255-.L251,.L458-.L251
	.half	1
	.byte	88
	.word	.L255-.L251,.L458-.L251
	.half	1
	.byte	84
	.word	.L728-.L251,.L729-.L251
	.half	1
	.byte	84
	.word	.L223-.L251,.L503-.L251
	.half	1
	.byte	88
	.word	.L730-.L251,.L473-.L251
	.half	1
	.byte	88
	.word	.L79-.L251,.L732-.L251
	.half	1
	.byte	84
	.word	.L77-.L251,.L72-.L251
	.half	1
	.byte	84
	.word	.L235-.L251,.L443-.L251
	.half	1
	.byte	88
	.word	.L728-.L251,.L531-.L251
	.half	1
	.byte	88
	.word	0,0
.L534:
	.word	-1,.L251,0,.L73-.L251
	.half	1
	.byte	100
	.word	.L726-.L251,.L73-.L251
	.half	1
	.byte	108
	.word	.L255-.L251,.L458-.L251
	.half	1
	.byte	108
	.word	.L255-.L251,.L458-.L251
	.half	1
	.byte	100
	.word	.L728-.L251,.L729-.L251
	.half	1
	.byte	100
	.word	.L223-.L251,.L503-.L251
	.half	1
	.byte	108
	.word	.L730-.L251,.L473-.L251
	.half	1
	.byte	108
	.word	.L79-.L251,.L732-.L251
	.half	1
	.byte	100
	.word	.L77-.L251,.L72-.L251
	.half	1
	.byte	100
	.word	.L235-.L251,.L443-.L251
	.half	1
	.byte	108
	.word	.L728-.L251,.L531-.L251
	.half	1
	.byte	108
	.word	0,0
.L537:
	.word	-1,.L251,.L727-.L251,.L73-.L251
	.half	1
	.byte	90
	.word	.L255-.L251,.L458-.L251
	.half	1
	.byte	90
	.word	.L223-.L251,.L503-.L251
	.half	1
	.byte	90
	.word	.L730-.L251,.L473-.L251
	.half	1
	.byte	90
	.word	.L235-.L251,.L443-.L251
	.half	1
	.byte	90
	.word	.L728-.L251,.L531-.L251
	.half	1
	.byte	90
	.word	0,0
.L539:
	.word	-1,.L251,0,.L73-.L251
	.half	2
	.byte	145,112
	.word	.L255-.L251,.L458-.L251
	.half	2
	.byte	145,112
	.word	.L223-.L251,.L503-.L251
	.half	2
	.byte	145,112
	.word	.L730-.L251,.L473-.L251
	.half	2
	.byte	145,112
	.word	.L235-.L251,.L443-.L251
	.half	2
	.byte	145,112
	.word	.L728-.L251,.L531-.L251
	.half	2
	.byte	145,112
	.word	0,0
.L536:
	.word	-1,.L251,.L725-.L251,.L73-.L251
	.half	1
	.byte	89
	.word	.L255-.L251,.L458-.L251
	.half	1
	.byte	89
	.word	.L223-.L251,.L503-.L251
	.half	1
	.byte	89
	.word	.L730-.L251,.L473-.L251
	.half	1
	.byte	89
	.word	.L728-.L251,.L731-.L251
	.half	1
	.byte	89
	.word	.L731-.L251,.L80-.L251
	.half	1
	.byte	82
	.word	.L235-.L251,.L443-.L251
	.half	1
	.byte	89
	.word	.L80-.L251,.L531-.L251
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_TransmitSubHandleTxResBusy')
	.sect	'.debug_loc'
.L246:
	.word	-1,.L247,0,.L636-.L247
	.half	2
	.byte	138,0
	.word	0,0
.L641:
	.word	-1,.L247,.L235-.L247,.L443-.L247
	.half	1
	.byte	88
	.word	.L718-.L247,.L636-.L247
	.half	1
	.byte	88
	.word	0,0
.L640:
	.word	-1,.L247,.L716-.L247,.L717-.L247
	.half	1
	.byte	95
	.word	0,0
.L638:
	.word	-1,.L247,0,.L715-.L247
	.half	1
	.byte	100
	.word	.L61-.L247,.L59-.L247
	.half	1
	.byte	100
	.word	.L235-.L247,.L443-.L247
	.half	1
	.byte	111
	.word	.L719-.L247,.L636-.L247
	.half	1
	.byte	111
	.word	0,0
.L639:
	.word	-1,.L247,.L235-.L247,.L443-.L247
	.half	1
	.byte	89
	.word	.L720-.L247,.L636-.L247
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_TransmitSubVerifyPduLength')
	.sect	'.debug_loc'
.L240:
	.word	-1,.L241,0,.L630-.L241
	.half	2
	.byte	138,0
	.word	0,0
.L632:
	.word	-1,.L241,.L679-.L241,.L503-.L241
	.half	1
	.byte	84
	.word	.L680-.L241,.L478-.L241
	.half	1
	.byte	84
	.word	0,.L630-.L241
	.half	1
	.byte	84
	.word	0,0
.L634:
	.word	-1,.L241,.L679-.L241,.L503-.L241
	.half	1
	.byte	100
	.word	.L680-.L241,.L478-.L241
	.half	1
	.byte	100
	.word	0,.L630-.L241
	.half	1
	.byte	100
	.word	0,0
.L635:
	.word	-1,.L241,.L679-.L241,.L503-.L241
	.half	1
	.byte	82
	.word	.L680-.L241,.L478-.L241
	.half	1
	.byte	82
	.word	0,.L630-.L241
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_TransmitSubWrite')
	.sect	'.debug_loc'
.L248:
	.word	-1,.L249,0,.L650-.L249
	.half	2
	.byte	138,0
	.word	0,0
.L651:
	.word	-1,.L249,0,.L721-.L249
	.half	1
	.byte	100
	.word	.L722-.L249,.L723-.L249
	.half	1
	.byte	111
	.word	.L724-.L249,.L65-.L249
	.half	1
	.byte	100
	.word	0,0
.L652:
	.word	0,0
.L653:
	.word	-1,.L249,.L217-.L249,.L681-.L249
	.half	1
	.byte	82
	.word	.L219-.L249,.L498-.L249
	.half	1
	.byte	82
	.word	.L721-.L249,.L69-.L249
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_TxBufferPrioByCanIdQueuePdu')
	.sect	'.debug_loc'
.L242:
	.word	-1,.L243,0,.L670-.L243
	.half	2
	.byte	138,0
	.word	0,0
.L671:
	.word	-1,.L243,.L215-.L243,.L493-.L243
	.half	1
	.byte	100
	.word	.L245-.L243,.L453-.L243
	.half	1
	.byte	100
	.word	.L713-.L243,.L714-.L243
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_TxConfirmation')
	.sect	'.debug_loc'
.L258:
	.word	-1,.L259,0,.L558-.L259
	.half	2
	.byte	138,0
	.word	0,0
.L559:
	.word	-1,.L259,0,.L90-.L259
	.half	1
	.byte	84
	.word	.L737-.L259,.L90-.L259
	.half	1
	.byte	89
	.word	.L223-.L259,.L503-.L259
	.half	1
	.byte	89
	.word	.L223-.L259,.L503-.L259
	.half	1
	.byte	84
	.word	.L261-.L259,.L739-.L259
	.half	1
	.byte	89
	.word	.L261-.L259,.L739-.L259
	.half	1
	.byte	84
	.word	.L219-.L259,.L498-.L259
	.half	1
	.byte	89
	.word	.L219-.L259,.L498-.L259
	.half	1
	.byte	84
	.word	.L740-.L259,.L741-.L259
	.half	1
	.byte	84
	.word	.L235-.L259,.L443-.L259
	.half	1
	.byte	89
	.word	.L740-.L259,.L558-.L259
	.half	1
	.byte	89
	.word	0,0
.L560:
	.word	-1,.L259,.L738-.L259,.L90-.L259
	.half	1
	.byte	90
	.word	.L223-.L259,.L503-.L259
	.half	1
	.byte	90
	.word	.L261-.L259,.L739-.L259
	.half	1
	.byte	90
	.word	.L219-.L259,.L498-.L259
	.half	1
	.byte	90
	.word	.L235-.L259,.L443-.L259
	.half	1
	.byte	90
	.word	.L740-.L259,.L558-.L259
	.half	1
	.byte	90
	.word	.L743-.L259,.L98-.L259
	.half	1
	.byte	87
	.word	0,0
.L563:
	.word	-1,.L259,.L261-.L259,.L739-.L259
	.half	1
	.byte	88
	.word	.L219-.L259,.L498-.L259
	.half	1
	.byte	88
	.word	.L742-.L259,.L91-.L259
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_TxQueueTransmit')
	.sect	'.debug_loc'
.L282:
	.word	-1,.L283,0,.L786-.L283
	.half	2
	.byte	138,0
	.word	.L786-.L283,.L588-.L283
	.half	2
	.byte	138,16
	.word	.L588-.L283,.L588-.L283
	.half	2
	.byte	138,0
	.word	0,0
.L589:
	.word	-1,.L283,0,.L173-.L283
	.half	1
	.byte	84
	.word	.L786-.L283,.L173-.L283
	.half	1
	.byte	88
	.word	.L223-.L283,.L503-.L283
	.half	1
	.byte	88
	.word	.L223-.L283,.L503-.L283
	.half	1
	.byte	84
	.word	.L730-.L283,.L473-.L283
	.half	1
	.byte	88
	.word	.L730-.L283,.L473-.L283
	.half	1
	.byte	84
	.word	.L789-.L283,.L790-.L283
	.half	1
	.byte	84
	.word	.L215-.L283,.L493-.L283
	.half	1
	.byte	88
	.word	.L245-.L283,.L453-.L283
	.half	1
	.byte	88
	.word	.L235-.L283,.L443-.L283
	.half	1
	.byte	88
	.word	.L789-.L283,.L588-.L283
	.half	1
	.byte	88
	.word	0,0
.L595:
	.word	-1,.L283,.L787-.L283,.L173-.L283
	.half	1
	.byte	89
	.word	.L223-.L283,.L503-.L283
	.half	1
	.byte	89
	.word	.L730-.L283,.L473-.L283
	.half	1
	.byte	89
	.word	.L215-.L283,.L493-.L283
	.half	1
	.byte	89
	.word	.L245-.L283,.L453-.L283
	.half	1
	.byte	89
	.word	.L235-.L283,.L443-.L283
	.half	1
	.byte	89
	.word	.L789-.L283,.L588-.L283
	.half	1
	.byte	89
	.word	0,0
.L594:
	.word	-1,.L283,.L215-.L283,.L493-.L283
	.half	1
	.byte	84
	.word	.L245-.L283,.L453-.L283
	.half	1
	.byte	84
	.word	.L790-.L283,.L791-.L283
	.half	1
	.byte	84
	.word	0,0
.L590:
	.word	-1,.L283,0,.L173-.L283
	.half	2
	.byte	145,112
	.word	.L223-.L283,.L503-.L283
	.half	2
	.byte	145,112
	.word	.L730-.L283,.L473-.L283
	.half	2
	.byte	145,112
	.word	.L215-.L283,.L493-.L283
	.half	2
	.byte	145,112
	.word	.L245-.L283,.L453-.L283
	.half	2
	.byte	145,112
	.word	.L235-.L283,.L443-.L283
	.half	2
	.byte	145,112
	.word	.L789-.L283,.L588-.L283
	.half	2
	.byte	145,112
	.word	0,0
.L593:
	.word	-1,.L283,.L788-.L283,.L173-.L283
	.half	1
	.byte	90
	.word	.L223-.L283,.L503-.L283
	.half	1
	.byte	90
	.word	.L730-.L283,.L473-.L283
	.half	1
	.byte	90
	.word	.L215-.L283,.L493-.L283
	.half	1
	.byte	90
	.word	.L245-.L283,.L453-.L283
	.half	1
	.byte	90
	.word	.L235-.L283,.L443-.L283
	.half	1
	.byte	90
	.word	.L789-.L283,.L588-.L283
	.half	1
	.byte	90
	.word	0,0
.L592:
	.word	-1,.L283,.L791-.L283,.L792-.L283
	.half	1
	.byte	82
	.word	.L176-.L283,.L177-.L283
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanIf_TxQueueTreatment')
	.sect	'.debug_loc'
.L284:
	.word	-1,.L285,0,.L579-.L285
	.half	2
	.byte	138,0
	.word	0,0
.L587:
	.word	-1,.L285,.L797-.L285,.L184-.L285
	.half	1
	.byte	84
	.word	0,0
.L580:
	.word	-1,.L285,.L219-.L285,.L498-.L285
	.half	1
	.byte	84
	.word	.L211-.L285,.L488-.L285
	.half	1
	.byte	84
	.word	0,.L185-.L285
	.half	1
	.byte	84
	.word	0,0
.L581:
	.word	-1,.L285,.L796-.L285,.L182-.L285
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L582:
	.word	-1,.L285,.L219-.L285,.L498-.L285
	.half	1
	.byte	82
	.word	.L211-.L285,.L488-.L285
	.half	1
	.byte	82
	.word	.L795-.L285,.L579-.L285
	.half	1
	.byte	82
	.word	0,0
.L583:
	.word	-1,.L285,.L793-.L285,.L794-.L285
	.half	1
	.byte	95
	.word	.L211-.L285,.L488-.L285
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1237:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('CanIf_SetPrioByCanIdTxPduAsQueued')
	.sect	'.debug_frame'
	.word	24
	.word	.L1237,.L207,.L608-.L207
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CanIf_ClearPrioByCanIdTxPduAsQueued')
	.sect	'.debug_frame'
	.word	24
	.word	.L1237,.L225,.L613-.L225
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CanIf_ClearQueue')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L227,.L596-.L227
	.sdecl	'.debug_frame',debug,cluster('CanIf_Init')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L229,.L515-.L229
	.sdecl	'.debug_frame',debug,cluster('CanIf_SetControllerModeSubSwitch')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L231,.L666-.L231
	.sdecl	'.debug_frame',debug,cluster('CanIf_SetControllerMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L237,.L519-.L237
	.sdecl	'.debug_frame',debug,cluster('CanIf_GetControllerMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L239,.L525-.L239
	.sdecl	'.debug_frame',debug,cluster('CanIf_TransmitSubVerifyPduLength')
	.sect	'.debug_frame'
	.word	24
	.word	.L1237,.L241,.L630-.L241
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('CanIf_TxBufferPrioByCanIdQueuePdu')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L243,.L670-.L243
	.sdecl	'.debug_frame',debug,cluster('CanIf_TransmitSubHandleTxResBusy')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L247,.L636-.L247
	.sdecl	'.debug_frame',debug,cluster('CanIf_TransmitSubWrite')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L249,.L650-.L249
	.sdecl	'.debug_frame',debug,cluster('CanIf_Transmit')
	.sect	'.debug_frame'
	.word	36
	.word	.L1237,.L251,.L531-.L251
	.byte	4
	.word	(.L725-.L251)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L531-.L725)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanIf_HlTxConfirmation')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L257,.L623-.L257
	.sdecl	'.debug_frame',debug,cluster('CanIf_TxConfirmation')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L259,.L558-.L259
	.sdecl	'.debug_frame',debug,cluster('CanIf_RxIndicationSubLinearSearch')
	.sect	'.debug_frame'
	.word	20
	.word	.L1237,.L263,.L642-.L263
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CanIf_RxIndicationSubReceptionPduMode')
	.sect	'.debug_frame'
	.word	24
	.word	.L1237,.L265,.L646-.L265
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('CanIf_RxIndicationSubRangeSearch')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L267,.L648-.L267
	.sdecl	'.debug_frame',debug,cluster('CanIf_RxIndicationSubBasicCan')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L269,.L654-.L269
	.sdecl	'.debug_frame',debug,cluster('CanIf_RxIndicationAsr403')
	.sect	'.debug_frame'
	.word	52
	.word	.L1237,.L271,.L564-.L271
	.byte	4
	.word	(.L750-.L271)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L130-.L750)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L564-.L130)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('CanIf_HlIndicationSubULCall')
	.sect	'.debug_frame'
	.word	52
	.word	.L1237,.L273,.L656-.L273
	.byte	4
	.word	(.L765-.L273)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L132-.L765)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L656-.L132)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('CanIf_HlIndication')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L275,.L617-.L275
	.sdecl	'.debug_frame',debug,cluster('CanIf_ControllerBusOff')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L277,.L574-.L277
	.sdecl	'.debug_frame',debug,cluster('CanIf_SetPduMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L279,.L540-.L279
	.sdecl	'.debug_frame',debug,cluster('CanIf_GetPduMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L281,.L546-.L281
	.sdecl	'.debug_frame',debug,cluster('CanIf_TxQueueTransmit')
	.sect	'.debug_frame'
	.word	36
	.word	.L1237,.L283,.L588-.L283
	.byte	4
	.word	(.L786-.L283)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L588-.L786)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanIf_TxQueueTreatment')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L285,.L579-.L285
	.sdecl	'.debug_frame',debug,cluster('CanIf_InitMemory')
	.sect	'.debug_frame'
	.word	24
	.word	.L1237,.L287,.L514-.L287
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CanIf_ControllerModeIndication')
	.sect	'.debug_frame'
	.word	12
	.word	.L1237,.L289,.L552-.L289
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1238:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L209,.L448-.L209
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_11')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L211,.L488-.L211
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_1')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L213,.L438-.L213
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_12')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L215,.L493-.L215
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_10')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L217,.L483-.L217
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_13')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L219,.L498-.L219
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_9')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L221,.L478-.L221
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_14')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L223,.L503-.L223
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L233,.L463-.L233
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L235,.L443-.L235
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L245,.L453-.L245
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L253,.L473-.L253
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L255,.L458-.L255
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L1238,.L261,.L468-.L261
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\component\CanIf\Implementation\CanIf.c	  8334  
; ..\component\CanIf\Implementation\CanIf.c	  8335  
; ..\component\CanIf\Implementation\CanIf.c	  8336  /* \trace SPEC-9975, SPEC-9978, CANIF738 */
; ..\component\CanIf\Implementation\CanIf.c	  8337  #if (CANIF_PUBLIC_TX_CONFIRM_POLLING_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8338  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  8339   *  CanIf_GetTxConfirmationState()
; ..\component\CanIf\Implementation\CanIf.c	  8340   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  8341  /*
; ..\component\CanIf\Implementation\CanIf.c	  8342  |<DataModelStart>| CanIf_GetTxConfirmationState
; ..\component\CanIf\Implementation\CanIf.c	  8343  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  8344  CanIfTxConfPollSupport # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  8345  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  8346  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8347  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  8348  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8349  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8350  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8351  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8352  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  8353  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  8354  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  8355  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  8356  */
; ..\component\CanIf\Implementation\CanIf.c	  8357   /*!
; ..\component\CanIf\Implementation\CanIf.c	  8358   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  8359   *
; ..\component\CanIf\Implementation\CanIf.c	  8360   *
; ..\component\CanIf\Implementation\CanIf.c	  8361   *
; ..\component\CanIf\Implementation\CanIf.c	  8362   *
; ..\component\CanIf\Implementation\CanIf.c	  8363   *
; ..\component\CanIf\Implementation\CanIf.c	  8364   */
; ..\component\CanIf\Implementation\CanIf.c	  8365  FUNC(CanIf_NotifStatusType, CANIF_CODE) CanIf_GetTxConfirmationState(uint8 ControllerId)
; ..\component\CanIf\Implementation\CanIf.c	  8366  {
; ..\component\CanIf\Implementation\CanIf.c	  8367    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8368    CanIf_NotifStatusType retval = CANIF_NO_NOTIFICATION; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  8369    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  8370    
; ..\component\CanIf\Implementation\CanIf.c	  8371    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8372  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8373  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8374    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  8375    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  8376    {
; ..\component\CanIf\Implementation\CanIf.c	  8377      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  8378      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8379    }
; ..\component\CanIf\Implementation\CanIf.c	  8380    else
; ..\component\CanIf\Implementation\CanIf.c	  8381  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  8382  #  if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  8383    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  8384    if (CanIf_Controller_Value >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  8385    {
; ..\component\CanIf\Implementation\CanIf.c	  8386      /* \trace SPEC-9977 */
; ..\component\CanIf\Implementation\CanIf.c	  8387      errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	  8388    }
; ..\component\CanIf\Implementation\CanIf.c	  8389    else
; ..\component\CanIf\Implementation\CanIf.c	  8390  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  8391    /* #30 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  8392    if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  8393    {
; ..\component\CanIf\Implementation\CanIf.c	  8394      /* CANIF735 */
; ..\component\CanIf\Implementation\CanIf.c	  8395      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8396    }
; ..\component\CanIf\Implementation\CanIf.c	  8397    else
; ..\component\CanIf\Implementation\CanIf.c	  8398  # endif /* (CANIF_DEV_ERROR_DETECT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  8399    {
; ..\component\CanIf\Implementation\CanIf.c	  8400      
; ..\component\CanIf\Implementation\CanIf.c	  8401      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8402  
; ..\component\CanIf\Implementation\CanIf.c	  8403      /* #100 Get the Tx confirmation state */
; ..\component\CanIf\Implementation\CanIf.c	  8404      retval = CanIf_GetTxConfState(CanIf_Controller_Value);
; ..\component\CanIf\Implementation\CanIf.c	  8405    }
; ..\component\CanIf\Implementation\CanIf.c	  8406  
; ..\component\CanIf\Implementation\CanIf.c	  8407    /* ----- Development Error Report ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8408  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8409    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  8410    {
; ..\component\CanIf\Implementation\CanIf.c	  8411      CanIf_Det_ReportError(CANIF_GETTXCONFIRMATIONSTATE_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  8412    }
; ..\component\CanIf\Implementation\CanIf.c	  8413  # else
; ..\component\CanIf\Implementation\CanIf.c	  8414    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8415  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8416  
; ..\component\CanIf\Implementation\CanIf.c	  8417  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  8418    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8419  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8420    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  8421  }
; ..\component\CanIf\Implementation\CanIf.c	  8422  #endif /* (CANIF_PUBLIC_TX_CONFIRM_POLLING_SUPPORT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  8423  
; ..\component\CanIf\Implementation\CanIf.c	  8424  
; ..\component\CanIf\Implementation\CanIf.c	  8425  /* CANIF 784 */  /* CANIF 780 */
; ..\component\CanIf\Implementation\CanIf.c	  8426  #if (CANIF_CHANGE_BAUDRATE_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8427  /* CANIF775 */
; ..\component\CanIf\Implementation\CanIf.c	  8428  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  8429   *  CanIf_CheckBaudrate()
; ..\component\CanIf\Implementation\CanIf.c	  8430   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  8431  /*
; ..\component\CanIf\Implementation\CanIf.c	  8432  |<DataModelStart>| CanIf_CheckBaudrate
; ..\component\CanIf\Implementation\CanIf.c	  8433  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  8434  CanIfChangeBaudrate # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  8435  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  8436  CanIfOneChOpt
; ..\component\CanIf\Implementation\CanIf.c	  8437  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8438  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  8439  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8440  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8441  CanIfMultipleDriver, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8442  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8443  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  8444  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  8445  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  8446  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  8447  */
; ..\component\CanIf\Implementation\CanIf.c	  8448   /*!
; ..\component\CanIf\Implementation\CanIf.c	  8449   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  8450   *
; ..\component\CanIf\Implementation\CanIf.c	  8451   *
; ..\component\CanIf\Implementation\CanIf.c	  8452   *
; ..\component\CanIf\Implementation\CanIf.c	  8453   *
; ..\component\CanIf\Implementation\CanIf.c	  8454   *
; ..\component\CanIf\Implementation\CanIf.c	  8455   *
; ..\component\CanIf\Implementation\CanIf.c	  8456   */
; ..\component\CanIf\Implementation\CanIf.c	  8457  FUNC(Std_ReturnType, CANIF_CODE) CanIf_CheckBaudrate(uint8 ControllerId, CONST(uint16, CANIF_CONST) Baudrate)
; ..\component\CanIf\Implementation\CanIf.c	  8458  {
; ..\component\CanIf\Implementation\CanIf.c	  8459    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8460    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  8461    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  8462  
; ..\component\CanIf\Implementation\CanIf.c	  8463    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8464  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8465  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8466    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  8467    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  8468    {
; ..\component\CanIf\Implementation\CanIf.c	  8469      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  8470      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8471    }
; ..\component\CanIf\Implementation\CanIf.c	  8472    else
; ..\component\CanIf\Implementation\CanIf.c	  8473  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  8474    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  8475    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  8476    {
; ..\component\CanIf\Implementation\CanIf.c	  8477      /* CANIF778 */
; ..\component\CanIf\Implementation\CanIf.c	  8478      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  8479    }
; ..\component\CanIf\Implementation\CanIf.c	  8480    /* #30 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  8481    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  8482    {
; ..\component\CanIf\Implementation\CanIf.c	  8483      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8484    }
; ..\component\CanIf\Implementation\CanIf.c	  8485  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8486  #   if (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  8487    /* #40 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  8488    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  8489    {
; ..\component\CanIf\Implementation\CanIf.c	  8490      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  8491    }
; ..\component\CanIf\Implementation\CanIf.c	  8492  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  8493  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  8494    else
; ..\component\CanIf\Implementation\CanIf.c	  8495  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8496    {
; ..\component\CanIf\Implementation\CanIf.c	  8497      /* CANIF 786 */
; ..\component\CanIf\Implementation\CanIf.c	  8498      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8499  
; ..\component\CanIf\Implementation\CanIf.c	  8500      /* #100 Pass the request to the CAN driver */
; ..\component\CanIf\Implementation\CanIf.c	  8501  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8502      CanIf_Can_CheckBaudrateFctType canCheckBaudrateFct;
; ..\component\CanIf\Implementation\CanIf.c	  8503      canCheckBaudrateFct = CanIf_GetCan_CheckBaudrateFctMap(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CanIf_Controller_Value));
; ..\component\CanIf\Implementation\CanIf.c	  8504      if (canCheckBaudrateFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  8505      {
; ..\component\CanIf\Implementation\CanIf.c	  8506        retval = canCheckBaudrateFct(CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), Baudrate); /* SBSW_CANIF_41 */
; ..\component\CanIf\Implementation\CanIf.c	  8507      }
; ..\component\CanIf\Implementation\CanIf.c	  8508  # else  
; ..\component\CanIf\Implementation\CanIf.c	  8509      retval = Can_CheckBaudrate(CanIf_Controller_Value, Baudrate);
; ..\component\CanIf\Implementation\CanIf.c	  8510  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8511    }
; ..\component\CanIf\Implementation\CanIf.c	  8512  
; ..\component\CanIf\Implementation\CanIf.c	  8513    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8514  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8515    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  8516    {
; ..\component\CanIf\Implementation\CanIf.c	  8517      CanIf_Det_ReportError(CANIF_BAUDRATECHECK_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  8518    }
; ..\component\CanIf\Implementation\CanIf.c	  8519  # else
; ..\component\CanIf\Implementation\CanIf.c	  8520    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8521  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8522    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8523   
; ..\component\CanIf\Implementation\CanIf.c	  8524    return retval;  
; ..\component\CanIf\Implementation\CanIf.c	  8525  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  8526  
; ..\component\CanIf\Implementation\CanIf.c	  8527  
; ..\component\CanIf\Implementation\CanIf.c	  8528  /* CANIF776 */
; ..\component\CanIf\Implementation\CanIf.c	  8529  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  8530   *  CanIf_ChangeBaudrate()
; ..\component\CanIf\Implementation\CanIf.c	  8531   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  8532  /*
; ..\component\CanIf\Implementation\CanIf.c	  8533  |<DataModelStart>| CanIf_ChangeBaudrate
; ..\component\CanIf\Implementation\CanIf.c	  8534  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  8535  CanIfChangeBaudrate # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  8536  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  8537  CanIfOneChOpt
; ..\component\CanIf\Implementation\CanIf.c	  8538  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8539  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  8540  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8541  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8542  CanIfMultipleDriver, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8543  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8544  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  8545  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  8546  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  8547  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  8548  */
; ..\component\CanIf\Implementation\CanIf.c	  8549   /*!
; ..\component\CanIf\Implementation\CanIf.c	  8550   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  8551   *
; ..\component\CanIf\Implementation\CanIf.c	  8552   *
; ..\component\CanIf\Implementation\CanIf.c	  8553   *
; ..\component\CanIf\Implementation\CanIf.c	  8554   *
; ..\component\CanIf\Implementation\CanIf.c	  8555   *
; ..\component\CanIf\Implementation\CanIf.c	  8556   *
; ..\component\CanIf\Implementation\CanIf.c	  8557   */
; ..\component\CanIf\Implementation\CanIf.c	  8558  FUNC(Std_ReturnType, CANIF_CODE) CanIf_ChangeBaudrate(uint8 ControllerId, CONST(uint16, CANIF_CONST) Baudrate)
; ..\component\CanIf\Implementation\CanIf.c	  8559  {
; ..\component\CanIf\Implementation\CanIf.c	  8560    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8561    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  8562    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  8563  
; ..\component\CanIf\Implementation\CanIf.c	  8564    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8565  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8566  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8567    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  8568    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  8569    {
; ..\component\CanIf\Implementation\CanIf.c	  8570      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  8571      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8572    }
; ..\component\CanIf\Implementation\CanIf.c	  8573    else
; ..\component\CanIf\Implementation\CanIf.c	  8574  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  8575    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  8576    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  8577    {
; ..\component\CanIf\Implementation\CanIf.c	  8578      /* CANIF782 */
; ..\component\CanIf\Implementation\CanIf.c	  8579      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  8580    }
; ..\component\CanIf\Implementation\CanIf.c	  8581    /* #30 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  8582    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  8583    {
; ..\component\CanIf\Implementation\CanIf.c	  8584      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8585    }
; ..\component\CanIf\Implementation\CanIf.c	  8586  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8587  #   if (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  8588    /* #40 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  8589    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  8590    {
; ..\component\CanIf\Implementation\CanIf.c	  8591      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  8592    }
; ..\component\CanIf\Implementation\CanIf.c	  8593  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  8594  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  8595    else
; ..\component\CanIf\Implementation\CanIf.c	  8596  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8597    {
; ..\component\CanIf\Implementation\CanIf.c	  8598      /* \trace SPEC-21349 */
; ..\component\CanIf\Implementation\CanIf.c	  8599      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8600  
; ..\component\CanIf\Implementation\CanIf.c	  8601      /* #100 Pass the request to the CAN driver */
; ..\component\CanIf\Implementation\CanIf.c	  8602  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8603      CanIf_Can_ChangeBaudrateFctType canChangeBaudrateFct;
; ..\component\CanIf\Implementation\CanIf.c	  8604      canChangeBaudrateFct = CanIf_GetCan_ChangeBaudrateFctMap(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CanIf_Controller_Value));
; ..\component\CanIf\Implementation\CanIf.c	  8605      if (canChangeBaudrateFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  8606      {
; ..\component\CanIf\Implementation\CanIf.c	  8607        retval = canChangeBaudrateFct(CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), Baudrate); /* SBSW_CANIF_41 */
; ..\component\CanIf\Implementation\CanIf.c	  8608      }
; ..\component\CanIf\Implementation\CanIf.c	  8609  # else
; ..\component\CanIf\Implementation\CanIf.c	  8610      retval = Can_ChangeBaudrate(CanIf_Controller_Value, Baudrate);
; ..\component\CanIf\Implementation\CanIf.c	  8611  # endif  
; ..\component\CanIf\Implementation\CanIf.c	  8612    }
; ..\component\CanIf\Implementation\CanIf.c	  8613  
; ..\component\CanIf\Implementation\CanIf.c	  8614    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8615  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8616    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  8617    {
; ..\component\CanIf\Implementation\CanIf.c	  8618      CanIf_Det_ReportError(CANIF_BAUDRATECHANGE_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  8619    }
; ..\component\CanIf\Implementation\CanIf.c	  8620  # else
; ..\component\CanIf\Implementation\CanIf.c	  8621    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8622  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8623    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8624    
; ..\component\CanIf\Implementation\CanIf.c	  8625    return retval;  
; ..\component\CanIf\Implementation\CanIf.c	  8626  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  8627  #endif /* CANIF_CHANGE_BAUDRATE_SUPPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  8628  
; ..\component\CanIf\Implementation\CanIf.c	  8629  
; ..\component\CanIf\Implementation\CanIf.c	  8630  #if (CANIF_SET_BAUDRATE_API == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8631  /* CANIF867 */
; ..\component\CanIf\Implementation\CanIf.c	  8632  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  8633   *  CanIf_SetBaudrate()
; ..\component\CanIf\Implementation\CanIf.c	  8634   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  8635  /*
; ..\component\CanIf\Implementation\CanIf.c	  8636  |<DataModelStart>| CanIf_SetBaudrate
; ..\component\CanIf\Implementation\CanIf.c	  8637  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  8638  CanIfChangeBaudrate # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  8639  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  8640  CanIfOneChOpt
; ..\component\CanIf\Implementation\CanIf.c	  8641  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8642  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  8643  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8644  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8645  CanIfMultipleDriver, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8646  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8647  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8648  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  8649  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  8650  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  8651  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  8652  */
; ..\component\CanIf\Implementation\CanIf.c	  8653   /*!
; ..\component\CanIf\Implementation\CanIf.c	  8654   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  8655   *
; ..\component\CanIf\Implementation\CanIf.c	  8656   *
; ..\component\CanIf\Implementation\CanIf.c	  8657   *
; ..\component\CanIf\Implementation\CanIf.c	  8658   *
; ..\component\CanIf\Implementation\CanIf.c	  8659   *
; ..\component\CanIf\Implementation\CanIf.c	  8660   *
; ..\component\CanIf\Implementation\CanIf.c	  8661   */
; ..\component\CanIf\Implementation\CanIf.c	  8662  FUNC(Std_ReturnType, CANIF_CODE) CanIf_SetBaudrate(uint8 ControllerId, uint16 BaudRateConfigID)
; ..\component\CanIf\Implementation\CanIf.c	  8663  {
; ..\component\CanIf\Implementation\CanIf.c	  8664    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8665    Std_ReturnType retval = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  8666    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  8667  
; ..\component\CanIf\Implementation\CanIf.c	  8668    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8669  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8670  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8671    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  8672    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  8673    {
; ..\component\CanIf\Implementation\CanIf.c	  8674      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  8675      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8676    }
; ..\component\CanIf\Implementation\CanIf.c	  8677    else
; ..\component\CanIf\Implementation\CanIf.c	  8678  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  8679    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  8680    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  8681    {
; ..\component\CanIf\Implementation\CanIf.c	  8682      /* SWS_CANIF_869 */
; ..\component\CanIf\Implementation\CanIf.c	  8683      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  8684    }
; ..\component\CanIf\Implementation\CanIf.c	  8685    /* #30 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  8686    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  8687    {
; ..\component\CanIf\Implementation\CanIf.c	  8688      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8689    }
; ..\component\CanIf\Implementation\CanIf.c	  8690  #  if ((CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON) && (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  8691    /* #40 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  8692    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  8693    {
; ..\component\CanIf\Implementation\CanIf.c	  8694      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  8695    }
; ..\component\CanIf\Implementation\CanIf.c	  8696  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  8697    else
; ..\component\CanIf\Implementation\CanIf.c	  8698  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8699    {
; ..\component\CanIf\Implementation\CanIf.c	  8700      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8701  
; ..\component\CanIf\Implementation\CanIf.c	  8702      /* SWS_CANIF_00868 */
; ..\component\CanIf\Implementation\CanIf.c	  8703      /* #100 Pass the request to the CAN driver */
; ..\component\CanIf\Implementation\CanIf.c	  8704  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8705      CanIf_Can_SetBaudrateFctType canSetBaudrateFct;
; ..\component\CanIf\Implementation\CanIf.c	  8706      canSetBaudrateFct = CanIf_GetCan_SetBaudrateFctMap(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CanIf_Controller_Value));
; ..\component\CanIf\Implementation\CanIf.c	  8707      if (canSetBaudrateFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  8708      {
; ..\component\CanIf\Implementation\CanIf.c	  8709        retval = canSetBaudrateFct(CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), BaudRateConfigID); /* SBSW_CANIF_41 */
; ..\component\CanIf\Implementation\CanIf.c	  8710      }
; ..\component\CanIf\Implementation\CanIf.c	  8711  # else
; ..\component\CanIf\Implementation\CanIf.c	  8712      retval = Can_SetBaudrate(CanIf_Controller_Value, BaudRateConfigID);
; ..\component\CanIf\Implementation\CanIf.c	  8713  # endif    
; ..\component\CanIf\Implementation\CanIf.c	  8714    }
; ..\component\CanIf\Implementation\CanIf.c	  8715  
; ..\component\CanIf\Implementation\CanIf.c	  8716    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8717  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8718    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  8719    {
; ..\component\CanIf\Implementation\CanIf.c	  8720      CanIf_Det_ReportError(CANIF_BAUDRATESET_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  8721    }
; ..\component\CanIf\Implementation\CanIf.c	  8722  # else
; ..\component\CanIf\Implementation\CanIf.c	  8723    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8724  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8725  
; ..\component\CanIf\Implementation\CanIf.c	  8726  # if ((CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) && (CANIF_DEV_ERROR_DETECT == STD_OFF)) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  8727    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8728  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8729    return retval;  
; ..\component\CanIf\Implementation\CanIf.c	  8730  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  8731  #endif
; ..\component\CanIf\Implementation\CanIf.c	  8732  
; ..\component\CanIf\Implementation\CanIf.c	  8733  
; ..\component\CanIf\Implementation\CanIf.c	  8734  #if (CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED)
; ..\component\CanIf\Implementation\CanIf.c	  8735  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  8736   *  CanIf_SetAddressTableEntry()
; ..\component\CanIf\Implementation\CanIf.c	  8737   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  8738  /*
; ..\component\CanIf\Implementation\CanIf.c	  8739  |<DataModelStart>| CanIf_SetAddressTableEntry
; ..\component\CanIf\Implementation\CanIf.c	  8740  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  8741  CanIfJ1939 # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  8742  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  8743  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8744  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  8745  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8746  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8747  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8748  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8749  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  8750  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  8751  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  8752  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  8753  */
; ..\component\CanIf\Implementation\CanIf.c	  8754   /*!
; ..\component\CanIf\Implementation\CanIf.c	  8755   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  8756   *
; ..\component\CanIf\Implementation\CanIf.c	  8757   *
; ..\component\CanIf\Implementation\CanIf.c	  8758   *
; ..\component\CanIf\Implementation\CanIf.c	  8759   *
; ..\component\CanIf\Implementation\CanIf.c	  8760   *
; ..\component\CanIf\Implementation\CanIf.c	  8761   *
; ..\component\CanIf\Implementation\CanIf.c	  8762   */
; ..\component\CanIf\Implementation\CanIf.c	  8763  FUNC(void, CANIF_CODE) CanIf_SetAddressTableEntry(uint8 ControllerId, uint8 intAddr, uint8 busAddr)
; ..\component\CanIf\Implementation\CanIf.c	  8764  {
; ..\component\CanIf\Implementation\CanIf.c	  8765    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8766    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  8767    uint8 oldBusAddr;
; ..\component\CanIf\Implementation\CanIf.c	  8768    
; ..\component\CanIf\Implementation\CanIf.c	  8769  /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8770  #  if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8771  #   if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8772    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  8773    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  8774    {
; ..\component\CanIf\Implementation\CanIf.c	  8775      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  8776      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8777    }
; ..\component\CanIf\Implementation\CanIf.c	  8778    else
; ..\component\CanIf\Implementation\CanIf.c	  8779  #   endif /* CANIF_USE_INIT_POINTER == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  8780  #   if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  8781    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  8782    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  8783    {
; ..\component\CanIf\Implementation\CanIf.c	  8784      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  8785    }
; ..\component\CanIf\Implementation\CanIf.c	  8786    else
; ..\component\CanIf\Implementation\CanIf.c	  8787  #   endif /* CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF */
; ..\component\CanIf\Implementation\CanIf.c	  8788    /* #30 Check if CAN controller is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  8789    if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  8790    {
; ..\component\CanIf\Implementation\CanIf.c	  8791      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8792    }
; ..\component\CanIf\Implementation\CanIf.c	  8793    /* #40 Check if J1939 is activated for the ControllerId */
; ..\component\CanIf\Implementation\CanIf.c	  8794    else if (CANIF_CFG_CTRLJ1939DYNADDRSUPPORT(CanIf_Controller_Value) == CANIF_J1939_DYN_ADDR_DISABLED) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  8795    {
; ..\component\CanIf\Implementation\CanIf.c	  8796      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  8797    }
; ..\component\CanIf\Implementation\CanIf.c	  8798    /* Checks for parameters busAddr and intAdr are not needed here; validity is secured by datatype and runtime check during CanIf_Init() see SBSW_CANIF_48 */
; ..\component\CanIf\Implementation\CanIf.c	  8799    else
; ..\component\CanIf\Implementation\CanIf.c	  8800  #  endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  8801    {
; ..\component\CanIf\Implementation\CanIf.c	  8802      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8803  
; ..\component\CanIf\Implementation\CanIf.c	  8804      /* #100 Adapt the dynamic address lookup table (critical section is used) */
; ..\component\CanIf\Implementation\CanIf.c	  8805      CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_6);
; ..\component\CanIf\Implementation\CanIf.c	  8806  
; ..\component\CanIf\Implementation\CanIf.c	  8807      oldBusAddr = CANIF_VAR_J1939TXADDR_LOOKUP(CanIf_Controller_Value, intAddr);
; ..\component\CanIf\Implementation\CanIf.c	  8808      if (oldBusAddr != CANIF_J1939_NULL_ADDR) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  8809      {
; ..\component\CanIf\Implementation\CanIf.c	  8810        CANIF_VAR_SET_J1939RXADDR_LOOKUP(CanIf_Controller_Value, oldBusAddr, CANIF_J1939_NULL_ADDR); /* SBSW_CANIF_48 */
; ..\component\CanIf\Implementation\CanIf.c	  8811      }
; ..\component\CanIf\Implementation\CanIf.c	  8812      CANIF_VAR_SET_J1939RXADDR_LOOKUP(CanIf_Controller_Value, busAddr, intAddr); /* SBSW_CANIF_48 */
; ..\component\CanIf\Implementation\CanIf.c	  8813      CANIF_VAR_SET_J1939TXADDR_LOOKUP(CanIf_Controller_Value, intAddr, busAddr); /* SBSW_CANIF_48 */
; ..\component\CanIf\Implementation\CanIf.c	  8814  
; ..\component\CanIf\Implementation\CanIf.c	  8815      CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_6);
; ..\component\CanIf\Implementation\CanIf.c	  8816    }
; ..\component\CanIf\Implementation\CanIf.c	  8817  
; ..\component\CanIf\Implementation\CanIf.c	  8818    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8819  #  if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8820    if (errorId != CANIF_E_NO_ERROR) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  8821    {
; ..\component\CanIf\Implementation\CanIf.c	  8822      CanIf_Det_ReportError(CANIF_SETADDRESSTABLEENTRY_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  8823    }
; ..\component\CanIf\Implementation\CanIf.c	  8824  #  else
; ..\component\CanIf\Implementation\CanIf.c	  8825    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8826  #  endif /* CANIF_DEV_ERROR_REPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  8827  
; ..\component\CanIf\Implementation\CanIf.c	  8828  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  8829    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8830  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8831  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  8832  
; ..\component\CanIf\Implementation\CanIf.c	  8833  
; ..\component\CanIf\Implementation\CanIf.c	  8834  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  8835   *  CanIf_ResetAddressTableEntry()
; ..\component\CanIf\Implementation\CanIf.c	  8836   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  8837  /*
; ..\component\CanIf\Implementation\CanIf.c	  8838  |<DataModelStart>| CanIf_ResetAddressTableEntry
; ..\component\CanIf\Implementation\CanIf.c	  8839  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  8840  CanIfJ1939 # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  8841  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  8842  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8843  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  8844  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8845  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8846  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8847  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  8848  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  8849  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  8850  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  8851  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  8852  */
; ..\component\CanIf\Implementation\CanIf.c	  8853   /*!
; ..\component\CanIf\Implementation\CanIf.c	  8854   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  8855   *
; ..\component\CanIf\Implementation\CanIf.c	  8856   *
; ..\component\CanIf\Implementation\CanIf.c	  8857   *
; ..\component\CanIf\Implementation\CanIf.c	  8858   *
; ..\component\CanIf\Implementation\CanIf.c	  8859   *
; ..\component\CanIf\Implementation\CanIf.c	  8860   *
; ..\component\CanIf\Implementation\CanIf.c	  8861   */
; ..\component\CanIf\Implementation\CanIf.c	  8862  FUNC(void, CANIF_CODE) CanIf_ResetAddressTableEntry(uint8 ControllerId, uint8 intAddr)
; ..\component\CanIf\Implementation\CanIf.c	  8863  {
; ..\component\CanIf\Implementation\CanIf.c	  8864    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8865    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  8866    uint8 busAddr;
; ..\component\CanIf\Implementation\CanIf.c	  8867  
; ..\component\CanIf\Implementation\CanIf.c	  8868    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8869  #  if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8870  #   if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8871    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  8872    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  8873    {
; ..\component\CanIf\Implementation\CanIf.c	  8874      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  8875      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8876    }
; ..\component\CanIf\Implementation\CanIf.c	  8877    else 
; ..\component\CanIf\Implementation\CanIf.c	  8878  #   endif /* CANIF_USE_INIT_POINTER == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  8879  #   if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  8880    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  8881    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  8882    {
; ..\component\CanIf\Implementation\CanIf.c	  8883      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  8884    }
; ..\component\CanIf\Implementation\CanIf.c	  8885    else
; ..\component\CanIf\Implementation\CanIf.c	  8886  #   endif /* CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_OFF */
; ..\component\CanIf\Implementation\CanIf.c	  8887    /* #30 Check if CAN controller is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  8888    if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  8889    {
; ..\component\CanIf\Implementation\CanIf.c	  8890      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  8891    }
; ..\component\CanIf\Implementation\CanIf.c	  8892    /* #40 Check if J1939 is activated for the ControllerId */
; ..\component\CanIf\Implementation\CanIf.c	  8893    else if (CANIF_CFG_CTRLJ1939DYNADDRSUPPORT(CanIf_Controller_Value) == CANIF_J1939_DYN_ADDR_DISABLED) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  8894    {
; ..\component\CanIf\Implementation\CanIf.c	  8895      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  8896    }
; ..\component\CanIf\Implementation\CanIf.c	  8897    /* Check for parameter intAdr is not needed here; validity is secured by datatype and runtime check during CanIf_Init() see SBSW_CANIF_48 */
; ..\component\CanIf\Implementation\CanIf.c	  8898    else
; ..\component\CanIf\Implementation\CanIf.c	  8899  #  endif /* CANIF_DEV_ERROR_DETECT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  8900    {
; ..\component\CanIf\Implementation\CanIf.c	  8901      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8902  
; ..\component\CanIf\Implementation\CanIf.c	  8903      /* #100 Reset the dynamic address lookup table (critical section is used) */
; ..\component\CanIf\Implementation\CanIf.c	  8904      CanIf_EnterCritical(CANIF_EXCLUSIVE_AREA_6);
; ..\component\CanIf\Implementation\CanIf.c	  8905  
; ..\component\CanIf\Implementation\CanIf.c	  8906      busAddr = CANIF_VAR_J1939TXADDR_LOOKUP(CanIf_Controller_Value, intAddr);
; ..\component\CanIf\Implementation\CanIf.c	  8907      
; ..\component\CanIf\Implementation\CanIf.c	  8908      CANIF_VAR_SET_J1939RXADDR_LOOKUP(CanIf_Controller_Value, busAddr, CANIF_J1939_NULL_ADDR); /* SBSW_CANIF_48 */
; ..\component\CanIf\Implementation\CanIf.c	  8909      CANIF_VAR_SET_J1939TXADDR_LOOKUP(CanIf_Controller_Value, intAddr, CANIF_J1939_NULL_ADDR); /* SBSW_CANIF_48 */
; ..\component\CanIf\Implementation\CanIf.c	  8910  
; ..\component\CanIf\Implementation\CanIf.c	  8911      CanIf_LeaveCritical(CANIF_EXCLUSIVE_AREA_6);
; ..\component\CanIf\Implementation\CanIf.c	  8912    }
; ..\component\CanIf\Implementation\CanIf.c	  8913  
; ..\component\CanIf\Implementation\CanIf.c	  8914    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8915  #  if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8916    if (errorId != CANIF_E_NO_ERROR) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  8917    {
; ..\component\CanIf\Implementation\CanIf.c	  8918      CanIf_Det_ReportError(CANIF_RESETADDRESSTABLEENTRY_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  8919    }
; ..\component\CanIf\Implementation\CanIf.c	  8920  #  else
; ..\component\CanIf\Implementation\CanIf.c	  8921    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8922  #  endif /* CANIF_DEV_ERROR_REPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  8923  
; ..\component\CanIf\Implementation\CanIf.c	  8924  # if (CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  8925    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8926  # endif
; ..\component\CanIf\Implementation\CanIf.c	  8927  }
; ..\component\CanIf\Implementation\CanIf.c	  8928  #endif  /* CANIF_J1939_DYN_ADDR_SUPPORT != CANIF_J1939_DYN_ADDR_DISABLED */
; ..\component\CanIf\Implementation\CanIf.c	  8929  
; ..\component\CanIf\Implementation\CanIf.c	  8930  
; ..\component\CanIf\Implementation\CanIf.c	  8931  #if (CANIF_EXTENDED_RAM_CHECK_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8932  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  8933   *  CanIf_RamCheckCorruptMailbox()
; ..\component\CanIf\Implementation\CanIf.c	  8934   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  8935  /*
; ..\component\CanIf\Implementation\CanIf.c	  8936  |<DataModelStart>| CanIf_RamCheckCorruptMailbox
; ..\component\CanIf\Implementation\CanIf.c	  8937  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  8938  CanIfRamCheck  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  8939  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  8940  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8941  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  8942  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  8943  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  8944  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  8945  */
; ..\component\CanIf\Implementation\CanIf.c	  8946   /*!
; ..\component\CanIf\Implementation\CanIf.c	  8947   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  8948   *
; ..\component\CanIf\Implementation\CanIf.c	  8949   *
; ..\component\CanIf\Implementation\CanIf.c	  8950   *
; ..\component\CanIf\Implementation\CanIf.c	  8951   */
; ..\component\CanIf\Implementation\CanIf.c	  8952  FUNC(void, CANIF_CODE) CanIf_RamCheckCorruptMailbox(uint8 ControllerId, CanIf_HwHandleType HwHandle) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  8953  {
; ..\component\CanIf\Implementation\CanIf.c	  8954    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8955    uint8 errorId = CANIF_E_NO_ERROR; 
; ..\component\CanIf\Implementation\CanIf.c	  8956    CanIf_RamCheckCorruptMailboxIndFctType ramCheckCorruptMailboxIndFct = CANIF_CFG_RAMCHECKCORRUPTMAILBOXINDFCT();
; ..\component\CanIf\Implementation\CanIf.c	  8957  
; ..\component\CanIf\Implementation\CanIf.c	  8958    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8959  
; ..\component\CanIf\Implementation\CanIf.c	  8960    /* #10 Verify if function pointer is valid */
; ..\component\CanIf\Implementation\CanIf.c	  8961    if (ramCheckCorruptMailboxIndFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  8962    {
; ..\component\CanIf\Implementation\CanIf.c	  8963      /* #20 Call application notification function */ 
; ..\component\CanIf\Implementation\CanIf.c	  8964      ramCheckCorruptMailboxIndFct(ControllerId, HwHandle); /* SBSW_CANIF_13 */
; ..\component\CanIf\Implementation\CanIf.c	  8965    }
; ..\component\CanIf\Implementation\CanIf.c	  8966    else
; ..\component\CanIf\Implementation\CanIf.c	  8967    {
; ..\component\CanIf\Implementation\CanIf.c	  8968      errorId = CANIF_E_CONFIG;
; ..\component\CanIf\Implementation\CanIf.c	  8969    }
; ..\component\CanIf\Implementation\CanIf.c	  8970  
; ..\component\CanIf\Implementation\CanIf.c	  8971    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  8972  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  8973    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */
; ..\component\CanIf\Implementation\CanIf.c	  8974    {
; ..\component\CanIf\Implementation\CanIf.c	  8975      CanIf_Det_ReportError(CANIF_RAMCHECKCORRUPTMAILBOX_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  8976    }
; ..\component\CanIf\Implementation\CanIf.c	  8977  # else
; ..\component\CanIf\Implementation\CanIf.c	  8978    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  8979  # endif     
; ..\component\CanIf\Implementation\CanIf.c	  8980  }
; ..\component\CanIf\Implementation\CanIf.c	  8981    
; ..\component\CanIf\Implementation\CanIf.c	  8982  
; ..\component\CanIf\Implementation\CanIf.c	  8983  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  8984   *  CanIf_RamCheckCorruptController()
; ..\component\CanIf\Implementation\CanIf.c	  8985   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  8986  /*
; ..\component\CanIf\Implementation\CanIf.c	  8987  |<DataModelStart>| CanIf_RamCheckCorruptController
; ..\component\CanIf\Implementation\CanIf.c	  8988  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  8989  CanIfRamCheck  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  8990  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  8991  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  8992  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  8993  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  8994  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  8995  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  8996  */
; ..\component\CanIf\Implementation\CanIf.c	  8997   /*!
; ..\component\CanIf\Implementation\CanIf.c	  8998   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  8999   *
; ..\component\CanIf\Implementation\CanIf.c	  9000   *
; ..\component\CanIf\Implementation\CanIf.c	  9001   *
; ..\component\CanIf\Implementation\CanIf.c	  9002   */  
; ..\component\CanIf\Implementation\CanIf.c	  9003  FUNC(void, CANIF_CODE) CanIf_RamCheckCorruptController(uint8 ControllerId) /* COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG */
; ..\component\CanIf\Implementation\CanIf.c	  9004  {
; ..\component\CanIf\Implementation\CanIf.c	  9005    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9006    uint8 errorId = CANIF_E_NO_ERROR; 
; ..\component\CanIf\Implementation\CanIf.c	  9007    CanIf_RamCheckCorruptControllerIndFctType ramCheckCorruptControllerIndFct = CANIF_CFG_RAMCHECKCORRUPTCONTROLLERINDFCT();
; ..\component\CanIf\Implementation\CanIf.c	  9008  
; ..\component\CanIf\Implementation\CanIf.c	  9009    /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9010    
; ..\component\CanIf\Implementation\CanIf.c	  9011    /* #10 Verify if function pointer is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9012    if (ramCheckCorruptControllerIndFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  9013    {
; ..\component\CanIf\Implementation\CanIf.c	  9014      /* #20 Call application notification function */ 
; ..\component\CanIf\Implementation\CanIf.c	  9015      ramCheckCorruptControllerIndFct(ControllerId); /* SBSW_CANIF_13 */
; ..\component\CanIf\Implementation\CanIf.c	  9016    }
; ..\component\CanIf\Implementation\CanIf.c	  9017    else
; ..\component\CanIf\Implementation\CanIf.c	  9018    {
; ..\component\CanIf\Implementation\CanIf.c	  9019      errorId = CANIF_E_CONFIG;
; ..\component\CanIf\Implementation\CanIf.c	  9020    }
; ..\component\CanIf\Implementation\CanIf.c	  9021  
; ..\component\CanIf\Implementation\CanIf.c	  9022    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9023  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9024    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */
; ..\component\CanIf\Implementation\CanIf.c	  9025    {
; ..\component\CanIf\Implementation\CanIf.c	  9026      CanIf_Det_ReportError(CANIF_RAMCHECKCORRUPTCONTROLLER_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  9027    }
; ..\component\CanIf\Implementation\CanIf.c	  9028  # else
; ..\component\CanIf\Implementation\CanIf.c	  9029    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9030  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9031  }
; ..\component\CanIf\Implementation\CanIf.c	  9032  
; ..\component\CanIf\Implementation\CanIf.c	  9033  
; ..\component\CanIf\Implementation\CanIf.c	  9034  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  9035   *  CanIf_RamCheckExecute()
; ..\component\CanIf\Implementation\CanIf.c	  9036   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  9037  /*
; ..\component\CanIf\Implementation\CanIf.c	  9038  |<DataModelStart>| CanIf_RamCheckExecute
; ..\component\CanIf\Implementation\CanIf.c	  9039  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  9040  CanIfRamCheck  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  9041  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  9042  CanIfOneChOpt
; ..\component\CanIf\Implementation\CanIf.c	  9043  CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  9044  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9045  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9046  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9047  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9048  CanIfMultipleDriver, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9049  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9050  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9051  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  9052  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  9053  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  9054  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  9055  */
; ..\component\CanIf\Implementation\CanIf.c	  9056   /*!
; ..\component\CanIf\Implementation\CanIf.c	  9057   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  9058   *
; ..\component\CanIf\Implementation\CanIf.c	  9059   *
; ..\component\CanIf\Implementation\CanIf.c	  9060   *
; ..\component\CanIf\Implementation\CanIf.c	  9061   *
; ..\component\CanIf\Implementation\CanIf.c	  9062   *
; ..\component\CanIf\Implementation\CanIf.c	  9063   *
; ..\component\CanIf\Implementation\CanIf.c	  9064   */  
; ..\component\CanIf\Implementation\CanIf.c	  9065  FUNC(void, CANIF_CODE) CanIf_RamCheckExecute(uint8 ControllerId)
; ..\component\CanIf\Implementation\CanIf.c	  9066  {
; ..\component\CanIf\Implementation\CanIf.c	  9067    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9068    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  9069  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9070    CanIf_Can_RamCheckExecuteFctType can_RamCheckExecuteFct;
; ..\component\CanIf\Implementation\CanIf.c	  9071  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9072      
; ..\component\CanIf\Implementation\CanIf.c	  9073    /* ----- Development Error Checks --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9074  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9075  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9076    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  9077    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  9078    {
; ..\component\CanIf\Implementation\CanIf.c	  9079      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9080    }
; ..\component\CanIf\Implementation\CanIf.c	  9081    else
; ..\component\CanIf\Implementation\CanIf.c	  9082  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9083    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9084    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  9085    {
; ..\component\CanIf\Implementation\CanIf.c	  9086      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9087    }
; ..\component\CanIf\Implementation\CanIf.c	  9088    /* #30 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  9089    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  9090    {
; ..\component\CanIf\Implementation\CanIf.c	  9091      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9092    }
; ..\component\CanIf\Implementation\CanIf.c	  9093  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9094  #   if (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  9095    /* #40 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  9096    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  9097    {
; ..\component\CanIf\Implementation\CanIf.c	  9098      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9099    }
; ..\component\CanIf\Implementation\CanIf.c	  9100  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  9101  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9102    else
; ..\component\CanIf\Implementation\CanIf.c	  9103  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9104    {
; ..\component\CanIf\Implementation\CanIf.c	  9105      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9106  
; ..\component\CanIf\Implementation\CanIf.c	  9107      /* #100 Call CAN driver to execute extended RAM check */
; ..\component\CanIf\Implementation\CanIf.c	  9108  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9109      can_RamCheckExecuteFct = CanIf_GetCan_RamCheckExecuteFctMap(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CanIf_Controller_Value));
; ..\component\CanIf\Implementation\CanIf.c	  9110    
; ..\component\CanIf\Implementation\CanIf.c	  9111      if(can_RamCheckExecuteFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  9112      {
; ..\component\CanIf\Implementation\CanIf.c	  9113        can_RamCheckExecuteFct(CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value)); /* SBSW_CANIF_41 */
; ..\component\CanIf\Implementation\CanIf.c	  9114      }
; ..\component\CanIf\Implementation\CanIf.c	  9115      else
; ..\component\CanIf\Implementation\CanIf.c	  9116      {
; ..\component\CanIf\Implementation\CanIf.c	  9117        errorId = CANIF_E_CONFIG; 
; ..\component\CanIf\Implementation\CanIf.c	  9118      }
; ..\component\CanIf\Implementation\CanIf.c	  9119  # else
; ..\component\CanIf\Implementation\CanIf.c	  9120      Can_RamCheckExecute(CanIf_Controller_Value);
; ..\component\CanIf\Implementation\CanIf.c	  9121  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9122    }
; ..\component\CanIf\Implementation\CanIf.c	  9123    
; ..\component\CanIf\Implementation\CanIf.c	  9124    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9125  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9126    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */
; ..\component\CanIf\Implementation\CanIf.c	  9127    {
; ..\component\CanIf\Implementation\CanIf.c	  9128      CanIf_Det_ReportError(CANIF_RAMCHECKEXECUTE_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  9129    }
; ..\component\CanIf\Implementation\CanIf.c	  9130  # else
; ..\component\CanIf\Implementation\CanIf.c	  9131    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9132  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9133  # if ((CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) && (CANIF_DEV_ERROR_DETECT == STD_OFF)) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  9134    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9135  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9136  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  9137  
; ..\component\CanIf\Implementation\CanIf.c	  9138  
; ..\component\CanIf\Implementation\CanIf.c	  9139  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  9140   *  CanIf_RamCheckEnableMailbox()
; ..\component\CanIf\Implementation\CanIf.c	  9141   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  9142  /*
; ..\component\CanIf\Implementation\CanIf.c	  9143  |<DataModelStart>| CanIf_RamCheckEnableMailbox
; ..\component\CanIf\Implementation\CanIf.c	  9144  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  9145  CanIfRamCheck  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  9146  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  9147  CanIfOneChOpt
; ..\component\CanIf\Implementation\CanIf.c	  9148  CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  9149  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9150  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9151  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9152  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9153  CanIfMultipleDriver, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9154  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9155  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  9156  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  9157  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  9158  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  9159  */
; ..\component\CanIf\Implementation\CanIf.c	  9160   /*!
; ..\component\CanIf\Implementation\CanIf.c	  9161   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  9162   *
; ..\component\CanIf\Implementation\CanIf.c	  9163   *
; ..\component\CanIf\Implementation\CanIf.c	  9164   *
; ..\component\CanIf\Implementation\CanIf.c	  9165   *
; ..\component\CanIf\Implementation\CanIf.c	  9166   *
; ..\component\CanIf\Implementation\CanIf.c	  9167   *
; ..\component\CanIf\Implementation\CanIf.c	  9168   */  
; ..\component\CanIf\Implementation\CanIf.c	  9169  FUNC(void, CANIF_CODE) CanIf_RamCheckEnableMailbox(uint8 ControllerId, CanIf_HwHandleType HwHandle)
; ..\component\CanIf\Implementation\CanIf.c	  9170  {
; ..\component\CanIf\Implementation\CanIf.c	  9171    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9172    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  9173  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9174    CanIf_Can_RamCheckEnableMailboxFctType can_RamCheckEnableMailboxFct;
; ..\component\CanIf\Implementation\CanIf.c	  9175  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9176  
; ..\component\CanIf\Implementation\CanIf.c	  9177    /* ----- Development Error Checks --------------------------------------- */  
; ..\component\CanIf\Implementation\CanIf.c	  9178  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9179  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9180    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  9181    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  9182    {
; ..\component\CanIf\Implementation\CanIf.c	  9183      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9184    }
; ..\component\CanIf\Implementation\CanIf.c	  9185    else
; ..\component\CanIf\Implementation\CanIf.c	  9186  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9187    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9188    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  9189    {
; ..\component\CanIf\Implementation\CanIf.c	  9190      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9191    }
; ..\component\CanIf\Implementation\CanIf.c	  9192    /* #30 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  9193    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  9194    {
; ..\component\CanIf\Implementation\CanIf.c	  9195      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9196    }
; ..\component\CanIf\Implementation\CanIf.c	  9197  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9198  #   if (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  9199    /* #40 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  9200    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  9201    {
; ..\component\CanIf\Implementation\CanIf.c	  9202      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9203    }
; ..\component\CanIf\Implementation\CanIf.c	  9204  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  9205  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9206    else
; ..\component\CanIf\Implementation\CanIf.c	  9207  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9208    {
; ..\component\CanIf\Implementation\CanIf.c	  9209      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9210  
; ..\component\CanIf\Implementation\CanIf.c	  9211      /* #100 Call CAN driver to enable the referred mailbox */
; ..\component\CanIf\Implementation\CanIf.c	  9212  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9213      can_RamCheckEnableMailboxFct = CanIf_GetCan_RamCheckEnableMailboxFctMap(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CanIf_Controller_Value));
; ..\component\CanIf\Implementation\CanIf.c	  9214    
; ..\component\CanIf\Implementation\CanIf.c	  9215      if (can_RamCheckEnableMailboxFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  9216      {
; ..\component\CanIf\Implementation\CanIf.c	  9217        can_RamCheckEnableMailboxFct((Can_HwHandleType)HwHandle);  /* SBSW_CANIF_41 */
; ..\component\CanIf\Implementation\CanIf.c	  9218      }
; ..\component\CanIf\Implementation\CanIf.c	  9219      else
; ..\component\CanIf\Implementation\CanIf.c	  9220      {
; ..\component\CanIf\Implementation\CanIf.c	  9221        errorId = CANIF_E_CONFIG;
; ..\component\CanIf\Implementation\CanIf.c	  9222      }
; ..\component\CanIf\Implementation\CanIf.c	  9223  # else
; ..\component\CanIf\Implementation\CanIf.c	  9224      Can_RamCheckEnableMailbox(HwHandle);
; ..\component\CanIf\Implementation\CanIf.c	  9225  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9226    }
; ..\component\CanIf\Implementation\CanIf.c	  9227      
; ..\component\CanIf\Implementation\CanIf.c	  9228    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9229  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9230    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */
; ..\component\CanIf\Implementation\CanIf.c	  9231    {
; ..\component\CanIf\Implementation\CanIf.c	  9232      CanIf_Det_ReportError(CANIF_RAMCHECKENABLEMAILBOX_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  9233    }
; ..\component\CanIf\Implementation\CanIf.c	  9234  # else
; ..\component\CanIf\Implementation\CanIf.c	  9235    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9236  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9237    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9238  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  9239  
; ..\component\CanIf\Implementation\CanIf.c	  9240  
; ..\component\CanIf\Implementation\CanIf.c	  9241  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  9242   *  CanIf_RamCheckEnableController()
; ..\component\CanIf\Implementation\CanIf.c	  9243   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  9244  /*
; ..\component\CanIf\Implementation\CanIf.c	  9245  |<DataModelStart>| CanIf_RamCheckEnableController
; ..\component\CanIf\Implementation\CanIf.c	  9246  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  9247  CanIfRamCheck  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  9248  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  9249  CanIfOneChOpt
; ..\component\CanIf\Implementation\CanIf.c	  9250  CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  9251  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9252  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9253  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9254  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9255  CanIfMultipleDriver, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9256  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9257  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9258  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  9259  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  9260  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  9261  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  9262  */
; ..\component\CanIf\Implementation\CanIf.c	  9263   /*!
; ..\component\CanIf\Implementation\CanIf.c	  9264   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  9265   *
; ..\component\CanIf\Implementation\CanIf.c	  9266   *
; ..\component\CanIf\Implementation\CanIf.c	  9267   *
; ..\component\CanIf\Implementation\CanIf.c	  9268   *
; ..\component\CanIf\Implementation\CanIf.c	  9269   *
; ..\component\CanIf\Implementation\CanIf.c	  9270   *
; ..\component\CanIf\Implementation\CanIf.c	  9271   */  
; ..\component\CanIf\Implementation\CanIf.c	  9272  FUNC(void, CANIF_CODE) CanIf_RamCheckEnableController(uint8 ControllerId)
; ..\component\CanIf\Implementation\CanIf.c	  9273  {
; ..\component\CanIf\Implementation\CanIf.c	  9274    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9275    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  9276  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9277    CanIf_Can_RamCheckEnableControllerFctType can_RamCheckEnableControllerFct;
; ..\component\CanIf\Implementation\CanIf.c	  9278  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9279    
; ..\component\CanIf\Implementation\CanIf.c	  9280    /* ----- Development Error Checks --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9281  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9282  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9283    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  9284    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  9285    {
; ..\component\CanIf\Implementation\CanIf.c	  9286      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9287    }
; ..\component\CanIf\Implementation\CanIf.c	  9288    else
; ..\component\CanIf\Implementation\CanIf.c	  9289  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9290    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9291    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  9292    {
; ..\component\CanIf\Implementation\CanIf.c	  9293      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9294    }
; ..\component\CanIf\Implementation\CanIf.c	  9295    /* #30 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  9296    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  9297    {
; ..\component\CanIf\Implementation\CanIf.c	  9298      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9299    }
; ..\component\CanIf\Implementation\CanIf.c	  9300  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9301  #   if(CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  9302    /* #40 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  9303    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  9304    {
; ..\component\CanIf\Implementation\CanIf.c	  9305      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9306    }
; ..\component\CanIf\Implementation\CanIf.c	  9307  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  9308  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9309    else
; ..\component\CanIf\Implementation\CanIf.c	  9310  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9311    {
; ..\component\CanIf\Implementation\CanIf.c	  9312      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9313  
; ..\component\CanIf\Implementation\CanIf.c	  9314      /* #100 Call CAN driver to enable the referred controller */
; ..\component\CanIf\Implementation\CanIf.c	  9315  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9316      can_RamCheckEnableControllerFct = CanIf_GetCan_RamCheckEnableControllerFctMap(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CanIf_Controller_Value));
; ..\component\CanIf\Implementation\CanIf.c	  9317    
; ..\component\CanIf\Implementation\CanIf.c	  9318      if (can_RamCheckEnableControllerFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  9319      {
; ..\component\CanIf\Implementation\CanIf.c	  9320        can_RamCheckEnableControllerFct(CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value)); /* SBSW_CANIF_41 */
; ..\component\CanIf\Implementation\CanIf.c	  9321      }
; ..\component\CanIf\Implementation\CanIf.c	  9322      else
; ..\component\CanIf\Implementation\CanIf.c	  9323      {
; ..\component\CanIf\Implementation\CanIf.c	  9324        errorId = CANIF_E_CONFIG;
; ..\component\CanIf\Implementation\CanIf.c	  9325      }
; ..\component\CanIf\Implementation\CanIf.c	  9326  # else
; ..\component\CanIf\Implementation\CanIf.c	  9327      Can_RamCheckEnableController(CanIf_Controller_Value);
; ..\component\CanIf\Implementation\CanIf.c	  9328  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9329    }
; ..\component\CanIf\Implementation\CanIf.c	  9330      
; ..\component\CanIf\Implementation\CanIf.c	  9331    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9332  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9333    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */
; ..\component\CanIf\Implementation\CanIf.c	  9334    {
; ..\component\CanIf\Implementation\CanIf.c	  9335      CanIf_Det_ReportError(CANIF_RAMCHECKENABLECONTROLLER_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  9336    }
; ..\component\CanIf\Implementation\CanIf.c	  9337  # else
; ..\component\CanIf\Implementation\CanIf.c	  9338    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9339  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9340  # if ((CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) && (CANIF_DEV_ERROR_DETECT == STD_OFF)) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  9341    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9342  # endif   
; ..\component\CanIf\Implementation\CanIf.c	  9343  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  9344  #endif  /* (CANIF_EXTENDED_RAM_CHECK_SUPPORT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  9345  
; ..\component\CanIf\Implementation\CanIf.c	  9346  
; ..\component\CanIf\Implementation\CanIf.c	  9347  #if (CANIF_SET_PDU_RECEPTION_MODE_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9348  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  9349   *  CanIf_SetPduReceptionMode()
; ..\component\CanIf\Implementation\CanIf.c	  9350   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  9351  /*
; ..\component\CanIf\Implementation\CanIf.c	  9352  |<DataModelStart>| CanIf_SetPduReceptionMode
; ..\component\CanIf\Implementation\CanIf.c	  9353  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  9354  CanIfRxPduReceptionMode  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  9355  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  9356  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9357  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9358  CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9359  CanIfVariant, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9360  CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9361  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9362  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  9363  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  9364  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  9365  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  9366  */
; ..\component\CanIf\Implementation\CanIf.c	  9367   /*!
; ..\component\CanIf\Implementation\CanIf.c	  9368   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  9369   *
; ..\component\CanIf\Implementation\CanIf.c	  9370   *
; ..\component\CanIf\Implementation\CanIf.c	  9371   *
; ..\component\CanIf\Implementation\CanIf.c	  9372   *
; ..\component\CanIf\Implementation\CanIf.c	  9373   *
; ..\component\CanIf\Implementation\CanIf.c	  9374   *
; ..\component\CanIf\Implementation\CanIf.c	  9375   *
; ..\component\CanIf\Implementation\CanIf.c	  9376   */  
; ..\component\CanIf\Implementation\CanIf.c	  9377  FUNC(Std_ReturnType, CANIF_CODE) CanIf_SetPduReceptionMode(PduIdType id, CanIf_ReceptionModeType mode) 
; ..\component\CanIf\Implementation\CanIf.c	  9378  {
; ..\component\CanIf\Implementation\CanIf.c	  9379    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9380    Std_ReturnType retval  = E_NOT_OK;
; ..\component\CanIf\Implementation\CanIf.c	  9381    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  9382    CanIf_AnyIdxType CanIfRxPduId;
; ..\component\CanIf\Implementation\CanIf.c	  9383  
; ..\component\CanIf\Implementation\CanIf.c	  9384    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9385  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9386  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9387    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  9388    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  9389    {
; ..\component\CanIf\Implementation\CanIf.c	  9390      /* \trace SPEC-5238 */
; ..\component\CanIf\Implementation\CanIf.c	  9391      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9392    }
; ..\component\CanIf\Implementation\CanIf.c	  9393    else
; ..\component\CanIf\Implementation\CanIf.c	  9394  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9395  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9396  # if ((CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME) || (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  9397  #  if (CANIF_DEV_ERROR_DETECT == STD_ON)   
; ..\component\CanIf\Implementation\CanIf.c	  9398    /* #20 Check if parameter id is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9399    if (id >= CANIF_CFG_MAX_ULRXPDUS)
; ..\component\CanIf\Implementation\CanIf.c	  9400    {
; ..\component\CanIf\Implementation\CanIf.c	  9401      /* \trace SPEC-2007 */
; ..\component\CanIf\Implementation\CanIf.c	  9402      errorId = CANIF_E_INVALID_RXPDUID;
; ..\component\CanIf\Implementation\CanIf.c	  9403    }
; ..\component\CanIf\Implementation\CanIf.c	  9404    else
; ..\component\CanIf\Implementation\CanIf.c	  9405  #  endif      
; ..\component\CanIf\Implementation\CanIf.c	  9406  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9407    {
; ..\component\CanIf\Implementation\CanIf.c	  9408  # if ((CANIF_CONFIG_VARIANT == CANIF_CFGVAR_POSTBUILDTIME) || (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON))
; ..\component\CanIf\Implementation\CanIf.c	  9409      /* for PB and LT configurations the RxPduId order between CanIf and higher layers may differ and needs to be indirected */
; ..\component\CanIf\Implementation\CanIf.c	  9410      CanIfRxPduId = CANIF_CFG_EXTRXPDUID2INTRXPDUID(id);
; ..\component\CanIf\Implementation\CanIf.c	  9411  # else
; ..\component\CanIf\Implementation\CanIf.c	  9412      CanIfRxPduId = id;
; ..\component\CanIf\Implementation\CanIf.c	  9413  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9414  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9415      /* #30 Check if parameter CanIfRxPduId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9416      if (CanIfRxPduId >= CANIF_CFG_MAX_RXPDUS)
; ..\component\CanIf\Implementation\CanIf.c	  9417      {
; ..\component\CanIf\Implementation\CanIf.c	  9418        /* \trace SPEC-2007 */
; ..\component\CanIf\Implementation\CanIf.c	  9419        errorId = CANIF_E_INVALID_RXPDUID;
; ..\component\CanIf\Implementation\CanIf.c	  9420      }
; ..\component\CanIf\Implementation\CanIf.c	  9421      /* #40 Check if parameter mode is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9422      else if ((mode != CANIF_RMT_RECEIVE_STOP) && (mode != CANIF_RMT_IGNORE_CONTINUE))
; ..\component\CanIf\Implementation\CanIf.c	  9423      {
; ..\component\CanIf\Implementation\CanIf.c	  9424        errorId = CANIF_E_INVALID_PDURECEPTIONMODE; /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  9425      }
; ..\component\CanIf\Implementation\CanIf.c	  9426      else
; ..\component\CanIf\Implementation\CanIf.c	  9427  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9428      {
; ..\component\CanIf\Implementation\CanIf.c	  9429        
; ..\component\CanIf\Implementation\CanIf.c	  9430        /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9431  
; ..\component\CanIf\Implementation\CanIf.c	  9432        /* #100 Is for this CanIfRxPduId the reception mode adjustable? */
; ..\component\CanIf\Implementation\CanIf.c	  9433        if (CANIF_CFG_RX_ISRECEPTIONMODEPDU(CanIfRxPduId))
; ..\component\CanIf\Implementation\CanIf.c	  9434        {
; ..\component\CanIf\Implementation\CanIf.c	  9435          /* #110 Set the reception mode */
; ..\component\CanIf\Implementation\CanIf.c	  9436          CANIF_VAR_SET_PDU_RECEPTION_MODE(CANIF_CFG_RX_PDURECEPTIONMODEIDX(CanIfRxPduId), mode); /* SBSW_CANIF_42 */
; ..\component\CanIf\Implementation\CanIf.c	  9437          retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  9438        }
; ..\component\CanIf\Implementation\CanIf.c	  9439  # if (CANIF_DEV_ERROR_DETECT == STD_ON)        
; ..\component\CanIf\Implementation\CanIf.c	  9440        else
; ..\component\CanIf\Implementation\CanIf.c	  9441        {
; ..\component\CanIf\Implementation\CanIf.c	  9442          errorId = CANIF_E_INVALID_RXPDUID;
; ..\component\CanIf\Implementation\CanIf.c	  9443        }
; ..\component\CanIf\Implementation\CanIf.c	  9444  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9445      }
; ..\component\CanIf\Implementation\CanIf.c	  9446    }
; ..\component\CanIf\Implementation\CanIf.c	  9447    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9448  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9449    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */
; ..\component\CanIf\Implementation\CanIf.c	  9450    {
; ..\component\CanIf\Implementation\CanIf.c	  9451      CanIf_Det_ReportError(CANIF_SETPDURECEPTIONMODE_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  9452    }
; ..\component\CanIf\Implementation\CanIf.c	  9453  # else
; ..\component\CanIf\Implementation\CanIf.c	  9454    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9455  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9456    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  9457  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  9458  #endif  /* (CANIF_SET_PDU_RECEPTION_MODE_SUPPORT == STD_ON) */
; ..\component\CanIf\Implementation\CanIf.c	  9459  
; ..\component\CanIf\Implementation\CanIf.c	  9460  
; ..\component\CanIf\Implementation\CanIf.c	  9461  # if (CANIF_BUS_MIRRORING_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9462  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  9463   *  CanIf_GetControllerErrorState()
; ..\component\CanIf\Implementation\CanIf.c	  9464   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  9465  /*
; ..\component\CanIf\Implementation\CanIf.c	  9466  |<DataModelStart>| CanIf_GetControllerErrorState
; ..\component\CanIf\Implementation\CanIf.c	  9467  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  9468  CanIfBusMirroringSupport  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  9469  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  9470  CanIfOneChOpt
; ..\component\CanIf\Implementation\CanIf.c	  9471  CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  9472  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9473  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9474  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9475  CanIfMultipleDriver, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9476  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9477  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9478  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  9479  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  9480  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  9481  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  9482  */
; ..\component\CanIf\Implementation\CanIf.c	  9483   /*!
; ..\component\CanIf\Implementation\CanIf.c	  9484   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  9485   *
; ..\component\CanIf\Implementation\CanIf.c	  9486   *
; ..\component\CanIf\Implementation\CanIf.c	  9487   *
; ..\component\CanIf\Implementation\CanIf.c	  9488   *
; ..\component\CanIf\Implementation\CanIf.c	  9489   *
; ..\component\CanIf\Implementation\CanIf.c	  9490   *
; ..\component\CanIf\Implementation\CanIf.c	  9491   *
; ..\component\CanIf\Implementation\CanIf.c	  9492   */  
; ..\component\CanIf\Implementation\CanIf.c	  9493  FUNC(Std_ReturnType, CANIF_CODE) CanIf_GetControllerErrorState(uint8 ControllerId, P2VAR(Can_ErrorStateType, AUTOMATIC, CANIF_APPL_STATE_VAR) ErrorStatePtr)
; ..\component\CanIf\Implementation\CanIf.c	  9494  {
; ..\component\CanIf\Implementation\CanIf.c	  9495    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9496    Std_ReturnType retval  = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  9497    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  9498  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9499    CanIf_Can_GetControllerErrorStateFctType can_GetControllerErrorStateFct;
; ..\component\CanIf\Implementation\CanIf.c	  9500  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9501  
; ..\component\CanIf\Implementation\CanIf.c	  9502    /* ----- Development Error Checks --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9503  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9504  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9505    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  9506    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  9507    {
; ..\component\CanIf\Implementation\CanIf.c	  9508      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9509    }
; ..\component\CanIf\Implementation\CanIf.c	  9510    else
; ..\component\CanIf\Implementation\CanIf.c	  9511  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9512    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9513    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  9514    {
; ..\component\CanIf\Implementation\CanIf.c	  9515      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9516    }
; ..\component\CanIf\Implementation\CanIf.c	  9517    /* #30 Check if parameter ErrorStatePtr is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9518    else if(ErrorStatePtr == NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  9519    {
; ..\component\CanIf\Implementation\CanIf.c	  9520      errorId = CANIF_E_PARAM_POINTER;
; ..\component\CanIf\Implementation\CanIf.c	  9521    }
; ..\component\CanIf\Implementation\CanIf.c	  9522    /* #40 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  9523    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  9524    {
; ..\component\CanIf\Implementation\CanIf.c	  9525      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9526    }
; ..\component\CanIf\Implementation\CanIf.c	  9527  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9528  #   if(CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  9529    /* #50 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  9530    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  9531    {
; ..\component\CanIf\Implementation\CanIf.c	  9532      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9533    }
; ..\component\CanIf\Implementation\CanIf.c	  9534  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  9535  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9536    else
; ..\component\CanIf\Implementation\CanIf.c	  9537  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9538    {
; ..\component\CanIf\Implementation\CanIf.c	  9539      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9540  
; ..\component\CanIf\Implementation\CanIf.c	  9541      /* #100 Request the error state of the CAN controller */
; ..\component\CanIf\Implementation\CanIf.c	  9542  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9543      can_GetControllerErrorStateFct = CanIf_GetCan_GetControllerErrorStateFctMap(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CanIf_Controller_Value));
; ..\component\CanIf\Implementation\CanIf.c	  9544    
; ..\component\CanIf\Implementation\CanIf.c	  9545      if (can_GetControllerErrorStateFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  9546      {
; ..\component\CanIf\Implementation\CanIf.c	  9547        retval = can_GetControllerErrorStateFct(CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), ErrorStatePtr); /* SBSW_CANIF_45 */
; ..\component\CanIf\Implementation\CanIf.c	  9548      }
; ..\component\CanIf\Implementation\CanIf.c	  9549      else
; ..\component\CanIf\Implementation\CanIf.c	  9550      {
; ..\component\CanIf\Implementation\CanIf.c	  9551        errorId = CANIF_E_CONFIG;
; ..\component\CanIf\Implementation\CanIf.c	  9552      }
; ..\component\CanIf\Implementation\CanIf.c	  9553  # else
; ..\component\CanIf\Implementation\CanIf.c	  9554      retval = Can_GetControllerErrorState(CanIf_Controller_Value, ErrorStatePtr); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  9555  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9556    }
; ..\component\CanIf\Implementation\CanIf.c	  9557      
; ..\component\CanIf\Implementation\CanIf.c	  9558    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9559  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9560    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */
; ..\component\CanIf\Implementation\CanIf.c	  9561    {
; ..\component\CanIf\Implementation\CanIf.c	  9562      CanIf_Det_ReportError(CANIF_GETCONTROLLERERRORSTATE_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  9563    }
; ..\component\CanIf\Implementation\CanIf.c	  9564  # else
; ..\component\CanIf\Implementation\CanIf.c	  9565    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9566  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9567  # if ((CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) && (CANIF_DEV_ERROR_DETECT == STD_OFF)) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  9568    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9569  # endif   
; ..\component\CanIf\Implementation\CanIf.c	  9570    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  9571  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  9572  
; ..\component\CanIf\Implementation\CanIf.c	  9573  
; ..\component\CanIf\Implementation\CanIf.c	  9574  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  9575   *  CanIf_GetControllerRxErrorCounter()
; ..\component\CanIf\Implementation\CanIf.c	  9576   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  9577  /*
; ..\component\CanIf\Implementation\CanIf.c	  9578  |<DataModelStart>| CanIf_GetControllerRxErrorCounter
; ..\component\CanIf\Implementation\CanIf.c	  9579  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  9580  CanIfBusMirroringSupport  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  9581  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  9582  CanIfOneChOpt
; ..\component\CanIf\Implementation\CanIf.c	  9583  CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  9584  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9585  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9586  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9587  CanIfMultipleDriver, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9588  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9589  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9590  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  9591  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  9592  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  9593  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  9594  */
; ..\component\CanIf\Implementation\CanIf.c	  9595   /*!
; ..\component\CanIf\Implementation\CanIf.c	  9596   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  9597   *
; ..\component\CanIf\Implementation\CanIf.c	  9598   *
; ..\component\CanIf\Implementation\CanIf.c	  9599   *
; ..\component\CanIf\Implementation\CanIf.c	  9600   *
; ..\component\CanIf\Implementation\CanIf.c	  9601   *
; ..\component\CanIf\Implementation\CanIf.c	  9602   *
; ..\component\CanIf\Implementation\CanIf.c	  9603   *
; ..\component\CanIf\Implementation\CanIf.c	  9604   */  
; ..\component\CanIf\Implementation\CanIf.c	  9605  FUNC(Std_ReturnType, CANIF_CODE) CanIf_GetControllerRxErrorCounter(uint8 ControllerId, P2VAR(uint8, AUTOMATIC, CANIF_APPL_STATE_VAR) RxErrorCounterPtr)
; ..\component\CanIf\Implementation\CanIf.c	  9606  {
; ..\component\CanIf\Implementation\CanIf.c	  9607    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9608    Std_ReturnType retval  = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  9609    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  9610  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9611    CanIf_Can_GetControllerRxErrorCounterFctType can_GetControllerRxErrorCounterFct;
; ..\component\CanIf\Implementation\CanIf.c	  9612  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9613  
; ..\component\CanIf\Implementation\CanIf.c	  9614    /* ----- Development Error Checks --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9615  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9616  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9617    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  9618    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  9619    {
; ..\component\CanIf\Implementation\CanIf.c	  9620      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9621    }
; ..\component\CanIf\Implementation\CanIf.c	  9622    else
; ..\component\CanIf\Implementation\CanIf.c	  9623  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9624    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9625    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  9626    {
; ..\component\CanIf\Implementation\CanIf.c	  9627      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9628    }
; ..\component\CanIf\Implementation\CanIf.c	  9629    /* #30 Check if parameter RxErrorCounterPtr is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9630    else if(RxErrorCounterPtr == NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  9631    {
; ..\component\CanIf\Implementation\CanIf.c	  9632      errorId = CANIF_E_PARAM_POINTER;
; ..\component\CanIf\Implementation\CanIf.c	  9633    }
; ..\component\CanIf\Implementation\CanIf.c	  9634    /* #40 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  9635    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  9636    {
; ..\component\CanIf\Implementation\CanIf.c	  9637      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9638    }
; ..\component\CanIf\Implementation\CanIf.c	  9639  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9640  #   if(CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  9641    /* #50 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  9642    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  9643    {
; ..\component\CanIf\Implementation\CanIf.c	  9644      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9645    }
; ..\component\CanIf\Implementation\CanIf.c	  9646  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  9647  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9648    else
; ..\component\CanIf\Implementation\CanIf.c	  9649  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9650    {
; ..\component\CanIf\Implementation\CanIf.c	  9651      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9652  
; ..\component\CanIf\Implementation\CanIf.c	  9653      /* #100 Request the Rx error counter of the CAN controller */
; ..\component\CanIf\Implementation\CanIf.c	  9654  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9655      can_GetControllerRxErrorCounterFct = CanIf_GetCan_GetControllerRxErrorCounterFctMap(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CanIf_Controller_Value));
; ..\component\CanIf\Implementation\CanIf.c	  9656    
; ..\component\CanIf\Implementation\CanIf.c	  9657      if (can_GetControllerRxErrorCounterFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  9658      {
; ..\component\CanIf\Implementation\CanIf.c	  9659        retval = can_GetControllerRxErrorCounterFct(CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), RxErrorCounterPtr); /* SBSW_CANIF_45 */
; ..\component\CanIf\Implementation\CanIf.c	  9660      }
; ..\component\CanIf\Implementation\CanIf.c	  9661      else
; ..\component\CanIf\Implementation\CanIf.c	  9662      {
; ..\component\CanIf\Implementation\CanIf.c	  9663        errorId = CANIF_E_CONFIG;
; ..\component\CanIf\Implementation\CanIf.c	  9664      }
; ..\component\CanIf\Implementation\CanIf.c	  9665  # else
; ..\component\CanIf\Implementation\CanIf.c	  9666      retval = Can_GetControllerRxErrorCounter(CanIf_Controller_Value, RxErrorCounterPtr); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  9667  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9668    }
; ..\component\CanIf\Implementation\CanIf.c	  9669      
; ..\component\CanIf\Implementation\CanIf.c	  9670    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9671  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9672    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */
; ..\component\CanIf\Implementation\CanIf.c	  9673    {
; ..\component\CanIf\Implementation\CanIf.c	  9674      CanIf_Det_ReportError(CANIF_GETCONTROLLERRXERRORCOUNTER_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  9675    }
; ..\component\CanIf\Implementation\CanIf.c	  9676  # else
; ..\component\CanIf\Implementation\CanIf.c	  9677    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9678  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9679  # if ((CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) && (CANIF_DEV_ERROR_DETECT == STD_OFF)) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  9680    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9681  # endif   
; ..\component\CanIf\Implementation\CanIf.c	  9682    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  9683  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  9684  
; ..\component\CanIf\Implementation\CanIf.c	  9685  
; ..\component\CanIf\Implementation\CanIf.c	  9686  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  9687   *  CanIf_GetControllerTxErrorCounter()
; ..\component\CanIf\Implementation\CanIf.c	  9688   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  9689  /*
; ..\component\CanIf\Implementation\CanIf.c	  9690  |<DataModelStart>| CanIf_GetControllerTxErrorCounter
; ..\component\CanIf\Implementation\CanIf.c	  9691  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  9692  CanIfBusMirroringSupport  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  9693  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  9694  CanIfOneChOpt
; ..\component\CanIf\Implementation\CanIf.c	  9695  CanIfMultipleDriver
; ..\component\CanIf\Implementation\CanIf.c	  9696  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9697  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9698  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9699  CanIfMultipleDriver, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9700  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9701  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9702  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  9703  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  9704  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  9705  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  9706  */
; ..\component\CanIf\Implementation\CanIf.c	  9707   /*!
; ..\component\CanIf\Implementation\CanIf.c	  9708   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  9709   *
; ..\component\CanIf\Implementation\CanIf.c	  9710   *
; ..\component\CanIf\Implementation\CanIf.c	  9711   *
; ..\component\CanIf\Implementation\CanIf.c	  9712   *
; ..\component\CanIf\Implementation\CanIf.c	  9713   *
; ..\component\CanIf\Implementation\CanIf.c	  9714   *
; ..\component\CanIf\Implementation\CanIf.c	  9715   *
; ..\component\CanIf\Implementation\CanIf.c	  9716   */  
; ..\component\CanIf\Implementation\CanIf.c	  9717  FUNC(Std_ReturnType, CANIF_CODE) CanIf_GetControllerTxErrorCounter(uint8 ControllerId, P2VAR(uint8, AUTOMATIC, CANIF_APPL_STATE_VAR) TxErrorCounterPtr)
; ..\component\CanIf\Implementation\CanIf.c	  9718  {
; ..\component\CanIf\Implementation\CanIf.c	  9719    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9720    Std_ReturnType retval  = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  9721    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  9722  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9723    CanIf_Can_GetControllerTxErrorCounterFctType can_GetControllerTxErrorCounterFct;
; ..\component\CanIf\Implementation\CanIf.c	  9724  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9725  
; ..\component\CanIf\Implementation\CanIf.c	  9726    /* ----- Development Error Checks --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9727  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9728  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9729    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  9730    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  9731    {
; ..\component\CanIf\Implementation\CanIf.c	  9732      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9733    }
; ..\component\CanIf\Implementation\CanIf.c	  9734    else
; ..\component\CanIf\Implementation\CanIf.c	  9735  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9736    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9737    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  9738    {
; ..\component\CanIf\Implementation\CanIf.c	  9739      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9740    }
; ..\component\CanIf\Implementation\CanIf.c	  9741    /* #30 Check if parameter TxErrorCounterPtr is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9742    else if(TxErrorCounterPtr == NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  9743    {
; ..\component\CanIf\Implementation\CanIf.c	  9744      errorId = CANIF_E_PARAM_POINTER;
; ..\component\CanIf\Implementation\CanIf.c	  9745    }
; ..\component\CanIf\Implementation\CanIf.c	  9746    /* #40 Check if CAN channel is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  9747    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	  9748    {
; ..\component\CanIf\Implementation\CanIf.c	  9749      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9750    }
; ..\component\CanIf\Implementation\CanIf.c	  9751  #  if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9752  #   if(CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  9753    /* #50 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  9754    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CanIf_Controller_Value))
; ..\component\CanIf\Implementation\CanIf.c	  9755    {
; ..\component\CanIf\Implementation\CanIf.c	  9756      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9757    }
; ..\component\CanIf\Implementation\CanIf.c	  9758  #   endif
; ..\component\CanIf\Implementation\CanIf.c	  9759  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9760    else
; ..\component\CanIf\Implementation\CanIf.c	  9761  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9762    {
; ..\component\CanIf\Implementation\CanIf.c	  9763      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9764  
; ..\component\CanIf\Implementation\CanIf.c	  9765      /* #100 Request the Tx error counter of the CAN controller */
; ..\component\CanIf\Implementation\CanIf.c	  9766  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9767      can_GetControllerTxErrorCounterFct = CanIf_GetCan_GetControllerTxErrorCounterFctMap(CANIF_CFG_CTRLUPTOLOWMAP_DRIVERINDEX(CanIf_Controller_Value));
; ..\component\CanIf\Implementation\CanIf.c	  9768    
; ..\component\CanIf\Implementation\CanIf.c	  9769      if (can_GetControllerTxErrorCounterFct != NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  9770      {
; ..\component\CanIf\Implementation\CanIf.c	  9771        retval = can_GetControllerTxErrorCounterFct(CANIF_CFG_CTRLUPTOLOWMAP_CHANNELINDEX(CanIf_Controller_Value), TxErrorCounterPtr); /* SBSW_CANIF_45 */
; ..\component\CanIf\Implementation\CanIf.c	  9772      }
; ..\component\CanIf\Implementation\CanIf.c	  9773      else
; ..\component\CanIf\Implementation\CanIf.c	  9774      {
; ..\component\CanIf\Implementation\CanIf.c	  9775        errorId = CANIF_E_CONFIG;
; ..\component\CanIf\Implementation\CanIf.c	  9776      }
; ..\component\CanIf\Implementation\CanIf.c	  9777  # else
; ..\component\CanIf\Implementation\CanIf.c	  9778      retval = Can_GetControllerTxErrorCounter(CanIf_Controller_Value, TxErrorCounterPtr); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  9779  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9780    }
; ..\component\CanIf\Implementation\CanIf.c	  9781      
; ..\component\CanIf\Implementation\CanIf.c	  9782    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9783  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9784    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */
; ..\component\CanIf\Implementation\CanIf.c	  9785    {
; ..\component\CanIf\Implementation\CanIf.c	  9786      CanIf_Det_ReportError(CANIF_GETCONTROLLERTXERRORCOUNTER_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  9787    }
; ..\component\CanIf\Implementation\CanIf.c	  9788  # else
; ..\component\CanIf\Implementation\CanIf.c	  9789    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9790  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9791  # if ((CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) && (CANIF_DEV_ERROR_DETECT == STD_OFF)) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  9792    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9793  # endif   
; ..\component\CanIf\Implementation\CanIf.c	  9794    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  9795  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  9796  
; ..\component\CanIf\Implementation\CanIf.c	  9797  
; ..\component\CanIf\Implementation\CanIf.c	  9798  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  9799   *  CanIf_EnableBusMirroring()
; ..\component\CanIf\Implementation\CanIf.c	  9800   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  9801  /*
; ..\component\CanIf\Implementation\CanIf.c	  9802  |<DataModelStart>| CanIf_EnableBusMirroring
; ..\component\CanIf\Implementation\CanIf.c	  9803  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  9804  CanIfBusMirroringSupport  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  9805  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  9806  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9807  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9808  CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9809  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9810  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9811  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  9812  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  9813  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  9814  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  9815  */
; ..\component\CanIf\Implementation\CanIf.c	  9816   /*!
; ..\component\CanIf\Implementation\CanIf.c	  9817   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  9818   *
; ..\component\CanIf\Implementation\CanIf.c	  9819   *
; ..\component\CanIf\Implementation\CanIf.c	  9820   *
; ..\component\CanIf\Implementation\CanIf.c	  9821   *
; ..\component\CanIf\Implementation\CanIf.c	  9822   */  
; ..\component\CanIf\Implementation\CanIf.c	  9823  FUNC(Std_ReturnType, CANIF_CODE) CanIf_EnableBusMirroring(uint8 ControllerId, boolean MirroringActive)
; ..\component\CanIf\Implementation\CanIf.c	  9824  {
; ..\component\CanIf\Implementation\CanIf.c	  9825    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9826    Std_ReturnType retval  = E_NOT_OK; /* PRQA S 2981 */ /* MD_MSR_RetVal */
; ..\component\CanIf\Implementation\CanIf.c	  9827    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  9828  
; ..\component\CanIf\Implementation\CanIf.c	  9829    /* ----- Development Error Checks --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9830  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9831  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9832    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  9833    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  9834    {
; ..\component\CanIf\Implementation\CanIf.c	  9835      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9836    }
; ..\component\CanIf\Implementation\CanIf.c	  9837    else
; ..\component\CanIf\Implementation\CanIf.c	  9838  #  endif
; ..\component\CanIf\Implementation\CanIf.c	  9839    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9840    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	  9841    {
; ..\component\CanIf\Implementation\CanIf.c	  9842      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9843    }
; ..\component\CanIf\Implementation\CanIf.c	  9844    else
; ..\component\CanIf\Implementation\CanIf.c	  9845  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9846    {
; ..\component\CanIf\Implementation\CanIf.c	  9847      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9848  
; ..\component\CanIf\Implementation\CanIf.c	  9849      /* #100 Change mirroring of the CAN controller */
; ..\component\CanIf\Implementation\CanIf.c	  9850      CanIf_ChangeMirroring(CanIf_Controller_Value, MirroringActive); /* SBSW_CANIF_3 */
; ..\component\CanIf\Implementation\CanIf.c	  9851      retval = E_OK;
; ..\component\CanIf\Implementation\CanIf.c	  9852    }
; ..\component\CanIf\Implementation\CanIf.c	  9853   
; ..\component\CanIf\Implementation\CanIf.c	  9854    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9855  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9856    if (errorId != CANIF_E_NO_ERROR) /* PRQA S 2992, 2996 */ /* MD_CanIf_ErrorId */
; ..\component\CanIf\Implementation\CanIf.c	  9857    {
; ..\component\CanIf\Implementation\CanIf.c	  9858      CanIf_Det_ReportError(CANIF_ENABLEBUSMIRRORING_API, errorId); /* PRQA S 2880 */ /* MD_MSR_Unreachable */
; ..\component\CanIf\Implementation\CanIf.c	  9859    }
; ..\component\CanIf\Implementation\CanIf.c	  9860  # else
; ..\component\CanIf\Implementation\CanIf.c	  9861    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9862  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9863  # if ((CANIF_ONE_CONTROLLER_OPTIMIZATION == STD_ON) && (CANIF_DEV_ERROR_DETECT == STD_OFF)) /* COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED */
; ..\component\CanIf\Implementation\CanIf.c	  9864    CANIF_DUMMY_STATEMENT(ControllerId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9865  # endif   
; ..\component\CanIf\Implementation\CanIf.c	  9866    return retval;
; ..\component\CanIf\Implementation\CanIf.c	  9867  }
; ..\component\CanIf\Implementation\CanIf.c	  9868  
; ..\component\CanIf\Implementation\CanIf.c	  9869  
; ..\component\CanIf\Implementation\CanIf.c	  9870  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  9871   *  Appl_GenericConfirmation()
; ..\component\CanIf\Implementation\CanIf.c	  9872   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  9873  /*
; ..\component\CanIf\Implementation\CanIf.c	  9874  |<DataModelStart>| Appl_GenericConfirmation
; ..\component\CanIf\Implementation\CanIf.c	  9875  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  9876  CanIfBusMirroringSupport  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  9877  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  9878  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9879  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9880  CanIfDevErrorDetect, CanIfMultipleDriver, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9881  CanIfPnEnable
; ..\component\CanIf\Implementation\CanIf.c	  9882  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9883  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  9884  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  9885  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  9886  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  9887  */
; ..\component\CanIf\Implementation\CanIf.c	  9888   /*!
; ..\component\CanIf\Implementation\CanIf.c	  9889   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  9890   *
; ..\component\CanIf\Implementation\CanIf.c	  9891   *
; ..\component\CanIf\Implementation\CanIf.c	  9892   *
; ..\component\CanIf\Implementation\CanIf.c	  9893   *
; ..\component\CanIf\Implementation\CanIf.c	  9894   *
; ..\component\CanIf\Implementation\CanIf.c	  9895   *
; ..\component\CanIf\Implementation\CanIf.c	  9896   *
; ..\component\CanIf\Implementation\CanIf.c	  9897   *
; ..\component\CanIf\Implementation\CanIf.c	  9898   */  
; ..\component\CanIf\Implementation\CanIf.c	  9899  FUNC(Can_ReturnType, CANIF_CODE) Appl_GenericConfirmation(uint8 Controller, P2CONST(Can_PduType, AUTOMATIC, CANIF_CBK_DRV_VAR) DataPtr) /* PRQA S 0624 */ /* MD_CanIf_Rule8.3 */
; ..\component\CanIf\Implementation\CanIf.c	  9900  {
; ..\component\CanIf\Implementation\CanIf.c	  9901    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9902    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	  9903  
; ..\component\CanIf\Implementation\CanIf.c	  9904    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9905  #if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9906  # if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9907    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	  9908    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	  9909    {
; ..\component\CanIf\Implementation\CanIf.c	  9910      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9911    }
; ..\component\CanIf\Implementation\CanIf.c	  9912    else
; ..\component\CanIf\Implementation\CanIf.c	  9913  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9914    /* #20 Check if parameter DataPtr is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9915    if(DataPtr == NULL_PTR)
; ..\component\CanIf\Implementation\CanIf.c	  9916    {
; ..\component\CanIf\Implementation\CanIf.c	  9917      errorId = CANIF_E_PARAM_POINTER;
; ..\component\CanIf\Implementation\CanIf.c	  9918    }
; ..\component\CanIf\Implementation\CanIf.c	  9919    /* #30 Check if canTxPduId (=DataPtr->swPduHandle) is valid */
; ..\component\CanIf\Implementation\CanIf.c	  9920    else if (DataPtr->swPduHandle >=  CANIF_CFG_MAX_TXPDUS)
; ..\component\CanIf\Implementation\CanIf.c	  9921    {
; ..\component\CanIf\Implementation\CanIf.c	  9922      errorId = CANIF_E_PARAM_LPDU;
; ..\component\CanIf\Implementation\CanIf.c	  9923    }
; ..\component\CanIf\Implementation\CanIf.c	  9924    /* #40 Check if corresponding CAN controller is initialized */
; ..\component\CanIf\Implementation\CanIf.c	  9925    else if (CanIf_GetCtrlMode(CANIF_CFG_TX_CONTROLLER(DataPtr->swPduHandle)) == CANIF_CS_UNINIT )
; ..\component\CanIf\Implementation\CanIf.c	  9926    {
; ..\component\CanIf\Implementation\CanIf.c	  9927      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	  9928    }
; ..\component\CanIf\Implementation\CanIf.c	  9929  # if (CANIF_MULTIPLE_CANDRV_SUPPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9930  #  if (CANIF_POSTBUILD_VARIANT_SUPPORT == STD_ON) 
; ..\component\CanIf\Implementation\CanIf.c	  9931    /* #50 Check if corresponding CanDrv is available in current identity */
; ..\component\CanIf\Implementation\CanIf.c	  9932    else if (!CANIF_CFG_IS_CANDRVINDEXVALID(CANIF_CFG_TX_CONTROLLER(DataPtr->swPduHandle)))
; ..\component\CanIf\Implementation\CanIf.c	  9933    {
; ..\component\CanIf\Implementation\CanIf.c	  9934      errorId = CANIF_E_PARAM_CONTROLLERID;
; ..\component\CanIf\Implementation\CanIf.c	  9935    }
; ..\component\CanIf\Implementation\CanIf.c	  9936  #  endif  
; ..\component\CanIf\Implementation\CanIf.c	  9937  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9938    else
; ..\component\CanIf\Implementation\CanIf.c	  9939  #endif
; ..\component\CanIf\Implementation\CanIf.c	  9940    {
; ..\component\CanIf\Implementation\CanIf.c	  9941      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9942  
; ..\component\CanIf\Implementation\CanIf.c	  9943      /* #100 Process only if CAN controller is active */
; ..\component\CanIf\Implementation\CanIf.c	  9944      if (CanIf_GetCtrlMode(CANIF_CFG_TX_CONTROLLER(DataPtr->swPduHandle)) == CANIF_CS_STARTED)
; ..\component\CanIf\Implementation\CanIf.c	  9945      {
; ..\component\CanIf\Implementation\CanIf.c	  9946        if ( (CanIf_GetChannelMode(CANIF_CFG_TX_CONTROLLER(DataPtr->swPduHandle)) == CANIF_GET_ONLINE) ||
; ..\component\CanIf\Implementation\CanIf.c	  9947               (CanIf_GetChannelMode(CANIF_CFG_TX_CONTROLLER(DataPtr->swPduHandle)) == CANIF_GET_TX_ONLINE)
; ..\component\CanIf\Implementation\CanIf.c	  9948  # if (CANIF_PN_WU_TX_PDU_FILTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9949          || (CanIf_GetChannelMode(CANIF_CFG_TX_CONTROLLER(DataPtr->swPduHandle)) == CANIF_GET_ONLINE_WAKF)
; ..\component\CanIf\Implementation\CanIf.c	  9950          || (CanIf_GetChannelMode(CANIF_CFG_TX_CONTROLLER(DataPtr->swPduHandle)) == CANIF_GET_TX_ONLINE_WAKF)
; ..\component\CanIf\Implementation\CanIf.c	  9951  # endif
; ..\component\CanIf\Implementation\CanIf.c	  9952           )
; ..\component\CanIf\Implementation\CanIf.c	  9953        {
; ..\component\CanIf\Implementation\CanIf.c	  9954          /* #200 Report CAN frame to mirror module, if mirroring is enabled for the CAN controller */
; ..\component\CanIf\Implementation\CanIf.c	  9955          if(CanIf_IsMirroringEnabled(CANIF_CFG_TX_CONTROLLER(DataPtr->swPduHandle)))
; ..\component\CanIf\Implementation\CanIf.c	  9956          {
; ..\component\CanIf\Implementation\CanIf.c	  9957            Mirror_ReportCanFrame(CANIF_CFG_TX_CONTROLLER(DataPtr->swPduHandle), DataPtr->id, DataPtr->length, DataPtr->sdu); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	  9958          }
; ..\component\CanIf\Implementation\CanIf.c	  9959        }
; ..\component\CanIf\Implementation\CanIf.c	  9960      }
; ..\component\CanIf\Implementation\CanIf.c	  9961    }
; ..\component\CanIf\Implementation\CanIf.c	  9962    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	  9963  #if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9964    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	  9965    {
; ..\component\CanIf\Implementation\CanIf.c	  9966      CanIf_Det_ReportError(CANIF_APPL_GENERICCONFIRMATION_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	  9967    }
; ..\component\CanIf\Implementation\CanIf.c	  9968  #else
; ..\component\CanIf\Implementation\CanIf.c	  9969    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9970  #endif
; ..\component\CanIf\Implementation\CanIf.c	  9971    CANIF_DUMMY_STATEMENT(Controller); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	  9972    return CAN_OK; /* Higher layer confirmation will be called afterwards (CanIf_TxConfirmation()) by the CAN driver */
; ..\component\CanIf\Implementation\CanIf.c	  9973  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	  9974  #endif /* CANIF_BUS_MIRRORING_SUPPORT == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	  9975  
; ..\component\CanIf\Implementation\CanIf.c	  9976  
; ..\component\CanIf\Implementation\CanIf.c	  9977  
; ..\component\CanIf\Implementation\CanIf.c	  9978  #if (CANIF_ENABLE_SECURITY_EVENT_REPORTING == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	  9979  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	  9980   *  CanIf_ControllerErrorStatePassive()
; ..\component\CanIf\Implementation\CanIf.c	  9981   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	  9982  /*
; ..\component\CanIf\Implementation\CanIf.c	  9983  |<DataModelStart>| CanIf_ControllerErrorStatePassive
; ..\component\CanIf\Implementation\CanIf.c	  9984  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	  9985  CanIfSecurityEventReporting  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	  9986  Relation:
; ..\component\CanIf\Implementation\CanIf.c	  9987  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9988  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	  9989  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	  9990  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9991  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	  9992  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	  9993  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	  9994  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	  9995  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	  9996  */
; ..\component\CanIf\Implementation\CanIf.c	  9997   /*!
; ..\component\CanIf\Implementation\CanIf.c	  9998   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	  9999   *
; ..\component\CanIf\Implementation\CanIf.c	 10000   *
; ..\component\CanIf\Implementation\CanIf.c	 10001   *
; ..\component\CanIf\Implementation\CanIf.c	 10002   *
; ..\component\CanIf\Implementation\CanIf.c	 10003   *
; ..\component\CanIf\Implementation\CanIf.c	 10004   *
; ..\component\CanIf\Implementation\CanIf.c	 10005   *
; ..\component\CanIf\Implementation\CanIf.c	 10006   */
; ..\component\CanIf\Implementation\CanIf.c	 10007  FUNC(void, CANIF_CODE) CanIf_ControllerErrorStatePassive(uint8 ControllerId, uint8 RxErrorCounter, uint8 TxErrorCounter)
; ..\component\CanIf\Implementation\CanIf.c	 10008  {
; ..\component\CanIf\Implementation\CanIf.c	 10009    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	 10010    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	 10011    IdsM_ContextDataType contextData[CANIF_CONTEXTDATA_SIZE_PASSIVE];
; ..\component\CanIf\Implementation\CanIf.c	 10012  
; ..\component\CanIf\Implementation\CanIf.c	 10013    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	 10014  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	 10015  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	 10016    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	 10017    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	 10018    {
; ..\component\CanIf\Implementation\CanIf.c	 10019      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	 10020    }
; ..\component\CanIf\Implementation\CanIf.c	 10021    else
; ..\component\CanIf\Implementation\CanIf.c	 10022  #  endif
; ..\component\CanIf\Implementation\CanIf.c	 10023    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	 10024    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	 10025    {
; ..\component\CanIf\Implementation\CanIf.c	 10026      errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	 10027    }
; ..\component\CanIf\Implementation\CanIf.c	 10028    /* #30 Check if CAN controller is initialized */
; ..\component\CanIf\Implementation\CanIf.c	 10029    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	 10030    {
; ..\component\CanIf\Implementation\CanIf.c	 10031      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	 10032    }
; ..\component\CanIf\Implementation\CanIf.c	 10033    else
; ..\component\CanIf\Implementation\CanIf.c	 10034  # endif
; ..\component\CanIf\Implementation\CanIf.c	 10035    {
; ..\component\CanIf\Implementation\CanIf.c	 10036      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	 10037      /* #100 Add ControllerId to context data */
; ..\component\CanIf\Implementation\CanIf.c	 10038      contextData[CANIF_CONTEXTDATA_CTRLID_POS] = ControllerId; /* SBSW_CANIF_50 */
; ..\component\CanIf\Implementation\CanIf.c	 10039  
; ..\component\CanIf\Implementation\CanIf.c	 10040      /* #110 Determine error counter threshold result for context data */
; ..\component\CanIf\Implementation\CanIf.c	 10041      if ((RxErrorCounter > CANIF_ERROR_COUNTER_THRESHOLD) && (TxErrorCounter <= CANIF_ERROR_COUNTER_THRESHOLD))
; ..\component\CanIf\Implementation\CanIf.c	 10042      {
; ..\component\CanIf\Implementation\CanIf.c	 10043        contextData[CANIF_CONTEXTDATA_THRESHOLD_POS] = CANIF_RX_THRESHOLD_EXCEEDED; /* SBSW_CANIF_50 */
; ..\component\CanIf\Implementation\CanIf.c	 10044      }
; ..\component\CanIf\Implementation\CanIf.c	 10045      else if((RxErrorCounter <= CANIF_ERROR_COUNTER_THRESHOLD) && (TxErrorCounter > CANIF_ERROR_COUNTER_THRESHOLD))
; ..\component\CanIf\Implementation\CanIf.c	 10046      {
; ..\component\CanIf\Implementation\CanIf.c	 10047        contextData[CANIF_CONTEXTDATA_THRESHOLD_POS] = CANIF_TX_THRESHOLD_EXCEEDED; /* SBSW_CANIF_50 */
; ..\component\CanIf\Implementation\CanIf.c	 10048      }
; ..\component\CanIf\Implementation\CanIf.c	 10049      else /* RxErrorCounter and TxErrorCounter are bigger or smaller than the threshold */
; ..\component\CanIf\Implementation\CanIf.c	 10050      {
; ..\component\CanIf\Implementation\CanIf.c	 10051        contextData[CANIF_CONTEXTDATA_THRESHOLD_POS] = CANIF_RX_TX_THRESHOLD_EXCEEDED; /* SBSW_CANIF_50 */
; ..\component\CanIf\Implementation\CanIf.c	 10052      }
; ..\component\CanIf\Implementation\CanIf.c	 10053  
; ..\component\CanIf\Implementation\CanIf.c	 10054      /* #120 Report security event to the IdsM */
; ..\component\CanIf\Implementation\CanIf.c	 10055      IdsM_SetSecurityEventWithContextData(CANIF_SEV_ERRORSTATE_PASSIVE, (CONSTP2CONST(IdsM_ContextDataType, AUTOMATIC, IDSM_APPL_DATA)) contextData, CANIF_CONTEXTDATA_SIZE_PASSIVE); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	 10056    }
; ..\component\CanIf\Implementation\CanIf.c	 10057    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	 10058  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	 10059    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	 10060    {
; ..\component\CanIf\Implementation\CanIf.c	 10061      CanIf_Det_ReportError(CANIF_CONTROLLERERRORSTATEPASSIVE_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	 10062    }
; ..\component\CanIf\Implementation\CanIf.c	 10063  # else
; ..\component\CanIf\Implementation\CanIf.c	 10064    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	 10065  # endif
; ..\component\CanIf\Implementation\CanIf.c	 10066  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	 10067  
; ..\component\CanIf\Implementation\CanIf.c	 10068  
; ..\component\CanIf\Implementation\CanIf.c	 10069  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	 10070   *  CanIf_ErrorNotification()
; ..\component\CanIf\Implementation\CanIf.c	 10071   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	 10072  /*
; ..\component\CanIf\Implementation\CanIf.c	 10073  |<DataModelStart>| CanIf_ErrorNotification
; ..\component\CanIf\Implementation\CanIf.c	 10074  Relation_Context:
; ..\component\CanIf\Implementation\CanIf.c	 10075  CanIfSecurityEventReporting  # from this API #
; ..\component\CanIf\Implementation\CanIf.c	 10076  Relation:
; ..\component\CanIf\Implementation\CanIf.c	 10077  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	 10078  CanIfDevErrorDetect, CanIfVariant
; ..\component\CanIf\Implementation\CanIf.c	 10079  CanIfDevErrorDetect, CanIfOneChOpt, CanIfControllerAmount
; ..\component\CanIf\Implementation\CanIf.c	 10080  CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	 10081  CanIfOneChOpt, CanIfControllerAmount, CanIfDevErrorDetect
; ..\component\CanIf\Implementation\CanIf.c	 10082  Parameter_PreCompile:
; ..\component\CanIf\Implementation\CanIf.c	 10083  Parameter_Data:
; ..\component\CanIf\Implementation\CanIf.c	 10084  Constrain:
; ..\component\CanIf\Implementation\CanIf.c	 10085  |<DataModelEnd>|
; ..\component\CanIf\Implementation\CanIf.c	 10086  */
; ..\component\CanIf\Implementation\CanIf.c	 10087   /*!
; ..\component\CanIf\Implementation\CanIf.c	 10088   * Internal comment removed.
; ..\component\CanIf\Implementation\CanIf.c	 10089   *
; ..\component\CanIf\Implementation\CanIf.c	 10090   *
; ..\component\CanIf\Implementation\CanIf.c	 10091   *
; ..\component\CanIf\Implementation\CanIf.c	 10092   *
; ..\component\CanIf\Implementation\CanIf.c	 10093   *
; ..\component\CanIf\Implementation\CanIf.c	 10094   *
; ..\component\CanIf\Implementation\CanIf.c	 10095   *
; ..\component\CanIf\Implementation\CanIf.c	 10096   *
; ..\component\CanIf\Implementation\CanIf.c	 10097   *
; ..\component\CanIf\Implementation\CanIf.c	 10098   */
; ..\component\CanIf\Implementation\CanIf.c	 10099  FUNC(void, CANIF_CODE) CanIf_ErrorNotification(uint8 ControllerId, Can_ErrorType CanError)
; ..\component\CanIf\Implementation\CanIf.c	 10100  {
; ..\component\CanIf\Implementation\CanIf.c	 10101    /* ----- Local Variables ---------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	 10102    uint8 errorId = CANIF_E_NO_ERROR;
; ..\component\CanIf\Implementation\CanIf.c	 10103    IdsM_ContextDataType contextData[CANIF_CONTEXTDATA_SIZE_CANERROR];
; ..\component\CanIf\Implementation\CanIf.c	 10104  
; ..\component\CanIf\Implementation\CanIf.c	 10105    /* ----- Development Error Checks ------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	 10106  # if (CANIF_DEV_ERROR_DETECT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	 10107  #  if (CANIF_USE_INIT_POINTER == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	 10108    /* #10 Check if CanIf is initialized at all */
; ..\component\CanIf\Implementation\CanIf.c	 10109    if (CanIf_SystemInit == FALSE)
; ..\component\CanIf\Implementation\CanIf.c	 10110    {
; ..\component\CanIf\Implementation\CanIf.c	 10111      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	 10112    }
; ..\component\CanIf\Implementation\CanIf.c	 10113    else
; ..\component\CanIf\Implementation\CanIf.c	 10114  #  endif
; ..\component\CanIf\Implementation\CanIf.c	 10115    /* #20 Check if parameter ControllerId is valid */
; ..\component\CanIf\Implementation\CanIf.c	 10116    if (ControllerId >= CANIF_CFG_MAX_CONTROLLER)
; ..\component\CanIf\Implementation\CanIf.c	 10117    {
; ..\component\CanIf\Implementation\CanIf.c	 10118      errorId = CANIF_E_PARAM_CONTROLLER;
; ..\component\CanIf\Implementation\CanIf.c	 10119    }
; ..\component\CanIf\Implementation\CanIf.c	 10120    /* #30 Check if CAN controller is initialized */
; ..\component\CanIf\Implementation\CanIf.c	 10121    else if (CanIf_GetCtrlMode(CanIf_Controller_Value) == CANIF_CS_UNINIT)
; ..\component\CanIf\Implementation\CanIf.c	 10122    {
; ..\component\CanIf\Implementation\CanIf.c	 10123      errorId = CANIF_E_UNINIT;
; ..\component\CanIf\Implementation\CanIf.c	 10124    }
; ..\component\CanIf\Implementation\CanIf.c	 10125    else
; ..\component\CanIf\Implementation\CanIf.c	 10126  # endif
; ..\component\CanIf\Implementation\CanIf.c	 10127    {
; ..\component\CanIf\Implementation\CanIf.c	 10128      /* ----- Implementation ----------------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	 10129      /* #100 Add ControllerId and CanError to context data */
; ..\component\CanIf\Implementation\CanIf.c	 10130      contextData[CANIF_CONTEXTDATA_CTRLID_POS] = ControllerId; /* SBSW_CANIF_51 */
; ..\component\CanIf\Implementation\CanIf.c	 10131      contextData[CANIF_CONTEXTDATA_CANERROR_POS] = (IdsM_ContextDataType)CanError; /* SBSW_CANIF_51 */
; ..\component\CanIf\Implementation\CanIf.c	 10132  
; ..\component\CanIf\Implementation\CanIf.c	 10133      /* #110 Determine security event from CanError */
; ..\component\CanIf\Implementation\CanIf.c	 10134      if((CanError == CAN_ERROR_CHECK_FORM_FAILED) || (CanError == CAN_ERROR_CHECK_STUFFING_FAILED) ||
; ..\component\CanIf\Implementation\CanIf.c	 10135         (CanError == CAN_ERROR_CHECK_CRC_FAILED) || (CanError == CAN_ERROR_BUS_LOCK))
; ..\component\CanIf\Implementation\CanIf.c	 10136      {
; ..\component\CanIf\Implementation\CanIf.c	 10137        /* #200 Report rx security event to the IdsM (CanErrorType is rx) */
; ..\component\CanIf\Implementation\CanIf.c	 10138        IdsM_SetSecurityEventWithContextData(CANIF_SEV_RX_ERROR_DETECTED, (CONSTP2CONST(IdsM_ContextDataType, AUTOMATIC, IDSM_APPL_DATA)) contextData, CANIF_CONTEXTDATA_SIZE_CANERROR); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	 10139      }
; ..\component\CanIf\Implementation\CanIf.c	 10140      else if((CanError == CAN_ERROR_BIT_MONITORING1) || (CanError == CAN_ERROR_BIT_MONITORING0) ||
; ..\component\CanIf\Implementation\CanIf.c	 10141              (CanError == CAN_ERROR_BIT) || (CanError == CAN_ERROR_CHECK_ACK_FAILED) ||
; ..\component\CanIf\Implementation\CanIf.c	 10142              (CanError == CAN_ERROR_ACK_DELIMITER) || (CanError == CAN_ERROR_ABITRATION_LOST) ||
; ..\component\CanIf\Implementation\CanIf.c	 10143              (CanError == CAN_ERROR_OVERLOAD))
; ..\component\CanIf\Implementation\CanIf.c	 10144      {
; ..\component\CanIf\Implementation\CanIf.c	 10145        /* #300 Report tx security event to the IdsM (CanErrorType is tx) */
; ..\component\CanIf\Implementation\CanIf.c	 10146        IdsM_SetSecurityEventWithContextData(CANIF_SEV_TX_ERROR_DETECTED, (CONSTP2CONST(IdsM_ContextDataType, AUTOMATIC, IDSM_APPL_DATA)) contextData, CANIF_CONTEXTDATA_SIZE_CANERROR); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	 10147      }
; ..\component\CanIf\Implementation\CanIf.c	 10148      else
; ..\component\CanIf\Implementation\CanIf.c	 10149      {
; ..\component\CanIf\Implementation\CanIf.c	 10150        /* #400 Report rx and tx security event to the IdsM (CanErrorType is not available) */
; ..\component\CanIf\Implementation\CanIf.c	 10151        /* Rx or tx error can not be determined from this error type, therefore report security event for rx and tx */
; ..\component\CanIf\Implementation\CanIf.c	 10152        contextData[CANIF_CONTEXTDATA_CANERROR_POS] = (IdsM_ContextDataType)CAN_ERROR_TYPE_NOT_AVAILABLE; /* SBSW_CANIF_51 */
; ..\component\CanIf\Implementation\CanIf.c	 10153        IdsM_SetSecurityEventWithContextData(CANIF_SEV_RX_ERROR_DETECTED, (CONSTP2CONST(IdsM_ContextDataType, AUTOMATIC, IDSM_APPL_DATA)) contextData, CANIF_CONTEXTDATA_SIZE_CANERROR); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	 10154        IdsM_SetSecurityEventWithContextData(CANIF_SEV_TX_ERROR_DETECTED, (CONSTP2CONST(IdsM_ContextDataType, AUTOMATIC, IDSM_APPL_DATA)) contextData, CANIF_CONTEXTDATA_SIZE_CANERROR); /* SBSW_CANIF_5 */
; ..\component\CanIf\Implementation\CanIf.c	 10155      }
; ..\component\CanIf\Implementation\CanIf.c	 10156    }
; ..\component\CanIf\Implementation\CanIf.c	 10157    /* ----- Development Error Report --------------------------------------- */
; ..\component\CanIf\Implementation\CanIf.c	 10158  # if (CANIF_DEV_ERROR_REPORT == STD_ON)
; ..\component\CanIf\Implementation\CanIf.c	 10159    if (errorId != CANIF_E_NO_ERROR)
; ..\component\CanIf\Implementation\CanIf.c	 10160    {
; ..\component\CanIf\Implementation\CanIf.c	 10161      CanIf_Det_ReportError(CANIF_ERRORNOTIFICATION_API, errorId);
; ..\component\CanIf\Implementation\CanIf.c	 10162    }
; ..\component\CanIf\Implementation\CanIf.c	 10163  # else
; ..\component\CanIf\Implementation\CanIf.c	 10164    CANIF_DUMMY_STATEMENT(errorId); /* PRQA S 1338, 2983, 3112 */ /* MD_MSR_DummyStmt */
; ..\component\CanIf\Implementation\CanIf.c	 10165  # endif
; ..\component\CanIf\Implementation\CanIf.c	 10166  } /* PRQA S 6080 */ /* MD_MSR_STMIF */
; ..\component\CanIf\Implementation\CanIf.c	 10167  #endif /* CANIF_ENABLE_SECURITY_EVENT_REPORTING == STD_ON */
; ..\component\CanIf\Implementation\CanIf.c	 10168  
; ..\component\CanIf\Implementation\CanIf.c	 10169  #define CANIF_STOP_SEC_CODE
; ..\component\CanIf\Implementation\CanIf.c	 10170  #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_MemMap */
; ..\component\CanIf\Implementation\CanIf.c	 10171  
; ..\component\CanIf\Implementation\CanIf.c	 10172  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	 10173   *  MISRA JUSTIFICATIONS
; ..\component\CanIf\Implementation\CanIf.c	 10174   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	 10175   
; ..\component\CanIf\Implementation\CanIf.c	 10176  /* Justification for module-specific MISRA deviations:
; ..\component\CanIf\Implementation\CanIf.c	 10177  
; ..\component\CanIf\Implementation\CanIf.c	 10178  MD_CanIf_Rule8.3:
; ..\component\CanIf\Implementation\CanIf.c	 10179    Reason: For parameter DataPtr the typedef Can_<Infix>_PduInfoPtrType with a possible infix is not used to be compatible 
; ..\component\CanIf\Implementation\CanIf.c	 10180            with inxfixed and not infixed CAN drivers.
; ..\component\CanIf\Implementation\CanIf.c	 10181    Risk: Different datatypes for parameter DataPtr in definition and declaration.
; ..\component\CanIf\Implementation\CanIf.c	 10182    Prevention: Code inspection.
; ..\component\CanIf\Implementation\CanIf.c	 10183  
; ..\component\CanIf\Implementation\CanIf.c	 10184  MD_CanIf_Rule8.9:
; ..\component\CanIf\Implementation\CanIf.c	 10185    Reason: Constant tables are kept at a central location for a better overview and maintenance.
; ..\component\CanIf\Implementation\CanIf.c	 10186    Risk: Name conflict.
; ..\component\CanIf\Implementation\CanIf.c	 10187    Prevention: Compiler optimize and check for name conflicts.
; ..\component\CanIf\Implementation\CanIf.c	 10188  
; ..\component\CanIf\Implementation\CanIf.c	 10189  MD_CanIf_Rule9.1:
; ..\component\CanIf\Implementation\CanIf.c	 10190    Reason: The variable is set depending on the configuration, so a default value of the variable is not possible.
; ..\component\CanIf\Implementation\CanIf.c	 10191    Risk: Undefined value of the variable.
; ..\component\CanIf\Implementation\CanIf.c	 10192    Prevention: Code inspection and test of the different configurations in the component test.
; ..\component\CanIf\Implementation\CanIf.c	 10193  
; ..\component\CanIf\Implementation\CanIf.c	 10194  MD_CanIf_Rule10.5_4342:
; ..\component\CanIf\Implementation\CanIf.c	 10195    Reason: The different mode types are abstracted with the enum CanIf_PduGetModeType/ CanIf_PduSetModeType.
; ..\component\CanIf\Implementation\CanIf.c	 10196            But a lookup table CanIfState from a basic unsigned data type is used to get a requested mode.
; ..\component\CanIf\Implementation\CanIf.c	 10197            This leads to a runtime efficient code.
; ..\component\CanIf\Implementation\CanIf.c	 10198    Risk: Inconsistency between mode types in CanIf_PduGetModeType/ CanIf_PduSetModeType enum and CanIfState lookup table.
; ..\component\CanIf\Implementation\CanIf.c	 10199    Prevention: Code inspection and test of the different configurations in the component test. 
; ..\component\CanIf\Implementation\CanIf.c	 10200  
; ..\component\CanIf\Implementation\CanIf.c	 10201  MD_CanIf_Rule11.1:
; ..\component\CanIf\Implementation\CanIf.c	 10202    Reason: Cast to different pointer type required to avoid compiler warning due to usage of a union of function pointer types.
; ..\component\CanIf\Implementation\CanIf.c	 10203    Risk: None due to fact that function pointer are used.
; ..\component\CanIf\Implementation\CanIf.c	 10204    Prevention: Test of the different variants in the component test.
; ..\component\CanIf\Implementation\CanIf.c	 10205  
; ..\component\CanIf\Implementation\CanIf.c	 10206  MD_CanIf_Rule11.8:
; ..\component\CanIf\Implementation\CanIf.c	 10207    Reason: Pointer cast to P2VAR is necessary to avoid compiler warning because "SduDataPtr" within "PduInfoType" is defined
; ..\component\CanIf\Implementation\CanIf.c	 10208            as P2VAR while "CanSduPtr" is P2CONST.
; ..\component\CanIf\Implementation\CanIf.c	 10209    Risk: CAN data could be modified after cast to P2VAR.
; ..\component\CanIf\Implementation\CanIf.c	 10210    Prevention: Code inspection and test of the different variants in the component test.
; ..\component\CanIf\Implementation\CanIf.c	 10211  
; ..\component\CanIf\Implementation\CanIf.c	 10212  MD_CanIf_ErrorId:
; ..\component\CanIf\Implementation\CanIf.c	 10213    Reason: Usage of defined API pattern.
; ..\component\CanIf\Implementation\CanIf.c	 10214    Risk: Statements in this 'if' block are not executed.
; ..\component\CanIf\Implementation\CanIf.c	 10215    Prevention: Code inspection and test of the different configurations in the component test.
; ..\component\CanIf\Implementation\CanIf.c	 10216  
; ..\component\CanIf\Implementation\CanIf.c	 10217  MD_CanIf_Rule14.3_GenData:
; ..\component\CanIf\Implementation\CanIf.c	 10218    Reason: Configuration related constant data.
; ..\component\CanIf\Implementation\CanIf.c	 10219    Risk: Statements in the 'if' or 'else' block are not executed.
; ..\component\CanIf\Implementation\CanIf.c	 10220    Prevention: Code inspection and test of the different configurations in the component test.
; ..\component\CanIf\Implementation\CanIf.c	 10221  
; ..\component\CanIf\Implementation\CanIf.c	 10222  MD_CanIf_RxPduConstData:
; ..\component\CanIf\Implementation\CanIf.c	 10223    Reason: Configuration related Rx-PDU constant data leads to a static true or false result 
; ..\component\CanIf\Implementation\CanIf.c	 10224            of the affected logical operator or of the 'if' controlling expression.
; ..\component\CanIf\Implementation\CanIf.c	 10225    Risk: Statements in the 'if' or 'else' block are not executed.
; ..\component\CanIf\Implementation\CanIf.c	 10226    Prevention: Code inspection and test of the different configurations in the component test.
; ..\component\CanIf\Implementation\CanIf.c	 10227  
; ..\component\CanIf\Implementation\CanIf.c	 10228  MD_CanIf_CanTrcvMapConstData:
; ..\component\CanIf\Implementation\CanIf.c	 10229    Reason: Configuration related CanTrcv mapping constant data.
; ..\component\CanIf\Implementation\CanIf.c	 10230    Risk: Statements in the 'if' block are not executed.
; ..\component\CanIf\Implementation\CanIf.c	 10231    Prevention: Code inspection and test of the different configurations in the component test.
; ..\component\CanIf\Implementation\CanIf.c	 10232  
; ..\component\CanIf\Implementation\CanIf.c	 10233  MD_CanIf_J1939ConstData:
; ..\component\CanIf\Implementation\CanIf.c	 10234    Reason: Configuration related J1939 constant data leads to a static false result of the 
; ..\component\CanIf\Implementation\CanIf.c	 10235            affected logical operator or of the 'if' controlling expression.
; ..\component\CanIf\Implementation\CanIf.c	 10236    Risk: Statements in the 'if' block are not executed.
; ..\component\CanIf\Implementation\CanIf.c	 10237    Prevention: Code inspection and test of the different configurations in the component test.
; ..\component\CanIf\Implementation\CanIf.c	 10238  
; ..\component\CanIf\Implementation\CanIf.c	 10239  MD_CanIf_MultipleBreak:
; ..\component\CanIf\Implementation\CanIf.c	 10240    Reason: More than one break statement is used to terminate the loop during the search algorithm.
; ..\component\CanIf\Implementation\CanIf.c	 10241            This leads to more efficient code which is easier to read and maintain.
; ..\component\CanIf\Implementation\CanIf.c	 10242    Risk: Relevant fragments of code not executed.
; ..\component\CanIf\Implementation\CanIf.c	 10243    Prevention: Code inspection.
; ..\component\CanIf\Implementation\CanIf.c	 10244  
; ..\component\CanIf\Implementation\CanIf.c	 10245  MD_CanIf_Rule17.8:
; ..\component\CanIf\Implementation\CanIf.c	 10246    Reason: The direct modification of the function parameter leads to more efficient code which is easier to read and maintain.
; ..\component\CanIf\Implementation\CanIf.c	 10247    Risk: Incorrect expectation of the value of the modified function parameter.
; ..\component\CanIf\Implementation\CanIf.c	 10248    Prevention: Code inspection and test of the different configurations in the component test.
; ..\component\CanIf\Implementation\CanIf.c	 10249  
; ..\component\CanIf\Implementation\CanIf.c	 10250  MD_CanIf_Dir4.1_2842:
; ..\component\CanIf\Implementation\CanIf.c	 10251    Reason: Possible out of bounds read access.
; ..\component\CanIf\Implementation\CanIf.c	 10252    Risk: Wrong data access.
; ..\component\CanIf\Implementation\CanIf.c	 10253    Prevention: Test of the different configurations in the component test.
; ..\component\CanIf\Implementation\CanIf.c	 10254  
; ..\component\CanIf\Implementation\CanIf.c	 10255  MD_CanIf_FctCall:
; ..\component\CanIf\Implementation\CanIf.c	 10256    Reason: Local function only initalizes variables from generated data.
; ..\component\CanIf\Implementation\CanIf.c	 10257    Risk: None.
; ..\component\CanIf\Implementation\CanIf.c	 10258    Prevention: Code inspection.
; ..\component\CanIf\Implementation\CanIf.c	 10259  
; ..\component\CanIf\Implementation\CanIf.c	 10260  */
; ..\component\CanIf\Implementation\CanIf.c	 10261  
; ..\component\CanIf\Implementation\CanIf.c	 10262  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	 10263   *  SBSW JUSTIFICATIONS
; ..\component\CanIf\Implementation\CanIf.c	 10264   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	 10265  
; ..\component\CanIf\Implementation\CanIf.c	 10266  /* SBSW_JUSTIFICATION_BEGIN
; ..\component\CanIf\Implementation\CanIf.c	 10267  
; ..\component\CanIf\Implementation\CanIf.c	 10268  \ID SBSW_CANIF_1
; ..\component\CanIf\Implementation\CanIf.c	 10269  \DESCRIPTION Access to txPduDataWithChecksumPtr with index which is based on DLC.
; ..\component\CanIf\Implementation\CanIf.c	 10270  \COUNTERMEASURE \R Index is checked during runtime not to exceed the bounds of txPduDataWithChecksumPtr. Performed check: (PduInfoPtr->SduLength) > CANIF_CFG_MAXTXDLC_PLUS_DATACHECKSUM.
; ..\component\CanIf\Implementation\CanIf.c	 10271  
; ..\component\CanIf\Implementation\CanIf.c	 10272  \ID SBSW_CANIF_3
; ..\component\CanIf\Implementation\CanIf.c	 10273  \DESCRIPTION Access to CanIf_CtrlMode, CanIf_ChannelMode, CanIf_WakeUpValidationState, CanIf_PnWuTxPduFilterActive, CanIf_TxConfState, 
; ..\component\CanIf\Implementation\CanIf.c	 10274               CanIf_BusMirroringActive with index controlled by CANIF_CFG_MAX_CONTROLLER which is mapped to the CanIf_GetSizeOfCtrlStates()
; ..\component\CanIf\Implementation\CanIf.c	 10275               which is provided by ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10276  \COUNTERMEASURE \N Qualified use-case CSL01/CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10277  
; ..\component\CanIf\Implementation\CanIf.c	 10278  \ID SBSW_CANIF_4
; ..\component\CanIf\Implementation\CanIf.c	 10279  \DESCRIPTION Write access to dereferenced pointer ControllerModePtr.
; ..\component\CanIf\Implementation\CanIf.c	 10280  \COUNTERMEASURE \N The caller of the function CanIf_GetControllerMode must ensure that the pointer passed to the
; ..\component\CanIf\Implementation\CanIf.c	 10281                     parameter ControllerModePtr is able to record a value of the type CanIf_ControllerModeType.
; ..\component\CanIf\Implementation\CanIf.c	 10282  
; ..\component\CanIf\Implementation\CanIf.c	 10283  \ID SBSW_CANIF_5
; ..\component\CanIf\Implementation\CanIf.c	 10284  \DESCRIPTION Function call with referenced local variable/structure respectively passed-through parameter.
; ..\component\CanIf\Implementation\CanIf.c	 10285  \COUNTERMEASURE \N Pointer references stack variable and is therefore always valid. For passed-through datapointer the caller ensures that the 
; ..\component\CanIf\Implementation\CanIf.c	 10286                     pointer is valid.
; ..\component\CanIf\Implementation\CanIf.c	 10287  
; ..\component\CanIf\Implementation\CanIf.c	 10288  \ID SBSW_CANIF_6   
; ..\component\CanIf\Implementation\CanIf.c	 10289  \DESCRIPTION Access to CanIf_TxQueue via PduId which is indirected over CanIf_TxPduQueueIndex.
; ..\component\CanIf\Implementation\CanIf.c	 10290  \COUNTERMEASURE \N Qualified use-case CSL03 of ComStackLib. Pdu is passed through, caller ensures that PduId is valid.
; ..\component\CanIf\Implementation\CanIf.c	 10291                     For API CanIf_CancelTxConfirmation() which is called from outside, the PduId is checked via CSL01 with reference value "CanIf_GetSizeOfTxPduConfig()".
; ..\component\CanIf\Implementation\CanIf.c	 10292  
; ..\component\CanIf\Implementation\CanIf.c	 10293  \ID SBSW_CANIF_7
; ..\component\CanIf\Implementation\CanIf.c	 10294  \DESCRIPTION VStdMemCpy function call with parameter destination buffer pointer and length.
; ..\component\CanIf\Implementation\CanIf.c	 10295               The array for buffering the data is dimensioned with CANIF_STATIC_BUFFER_SIZE or CANIF_CFG_MAXRXDLC_PLUS_MAXMETADATALEN respectively.
; ..\component\CanIf\Implementation\CanIf.c	 10296  \COUNTERMEASURE \R  CanIf_TransmitSubHandleTxResBusy(): runtime check -> localPduPtr->length vs. CANIF_STATIC_BUFFER_SIZE 
; ..\component\CanIf\Implementation\CanIf.c	 10297                      CanIf_HlIndication(): runtime check -> (CanDlc + CANIF_CFG_RX_RXMETADATALENGTH(PduId)) vs. CANIF_CFG_MAXRXDLC_PLUS_MAXMETADATALEN
; ..\component\CanIf\Implementation\CanIf.c	 10298                      CanIf_CancelTxConfirmation(): runtime check -> PduInfoPtr->length vs. CANIF_STATIC_BUFFER_SIZE
; ..\component\CanIf\Implementation\CanIf.c	 10299  
; ..\component\CanIf\Implementation\CanIf.c	 10300  \ID SBSW_CANIF_8
; ..\component\CanIf\Implementation\CanIf.c	 10301  \DESCRIPTION Access to CanIf_PnWuTxPduFilterActive, CanIf_TxConfState with index controller which is indirected from  Hrh/CanTxPduId via 
; ..\component\CanIf\Implementation\CanIf.c	 10302                      CanIf_GetCtrlStatesIdxOfMailBoxConfig()/CanIf_GetCtrlStatesIdxOfTxPduConfig(). Hrh is checked via CanIf_GetSizeOfMailBoxConfig(),
; ..\component\CanIf\Implementation\CanIf.c	 10303                      CanTxPduId is checked via CanIf_GetSizeOfTxPduConfig().
; ..\component\CanIf\Implementation\CanIf.c	 10304  \COUNTERMEASURE \N Qualified use-case CSL01/CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10305  
; ..\component\CanIf\Implementation\CanIf.c	 10306  \ID SBSW_CANIF_9
; ..\component\CanIf\Implementation\CanIf.c	 10307  \DESCRIPTION Write access to the content of an object that is referenced by a pointer parameter.
; ..\component\CanIf\Implementation\CanIf.c	 10308  \COUNTERMEASURE \N Caller ensures validity of pointer parameter.
; ..\component\CanIf\Implementation\CanIf.c	 10309  
; ..\component\CanIf\Implementation\CanIf.c	 10310  \ID SBSW_CANIF_10
; ..\component\CanIf\Implementation\CanIf.c	 10311  \DESCRIPTION Function call CanIf_Indirect_HlIndication(). CanSduPtr is just forwarded without modification.
; ..\component\CanIf\Implementation\CanIf.c	 10312  \COUNTERMEASURE \N Caller of CanIf_RxIndication ensures that CanSduPtr is valid.
; ..\component\CanIf\Implementation\CanIf.c	 10313  
; ..\component\CanIf\Implementation\CanIf.c	 10314  \ID SBSW_CANIF_11
; ..\component\CanIf\Implementation\CanIf.c	 10315  \DESCRIPTION Function call via function pointer: Access to CanIf_TxConfirmationFctList via indirection over CanIf_TxPduConfig with parameter CanTxPduId to 
; ..\component\CanIf\Implementation\CanIf.c	 10316               get the required function pointer. The indirection is ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10317  \COUNTERMEASURE \S For the generated function list CanIf_TxConfirmationFctList, it must be secured that a valid function callback is provided with the valid signature.
; ..\component\CanIf\Implementation\CanIf.c	 10318                     SMI-350
; ..\component\CanIf\Implementation\CanIf.c	 10319  
; ..\component\CanIf\Implementation\CanIf.c	 10320  \ID SBSW_CANIF_12
; ..\component\CanIf\Implementation\CanIf.c	 10321  \DESCRIPTION Function call via function pointer: Access to CanIf_RxIndicationFctList via indirection over CanIf_RxPduConfig with parameter CanRxPduId to 
; ..\component\CanIf\Implementation\CanIf.c	 10322               get the required function pointer. The indirection is ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10323               Function call with parameter data pointer: Data pointer CanSduPtr/pduinfo is defined as pointer to const, so no write access is possible.
; ..\component\CanIf\Implementation\CanIf.c	 10324  \COUNTERMEASURE \S For the generated function list CanIf_RxIndicationFctList, it must be secured that a valid function callback is provided with the vailid signature.
; ..\component\CanIf\Implementation\CanIf.c	 10325                     SMI-349
; ..\component\CanIf\Implementation\CanIf.c	 10326  
; ..\component\CanIf\Implementation\CanIf.c	 10327  \ID SBSW_CANIF_13
; ..\component\CanIf\Implementation\CanIf.c	 10328  \DESCRIPTION Function call via function pointer
; ..\component\CanIf\Implementation\CanIf.c	 10329  \COUNTERMEASURE \S  For the generated functions CanIf_BusOffNotificationFctPtr, CanIf_CtrlModeIndicationFctPtr, CanIf_TrcvModeIndicationFctPtr, CanIf_ConfirmPnAvailabilityFctPtr,
; ..\component\CanIf\Implementation\CanIf.c	 10330                      CanIf_ClearTrcvWufFlagIndicationFctPtr, CanIf_CheckTrcvWakeFlagIndicationFctPtr, CanIf_WakeUpValidationFctPtr, CanIf_RamCheckCorruptControllerIndFctPtr,
; ..\component\CanIf\Implementation\CanIf.c	 10331                      CanIf_RamCheckCorruptMailboxIndFctPtr, CanIf_DataChecksumRxErrFctPtr it must be secured that a valid function callback is provided with the valid signature.
; ..\component\CanIf\Implementation\CanIf.c	 10332                      SMI-746
; ..\component\CanIf\Implementation\CanIf.c	 10333  
; ..\component\CanIf\Implementation\CanIf.c	 10334  \ID SBSW_CANIF_14
; ..\component\CanIf\Implementation\CanIf.c	 10335  \DESCRIPTION Access to CanIf_DynTxId via PDU ID which is indirected over CanIf_TxPduStatic2DynamicIndirection.
; ..\component\CanIf\Implementation\CanIf.c	 10336  \COUNTERMEASURE \N Qualified use-case CSL01 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10337  
; ..\component\CanIf\Implementation\CanIf.c	 10338  \ID SBSW_CANIF_15
; ..\component\CanIf\Implementation\CanIf.c	 10339  \DESCRIPTION Write access to variable CanIf_TxQueueIndex2FifoEl, CanIf_TxFifoQueueBase with index counter.
; ..\component\CanIf\Implementation\CanIf.c	 10340  \COUNTERMEASURE \N Qualified use-case CSL01 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10341  
; ..\component\CanIf\Implementation\CanIf.c	 10342  \ID SBSW_CANIF_16
; ..\component\CanIf\Implementation\CanIf.c	 10343  \DESCRIPTION Write access to a local variable with index. 
; ..\component\CanIf\Implementation\CanIf.c	 10344  \COUNTERMEASURE \R Index is checked during runtime to not exceed range of the variable.
; ..\component\CanIf\Implementation\CanIf.c	 10345  
; ..\component\CanIf\Implementation\CanIf.c	 10346  \ID SBSW_CANIF_17
; ..\component\CanIf\Implementation\CanIf.c	 10347  \DESCRIPTION Write access to CanIf_J1939RxAddr_Lookup/CanIf_J1939TxAddr_Lookup with index (incl. configured offset), which is checked against CanIf_GetSizeOfJ1939RxAddr_Lookup/CanIf_GetSizeOfJ1939TxAddr_Lookup at runtime.
; ..\component\CanIf\Implementation\CanIf.c	 10348  \COUNTERMEASURE \N Qualified use-case CSL01 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10349  
; ..\component\CanIf\Implementation\CanIf.c	 10350  \ID SBSW_CANIF_18
; ..\component\CanIf\Implementation\CanIf.c	 10351  \DESCRIPTION VStdMemCpy function call with parameter destination buffer pointer and length. 
; ..\component\CanIf\Implementation\CanIf.c	 10352  \COUNTERMEASURE \N  CanIf_TransmitSubHandleTxResBusy(): runtime check -> localPduPtr->length vs. CANIF_CFG_TXBUFFERPRIOBYCANID_STATFDQUEUE_MAXDATALENGTH(localPduPtr->swPduHandle) 
; ..\component\CanIf\Implementation\CanIf.c	 10353                      CanIf_CancelTxConfirmation():  runtime check -> localPduPtr->length vs. CANIF_CFG_TXBUFFERPRIOBYCANID_STATFDQUEUE_MAXDATALENGTH(localPduPtr->swPduHandle) 
; ..\component\CanIf\Implementation\CanIf.c	 10354                      Qualified use-case CSL02 of ComStackLib (union of messages and RAM array). "swPduHandle" is verified to be valid by caller of function.
; ..\component\CanIf\Implementation\CanIf.c	 10355  
; ..\component\CanIf\Implementation\CanIf.c	 10356  \ID SBSW_CANIF_19
; ..\component\CanIf\Implementation\CanIf.c	 10357  \DESCRIPTION Write access to WakeUpValidationStateOfCtrlStates with index controller which is indirected from HRH.
; ..\component\CanIf\Implementation\CanIf.c	 10358  \COUNTERMEASURE \N Qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10359  
; ..\component\CanIf\Implementation\CanIf.c	 10360  \ID SBSW_CANIF_20
; ..\component\CanIf\Implementation\CanIf.c	 10361  \DESCRIPTION Write access to CanIf_TxQueueFlags with queueElementIdx.
; ..\component\CanIf\Implementation\CanIf.c	 10362  \COUNTERMEASURE \N Qualified use-case CSL01 of ComStackLib:  queueElementIdx is checked against CanIf_GetSizeOfTxQueueFlags() at runtime.
; ..\component\CanIf\Implementation\CanIf.c	 10363  
; ..\component\CanIf\Implementation\CanIf.c	 10364  \ID SBSW_CANIF_21
; ..\component\CanIf\Implementation\CanIf.c	 10365  \DESCRIPTION Function call with parameter data pointer. The data pointer is passed through the function with the same type.
; ..\component\CanIf\Implementation\CanIf.c	 10366  \COUNTERMEASURE \N The compiler ensures that no memory violation occurs.
; ..\component\CanIf\Implementation\CanIf.c	 10367  
; ..\component\CanIf\Implementation\CanIf.c	 10368  \ID SBSW_CANIF_22
; ..\component\CanIf\Implementation\CanIf.c	 10369  \DESCRIPTION Function call via function pointer. Function is indirected with TransceiverId over CanIf_CanTrcvFctTbl.
; ..\component\CanIf\Implementation\CanIf.c	 10370  \COUNTERMEASURE \N The assurance to get a valid function pointer is a qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10371  
; ..\component\CanIf\Implementation\CanIf.c	 10372  \ID SBSW_CANIF_23
; ..\component\CanIf\Implementation\CanIf.c	 10373  \DESCRIPTION Write access to CanIf_PduRxMode with "index".
; ..\component\CanIf\Implementation\CanIf.c	 10374  \COUNTERMEASURE \N Qualified use-case CSL01 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10375  
; ..\component\CanIf\Implementation\CanIf.c	 10376  \ID SBSW_CANIF_24
; ..\component\CanIf\Implementation\CanIf.c	 10377  \DESCRIPTION Initialization write-access to CanIf_CtrlMode with index which is limited by sizeof of corresponding type and corresponding variable. Hence NO out-of-bounce access can occur.
; ..\component\CanIf\Implementation\CanIf.c	 10378  \COUNTERMEASURE \N Verified with review and the compiler ensures that no memory violation occurs.
; ..\component\CanIf\Implementation\CanIf.c	 10379  
; ..\component\CanIf\Implementation\CanIf.c	 10380  \ID SBSW_CANIF_25
; ..\component\CanIf\Implementation\CanIf.c	 10381  \DESCRIPTION Write access to CanIf_TxBufferPrioByCanIdBase.  PduId -> CanIf_GetMailBoxConfigIdxOfTxPduConfig -> CanIf_GetTxBufferCfgIdxOfMailBoxConfig ->
; ..\component\CanIf\Implementation\CanIf.c	 10382  \                  CanIf_GetTxBufferPrioByCanIdBaseIdxOfTxBufferPrioByCanIdBitQueueConfig/CanIf_GetTxBufferPrioByCanIdBaseIdxOfTxBufferPrioByCanIdByteQueueConfig
; ..\component\CanIf\Implementation\CanIf.c	 10383  \COUNTERMEASURE \N TxPduId is checked against CanIf_GetSizeOfTxPduConfig. The following indirections are ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10384  
; ..\component\CanIf\Implementation\CanIf.c	 10385  \ID SBSW_CANIF_26
; ..\component\CanIf\Implementation\CanIf.c	 10386  \DESCRIPTION Write access to CanIf_TxQueueFlags. ControllerId -> CanIf_GetMappedTxBuffersConfigStartIdxOfCanIfCtrlId2MappedTxBuffersConfig ->
; ..\component\CanIf\Implementation\CanIf.c	 10387                     CanIf_GetMailBoxConfigIdxOfMappedTxBuffersConfig -> CanIf_GetTxBufferCfgIdxOfMailBoxConfig -> CanIf_GetTxQueueFlagsStartIdxOfTxBufferPrioByCanIdBitQueueConfig ->
; ..\component\CanIf\Implementation\CanIf.c	 10388                     CanIf_SetTxQueueFlags.
; ..\component\CanIf\Implementation\CanIf.c	 10389  \COUNTERMEASURE \N ControllerId is checked against CanIf_GetSizeOfCtrlStates. The following indirections are ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10390  
; ..\component\CanIf\Implementation\CanIf.c	 10391  \ID SBSW_CANIF_27
; ..\component\CanIf\Implementation\CanIf.c	 10392  \DESCRIPTION Write access to CanIf_TxBufferPrioByCanIdBase. ControllerId -> CanIf_GetMappedTxBuffersConfigStartIdxOfCanIfCtrlId2MappedTxBuffersConfig ->
; ..\component\CanIf\Implementation\CanIf.c	 10393                     CanIf_GetMailBoxConfigIdxOfMappedTxBuffersConfig -> CanIf_GetTxBufferCfgIdxOfMailBoxConfig ->
; ..\component\CanIf\Implementation\CanIf.c	 10394                     CanIf_GetTxBufferPrioByCanIdBaseIdxOfTxBufferPrioByCanIdByteQueueConfig -> CanIf_SetTxQueueCounter
; ..\component\CanIf\Implementation\CanIf.c	 10395  \COUNTERMEASURE \N ControllerId is checked against CanIf_GetSizeOfCtrlStates. The following indirections are ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10396  
; ..\component\CanIf\Implementation\CanIf.c	 10397  \ID SBSW_CANIF_28
; ..\component\CanIf\Implementation\CanIf.c	 10398  \DESCRIPTION Write access to CanIf_TxQueue. ControllerId ->  CanIf_GetMappedTxBuffersConfigStartIdxOfCanIfCtrlId2MappedTxBuffersConfig ->
; ..\component\CanIf\Implementation\CanIf.c	 10399                     CanIf_GetMailBoxConfigIdxOfMappedTxBuffersConfig -> CanIf_GetTxBufferCfgIdxOfMailBoxConfig ->
; ..\component\CanIf\Implementation\CanIf.c	 10400                     CanIf_GetTxBufferPrioByCanIdByteQueueMappedTxPdusStartIdxOfTxBufferPrioByCanIdByteQueueConfig ->
; ..\component\CanIf\Implementation\CanIf.c	 10401                     CanIf_GetTxPduConfigIdxOfTxBufferPrioByCanIdByteQueueMappedTxPdus -> CanIf_GetTxQueueIdxOfTxPduQueueIndex -> CanIf_GetTxQueue.
; ..\component\CanIf\Implementation\CanIf.c	 10402  \COUNTERMEASURE \N ControllerId is checked against CanIf_GetSizeOfCtrlStates. The following indirections are ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10403  
; ..\component\CanIf\Implementation\CanIf.c	 10404  \ID SBSW_CANIF_29
; ..\component\CanIf\Implementation\CanIf.c	 10405  \DESCRIPTION Write access sdu pointer with index CANIF_J1939_ACKM_ACKADDR_POS.
; ..\component\CanIf\Implementation\CanIf.c	 10406  \COUNTERMEASURE \R The code checks at runtime the buffer length against CANIF_J1939_ACKM_ACKADDR_POS.
; ..\component\CanIf\Implementation\CanIf.c	 10407  
; ..\component\CanIf\Implementation\CanIf.c	 10408  \ID SBSW_CANIF_30
; ..\component\CanIf\Implementation\CanIf.c	 10409  \DESCRIPTION Write access CanSduLocal with index CANIF_J1939_ACKM_ACKADDR_POS.
; ..\component\CanIf\Implementation\CanIf.c	 10410  \COUNTERMEASURE \N A error directive verifies that: CANIF_CFG_MAXRXDLC_PLUS_MAXMETADATALEN > CANIF_J1939_ACKM_ACKADDR_POS
; ..\component\CanIf\Implementation\CanIf.c	 10411  
; ..\component\CanIf\Implementation\CanIf.c	 10412  \ID SBSW_CANIF_31
; ..\component\CanIf\Implementation\CanIf.c	 10413  \DESCRIPTION Function call with referenced pointer on local RAM array txPduDataWithChecksum.
; ..\component\CanIf\Implementation\CanIf.c	 10414               txPduDataWithChecksum is dimensioned with CANIF_CFG_MAXTXDLC_PLUS_DATACHECKSUM, the index to write on txPduDataWithChecksum is controlled by PduInfoPtr->SduLength.
; ..\component\CanIf\Implementation\CanIf.c	 10415  \COUNTERMEASURE \R Runtime check: PduInfoPtr->SduLength is checked against CANIF_CFG_MAXTXDLC_PLUS_DATACHECKSUM. 
; ..\component\CanIf\Implementation\CanIf.c	 10416  
; ..\component\CanIf\Implementation\CanIf.c	 10417  \ID SBSW_CANIF_32
; ..\component\CanIf\Implementation\CanIf.c	 10418  \DESCRIPTION Write access to CanIf_TxFifoQueueData with index (queueDataStartIdx + DLC) .
; ..\component\CanIf\Implementation\CanIf.c	 10419  \COUNTERMEASURE \R  A runtime check ensures that (queueDataStartIdx + DLC) does not exceed the bounds of CanIf_TxFifoQueueData via a check against CanIf_GetSizeOfTxFifoQueueData().
; ..\component\CanIf\Implementation\CanIf.c	 10420  
; ..\component\CanIf\Implementation\CanIf.c	 10421  \ID SBSW_CANIF_33
; ..\component\CanIf\Implementation\CanIf.c	 10422  \DESCRIPTION Write access to CanIf_TxBufferFifoBase with index txBufferFifoBaseIdx.
; ..\component\CanIf\Implementation\CanIf.c	 10423               ControllerId -> CanIf_GetMappedTxBuffersConfigStartIdxOfCanIfCtrlId2MappedTxBuffersConfig -> CanIf_GetMailBoxConfigIdxOfMappedTxBuffersConfig -> CanIf_GetTxBufferCfgIdxOfMailBoxConfig ->
; ..\component\CanIf\Implementation\CanIf.c	 10424               CanIf_GetTxBufferFifoBaseIdxOfTxBufferFifoConfig.
; ..\component\CanIf\Implementation\CanIf.c	 10425  \COUNTERMEASURE \N ControllerId is checked against CanIf_GetSizeOfCtrlStates by caller function. The following indirections are ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10426  
; ..\component\CanIf\Implementation\CanIf.c	 10427  \ID SBSW_CANIF_34
; ..\component\CanIf\Implementation\CanIf.c	 10428  \DESCRIPTION Write access to CanIf_TxFifoQueueBase with index (readIdx/writeIdx + txFifoQueueBaseStartIdx).
; ..\component\CanIf\Implementation\CanIf.c	 10429               ControllerId -> CanIf_GetMappedTxBuffersConfigStartIdxOfCanIfCtrlId2MappedTxBuffersConfig -> CanIf_GetMailBoxConfigIdxOfMappedTxBuffersConfig -> CanIf_GetTxBufferCfgIdxOfMailBoxConfig ->
; ..\component\CanIf\Implementation\CanIf.c	 10430               CanIf_GetTxFifoQueueBaseStartIdxOfTxBufferFifoConfig -> txFifoQueueBaseStartIdx.
; ..\component\CanIf\Implementation\CanIf.c	 10431  \COUNTERMEASURE \N  ControllerId is checked against CanIf_GetSizeOfCtrlStates by caller function. The following indirections to get txFifoQueueBaseStartIdx are ensured via qualified use-case CSL03
; ..\component\CanIf\Implementation\CanIf.c	 10432               of ComStackLib. readIdx/writeIdx is checked against the macro CanIf_GetTxFifoQueueBaseLengthOfTxBufferFifoConfig while writing CanIf_TxBufferFifoBase.
; ..\component\CanIf\Implementation\CanIf.c	 10433               For (CanIf_GetTxFifoQueueBaseLengthOfTxBufferFifoConfig + CanIf_GetTxFifoQueueBaseStartIdxOfTxBufferFifoConfig) a qualified CSL03 use-case of ComStackLib ensures that the index is
; ..\component\CanIf\Implementation\CanIf.c	 10434               valid to access CanIf_TxFifoQueueBase.
; ..\component\CanIf\Implementation\CanIf.c	 10435  
; ..\component\CanIf\Implementation\CanIf.c	 10436  \ID SBSW_CANIF_35
; ..\component\CanIf\Implementation\CanIf.c	 10437  \DESCRIPTION Write access to CanIf_TxQueueIndex2FifoEl with index. CanIf_GetTxFifoQueueBase -> CanIf_GetTxQueueIdxOfTxPduQueueIndex -> CanIf_SetTxQueueIndex2FifoEl.
; ..\component\CanIf\Implementation\CanIf.c	 10438  \COUNTERMEASURE \N  The input parameter for CanIf_GetTxFifoQueueBase() is ensured with SBSW_CANIF_34. The following indirections to get the index for CanIf_SetTxQueueIndex2FifoEl are ensured via
; ..\component\CanIf\Implementation\CanIf.c	 10439               qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10440               
; ..\component\CanIf\Implementation\CanIf.c	 10441  \ID SBSW_CANIF_36
; ..\component\CanIf\Implementation\CanIf.c	 10442  \DESCRIPTION Write access to CanIf_TxQueueIndex2FifoEl with index. CanTxPduId/PduId/localPduPtr->swPduHandle -> CanIf_GetTxQueueIdxOfTxPduQueueIndex -> CanIf_SetTxQueueIndex2FifoEl.
; ..\component\CanIf\Implementation\CanIf.c	 10443  \COUNTERMEASURE \N The input parameter CanTxPduId/PduId/localPduPtr->swPduHandle is checked against CanIf_GetSizeOfTxPduConfig(). The following indirections to get the index for CanIf_SetTxQueueIndex2FifoEl are ensured via
; ..\component\CanIf\Implementation\CanIf.c	 10444               qualified use-case CSL03 of ComStackLib. 
; ..\component\CanIf\Implementation\CanIf.c	 10445  
; ..\component\CanIf\Implementation\CanIf.c	 10446  \ID SBSW_CANIF_37
; ..\component\CanIf\Implementation\CanIf.c	 10447  \DESCRIPTION Write access to CanIf_TxBufferFifoBase with index txBufferFifoBaseIdx. 
; ..\component\CanIf\Implementation\CanIf.c	 10448               CanTxPduId/PduId -> CanIf_GetMailBoxConfigIdxOfTxPduConfig -> CanIf_GetTxBufferCfgIdxOfMailBoxConfig -> CanIf_GetTxBufferFifoBaseIdxOfTxBufferFifoConfig.
; ..\component\CanIf\Implementation\CanIf.c	 10449  \COUNTERMEASURE \N The input parameter CanTxPduId/PduId is checked by caller respectively in corresponding function against CanIf_GetSizeOfTxPduConfig(). The following indirections to get the index for CanIf_TxBufferFifoBase are ensured via
; ..\component\CanIf\Implementation\CanIf.c	 10450               qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10451  
; ..\component\CanIf\Implementation\CanIf.c	 10452  \ID SBSW_CANIF_38
; ..\component\CanIf\Implementation\CanIf.c	 10453  \DESCRIPTION Write access to CanIf_TxFifoQueueBase with index (readIdx + txFifoQueueBaseStartIdx).
; ..\component\CanIf\Implementation\CanIf.c	 10454               readIdx: 
; ..\component\CanIf\Implementation\CanIf.c	 10455               PduId -> CanIf_GetMailBoxConfigIdxOfTxPduConfig -> CanIf_GetTxBufferCfgIdxOfMailBoxConfig -> CanIf_GetTxBufferFifoBaseIdxOfTxBufferFifoConfig -> CanIf_GetTxBufferFifoBase (.eReadIdx)
; ..\component\CanIf\Implementation\CanIf.c	 10456               txFifoQueueBaseStartIdx: 
; ..\component\CanIf\Implementation\CanIf.c	 10457               PduId -> CanIf_GetMailBoxConfigIdxOfTxPduConfig -> CanIf_GetTxBufferCfgIdxOfMailBoxConfig -> CanIf_GetTxFifoQueueBaseStartIdxOfTxBufferFifoConfig
; ..\component\CanIf\Implementation\CanIf.c	 10458  \COUNTERMEASURE \N PduId is checked against CanIf_GetSizeOfTxPduConfig. readIdx is checked against the macro CanIf_GetTxFifoQueueBaseLengthOfTxBufferFifoConfig while writing CanIf_TxBufferFifoBase.
; ..\component\CanIf\Implementation\CanIf.c	 10459               The index to access CanIf_TxBufferFifoBase is ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10460               The indirections to get txFifoQueueBaseStartIdx are ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10461               For (CanIf_GetTxFifoQueueBaseLengthOfTxBufferFifoConfig + CanIf_GetTxFifoQueueBaseStartIdxOfTxBufferFifoConfig) a qualified CSL03 use-case of ComStackLib ensures that the index is
; ..\component\CanIf\Implementation\CanIf.c	 10462               valid to access CanIf_TxFifoQueueBase.
; ..\component\CanIf\Implementation\CanIf.c	 10463  
; ..\component\CanIf\Implementation\CanIf.c	 10464  \ID SBSW_CANIF_39
; ..\component\CanIf\Implementation\CanIf.c	 10465  \DESCRIPTION Write access to CanIf_TxFifoQueueBase with index (FifoQueueBaseIdx + txFifoQueueBaseStartIdx).
; ..\component\CanIf\Implementation\CanIf.c	 10466               FifoQueueBaseIdx: 
; ..\component\CanIf\Implementation\CanIf.c	 10467               CanTxPduId -> CanIf_GetTxQueueIdxOfTxPduQueueIndex -> CanIf_GetTxQueueIndex2FifoEl
; ..\component\CanIf\Implementation\CanIf.c	 10468               txFifoQueueBaseStartIdx: 
; ..\component\CanIf\Implementation\CanIf.c	 10469               CanTxPduId -> CanIf_GetMailBoxConfigIdxOfTxPduConfig -> CanIf_GetTxBufferCfgIdxOfMailBoxConfig  -> CanIf_GetTxFifoQueueBaseStartIdxOfTxBufferFifoConfig
; ..\component\CanIf\Implementation\CanIf.c	 10470  \COUNTERMEASURE \N CanTxPduId -> is checked against CanIf_GetSizeOfTxPduConfig. Qualified use-case CSL03 ensures that for each TxQueueIndex2FifoEl/TxFifoQueueBaseStartIdx pair calculated with the same valid
; ..\component\CanIf\Implementation\CanIf.c	 10471               CanTxPduId does not violate the bounds of CanIf_TxFifoQueueBase.
; ..\component\CanIf\Implementation\CanIf.c	 10472  
; ..\component\CanIf\Implementation\CanIf.c	 10473  \ID SBSW_CANIF_40
; ..\component\CanIf\Implementation\CanIf.c	 10474  \DESCRIPTION Write access to CanIf_TxQueueData with index ( TxQueueDataStartIdxOfTxQueueIndex2DataStartStop + DLC ).
; ..\component\CanIf\Implementation\CanIf.c	 10475  \COUNTERMEASURE \N  CanTxPduId/PduInfoPtr->swPduHandle -> checked against CanIf_GetSizeOfTxPduConfig. DLC is checked against TxQueueDataLengthOfTxQueueIndex2DataStartStop. Qualified use-case CSL03 ensures that
; ..\component\CanIf\Implementation\CanIf.c	 10476               ( TxQueueDataStartIdx() + TxQueueDataLength() ) do not violate the bounds of CanIf_TxQueueData.
; ..\component\CanIf\Implementation\CanIf.c	 10477  
; ..\component\CanIf\Implementation\CanIf.c	 10478  \ID SBSW_CANIF_41
; ..\component\CanIf\Implementation\CanIf.c	 10479  \DESCRIPTION In case of feature "CANIF_MULTIPLE_CANDRV_SUPPORT" is active: \ 
; ..\component\CanIf\Implementation\CanIf.c	 10480               Function call via function pointer. Function is indirected with CanIf_Controller_Value/wuTrgtaddress over CanIf_CanDrvFctTbl. CanIf_Controller_Value/wuTrgtaddress is indirected \ 
; ..\component\CanIf\Implementation\CanIf.c	 10481               about CanIf_CanChannelIdUpToLowMap[].
; ..\component\CanIf\Implementation\CanIf.c	 10482  \COUNTERMEASURE \N The assurance to get a valid function pointer is a qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10483               To ensure the indirection via CanIf_CanChannelIdUpToLowMap[], during CanIf_Init() there is a check that CANIF_CFG_MAX_CONTROLLER fits the dimension   \ 
; ..\component\CanIf\Implementation\CanIf.c	 10484               of CanIf_CanChannelIdUpToLowMap[]. For the index wuTrgtaddress, a runtimecheck ensures that wuTrgtaddress fits CanIf_GetSizeOfCanChannelIdUpToLowMap.
; ..\component\CanIf\Implementation\CanIf.c	 10485  
; ..\component\CanIf\Implementation\CanIf.c	 10486  \ID SBSW_CANIF_42
; ..\component\CanIf\Implementation\CanIf.c	 10487  \DESCRIPTION Write access to CanIf_PduRxMode with index PduRxModeIdx.
; ..\component\CanIf\Implementation\CanIf.c	 10488               CanIfRxPduId -> CanIf_GetPduRxModeIdxOfRxPduConfig
; ..\component\CanIf\Implementation\CanIf.c	 10489  \COUNTERMEASURE \N The input parameter CanIfRxPduId is checked against CanIf_GetSizeOfRxPduConfig(). The following indirection is ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10490  
; ..\component\CanIf\Implementation\CanIf.c	 10491  \ID SBSW_CANIF_43
; ..\component\CanIf\Implementation\CanIf.c	 10492  \DESCRIPTION In case of feature "CANIF_MULTIPLE_CANDRV_SUPPORT" is active: \ 
; ..\component\CanIf\Implementation\CanIf.c	 10493               Function call via function pointer. Function is indirected with parameter CanIf_Controller_Value_Local via CanIf_GetCanDrvFctTblIdxOfCanChannelIdUpToLowMap to CanIf_CanDrvFctTbl.
; ..\component\CanIf\Implementation\CanIf.c	 10494               CanIf_Controller_Value_Local is indirected from CanTxPduId via CanIf_GetCtrlStatesIdxOfTxPduConfig().
; ..\component\CanIf\Implementation\CanIf.c	 10495               During CanIf_Init() there is a check that dimension of CanIf_CtrlStates[] fits the dimension of CanIf_CanChannelIdUpToLowMap[].
; ..\component\CanIf\Implementation\CanIf.c	 10496               The parameter CanTxPduId is checked against CanIf_GetSizeOfTxPduConfig(). 
; ..\component\CanIf\Implementation\CanIf.c	 10497  \COUNTERMEASURE \N The indirections to get the function pointer are ensured by the qualified use-cases CSL01 and CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10498  
; ..\component\CanIf\Implementation\CanIf.c	 10499  \ID SBSW_CANIF_44
; ..\component\CanIf\Implementation\CanIf.c	 10500  \DESCRIPTION Function call via function pointer: Access to CanIf_CanTrcvFctTbl via indirection over CanIf_TransceiverUpToLowMap with TransceiverId.
; ..\component\CanIf\Implementation\CanIf.c	 10501               Function call with parameter data pointer: The data pointer is passed through the function with the same type.
; ..\component\CanIf\Implementation\CanIf.c	 10502  \COUNTERMEASURE \N Function call via function pointer: The DET check of the function verifes that the TransceiverId is smaller than the size of CanIf_TransceiverUpToLowMap[],
; ..\component\CanIf\Implementation\CanIf.c	 10503                                                         to ensure the indirection with TransceiverId into CanIf_TransceiverUpToLowMap[].
; ..\component\CanIf\Implementation\CanIf.c	 10504                                                         The following indirection to get a valid function pointer is ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10505                     Function call with parameter data pointer: The caller ensures that the passed-through pointer parameter is valid.
; ..\component\CanIf\Implementation\CanIf.c	 10506  
; ..\component\CanIf\Implementation\CanIf.c	 10507  \ID SBSW_CANIF_45
; ..\component\CanIf\Implementation\CanIf.c	 10508  \DESCRIPTION Function call via function pointer: Access to CanIf_CanDrvFctTbl via indirection over CanIf_CanChannelIdUpToLowMap with CanIf_Controller_Value.
; ..\component\CanIf\Implementation\CanIf.c	 10509               Function call with parameter data pointer: The data pointer is passed through the function with the same type.
; ..\component\CanIf\Implementation\CanIf.c	 10510  \COUNTERMEASURE \N Function call via function pointer: CanIf_Init() makes the boundry check against CANIF_CFG_MAX_CONTROLLER for CanIf_CanChannelIdUpToLowMap[], 
; ..\component\CanIf\Implementation\CanIf.c	 10511                                                         to ensure the indirection with CanIf_Controller_Value into CanIf_CanChannelIdUpToLowMap[].
; ..\component\CanIf\Implementation\CanIf.c	 10512                                                         The following indirection to get a valid function pointer is ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10513                     Function call with parameter data pointer: The caller ensures that the passed-through pointer parameter is valid.
; ..\component\CanIf\Implementation\CanIf.c	 10514  
; ..\component\CanIf\Implementation\CanIf.c	 10515  \ID SBSW_CANIF_46
; ..\component\CanIf\Implementation\CanIf.c	 10516  \DESCRIPTION Function call via function pointer: Access to CanIf_CanDrvFctTbl via indirection over CanIf_GetCanDrvFctTblIdxOfCanChannelIdUpToLowMap with CanIf_Controller_Value.
; ..\component\CanIf\Implementation\CanIf.c	 10517                                                   CanIf_Controller_Value_Local is derived from CanTxPduId via CanIf_GetCtrlStatesIdxOfTxPduConfig.
; ..\component\CanIf\Implementation\CanIf.c	 10518               Function call with parameter data pointer: The data pointer is passed through the function with the same type.
; ..\component\CanIf\Implementation\CanIf.c	 10519  \COUNTERMEASURE \N Function call via function pointer: CanIf_Init() makes a check that the dimension of CanIf_CtrlStates[] fits the dimension of CanIf_CanChannelIdUpToLowMap[], 
; ..\component\CanIf\Implementation\CanIf.c	 10520                                                         to ensure the indirection with CanIf_Controller_Value into CanIf_GetCanDrvFctTblIdxOfCanChannelIdUpToLowMap[].
; ..\component\CanIf\Implementation\CanIf.c	 10521                                                         The DET check of the function verifes that the CanTxPduId is smaller than the size of CanIf_GetCtrlStatesIdxOfTxPduConfig[],
; ..\component\CanIf\Implementation\CanIf.c	 10522                                                         to ensure the indirection with CanTxPduId into CanIf_GetCtrlStatesIdxOfTxPduConfig[].
; ..\component\CanIf\Implementation\CanIf.c	 10523                                                         The following indirection to get a valid function pointer is ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10524                     Function call with parameter data pointer: The caller ensures that the passed-through pointer parameter is valid.
; ..\component\CanIf\Implementation\CanIf.c	 10525  
; ..\component\CanIf\Implementation\CanIf.c	 10526  \ID SBSW_CANIF_47
; ..\component\CanIf\Implementation\CanIf.c	 10527  \DESCRIPTION Function call via function pointer: Access to CanIf_CanDrvFctTbl via indirection over CanIf_GetCanDrvFctTblIdxOfCanChannelIdUpToLowMap with CanIf_Controller_Value.
; ..\component\CanIf\Implementation\CanIf.c	 10528                                                   CanIf_Controller_Value_Local is derived from CanTxPduId via CanIf_GetCtrlStatesIdxOfTxPduConfig.
; ..\component\CanIf\Implementation\CanIf.c	 10529               Function call with parameter data pointer: The data pointer references a local structure.
; ..\component\CanIf\Implementation\CanIf.c	 10530  \COUNTERMEASURE \N Function call via function pointer: CanIf_Init() makes a check that the dimension of CanIf_CtrlStates[] fits the dimension of CanIf_CanChannelIdUpToLowMap[], 
; ..\component\CanIf\Implementation\CanIf.c	 10531                                                         to ensure the indirection with CanIf_Controller_Value into CanIf_GetCanDrvFctTblIdxOfCanChannelIdUpToLowMap[].
; ..\component\CanIf\Implementation\CanIf.c	 10532                                                         The DET check of the function verifes that the CanTxPduId is smaller than the size of CanIf_GetCtrlStatesIdxOfTxPduConfig[],
; ..\component\CanIf\Implementation\CanIf.c	 10533                                                         to ensure the indirection with CanTxPduId into CanIf_GetCtrlStatesIdxOfTxPduConfig[].
; ..\component\CanIf\Implementation\CanIf.c	 10534                                                         The following indirection to get a valid function pointer is ensured via qualified use-case CSL03 of ComStackLib.
; ..\component\CanIf\Implementation\CanIf.c	 10535                     Function call with parameter data pointer: Data pointer references a stack variable and is therefore always valid.
; ..\component\CanIf\Implementation\CanIf.c	 10536  
; ..\component\CanIf\Implementation\CanIf.c	 10537  \ID SBSW_CANIF_48
; ..\component\CanIf\Implementation\CanIf.c	 10538  \DESCRIPTION Write access to CanIf_J1939RxAddr_Lookup/CanIf_J1939TxAddr_Lookup with index from function input parameter (incl. configured offset).
; ..\component\CanIf\Implementation\CanIf.c	 10539  \COUNTERMEASURE \N In Canif_Init() is checked against CanIf_GetSizeOfJ1939RxAddr_Lookup/CanIf_GetSizeOfJ1939TxAddr_Lookup that each controller with activated J1939 support has a space of 256 elements in these tables.
; ..\component\CanIf\Implementation\CanIf.c	 10540                     In Canif_Init() is checked against CanIf_GetSizeOfJ1939RxAddr_Lookup/CanIf_GetSizeOfJ1939TxAddr_Lookup that the biggest configured table offset plus 256 elements fits in these tables.
; ..\component\CanIf\Implementation\CanIf.c	 10541                     If the address table configuration check in Canif_Init() fails, all CAN controllers will be in state uninitialized.
; ..\component\CanIf\Implementation\CanIf.c	 10542                     The DET check of the function verfies that the specified CAN controller is initialized (address table configuration is consistent).
; ..\component\CanIf\Implementation\CanIf.c	 10543                     The data type uint8 of the function input parameters ensures that the address tables can not be accessed with a value greater than 255.
; ..\component\CanIf\Implementation\CanIf.c	 10544                     The needed configuration data (J1939 support activated/deactivated; address table offset) are always and only from the CanIf_CtrlConfig[] table.
; ..\component\CanIf\Implementation\CanIf.c	 10545  
; ..\component\CanIf\Implementation\CanIf.c	 10546  \ID SBSW_CANIF_49
; ..\component\CanIf\Implementation\CanIf.c	 10547  \DESCRIPTION Write access to contextData with index CANIF_CONTEXTDATA_CTRLID_POS.
; ..\component\CanIf\Implementation\CanIf.c	 10548  \COUNTERMEASURE \N [CM_CANIF_1]
; ..\component\CanIf\Implementation\CanIf.c	 10549  
; ..\component\CanIf\Implementation\CanIf.c	 10550  \ID SBSW_CANIF_50
; ..\component\CanIf\Implementation\CanIf.c	 10551  \DESCRIPTION Write access to contextData with index CANIF_CONTEXTDATA_CTRLID_POS/CANIF_CONTEXTDATA_THRESHOLD_POS.
; ..\component\CanIf\Implementation\CanIf.c	 10552  \COUNTERMEASURE \N [CM_CANIF_1]
; ..\component\CanIf\Implementation\CanIf.c	 10553  
; ..\component\CanIf\Implementation\CanIf.c	 10554  \ID SBSW_CANIF_51
; ..\component\CanIf\Implementation\CanIf.c	 10555  \DESCRIPTION Write access to contextData with index CANIF_CONTEXTDATA_CTRLID_POS/CANIF_CONTEXTDATA_CANERROR_POS.
; ..\component\CanIf\Implementation\CanIf.c	 10556  \COUNTERMEASURE \N [CM_CANIF_1]
; ..\component\CanIf\Implementation\CanIf.c	 10557  
; ..\component\CanIf\Implementation\CanIf.c	 10558  SBSW_JUSTIFICATION_END */
; ..\component\CanIf\Implementation\CanIf.c	 10559  
; ..\component\CanIf\Implementation\CanIf.c	 10560  /*
; ..\component\CanIf\Implementation\CanIf.c	 10561  \CM CM_CANIF_1 A error directive verifies that the context data size is bigger than the write position.
; ..\component\CanIf\Implementation\CanIf.c	 10562  */
; ..\component\CanIf\Implementation\CanIf.c	 10563  
; ..\component\CanIf\Implementation\CanIf.c	 10564  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	 10565   *  COVERAGE JUSTIFICATIONS
; ..\component\CanIf\Implementation\CanIf.c	 10566   *********************************************************************************************************************/
; ..\component\CanIf\Implementation\CanIf.c	 10567   
; ..\component\CanIf\Implementation\CanIf.c	 10568  /* START_COVERAGE_JUSTIFICATION
; ..\component\CanIf\Implementation\CanIf.c	 10569  
; ..\component\CanIf\Implementation\CanIf.c	 10570  \ID COV_CANIF_GENDATA_FAILURE
; ..\component\CanIf\Implementation\CanIf.c	 10571    \ACCEPT XF
; ..\component\CanIf\Implementation\CanIf.c	 10572    \ACCEPT TX
; ..\component\CanIf\Implementation\CanIf.c	 10573    \ACCEPT X
; ..\component\CanIf\Implementation\CanIf.c	 10574    \ACCEPT XF xf xf
; ..\component\CanIf\Implementation\CanIf.c	 10575    \ACCEPT Tx tx tx
; ..\component\CanIf\Implementation\CanIf.c	 10576    \ACCEPT TF tf tf tf xf
; ..\component\CanIf\Implementation\CanIf.c	 10577    \ACCEPT TF xf xf tf xf
; ..\component\CanIf\Implementation\CanIf.c	 10578    \REASON The condition checks for generated data failures, that cannot be simulated. The code is verified by code inspection.
; ..\component\CanIf\Implementation\CanIf.c	 10579  
; ..\component\CanIf\Implementation\CanIf.c	 10580  \ID COV_CANIF_NOT_APPLICABLE_FOR_EACH_CONFIG
; ..\component\CanIf\Implementation\CanIf.c	 10581    \ACCEPT X
; ..\component\CanIf\Implementation\CanIf.c	 10582    \ACCEPT TX
; ..\component\CanIf\Implementation\CanIf.c	 10583    \ACCEPT XF
; ..\component\CanIf\Implementation\CanIf.c	 10584    \ACCEPT TX tx xx
; ..\component\CanIf\Implementation\CanIf.c	 10585    \ACCEPT XF xf xx xx
; ..\component\CanIf\Implementation\CanIf.c	 10586    \ACCEPT TF tx tx tf
; ..\component\CanIf\Implementation\CanIf.c	 10587    \ACCEPT TF tx tf tf
; ..\component\CanIf\Implementation\CanIf.c	 10588    \ACCEPT TF tf tx tf
; ..\component\CanIf\Implementation\CanIf.c	 10589    \REASON It is not possible to vary the several parameter within one configuration. It will be secured by inspection that both decisions are covered,
; ..\component\CanIf\Implementation\CanIf.c	 10590            for minimum one time, over all configurations.
; ..\component\CanIf\Implementation\CanIf.c	 10591  
; ..\component\CanIf\Implementation\CanIf.c	 10592  \ID COV_CANIF_UNSUPPORTED
; ..\component\CanIf\Implementation\CanIf.c	 10593    \ACCEPT XF
; ..\component\CanIf\Implementation\CanIf.c	 10594    \ACCEPT X
; ..\component\CanIf\Implementation\CanIf.c	 10595    \REASON The feature is not possible in conjunction with SafeBSW. A MSSV plug-in enforces this configuration.
; ..\component\CanIf\Implementation\CanIf.c	 10596  
; ..\component\CanIf\Implementation\CanIf.c	 10597  \ID COV_CANIF_FEATURE_DISCONTINUED
; ..\component\CanIf\Implementation\CanIf.c	 10598    \ACCEPT XF
; ..\component\CanIf\Implementation\CanIf.c	 10599    \REASON Feature is not still supported, with this define check it is ensured that is not enabled by accident, for example with old generator.
; ..\component\CanIf\Implementation\CanIf.c	 10600  
; ..\component\CanIf\Implementation\CanIf.c	 10601  \ID COV_CANIF_FILTER_RULE
; ..\component\CanIf\Implementation\CanIf.c	 10602    \ACCEPT XF
; ..\component\CanIf\Implementation\CanIf.c	 10603    \ACCEPT TX
; ..\component\CanIf\Implementation\CanIf.c	 10604    \REASON Define is not a preprocessor instruction, its used for filtering the component and must not still exist during compile time. Usage in case of SafeBSW-project is prohibited by an error-directive.
; ..\component\CanIf\Implementation\CanIf.c	 10605    
; ..\component\CanIf\Implementation\CanIf.c	 10606  \ID COV_CANIF_PLATFORM_DEPENDENCY
; ..\component\CanIf\Implementation\CanIf.c	 10607    \ACCEPT TX
; ..\component\CanIf\Implementation\CanIf.c	 10608    \REASON Only 32 bit and 64 bit platforms are supported. A MSSV plug-in enforces this configuration. 
; ..\component\CanIf\Implementation\CanIf.c	 10609  
; ..\component\CanIf\Implementation\CanIf.c	 10610  \ID COV_CANIF_ONE_CHANNEL_OPTIMIZATION_UNSUPPORTED
; ..\component\CanIf\Implementation\CanIf.c	 10611    \ACCEPT TX
; ..\component\CanIf\Implementation\CanIf.c	 10612    \ACCEPT XF
; ..\component\CanIf\Implementation\CanIf.c	 10613    \ACCEPT XF xf tf
; ..\component\CanIf\Implementation\CanIf.c	 10614    \ACCEPT XF tf tf
; ..\component\CanIf\Implementation\CanIf.c	 10615    \ACCEPT XF xf xf
; ..\component\CanIf\Implementation\CanIf.c	 10616    \ACCEPT XF xf tf tf
; ..\component\CanIf\Implementation\CanIf.c	 10617    \REASON The feature is not possible in conjunction with SafeBSW. A MSSV plug-in enforces this configuration.
; ..\component\CanIf\Implementation\CanIf.c	 10618  
; ..\component\CanIf\Implementation\CanIf.c	 10619  \ID COV_CANIF_NO_RANGE_SEARCH
; ..\component\CanIf\Implementation\CanIf.c	 10620    \ACCEPT X
; ..\component\CanIf\Implementation\CanIf.c	 10621    \ACCEPT XF
; ..\component\CanIf\Implementation\CanIf.c	 10622    \REASON Never called/true for configurations without defined ranges. It will be secured by inspection that both decisions are covered,\ 
; ..\component\CanIf\Implementation\CanIf.c	 10623            for minimum one time, over all configurations.
; ..\component\CanIf\Implementation\CanIf.c	 10624    
; ..\component\CanIf\Implementation\CanIf.c	 10625  \ID COV_CANIF_NO_TX_BUFFER
; ..\component\CanIf\Implementation\CanIf.c	 10626    \ACCEPT TX
; ..\component\CanIf\Implementation\CanIf.c	 10627    \ACCEPT XF
; ..\component\CanIf\Implementation\CanIf.c	 10628    \REASON Always true/false if no Tx buffer is configured. It will be secured by inspection that both decisions are covered,
; ..\component\CanIf\Implementation\CanIf.c	 10629            for minimum one time, over all configurations
; ..\component\CanIf\Implementation\CanIf.c	 10630  
; ..\component\CanIf\Implementation\CanIf.c	 10631  \ID COV_CANIF_FULLCAN
; ..\component\CanIf\Implementation\CanIf.c	 10632    \ACCEPT XF 
; ..\component\CanIf\Implementation\CanIf.c	 10633    \ACCEPT TX 
; ..\component\CanIf\Implementation\CanIf.c	 10634    \ACCEPT X 
; ..\component\CanIf\Implementation\CanIf.c	 10635    \REASON Always true/false if no/only FullCAN is configured. It will be secured by inspection that both decisions are covered,
; ..\component\CanIf\Implementation\CanIf.c	 10636            for minimum one time, over all configurations
; ..\component\CanIf\Implementation\CanIf.c	 10637  
; ..\component\CanIf\Implementation\CanIf.c	 10638  \ID COV_CANIF_COMPATIBILITY
; ..\component\CanIf\Implementation\CanIf.c	 10639    \ACCEPT TX
; ..\component\CanIf\Implementation\CanIf.c	 10640    \REASON The condition checks whether a switch is defined and conditionally assigns a default value. This is used to ensure compatibility to future generator changes.
; ..\component\CanIf\Implementation\CanIf.c	 10641            The correctness is ensured by code review.
; ..\component\CanIf\Implementation\CanIf.c	 10642  
; ..\component\CanIf\Implementation\CanIf.c	 10643  \ID COV_CANIF_MIXED_ID
; ..\component\CanIf\Implementation\CanIf.c	 10644    \ACCEPT TX
; ..\component\CanIf\Implementation\CanIf.c	 10645    \REASON The feature is platform specific.
; ..\component\CanIf\Implementation\CanIf.c	 10646  
; ..\component\CanIf\Implementation\CanIf.c	 10647  \ID COV_CANIF_REDEFINITION_PROTECTION
; ..\component\CanIf\Implementation\CanIf.c	 10648    \ACCEPT TX
; ..\component\CanIf\Implementation\CanIf.c	 10649    \ACCEPT XF
; ..\component\CanIf\Implementation\CanIf.c	 10650    \REASON For special requirements this defines may be defined from outside.
; ..\component\CanIf\Implementation\CanIf.c	 10651  
; ..\component\CanIf\Implementation\CanIf.c	 10652  \ID COV_CANIF_ONLY_VECTOR_VSTDLIB_USED
; ..\component\CanIf\Implementation\CanIf.c	 10653    \ACCEPT TX
; ..\component\CanIf\Implementation\CanIf.c	 10654    \REASON This define is always set if VECTOR Vstdlib is used.
; ..\component\CanIf\Implementation\CanIf.c	 10655  
; ..\component\CanIf\Implementation\CanIf.c	 10656  END_COVERAGE_JUSTIFICATION */ 
; ..\component\CanIf\Implementation\CanIf.c	 10657  
; ..\component\CanIf\Implementation\CanIf.c	 10658  /**********************************************************************************************************************
; ..\component\CanIf\Implementation\CanIf.c	 10659   *  END OF FILE: CanIf.c
; ..\component\CanIf\Implementation\CanIf.c	 10660   *********************************************************************************************************************/

	; Module end
