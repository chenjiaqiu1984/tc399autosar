	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 21092262 SN 73118428"
	.compiler_invocation	"ctc --dep-file=mcal\\McalLib\\ssc\\src\\.McalLib.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc39xb -D__CPU_TC39XB__ --core=tc1.6.2 --iso=99 -DBRS_COMP_TASKING -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\testdemo\\taskingdemo\\demo001 -ID:\\Zonal\\demo011\\tasking\\component\\PduR -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\PduR\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\SomeIpXf\\Generator -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Can\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Can\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanIf\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\CanSM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Com -ID:\\Zonal\\demo011\\tasking\\component\\Com\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Com\\DaVinciCfg_VASE -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Com\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Com\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\ComM -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\ComM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Det -ID:\\Zonal\\demo011\\tasking\\component\\Det\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Det\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Det\\Implementation -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\demo011\\tasking\\appl -ID:\\Zonal\\demo011\\tasking\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\Components -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\ContractPhase -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\inc -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\appl\\Include -ID:\\Zonal\\demo011\\tasking\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\appl\\Source\\swc_test -ID:\\Zonal\\demo011\\tasking\\component -ID:\\Zonal\\demo011\\tasking\\component\\_Common -ID:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os\\TC39xQ -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Os\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug -ID:\\Zonal\\demo011\\tasking\\Debug\\appl -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\Debug\\component -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\src -g2 --make-target=mcal\\McalLib\\ssc\\src\\McalLib.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o mcal\\McalLib\\ssc\\src\\McalLib.src ..\\mcal\\McalLib\\ssc\\src\\McalLib.c"
	.compiler_name		"ctc"
	;source	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c'

	
$TC162
	
	.sdecl	'.text.McalLib.Mcal_GetCpuWdgPassword',code,cluster('Mcal_GetCpuWdgPassword')
	.sect	'.text.McalLib.Mcal_GetCpuWdgPassword'
	.align	2
	
	.global	Mcal_GetCpuWdgPassword

; ..\mcal\McalLib\ssc\src\McalLib.c	     1  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	     2  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	     3  ** Copyright (C) Infineon Technologies (2023)                                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	     4  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	     5  ** All rights reserved.                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	     6  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	     7  ** This document contains proprietary information belonging to Infineon       **
; ..\mcal\McalLib\ssc\src\McalLib.c	     8  ** Technologies. Passing on and copying of this document, and communication   **
; ..\mcal\McalLib\ssc\src\McalLib.c	     9  ** of its contents is not permitted without prior written authorization.      **
; ..\mcal\McalLib\ssc\src\McalLib.c	    10  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	    11  ********************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	    12  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	    13  **  FILENAME     : McalLib.c                                                  **
; ..\mcal\McalLib\ssc\src\McalLib.c	    14  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	    15  **  VERSION      : 41.0.0                                                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	    16  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	    17  **  DATE         : 2023-05-16                                                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	    18  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	    19  **  VARIANT      : Variant PC                                                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	    20  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	    21  **  PLATFORM     : Infineon AURIX2G                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	    22  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	    23  **  AUTHOR       : DL-AUTOSAR-Engineering                                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	    24  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	    25  **  VENDOR       : Infineon Technologies                                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	    26  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	    27  **  DESCRIPTION  : MCAL Library source file                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	    28  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	    29  **  SPECIFICATION(S) : NA                                                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	    30  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	    31  **  MAY BE CHANGED BY USER : no                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	    32  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	    33  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	    34  /* [cover parentID={4C08C419-6659-4ae1-A70F-A5C8FC62A22B}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	    35  /* [cover parentID={EBC12FA6-C2FB-416e-8518-7337947C6D63}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	    36  /* [cover parentID={ACBBD55B-CDB7-4936-BF3A-D2A247B8A6DF}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	    37  /* [cover parentID={F5CF0050-FA3F-4e14-8C3E-FD0E8CB08831}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	    38  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	    39  **                      Includes                                              **
; ..\mcal\McalLib\ssc\src\McalLib.c	    40  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	    41  #include "IfxScu_reg.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	    42  #include "IfxScu_bf.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	    43  #include "IfxStm_reg.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	    44  #include "IfxCpu_reg.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	    45  #include "McalLib.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	    46  #include "SchM_McalLib.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	    47  /* Include Safety Error header definition */
; ..\mcal\McalLib\ssc\src\McalLib.c	    48  #if(MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	    49  #include "Mcal_SafetyError.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	    50  #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	    51  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	    52  **                      Imported Compiler Switch Check                        **
; ..\mcal\McalLib\ssc\src\McalLib.c	    53  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	    54  
; ..\mcal\McalLib\ssc\src\McalLib.c	    55  
; ..\mcal\McalLib\ssc\src\McalLib.c	    56  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	    57  **                      Private Macro Definitions                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	    58  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	    59  #define MCAL_PASSEQSHIFT                           (0xBU)  /* 11U */
; ..\mcal\McalLib\ssc\src\McalLib.c	    60  #define MCAL_PASSWORD_SHIFT                        (0xCU)  /* 12U */
; ..\mcal\McalLib\ssc\src\McalLib.c	    61  #define MCAL_LFSR_SHIFT                            (0xDU)  /* 13U */
; ..\mcal\McalLib\ssc\src\McalLib.c	    62  #define MCAL_INVALID_ARGUMENT                      (0x0U)
; ..\mcal\McalLib\ssc\src\McalLib.c	    63  
; ..\mcal\McalLib\ssc\src\McalLib.c	    64  /* Macros for Mcal_GetGlobalDsprAddress/Mcal_GetLocalDsprAddress */
; ..\mcal\McalLib\ssc\src\McalLib.c	    65  #define MCAL_VALID_DSPR_MSB                        (0xDU)
; ..\mcal\McalLib\ssc\src\McalLib.c	    66  /* Macros for Mcal_GetGlobalPsprAddress/Mcal_GetLocalPsprAddress */
; ..\mcal\McalLib\ssc\src\McalLib.c	    67  #define MCAL_VALID_PSPR_MSB                        (0xCU)
; ..\mcal\McalLib\ssc\src\McalLib.c	    68  #define MCAL_PSPR_ADDRESS_MASK                     (0xF0100000U)
; ..\mcal\McalLib\ssc\src\McalLib.c	    69  #define MCAL_PSPR_ADDRESS_MASK_N                   (~MCAL_PSPR_ADDRESS_MASK)
; ..\mcal\McalLib\ssc\src\McalLib.c	    70  #define MCAL_INVALID_CPU_ID_5                      (0x5U)
; ..\mcal\McalLib\ssc\src\McalLib.c	    71  #define MCAL_SHIFT_UPPER_NIBBLE                    (0x1CU)/* Bit position 28 */
; ..\mcal\McalLib\ssc\src\McalLib.c	    72  
; ..\mcal\McalLib\ssc\src\McalLib.c	    73  #if (MCAL_NO_OF_CORES > 5U )
; ..\mcal\McalLib\ssc\src\McalLib.c	    74  #define MCAL_INVALID_PSPR_ADDR                     (0x0U)
; ..\mcal\McalLib\ssc\src\McalLib.c	    75  #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	    76  
; ..\mcal\McalLib\ssc\src\McalLib.c	    77  #if (MCAL_NO_OF_CORES > 5U )
; ..\mcal\McalLib\ssc\src\McalLib.c	    78  #define MCAL_INVALID_DSPR_ADDR                     (0x0U)
; ..\mcal\McalLib\ssc\src\McalLib.c	    79  #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	    80  
; ..\mcal\McalLib\ssc\src\McalLib.c	    81  /* Macros for ENDINIT protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	    82  #define MCAL_ENDINIT_WDT_PWD_INV                   (0x3FU)
; ..\mcal\McalLib\ssc\src\McalLib.c	    83  #define MCAL_ENDINIT_WDT_PWD_MASK                  (0x0000FFFCU)
; ..\mcal\McalLib\ssc\src\McalLib.c	    84  
; ..\mcal\McalLib\ssc\src\McalLib.c	    85  /* Macros for Peripheral ENDINIT protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	    86  #define MCAL_PER_ENDINIT_PROTECTED                 (0x1U)
; ..\mcal\McalLib\ssc\src\McalLib.c	    87  #define MCAL_PER_ENDINIT_WDT_TIMER_REL             (0xFFFC0000U)
; ..\mcal\McalLib\ssc\src\McalLib.c	    88  
; ..\mcal\McalLib\ssc\src\McalLib.c	    89  /* Macros for Safety ENDINIT protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	    90  #define MCAL_SAFETY_ENDINIT_PROTECTED              (0x1U)
; ..\mcal\McalLib\ssc\src\McalLib.c	    91  #define MCAL_SAFETY_ENDINIT_WDT_TIMER_REL          (0xFFFC0000U)
; ..\mcal\McalLib\ssc\src\McalLib.c	    92  #define MCAL_DEFAULT_MASK_VALUE                    (uint32)(0xFFFFFFFFU)
; ..\mcal\McalLib\ssc\src\McalLib.c	    93  #define MCAL_SPINLOCK_DEFAULT_TIMEOUT              (uint32)(0x2710U)
; ..\mcal\McalLib\ssc\src\McalLib.c	    94  
; ..\mcal\McalLib\ssc\src\McalLib.c	    95  /* Macros for CPUWDT ENDINIT protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	    96  #define MCAL_ENDINIT_RELOAD_MASK                   (0xFFFF0000U)
; ..\mcal\McalLib\ssc\src\McalLib.c	    97  #define MCAL_CPUWDTSR_TIMER_MASK                   (0xFFFF0000U)
; ..\mcal\McalLib\ssc\src\McalLib.c	    98  #define MCAL_ENDINIT_TIMEOUT_VALUE                 (0x0000FFFCU)
; ..\mcal\McalLib\ssc\src\McalLib.c	    99  #define MCAL_CPUWDT_TIMER_VALUE_MAX                (0xFFFFU)
; ..\mcal\McalLib\ssc\src\McalLib.c	   100  
; ..\mcal\McalLib\ssc\src\McalLib.c	   101  #define MCAL_CPUWDTCON0_UNLOCK                     (0x1U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   102  #define MCAL_CPUWDTCON0_LOCK                       (0x3U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   103  #define MCAL_CPUWDTCON0_DISABLE_ENDINIT            (0x2U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   104  #define MCAL_CPUWDTCON0_ENABLE_ENDINIT             (0x3U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   105  
; ..\mcal\McalLib\ssc\src\McalLib.c	   106  #define MCAL_AUTO_PWD_SEQ_ENABLED                  (0x1U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   107  #define MCAL_TIMER_CHECK_ENABLED                   (0x1U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   108  
; ..\mcal\McalLib\ssc\src\McalLib.c	   109  /* Macros for STM frequency calculation */
; ..\mcal\McalLib\ssc\src\McalLib.c	   110  #define MCAL_STM_TIMER_RESOL_ZERO                  (0x0U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   111  #define MCAL_STMCLK_DISABLED                       (0x0U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   112  #define MCAL_PLL0_CLK_SRC0_FREQ                    (0x1U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   113  #define MCAL_OSC0_CLK_PLL0_FREQ                    (0x1U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   114  #define MCAL_SYS_CLK_PLL0_FREQ                     (0x2U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   115  #define MCAL_RESOLUTION_U                          (0x3E8U) /* 1000U  */
; ..\mcal\McalLib\ssc\src\McalLib.c	   116  #define MCAL_OSCVAL_MHz                            (0x10U)  /* 16 Mhz */
; ..\mcal\McalLib\ssc\src\McalLib.c	   117  #define MCAL_OSCFREQ_MHz                           (0x1U)   /* 1 Mhz  */
; ..\mcal\McalLib\ssc\src\McalLib.c	   118  
; ..\mcal\McalLib\ssc\src\McalLib.c	   119  /* Macros for Spinlock address*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   120  #define SPINLOCKFREE                               (0x0U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   121  /*SpinLock is Available*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   122  #define SPINLOCKBUSY                               (0x1U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   123  /*SpinLock is Not Available*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   124  #define MCAL_TIMEOUT                               (0x3E8U) /* 1000U */
; ..\mcal\McalLib\ssc\src\McalLib.c	   125  
; ..\mcal\McalLib\ssc\src\McalLib.c	   126  #define MCAL_UPDATE_NEWPASSWORD                    (0x1U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   127  #define MCAL_NOUPDATE_PASSWORD                     (0x0U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   128  #define MCAL_DUMMY_PASSWORD                        (0x0U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   129  #define MCAL_SETENDINITPROTECTION                  (0x1U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   130  #define MCAL_RESETENDINITPROTECTION                (0x0U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   131  #define MCAL_32BIT_ACCESS                          (0x0U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   132  #define MCAL_16BIT_ACCESS                          (0x1U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   133  #define MCAL_16BIT_MAX_ADDR                        (0xFFFFU)
; ..\mcal\McalLib\ssc\src\McalLib.c	   134  
; ..\mcal\McalLib\ssc\src\McalLib.c	   135  /* Get the current STM Tick */
; ..\mcal\McalLib\ssc\src\McalLib.c	   136  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro defined for easy
; ..\mcal\McalLib\ssc\src\McalLib.c	   137   * readability in code. No side effects foreseen by violating this MISRA rule.
; ..\mcal\McalLib\ssc\src\McalLib.c	   138   */
; ..\mcal\McalLib\ssc\src\McalLib.c	   139  #define MCAL_GET_STM_TICK()                        (MODULE_STM0.TIM0.U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   140  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   141  **                      Imported Compiler Switch Checks                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	   142  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   143  /* [cover parentID={491F788E-197E-4a54-B1C8-2902F835C275}]McalLib version
; ..\mcal\McalLib\ssc\src\McalLib.c	   144     check[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   145  #ifndef MCALLIB_SW_MAJOR_VERSION
; ..\mcal\McalLib\ssc\src\McalLib.c	   146   #error "MCALLIB_SW_MAJOR_VERSION is not defined. "
; ..\mcal\McalLib\ssc\src\McalLib.c	   147  #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   148  
; ..\mcal\McalLib\ssc\src\McalLib.c	   149  #ifndef MCALLIB_SW_MINOR_VERSION
; ..\mcal\McalLib\ssc\src\McalLib.c	   150   #error "MCALLIB_SW_MINOR_VERSION is not defined. "
; ..\mcal\McalLib\ssc\src\McalLib.c	   151  #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   152  
; ..\mcal\McalLib\ssc\src\McalLib.c	   153  #ifndef MCALLIB_SW_PATCH_VERSION
; ..\mcal\McalLib\ssc\src\McalLib.c	   154   #error "MCALLIB_SW_PATCH_VERSION is not defined. "
; ..\mcal\McalLib\ssc\src\McalLib.c	   155  #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   156  
; ..\mcal\McalLib\ssc\src\McalLib.c	   157  /* Check for Correct inclusion of headers */
; ..\mcal\McalLib\ssc\src\McalLib.c	   158  #if ( MCALLIB_SW_MAJOR_VERSION != 20U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   159   #error "MCALLIB_SW_MAJOR_VERSION does not match. "
; ..\mcal\McalLib\ssc\src\McalLib.c	   160  #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   161  
; ..\mcal\McalLib\ssc\src\McalLib.c	   162  #if ( MCALLIB_SW_MINOR_VERSION != 25U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   163   #error "MCALLIB_SW_MINOR_VERSION does not match. "
; ..\mcal\McalLib\ssc\src\McalLib.c	   164  #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   165  
; ..\mcal\McalLib\ssc\src\McalLib.c	   166  #if (MCALLIB_SW_PATCH_VERSION != 0U)
; ..\mcal\McalLib\ssc\src\McalLib.c	   167   #error "MCALLIB_SW_PATCH_VERSION does not match."
; ..\mcal\McalLib\ssc\src\McalLib.c	   168  #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   169  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   170  **                      Private Variable Definitions                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	   171  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   172  /* [cover parentID={EA0715EE-3E3C-4aac-A42E-4B5CFC96CEED}]Memory Mapping
; ..\mcal\McalLib\ssc\src\McalLib.c	   173     [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   174  /* [cover parentID={566ED99C-0D96-46ac-97BF-E97B04E2C700}]Memory mapping for
; ..\mcal\McalLib\ssc\src\McalLib.c	   175     callout code is not applicable for McalLib[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   176  /* [cover parentID={E4047F9A-8865-4b2c-9D3C-385479854EAD}]Memory mapping for
; ..\mcal\McalLib\ssc\src\McalLib.c	   177      configuration data is not applicable for McalLib[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   178  /* [cover parentID={72DABBEB-F27B-4677-B6B4-B53F634341BA}]Memory mapping for
; ..\mcal\McalLib\ssc\src\McalLib.c	   179      variables[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   180  /* [cover parentID={D11431C7-DF20-470b-8994-6A31F882BA7C}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   181  #define MCALLIB_START_SEC_VAR_CLEARED_ASIL_B_GLOBAL_32
; ..\mcal\McalLib\ssc\src\McalLib.c	   182  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\mcal\McalLib\ssc\src\McalLib.c	   183     without safeguard. It complies to Autosar guidelines. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   184  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\mcal\McalLib\ssc\src\McalLib.c	   185     guideline. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   186  #include "McalLib_MemMap.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	   187  
; ..\mcal\McalLib\ssc\src\McalLib.c	   188  static uint32 Mcal_StmTimerResolution;
; ..\mcal\McalLib\ssc\src\McalLib.c	   189  
; ..\mcal\McalLib\ssc\src\McalLib.c	   190  static volatile uint32 Mcal_LockAddressSiecon0;
; ..\mcal\McalLib\ssc\src\McalLib.c	   191  
; ..\mcal\McalLib\ssc\src\McalLib.c	   192  static volatile uint32 Mcal_LockAddressEicon0;
; ..\mcal\McalLib\ssc\src\McalLib.c	   193  
; ..\mcal\McalLib\ssc\src\McalLib.c	   194  /* [cover parentID={72DABBEB-F27B-4677-B6B4-B53F634341BA}]Memory mapping for
; ..\mcal\McalLib\ssc\src\McalLib.c	   195      variables[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   196  #define MCALLIB_STOP_SEC_VAR_CLEARED_ASIL_B_GLOBAL_32
; ..\mcal\McalLib\ssc\src\McalLib.c	   197  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\mcal\McalLib\ssc\src\McalLib.c	   198     without safeguard. It complies to Autosar guidelines. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   199  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\mcal\McalLib\ssc\src\McalLib.c	   200     guideline. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   201  #include "McalLib_MemMap.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	   202  /* [cover parentID={1A65EADD-AFD0-4845-B2D2-8257E086DD67}]No user mode macro
; ..\mcal\McalLib\ssc\src\McalLib.c	   203  used [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   204  
; ..\mcal\McalLib\ssc\src\McalLib.c	   205  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   206  **                      Private Constant Definitions                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	   207  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   208  /* [cover parentID={5713A17A-3FA1-427f-A0B6-89125A17689A}]No user mode macro
; ..\mcal\McalLib\ssc\src\McalLib.c	   209  used [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   210  #define MCALLIB_START_SEC_CONST_ASIL_B_GLOBAL_8
; ..\mcal\McalLib\ssc\src\McalLib.c	   211  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\mcal\McalLib\ssc\src\McalLib.c	   212     without safeguard. It complies to Autosar guidelines. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   213  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\mcal\McalLib\ssc\src\McalLib.c	   214     guideline. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   215  #include "McalLib_MemMap.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	   216  
; ..\mcal\McalLib\ssc\src\McalLib.c	   217  static const uint8 Mcal_kCoreXMemSegment[MCAL_COREID_MAX_VALUE + 0x1U] =
; ..\mcal\McalLib\ssc\src\McalLib.c	   218  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   219    MCAL_CORE0_MEM_SEGMENT, /* Index 0 */
; ..\mcal\McalLib\ssc\src\McalLib.c	   220    #if ( MCAL_NO_OF_CORES > 1U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   221    MCAL_CORE1_MEM_SEGMENT, /* Index 1 */
; ..\mcal\McalLib\ssc\src\McalLib.c	   222    #if ( MCAL_NO_OF_CORES > 2U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   223    MCAL_CORE2_MEM_SEGMENT, /* Index 2 */
; ..\mcal\McalLib\ssc\src\McalLib.c	   224    #if ( MCAL_NO_OF_CORES > 3U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   225    MCAL_CORE3_MEM_SEGMENT, /* Index 3 */
; ..\mcal\McalLib\ssc\src\McalLib.c	   226    #if ( MCAL_NO_OF_CORES > 4U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   227    MCAL_CORE4_MEM_SEGMENT, /* Index 4 */
; ..\mcal\McalLib\ssc\src\McalLib.c	   228    #if ( MCAL_NO_OF_CORES > 5U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   229    MCAL_MEM_SEGMENT2_MSB,  /* Index 5 */
; ..\mcal\McalLib\ssc\src\McalLib.c	   230    MCAL_CORE5_MEM_SEGMENT  /* Index 6 */
; ..\mcal\McalLib\ssc\src\McalLib.c	   231    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   232    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   233    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   234    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   235    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   236  };
; ..\mcal\McalLib\ssc\src\McalLib.c	   237  
; ..\mcal\McalLib\ssc\src\McalLib.c	   238  #define MCALLIB_STOP_SEC_CONST_ASIL_B_GLOBAL_8
; ..\mcal\McalLib\ssc\src\McalLib.c	   239  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\mcal\McalLib\ssc\src\McalLib.c	   240     without safeguard. It complies to Autosar guidelines. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   241  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\mcal\McalLib\ssc\src\McalLib.c	   242     guideline. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   243  #include "McalLib_MemMap.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	   244  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond
; ..\mcal\McalLib\ssc\src\McalLib.c	   245    32 characters in generated code due to Autosar Naming constraints.*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   246  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond
; ..\mcal\McalLib\ssc\src\McalLib.c	   247    32 characters in generated code due to Autosar Naming constraints.*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   248  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond
; ..\mcal\McalLib\ssc\src\McalLib.c	   249    32 characters in generated code due to Autosar Naming constraints.*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   250  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond
; ..\mcal\McalLib\ssc\src\McalLib.c	   251    32 characters in generated code due to Autosar Naming constraints.*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   252  #define MCALLIB_START_SEC_CONST_ASIL_B_GLOBAL_32
; ..\mcal\McalLib\ssc\src\McalLib.c	   253  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\mcal\McalLib\ssc\src\McalLib.c	   254     without safeguard. It complies to Autosar guidelines. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   255  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\mcal\McalLib\ssc\src\McalLib.c	   256     guideline. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   257  #include "McalLib_MemMap.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	   258  
; ..\mcal\McalLib\ssc\src\McalLib.c	   259  static const uint32 Mcal_kDsprEndAddress[MCAL_COREID_MAX_VALUE + 0x1U] =
; ..\mcal\McalLib\ssc\src\McalLib.c	   260  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   261    MCAL_DSPR0_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   262    #if ( MCAL_NO_OF_CORES > 1U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   263    MCAL_DSPR1_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   264    #if ( MCAL_NO_OF_CORES > 2U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   265    MCAL_DSPR2_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   266    #if ( MCAL_NO_OF_CORES > 3U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   267    MCAL_DSPR3_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   268    #if ( MCAL_NO_OF_CORES > 4U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   269    MCAL_DSPR4_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   270    #if ( MCAL_NO_OF_CORES > 5U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   271    MCAL_INVALID_DSPR_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   272    MCAL_DSPR5_END_ADDR
; ..\mcal\McalLib\ssc\src\McalLib.c	   273    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   274    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   275    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   276    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   277    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   278  };
; ..\mcal\McalLib\ssc\src\McalLib.c	   279  
; ..\mcal\McalLib\ssc\src\McalLib.c	   280  static const uint32 Mcal_kPsprLocalEndAddress[MCAL_COREID_MAX_VALUE + 0x1U] =
; ..\mcal\McalLib\ssc\src\McalLib.c	   281  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   282    MCAL_LOCAL_PSPR0_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   283    #if ( MCAL_NO_OF_CORES > 1U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   284    MCAL_LOCAL_PSPR1_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   285    #if ( MCAL_NO_OF_CORES > 2U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   286    MCAL_LOCAL_PSPR2_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   287    #if ( MCAL_NO_OF_CORES > 3U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   288    MCAL_LOCAL_PSPR3_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   289    #if ( MCAL_NO_OF_CORES > 4U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   290    MCAL_LOCAL_PSPR4_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   291    #if ( MCAL_NO_OF_CORES > 5U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   292    MCAL_INVALID_PSPR_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   293    MCAL_LOCAL_PSPR5_END_ADDR
; ..\mcal\McalLib\ssc\src\McalLib.c	   294    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   295    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   296    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   297    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   298    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   299  };
; ..\mcal\McalLib\ssc\src\McalLib.c	   300  
; ..\mcal\McalLib\ssc\src\McalLib.c	   301  static const uint32 Mcal_kPsprGlobalEndAddress[MCAL_COREID_MAX_VALUE + 0x1U] =
; ..\mcal\McalLib\ssc\src\McalLib.c	   302  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   303    MCAL_PSPR0_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   304    #if ( MCAL_NO_OF_CORES > 1U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   305    MCAL_PSPR1_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   306    #if ( MCAL_NO_OF_CORES > 2U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   307    MCAL_PSPR2_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   308    #if ( MCAL_NO_OF_CORES > 3U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   309    MCAL_PSPR3_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   310    #if ( MCAL_NO_OF_CORES > 4U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   311    MCAL_PSPR4_END_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   312    #if ( MCAL_NO_OF_CORES > 5U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   313    MCAL_INVALID_PSPR_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   314    MCAL_PSPR5_END_ADDR
; ..\mcal\McalLib\ssc\src\McalLib.c	   315    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   316    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   317    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   318    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   319    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   320  };
; ..\mcal\McalLib\ssc\src\McalLib.c	   321  
; ..\mcal\McalLib\ssc\src\McalLib.c	   322  static const uint32 Mcal_kPsprGlobalBaseAddress[MCAL_COREID_MAX_VALUE + 0x1U] =
; ..\mcal\McalLib\ssc\src\McalLib.c	   323  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   324    MCAL_PSPR0_BASE_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   325    #if ( MCAL_NO_OF_CORES > 1U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   326    MCAL_PSPR1_BASE_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   327    #if ( MCAL_NO_OF_CORES > 2U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   328    MCAL_PSPR2_BASE_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   329    #if ( MCAL_NO_OF_CORES > 3U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   330    MCAL_PSPR3_BASE_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   331    #if ( MCAL_NO_OF_CORES > 4U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   332    MCAL_PSPR4_BASE_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   333    #if ( MCAL_NO_OF_CORES > 5U )
; ..\mcal\McalLib\ssc\src\McalLib.c	   334    MCAL_INVALID_PSPR_ADDR,
; ..\mcal\McalLib\ssc\src\McalLib.c	   335    MCAL_PSPR5_BASE_ADDR
; ..\mcal\McalLib\ssc\src\McalLib.c	   336    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   337    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   338    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   339    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   340    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   341  };
; ..\mcal\McalLib\ssc\src\McalLib.c	   342  
; ..\mcal\McalLib\ssc\src\McalLib.c	   343  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond
; ..\mcal\McalLib\ssc\src\McalLib.c	   344    32 characters in generated code due to Autosar Naming constraints.*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   345  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond
; ..\mcal\McalLib\ssc\src\McalLib.c	   346    32 characters in generated code due to Autosar Naming constraints.*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   347  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond
; ..\mcal\McalLib\ssc\src\McalLib.c	   348    32 characters in generated code due to Autosar Naming constraints.*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   349  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond
; ..\mcal\McalLib\ssc\src\McalLib.c	   350    32 characters in generated code due to Autosar Naming constraints.*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   351  #define MCALLIB_STOP_SEC_CONST_ASIL_B_GLOBAL_32
; ..\mcal\McalLib\ssc\src\McalLib.c	   352  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\mcal\McalLib\ssc\src\McalLib.c	   353     without safeguard. It complies to Autosar guidelines. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   354  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\mcal\McalLib\ssc\src\McalLib.c	   355     guideline. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   356  #include "McalLib_MemMap.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	   357  /* [cover parentID={1A65EADD-AFD0-4845-B2D2-8257E086DD67}]No user mode macro
; ..\mcal\McalLib\ssc\src\McalLib.c	   358    used [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   359  
; ..\mcal\McalLib\ssc\src\McalLib.c	   360  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   361  **                      Private Type Definitions                              **
; ..\mcal\McalLib\ssc\src\McalLib.c	   362  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   363  /* Internal Structure definition for McalLib driver
; ..\mcal\McalLib\ssc\src\McalLib.c	   364   * McalLib_CpuEndInitRetType is used to store the timer reload value at the
; ..\mcal\McalLib\ssc\src\McalLib.c	   365   * time of EndInit reset and the current password in CON0 SFR.
; ..\mcal\McalLib\ssc\src\McalLib.c	   366   */
; ..\mcal\McalLib\ssc\src\McalLib.c	   367  /*[cover parentID={D3F3A208-D26C-47a1-BDF9-5BFAF6406291}][/cover]*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   368  typedef struct
; ..\mcal\McalLib\ssc\src\McalLib.c	   369  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   370    uint32 TimerRelValAtReset; /* Holds timer reload value at reset */
; ..\mcal\McalLib\ssc\src\McalLib.c	   371    uint32 Password;           /* Decrypted Password read from SFR */
; ..\mcal\McalLib\ssc\src\McalLib.c	   372  } McalLib_CpuEndInitRetType;
; ..\mcal\McalLib\ssc\src\McalLib.c	   373  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   374  **                      Private Function Declarations                         **
; ..\mcal\McalLib\ssc\src\McalLib.c	   375  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   376  /*[cover parentID={4579FE20-92DA-4848-93DB-7AD4FD35DD50}]Memory mapping for
; ..\mcal\McalLib\ssc\src\McalLib.c	   377     code[/cover]*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   378  #define MCALLIB_START_SEC_CODE_ASIL_B_GLOBAL
; ..\mcal\McalLib\ssc\src\McalLib.c	   379  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\mcal\McalLib\ssc\src\McalLib.c	   380     without safeguard. It complies to Autosar guidelines. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   381  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\mcal\McalLib\ssc\src\McalLib.c	   382     guideline. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   383  #include "McalLib_MemMap.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	   384  
; ..\mcal\McalLib\ssc\src\McalLib.c	   385  LOCAL_INLINE uint32 Mcal_lGetCpuIndex(void);
; ..\mcal\McalLib\ssc\src\McalLib.c	   386  LOCAL_INLINE uint16 Mcal_lDecryptPw(const uint32 Value);
; ..\mcal\McalLib\ssc\src\McalLib.c	   387  LOCAL_INLINE uint32 Mcal_lDelayResetTickCalibration(const uint8 ApiId);
; ..\mcal\McalLib\ssc\src\McalLib.c	   388  LOCAL_INLINE uint32 Mcal_lCpuRelValue(const uint32 CpuIndex,
; ..\mcal\McalLib\ssc\src\McalLib.c	   389                                        const uint32 WdtCpuCon0Value);
; ..\mcal\McalLib\ssc\src\McalLib.c	   390  LOCAL_INLINE uint32 Mcal_lCpuPwSequence(const uint32 CpuIndex,
; ..\mcal\McalLib\ssc\src\McalLib.c	   391                                          const uint32 WdtCpuCon0Value);
; ..\mcal\McalLib\ssc\src\McalLib.c	   392  LOCAL_INLINE void Mcal_lWriteSafetyEndInitProtection
; ..\mcal\McalLib\ssc\src\McalLib.c	   393                                      (volatile void* const RegAddress,
; ..\mcal\McalLib\ssc\src\McalLib.c	   394                                       const uint32 DataValue,
; ..\mcal\McalLib\ssc\src\McalLib.c	   395                                       const uint32 Mask,
; ..\mcal\McalLib\ssc\src\McalLib.c	   396                                       const uint8  Accesstype,
; ..\mcal\McalLib\ssc\src\McalLib.c	   397                                       const uint8  ApiId);
; ..\mcal\McalLib\ssc\src\McalLib.c	   398  static McalLib_CpuEndInitRetType Mcal_lUpdateCpuEndInit(const uint32  NewPassword,
; ..\mcal\McalLib\ssc\src\McalLib.c	   399                                       const uint32  CoreIdIndex,
; ..\mcal\McalLib\ssc\src\McalLib.c	   400                                       const uint32  TimerRelValAtReset,
; ..\mcal\McalLib\ssc\src\McalLib.c	   401                                       const boolean UpdatePassword,
; ..\mcal\McalLib\ssc\src\McalLib.c	   402                                       const boolean SetResetProtection);
; ..\mcal\McalLib\ssc\src\McalLib.c	   403  static uint32 Mcal_lUpdatePeripheralEndInit(const uint32 NewPassword,
; ..\mcal\McalLib\ssc\src\McalLib.c	   404                                              const boolean UpdatePassword,
; ..\mcal\McalLib\ssc\src\McalLib.c	   405                                              const boolean SetResetProtection);
; ..\mcal\McalLib\ssc\src\McalLib.c	   406  static uint32 Mcal_lUpdateSafetyEndInit(const uint32 NewPassword,
; ..\mcal\McalLib\ssc\src\McalLib.c	   407                                          const boolean UpdatePassword,
; ..\mcal\McalLib\ssc\src\McalLib.c	   408                                          const boolean SetResetProtection);
; ..\mcal\McalLib\ssc\src\McalLib.c	   409  LOCAL_INLINE uint32 Mcal_lCalculateTimerReloadVal(const uint32 CoreId,
; ..\mcal\McalLib\ssc\src\McalLib.c	   410                                       const uint32 TimerRelValAtReset,
; ..\mcal\McalLib\ssc\src\McalLib.c	   411                                       const boolean SetResetProtection);
; ..\mcal\McalLib\ssc\src\McalLib.c	   412  static void Mcal_lGetSpinlock(volatile uint32 *const LockAddress,
; ..\mcal\McalLib\ssc\src\McalLib.c	   413                                const uint32 Timeout, const uint8 ApiId);
; ..\mcal\McalLib\ssc\src\McalLib.c	   414  LOCAL_INLINE void Mcal_lReleaseSpinlock(volatile uint32 * const LockAddress);
; ..\mcal\McalLib\ssc\src\McalLib.c	   415  #if (MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	   416  static void Mcal_lReportError(const uint8 ApiId, const uint8 ErrorId);
; ..\mcal\McalLib\ssc\src\McalLib.c	   417  #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   418  /*[cover parentID={4579FE20-92DA-4848-93DB-7AD4FD35DD50}]Memory mapping for
; ..\mcal\McalLib\ssc\src\McalLib.c	   419     code[/cover]*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   420  #define MCALLIB_STOP_SEC_CODE_ASIL_B_GLOBAL
; ..\mcal\McalLib\ssc\src\McalLib.c	   421  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\mcal\McalLib\ssc\src\McalLib.c	   422     without safeguard. It complies to Autosar guidelines. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   423  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\mcal\McalLib\ssc\src\McalLib.c	   424     guideline. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   425  #include "McalLib_MemMap.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	   426  
; ..\mcal\McalLib\ssc\src\McalLib.c	   427  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   428  **                      Global Constant Declarations                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	   429  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   430  
; ..\mcal\McalLib\ssc\src\McalLib.c	   431  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   432  **                      Global Variable Declarations                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	   433  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   434  
; ..\mcal\McalLib\ssc\src\McalLib.c	   435  
; ..\mcal\McalLib\ssc\src\McalLib.c	   436  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   437  **                      Global Function Definitions                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	   438  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   439  /*[cover parentID={4579FE20-92DA-4848-93DB-7AD4FD35DD50}]Memory mapping for
; ..\mcal\McalLib\ssc\src\McalLib.c	   440     code[/cover]*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   441  #define MCALLIB_START_SEC_CODE_ASIL_B_GLOBAL
; ..\mcal\McalLib\ssc\src\McalLib.c	   442  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\mcal\McalLib\ssc\src\McalLib.c	   443     without safeguard. It complies to Autosar guidelines. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   444  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\mcal\McalLib\ssc\src\McalLib.c	   445     guideline. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   446  #include "McalLib_MemMap.h"
; ..\mcal\McalLib\ssc\src\McalLib.c	   447  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   448  ** Traceability     : [cover parentID={8366FBD5-CC94-4b46-84C1-1587582733A4}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	   449  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   450  ** Syntax           : uint32 Mcal_GetCpuWdgPassword (void)                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   451  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   452  ** Description      : This interface is used by applications to retrieve the  **
; ..\mcal\McalLib\ssc\src\McalLib.c	   453  **                    endinit password currently installed in the watchdog of **
; ..\mcal\McalLib\ssc\src\McalLib.c	   454  **                    the CPU they are currently executing on.                **
; ..\mcal\McalLib\ssc\src\McalLib.c	   455  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   456  ** Service ID       : 0x88                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   457  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   458  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	   459  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   460  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	   461  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   462  ** Parameters(in)   : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   463  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   464  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   465  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   466  ** Return value     : Currently installed password                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   467  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   468  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   469  uint32 Mcal_GetCpuWdgPassword(void)
; Function Mcal_GetCpuWdgPassword
.L120:
Mcal_GetCpuWdgPassword:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	   470  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   471    uint32 Password;
; ..\mcal\McalLib\ssc\src\McalLib.c	   472    /*[cover parentID={7ABA6FAF-7F08-48b8-B059-2F99F2798124}]Retrieve cpuindex
; ..\mcal\McalLib\ssc\src\McalLib.c	   473       of current core[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   474    uint32 CoreIdIndex = Mcal_lGetCpuIndex();
	call	Mcal_lGetCpuIndex
.L664:

; ..\mcal\McalLib\ssc\src\McalLib.c	   475  
; ..\mcal\McalLib\ssc\src\McalLib.c	   476    /* Retrieve the encrypted(partially inverted) password from the register */
; ..\mcal\McalLib\ssc\src\McalLib.c	   477    /* [cover parentID={714F01A3-0913-4052-9F62-D4E907791D82}]Extract the
; ..\mcal\McalLib\ssc\src\McalLib.c	   478        password content from WDTCPUxCON0 reg PW bit[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   479    Password = Mcal_GetBitAtomic(MODULE_SCU.WDTCPU[CoreIdIndex].CON0.U,
	mul	d15,d2,#12
	mov.a	a15,d15
	fcall	.cocofun_4
	ld.w	d15,[a3]25164
	fcall	.cocofun_5
.L665:

; ..\mcal\McalLib\ssc\src\McalLib.c	   480                                 IFX_SCU_WDTCPU_CON0_PW_OFF,
; ..\mcal\McalLib\ssc\src\McalLib.c	   481                                 IFX_SCU_WDTCPU_CON0_PW_LEN);
; ..\mcal\McalLib\ssc\src\McalLib.c	   482    /* Decrypt the password (invert bits 0:5) */
; ..\mcal\McalLib\ssc\src\McalLib.c	   483    /* password by inverting bits 0:5[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   484    /* [cover parentID={A820A825-B92B-4ff8-87F0-D28F16C2F619}]Decrypt the
; ..\mcal\McalLib\ssc\src\McalLib.c	   485        password by inverting bits 0:5[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   486    Password = Password ^ (uint32)MCAL_ENDINIT_WDT_PWD_INV;
; ..\mcal\McalLib\ssc\src\McalLib.c	   487    /* [cover parentID={E9117C0D-92CC-41a9-90CB-BE6DBC90F5C3}]Return  password
; ..\mcal\McalLib\ssc\src\McalLib.c	   488       [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   489    return (Password);
; ..\mcal\McalLib\ssc\src\McalLib.c	   490  }
	ret
.L441:
	
__Mcal_GetCpuWdgPassword_function_end:
	.size	Mcal_GetCpuWdgPassword,__Mcal_GetCpuWdgPassword_function_end-Mcal_GetCpuWdgPassword
.L213:
	; End of function
	
	.sdecl	'.text.McalLib..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.McalLib..cocofun_5'
	.align	2
; Function .cocofun_5
.L122:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0
	extr.u	d15,d15,#2,#14
.L1176:
	xor	d2,d15,#63
	fret
.L408:
	; End of function
	.sdecl	'.text.McalLib..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.McalLib..cocofun_4'
	.align	2
; Function .cocofun_4
.L124:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	movh.a	a3,#61443
.L753:
	add.a	a3,a15
.L1171:
	fret
.L403:
	; End of function
	.sdecl	'.text.McalLib.Mcal_SetCpuWdgPassword',code,cluster('Mcal_SetCpuWdgPassword')
	.sect	'.text.McalLib.Mcal_SetCpuWdgPassword'
	.align	2
	
	.global	Mcal_SetCpuWdgPassword

; ..\mcal\McalLib\ssc\src\McalLib.c	   491  
; ..\mcal\McalLib\ssc\src\McalLib.c	   492  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   493  ** Traceability     : [cover parentID={C5FA4346-076A-4fce-AC48-91FD7E7C4CBF}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	   494  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   495  ** Syntax           : uint32 Mcal_SetCpuWdgPassword (const uint32 Password)   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   496  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   497  ** Description      : This interface is used by applications to install a     **
; ..\mcal\McalLib\ssc\src\McalLib.c	   498  **                    specified endinit password in the endinit registers of  **
; ..\mcal\McalLib\ssc\src\McalLib.c	   499  **                    the watchdog of the CPU they are executing on.          **
; ..\mcal\McalLib\ssc\src\McalLib.c	   500  **                    Previously stored data in the PW bitfield of            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   501  **                    WDTCPUxCON0 register is returned back to the caller     **
; ..\mcal\McalLib\ssc\src\McalLib.c	   502  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   503  ** Service ID       : 0x85                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   504  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   505  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	   506  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   507  ** Reentrancy       : Non Reentrant on same CPU, Reentrant on other CPUs      **
; ..\mcal\McalLib\ssc\src\McalLib.c	   508  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   509  ** Parameters(in)   : Password - New password to be installed into            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   510  **                    WDTCPUxCON0 register                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   511  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   512  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   513  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   514  ** Return value     : return the previous installed password                  **
; ..\mcal\McalLib\ssc\src\McalLib.c	   515  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   516  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   517  uint32 Mcal_SetCpuWdgPassword(const uint32 Password)
; Function Mcal_SetCpuWdgPassword
.L126:
Mcal_SetCpuWdgPassword:	.type	func
	sub.a	a10,#8
.L666:

; ..\mcal\McalLib\ssc\src\McalLib.c	   518  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   519    McalLib_CpuEndInitRetType CpuEndInitRet;
; ..\mcal\McalLib\ssc\src\McalLib.c	   520    uint32 UpdatedPassword = (Password & (uint32)IFX_SCU_WDTCPU_CON0_PW_MSK);
; ..\mcal\McalLib\ssc\src\McalLib.c	   521    /* [cover parentID={C3A1147A-CF1C-480d-8134-75BEDE663A14}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   522     * Reterive CoreIdIndex
; ..\mcal\McalLib\ssc\src\McalLib.c	   523     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   524    uint32 CoreId = Mcal_lGetCpuIndex();
	mov	d15,d4
	call	Mcal_lGetCpuIndex
.L667:

; ..\mcal\McalLib\ssc\src\McalLib.c	   525  
; ..\mcal\McalLib\ssc\src\McalLib.c	   526    /* Enter critical section */
; ..\mcal\McalLib\ssc\src\McalLib.c	   527    /* [cover parentID={4D3611DD-6749-4cc3-81CB-EADA6F27831F}]Enter crtical
; ..\mcal\McalLib\ssc\src\McalLib.c	   528          section for updating CpuWdg password[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   529    SchM_Enter_McalLib_CpuEndInit();
	mov	d8,d2
	call	SuspendAllInterrupts
.L668:

; ..\mcal\McalLib\ssc\src\McalLib.c	   530  
; ..\mcal\McalLib\ssc\src\McalLib.c	   531    /* Update the new password */
; ..\mcal\McalLib\ssc\src\McalLib.c	   532    /* [cover parentID={D48BC0AA-A835-4f73-9183-5A9BB88B8066}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   533     * Update the new password
; ..\mcal\McalLib\ssc\src\McalLib.c	   534     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   535    CpuEndInitRet = Mcal_lUpdateCpuEndInit(UpdatedPassword, CoreId, 0x0U,
; ..\mcal\McalLib\ssc\src\McalLib.c	   536                                           MCAL_UPDATE_NEWPASSWORD,
; ..\mcal\McalLib\ssc\src\McalLib.c	   537                                           MCAL_RESETENDINITPROTECTION);
	mov	d6,#0
	st.b	[a10],d6
.L797:
	insert	d4,d15,#0,#14,#18
.L798:
	mov	d7,#1
	mov	d5,d8
	call	Mcal_lUpdateCpuEndInit
.L799:

; ..\mcal\McalLib\ssc\src\McalLib.c	   538  
; ..\mcal\McalLib\ssc\src\McalLib.c	   539    /* Exit critical section */
; ..\mcal\McalLib\ssc\src\McalLib.c	   540    /* [cover parentID={3A2FCF58-EB50-44b4-AF19-75E0C63B690D}]Exit critical
; ..\mcal\McalLib\ssc\src\McalLib.c	   541       section[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   542    SchM_Exit_McalLib_CpuEndInit();
	mov	d9,d3
	call	ResumeAllInterrupts
.L800:

; ..\mcal\McalLib\ssc\src\McalLib.c	   543  
; ..\mcal\McalLib\ssc\src\McalLib.c	   544    /* [cover parentID={B493E147-E76E-4186-9FDC-70714AA64E31}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   545     * Return Previously installed password
; ..\mcal\McalLib\ssc\src\McalLib.c	   546     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   547    return (CpuEndInitRet.Password);
; ..\mcal\McalLib\ssc\src\McalLib.c	   548  }
	mov	d2,d9
	ret
.L444:
	
__Mcal_SetCpuWdgPassword_function_end:
	.size	Mcal_SetCpuWdgPassword,__Mcal_SetCpuWdgPassword_function_end-Mcal_SetCpuWdgPassword
.L218:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_WriteCpuEndInitProtReg',code,cluster('Mcal_WriteCpuEndInitProtReg')
	.sect	'.text.McalLib.Mcal_WriteCpuEndInitProtReg'
	.align	2
	
	.global	Mcal_WriteCpuEndInitProtReg

; ..\mcal\McalLib\ssc\src\McalLib.c	   549  
; ..\mcal\McalLib\ssc\src\McalLib.c	   550  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   551  ** Traceability     : [cover parentID={1619BFC3-44C7-4fe5-84B7-EA6DC8570B6A}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	   552  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   553  ** Syntax           : void Mcal_WriteCpuEndInitProtReg                        **
; ..\mcal\McalLib\ssc\src\McalLib.c	   554  **                   (volatile void* const RegAddress, const uint32 DataValue)**
; ..\mcal\McalLib\ssc\src\McalLib.c	   555  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   556  ** Description      : This interface is used by applications to resume        **
; ..\mcal\McalLib\ssc\src\McalLib.c	   557  **                    protection of CPU endinit protected registers of the    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   558  **                    CPU they are executing on. This interface also supports **
; ..\mcal\McalLib\ssc\src\McalLib.c	   559  **                    write access to CPU endinit protected CSFRs.            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   560  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   561  ** Service ID       : 0x7E                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   562  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   563  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	   564  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   565  ** Reentrancy       : Non Reentrant                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	   566  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   567  ** Parameters(in)   : RegAddress - CPU Endinit protected register address     **
; ..\mcal\McalLib\ssc\src\McalLib.c	   568  **                    DataValue - Value to be written to the register located **
; ..\mcal\McalLib\ssc\src\McalLib.c	   569  **                    at RegAddress.                                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	   570  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   571  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   572  ** Return value     : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   573  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   574  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   575  void Mcal_WriteCpuEndInitProtReg(volatile void* const RegAddress,
; Function Mcal_WriteCpuEndInitProtReg
.L128:
Mcal_WriteCpuEndInitProtReg:	.type	func
	sub.a	a10,#8
.L669:
	mov.aa	a15,a4
.L671:

; ..\mcal\McalLib\ssc\src\McalLib.c	   576                                    const uint32 DataValue)
; ..\mcal\McalLib\ssc\src\McalLib.c	   577  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   578    McalLib_CpuEndInitRetType CpuEndInitRet;
; ..\mcal\McalLib\ssc\src\McalLib.c	   579    uint32 CoreId;
; ..\mcal\McalLib\ssc\src\McalLib.c	   580    /* MISRA2012_RULE_11_6_JUSTIFICATION: The address of the register is
; ..\mcal\McalLib\ssc\src\McalLib.c	   581     * compared against CSFR register offset.
; ..\mcal\McalLib\ssc\src\McalLib.c	   582     * There are no other operation performed, hence this convesion
; ..\mcal\McalLib\ssc\src\McalLib.c	   583     * does not cause any issue */
; ..\mcal\McalLib\ssc\src\McalLib.c	   584    uint32 TempAddr = (uint32)RegAddress;
	mov	d8,d4
	mov.d	d9,a15
.L672:

; ..\mcal\McalLib\ssc\src\McalLib.c	   585  
; ..\mcal\McalLib\ssc\src\McalLib.c	   586    /* [cover parentID={E178D5D6-9647-4bde-9B6D-A42416AC714B}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   587       If SAFETY Error Check is Enabled[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   588    #if (MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	   589    /* [cover parentID={AC213D25-D820-4cef-A724-CA3EB87EB2C6}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   590        Check if input address is null pointer[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   591    if ((RegAddress) == NULL_PTR)
; ..\mcal\McalLib\ssc\src\McalLib.c	   592    {
; ..\mcal\McalLib\ssc\src\McalLib.c	   593      /* [cover parentID={8AA5A630-14E4-444b-AF64-6702217F5C39}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   594          Report error MCALLIB_E_PARAM_POINTER[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   595      Mcal_lReportError(MCALLIB_SID_CPUENDINIT, MCALLIB_E_PARAM_POINTER);
; ..\mcal\McalLib\ssc\src\McalLib.c	   596    }
; ..\mcal\McalLib\ssc\src\McalLib.c	   597    /* [cover parentID={FE4D45F8-C269-41d8-A66C-28BF60649F7D}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   598       If address is not null pointer [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   599    else
; ..\mcal\McalLib\ssc\src\McalLib.c	   600    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   601    {
; ..\mcal\McalLib\ssc\src\McalLib.c	   602      /* [cover parentID={5FC8A013-625D-433a-9381-7C74D60AA759}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   603       * Retrieve cpuindex of current core
; ..\mcal\McalLib\ssc\src\McalLib.c	   604       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   605      CoreId = Mcal_lGetCpuIndex();
	call	Mcal_lGetCpuIndex
.L670:

; ..\mcal\McalLib\ssc\src\McalLib.c	   606  
; ..\mcal\McalLib\ssc\src\McalLib.c	   607      /* Enter critical section */
; ..\mcal\McalLib\ssc\src\McalLib.c	   608      /* [cover parentID={461765B3-4C5C-4a93-9F2B-8E85946F13B0}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   609       * Enter critical section
; ..\mcal\McalLib\ssc\src\McalLib.c	   610       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   611      SchM_Enter_McalLib_CpuEndInit();
	mov	d10,d2
	call	SuspendAllInterrupts
.L673:

; ..\mcal\McalLib\ssc\src\McalLib.c	   612  
; ..\mcal\McalLib\ssc\src\McalLib.c	   613      /* Reset CpuEndInit Protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	   614      /* [cover parentID={2449C750-888D-4215-92C7-89A336D2BCF6}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   615       * Reset CpuEndInit Protection
; ..\mcal\McalLib\ssc\src\McalLib.c	   616       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   617      CpuEndInitRet = Mcal_lUpdateCpuEndInit(MCAL_DUMMY_PASSWORD, CoreId, 0x0U,
; ..\mcal\McalLib\ssc\src\McalLib.c	   618                                             MCAL_NOUPDATE_PASSWORD,
; ..\mcal\McalLib\ssc\src\McalLib.c	   619                                             MCAL_RESETENDINITPROTECTION);
	mov	d4,#0
	st.b	[a10],d4
.L805:
	mov	e6,d4,d4
.L806:
	mov	d5,d10
	call	Mcal_lUpdateCpuEndInit
.L807:

; ..\mcal\McalLib\ssc\src\McalLib.c	   620  
; ..\mcal\McalLib\ssc\src\McalLib.c	   621      /* Update CPU Endinit protected register
; ..\mcal\McalLib\ssc\src\McalLib.c	   622       * Note: CPU specific registers are updated using MTCR
; ..\mcal\McalLib\ssc\src\McalLib.c	   623       */
; ..\mcal\McalLib\ssc\src\McalLib.c	   624      /* [cover parentID={FC76C818-3B35-46e8-8F71-06CAAA9B972B}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   625       * Update CPU Endinit protected register
; ..\mcal\McalLib\ssc\src\McalLib.c	   626       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   627      /* [cover parentID={9AB7EC4B-1C37-4b90-9D90-F7B9FE87F06E}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   628      if (TempAddr > MCAL_16BIT_MAX_ADDR)
	mov.u	d0,#65535
.L808:
	jge.u	d0,d9,.L4
.L809:

; ..\mcal\McalLib\ssc\src\McalLib.c	   629      {
; ..\mcal\McalLib\ssc\src\McalLib.c	   630        /* MISRA2012_RULE_11_5_JUSTIFICATION: Conversion between
; ..\mcal\McalLib\ssc\src\McalLib.c	   631         * pointer to void and pointer to object due to SFR access. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   632        /* MISRA2012_RULE_11_3_JUSTIFICATION: Conversion between
; ..\mcal\McalLib\ssc\src\McalLib.c	   633         * pointers of different object types due to SFR access. */
; ..\mcal\McalLib\ssc\src\McalLib.c	   634        *((volatile uint32*)RegAddress) = (uint32)DataValue;
	st.w	[a15],d8
.L810:
	j	.L5
.L4:

; ..\mcal\McalLib\ssc\src\McalLib.c	   635      }
; ..\mcal\McalLib\ssc\src\McalLib.c	   636      else
; ..\mcal\McalLib\ssc\src\McalLib.c	   637      {
; ..\mcal\McalLib\ssc\src\McalLib.c	   638        /* [cover parentID={33F5D436-8491-4d1b-B32F-EEDD8A451900}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   639        /* CPU specific registers are updated using MTCR */
; ..\mcal\McalLib\ssc\src\McalLib.c	   640        switch(TempAddr)
; ..\mcal\McalLib\ssc\src\McalLib.c	   641        {
; ..\mcal\McalLib\ssc\src\McalLib.c	   642          case CPU_PMA0:
; ..\mcal\McalLib\ssc\src\McalLib.c	   643              MTCR(CPU_PMA0, DataValue);
; ..\mcal\McalLib\ssc\src\McalLib.c	   644              break;
; ..\mcal\McalLib\ssc\src\McalLib.c	   645          case CPU_PMA1:
; ..\mcal\McalLib\ssc\src\McalLib.c	   646              MTCR(CPU_PMA1, DataValue);
; ..\mcal\McalLib\ssc\src\McalLib.c	   647              break;
; ..\mcal\McalLib\ssc\src\McalLib.c	   648          case CPU_ISP:
; ..\mcal\McalLib\ssc\src\McalLib.c	   649              MTCR(CPU_ISP, DataValue);
; ..\mcal\McalLib\ssc\src\McalLib.c	   650              break;
; ..\mcal\McalLib\ssc\src\McalLib.c	   651          case CPU_BIV:
; ..\mcal\McalLib\ssc\src\McalLib.c	   652              MTCR(CPU_BIV, DataValue);
; ..\mcal\McalLib\ssc\src\McalLib.c	   653              break;
; ..\mcal\McalLib\ssc\src\McalLib.c	   654          case CPU_BTV:
; ..\mcal\McalLib\ssc\src\McalLib.c	   655              MTCR(CPU_BTV, DataValue);
; ..\mcal\McalLib\ssc\src\McalLib.c	   656              break;
; ..\mcal\McalLib\ssc\src\McalLib.c	   657          case CPU_SEGEN:
	mov	d0,#4144
	jeq	d0,d9,.L6
.L811:
	mov.u	d15,#33024
	jeq	d15,d9,.L7
.L812:
	mov.u	d15,#33028
	jeq	d15,d9,.L8
.L813:

; ..\mcal\McalLib\ssc\src\McalLib.c	   658              MTCR(CPU_SEGEN, DataValue);
; ..\mcal\McalLib\ssc\src\McalLib.c	   659              break;
; ..\mcal\McalLib\ssc\src\McalLib.c	   660          case CPU_DCON0:
	mov.u	d15,#36928
	jeq	d15,d9,.L9
.L814:

; ..\mcal\McalLib\ssc\src\McalLib.c	   661              MTCR(CPU_DCON0, DataValue);
; ..\mcal\McalLib\ssc\src\McalLib.c	   662              break;
; ..\mcal\McalLib\ssc\src\McalLib.c	   663          case CPU_PCON0:
	mov.u	d15,#37388
	jeq	d15,d9,.L10
.L815:
	mov.u	d15,#65056
	jeq	d15,d9,.L11
.L816:
	mov.u	d15,#65060
	jeq	d15,d9,.L12
.L817:
	mov.u	d15,#65064
	jeq	d15,d9,.L13
	j	.L14
.L7:
	dsync
	mtcr	#33024,d8
	isync
.L818:
	j	.L15
.L8:
	dsync
	mtcr	#33028,d8
	isync
.L819:
	j	.L16
.L13:
	dsync
	mtcr	#65064,d8
	isync
.L820:
	j	.L17
.L11:
	dsync
	mtcr	#65056,d8
	isync
.L821:
	j	.L18
.L12:
	dsync
	mtcr	#65060,d8
	isync
.L822:
	j	.L19
.L6:
	dsync
	mtcr	#4144,d8
	isync
.L823:
	j	.L20
.L9:
	dsync
	mtcr	#36928,d8
	isync
.L824:
	j	.L21
.L10:

; ..\mcal\McalLib\ssc\src\McalLib.c	   664              MTCR(CPU_PCON0, DataValue);
	dsync
	mtcr	#37388,d8
	isync

; ..\mcal\McalLib\ssc\src\McalLib.c	   665              break;
; ..\mcal\McalLib\ssc\src\McalLib.c	   666          default:
; ..\mcal\McalLib\ssc\src\McalLib.c	   667              /* This case is not possible, kept only for MISRA compliance */
; ..\mcal\McalLib\ssc\src\McalLib.c	   668              break;
; ..\mcal\McalLib\ssc\src\McalLib.c	   669        }
; ..\mcal\McalLib\ssc\src\McalLib.c	   670      }
.L21:
.L20:
.L19:
.L18:
.L17:
.L16:
.L15:
.L14:
.L5:

; ..\mcal\McalLib\ssc\src\McalLib.c	   671  
; ..\mcal\McalLib\ssc\src\McalLib.c	   672      /* Set CpuEndInit Protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	   673      /* [cover parentID={34F6FD8A-A61F-4636-B594-A600DB5FAC5F}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   674       * Set CpuEndInit Protection
; ..\mcal\McalLib\ssc\src\McalLib.c	   675       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   676      (void)Mcal_lUpdateCpuEndInit(MCAL_DUMMY_PASSWORD, CoreId,
; ..\mcal\McalLib\ssc\src\McalLib.c	   677                                   CpuEndInitRet.TimerRelValAtReset,
; ..\mcal\McalLib\ssc\src\McalLib.c	   678                                   MCAL_NOUPDATE_PASSWORD,
; ..\mcal\McalLib\ssc\src\McalLib.c	   679                                   MCAL_SETENDINITPROTECTION);
	mov	d15,#1
	st.b	[a10],d15
.L825:
	mov	d7,#0
.L826:
	mov	d6,d2
.L827:
	mov	e4,d10,d7
	call	Mcal_lUpdateCpuEndInit
.L828:

; ..\mcal\McalLib\ssc\src\McalLib.c	   680  
; ..\mcal\McalLib\ssc\src\McalLib.c	   681      /* Exit critical section */
; ..\mcal\McalLib\ssc\src\McalLib.c	   682      /* [cover parentID={60F5FA05-4D84-400c-9E59-108DA8315CE8}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   683       * Exit critical section
; ..\mcal\McalLib\ssc\src\McalLib.c	   684       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   685      SchM_Exit_McalLib_CpuEndInit();
	j	ResumeAllInterrupts
.L450:
	
__Mcal_WriteCpuEndInitProtReg_function_end:
	.size	Mcal_WriteCpuEndInitProtReg,__Mcal_WriteCpuEndInitProtReg_function_end-Mcal_WriteCpuEndInitProtReg
.L223:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_GetSafetyEndInitPassword',code,cluster('Mcal_GetSafetyEndInitPassword')
	.sect	'.text.McalLib.Mcal_GetSafetyEndInitPassword'
	.align	2
	
	.global	Mcal_GetSafetyEndInitPassword

; ..\mcal\McalLib\ssc\src\McalLib.c	   686    }
; ..\mcal\McalLib\ssc\src\McalLib.c	   687  }
; ..\mcal\McalLib\ssc\src\McalLib.c	   688  
; ..\mcal\McalLib\ssc\src\McalLib.c	   689  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   690  ** Traceability     : [cover parentID={5BE87D93-DC0C-4989-A16E-CE49AEE7BF0D}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	   691  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   692  ** Syntax           : uint32 Mcal_GetSafetyEndInitPassword (void)             **
; ..\mcal\McalLib\ssc\src\McalLib.c	   693  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   694  ** Description      : This interface is used by applications to retrieve the  **
; ..\mcal\McalLib\ssc\src\McalLib.c	   695  **                    Safety endinit password currently installed in the      **
; ..\mcal\McalLib\ssc\src\McalLib.c	   696  **                    Global ENDINIT control register (SEICON0 register).     **
; ..\mcal\McalLib\ssc\src\McalLib.c	   697  **                    The password corresponds to EPW bitfield in register    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   698  **                    SEICON0.                                                **
; ..\mcal\McalLib\ssc\src\McalLib.c	   699  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   700  ** Service ID       : 0x87                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   701  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   702  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	   703  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   704  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	   705  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   706  ** Parameters(in)   : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   707  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   708  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   709  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   710  ** Return value     : Currently installed password                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   711  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   712  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   713  uint32 Mcal_GetSafetyEndInitPassword(void)
; Function Mcal_GetSafetyEndInitPassword
.L130:
Mcal_GetSafetyEndInitPassword:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	   714  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   715    uint32 Password;
; ..\mcal\McalLib\ssc\src\McalLib.c	   716  
; ..\mcal\McalLib\ssc\src\McalLib.c	   717    /* Retrieve the encrypted(partially inverted) password from the register */
; ..\mcal\McalLib\ssc\src\McalLib.c	   718    /* [cover parentID={7C4FBB47-84FA-4491-BE2D-D07F7C6AA2D1}]Retrieve the
; ..\mcal\McalLib\ssc\src\McalLib.c	   719        encrypted  password from the register[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   720    Password = Mcal_GetBitAtomic(MODULE_SCU.SEICON0.U,
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00362b4)
	fcall	.cocofun_5
.L833:

; ..\mcal\McalLib\ssc\src\McalLib.c	   721                                 IFX_SCU_SEICON0_EPW_OFF,
; ..\mcal\McalLib\ssc\src\McalLib.c	   722                                 IFX_SCU_SEICON0_EPW_LEN);
; ..\mcal\McalLib\ssc\src\McalLib.c	   723  
; ..\mcal\McalLib\ssc\src\McalLib.c	   724    /* Decrypt the password (invert bits 0:5) */
; ..\mcal\McalLib\ssc\src\McalLib.c	   725    /* [cover parentID={6180D731-B725-466c-8DC7-5CC0D41BB597}]Decrypt the
; ..\mcal\McalLib\ssc\src\McalLib.c	   726        password[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   727    Password = Password ^ (uint32)MCAL_ENDINIT_WDT_PWD_INV;
; ..\mcal\McalLib\ssc\src\McalLib.c	   728    /* [cover parentID={50367A61-FB21-4c2e-9258-9AA88D7CA8AC}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   729        Return password[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   730    return (Password);
; ..\mcal\McalLib\ssc\src\McalLib.c	   731  }
	ret
.L458:
	
__Mcal_GetSafetyEndInitPassword_function_end:
	.size	Mcal_GetSafetyEndInitPassword,__Mcal_GetSafetyEndInitPassword_function_end-Mcal_GetSafetyEndInitPassword
.L228:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_SetSafetyEndInitPassword',code,cluster('Mcal_SetSafetyEndInitPassword')
	.sect	'.text.McalLib.Mcal_SetSafetyEndInitPassword'
	.align	2
	
	.global	Mcal_SetSafetyEndInitPassword

; ..\mcal\McalLib\ssc\src\McalLib.c	   732  
; ..\mcal\McalLib\ssc\src\McalLib.c	   733  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   734  ** Traceability     : [cover parentID={1D74AAF8-8492-4b33-B8D8-B865ECB04396}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	   735  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   736  ** Syntax           : uint32 Mcal_SetSafetyEndInitPassword                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   737  **                                               (const uint32 Password)      **
; ..\mcal\McalLib\ssc\src\McalLib.c	   738  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   739  ** Description      : This interface is used by applications to install a     **
; ..\mcal\McalLib\ssc\src\McalLib.c	   740  **                    password for Safety endinit protection. The interface   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   741  **                    internally prepares the password (shifting, inversion   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   742  **                    etc.), installs the password and returns the previously **
; ..\mcal\McalLib\ssc\src\McalLib.c	   743  **                    installed password (from the EPW bitfield).             **
; ..\mcal\McalLib\ssc\src\McalLib.c	   744  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   745  ** Service ID       : 0x80                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   746  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   747  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	   748  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   749  ** Reentrancy       : Non Reentrant                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	   750  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   751  ** Parameters(in)   : Password - New password to be installed into            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   752  **                    SEICON0 register                                        **
; ..\mcal\McalLib\ssc\src\McalLib.c	   753  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   754  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   755  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   756  ** Return value     : Returns the last installed password                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	   757  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   758  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   759  uint32 Mcal_SetSafetyEndInitPassword(const uint32 Password)
; Function Mcal_SetSafetyEndInitPassword
.L132:
Mcal_SetSafetyEndInitPassword:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	   760  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   761    uint32 OldPassword;
; ..\mcal\McalLib\ssc\src\McalLib.c	   762    uint32 NewPassword = (Password & (uint32)IFX_SCU_SEICON0_EPW_MSK);
; ..\mcal\McalLib\ssc\src\McalLib.c	   763  
; ..\mcal\McalLib\ssc\src\McalLib.c	   764    /* Critical section to protect SCU_SEICON0 register*/
; ..\mcal\McalLib\ssc\src\McalLib.c	   765    /* [cover parentID={E6F5A6B8-5E08-496d-B4C3-EB42D886A1F7}]Enter Critical
; ..\mcal\McalLib\ssc\src\McalLib.c	   766       Section for updating safety endinit password[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   767    SchM_Enter_McalLib_SafetyEndInit();
	mov	d15,d4
	call	SuspendAllInterrupts
.L674:

; ..\mcal\McalLib\ssc\src\McalLib.c	   768  
; ..\mcal\McalLib\ssc\src\McalLib.c	   769    /* Acquire the lock for SCU_SEICON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	   770    /* [cover parentID={C098B134-9F92-4803-ABCD-54C25B8A9A8F}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   771     * Acquire the lock for SCU_SEICON0 register
; ..\mcal\McalLib\ssc\src\McalLib.c	   772     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   773    Mcal_lGetSpinlock(&Mcal_LockAddressSiecon0, \ 
	movh.a	a15,#@his(Mcal_LockAddressSiecon0)
.L838:

; ..\mcal\McalLib\ssc\src\McalLib.c	   774                     (uint32)MCAL_SPINLOCK_DEFAULT_TIMEOUT,
	mov	d4,#10000
	lea	a15,[a15]@los(Mcal_LockAddressSiecon0)
.L839:

; ..\mcal\McalLib\ssc\src\McalLib.c	   775                     MCALLIB_SID_SETSAFETYENDINIT);
	mov	d5,#128
	mov.aa	a4,a15
	call	Mcal_lGetSpinlock
.L840:
	insert	d4,d15,#0,#14,#18
.L841:

; ..\mcal\McalLib\ssc\src\McalLib.c	   776    /* [cover parentID={6CFA30E3-B332-47a0-9779-39A715C02A47}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   777    /* Reset ENDINIT protection and update the new password */
; ..\mcal\McalLib\ssc\src\McalLib.c	   778    OldPassword = Mcal_lUpdateSafetyEndInit(NewPassword,
; ..\mcal\McalLib\ssc\src\McalLib.c	   779                                            MCAL_UPDATE_NEWPASSWORD,
	mov	d5,#1
.L842:

; ..\mcal\McalLib\ssc\src\McalLib.c	   780                                            MCAL_RESETENDINITPROTECTION);
	mov	d6,#0
	call	Mcal_lUpdateSafetyEndInit
.L676:

; ..\mcal\McalLib\ssc\src\McalLib.c	   781  
; ..\mcal\McalLib\ssc\src\McalLib.c	   782    /* Release the lock for SCU_SEICCON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	   783    /* [cover parentID={E81DDB92-1211-407b-A0C4-7CC4EA7E03B9}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   784     * Release the lock for SCU_SEICCON0 register
; ..\mcal\McalLib\ssc\src\McalLib.c	   785     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   786    Mcal_lReleaseSpinlock(&Mcal_LockAddressSiecon0);
	mov	d15,d2
	mov.aa	a4,a15
.L675:
	call	Mcal_lReleaseSpinlock
.L677:

; ..\mcal\McalLib\ssc\src\McalLib.c	   787  
; ..\mcal\McalLib\ssc\src\McalLib.c	   788    /* [cover parentID={EA17FFF8-6438-4167-80A3-470F8B14D1C4}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   789     * Exit critical section
; ..\mcal\McalLib\ssc\src\McalLib.c	   790     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   791    SchM_Exit_McalLib_SafetyEndInit();
	call	ResumeAllInterrupts
.L843:

; ..\mcal\McalLib\ssc\src\McalLib.c	   792  
; ..\mcal\McalLib\ssc\src\McalLib.c	   793    /* Return old password */
; ..\mcal\McalLib\ssc\src\McalLib.c	   794    /* [cover parentID={567C341C-482C-4c37-9651-52F4095AA60E}]Return old
; ..\mcal\McalLib\ssc\src\McalLib.c	   795       password [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   796    return (OldPassword);
; ..\mcal\McalLib\ssc\src\McalLib.c	   797  }
	mov	d2,d15
	ret
.L459:
	
__Mcal_SetSafetyEndInitPassword_function_end:
	.size	Mcal_SetSafetyEndInitPassword,__Mcal_SetSafetyEndInitPassword_function_end-Mcal_SetSafetyEndInitPassword
.L233:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_WriteSafetyEndInitProtReg',code,cluster('Mcal_WriteSafetyEndInitProtReg')
	.sect	'.text.McalLib.Mcal_WriteSafetyEndInitProtReg'
	.align	2
	
	.global	Mcal_WriteSafetyEndInitProtReg

; ..\mcal\McalLib\ssc\src\McalLib.c	   798  
; ..\mcal\McalLib\ssc\src\McalLib.c	   799  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   800  ** Traceability     :[cover parentID={49C5FBA9-0673-47dd-8182-DE8AED479123}]  **
; ..\mcal\McalLib\ssc\src\McalLib.c	   801  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   802  ** Syntax           : void Mcal_WriteSafetyEndInitProtReg                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	   803                       (volatile void* const RegAddress, const uint32 DataValue)**
; ..\mcal\McalLib\ssc\src\McalLib.c	   804  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   805  ** Description      : This API is needed to write required values to safety   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   806  **                    end-init protected registers by unprotecting to write   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   807  **                    and protecting back to keep protection intact. This     **
; ..\mcal\McalLib\ssc\src\McalLib.c	   808  **                    interface also supports write access to safety endinit  **
; ..\mcal\McalLib\ssc\src\McalLib.c	   809  **                    protected CSFRs.                                        **
; ..\mcal\McalLib\ssc\src\McalLib.c	   810  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   811  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   812  ** Service ID       : 0x7F                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   813  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   814  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	   815  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   816  ** Reentrancy       : Non Reentrant                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	   817  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   818  ** Parameters(in)   : RegAddress - Safety Endinit protected register address  **
; ..\mcal\McalLib\ssc\src\McalLib.c	   819  **                    DataValue - Value to be written to the register located **
; ..\mcal\McalLib\ssc\src\McalLib.c	   820  **                    at RegAddress                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	   821  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   822  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   823  ** Return value     : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   824  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   825  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   826  void Mcal_WriteSafetyEndInitProtReg(volatile void* const RegAddress,
; Function Mcal_WriteSafetyEndInitProtReg
.L134:
Mcal_WriteSafetyEndInitProtReg:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	   827                                      const uint32 DataValue)
; ..\mcal\McalLib\ssc\src\McalLib.c	   828  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   829    /* [cover parentID={4035DB5A-D359-4547-B3D4-AD4A8475F6EE}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   830     * If SAFETY Error Check is Enabled
; ..\mcal\McalLib\ssc\src\McalLib.c	   831     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   832    #if (MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	   833    /* [cover parentID={2C16B817-914C-46a6-8232-4EE20FC3FDAA}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   834        Check if input address is null pointer[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   835    if ((RegAddress) == NULL_PTR)
; ..\mcal\McalLib\ssc\src\McalLib.c	   836    {
; ..\mcal\McalLib\ssc\src\McalLib.c	   837      /* [cover parentID={27FF0329-1BC1-4339-91A7-E02687B80671}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   838       * Report error MCALLIB_E_PARAM_POINTER[/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	   839       */
; ..\mcal\McalLib\ssc\src\McalLib.c	   840      Mcal_lReportError(MCALLIB_SID_SAFETYENDINIT,
; ..\mcal\McalLib\ssc\src\McalLib.c	   841                        MCALLIB_E_PARAM_POINTER);
; ..\mcal\McalLib\ssc\src\McalLib.c	   842    }
; ..\mcal\McalLib\ssc\src\McalLib.c	   843    /* [cover parentID={AB76685F-687F-4e66-9DAC-E28B0DBCAFCE}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   844     * If address is not null pointer[/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	   845     */
; ..\mcal\McalLib\ssc\src\McalLib.c	   846    else
; ..\mcal\McalLib\ssc\src\McalLib.c	   847    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   848    {
; ..\mcal\McalLib\ssc\src\McalLib.c	   849      /* Write the data into safetyendinit register with default mask */
; ..\mcal\McalLib\ssc\src\McalLib.c	   850      /* [cover parentID={0AB9676C-BE6A-4851-AC15-612F9E23A897}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   851      Mcal_lWriteSafetyEndInitProtection(
; ..\mcal\McalLib\ssc\src\McalLib.c	   852                                          RegAddress,
; ..\mcal\McalLib\ssc\src\McalLib.c	   853                                          DataValue,
; ..\mcal\McalLib\ssc\src\McalLib.c	   854                                          MCAL_DEFAULT_MASK_VALUE,
	mov	d5,#-1
.L848:

; ..\mcal\McalLib\ssc\src\McalLib.c	   855                                          MCAL_32BIT_ACCESS,
	mov	d6,#0
.L849:

; ..\mcal\McalLib\ssc\src\McalLib.c	   856                                          MCALLIB_SID_SAFETYENDINIT
	mov	d7,#127
	j	Mcal_lWriteSafetyEndInitProtection
.L463:
	
__Mcal_WriteSafetyEndInitProtReg_function_end:
	.size	Mcal_WriteSafetyEndInitProtReg,__Mcal_WriteSafetyEndInitProtReg_function_end-Mcal_WriteSafetyEndInitProtReg
.L238:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_WriteSafetyEndInitProtReg16',code,cluster('Mcal_WriteSafetyEndInitProtReg16')
	.sect	'.text.McalLib.Mcal_WriteSafetyEndInitProtReg16'
	.align	2
	
	.global	Mcal_WriteSafetyEndInitProtReg16

; ..\mcal\McalLib\ssc\src\McalLib.c	   857                                        );
; ..\mcal\McalLib\ssc\src\McalLib.c	   858    }
; ..\mcal\McalLib\ssc\src\McalLib.c	   859  }
; ..\mcal\McalLib\ssc\src\McalLib.c	   860  
; ..\mcal\McalLib\ssc\src\McalLib.c	   861  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   862  ** Traceability     :[cover parentID={D41CCA16-D6E9-473e-A7FD-96E5F50DA961}]  **
; ..\mcal\McalLib\ssc\src\McalLib.c	   863  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   864  ** Syntax           : void Mcal_WriteSafetyEndInitProtReg16                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   865                       (volatile void* const RegAddress, const uint16 DataValue)**
; ..\mcal\McalLib\ssc\src\McalLib.c	   866  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   867  ** Description      : This API is needed to write required values to safety   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   868  **                    end-init protected registers by unprotecting to write   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   869  **                    and protecting back to keep protection intact           **
; ..\mcal\McalLib\ssc\src\McalLib.c	   870  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   871  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   872  ** Service ID       : 0x81                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   873  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   874  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	   875  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   876  ** Reentrancy       : Non Reentrant                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	   877  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   878  ** Parameters(in)   : RegAddress - Safety Endinit protected register address  **
; ..\mcal\McalLib\ssc\src\McalLib.c	   879  **                    DataValue - Value to be written to the register located **
; ..\mcal\McalLib\ssc\src\McalLib.c	   880  **                    at RegAddress                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	   881  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   882  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   883  ** Return value     : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   884  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   885  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   886  void Mcal_WriteSafetyEndInitProtReg16(volatile void* const RegAddress,
; Function Mcal_WriteSafetyEndInitProtReg16
.L136:
Mcal_WriteSafetyEndInitProtReg16:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	   887                                        const uint16 DataValue)
; ..\mcal\McalLib\ssc\src\McalLib.c	   888  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   889    /* [cover parentID={93B23F99-B0D3-4e77-B2DE-B7CA148C79AB}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   890        If SAFETY Error Check is Enabled[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   891    #if (MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	   892    /* [cover parentID={5C03C912-F7C2-4380-9502-839E329DD953}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   893        Check if input address is null pointer[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   894    if ((RegAddress) == NULL_PTR)
; ..\mcal\McalLib\ssc\src\McalLib.c	   895    {
; ..\mcal\McalLib\ssc\src\McalLib.c	   896      /* [cover parentID={8125DCB6-5FA7-4be5-B5AD-C214218F543A}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   897       * Report error MCALLIB_E_PARAM_POINTER[/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	   898       */
; ..\mcal\McalLib\ssc\src\McalLib.c	   899      Mcal_lReportError(MCALLIB_SID_SAFETYENDINIT_16, \ 
; ..\mcal\McalLib\ssc\src\McalLib.c	   900                        MCALLIB_E_PARAM_POINTER);
; ..\mcal\McalLib\ssc\src\McalLib.c	   901    }
; ..\mcal\McalLib\ssc\src\McalLib.c	   902    /* [cover parentID={252C1D0A-F50F-4f7b-A454-567D7E438D0C}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   903     * If address is not null pointer[/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	   904     */
; ..\mcal\McalLib\ssc\src\McalLib.c	   905    else
; ..\mcal\McalLib\ssc\src\McalLib.c	   906    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   907    {
; ..\mcal\McalLib\ssc\src\McalLib.c	   908      /* [cover parentID={7FEB1C5E-2EFD-4f08-BE4C-84C4E63B6C7A}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   909         Write the data into safetyendinit register with default mask
; ..\mcal\McalLib\ssc\src\McalLib.c	   910         [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   911      Mcal_lWriteSafetyEndInitProtection(
; ..\mcal\McalLib\ssc\src\McalLib.c	   912                                          RegAddress,
; ..\mcal\McalLib\ssc\src\McalLib.c	   913                                          DataValue,
; ..\mcal\McalLib\ssc\src\McalLib.c	   914                                          MCAL_DEFAULT_MASK_VALUE,
	mov	d5,#-1
.L994:

; ..\mcal\McalLib\ssc\src\McalLib.c	   915                                          MCAL_16BIT_ACCESS,
	mov	d6,#1
.L995:

; ..\mcal\McalLib\ssc\src\McalLib.c	   916                                          MCALLIB_SID_SAFETYENDINIT_16
	mov	d7,#129
	j	Mcal_lWriteSafetyEndInitProtection
.L536:
	
__Mcal_WriteSafetyEndInitProtReg16_function_end:
	.size	Mcal_WriteSafetyEndInitProtReg16,__Mcal_WriteSafetyEndInitProtReg16_function_end-Mcal_WriteSafetyEndInitProtReg16
.L323:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_WriteSafetyEndInitProtRegMask',code,cluster('Mcal_WriteSafetyEndInitProtRegMask')
	.sect	'.text.McalLib.Mcal_WriteSafetyEndInitProtRegMask'
	.align	2
	
	.global	Mcal_WriteSafetyEndInitProtRegMask

; ..\mcal\McalLib\ssc\src\McalLib.c	   917                                        );
; ..\mcal\McalLib\ssc\src\McalLib.c	   918    }
; ..\mcal\McalLib\ssc\src\McalLib.c	   919  }
; ..\mcal\McalLib\ssc\src\McalLib.c	   920  
; ..\mcal\McalLib\ssc\src\McalLib.c	   921  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   922  ** Traceability     : [cover parentID={C056F09A-B74A-4ac8-A7E8-9B8D40D8C8E2}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	   923  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   924  ** Syntax           : void Mcal_WriteSafetyEndInitProtRegMask                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	   925  **                      (volatile void* const RegAddress,                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	   926  **                      const uint32 DataValue,                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	   927  **                      uint32 Mask)                                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	   928  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   929  ** Description      : This API is needed to write required values to safety   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   930  **                    end-init protected register bits by unprotecting to     **
; ..\mcal\McalLib\ssc\src\McalLib.c	   931  **                    write and protecting back to keep protection intact.    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   932  **                    This interface also supports write access to safety     **
; ..\mcal\McalLib\ssc\src\McalLib.c	   933  **                    endinit protected CSFRs.                                **
; ..\mcal\McalLib\ssc\src\McalLib.c	   934  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   935  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   936  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   937  ** Service ID       : 0x8F                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   938  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   939  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	   940  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   941  ** Reentrancy       : Non Reentrant                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	   942  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   943  ** Parameters(in)   : RegAddress - Safety Endinit protected register address  **
; ..\mcal\McalLib\ssc\src\McalLib.c	   944  **                    DataValue - Value to be written to the register located **
; ..\mcal\McalLib\ssc\src\McalLib.c	   945  **                    at RegAddress                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	   946  **                    Mask - Value to be written to mask the register value   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   947  **                    need to be changed.                                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	   948  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   949  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   950  ** Return value     : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   951  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   952  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	   953  void Mcal_WriteSafetyEndInitProtRegMask(volatile void* const RegAddress,
; Function Mcal_WriteSafetyEndInitProtRegMask
.L138:
Mcal_WriteSafetyEndInitProtRegMask:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	   954                                           const uint32 DataValue, uint32 Mask)
; ..\mcal\McalLib\ssc\src\McalLib.c	   955  {
; ..\mcal\McalLib\ssc\src\McalLib.c	   956    /* [cover parentID={5974CFB6-87C9-4794-B9F9-0EC6DD775F98}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   957        If SAFETY Error Check is Enabled[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   958    #if (MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	   959    /* [cover parentID={CBE8BCA9-7698-4c9d-8E65-EE8C1F75B35D}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   960        Check if input address is null pointer[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   961    if ((RegAddress) == NULL_PTR)
; ..\mcal\McalLib\ssc\src\McalLib.c	   962    {
; ..\mcal\McalLib\ssc\src\McalLib.c	   963      /* [cover parentID={E2348FD8-212E-4299-88D4-3849DBE60CCF}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   964         Report error MCALLIB_E_PARAM_POINTER[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   965      Mcal_lReportError(MCALLIB_SID_SAFETYENDINITMASK,
; ..\mcal\McalLib\ssc\src\McalLib.c	   966                        MCALLIB_E_PARAM_POINTER);
; ..\mcal\McalLib\ssc\src\McalLib.c	   967    }
; ..\mcal\McalLib\ssc\src\McalLib.c	   968    /* [cover parentID={1348778A-0EA6-4fb3-B370-4751F20C57D0}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   969       If address is not null pointer[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   970    else
; ..\mcal\McalLib\ssc\src\McalLib.c	   971    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	   972    {
; ..\mcal\McalLib\ssc\src\McalLib.c	   973      /* [cover parentID={D8F923BB-96E0-441d-A9F8-BA1A6D865DE4}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   974         Mcal_WriteSafetyEndInitProtRegMask[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   975      /* [cover parentID={F67D85E8-2ED7-481e-AA31-B1BC3FC37866}]
; ..\mcal\McalLib\ssc\src\McalLib.c	   976         Write the data into safetyendinit register with mask[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	   977      Mcal_lWriteSafetyEndInitProtection(
; ..\mcal\McalLib\ssc\src\McalLib.c	   978                                          RegAddress,
; ..\mcal\McalLib\ssc\src\McalLib.c	   979                                          DataValue,
; ..\mcal\McalLib\ssc\src\McalLib.c	   980                                          Mask,
; ..\mcal\McalLib\ssc\src\McalLib.c	   981                                          MCAL_32BIT_ACCESS,
	mov	d6,#0
.L854:

; ..\mcal\McalLib\ssc\src\McalLib.c	   982                                          MCALLIB_SID_SAFETYENDINITMASK
	mov	d7,#143
	j	Mcal_lWriteSafetyEndInitProtection
.L468:
	
__Mcal_WriteSafetyEndInitProtRegMask_function_end:
	.size	Mcal_WriteSafetyEndInitProtRegMask,__Mcal_WriteSafetyEndInitProtRegMask_function_end-Mcal_WriteSafetyEndInitProtRegMask
.L243:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_GetPeripheralEndInitPassword',code,cluster('Mcal_GetPeripheralEndInitPassword')
	.sect	'.text.McalLib.Mcal_GetPeripheralEndInitPassword'
	.align	2
	
	.global	Mcal_GetPeripheralEndInitPassword

; ..\mcal\McalLib\ssc\src\McalLib.c	   983                                        );
; ..\mcal\McalLib\ssc\src\McalLib.c	   984    }
; ..\mcal\McalLib\ssc\src\McalLib.c	   985  }
; ..\mcal\McalLib\ssc\src\McalLib.c	   986  
; ..\mcal\McalLib\ssc\src\McalLib.c	   987  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	   988  ** Traceability     : [cover parentID={E0C11962-A636-4404-B096-E13741CF52ED}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	   989  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	   990  ** Syntax           : uint32 Mcal_GetPeripheralEndInitPassword (void)         **
; ..\mcal\McalLib\ssc\src\McalLib.c	   991  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   992  ** Description      : This interface is used by applications to retrieve the  **
; ..\mcal\McalLib\ssc\src\McalLib.c	   993  **                    peripheral endinit password currently installed in the  **
; ..\mcal\McalLib\ssc\src\McalLib.c	   994  **                    Global ENDINIT control register (EICON0 register).      **
; ..\mcal\McalLib\ssc\src\McalLib.c	   995  **                    The password corresponds to bits 15:2 in register EICON0**
; ..\mcal\McalLib\ssc\src\McalLib.c	   996  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   997  ** Service ID       : 0x82                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	   998  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	   999  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1000  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1001  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1002  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1003  ** Parameters(in)   : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1004  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1005  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1006  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1007  ** Return value     : Currently installed password                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1008  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1009  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1010  uint32 Mcal_GetPeripheralEndInitPassword(void)
; Function Mcal_GetPeripheralEndInitPassword
.L140:
Mcal_GetPeripheralEndInitPassword:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  1011  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1012    uint32 Password;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1013  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1014    /* Retrieve the encrypted(partially inverted) password from the register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1015    /* [cover parentID={C2FA35C2-FD4F-42ab-81A5-3CB77AB6293F}]Retrieve the
; ..\mcal\McalLib\ssc\src\McalLib.c	  1016       encrypted  password from the register[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1017    Password = Mcal_GetBitAtomic(MODULE_SCU.EICON0.U,
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf003629c)
	fcall	.cocofun_5
.L859:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1018                                 IFX_SCU_EICON0_EPW_OFF,
; ..\mcal\McalLib\ssc\src\McalLib.c	  1019                                 IFX_SCU_EICON0_EPW_LEN);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1020  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1021    /* Decrypt the password (invert bits 0:5) */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1022    /* [cover parentID={B8B47083-237D-44e7-8286-FAD882674D90}]Decrypt the
; ..\mcal\McalLib\ssc\src\McalLib.c	  1023       password[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1024    Password = Password ^ (uint32)MCAL_ENDINIT_WDT_PWD_INV;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1025  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1026    /* [cover parentID={8E0B1A74-D0AD-4d98-A6D4-7AB519A9F963}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1027       Return password[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1028    return (Password);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1029  }
	ret
.L474:
	
__Mcal_GetPeripheralEndInitPassword_function_end:
	.size	Mcal_GetPeripheralEndInitPassword,__Mcal_GetPeripheralEndInitPassword_function_end-Mcal_GetPeripheralEndInitPassword
.L248:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_SetPeripheralEndInitPassword',code,cluster('Mcal_SetPeripheralEndInitPassword')
	.sect	'.text.McalLib.Mcal_SetPeripheralEndInitPassword'
	.align	2
	
	.global	Mcal_SetPeripheralEndInitPassword

; ..\mcal\McalLib\ssc\src\McalLib.c	  1030  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1031  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1032  ** Traceability     :[cover parentID={1C3749D6-0FFF-4339-B267-3167F5938B13}]  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1033  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1034  ** Syntax           : uint32 Mcal_SetPeripheralEndInitPassword                **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1035  **                   (const uint32 Password)                                  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1036  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1037  ** Description      : This interface is used by applications to install a     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1038  **                    password for peripheral endinit protection. The         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1039  **                    interface internally prepares the password (shifting,   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1040  **                    inversion etc.), installs the password and returns the  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1041  **                    previously installed password.                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1042  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1043  ** Service ID       : 0x7C                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1044  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1045  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1046  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1047  ** Reentrancy       : Non Reentrant                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1048  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1049  ** Parameters(in)   : Password - New password to be installed into            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1050  **                    EICON0 register                                         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1051  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1052  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1053  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1054  ** Return value     : Returns the last installed password                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1055  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1056  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1057  uint32 Mcal_SetPeripheralEndInitPassword(const uint32 Password)
; Function Mcal_SetPeripheralEndInitPassword
.L142:
Mcal_SetPeripheralEndInitPassword:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  1058  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1059    uint32 OldPassword;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1060    uint32 NewPassword = (Password & (uint32)IFX_SCU_EICON0_EPW_MSK);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1061  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1062    /* Enter Critical section, to protect write to SCU_EICON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1063    /* [cover parentID={B0865877-FB51-4389-B51E-F3BECC0CD3F0}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1064     * Enter crtical section for updating peripheral endinit password
; ..\mcal\McalLib\ssc\src\McalLib.c	  1065     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1066    SchM_Enter_McalLib_PeripheralEndInit();
	mov	d15,d4
	call	SuspendAllInterrupts
.L678:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1067  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1068    /* Acquire the Spinlock for writing tp SCU_EICCON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1069    /* [cover parentID={BA6A8376-519A-4681-9898-32B3C9AA155A}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1070     * Acquire the Spinlock for writing tp SCU_EICCON0 register
; ..\mcal\McalLib\ssc\src\McalLib.c	  1071     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1072    Mcal_lGetSpinlock(&Mcal_LockAddressEicon0,
	movh.a	a15,#@his(Mcal_LockAddressEicon0)
.L864:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1073                     (uint32)MCAL_SPINLOCK_DEFAULT_TIMEOUT,
	mov	d4,#10000
	lea	a15,[a15]@los(Mcal_LockAddressEicon0)
.L865:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1074                     MCALLIB_SID_SETPERIPHERALENDINIT);
	mov	d5,#124
	mov.aa	a4,a15
	call	Mcal_lGetSpinlock
.L866:
	insert	d4,d15,#0,#14,#18
.L867:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1075  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1076     /* [cover parentID={B2497D28-4A5A-4a41-89E8-B6549080E1E4}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1077    /* Reset ENDINIT protection and update the new password */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1078    OldPassword = Mcal_lUpdatePeripheralEndInit(NewPassword,
; ..\mcal\McalLib\ssc\src\McalLib.c	  1079                                                MCAL_UPDATE_NEWPASSWORD,
	mov	d5,#1
.L868:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1080                                                MCAL_RESETENDINITPROTECTION);
	mov	d6,#0
	call	Mcal_lUpdatePeripheralEndInit
.L680:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1081  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1082    /* Release the Spinlock */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1083    /* [cover parentID={7831D1EA-89DF-4b15-BBAB-425FACCE408B}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1084       Release the Spinlock
; ..\mcal\McalLib\ssc\src\McalLib.c	  1085       [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1086    Mcal_lReleaseSpinlock(&Mcal_LockAddressEicon0);
	mov	d15,d2
	mov.aa	a4,a15
.L679:
	call	Mcal_lReleaseSpinlock
.L681:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1087  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1088    /* Exit Critical section */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1089    /* [cover parentID={FA823BDD-51FD-4043-8D96-8D43F4109756}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1090     * Exit critical section
; ..\mcal\McalLib\ssc\src\McalLib.c	  1091     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1092    SchM_Exit_McalLib_PeripheralEndInit();
	call	ResumeAllInterrupts
.L869:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1093  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1094    /*Return old password*/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1095    /* [cover parentID={61C56107-C8EB-4fbf-9A29-8BEA6DEDBADF}]Return old
; ..\mcal\McalLib\ssc\src\McalLib.c	  1096       password [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1097    return (OldPassword);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1098  }
	mov	d2,d15
	ret
.L475:
	
__Mcal_SetPeripheralEndInitPassword_function_end:
	.size	Mcal_SetPeripheralEndInitPassword,__Mcal_SetPeripheralEndInitPassword_function_end-Mcal_SetPeripheralEndInitPassword
.L253:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_WritePeripEndInitProtReg',code,cluster('Mcal_WritePeripEndInitProtReg')
	.sect	'.text.McalLib.Mcal_WritePeripEndInitProtReg'
	.align	2
	
	.global	Mcal_WritePeripEndInitProtReg

; ..\mcal\McalLib\ssc\src\McalLib.c	  1099  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1100  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1101  ** Traceability     : [cover parentID={382E875A-A388-4f3f-842B-BBD7143DEE70}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1102  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1103  ** Syntax           : Mcal_WritePeripEndInitProtReg                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1104  **                   (volatile void* const RegAddress, const uint32 DataValue)**
; ..\mcal\McalLib\ssc\src\McalLib.c	  1105  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1106  ** Description      :This API is needed to write required values to peripheral**
; ..\mcal\McalLib\ssc\src\McalLib.c	  1107  **                   protected registers by unprotecting to write end-init    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1108  **                   and protecting back to keep protection intact.           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1109  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1110  ** Service ID       : 0x7A                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1111  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1112  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1113  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1114  ** Reentrancy       : Non Reentrant                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1115  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1116  ** Parameters(in)   : RegAddress - Peripheral Endinit protected register      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1117  **                    address.                                                **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1118  **                    DataValue - Value to be written to the register         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1119  **                    located at RegAddress.                                  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1120  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1121  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1122  ** Return value     : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1123  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1124  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1125  void Mcal_WritePeripEndInitProtReg(volatile void* const RegAddress,
; Function Mcal_WritePeripEndInitProtReg
.L144:
Mcal_WritePeripEndInitProtReg:	.type	func
	mov.aa	a15,a4
.L683:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1126                                     const uint32 DataValue)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1127  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1128    /* [cover parentID={AFFF6EC8-965F-4f68-A3DA-BBCC7AE589B1}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1129       If SAFETY Error Check is Enabled[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1130    #if (MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1131    /* [cover parentID={E437DC4F-781A-4f79-B1CC-4C6D0557C31D}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1132        Check if input address is null pointer[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1133    if ((RegAddress) == NULL_PTR)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1134    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1135      /* [cover parentID={55F2F56D-E927-47b0-9B15-38874239EA8D}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1136         Report error MCALLIB_E_PARAM_POINTER[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1137      Mcal_lReportError(MCALLIB_SID_PERIPHERALENDINIT,
; ..\mcal\McalLib\ssc\src\McalLib.c	  1138                        MCALLIB_E_PARAM_POINTER);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1139    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1140    /* [cover parentID={68C78085-FCDC-4bf6-8D36-F75B06543DB5}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1141       If address is not null pointer [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1142    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  1143    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	  1144    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1145      /*Critical section to protect SCU_EICON0 ans SCU_EICON1 registers */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1146      /* [cover parentID={3B162CFE-48A4-41d9-A974-4EB51BFD64AD}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1147       * Enter critical section for write peripheral endinit protection reg
; ..\mcal\McalLib\ssc\src\McalLib.c	  1148       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1149      SchM_Enter_McalLib_PeripheralEndInit();
	mov	d15,d4
	call	SuspendAllInterrupts
.L682:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1150  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1151      /* Acquire the Spinlock for writing tp SCU_EICCON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1152      /* [cover parentID={4AA7F08A-A41E-4f23-85D5-507F6D2CA4DE}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1153       * Acquire the Spinlock for writing tp SCU_EICCON0 register
; ..\mcal\McalLib\ssc\src\McalLib.c	  1154       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1155      Mcal_lGetSpinlock(&Mcal_LockAddressEicon0,
	movh.a	a12,#@his(Mcal_LockAddressEicon0)
.L874:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1156                       (uint32)MCAL_SPINLOCK_DEFAULT_TIMEOUT,
	mov	d4,#10000
	lea	a12,[a12]@los(Mcal_LockAddressEicon0)
.L875:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1157                       MCALLIB_SID_PERIPHERALENDINIT);
	mov	d5,#122
	mov.aa	a4,a12
	call	Mcal_lGetSpinlock
.L876:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1158  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1159      /* Reset Peripheral EndInit protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1160      /* [cover parentID={511EE30E-EAD8-4cff-BBF9-E6D3FC004DEB}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1161       * Reset Peripheral EndInit protection
; ..\mcal\McalLib\ssc\src\McalLib.c	  1162       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1163      (void)Mcal_lUpdatePeripheralEndInit(MCAL_DUMMY_PASSWORD,
	mov	d4,#0
.L877:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1164                                          MCAL_NOUPDATE_PASSWORD,
	mov	d5,d4
.L878:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1165                                          MCAL_RESETENDINITPROTECTION);
	mov	d6,d4
	call	Mcal_lUpdatePeripheralEndInit
.L879:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1166  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1167      /* Update the register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1168      /* [cover parentID={444D88B6-6F28-42d8-A9B3-DC73B0B2CD23}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1169       * Update the register
; ..\mcal\McalLib\ssc\src\McalLib.c	  1170       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1171      /* MISRA2012_RULE_11_5_JUSTIFICATION: Conversion between
; ..\mcal\McalLib\ssc\src\McalLib.c	  1172       * pointer to void and pointer to object due to SFR access. */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1173      /* MISRA2012_RULE_11_3_JUSTIFICATION: Conversion between
; ..\mcal\McalLib\ssc\src\McalLib.c	  1174       * pointers of different object types due to SFR access. */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1175      *((volatile uint32*)RegAddress) = DataValue;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1176  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1177      /* Set Peripheral EndInit protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1178      /* [cover parentID={DD8D453E-0FD7-4e1a-B2C2-C207595CC876}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1179       * Set Peripheral EndInit protection
; ..\mcal\McalLib\ssc\src\McalLib.c	  1180       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1181      (void)Mcal_lUpdatePeripheralEndInit(MCAL_DUMMY_PASSWORD,
	mov	d4,#0
	st.w	[a15],d15
.L880:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1182                                          MCAL_NOUPDATE_PASSWORD,
	mov	d5,d4
.L881:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1183                                          MCAL_SETENDINITPROTECTION);
	mov	d6,#1
	call	Mcal_lUpdatePeripheralEndInit
.L882:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1184      /* Release the Spinlock */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1185      /* [cover parentID={0B9059B2-B68B-4462-92AF-41E0C00856B3}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1186       * Release the Spinlock
; ..\mcal\McalLib\ssc\src\McalLib.c	  1187       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1188      Mcal_lReleaseSpinlock(&Mcal_LockAddressEicon0);
	mov.aa	a4,a12
	call	Mcal_lReleaseSpinlock
.L883:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1189  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1190      /* [cover parentID={1363313D-5FAA-4a8f-853E-AF5A75668F77}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1191       * Exit critical section
; ..\mcal\McalLib\ssc\src\McalLib.c	  1192       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1193      SchM_Exit_McalLib_PeripheralEndInit();
	j	ResumeAllInterrupts
.L479:
	
__Mcal_WritePeripEndInitProtReg_function_end:
	.size	Mcal_WritePeripEndInitProtReg,__Mcal_WritePeripEndInitProtReg_function_end-Mcal_WritePeripEndInitProtReg
.L258:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_GetCpuPhysicalId',code,cluster('Mcal_GetCpuPhysicalId')
	.sect	'.text.McalLib.Mcal_GetCpuPhysicalId'
	.align	2
	
	.global	Mcal_GetCpuPhysicalId

; ..\mcal\McalLib\ssc\src\McalLib.c	  1194    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1195  }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1196  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1197  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1198  ** Traceability     : [cover parentID={32C6BD4E-84D4-4d99-9939-40ACDFBADF92}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1199  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1200  ** Syntax           : uint32 Mcal_GetCpuPhysicalId(void)                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1201  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1202  ** Description      : This interface is used by applications in a multicore   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1203  **                    environment to determine the CPU they are executing on. **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1204  **                    The API returns the contents of CORE_ID register, for   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1205  **                    the core on which it is invoked.                        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1206  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1207  ** Service ID       : 0x8B                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1208  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1209  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1210  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1211  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1212  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1213  ** Parameters(in)   : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1214  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1215  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1216  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1217  ** Return value     : Physical Core ID for the CPU on which this API is called**
; ..\mcal\McalLib\ssc\src\McalLib.c	  1218  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1219  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1220  uint32 Mcal_GetCpuPhysicalId(void)
; Function Mcal_GetCpuPhysicalId
.L146:
Mcal_GetCpuPhysicalId:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  1221  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1222    /* [cover parentID={67B47B7B-BCC4-4e5f-9A7E-1E171742E615}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1223       Read the CPU_CORE_ID register to retrieve the CoreId [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1224    uint32 CoreId = (uint32)MFCR(CPU_CORE_ID);
	mfcr	d2,#65052
.L684:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1225    /* [cover parentID={2E22F876-FA68-47b1-BFFC-3EBDC68F5C10}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1226       Return CoreId[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1227    return(CoreId);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1228  }
	ret
.L484:
	
__Mcal_GetCpuPhysicalId_function_end:
	.size	Mcal_GetCpuPhysicalId,__Mcal_GetCpuPhysicalId_function_end-Mcal_GetCpuPhysicalId
.L263:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_GetGlobalDsprAddress',code,cluster('Mcal_GetGlobalDsprAddress')
	.sect	'.text.McalLib.Mcal_GetGlobalDsprAddress'
	.align	2
	
	.global	Mcal_GetGlobalDsprAddress

; ..\mcal\McalLib\ssc\src\McalLib.c	  1229  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1230  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1231  ** Traceability     : [cover parentID={19A3024B-65AF-4139-95D6-AF25CB4A476E}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1232  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1233  ** Syntax           : uint32 Mcal_GetGlobalDsprAddress                        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1234  **                    (                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1235  **                     const uint32 CpuId,                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1236  **                     const uint32 LocalDsprAddress                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1237  **                    )                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1238  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1239  ** Description      : This interface is used by applications in a multicore   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1240  **                    environment to determine the global address of a local  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1241  **                    DSPR address of a specified CPU. A value 0 is returned  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1242  **                    in case an invalid input argument is passed             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1243  **                    (incorrect CpuId, local DSPR address)                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1244  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1245  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1246  ** Service ID       : 0x7B                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1247  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1248  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1249  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1250  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1251  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1252  ** Parameters(in)   : CpuId - Physical Core ID                                **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1253  **                    LocalDsprAddress - Local DSPR address for which global  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1254  **                    DSPR address is returned                                **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1255  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1256  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1257  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1258  ** Return value     : 0: Invalid input parameter passed                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1259  **                    Else, value returned the Global DSPR address            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1260  **                    If passed parameter is valid global DSPR address        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1261  **                    corresponding to passed CPU id then return              **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1262  **                    passed address as is.                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1263  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1264  uint32 Mcal_GetGlobalDsprAddress
; Function Mcal_GetGlobalDsprAddress
.L148:
Mcal_GetGlobalDsprAddress:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  1265  (const uint32 CpuId, const uint32 LocalDsprAddress)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1266  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1267    /* Obtain the memory segment information to which
; ..\mcal\McalLib\ssc\src\McalLib.c	  1268     * LocalDsprAddress belongs to */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1269    /* [cover parentID={5AB06FBB-9343-4fe2-AEC4-6F40F2290CA4}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1270     * Extract the memory segment to which DSPR address belongs
; ..\mcal\McalLib\ssc\src\McalLib.c	  1271     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1272    uint8 DsprMsb = (uint8)((LocalDsprAddress & (uint32)MCAL_DSPR_GLOBAL_MASK) >>
	sh	d0,d5,#-28
.L686:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1273                            MCAL_SHIFT_UPPER_NIBBLE);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1274  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1275    uint32  RetGlobalAddress = MCAL_INVALID_ARGUMENT;
	mov	d2,#0
.L687:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1276  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1277    /* Is the input physical CpuId a valid value */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1278    /* [cover parentID={4601D034-5B02-4e38-8306-3B0B47BFD6E2}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1279     * Check the CpuID is not invalid (Core 5 or greater than or equal
; ..\mcal\McalLib\ssc\src\McalLib.c	  1280     * to maximum number of cores)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1281     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1282    if((CpuId != (uint32)MCAL_INVALID_CPU_ID_5) &&
	jeq	d4,#5,.L27
.L892:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1283        (CpuId <= (uint32)MCAL_COREID_MAX_VALUE))
	jge.u	d4,#7,.L28
.L893:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1284    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1285      /* Is LocalDsprAddress within the DSPR address range */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1286      /* The check against the starting address of DSPR memory range isnlt
; ..\mcal\McalLib\ssc\src\McalLib.c	  1287       * done as its base address starts from 0xM0000000 - 0xM0018000,
; ..\mcal\McalLib\ssc\src\McalLib.c	  1288       * where 'M' corresponds to memory segment
; ..\mcal\McalLib\ssc\src\McalLib.c	  1289       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1290      /* [cover parentID={7584D010-0D1C-4cec-8371-A89B322A1E92}]Local
; ..\mcal\McalLib\ssc\src\McalLib.c	  1291         DsprAddress within the DSPR address range[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1292      if((LocalDsprAddress & (uint32)MCAL_DSPR_GLOBAL_MASK_N) <=
; ..\mcal\McalLib\ssc\src\McalLib.c	  1293          Mcal_kDsprEndAddress[CpuId])
	insert	d1,d5,#0,#28,#4
	fcall	.cocofun_6
.L894:
	addsc.a	a15,a15,d4,#2
	ld.w	d15,[a15]
.L895:
	jlt.u	d15,d1,.L29
.L896:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1294      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1295        /* Does LocalDsprAddress belong to memory segment 0xD */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1296        /* [cover parentID={C021555F-7DEF-4011-8235-C90C2DE91FF3}]LocalDspr
; ..\mcal\McalLib\ssc\src\McalLib.c	  1297           Address belong to memory segment 0xD[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1298        if (DsprMsb == (uint8)MCAL_VALID_DSPR_MSB)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1299        {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1300          /* Compute the Global DSPR address */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1301          /* [cover parentID={68068C41-3E2A-4f2c-ADF7-D527D8A53EF7}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1302              Compute globalDspraddress[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1303          RetGlobalAddress =
; ..\mcal\McalLib\ssc\src\McalLib.c	  1304                          ((LocalDsprAddress & (uint32)MCAL_DSPR_GLOBAL_MASK_N) |
; ..\mcal\McalLib\ssc\src\McalLib.c	  1305                          ((uint32)Mcal_kCoreXMemSegment[CpuId] <<
	fcall	.cocofun_8
.L897:
	mov	d15,#13
	ld.bu	d3,[a15]
.L898:
	jne	d15,d0,.L30
.L899:
	sh	d2,d3,#28
.L900:
	or	d2,d1
.L29:
.L28:
.L27:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1306                            MCAL_SHIFT_UPPER_NIBBLE));
; ..\mcal\McalLib\ssc\src\McalLib.c	  1307        }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1308        else
; ..\mcal\McalLib\ssc\src\McalLib.c	  1309        {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1310          /* Validate if DSPR address's memory segment belongs to a
; ..\mcal\McalLib\ssc\src\McalLib.c	  1311           * valid CPUx memory segment */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1312          /*if ((DsprMsb != (uint8)MCAL_MEM_SEGMENT2_MSB) &&
; ..\mcal\McalLib\ssc\src\McalLib.c	  1313              (DsprMsb <= (uint8)MCAL_CORE0_MEM_SEGMENT) &&
; ..\mcal\McalLib\ssc\src\McalLib.c	  1314              (DsprMsb >= Mcal_kCoreXMemSegment[MCAL_COREID_MAX_VALUE]))*/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1315          /* [cover parentID={B6E52E52-6E44-4bdf-95CD-25E11748601C}]GlobalDspr
; ..\mcal\McalLib\ssc\src\McalLib.c	  1316          address memory segment belong to valid CPU memory segment[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1317          if(DsprMsb == Mcal_kCoreXMemSegment[CpuId])
; ..\mcal\McalLib\ssc\src\McalLib.c	  1318          {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1319            /*[cover parentID={EA7BB3D2-D189-4931-80BF-6C6E091157F4}]Return
; ..\mcal\McalLib\ssc\src\McalLib.c	  1320                   GlobalDsprAddress[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1321            RetGlobalAddress = LocalDsprAddress;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1322          }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1323        }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1324      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1325    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1326    /* [cover parentID={EA7BB3D2-D189-4931-80BF-6C6E091157F4}]Return
; ..\mcal\McalLib\ssc\src\McalLib.c	  1327       GlobalDsprAddress[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1328    /* [cover parentID={9E058E8D-CE5F-4aeb-A4ED-BA0B0CCFE5B6}]Return
; ..\mcal\McalLib\ssc\src\McalLib.c	  1329       GlobalDspraddress 0[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1330    return (RetGlobalAddress);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1331  }
	ret
.L30:
	eq	d15,d0,d3
.L901:
	cmov	d2,d15,d5
	ret
.L486:
	
__Mcal_GetGlobalDsprAddress_function_end:
	.size	Mcal_GetGlobalDsprAddress,__Mcal_GetGlobalDsprAddress_function_end-Mcal_GetGlobalDsprAddress
.L268:
	; End of function
	
	.sdecl	'.text.McalLib..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.McalLib..cocofun_8'
	.align	2
; Function .cocofun_8
.L150:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:1
	movh.a	a15,#@his(Mcal_kCoreXMemSegment)
.L696:
	lea	a15,[a15]@los(Mcal_kCoreXMemSegment)
.L1192:
	addsc.a	a15,a15,d4,#0
.L1193:
	fret
.L423:
	; End of function
	.sdecl	'.text.McalLib..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.McalLib..cocofun_6'
	.align	2
; Function .cocofun_6
.L152:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0
	movh.a	a15,#@his(Mcal_kDsprEndAddress)
.L685:
	lea	a15,[a15]@los(Mcal_kDsprEndAddress)
.L1181:
	fret
.L413:
	; End of function
	.sdecl	'.text.McalLib.Mcal_GetLocalDsprAddress',code,cluster('Mcal_GetLocalDsprAddress')
	.sect	'.text.McalLib.Mcal_GetLocalDsprAddress'
	.align	2
	
	.global	Mcal_GetLocalDsprAddress

; ..\mcal\McalLib\ssc\src\McalLib.c	  1332  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1333  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1334  ** Traceability     : [cover parentID={6A4C10C1-2C3C-468f-8F33-C02634550889}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1335  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1336  ** Syntax           : uint32 Mcal_GetLocalDsprAddress                         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1337  **                    (                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1338  **                     const uint32 GlobalDsprAddress                         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1339  **                    )                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1340  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1341  ** Description      : This API is used by applications in a multicore         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1342  **                    environment to determine the local CPU address of a     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1343  **                    global DSPR address of the CPU, this interface is       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1344  **                    invoked on. A value 0 is returned in case an invalid    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1345  **                    input argument is passed(incorrect global DSPR address) **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1346  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1347  ** Service ID       : 0x83                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1348  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1349  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1350  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1351  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1352  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1353  ** Parameters(in)   : GlobalDsprAddress - Global DSPR address                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1354  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1355  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1356  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1357  ** Return value     : 0: Invalid input parameter passed                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1358  **                    Else, value returned the local DSPR address             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1359  **                    If passed parameter is valid local DSPR address         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1360  **                    corresponding to currently executing CPU then routine   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1361  **                    shall return passed address as is                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1362  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1363  uint32 Mcal_GetLocalDsprAddress(const uint32 GlobalDsprAddress)
; Function Mcal_GetLocalDsprAddress
.L154:
Mcal_GetLocalDsprAddress:	.type	func
	mov	d10,d4
.L690:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1364  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1365    uint32 DsprEndAddress;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1366    /* Obtain the memory segment information to which
; ..\mcal\McalLib\ssc\src\McalLib.c	  1367     * GlobalDsprAddress belongs to */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1368    /* [cover parentID={F43CEA65-A9BE-4051-99B2-D7AA361231AB}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1369     * Extract the memory segment to which DSPR address belongs
; ..\mcal\McalLib\ssc\src\McalLib.c	  1370     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1371    uint8 DsprMsb = (uint8)((GlobalDsprAddress & (uint32)MCAL_DSPR_GLOBAL_MASK) >>
	sh	d8,d10,#-28
.L689:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1372                            MCAL_SHIFT_UPPER_NIBBLE);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1373  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1374    uint32 RetLocalAddress = MCAL_INVALID_ARGUMENT;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1375    /* [cover parentID={F1D77D46-E71E-461c-BB86-B438B9716DAC}]Check for CPUIndex
; ..\mcal\McalLib\ssc\src\McalLib.c	  1376       [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1377    uint32 CoreIndex = Mcal_lGetCpuIndex();
	mov	d9,#0
	call	Mcal_lGetCpuIndex
.L688:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1378  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1379    /* Validate if Global DSPR address's memory segment is a
; ..\mcal\McalLib\ssc\src\McalLib.c	  1380     *  valid CPUx memory segment */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1381    /* [cover parentID={E163BFCC-7444-4c74-9762-D50D80ACA3B9}]Is
; ..\mcal\McalLib\ssc\src\McalLib.c	  1382       GlobalDsprAddress's memory segment a valid CPU memory segment[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1383    if ((DsprMsb != (uint8)MCAL_MEM_SEGMENT2_MSB) &&
	jeq	d8,#2,.L34
.L906:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1384        (DsprMsb <= (uint8)MCAL_CORE0_MEM_SEGMENT) &&
	add	d15,d8,#-1
	extr.u	d15,d15,#0,#8
.L907:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1385        (DsprMsb >= Mcal_kCoreXMemSegment[MCAL_COREID_MAX_VALUE]))
	jge.u	d15,#7,.L35
.L908:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1386    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1387      /* Is GlobalDsprAddress within the DSPR address range */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1388      /* The check against the starting address of DSPR memory range isn't
; ..\mcal\McalLib\ssc\src\McalLib.c	  1389       * done as its base address starts from 0xM0000000 - 0xM0018000, where
; ..\mcal\McalLib\ssc\src\McalLib.c	  1390       * 'M' corresponds to memory segment
; ..\mcal\McalLib\ssc\src\McalLib.c	  1391       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1392      /* [cover parentID={F490A20E-4BB0-46d3-9E7E-78D3E82E289D}]Is
; ..\mcal\McalLib\ssc\src\McalLib.c	  1393         GlobalDsprAddress address within the DSPR address range[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1394      if((GlobalDsprAddress & (uint32)MCAL_DSPR_GLOBAL_MASK_N) <=
	insert	d0,d10,#0,#28,#4
.L909:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1395          Mcal_kDsprEndAddress[MCAL_CORE0_MEM_SEGMENT - DsprMsb])
	rsub	d15,d8,#7
	fcall	.cocofun_6
.L910:
	addsc.a	a15,a15,d15,#2
	ld.w	d15,[a15]
.L911:
	jlt.u	d15,d0,.L36
.L912:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1396      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1397        /* Compute Local DSPR address */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1398        /* [cover parentID={CE9639D9-9374-49f3-950A-A8E65048B103}]Compute
; ..\mcal\McalLib\ssc\src\McalLib.c	  1399            Local DSPR address[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1400        RetLocalAddress =
; ..\mcal\McalLib\ssc\src\McalLib.c	  1401                          ((GlobalDsprAddress & (uint32)MCAL_DSPR_GLOBAL_MASK_N) |
; ..\mcal\McalLib\ssc\src\McalLib.c	  1402                           (uint32)MCAL_LOCAL_DSPR_BASE_ADDR);
	movh	d9,#53248
.L913:
	or	d9,d0
	j	.L37
.L35:
.L34:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1403      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1404  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1405    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1406    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  1407    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1408      /* [cover parentID={26D4B584-E7D8-493b-B524-16A6C479D2BF}]GlobalDspr
; ..\mcal\McalLib\ssc\src\McalLib.c	  1409          Address belong to memory segment 0xD[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1410      if(DsprMsb == (uint8)MCAL_VALID_DSPR_MSB)
	mov	d15,#13
.L914:
	jne	d15,d8,.L38
.L915:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1411      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1412        /* Calculate the DSPR end address */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1413        #if ( MCAL_NO_OF_CORES > 5U )
; ..\mcal\McalLib\ssc\src\McalLib.c	  1414        if (CoreIndex == MCAL_INVALID_CPU_ID_5)
	jne	d2,#5,.L39
.L916:
	mov	d15,#32767
.L691:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1415        {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1416          DsprEndAddress = Mcal_kDsprEndAddress[MCAL_MAX_CORES];
	addih	d15,d15,#1
	j	.L40
.L39:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1417        }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1418        else
; ..\mcal\McalLib\ssc\src\McalLib.c	  1419        #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	  1420        {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1421          DsprEndAddress = Mcal_kDsprEndAddress[CoreIndex];
	fcall	.cocofun_6
.L692:
	addsc.a	a15,a15,d2,#2
	ld.w	d15,[a15]
.L40:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1422        }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1423  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1424        /* [cover parentID={7056C288-3337-4661-9838-32727B69CAED}]Input
; ..\mcal\McalLib\ssc\src\McalLib.c	  1425            parameter is valid localDspraddress with executing CPU
; ..\mcal\McalLib\ssc\src\McalLib.c	  1426            [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1427        if((GlobalDsprAddress & (uint32)MCAL_DSPR_GLOBAL_MASK_N) <=
	insert	d0,d10,#0,#28,#4
.L917:
	lt.u	d15,d15,d0
.L693:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1428           DsprEndAddress)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1429        {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1430          /* [cover parentID={A13DD372-FA55-4fa2-9DE6-A9BE2182505B}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1431             Return LocalDsprAddress[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1432          RetLocalAddress = GlobalDsprAddress;
	cmovn	d9,d15,d10
.L38:
.L37:
.L36:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1433        }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1434  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1435      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1436    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1437    /* [cover parentID={A13DD372-FA55-4fa2-9DE6-A9BE2182505B}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1438       Return LocalDsprAddress[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1439    /* [cover parentID={C8838677-BE78-49d8-8448-7EEE5C587AC8}]Return
; ..\mcal\McalLib\ssc\src\McalLib.c	  1440       LocalDsprAddress 0[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1441    return (RetLocalAddress);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1442  }
	mov	d2,d9
	ret
.L495:
	
__Mcal_GetLocalDsprAddress_function_end:
	.size	Mcal_GetLocalDsprAddress,__Mcal_GetLocalDsprAddress_function_end-Mcal_GetLocalDsprAddress
.L273:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_GetGlobalPsprAddress',code,cluster('Mcal_GetGlobalPsprAddress')
	.sect	'.text.McalLib.Mcal_GetGlobalPsprAddress'
	.align	2
	
	.global	Mcal_GetGlobalPsprAddress

; ..\mcal\McalLib\ssc\src\McalLib.c	  1443  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1444  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1445  ** Traceability     : [cover parentID={3FCAA99A-4260-4c7e-9224-EAE68F1461C6}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1446  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1447  ** Syntax           : uint32 Mcal_GetGlobalPsprAddress                        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1448  **                    (                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1449  **                     const uint32 CpuId,                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1450  **                     const uint32 LocalPsprAddress                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1451  **                    )                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1452  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1453  ** Description      : This interface is used by applications in a multicore   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1454  **                    environment to determine the global address of a local  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1455  **                    PSPR address of a specified CPU. A value 0 is returned  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1456  **                    in case an invalid input argument is passed             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1457  **                    (incorrect CpuId, local PSPR address)                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1458  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1459  ** Service ID       : 0x7D                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1460  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1461  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1462  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1463  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1464  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1465  ** Parameters(in)   : CpuId - Physical Core ID                                **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1466  **                    LocalPsprAddress - Local PSPR address for which global  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1467  **                    PSPR address is returned                                **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1468  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1469  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1470  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1471  ** Return value     : 0: Invalid input parameter passed                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1472  **                    Else, value returned the Global PSPR address            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1473  **                    If passed parameter is valid Global PSPR address        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1474  **                    corresponding to currently executing CPU then routine   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1475  **                    shall return passed address as is                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1476  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1477  uint32 Mcal_GetGlobalPsprAddress(const uint32 CpuId,
; Function Mcal_GetGlobalPsprAddress
.L156:
Mcal_GetGlobalPsprAddress:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  1478                                   const uint32 LocalPsprAddress)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1479  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1480    /* Obtain the memory segment information to which
; ..\mcal\McalLib\ssc\src\McalLib.c	  1481     * LocalPsprAddress belongs to */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1482    /* [cover parentID={403F7F86-1A80-48c4-A0EA-8E26D88266DB}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1483     * Extract the memory segment to which PSPR address belongs
; ..\mcal\McalLib\ssc\src\McalLib.c	  1484     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1485    uint8 PsprMsb = (uint8)((LocalPsprAddress & (uint32)MCAL_PSPR_GLOBAL_MASK) >>
	sh	d0,d5,#-28
.L698:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1486                            MCAL_SHIFT_UPPER_NIBBLE);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1487    uint32 RetGlobalAddress = MCAL_INVALID_ARGUMENT;
	mov	d2,#0
.L694:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1488    uint32 LocalRetAddress = LocalPsprAddress;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1489  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1490    /* Is the input physical CpuId a valid value */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1491    /* [cover parentID={7107E3A8-43A4-4d74-9810-7883B9E33371}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1492     * Check the CpuID is not invalid (Core 5 or greater than or equal to maximum
; ..\mcal\McalLib\ssc\src\McalLib.c	  1493     * number of cores)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1494     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1495    if((CpuId != (uint32)MCAL_INVALID_CPU_ID_5) &&
	jeq	d4,#5,.L43
.L922:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1496        (CpuId <= (uint32)MCAL_COREID_MAX_VALUE))
	jge.u	d4,#7,.L44
.L923:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1497    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1498      /* Does LocalPsprAddress belong to memory segment 0xC */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1499      /* [cover parentID={3B145523-EEA5-4b96-9540-53E3228BB612}]Local
; ..\mcal\McalLib\ssc\src\McalLib.c	  1500          PsprAddress belong to memory segment 0xC[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1501      if (PsprMsb == (uint8)MCAL_VALID_PSPR_MSB)
	mov	d15,#12
.L924:
	jne	d15,d0,.L45
.L925:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1502      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1503        /* Is LocalPsprAddress within the PSPR address range */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1504        /* [cover parentID={E2C43B5E-E279-404a-8AD6-1919A5A32CE7}]Local
; ..\mcal\McalLib\ssc\src\McalLib.c	  1505           PsprAddress within the PSPR address range[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1506        if (LocalRetAddress <= Mcal_kPsprLocalEndAddress[CpuId])
	movh.a	a15,#@his(Mcal_kPsprLocalEndAddress)
	lea	a15,[a15]@los(Mcal_kPsprLocalEndAddress)
.L926:
	addsc.a	a15,a15,d4,#2
	ld.w	d15,[a15]
.L927:
	jlt.u	d15,d5,.L46
.L928:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1507        {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1508          /* Compute the Global PSPR address */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1509          /* [cover parentID={9718F7E1-972D-4d85-B1D3-19833108A29D}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1510              Compute GlobalPSPR address[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1511          RetGlobalAddress =
; ..\mcal\McalLib\ssc\src\McalLib.c	  1512            (uint32)((LocalRetAddress & (uint32)MCAL_PSPR_GLOBAL_MASK_N) |
; ..\mcal\McalLib\ssc\src\McalLib.c	  1513            (((uint32)Mcal_kCoreXMemSegment[CpuId] << MCAL_SHIFT_UPPER_NIBBLE)
	insert	d2,d5,#0,#28,#4
	fcall	.cocofun_2
.L695:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1514            | Mcal_kPsprGlobalBaseAddress[CpuId]));
	sh	d15,d15,#28
	fcall	.cocofun_3
.L699:
	or	d15,d0
.L704:
	or	d2,d15
.L46:
.L44:
.L43:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1515        }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1516      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1517      else
; ..\mcal\McalLib\ssc\src\McalLib.c	  1518      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1519        /* Validate if PSPR address's memory segment is a
; ..\mcal\McalLib\ssc\src\McalLib.c	  1520         * valid Global CPUx memory segment */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1521        /*[cover parentID={D48BCD3E-A39E-41fd-ADE8-80102F454106}]PSPR address
; ..\mcal\McalLib\ssc\src\McalLib.c	  1522            memory segment is a valid Global CPUx memory segment[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1523        if (PsprMsb == Mcal_kCoreXMemSegment[CpuId])
; ..\mcal\McalLib\ssc\src\McalLib.c	  1524        {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1525          LocalRetAddress = (LocalRetAddress &
; ..\mcal\McalLib\ssc\src\McalLib.c	  1526                             (uint32)MCAL_PSPR_GLOBAL_MASK_N);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1527          /* [cover parentID={373CFC21-BBFA-422f-B29A-345340C106B9}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1528             Check if local PSPR address is more than or equal to global
; ..\mcal\McalLib\ssc\src\McalLib.c	  1529             PSPR base address and less than or equal to global PSPR end
; ..\mcal\McalLib\ssc\src\McalLib.c	  1530             address [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1531          if((LocalRetAddress >= Mcal_kPsprGlobalBaseAddress[CpuId])  &&
; ..\mcal\McalLib\ssc\src\McalLib.c	  1532              (LocalRetAddress <= Mcal_kPsprGlobalEndAddress[CpuId]))
; ..\mcal\McalLib\ssc\src\McalLib.c	  1533          {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1534            /* [cover parentID={14A6F0A2-A944-4aaa-854F-0E8C66FEA20A}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1535                Return GlobalPSPR address[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1536            RetGlobalAddress = LocalPsprAddress;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1537          }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1538        }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1539      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1540    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1541    /* [cover parentID={14A6F0A2-A944-4aaa-854F-0E8C66FEA20A}]Return GlobalPSPR
; ..\mcal\McalLib\ssc\src\McalLib.c	  1542       address[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1543    /* [cover parentID={B3D4FDB4-1431-4344-8002-3B3FD3DBE383}]Return GlobalPSPR
; ..\mcal\McalLib\ssc\src\McalLib.c	  1544       address 0[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1545    return (RetGlobalAddress);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1546  }
	ret
.L45:
	fcall	.cocofun_2
.L929:
	jne	d15,d0,.L48
.L702:
	insert	d15,d5,#0,#28,#4
	fcall	.cocofun_3
.L701:
	jlt.u	d15,d0,.L49
.L930:
	movh.a	a15,#@his(Mcal_kPsprGlobalEndAddress)
	lea	a15,[a15]@los(Mcal_kPsprGlobalEndAddress)
.L931:
	addsc.a	a15,a15,d4,#2
	ld.w	d0,[a15]
.L932:
	lt.u	d15,d0,d15
.L703:
	cmovn	d2,d15,d5
.L49:
.L48:
	ret
.L502:
	
__Mcal_GetGlobalPsprAddress_function_end:
	.size	Mcal_GetGlobalPsprAddress,__Mcal_GetGlobalPsprAddress_function_end-Mcal_GetGlobalPsprAddress
.L278:
	; End of function
	
	.sdecl	'.text.McalLib..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.McalLib..cocofun_3'
	.align	2
; Function .cocofun_3
.L158:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	movh.a	a15,#@his(Mcal_kPsprGlobalBaseAddress)
.L700:
	lea	a15,[a15]@los(Mcal_kPsprGlobalBaseAddress)
.L1165:
	addsc.a	a15,a15,d4,#2
	ld.w	d0,[a15]
.L1166:
	fret
.L398:
	; End of function
	.sdecl	'.text.McalLib..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.McalLib..cocofun_2'
	.align	2
; Function .cocofun_2
.L160:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0
	fcall	.cocofun_8
.L697:
	ld.bu	d15,[a15]
.L1160:
	fret
.L393:
	; End of function
	.sdecl	'.text.McalLib.Mcal_GetLocalPsprAddress',code,cluster('Mcal_GetLocalPsprAddress')
	.sect	'.text.McalLib.Mcal_GetLocalPsprAddress'
	.align	2
	
	.global	Mcal_GetLocalPsprAddress

; ..\mcal\McalLib\ssc\src\McalLib.c	  1547  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1548  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1549  ** Traceability     : [cover parentID={CD35B780-C410-4f80-98F4-722831388424}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1550  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1551  ** Syntax           : uint32 Mcal_GetLocalPsprAddress                         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1552  **                    (                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1553  **                     const  uint32 GlobalPsprAddress                        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1554  **                    )                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1555  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1556  ** Description      : This API is used by applications in a multicore         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1557  **                    environment to determine the local CPU address of a     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1558  **                    global PSPR address of the CPU, this interface is       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1559  **                    invoked on. A value 0 is returned in case an invalid    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1560  **                    input argument is passed(incorrect global PSPR address) **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1561  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1562  ** Service ID       : 0x84                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1563  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1564  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1565  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1566  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1567  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1568  ** Parameters(in)   : GlobalPsprAddress - Global PSPR address                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1569  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1570  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1571  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1572  ** Return value     : 0: Invalid input parameter passed                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1573  **                    Else, value returned the local PSPR address             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1574  **                    If passed parameter is valid local PSPR address         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1575  **                    corresponding to currently executing CPU then routine   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1576  **                    shall return passed address as is                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1577  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1578  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1579  uint32 Mcal_GetLocalPsprAddress(const uint32 GlobalPsprAddress)
; Function Mcal_GetLocalPsprAddress
.L162:
Mcal_GetLocalPsprAddress:	.type	func
	mov	d8,d4
.L706:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1580  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1581    /* Obtain the memory segment information to which
; ..\mcal\McalLib\ssc\src\McalLib.c	  1582     * GlobalPsprAddress belongs to */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1583    /* [cover parentID={C88A6DFC-0AA1-4b7f-92E2-D40B9CEBF72B}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1584     * Compute an PSPR global end address based on available core
; ..\mcal\McalLib\ssc\src\McalLib.c	  1585     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1586    /* [cover parentID={8D55C24F-2536-4651-B221-B3C2E1DAF6BF}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1587     *  Compute an PSPR global start address based on available core
; ..\mcal\McalLib\ssc\src\McalLib.c	  1588     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1589    /* [cover parentID={3A0405BB-A65F-46b5-A4DC-64363E713D9F}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1590     * Compute an PSPR local end address based on available core
; ..\mcal\McalLib\ssc\src\McalLib.c	  1591     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1592    /* [cover parentID={2C9717B8-872D-46ac-88C1-195339372B6E}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1593     * Compute Local PSPR address
; ..\mcal\McalLib\ssc\src\McalLib.c	  1594     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1595    uint8 PsprMsb = (uint8)((GlobalPsprAddress & (uint32)MCAL_PSPR_GLOBAL_MASK) >>
	sh	d9,d8,#-28
.L707:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1596                            MCAL_SHIFT_UPPER_NIBBLE);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1597    uint32 RetLocalAddress = MCAL_INVALID_ARGUMENT;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1598    uint32 LocalRetAddress = GlobalPsprAddress;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1599    /* [cover parentID={88AD1AD5-66D4-4114-BC45-CB7F0111D626}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1600       Retrieve CPU index[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1601    uint32 CpuIndex = Mcal_lGetCpuIndex();
	mov	d10,#0
	call	Mcal_lGetCpuIndex
.L705:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1602  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1603    /* Validate if Global PSPR address's memory segment is a
; ..\mcal\McalLib\ssc\src\McalLib.c	  1604     * valid CPUx memory segment */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1605    /* [cover parentID={E45A508B-6870-4523-8C60-3D302AA693A4}]Global PSPR
; ..\mcal\McalLib\ssc\src\McalLib.c	  1606        address's memory segment is a valid CPUx memory segment[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1607    if ((PsprMsb != (uint8)MCAL_MEM_SEGMENT2_MSB) &&
	jeq	d9,#2,.L52
.L937:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1608        (PsprMsb <= (uint8)MCAL_CORE0_MEM_SEGMENT) &&
	add	d15,d9,#-1
	extr.u	d15,d15,#0,#8
.L938:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1609        (PsprMsb >= Mcal_kCoreXMemSegment[(MCAL_COREID_MAX_VALUE)]))
	jge.u	d15,#7,.L53
.L939:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1610    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1611  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1612      LocalRetAddress = (LocalRetAddress & (uint32)MCAL_PSPR_GLOBAL_MASK_N);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1613      /* Is GlobalPsprAddress within the PSPR address range */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1614      /* [cover parentID={0A6EDA28-0C9F-4f61-BE7A-CF5254FC561E}]GlobalPspr
; ..\mcal\McalLib\ssc\src\McalLib.c	  1615          Address within the PSPR address range[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1616      if((LocalRetAddress >= Mcal_kPsprGlobalBaseAddress
; ..\mcal\McalLib\ssc\src\McalLib.c	  1617          [MCAL_CORE0_MEM_SEGMENT - PsprMsb]) && (LocalRetAddress <=
	rsub	d15,d9,#7
	movh.a	a15,#@his(Mcal_kPsprGlobalBaseAddress)
.L940:
	sh	d15,#2
	lea	a15,[a15]@los(Mcal_kPsprGlobalBaseAddress)
.L941:
	addsc.a	a15,a15,d15,#0
.L942:
	insert	d0,d8,#0,#28,#4
.L708:
	ld.w	d1,[a15]
.L943:
	jlt.u	d0,d1,.L54
.L944:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1618              Mcal_kPsprGlobalEndAddress[MCAL_CORE0_MEM_SEGMENT - PsprMsb]))
	movh.a	a15,#@his(Mcal_kPsprGlobalEndAddress)
	lea	a15,[a15]@los(Mcal_kPsprGlobalEndAddress)
.L945:
	addsc.a	a15,a15,d15,#0
	ld.w	d15,[a15]
.L946:
	jlt.u	d15,d0,.L55
.L947:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1619      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1620        /* Compute Local PSPR address */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1621        /* [cover parentID={2C9717B8-872D-46ac-88C1-195339372B6E}]Compute
; ..\mcal\McalLib\ssc\src\McalLib.c	  1622           Local PSPR address[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1623        RetLocalAddress =
; ..\mcal\McalLib\ssc\src\McalLib.c	  1624                          (uint32)((LocalRetAddress & (uint32)MCAL_PSPR_ADDRESS_MASK_N)
	mov.u	d15,#65535
	addih	d15,d15,#4079
.L948:
	and	d0,d15
.L709:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1625                                   | (uint32)MCAL_LOCAL_PSPR_BASE_ADDR);
	insert	d10,d0,#3,#30,#2
	j	.L56
.L53:
.L52:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1626      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1627    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1628    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  1629    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1630      /* Does GlobalPsprAddress belong to memory segment 0xC */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1631      /* [cover parentID={49C478D4-2415-4338-B240-445B9CA08490}]GlobalPspr
; ..\mcal\McalLib\ssc\src\McalLib.c	  1632          Address belong to memory segment 0xC[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1633      if (PsprMsb == (uint8)MCAL_VALID_PSPR_MSB)
	mov	d15,#12
.L949:
	jne	d15,d9,.L57
.L950:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1634      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1635        /* Is GlobalPsprAddress a valid local PSPR address belonging
; ..\mcal\McalLib\ssc\src\McalLib.c	  1636                          to the executing core */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1637        /* [cover parentID={3A55B630-2EEB-4968-A499-49366CCC5792}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1638           GlobalPsprAddress a valid local PSPR address belonging to the
; ..\mcal\McalLib\ssc\src\McalLib.c	  1639           executing core[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1640        if(LocalRetAddress <= Mcal_kPsprLocalEndAddress[CpuIndex])
	movh.a	a15,#@his(Mcal_kPsprLocalEndAddress)
	lea	a15,[a15]@los(Mcal_kPsprLocalEndAddress)
.L951:
	addsc.a	a15,a15,d2,#2
	ld.w	d15,[a15]
.L952:
	lt.u	d15,d15,d8
.L953:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1641        {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1642          /*[cover parentID={6552A987-2D25-4170-9013-3028CB051E91}]Return
; ..\mcal\McalLib\ssc\src\McalLib.c	  1643              Local PSPR address[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1644          RetLocalAddress = GlobalPsprAddress;
	cmovn	d10,d15,d8
.L57:
.L56:
.L55:
.L54:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1645        }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1646      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1647  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1648    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1649    /* [cover parentID={6552A987-2D25-4170-9013-3028CB051E91}]Return Local PSPR
; ..\mcal\McalLib\ssc\src\McalLib.c	  1650      address[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1651    /* [cover parentID={9D170B96-D5E4-46c2-B034-1A6C9734C791}]Return Local PSPR
; ..\mcal\McalLib\ssc\src\McalLib.c	  1652      address 0[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1653    return (RetLocalAddress);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1654  }
	mov	d2,d10
	ret
.L511:
	
__Mcal_GetLocalPsprAddress_function_end:
	.size	Mcal_GetLocalPsprAddress,__Mcal_GetLocalPsprAddress_function_end-Mcal_GetLocalPsprAddress
.L283:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_DelayTickResolution',code,cluster('Mcal_DelayTickResolution')
	.sect	'.text.McalLib.Mcal_DelayTickResolution'
	.align	2
	
	.global	Mcal_DelayTickResolution

; ..\mcal\McalLib\ssc\src\McalLib.c	  1655  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1656  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1657  ** Traceability     : [cover parentID={106361C3-AE5B-4684-9B55-96C57BF8AC41}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1658  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1659  ** Syntax           : uint32 Mcal_DelayTickResolution (void)                  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1660  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1661  ** Description      : The interface is used by applications to retrieve in    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1662  **                    nanoseconds the resolution of the delay tick (STM timer)**
; ..\mcal\McalLib\ssc\src\McalLib.c	  1663  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1664  ** Service ID       : 0x8C                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1665  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1666  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1667  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1668  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1669  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1670  ** Parameters(in)   : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1671  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1672  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1673  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1674  ** Return value     : Resolution of STM timer delay tick in nanoseconds       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1675  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1676  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1677  uint32 Mcal_DelayTickResolution(void)
; Function Mcal_DelayTickResolution
.L164:
Mcal_DelayTickResolution:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  1678  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1679    /* Return the STM timer resolution is 1ns resolution */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1680    return (Mcal_StmTimerResolution);
	movh.a	a15,#@his(Mcal_StmTimerResolution)
	ld.w	d2,[a15]@los(Mcal_StmTimerResolution)
.L958:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1681  }
	ret
.L518:
	
__Mcal_DelayTickResolution_function_end:
	.size	Mcal_DelayTickResolution,__Mcal_DelayTickResolution_function_end-Mcal_DelayTickResolution
.L288:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_DelayResetTickCalibration',code,cluster('Mcal_DelayResetTickCalibration')
	.sect	'.text.McalLib.Mcal_DelayResetTickCalibration'
	.align	2
	
	.global	Mcal_DelayResetTickCalibration

; ..\mcal\McalLib\ssc\src\McalLib.c	  1682  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1683  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1684  ** Traceability     : [cover parentID={06D30CED-D581-4f9d-88B2-BF39C78EA317}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1685  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1686  ** Syntax           : uint32 Mcal_DelayResetTickCalibration(void)             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1687  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1688  ** Description      : The interface is used by applications to indicate to    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1689  **                    MCALLib that the clock tree has changed. The expectation**
; ..\mcal\McalLib\ssc\src\McalLib.c	  1690  **                    is that as a result of invocation of this service, any  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1691  **                    internally cached tick resolution data is discarded.    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1692  **                    This service is expected to query the clock tree and    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1693  **                    determine the resolution. The interface returns in      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1694  **                    nanoseconds the resolution of the delay tick (STM timer)**
; ..\mcal\McalLib\ssc\src\McalLib.c	  1695  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1696  ** Service ID       : 0x86                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1697  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1698  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1699  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1700  ** Reentrancy       : Non Reentrant                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1701  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1702  ** Parameters(in)   : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1703  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1704  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1705  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1706  ** Return value     : Resolution of delay tick in nanoseconds                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1707  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1708  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1709  uint32 Mcal_DelayResetTickCalibration(void)
; Function Mcal_DelayResetTickCalibration
.L166:
Mcal_DelayResetTickCalibration:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  1710  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1711    /* Added local variable TimerResolution to hold value of STM timer resolution */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1712    uint32 TimerResolution;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1713  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1714    /* [cover parentID={2203708E-A73E-4414-AC15-6ECB9D9A5858}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1715       Calculate STM timer resolution in 1ns resolution[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1716    /* [cover parentID={C59047B9-C9CC-4b5a-B2CD-EBE16E90A41B}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1717    /* Local variable assigned value of Mcal_lDelayResetTickCalibration
; ..\mcal\McalLib\ssc\src\McalLib.c	  1718    to avoid violation of CertC rule : EXP30-C Do not depend on the order 
; ..\mcal\McalLib\ssc\src\McalLib.c	  1719    of evaluation for side effects*/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1720    TimerResolution = Mcal_lDelayResetTickCalibration(MCALLIB_SID_DELAYTICKRESOLUTION);
	mov	d4,#134
	call	Mcal_lDelayResetTickCalibration
.L710:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1721    Mcal_StmTimerResolution = TimerResolution;
	movh.a	a15,#@his(Mcal_StmTimerResolution)
.L963:
	st.w	[a15]@los(Mcal_StmTimerResolution),d2
.L964:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1722  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1723    /* [cover parentID={F8D3FCA6-8D9A-406c-8E9F-28E04CFBFB5B}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1724     Return STM timer resolution[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1725    return (Mcal_StmTimerResolution);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1726  }
	ret
.L519:
	
__Mcal_DelayResetTickCalibration_function_end:
	.size	Mcal_DelayResetTickCalibration,__Mcal_DelayResetTickCalibration_function_end-Mcal_DelayResetTickCalibration
.L293:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_DelayGetTick',code,cluster('Mcal_DelayGetTick')
	.sect	'.text.McalLib.Mcal_DelayGetTick'
	.align	2
	
	.global	Mcal_DelayGetTick

; ..\mcal\McalLib\ssc\src\McalLib.c	  1727  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1728  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1729  ** Traceability     : [cover parentID={B90FF39B-C537-412f-8234-E9B0307B4D62}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1730  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1731  ** Syntax           : uint32 Mcal_DelayGetTick (void)                         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1732  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1733  ** Description      : This interface is used by applications to retrieve the  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1734  **                    latest tick count of the underlying STM timer. The      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1735  **                    latest tick count in STM0_TIM0 is returned by this      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1736  **                    interface. There are two uses of this interface.        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1737  **                    Applications can retrieve a base tick count, add the    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1738  **                    desired delay to the base tick count and arrive at a    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1739  **                    terminal tick count. Applications can also then         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1740  **                    periodically invoke this interface to determine if the  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1741  **                    underlying timer has counted up to the terminal tick    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1742  **                    count.                                                  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1743  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1744  ** Service ID       : 0x8A                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1745  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1746  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1747  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1748  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1749  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1750  ** Parameters(in)   : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1751  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1752  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1753  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1754  ** Return value     : Latest lower 32 bit counter value of STM0 timer         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1755  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1756  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1757  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1758  uint32 Mcal_DelayGetTick(void)
; Function Mcal_DelayGetTick
.L168:
Mcal_DelayGetTick:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  1759  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1760    uint32 DelayTick = MCAL_GET_STM_TICK();
	ld.w	d2,0xf0001010
.L711:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1761    return DelayTick;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1762  }
	ret
.L521:
	
__Mcal_DelayGetTick_function_end:
	.size	Mcal_DelayGetTick,__Mcal_DelayGetTick_function_end-Mcal_DelayGetTick
.L298:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_GetCpuIndex',code,cluster('Mcal_GetCpuIndex')
	.sect	'.text.McalLib.Mcal_GetCpuIndex'
	.align	2
	
	.global	Mcal_GetCpuIndex

; ..\mcal\McalLib\ssc\src\McalLib.c	  1763  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1764  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1765  ** Traceability     :[cover parentID={1800AF01-292F-4937-B75B-A5A1CD450B30}]  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1766  **  [/cover]                                                                  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1767  ** Syntax           : uint32 Mcal_GetCpuIndex (uint32 CpuId)                  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1768  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1769  ** Description      : This interface is used by applications in a multicore   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1770  **                    environment to determine the CPU they are executing on. **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1771  **                    The API returns the contents of CORE_ID register,       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1772  **                   variable, structure for the core on which it is invoked. **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1773  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1774  ** Service ID       : 0x89                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1775  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1776  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1777  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1778  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1779  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1780  ** Parameters(in)   : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1781  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1782  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1783  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1784  ** Return value     : Returns the Core Index corresponding to the input       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1785  **                    physical Core Id. In case the input Core Id is an       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1786  **                    invalid value, then the API returns 0xFFFFFFFF          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1787  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1788  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1789  uint32 Mcal_GetCpuIndex(void)
; Function Mcal_GetCpuIndex
.L170:
Mcal_GetCpuIndex:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  1790  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1791    uint32 CpuIndex = Mcal_lGetCpuIndex();
	j	Mcal_lGetCpuIndex
.L523:
	
__Mcal_GetCpuIndex_function_end:
	.size	Mcal_GetCpuIndex,__Mcal_GetCpuIndex_function_end-Mcal_GetCpuIndex
.L303:
	; End of function
	
	.sdecl	'.text.McalLib.McalLib_GetVersionInfo',code,cluster('McalLib_GetVersionInfo')
	.sect	'.text.McalLib.McalLib_GetVersionInfo'
	.align	2
	
	.global	McalLib_GetVersionInfo

; ..\mcal\McalLib\ssc\src\McalLib.c	  1792  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1793    /* [cover parentID={1CEDCBE5-ECC4-42da-B01B-10D366516465}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1794     * Return the core Id
; ..\mcal\McalLib\ssc\src\McalLib.c	  1795     * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1796    return CpuIndex;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1797  }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1798  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1799  /* [cover parentID={1B3AF15C-FD6B-43a1-8ACB-D951C425066B}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1800     McalLib_GetVersionInfo
; ..\mcal\McalLib\ssc\src\McalLib.c	  1801     [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1802  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1803  ** Traceability     : [cover parentID={79233180-2CAD-4a65-A94F-FEB42233EEC0}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1804  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1805  ** Syntax           : void McalLib_GetVersionInfo                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1806  **                                (Std_VersionInfoType* const versioninfo)    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1807  ** Description      : Function "McalLib_GetVersionInfo" shall have means to   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1808  **                    provide the version information of the MCALLIB module.  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1809  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1810  ** Service ID       : 0x79                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1811  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1812  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1813  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1814  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1815  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1816  ** Parameters(in)   : versioninfo - Pointer to where to store the version     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1817                        information of MCALLIB module.                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1818  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1819  ** Parameters (out) : MCALLIB version information                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1820  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1821  ** Return value     : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1822  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1823  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1824  void  McalLib_GetVersionInfo(Std_VersionInfoType* const versioninfo)
; Function McalLib_GetVersionInfo
.L172:
McalLib_GetVersionInfo:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  1825  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1826    /* [cover parentID={469F845E-C354-42a3-B671-C8CB1FF18715}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1827       If SAFETY Error Check is Enabled[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1828    /* [cover parentID={8DE01E71-D128-4972-B0AF-D082246619F6}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1829       Error check[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1830    #if (MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1831    /* [cover parentID={3E0E8009-CCD1-4404-A60B-EDED50CA216F}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1832     Check if input parameter is null pointer[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1833    if ((versioninfo) == NULL_PTR)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1834    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1835      /* [cover parentID={64253942-C0B1-4ade-BC23-FAA4429C18A8}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1836         Report error MCALLIB_E_PARAM_POINTER[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1837      Mcal_lReportError(MCALLIB_SID_GETVERSIONINFO, MCALLIB_E_PARAM_POINTER);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1838    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1839    /* [cover parentID={75420898-D793-4c5f-94E0-2E9C44DA3DEB}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1840       Have all check passed?[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1841    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  1842    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	  1843    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1844      /* [cover parentID={100FDF35-3B62-4c30-9799-B7F79121EF87}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1845      Retrieve the version information of the module[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1846      ((Std_VersionInfoType*)(versioninfo))->vendorID = (uint16)MCALLIB_VENDOR_ID;
	mov	d15,#17
	st.h	[a4],d15
.L985:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1847  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1848      /* Get McalLib Module ID */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1849      ((Std_VersionInfoType*)(versioninfo))->moduleID = (uint16)MCALLIB_MODULE_ID;
	mov	d15,#255
	st.h	[a4]2,d15
.L986:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1850  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1851      /* Get McalLib module Software major version */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1852      ((Std_VersionInfoType*)(versioninfo))->sw_major_version =
; ..\mcal\McalLib\ssc\src\McalLib.c	  1853                                                  (uint8)MCALLIB_SW_MAJOR_VERSION;
	mov	d15,#20
	st.b	[a4]4,d15
.L987:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1854  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1855      /* Get McalLib module Software minor version */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1856      ((Std_VersionInfoType*)(versioninfo))->sw_minor_version =
; ..\mcal\McalLib\ssc\src\McalLib.c	  1857                                                  (uint8)MCALLIB_SW_MINOR_VERSION;
	mov	d15,#25
	st.b	[a4]5,d15
.L988:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1858  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1859      /* Get McalLib module Software patch version */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1860      ((Std_VersionInfoType*)(versioninfo))->sw_patch_version =
; ..\mcal\McalLib\ssc\src\McalLib.c	  1861                                                  (uint8)MCALLIB_SW_PATCH_VERSION;
	mov	d15,#0
	st.b	[a4]6,d15
.L989:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1862    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1863  }
	ret
.L533:
	
__McalLib_GetVersionInfo_function_end:
	.size	McalLib_GetVersionInfo,__McalLib_GetVersionInfo_function_end-McalLib_GetVersionInfo
.L318:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_GetSpinlock',code,cluster('Mcal_GetSpinlock')
	.sect	'.text.McalLib.Mcal_GetSpinlock'
	.align	2
	
	.global	Mcal_GetSpinlock

; ..\mcal\McalLib\ssc\src\McalLib.c	  1864  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1865  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1866  ** Traceability     : [cover parentID={FDC04393-3918-4d1a-BD98-97EB51ACDAB3}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1867  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1868  ** Syntax           : void Mcal_GetSpinlock                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1869  **                    ( volatile uint32 * const LockAddress,                  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1870  **                             const uint32 Timeout)                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1871  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1872  ** Description     : This API will check if spinlock is available in an non   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1873  **                   atomic fashion and if spinlock is free then it is        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1874  **                   acquired in an atomic fashion acquired else it will      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1875  **                   try again until the timer tick provided by user is not   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1876  **                   less than difference between current and base stm ticks  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1877  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1878  ** Service ID       : 0x8D                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1879  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1880  ** Sync/Async      : Synchronous                                              **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1881  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1882  ** Reentrancy       : Non Reentrant                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1883  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1884  ** Parameters(in)   : LockAddress - It is used to lock the shared variables.  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1885  **                    Timeout - It is total time provided in micro second by  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1886  **                              user using which spinlock should be acquired. **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1887  **                              Timeout value should be in range of 1 us to   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1888  **                              1048575 us (timeout when passed as 1 indicate **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1889  **                              as 1 us to this API).                         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1890  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1891  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1892  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1893  ** Return value     : None.                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1894  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1895  void Mcal_GetSpinlock(volatile uint32 *const LockAddress, const uint32 Timeout)
; Function Mcal_GetSpinlock
.L174:
Mcal_GetSpinlock:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  1896  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1897    /* [cover parentID={A6FC0022-BE1B-4764-9527-D4B928AADD62}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1898       If SAFETY Error Check is Enabled[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1899    #if (MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1900    /* [cover parentID={F361A66A-5290-4fed-ABF2-9547AFB2BBAE}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1901       Check if input address is null pointer[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1902    if ((LockAddress) == NULL_PTR)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1903    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1904      /* [cover parentID={49CFCB8A-36C7-4dc0-BD9F-C28247C3EDEC}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1905         Report error MCALLIB_E_PARAM_POINTER[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1906      Mcal_lReportError(MCALLIB_SID_GETSPINLOCK, MCALLIB_E_PARAM_POINTER);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1907    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1908    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  1909    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	  1910    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1911      /* [cover parentID={78961246-9CDD-4da7-AD8A-4F80AF6C948A}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1912       * Acquire the Lock
; ..\mcal\McalLib\ssc\src\McalLib.c	  1913       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1914      Mcal_lGetSpinlock(LockAddress, Timeout, MCALLIB_SID_GETSPINLOCK);
	mov	d5,#141
	j	Mcal_lGetSpinlock
.L525:
	
__Mcal_GetSpinlock_function_end:
	.size	Mcal_GetSpinlock,__Mcal_GetSpinlock_function_end-Mcal_GetSpinlock
.L308:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_ReleaseSpinlock',code,cluster('Mcal_ReleaseSpinlock')
	.sect	'.text.McalLib.Mcal_ReleaseSpinlock'
	.align	2
	
	.global	Mcal_ReleaseSpinlock

; ..\mcal\McalLib\ssc\src\McalLib.c	  1915    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1916    return;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1917  }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1918  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1919  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1920  ** Traceability     : [cover parentID={87DDCCC6-8C0A-4942-B49F-A3BABA4BFCA2}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1921  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1922  ** Syntax           : void Mcal_ReleaseSpinlock                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1923  **                               (volatile uint32 * const LockAddress)        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1924  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1925  ** Description     : This API will release the Spinlock and value of lock     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1926                       address will be 0x0U.                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1927  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1928  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1929  ** Service ID      : 0x8E                                                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1930  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1931  ** Sync/Async      : Synchronous                                              **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1932  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1933  ** Reentrancy      : Non Reentrant                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1934  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1935  ** Parameters(in)  : LockAddress - Lock that needs to be cleared(release)     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1936  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1937  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1938  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1939  ** Return value     : void                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1940  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1941  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1942  void Mcal_ReleaseSpinlock(volatile uint32 * const LockAddress)
; Function Mcal_ReleaseSpinlock
.L176:
Mcal_ReleaseSpinlock:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  1943  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1944    /* [cover parentID={1CE56696-4A08-4fca-ADF7-6443897F9F9A}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1945       If SAFETY Error Check is Enabled[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1946    #if (MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1947    /* [cover parentID={E8246BFE-9198-46ec-989E-075408125C86}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1948       Check if input address is null pointer[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1949    if ((LockAddress) == NULL_PTR)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1950    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1951      /* [cover parentID={A3DF5750-8B9E-43dc-8859-853BADDD7CEA}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1952          Report error MCALLIB_E_PARAM_POINTER[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1953      Mcal_lReportError(MCALLIB_SID_RELSPINLOCK, MCALLIB_E_PARAM_POINTER);
; ..\mcal\McalLib\ssc\src\McalLib.c	  1954    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1955    /* [cover parentID={3B173FA2-D1EF-49f7-B05E-6E14223B735D}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  1956       If address is not null pointer [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  1957    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  1958    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	  1959    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1960      Mcal_lReleaseSpinlock(LockAddress);
	j	Mcal_lReleaseSpinlock
.L530:
	
__Mcal_ReleaseSpinlock_function_end:
	.size	Mcal_ReleaseSpinlock,__Mcal_ReleaseSpinlock_function_end-Mcal_ReleaseSpinlock
.L313:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_lCpuPwSequence',code,cluster('Mcal_lCpuPwSequence')
	.sect	'.text.McalLib.Mcal_lCpuPwSequence'
	.align	2
	

; ..\mcal\McalLib\ssc\src\McalLib.c	  1961    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1962  }
; ..\mcal\McalLib\ssc\src\McalLib.c	  1963  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1964  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1965  **                      Private Function Definitions                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1966  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1967  
; ..\mcal\McalLib\ssc\src\McalLib.c	  1968  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  1969  ** Traceability     : [cover parentID={B0B9072D-629B-49f7-9E87-BC4CF2A925D4}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1970  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1971  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1972  ** Syntax           : LOCAL_INLINE uint32  Mcal_lCpuPwSequence                **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1973  **                    (                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1974  **                      const uint32 CpuIndex,                                **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1975  **                      const uint32 WdtCpuCon0Value                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1976  **                    )                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1977  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1978  ** Description      : This function returns the password to be used during    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1979  **                    'password access' of WDTCPUxCON0 to unlock the register **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1980  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1981  ** Service ID       : NA                                                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1982  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1983  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1984  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1985  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1986  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1987  ** Parameters(in)   : CpuIndex -  CpuIndex corresponding to CPU Core Id       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1988  **                    WdtCpuCon0Value -  Contents of register WDTCPUxCON0     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1989  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1990  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1991  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1992  ** Return value     : password to be written to WDTCPUxCON0 to unlock it      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1993  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  1994  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  1995  LOCAL_INLINE uint32  Mcal_lCpuPwSequence(const uint32 CpuIndex,
; Function Mcal_lCpuPwSequence
.L178:
Mcal_lCpuPwSequence:	.type	func
	mov	d15,d4
.L713:

; ..\mcal\McalLib\ssc\src\McalLib.c	  1996                                           const uint32 WdtCpuCon0Value)
; ..\mcal\McalLib\ssc\src\McalLib.c	  1997  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  1998    uint32 PwdBit0Value;
; ..\mcal\McalLib\ssc\src\McalLib.c	  1999  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2000    /* [cover parentID={B44279C3-41FF-4e95-8F82-33919982A41E}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2001    Decrypt the password extracted from WdtCpuCon0 reg[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2002    uint32 Password = Mcal_lDecryptPw(WdtCpuCon0Value);
	mov	d4,d5
	call	Mcal_lDecryptPw
.L712:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2003  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2004    /* Check if Auto sequence password is enabled */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2005    /* [cover parentID={8764C622-562B-499e-BF57-7F467B553FCF}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2006       Check if Automatic password sequencing is enable[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2007    if (Mcal_GetBitAtomic(MODULE_SCU.WDTCPU[CpuIndex].SR.U,
	mul	d15,d15,#12
.L714:
	mov.a	a15,d15
	fcall	.cocofun_4
	ld.w	d15,[a3]25172
.L1045:
	jz.t	d15:7,.L64
.L1046:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2008                          IFX_SCU_WDTCPU_SR_PAS_OFF, IFX_SCU_WDTCPU_SR_PAS_LEN) ==
; ..\mcal\McalLib\ssc\src\McalLib.c	  2009                          MCAL_AUTO_PWD_SEQ_ENABLED)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2010    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2011      /*  Modify the password with expected password by calculating new
; ..\mcal\McalLib\ssc\src\McalLib.c	  2012       *  14-bit LFSR with characteristic polynomial x14+x13+x12+x2+1.*/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2013      /* [cover parentID={C5E54F01-B967-4f08-BB1D-6147BE98DEAE}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2014      Calculate the next password based upon a 14 bit 'Linear Feedback Shift
; ..\mcal\McalLib\ssc\src\McalLib.c	  2015      Register' .[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2016      PwdBit0Value = (((Password >> 1U) ^ (Password >> MCAL_PASSEQSHIFT) ^
; ..\mcal\McalLib\ssc\src\McalLib.c	  2017                       (Password >> MCAL_PASSWORD_SHIFT) ^
; ..\mcal\McalLib\ssc\src\McalLib.c	  2018                       (Password >> MCAL_LFSR_SHIFT)) & (uint32)1U);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2019  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2020      Password = (((Password << 1U) | PwdBit0Value ) &
	sh	d0,d2,#1
.L1047:
	sh	d15,d2,#-1
.L1048:
	sh	d1,d2,#-11
.L1049:
	xor	d15,d1
.L1050:
	sh	d1,d2,#-12
.L1051:
	xor	d15,d1
.L1052:
	sh	d1,d2,#-13
.L1053:
	xor	d15,d1
.L1054:
	and	d15,#1
.L1055:
	or	d0,d15
.L1056:
	insert	d2,d0,#0,#14,#18
.L64:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2021                   (uint32)IFX_SCU_WDTCPU_CON0_PW_MSK);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2022    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2023    /* [cover parentID={A3754FD3-C09F-48d8-BF9C-D11CD9E3BC51}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2024       Return the password without modification[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2025    /* [cover parentID={56281BA0-25B6-45a7-AB4E-FFE889986FC4}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2026      Return password[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2027    return (Password);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2028  }
	ret
.L567:
	
__Mcal_lCpuPwSequence_function_end:
	.size	Mcal_lCpuPwSequence,__Mcal_lCpuPwSequence_function_end-Mcal_lCpuPwSequence
.L348:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_lCpuRelValue',code,cluster('Mcal_lCpuRelValue')
	.sect	'.text.McalLib.Mcal_lCpuRelValue'
	.align	2
	

; ..\mcal\McalLib\ssc\src\McalLib.c	  2029  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2030  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  2031  ** Traceability     : [cover parentID={5523EAB3-5C07-4194-B205-26B2921B84CB}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2032  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2033  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2034  ** Syntax           : LOCAL_INLINE uint32 Mcal_lCpuRelValue                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2035  **                    (                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2036  **                      const uint32 CpuIndex,                                **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2037  **                      const uint32 WdtCpuCon0Value                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2038  **                    )                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2039  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2040  ** Description      : This function returns the timer reload value to be used **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2041  **                    during 'password access' of WDTCPUxCON0 to unlock the   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2042  **                    register                                                **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2043  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2044  ** Service ID       : NA                                                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2045  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2046  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2047  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2048  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2049  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2050  ** Parameters(in)   : CpuIndex -  CpuIndex corresponding to CPU Core Id       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2051  **                    WdtCpuCon0Value -  Contents of register WDTCPUxCON0     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2052  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2053  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2054  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2055  ** Return value     : timer reload value  to be written to WDTCPUxCON0 to     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2056  **                    unlock it                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2057  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2058  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2059  LOCAL_INLINE uint32 Mcal_lCpuRelValue(const uint32 CpuIndex,
; Function Mcal_lCpuRelValue
.L180:
Mcal_lCpuRelValue:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  2060                                        const uint32 WdtCpuCon0Value)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2061  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2062    uint32 TimerReload;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2063  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2064    /* Is Timer check enabled */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2065    /* [cover parentID={D511EF7F-5C92-4103-98CF-A5F8EC01DA99}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2066     Check If  WDTCPUxSR register TCS bit is enable[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2067    if (Mcal_GetBitAtomic(MODULE_SCU.WDTCPU[CpuIndex].SR.U,
	mul	d15,d4,#12
	mov.a	a15,d15
	fcall	.cocofun_4
	lea	a15,[a3]25164
	ld.w	d15,[+a15]8
.L1035:
	jz.t	d15:8,.L66
.L1036:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2068                          IFX_SCU_WDTCPU_SR_TCS_OFF,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2069                          IFX_SCU_WDTCPU_SR_TCS_LEN) == MCAL_TIMER_CHECK_ENABLED)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2070    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2071      /* Compute Timer reload value based on the inverted value of
; ..\mcal\McalLib\ssc\src\McalLib.c	  2072       * running WDT timer value */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2073      /* [cover parentID={D1B6CC5D-442B-4413-9887-CFCBFCBBA7AF}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2074       * Timer reload value give inverted value of current timer value obtain
; ..\mcal\McalLib\ssc\src\McalLib.c	  2075       * from WDTCPUxSR.TIM [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2076      TimerReload = (((MODULE_SCU.WDTCPU[CpuIndex].SR.U) &
	ld.w	d15,[a15]
.L1037:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2077                       MCAL_CPUWDTSR_TIMER_MASK) >> IFX_SCU_WDTCPU_SR_TIM_OFF);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2078  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2079      TimerReload = ((~TimerReload) & (uint32)IFX_SCU_WDTCPU_SR_TIM_MSK);
	mov	d0,#-1
.L1038:
	sh	d15,d15,#-16
.L1039:
	xor	d15,d0
.L1040:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2080    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2081    /* [cover parentID={81383C2C-9BA0-4b49-B811-EB98942760DC}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2082      From input WDTCPUxCON0 extract timer reload value [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2083    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  2084    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2085      /* [cover parentID={81383C2C-9BA0-4b49-B811-EB98942760DC}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2086       * From input WDTCPUxCON0 extract timer reload value [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2087      /* Compute Timer reload value based on the current timer reload value */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2088      TimerReload = ((WdtCpuCon0Value & (uint32)MCAL_ENDINIT_RELOAD_MASK) >>
; ..\mcal\McalLib\ssc\src\McalLib.c	  2089                     IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2090    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2091    /* [cover parentID={978E3EE6-83B3-4387-BB63-1AD7D2E83877}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2092     * Return timer reload value[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2093    return (TimerReload);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2094  }
	insert	d2,d15,#0,#16,#16
	ret
.L66:
	sh	d2,d5,#-16
	ret
.L561:
	
__Mcal_lCpuRelValue_function_end:
	.size	Mcal_lCpuRelValue,__Mcal_lCpuRelValue_function_end-Mcal_lCpuRelValue
.L343:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_lDecryptPw',code,cluster('Mcal_lDecryptPw')
	.sect	'.text.McalLib.Mcal_lDecryptPw'
	.align	2
	

; ..\mcal\McalLib\ssc\src\McalLib.c	  2095  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2096  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  2097  ** Traceability     : [cover parentID={0919090F-C59B-47be-8A63-0E22F481D743}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2098  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2099  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2100  ** Syntax           : LOCAL_INLINE uint16 Mcal_lDecryptPw                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2101  **                    (                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2102  **                      const uint32 Value                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2103  **                    )                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2104  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2105  ** Description      : This function returns the decrypted password, which is  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2106  **                    used to in unlocking the ENDINIT registers              **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2107  **                    (EICON0/SEICON0/WDTCPUxCON0)                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2108  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2109  ** Service ID       : NA                                                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2110  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2111  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2112  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2113  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2114  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2115  ** Parameters(in)   : Value -  Data from which password is extracted          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2116  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2117  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2118  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2119  ** Return value     : the decrypted password                                  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2120  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2121  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2122  LOCAL_INLINE uint16 Mcal_lDecryptPw(const uint32 Value)
; Function Mcal_lDecryptPw
.L182:
Mcal_lDecryptPw:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  2123  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2124    /* Decrypt the password, by extract password from positions [15:2], and
; ..\mcal\McalLib\ssc\src\McalLib.c	  2125     * inverting the last 6 bits on the extracted password
; ..\mcal\McalLib\ssc\src\McalLib.c	  2126     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2127    return((uint16)(((Value & (uint32)MCAL_ENDINIT_WDT_PWD_MASK) >>
	sh	d4,#-2
.L715:
	insert	d15,d4,#0,#14,#18
.L1005:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2128                      IFX_SCU_WDTCPU_CON0_PW_OFF) ^
; ..\mcal\McalLib\ssc\src\McalLib.c	  2129                      (uint32)MCAL_ENDINIT_WDT_PWD_INV));
; ..\mcal\McalLib\ssc\src\McalLib.c	  2130  }
	xor	d2,d15,#63
	ret
.L544:
	
__Mcal_lDecryptPw_function_end:
	.size	Mcal_lDecryptPw,__Mcal_lDecryptPw_function_end-Mcal_lDecryptPw
.L333:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_lWriteSafetyEndInitProtection',code,cluster('Mcal_lWriteSafetyEndInitProtection')
	.sect	'.text.McalLib.Mcal_lWriteSafetyEndInitProtection'
	.align	2
	

; ..\mcal\McalLib\ssc\src\McalLib.c	  2131  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2132  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  2133  ** Traceability     : [cover parentID={4C12BC33-B548-4ac7-86E4-F0EAB7DAF746}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2134  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2135  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2136  ** Syntax           : void Mcal_lWriteSafetyEndInitProtection                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2137                        ( volatile void* const RegAddress,                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2138                          const uint32 DataValue,                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2139                          const uint32 Mask,                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2140                          const uint8  Accesstype,                              **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2141                          const uint8  ApiId)                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2142  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2143  ** Description      : This API is needed to write required values to safety   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2144  **                    end-init protected registers by unprotecting to write   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2145  **                    and protecting back to keep protection intact. This     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2146  **                    interface also supports write access to safety endinit  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2147  **                    protected CSFRs.                                        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2148  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2149  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2150  ** Service ID       : NA                                                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2151  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2152  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2153  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2154  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2155  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2156  ** Parameters(in)   : RegAddress - Safety Endinit protected register address  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2157  **                    DataValue - Value to be written to the register located **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2158  **                    at RegAddress.                                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2159  **                    Mask - Value to indicate which register bits need       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2160  **                    to be updated.                                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2161  **                    Accesstype - Register access type - 16/32 bit           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2162  **                    ApiId - Service ID of the API reporting an error        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2163  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2164  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2165  ** Return value     : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2166  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2167  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2168  LOCAL_INLINE void Mcal_lWriteSafetyEndInitProtection
; Function Mcal_lWriteSafetyEndInitProtection
.L184:
Mcal_lWriteSafetyEndInitProtection:	.type	func
	mov	d8,d5
	mov.aa	a15,a4
.L717:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2169                                                 (volatile void* const RegAddress,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2170                                                  const uint32 DataValue,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2171                                                  const uint32 Mask,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2172                                                  const uint8  Accesstype,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2173                                                  const uint8  ApiId)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2174  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2175    /* MISRA2012_RULE_11_5_JUSTIFICATION: Conversion between
; ..\mcal\McalLib\ssc\src\McalLib.c	  2176     * pointer to void and pointer to object due to SFR access. */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2177    /* MISRA2012_RULE_11_3_JUSTIFICATION: Conversion between
; ..\mcal\McalLib\ssc\src\McalLib.c	  2178     * pointers of different object types due to SFR access. */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2179    volatile uint32* const RegAddress32 = RegAddress;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2180    /* MISRA2012_RULE_11_5_JUSTIFICATION: Conversion between
; ..\mcal\McalLib\ssc\src\McalLib.c	  2181     * pointer to void and pointer to object due to SFR access. */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2182    /* MISRA2012_RULE_11_3_JUSTIFICATION: Conversion between
; ..\mcal\McalLib\ssc\src\McalLib.c	  2183     * pointers of different object types due to SFR access. */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2184    volatile uint16* const RegAddress16 = RegAddress;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2185    uint32 TempData;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2186    /* MISRA2012_RULE_11_6_JUSTIFICATION: The address of the register is
; ..\mcal\McalLib\ssc\src\McalLib.c	  2187     * comapred against CSFR register offsets.
; ..\mcal\McalLib\ssc\src\McalLib.c	  2188     * There are no other operation performed, hence this convesion
; ..\mcal\McalLib\ssc\src\McalLib.c	  2189     * does not cause any issue */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2190    uint32 TempAddr = (uint32)RegAddress;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2191  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2192    /* Mask the DataValue as per the passed Mask */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2193    uint32 MaskedData = DataValue & Mask;
	and	d10,d4,d8
.L719:
	mov	d15,d6
.L721:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2194  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2195    /* Critical section to protect SCU_SEICON0 and SCU_SEICON1 register*/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2196    /* [cover parentID={65DFF53B-24CB-4967-90D4-398D7423E928}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2197        Enter critical section for write safety endinit protection reg
; ..\mcal\McalLib\ssc\src\McalLib.c	  2198        [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2199    SchM_Enter_McalLib_SafetyEndInit();
	mov	d9,d7
	call	SuspendAllInterrupts
.L716:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2200  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2201    /* Acquire the lock for SCU_SEICON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2202    /* [cover parentID={8F370CDA-A0DE-4695-800F-C7CC570256BA}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2203        Acquire the lock for SCU_SEICON0 register
; ..\mcal\McalLib\ssc\src\McalLib.c	  2204       [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2205    Mcal_lGetSpinlock(&Mcal_LockAddressSiecon0, \ 
	movh.a	a12,#@his(Mcal_LockAddressSiecon0)
	lea	a12,[a12]@los(Mcal_LockAddressSiecon0)
.L1061:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2206                     (uint32)MCAL_SPINLOCK_DEFAULT_TIMEOUT, ApiId);
	mov	d4,#10000
	mov.aa	a4,a12
	mov	d5,d9
	call	Mcal_lGetSpinlock
.L1062:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2207  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2208    /* Reset Safety EndInit Protection*/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2209    /* [cover parentID={41EA97F8-07A4-4da6-B2EE-768CB3D7B6CC}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2210        Reset Safety EndInit Protection
; ..\mcal\McalLib\ssc\src\McalLib.c	  2211       [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2212    (void)Mcal_lUpdateSafetyEndInit(MCAL_DUMMY_PASSWORD,
	mov	d4,#0
.L1063:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2213                              MCAL_NOUPDATE_PASSWORD,
	mov	d5,d4
.L1064:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2214                              MCAL_RESETENDINITPROTECTION);
	mov	d6,d4
	call	Mcal_lUpdateSafetyEndInit
.L1065:
	mov.d	d0,a15
.L723:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2215  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2216    /* Update the register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2217    /* Note: CPU specific registers are updated using MTCR */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2218    /* [cover parentID={F391CD55-6DFA-4ad8-A795-5D43D6AB5D84}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2219    if (TempAddr > MCAL_16BIT_MAX_ADDR)
	mov.u	d1,#65535
.L1066:
	jge.u	d1,d0,.L70
.L1067:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2220    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2221      /* [cover parentID={DCB30C5F-21C5-498f-A219-EE8F508CD5F4}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2222          Check the AccessType is  32bit access
; ..\mcal\McalLib\ssc\src\McalLib.c	  2223         [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2224      if (Accesstype == MCAL_32BIT_ACCESS)
	jne	d15,#0,.L71
.L1068:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2225      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2226        /* Check if the masking is required */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2227        /* [cover parentID={9FB76018-74B9-498a-B8E8-953D7C6DAFCA}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2228        if(Mask == MCAL_DEFAULT_MASK_VALUE)
	jne	d8,#-1,.L72
.L1069:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2229        {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2230          *RegAddress32 = MaskedData;
	st.w	[a15],d10
.L1070:
	j	.L73
.L72:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2231        }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2232        else
; ..\mcal\McalLib\ssc\src\McalLib.c	  2233        {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2234          /* Read the SFR and write only the bits based on the mask */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2235          TempData = (uint32)(((uint32) *RegAddress32 & (uint32)~Mask) |
	mov	d0,#-1
	ld.w	d15,[a15]
.L722:
	xor	d8,d0
.L718:
	and	d15,d8
.L724:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2236                     MaskedData);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2237  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2238          *RegAddress32 = TempData;
	or	d10,d15
	st.w	[a15],d10
.L720:
	j	.L74
.L71:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2239        }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2240      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2241      else
; ..\mcal\McalLib\ssc\src\McalLib.c	  2242      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2243        /* [cover parentID={5CE8820B-A554-4941-96F3-349D18198A5C}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2244         * Update the register
; ..\mcal\McalLib\ssc\src\McalLib.c	  2245         * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2246         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2247        *RegAddress16 = (uint16)MaskedData;
	st.h	[a15],d10
.L1071:
	j	.L75
.L70:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2248      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2249    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2250    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  2251    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2252      /* CPU specific registers are updated using MTCR */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2253      /* MISRA2012_RULE_11_6_JUSTIFICATION: The address of the register is
; ..\mcal\McalLib\ssc\src\McalLib.c	  2254       * comapred against CSFR register offsets.
; ..\mcal\McalLib\ssc\src\McalLib.c	  2255       * There are no other operation performed, hence this convesion
; ..\mcal\McalLib\ssc\src\McalLib.c	  2256       * does not cause any issue */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2257      /* MISRA2012_RULE_11_4_JUSTIFICATION: The address of the register is
; ..\mcal\McalLib\ssc\src\McalLib.c	  2258       * comapred against CSFR register offsets.
; ..\mcal\McalLib\ssc\src\McalLib.c	  2259       * There are no other operation performed, hence this convesion
; ..\mcal\McalLib\ssc\src\McalLib.c	  2260       * does not cause any issue */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2261      /* [cover parentID={7952E564-BA1D-4caf-9925-D47BEC3B5F1D}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2262      switch((uint32)RegAddress32)
	mov.d	d15,a15
.L725:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2263      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2264        case CPU_COMPAT:
	mov.u	d0,#37888
	jeq	d15,d0,.L76
.L1072:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2265            MTCR(CPU_COMPAT, MaskedData);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2266            break;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2267        case CPU_SYSCON:
; ..\mcal\McalLib\ssc\src\McalLib.c	  2268            MTCR(CPU_SYSCON, MaskedData);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2269            break;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2270        case CPU_TPS_EXTIM_ENTRY_LVAL:
	mov.u	d0,#58432
	jeq	d15,d0,.L77
.L1073:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2271            MTCR(CPU_TPS_EXTIM_ENTRY_LVAL, MaskedData);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2272            break;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2273        case CPU_TPS_EXTIM_EXIT_LVAL:
	mov.u	d0,#58440
	jeq	d15,d0,.L78
.L1074:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2274            MTCR(CPU_TPS_EXTIM_EXIT_LVAL, MaskedData);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2275            break;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2276        case CPU_TPS_EXTIM_CLASS_EN:
	mov.u	d0,#58448
	jeq	d15,d0,.L79
.L1075:
	mov.u	d0,#65044
	jeq	d15,d0,.L80
	j	.L81
.L76:
	dsync
	mtcr	#37888,d10
	isync
.L1076:
	j	.L82
.L80:
	dsync
	mtcr	#65044,d10
	isync
.L1077:
	j	.L83
.L77:
	dsync
	mtcr	#58432,d10
	isync
.L1078:
	j	.L84
.L78:
	dsync
	mtcr	#58440,d10
	isync
.L1079:
	j	.L85
.L79:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2277            MTCR(CPU_TPS_EXTIM_CLASS_EN, MaskedData);
	dsync
	mtcr	#58448,d10
	isync

; ..\mcal\McalLib\ssc\src\McalLib.c	  2278            break;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2279        default:
; ..\mcal\McalLib\ssc\src\McalLib.c	  2280            /* This case is not possible, kept only for MISRA compliance */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2281            break;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2282      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2283    }
.L85:
.L84:
.L83:
.L82:
.L81:
.L75:
.L74:
.L73:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2284  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2285    /* Set Safety EndInit Protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2286    /* [cover parentID={3F7731FF-CE60-4306-925E-5E21E8BCAFBE}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2287       Set Safety EndInit Protection
; ..\mcal\McalLib\ssc\src\McalLib.c	  2288       [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2289    (void)Mcal_lUpdateSafetyEndInit(MCAL_DUMMY_PASSWORD,
	mov	d4,#0
.L1080:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2290                              MCAL_NOUPDATE_PASSWORD,
	mov	d5,d4
.L1081:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2291                              MCAL_SETENDINITPROTECTION);
	mov	d6,#1
	call	Mcal_lUpdateSafetyEndInit
.L1082:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2292  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2293    /* Release the lock for SCU_SEICCON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2294    /* [cover parentID={C129F8E9-E64D-4ae7-906D-902988D55FA1}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2295       Release the lock for SCU_SEICCON0 register
; ..\mcal\McalLib\ssc\src\McalLib.c	  2296       [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2297    Mcal_lReleaseSpinlock(&Mcal_LockAddressSiecon0);
	mov.aa	a4,a12
	call	Mcal_lReleaseSpinlock
.L1083:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2298  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2299    /* [cover parentID={D7BCD4A4-FA36-476d-A582-088869946097}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2300        Exit critical section for write safety endinit protection reg
; ..\mcal\McalLib\ssc\src\McalLib.c	  2301       [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2302    SchM_Exit_McalLib_SafetyEndInit();
	j	ResumeAllInterrupts
.L573:
	
__Mcal_lWriteSafetyEndInitProtection_function_end:
	.size	Mcal_lWriteSafetyEndInitProtection,__Mcal_lWriteSafetyEndInitProtection_function_end-Mcal_lWriteSafetyEndInitProtection
.L353:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_lDelayResetTickCalibration',code,cluster('Mcal_lDelayResetTickCalibration')
	.sect	'.text.McalLib.Mcal_lDelayResetTickCalibration'
	.align	2
	

; ..\mcal\McalLib\ssc\src\McalLib.c	  2303  }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2304  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2305  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  2306  ** Traceability     :[cover parentID={1CCEB859-15A4-4d14-98E6-0191C58E03B5}]  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2307  **                   [/cover]                                                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2308  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2309  ** Syntax           :LOCAL_INLINE uint32 Mcal_lDelayResetTickCalibration      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2310  **                                                        (const uint8 ApiId) **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2311  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2312  ** Description      : The interface is used by applications to indicate to    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2313  **                    MCALLib that the clock tree has changed. The expectation**
; ..\mcal\McalLib\ssc\src\McalLib.c	  2314  **                    is that as a result of invocation of this service, any  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2315  **                    internally cached tick resolution data is discarded.    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2316  **                    This service is expected to query the clock tree and    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2317  **                    determine the resolution. The interface returns in      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2318  **                    nanoseconds the resolution of the delay tick (STM timer)**
; ..\mcal\McalLib\ssc\src\McalLib.c	  2319  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2320  ** Service ID       : NA                                                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2321  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2322  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2323  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2324  ** Reentrancy       : Non Reentrant                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2325  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2326  ** Parameters(in)   : ApiId - Service ID of the API reporting an error        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2327  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2328  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2329  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2330  ** Return value     : Resolution of delay tick in nanoseconds                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2331  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2332  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2333  LOCAL_INLINE uint32 Mcal_lDelayResetTickCalibration(const uint8 ApiId)
; Function Mcal_lDelayResetTickCalibration
.L186:
Mcal_lDelayResetTickCalibration:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  2334  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2335    float32 StmFreq, PLL0Freq;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2336    float32 LocalStmTimerResol = (float32)0;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2337    uint32 OscFreq;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2338    uint8 StmDiv, Src0ClkSel, PLL0Ndiv, PLL0Pdiv, PLL0K2div, Oscval, PLL0ClkSel;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2339  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2340  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2341    /* [cover parentID={0245DED7-5AFC-4f35-876D-AEC5118EE056}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2342        Enter critical section[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2343    SchM_Enter_McalLib_StmTimerResolution();
	mov	d10,#0
	call	SuspendAllInterrupts
.L726:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2344  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2345    StmDiv     = (uint8)(((uint32)MODULE_SCU.CCUCON0.U)  &
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf0036030)
.L1010:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2346                               (uint32)IFX_SCU_CCUCON0_STMDIV_MSK);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2347    Src0ClkSel = (uint8)((((uint32)MODULE_SCU.CCUCON0.U) >>
	and	d11,d15,#15
	ld.w	d0,[a15]@los(0xf0036030)
.L727:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2348                                IFX_SCU_CCUCON0_CLKSEL_OFF) &
; ..\mcal\McalLib\ssc\src\McalLib.c	  2349                               (uint32)IFX_SCU_CCUCON0_CLKSEL_MSK);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2350    PLL0Ndiv   = (uint8)((((uint32)MODULE_SCU.SYSPLLCON0.U) >>
	sh	d15,d0,#-28
	ld.w	d0,[a15]@los(0xf0036018)
.L1011:
	and	d12,d15,#3
.L728:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2351                                IFX_SCU_SYSPLLCON0_NDIV_OFF) &
; ..\mcal\McalLib\ssc\src\McalLib.c	  2352                               (uint32)IFX_SCU_SYSPLLCON0_NDIV_MSK) + (uint8)1U;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2353    PLL0Pdiv   = (uint8)((((uint32)MODULE_SCU.SYSPLLCON0.U) >>
	extr.u	d8,d0,#9,#7
	ld.w	d0,[a15]@los(0xf0036018)
.L1012:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2354                                IFX_SCU_SYSPLLCON0_PDIV_OFF) &
; ..\mcal\McalLib\ssc\src\McalLib.c	  2355                               (uint32)IFX_SCU_SYSPLLCON0_PDIV_MSK) + (uint8)1U;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2356    PLL0K2div  = (uint8)(((uint32)MODULE_SCU.SYSPLLCON1.U) &
	ld.w	d15,[a15]@los(0xf003601c)
.L1013:
	extr.u	d9,d0,#24,#3
.L1014:
	and	d15,#7
.L1015:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2357                               (uint32)IFX_SCU_SYSPLLCON1_K2DIV_MSK) + (uint8)1U;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2358    Oscval     = (uint8)((((uint32)MODULE_SCU.OSCCON.U) >>
	add	d13,d15,#1
	ld.w	d15,[a15]@los(0xf0036010)
.L729:
	add	d8,#1
.L1016:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2359                                IFX_SCU_OSCCON_OSCVAL_OFF) &
; ..\mcal\McalLib\ssc\src\McalLib.c	  2360                               (uint32)IFX_SCU_OSCCON_OSCVAL_MSK);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2361    PLL0ClkSel = (uint8)((((uint32)MODULE_SCU.SYSPLLCON0.U) >>
	ld.w	d0,[a15]@los(0xf0036018)
.L1017:
	sh	d15,d15,#-16
.L730:
	add	d9,#1
.L731:
	and	d15,#31
.L1018:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2362                                IFX_SCU_SYSPLLCON0_INSEL_OFF) &
; ..\mcal\McalLib\ssc\src\McalLib.c	  2363                               (uint32)IFX_SCU_SYSPLLCON0_INSEL_MSK);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2364  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2365    /* [cover parentID={AABD4D00-A372-4e29-B360-0543BA412484}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2366       Exit critical Section[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2367    SchM_Exit_McalLib_StmTimerResolution();
	sh	d14,d0,#-30
	call	ResumeAllInterrupts
.L733:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2368  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2369    /* If fSTM is disabled, then return timer resolution as 0 */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2370    /* [cover parentID={9AEC7374-8E25-4936-AA51-224738F39F36}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2371     * Check if STM clock disabled[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2372    if(StmDiv == (uint8)MCAL_STMCLK_DISABLED)
	jne	d11,#0,.L86
.L1019:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2373    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2374      /* [cover parentID={7DB1FA52-2712-4daa-8EB3-5D3BF1CBF02D}]If SAFETY
; ..\mcal\McalLib\ssc\src\McalLib.c	  2375       * Error Check is Enabled[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2376      /* [cover parentID={96699695-17F2-4fa8-AC73-49A2C470DC33}]If SAFETY
; ..\mcal\McalLib\ssc\src\McalLib.c	  2377       * Error Check is Enabled[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2378      /* [cover parentID={21BC6F5D-85A7-4d5a-BFBB-C782B3FEC56B}]If SAFETY
; ..\mcal\McalLib\ssc\src\McalLib.c	  2379       * Error Check is Enabled[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2380      #if (MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2381      /* [cover parentID={8A536F85-CDD2-4a3d-AF62-D1744ABCD2CF}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2382       * Report error MCALLIB_E_CLKDISABLE[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2383      Mcal_lReportError(ApiId, MCALLIB_E_CLKDISABLE);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2384      #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	  2385  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2386      Mcal_StmTimerResolution = MCAL_STM_TIMER_RESOL_ZERO;
	movh.a	a15,#@his(Mcal_StmTimerResolution)
.L1020:
	mov	d15,#0
	st.w	[a15]@los(Mcal_StmTimerResolution),d15
.L732:
	j	.L87
.L86:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2387    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2388    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  2389    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2390      /* Check the source of fSource0 - PLL0 or backup clock */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2391      /* [cover parentID={344D24C2-972E-432e-8A0A-9ED87525D74A}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2392         Check the Source of freq PLL0 clock sel[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2393      if(Src0ClkSel == (uint8)MCAL_PLL0_CLK_SRC0_FREQ)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2394      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2395        /* Check the source of fPLL0 - backup clock or OSC0*/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2396        /* [cover parentID={344D24C2-972E-432e-8A0A-9ED87525D74A}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2397           Check the Source of freq PLL0 clock sel[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2398        switch(PLL0ClkSel)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2399        {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2400          /*Fall through is used as the logic for oscillator frequency
; ..\mcal\McalLib\ssc\src\McalLib.c	  2401           * calculation and SYSCLK frequency calculation is exactly same*/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2402          /* [cover parentID={5EB344C3-9A2B-4bca-92AA-9B89A1FE3DDA}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2403              Is PLL0 clock source Osc 0 clock [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2404          case MCAL_OSC0_CLK_PLL0_FREQ:
; ..\mcal\McalLib\ssc\src\McalLib.c	  2405          case MCAL_SYS_CLK_PLL0_FREQ:
; ..\mcal\McalLib\ssc\src\McalLib.c	  2406            /* Calculate OSC0 frequency(its in MHz)*/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2407            /* [cover parentID={2073EAEB-1D43-47da-A1B4-608B3846D17A}]Calculate
; ..\mcal\McalLib\ssc\src\McalLib.c	  2408               OSC_ClockFreq [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2409            OscFreq = ((uint32)Oscval +
; ..\mcal\McalLib\ssc\src\McalLib.c	  2410                       (uint32)MCAL_OSCVAL_MHz - (uint32)MCAL_OSCFREQ_MHz);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2411            break;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2412          default:
; ..\mcal\McalLib\ssc\src\McalLib.c	  2413            /* [cover parentID={B8FBCFA9-AACF-4dbe-8D8F-AD75CFEE3751}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2414                       OSC_ClockFreq is Backup Clock frequency[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2415            OscFreq = MCAL_BACKUP_FREQUENCY;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2416            break;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2417        }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2418        /* Calculate PLL0 freq by formula = (fOSC * Ndiv)/(K2div * Pdiv)*/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2419        /* [cover parentID={DEC7141C-7011-422c-8C9E-4B270FE50403}]Calculate
; ..\mcal\McalLib\ssc\src\McalLib.c	  2420           PLL0_Clockfreq using Oscfreq,Ndiv, Pdiv, K2div[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2421        PLL0Freq = (((float32)OscFreq * (float32)PLL0Ndiv) /
; ..\mcal\McalLib\ssc\src\McalLib.c	  2422                    ((float32)PLL0Pdiv * (float32)PLL0K2div));
; ..\mcal\McalLib\ssc\src\McalLib.c	  2423        /* Calculate fSTM */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2424        /* [cover parentID={CE793E76-8F55-4fc5-9B98-CA024C14371D}]Calculate
; ..\mcal\McalLib\ssc\src\McalLib.c	  2425        Stm_Freq using PLL0_Clockfreq ,StmDiv[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2426        StmFreq = PLL0Freq / (float32)StmDiv;
	utof	d2,d11
.L1021:
	jne	d12,#1,.L88
.L1022:
	add	d14,#-1
.L734:
	extr.u	d0,d14,#0,#8
.L1023:
	jge.u	d0,#2,.L89
.L1024:
	add	d15,d15,#15
	j	.L90
.L89:
	mov	d15,#100
.L90:
	utof	d0,d8
.L1025:
	utof	d15,d15
.L735:
	utof	d1,d13
.L1026:
	mul.f	d15,d15,d0
.L1027:
	utof	d0,d9
.L1028:
	mul.f	d0,d0,d1
.L1029:
	div.f	d15,d15,d0
	j	.L91
.L88:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2427      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2428      else
; ..\mcal\McalLib\ssc\src\McalLib.c	  2429      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2430        /* Calculate fSTM */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2431        /* [cover parentID={3E42C595-B418-4c0f-9181-5D89C75125C1}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2432        Calculate STM freq depends on Backup Clock freq and STM divider
; ..\mcal\McalLib\ssc\src\McalLib.c	  2433        [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2434        StmFreq = (float32)MCAL_BACKUP_FREQUENCY / (float32)StmDiv;
	movh	d15,#17096
.L91:
	div.f	d15,d15,d2
.L736:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2435      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2436  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2437      /* Mcal_StmTimerResolution in 1ns resolution is obtained by
; ..\mcal\McalLib\ssc\src\McalLib.c	  2438       * (10^9)/(StmFreq * 10^6), since value of StmFreq is MHz,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2439       *  Mcal_StmTimerResolution = 10^9/(StmFreq * 10^6)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2440       *  Mcal_StmTimerResolution = 10^3/(StmFreq)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2441       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2442      /* [cover parentID={205F9729-B78C-4ff6-B5A4-4CF0A0512ABD}]Calculate STM
; ..\mcal\McalLib\ssc\src\McalLib.c	  2443      timer resolution in 1ns resolution[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2444      LocalStmTimerResol = ((float32)MCAL_RESOLUTION_U / StmFreq);
	movh	d0,#17530
.L1030:
	div.f	d10,d0,d15
.L87:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2445    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2446  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2447    /* This is used to avoid MISRA when Safety is switched OFF */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2448    UNUSED_PARAMETER(ApiId);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2449  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2450    /* [cover parentID={E1412D6E-B1C5-4683-AEFA-730560F0772F}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2451     * Return STM timer resolution[/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2452     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2453    /* [cover parentID={19F230D8-6462-4c4d-9833-2618D4960F84}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2454     * return STM timer resolution zero[/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2455     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2456    return ((uint32)LocalStmTimerResol);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2457  }
	ftouz	d2,d10
	ret
.L547:
	
__Mcal_lDelayResetTickCalibration_function_end:
	.size	Mcal_lDelayResetTickCalibration,__Mcal_lDelayResetTickCalibration_function_end-Mcal_lDelayResetTickCalibration
.L338:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_lGetCpuIndex',code,cluster('Mcal_lGetCpuIndex')
	.sect	'.text.McalLib.Mcal_lGetCpuIndex'
	.align	2
	

; ..\mcal\McalLib\ssc\src\McalLib.c	  2458  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2459  #if (MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2460  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  2461  ** Traceability     :[cover parentID={D5D6528A-4A62-42dc-9C9D-5F09340FBFB0}]  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2462  **                   [/cover]                                                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2463  ** Syntax :          LOCAL_INLINE void Mcal_lReportError(const uint8 ApiId,   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2464  **                                                const uint8 ErrorId)        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2465  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2466  ** Service ID:       NA                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2467  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2468  ** Sync/Async:       Synchronous                                              **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2469  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2470  ** Reentrancy:       Reentrant                                                **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2471  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2472  ** Parameters (in):  ApiId - Service ID of the API reporting an error         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2473  **                   ErrorId - ID of the error reported                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2474  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2475  ** Parameters (out): None                                                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2476  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2477  ** Return value:     None                                                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2478  ** Description :    Function to report Safety Error                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2479  *                                                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2480  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2481  LOCAL_INLINE void Mcal_lReportError(const uint8 ApiId, const uint8 ErrorId)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2482  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2483    Mcal_ReportSafetyError(MCALLIB_MODULE_ID, MCALLIB_INSTANCE_ID,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2484                           ApiId, ErrorId);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2485  }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2486  #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	  2487  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2488  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  2489  ** Traceability     : [cover parentID={1912F5BE-EDDE-484a-A31F-F3475F2A59FD}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2490  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2491  ** Syntax           : uint32 Mcal_lGetCpuIndex(void)                          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2492  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2493  ** Description      : This interface is used by applications in a multicore   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2494  **                    environment to determine the CPU they are executing on. **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2495  **                    The API returns the contents of CORE_ID register,       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2496  **                   variable, structure for the core on which it is invoked. **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2497  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2498  ** Service ID       : NA                                                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2499  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2500  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2501  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2502  ** Reentrancy       : Reentrant                                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2503  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2504  ** Parameters(in)   : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2505  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2506  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2507  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2508  ** Return value     : Returns the Core Index corresponding to the input       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2509  **                    physical Core Id. In case the input Core Id is an       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2510  **                    invalid value, then the API returns 0xFFFFFFFF          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2511  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2512  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2513  LOCAL_INLINE uint32 Mcal_lGetCpuIndex(void)
; Function Mcal_lGetCpuIndex
.L188:
Mcal_lGetCpuIndex:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  2514  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2515    /* [cover parentID={B7499D38-0AD1-42ce-BD5F-BA67D72B3DED}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2516     * Read the CPU_CORE_ID register to retrieve the CoreIdIndex [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2517     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2518    uint32 CoreIdIndex = (uint32)MFCR(CPU_CORE_ID);
	mfcr	d2,#65052
.L737:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2519    #if ( MCAL_NO_OF_CORES > 5U )
; ..\mcal\McalLib\ssc\src\McalLib.c	  2520    /* If the CpuId is greater than, equal to that of CPU5 Core Id(0x6U),
; ..\mcal\McalLib\ssc\src\McalLib.c	  2521     * then return CoreIndex as (CpuId - 1),
; ..\mcal\McalLib\ssc\src\McalLib.c	  2522     * else return the same value as input CpuId */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2523    /* [cover parentID={DF2416E6-335D-4e1f-A0FA-BAF1C1BC133C}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2524    Check if CoreIdIndex is greater than, equal to number of core [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2525    if (CoreIdIndex >= (uint32)MCAL_NO_OF_CORES)
	ge.u	d15,d2,#6
.L1000:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2526    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2527      CoreIdIndex = CoreIdIndex - (uint32)0x1U;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2528    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2529    #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	  2530  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2531    /* [cover parentID={E8AFC2A6-8251-4e22-A852-1723FFB711C1}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2532     * Return the current CoreIdIndex [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2533     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2534    return(CoreIdIndex);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2535  }
	sub	d2,d15
	ret
.L541:
	
__Mcal_lGetCpuIndex_function_end:
	.size	Mcal_lGetCpuIndex,__Mcal_lGetCpuIndex_function_end-Mcal_lGetCpuIndex
.L328:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_lUpdateSafetyEndInit',code,cluster('Mcal_lUpdateSafetyEndInit')
	.sect	'.text.McalLib.Mcal_lUpdateSafetyEndInit'
	.align	2
	

; ..\mcal\McalLib\ssc\src\McalLib.c	  2536  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2537  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  2538  ** Traceability     :[cover parentID={9979C54A-B8B4-4815-9DC3-CFD6BF59AA95}]  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2539  **                   [/cover]                                                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2540  ** Syntax           : static uint32 Mcal_lUpdateSafetyEndInit(                **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2541  **                                          const uint32 NewPassword,         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2542  **                                          const boolean UpdatePassword,     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2543  **                                          const boolean SetResetProtection) **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2544  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2545  ** Description      : This interface updates password/enables/disable         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2546  **                    Safety EndInit protection                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2547  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2548  ** Service ID       : NA                                                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2549  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2550  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2551  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2552  ** Reentrancy       : Non Reentrant                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2553  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2554  ** Parameters(in)   : NewPassword        -  Password to be updated            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2555  **                    UpdatePassword     -  True  - Update Password           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2556  **                                          False - No password update        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2557  **                    SetResetProtection -  True  - Enable ENDINIT protection **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2558  **                                          False - Disable ENDINIT protection**
; ..\mcal\McalLib\ssc\src\McalLib.c	  2559  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2560  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2561  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2562  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2563  ** Return value     : Password - Password retrieved from SCU_SEICON0 register **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2564  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2565  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2566  static uint32 Mcal_lUpdateSafetyEndInit(const uint32 NewPassword,
; Function Mcal_lUpdateSafetyEndInit
.L190:
Mcal_lUpdateSafetyEndInit:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  2567                                          const boolean UpdatePassword,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2568                                          const boolean SetResetProtection)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2569  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2570    uint32 Password;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2571    uint32 Seicon0Value;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2572    uint32 NewSeicon0Value;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2573    /* The variable 'dummy' is made volatile to prevent any optimization of the
; ..\mcal\McalLib\ssc\src\McalLib.c	  2574     * variable during compilation, since the variable is used only for read back
; ..\mcal\McalLib\ssc\src\McalLib.c	  2575     * of ENDINIT control registers, after the same register is written in the
; ..\mcal\McalLib\ssc\src\McalLib.c	  2576     * previous statement
; ..\mcal\McalLib\ssc\src\McalLib.c	  2577     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2578    volatile uint32 dummy;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2579  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2580    /* Calculate the password from the retrieved SCU_SEICON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2581    /* [cover parentID={B2B14FB1-F8EF-4cde-B5DA-4129BA331374}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2582     * Calculate the password from the retrieved SCU_SEICON0 register[/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2583     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2584    Password = Mcal_lDecryptPw((uint32)(MODULE_SCU.SEICON0.U));
	mov	d15,d6
	movh.a	a15,#61443
.L741:
	mov	e8,d5,d4
	lea	a15,[a15]@los(0xf00362b4)
	ld.w	d4,[a15]
.L739:
	sub.a	a10,#8
.L738:
	call	Mcal_lDecryptPw
.L742:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2585  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2586    /* [cover parentID={A8E28D51-8868-4041-ADE1-5D2A9BA8A54C}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2587        Check if ENDINIT Protection needs to be Set
; ..\mcal\McalLib\ssc\src\McalLib.c	  2588       [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2589    if (SetResetProtection == MCAL_SETENDINITPROTECTION)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2590    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2591      /* [cover parentID={9C14810F-46F4-4a5e-B586-CE5D22DF82D4}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2592         Calculate the value to be written in SCU_SEICON0 to re-enable protection
; ..\mcal\McalLib\ssc\src\McalLib.c	  2593         [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2594      Seicon0Value =
; ..\mcal\McalLib\ssc\src\McalLib.c	  2595                    ((uint32)MCAL_SAFETY_ENDINIT_WDT_TIMER_REL |
; ..\mcal\McalLib\ssc\src\McalLib.c	  2596                      ((uint32)Password << (uint32)IFX_SCU_SEICON0_EPW_OFF) |
	fcall	.cocofun_1
.L740:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2597                      ((uint32)MCAL_SAFETY_ENDINIT_PROTECTED <<
; ..\mcal\McalLib\ssc\src\McalLib.c	  2598                      IFX_SCU_SEICON0_ENDINIT_OFF));
; ..\mcal\McalLib\ssc\src\McalLib.c	  2599    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2600    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  2601    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2602      /* [cover parentID={A2915C78-C633-468e-A3AE-96E629A22143}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2603       * Calculate the value to be written in SCU_SEICON0 to unlock it [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2604       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2605      Seicon0Value = ((uint32)MCAL_SAFETY_ENDINIT_WDT_TIMER_REL |
; ..\mcal\McalLib\ssc\src\McalLib.c	  2606                    ((uint32)Password << (uint32)IFX_SCU_SEICON0_EPW_OFF));
; ..\mcal\McalLib\ssc\src\McalLib.c	  2607    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2608  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2609    /* [cover parentID={4142F921-D301-41d9-9108-17026665FD43}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2610     * Check if passwprd needs to be updated[/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2611     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2612    if (UpdatePassword == MCAL_UPDATE_NEWPASSWORD)
	jeq	d9,#0,.L96
.L745:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2613    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2614      /* Calculate the value to be written in SCU_SEICON0,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2615       * to update it with new password */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2616      /* [cover parentID={DEC55626-564E-4d36-AACE-8AA4F69DDCC8}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2617       * Calculate the value to be written in SCU_SEICON0, to update it with new
; ..\mcal\McalLib\ssc\src\McalLib.c	  2618       * password [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2619       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2620      NewSeicon0Value = (uint32)((uint32)MCAL_SAFETY_ENDINIT_WDT_TIMER_REL |
; ..\mcal\McalLib\ssc\src\McalLib.c	  2621                        ((uint32)NewPassword << (uint32)IFX_SCU_SEICON0_EPW_OFF) |
; ..\mcal\McalLib\ssc\src\McalLib.c	  2622                        ((uint32)MCAL_SAFETY_ENDINIT_PROTECTED <<
; ..\mcal\McalLib\ssc\src\McalLib.c	  2623                        (uint32)IFX_SCU_SEICON0_ENDINIT_OFF));
; ..\mcal\McalLib\ssc\src\McalLib.c	  2624  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2625      /* Update the SCU_SEICON0 to enable ENDINIT protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2626      /* [cover parentID={B21BEF3D-EDEE-46b8-BC20-FCD25348DFBB}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2627       * Update the SCU_SEICON0 to enable ENDINIT protection[/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2628       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2629      MODULE_SCU.SEICON0.U = Seicon0Value;
	st.w	[a15],d0
.L1118:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2630  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2631       /* [cover parentID={D4DFA4A6-F96A-4aca-9326-4A129E55ABEC}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2632        * Read back the SCU_SEICON0  reg to ensure Write is is done correctly
; ..\mcal\McalLib\ssc\src\McalLib.c	  2633        * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2634        */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2635      dummy = MODULE_SCU.SEICON0.U;
	ld.w	d15,[a15]
.L1119:
	st.w	[a10],d15
.L1120:
	fcall	.cocofun_7
.L1121:
	j	.L97
.L96:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2636  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2637      /* Update the SCU_SEICON0 with the new password */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2638      /* [cover parentID={010249F4-AFF9-44ca-8AA6-D9FA225088F0}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2639       * Update the SCU_SEICON0 with the new password
; ..\mcal\McalLib\ssc\src\McalLib.c	  2640       * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2641       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2642      MODULE_SCU.SEICON0.U = NewSeicon0Value;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2643  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2644      /* Read back the SEICON0 reg to ensure Write is is done correctly */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2645      /* [cover parentID={AEF500FF-30FE-4fb1-B43C-4C65434B4877}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2646       * Read back the SCU_SEICON0  reg to ensure Write is is done correctly
; ..\mcal\McalLib\ssc\src\McalLib.c	  2647       * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2648       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2649      dummy = MODULE_SCU.SEICON0.U;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2650    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2651    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  2652    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2653      /* [cover parentID={E6BA5EB6-33FF-4772-8389-8085A11206C5}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2654       * Update the SCU_SEICON0 to enable ENDINIT protection
; ..\mcal\McalLib\ssc\src\McalLib.c	  2655       * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2656       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2657      MODULE_SCU.SEICON0.U = Seicon0Value;
	st.w	[a15],d0
.L97:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2658      /* [cover parentID={D41B3AF3-7A8D-45a3-990C-632AF21876D7}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2659       * Read back the SCU_SEICON0  reg to ensure Write is is done correctly
; ..\mcal\McalLib\ssc\src\McalLib.c	  2660       * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2661       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2662      dummy = MODULE_SCU.SEICON0.U;
	ld.w	d15,[a15]
.L1122:
	st.w	[a10],d15
.L1123:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2663    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2664  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2665    UNUSED_PARAMETER(dummy);
	ld.w	d15,[a10]
.L1124:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2666  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2667    /* [cover parentID={FD7EA7AA-6F81-406b-8C2A-0F16677957F4}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2668     * Return the old password [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2669     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2670    return Password;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2671  }
	ret
.L621:
	
__Mcal_lUpdateSafetyEndInit_function_end:
	.size	Mcal_lUpdateSafetyEndInit,__Mcal_lUpdateSafetyEndInit_function_end-Mcal_lUpdateSafetyEndInit
.L368:
	; End of function
	
	.sdecl	'.text.McalLib..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.McalLib..cocofun_7'
	.align	2
; Function .cocofun_7
.L192:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	sh	d8,#2
.L1186:
	mov	d15,#2
	addih	d15,d15,#65532
.L1187:
	or	d8,d15
	st.w	[a15],d8
.L744:
	fret
.L418:
	; End of function
	.sdecl	'.text.McalLib..cocofun_1',code,cluster('.cocofun_1')
	.sect	'.text.McalLib..cocofun_1'
	.align	2
; Function .cocofun_1
.L194:
.cocofun_1:	.type	func
; Function body .cocofun_1, coco_iter:0
	sh	d0,d2,#2
.L1154:
	jeq	d15,#0,.L94
.L1155:
	mov	d15,#2
.L743:
	addih	d15,d15,#65532
	j	.L95
.L94:
	movh	d15,#65532
.L95:
	or	d0,d15
	fret
.L388:
	; End of function
	.sdecl	'.text.McalLib.Mcal_lUpdatePeripheralEndInit',code,cluster('Mcal_lUpdatePeripheralEndInit')
	.sect	'.text.McalLib.Mcal_lUpdatePeripheralEndInit'
	.align	2
	

; ..\mcal\McalLib\ssc\src\McalLib.c	  2672  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2673  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  2674  ** Traceability     :[cover parentID={61F6C298-1B19-4592-9F11-A09849183489}]  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2675  **                   [/cover]                                                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2676  ** Syntax           : static uint32 Mcal_lUpdatePeripheralEndInit(            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2677  **                                          const uint32 NewPassword,         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2678  **                                          const boolean UpdatePassword,     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2679  **                                          const boolean SetResetProtection) **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2680  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2681  ** Description      : This interface updates password/enables/disable         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2682  **                    Peripheral EndInit protection                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2683  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2684  ** Service ID       : NA                                                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2685  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2686  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2687  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2688  ** Reentrancy       : Non Reentrant                                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2689  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2690  ** Parameters(in)   : NewPassword        -  Password to be updated            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2691  **                    UpdatePassword     -  True  - Update Password           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2692  **                                          False - No password update        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2693  **                    SetResetProtection -  True  - Enable ENDINIT protection **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2694  **                                          False - Disable ENDINIT protection**
; ..\mcal\McalLib\ssc\src\McalLib.c	  2695  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2696  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2697  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2698  ** Return value     : Password - Password retrieved from SCU_EICON0 register  **                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2699  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2700  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2701  static uint32 Mcal_lUpdatePeripheralEndInit(const uint32 NewPassword,
; Function Mcal_lUpdatePeripheralEndInit
.L196:
Mcal_lUpdatePeripheralEndInit:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  2702                                              const boolean UpdatePassword,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2703                                              const boolean SetResetProtection)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2704  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2705    uint32 Password;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2706    uint32 Eicon0Value;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2707    uint32 NewEicon0Value;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2708    /* The variable 'dummy' is made volatile to prevent any optimization of the
; ..\mcal\McalLib\ssc\src\McalLib.c	  2709     * variable during compilation, since the variable is used only for read back
; ..\mcal\McalLib\ssc\src\McalLib.c	  2710     * of ENDINIT control registers, after the same register is written in the
; ..\mcal\McalLib\ssc\src\McalLib.c	  2711     * previous statement
; ..\mcal\McalLib\ssc\src\McalLib.c	  2712     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2713    volatile uint32 dummy;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2714  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2715    /* Calculate the password from the retrieved EICON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2716    /* [cover parentID={72C08E75-2CBC-4e8b-9D57-DC2AFD225F73}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2717     * Calculate the password from the retrieved SCU_SEICON0 register
; ..\mcal\McalLib\ssc\src\McalLib.c	  2718     * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2719     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2720    Password = Mcal_lDecryptPw((uint32)(MODULE_SCU.EICON0.U));
	mov	d15,d6
	movh.a	a15,#61443
.L749:
	mov	e8,d5,d4
	lea	a15,[a15]@los(0xf003629c)
	ld.w	d4,[a15]
.L747:
	sub.a	a10,#8
.L746:
	call	Mcal_lDecryptPw
.L751:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2721  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2722    /* [cover parentID={92440BB6-B642-4820-B994-B0B7C901DA49}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2723    if (SetResetProtection == MCAL_SETENDINITPROTECTION)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2724    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2725      /* [cover parentID={8DC0A3C6-9CFE-4d8a-A9B3-E7D2B7A3F712}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2726       * Calculate the value to be written in SCU_EICON0 to re-enable protection
; ..\mcal\McalLib\ssc\src\McalLib.c	  2727       * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2728       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2729      Eicon0Value =
; ..\mcal\McalLib\ssc\src\McalLib.c	  2730                    ((uint32)MCAL_PER_ENDINIT_WDT_TIMER_REL |
; ..\mcal\McalLib\ssc\src\McalLib.c	  2731                      ((uint32)Password << (uint32)IFX_SCU_EICON0_EPW_OFF) |
	fcall	.cocofun_1
.L748:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2732                      ((uint32)MCAL_PER_ENDINIT_PROTECTED <<
; ..\mcal\McalLib\ssc\src\McalLib.c	  2733                      IFX_SCU_EICON0_ENDINIT_OFF));
; ..\mcal\McalLib\ssc\src\McalLib.c	  2734    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2735    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  2736    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2737      /* [cover parentID={B1DD1917-EB64-4255-A13C-37283405691C}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2738       * Calculate the value to be written in SCU_EICON0 to unlock it
; ..\mcal\McalLib\ssc\src\McalLib.c	  2739       * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2740       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2741      Eicon0Value = ((uint32)MCAL_PER_ENDINIT_WDT_TIMER_REL |
; ..\mcal\McalLib\ssc\src\McalLib.c	  2742                    ((uint32)Password << (uint32)IFX_SCU_EICON0_EPW_OFF));
; ..\mcal\McalLib\ssc\src\McalLib.c	  2743    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2744  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2745    /* [cover parentID={AC012730-EF78-4b9b-99B1-9C1909D90060}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2746     * Check if passwprd needs to be updated
; ..\mcal\McalLib\ssc\src\McalLib.c	  2747     * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2748     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2749    if (UpdatePassword == MCAL_UPDATE_NEWPASSWORD)
	jeq	d9,#0,.L101
.L750:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2750    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2751      /* Calculate the value to be written in SCU_EICON0,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2752       * to update it with new password */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2753  	 /* [cover parentID={8A80061E-1AE0-4d21-AE7E-2A80AB93C630}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2754       * Calculate the value to be written in SCU_EICON0,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2755       * to update it with new password
; ..\mcal\McalLib\ssc\src\McalLib.c	  2756       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2757      NewEicon0Value = ((uint32)MCAL_PER_ENDINIT_WDT_TIMER_REL |
; ..\mcal\McalLib\ssc\src\McalLib.c	  2758                       ((uint32)NewPassword << (uint32)IFX_SCU_EICON0_EPW_OFF) |
; ..\mcal\McalLib\ssc\src\McalLib.c	  2759                       ((uint32)MCAL_PER_ENDINIT_PROTECTED <<
; ..\mcal\McalLib\ssc\src\McalLib.c	  2760                       IFX_SCU_EICON0_ENDINIT_OFF));
; ..\mcal\McalLib\ssc\src\McalLib.c	  2761  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2762      /* Update the SCU_EICON0 to enable ENDINIT protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2763      MODULE_SCU.EICON0.U = Eicon0Value;
	st.w	[a15],d0
.L1107:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2764  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2765      /* Read back the SCU_EICON0  reg to ensure Write is is done correctly */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2766      dummy = MODULE_SCU.EICON0.U;
	ld.w	d15,[a15]
.L1108:
	st.w	[a10],d15
.L1109:
	fcall	.cocofun_7
.L1110:
	j	.L102
.L101:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2767  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2768      /* Update the SCU_SEICON0 with the new password */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2769      /* [cover parentID={E0716D6C-3D3D-4d96-8625-F6E0DAB3B87A}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2770       * Update the SCU_SEICON0 with the new password
; ..\mcal\McalLib\ssc\src\McalLib.c	  2771       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2772      MODULE_SCU.EICON0.U = NewEicon0Value;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2773  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2774      /* Read back the EICON0 reg to ensure Write is is done correctly */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2775      dummy = MODULE_SCU.EICON0.U;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2776    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2777    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  2778    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2779      /* Update the SCU_SEICON0 to enable ENDINIT protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2780      /* [cover parentID={1588C1CA-ABCF-4b7b-BCE6-C665A41F2EAD}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2781       * Update the SCU_SEICON0 to enable ENDINIT protection
; ..\mcal\McalLib\ssc\src\McalLib.c	  2782       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2783  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2784      MODULE_SCU.EICON0.U = Eicon0Value;
	st.w	[a15],d0
.L102:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2785  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2786       /* [cover parentID={ADA1213B-A447-4277-BAF4-AF8299BA5A86}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2787        * Read back the SCU_EICON0  reg to ensure Write is is done correctly
; ..\mcal\McalLib\ssc\src\McalLib.c	  2788        * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2789      dummy = MODULE_SCU.EICON0.U;
	ld.w	d15,[a15]
.L1111:
	st.w	[a10],d15
.L1112:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2790    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2791  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2792    UNUSED_PARAMETER(dummy);
	ld.w	d15,[a10]
.L1113:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2793  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2794    /* Return the old password */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2795    /* [cover parentID={C52BFE95-3C6F-4d08-BF04-AEC275D5A191}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2796       * Return the old password
; ..\mcal\McalLib\ssc\src\McalLib.c	  2797       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2798    return Password;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2799  }
	ret
.L610:
	
__Mcal_lUpdatePeripheralEndInit_function_end:
	.size	Mcal_lUpdatePeripheralEndInit,__Mcal_lUpdatePeripheralEndInit_function_end-Mcal_lUpdatePeripheralEndInit
.L363:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_lUpdateCpuEndInit',code,cluster('Mcal_lUpdateCpuEndInit')
	.sect	'.text.McalLib.Mcal_lUpdateCpuEndInit'
	.align	2
	

; ..\mcal\McalLib\ssc\src\McalLib.c	  2800  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2801  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  2802  ** Traceability     :[cover parentID={DED86600-0ABE-4e8f-B5AD-199D2317A8EB}]  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2803  **                   [/cover]                                                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2804  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2805  ** Syntax           : static uint32 Mcal_lUpdateCpuEndInit(                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2806  **                                          const uint32 NewPassword,         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2807  **                                          const uint32 CoreIdIndex.         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2808  **                                          const uint32 TimerRelValAtReset   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2809  **                                          const boolean UpdatePassword,     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2810  **                                          const boolean SetResetProtection) **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2811  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2812  ** Description      : This interface updates password/enables/disable         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2813  **                    CPU EndInit protection                                  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2814  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2815  ** Service ID       : NA                                                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2816  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2817  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2818  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2819  ** Reentrancy       : Not Reentrant on same CPU, Reentrant on other CPUs      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2820  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2821  ** Parameters(in)   : NewPassword        -  Password to be updated            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2822  **                    CoreIdIndex        -  Core ID                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2823  **                    TimerRelValAtReset -  Timer value at ENDINIT disabled   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2824  **                    UpdatePassword     -  True  - Update Password           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2825  **                                          False - No password update        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2826  **                    SetResetProtection -  True  - Enable ENDINIT protection **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2827  **                                          False - Disable ENDINIT protection**
; ..\mcal\McalLib\ssc\src\McalLib.c	  2828  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2829  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2830  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2831  ** Return value     : CpuEndInitRet - Current password and TimerReload value  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2832  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2833  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2834  static McalLib_CpuEndInitRetType Mcal_lUpdateCpuEndInit(
; Function Mcal_lUpdateCpuEndInit
.L198:
Mcal_lUpdateCpuEndInit:	.type	func
	mov	d12,d5
	sub.a	a10,#16
.L752:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2835                                       const uint32  NewPassword,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2836                                       const uint32  CoreIdIndex,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2837                                       const uint32  TimerRelValAtReset,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2838                                       const boolean UpdatePassword,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2839                                       const boolean SetResetProtection)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2840  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2841    McalLib_CpuEndInitRetType CpuEndInitRet;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2842    uint32 UnlockCpuWdtCon0Value;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2843    uint32 NewCpuWdtCon0Value;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2844    uint32 UnlockTimerReload;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2845    uint32 CpuWdtCon0Value;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2846    uint32 UnlockPassword;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2847    uint32 TimerReload;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2848  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2849    /* The variable 'dummy' is made volatile to prevent any optimization of the
; ..\mcal\McalLib\ssc\src\McalLib.c	  2850     * variable during compilation, since the variable is used only for read back
; ..\mcal\McalLib\ssc\src\McalLib.c	  2851     * of ENDINIT control registers, after the same register is written in the
; ..\mcal\McalLib\ssc\src\McalLib.c	  2852     * previous statement
; ..\mcal\McalLib\ssc\src\McalLib.c	  2853     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2854    volatile uint32 dummy;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2855  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2856    /* Initalize to zero */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2857    CpuEndInitRet.TimerRelValAtReset = 0x0U;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2858  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2859    /* Read the WDTCPUxCON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2860     CpuWdtCon0Value = MODULE_SCU.WDTCPU[CoreIdIndex].CON0.U;
	mul	d0,d12,#12
	st.w	[a10]8,d4
.L756:
	st.w	[a10]4,d7
.L759:
	mov.a	a15,d0
.L1088:
	mov	d15,d6
	ld.bu	d13,[a10]16
.L757:
	mov	d10,#0
	fcall	.cocofun_4
	lea	a15,[a3]25164
.L1089:
	ld.w	d14,[a15]
.L760:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2861  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2862    /* Compute the password required to unlock the WDTCPUxCON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2863    UnlockPassword = Mcal_lCpuPwSequence(CoreIdIndex, (uint32)CpuWdtCon0Value);
	mov	e4,d14,d12
	call	Mcal_lCpuPwSequence
.L754:
	mov	d9,d2
.L762:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2864  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2865    /* Compute the timer reload value required to unlock
; ..\mcal\McalLib\ssc\src\McalLib.c	  2866     * the WDTCPUxCON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2867    UnlockTimerReload = Mcal_lCpuRelValue(CoreIdIndex, (uint32)CpuWdtCon0Value);
	mov	e4,d14,d12
	call	Mcal_lCpuRelValue
.L761:
	mov	d8,d2
.L765:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2868  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2869    /* Extract the current timer reload value */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2870    TimerReload = Mcal_lCalculateTimerReloadVal(CoreIdIndex, TimerRelValAtReset,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2871                                                SetResetProtection);
	mov	e4,d15,d12
	mov	d6,d13
	call	Mcal_lCalculateTimerReloadVal
.L764:
	mov	d12,d2
.L755:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2872  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2873    /* Compute the current password, to be returned, based on the retrieved
; ..\mcal\McalLib\ssc\src\McalLib.c	  2874     * WDTCPUxCON0 value */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2875    CpuEndInitRet.Password = Mcal_lDecryptPw((uint32)CpuWdtCon0Value);
	mov	d4,d14
	call	Mcal_lDecryptPw
.L766:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2876  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2877    /* Calculate the value to be written in WDTCPUxCON0, to unlock it */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2878    UnlockCpuWdtCon0Value =
; ..\mcal\McalLib\ssc\src\McalLib.c	  2879            (UnlockTimerReload << IFX_SCU_WDTCPU_CON0_REL_OFF) |
	sh	d15,d8,#16
.L758:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2880            (UnlockPassword << IFX_SCU_WDTCPU_CON0_PW_OFF)|
	sh	d9,#2
.L763:
	or	d15,d9
.L1090:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2881            ((uint32)MCAL_CPUWDTCON0_UNLOCK);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2882  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2883     /* Check if password update is requested */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2884     /* [cover parentID={5D303B68-3C5F-4f92-9593-9E42DC9BD5C1}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2885        Check if password update is requested
; ..\mcal\McalLib\ssc\src\McalLib.c	  2886        [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2887    if (UpdatePassword == MCAL_UPDATE_NEWPASSWORD)
	or	d0,d15,#1
	ld.w	d15,[a10]4
.L767:
	mov	d11,d2
.L770:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2888    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2889      /* Calculate the value to be written in WDTCPUxCON0, to update it with
; ..\mcal\McalLib\ssc\src\McalLib.c	  2890       * new password
; ..\mcal\McalLib\ssc\src\McalLib.c	  2891       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2892      /* [cover parentID={11FAAF91-980D-4f27-B797-29B7C0666674}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2893       * Calculate the value to be written in WDTCPUxCON0 to update the new
; ..\mcal\McalLib\ssc\src\McalLib.c	  2894       * password [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2895       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2896      NewCpuWdtCon0Value = (TimerReload << IFX_SCU_WDTCPU_CON0_REL_OFF) |
	sh	d1,d12,#16
.L1091:
	jeq	d15,#0,.L104
.L1092:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2897                           (NewPassword << IFX_SCU_WDTCPU_CON0_PW_OFF)  |
	ld.w	d15,[a10]8
.L769:
	sh	d15,#2
.L771:
	or	d1,d15
.L1093:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2898                           ((uint32)MCAL_CPUWDTCON0_LOCK);
	or	d15,d1,#3
	j	.L105
.L104:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2899    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2900    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  2901    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2902      /* Check Set/Reset ENDINIT protection requested */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2903      /* [cover parentID={0FE372A6-78E4-4839-8263-6740A02C2AC7}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2904         Check Set/Reset ENDINIT protection requested
; ..\mcal\McalLib\ssc\src\McalLib.c	  2905         [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2906      if (SetResetProtection == MCAL_SETENDINITPROTECTION)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2907      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2908        /* Calculate the value to be written in WDTCPUxCON0,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2909         * to re-enable ENDINIT protection
; ..\mcal\McalLib\ssc\src\McalLib.c	  2910         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2911        /* [cover parentID={315C2D0B-B963-449f-B59D-CB9B8373F038}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2912         *  Calculate the value to be written in WDTCPUxCON0, to re-enable
; ..\mcal\McalLib\ssc\src\McalLib.c	  2913         *  ENDINIT protection[/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2914         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2915        NewCpuWdtCon0Value = (TimerReload << IFX_SCU_WDTCPU_CON0_REL_OFF) |
; ..\mcal\McalLib\ssc\src\McalLib.c	  2916                             (CpuEndInitRet.Password <<
	mov	d15,d11
.L772:
	sh	d15,#2
.L1094:
	or	d15,d1
.L1095:
	jeq	d13,#0,.L106
.L773:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2917                             IFX_SCU_WDTCPU_CON0_PW_OFF)  |
; ..\mcal\McalLib\ssc\src\McalLib.c	  2918                             ((uint32)MCAL_CPUWDTCON0_ENABLE_ENDINIT);
	or	d15,#3
	j	.L107
.L106:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2919      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2920      else
; ..\mcal\McalLib\ssc\src\McalLib.c	  2921      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2922        /* Calculate the value to be written in WDTCPUxCON0,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2923         * to temporarily disable ENDINIT protection
; ..\mcal\McalLib\ssc\src\McalLib.c	  2924         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2925        /* [cover parentID={FA68029C-B3AB-4683-8164-47E83FD2A16F}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2926         * Calculate the value to be written in WDTCPUxCON0, to temporarily
; ..\mcal\McalLib\ssc\src\McalLib.c	  2927         * disable ENDINIT protection and store the timer reload value
; ..\mcal\McalLib\ssc\src\McalLib.c	  2928         * (required while re-enabling ENDINIT protection)[/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2929         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2930        NewCpuWdtCon0Value = (TimerReload << IFX_SCU_WDTCPU_CON0_REL_OFF) |
; ..\mcal\McalLib\ssc\src\McalLib.c	  2931                             (CpuEndInitRet.Password <<
; ..\mcal\McalLib\ssc\src\McalLib.c	  2932                             IFX_SCU_WDTCPU_CON0_PW_OFF)  |
	or	d15,#2
.L1096:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2933                             ((uint32)MCAL_CPUWDTCON0_DISABLE_ENDINIT);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2934  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2935        CpuEndInitRet.TimerRelValAtReset = TimerReload;
	mov	d10,d12
.L107:
.L105:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2936      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2937    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  2938  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2939    /* Unlock the WDTCPUxCON0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2940    MODULE_SCU.WDTCPU[CoreIdIndex].CON0.U = UnlockCpuWdtCon0Value;
	st.w	[a15],d0
.L1097:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2941  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2942    dummy = MODULE_SCU.WDTCPU[CoreIdIndex].CON0.U;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2943  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2944    /* Update the WDTCPUxCON0 to re-enable/temporary disable ENDINIT protection */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2945    MODULE_SCU.WDTCPU[CoreIdIndex].CON0.U = NewCpuWdtCon0Value;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2946  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2947    dummy = MODULE_SCU.WDTCPU[CoreIdIndex].CON0.U;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2948  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2949    UNUSED_PARAMETER(dummy);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2950  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2951    /* [cover parentID={F2DEA58E-0358-4096-A1EA-D805864C0D80}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  2952       Return the old password
; ..\mcal\McalLib\ssc\src\McalLib.c	  2953       [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2954    return (CpuEndInitRet);
	mov	e2,d11,d10
.L1098:
	ld.w	d0,[a15]
.L768:
	st.w	[a10],d0
.L1099:
	st.w	[a15],d15
.L1100:
	ld.w	d15,[a15]
.L774:
	st.w	[a10],d15
.L1101:
	ld.w	d15,[a10]
.L1102:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2955  }
	ret
.L590:
	
__Mcal_lUpdateCpuEndInit_function_end:
	.size	Mcal_lUpdateCpuEndInit,__Mcal_lUpdateCpuEndInit_function_end-Mcal_lUpdateCpuEndInit
.L358:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_lCalculateTimerReloadVal',code,cluster('Mcal_lCalculateTimerReloadVal')
	.sect	'.text.McalLib.Mcal_lCalculateTimerReloadVal'
	.align	2
	

; ..\mcal\McalLib\ssc\src\McalLib.c	  2956  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2957  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  2958  ** Traceability     :[cover parentID={C9B454CE-0DAA-4ad1-958E-B32F00DE06C7}]  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2959  **                   [/cover]                                                 **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2960  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2961  ** Syntax           : LOCAL_INLINE uint32 Mcal_lCalculateTimerReloadVal(      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2962  **                                  const uint32 CoreId,                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2963  **                                  const uint32 TimerRelValAtReset,          **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2964  **                                  const boolean SetResetProtection)         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2965  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2966  ** Description      : This interface calculates the timer reload value        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2967  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2968  ** Service ID       : NA                                                      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2969  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2970  ** Sync/Async       : Synchronous                                             **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2971  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2972  ** Reentrancy       : Not Reentrant on same CPU, Reentrant on other CPUs      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2973  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2974  ** Parameters(in)   : CoreId             -  Core ID                           **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2975  **                    TimerRelValAtReset -  Timer value at ENDINIT disabled   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2976  **                    SetResetProtection -  True  - Enable ENDINIT protection **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2977  **                                          False - Disable ENDINIT protection**
; ..\mcal\McalLib\ssc\src\McalLib.c	  2978  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2979  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2980  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2981  ** Return value     : TimerReload - Timer reload value                        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2982  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  2983  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  2984  LOCAL_INLINE uint32 Mcal_lCalculateTimerReloadVal(const uint32 CoreId,
; Function Mcal_lCalculateTimerReloadVal
.L200:
Mcal_lCalculateTimerReloadVal:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  2985                                       const uint32 TimerRelValAtReset,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2986                                       const boolean SetResetProtection)
; ..\mcal\McalLib\ssc\src\McalLib.c	  2987  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2988    uint32 TimerReload = Mcal_GetBitAtomic(MODULE_SCU.WDTCPU[CoreId].SR.U,
	mul	d15,d4,#12
	mov.a	a15,d15
	fcall	.cocofun_4
	ld.w	d15,[a3]25172
	extr.u	d2,d15,#16,#16
.L775:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2989                                           IFX_SCU_WDTCPU_SR_TIM_OFF,
; ..\mcal\McalLib\ssc\src\McalLib.c	  2990                                           IFX_SCU_WDTCPU_SR_TIM_LEN);
; ..\mcal\McalLib\ssc\src\McalLib.c	  2991    /* [cover parentID={9F31EF03-A22B-400c-9BA0-DA3240B9F447}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2992    if (SetResetProtection == MCAL_SETENDINITPROTECTION)
	jeq	d6,#0,.L109
.L1129:

; ..\mcal\McalLib\ssc\src\McalLib.c	  2993    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  2994      TimerReload = TimerReload - (uint32)MCAL_ENDINIT_TIMEOUT_VALUE;
; ..\mcal\McalLib\ssc\src\McalLib.c	  2995  
; ..\mcal\McalLib\ssc\src\McalLib.c	  2996      /* Calculate the timer reload value */
; ..\mcal\McalLib\ssc\src\McalLib.c	  2997      /* Timer Reload value = Current timer reload value + the WDT timer value
; ..\mcal\McalLib\ssc\src\McalLib.c	  2998       * when ENDINIT protection was disabled
; ..\mcal\McalLib\ssc\src\McalLib.c	  2999       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3000      /* [cover parentID={AF55A6A4-A70F-4a37-A78D-3F7EEAC1943C}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3001      TimerReload = TimerReload + TimerRelValAtReset;
	add	d2,d5
.L776:
	mov.u	d15,#65532
.L1130:
	sub	d2,d15
.L1131:

; ..\mcal\McalLib\ssc\src\McalLib.c	  3002  
; ..\mcal\McalLib\ssc\src\McalLib.c	  3003      if(TimerReload > (uint32)MCAL_CPUWDT_TIMER_VALUE_MAX)
	mov.u	d15,#65535
.L1132:
	min.u	d2,d2,d15
.L109:

; ..\mcal\McalLib\ssc\src\McalLib.c	  3004      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  3005        TimerReload = MCAL_CPUWDT_TIMER_VALUE_MAX;
; ..\mcal\McalLib\ssc\src\McalLib.c	  3006      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  3007    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  3008  
; ..\mcal\McalLib\ssc\src\McalLib.c	  3009    return TimerReload;
; ..\mcal\McalLib\ssc\src\McalLib.c	  3010  }
	ret
.L633:
	
__Mcal_lCalculateTimerReloadVal_function_end:
	.size	Mcal_lCalculateTimerReloadVal,__Mcal_lCalculateTimerReloadVal_function_end-Mcal_lCalculateTimerReloadVal
.L373:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_lGetSpinlock',code,cluster('Mcal_lGetSpinlock')
	.sect	'.text.McalLib.Mcal_lGetSpinlock'
	.align	2
	

; ..\mcal\McalLib\ssc\src\McalLib.c	  3011  
; ..\mcal\McalLib\ssc\src\McalLib.c	  3012  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  3013  ** Traceability     : [cover parentID={EEAA8C0B-6BD5-462e-A3D8-3116EF8B6747}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3014  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3015  ** Syntax          : void Mcal_lGetSpinlock                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3016  **                    ( volatile uint32 * const LockAddress,                  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3017  **                             const uint32 Timeout, const uint8 ApiId)       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3018  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3019  ** Description     : This function will check if spinlock is available in an  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3020  **                   non atomic fashion and if spinlock is free then it is    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3021  **                   acquired in an atomic fashion acquired else it will      **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3022  **                   try again until the timer tick provided by user is not   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3023  **                   less than difference between current and base stm ticks  **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3024  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3025  ** Service ID      : NA                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3026  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3027  ** Sync/Async      : Synchronous                                              **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3028  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3029  ** Reentrancy      : Non Reentrant                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3030  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3031  ** Parameters(in)  : LockAddress - It is used to lock the shared variables.   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3032  **                   Timeout - It is total time provided in micro second by   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3033  **                              user using which spinlock should be acquired. **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3034  **                              Timeout value should be in range of 1 us to   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3035  **                              1048575 us (timeout when passed as 1 indicate **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3036  **                              as 1 us to this API).                         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3037  **                   ApiId - Service ID of the API reporting an error         **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3038  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3039  ** Parameters (out) : None                                                    **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3040  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3041  ** Return value     : None.                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3042  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  3043  static void Mcal_lGetSpinlock(volatile uint32 *const LockAddress,
; Function Mcal_lGetSpinlock
.L202:
Mcal_lGetSpinlock:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  3044                                const uint32 Timeout, const uint8 ApiId)
; ..\mcal\McalLib\ssc\src\McalLib.c	  3045  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  3046    uint32 LockAddVal;
; ..\mcal\McalLib\ssc\src\McalLib.c	  3047    uint32 DelayTickResolution;
; ..\mcal\McalLib\ssc\src\McalLib.c	  3048    uint32 LockAddRet;
; ..\mcal\McalLib\ssc\src\McalLib.c	  3049    uint32 DelayTicks, BaseSTMTick, CurrSTMTick;
; ..\mcal\McalLib\ssc\src\McalLib.c	  3050    uint32 LockVal = SPINLOCKBUSY;
; ..\mcal\McalLib\ssc\src\McalLib.c	  3051  
; ..\mcal\McalLib\ssc\src\McalLib.c	  3052    /* [cover parentID={887AEE46-FC58-4ba8-BCB2-4E331C00736E}][/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3053    if(Mcal_StmTimerResolution == 0U)
	movh.a	a2,#@his(Mcal_StmTimerResolution)
.L1137:
	mov	d15,d4
	ld.w	d2,[a2]@los(Mcal_StmTimerResolution)
.L777:
	mov.aa	a15,a4
.L779:
	jne	d2,#0,.L111
.L1138:

; ..\mcal\McalLib\ssc\src\McalLib.c	  3054    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  3055      DelayTickResolution = Mcal_lDelayResetTickCalibration
; ..\mcal\McalLib\ssc\src\McalLib.c	  3056                                              (MCALLIB_SID_GETSPINLOCK);
	mov	d4,#141
	call	Mcal_lDelayResetTickCalibration
.L111:

; ..\mcal\McalLib\ssc\src\McalLib.c	  3057    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  3058    else
; ..\mcal\McalLib\ssc\src\McalLib.c	  3059    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  3060      DelayTickResolution = Mcal_StmTimerResolution;
; ..\mcal\McalLib\ssc\src\McalLib.c	  3061    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  3062  
; ..\mcal\McalLib\ssc\src\McalLib.c	  3063    /* [cover parentID={397C69E3-87F0-4802-AC83-A23CFFC54804}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3064     * Check is DelayTickResolution resolution is zero even after calibaration
; ..\mcal\McalLib\ssc\src\McalLib.c	  3065     * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3066     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3067    if(DelayTickResolution != 0U)
	jeq	d2,#0,.L113
.L1139:

; ..\mcal\McalLib\ssc\src\McalLib.c	  3068    {
; ..\mcal\McalLib\ssc\src\McalLib.c	  3069      /* [cover parentID={250EA709-EF99-4943-BEC6-BE8A3C26EE0B}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3070         Calculate delay ticks using delay tick resolution
; ..\mcal\McalLib\ssc\src\McalLib.c	  3071         [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3072      DelayTicks = ((Timeout / DelayTickResolution) * MCAL_TIMEOUT);
; ..\mcal\McalLib\ssc\src\McalLib.c	  3073      CurrSTMTick         = MCAL_GET_STM_TICK();
	div.u	e2,d15,d2
	lea	a2,0xf0001010
.L780:
	mov	d0,#1000
	ld.w	d15,[a2]
.L778:

; ..\mcal\McalLib\ssc\src\McalLib.c	  3074      BaseSTMTick         = CurrSTMTick;
; ..\mcal\McalLib\ssc\src\McalLib.c	  3075      /* [cover parentID={B277155C-3137-4a57-8443-B908AB561FBD}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3076       * If spinlock is not acquired and if difference between current and base
; ..\mcal\McalLib\ssc\src\McalLib.c	  3077       * STM ticks is less than delay ticks
; ..\mcal\McalLib\ssc\src\McalLib.c	  3078       * [/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3079      do
; ..\mcal\McalLib\ssc\src\McalLib.c	  3080      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  3081        LockAddVal = *LockAddress;
; ..\mcal\McalLib\ssc\src\McalLib.c	  3082        /* Loop untill the lock address is free  for a specified timeout in a
; ..\mcal\McalLib\ssc\src\McalLib.c	  3083         * non-atomic fashion
; ..\mcal\McalLib\ssc\src\McalLib.c	  3084         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3085        /* [cover parentID={68D38DF0-C61C-450e-8AFD-005EA69D1E84}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3086         * Loop if spinlock is busy and if difference between current and base STM
; ..\mcal\McalLib\ssc\src\McalLib.c	  3087         * ticks is less than delay ticks
; ..\mcal\McalLib\ssc\src\McalLib.c	  3088         * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3089         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3090        /* [cover parentID={80B6F3DB-C04E-476e-8E55-39456B699A76}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3091         * Loop untill the lock address is free  for a specified timeout in a
; ..\mcal\McalLib\ssc\src\McalLib.c	  3092         * non-atomic fashion
; ..\mcal\McalLib\ssc\src\McalLib.c	  3093         * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3094         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3095        while(((uint32)(CurrSTMTick - BaseSTMTick) < DelayTicks) &&
; ..\mcal\McalLib\ssc\src\McalLib.c	  3096              (LockAddVal != (uint32)SPINLOCKFREE))
; ..\mcal\McalLib\ssc\src\McalLib.c	  3097        {
; ..\mcal\McalLib\ssc\src\McalLib.c	  3098          /* Read the current STM tick from STM.TIM0 register */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3099          CurrSTMTick       = MCAL_GET_STM_TICK();
; ..\mcal\McalLib\ssc\src\McalLib.c	  3100          LockAddVal = *LockAddress;
; ..\mcal\McalLib\ssc\src\McalLib.c	  3101        }
; ..\mcal\McalLib\ssc\src\McalLib.c	  3102        /* MISRA2012_RULE_11_3_JUSTIFICATION: Intrinsic function used for
; ..\mcal\McalLib\ssc\src\McalLib.c	  3103         *  compare swap which require pointer conversion, no side effect seen
; ..\mcal\McalLib\ssc\src\McalLib.c	  3104         *  as pointer passed is always 32-bit aligned
; ..\mcal\McalLib\ssc\src\McalLib.c	  3105         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3106        /* MISRA2012_RULE_11_5_JUSTIFICATION: Intrinsic function used for
; ..\mcal\McalLib\ssc\src\McalLib.c	  3107         * compare swap which require pointer conversion, no side effect seen
; ..\mcal\McalLib\ssc\src\McalLib.c	  3108         * as pointer passed is always 32-bit aligned
; ..\mcal\McalLib\ssc\src\McalLib.c	  3109         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3110        /* MISRA2012_RULE_11_8_JUSTIFICATION: Intrinsic function used for
; ..\mcal\McalLib\ssc\src\McalLib.c	  3111         *  compare swap which require removing of volatile from pointer, no
; ..\mcal\McalLib\ssc\src\McalLib.c	  3112         *  side effect seen as pointer passed is always 32-bit aligned
; ..\mcal\McalLib\ssc\src\McalLib.c	  3113         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3114        /* MISRA2012_RULE_4_6_JUSTIFICATION: Basic numerical type - int/
; ..\mcal\McalLib\ssc\src\McalLib.c	  3115         *  unsigned int is used while invoking compiler intrinsic functions.
; ..\mcal\McalLib\ssc\src\McalLib.c	  3116         *  These compiler intrinsic functions are implemented specific to
; ..\mcal\McalLib\ssc\src\McalLib.c	  3117         *  tricore
; ..\mcal\McalLib\ssc\src\McalLib.c	  3118         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3119        LockAddRet = Mcal_CmpAndSwap(LockAddress, LockVal, SPINLOCKFREE);
	mov	d4,#0
.L781:
	mul	d0,d2
.L1140:
	mov	d1,d15
	j	.L115
.L116:
	ld.w	d15,[a2]
.L115:
	sub	d3,d15,d1
	ld.w	d2,[a15]
.L782:
	jge.u	d3,d0,.L117
.L1141:
	jne	d2,#0,.L116
.L117:
	mov	d2,#1
.L783:
	mov	d3,d4
	cmpswap.w	[a15]0,e2
.L1142:

; ..\mcal\McalLib\ssc\src\McalLib.c	  3120        /* [cover parentID={40E05C7E-C511-4834-9617-6F98212953BD}]Compare
; ..\mcal\McalLib\ssc\src\McalLib.c	  3121        if Lock address is free and than acquire the lock in an atomic
; ..\mcal\McalLib\ssc\src\McalLib.c	  3122        fashion if difference between current and base STM ticks is less
; ..\mcal\McalLib\ssc\src\McalLib.c	  3123        than delay ticks[/cover] */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3124      } while(
; ..\mcal\McalLib\ssc\src\McalLib.c	  3125        (LockAddRet != (uint32)SPINLOCKFREE) &&
	jeq	d2,#0,.L118
.L1143:

; ..\mcal\McalLib\ssc\src\McalLib.c	  3126        (((CurrSTMTick - BaseSTMTick) < DelayTicks)));
	sub	d2,d15,d1
.L784:
	jlt.u	d2,d0,.L115
.L118:
.L113:

; ..\mcal\McalLib\ssc\src\McalLib.c	  3127  
; ..\mcal\McalLib\ssc\src\McalLib.c	  3128      /* [cover parentID={555094D0-9B6D-48e7-9F75-ED4EB196B554}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3129       *  If SAFETY Error Check is Enabled
; ..\mcal\McalLib\ssc\src\McalLib.c	  3130       *  [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3131       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3132      #if (MCALLIB_SAFETY_ENABLE == STD_ON)
; ..\mcal\McalLib\ssc\src\McalLib.c	  3133      /* [cover parentID={7F7F914E-7EFA-440c-819B-EE9F050C34B0}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3134       * If spinlock is not free and timeout has expired
; ..\mcal\McalLib\ssc\src\McalLib.c	  3135       * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3136       */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3137      if((((CurrSTMTick - BaseSTMTick) >= DelayTicks)) &&
; ..\mcal\McalLib\ssc\src\McalLib.c	  3138          (LockAddRet != (uint32)SPINLOCKFREE))
; ..\mcal\McalLib\ssc\src\McalLib.c	  3139      {
; ..\mcal\McalLib\ssc\src\McalLib.c	  3140        /* [cover parentID={1F7567B8-AA4E-4a73-83EF-ACD52C7C4843}]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3141         * Report error MCALLIB_E_TIMEOUT_FAILED
; ..\mcal\McalLib\ssc\src\McalLib.c	  3142         * [/cover]
; ..\mcal\McalLib\ssc\src\McalLib.c	  3143         */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3144        Mcal_lReportError(ApiId, MCALLIB_E_TIMEOUT_FAILED);
; ..\mcal\McalLib\ssc\src\McalLib.c	  3145      }
; ..\mcal\McalLib\ssc\src\McalLib.c	  3146      #endif
; ..\mcal\McalLib\ssc\src\McalLib.c	  3147    }
; ..\mcal\McalLib\ssc\src\McalLib.c	  3148  
; ..\mcal\McalLib\ssc\src\McalLib.c	  3149    /* This is used to avoid MISRA when Safety is switched OFF */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3150    UNUSED_PARAMETER(ApiId);
; ..\mcal\McalLib\ssc\src\McalLib.c	  3151    return;
; ..\mcal\McalLib\ssc\src\McalLib.c	  3152  }
	ret
.L641:
	
__Mcal_lGetSpinlock_function_end:
	.size	Mcal_lGetSpinlock,__Mcal_lGetSpinlock_function_end-Mcal_lGetSpinlock
.L378:
	; End of function
	
	.sdecl	'.text.McalLib.Mcal_lReleaseSpinlock',code,cluster('Mcal_lReleaseSpinlock')
	.sect	'.text.McalLib.Mcal_lReleaseSpinlock'
	.align	2
	

; ..\mcal\McalLib\ssc\src\McalLib.c	  3153  
; ..\mcal\McalLib\ssc\src\McalLib.c	  3154  /*******************************************************************************
; ..\mcal\McalLib\ssc\src\McalLib.c	  3155  ** Traceability     : [cover parentID={9D17E679-C32F-4f07-87E8-780743171A72}] **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3156  ** [/cover]                                                                   **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3157  ** Syntax          : void Mcal_lReleaseSpinlock                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3158  **                               (volatile uint32 * const LockAddress)        **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3159  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3160  ** Description     : This function will release the Spinlock and value of     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3161                       lock address will be 0x0U.                               **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3162  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3163  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3164  ** Service ID      : NA                                                       **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3165  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3166  ** Sync/Async      : Synchronous                                              **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3167  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3168  ** Reentrancy      : Non Reentrant                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3169  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3170  ** Parameters(in)  : LockAddress - Lock that needs to be cleared(release)     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3171  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3172  ** Parameters (out): None                                                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3173  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3174  ** Return value    : void                                                     **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3175  **                                                                            **
; ..\mcal\McalLib\ssc\src\McalLib.c	  3176  *******************************************************************************/
; ..\mcal\McalLib\ssc\src\McalLib.c	  3177  LOCAL_INLINE void Mcal_lReleaseSpinlock(volatile uint32 * const LockAddress)
; Function Mcal_lReleaseSpinlock
.L204:
Mcal_lReleaseSpinlock:	.type	func

; ..\mcal\McalLib\ssc\src\McalLib.c	  3178  {
; ..\mcal\McalLib\ssc\src\McalLib.c	  3179    /* Ensure sequence and synchronization of read(s), write(s) of guarded
; ..\mcal\McalLib\ssc\src\McalLib.c	  3180     * resources before releasing the lock
; ..\mcal\McalLib\ssc\src\McalLib.c	  3181     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3182    DSYNC();
	dsync
.L1148:

; ..\mcal\McalLib\ssc\src\McalLib.c	  3183  
; ..\mcal\McalLib\ssc\src\McalLib.c	  3184    /* Clear the lock variable */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3185    Mcal_SetBitAtomic(LockAddress, 0x0U, 0x1, SPINLOCKFREE);
	mov	d15,#0
	
	imask e2,d15,d15,#(0x1) 
 ldmst [a4]0,e2
	
.L1149:

; ..\mcal\McalLib\ssc\src\McalLib.c	  3186  
; ..\mcal\McalLib\ssc\src\McalLib.c	  3187    /* MISRA2012_RULE_2_7_JUSTIFICATION: No side effects foreseen
; ..\mcal\McalLib\ssc\src\McalLib.c	  3188     * by violating this MISRA rule, as the variable LockAddress is
; ..\mcal\McalLib\ssc\src\McalLib.c	  3189     * accessed using only assembly instruction.
; ..\mcal\McalLib\ssc\src\McalLib.c	  3190     */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3191    /* MISRA2012_RULE_8_13_JUSTIFICATION: No side effects foreseen
; ..\mcal\McalLib\ssc\src\McalLib.c	  3192     * by violating this MISRA rule, as the pointer LockAddress is
; ..\mcal\McalLib\ssc\src\McalLib.c	  3193     * accessed using assembly instruction. */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3194  }
	ret
.L654:
	
__Mcal_lReleaseSpinlock_function_end:
	.size	Mcal_lReleaseSpinlock,__Mcal_lReleaseSpinlock_function_end-Mcal_lReleaseSpinlock
.L383:
	; End of function
	
	.sdecl	'.bss.McalLib.Mcal_StmTimerResolution',data,cluster('Mcal_StmTimerResolution')
	.sect	'.bss.McalLib.Mcal_StmTimerResolution'
	.align	4
Mcal_StmTimerResolution:	.type	object
	.size	Mcal_StmTimerResolution,4
	.space	4
	.sdecl	'.bss.McalLib.Mcal_LockAddressSiecon0',data,cluster('Mcal_LockAddressSiecon0')
	.sect	'.bss.McalLib.Mcal_LockAddressSiecon0'
	.align	4
Mcal_LockAddressSiecon0:	.type	object
	.size	Mcal_LockAddressSiecon0,4
	.space	4
	.sdecl	'.bss.McalLib.Mcal_LockAddressEicon0',data,cluster('Mcal_LockAddressEicon0')
	.sect	'.bss.McalLib.Mcal_LockAddressEicon0'
	.align	4
Mcal_LockAddressEicon0:	.type	object
	.size	Mcal_LockAddressEicon0,4
	.space	4
	.sdecl	'.rodata.McalLib.Mcal_kCoreXMemSegment',data,rom,cluster('Mcal_kCoreXMemSegment')
	.sect	'.rodata.McalLib.Mcal_kCoreXMemSegment'
Mcal_kCoreXMemSegment:	.type	object
	.size	Mcal_kCoreXMemSegment,7
	.byte	7,6,5,4
	.byte	3,2,1
	.sdecl	'.rodata.McalLib.Mcal_kDsprEndAddress',data,rom,cluster('Mcal_kDsprEndAddress')
	.sect	'.rodata.McalLib.Mcal_kDsprEndAddress'
	.align	2
Mcal_kDsprEndAddress:	.type	object
	.size	Mcal_kDsprEndAddress,28
	.word	245759,245759,98303,98303
	.word	98303
	.space	4
	.word	98303
	.sdecl	'.rodata.McalLib.Mcal_kPsprLocalEndAddress',data,rom,cluster('Mcal_kPsprLocalEndAddress')
	.sect	'.rodata.McalLib.Mcal_kPsprLocalEndAddress'
	.align	2
Mcal_kPsprLocalEndAddress:	.type	object
	.size	Mcal_kPsprLocalEndAddress,28
	.word	-1073676289,-1073676289,-1073676289,-1073676289
	.word	-1073676289
	.space	4
	.word	-1073676289
	.sdecl	'.rodata.McalLib.Mcal_kPsprGlobalEndAddress',data,rom,cluster('Mcal_kPsprGlobalEndAddress')
	.sect	'.rodata.McalLib.Mcal_kPsprGlobalEndAddress'
	.align	2
Mcal_kPsprGlobalEndAddress:	.type	object
	.size	Mcal_kPsprGlobalEndAddress,28
	.word	1114111,1114111,1114111,1114111
	.word	1114111
	.space	4
	.word	1114111
	.sdecl	'.rodata.McalLib.Mcal_kPsprGlobalBaseAddress',data,rom,cluster('Mcal_kPsprGlobalBaseAddress')
	.sect	'.rodata.McalLib.Mcal_kPsprGlobalBaseAddress'
	.align	2
Mcal_kPsprGlobalBaseAddress:	.type	object
	.size	Mcal_kPsprGlobalBaseAddress,28
	.word	1048576,1048576,1048576,1048576
	.word	1048576
	.space	4
	.word	1048576
	.calls	'Mcal_GetCpuWdgPassword','Mcal_lGetCpuIndex'
	.calls	'Mcal_SetCpuWdgPassword','Mcal_lGetCpuIndex'
	.calls	'Mcal_SetCpuWdgPassword','SuspendAllInterrupts'
	.calls	'Mcal_SetCpuWdgPassword','Mcal_lUpdateCpuEndInit'
	.calls	'Mcal_SetCpuWdgPassword','ResumeAllInterrupts'
	.calls	'Mcal_WriteCpuEndInitProtReg','Mcal_lGetCpuIndex'
	.calls	'Mcal_WriteCpuEndInitProtReg','SuspendAllInterrupts'
	.calls	'Mcal_WriteCpuEndInitProtReg','Mcal_lUpdateCpuEndInit'
	.calls	'Mcal_WriteCpuEndInitProtReg','ResumeAllInterrupts'
	.calls	'Mcal_SetSafetyEndInitPassword','SuspendAllInterrupts'
	.calls	'Mcal_SetSafetyEndInitPassword','Mcal_lGetSpinlock'
	.calls	'Mcal_SetSafetyEndInitPassword','Mcal_lUpdateSafetyEndInit'
	.calls	'Mcal_SetSafetyEndInitPassword','Mcal_lReleaseSpinlock'
	.calls	'Mcal_SetSafetyEndInitPassword','ResumeAllInterrupts'
	.calls	'Mcal_WriteSafetyEndInitProtReg','Mcal_lWriteSafetyEndInitProtection'
	.calls	'Mcal_WriteSafetyEndInitProtReg16','Mcal_lWriteSafetyEndInitProtection'
	.calls	'Mcal_WriteSafetyEndInitProtRegMask','Mcal_lWriteSafetyEndInitProtection'
	.calls	'Mcal_SetPeripheralEndInitPassword','SuspendAllInterrupts'
	.calls	'Mcal_SetPeripheralEndInitPassword','Mcal_lGetSpinlock'
	.calls	'Mcal_SetPeripheralEndInitPassword','Mcal_lUpdatePeripheralEndInit'
	.calls	'Mcal_SetPeripheralEndInitPassword','Mcal_lReleaseSpinlock'
	.calls	'Mcal_SetPeripheralEndInitPassword','ResumeAllInterrupts'
	.calls	'Mcal_WritePeripEndInitProtReg','SuspendAllInterrupts'
	.calls	'Mcal_WritePeripEndInitProtReg','Mcal_lGetSpinlock'
	.calls	'Mcal_WritePeripEndInitProtReg','Mcal_lUpdatePeripheralEndInit'
	.calls	'Mcal_WritePeripEndInitProtReg','Mcal_lReleaseSpinlock'
	.calls	'Mcal_WritePeripEndInitProtReg','ResumeAllInterrupts'
	.calls	'Mcal_GetLocalDsprAddress','Mcal_lGetCpuIndex'
	.calls	'Mcal_GetLocalPsprAddress','Mcal_lGetCpuIndex'
	.calls	'Mcal_DelayResetTickCalibration','Mcal_lDelayResetTickCalibration'
	.calls	'Mcal_GetCpuIndex','Mcal_lGetCpuIndex'
	.calls	'Mcal_GetSpinlock','Mcal_lGetSpinlock'
	.calls	'Mcal_ReleaseSpinlock','Mcal_lReleaseSpinlock'
	.calls	'Mcal_lCpuPwSequence','Mcal_lDecryptPw'
	.calls	'Mcal_lWriteSafetyEndInitProtection','SuspendAllInterrupts'
	.calls	'Mcal_lWriteSafetyEndInitProtection','Mcal_lGetSpinlock'
	.calls	'Mcal_lWriteSafetyEndInitProtection','Mcal_lUpdateSafetyEndInit'
	.calls	'Mcal_lWriteSafetyEndInitProtection','Mcal_lReleaseSpinlock'
	.calls	'Mcal_lWriteSafetyEndInitProtection','ResumeAllInterrupts'
	.calls	'Mcal_lDelayResetTickCalibration','SuspendAllInterrupts'
	.calls	'Mcal_lDelayResetTickCalibration','ResumeAllInterrupts'
	.calls	'Mcal_lUpdateSafetyEndInit','Mcal_lDecryptPw'
	.calls	'Mcal_lUpdatePeripheralEndInit','Mcal_lDecryptPw'
	.calls	'Mcal_lUpdateCpuEndInit','Mcal_lCpuPwSequence'
	.calls	'Mcal_lUpdateCpuEndInit','Mcal_lCpuRelValue'
	.calls	'Mcal_lUpdateCpuEndInit','Mcal_lCalculateTimerReloadVal'
	.calls	'Mcal_lUpdateCpuEndInit','Mcal_lDecryptPw'
	.calls	'Mcal_lGetSpinlock','Mcal_lDelayResetTickCalibration'
	.calls	'Mcal_GetCpuWdgPassword','.cocofun_4'
	.calls	'Mcal_GetCpuWdgPassword','.cocofun_5'
	.calls	'Mcal_GetSafetyEndInitPassword','.cocofun_5'
	.calls	'Mcal_GetPeripheralEndInitPassword','.cocofun_5'
	.calls	'Mcal_GetGlobalDsprAddress','.cocofun_6'
	.calls	'Mcal_GetGlobalDsprAddress','.cocofun_8'
	.calls	'Mcal_GetLocalDsprAddress','.cocofun_6'
	.calls	'Mcal_GetGlobalPsprAddress','.cocofun_2'
	.calls	'Mcal_GetGlobalPsprAddress','.cocofun_3'
	.calls	'.cocofun_2','.cocofun_8'
	.calls	'Mcal_lCpuPwSequence','.cocofun_4'
	.calls	'Mcal_lCpuRelValue','.cocofun_4'
	.calls	'Mcal_lUpdateSafetyEndInit','.cocofun_1'
	.calls	'Mcal_lUpdateSafetyEndInit','.cocofun_7'
	.calls	'Mcal_lUpdatePeripheralEndInit','.cocofun_1'
	.calls	'Mcal_lUpdatePeripheralEndInit','.cocofun_7'
	.calls	'Mcal_lUpdateCpuEndInit','.cocofun_4'
	.calls	'Mcal_lCalculateTimerReloadVal','.cocofun_4'
	.calls	'Mcal_GetCpuWdgPassword','',0
	.calls	'.cocofun_5','',0
	.calls	'.cocofun_4','',0
	.calls	'Mcal_SetCpuWdgPassword','',8
	.calls	'Mcal_WriteCpuEndInitProtReg','',8
	.calls	'Mcal_GetSafetyEndInitPassword','',0
	.calls	'Mcal_SetSafetyEndInitPassword','',0
	.calls	'Mcal_WriteSafetyEndInitProtReg','',0
	.calls	'Mcal_WriteSafetyEndInitProtReg16','',0
	.calls	'Mcal_WriteSafetyEndInitProtRegMask','',0
	.calls	'Mcal_GetPeripheralEndInitPassword','',0
	.calls	'Mcal_SetPeripheralEndInitPassword','',0
	.calls	'Mcal_WritePeripEndInitProtReg','',0
	.calls	'Mcal_GetCpuPhysicalId','',0
	.calls	'Mcal_GetGlobalDsprAddress','',0
	.calls	'.cocofun_8','',0
	.calls	'.cocofun_6','',0
	.calls	'Mcal_GetLocalDsprAddress','',0
	.calls	'Mcal_GetGlobalPsprAddress','',0
	.calls	'.cocofun_3','',0
	.calls	'.cocofun_2','',0
	.calls	'Mcal_GetLocalPsprAddress','',0
	.calls	'Mcal_DelayTickResolution','',0
	.calls	'Mcal_DelayResetTickCalibration','',0
	.calls	'Mcal_DelayGetTick','',0
	.calls	'Mcal_GetCpuIndex','',0
	.calls	'McalLib_GetVersionInfo','',0
	.calls	'Mcal_GetSpinlock','',0
	.calls	'Mcal_ReleaseSpinlock','',0
	.calls	'Mcal_lCpuPwSequence','',0
	.calls	'Mcal_lCpuRelValue','',0
	.calls	'Mcal_lDecryptPw','',0
	.calls	'Mcal_lWriteSafetyEndInitProtection','',0
	.calls	'Mcal_lDelayResetTickCalibration','',0
	.calls	'Mcal_lGetCpuIndex','',0
	.calls	'Mcal_lUpdateSafetyEndInit','',8
	.calls	'.cocofun_7','',0
	.calls	'.cocofun_1','',0
	.calls	'Mcal_lUpdatePeripheralEndInit','',8
	.calls	'Mcal_lUpdateCpuEndInit','',16
	.calls	'Mcal_lCalculateTimerReloadVal','',0
	.calls	'Mcal_lGetSpinlock','',0
	.extern	SuspendAllInterrupts
	.extern	ResumeAllInterrupts
	.calls	'Mcal_lReleaseSpinlock','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L206:
	.word	66441
	.half	3
	.word	.L207
	.byte	4
.L205:
	.byte	1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L208
	.byte	2
	.byte	'int',0,4,5,3
	.word	127
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	134
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	176
	.byte	7
	.word	176
	.byte	8
	.byte	'__cmpswapw',0
	.word	192
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	197
	.byte	9
	.byte	'value',0
	.word	176
	.byte	9
	.byte	'compare',0
	.word	176
	.byte	0,8
	.byte	'__extru',0
	.word	176
	.byte	1,1,1,1,5
	.word	127
	.byte	5
	.word	127
	.byte	5
	.word	127
	.byte	0,4
	.byte	'__mtcr',0,1,1,1,1,5
	.word	127
	.byte	5
	.word	127
	.byte	0,6
	.word	127
	.byte	8
	.byte	'__mfcr',0
	.word	310
	.byte	1,1,1,1,5
	.word	127
	.byte	0
.L440:
	.byte	2
	.byte	'unsigned long int',0,4,7
.L445:
	.byte	3
	.word	337
.L447:
	.byte	10,1,240,2,9,8,11
	.byte	'TimerRelValAtReset',0
	.word	337
	.byte	4,2,35,0,11
	.byte	'Password',0
	.word	337
	.byte	4,2,35,4,0,12
	.byte	'void',0,6
	.word	416
	.byte	7
	.word	422
.L451:
	.byte	3
	.word	427
.L453:
	.byte	3
	.word	337
.L460:
	.byte	3
	.word	337
.L464:
	.byte	3
	.word	427
.L466:
	.byte	3
	.word	337
.L469:
	.byte	3
	.word	427
.L471:
	.byte	3
	.word	337
.L476:
	.byte	3
	.word	337
.L480:
	.byte	3
	.word	427
.L482:
	.byte	3
	.word	337
.L487:
	.byte	3
	.word	337
.L489:
	.byte	3
	.word	337
.L492:
	.byte	2
	.byte	'unsigned char',0,1,8
.L496:
	.byte	3
	.word	337
.L503:
	.byte	3
	.word	337
.L505:
	.byte	3
	.word	337
.L512:
	.byte	3
	.word	337
	.byte	6
	.word	337
	.byte	7
	.word	529
.L526:
	.byte	3
	.word	534
.L528:
	.byte	3
	.word	337
.L531:
	.byte	3
	.word	534
.L543:
	.byte	2
	.byte	'unsigned short int',0,2,7,10,2,134,1,9,8,11
	.byte	'vendorID',0
	.word	554
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	554
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	492
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	492
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	492
	.byte	1,2,35,6,0,7
	.word	576
.L534:
	.byte	3
	.word	697
.L537:
	.byte	3
	.word	427
.L539:
	.byte	3
	.word	554
	.byte	13
	.byte	'SuspendAllInterrupts',0,3,222,10,21,1,1,1,1,13
	.byte	'ResumeAllInterrupts',0,3,241,10,21,1,1,1,1
.L545:
	.byte	3
	.word	337
.L548:
	.byte	3
	.word	492
.L550:
	.byte	2
	.byte	'float',0,4,4
.L562:
	.byte	3
	.word	337
.L564:
	.byte	3
	.word	337
.L568:
	.byte	3
	.word	337
.L570:
	.byte	3
	.word	337
.L574:
	.byte	3
	.word	427
.L576:
	.byte	3
	.word	337
.L578:
	.byte	3
	.word	337
.L580:
	.byte	3
	.word	492
.L582:
	.byte	3
	.word	492
.L584:
	.byte	3
	.word	534
	.byte	6
	.word	554
	.byte	7
	.word	845
.L586:
	.byte	3
	.word	850
.L591:
	.byte	3
	.word	337
.L593:
	.byte	3
	.word	337
.L595:
	.byte	3
	.word	337
.L597:
	.byte	3
	.word	492
.L599:
	.byte	3
	.word	492
.L608:
	.byte	6
	.word	337
.L611:
	.byte	3
	.word	337
.L613:
	.byte	3
	.word	492
.L615:
	.byte	3
	.word	492
.L619:
	.byte	6
	.word	337
.L622:
	.byte	3
	.word	337
.L624:
	.byte	3
	.word	492
.L626:
	.byte	3
	.word	492
.L631:
	.byte	6
	.word	337
.L634:
	.byte	3
	.word	337
.L636:
	.byte	3
	.word	337
.L638:
	.byte	3
	.word	492
.L642:
	.byte	3
	.word	534
.L644:
	.byte	3
	.word	337
.L646:
	.byte	3
	.word	492
.L655:
	.byte	3
	.word	534
	.byte	14,1,7
	.word	965
	.byte	15
	.byte	'__codeptr',0,1,1,1
	.word	967
	.byte	15
	.byte	'Ifx_UReg_8Bit',0,4,79,24
	.word	492
	.byte	15
	.byte	'Ifx_UReg_32Bit',0,4,81,24
	.word	176
	.byte	15
	.byte	'Ifx_SReg_32Bit',0,4,84,24
	.word	127
	.byte	16
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,5,70,16,4,17
	.byte	'EN0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'EN1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'EN2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'EN3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'EN4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'EN5',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'EN6',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'EN7',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'EN8',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'EN9',0,1
	.word	492
	.byte	1,6,2,35,1,17
	.byte	'EN10',0,1
	.word	492
	.byte	1,5,2,35,1,17
	.byte	'EN11',0,1
	.word	492
	.byte	1,4,2,35,1,17
	.byte	'EN12',0,1
	.word	492
	.byte	1,3,2,35,1,17
	.byte	'EN13',0,1
	.word	492
	.byte	1,2,2,35,1,17
	.byte	'EN14',0,1
	.word	492
	.byte	1,1,2,35,1,17
	.byte	'EN15',0,1
	.word	492
	.byte	1,0,2,35,1,17
	.byte	'EN16',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'EN17',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'EN18',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'EN19',0,1
	.word	492
	.byte	1,4,2,35,2,17
	.byte	'EN20',0,1
	.word	492
	.byte	1,3,2,35,2,17
	.byte	'EN21',0,1
	.word	492
	.byte	1,2,2,35,2,17
	.byte	'EN22',0,1
	.word	492
	.byte	1,1,2,35,2,17
	.byte	'EN23',0,1
	.word	492
	.byte	1,0,2,35,2,17
	.byte	'EN24',0,1
	.word	492
	.byte	1,7,2,35,3,17
	.byte	'EN25',0,1
	.word	492
	.byte	1,6,2,35,3,17
	.byte	'EN26',0,1
	.word	492
	.byte	1,5,2,35,3,17
	.byte	'EN27',0,1
	.word	492
	.byte	1,4,2,35,3,17
	.byte	'EN28',0,1
	.word	492
	.byte	1,3,2,35,3,17
	.byte	'EN29',0,1
	.word	492
	.byte	1,2,2,35,3,17
	.byte	'EN30',0,1
	.word	492
	.byte	1,1,2,35,3,17
	.byte	'EN31',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_ACCEN00_Bits',0,5,104,3
	.word	1058
	.byte	16
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,5,107,16,4,17
	.byte	'reserved_0',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_ACCEN01_Bits',0,5,110,3
	.word	1617
	.byte	16
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,5,113,16,4,17
	.byte	'EN0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'EN1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'EN2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'EN3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'EN4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'EN5',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'EN6',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'EN7',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'EN8',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'EN9',0,1
	.word	492
	.byte	1,6,2,35,1,17
	.byte	'EN10',0,1
	.word	492
	.byte	1,5,2,35,1,17
	.byte	'EN11',0,1
	.word	492
	.byte	1,4,2,35,1,17
	.byte	'EN12',0,1
	.word	492
	.byte	1,3,2,35,1,17
	.byte	'EN13',0,1
	.word	492
	.byte	1,2,2,35,1,17
	.byte	'EN14',0,1
	.word	492
	.byte	1,1,2,35,1,17
	.byte	'EN15',0,1
	.word	492
	.byte	1,0,2,35,1,17
	.byte	'EN16',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'EN17',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'EN18',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'EN19',0,1
	.word	492
	.byte	1,4,2,35,2,17
	.byte	'EN20',0,1
	.word	492
	.byte	1,3,2,35,2,17
	.byte	'EN21',0,1
	.word	492
	.byte	1,2,2,35,2,17
	.byte	'EN22',0,1
	.word	492
	.byte	1,1,2,35,2,17
	.byte	'EN23',0,1
	.word	492
	.byte	1,0,2,35,2,17
	.byte	'EN24',0,1
	.word	492
	.byte	1,7,2,35,3,17
	.byte	'EN25',0,1
	.word	492
	.byte	1,6,2,35,3,17
	.byte	'EN26',0,1
	.word	492
	.byte	1,5,2,35,3,17
	.byte	'EN27',0,1
	.word	492
	.byte	1,4,2,35,3,17
	.byte	'EN28',0,1
	.word	492
	.byte	1,3,2,35,3,17
	.byte	'EN29',0,1
	.word	492
	.byte	1,2,2,35,3,17
	.byte	'EN30',0,1
	.word	492
	.byte	1,1,2,35,3,17
	.byte	'EN31',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_ACCEN10_Bits',0,5,147,1,3
	.word	1696
	.byte	16
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,5,150,1,16,4,17
	.byte	'reserved_0',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_ACCEN11_Bits',0,5,153,1,3
	.word	2256
	.byte	16
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,5,156,1,16,4,17
	.byte	'STM0DIS',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'STM1DIS',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'STM2DIS',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'STM3DIS',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'STM4DIS',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'STM5DIS',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,1
	.word	492
	.byte	2,0,2,35,0,17
	.byte	'reserved_8',0,4
	.word	176
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,5,166,1,3
	.word	2337
	.byte	16
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,5,169,1,16,4,17
	.byte	'STMDIV',0,1
	.word	492
	.byte	4,4,2,35,0,17
	.byte	'GTMDIV',0,1
	.word	492
	.byte	4,0,2,35,0,17
	.byte	'SRIDIV',0,1
	.word	492
	.byte	4,4,2,35,1,17
	.byte	'LPDIV',0,1
	.word	492
	.byte	3,1,2,35,1,17
	.byte	'reserved_15',0,1
	.word	492
	.byte	1,0,2,35,1,17
	.byte	'SPBDIV',0,1
	.word	492
	.byte	4,4,2,35,2,17
	.byte	'BBBDIV',0,1
	.word	492
	.byte	4,0,2,35,2,17
	.byte	'FSIDIV',0,1
	.word	492
	.byte	2,6,2,35,3,17
	.byte	'FSI2DIV',0,1
	.word	492
	.byte	2,4,2,35,3,17
	.byte	'CLKSEL',0,1
	.word	492
	.byte	2,2,2,35,3,17
	.byte	'UP',0,1
	.word	492
	.byte	1,1,2,35,3,17
	.byte	'LCK',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CCUCON0_Bits',0,5,183,1,3
	.word	2554
	.byte	16
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,5,186,1,16,4,17
	.byte	'MCANDIV',0,1
	.word	492
	.byte	4,4,2,35,0,17
	.byte	'CLKSELMCAN',0,1
	.word	492
	.byte	2,2,2,35,0,17
	.byte	'reserved_6',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'PLL1DIVDIS',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'I2CDIV',0,1
	.word	492
	.byte	4,4,2,35,1,17
	.byte	'reserved_12',0,1
	.word	492
	.byte	4,0,2,35,1,17
	.byte	'MSCDIV',0,1
	.word	492
	.byte	4,4,2,35,2,17
	.byte	'CLKSELMSC',0,1
	.word	492
	.byte	2,2,2,35,2,17
	.byte	'reserved_22',0,1
	.word	492
	.byte	2,0,2,35,2,17
	.byte	'QSPIDIV',0,1
	.word	492
	.byte	4,4,2,35,3,17
	.byte	'CLKSELQSPI',0,1
	.word	492
	.byte	2,2,2,35,3,17
	.byte	'reserved_30',0,1
	.word	492
	.byte	1,1,2,35,3,17
	.byte	'LCK',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CCUCON1_Bits',0,5,201,1,3
	.word	2827
	.byte	16
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,5,204,1,16,4,17
	.byte	'CPU4DIV',0,1
	.word	492
	.byte	6,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	176
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON10_Bits',0,5,208,1,3
	.word	3153
	.byte	16
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,5,211,1,16,4,17
	.byte	'CPU5DIV',0,1
	.word	492
	.byte	6,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	176
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON11_Bits',0,5,215,1,3
	.word	3255
	.byte	16
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,5,218,1,16,4,17
	.byte	'ASCLINFDIV',0,1
	.word	492
	.byte	4,4,2,35,0,17
	.byte	'reserved_4',0,1
	.word	492
	.byte	4,0,2,35,0,17
	.byte	'ASCLINSDIV',0,1
	.word	492
	.byte	4,4,2,35,1,17
	.byte	'CLKSELASCLINS',0,1
	.word	492
	.byte	2,2,2,35,1,17
	.byte	'reserved_14',0,4
	.word	176
	.byte	10,8,2,35,0,17
	.byte	'EBUPERON',0,1
	.word	492
	.byte	1,7,2,35,3,17
	.byte	'ERAYPERON',0,1
	.word	492
	.byte	1,6,2,35,3,17
	.byte	'HSPDMPERON',0,1
	.word	492
	.byte	1,5,2,35,3,17
	.byte	'reserved_27',0,1
	.word	492
	.byte	4,1,2,35,3,17
	.byte	'LCK',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CCUCON2_Bits',0,5,230,1,3
	.word	3357
	.byte	16
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,5,233,1,16,4,17
	.byte	'PLL0MONEN',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'PLL1MONEN',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'PLL2MONEN',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'SPBMONEN',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'BACKMONEN',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'reserved_5',0,1
	.word	492
	.byte	3,0,2,35,0,17
	.byte	'PLL0MONTST',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'PLL1MONTST',0,1
	.word	492
	.byte	1,6,2,35,1,17
	.byte	'PLL2MONTST',0,1
	.word	492
	.byte	1,5,2,35,1,17
	.byte	'SPBMONTST',0,1
	.word	492
	.byte	1,4,2,35,1,17
	.byte	'BACKMONTST',0,1
	.word	492
	.byte	1,3,2,35,1,17
	.byte	'reserved_13',0,4
	.word	176
	.byte	11,8,2,35,0,17
	.byte	'reserved_24',0,1
	.word	492
	.byte	6,2,2,35,3,17
	.byte	'UP',0,1
	.word	492
	.byte	1,1,2,35,3,17
	.byte	'LCK',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CCUCON3_Bits',0,5,250,1,3
	.word	3631
	.byte	16
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,5,253,1,16,4,17
	.byte	'LOTHR',0,2
	.word	554
	.byte	12,4,2,35,0,17
	.byte	'UPTHR',0,4
	.word	176
	.byte	12,8,2,35,0,17
	.byte	'MONEN',0,1
	.word	492
	.byte	1,7,2,35,3,17
	.byte	'MONTST',0,1
	.word	492
	.byte	1,6,2,35,3,17
	.byte	'reserved_26',0,1
	.word	492
	.byte	4,2,2,35,3,17
	.byte	'UP',0,1
	.word	492
	.byte	1,1,2,35,3,17
	.byte	'LCK',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CCUCON4_Bits',0,5,134,2,3
	.word	4000
	.byte	16
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,5,137,2,16,4,17
	.byte	'GETHDIV',0,1
	.word	492
	.byte	4,4,2,35,0,17
	.byte	'MCANHDIV',0,1
	.word	492
	.byte	4,0,2,35,0,17
	.byte	'ADASDIV',0,1
	.word	492
	.byte	4,4,2,35,1,17
	.byte	'reserved_12',0,4
	.word	176
	.byte	18,2,2,35,0,17
	.byte	'UP',0,1
	.word	492
	.byte	1,1,2,35,3,17
	.byte	'LCK',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CCUCON5_Bits',0,5,145,2,3
	.word	4180
	.byte	16
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,5,148,2,16,4,17
	.byte	'CPU0DIV',0,1
	.word	492
	.byte	6,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	176
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON6_Bits',0,5,152,2,3
	.word	4349
	.byte	16
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,5,155,2,16,4,17
	.byte	'CPU1DIV',0,1
	.word	492
	.byte	6,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	176
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON7_Bits',0,5,159,2,3
	.word	4449
	.byte	16
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,5,162,2,16,4,17
	.byte	'CPU2DIV',0,1
	.word	492
	.byte	6,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	176
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON8_Bits',0,5,166,2,3
	.word	4549
	.byte	16
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,5,169,2,16,4,17
	.byte	'CPU3DIV',0,1
	.word	492
	.byte	6,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	176
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON9_Bits',0,5,173,2,3
	.word	4649
	.byte	16
	.byte	'_Ifx_SCU_CHIPID_Bits',0,5,176,2,16,4,17
	.byte	'CHREV',0,1
	.word	492
	.byte	6,2,2,35,0,17
	.byte	'CHTEC',0,1
	.word	492
	.byte	2,0,2,35,0,17
	.byte	'CHPK',0,1
	.word	492
	.byte	4,4,2,35,1,17
	.byte	'CHID',0,1
	.word	492
	.byte	4,0,2,35,1,17
	.byte	'EEA',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'UCODE',0,1
	.word	492
	.byte	7,0,2,35,2,17
	.byte	'FSIZE',0,1
	.word	492
	.byte	4,4,2,35,3,17
	.byte	'VART',0,1
	.word	492
	.byte	3,1,2,35,3,17
	.byte	'SEC',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CHIPID_Bits',0,5,187,2,3
	.word	4749
	.byte	16
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,5,190,2,16,4,17
	.byte	'LOWER',0,2
	.word	554
	.byte	12,4,2,35,0,17
	.byte	'reserved_12',0,1
	.word	492
	.byte	1,3,2,35,1,17
	.byte	'BGPOK',0,1
	.word	492
	.byte	1,2,2,35,1,17
	.byte	'EN',0,1
	.word	492
	.byte	1,1,2,35,1,17
	.byte	'LLU',0,1
	.word	492
	.byte	1,0,2,35,1,17
	.byte	'UPPER',0,2
	.word	554
	.byte	12,4,2,35,2,17
	.byte	'INTEN',0,1
	.word	492
	.byte	1,3,2,35,3,17
	.byte	'reserved_29',0,1
	.word	492
	.byte	1,2,2,35,3,17
	.byte	'INT',0,1
	.word	492
	.byte	1,1,2,35,3,17
	.byte	'UOF',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,5,202,2,3
	.word	4952
	.byte	16
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,5,205,2,16,4,17
	.byte	'RESULT',0,2
	.word	554
	.byte	12,4,2,35,0,17
	.byte	'reserved_12',0,4
	.word	176
	.byte	20,0,2,35,0,0,15
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,5,209,2,3
	.word	5184
	.byte	2
	.byte	'unsigned int',0,4,7,16
	.byte	'_Ifx_SCU_EICON0_Bits',0,5,212,2,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'ENDINIT',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EPW',0,4
	.word	5286
	.byte	14,16,2,35,0,17
	.byte	'REL',0,4
	.word	5286
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_SCU_EICON0_Bits',0,5,218,2,3
	.word	5302
	.byte	16
	.byte	'_Ifx_SCU_EICON1_Bits',0,5,221,2,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'IR0',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'DR',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'IR1',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	176
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_EICON1_Bits',0,5,230,2,3
	.word	5430
	.byte	16
	.byte	'_Ifx_SCU_EICR_Bits',0,5,233,2,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	4,4,2,35,0,17
	.byte	'EXIS0',0,1
	.word	492
	.byte	3,1,2,35,0,17
	.byte	'reserved_7',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'FEN0',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'REN0',0,1
	.word	492
	.byte	1,6,2,35,1,17
	.byte	'LDEN0',0,1
	.word	492
	.byte	1,5,2,35,1,17
	.byte	'EIEN0',0,1
	.word	492
	.byte	1,4,2,35,1,17
	.byte	'INP0',0,1
	.word	492
	.byte	3,1,2,35,1,17
	.byte	'reserved_15',0,4
	.word	176
	.byte	5,12,2,35,0,17
	.byte	'EXIS1',0,1
	.word	492
	.byte	3,1,2,35,2,17
	.byte	'reserved_23',0,1
	.word	492
	.byte	1,0,2,35,2,17
	.byte	'FEN1',0,1
	.word	492
	.byte	1,7,2,35,3,17
	.byte	'REN1',0,1
	.word	492
	.byte	1,6,2,35,3,17
	.byte	'LDEN1',0,1
	.word	492
	.byte	1,5,2,35,3,17
	.byte	'EIEN1',0,1
	.word	492
	.byte	1,4,2,35,3,17
	.byte	'INP1',0,1
	.word	492
	.byte	3,1,2,35,3,17
	.byte	'reserved_31',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_EICR_Bits',0,5,252,2,3
	.word	5619
	.byte	16
	.byte	'_Ifx_SCU_EIFILT_Bits',0,5,255,2,16,4,17
	.byte	'FILRQ0A',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'FILRQ5A',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'FILRQ2A',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'FILRQ3A',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'FILRQ0C',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'FILRQ1C',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'FILRQ3C',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'FILRQ2C',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'FILRQ4A',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'FILRQ6A',0,1
	.word	492
	.byte	1,6,2,35,1,17
	.byte	'FILRQ1A',0,1
	.word	492
	.byte	1,5,2,35,1,17
	.byte	'FILRQ7A',0,1
	.word	492
	.byte	1,4,2,35,1,17
	.byte	'FILRQ6D',0,1
	.word	492
	.byte	1,3,2,35,1,17
	.byte	'FILRQ4D',0,1
	.word	492
	.byte	1,2,2,35,1,17
	.byte	'FILRQ2B',0,1
	.word	492
	.byte	1,1,2,35,1,17
	.byte	'FILRQ3B',0,1
	.word	492
	.byte	1,0,2,35,1,17
	.byte	'FILRQ7C',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'reserved_17',0,1
	.word	492
	.byte	7,0,2,35,2,17
	.byte	'FILTDIV',0,1
	.word	492
	.byte	4,4,2,35,3,17
	.byte	'DEPTH',0,1
	.word	492
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_SCU_EIFILT_Bits',0,5,149,3,3
	.word	5983
	.byte	16
	.byte	'_Ifx_SCU_EIFR_Bits',0,5,152,3,16,4,17
	.byte	'INTF0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'INTF1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'INTF2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'INTF3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'INTF4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'INTF5',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'INTF6',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'INTF7',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'reserved_8',0,4
	.word	176
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_SCU_EIFR_Bits',0,5,163,3,3
	.word	6422
	.byte	16
	.byte	'_Ifx_SCU_EISR_Bits',0,5,166,3,16,4,17
	.byte	'AE',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'OE',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'IS0',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'DS',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'TO',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'IS1',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,2
	.word	554
	.byte	10,0,2,35,0,17
	.byte	'TIM',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_EISR_Bits',0,5,176,3,3
	.word	6633
	.byte	16
	.byte	'_Ifx_SCU_EMSR_Bits',0,5,179,3,16,4,17
	.byte	'POL',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'MODE',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'ENON',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'PSEL',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,2
	.word	554
	.byte	12,0,2,35,0,17
	.byte	'EMSF',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'SEMSF',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'reserved_18',0,2
	.word	554
	.byte	14,0,2,35,2,0,15
	.byte	'Ifx_SCU_EMSR_Bits',0,5,189,3,3
	.word	6809
	.byte	16
	.byte	'_Ifx_SCU_EMSSW_Bits',0,5,192,3,16,4,17
	.byte	'reserved_0',0,4
	.word	176
	.byte	24,8,2,35,0,17
	.byte	'EMSFM',0,1
	.word	492
	.byte	2,6,2,35,3,17
	.byte	'SEMSFM',0,1
	.word	492
	.byte	2,4,2,35,3,17
	.byte	'reserved_28',0,1
	.word	492
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_SCU_EMSSW_Bits',0,5,198,3,3
	.word	7003
	.byte	16
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,5,201,3,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	7,1,2,35,0,17
	.byte	'EDCON',0,2
	.word	554
	.byte	2,7,2,35,0,17
	.byte	'reserved_9',0,4
	.word	176
	.byte	23,0,2,35,0,0,15
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,5,206,3,3
	.word	7138
	.byte	16
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,5,209,3,16,4,17
	.byte	'ARI',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'ARC',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,4
	.word	176
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_SCU_ESROCFG_Bits',0,5,214,3,3
	.word	7274
	.byte	16
	.byte	'_Ifx_SCU_EXTCON_Bits',0,5,217,3,16,4,17
	.byte	'EN0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'SEL0',0,1
	.word	492
	.byte	4,2,2,35,0,17
	.byte	'reserved_6',0,2
	.word	554
	.byte	10,0,2,35,0,17
	.byte	'EN1',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'NSEL',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'SEL1',0,1
	.word	492
	.byte	4,2,2,35,2,17
	.byte	'reserved_22',0,1
	.word	492
	.byte	2,0,2,35,2,17
	.byte	'DIV1',0,1
	.word	492
	.byte	8,0,2,35,3,0,15
	.byte	'Ifx_SCU_EXTCON_Bits',0,5,228,3,3
	.word	7385
	.byte	16
	.byte	'_Ifx_SCU_FDR_Bits',0,5,231,3,16,4,17
	.byte	'STEP',0,2
	.word	554
	.byte	10,6,2,35,0,17
	.byte	'reserved_10',0,1
	.word	492
	.byte	4,2,2,35,1,17
	.byte	'DM',0,1
	.word	492
	.byte	2,0,2,35,1,17
	.byte	'RESULT',0,2
	.word	554
	.byte	10,6,2,35,2,17
	.byte	'reserved_26',0,1
	.word	492
	.byte	5,1,2,35,3,17
	.byte	'DISCLK',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_FDR_Bits',0,5,239,3,3
	.word	7603
	.byte	16
	.byte	'_Ifx_SCU_FMR_Bits',0,5,242,3,16,4,17
	.byte	'FS0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'FS1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'FS2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'FS3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'FS4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'FS5',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'FS6',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'FS7',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'reserved_8',0,1
	.word	492
	.byte	8,0,2,35,1,17
	.byte	'FC0',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'FC1',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'FC2',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'FC3',0,1
	.word	492
	.byte	1,4,2,35,2,17
	.byte	'FC4',0,1
	.word	492
	.byte	1,3,2,35,2,17
	.byte	'FC5',0,1
	.word	492
	.byte	1,2,2,35,2,17
	.byte	'FC6',0,1
	.word	492
	.byte	1,1,2,35,2,17
	.byte	'FC7',0,1
	.word	492
	.byte	1,0,2,35,2,17
	.byte	'reserved_24',0,1
	.word	492
	.byte	8,0,2,35,3,0,15
	.byte	'Ifx_SCU_FMR_Bits',0,5,134,4,3
	.word	7766
	.byte	16
	.byte	'_Ifx_SCU_ID_Bits',0,5,137,4,16,4,17
	.byte	'MODREV',0,1
	.word	492
	.byte	8,0,2,35,0,17
	.byte	'MODTYPE',0,1
	.word	492
	.byte	8,0,2,35,1,17
	.byte	'MODNUMBER',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_ID_Bits',0,5,142,4,3
	.word	8102
	.byte	16
	.byte	'_Ifx_SCU_IGCR_Bits',0,5,145,4,16,4,17
	.byte	'IPEN00',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'IPEN01',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'IPEN02',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'IPEN03',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'IPEN04',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'IPEN05',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'IPEN06',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'IPEN07',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'reserved_8',0,1
	.word	492
	.byte	5,3,2,35,1,17
	.byte	'GEEN0',0,1
	.word	492
	.byte	1,2,2,35,1,17
	.byte	'IGP0',0,1
	.word	492
	.byte	2,0,2,35,1,17
	.byte	'IPEN10',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'IPEN11',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'IPEN12',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'IPEN13',0,1
	.word	492
	.byte	1,4,2,35,2,17
	.byte	'IPEN14',0,1
	.word	492
	.byte	1,3,2,35,2,17
	.byte	'IPEN15',0,1
	.word	492
	.byte	1,2,2,35,2,17
	.byte	'IPEN16',0,1
	.word	492
	.byte	1,1,2,35,2,17
	.byte	'IPEN17',0,1
	.word	492
	.byte	1,0,2,35,2,17
	.byte	'reserved_24',0,1
	.word	492
	.byte	5,3,2,35,3,17
	.byte	'GEEN1',0,1
	.word	492
	.byte	1,2,2,35,3,17
	.byte	'IGP1',0,1
	.word	492
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_SCU_IGCR_Bits',0,5,169,4,3
	.word	8209
	.byte	16
	.byte	'_Ifx_SCU_IN_Bits',0,5,172,4,16,4,17
	.byte	'P0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'P1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,4
	.word	176
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_SCU_IN_Bits',0,5,177,4,3
	.word	8661
	.byte	16
	.byte	'_Ifx_SCU_IOCR_Bits',0,5,180,4,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	4,4,2,35,0,17
	.byte	'PC0',0,1
	.word	492
	.byte	4,0,2,35,0,17
	.byte	'reserved_8',0,1
	.word	492
	.byte	4,4,2,35,1,17
	.byte	'PC1',0,1
	.word	492
	.byte	4,0,2,35,1,17
	.byte	'reserved_16',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_IOCR_Bits',0,5,187,4,3
	.word	8760
	.byte	16
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,5,190,4,16,4,17
	.byte	'LBISTREQ',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'LBISTRES',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'PATTERNS',0,4
	.word	176
	.byte	18,12,2,35,0,17
	.byte	'reserved_20',0,2
	.word	554
	.byte	8,4,2,35,2,17
	.byte	'LBISTDONE',0,1
	.word	492
	.byte	1,3,2,35,3,17
	.byte	'reserved_29',0,1
	.word	492
	.byte	1,2,2,35,3,17
	.byte	'LBISTERRINJ',0,1
	.word	492
	.byte	1,1,2,35,3,17
	.byte	'LBISTREQRED',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,5,200,4,3
	.word	8910
	.byte	16
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,5,203,4,16,4,17
	.byte	'SEED',0,4
	.word	176
	.byte	19,13,2,35,0,17
	.byte	'reserved_19',0,1
	.word	492
	.byte	5,0,2,35,2,17
	.byte	'SPLITSH',0,1
	.word	492
	.byte	3,5,2,35,3,17
	.byte	'BODY',0,1
	.word	492
	.byte	1,4,2,35,3,17
	.byte	'LBISTFREQU',0,1
	.word	492
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,5,210,4,3
	.word	9148
	.byte	16
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,5,213,4,16,4,17
	.byte	'LENGTH',0,2
	.word	554
	.byte	12,4,2,35,0,17
	.byte	'reserved_12',0,4
	.word	176
	.byte	20,0,2,35,0,0,15
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,5,217,4,3
	.word	9309
	.byte	16
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,5,220,4,16,4,17
	.byte	'SIGNATURE',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,5,223,4,3
	.word	9415
	.byte	16
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,5,226,4,16,4,17
	.byte	'LS2',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,2
	.word	554
	.byte	14,1,2,35,0,17
	.byte	'LSEN2',0,1
	.word	492
	.byte	1,0,2,35,1,17
	.byte	'LS0',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'reserved_17',0,2
	.word	554
	.byte	14,1,2,35,2,17
	.byte	'LSEN0',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_LCLCON0_Bits',0,5,234,4,3
	.word	9501
	.byte	16
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,5,237,4,16,4,17
	.byte	'LS3',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,2
	.word	554
	.byte	14,1,2,35,0,17
	.byte	'LSEN3',0,1
	.word	492
	.byte	1,0,2,35,1,17
	.byte	'LS1',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'reserved_17',0,2
	.word	554
	.byte	14,1,2,35,2,17
	.byte	'LSEN1',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_LCLCON1_Bits',0,5,245,4,3
	.word	9669
	.byte	16
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,5,248,4,16,4,17
	.byte	'LCLT0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'LCLT1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'LCLT2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'LCLT3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'LCLT4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'LCLT5',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,2
	.word	554
	.byte	10,0,2,35,0,17
	.byte	'PLCLT0',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'PLCLT1',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'PLCLT2',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'PLCLT3',0,1
	.word	492
	.byte	1,4,2,35,2,17
	.byte	'PLCLT4',0,1
	.word	492
	.byte	1,3,2,35,2,17
	.byte	'PLCLT5',0,1
	.word	492
	.byte	1,2,2,35,2,17
	.byte	'reserved_22',0,2
	.word	554
	.byte	10,0,2,35,2,0,15
	.byte	'Ifx_SCU_LCLTEST_Bits',0,5,136,5,3
	.word	9837
	.byte	16
	.byte	'_Ifx_SCU_MANID_Bits',0,5,139,5,16,4,17
	.byte	'DEPT',0,1
	.word	492
	.byte	5,3,2,35,0,17
	.byte	'MANUF',0,2
	.word	554
	.byte	11,0,2,35,0,17
	.byte	'reserved_16',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_MANID_Bits',0,5,144,5,3
	.word	10151
	.byte	16
	.byte	'_Ifx_SCU_OMR_Bits',0,5,147,5,16,4,17
	.byte	'PS0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'PS1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,2
	.word	554
	.byte	14,0,2,35,0,17
	.byte	'PCL0',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'PCL1',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'reserved_18',0,2
	.word	554
	.byte	14,0,2,35,2,0,15
	.byte	'Ifx_SCU_OMR_Bits',0,5,155,5,3
	.word	10262
	.byte	16
	.byte	'_Ifx_SCU_OSCCON_Bits',0,5,158,5,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'PLLLV',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'OSCRES',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'GAINSEL',0,1
	.word	492
	.byte	2,3,2,35,0,17
	.byte	'MODE',0,1
	.word	492
	.byte	2,1,2,35,0,17
	.byte	'SHBY',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'PLLHV',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'HYSEN',0,1
	.word	492
	.byte	1,6,2,35,1,17
	.byte	'HYSCTL',0,1
	.word	492
	.byte	2,4,2,35,1,17
	.byte	'AMPCTL',0,1
	.word	492
	.byte	2,2,2,35,1,17
	.byte	'reserved_14',0,1
	.word	492
	.byte	2,0,2,35,1,17
	.byte	'OSCVAL',0,1
	.word	492
	.byte	5,3,2,35,2,17
	.byte	'reserved_21',0,1
	.word	492
	.byte	2,1,2,35,2,17
	.byte	'APREN',0,1
	.word	492
	.byte	1,0,2,35,2,17
	.byte	'CAP0EN',0,1
	.word	492
	.byte	1,7,2,35,3,17
	.byte	'CAP1EN',0,1
	.word	492
	.byte	1,6,2,35,3,17
	.byte	'CAP2EN',0,1
	.word	492
	.byte	1,5,2,35,3,17
	.byte	'CAP3EN',0,1
	.word	492
	.byte	1,4,2,35,3,17
	.byte	'reserved_28',0,1
	.word	492
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_SCU_OSCCON_Bits',0,5,179,5,3
	.word	10420
	.byte	16
	.byte	'_Ifx_SCU_OUT_Bits',0,5,182,5,16,4,17
	.byte	'P0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'P1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,4
	.word	176
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_SCU_OUT_Bits',0,5,187,5,3
	.word	10831
	.byte	16
	.byte	'_Ifx_SCU_OVCCON_Bits',0,5,190,5,16,4,17
	.byte	'CSEL0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'CSEL1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'CSEL2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'CSEL3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'CSEL4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'CSEL5',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,2
	.word	554
	.byte	10,0,2,35,0,17
	.byte	'OVSTRT',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'OVSTP',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'DCINVAL',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'reserved_19',0,1
	.word	492
	.byte	5,0,2,35,2,17
	.byte	'OVCONF',0,1
	.word	492
	.byte	1,7,2,35,3,17
	.byte	'POVCONF',0,1
	.word	492
	.byte	1,6,2,35,3,17
	.byte	'reserved_26',0,1
	.word	492
	.byte	6,0,2,35,3,0,15
	.byte	'Ifx_SCU_OVCCON_Bits',0,5,206,5,3
	.word	10932
	.byte	16
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,5,209,5,16,4,17
	.byte	'OVEN0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'OVEN1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'OVEN2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'OVEN3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'OVEN4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'OVEN5',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	176
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,5,218,5,3
	.word	11250
	.byte	16
	.byte	'_Ifx_SCU_PDISC_Bits',0,5,221,5,16,4,17
	.byte	'PDIS0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'PDIS1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,4
	.word	176
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_SCU_PDISC_Bits',0,5,226,5,3
	.word	11437
	.byte	16
	.byte	'_Ifx_SCU_PDR_Bits',0,5,229,5,16,4,17
	.byte	'PD0',0,1
	.word	492
	.byte	2,6,2,35,0,17
	.byte	'PL0',0,1
	.word	492
	.byte	2,4,2,35,0,17
	.byte	'PD1',0,1
	.word	492
	.byte	2,2,2,35,0,17
	.byte	'PL1',0,1
	.word	492
	.byte	2,0,2,35,0,17
	.byte	'reserved_8',0,4
	.word	176
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_SCU_PDR_Bits',0,5,236,5,3
	.word	11548
	.byte	16
	.byte	'_Ifx_SCU_PDRR_Bits',0,5,239,5,16,4,17
	.byte	'PDR0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'PDR1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'PDR2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'PDR3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'PDR4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'PDR5',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'PDR6',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'PDR7',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'reserved_8',0,4
	.word	176
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_SCU_PDRR_Bits',0,5,250,5,3
	.word	11681
	.byte	16
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,5,253,5,16,4,17
	.byte	'DIVBY',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,2
	.word	554
	.byte	8,7,2,35,0,17
	.byte	'NDIV',0,1
	.word	492
	.byte	7,0,2,35,1,17
	.byte	'PLLPWD',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'reserved_17',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'RESLD',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'reserved_19',0,1
	.word	492
	.byte	5,0,2,35,2,17
	.byte	'PDIV',0,1
	.word	492
	.byte	3,5,2,35,3,17
	.byte	'reserved_27',0,1
	.word	492
	.byte	5,0,2,35,3,0,15
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,5,136,6,3
	.word	11884
	.byte	16
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,5,139,6,16,4,17
	.byte	'K2DIV',0,1
	.word	492
	.byte	3,5,2,35,0,17
	.byte	'reserved_3',0,1
	.word	492
	.byte	5,0,2,35,0,17
	.byte	'K3DIV',0,1
	.word	492
	.byte	3,5,2,35,1,17
	.byte	'reserved_11',0,4
	.word	176
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,5,145,6,3
	.word	12124
	.byte	16
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,5,148,6,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'PWDSTAT',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'LOCK',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'reserved_3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'K3RDY',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'K2RDY',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'reserved_7',0,4
	.word	176
	.byte	25,0,2,35,0,0,15
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,5,158,6,3
	.word	12268
	.byte	16
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,5,161,6,16,4,17
	.byte	'REQSLP',0,1
	.word	492
	.byte	2,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	492
	.byte	6,0,2,35,0,17
	.byte	'PMST',0,1
	.word	492
	.byte	3,5,2,35,1,17
	.byte	'reserved_11',0,4
	.word	176
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR0_Bits',0,5,167,6,3
	.word	12490
	.byte	16
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,5,170,6,16,4,17
	.byte	'REQSLP',0,1
	.word	492
	.byte	2,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	492
	.byte	6,0,2,35,0,17
	.byte	'PMST',0,1
	.word	492
	.byte	3,5,2,35,1,17
	.byte	'reserved_11',0,4
	.word	176
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR1_Bits',0,5,176,6,3
	.word	12626
	.byte	16
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,5,179,6,16,4,17
	.byte	'REQSLP',0,1
	.word	492
	.byte	2,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	492
	.byte	6,0,2,35,0,17
	.byte	'PMST',0,1
	.word	492
	.byte	3,5,2,35,1,17
	.byte	'reserved_11',0,4
	.word	176
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR2_Bits',0,5,185,6,3
	.word	12762
	.byte	16
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,5,188,6,16,4,17
	.byte	'REQSLP',0,1
	.word	492
	.byte	2,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	492
	.byte	6,0,2,35,0,17
	.byte	'PMST',0,1
	.word	492
	.byte	3,5,2,35,1,17
	.byte	'reserved_11',0,4
	.word	176
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR3_Bits',0,5,194,6,3
	.word	12898
	.byte	16
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,5,197,6,16,4,17
	.byte	'REQSLP',0,1
	.word	492
	.byte	2,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	492
	.byte	6,0,2,35,0,17
	.byte	'PMST',0,1
	.word	492
	.byte	3,5,2,35,1,17
	.byte	'reserved_11',0,4
	.word	176
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR4_Bits',0,5,203,6,3
	.word	13034
	.byte	16
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,5,206,6,16,4,17
	.byte	'REQSLP',0,1
	.word	492
	.byte	2,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	492
	.byte	6,0,2,35,0,17
	.byte	'PMST',0,1
	.word	492
	.byte	3,5,2,35,1,17
	.byte	'reserved_11',0,4
	.word	176
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR5_Bits',0,5,212,6,3
	.word	13170
	.byte	16
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,5,215,6,16,4,17
	.byte	'CPU0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'CPU1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'CPU2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'CPU3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'CPU4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'CPU5',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,2
	.word	554
	.byte	10,0,2,35,0,17
	.byte	'CPU0LS',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'CPU1LS',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'CPU2LS',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'CPU3LS',0,1
	.word	492
	.byte	1,4,2,35,2,17
	.byte	'reserved_20',0,2
	.word	554
	.byte	12,0,2,35,2,0,15
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,5,229,6,3
	.word	13306
	.byte	16
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,5,232,6,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	8,0,2,35,0,17
	.byte	'CPUIDLSEL',0,1
	.word	492
	.byte	3,5,2,35,1,17
	.byte	'reserved_11',0,1
	.word	492
	.byte	1,4,2,35,1,17
	.byte	'IRADIS',0,1
	.word	492
	.byte	1,3,2,35,1,17
	.byte	'reserved_13',0,4
	.word	176
	.byte	11,8,2,35,0,17
	.byte	'CPUSEL',0,1
	.word	492
	.byte	3,5,2,35,3,17
	.byte	'STBYEVEN',0,1
	.word	492
	.byte	1,4,2,35,3,17
	.byte	'STBYEV',0,1
	.word	492
	.byte	3,1,2,35,3,17
	.byte	'reserved_31',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,5,243,6,3
	.word	13578
	.byte	16
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,5,246,6,16,4,17
	.byte	'LJTEN',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'LJTOVEN',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'LJTOVIEN',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'LJTSTRT',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'LJTSTP',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'LJTCLR',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,2
	.word	554
	.byte	6,4,2,35,0,17
	.byte	'SDSTEP',0,1
	.word	492
	.byte	4,0,2,35,1,17
	.byte	'VDTEN',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'VDTOVEN',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'VDTOVIEN',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'VDTSTRT',0,1
	.word	492
	.byte	1,4,2,35,2,17
	.byte	'VDTSTP',0,1
	.word	492
	.byte	1,3,2,35,2,17
	.byte	'VDTCLR',0,1
	.word	492
	.byte	1,2,2,35,2,17
	.byte	'reserved_22',0,2
	.word	554
	.byte	7,3,2,35,2,17
	.byte	'LPSLPEN',0,1
	.word	492
	.byte	1,2,2,35,3,17
	.byte	'reserved_30',0,1
	.word	492
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,5,137,7,3
	.word	13823
	.byte	16
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,5,140,7,16,4,17
	.byte	'LJTCV',0,2
	.word	554
	.byte	16,0,2,35,0,17
	.byte	'VDTCV',0,2
	.word	554
	.byte	10,6,2,35,2,17
	.byte	'reserved_26',0,1
	.word	492
	.byte	6,0,2,35,3,0,15
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,5,145,7,3
	.word	14211
	.byte	16
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,5,148,7,16,4,17
	.byte	'LDJMPREQ',0,1
	.word	492
	.byte	2,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	492
	.byte	2,4,2,35,0,17
	.byte	'LJTRUN',0,1
	.word	492
	.byte	2,2,2,35,0,17
	.byte	'reserved_6',0,1
	.word	492
	.byte	2,0,2,35,0,17
	.byte	'LJTOV',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'reserved_9',0,1
	.word	492
	.byte	3,4,2,35,1,17
	.byte	'LJTOVCLR',0,1
	.word	492
	.byte	1,3,2,35,1,17
	.byte	'reserved_13',0,1
	.word	492
	.byte	3,0,2,35,1,17
	.byte	'LJTCNT',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,5,159,7,3
	.word	14329
	.byte	16
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,5,162,7,16,4,17
	.byte	'VDROOPREQ',0,1
	.word	492
	.byte	2,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	492
	.byte	2,4,2,35,0,17
	.byte	'VDTRUN',0,1
	.word	492
	.byte	2,2,2,35,0,17
	.byte	'reserved_6',0,1
	.word	492
	.byte	2,0,2,35,0,17
	.byte	'VDTOV',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'reserved_9',0,1
	.word	492
	.byte	3,4,2,35,1,17
	.byte	'VDTOVCLR',0,1
	.word	492
	.byte	1,3,2,35,1,17
	.byte	'reserved_13',0,1
	.word	492
	.byte	3,0,2,35,1,17
	.byte	'VDTCNT',0,2
	.word	554
	.byte	10,6,2,35,2,17
	.byte	'reserved_26',0,1
	.word	492
	.byte	6,0,2,35,3,0,15
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,5,174,7,3
	.word	14572
	.byte	16
	.byte	'_Ifx_SCU_RSTCON_Bits',0,5,177,7,16,4,17
	.byte	'ESR0',0,1
	.word	492
	.byte	2,6,2,35,0,17
	.byte	'ESR1',0,1
	.word	492
	.byte	2,4,2,35,0,17
	.byte	'reserved_4',0,1
	.word	492
	.byte	2,2,2,35,0,17
	.byte	'SMU',0,1
	.word	492
	.byte	2,0,2,35,0,17
	.byte	'SW',0,1
	.word	492
	.byte	2,6,2,35,1,17
	.byte	'STM0',0,1
	.word	492
	.byte	2,4,2,35,1,17
	.byte	'STM1',0,1
	.word	492
	.byte	2,2,2,35,1,17
	.byte	'STM2',0,1
	.word	492
	.byte	2,0,2,35,1,17
	.byte	'STM3',0,1
	.word	492
	.byte	2,6,2,35,2,17
	.byte	'STM4',0,1
	.word	492
	.byte	2,4,2,35,2,17
	.byte	'STM5',0,1
	.word	492
	.byte	2,2,2,35,2,17
	.byte	'reserved_22',0,2
	.word	554
	.byte	10,0,2,35,2,0,15
	.byte	'Ifx_SCU_RSTCON_Bits',0,5,191,7,3
	.word	14839
	.byte	16
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,5,194,7,16,4,17
	.byte	'FRTO',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'CLRC',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'reserved_3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'reserved_5',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'CSSX',0,2
	.word	554
	.byte	6,3,2,35,0,17
	.byte	'reserved_13',0,1
	.word	492
	.byte	1,2,2,35,1,17
	.byte	'reserved_14',0,1
	.word	492
	.byte	1,1,2,35,1,17
	.byte	'reserved_15',0,1
	.word	492
	.byte	1,0,2,35,1,17
	.byte	'USRINFO',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_RSTCON2_Bits',0,5,208,7,3
	.word	15098
	.byte	16
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,5,211,7,16,4,17
	.byte	'reserved_0',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_RSTCON3_Bits',0,5,214,7,3
	.word	15403
	.byte	16
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,5,217,7,16,4,17
	.byte	'ESR0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'ESR1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'SMU',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'SW',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'STM0',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'STM1',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'STM2',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'STM3',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'STM4',0,1
	.word	492
	.byte	1,6,2,35,1,17
	.byte	'STM5',0,1
	.word	492
	.byte	1,5,2,35,1,17
	.byte	'reserved_11',0,1
	.word	492
	.byte	5,0,2,35,1,17
	.byte	'PORST',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'reserved_17',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'CB0',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'CB1',0,1
	.word	492
	.byte	1,4,2,35,2,17
	.byte	'CB3',0,1
	.word	492
	.byte	1,3,2,35,2,17
	.byte	'reserved_21',0,1
	.word	492
	.byte	1,2,2,35,2,17
	.byte	'reserved_22',0,1
	.word	492
	.byte	1,1,2,35,2,17
	.byte	'EVRC',0,1
	.word	492
	.byte	1,0,2,35,2,17
	.byte	'EVR33',0,1
	.word	492
	.byte	1,7,2,35,3,17
	.byte	'SWD',0,1
	.word	492
	.byte	1,6,2,35,3,17
	.byte	'HSMS',0,1
	.word	492
	.byte	1,5,2,35,3,17
	.byte	'HSMA',0,1
	.word	492
	.byte	1,4,2,35,3,17
	.byte	'STBYR',0,1
	.word	492
	.byte	1,3,2,35,3,17
	.byte	'LBPORST',0,1
	.word	492
	.byte	1,2,2,35,3,17
	.byte	'LBTERM',0,1
	.word	492
	.byte	1,1,2,35,3,17
	.byte	'reserved_31',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,5,247,7,3
	.word	15484
	.byte	16
	.byte	'_Ifx_SCU_SEICON0_Bits',0,5,250,7,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'ENDINIT',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EPW',0,4
	.word	5286
	.byte	14,16,2,35,0,17
	.byte	'REL',0,4
	.word	5286
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_SCU_SEICON0_Bits',0,5,128,8,3
	.word	16033
	.byte	16
	.byte	'_Ifx_SCU_SEICON1_Bits',0,5,131,8,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'IR0',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'DR',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'IR1',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	176
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_SEICON1_Bits',0,5,140,8,3
	.word	16163
	.byte	16
	.byte	'_Ifx_SCU_SEISR_Bits',0,5,143,8,16,4,17
	.byte	'AE',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'OE',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'IS0',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'DS',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'TO',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'IS1',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,2
	.word	554
	.byte	10,0,2,35,0,17
	.byte	'TIM',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_SEISR_Bits',0,5,153,8,3
	.word	16354
	.byte	16
	.byte	'_Ifx_SCU_STCON_Bits',0,5,156,8,16,4,17
	.byte	'reserved_0',0,2
	.word	554
	.byte	13,3,2,35,0,17
	.byte	'SFCBAE',0,1
	.word	492
	.byte	1,2,2,35,1,17
	.byte	'CFCBAE',0,1
	.word	492
	.byte	1,1,2,35,1,17
	.byte	'STP',0,1
	.word	492
	.byte	1,0,2,35,1,17
	.byte	'reserved_16',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_STCON_Bits',0,5,163,8,3
	.word	16532
	.byte	16
	.byte	'_Ifx_SCU_STMEM1_Bits',0,5,166,8,16,4,17
	.byte	'MEM',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM1_Bits',0,5,169,8,3
	.word	16683
	.byte	16
	.byte	'_Ifx_SCU_STMEM2_Bits',0,5,172,8,16,4,17
	.byte	'MEM',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM2_Bits',0,5,175,8,3
	.word	16755
	.byte	16
	.byte	'_Ifx_SCU_STMEM3_Bits',0,5,178,8,16,4,17
	.byte	'MEM',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM3_Bits',0,5,181,8,3
	.word	16827
	.byte	16
	.byte	'_Ifx_SCU_STMEM4_Bits',0,5,184,8,16,4,17
	.byte	'MEM',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM4_Bits',0,5,187,8,3
	.word	16899
	.byte	16
	.byte	'_Ifx_SCU_STMEM5_Bits',0,5,190,8,16,4,17
	.byte	'MEM',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM5_Bits',0,5,193,8,3
	.word	16971
	.byte	16
	.byte	'_Ifx_SCU_STMEM6_Bits',0,5,196,8,16,4,17
	.byte	'MEM',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM6_Bits',0,5,199,8,3
	.word	17043
	.byte	16
	.byte	'_Ifx_SCU_STSTAT_Bits',0,5,202,8,16,4,17
	.byte	'HWCFG',0,1
	.word	492
	.byte	8,0,2,35,0,17
	.byte	'FTM',0,1
	.word	492
	.byte	7,1,2,35,1,17
	.byte	'MODE',0,1
	.word	492
	.byte	1,0,2,35,1,17
	.byte	'FCBAE',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'LUDIS',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'reserved_18',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'TRSTL',0,1
	.word	492
	.byte	1,4,2,35,2,17
	.byte	'SPDEN',0,1
	.word	492
	.byte	1,3,2,35,2,17
	.byte	'reserved_21',0,1
	.word	492
	.byte	1,2,2,35,2,17
	.byte	'reserved_22',0,1
	.word	492
	.byte	1,1,2,35,2,17
	.byte	'reserved_23',0,1
	.word	492
	.byte	1,0,2,35,2,17
	.byte	'RAMINT',0,1
	.word	492
	.byte	1,7,2,35,3,17
	.byte	'reserved_25',0,1
	.word	492
	.byte	3,4,2,35,3,17
	.byte	'reserved_28',0,1
	.word	492
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_SCU_STSTAT_Bits',0,5,218,8,3
	.word	17115
	.byte	16
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,5,221,8,16,4,17
	.byte	'ADDRCFG',0,1
	.word	492
	.byte	2,6,2,35,0,17
	.byte	'SPARE',0,2
	.word	554
	.byte	14,0,2,35,0,17
	.byte	'reserved_16',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,5,226,8,3
	.word	17444
	.byte	16
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,5,229,8,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'SWRSTREQ',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	492
	.byte	6,0,2,35,0,17
	.byte	'reserved_8',0,1
	.word	492
	.byte	8,0,2,35,1,17
	.byte	'reserved_16',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,5,236,8,3
	.word	17564
	.byte	16
	.byte	'_Ifx_SCU_SYSCON_Bits',0,5,239,8,16,4,17
	.byte	'CCTRIG0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'RAMINTM',0,1
	.word	492
	.byte	2,4,2,35,0,17
	.byte	'SETLUDIS',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'reserved_5',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'reserved_7',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'DDC',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'reserved_9',0,1
	.word	492
	.byte	7,0,2,35,1,17
	.byte	'reserved_16',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_SYSCON_Bits',0,5,251,8,3
	.word	17734
	.byte	16
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,5,254,8,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	2,6,2,35,0,17
	.byte	'MODEN',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'reserved_3',0,2
	.word	554
	.byte	6,7,2,35,0,17
	.byte	'NDIV',0,1
	.word	492
	.byte	7,0,2,35,1,17
	.byte	'PLLPWD',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'reserved_17',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'RESLD',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'reserved_19',0,1
	.word	492
	.byte	5,0,2,35,2,17
	.byte	'PDIV',0,1
	.word	492
	.byte	3,5,2,35,3,17
	.byte	'reserved_27',0,1
	.word	492
	.byte	3,2,2,35,3,17
	.byte	'INSEL',0,1
	.word	492
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,5,139,9,3
	.word	17997
	.byte	16
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,5,142,9,16,4,17
	.byte	'K2DIV',0,1
	.word	492
	.byte	3,5,2,35,0,17
	.byte	'reserved_3',0,4
	.word	176
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,5,146,9,3
	.word	18276
	.byte	16
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,5,149,9,16,4,17
	.byte	'MODCFG',0,2
	.word	554
	.byte	16,0,2,35,0,17
	.byte	'reserved_16',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,5,153,9,3
	.word	18380
	.byte	16
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,5,156,9,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'PWDSTAT',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'LOCK',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'reserved_3',0,1
	.word	492
	.byte	2,3,2,35,0,17
	.byte	'K2RDY',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'MODRUN',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'reserved_8',0,4
	.word	176
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,5,166,9,3
	.word	18486
	.byte	16
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,5,169,9,16,4,17
	.byte	'ESR0T',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'ESR1T',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'TRAP2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'SMUT',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,4
	.word	176
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,5,176,9,3
	.word	18709
	.byte	16
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,5,179,9,16,4,17
	.byte	'CPU0ESR0T',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'CPU0ESR1T',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'CPU0TRAP2T',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'CPU0SMUT',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,1
	.word	492
	.byte	4,0,2,35,0,17
	.byte	'CPU1ESR0T',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'CPU1ESR1T',0,1
	.word	492
	.byte	1,6,2,35,1,17
	.byte	'CPU1TRAP2T',0,1
	.word	492
	.byte	1,5,2,35,1,17
	.byte	'CPU1SMUT',0,1
	.word	492
	.byte	1,4,2,35,1,17
	.byte	'reserved_12',0,1
	.word	492
	.byte	4,0,2,35,1,17
	.byte	'CPU2ESR0T',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'CPU2ESR1T',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'CPU2TRAP2T',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'CPU2SMUT',0,1
	.word	492
	.byte	1,4,2,35,2,17
	.byte	'reserved_20',0,1
	.word	492
	.byte	4,0,2,35,2,17
	.byte	'CPU3ESR0T',0,1
	.word	492
	.byte	1,7,2,35,3,17
	.byte	'CPU3ESR1T',0,1
	.word	492
	.byte	1,6,2,35,3,17
	.byte	'CPU3TRAP2T',0,1
	.word	492
	.byte	1,5,2,35,3,17
	.byte	'CPU3SMUT',0,1
	.word	492
	.byte	1,4,2,35,3,17
	.byte	'reserved_28',0,1
	.word	492
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,5,201,9,3
	.word	18857
	.byte	16
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,5,204,9,16,4,17
	.byte	'CPU4ESR0T',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'CPU4ESR1T',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'CPU4TRAP2T',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'CPU4SMUT',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,1
	.word	492
	.byte	4,0,2,35,0,17
	.byte	'CPU5ESR0T',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'CPU5ESR1T',0,1
	.word	492
	.byte	1,6,2,35,1,17
	.byte	'CPU5TRAP2T',0,1
	.word	492
	.byte	1,5,2,35,1,17
	.byte	'CPU5SMUT',0,1
	.word	492
	.byte	1,4,2,35,1,17
	.byte	'reserved_12',0,1
	.word	492
	.byte	4,0,2,35,1,17
	.byte	'reserved_16',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,5,217,9,3
	.word	19345
	.byte	16
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,5,220,9,16,4,17
	.byte	'ESR0T',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'ESR1T',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'TRAP2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'SMUT',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,4
	.word	176
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPSET_Bits',0,5,227,9,3
	.word	19642
	.byte	16
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,5,230,9,16,4,17
	.byte	'ESR0T',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'ESR1T',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'TRAP2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'SMUT',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,4
	.word	176
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,5,237,9,3
	.word	19790
	.byte	16
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,5,240,9,16,4,17
	.byte	'ENDINIT',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'LCK',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'PW',0,4
	.word	5286
	.byte	14,16,2,35,0,17
	.byte	'REL',0,4
	.word	5286
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,5,246,9,3
	.word	19940
	.byte	16
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,5,249,9,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'IR0',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'DR',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'IR1',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'UR',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'PAR',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'TCR',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'TCTR',0,1
	.word	492
	.byte	7,0,2,35,1,17
	.byte	'reserved_16',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,5,134,10,3
	.word	20070
	.byte	16
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,5,137,10,16,4,17
	.byte	'AE',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'OE',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'IS0',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'DS',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'TO',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'IS1',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'US',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'PAS',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'TCS',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'TCT',0,1
	.word	492
	.byte	7,0,2,35,1,17
	.byte	'TIM',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,5,150,10,3
	.word	20330
	.byte	16
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,5,153,10,16,4,17
	.byte	'ENDINIT',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'LCK',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'PW',0,4
	.word	5286
	.byte	14,16,2,35,0,17
	.byte	'REL',0,4
	.word	5286
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,5,159,10,3
	.word	20553
	.byte	16
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,5,162,10,16,4,17
	.byte	'CLRIRF',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'IR0',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'DR',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'IR1',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'UR',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'PAR',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'TCR',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'TCTR',0,1
	.word	492
	.byte	7,0,2,35,1,17
	.byte	'reserved_16',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,5,175,10,3
	.word	20679
	.byte	16
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,5,178,10,16,4,17
	.byte	'AE',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'OE',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'IS0',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'DS',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'TO',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'IS1',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'US',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'PAS',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'TCS',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'TCT',0,1
	.word	492
	.byte	7,0,2,35,1,17
	.byte	'TIM',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,5,191,10,3
	.word	20931
	.byte	18,5,199,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	1058
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ACCEN00',0,5,204,10,3
	.word	21150
	.byte	18,5,207,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	1617
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ACCEN01',0,5,212,10,3
	.word	21215
	.byte	18,5,215,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	1696
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ACCEN10',0,5,220,10,3
	.word	21280
	.byte	18,5,223,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	2256
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ACCEN11',0,5,228,10,3
	.word	21345
	.byte	18,5,231,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	2337
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ARSTDIS',0,5,236,10,3
	.word	21410
	.byte	18,5,239,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	2554
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON0',0,5,244,10,3
	.word	21475
	.byte	18,5,247,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	2827
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON1',0,5,252,10,3
	.word	21540
	.byte	18,5,255,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	3153
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON10',0,5,132,11,3
	.word	21605
	.byte	18,5,135,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	3255
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON11',0,5,140,11,3
	.word	21671
	.byte	18,5,143,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	3357
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON2',0,5,148,11,3
	.word	21737
	.byte	18,5,151,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	3631
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON3',0,5,156,11,3
	.word	21802
	.byte	18,5,159,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4000
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON4',0,5,164,11,3
	.word	21867
	.byte	18,5,167,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4180
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON5',0,5,172,11,3
	.word	21932
	.byte	18,5,175,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4349
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON6',0,5,180,11,3
	.word	21997
	.byte	18,5,183,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4449
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON7',0,5,188,11,3
	.word	22062
	.byte	18,5,191,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4549
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON8',0,5,196,11,3
	.word	22127
	.byte	18,5,199,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4649
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON9',0,5,204,11,3
	.word	22192
	.byte	18,5,207,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4749
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CHIPID',0,5,212,11,3
	.word	22257
	.byte	18,5,215,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4952
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_DTSCLIM',0,5,220,11,3
	.word	22321
	.byte	18,5,223,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	5184
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_DTSCSTAT',0,5,228,11,3
	.word	22386
	.byte	18,5,231,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	5302
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EICON0',0,5,236,11,3
	.word	22452
	.byte	18,5,239,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	5430
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EICON1',0,5,244,11,3
	.word	22516
	.byte	18,5,247,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	5619
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EICR',0,5,252,11,3
	.word	22580
	.byte	18,5,255,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	5983
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EIFILT',0,5,132,12,3
	.word	22642
	.byte	18,5,135,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	6422
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EIFR',0,5,140,12,3
	.word	22706
	.byte	18,5,143,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	6633
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EISR',0,5,148,12,3
	.word	22768
	.byte	18,5,151,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	6809
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EMSR',0,5,156,12,3
	.word	22830
	.byte	18,5,159,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	7003
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EMSSW',0,5,164,12,3
	.word	22892
	.byte	18,5,167,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	7138
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,5,172,12,3
	.word	22955
	.byte	18,5,175,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	7274
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ESROCFG',0,5,180,12,3
	.word	23028
	.byte	18,5,183,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	7385
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EXTCON',0,5,188,12,3
	.word	23093
	.byte	18,5,191,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	7603
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_FDR',0,5,196,12,3
	.word	23157
	.byte	18,5,199,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	7766
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_FMR',0,5,204,12,3
	.word	23218
	.byte	18,5,207,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	8102
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ID',0,5,212,12,3
	.word	23279
	.byte	18,5,215,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	8209
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_IGCR',0,5,220,12,3
	.word	23339
	.byte	18,5,223,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	8661
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_IN',0,5,228,12,3
	.word	23401
	.byte	18,5,231,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	8760
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_IOCR',0,5,236,12,3
	.word	23461
	.byte	18,5,239,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	8910
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LBISTCTRL0',0,5,244,12,3
	.word	23523
	.byte	18,5,247,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	9148
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LBISTCTRL1',0,5,252,12,3
	.word	23591
	.byte	18,5,255,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	9309
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LBISTCTRL2',0,5,132,13,3
	.word	23659
	.byte	18,5,135,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	9415
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LBISTCTRL3',0,5,140,13,3
	.word	23727
	.byte	18,5,143,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	9501
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LCLCON0',0,5,148,13,3
	.word	23795
	.byte	18,5,151,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	9669
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LCLCON1',0,5,156,13,3
	.word	23860
	.byte	18,5,159,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	9837
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LCLTEST',0,5,164,13,3
	.word	23925
	.byte	18,5,167,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	10151
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_MANID',0,5,172,13,3
	.word	23990
	.byte	18,5,175,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	10262
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_OMR',0,5,180,13,3
	.word	24053
	.byte	18,5,183,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	10420
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_OSCCON',0,5,188,13,3
	.word	24114
	.byte	18,5,191,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	10831
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_OUT',0,5,196,13,3
	.word	24178
	.byte	18,5,199,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	10932
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_OVCCON',0,5,204,13,3
	.word	24239
	.byte	18,5,207,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	11250
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_OVCENABLE',0,5,212,13,3
	.word	24303
	.byte	18,5,215,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	11437
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PDISC',0,5,220,13,3
	.word	24370
	.byte	18,5,223,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	11548
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PDR',0,5,228,13,3
	.word	24433
	.byte	18,5,231,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	11681
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PDRR',0,5,236,13,3
	.word	24494
	.byte	18,5,239,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	11884
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PERPLLCON0',0,5,244,13,3
	.word	24556
	.byte	18,5,247,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	12124
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PERPLLCON1',0,5,252,13,3
	.word	24624
	.byte	18,5,255,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	12268
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PERPLLSTAT',0,5,132,14,3
	.word	24692
	.byte	18,5,135,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	12490
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR0',0,5,140,14,3
	.word	24760
	.byte	18,5,143,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	12626
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR1',0,5,148,14,3
	.word	24824
	.byte	18,5,151,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	12762
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR2',0,5,156,14,3
	.word	24888
	.byte	18,5,159,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	12898
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR3',0,5,164,14,3
	.word	24952
	.byte	18,5,167,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	13034
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR4',0,5,172,14,3
	.word	25016
	.byte	18,5,175,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	13170
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR5',0,5,180,14,3
	.word	25080
	.byte	18,5,183,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	13306
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMSTAT0',0,5,188,14,3
	.word	25144
	.byte	18,5,191,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	13578
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMSWCR1',0,5,196,14,3
	.word	25209
	.byte	18,5,199,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	13823
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMTRCSR0',0,5,204,14,3
	.word	25274
	.byte	18,5,207,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	14211
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMTRCSR1',0,5,212,14,3
	.word	25340
	.byte	18,5,215,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	14329
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMTRCSR2',0,5,220,14,3
	.word	25406
	.byte	18,5,223,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	14572
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMTRCSR3',0,5,228,14,3
	.word	25472
	.byte	18,5,231,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	14839
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_RSTCON',0,5,236,14,3
	.word	25538
	.byte	18,5,239,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	15098
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_RSTCON2',0,5,244,14,3
	.word	25602
	.byte	18,5,247,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	15403
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_RSTCON3',0,5,252,14,3
	.word	25667
	.byte	18,5,255,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	15484
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_RSTSTAT',0,5,132,15,3
	.word	25732
	.byte	18,5,135,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	16033
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SEICON0',0,5,140,15,3
	.word	25797
	.byte	18,5,143,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	16163
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SEICON1',0,5,148,15,3
	.word	25862
	.byte	18,5,151,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	16354
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SEISR',0,5,156,15,3
	.word	25927
	.byte	18,5,159,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	16532
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STCON',0,5,164,15,3
	.word	25990
	.byte	18,5,167,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	16683
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM1',0,5,172,15,3
	.word	26053
	.byte	18,5,175,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	16755
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM2',0,5,180,15,3
	.word	26117
	.byte	18,5,183,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	16827
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM3',0,5,188,15,3
	.word	26181
	.byte	18,5,191,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	16899
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM4',0,5,196,15,3
	.word	26245
	.byte	18,5,199,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	16971
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM5',0,5,204,15,3
	.word	26309
	.byte	18,5,207,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	17043
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM6',0,5,212,15,3
	.word	26373
	.byte	18,5,215,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	17115
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STSTAT',0,5,220,15,3
	.word	26437
	.byte	18,5,223,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	17444
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SWAPCTRL',0,5,228,15,3
	.word	26501
	.byte	18,5,231,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	17564
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SWRSTCON',0,5,236,15,3
	.word	26567
	.byte	18,5,239,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	17734
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SYSCON',0,5,244,15,3
	.word	26633
	.byte	18,5,247,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	17997
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SYSPLLCON0',0,5,252,15,3
	.word	26697
	.byte	18,5,255,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	18276
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SYSPLLCON1',0,5,132,16,3
	.word	26765
	.byte	18,5,135,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	18380
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SYSPLLCON2',0,5,140,16,3
	.word	26833
	.byte	18,5,143,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	18486
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SYSPLLSTAT',0,5,148,16,3
	.word	26901
	.byte	18,5,151,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	18709
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPCLR',0,5,156,16,3
	.word	26969
	.byte	18,5,159,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	18857
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPDIS0',0,5,164,16,3
	.word	27034
	.byte	18,5,167,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	19345
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPDIS1',0,5,172,16,3
	.word	27100
	.byte	18,5,175,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	19642
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPSET',0,5,180,16,3
	.word	27166
	.byte	18,5,183,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	19790
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPSTAT',0,5,188,16,3
	.word	27231
	.byte	18,5,191,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	19940
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_WDTCPU_CON0',0,5,196,16,3
	.word	27297
	.byte	18,5,199,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	20070
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_WDTCPU_CON1',0,5,204,16,3
	.word	27366
	.byte	18,5,207,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	20330
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_WDTCPU_SR',0,5,212,16,3
	.word	27435
	.byte	18,5,215,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	20553
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_WDTS_CON0',0,5,220,16,3
	.word	27502
	.byte	18,5,223,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	20679
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_WDTS_CON1',0,5,228,16,3
	.word	27569
	.byte	18,5,231,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	20931
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_WDTS_SR',0,5,236,16,3
	.word	27636
	.byte	16
	.byte	'_Ifx_SCU_ESRCFGX',0,5,248,16,25,4,11
	.byte	'ESRCFGX',0
	.word	22955
	.byte	4,2,35,0,0,6
	.word	27701
	.byte	15
	.byte	'Ifx_SCU_ESRCFGX',0,5,251,16,3
	.word	27742
	.byte	16
	.byte	'_Ifx_SCU_WDTCPU',0,5,138,17,25,12,11
	.byte	'CON0',0
	.word	27297
	.byte	4,2,35,0,11
	.byte	'CON1',0
	.word	27366
	.byte	4,2,35,4,11
	.byte	'SR',0
	.word	27435
	.byte	4,2,35,8,0,6
	.word	27772
	.byte	15
	.byte	'Ifx_SCU_WDTCPU',0,5,143,17,3
	.word	27835
	.byte	16
	.byte	'_Ifx_SCU_WDTS',0,5,158,17,25,12,11
	.byte	'CON0',0
	.word	27502
	.byte	4,2,35,0,11
	.byte	'CON1',0
	.word	27569
	.byte	4,2,35,4,11
	.byte	'SR',0
	.word	27636
	.byte	4,2,35,8,0,6
	.word	27864
	.byte	15
	.byte	'Ifx_SCU_WDTS',0,5,163,17,3
	.word	27925
	.byte	16
	.byte	'_Ifx_STM_ACCEN0_Bits',0,6,70,16,4,17
	.byte	'EN0',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'EN1',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'EN2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'EN3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'EN4',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'EN5',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'EN6',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'EN7',0,1
	.word	492
	.byte	1,0,2,35,0,17
	.byte	'EN8',0,1
	.word	492
	.byte	1,7,2,35,1,17
	.byte	'EN9',0,1
	.word	492
	.byte	1,6,2,35,1,17
	.byte	'EN10',0,1
	.word	492
	.byte	1,5,2,35,1,17
	.byte	'EN11',0,1
	.word	492
	.byte	1,4,2,35,1,17
	.byte	'EN12',0,1
	.word	492
	.byte	1,3,2,35,1,17
	.byte	'EN13',0,1
	.word	492
	.byte	1,2,2,35,1,17
	.byte	'EN14',0,1
	.word	492
	.byte	1,1,2,35,1,17
	.byte	'EN15',0,1
	.word	492
	.byte	1,0,2,35,1,17
	.byte	'EN16',0,1
	.word	492
	.byte	1,7,2,35,2,17
	.byte	'EN17',0,1
	.word	492
	.byte	1,6,2,35,2,17
	.byte	'EN18',0,1
	.word	492
	.byte	1,5,2,35,2,17
	.byte	'EN19',0,1
	.word	492
	.byte	1,4,2,35,2,17
	.byte	'EN20',0,1
	.word	492
	.byte	1,3,2,35,2,17
	.byte	'EN21',0,1
	.word	492
	.byte	1,2,2,35,2,17
	.byte	'EN22',0,1
	.word	492
	.byte	1,1,2,35,2,17
	.byte	'EN23',0,1
	.word	492
	.byte	1,0,2,35,2,17
	.byte	'EN24',0,1
	.word	492
	.byte	1,7,2,35,3,17
	.byte	'EN25',0,1
	.word	492
	.byte	1,6,2,35,3,17
	.byte	'EN26',0,1
	.word	492
	.byte	1,5,2,35,3,17
	.byte	'EN27',0,1
	.word	492
	.byte	1,4,2,35,3,17
	.byte	'EN28',0,1
	.word	492
	.byte	1,3,2,35,3,17
	.byte	'EN29',0,1
	.word	492
	.byte	1,2,2,35,3,17
	.byte	'EN30',0,1
	.word	492
	.byte	1,1,2,35,3,17
	.byte	'EN31',0,1
	.word	492
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_STM_ACCEN0_Bits',0,6,104,3
	.word	27952
	.byte	16
	.byte	'_Ifx_STM_ACCEN1_Bits',0,6,107,16,4,17
	.byte	'reserved_0',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_ACCEN1_Bits',0,6,110,3
	.word	28509
	.byte	16
	.byte	'_Ifx_STM_CAP_Bits',0,6,113,16,4,17
	.byte	'STMCAP_63_32',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_CAP_Bits',0,6,116,3
	.word	28586
	.byte	16
	.byte	'_Ifx_STM_CAPSV_Bits',0,6,119,16,4,17
	.byte	'STMCAP_63_32',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_CAPSV_Bits',0,6,122,3
	.word	28659
	.byte	16
	.byte	'_Ifx_STM_CLC_Bits',0,6,125,16,4,17
	.byte	'DISR',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'DISS',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'EDIS',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,4
	.word	176
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_STM_CLC_Bits',0,6,132,1,3
	.word	28736
	.byte	16
	.byte	'_Ifx_STM_CMCON_Bits',0,6,135,1,16,4,17
	.byte	'MSIZE0',0,1
	.word	492
	.byte	5,3,2,35,0,17
	.byte	'reserved_5',0,1
	.word	492
	.byte	3,0,2,35,0,17
	.byte	'MSTART0',0,1
	.word	492
	.byte	5,3,2,35,1,17
	.byte	'reserved_13',0,1
	.word	492
	.byte	3,0,2,35,1,17
	.byte	'MSIZE1',0,1
	.word	492
	.byte	5,3,2,35,2,17
	.byte	'reserved_21',0,1
	.word	492
	.byte	3,0,2,35,2,17
	.byte	'MSTART1',0,1
	.word	492
	.byte	5,3,2,35,3,17
	.byte	'reserved_29',0,1
	.word	492
	.byte	3,0,2,35,3,0,15
	.byte	'Ifx_STM_CMCON_Bits',0,6,145,1,3
	.word	28878
	.byte	16
	.byte	'_Ifx_STM_CMP_Bits',0,6,148,1,16,4,17
	.byte	'CMPVAL',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_CMP_Bits',0,6,151,1,3
	.word	29098
	.byte	16
	.byte	'_Ifx_STM_ICR_Bits',0,6,154,1,16,4,17
	.byte	'CMP0EN',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'CMP0IR',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'CMP0OS',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'reserved_3',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'CMP1EN',0,1
	.word	492
	.byte	1,3,2,35,0,17
	.byte	'CMP1IR',0,1
	.word	492
	.byte	1,2,2,35,0,17
	.byte	'CMP1OS',0,1
	.word	492
	.byte	1,1,2,35,0,17
	.byte	'reserved_7',0,4
	.word	176
	.byte	25,0,2,35,0,0,15
	.byte	'Ifx_STM_ICR_Bits',0,6,164,1,3
	.word	29167
	.byte	16
	.byte	'_Ifx_STM_ID_Bits',0,6,167,1,16,4,17
	.byte	'MODREV',0,1
	.word	492
	.byte	8,0,2,35,0,17
	.byte	'MODTYPE',0,1
	.word	492
	.byte	8,0,2,35,1,17
	.byte	'MODNUM',0,2
	.word	554
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_STM_ID_Bits',0,6,172,1,3
	.word	29370
	.byte	16
	.byte	'_Ifx_STM_ISCR_Bits',0,6,175,1,16,4,17
	.byte	'CMP0IRR',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'CMP0IRS',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'CMP1IRR',0,1
	.word	492
	.byte	1,5,2,35,0,17
	.byte	'CMP1IRS',0,1
	.word	492
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,4
	.word	176
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_STM_ISCR_Bits',0,6,182,1,3
	.word	29474
	.byte	16
	.byte	'_Ifx_STM_KRST0_Bits',0,6,185,1,16,4,17
	.byte	'RST',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'RSTSTAT',0,1
	.word	492
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,4
	.word	176
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_STM_KRST0_Bits',0,6,190,1,3
	.word	29625
	.byte	16
	.byte	'_Ifx_STM_KRST1_Bits',0,6,193,1,16,4,17
	.byte	'RST',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,4
	.word	176
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_STM_KRST1_Bits',0,6,197,1,3
	.word	29736
	.byte	16
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,6,200,1,16,4,17
	.byte	'CLR',0,1
	.word	492
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,4
	.word	176
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_STM_KRSTCLR_Bits',0,6,204,1,3
	.word	29828
	.byte	16
	.byte	'_Ifx_STM_OCS_Bits',0,6,207,1,16,4,17
	.byte	'reserved_0',0,1
	.word	492
	.byte	3,5,2,35,0,17
	.byte	'reserved_3',0,4
	.word	176
	.byte	21,8,2,35,0,17
	.byte	'SUS',0,1
	.word	492
	.byte	4,4,2,35,3,17
	.byte	'SUS_P',0,1
	.word	492
	.byte	1,3,2,35,3,17
	.byte	'SUSSTA',0,1
	.word	492
	.byte	1,2,2,35,3,17
	.byte	'reserved_30',0,1
	.word	492
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_STM_OCS_Bits',0,6,215,1,3
	.word	29924
	.byte	16
	.byte	'_Ifx_STM_TIM0_Bits',0,6,218,1,16,4,17
	.byte	'STM_31_0',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM0_Bits',0,6,221,1,3
	.word	30092
	.byte	16
	.byte	'_Ifx_STM_TIM0SV_Bits',0,6,224,1,16,4,17
	.byte	'STM_31_0',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM0SV_Bits',0,6,227,1,3
	.word	30165
	.byte	16
	.byte	'_Ifx_STM_TIM1_Bits',0,6,230,1,16,4,17
	.byte	'STM_35_4',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM1_Bits',0,6,233,1,3
	.word	30242
	.byte	16
	.byte	'_Ifx_STM_TIM2_Bits',0,6,236,1,16,4,17
	.byte	'STM_39_8',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM2_Bits',0,6,239,1,3
	.word	30315
	.byte	16
	.byte	'_Ifx_STM_TIM3_Bits',0,6,242,1,16,4,17
	.byte	'STM_43_12',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM3_Bits',0,6,245,1,3
	.word	30388
	.byte	16
	.byte	'_Ifx_STM_TIM4_Bits',0,6,248,1,16,4,17
	.byte	'STM_47_16',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM4_Bits',0,6,251,1,3
	.word	30462
	.byte	16
	.byte	'_Ifx_STM_TIM5_Bits',0,6,254,1,16,4,17
	.byte	'STM_51_20',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM5_Bits',0,6,129,2,3
	.word	30536
	.byte	16
	.byte	'_Ifx_STM_TIM6_Bits',0,6,132,2,16,4,17
	.byte	'STM_63_32',0,4
	.word	176
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM6_Bits',0,6,135,2,3
	.word	30610
	.byte	18,6,143,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	27952
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_ACCEN0',0,6,148,2,3
	.word	30684
	.byte	18,6,151,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	28509
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_ACCEN1',0,6,156,2,3
	.word	30748
	.byte	18,6,159,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	28586
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_CAP',0,6,164,2,3
	.word	30812
	.byte	18,6,167,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	28659
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_CAPSV',0,6,172,2,3
	.word	30873
	.byte	18,6,175,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	28736
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_CLC',0,6,180,2,3
	.word	30936
	.byte	18,6,183,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	28878
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_CMCON',0,6,188,2,3
	.word	30997
	.byte	18,6,191,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	29098
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_CMP',0,6,196,2,3
	.word	31060
	.byte	18,6,199,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	29167
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_ICR',0,6,204,2,3
	.word	31121
	.byte	18,6,207,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	29370
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_ID',0,6,212,2,3
	.word	31182
	.byte	18,6,215,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	29474
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_ISCR',0,6,220,2,3
	.word	31242
	.byte	18,6,223,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	29625
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_KRST0',0,6,228,2,3
	.word	31304
	.byte	18,6,231,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	29736
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_KRST1',0,6,236,2,3
	.word	31367
	.byte	18,6,239,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	29828
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_KRSTCLR',0,6,244,2,3
	.word	31430
	.byte	18,6,247,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	29924
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_OCS',0,6,252,2,3
	.word	31495
	.byte	18,6,255,2,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	30092
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM0',0,6,132,3,3
	.word	31556
	.byte	18,6,135,3,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	30165
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM0SV',0,6,140,3,3
	.word	31618
	.byte	18,6,143,3,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	30242
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM1',0,6,148,3,3
	.word	31682
	.byte	18,6,151,3,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	30315
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM2',0,6,156,3,3
	.word	31744
	.byte	18,6,159,3,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	30388
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM3',0,6,164,3,3
	.word	31806
	.byte	18,6,167,3,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	30462
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM4',0,6,172,3,3
	.word	31868
	.byte	18,6,175,3,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	30536
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM5',0,6,180,3,3
	.word	31930
	.byte	18,6,183,3,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	30610
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM6',0,6,188,3,3
	.word	31992
	.byte	16
	.byte	'_Ifx_CPU_A_Bits',0,7,70,16,4,17
	.byte	'ADDR',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_A_Bits',0,7,73,3
	.word	32054
	.byte	16
	.byte	'_Ifx_CPU_BIV_Bits',0,7,76,16,4,17
	.byte	'VSS',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'BIV',0,4
	.word	5286
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_CPU_BIV_Bits',0,7,80,3
	.word	32115
	.byte	16
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,7,83,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	5,27,2,35,0,17
	.byte	'OMASK',0,4
	.word	5286
	.byte	12,15,2,35,0,17
	.byte	'ONE',0,4
	.word	5286
	.byte	11,4,2,35,0,17
	.byte	'reserved_28',0,4
	.word	5286
	.byte	4,0,2,35,0,0,15
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,7,89,3
	.word	32194
	.byte	16
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,7,92,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	5,27,2,35,0,17
	.byte	'TBASE',0,4
	.word	5286
	.byte	23,4,2,35,0,17
	.byte	'reserved_28',0,4
	.word	5286
	.byte	4,0,2,35,0,0,15
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,7,97,3
	.word	32332
	.byte	16
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,7,100,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	5,27,2,35,0,17
	.byte	'OBASE',0,4
	.word	5286
	.byte	17,10,2,35,0,17
	.byte	'reserved_22',0,4
	.word	5286
	.byte	2,8,2,35,0,17
	.byte	'OMEM',0,4
	.word	5286
	.byte	4,4,2,35,0,17
	.byte	'reserved_28',0,4
	.word	5286
	.byte	3,1,2,35,0,17
	.byte	'OVEN',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,7,108,3
	.word	32453
	.byte	16
	.byte	'_Ifx_CPU_BTV_Bits',0,7,111,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'BTV',0,4
	.word	5286
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_CPU_BTV_Bits',0,7,115,3
	.word	32629
	.byte	16
	.byte	'_Ifx_CPU_CCNT_Bits',0,7,118,16,4,17
	.byte	'COUNTVALUE',0,4
	.word	5286
	.byte	31,1,2,35,0,17
	.byte	'SOVF',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_CCNT_Bits',0,7,122,3
	.word	32715
	.byte	16
	.byte	'_Ifx_CPU_CCTRL_Bits',0,7,125,16,4,17
	.byte	'CM',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'CE',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'M1',0,4
	.word	5286
	.byte	3,27,2,35,0,17
	.byte	'M2',0,4
	.word	5286
	.byte	3,24,2,35,0,17
	.byte	'M3',0,4
	.word	5286
	.byte	3,21,2,35,0,17
	.byte	'reserved_11',0,4
	.word	5286
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_CPU_CCTRL_Bits',0,7,133,1,3
	.word	32804
	.byte	16
	.byte	'_Ifx_CPU_COMPAT_Bits',0,7,136,1,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	3,29,2,35,0,17
	.byte	'RM',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'SP',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'reserved_5',0,4
	.word	5286
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_CPU_COMPAT_Bits',0,7,142,1,3
	.word	32951
	.byte	16
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,7,145,1,16,4,17
	.byte	'CORE_ID',0,4
	.word	5286
	.byte	3,29,2,35,0,17
	.byte	'reserved_3',0,4
	.word	5286
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_CPU_CORE_ID_Bits',0,7,149,1,3
	.word	33080
	.byte	16
	.byte	'_Ifx_CPU_CPR_L_Bits',0,7,152,1,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	5,27,2,35,0,17
	.byte	'LOWBND',0,4
	.word	5286
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_CPU_CPR_L_Bits',0,7,156,1,3
	.word	33180
	.byte	16
	.byte	'_Ifx_CPU_CPR_U_Bits',0,7,159,1,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	5,27,2,35,0,17
	.byte	'UPPBND',0,4
	.word	5286
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_CPU_CPR_U_Bits',0,7,163,1,3
	.word	33275
	.byte	16
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,7,166,1,16,4,17
	.byte	'MOD_REV',0,4
	.word	5286
	.byte	8,24,2,35,0,17
	.byte	'MOD_32B',0,4
	.word	5286
	.byte	8,16,2,35,0,17
	.byte	'MOD',0,4
	.word	5286
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_CPU_CPU_ID_Bits',0,7,171,1,3
	.word	33370
	.byte	16
	.byte	'_Ifx_CPU_CPXE_Bits',0,7,174,1,16,4,17
	.byte	'XE_N',0,4
	.word	5286
	.byte	10,22,2,35,0,17
	.byte	'reserved_10',0,4
	.word	5286
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_CPU_CPXE_Bits',0,7,178,1,3
	.word	33480
	.byte	16
	.byte	'_Ifx_CPU_CREVT_Bits',0,7,181,1,16,4,17
	.byte	'EVTA',0,4
	.word	5286
	.byte	3,29,2,35,0,17
	.byte	'BBM',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'BOD',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'SUSP',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'CNT',0,4
	.word	5286
	.byte	2,24,2,35,0,17
	.byte	'reserved_8',0,4
	.word	5286
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_CPU_CREVT_Bits',0,7,189,1,3
	.word	33572
	.byte	16
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,7,192,1,16,4,17
	.byte	'CID',0,4
	.word	5286
	.byte	3,29,2,35,0,17
	.byte	'reserved_3',0,4
	.word	5286
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_CPU_CUS_ID_Bits',0,7,196,1,3
	.word	33726
	.byte	16
	.byte	'_Ifx_CPU_D_Bits',0,7,199,1,16,4,17
	.byte	'DATA',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_D_Bits',0,7,202,1,3
	.word	33820
	.byte	16
	.byte	'_Ifx_CPU_DATR_Bits',0,7,205,1,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	3,29,2,35,0,17
	.byte	'SBE',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'reserved_4',0,4
	.word	5286
	.byte	5,23,2,35,0,17
	.byte	'CWE',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'CFE',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'reserved_11',0,4
	.word	5286
	.byte	3,18,2,35,0,17
	.byte	'SOE',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'reserved_15',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'reserved_16',0,4
	.word	5286
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_CPU_DATR_Bits',0,7,216,1,3
	.word	33883
	.byte	16
	.byte	'_Ifx_CPU_DBGSR_Bits',0,7,219,1,16,4,17
	.byte	'DE',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'HALT',0,4
	.word	5286
	.byte	2,29,2,35,0,17
	.byte	'SIH',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'SUSP',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'reserved_5',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'PREVSUSP',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'PEVT',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EVTSRC',0,4
	.word	5286
	.byte	5,19,2,35,0,17
	.byte	'reserved_13',0,4
	.word	5286
	.byte	19,0,2,35,0,0,15
	.byte	'Ifx_CPU_DBGSR_Bits',0,7,230,1,3
	.word	34109
	.byte	16
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,7,233,1,16,4,17
	.byte	'DTA',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'reserved_1',0,4
	.word	5286
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_CPU_DBGTCR_Bits',0,7,237,1,3
	.word	34324
	.byte	16
	.byte	'_Ifx_CPU_DCON0_Bits',0,7,240,1,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'DCBYP',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'reserved_2',0,4
	.word	5286
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_CPU_DCON0_Bits',0,7,245,1,3
	.word	34418
	.byte	16
	.byte	'_Ifx_CPU_DCON2_Bits',0,7,248,1,16,4,17
	.byte	'DCACHE_SZE',0,4
	.word	5286
	.byte	16,16,2,35,0,17
	.byte	'DSCRATCH_SZE',0,4
	.word	5286
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_CPU_DCON2_Bits',0,7,252,1,3
	.word	34534
	.byte	16
	.byte	'_Ifx_CPU_DCX_Bits',0,7,255,1,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	6,26,2,35,0,17
	.byte	'DCXVALUE',0,4
	.word	5286
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_CPU_DCX_Bits',0,7,131,2,3
	.word	34635
	.byte	16
	.byte	'_Ifx_CPU_DEADD_Bits',0,7,134,2,16,4,17
	.byte	'ERROR_ADDRESS',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_DEADD_Bits',0,7,137,2,3
	.word	34728
	.byte	16
	.byte	'_Ifx_CPU_DIEAR_Bits',0,7,140,2,16,4,17
	.byte	'TA',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_DIEAR_Bits',0,7,143,2,3
	.word	34808
	.byte	16
	.byte	'_Ifx_CPU_DIETR_Bits',0,7,146,2,16,4,17
	.byte	'IED',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'IE_T',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'IE_C',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'IE_S',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'IE_BI',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'E_INFO',0,4
	.word	5286
	.byte	6,21,2,35,0,17
	.byte	'IE_UNC',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'IE_SP',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'IE_BS',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'IE_DLMU',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'IE_LPB',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'IE_MTMV',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'reserved_17',0,4
	.word	5286
	.byte	15,0,2,35,0,0,15
	.byte	'Ifx_CPU_DIETR_Bits',0,7,161,2,3
	.word	34877
	.byte	16
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,7,164,2,16,4,17
	.byte	'EN0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EN1',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EN2',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'EN3',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'EN4',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'EN5',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'EN6',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'EN7',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EN8',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'EN9',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'EN10',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'EN11',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'EN12',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'EN13',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'EN14',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'EN15',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'EN16',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'EN17',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'EN18',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'EN19',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'EN20',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'EN21',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'EN22',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'EN23',0,4
	.word	5286
	.byte	1,8,2,35,0,17
	.byte	'EN24',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'EN25',0,4
	.word	5286
	.byte	1,6,2,35,0,17
	.byte	'EN26',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'EN27',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'EN28',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'EN29',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'EN30',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'EN31',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,7,198,2,3
	.word	35161
	.byte	16
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,7,201,2,16,4,17
	.byte	'EN0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EN1',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EN2',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'EN3',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'EN4',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'EN5',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'EN6',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'EN7',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EN8',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'EN9',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'EN10',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'EN11',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'EN12',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'EN13',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'EN14',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'EN15',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'EN16',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'EN17',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'EN18',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'EN19',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'EN20',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'EN21',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'EN22',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'EN23',0,4
	.word	5286
	.byte	1,8,2,35,0,17
	.byte	'EN24',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'EN25',0,4
	.word	5286
	.byte	1,6,2,35,0,17
	.byte	'EN26',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'EN27',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'EN28',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'EN29',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'EN30',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'EN31',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,7,235,2,3
	.word	35752
	.byte	16
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,7,238,2,16,4,17
	.byte	'EN32',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EN33',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EN34',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'EN35',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'EN36',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'EN37',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'EN38',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'EN39',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EN40',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'EN41',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'EN42',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'EN43',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'EN44',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'EN45',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'EN46',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'EN47',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'EN48',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'EN49',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'EN50',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'EN51',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'EN52',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'EN53',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'EN54',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'EN55',0,4
	.word	5286
	.byte	1,8,2,35,0,17
	.byte	'EN56',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'EN57',0,4
	.word	5286
	.byte	1,6,2,35,0,17
	.byte	'EN58',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'EN59',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'EN60',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'EN61',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'EN62',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'EN63',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,7,144,3,3
	.word	36343
	.byte	16
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,7,147,3,16,4,17
	.byte	'EN32',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EN33',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EN34',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'EN35',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'EN36',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'EN37',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'EN38',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'EN39',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EN40',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'EN41',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'EN42',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'EN43',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'EN44',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'EN45',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'EN46',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'EN47',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'EN48',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'EN49',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'EN50',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'EN51',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'EN52',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'EN53',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'EN54',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'EN55',0,4
	.word	5286
	.byte	1,8,2,35,0,17
	.byte	'EN56',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'EN57',0,4
	.word	5286
	.byte	1,6,2,35,0,17
	.byte	'EN58',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'EN59',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'EN60',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'EN61',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'EN62',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'EN63',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,7,181,3,3
	.word	36944
	.byte	16
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,7,184,3,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	5,27,2,35,0,17
	.byte	'ADDR',0,4
	.word	5286
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,7,188,3,3
	.word	37545
	.byte	16
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,7,191,3,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	5,27,2,35,0,17
	.byte	'ADDR',0,4
	.word	5286
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,7,195,3,3
	.word	37660
	.byte	16
	.byte	'_Ifx_CPU_DMS_Bits',0,7,198,3,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'DMSVALUE',0,4
	.word	5286
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_CPU_DMS_Bits',0,7,202,3,3
	.word	37775
	.byte	16
	.byte	'_Ifx_CPU_DPRE_Bits',0,7,205,3,16,4,17
	.byte	'RE_N',0,4
	.word	5286
	.byte	18,14,2,35,0,17
	.byte	'reserved_18',0,4
	.word	5286
	.byte	14,0,2,35,0,0,15
	.byte	'Ifx_CPU_DPRE_Bits',0,7,209,3,3
	.word	37868
	.byte	16
	.byte	'_Ifx_CPU_DPR_L_Bits',0,7,212,3,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	3,29,2,35,0,17
	.byte	'LOWBND',0,4
	.word	5286
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_CPU_DPR_L_Bits',0,7,216,3,3
	.word	37960
	.byte	16
	.byte	'_Ifx_CPU_DPR_U_Bits',0,7,219,3,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	3,29,2,35,0,17
	.byte	'UPPBND',0,4
	.word	5286
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_CPU_DPR_U_Bits',0,7,223,3,3
	.word	38055
	.byte	16
	.byte	'_Ifx_CPU_DPWE_Bits',0,7,226,3,16,4,17
	.byte	'WE_N',0,4
	.word	5286
	.byte	18,14,2,35,0,17
	.byte	'reserved_18',0,4
	.word	5286
	.byte	14,0,2,35,0,0,15
	.byte	'Ifx_CPU_DPWE_Bits',0,7,230,3,3
	.word	38150
	.byte	16
	.byte	'_Ifx_CPU_DSTR_Bits',0,7,233,3,16,4,17
	.byte	'SRE',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'GAE',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'LBE',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'DRE',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'reserved_4',0,4
	.word	5286
	.byte	2,26,2,35,0,17
	.byte	'CRE',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'reserved_7',0,4
	.word	5286
	.byte	7,18,2,35,0,17
	.byte	'DTME',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'LOE',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'SDE',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'SCE',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'CAC',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'MPE',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'CLE',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'reserved_21',0,4
	.word	5286
	.byte	3,8,2,35,0,17
	.byte	'ALN',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'reserved_25',0,4
	.word	5286
	.byte	7,0,2,35,0,0,15
	.byte	'Ifx_CPU_DSTR_Bits',0,7,252,3,3
	.word	38242
	.byte	16
	.byte	'_Ifx_CPU_EXEVT_Bits',0,7,255,3,16,4,17
	.byte	'EVTA',0,4
	.word	5286
	.byte	3,29,2,35,0,17
	.byte	'BBM',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'BOD',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'SUSP',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'CNT',0,4
	.word	5286
	.byte	2,24,2,35,0,17
	.byte	'reserved_8',0,4
	.word	5286
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_CPU_EXEVT_Bits',0,7,135,4,3
	.word	38581
	.byte	16
	.byte	'_Ifx_CPU_FCX_Bits',0,7,138,4,16,4,17
	.byte	'FCXO',0,4
	.word	5286
	.byte	16,16,2,35,0,17
	.byte	'FCXS',0,4
	.word	5286
	.byte	4,12,2,35,0,17
	.byte	'reserved_20',0,4
	.word	5286
	.byte	12,0,2,35,0,0,15
	.byte	'Ifx_CPU_FCX_Bits',0,7,143,4,3
	.word	38735
	.byte	16
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,7,146,4,16,4,17
	.byte	'TAG1',0,4
	.word	5286
	.byte	6,26,2,35,0,17
	.byte	'reserved_6',0,4
	.word	5286
	.byte	2,24,2,35,0,17
	.byte	'TAG2',0,4
	.word	5286
	.byte	6,18,2,35,0,17
	.byte	'reserved_14',0,4
	.word	5286
	.byte	2,16,2,35,0,17
	.byte	'TAG3',0,4
	.word	5286
	.byte	6,10,2,35,0,17
	.byte	'reserved_22',0,4
	.word	5286
	.byte	2,8,2,35,0,17
	.byte	'TAG4',0,4
	.word	5286
	.byte	6,2,2,35,0,17
	.byte	'reserved_30',0,4
	.word	5286
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,7,156,4,3
	.word	38841
	.byte	16
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,7,159,4,16,4,17
	.byte	'STALL',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'reserved_1',0,4
	.word	5286
	.byte	15,16,2,35,0,17
	.byte	'MASKUECC',0,4
	.word	5286
	.byte	2,14,2,35,0,17
	.byte	'reserved_18',0,4
	.word	5286
	.byte	6,8,2,35,0,17
	.byte	'reserved_24',0,4
	.word	5286
	.byte	2,6,2,35,0,17
	.byte	'reserved_26',0,4
	.word	5286
	.byte	6,0,2,35,0,0,15
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,7,167,4,3
	.word	39059
	.byte	16
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,7,170,4,16,4,17
	.byte	'RECDIS',0,4
	.word	5286
	.byte	2,30,2,35,0,17
	.byte	'ECCCORDIS',0,4
	.word	5286
	.byte	2,28,2,35,0,17
	.byte	'reserved_4',0,4
	.word	5286
	.byte	4,24,2,35,0,17
	.byte	'HMARGIN',0,4
	.word	5286
	.byte	2,22,2,35,0,17
	.byte	'MSEL',0,4
	.word	5286
	.byte	2,20,2,35,0,17
	.byte	'reserved_12',0,4
	.word	5286
	.byte	4,16,2,35,0,17
	.byte	'ECCSCLR',0,4
	.word	5286
	.byte	2,14,2,35,0,17
	.byte	'reserved_18',0,4
	.word	5286
	.byte	6,8,2,35,0,17
	.byte	'SBABCLR',0,4
	.word	5286
	.byte	2,6,2,35,0,17
	.byte	'DBABCLR',0,4
	.word	5286
	.byte	2,4,2,35,0,17
	.byte	'MBABCLR',0,4
	.word	5286
	.byte	2,2,2,35,0,17
	.byte	'ZBABCLR',0,4
	.word	5286
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,7,184,4,3
	.word	39250
	.byte	16
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,7,187,4,16,4,17
	.byte	'ECCERRINJ',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EDCERRINJ',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'SBABERRINJ',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'DBABERRINJ',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'MBABERRINJ',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'ZBABERRINJ',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'SBERERRINJ',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'DBERERRINJ',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'NVMCERRINJ',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'FLCONERRINJ',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'reserved_10',0,4
	.word	5286
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,7,200,4,3
	.word	39550
	.byte	16
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,7,203,4,16,4,17
	.byte	'DDIS',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'reserved_1',0,4
	.word	5286
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,7,207,4,3
	.word	39855
	.byte	16
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,7,210,4,16,4,17
	.byte	'TST',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'TCL',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'reserved_2',0,4
	.word	5286
	.byte	6,24,2,35,0,17
	.byte	'RM',0,4
	.word	5286
	.byte	2,22,2,35,0,17
	.byte	'reserved_10',0,4
	.word	5286
	.byte	8,14,2,35,0,17
	.byte	'FXE',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'FUE',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'FZE',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'FVE',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'FIE',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'reserved_23',0,4
	.word	5286
	.byte	3,6,2,35,0,17
	.byte	'FX',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'FU',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'FZ',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'FV',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'FI',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'reserved_31',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,7,229,4,3
	.word	39956
	.byte	16
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,7,232,4,16,4,17
	.byte	'OPC',0,4
	.word	5286
	.byte	8,24,2,35,0,17
	.byte	'FMT',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'reserved_9',0,4
	.word	5286
	.byte	7,16,2,35,0,17
	.byte	'DREG',0,4
	.word	5286
	.byte	4,12,2,35,0,17
	.byte	'reserved_20',0,4
	.word	5286
	.byte	12,0,2,35,0,0,15
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,7,239,4,3
	.word	40305
	.byte	16
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,7,242,4,16,4,17
	.byte	'PC',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,7,245,4,3
	.word	40465
	.byte	16
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,7,248,4,16,4,17
	.byte	'SRC1',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,7,251,4,3
	.word	40546
	.byte	16
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,7,254,4,16,4,17
	.byte	'SRC2',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,7,129,5,3
	.word	40633
	.byte	16
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,7,132,5,16,4,17
	.byte	'SRC3',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,7,135,5,3
	.word	40720
	.byte	16
	.byte	'_Ifx_CPU_ICNT_Bits',0,7,138,5,16,4,17
	.byte	'COUNTVALUE',0,4
	.word	5286
	.byte	31,1,2,35,0,17
	.byte	'SOVF',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_ICNT_Bits',0,7,142,5,3
	.word	40807
	.byte	16
	.byte	'_Ifx_CPU_ICR_Bits',0,7,145,5,16,4,17
	.byte	'CCPN',0,4
	.word	5286
	.byte	8,24,2,35,0,17
	.byte	'reserved_8',0,4
	.word	5286
	.byte	7,17,2,35,0,17
	.byte	'IE',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'PIPN',0,4
	.word	5286
	.byte	8,8,2,35,0,17
	.byte	'reserved_24',0,4
	.word	5286
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_CPU_ICR_Bits',0,7,152,5,3
	.word	40898
	.byte	16
	.byte	'_Ifx_CPU_ISP_Bits',0,7,155,5,16,4,17
	.byte	'ISP',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_ISP_Bits',0,7,158,5,3
	.word	41040
	.byte	16
	.byte	'_Ifx_CPU_KRST0_Bits',0,7,161,5,16,4,17
	.byte	'RST',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'RSTSTAT',0,4
	.word	5286
	.byte	2,29,2,35,0,17
	.byte	'reserved_3',0,4
	.word	5286
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_CPU_KRST0_Bits',0,7,166,5,3
	.word	41106
	.byte	16
	.byte	'_Ifx_CPU_KRST1_Bits',0,7,169,5,16,4,17
	.byte	'RST',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'reserved_1',0,4
	.word	5286
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_CPU_KRST1_Bits',0,7,173,5,3
	.word	41217
	.byte	16
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,7,176,5,16,4,17
	.byte	'CLR',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'reserved_1',0,4
	.word	5286
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,7,180,5,3
	.word	41309
	.byte	16
	.byte	'_Ifx_CPU_LCX_Bits',0,7,183,5,16,4,17
	.byte	'LCXO',0,4
	.word	5286
	.byte	16,16,2,35,0,17
	.byte	'LCXS',0,4
	.word	5286
	.byte	4,12,2,35,0,17
	.byte	'reserved_20',0,4
	.word	5286
	.byte	12,0,2,35,0,0,15
	.byte	'Ifx_CPU_LCX_Bits',0,7,188,5,3
	.word	41405
	.byte	16
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,7,191,5,16,4,17
	.byte	'EN0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EN1',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EN2',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'EN3',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'EN4',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'EN5',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'EN6',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'EN7',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EN8',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'EN9',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'EN10',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'EN11',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'EN12',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'EN13',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'EN14',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'EN15',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'EN16',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'EN17',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'EN18',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'EN19',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'EN20',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'EN21',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'EN22',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'EN23',0,4
	.word	5286
	.byte	1,8,2,35,0,17
	.byte	'EN24',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'EN25',0,4
	.word	5286
	.byte	1,6,2,35,0,17
	.byte	'EN26',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'EN27',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'EN28',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'EN29',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'EN30',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'EN31',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,7,225,5,3
	.word	41511
	.byte	16
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,7,228,5,16,4,17
	.byte	'EN32',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EN33',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EN34',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'EN35',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'EN36',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'EN37',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'EN38',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'EN39',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EN40',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'EN41',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'EN42',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'EN43',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'EN44',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'EN45',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'EN46',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'EN47',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'EN48',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'EN49',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'EN50',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'EN51',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'EN52',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'EN53',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'EN54',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'EN55',0,4
	.word	5286
	.byte	1,8,2,35,0,17
	.byte	'EN56',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'EN57',0,4
	.word	5286
	.byte	1,6,2,35,0,17
	.byte	'EN58',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'EN59',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'EN60',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'EN61',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'EN62',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'EN63',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,7,134,6,3
	.word	42094
	.byte	16
	.byte	'_Ifx_CPU_M1CNT_Bits',0,7,137,6,16,4,17
	.byte	'COUNTVALUE',0,4
	.word	5286
	.byte	31,1,2,35,0,17
	.byte	'SOVF',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_M1CNT_Bits',0,7,141,6,3
	.word	42687
	.byte	16
	.byte	'_Ifx_CPU_M2CNT_Bits',0,7,144,6,16,4,17
	.byte	'COUNTVALUE',0,4
	.word	5286
	.byte	31,1,2,35,0,17
	.byte	'SOVF',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_M2CNT_Bits',0,7,148,6,3
	.word	42780
	.byte	16
	.byte	'_Ifx_CPU_M3CNT_Bits',0,7,151,6,16,4,17
	.byte	'COUNTVALUE',0,4
	.word	5286
	.byte	31,1,2,35,0,17
	.byte	'SOVF',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_M3CNT_Bits',0,7,155,6,3
	.word	42873
	.byte	16
	.byte	'_Ifx_CPU_OSEL_Bits',0,7,158,6,16,4,17
	.byte	'SHOVEN_X',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_OSEL_Bits',0,7,161,6,3
	.word	42966
	.byte	16
	.byte	'_Ifx_CPU_PC_Bits',0,7,164,6,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'PC',0,4
	.word	5286
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_CPU_PC_Bits',0,7,168,6,3
	.word	43039
	.byte	16
	.byte	'_Ifx_CPU_PCON0_Bits',0,7,171,6,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'PCBYP',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'reserved_2',0,4
	.word	5286
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_CPU_PCON0_Bits',0,7,176,6,3
	.word	43124
	.byte	16
	.byte	'_Ifx_CPU_PCON1_Bits',0,7,179,6,16,4,17
	.byte	'PCINV',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'PBINV',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'reserved_2',0,4
	.word	5286
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_CPU_PCON1_Bits',0,7,184,6,3
	.word	43240
	.byte	16
	.byte	'_Ifx_CPU_PCON2_Bits',0,7,187,6,16,4,17
	.byte	'PCACHE_SZE',0,4
	.word	5286
	.byte	16,16,2,35,0,17
	.byte	'PSCRATCH_SZE',0,4
	.word	5286
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_CPU_PCON2_Bits',0,7,191,6,3
	.word	43351
	.byte	16
	.byte	'_Ifx_CPU_PCXI_Bits',0,7,194,6,16,4,17
	.byte	'PCXO',0,4
	.word	5286
	.byte	16,16,2,35,0,17
	.byte	'PCXS',0,4
	.word	5286
	.byte	4,12,2,35,0,17
	.byte	'UL',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'PIE',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'PCPN',0,4
	.word	5286
	.byte	8,2,2,35,0,17
	.byte	'reserved_30',0,4
	.word	5286
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_CPU_PCXI_Bits',0,7,202,6,3
	.word	43452
	.byte	16
	.byte	'_Ifx_CPU_PIEAR_Bits',0,7,205,6,16,4,17
	.byte	'TA',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_PIEAR_Bits',0,7,208,6,3
	.word	43605
	.byte	16
	.byte	'_Ifx_CPU_PIETR_Bits',0,7,211,6,16,4,17
	.byte	'IED',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'IE_T',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'IE_C',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'IE_S',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'IE_BI',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'E_INFO',0,4
	.word	5286
	.byte	6,21,2,35,0,17
	.byte	'IE_UNC',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'IE_SP',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'IE_BS',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'IE_ADDR',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'IE_LPB',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'IE_MTMV',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'reserved_17',0,4
	.word	5286
	.byte	15,0,2,35,0,0,15
	.byte	'Ifx_CPU_PIETR_Bits',0,7,226,6,3
	.word	43674
	.byte	16
	.byte	'_Ifx_CPU_PMA0_Bits',0,7,229,6,16,4,17
	.byte	'DAC',0,4
	.word	5286
	.byte	16,16,2,35,0,17
	.byte	'reserved_16',0,4
	.word	5286
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_CPU_PMA0_Bits',0,7,233,6,3
	.word	43958
	.byte	16
	.byte	'_Ifx_CPU_PMA1_Bits',0,7,236,6,16,4,17
	.byte	'CAC',0,4
	.word	5286
	.byte	16,16,2,35,0,17
	.byte	'reserved_16',0,4
	.word	5286
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_CPU_PMA1_Bits',0,7,240,6,3
	.word	44049
	.byte	16
	.byte	'_Ifx_CPU_PMA2_Bits',0,7,243,6,16,4,17
	.byte	'PSI',0,4
	.word	5286
	.byte	16,16,2,35,0,17
	.byte	'reserved_16',0,4
	.word	5286
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_CPU_PMA2_Bits',0,7,247,6,3
	.word	44140
	.byte	16
	.byte	'_Ifx_CPU_PSTR_Bits',0,7,250,6,16,4,17
	.byte	'FRE',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'reserved_1',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'FBE',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'reserved_3',0,4
	.word	5286
	.byte	9,20,2,35,0,17
	.byte	'FPE',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'reserved_13',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'FME',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'reserved_15',0,4
	.word	5286
	.byte	17,0,2,35,0,0,15
	.byte	'Ifx_CPU_PSTR_Bits',0,7,132,7,3
	.word	44231
	.byte	16
	.byte	'_Ifx_CPU_PSW_Bits',0,7,135,7,16,4,17
	.byte	'CDC',0,4
	.word	5286
	.byte	7,25,2,35,0,17
	.byte	'CDE',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'GW',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'IS',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'IO',0,4
	.word	5286
	.byte	2,20,2,35,0,17
	.byte	'PRS',0,4
	.word	5286
	.byte	2,18,2,35,0,17
	.byte	'S',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'PRS2',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'reserved_16',0,4
	.word	5286
	.byte	8,8,2,35,0,17
	.byte	'USB',0,4
	.word	5286
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_CPU_PSW_Bits',0,7,147,7,3
	.word	44434
	.byte	16
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,7,150,7,16,4,17
	.byte	'EN0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EN1',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EN2',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'EN3',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'EN4',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'EN5',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'EN6',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'EN7',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EN8',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'EN9',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'EN10',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'EN11',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'EN12',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'EN13',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'EN14',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'EN15',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'EN16',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'EN17',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'EN18',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'EN19',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'EN20',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'EN21',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'EN22',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'EN23',0,4
	.word	5286
	.byte	1,8,2,35,0,17
	.byte	'EN24',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'EN25',0,4
	.word	5286
	.byte	1,6,2,35,0,17
	.byte	'EN26',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'EN27',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'EN28',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'EN29',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'EN30',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'EN31',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,7,184,7,3
	.word	44639
	.byte	16
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,7,187,7,16,4,17
	.byte	'EN32',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EN33',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EN34',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'EN35',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'EN36',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'EN37',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'EN38',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'EN39',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EN40',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'EN41',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'EN42',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'EN43',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'EN44',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'EN45',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'EN46',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'EN47',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'EN48',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'EN49',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'EN50',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'EN51',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'EN52',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'EN53',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'EN54',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'EN55',0,4
	.word	5286
	.byte	1,8,2,35,0,17
	.byte	'EN56',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'EN57',0,4
	.word	5286
	.byte	1,6,2,35,0,17
	.byte	'EN58',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'EN59',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'EN60',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'EN61',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'EN62',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'EN63',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,7,221,7,3
	.word	45206
	.byte	16
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,7,224,7,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	5,27,2,35,0,17
	.byte	'ADDR',0,4
	.word	5286
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_CPU_RGN_LA_Bits',0,7,228,7,3
	.word	45783
	.byte	16
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,7,231,7,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	5,27,2,35,0,17
	.byte	'ADDR',0,4
	.word	5286
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_CPU_RGN_UA_Bits',0,7,235,7,3
	.word	45878
	.byte	16
	.byte	'_Ifx_CPU_SEGEN_Bits',0,7,238,7,16,4,17
	.byte	'ADFLIP',0,4
	.word	5286
	.byte	8,24,2,35,0,17
	.byte	'ADTYPE',0,4
	.word	5286
	.byte	2,22,2,35,0,17
	.byte	'reserved_10',0,4
	.word	5286
	.byte	21,1,2,35,0,17
	.byte	'AE',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_SEGEN_Bits',0,7,244,7,3
	.word	45973
	.byte	16
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,7,247,7,16,4,17
	.byte	'EN0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EN1',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EN2',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'EN3',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'EN4',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'EN5',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'EN6',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'EN7',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EN8',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'EN9',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'EN10',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'EN11',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'EN12',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'EN13',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'EN14',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'EN15',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'EN16',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'EN17',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'EN18',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'EN19',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'EN20',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'EN21',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'EN22',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'EN23',0,4
	.word	5286
	.byte	1,8,2,35,0,17
	.byte	'EN24',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'EN25',0,4
	.word	5286
	.byte	1,6,2,35,0,17
	.byte	'EN26',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'EN27',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'EN28',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'EN29',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'EN30',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'EN31',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,7,153,8,3
	.word	46101
	.byte	16
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,7,156,8,16,4,17
	.byte	'EN32',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EN33',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EN34',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'EN35',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'EN36',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'EN37',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'EN38',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'EN39',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EN40',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'EN41',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'EN42',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'EN43',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'EN44',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'EN45',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'EN46',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'EN47',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'EN48',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'EN49',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'EN50',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'EN51',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'EN52',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'EN53',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'EN54',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'EN55',0,4
	.word	5286
	.byte	1,8,2,35,0,17
	.byte	'EN56',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'EN57',0,4
	.word	5286
	.byte	1,6,2,35,0,17
	.byte	'EN58',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'EN59',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'EN60',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'EN61',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'EN62',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'EN63',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,7,190,8,3
	.word	46684
	.byte	16
	.byte	'_Ifx_CPU_SMACON_Bits',0,7,193,8,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	24,8,2,35,0,17
	.byte	'IODT',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'reserved_25',0,4
	.word	5286
	.byte	7,0,2,35,0,0,15
	.byte	'Ifx_CPU_SMACON_Bits',0,7,198,8,3
	.word	47277
	.byte	16
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,7,201,8,16,4,17
	.byte	'EN0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EN1',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EN2',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'EN3',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'EN4',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'EN5',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'EN6',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'EN7',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EN8',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'EN9',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'EN10',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'EN11',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'EN12',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'EN13',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'EN14',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'EN15',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'EN16',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'EN17',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'EN18',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'EN19',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'EN20',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'EN21',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'EN22',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'EN23',0,4
	.word	5286
	.byte	1,8,2,35,0,17
	.byte	'EN24',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'EN25',0,4
	.word	5286
	.byte	1,6,2,35,0,17
	.byte	'EN26',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'EN27',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'EN28',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'EN29',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'EN30',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'EN31',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,7,235,8,3
	.word	47395
	.byte	16
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,7,238,8,16,4,17
	.byte	'EN32',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'EN33',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'EN34',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'EN35',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'EN36',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'EN37',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'EN38',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'EN39',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'EN40',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'EN41',0,4
	.word	5286
	.byte	1,22,2,35,0,17
	.byte	'EN42',0,4
	.word	5286
	.byte	1,21,2,35,0,17
	.byte	'EN43',0,4
	.word	5286
	.byte	1,20,2,35,0,17
	.byte	'EN44',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'EN45',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'EN46',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'EN47',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'EN48',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'EN49',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'EN50',0,4
	.word	5286
	.byte	1,13,2,35,0,17
	.byte	'EN51',0,4
	.word	5286
	.byte	1,12,2,35,0,17
	.byte	'EN52',0,4
	.word	5286
	.byte	1,11,2,35,0,17
	.byte	'EN53',0,4
	.word	5286
	.byte	1,10,2,35,0,17
	.byte	'EN54',0,4
	.word	5286
	.byte	1,9,2,35,0,17
	.byte	'EN55',0,4
	.word	5286
	.byte	1,8,2,35,0,17
	.byte	'EN56',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'EN57',0,4
	.word	5286
	.byte	1,6,2,35,0,17
	.byte	'EN58',0,4
	.word	5286
	.byte	1,5,2,35,0,17
	.byte	'EN59',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'EN60',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'EN61',0,4
	.word	5286
	.byte	1,2,2,35,0,17
	.byte	'EN62',0,4
	.word	5286
	.byte	1,1,2,35,0,17
	.byte	'EN63',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,7,144,9,3
	.word	47984
	.byte	16
	.byte	'_Ifx_CPU_SWEVT_Bits',0,7,147,9,16,4,17
	.byte	'EVTA',0,4
	.word	5286
	.byte	3,29,2,35,0,17
	.byte	'BBM',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'BOD',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'SUSP',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'CNT',0,4
	.word	5286
	.byte	2,24,2,35,0,17
	.byte	'reserved_8',0,4
	.word	5286
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_CPU_SWEVT_Bits',0,7,155,9,3
	.word	48583
	.byte	16
	.byte	'_Ifx_CPU_SYSCON_Bits',0,7,158,9,16,4,17
	.byte	'FCDSF',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'PROTEN',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'TPROTEN',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'IS',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'TS',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'reserved_5',0,4
	.word	5286
	.byte	3,24,2,35,0,17
	.byte	'ESDIS',0,4
	.word	5286
	.byte	1,23,2,35,0,17
	.byte	'reserved_9',0,4
	.word	5286
	.byte	7,16,2,35,0,17
	.byte	'U1_IED',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'U1_IOS',0,4
	.word	5286
	.byte	1,14,2,35,0,17
	.byte	'reserved_18',0,4
	.word	5286
	.byte	6,8,2,35,0,17
	.byte	'BHALT',0,4
	.word	5286
	.byte	1,7,2,35,0,17
	.byte	'reserved_25',0,4
	.word	5286
	.byte	7,0,2,35,0,0,15
	.byte	'Ifx_CPU_SYSCON_Bits',0,7,173,9,3
	.word	48737
	.byte	16
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,7,176,9,16,4,17
	.byte	'ASI',0,4
	.word	5286
	.byte	5,27,2,35,0,17
	.byte	'reserved_5',0,4
	.word	5286
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,7,180,9,3
	.word	49036
	.byte	16
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,7,183,9,16,4,17
	.byte	'TEXP0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'TEXP1',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'TEXP2',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'reserved_3',0,4
	.word	5286
	.byte	13,16,2,35,0,17
	.byte	'TTRAP',0,4
	.word	5286
	.byte	1,15,2,35,0,17
	.byte	'reserved_17',0,4
	.word	5286
	.byte	15,0,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_CON_Bits',0,7,191,9,3
	.word	49134
	.byte	16
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,7,194,9,16,4,17
	.byte	'EXTIM_CLASS_EN',0,4
	.word	5286
	.byte	8,24,2,35,0,17
	.byte	'reserved_8',0,4
	.word	5286
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,7,198,9,3
	.word	49306
	.byte	16
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,7,201,9,16,4,17
	.byte	'ENTRY_CVAL',0,4
	.word	5286
	.byte	12,20,2,35,0,17
	.byte	'reserved_12',0,4
	.word	5286
	.byte	20,0,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,7,205,9,3
	.word	49435
	.byte	16
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,7,208,9,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	4,28,2,35,0,17
	.byte	'ENTRY_LVAL',0,4
	.word	5286
	.byte	8,20,2,35,0,17
	.byte	'reserved_12',0,4
	.word	5286
	.byte	20,0,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,7,213,9,3
	.word	49565
	.byte	16
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,7,216,9,16,4,17
	.byte	'EXIT_CVAL',0,4
	.word	5286
	.byte	24,8,2,35,0,17
	.byte	'reserved_24',0,4
	.word	5286
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,7,220,9,3
	.word	49717
	.byte	16
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,7,223,9,16,4,17
	.byte	'reserved_0',0,4
	.word	5286
	.byte	4,28,2,35,0,17
	.byte	'EXIT_LVAL',0,4
	.word	5286
	.byte	20,8,2,35,0,17
	.byte	'reserved_24',0,4
	.word	5286
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,7,228,9,3
	.word	49844
	.byte	16
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,7,231,9,16,4,17
	.byte	'EXIT_FCX',0,4
	.word	5286
	.byte	20,12,2,35,0,17
	.byte	'reserved_20',0,4
	.word	5286
	.byte	12,0,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,7,235,9,3
	.word	49993
	.byte	16
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,7,238,9,16,4,17
	.byte	'EXIT_TIN',0,4
	.word	5286
	.byte	8,24,2,35,0,17
	.byte	'EXIT_CLASS',0,4
	.word	5286
	.byte	3,21,2,35,0,17
	.byte	'reserved_11',0,4
	.word	5286
	.byte	4,17,2,35,0,17
	.byte	'EXIT_AT',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'ENTRY_TIN',0,4
	.word	5286
	.byte	8,8,2,35,0,17
	.byte	'ENTRY_CLASS',0,4
	.word	5286
	.byte	3,5,2,35,0,17
	.byte	'reserved_27',0,4
	.word	5286
	.byte	4,1,2,35,0,17
	.byte	'ENTRY_AT',0,4
	.word	5286
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,7,248,9,3
	.word	50107
	.byte	16
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,7,251,9,16,4,17
	.byte	'TIMER',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,7,254,9,3
	.word	50351
	.byte	16
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,7,129,10,16,4,17
	.byte	'T0',0,4
	.word	5286
	.byte	1,31,2,35,0,17
	.byte	'T1',0,4
	.word	5286
	.byte	1,30,2,35,0,17
	.byte	'T2',0,4
	.word	5286
	.byte	1,29,2,35,0,17
	.byte	'T3',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'T4',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'T5',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'T6',0,4
	.word	5286
	.byte	1,25,2,35,0,17
	.byte	'T7',0,4
	.word	5286
	.byte	1,24,2,35,0,17
	.byte	'reserved_8',0,4
	.word	5286
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,7,140,10,3
	.word	50431
	.byte	16
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,7,143,10,16,4,17
	.byte	'ADDR',0,4
	.word	5286
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_CPU_TR_ADR_Bits',0,7,146,10,3
	.word	50626
	.byte	16
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,7,149,10,16,4,17
	.byte	'EVTA',0,4
	.word	5286
	.byte	3,29,2,35,0,17
	.byte	'BBM',0,4
	.word	5286
	.byte	1,28,2,35,0,17
	.byte	'BOD',0,4
	.word	5286
	.byte	1,27,2,35,0,17
	.byte	'SUSP',0,4
	.word	5286
	.byte	1,26,2,35,0,17
	.byte	'CNT',0,4
	.word	5286
	.byte	2,24,2,35,0,17
	.byte	'reserved_8',0,4
	.word	5286
	.byte	4,20,2,35,0,17
	.byte	'TYP',0,4
	.word	5286
	.byte	1,19,2,35,0,17
	.byte	'RNG',0,4
	.word	5286
	.byte	1,18,2,35,0,17
	.byte	'reserved_14',0,4
	.word	5286
	.byte	1,17,2,35,0,17
	.byte	'ASI_EN',0,4
	.word	5286
	.byte	1,16,2,35,0,17
	.byte	'ASI',0,4
	.word	5286
	.byte	5,11,2,35,0,17
	.byte	'reserved_21',0,4
	.word	5286
	.byte	6,5,2,35,0,17
	.byte	'AST',0,4
	.word	5286
	.byte	1,4,2,35,0,17
	.byte	'ALD',0,4
	.word	5286
	.byte	1,3,2,35,0,17
	.byte	'reserved_29',0,4
	.word	5286
	.byte	3,0,2,35,0,0,15
	.byte	'Ifx_CPU_TR_EVT_Bits',0,7,166,10,3
	.word	50699
	.byte	18,7,174,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32054
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_A',0,7,179,10,3
	.word	51017
	.byte	18,7,182,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32115
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_BIV',0,7,187,10,3
	.word	51076
	.byte	18,7,190,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32194
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_BLK_OMASK',0,7,195,10,3
	.word	51137
	.byte	18,7,198,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32332
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_BLK_OTAR',0,7,203,10,3
	.word	51204
	.byte	18,7,206,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32453
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_BLK_RABR',0,7,211,10,3
	.word	51270
	.byte	18,7,214,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32629
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_BTV',0,7,219,10,3
	.word	51336
	.byte	18,7,222,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32715
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_CCNT',0,7,227,10,3
	.word	51397
	.byte	18,7,230,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32804
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_CCTRL',0,7,235,10,3
	.word	51459
	.byte	18,7,238,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32951
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_COMPAT',0,7,243,10,3
	.word	51522
	.byte	18,7,246,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33080
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_CORE_ID',0,7,251,10,3
	.word	51586
	.byte	18,7,254,10,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33180
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_CPR_L',0,7,131,11,3
	.word	51651
	.byte	18,7,134,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33275
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_CPR_U',0,7,139,11,3
	.word	51714
	.byte	18,7,142,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33370
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_CPU_ID',0,7,147,11,3
	.word	51777
	.byte	18,7,150,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33480
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_CPXE',0,7,155,11,3
	.word	51841
	.byte	18,7,158,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33572
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_CREVT',0,7,163,11,3
	.word	51903
	.byte	18,7,166,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33726
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_CUS_ID',0,7,171,11,3
	.word	51966
	.byte	18,7,174,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33820
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_D',0,7,179,11,3
	.word	52030
	.byte	18,7,182,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33883
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DATR',0,7,187,11,3
	.word	52089
	.byte	18,7,190,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	34109
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DBGSR',0,7,195,11,3
	.word	52151
	.byte	18,7,198,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	34324
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DBGTCR',0,7,203,11,3
	.word	52214
	.byte	18,7,206,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	34418
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DCON0',0,7,211,11,3
	.word	52278
	.byte	18,7,214,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	34534
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DCON2',0,7,219,11,3
	.word	52341
	.byte	18,7,222,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	34635
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DCX',0,7,227,11,3
	.word	52404
	.byte	18,7,230,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	34728
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DEADD',0,7,235,11,3
	.word	52465
	.byte	18,7,238,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	34808
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DIEAR',0,7,243,11,3
	.word	52528
	.byte	18,7,246,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	34877
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DIETR',0,7,251,11,3
	.word	52591
	.byte	18,7,254,11,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	35161
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,7,131,12,3
	.word	52654
	.byte	18,7,134,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	35752
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,7,139,12,3
	.word	52734
	.byte	18,7,142,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	36343
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,7,147,12,3
	.word	52814
	.byte	18,7,150,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	36944
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,7,155,12,3
	.word	52894
	.byte	18,7,158,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	37545
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,7,163,12,3
	.word	52974
	.byte	18,7,166,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	37660
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,7,171,12,3
	.word	53048
	.byte	18,7,174,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	37775
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DMS',0,7,179,12,3
	.word	53122
	.byte	18,7,182,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	37868
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DPRE',0,7,187,12,3
	.word	53183
	.byte	18,7,190,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	37960
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DPR_L',0,7,195,12,3
	.word	53245
	.byte	18,7,198,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	38055
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DPR_U',0,7,203,12,3
	.word	53308
	.byte	18,7,206,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	38150
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DPWE',0,7,211,12,3
	.word	53371
	.byte	18,7,214,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	38242
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_DSTR',0,7,219,12,3
	.word	53433
	.byte	18,7,222,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	38581
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_EXEVT',0,7,227,12,3
	.word	53495
	.byte	18,7,230,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	38735
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_FCX',0,7,235,12,3
	.word	53558
	.byte	18,7,238,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	38841
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_FLASHCON0',0,7,243,12,3
	.word	53619
	.byte	18,7,246,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	39059
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_FLASHCON1',0,7,251,12,3
	.word	53686
	.byte	18,7,254,12,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	39250
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_FLASHCON2',0,7,131,13,3
	.word	53753
	.byte	18,7,134,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	39550
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_FLASHCON3',0,7,139,13,3
	.word	53820
	.byte	18,7,142,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	39855
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_FLASHCON4',0,7,147,13,3
	.word	53887
	.byte	18,7,150,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	39956
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,7,155,13,3
	.word	53954
	.byte	18,7,158,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	40305
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,7,163,13,3
	.word	54024
	.byte	18,7,166,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	40465
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,7,171,13,3
	.word	54094
	.byte	18,7,174,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	40546
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,7,179,13,3
	.word	54163
	.byte	18,7,182,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	40633
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,7,187,13,3
	.word	54234
	.byte	18,7,190,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	40720
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,7,195,13,3
	.word	54305
	.byte	18,7,198,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	40807
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_ICNT',0,7,203,13,3
	.word	54376
	.byte	18,7,206,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	40898
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_ICR',0,7,211,13,3
	.word	54438
	.byte	18,7,214,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	41040
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_ISP',0,7,219,13,3
	.word	54499
	.byte	18,7,222,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	41106
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_KRST0',0,7,227,13,3
	.word	54560
	.byte	18,7,230,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	41217
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_KRST1',0,7,235,13,3
	.word	54623
	.byte	18,7,238,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	41309
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_KRSTCLR',0,7,243,13,3
	.word	54686
	.byte	18,7,246,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	41405
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_LCX',0,7,251,13,3
	.word	54751
	.byte	18,7,254,13,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	41511
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,7,131,14,3
	.word	54812
	.byte	18,7,134,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	42094
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,7,139,14,3
	.word	54888
	.byte	18,7,142,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	42687
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_M1CNT',0,7,147,14,3
	.word	54964
	.byte	18,7,150,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	42780
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_M2CNT',0,7,155,14,3
	.word	55027
	.byte	18,7,158,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	42873
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_M3CNT',0,7,163,14,3
	.word	55090
	.byte	18,7,166,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	42966
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_OSEL',0,7,171,14,3
	.word	55153
	.byte	18,7,174,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43039
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_PC',0,7,179,14,3
	.word	55215
	.byte	18,7,182,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43124
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_PCON0',0,7,187,14,3
	.word	55275
	.byte	18,7,190,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43240
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_PCON1',0,7,195,14,3
	.word	55338
	.byte	18,7,198,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43351
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_PCON2',0,7,203,14,3
	.word	55401
	.byte	18,7,206,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43452
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_PCXI',0,7,211,14,3
	.word	55464
	.byte	18,7,214,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43605
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_PIEAR',0,7,219,14,3
	.word	55526
	.byte	18,7,222,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43674
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_PIETR',0,7,227,14,3
	.word	55589
	.byte	18,7,230,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43958
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_PMA0',0,7,235,14,3
	.word	55652
	.byte	18,7,238,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	44049
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_PMA1',0,7,243,14,3
	.word	55714
	.byte	18,7,246,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	44140
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_PMA2',0,7,251,14,3
	.word	55776
	.byte	18,7,254,14,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	44231
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_PSTR',0,7,131,15,3
	.word	55838
	.byte	18,7,134,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	44434
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_PSW',0,7,139,15,3
	.word	55900
	.byte	18,7,142,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	44639
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_RGN_ACCENA',0,7,147,15,3
	.word	55961
	.byte	18,7,150,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	45206
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_RGN_ACCENB',0,7,155,15,3
	.word	56029
	.byte	18,7,158,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	45783
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_RGN_LA',0,7,163,15,3
	.word	56097
	.byte	18,7,166,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	45878
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_RGN_UA',0,7,171,15,3
	.word	56161
	.byte	18,7,174,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	45973
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_SEGEN',0,7,179,15,3
	.word	56225
	.byte	18,7,182,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	46101
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,7,187,15,3
	.word	56288
	.byte	18,7,190,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	46684
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,7,195,15,3
	.word	56364
	.byte	18,7,198,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	47277
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_SMACON',0,7,203,15,3
	.word	56440
	.byte	18,7,206,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	47395
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,7,211,15,3
	.word	56504
	.byte	18,7,214,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	47984
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,7,219,15,3
	.word	56583
	.byte	18,7,222,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	48583
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_SWEVT',0,7,227,15,3
	.word	56662
	.byte	18,7,230,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	48737
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_SYSCON',0,7,235,15,3
	.word	56725
	.byte	18,7,238,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	49036
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TASK_ASI',0,7,243,15,3
	.word	56789
	.byte	18,7,246,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	49134
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_CON',0,7,251,15,3
	.word	56855
	.byte	18,7,254,15,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	49306
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,7,131,16,3
	.word	56920
	.byte	18,7,134,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	49435
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,7,139,16,3
	.word	56996
	.byte	18,7,142,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	49565
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,7,147,16,3
	.word	57074
	.byte	18,7,150,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	49717
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,7,155,16,3
	.word	57152
	.byte	18,7,158,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	49844
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,7,163,16,3
	.word	57229
	.byte	18,7,166,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	49993
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,7,171,16,3
	.word	57306
	.byte	18,7,174,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	50107
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,7,179,16,3
	.word	57377
	.byte	18,7,182,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	50351
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TPS_TIMER',0,7,187,16,3
	.word	57449
	.byte	18,7,190,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	50431
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TRIG_ACC',0,7,195,16,3
	.word	57516
	.byte	18,7,198,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	50626
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TR_ADR',0,7,203,16,3
	.word	57582
	.byte	18,7,206,16,9,4,11
	.byte	'U',0
	.word	176
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	127
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	50699
	.byte	4,2,35,0,0,15
	.byte	'Ifx_CPU_TR_EVT',0,7,211,16,3
	.word	57646
	.byte	16
	.byte	'_Ifx_CPU_RGN',0,7,223,16,25,16,11
	.byte	'LA',0
	.word	56097
	.byte	4,2,35,0,11
	.byte	'UA',0
	.word	56161
	.byte	4,2,35,4,11
	.byte	'ACCENA',0
	.word	55961
	.byte	4,2,35,8,11
	.byte	'ACCENB',0
	.word	56029
	.byte	4,2,35,12,0,6
	.word	57710
	.byte	15
	.byte	'Ifx_CPU_RGN',0,7,229,16,3
	.word	57786
	.byte	16
	.byte	'_Ifx_CPU_BLK',0,7,244,16,25,12,11
	.byte	'RABR',0
	.word	51270
	.byte	4,2,35,0,11
	.byte	'OTAR',0
	.word	51204
	.byte	4,2,35,4,11
	.byte	'OMASK',0
	.word	51137
	.byte	4,2,35,8,0,6
	.word	57812
	.byte	15
	.byte	'Ifx_CPU_BLK',0,7,249,16,3
	.word	57875
	.byte	19,4
	.word	492
	.byte	20,3,0,16
	.byte	'_Ifx_CPU_FPU_TRAP',0,7,136,17,25,28,11
	.byte	'CON',0
	.word	53954
	.byte	4,2,35,0,11
	.byte	'PC',0
	.word	54094
	.byte	4,2,35,4,11
	.byte	'OPC',0
	.word	54024
	.byte	4,2,35,8,11
	.byte	'reserved_C',0
	.word	57901
	.byte	4,2,35,12,11
	.byte	'SRC1',0
	.word	54163
	.byte	4,2,35,16,11
	.byte	'SRC2',0
	.word	54234
	.byte	4,2,35,20,11
	.byte	'SRC3',0
	.word	54305
	.byte	4,2,35,24,0,6
	.word	57910
	.byte	15
	.byte	'Ifx_CPU_FPU_TRAP',0,7,145,17,3
	.word	58035
	.byte	16
	.byte	'_Ifx_CPU_DPR',0,7,160,17,25,8,11
	.byte	'L',0
	.word	53245
	.byte	4,2,35,0,11
	.byte	'U',0
	.word	53308
	.byte	4,2,35,4,0,6
	.word	58066
	.byte	15
	.byte	'Ifx_CPU_DPR',0,7,164,17,3
	.word	58108
	.byte	16
	.byte	'_Ifx_CPU_CPR',0,7,179,17,25,8,11
	.byte	'L',0
	.word	51651
	.byte	4,2,35,0,11
	.byte	'U',0
	.word	51714
	.byte	4,2,35,4,0,6
	.word	58134
	.byte	15
	.byte	'Ifx_CPU_CPR',0,7,183,17,3
	.word	58176
	.byte	19,12
	.word	57449
	.byte	20,2,0,16
	.byte	'_Ifx_CPU_TPS',0,7,198,17,25,16,11
	.byte	'CON',0
	.word	56855
	.byte	4,2,35,0,11
	.byte	'TIMER',0
	.word	58202
	.byte	12,2,35,4,0,6
	.word	58211
	.byte	15
	.byte	'Ifx_CPU_TPS',0,7,202,17,3
	.word	58259
	.byte	16
	.byte	'_Ifx_CPU_TPS_EXTIM',0,7,217,17,25,28,11
	.byte	'ENTRY_LVAL',0
	.word	57074
	.byte	4,2,35,0,11
	.byte	'ENTRY_CVAL',0
	.word	56996
	.byte	4,2,35,4,11
	.byte	'EXIT_LVAL',0
	.word	57229
	.byte	4,2,35,8,11
	.byte	'EXIT_CVAL',0
	.word	57152
	.byte	4,2,35,12,11
	.byte	'CLASS_EN',0
	.word	56920
	.byte	4,2,35,16,11
	.byte	'STAT',0
	.word	57377
	.byte	4,2,35,20,11
	.byte	'FCX',0
	.word	57306
	.byte	4,2,35,24,0,6
	.word	58285
	.byte	15
	.byte	'Ifx_CPU_TPS_EXTIM',0,7,226,17,3
	.word	58434
	.byte	16
	.byte	'_Ifx_CPU_TR',0,7,241,17,25,8,11
	.byte	'EVT',0
	.word	57646
	.byte	4,2,35,0,11
	.byte	'ADR',0
	.word	57582
	.byte	4,2,35,4,0,6
	.word	58466
	.byte	15
	.byte	'Ifx_CPU_TR',0,7,245,17,3
	.word	58511
	.byte	15
	.byte	'boolean',0,8,101,31
	.word	492
	.byte	15
	.byte	'uint8',0,8,104,31
	.word	492
	.byte	15
	.byte	'uint16',0,8,106,31
	.word	554
	.byte	2
	.byte	'long int',0,4,5,15
	.byte	'sint32',0,8,107,31
	.word	58581
	.byte	15
	.byte	'uint32',0,8,108,31
	.word	337
	.byte	2
	.byte	'unsigned long long int',0,8,7,15
	.byte	'uint64',0,8,121,30
	.word	58623
	.byte	15
	.byte	'StatusType',0,2,127,23
	.word	492
	.byte	15
	.byte	'Std_ReturnType',0,2,132,1,15
	.word	492
	.byte	15
	.byte	'Std_VersionInfoType',0,2,141,1,3
	.word	576
	.byte	15
	.byte	'PduLengthType',0,9,65,15
	.word	492
	.byte	7
	.word	492
	.byte	15
	.byte	'SduDataPtrType',0,10,196,1,54
	.word	58758
	.byte	21,10,219,1,9,1,22
	.byte	'TP_DATACONF',0,0,22
	.byte	'TP_DATARETRY',0,1,22
	.byte	'TP_CONFPENDING',0,2,0,15
	.byte	'TpDataStateType',0,10,226,1,3
	.word	58787
	.byte	16
	.byte	'sDet_PCConfigType',0,11,238,1,16,1,11
	.byte	'Det_PCConfigNeverUsed',0
	.word	492
	.byte	1,2,35,0,0,15
	.byte	'Det_PCConfigType',0,11,241,1,3
	.word	58865
	.byte	21,12,147,1,9,1,22
	.byte	'Default_Init_Task',0,0,22
	.byte	'Default_Init_Task_Trusted',0,1,22
	.byte	'IdleTask_OsCore0',0,2,22
	.byte	'bsw_task',0,3,22
	.byte	'swc_init',0,4,22
	.byte	'swc_task',0,5,22
	.byte	'INVALID_TASK',0,6,22
	.byte	'OS_TASKID_COUNT',0,6,0,15
	.byte	'TaskType',0,12,157,1,3
	.word	58947
	.byte	15
	.byte	'Os_Hal_AddressType',0,13,61,16
	.word	337
	.byte	19,64
	.word	337
	.byte	20,15,0,16
	.byte	'Os_ExceptionContextType_Tag',0,14,71,8,160,1,11
	.byte	'AddressRegisters',0
	.word	59132
	.byte	64,2,35,0,11
	.byte	'DataRegisters',0
	.word	59132
	.byte	64,2,35,64,11
	.byte	'Ra',0
	.word	337
	.byte	4,3,35,128,1,11
	.byte	'Psw',0
	.word	337
	.byte	4,3,35,132,1,11
	.byte	'ExceptionSource',0
	.word	337
	.byte	4,3,35,136,1,11
	.byte	'Pcpn',0
	.word	337
	.byte	4,3,35,140,1,11
	.byte	'Pie',0
	.word	337
	.byte	4,3,35,144,1,11
	.byte	'MpuRegionForStackLow',0
	.word	337
	.byte	4,3,35,148,1,11
	.byte	'MpuRegionForStackUpper',0
	.word	337
	.byte	4,3,35,152,1,11
	.byte	'RawPCXI',0
	.word	337
	.byte	4,3,35,156,1,0,15
	.byte	'Os_ExceptionContextType',0,13,66,44
	.word	59141
	.byte	15
	.byte	'Os_InterruptSourceIdType',0,15,238,1,16
	.word	337
	.byte	15
	.byte	'Os_ExceptionSourceIdType',0,15,246,1,16
	.word	337
	.byte	21,15,161,2,9,1,22
	.byte	'RUNNING',0,0,22
	.byte	'READY',0,1,22
	.byte	'WAITING',0,2,22
	.byte	'SUSPENDED',0,3,0,15
	.byte	'TaskStateType',0,15,175,2,3
	.word	59489
	.byte	15
	.byte	'EventMaskType',0,15,182,2,16
	.word	58623
	.byte	15
	.byte	'Os_TickType',0,15,200,2,19
	.word	337
	.byte	15
	.byte	'TickType',0,15,206,2,21
	.word	337
	.byte	10,15,220,2,9,12,11
	.byte	'maxallowedvalue',0
	.word	337
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	337
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	337
	.byte	4,2,35,8,0,15
	.byte	'AlarmBaseType',0,15,228,2,2
	.word	59621
	.byte	21,15,128,3,9,1,22
	.byte	'APPLICATION_TERMINATED',0,0,22
	.byte	'APPLICATION_RESTARTING',0,1,22
	.byte	'APPLICATION_ACCESSIBLE',0,2,0,15
	.byte	'ApplicationStateType',0,15,133,3,3
	.word	59716
	.byte	21,15,177,3,9,1,22
	.byte	'OSServiceId_GetApplicationID',0,0,22
	.byte	'OSServiceId_GetISRID',0,1,22
	.byte	'OSServiceId_CallTrustedFunction',0,2,22
	.byte	'OSServiceId_CheckISRMemoryAccess',0,3,22
	.byte	'OSServiceId_CheckTaskMemoryAccess',0,4,22
	.byte	'OSServiceId_CheckObjectAccess',0,5,22
	.byte	'OSServiceId_CheckObjectOwnership',0,6,22
	.byte	'OSServiceId_StartScheduleTableRel',0,7,22
	.byte	'OSServiceId_StartScheduleTableAbs',0,8,22
	.byte	'OSServiceId_StopScheduleTable',0,9,22
	.byte	'OSServiceId_NextScheduleTable',0,10,22
	.byte	'OSServiceId_StartScheduleTableSynchron',0,11,22
	.byte	'OSServiceId_SyncScheduleTable',0,12,22
	.byte	'OSServiceId_SetScheduleTableAsync',0,13,22
	.byte	'OSServiceId_GetScheduleTableStatus',0,14,22
	.byte	'OSServiceId_IncrementCounter',0,15,22
	.byte	'OSServiceId_GetCounterValue',0,16,22
	.byte	'OSServiceId_GetElapsedValue',0,17,22
	.byte	'OSServiceId_TerminateApplication',0,18,22
	.byte	'OSServiceId_AllowAccess',0,19,22
	.byte	'OSServiceId_GetApplicationState',0,20,22
	.byte	'OSServiceId_GetNumberOfActivatedCores',0,21,22
	.byte	'OSServiceId_GetCoreID',0,22,22
	.byte	'OSServiceId_StartCore',0,23,22
	.byte	'OSServiceId_StartNonAutosarCore',0,24,22
	.byte	'OSServiceId_GetSpinlock',0,25,22
	.byte	'OSServiceId_ReleaseSpinlock',0,26,22
	.byte	'OSServiceId_TryToGetSpinlock',0,27,22
	.byte	'OSServiceId_ShutdownAllCores',0,28,22
	.byte	'OSServiceId_ControlIdle',0,29,22
	.byte	'OSServiceId_IocSend',0,30,22
	.byte	'OSServiceId_IocWrite',0,31,22
	.byte	'OSServiceId_IocSendGroup',0,32,22
	.byte	'OSServiceId_IocWriteGroup',0,33,22
	.byte	'OSServiceId_IocReceive',0,34,22
	.byte	'OSServiceId_IocRead',0,35,22
	.byte	'OSServiceId_IocReceiveGroup',0,36,22
	.byte	'OSServiceId_IocReadGroup',0,37,22
	.byte	'OSServiceId_IocEmptyQueue',0,38,22
	.byte	'OSServiceId_GetCurrentApplicationID',0,39,22
	.byte	'OSServiceId_GetExceptionContext',0,160,1,22
	.byte	'OSServiceId_SetExceptionContext',0,161,1,22
	.byte	'OSServiceId_CallNonTrustedFunction',0,162,1,22
	.byte	'OSServiceId_AppKill',0,163,1,22
	.byte	'OSServiceId_AlarmActionSetEvent',0,164,1,22
	.byte	'OSServiceId_AlarmActionActivateTask',0,165,1,22
	.byte	'OSServiceId_AlarmActionIncrementCounter',0,166,1,22
	.byte	'OSServiceId_AlarmActionCallback',0,167,1,22
	.byte	'OSServiceId_TimerIsr',0,168,1,22
	.byte	'OSServiceId_IsrWrapper',0,169,1,22
	.byte	'OSServiceId_GetTaskStackUsage',0,170,1,22
	.byte	'OSServiceId_GetISRStackUsage',0,171,1,22
	.byte	'OSServiceId_GetKernelStackUsage',0,172,1,22
	.byte	'OSServiceId_GetStartupHookStackUsage',0,173,1,22
	.byte	'OSServiceId_GetErrorHookStackUsage',0,174,1,22
	.byte	'OSServiceId_GetShutdownHookStackUsage',0,175,1,22
	.byte	'OSServiceId_GetProtectionHookStackUsage',0,176,1,22
	.byte	'OSServiceId_GetSemaphore',0,177,1,22
	.byte	'OSServiceId_ReleaseSemaphore',0,178,1,22
	.byte	'OSServiceId_ScheduleTableActivateTask',0,179,1,22
	.byte	'OSServiceId_ScheduleTableSetEvent',0,180,1,22
	.byte	'OSServiceId_DisableInterruptSource',0,181,1,22
	.byte	'OSServiceId_EnableInterruptSource',0,182,1,22
	.byte	'OSServiceId_ClearPendingInterrupt',0,183,1,22
	.byte	'OSServiceId_GetUnhandledIrq',0,184,1,22
	.byte	'OSServiceId_GetUnhandledExc',0,185,1,22
	.byte	'OSServiceId_HookCallCallback',0,186,1,22
	.byte	'OSServiceId_IsInterruptSourceEnabled',0,187,1,22
	.byte	'OSServiceId_IsInterruptPending',0,188,1,22
	.byte	'OSServiceId_CallFastTrustedFunction',0,189,1,22
	.byte	'OSServiceId_BarrierSynchronize',0,190,1,22
	.byte	'OSServiceId_InitialEnableInterruptSources',0,191,1,22
	.byte	'OSServiceId_GetCoreStartState',0,192,1,22
	.byte	'OSServiceId_StartOS',0,208,1,22
	.byte	'OSServiceId_GetActiveApplicationMode',0,210,1,22
	.byte	'OSServiceId_DisableAllInterrupts',0,211,1,22
	.byte	'OSServiceId_EnableAllInterrupts',0,212,1,22
	.byte	'OSServiceId_SuspendAllInterrupts',0,213,1,22
	.byte	'OSServiceId_ResumeAllInterrupts',0,214,1,22
	.byte	'OSServiceId_SuspendOSInterrupts',0,215,1,22
	.byte	'OSServiceId_ResumeOSInterrupts',0,216,1,22
	.byte	'OSServiceId_ActivateTask',0,217,1,22
	.byte	'OSServiceId_TerminateTask',0,218,1,22
	.byte	'OSServiceId_ChainTask',0,219,1,22
	.byte	'OSServiceId_GetTaskID',0,220,1,22
	.byte	'OSServiceId_GetTaskState',0,221,1,22
	.byte	'OSServiceId_Schedule',0,222,1,22
	.byte	'OSServiceId_SetEvent',0,223,1,22
	.byte	'OSServiceId_ClearEvent',0,224,1,22
	.byte	'OSServiceId_GetEvent',0,225,1,22
	.byte	'OSServiceId_WaitEvent',0,226,1,22
	.byte	'OSServiceId_GetAlarmBase',0,227,1,22
	.byte	'OSServiceId_GetAlarm',0,228,1,22
	.byte	'OSServiceId_SetRelAlarm',0,229,1,22
	.byte	'OSServiceId_SetAbsAlarm',0,230,1,22
	.byte	'OSServiceId_CancelAlarm',0,231,1,22
	.byte	'OSServiceId_GetResource',0,232,1,22
	.byte	'OSServiceId_ReleaseResource',0,233,1,22
	.byte	'OSSERVICEID_COUNT',0,255,1,0,15
	.byte	'OSServiceIdType',0,15,156,4,3
	.word	59828
	.byte	21,15,172,4,9,2,22
	.byte	'OS_STATUS_OK',0,0,22
	.byte	'OS_STATUS_CALLEVEL',0,2,22
	.byte	'OS_STATUS_LIMIT',0,4,22
	.byte	'OS_STATUS_RESOURCE',0,6,22
	.byte	'OS_STATUS_SERVICEID',0,9,22
	.byte	'OS_STATUS_ILLEGAL_ADDRESS',0,10,22
	.byte	'OS_STATUS_MISSINGEND',0,11,22
	.byte	'OS_STATUS_DISABLEDINT',0,12,22
	.byte	'OS_STATUS_STACKFAULT',0,13,22
	.byte	'OS_STATUS_PROTECTION_MEMORY',0,14,22
	.byte	'OS_STATUS_PROTECTION_TIME',0,15,22
	.byte	'OS_STATUS_PROTECTION_ARRIVAL',0,16,22
	.byte	'OS_STATUS_PROTECTION_LOCKED',0,17,22
	.byte	'OS_STATUS_PROTECTION_EXCEPTION',0,18,22
	.byte	'OS_STATUS_INTERFERENCE_DEADLOCK',0,19,22
	.byte	'OS_STATUS_NESTING_DEADLOCK',0,20,22
	.byte	'OS_STATUS_SPINLOCK',0,21,22
	.byte	'OS_STATUS_CORE',0,22,22
	.byte	'OS_STATUS_OVERFLOW',0,245,1,22
	.byte	'OS_STATUS_KILL_KERNEL_OBJ',0,246,1,22
	.byte	'OS_STATUS_NO_RESTARTTASK',0,247,1,22
	.byte	'OS_STATUS_CALL_NOT_ALLOWED',0,248,1,22
	.byte	'OS_STATUS_FUNCTION_UNAVAILABLE',0,249,1,22
	.byte	'OS_STATUS_PROTECTION_SYSCALL',0,250,1,22
	.byte	'OS_STATUS_PROTECTION_IRQ',0,251,1,22
	.byte	'OS_STATUS_API_ERROR',0,252,1,22
	.byte	'OS_STATUS_ASSERTION',0,253,1,22
	.byte	'OS_STATUS_OVERLOAD',0,254,1,22
	.byte	'OS_STATUS_ACCESSRIGHTS_1',0,129,2,22
	.byte	'OS_STATUS_CALLEVEL_SHARED_STACK',0,130,2,22
	.byte	'OS_STATUS_ID_1',0,131,2,22
	.byte	'OS_STATUS_UNLOCKED',0,133,2,22
	.byte	'OS_STATUS_STATE_1',0,135,2,22
	.byte	'OS_STATUS_VALUE_IS_ZERO_1',0,136,2,22
	.byte	'OS_STATUS_CORE_CROSS_DATA',0,150,2,22
	.byte	'OS_STATUS_PARAM_POINTER_1',0,151,2,22
	.byte	'OS_STATUS_STACKUSAGE_DISABLED_BY_CONFIG',0,241,3,22
	.byte	'OS_STATUS_NO_BARRIER_PARTICIPANT',0,242,3,22
	.byte	'OS_STATUS_UNIMPLEMENTED_CLEARPENDING',0,243,3,22
	.byte	'OS_STATUS_NO_NTFSTACK_POOL_EMPTY',0,244,3,22
	.byte	'OS_STATUS_ACCESSRIGHTS_2',0,129,4,22
	.byte	'OS_STATUS_CALLEVEL_CROSS_CORE_SYNC',0,130,4,22
	.byte	'OS_STATUS_ID_2',0,131,4,22
	.byte	'OS_STATUS_NOFUNC_1',0,133,4,22
	.byte	'OS_STATUS_STATE_2',0,135,4,22
	.byte	'OS_STATUS_VALUE_IS_ZERO_2',0,136,4,22
	.byte	'OS_STATUS_PARAM_POINTER_2',0,151,4,22
	.byte	'OS_STATUS_EVENT_DISABLED_BY_CONFIG',0,241,5,22
	.byte	'OS_STATUS_UNIMPLEMENTED_EXCEPTIONCONTEXT',0,243,5,22
	.byte	'OS_STATUS_NO_NTFSTACK_APPLIMIT_EXCEEDED',0,244,5,22
	.byte	'OS_STATUS_NOTACCESSIBLE_1',0,129,6,22
	.byte	'OS_STATUS_ID_TYPE_1',0,131,6,22
	.byte	'OS_STATUS_NOFUNC_2',0,133,6,22
	.byte	'OS_STATUS_STATE_STOPPED',0,135,6,22
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_1',0,136,6,22
	.byte	'OS_STATUS_PARAM_POINTER_3',0,151,6,22
	.byte	'OS_STATUS_NOTACCESSIBLE_2',0,129,8,22
	.byte	'OS_STATUS_ID_DIFFERENT_COUNTER',0,131,8,22
	.byte	'OS_STATUS_SPINLOCK_ORDER',0,133,8,22
	.byte	'OS_STATUS_STATE_RUNNING',0,135,8,22
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_2',0,136,8,22
	.byte	'OS_STATUS_NOEXTENDEDTASK_1',0,129,10,22
	.byte	'OS_STATUS_ID_DIFFERENT_SYNC',0,131,10,22
	.byte	'OS_STATUS_STOPPED_1',0,133,10,22
	.byte	'OS_STATUS_STATE_NEXTED',0,135,10,22
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_3',0,136,10,22
	.byte	'OS_STATUS_NOEXTENDEDTASK_2',0,129,12,22
	.byte	'OS_STATUS_HOOK_NOT_AVAILABLE',0,131,12,22
	.byte	'OS_STATUS_NOT_STOPPED_2',0,133,12,22
	.byte	'OS_STATUS_STATE_WAITING',0,135,12,22
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_1',0,136,12,22
	.byte	'OS_STATUS_NOEXTENDEDTASK_CALLER',0,129,14,22
	.byte	'OS_STATUS_NEXTED_1',0,133,14,22
	.byte	'OS_STATUS_STATE_NO_RESTART',0,135,14,22
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_2',0,136,14,22
	.byte	'OS_STATUS_LOCKED',0,129,16,22
	.byte	'OS_STATUS_KILLING_IS_DISABLED',0,133,16,22
	.byte	'OS_STATUS_STATE_ALREADY_TERMINATED',0,135,16,22
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_1',0,136,16,22
	.byte	'OS_STATUS_PRIORITY',0,129,18,22
	.byte	'OS_STATUS_ORDER',0,133,18,22
	.byte	'OS_STATUS_STATE_RESTARTING_NO_MEMBER',0,135,18,22
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_2',0,136,18,22
	.byte	'OS_STATUS_NOT_THE_OWNER_1',0,129,20,22
	.byte	'OS_STATUS_STATE_ALREADY_RESTARTING',0,135,20,22
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_3',0,136,20,22
	.byte	'OS_STATUS_VALUE_IS_NOT_BOOLEAN',0,136,22,0,15
	.byte	'Os_StatusType',0,15,232,5,3
	.word	62998
	.byte	10,15,133,6,9,4,11
	.byte	'Service',0
	.word	59828
	.byte	1,2,35,0,11
	.byte	'Error',0
	.word	492
	.byte	1,2,35,1,11
	.byte	'DetailedError',0
	.word	62998
	.byte	2,2,35,2,0,15
	.byte	'Os_ErrorInformationType',0,15,143,6,3
	.word	65528
	.byte	21,15,175,6,9,1,22
	.byte	'SCHEDULETABLE_STOPPED',0,0,22
	.byte	'SCHEDULETABLE_NEXT',0,1,22
	.byte	'SCHEDULETABLE_WAITING',0,2,22
	.byte	'SCHEDULETABLE_RUNNING',0,3,22
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,15
	.byte	'ScheduleTableStatusType',0,15,192,6,3
	.word	65623
	.byte	15
	.byte	'Os_AccessCheckAddress',0,15,199,6,29
	.word	337
	.byte	21,15,211,6,9,1,22
	.byte	'OS_MEM_ACCESS_TYPE_NON',0,0,22
	.byte	'OS_MEM_ACCESS_TYPE_R',0,1,22
	.byte	'OS_MEM_ACCESS_TYPE_READ',0,1,22
	.byte	'OS_MEM_ACCESS_TYPE_W',0,2,22
	.byte	'OS_MEM_ACCESS_TYPE_WRITE',0,2,22
	.byte	'OS_MEM_ACCESS_TYPE_RW',0,3,22
	.byte	'OS_MEM_ACCESS_TYPE_EXECUTE',0,4,22
	.byte	'OS_MEM_ACCESS_TYPE_X',0,4,22
	.byte	'OS_MEM_ACCESS_TYPE_RX',0,5,22
	.byte	'OS_MEM_ACCESS_TYPE_WX',0,6,22
	.byte	'OS_MEM_ACCESS_TYPE_RWX',0,7,22
	.byte	'OS_MEM_ACCESS_TYPE_S',0,8,22
	.byte	'OS_MEM_ACCESS_TYPE_STACK',0,8,22
	.byte	'OS_MEM_ACCESS_TYPE_RS',0,9,22
	.byte	'OS_MEM_ACCESS_TYPE_WS',0,10,22
	.byte	'OS_MEM_ACCESS_TYPE_RWS',0,11,22
	.byte	'OS_MEM_ACCESS_TYPE_XS',0,12,22
	.byte	'OS_MEM_ACCESS_TYPE_RXS',0,13,22
	.byte	'OS_MEM_ACCESS_TYPE_WXS',0,14,22
	.byte	'OS_MEM_ACCESS_TYPE_RWXS',0,15,0,15
	.byte	'Os_MemAccessType',0,15,233,6,3
	.word	65827
.L657:
	.byte	6
	.word	337
.L658:
	.byte	6
	.word	337
	.byte	19,7
	.word	492
	.byte	20,6,0
.L659:
	.byte	3
	.word	66366
	.byte	19,28
	.word	337
	.byte	20,6,0
.L660:
	.byte	3
	.word	66380
.L661:
	.byte	3
	.word	66380
.L662:
	.byte	3
	.word	66380
.L663:
	.byte	3
	.word	66380
	.byte	15
	.byte	'McalLib_CpuEndInitRetType',0,1,244,2,3
	.word	363
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L207:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,59,0,3,8,0,0,13,46,0,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,14,21,0,54,15,0,0,15,22,0
	.byte	3,8,58,15,59,15,57,15,73,19,0,0,16,19,1,3,8,58,15,59,15,57,15,11,15,0,0,17,13,0,3,8,11,15,73,19,13,15
	.byte	12,15,56,9,0,0,18,23,1,58,15,59,15,57,15,11,15,0,0,19,1,1,11,15,73,19,0,0,20,33,0,47,15,0,0,21,4,1,58
	.byte	15,59,15,57,15,11,15,0,0,22,40,0,3,8,28,13,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L208:
	.word	.L786-.L785
.L785:
	.half	3
	.word	.L788-.L787
.L787:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg',0
	.byte	'D:\\Zonal\\demo011\\tasking\\appl\\GenData',0,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'Os.h',0,2,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'ComStack_Cfg.h',0,4,0,0
	.byte	'ComStack_Types.h',0,1,0,0
	.byte	'Det_Cfg.h',0,4,0,0
	.byte	'Os_Types_Lcfg.h',0,4,0,0
	.byte	'Os_Hal_Os_Types.h',0,2,0,0
	.byte	'Os_Hal_OsInt.h',0,2,0,0
	.byte	'Os_Types.h',0,2,0,0,0
.L788:
.L786:
	.sdecl	'.debug_info',debug,cluster('Mcal_GetCpuWdgPassword')
	.sect	'.debug_info'
.L209:
	.word	212
	.half	3
	.word	.L210
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L212,.L211
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_GetCpuWdgPassword',0,1,213,3,8
	.word	.L440
	.byte	1,1,1
	.word	.L120,.L441,.L119
	.byte	4
	.word	.L442
	.byte	5
	.byte	'CoreIdIndex',0,1,218,3,10
	.word	.L440,.L443
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_GetCpuWdgPassword')
	.sect	'.debug_abbrev'
.L210:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,85,6,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_GetCpuWdgPassword')
	.sect	'.debug_line'
.L211:
	.word	.L790-.L789
.L789:
	.half	3
	.word	.L792-.L791
.L791:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L792:
	.byte	5,41,7,0,5,2
	.word	.L120
	.byte	3,217,3,1,5,14,9
	.half	.L664-.L120
	.byte	3,5,1,5,1,9
	.half	.L665-.L664
	.byte	3,11,1,7,9
	.half	.L213-.L665
	.byte	0,1,1
.L790:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_GetCpuWdgPassword')
	.sect	'.debug_ranges'
.L212:
	.word	-1,.L120,0,.L213-.L120,0,0
.L442:
	.word	-1,.L120,0,.L441-.L120,-1,.L122,0,.L408-.L122,-1,.L124,0,.L403-.L124,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_SetCpuWdgPassword')
	.sect	'.debug_info'
.L214:
	.word	260
	.half	3
	.word	.L215
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L217,.L216
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_SetCpuWdgPassword',0,1,133,4,8
	.word	.L440
	.byte	1,1,1
	.word	.L126,.L444,.L125
	.byte	4
	.byte	'Password',0,1,133,4,44
	.word	.L445,.L446
	.byte	5
	.word	.L126,.L444
	.byte	6
	.byte	'CpuEndInitRet',0,1,135,4,29
	.word	.L447,.L448
	.byte	6
	.byte	'CoreId',0,1,140,4,10
	.word	.L440,.L449
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_SetCpuWdgPassword')
	.sect	'.debug_abbrev'
.L215:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_SetCpuWdgPassword')
	.sect	'.debug_line'
.L216:
	.word	.L794-.L793
.L793:
	.half	3
	.word	.L796-.L795
.L795:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L796:
	.byte	5,8,7,0,5,2
	.word	.L126
	.byte	3,132,4,1,5,36,9
	.half	.L666-.L126
	.byte	3,7,1,5,17,9
	.half	.L667-.L666
	.byte	1,5,3,3,5,1,5,42,9
	.half	.L668-.L667
	.byte	3,8,1,5,38,9
	.half	.L797-.L668
	.byte	3,111,1,5,42,9
	.half	.L798-.L797
	.byte	3,16,1,5,17,9
	.half	.L799-.L798
	.byte	3,127,1,5,3,3,7,1,9
	.half	.L800-.L799
	.byte	3,5,1,5,1,3,1,1,7,9
	.half	.L218-.L800
	.byte	0,1,1
.L794:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_SetCpuWdgPassword')
	.sect	'.debug_ranges'
.L217:
	.word	-1,.L126,0,.L218-.L126,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_WriteCpuEndInitProtReg')
	.sect	'.debug_info'
.L219:
	.word	308
	.half	3
	.word	.L220
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L222,.L221
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_WriteCpuEndInitProtReg',0,1,191,4,6,1,1,1
	.word	.L128,.L450,.L127
	.byte	4
	.byte	'RegAddress',0,1,191,4,55
	.word	.L451,.L452
	.byte	4
	.byte	'DataValue',0,1,192,4,48
	.word	.L453,.L454
	.byte	5
	.word	.L128,.L450
	.byte	6
	.byte	'CpuEndInitRet',0,1,194,4,29
	.word	.L447,.L455
	.byte	6
	.byte	'CoreId',0,1,195,4,10
	.word	.L440,.L456
	.byte	6
	.byte	'TempAddr',0,1,200,4,10
	.word	.L440,.L457
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_WriteCpuEndInitProtReg')
	.sect	'.debug_abbrev'
.L220:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_WriteCpuEndInitProtReg')
	.sect	'.debug_line'
.L221:
	.word	.L802-.L801
.L801:
	.half	3
	.word	.L804-.L803
.L803:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L804:
	.byte	5,6,7,0,5,2
	.word	.L128
	.byte	3,190,4,1,5,29,9
	.half	.L671-.L128
	.byte	3,9,1,5,31,9
	.half	.L672-.L671
	.byte	3,21,1,5,12,9
	.half	.L670-.L672
	.byte	1,5,5,3,6,1,5,44,9
	.half	.L673-.L670
	.byte	3,8,1,5,73,9
	.half	.L805-.L673
	.byte	3,126,1,5,44,9
	.half	.L806-.L805
	.byte	3,1,1,5,20,9
	.half	.L807-.L806
	.byte	3,10,1,5,5,9
	.half	.L808-.L807
	.byte	1,5,39,7,9
	.half	.L809-.L808
	.byte	3,6,1,5,58,9
	.half	.L810-.L809
	.byte	1,5,14,9
	.half	.L4-.L810
	.byte	3,23,1,9
	.half	.L811-.L4
	.byte	3,113,1,9
	.half	.L812-.L811
	.byte	3,3,1,9
	.half	.L813-.L812
	.byte	3,15,1,9
	.half	.L814-.L813
	.byte	3,3,1,9
	.half	.L815-.L814
	.byte	3,116,1,9
	.half	.L816-.L815
	.byte	3,3,1,9
	.half	.L817-.L816
	.byte	3,122,1,5,13,9
	.half	.L7-.L817
	.byte	3,123,1,9
	.half	.L818-.L7
	.byte	3,1,1,9
	.half	.L8-.L818
	.byte	3,2,1,9
	.half	.L819-.L8
	.byte	3,1,1,9
	.half	.L13-.L819
	.byte	3,2,1,9
	.half	.L820-.L13
	.byte	3,1,1,9
	.half	.L11-.L820
	.byte	3,2,1,9
	.half	.L821-.L11
	.byte	3,1,1,9
	.half	.L12-.L821
	.byte	3,2,1,9
	.half	.L822-.L12
	.byte	3,1,1,9
	.half	.L6-.L822
	.byte	3,2,1,9
	.half	.L823-.L6
	.byte	3,1,1,9
	.half	.L9-.L823
	.byte	3,2,1,9
	.half	.L824-.L9
	.byte	3,1,1,9
	.half	.L10-.L824
	.byte	3,2,1,5,34,9
	.half	.L5-.L10
	.byte	3,15,1,9
	.half	.L825-.L5
	.byte	3,125,1,5,47,9
	.half	.L826-.L825
	.byte	3,1,1,5,34,9
	.half	.L827-.L826
	.byte	3,1,1,5,5,9
	.half	.L828-.L827
	.byte	3,7,1,5,1,7,9
	.half	.L223-.L828
	.byte	3,2,0,1,1
.L802:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_WriteCpuEndInitProtReg')
	.sect	'.debug_ranges'
.L222:
	.word	-1,.L128,0,.L223-.L128,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_GetSafetyEndInitPassword')
	.sect	'.debug_info'
.L224:
	.word	197
	.half	3
	.word	.L225
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L227,.L226
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_GetSafetyEndInitPassword',0,1,201,5,8
	.word	.L440
	.byte	1,1,1
	.word	.L130,.L458,.L129
	.byte	4
	.word	.L130,.L458
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_GetSafetyEndInitPassword')
	.sect	'.debug_abbrev'
.L225:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_GetSafetyEndInitPassword')
	.sect	'.debug_line'
.L226:
	.word	.L830-.L829
.L829:
	.half	3
	.word	.L832-.L831
.L831:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L832:
	.byte	5,14,7,0,5,2
	.word	.L130
	.byte	3,207,5,1,5,1,9
	.half	.L833-.L130
	.byte	3,11,1,7,9
	.half	.L228-.L833
	.byte	0,1,1
.L830:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_GetSafetyEndInitPassword')
	.sect	'.debug_ranges'
.L227:
	.word	-1,.L130,0,.L228-.L130,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_SetSafetyEndInitPassword')
	.sect	'.debug_info'
.L229:
	.word	245
	.half	3
	.word	.L230
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L232,.L231
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_SetSafetyEndInitPassword',0,1,247,5,8
	.word	.L440
	.byte	1,1,1
	.word	.L132,.L459,.L131
	.byte	4
	.byte	'Password',0,1,247,5,51
	.word	.L460,.L461
	.byte	5
	.word	.L132,.L459
	.byte	6
	.byte	'OldPassword',0,1,249,5,10
	.word	.L440,.L462
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_SetSafetyEndInitPassword')
	.sect	'.debug_abbrev'
.L230:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_SetSafetyEndInitPassword')
	.sect	'.debug_line'
.L231:
	.word	.L835-.L834
.L834:
	.half	3
	.word	.L837-.L836
.L836:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L837:
	.byte	5,8,7,0,5,2
	.word	.L132
	.byte	3,246,5,1,5,3,3,8,1,5,22,9
	.half	.L674-.L132
	.byte	3,6,1,5,28,9
	.half	.L838-.L674
	.byte	3,1,1,5,22,3,127,1,5,20,9
	.half	.L839-.L838
	.byte	3,2,1,5,34,9
	.half	.L840-.L839
	.byte	3,115,1,5,43,9
	.half	.L841-.L840
	.byte	3,17,1,9
	.half	.L842-.L841
	.byte	3,1,1,5,15,9
	.half	.L676-.L842
	.byte	3,126,1,5,26,3,8,1,5,3,9
	.half	.L677-.L676
	.byte	3,5,1,9
	.half	.L843-.L677
	.byte	3,5,1,5,1,3,1,1,7,9
	.half	.L233-.L843
	.byte	0,1,1
.L835:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_SetSafetyEndInitPassword')
	.sect	'.debug_ranges'
.L232:
	.word	-1,.L132,0,.L233-.L132,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_WriteSafetyEndInitProtReg')
	.sect	'.debug_info'
.L234:
	.word	241
	.half	3
	.word	.L235
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L237,.L236
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_WriteSafetyEndInitProtReg',0,1,186,6,6,1,1,1
	.word	.L134,.L463,.L133
	.byte	4
	.byte	'RegAddress',0,1,186,6,58
	.word	.L464,.L465
	.byte	4
	.byte	'DataValue',0,1,187,6,50
	.word	.L466,.L467
	.byte	5
	.word	.L134,.L463
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_WriteSafetyEndInitProtReg')
	.sect	'.debug_abbrev'
.L235:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_WriteSafetyEndInitProtReg')
	.sect	'.debug_line'
.L236:
	.word	.L845-.L844
.L844:
	.half	3
	.word	.L847-.L846
.L846:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L847:
	.byte	5,41,7,0,5,2
	.word	.L134
	.byte	3,213,6,1,9
	.half	.L848-.L134
	.byte	3,1,1,9
	.half	.L849-.L848
	.byte	3,1,1,5,1,9
	.half	.L238-.L849
	.byte	3,3,0,1,1
.L845:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_WriteSafetyEndInitProtReg')
	.sect	'.debug_ranges'
.L237:
	.word	-1,.L134,0,.L238-.L134,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_WriteSafetyEndInitProtRegMask')
	.sect	'.debug_info'
.L239:
	.word	263
	.half	3
	.word	.L240
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L242,.L241
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_WriteSafetyEndInitProtRegMask',0,1,185,7,6,1,1,1
	.word	.L138,.L468,.L137
	.byte	4
	.byte	'RegAddress',0,1,185,7,62
	.word	.L469,.L470
	.byte	4
	.byte	'DataValue',0,1,186,7,55
	.word	.L471,.L472
	.byte	4
	.byte	'Mask',0,1,186,7,73
	.word	.L440,.L473
	.byte	5
	.word	.L138,.L468
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_WriteSafetyEndInitProtRegMask')
	.sect	'.debug_abbrev'
.L240:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_WriteSafetyEndInitProtRegMask')
	.sect	'.debug_line'
.L241:
	.word	.L851-.L850
.L850:
	.half	3
	.word	.L853-.L852
.L852:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L853:
	.byte	5,41,7,0,5,2
	.word	.L138
	.byte	3,212,7,1,9
	.half	.L854-.L138
	.byte	3,1,1,5,1,9
	.half	.L243-.L854
	.byte	3,3,0,1,1
.L851:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_WriteSafetyEndInitProtRegMask')
	.sect	'.debug_ranges'
.L242:
	.word	-1,.L138,0,.L243-.L138,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_GetPeripheralEndInitPassword')
	.sect	'.debug_info'
.L244:
	.word	201
	.half	3
	.word	.L245
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L247,.L246
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_GetPeripheralEndInitPassword',0,1,242,7,8
	.word	.L440
	.byte	1,1,1
	.word	.L140,.L474,.L139
	.byte	4
	.word	.L140,.L474
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_GetPeripheralEndInitPassword')
	.sect	'.debug_abbrev'
.L245:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_GetPeripheralEndInitPassword')
	.sect	'.debug_line'
.L246:
	.word	.L856-.L855
.L855:
	.half	3
	.word	.L858-.L857
.L857:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L858:
	.byte	5,14,7,0,5,2
	.word	.L140
	.byte	3,248,7,1,5,1,9
	.half	.L859-.L140
	.byte	3,12,1,7,9
	.half	.L248-.L859
	.byte	0,1,1
.L856:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_GetPeripheralEndInitPassword')
	.sect	'.debug_ranges'
.L247:
	.word	-1,.L140,0,.L248-.L140,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_SetPeripheralEndInitPassword')
	.sect	'.debug_info'
.L249:
	.word	249
	.half	3
	.word	.L250
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L252,.L251
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_SetPeripheralEndInitPassword',0,1,161,8,8
	.word	.L440
	.byte	1,1,1
	.word	.L142,.L475,.L141
	.byte	4
	.byte	'Password',0,1,161,8,55
	.word	.L476,.L477
	.byte	5
	.word	.L142,.L475
	.byte	6
	.byte	'OldPassword',0,1,163,8,10
	.word	.L440,.L478
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_SetPeripheralEndInitPassword')
	.sect	'.debug_abbrev'
.L250:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_SetPeripheralEndInitPassword')
	.sect	'.debug_line'
.L251:
	.word	.L861-.L860
.L860:
	.half	3
	.word	.L863-.L862
.L862:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L863:
	.byte	5,8,7,0,5,2
	.word	.L142
	.byte	3,160,8,1,5,3,3,9,1,5,22,9
	.half	.L678-.L142
	.byte	3,6,1,5,28,9
	.half	.L864-.L678
	.byte	3,1,1,5,22,3,127,1,5,20,9
	.half	.L865-.L864
	.byte	3,2,1,5,34,9
	.half	.L866-.L865
	.byte	3,114,1,5,47,9
	.half	.L867-.L866
	.byte	3,19,1,9
	.half	.L868-.L867
	.byte	3,1,1,5,15,9
	.half	.L680-.L868
	.byte	3,126,1,5,26,3,8,1,5,3,9
	.half	.L681-.L680
	.byte	3,6,1,9
	.half	.L869-.L681
	.byte	3,5,1,5,1,3,1,1,7,9
	.half	.L253-.L869
	.byte	0,1,1
.L861:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_SetPeripheralEndInitPassword')
	.sect	'.debug_ranges'
.L252:
	.word	-1,.L142,0,.L253-.L142,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_WritePeripEndInitProtReg')
	.sect	'.debug_info'
.L254:
	.word	240
	.half	3
	.word	.L255
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L257,.L256
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_WritePeripEndInitProtReg',0,1,229,8,6,1,1,1
	.word	.L144,.L479,.L143
	.byte	4
	.byte	'RegAddress',0,1,229,8,57
	.word	.L480,.L481
	.byte	4
	.byte	'DataValue',0,1,230,8,49
	.word	.L482,.L483
	.byte	5
	.word	.L144,.L479
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_WritePeripEndInitProtReg')
	.sect	'.debug_abbrev'
.L255:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_WritePeripEndInitProtReg')
	.sect	'.debug_line'
.L256:
	.word	.L871-.L870
.L870:
	.half	3
	.word	.L873-.L872
.L872:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L873:
	.byte	5,6,7,0,5,2
	.word	.L144
	.byte	3,228,8,1,5,5,9
	.half	.L683-.L144
	.byte	3,24,1,5,24,9
	.half	.L682-.L683
	.byte	3,6,1,5,30,9
	.half	.L874-.L682
	.byte	3,1,1,5,24,3,127,1,5,22,9
	.half	.L875-.L874
	.byte	3,2,1,5,41,9
	.half	.L876-.L875
	.byte	3,6,1,9
	.half	.L877-.L876
	.byte	3,1,1,9
	.half	.L878-.L877
	.byte	3,1,1,9
	.half	.L879-.L878
	.byte	3,16,1,5,37,3,122,1,5,41,9
	.half	.L880-.L879
	.byte	3,7,1,9
	.half	.L881-.L880
	.byte	3,1,1,5,28,9
	.half	.L882-.L881
	.byte	3,5,1,5,5,9
	.half	.L883-.L882
	.byte	3,5,1,5,1,7,9
	.half	.L258-.L883
	.byte	3,2,0,1,1
.L871:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_WritePeripEndInitProtReg')
	.sect	'.debug_ranges'
.L257:
	.word	-1,.L144,0,.L258-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_GetCpuPhysicalId')
	.sect	'.debug_info'
.L259:
	.word	210
	.half	3
	.word	.L260
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L262,.L261
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_GetCpuPhysicalId',0,1,196,9,8
	.word	.L440
	.byte	1,1,1
	.word	.L146,.L484,.L145
	.byte	4
	.word	.L146,.L484
	.byte	5
	.byte	'CoreId',0,1,200,9,10
	.word	.L440,.L485
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_GetCpuPhysicalId')
	.sect	'.debug_abbrev'
.L260:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_GetCpuPhysicalId')
	.sect	'.debug_line'
.L261:
	.word	.L885-.L884
.L884:
	.half	3
	.word	.L887-.L886
.L886:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L887:
	.byte	5,27,7,0,5,2
	.word	.L146
	.byte	3,199,9,1,5,1,9
	.half	.L684-.L146
	.byte	3,4,1,7,9
	.half	.L263-.L684
	.byte	0,1,1
.L885:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_GetCpuPhysicalId')
	.sect	'.debug_ranges'
.L262:
	.word	-1,.L146,0,.L263-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_GetGlobalDsprAddress')
	.sect	'.debug_info'
.L264:
	.word	290
	.half	3
	.word	.L265
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L267,.L266
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_GetGlobalDsprAddress',0,1,240,9,8
	.word	.L440
	.byte	1,1,1
	.word	.L148,.L486,.L147
	.byte	4
	.byte	'CpuId',0,1,241,9,15
	.word	.L487,.L488
	.byte	4
	.byte	'LocalDsprAddress',0,1,241,9,35
	.word	.L489,.L490
	.byte	5
	.word	.L491
	.byte	6
	.byte	'DsprMsb',0,1,248,9,9
	.word	.L492,.L493
	.byte	6
	.byte	'RetGlobalAddress',0,1,251,9,11
	.word	.L440,.L494
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_GetGlobalDsprAddress')
	.sect	'.debug_abbrev'
.L265:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_GetGlobalDsprAddress')
	.sect	'.debug_line'
.L266:
	.word	.L889-.L888
.L888:
	.half	3
	.word	.L891-.L890
.L890:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L891:
	.byte	5,78,7,0,5,2
	.word	.L148
	.byte	3,247,9,1,5,28,9
	.half	.L686-.L148
	.byte	3,3,1,5,6,9
	.half	.L687-.L686
	.byte	3,7,1,5,14,7,9
	.half	.L892-.L687
	.byte	3,1,1,5,26,7,9
	.half	.L893-.L892
	.byte	3,9,1,5,9,3,1,1,5,29,9
	.half	.L894-.L893
	.byte	1,5,5,9
	.half	.L895-.L894
	.byte	3,127,1,5,34,7,9
	.half	.L896-.L895
	.byte	3,13,1,5,22,9
	.half	.L897-.L896
	.byte	3,121,1,5,55,3,7,1,5,7,9
	.half	.L898-.L897
	.byte	3,121,1,5,63,7,9
	.half	.L899-.L898
	.byte	3,7,1,5,79,9
	.half	.L900-.L899
	.byte	3,127,1,5,1,9
	.half	.L27-.L900
	.byte	3,27,1,5,9,7,9
	.half	.L30-.L27
	.byte	3,114,1,5,28,9
	.half	.L901-.L30
	.byte	3,4,1,5,1,3,10,1,7,9
	.half	.L268-.L901
	.byte	0,1,1
.L889:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_GetGlobalDsprAddress')
	.sect	'.debug_ranges'
.L267:
	.word	-1,.L148,0,.L268-.L148,0,0
.L491:
	.word	-1,.L148,0,.L486-.L148,-1,.L150,0,.L423-.L150,-1,.L152,0,.L413-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_GetLocalDsprAddress')
	.sect	'.debug_info'
.L269:
	.word	325
	.half	3
	.word	.L270
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L272,.L271
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_GetLocalDsprAddress',0,1,211,10,8
	.word	.L440
	.byte	1,1,1
	.word	.L154,.L495,.L153
	.byte	4
	.byte	'GlobalDsprAddress',0,1,211,10,46
	.word	.L496,.L497
	.byte	5
	.word	.L154,.L495
	.byte	6
	.byte	'DsprEndAddress',0,1,213,10,10
	.word	.L440,.L498
	.byte	6
	.byte	'DsprMsb',0,1,219,10,9
	.word	.L492,.L499
	.byte	6
	.byte	'RetLocalAddress',0,1,222,10,10
	.word	.L440,.L500
	.byte	6
	.byte	'CoreIndex',0,1,225,10,10
	.word	.L440,.L501
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_GetLocalDsprAddress')
	.sect	'.debug_abbrev'
.L270:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_GetLocalDsprAddress')
	.sect	'.debug_line'
.L271:
	.word	.L903-.L902
.L902:
	.half	3
	.word	.L905-.L904
.L904:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L905:
	.byte	5,8,7,0,5,2
	.word	.L154
	.byte	3,210,10,1,5,79,9
	.half	.L690-.L154
	.byte	3,8,1,5,26,9
	.half	.L689-.L690
	.byte	3,3,1,5,39,3,3,1,5,7,9
	.half	.L688-.L689
	.byte	3,6,1,5,8,7,9
	.half	.L906-.L688
	.byte	3,1,1,5,16,9
	.half	.L907-.L906
	.byte	3,1,1,5,27,7,9
	.half	.L908-.L907
	.byte	3,9,1,5,53,9
	.half	.L909-.L908
	.byte	3,1,1,5,9,1,5,29,9
	.half	.L910-.L909
	.byte	1,5,5,9
	.half	.L911-.L910
	.byte	3,127,1,5,26,7,9
	.half	.L912-.L911
	.byte	3,8,1,5,80,9
	.half	.L913-.L912
	.byte	3,127,1,5,5,3,121,1,5,19,9
	.half	.L34-.L913
	.byte	3,16,1,5,5,9
	.half	.L914-.L34
	.byte	1,5,7,7,9
	.half	.L915-.L914
	.byte	3,4,1,5,3,7,9
	.half	.L916-.L915
	.byte	3,138,119,1,5,62,9
	.half	.L691-.L916
	.byte	3,248,8,1,5,26,9
	.half	.L39-.L691
	.byte	3,5,1,5,46,9
	.half	.L692-.L39
	.byte	1,5,29,9
	.half	.L40-.L692
	.byte	3,6,1,5,7,9
	.half	.L917-.L40
	.byte	1,5,25,9
	.half	.L693-.L917
	.byte	3,5,1,5,3,9
	.half	.L36-.L693
	.byte	3,9,1,5,1,3,1,1,7,9
	.half	.L273-.L36
	.byte	0,1,1
.L903:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_GetLocalDsprAddress')
	.sect	'.debug_ranges'
.L272:
	.word	-1,.L154,0,.L273-.L154,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_GetGlobalPsprAddress')
	.sect	'.debug_info'
.L274:
	.word	319
	.half	3
	.word	.L275
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L277,.L276
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_GetGlobalPsprAddress',0,1,197,11,8
	.word	.L440
	.byte	1,1,1
	.word	.L156,.L502,.L155
	.byte	4
	.byte	'CpuId',0,1,197,11,47
	.word	.L503,.L504
	.byte	4
	.byte	'LocalPsprAddress',0,1,198,11,47
	.word	.L505,.L506
	.byte	5
	.word	.L507
	.byte	6
	.byte	'PsprMsb',0,1,205,11,9
	.word	.L492,.L508
	.byte	6
	.byte	'RetGlobalAddress',0,1,207,11,10
	.word	.L440,.L509
	.byte	6
	.byte	'LocalRetAddress',0,1,208,11,10
	.word	.L440,.L510
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_GetGlobalPsprAddress')
	.sect	'.debug_abbrev'
.L275:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_GetGlobalPsprAddress')
	.sect	'.debug_line'
.L276:
	.word	.L919-.L918
.L918:
	.half	3
	.word	.L921-.L920
.L920:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L921:
	.byte	5,78,7,0,5,2
	.word	.L156
	.byte	3,204,11,1,5,27,9
	.half	.L698-.L156
	.byte	3,2,1,5,6,9
	.half	.L694-.L698
	.byte	3,8,1,5,14,7,9
	.half	.L922-.L694
	.byte	3,1,1,5,20,7,9
	.half	.L923-.L922
	.byte	3,5,1,5,5,9
	.half	.L924-.L923
	.byte	1,5,30,7,9
	.half	.L925-.L924
	.byte	3,5,1,5,55,9
	.half	.L926-.L925
	.byte	1,5,7,9
	.half	.L927-.L926
	.byte	1,5,37,7,9
	.half	.L928-.L927
	.byte	3,6,1,5,21,3,1,1,5,50,9
	.half	.L695-.L928
	.byte	1,5,13,3,1,1,5,11,9
	.half	.L699-.L695
	.byte	1,5,72,9
	.half	.L704-.L699
	.byte	3,126,1,5,1,9
	.half	.L43-.L704
	.byte	3,34,1,5,22,7,9
	.half	.L45-.L43
	.byte	3,105,1,5,7,9
	.half	.L929-.L45
	.byte	1,5,44,7,9
	.half	.L702-.L929
	.byte	3,2,1,5,32,3,6,1,5,12,9
	.half	.L701-.L702
	.byte	1,5,33,7,9
	.half	.L930-.L701
	.byte	3,1,1,5,59,9
	.half	.L931-.L930
	.byte	1,5,30,9
	.half	.L932-.L931
	.byte	1,5,28,9
	.half	.L703-.L932
	.byte	3,4,1,5,1,9
	.half	.L48-.L703
	.byte	3,10,1,7,9
	.half	.L278-.L48
	.byte	0,1,1
.L919:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_GetGlobalPsprAddress')
	.sect	'.debug_ranges'
.L277:
	.word	-1,.L156,0,.L278-.L156,0,0
.L507:
	.word	-1,.L156,0,.L502-.L156,-1,.L158,0,.L398-.L158,-1,.L160,0,.L393-.L160,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_GetLocalPsprAddress')
	.sect	'.debug_info'
.L279:
	.word	325
	.half	3
	.word	.L280
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L282,.L281
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_GetLocalPsprAddress',0,1,171,12,8
	.word	.L440
	.byte	1,1,1
	.word	.L162,.L511,.L161
	.byte	4
	.byte	'GlobalPsprAddress',0,1,171,12,46
	.word	.L512,.L513
	.byte	5
	.word	.L162,.L511
	.byte	6
	.byte	'PsprMsb',0,1,187,12,9
	.word	.L492,.L514
	.byte	6
	.byte	'RetLocalAddress',0,1,189,12,10
	.word	.L440,.L515
	.byte	6
	.byte	'LocalRetAddress',0,1,190,12,10
	.word	.L440,.L516
	.byte	6
	.byte	'CpuIndex',0,1,193,12,10
	.word	.L440,.L517
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_GetLocalPsprAddress')
	.sect	'.debug_abbrev'
.L280:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_GetLocalPsprAddress')
	.sect	'.debug_line'
.L281:
	.word	.L934-.L933
.L933:
	.half	3
	.word	.L936-.L935
.L935:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L936:
	.byte	5,8,7,0,5,2
	.word	.L162
	.byte	3,170,12,1,5,79,9
	.half	.L706-.L162
	.byte	3,16,1,5,26,9
	.half	.L707-.L706
	.byte	3,2,1,5,38,3,4,1,5,7,9
	.half	.L705-.L707
	.byte	3,6,1,5,8,7,9
	.half	.L937-.L705
	.byte	3,1,1,5,16,9
	.half	.L938-.L937
	.byte	3,1,1,5,33,7,9
	.half	.L939-.L938
	.byte	3,8,1,5,28,3,127,1,5,33,9
	.half	.L940-.L939
	.byte	3,1,1,5,28,3,127,1,5,9,9
	.half	.L941-.L940
	.byte	3,1,1,5,40,9
	.half	.L942-.L941
	.byte	3,123,1,5,9,9
	.half	.L708-.L942
	.byte	3,5,1,5,8,9
	.half	.L943-.L708
	.byte	3,127,1,5,13,7,9
	.half	.L944-.L943
	.byte	3,2,1,5,39,9
	.half	.L945-.L944
	.byte	1,5,65,9
	.half	.L946-.L945
	.byte	3,127,1,5,53,7,9
	.half	.L947-.L946
	.byte	3,7,1,5,51,9
	.half	.L948-.L947
	.byte	1,5,34,9
	.half	.L709-.L948
	.byte	3,1,1,5,74,3,121,1,5,20,9
	.half	.L52-.L709
	.byte	3,15,1,5,5,9
	.half	.L949-.L52
	.byte	1,5,29,7,9
	.half	.L950-.L949
	.byte	3,7,1,5,54,9
	.half	.L951-.L950
	.byte	1,5,7,9
	.half	.L952-.L951
	.byte	1,5,25,9
	.half	.L953-.L952
	.byte	3,4,1,5,3,9
	.half	.L54-.L953
	.byte	3,9,1,5,1,3,1,1,7,9
	.half	.L283-.L54
	.byte	0,1,1
.L934:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_GetLocalPsprAddress')
	.sect	'.debug_ranges'
.L282:
	.word	-1,.L162,0,.L283-.L162,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_DelayTickResolution')
	.sect	'.debug_info'
.L284:
	.word	192
	.half	3
	.word	.L285
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L287,.L286
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_DelayTickResolution',0,1,141,13,8
	.word	.L440
	.byte	1,1,1
	.word	.L164,.L518,.L163
	.byte	4
	.word	.L164,.L518
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_DelayTickResolution')
	.sect	'.debug_abbrev'
.L285:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_DelayTickResolution')
	.sect	'.debug_line'
.L286:
	.word	.L955-.L954
.L954:
	.half	3
	.word	.L957-.L956
.L956:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L957:
	.byte	5,11,7,0,5,2
	.word	.L164
	.byte	3,143,13,1,5,1,9
	.half	.L958-.L164
	.byte	3,1,1,7,9
	.half	.L288-.L958
	.byte	0,1,1
.L955:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_DelayTickResolution')
	.sect	'.debug_ranges'
.L287:
	.word	-1,.L164,0,.L288-.L164,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_DelayResetTickCalibration')
	.sect	'.debug_info'
.L289:
	.word	228
	.half	3
	.word	.L290
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L292,.L291
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_DelayResetTickCalibration',0,1,173,13,8
	.word	.L440
	.byte	1,1,1
	.word	.L166,.L519,.L165
	.byte	4
	.word	.L166,.L519
	.byte	5
	.byte	'TimerResolution',0,1,176,13,10
	.word	.L440,.L520
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_DelayResetTickCalibration')
	.sect	'.debug_abbrev'
.L290:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_DelayResetTickCalibration')
	.sect	'.debug_line'
.L291:
	.word	.L960-.L959
.L959:
	.half	3
	.word	.L962-.L961
.L961:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L962:
	.byte	5,53,7,0,5,2
	.word	.L166
	.byte	3,183,13,1,5,3,9
	.half	.L710-.L166
	.byte	3,1,1,5,27,9
	.half	.L963-.L710
	.byte	1,5,1,9
	.half	.L964-.L963
	.byte	3,5,1,7,9
	.half	.L293-.L964
	.byte	0,1,1
.L960:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_DelayResetTickCalibration')
	.sect	'.debug_ranges'
.L292:
	.word	-1,.L166,0,.L293-.L166,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_DelayGetTick')
	.sect	'.debug_info'
.L294:
	.word	209
	.half	3
	.word	.L295
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L297,.L296
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_DelayGetTick',0,1,222,13,8
	.word	.L440
	.byte	1,1,1
	.word	.L168,.L521,.L167
	.byte	4
	.word	.L168,.L521
	.byte	5
	.byte	'DelayTick',0,1,224,13,10
	.word	.L440,.L522
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_DelayGetTick')
	.sect	'.debug_abbrev'
.L295:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_DelayGetTick')
	.sect	'.debug_line'
.L296:
	.word	.L966-.L965
.L965:
	.half	3
	.word	.L968-.L967
.L967:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L968:
	.byte	5,22,7,0,5,2
	.word	.L168
	.byte	3,223,13,1,5,1,9
	.half	.L711-.L168
	.byte	3,2,1,7,9
	.half	.L298-.L711
	.byte	0,1,1
.L966:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_DelayGetTick')
	.sect	'.debug_ranges'
.L297:
	.word	-1,.L168,0,.L298-.L168,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_GetCpuIndex')
	.sect	'.debug_info'
.L299:
	.word	207
	.half	3
	.word	.L300
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L302,.L301
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_GetCpuIndex',0,1,253,13,8
	.word	.L440
	.byte	1,1,1
	.word	.L170,.L523,.L169
	.byte	4
	.word	.L170,.L523
	.byte	5
	.byte	'CpuIndex',0,1,255,13,10
	.word	.L440,.L524
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_GetCpuIndex')
	.sect	'.debug_abbrev'
.L300:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_GetCpuIndex')
	.sect	'.debug_line'
.L301:
	.word	.L970-.L969
.L969:
	.half	3
	.word	.L972-.L971
.L971:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L972:
	.byte	5,38,7,0,5,2
	.word	.L170
	.byte	3,254,13,1,5,1,7,9
	.half	.L303-.L170
	.byte	3,6,0,1,1
.L970:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_GetCpuIndex')
	.sect	'.debug_ranges'
.L302:
	.word	-1,.L170,0,.L303-.L170,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_GetSpinlock')
	.sect	'.debug_info'
.L304:
	.word	226
	.half	3
	.word	.L305
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L307,.L306
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_GetSpinlock',0,1,231,14,6,1,1,1
	.word	.L174,.L525,.L173
	.byte	4
	.byte	'LockAddress',0,1,231,14,46
	.word	.L526,.L527
	.byte	4
	.byte	'Timeout',0,1,231,14,72
	.word	.L528,.L529
	.byte	5
	.word	.L174,.L525
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_GetSpinlock')
	.sect	'.debug_abbrev'
.L305:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_GetSpinlock')
	.sect	'.debug_line'
.L306:
	.word	.L974-.L973
.L973:
	.half	3
	.word	.L976-.L975
.L975:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L976:
	.byte	5,45,7,0,5,2
	.word	.L174
	.byte	3,249,14,1,5,1,9
	.half	.L308-.L174
	.byte	3,3,0,1,1
.L974:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_GetSpinlock')
	.sect	'.debug_ranges'
.L307:
	.word	-1,.L174,0,.L308-.L174,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_ReleaseSpinlock')
	.sect	'.debug_info'
.L309:
	.word	209
	.half	3
	.word	.L310
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L312,.L311
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_ReleaseSpinlock',0,1,150,15,6,1,1,1
	.word	.L176,.L530,.L175
	.byte	4
	.byte	'LockAddress',0,1,150,15,51
	.word	.L531,.L532
	.byte	5
	.word	.L176,.L530
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_ReleaseSpinlock')
	.sect	'.debug_abbrev'
.L310:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_ReleaseSpinlock')
	.sect	'.debug_line'
.L311:
	.word	.L978-.L977
.L977:
	.half	3
	.word	.L980-.L979
.L979:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L980:
	.byte	5,27,7,0,5,2
	.word	.L176
	.byte	3,167,15,1,5,1,7,9
	.half	.L313-.L176
	.byte	3,2,0,1,1
.L978:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_ReleaseSpinlock')
	.sect	'.debug_ranges'
.L312:
	.word	-1,.L176,0,.L313-.L176,0,0
	.sdecl	'.debug_info',debug,cluster('McalLib_GetVersionInfo')
	.sect	'.debug_info'
.L314:
	.word	211
	.half	3
	.word	.L315
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L317,.L316
	.byte	2
	.word	.L205
	.byte	3
	.byte	'McalLib_GetVersionInfo',0,1,160,14,7,1,1,1
	.word	.L172,.L533,.L171
	.byte	4
	.byte	'versioninfo',0,1,160,14,57
	.word	.L534,.L535
	.byte	5
	.word	.L172,.L533
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('McalLib_GetVersionInfo')
	.sect	'.debug_abbrev'
.L315:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('McalLib_GetVersionInfo')
	.sect	'.debug_line'
.L316:
	.word	.L982-.L981
.L981:
	.half	3
	.word	.L984-.L983
.L983:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L984:
	.byte	5,63,7,0,5,2
	.word	.L172
	.byte	3,181,14,1,5,53,1,5,63,9
	.half	.L985-.L172
	.byte	3,3,1,5,53,1,5,49,9
	.half	.L986-.L985
	.byte	3,4,1,5,61,3,127,1,5,49,9
	.half	.L987-.L986
	.byte	3,5,1,5,61,3,127,1,5,49,9
	.half	.L988-.L987
	.byte	3,5,1,5,61,3,127,1,5,1,9
	.half	.L989-.L988
	.byte	3,3,1,7,9
	.half	.L318-.L989
	.byte	0,1,1
.L982:
	.sdecl	'.debug_ranges',debug,cluster('McalLib_GetVersionInfo')
	.sect	'.debug_ranges'
.L317:
	.word	-1,.L172,0,.L318-.L172,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_WriteSafetyEndInitProtReg16')
	.sect	'.debug_info'
.L319:
	.word	243
	.half	3
	.word	.L320
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L322,.L321
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_WriteSafetyEndInitProtReg16',0,1,246,6,6,1,1,1
	.word	.L136,.L536,.L135
	.byte	4
	.byte	'RegAddress',0,1,246,6,60
	.word	.L537,.L538
	.byte	4
	.byte	'DataValue',0,1,247,6,52
	.word	.L539,.L540
	.byte	5
	.word	.L136,.L536
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_WriteSafetyEndInitProtReg16')
	.sect	'.debug_abbrev'
.L320:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_WriteSafetyEndInitProtReg16')
	.sect	'.debug_line'
.L321:
	.word	.L991-.L990
.L990:
	.half	3
	.word	.L993-.L992
.L992:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L993:
	.byte	5,41,7,0,5,2
	.word	.L136
	.byte	3,145,7,1,9
	.half	.L994-.L136
	.byte	3,1,1,9
	.half	.L995-.L994
	.byte	3,1,1,5,1,9
	.half	.L323-.L995
	.byte	3,3,0,1,1
.L991:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_WriteSafetyEndInitProtReg16')
	.sect	'.debug_ranges'
.L322:
	.word	-1,.L136,0,.L323-.L136,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_lGetCpuIndex')
	.sect	'.debug_info'
.L324:
	.word	210
	.half	3
	.word	.L325
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L327,.L326
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_lGetCpuIndex',0,1,209,19,21
	.word	.L440
	.byte	1,1
	.word	.L188,.L541,.L187
	.byte	4
	.word	.L188,.L541
	.byte	5
	.byte	'CoreIdIndex',0,1,214,19,10
	.word	.L440,.L542
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_lGetCpuIndex')
	.sect	'.debug_abbrev'
.L325:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_lGetCpuIndex')
	.sect	'.debug_line'
.L326:
	.word	.L997-.L996
.L996:
	.half	3
	.word	.L999-.L998
.L998:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L999:
	.byte	5,32,7,0,5,2
	.word	.L188
	.byte	3,213,19,1,5,19,9
	.half	.L737-.L188
	.byte	3,7,1,5,31,9
	.half	.L1000-.L737
	.byte	3,2,1,5,1,3,8,1,7,9
	.half	.L328-.L1000
	.byte	0,1,1
.L997:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_lGetCpuIndex')
	.sect	'.debug_ranges'
.L327:
	.word	-1,.L188,0,.L328-.L188,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_lDecryptPw')
	.sect	'.debug_info'
.L329:
	.word	201
	.half	3
	.word	.L330
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L332,.L331
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_lDecryptPw',0,1,202,16,21
	.word	.L543
	.byte	1,1
	.word	.L182,.L544,.L181
	.byte	4
	.byte	'Value',0,1,202,16,50
	.word	.L545,.L546
	.byte	5
	.word	.L182,.L544
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_lDecryptPw')
	.sect	'.debug_abbrev'
.L330:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_lDecryptPw')
	.sect	'.debug_line'
.L331:
	.word	.L1002-.L1001
.L1001:
	.half	3
	.word	.L1004-.L1003
.L1003:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1004:
	.byte	5,64,7,0,5,2
	.word	.L182
	.byte	3,206,16,1,5,27,9
	.half	.L715-.L182
	.byte	1,5,49,9
	.half	.L1005-.L715
	.byte	3,1,1,5,1,3,2,1,7,9
	.half	.L333-.L1005
	.byte	0,1,1
.L1002:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_lDecryptPw')
	.sect	'.debug_ranges'
.L332:
	.word	-1,.L182,0,.L333-.L182,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_lDelayResetTickCalibration')
	.sect	'.debug_info'
.L334:
	.word	447
	.half	3
	.word	.L335
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L337,.L336
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_lDelayResetTickCalibration',0,1,157,18,21
	.word	.L440
	.byte	1,1
	.word	.L186,.L547,.L185
	.byte	4
	.byte	'ApiId',0,1,157,18,65
	.word	.L548,.L549
	.byte	5
	.word	.L186,.L547
	.byte	6
	.byte	'StmFreq',0,1,159,18,11
	.word	.L550,.L551
	.byte	6
	.byte	'LocalStmTimerResol',0,1,160,18,11
	.word	.L550,.L552
	.byte	6
	.byte	'OscFreq',0,1,161,18,10
	.word	.L440,.L553
	.byte	6
	.byte	'StmDiv',0,1,162,18,9
	.word	.L492,.L554
	.byte	6
	.byte	'Src0ClkSel',0,1,162,18,17
	.word	.L492,.L555
	.byte	6
	.byte	'PLL0Ndiv',0,1,162,18,29
	.word	.L492,.L556
	.byte	6
	.byte	'PLL0Pdiv',0,1,162,18,39
	.word	.L492,.L557
	.byte	6
	.byte	'PLL0K2div',0,1,162,18,49
	.word	.L492,.L558
	.byte	6
	.byte	'Oscval',0,1,162,18,60
	.word	.L492,.L559
	.byte	6
	.byte	'PLL0ClkSel',0,1,162,18,68
	.word	.L492,.L560
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_lDelayResetTickCalibration')
	.sect	'.debug_abbrev'
.L335:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_lDelayResetTickCalibration')
	.sect	'.debug_line'
.L336:
	.word	.L1007-.L1006
.L1006:
	.half	3
	.word	.L1009-.L1008
.L1008:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1009:
	.byte	5,30,7,0,5,2
	.word	.L186
	.byte	3,159,18,1,5,3,3,7,1,5,51,9
	.half	.L726-.L186
	.byte	3,2,1,5,56,9
	.half	.L1010-.L726
	.byte	1,5,52,3,2,1,5,56,9
	.half	.L727-.L1010
	.byte	1,5,55,3,3,1,5,59,9
	.half	.L1011-.L727
	.byte	3,126,1,5,60,9
	.half	.L728-.L1011
	.byte	3,3,1,5,55,3,2,1,5,54,9
	.half	.L1012-.L728
	.byte	3,3,1,5,60,9
	.half	.L1013-.L1012
	.byte	3,126,1,5,58,9
	.half	.L1014-.L1013
	.byte	3,2,1,5,68,9
	.half	.L1015-.L1014
	.byte	3,1,1,5,51,3,1,1,5,67,9
	.half	.L729-.L1015
	.byte	3,122,1,5,55,9
	.half	.L1016-.L729
	.byte	3,9,1,9
	.half	.L1017-.L1016
	.byte	3,125,1,5,67,9
	.half	.L730-.L1017
	.byte	3,125,1,5,58,9
	.half	.L731-.L730
	.byte	3,4,1,5,59,9
	.half	.L1018-.L731
	.byte	3,2,1,5,3,3,6,1,9
	.half	.L733-.L1018
	.byte	3,5,1,5,5,7,9
	.half	.L1019-.L733
	.byte	3,14,1,5,31,9
	.half	.L1020-.L1019
	.byte	1,5,29,1,5,56,9
	.half	.L732-.L1020
	.byte	1,5,28,9
	.half	.L86-.L732
	.byte	3,40,1,5,5,9
	.half	.L1021-.L86
	.byte	3,95,1,5,14,7,9
	.half	.L1022-.L1021
	.byte	3,5,1,5,7,9
	.half	.L1023-.L1022
	.byte	1,5,37,7,9
	.half	.L1024-.L1023
	.byte	3,11,1,5,11,3,2,1,5,19,9
	.half	.L89-.L1024
	.byte	3,4,1,5,39,9
	.half	.L90-.L89
	.byte	3,6,1,5,20,9
	.half	.L1025-.L90
	.byte	1,5,40,9
	.half	.L735-.L1025
	.byte	3,1,1,5,37,9
	.half	.L1026-.L735
	.byte	3,127,1,5,20,9
	.half	.L1027-.L1026
	.byte	3,1,1,5,38,9
	.half	.L1028-.L1027
	.byte	1,5,58,9
	.half	.L1029-.L1028
	.byte	3,127,1,5,60,3,1,1,5,17,9
	.half	.L88-.L1029
	.byte	3,12,1,5,48,9
	.half	.L91-.L88
	.byte	1,5,27,9
	.half	.L736-.L91
	.byte	3,10,1,5,54,9
	.half	.L1030-.L736
	.byte	1,5,11,9
	.half	.L87-.L1030
	.byte	3,12,1,5,1,3,1,1,7,9
	.half	.L338-.L87
	.byte	0,1,1
.L1007:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_lDelayResetTickCalibration')
	.sect	'.debug_ranges'
.L337:
	.word	-1,.L186,0,.L338-.L186,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_lCpuRelValue')
	.sect	'.debug_info'
.L339:
	.word	261
	.half	3
	.word	.L340
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L342,.L341
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_lCpuRelValue',0,1,139,16,21
	.word	.L440
	.byte	1,1
	.word	.L180,.L561,.L179
	.byte	4
	.byte	'CpuIndex',0,1,139,16,52
	.word	.L562,.L563
	.byte	4
	.byte	'WdtCpuCon0Value',0,1,140,16,52
	.word	.L564,.L565
	.byte	5
	.word	.L180,.L561
	.byte	6
	.byte	'TimerReload',0,1,142,16,10
	.word	.L440,.L566
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_lCpuRelValue')
	.sect	'.debug_abbrev'
.L340:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_lCpuRelValue')
	.sect	'.debug_line'
.L341:
	.word	.L1032-.L1031
.L1031:
	.half	3
	.word	.L1034-.L1033
.L1033:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1034:
	.byte	5,7,7,0,5,2
	.word	.L180
	.byte	3,146,16,1,5,3,9
	.half	.L1035-.L180
	.byte	1,5,52,7,9
	.half	.L1036-.L1035
	.byte	3,9,1,5,21,9
	.half	.L1037-.L1036
	.byte	3,3,1,5,48,9
	.half	.L1038-.L1037
	.byte	3,126,1,5,21,9
	.half	.L1039-.L1038
	.byte	3,2,1,5,35,9
	.half	.L1040-.L1039
	.byte	1,5,1,3,15,1,5,73,7,9
	.half	.L66-.L1040
	.byte	3,122,1,5,1,3,6,1,7,9
	.half	.L343-.L66
	.byte	0,1,1
.L1032:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_lCpuRelValue')
	.sect	'.debug_ranges'
.L342:
	.word	-1,.L180,0,.L343-.L180,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_lCpuPwSequence')
	.sect	'.debug_info'
.L344:
	.word	260
	.half	3
	.word	.L345
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L347,.L346
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_lCpuPwSequence',0,1,203,15,22
	.word	.L440
	.byte	1,1
	.word	.L178,.L567,.L177
	.byte	4
	.byte	'CpuIndex',0,1,203,15,55
	.word	.L568,.L569
	.byte	4
	.byte	'WdtCpuCon0Value',0,1,204,15,55
	.word	.L570,.L571
	.byte	5
	.word	.L178,.L567
	.byte	6
	.byte	'Password',0,1,210,15,10
	.word	.L440,.L572
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_lCpuPwSequence')
	.sect	'.debug_abbrev'
.L345:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_lCpuPwSequence')
	.sect	'.debug_line'
.L346:
	.word	.L1042-.L1041
.L1041:
	.half	3
	.word	.L1044-.L1043
.L1043:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1044:
	.byte	5,22,7,0,5,2
	.word	.L178
	.byte	3,202,15,1,5,37,9
	.half	.L713-.L178
	.byte	3,7,1,5,7,9
	.half	.L712-.L713
	.byte	3,5,1,5,3,9
	.half	.L1045-.L712
	.byte	1,5,28,7,9
	.half	.L1046-.L1045
	.byte	3,13,1,5,32,9
	.half	.L1047-.L1046
	.byte	3,124,1,5,51,9
	.half	.L1048-.L1047
	.byte	1,5,39,9
	.half	.L1049-.L1048
	.byte	1,5,32,9
	.half	.L1050-.L1049
	.byte	3,1,1,5,72,9
	.half	.L1051-.L1050
	.byte	3,127,1,5,32,9
	.half	.L1052-.L1051
	.byte	3,2,1,5,56,9
	.half	.L1053-.L1052
	.byte	3,127,1,5,53,9
	.half	.L1054-.L1053
	.byte	3,1,1,5,35,9
	.half	.L1055-.L1054
	.byte	3,2,1,5,52,9
	.half	.L1056-.L1055
	.byte	1,5,1,9
	.half	.L64-.L1056
	.byte	3,8,1,7,9
	.half	.L348-.L64
	.byte	0,1,1
.L1042:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_lCpuPwSequence')
	.sect	'.debug_ranges'
.L347:
	.word	-1,.L178,0,.L348-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_lWriteSafetyEndInitProtection')
	.sect	'.debug_info'
.L349:
	.word	404
	.half	3
	.word	.L350
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L352,.L351
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_lWriteSafetyEndInitProtection',0,1,248,16,19,1,1
	.word	.L184,.L573,.L183
	.byte	4
	.byte	'RegAddress',0,1,249,16,70
	.word	.L574,.L575
	.byte	4
	.byte	'DataValue',0,1,250,16,62
	.word	.L576,.L577
	.byte	4
	.byte	'Mask',0,1,251,16,62
	.word	.L578,.L579
	.byte	4
	.byte	'Accesstype',0,1,252,16,62
	.word	.L580,.L581
	.byte	4
	.byte	'ApiId',0,1,253,16,62
	.word	.L582,.L583
	.byte	5
	.word	.L184,.L573
	.byte	6
	.byte	'RegAddress32',0,1,131,17,26
	.word	.L584,.L585
	.byte	6
	.byte	'RegAddress16',0,1,136,17,26
	.word	.L586,.L587
	.byte	6
	.byte	'TempData',0,1,137,17,10
	.word	.L440,.L588
	.byte	6
	.byte	'MaskedData',0,1,145,17,10
	.word	.L440,.L589
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_lWriteSafetyEndInitProtection')
	.sect	'.debug_abbrev'
.L350:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_lWriteSafetyEndInitProtection')
	.sect	'.debug_line'
.L351:
	.word	.L1058-.L1057
.L1057:
	.half	3
	.word	.L1060-.L1059
.L1059:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1060:
	.byte	5,19,7,0,5,2
	.word	.L184
	.byte	3,247,16,1,5,33,9
	.half	.L717-.L184
	.byte	3,25,1,5,19,9
	.half	.L719-.L717
	.byte	3,103,1,5,3,9
	.half	.L721-.L719
	.byte	3,31,1,5,22,9
	.half	.L716-.L721
	.byte	3,6,1,5,28,9
	.half	.L1061-.L716
	.byte	3,1,1,5,59,1,5,35,9
	.half	.L1062-.L1061
	.byte	3,6,1,5,29,9
	.half	.L1063-.L1062
	.byte	3,1,1,9
	.half	.L1064-.L1063
	.byte	3,1,1,9
	.half	.L1065-.L1064
	.byte	3,104,1,5,18,9
	.half	.L723-.L1065
	.byte	3,29,1,5,3,9
	.half	.L1066-.L723
	.byte	1,5,5,7,9
	.half	.L1067-.L1066
	.byte	3,5,1,5,7,7,9
	.half	.L1068-.L1067
	.byte	3,4,1,5,23,7,9
	.half	.L1069-.L1068
	.byte	3,2,1,5,35,9
	.half	.L1070-.L1069
	.byte	1,5,63,9
	.half	.L72-.L1070
	.byte	3,5,1,5,39,1,5,63,9
	.half	.L722-.L72
	.byte	1,5,53,9
	.half	.L718-.L722
	.byte	1,5,70,9
	.half	.L724-.L718
	.byte	1,5,23,3,3,1,5,7,9
	.half	.L720-.L724
	.byte	3,122,1,5,21,9
	.half	.L71-.L720
	.byte	3,15,1,5,5,9
	.half	.L1071-.L71
	.byte	3,122,1,5,20,9
	.half	.L70-.L1071
	.byte	3,21,1,5,12,9
	.half	.L725-.L70
	.byte	3,2,1,9
	.half	.L1072-.L725
	.byte	3,6,1,9
	.half	.L1073-.L1072
	.byte	3,3,1,9
	.half	.L1074-.L1073
	.byte	3,3,1,9
	.half	.L1075-.L1074
	.byte	3,119,1,5,11,9
	.half	.L76-.L1075
	.byte	3,126,1,9
	.half	.L1076-.L76
	.byte	3,1,1,9
	.half	.L80-.L1076
	.byte	3,2,1,9
	.half	.L1077-.L80
	.byte	3,1,1,9
	.half	.L77-.L1077
	.byte	3,2,1,9
	.half	.L1078-.L77
	.byte	3,1,1,9
	.half	.L78-.L1078
	.byte	3,2,1,9
	.half	.L1079-.L78
	.byte	3,1,1,9
	.half	.L79-.L1079
	.byte	3,2,1,5,35,9
	.half	.L73-.L79
	.byte	3,12,1,5,29,9
	.half	.L1080-.L73
	.byte	3,1,1,9
	.half	.L1081-.L1080
	.byte	3,1,1,5,26,9
	.half	.L1082-.L1081
	.byte	3,6,1,5,3,9
	.half	.L1083-.L1082
	.byte	3,5,1,5,1,7,9
	.half	.L353-.L1083
	.byte	3,1,0,1,1
.L1058:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_lWriteSafetyEndInitProtection')
	.sect	'.debug_ranges'
.L352:
	.word	-1,.L184,0,.L353-.L184,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_lUpdateCpuEndInit')
	.sect	'.debug_info'
.L354:
	.word	558
	.half	3
	.word	.L355
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L357,.L356
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_lUpdateCpuEndInit',0,1,146,22,34
	.word	.L447
	.byte	1,1
	.word	.L198,.L590,.L197
	.byte	4
	.byte	'NewPassword',0,1,147,22,52
	.word	.L591,.L592
	.byte	4
	.byte	'CoreIdIndex',0,1,148,22,52
	.word	.L593,.L594
	.byte	4
	.byte	'TimerRelValAtReset',0,1,149,22,52
	.word	.L595,.L596
	.byte	4
	.byte	'UpdatePassword',0,1,150,22,52
	.word	.L597,.L598
	.byte	4
	.byte	'SetResetProtection',0,1,151,22,52
	.word	.L599,.L600
	.byte	5
	.word	.L198,.L590
	.byte	6
	.byte	'CpuEndInitRet',0,1,153,22,29
	.word	.L447,.L601
	.byte	6
	.byte	'UnlockCpuWdtCon0Value',0,1,154,22,10
	.word	.L440,.L602
	.byte	6
	.byte	'NewCpuWdtCon0Value',0,1,155,22,10
	.word	.L440,.L603
	.byte	6
	.byte	'UnlockTimerReload',0,1,156,22,10
	.word	.L440,.L604
	.byte	6
	.byte	'CpuWdtCon0Value',0,1,157,22,10
	.word	.L440,.L605
	.byte	6
	.byte	'UnlockPassword',0,1,158,22,10
	.word	.L440,.L606
	.byte	6
	.byte	'TimerReload',0,1,159,22,10
	.word	.L440,.L607
	.byte	6
	.byte	'dummy',0,1,166,22,19
	.word	.L608,.L609
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_lUpdateCpuEndInit')
	.sect	'.debug_abbrev'
.L355:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_lUpdateCpuEndInit')
	.sect	'.debug_line'
.L356:
	.word	.L1085-.L1084
.L1084:
	.half	3
	.word	.L1087-.L1086
.L1086:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1087:
	.byte	5,34,7,0,5,2
	.word	.L198
	.byte	3,145,22,1,5,39,9
	.half	.L752-.L198
	.byte	3,26,1,5,34,3,102,1,5,39,9
	.half	.L759-.L752
	.byte	3,26,1,5,34,9
	.half	.L1088-.L759
	.byte	3,102,1,5,38,9
	.half	.L757-.L1088
	.byte	3,23,1,5,39,3,3,1,5,57,9
	.half	.L1089-.L757
	.byte	1,5,61,9
	.half	.L760-.L1089
	.byte	3,3,1,5,62,9
	.half	.L762-.L760
	.byte	3,4,1,5,47,9
	.half	.L765-.L762
	.byte	3,4,1,5,52,9
	.half	.L755-.L765
	.byte	3,4,1,5,30,9
	.half	.L766-.L755
	.byte	3,4,1,5,27,9
	.half	.L758-.L766
	.byte	3,1,1,5,62,9
	.half	.L763-.L758
	.byte	3,127,1,5,57,9
	.half	.L1090-.L763
	.byte	3,1,1,5,3,3,7,1,5,26,9
	.half	.L767-.L1090
	.byte	3,116,1,5,39,9
	.half	.L770-.L767
	.byte	3,21,1,5,3,9
	.half	.L1091-.L770
	.byte	3,119,1,5,39,7,9
	.half	.L1092-.L1091
	.byte	3,10,1,5,71,9
	.half	.L771-.L1092
	.byte	3,127,1,9
	.half	.L1093-.L771
	.byte	3,1,1,5,56,3,1,1,5,42,9
	.half	.L104-.L1093
	.byte	3,18,1,5,52,9
	.half	.L772-.L104
	.byte	1,5,73,9
	.half	.L1094-.L772
	.byte	3,127,1,5,5,9
	.half	.L1095-.L1094
	.byte	3,119,1,5,57,7,9
	.half	.L773-.L1095
	.byte	3,11,1,5,68,3,1,1,5,57,9
	.half	.L106-.L773
	.byte	3,14,1,5,40,9
	.half	.L1096-.L106
	.byte	3,3,1,5,41,9
	.half	.L105-.L1096
	.byte	3,5,1,5,3,9
	.half	.L1097-.L105
	.byte	3,14,1,5,46,9
	.half	.L1098-.L1097
	.byte	3,116,1,5,9,9
	.half	.L768-.L1098
	.byte	1,5,41,9
	.half	.L1099-.L768
	.byte	3,3,1,5,46,9
	.half	.L1100-.L1099
	.byte	3,2,1,5,9,9
	.half	.L774-.L1100
	.byte	1,5,3,9
	.half	.L1101-.L774
	.byte	3,2,1,5,1,9
	.half	.L1102-.L1101
	.byte	3,6,1,7,9
	.half	.L358-.L1102
	.byte	0,1,1
.L1085:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_lUpdateCpuEndInit')
	.sect	'.debug_ranges'
.L357:
	.word	-1,.L198,0,.L358-.L198,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_lUpdatePeripheralEndInit')
	.sect	'.debug_info'
.L359:
	.word	348
	.half	3
	.word	.L360
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L362,.L361
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_lUpdatePeripheralEndInit',0,1,141,21,15
	.word	.L440
	.byte	1,1
	.word	.L196,.L610,.L195
	.byte	4
	.byte	'NewPassword',0,1,141,21,58
	.word	.L611,.L612
	.byte	4
	.byte	'UpdatePassword',0,1,142,21,59
	.word	.L613,.L614
	.byte	4
	.byte	'SetResetProtection',0,1,143,21,59
	.word	.L615,.L616
	.byte	5
	.word	.L196,.L610
	.byte	6
	.byte	'Password',0,1,145,21,10
	.word	.L440,.L617
	.byte	6
	.byte	'Eicon0Value',0,1,146,21,10
	.word	.L440,.L618
	.byte	6
	.byte	'dummy',0,1,153,21,19
	.word	.L619,.L620
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_lUpdatePeripheralEndInit')
	.sect	'.debug_abbrev'
.L360:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_lUpdatePeripheralEndInit')
	.sect	'.debug_line'
.L361:
	.word	.L1104-.L1103
.L1103:
	.half	3
	.word	.L1106-.L1105
.L1105:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1106:
	.byte	5,15,7,0,5,2
	.word	.L196
	.byte	3,140,21,1,5,56,3,19,1,5,15,9
	.half	.L749-.L196
	.byte	3,109,1,5,56,3,19,1,5,15,9
	.half	.L747-.L749
	.byte	3,109,1,5,30,9
	.half	.L746-.L747
	.byte	3,19,1,5,39,9
	.half	.L751-.L746
	.byte	3,11,1,5,3,9
	.half	.L748-.L751
	.byte	3,18,1,5,25,7,9
	.half	.L750-.L748
	.byte	3,14,1,5,30,9
	.half	.L1107-.L750
	.byte	3,3,1,5,11,9
	.half	.L1108-.L1107
	.byte	1,5,43,9
	.half	.L1109-.L1108
	.byte	3,120,1,5,50,9
	.half	.L1110-.L1109
	.byte	3,2,1,5,25,9
	.half	.L101-.L1110
	.byte	3,24,1,5,30,9
	.half	.L102-.L101
	.byte	3,5,1,5,11,9
	.half	.L1111-.L102
	.byte	1,5,3,9
	.half	.L1112-.L1111
	.byte	3,3,1,5,1,9
	.half	.L1113-.L1112
	.byte	3,7,1,7,9
	.half	.L363-.L1113
	.byte	0,1,1
.L1104:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_lUpdatePeripheralEndInit')
	.sect	'.debug_ranges'
.L362:
	.word	-1,.L196,0,.L363-.L196,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_lUpdateSafetyEndInit')
	.sect	'.debug_info'
.L364:
	.word	341
	.half	3
	.word	.L365
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L367,.L366
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_lUpdateSafetyEndInit',0,1,134,20,15
	.word	.L440
	.byte	1,1
	.word	.L190,.L621,.L189
	.byte	4
	.byte	'NewPassword',0,1,134,20,54
	.word	.L622,.L623
	.byte	4
	.byte	'UpdatePassword',0,1,135,20,55
	.word	.L624,.L625
	.byte	4
	.byte	'SetResetProtection',0,1,136,20,55
	.word	.L626,.L627
	.byte	5
	.word	.L628
	.byte	6
	.byte	'Password',0,1,138,20,10
	.word	.L440,.L629
	.byte	6
	.byte	'Seicon0Value',0,1,139,20,10
	.word	.L440,.L630
	.byte	6
	.byte	'dummy',0,1,146,20,19
	.word	.L631,.L632
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_lUpdateSafetyEndInit')
	.sect	'.debug_abbrev'
.L365:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_lUpdateSafetyEndInit')
	.sect	'.debug_line'
.L366:
	.word	.L1115-.L1114
.L1114:
	.half	3
	.word	.L1117-.L1116
.L1116:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1117:
	.byte	5,15,7,0,5,2
	.word	.L190
	.byte	3,133,20,1,5,57,3,18,1,5,15,9
	.half	.L741-.L190
	.byte	3,110,1,5,57,3,18,1,5,15,9
	.half	.L739-.L741
	.byte	3,110,1,5,30,9
	.half	.L738-.L739
	.byte	3,18,1,5,39,9
	.half	.L742-.L738
	.byte	3,12,1,5,3,9
	.half	.L740-.L742
	.byte	3,16,1,5,26,7,9
	.half	.L745-.L740
	.byte	3,17,1,5,31,9
	.half	.L1118-.L745
	.byte	3,6,1,5,11,9
	.half	.L1119-.L1118
	.byte	1,5,44,9
	.half	.L1120-.L1119
	.byte	3,114,1,5,60,9
	.half	.L1121-.L1120
	.byte	3,2,1,5,26,9
	.half	.L96-.L1121
	.byte	3,34,1,5,31,9
	.half	.L97-.L96
	.byte	3,5,1,5,11,9
	.half	.L1122-.L97
	.byte	1,5,3,9
	.half	.L1123-.L1122
	.byte	3,3,1,5,1,9
	.half	.L1124-.L1123
	.byte	3,6,1,7,9
	.half	.L368-.L1124
	.byte	0,1,1
.L1115:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_lUpdateSafetyEndInit')
	.sect	'.debug_ranges'
.L367:
	.word	-1,.L190,0,.L368-.L190,0,0
.L628:
	.word	-1,.L190,0,.L621-.L190,-1,.L192,0,.L418-.L192,-1,.L194,0,.L388-.L194,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_lCalculateTimerReloadVal')
	.sect	'.debug_info'
.L369:
	.word	306
	.half	3
	.word	.L370
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L372,.L371
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_lCalculateTimerReloadVal',0,1,168,23,21
	.word	.L440
	.byte	1,1
	.word	.L200,.L633,.L199
	.byte	4
	.byte	'CoreId',0,1,168,23,64
	.word	.L634,.L635
	.byte	4
	.byte	'TimerRelValAtReset',0,1,169,23,51
	.word	.L636,.L637
	.byte	4
	.byte	'SetResetProtection',0,1,170,23,52
	.word	.L638,.L639
	.byte	5
	.word	.L200,.L633
	.byte	6
	.byte	'TimerReload',0,1,172,23,10
	.word	.L440,.L640
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_lCalculateTimerReloadVal')
	.sect	'.debug_abbrev'
.L370:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_lCalculateTimerReloadVal')
	.sect	'.debug_line'
.L371:
	.word	.L1126-.L1125
.L1125:
	.half	3
	.word	.L1128-.L1127
.L1127:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1128:
	.byte	5,24,7,0,5,2
	.word	.L200
	.byte	3,171,23,1,5,3,9
	.half	.L775-.L200
	.byte	3,4,1,5,31,7,9
	.half	.L1129-.L775
	.byte	3,9,1,5,33,9
	.half	.L776-.L1129
	.byte	3,121,1,5,31,9
	.half	.L1130-.L776
	.byte	1,5,22,9
	.half	.L1131-.L1130
	.byte	3,9,1,5,20,9
	.half	.L1132-.L1131
	.byte	1,5,1,9
	.half	.L109-.L1132
	.byte	3,7,1,7,9
	.half	.L373-.L109
	.byte	0,1,1
.L1126:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_lCalculateTimerReloadVal')
	.sect	'.debug_ranges'
.L372:
	.word	-1,.L200,0,.L373-.L200,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_lGetSpinlock')
	.sect	'.debug_info'
.L374:
	.word	401
	.half	3
	.word	.L375
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L377,.L376
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_lGetSpinlock',0,1,227,23,13,1,1
	.word	.L202,.L641,.L201
	.byte	4
	.byte	'LockAddress',0,1,227,23,54
	.word	.L642,.L643
	.byte	4
	.byte	'Timeout',0,1,228,23,44
	.word	.L644,.L645
	.byte	4
	.byte	'ApiId',0,1,228,23,65
	.word	.L646,.L647
	.byte	5
	.word	.L202,.L641
	.byte	6
	.byte	'LockAddVal',0,1,230,23,10
	.word	.L440,.L648
	.byte	6
	.byte	'DelayTickResolution',0,1,231,23,10
	.word	.L440,.L649
	.byte	6
	.byte	'LockAddRet',0,1,232,23,10
	.word	.L440,.L650
	.byte	6
	.byte	'DelayTicks',0,1,233,23,10
	.word	.L440,.L651
	.byte	6
	.byte	'BaseSTMTick',0,1,233,23,22
	.word	.L440,.L652
	.byte	6
	.byte	'CurrSTMTick',0,1,233,23,35
	.word	.L440,.L653
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_lGetSpinlock')
	.sect	'.debug_abbrev'
.L375:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_lGetSpinlock')
	.sect	'.debug_line'
.L376:
	.word	.L1134-.L1133
.L1133:
	.half	3
	.word	.L1136-.L1135
.L1135:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1136:
	.byte	5,6,7,0,5,2
	.word	.L202
	.byte	3,236,23,1,5,13,9
	.half	.L1137-.L202
	.byte	3,118,1,5,6,3,10,1,5,13,9
	.half	.L777-.L1137
	.byte	3,118,1,5,3,9
	.half	.L779-.L777
	.byte	3,10,1,5,46,7,9
	.half	.L1138-.L779
	.byte	3,3,1,5,3,9
	.half	.L111-.L1138
	.byte	3,11,1,5,28,7,9
	.half	.L1139-.L111
	.byte	3,5,1,5,27,3,1,1,5,53,9
	.half	.L780-.L1139
	.byte	3,127,1,5,27,3,1,1,5,20,9
	.half	.L778-.L780
	.byte	3,46,1,5,51,9
	.half	.L781-.L778
	.byte	3,81,1,5,25,9
	.half	.L1140-.L781
	.byte	3,2,1,5,49,3,22,1,5,29,9
	.half	.L116-.L1140
	.byte	3,3,1,5,35,9
	.half	.L115-.L116
	.byte	3,124,1,5,22,3,5,1,5,13,9
	.half	.L782-.L115
	.byte	3,123,1,5,25,7,9
	.half	.L1141-.L782
	.byte	3,1,1,5,20,7,9
	.half	.L117-.L1141
	.byte	3,23,1,5,7,9
	.half	.L1142-.L117
	.byte	3,6,1,5,22,7,9
	.half	.L1143-.L1142
	.byte	3,1,1,5,37,9
	.half	.L784-.L1143
	.byte	1,5,1,7,9
	.half	.L113-.L784
	.byte	3,26,1,7,9
	.half	.L378-.L113
	.byte	0,1,1
.L1134:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_lGetSpinlock')
	.sect	'.debug_ranges'
.L377:
	.word	-1,.L202,0,.L378-.L202,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_lReleaseSpinlock')
	.sect	'.debug_info'
.L379:
	.word	209
	.half	3
	.word	.L380
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L382,.L381
	.byte	2
	.word	.L205
	.byte	3
	.byte	'Mcal_lReleaseSpinlock',0,1,233,24,19,1,1
	.word	.L204,.L654,.L203
	.byte	4
	.byte	'LockAddress',0,1,233,24,65
	.word	.L655,.L656
	.byte	5
	.word	.L204,.L654
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_lReleaseSpinlock')
	.sect	'.debug_abbrev'
.L380:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Mcal_lReleaseSpinlock')
	.sect	'.debug_line'
.L381:
	.word	.L1145-.L1144
.L1144:
	.half	3
	.word	.L1147-.L1146
.L1146:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1147:
	.byte	5,3,7,0,5,2
	.word	.L204
	.byte	3,237,24,1,9
	.half	.L1148-.L204
	.byte	3,3,1,5,1,9
	.half	.L1149-.L1148
	.byte	3,9,1,7,9
	.half	.L383-.L1149
	.byte	0,1,1
.L1145:
	.sdecl	'.debug_ranges',debug,cluster('Mcal_lReleaseSpinlock')
	.sect	'.debug_ranges'
.L382:
	.word	-1,.L204,0,.L383-.L204,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_1')
	.sect	'.debug_info'
.L384:
	.word	162
	.half	3
	.word	.L385
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L387,.L386
	.byte	2
	.word	.L205
	.byte	3
	.byte	'.cocofun_1',0,1,134,20,15,1
	.word	.L194,.L388,.L193
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_1')
	.sect	'.debug_abbrev'
.L385:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_1')
	.sect	'.debug_line'
.L386:
	.word	.L1151-.L1150
.L1150:
	.half	3
	.word	.L1153-.L1152
.L1152:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1153:
	.byte	5,39,7,0,5,2
	.word	.L194
	.byte	3,163,20,1,5,3,9
	.half	.L1154-.L194
	.byte	3,121,1,5,20,7,9
	.half	.L1155-.L1154
	.byte	3,6,1,5,50,9
	.half	.L743-.L1155
	.byte	3,3,1,5,21,9
	.half	.L94-.L743
	.byte	3,7,1,5,37,9
	.half	.L95-.L94
	.byte	3,1,1,9
	.half	.L388-.L95
	.byte	0,1,1,5,39,0,5,2
	.word	.L194
	.byte	3,170,21,1,5,3,9
	.half	.L1154-.L194
	.byte	3,120,1,5,20,7,9
	.half	.L1155-.L1154
	.byte	3,7,1,5,49,9
	.half	.L743-.L1155
	.byte	3,3,1,5,20,9
	.half	.L94-.L743
	.byte	3,8,1,5,37,9
	.half	.L95-.L94
	.byte	3,1,1,3,248,126,1,7,9
	.half	.L388-.L95
	.byte	0,1,1
.L1151:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_1')
	.sect	'.debug_ranges'
.L387:
	.word	-1,.L194,0,.L388-.L194,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L389:
	.word	162
	.half	3
	.word	.L390
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L392,.L391
	.byte	2
	.word	.L205
	.byte	3
	.byte	'.cocofun_2',0,1,197,11,8,1
	.word	.L160,.L393,.L159
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L390:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L391:
	.word	.L1157-.L1156
.L1156:
	.half	3
	.word	.L1159-.L1158
.L1158:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1159:
	.byte	5,21,7,0,5,2
	.word	.L160
	.byte	3,232,11,1,5,42,9
	.half	.L697-.L160
	.byte	1,9
	.half	.L393-.L697
	.byte	0,1,1,5,21,0,5,2
	.word	.L160
	.byte	3,232,11,1,5,43,9
	.half	.L697-.L160
	.byte	3,10,1,5,42,9
	.half	.L1160-.L697
	.byte	3,118,1,7,9
	.half	.L393-.L1160
	.byte	0,1,1
.L1157:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L392:
	.word	-1,.L160,0,.L393-.L160,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L394:
	.word	162
	.half	3
	.word	.L395
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L397,.L396
	.byte	2
	.word	.L205
	.byte	3
	.byte	'.cocofun_3',0,1,197,11,8,1
	.word	.L158,.L398,.L157
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L395:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L396:
	.word	.L1162-.L1161
.L1161:
	.half	3
	.word	.L1164-.L1163
.L1163:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1164:
	.byte	5,13,7,0,5,2
	.word	.L158
	.byte	3,233,11,1,5,40,9
	.half	.L1165-.L158
	.byte	1,9
	.half	.L398-.L1165
	.byte	0,1,1,5,32,0,5,2
	.word	.L158
	.byte	3,250,11,1,5,59,9
	.half	.L1165-.L158
	.byte	1,5,40,9
	.half	.L1166-.L1165
	.byte	3,111,1,7,9
	.half	.L398-.L1166
	.byte	0,1,1
.L1162:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L397:
	.word	-1,.L158,0,.L398-.L158,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L399:
	.word	162
	.half	3
	.word	.L400
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L402,.L401
	.byte	2
	.word	.L205
	.byte	3
	.byte	'.cocofun_4',0,1,213,3,8,1
	.word	.L124,.L403,.L123
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L400:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L401:
	.word	.L1168-.L1167
.L1167:
	.half	3
	.word	.L1170-.L1169
.L1169:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1170:
	.byte	5,14,7,0,5,2
	.word	.L124
	.byte	3,222,3,1,9
	.half	.L403-.L124
	.byte	0,1,1,5,7,0,5,2
	.word	.L124
	.byte	3,214,15,1,5,14,9
	.half	.L1171-.L124
	.byte	3,136,116,1,7,9
	.half	.L403-.L1171
	.byte	0,1,1,5,7,0,5,2
	.word	.L124
	.byte	3,146,16,1,5,14,9
	.half	.L1171-.L124
	.byte	3,204,115,1,7,9
	.half	.L403-.L1171
	.byte	0,1,1,5,39,0,5,2
	.word	.L124
	.byte	3,171,22,1,5,14,9
	.half	.L1171-.L124
	.byte	3,179,109,1,7,9
	.half	.L403-.L1171
	.byte	0,1,1,5,24,0,5,2
	.word	.L124
	.byte	3,171,23,1,5,14,9
	.half	.L1171-.L124
	.byte	3,179,108,1,7,9
	.half	.L403-.L1171
	.byte	0,1,1
.L1168:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L402:
	.word	-1,.L124,0,.L403-.L124,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L404:
	.word	162
	.half	3
	.word	.L405
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L407,.L406
	.byte	2
	.word	.L205
	.byte	3
	.byte	'.cocofun_5',0,1,213,3,8,1
	.word	.L122,.L408,.L121
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L405:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L406:
	.word	.L1173-.L1172
.L1172:
	.half	3
	.word	.L1175-.L1174
.L1174:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1175:
	.byte	5,14,7,0,5,2
	.word	.L122
	.byte	3,222,3,1,5,23,9
	.half	.L1176-.L122
	.byte	3,7,1,9
	.half	.L408-.L1176
	.byte	0,1,1,5,14,0,5,2
	.word	.L122
	.byte	3,207,5,1,5,23,9
	.half	.L1176-.L122
	.byte	3,7,1,3,143,126,1,7,9
	.half	.L408-.L1176
	.byte	0,1,1,5,14,0,5,2
	.word	.L122
	.byte	3,248,7,1,5,23,9
	.half	.L1176-.L122
	.byte	3,7,1,3,230,123,1,7,9
	.half	.L408-.L1176
	.byte	0,1,1
.L1173:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L407:
	.word	-1,.L122,0,.L408-.L122,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L409:
	.word	162
	.half	3
	.word	.L410
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L412,.L411
	.byte	2
	.word	.L205
	.byte	3
	.byte	'.cocofun_6',0,1,240,9,8,1
	.word	.L152,.L413,.L151
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L410:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L411:
	.word	.L1178-.L1177
.L1177:
	.half	3
	.word	.L1180-.L1179
.L1179:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1180:
	.byte	5,9,7,0,5,2
	.word	.L152
	.byte	3,140,10,1,9
	.half	.L413-.L152
	.byte	0,1,1,5,9,0,5,2
	.word	.L152
	.byte	3,242,10,1,9
	.half	.L1181-.L152
	.byte	3,154,127,1,7,9
	.half	.L413-.L1181
	.byte	0,1,1,5,26,0,5,2
	.word	.L152
	.byte	3,140,11,1,5,9,9
	.half	.L1181-.L152
	.byte	3,128,127,1,7,9
	.half	.L413-.L1181
	.byte	0,1,1
.L1178:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L412:
	.word	-1,.L152,0,.L413-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L414:
	.word	162
	.half	3
	.word	.L415
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L417,.L416
	.byte	2
	.word	.L205
	.byte	3
	.byte	'.cocofun_7',0,1,134,20,15,1
	.word	.L192,.L418,.L191
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L415:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L416:
	.word	.L1183-.L1182
.L1182:
	.half	3
	.word	.L1185-.L1184
.L1184:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1185:
	.byte	5,44,7,0,5,2
	.word	.L192
	.byte	3,188,20,1,5,32,9
	.half	.L1186-.L192
	.byte	3,127,1,5,44,9
	.half	.L1187-.L1186
	.byte	3,1,1,5,26,3,21,1,9
	.half	.L418-.L1187
	.byte	0,1,1,5,43,0,5,2
	.word	.L192
	.byte	3,197,21,1,5,23,9
	.half	.L1186-.L192
	.byte	3,127,1,5,43,9
	.half	.L1187-.L1186
	.byte	3,1,1,5,25,3,14,1,5,26,9
	.half	.L744-.L1187
	.byte	3,254,126,1,7,9
	.half	.L418-.L744
	.byte	0,1,1
.L1183:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L417:
	.word	-1,.L192,0,.L418-.L192,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L419:
	.word	162
	.half	3
	.word	.L420
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L422,.L421
	.byte	2
	.word	.L205
	.byte	3
	.byte	'.cocofun_8',0,1,240,9,8,1
	.word	.L150,.L423,.L149
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L420:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L421:
	.word	.L1189-.L1188
.L1188:
	.half	3
	.word	.L1191-.L1190
.L1190:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0,0,0,0,0
.L1191:
	.byte	5,34,7,0,5,2
	.word	.L150
	.byte	3,152,10,1,5,55,9
	.half	.L1192-.L150
	.byte	1,9
	.half	.L423-.L1192
	.byte	0,1,1,5,21,0,5,2
	.word	.L150
	.byte	3,232,11,1,5,42,9
	.half	.L1192-.L150
	.byte	1,5,55,9
	.half	.L1193-.L1192
	.byte	3,176,126,1,7,9
	.half	.L423-.L1193
	.byte	0,1,1,5,22,0,5,2
	.word	.L150
	.byte	3,242,11,1,5,43,9
	.half	.L1192-.L150
	.byte	1,5,55,9
	.half	.L1193-.L1192
	.byte	3,166,126,1,7,9
	.half	.L423-.L1193
	.byte	0,1,1
.L1189:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L422:
	.word	-1,.L150,0,.L423-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_StmTimerResolution')
	.sect	'.debug_info'
.L424:
	.word	164
	.half	3
	.word	.L425
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L205
	.byte	3
	.byte	'Mcal_StmTimerResolution',0,1,188,1,15
	.word	.L440
	.byte	5,3
	.word	Mcal_StmTimerResolution
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_StmTimerResolution')
	.sect	'.debug_abbrev'
.L425:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_LockAddressSiecon0')
	.sect	'.debug_info'
.L426:
	.word	164
	.half	3
	.word	.L427
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L205
	.byte	3
	.byte	'Mcal_LockAddressSiecon0',0,1,190,1,24
	.word	.L657
	.byte	5,3
	.word	Mcal_LockAddressSiecon0
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_LockAddressSiecon0')
	.sect	'.debug_abbrev'
.L427:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_LockAddressEicon0')
	.sect	'.debug_info'
.L428:
	.word	163
	.half	3
	.word	.L429
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L205
	.byte	3
	.byte	'Mcal_LockAddressEicon0',0,1,192,1,24
	.word	.L658
	.byte	5,3
	.word	Mcal_LockAddressEicon0
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_LockAddressEicon0')
	.sect	'.debug_abbrev'
.L429:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_kCoreXMemSegment')
	.sect	'.debug_info'
.L430:
	.word	162
	.half	3
	.word	.L431
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L205
	.byte	3
	.byte	'Mcal_kCoreXMemSegment',0,1,217,1,20
	.word	.L659
	.byte	5,3
	.word	Mcal_kCoreXMemSegment
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_kCoreXMemSegment')
	.sect	'.debug_abbrev'
.L431:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_kDsprEndAddress')
	.sect	'.debug_info'
.L432:
	.word	161
	.half	3
	.word	.L433
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L205
	.byte	3
	.byte	'Mcal_kDsprEndAddress',0,1,131,2,21
	.word	.L660
	.byte	5,3
	.word	Mcal_kDsprEndAddress
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_kDsprEndAddress')
	.sect	'.debug_abbrev'
.L433:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_kPsprLocalEndAddress')
	.sect	'.debug_info'
.L434:
	.word	166
	.half	3
	.word	.L435
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L205
	.byte	3
	.byte	'Mcal_kPsprLocalEndAddress',0,1,152,2,21
	.word	.L661
	.byte	5,3
	.word	Mcal_kPsprLocalEndAddress
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_kPsprLocalEndAddress')
	.sect	'.debug_abbrev'
.L435:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_kPsprGlobalEndAddress')
	.sect	'.debug_info'
.L436:
	.word	167
	.half	3
	.word	.L437
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L205
	.byte	3
	.byte	'Mcal_kPsprGlobalEndAddress',0,1,173,2,21
	.word	.L662
	.byte	5,3
	.word	Mcal_kPsprGlobalEndAddress
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_kPsprGlobalEndAddress')
	.sect	'.debug_abbrev'
.L437:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Mcal_kPsprGlobalBaseAddress')
	.sect	'.debug_info'
.L438:
	.word	168
	.half	3
	.word	.L439
	.byte	4,1
	.byte	'..\\mcal\\McalLib\\ssc\\src\\McalLib.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L205
	.byte	3
	.byte	'Mcal_kPsprGlobalBaseAddress',0,1,194,2,21
	.word	.L663
	.byte	5,3
	.word	Mcal_kPsprGlobalBaseAddress
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Mcal_kPsprGlobalBaseAddress')
	.sect	'.debug_abbrev'
.L439:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_1')
	.sect	'.debug_loc'
.L193:
	.word	-1,.L194,0,.L388-.L194
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L159:
	.word	-1,.L160,0,.L393-.L160
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L157:
	.word	-1,.L158,0,.L398-.L158
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L123:
	.word	-1,.L124,0,.L403-.L124
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L121:
	.word	-1,.L122,0,.L408-.L122
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L152,0,.L413-.L152
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L191:
	.word	-1,.L192,0,.L418-.L192
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L149:
	.word	-1,.L150,0,.L423-.L150
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('McalLib_GetVersionInfo')
	.sect	'.debug_loc'
.L171:
	.word	-1,.L172,0,.L533-.L172
	.half	2
	.byte	138,0
	.word	0,0
.L535:
	.word	-1,.L172,0,.L533-.L172
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_DelayGetTick')
	.sect	'.debug_loc'
.L522:
	.word	-1,.L168,.L711-.L168,.L521-.L168
	.half	1
	.byte	82
	.word	0,0
.L167:
	.word	-1,.L168,0,.L521-.L168
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_DelayResetTickCalibration')
	.sect	'.debug_loc'
.L165:
	.word	-1,.L166,0,.L519-.L166
	.half	2
	.byte	138,0
	.word	0,0
.L520:
	.word	-1,.L166,.L710-.L166,.L519-.L166
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_DelayTickResolution')
	.sect	'.debug_loc'
.L163:
	.word	-1,.L164,0,.L518-.L164
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_GetCpuIndex')
	.sect	'.debug_loc'
.L524:
	.word	0,0
.L169:
	.word	-1,.L170,0,.L523-.L170
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_GetCpuPhysicalId')
	.sect	'.debug_loc'
.L485:
	.word	-1,.L146,.L684-.L146,.L484-.L146
	.half	1
	.byte	82
	.word	0,0
.L145:
	.word	-1,.L146,0,.L484-.L146
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_GetCpuWdgPassword')
	.sect	'.debug_loc'
.L443:
	.word	-1,.L120,.L124-.L120,.L403-.L120
	.half	1
	.byte	82
	.word	.L664-.L120,.L665-.L120
	.half	1
	.byte	82
	.word	.L122-.L120,.L408-.L120
	.half	1
	.byte	82
	.word	0,0
.L119:
	.word	-1,.L120,0,.L441-.L120
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_GetGlobalDsprAddress')
	.sect	'.debug_loc'
.L488:
	.word	-1,.L148,.L685-.L148,.L413-.L148
	.half	1
	.byte	84
	.word	.L150-.L148,.L423-.L148
	.half	1
	.byte	84
	.word	0,.L486-.L148
	.half	1
	.byte	84
	.word	0,0
.L493:
	.word	-1,.L148,.L685-.L148,.L413-.L148
	.half	5
	.byte	144,32,157,32,0
	.word	.L150-.L148,.L423-.L148
	.half	5
	.byte	144,32,157,32,0
	.word	.L686-.L148,.L486-.L148
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L490:
	.word	-1,.L148,.L685-.L148,.L413-.L148
	.half	1
	.byte	85
	.word	.L150-.L148,.L423-.L148
	.half	1
	.byte	85
	.word	0,.L486-.L148
	.half	1
	.byte	85
	.word	0,0
.L147:
	.word	-1,.L148,0,.L486-.L148
	.half	2
	.byte	138,0
	.word	0,0
.L494:
	.word	-1,.L148,.L685-.L148,.L413-.L148
	.half	1
	.byte	82
	.word	.L150-.L148,.L423-.L148
	.half	1
	.byte	82
	.word	.L687-.L148,.L486-.L148
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_GetGlobalPsprAddress')
	.sect	'.debug_loc'
.L504:
	.word	-1,.L156,.L696-.L156,.L423-.L156
	.half	1
	.byte	84
	.word	.L697-.L156,.L393-.L156
	.half	1
	.byte	84
	.word	.L700-.L156,.L398-.L156
	.half	1
	.byte	84
	.word	0,.L502-.L156
	.half	1
	.byte	84
	.word	0,0
.L506:
	.word	-1,.L156,.L696-.L156,.L423-.L156
	.half	1
	.byte	85
	.word	.L697-.L156,.L393-.L156
	.half	1
	.byte	85
	.word	.L700-.L156,.L398-.L156
	.half	1
	.byte	85
	.word	0,.L502-.L156
	.half	1
	.byte	85
	.word	0,0
.L510:
	.word	-1,.L156,.L700-.L156,.L398-.L156
	.half	1
	.byte	95
	.word	.L702-.L156,.L703-.L156
	.half	1
	.byte	95
	.word	0,0
.L155:
	.word	-1,.L156,0,.L502-.L156
	.half	2
	.byte	138,0
	.word	0,0
.L508:
	.word	-1,.L156,.L696-.L156,.L423-.L156
	.half	5
	.byte	144,32,157,32,0
	.word	.L697-.L156,.L393-.L156
	.half	5
	.byte	144,32,157,32,0
	.word	.L698-.L156,.L699-.L156
	.half	5
	.byte	144,32,157,32,0
	.word	.L700-.L156,.L398-.L156
	.half	5
	.byte	144,32,157,32,0
	.word	.L45-.L156,.L701-.L156
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L509:
	.word	-1,.L156,.L694-.L156,.L695-.L156
	.half	1
	.byte	82
	.word	.L150-.L156,.L423-.L156
	.half	1
	.byte	82
	.word	.L697-.L156,.L393-.L156
	.half	1
	.byte	82
	.word	.L700-.L156,.L398-.L156
	.half	1
	.byte	82
	.word	.L704-.L156,.L502-.L156
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_GetLocalDsprAddress')
	.sect	'.debug_loc'
.L501:
	.word	-1,.L154,.L685-.L154,.L413-.L154
	.half	1
	.byte	82
	.word	.L688-.L154,.L39-.L154
	.half	1
	.byte	82
	.word	.L692-.L154,.L495-.L154
	.half	1
	.byte	82
	.word	0,0
.L498:
	.word	-1,.L154,.L691-.L154,.L39-.L154
	.half	1
	.byte	95
	.word	.L40-.L154,.L693-.L154
	.half	1
	.byte	95
	.word	0,0
.L499:
	.word	-1,.L154,.L685-.L154,.L413-.L154
	.half	1
	.byte	88
	.word	.L689-.L154,.L39-.L154
	.half	1
	.byte	88
	.word	.L692-.L154,.L495-.L154
	.half	1
	.byte	88
	.word	0,0
.L497:
	.word	-1,.L154,0,.L688-.L154
	.half	1
	.byte	84
	.word	.L685-.L154,.L413-.L154
	.half	1
	.byte	90
	.word	.L690-.L154,.L39-.L154
	.half	1
	.byte	90
	.word	.L692-.L154,.L495-.L154
	.half	1
	.byte	90
	.word	0,0
.L153:
	.word	-1,.L154,0,.L495-.L154
	.half	2
	.byte	138,0
	.word	0,0
.L500:
	.word	-1,.L154,.L685-.L154,.L413-.L154
	.half	1
	.byte	89
	.word	.L688-.L154,.L39-.L154
	.half	1
	.byte	89
	.word	.L692-.L154,.L495-.L154
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_GetLocalPsprAddress')
	.sect	'.debug_loc'
.L517:
	.word	-1,.L162,.L705-.L162,.L511-.L162
	.half	1
	.byte	82
	.word	0,0
.L513:
	.word	-1,.L162,0,.L705-.L162
	.half	1
	.byte	84
	.word	.L706-.L162,.L511-.L162
	.half	1
	.byte	88
	.word	0,0
.L516:
	.word	-1,.L162,.L708-.L162,.L709-.L162
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L161:
	.word	-1,.L162,0,.L511-.L162
	.half	2
	.byte	138,0
	.word	0,0
.L514:
	.word	-1,.L162,.L707-.L162,.L511-.L162
	.half	1
	.byte	89
	.word	0,0
.L515:
	.word	-1,.L162,.L705-.L162,.L511-.L162
	.half	1
	.byte	90
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_GetPeripheralEndInitPassword')
	.sect	'.debug_loc'
.L139:
	.word	-1,.L140,0,.L474-.L140
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_GetSafetyEndInitPassword')
	.sect	'.debug_loc'
.L129:
	.word	-1,.L130,0,.L458-.L130
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_GetSpinlock')
	.sect	'.debug_loc'
.L527:
	.word	-1,.L174,0,.L525-.L174
	.half	1
	.byte	100
	.word	0,0
.L173:
	.word	-1,.L174,0,.L525-.L174
	.half	2
	.byte	138,0
	.word	0,0
.L529:
	.word	-1,.L174,0,.L525-.L174
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_ReleaseSpinlock')
	.sect	'.debug_loc'
.L532:
	.word	-1,.L176,0,.L530-.L176
	.half	1
	.byte	100
	.word	0,0
.L175:
	.word	-1,.L176,0,.L530-.L176
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_SetCpuWdgPassword')
	.sect	'.debug_loc'
.L449:
	.word	-1,.L126,.L667-.L126,.L668-.L126
	.half	1
	.byte	82
	.word	.L668-.L126,.L444-.L126
	.half	1
	.byte	88
	.word	0,0
.L448:
	.word	0,0
.L125:
	.word	-1,.L126,0,.L666-.L126
	.half	2
	.byte	138,0
	.word	.L666-.L126,.L444-.L126
	.half	2
	.byte	138,8
	.word	.L444-.L126,.L444-.L126
	.half	2
	.byte	138,0
	.word	0,0
.L446:
	.word	-1,.L126,0,.L667-.L126
	.half	1
	.byte	84
	.word	.L667-.L126,.L444-.L126
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_SetPeripheralEndInitPassword')
	.sect	'.debug_loc'
.L141:
	.word	-1,.L142,0,.L475-.L142
	.half	2
	.byte	138,0
	.word	0,0
.L478:
	.word	-1,.L142,.L680-.L142,.L681-.L142
	.half	1
	.byte	82
	.word	.L679-.L142,.L475-.L142
	.half	1
	.byte	95
	.word	0,0
.L477:
	.word	-1,.L142,0,.L678-.L142
	.half	1
	.byte	84
	.word	.L678-.L142,.L679-.L142
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_SetSafetyEndInitPassword')
	.sect	'.debug_loc'
.L131:
	.word	-1,.L132,0,.L459-.L132
	.half	2
	.byte	138,0
	.word	0,0
.L462:
	.word	-1,.L132,.L676-.L132,.L677-.L132
	.half	1
	.byte	82
	.word	.L675-.L132,.L459-.L132
	.half	1
	.byte	95
	.word	0,0
.L461:
	.word	-1,.L132,0,.L674-.L132
	.half	1
	.byte	84
	.word	.L674-.L132,.L675-.L132
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_WriteCpuEndInitProtReg')
	.sect	'.debug_loc'
.L456:
	.word	-1,.L128,.L670-.L128,.L673-.L128
	.half	1
	.byte	82
	.word	.L673-.L128,.L450-.L128
	.half	1
	.byte	90
	.word	0,0
.L455:
	.word	0,0
.L454:
	.word	-1,.L128,0,.L670-.L128
	.half	1
	.byte	84
	.word	.L672-.L128,.L450-.L128
	.half	1
	.byte	88
	.word	0,0
.L127:
	.word	-1,.L128,0,.L669-.L128
	.half	2
	.byte	138,0
	.word	.L669-.L128,.L450-.L128
	.half	2
	.byte	138,8
	.word	.L450-.L128,.L450-.L128
	.half	2
	.byte	138,0
	.word	0,0
.L452:
	.word	-1,.L128,0,.L670-.L128
	.half	1
	.byte	100
	.word	.L671-.L128,.L450-.L128
	.half	1
	.byte	111
	.word	0,0
.L457:
	.word	-1,.L128,.L672-.L128,.L450-.L128
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_WritePeripEndInitProtReg')
	.sect	'.debug_loc'
.L483:
	.word	-1,.L144,0,.L682-.L144
	.half	1
	.byte	84
	.word	.L682-.L144,.L479-.L144
	.half	1
	.byte	95
	.word	0,0
.L143:
	.word	-1,.L144,0,.L479-.L144
	.half	2
	.byte	138,0
	.word	0,0
.L481:
	.word	-1,.L144,0,.L682-.L144
	.half	1
	.byte	100
	.word	.L683-.L144,.L479-.L144
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_WriteSafetyEndInitProtReg')
	.sect	'.debug_loc'
.L467:
	.word	-1,.L134,0,.L463-.L134
	.half	1
	.byte	84
	.word	0,0
.L133:
	.word	-1,.L134,0,.L463-.L134
	.half	2
	.byte	138,0
	.word	0,0
.L465:
	.word	-1,.L134,0,.L463-.L134
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_WriteSafetyEndInitProtReg16')
	.sect	'.debug_loc'
.L540:
	.word	-1,.L136,0,.L536-.L136
	.half	1
	.byte	84
	.word	0,0
.L135:
	.word	-1,.L136,0,.L536-.L136
	.half	2
	.byte	138,0
	.word	0,0
.L538:
	.word	-1,.L136,0,.L536-.L136
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_WriteSafetyEndInitProtRegMask')
	.sect	'.debug_loc'
.L472:
	.word	-1,.L138,0,.L468-.L138
	.half	1
	.byte	84
	.word	0,0
.L473:
	.word	-1,.L138,0,.L468-.L138
	.half	1
	.byte	85
	.word	0,0
.L137:
	.word	-1,.L138,0,.L468-.L138
	.half	2
	.byte	138,0
	.word	0,0
.L470:
	.word	-1,.L138,0,.L468-.L138
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_lCalculateTimerReloadVal')
	.sect	'.debug_loc'
.L635:
	.word	-1,.L200,.L124-.L200,.L403-.L200
	.half	1
	.byte	84
	.word	0,.L633-.L200
	.half	1
	.byte	84
	.word	0,0
.L199:
	.word	-1,.L200,0,.L633-.L200
	.half	2
	.byte	138,0
	.word	0,0
.L639:
	.word	-1,.L200,.L124-.L200,.L403-.L200
	.half	1
	.byte	86
	.word	0,.L633-.L200
	.half	1
	.byte	86
	.word	0,0
.L637:
	.word	-1,.L200,.L124-.L200,.L403-.L200
	.half	1
	.byte	85
	.word	0,.L633-.L200
	.half	1
	.byte	85
	.word	0,0
.L640:
	.word	-1,.L200,.L775-.L200,.L776-.L200
	.half	1
	.byte	82
	.word	.L109-.L200,.L633-.L200
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_lCpuPwSequence')
	.sect	'.debug_loc'
.L569:
	.word	-1,.L178,0,.L712-.L178
	.half	1
	.byte	84
	.word	.L713-.L178,.L714-.L178
	.half	1
	.byte	95
	.word	0,0
.L177:
	.word	-1,.L178,0,.L567-.L178
	.half	2
	.byte	138,0
	.word	0,0
.L572:
	.word	-1,.L178,.L124-.L178,.L403-.L178
	.half	1
	.byte	82
	.word	.L712-.L178,.L567-.L178
	.half	1
	.byte	82
	.word	0,0
.L571:
	.word	-1,.L178,0,.L712-.L178
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_lCpuRelValue')
	.sect	'.debug_loc'
.L563:
	.word	-1,.L180,.L124-.L180,.L403-.L180
	.half	1
	.byte	84
	.word	0,.L561-.L180
	.half	1
	.byte	84
	.word	0,0
.L179:
	.word	-1,.L180,0,.L561-.L180
	.half	2
	.byte	138,0
	.word	0,0
.L566:
	.word	0,0
.L565:
	.word	-1,.L180,.L124-.L180,.L403-.L180
	.half	1
	.byte	85
	.word	0,.L561-.L180
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_lDecryptPw')
	.sect	'.debug_loc'
.L181:
	.word	-1,.L182,0,.L544-.L182
	.half	2
	.byte	138,0
	.word	0,0
.L546:
	.word	-1,.L182,0,.L715-.L182
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_lDelayResetTickCalibration')
	.sect	'.debug_loc'
.L549:
	.word	-1,.L186,0,.L726-.L186
	.half	1
	.byte	84
	.word	0,0
.L552:
	.word	-1,.L186,.L726-.L186,.L547-.L186
	.half	1
	.byte	90
	.word	0,0
.L185:
	.word	-1,.L186,0,.L547-.L186
	.half	2
	.byte	138,0
	.word	0,0
.L553:
	.word	-1,.L186,.L90-.L186,.L735-.L186
	.half	1
	.byte	95
	.word	0,0
.L559:
	.word	-1,.L186,.L731-.L186,.L732-.L186
	.half	1
	.byte	95
	.word	.L86-.L186,.L90-.L186
	.half	1
	.byte	95
	.word	.L88-.L186,.L91-.L186
	.half	1
	.byte	95
	.word	0,0
.L560:
	.word	-1,.L186,.L733-.L186,.L734-.L186
	.half	1
	.byte	94
	.word	.L88-.L186,.L91-.L186
	.half	1
	.byte	94
	.word	0,0
.L558:
	.word	-1,.L186,.L729-.L186,.L547-.L186
	.half	1
	.byte	93
	.word	0,0
.L556:
	.word	-1,.L186,.L729-.L186,.L547-.L186
	.half	1
	.byte	88
	.word	0,0
.L557:
	.word	-1,.L186,.L730-.L186,.L547-.L186
	.half	1
	.byte	89
	.word	0,0
.L555:
	.word	-1,.L186,.L728-.L186,.L547-.L186
	.half	1
	.byte	92
	.word	0,0
.L554:
	.word	-1,.L186,.L727-.L186,.L547-.L186
	.half	1
	.byte	91
	.word	0,0
.L551:
	.word	-1,.L186,.L736-.L186,.L87-.L186
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_lGetCpuIndex')
	.sect	'.debug_loc'
.L542:
	.word	-1,.L188,.L737-.L188,.L541-.L188
	.half	1
	.byte	82
	.word	0,0
.L187:
	.word	-1,.L188,0,.L541-.L188
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_lGetSpinlock')
	.sect	'.debug_loc'
.L647:
	.word	-1,.L202,0,.L111-.L202
	.half	1
	.byte	85
	.word	0,0
.L652:
	.word	-1,.L202,.L116-.L202,.L113-.L202
	.half	1
	.byte	81
	.word	0,0
.L653:
	.word	-1,.L202,.L778-.L202,.L113-.L202
	.half	1
	.byte	95
	.word	0,0
.L649:
	.word	-1,.L202,.L111-.L202,.L780-.L202
	.half	1
	.byte	82
	.word	0,0
.L651:
	.word	-1,.L202,.L781-.L202,.L113-.L202
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L650:
	.word	-1,.L202,.L783-.L202,.L784-.L202
	.half	1
	.byte	82
	.word	0,0
.L648:
	.word	-1,.L202,.L116-.L202,.L115-.L202
	.half	1
	.byte	82
	.word	.L782-.L202,.L783-.L202
	.half	1
	.byte	82
	.word	0,0
.L643:
	.word	-1,.L202,0,.L111-.L202
	.half	1
	.byte	100
	.word	.L779-.L202,.L641-.L202
	.half	1
	.byte	111
	.word	0,0
.L201:
	.word	-1,.L202,0,.L641-.L202
	.half	2
	.byte	138,0
	.word	0,0
.L645:
	.word	-1,.L202,0,.L111-.L202
	.half	1
	.byte	84
	.word	.L777-.L202,.L778-.L202
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_lReleaseSpinlock')
	.sect	'.debug_loc'
.L656:
	.word	-1,.L204,0,.L654-.L204
	.half	1
	.byte	100
	.word	0,0
.L203:
	.word	-1,.L204,0,.L654-.L204
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_lUpdateCpuEndInit')
	.sect	'.debug_loc'
.L594:
	.word	-1,.L198,.L753-.L198,.L403-.L198
	.half	1
	.byte	85
	.word	.L753-.L198,.L403-.L198
	.half	1
	.byte	92
	.word	0,.L754-.L198
	.half	1
	.byte	85
	.word	.L752-.L198,.L755-.L198
	.half	1
	.byte	92
	.word	0,0
.L601:
	.word	-1,.L198,.L770-.L198,.L590-.L198
	.half	2
	.byte	144,37
	.word	0,0
.L605:
	.word	-1,.L198,.L760-.L198,.L590-.L198
	.half	1
	.byte	94
	.word	0,0
.L197:
	.word	-1,.L198,0,.L752-.L198
	.half	2
	.byte	138,0
	.word	.L752-.L198,.L590-.L198
	.half	2
	.byte	138,16
	.word	.L590-.L198,.L590-.L198
	.half	2
	.byte	138,0
	.word	0,0
.L603:
	.word	-1,.L198,.L773-.L198,.L774-.L198
	.half	1
	.byte	95
	.word	0,0
.L592:
	.word	-1,.L198,.L753-.L198,.L403-.L198
	.half	1
	.byte	84
	.word	.L753-.L198,.L403-.L198
	.half	2
	.byte	145,120
	.word	0,.L754-.L198
	.half	1
	.byte	84
	.word	.L756-.L198,.L590-.L198
	.half	2
	.byte	145,120
	.word	.L769-.L198,.L771-.L198
	.half	1
	.byte	95
	.word	0,0
.L600:
	.word	-1,.L198,.L753-.L198,.L403-.L198
	.half	1
	.byte	93
	.word	.L753-.L198,.L403-.L198
	.half	2
	.byte	145,0
	.word	.L757-.L198,.L590-.L198
	.half	1
	.byte	93
	.word	0,.L590-.L198
	.half	2
	.byte	145,0
	.word	0,0
.L596:
	.word	-1,.L198,.L753-.L198,.L403-.L198
	.half	1
	.byte	95
	.word	.L753-.L198,.L403-.L198
	.half	1
	.byte	86
	.word	.L757-.L198,.L758-.L198
	.half	1
	.byte	95
	.word	0,.L754-.L198
	.half	1
	.byte	86
	.word	0,0
.L607:
	.word	-1,.L198,.L764-.L198,.L766-.L198
	.half	1
	.byte	82
	.word	.L755-.L198,.L590-.L198
	.half	1
	.byte	92
	.word	0,0
.L602:
	.word	-1,.L198,.L767-.L198,.L768-.L198
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L606:
	.word	-1,.L198,.L754-.L198,.L761-.L198
	.half	1
	.byte	82
	.word	.L762-.L198,.L763-.L198
	.half	1
	.byte	89
	.word	0,0
.L604:
	.word	-1,.L198,.L761-.L198,.L764-.L198
	.half	1
	.byte	82
	.word	.L765-.L198,.L590-.L198
	.half	1
	.byte	88
	.word	0,0
.L598:
	.word	-1,.L198,.L753-.L198,.L403-.L198
	.half	2
	.byte	145,116
	.word	.L753-.L198,.L403-.L198
	.half	1
	.byte	87
	.word	.L759-.L198,.L590-.L198
	.half	2
	.byte	145,116
	.word	0,.L754-.L198
	.half	1
	.byte	87
	.word	.L767-.L198,.L769-.L198
	.half	1
	.byte	95
	.word	.L104-.L198,.L772-.L198
	.half	1
	.byte	95
	.word	0,0
.L609:
	.word	-1,.L198,.L753-.L198,.L403-.L198
	.half	2
	.byte	145,112
	.word	0,.L590-.L198
	.half	2
	.byte	145,112
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_lUpdatePeripheralEndInit')
	.sect	'.debug_loc'
.L618:
	.word	-1,.L196,.L95-.L196,.L388-.L196
	.half	5
	.byte	144,32,157,32,0
	.word	.L192-.L196,.L418-.L196
	.half	5
	.byte	144,32,157,32,0
	.word	.L748-.L196,.L610-.L196
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L195:
	.word	-1,.L196,0,.L746-.L196
	.half	2
	.byte	138,0
	.word	.L746-.L196,.L610-.L196
	.half	2
	.byte	138,8
	.word	.L610-.L196,.L610-.L196
	.half	2
	.byte	138,0
	.word	0,0
.L612:
	.word	-1,.L196,0,.L747-.L196
	.half	1
	.byte	84
	.word	0,0
.L617:
	.word	-1,.L196,.L194-.L196,.L388-.L196
	.half	1
	.byte	82
	.word	.L192-.L196,.L418-.L196
	.half	1
	.byte	82
	.word	.L751-.L196,.L610-.L196
	.half	1
	.byte	82
	.word	0,0
.L616:
	.word	-1,.L196,0,.L748-.L196
	.half	1
	.byte	86
	.word	.L749-.L196,.L748-.L196
	.half	1
	.byte	95
	.word	.L194-.L196,.L743-.L196
	.half	1
	.byte	95
	.word	.L94-.L196,.L95-.L196
	.half	1
	.byte	95
	.word	0,0
.L614:
	.word	-1,.L196,0,.L748-.L196
	.half	1
	.byte	85
	.word	.L95-.L196,.L388-.L196
	.half	1
	.byte	89
	.word	.L748-.L196,.L750-.L196
	.half	1
	.byte	89
	.word	0,0
.L620:
	.word	-1,.L196,.L194-.L196,.L388-.L196
	.half	2
	.byte	145,120
	.word	.L192-.L196,.L418-.L196
	.half	2
	.byte	145,120
	.word	0,.L610-.L196
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_lUpdateSafetyEndInit')
	.sect	'.debug_loc'
.L189:
	.word	-1,.L190,0,.L738-.L190
	.half	2
	.byte	138,0
	.word	.L738-.L190,.L621-.L190
	.half	2
	.byte	138,8
	.word	.L621-.L190,.L621-.L190
	.half	2
	.byte	138,0
	.word	0,0
.L623:
	.word	-1,.L190,0,.L739-.L190
	.half	1
	.byte	84
	.word	0,0
.L629:
	.word	-1,.L190,.L742-.L190,.L740-.L190
	.half	1
	.byte	82
	.word	.L194-.L190,.L388-.L190
	.half	1
	.byte	82
	.word	.L192-.L190,.L744-.L190
	.half	1
	.byte	82
	.word	.L745-.L190,.L621-.L190
	.half	1
	.byte	82
	.word	0,0
.L630:
	.word	-1,.L190,.L95-.L190,.L388-.L190
	.half	5
	.byte	144,32,157,32,0
	.word	.L192-.L190,.L744-.L190
	.half	5
	.byte	144,32,157,32,0
	.word	.L745-.L190,.L621-.L190
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L627:
	.word	-1,.L190,0,.L740-.L190
	.half	1
	.byte	86
	.word	.L741-.L190,.L740-.L190
	.half	1
	.byte	95
	.word	.L194-.L190,.L743-.L190
	.half	1
	.byte	95
	.word	.L94-.L190,.L95-.L190
	.half	1
	.byte	95
	.word	0,0
.L625:
	.word	-1,.L190,0,.L740-.L190
	.half	1
	.byte	85
	.word	.L95-.L190,.L388-.L190
	.half	1
	.byte	89
	.word	0,0
.L632:
	.word	-1,.L190,0,.L740-.L190
	.half	2
	.byte	145,120
	.word	.L194-.L190,.L388-.L190
	.half	2
	.byte	145,120
	.word	.L192-.L190,.L744-.L190
	.half	2
	.byte	145,120
	.word	.L745-.L190,.L621-.L190
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Mcal_lWriteSafetyEndInitProtection')
	.sect	'.debug_loc'
.L581:
	.word	-1,.L184,0,.L716-.L184
	.half	1
	.byte	86
	.word	.L721-.L184,.L722-.L184
	.half	1
	.byte	95
	.word	.L71-.L184,.L725-.L184
	.half	1
	.byte	95
	.word	0,0
.L583:
	.word	-1,.L184,0,.L716-.L184
	.half	1
	.byte	87
	.word	.L716-.L184,.L573-.L184
	.half	1
	.byte	89
	.word	0,0
.L577:
	.word	-1,.L184,0,.L716-.L184
	.half	1
	.byte	84
	.word	0,0
.L579:
	.word	-1,.L184,0,.L716-.L184
	.half	1
	.byte	85
	.word	.L717-.L184,.L718-.L184
	.half	1
	.byte	88
	.word	.L71-.L184,.L73-.L184
	.half	1
	.byte	88
	.word	0,0
.L589:
	.word	-1,.L184,.L719-.L184,.L720-.L184
	.half	1
	.byte	90
	.word	.L71-.L184,.L73-.L184
	.half	1
	.byte	90
	.word	0,0
.L183:
	.word	-1,.L184,0,.L573-.L184
	.half	2
	.byte	138,0
	.word	0,0
.L575:
	.word	-1,.L184,0,.L716-.L184
	.half	1
	.byte	100
	.word	.L717-.L184,.L573-.L184
	.half	1
	.byte	111
	.word	.L723-.L184,.L722-.L184
	.half	5
	.byte	144,32,157,32,0
	.word	.L71-.L184,.L725-.L184
	.half	5
	.byte	144,32,157,32,0
	.word	.L725-.L184,.L73-.L184
	.half	1
	.byte	95
	.word	0,0
.L587:
	.word	0,0
.L585:
	.word	0,0
.L588:
	.word	-1,.L184,.L724-.L184,.L71-.L184
	.half	1
	.byte	90
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1194:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Mcal_GetCpuWdgPassword')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L120,.L441-.L120
	.sdecl	'.debug_frame',debug,cluster('Mcal_SetCpuWdgPassword')
	.sect	'.debug_frame'
	.word	36
	.word	.L1194,.L126,.L444-.L126
	.byte	4
	.word	(.L666-.L126)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L444-.L666)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Mcal_WriteCpuEndInitProtReg')
	.sect	'.debug_frame'
	.word	36
	.word	.L1194,.L128,.L450-.L128
	.byte	4
	.word	(.L669-.L128)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L450-.L669)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Mcal_GetSafetyEndInitPassword')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L130,.L458-.L130
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Mcal_SetSafetyEndInitPassword')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L132,.L459-.L132
	.sdecl	'.debug_frame',debug,cluster('Mcal_WriteSafetyEndInitProtReg')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L134,.L463-.L134
	.sdecl	'.debug_frame',debug,cluster('Mcal_WriteSafetyEndInitProtReg16')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L136,.L536-.L136
	.sdecl	'.debug_frame',debug,cluster('Mcal_WriteSafetyEndInitProtRegMask')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L138,.L468-.L138
	.sdecl	'.debug_frame',debug,cluster('Mcal_GetPeripheralEndInitPassword')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L140,.L474-.L140
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Mcal_SetPeripheralEndInitPassword')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L142,.L475-.L142
	.sdecl	'.debug_frame',debug,cluster('Mcal_WritePeripEndInitProtReg')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L144,.L479-.L144
	.sdecl	'.debug_frame',debug,cluster('Mcal_GetCpuPhysicalId')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L146,.L484-.L146
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Mcal_GetGlobalDsprAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L148,.L486-.L148
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Mcal_GetLocalDsprAddress')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L154,.L495-.L154
	.sdecl	'.debug_frame',debug,cluster('Mcal_GetGlobalPsprAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L156,.L502-.L156
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Mcal_GetLocalPsprAddress')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L162,.L511-.L162
	.sdecl	'.debug_frame',debug,cluster('Mcal_DelayTickResolution')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L164,.L518-.L164
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Mcal_DelayResetTickCalibration')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L166,.L519-.L166
	.sdecl	'.debug_frame',debug,cluster('Mcal_DelayGetTick')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L168,.L521-.L168
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Mcal_GetCpuIndex')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L170,.L523-.L170
	.sdecl	'.debug_frame',debug,cluster('McalLib_GetVersionInfo')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L172,.L533-.L172
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Mcal_GetSpinlock')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L174,.L525-.L174
	.sdecl	'.debug_frame',debug,cluster('Mcal_ReleaseSpinlock')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L176,.L530-.L176
	.sdecl	'.debug_frame',debug,cluster('Mcal_lCpuPwSequence')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L178,.L567-.L178
	.sdecl	'.debug_frame',debug,cluster('Mcal_lCpuRelValue')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L180,.L561-.L180
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Mcal_lDecryptPw')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L182,.L544-.L182
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Mcal_lWriteSafetyEndInitProtection')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L184,.L573-.L184
	.sdecl	'.debug_frame',debug,cluster('Mcal_lDelayResetTickCalibration')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L186,.L547-.L186
	.sdecl	'.debug_frame',debug,cluster('Mcal_lGetCpuIndex')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L188,.L541-.L188
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Mcal_lUpdateSafetyEndInit')
	.sect	'.debug_frame'
	.word	36
	.word	.L1194,.L190,.L621-.L190
	.byte	4
	.word	(.L738-.L190)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L621-.L738)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Mcal_lUpdatePeripheralEndInit')
	.sect	'.debug_frame'
	.word	36
	.word	.L1194,.L196,.L610-.L196
	.byte	4
	.word	(.L746-.L196)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L610-.L746)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Mcal_lUpdateCpuEndInit')
	.sect	'.debug_frame'
	.word	36
	.word	.L1194,.L198,.L590-.L198
	.byte	4
	.word	(.L752-.L198)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L590-.L752)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Mcal_lCalculateTimerReloadVal')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L200,.L633-.L200
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Mcal_lGetSpinlock')
	.sect	'.debug_frame'
	.word	12
	.word	.L1194,.L202,.L641-.L202
	.sdecl	'.debug_frame',debug,cluster('Mcal_lReleaseSpinlock')
	.sect	'.debug_frame'
	.word	24
	.word	.L1194,.L204,.L654-.L204
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1195:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L1195,.L122,.L408-.L122
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L1195,.L124,.L403-.L124
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L1195,.L150,.L423-.L150
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L1195,.L152,.L413-.L152
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L1195,.L158,.L398-.L158
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L1195,.L160,.L393-.L160
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L1195,.L192,.L418-.L192
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_1')
	.sect	'.debug_frame'
	.word	24
	.word	.L1195,.L194,.L388-.L194
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\mcal\McalLib\ssc\src\McalLib.c	  3195  
; ..\mcal\McalLib\ssc\src\McalLib.c	  3196  /*[cover parentID={4579FE20-92DA-4848-93DB-7AD4FD35DD50}]Memory mapping for
; ..\mcal\McalLib\ssc\src\McalLib.c	  3197     code[/cover]*/
; ..\mcal\McalLib\ssc\src\McalLib.c	  3198  #define MCALLIB_STOP_SEC_CODE_ASIL_B_GLOBAL
; ..\mcal\McalLib\ssc\src\McalLib.c	  3199  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\mcal\McalLib\ssc\src\McalLib.c	  3200     without safeguard. It complies to Autosar guidelines. */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3201  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\mcal\McalLib\ssc\src\McalLib.c	  3202     guideline. */
; ..\mcal\McalLib\ssc\src\McalLib.c	  3203  #include "McalLib_MemMap.h"

	; Module end
