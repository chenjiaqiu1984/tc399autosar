	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 21092262 SN 73118428"
	.compiler_invocation	"ctc --dep-file=mcal\\Dio\\ssc\\src\\.Dio.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc39xb -D__CPU_TC39XB__ --core=tc1.6.2 --iso=99 -DBRS_COMP_TASKING -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\testdemo\\taskingdemo\\demo001 -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\demo011\\tasking\\appl -ID:\\Zonal\\demo011\\tasking\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\Components -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\ContractPhase -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\inc -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\appl\\Include -ID:\\Zonal\\demo011\\tasking\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\appl\\Source\\swc_test -ID:\\Zonal\\demo011\\tasking\\component -ID:\\Zonal\\demo011\\tasking\\component\\_Common -ID:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os\\TC39xQ -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Os\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug -ID:\\Zonal\\demo011\\tasking\\Debug\\appl -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\Debug\\component -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\src -g2 --make-target=mcal\\Dio\\ssc\\src\\Dio.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o mcal\\Dio\\ssc\\src\\Dio.src ..\\mcal\\Dio\\ssc\\src\\Dio.c"
	.compiler_name		"ctc"
	;source	'..\\mcal\\Dio\\ssc\\src\\Dio.c'

	
$TC162
	
	.sdecl	'.text.Dio.Dio_ReadChannel',code,cluster('Dio_ReadChannel')
	.sect	'.text.Dio.Dio_ReadChannel'
	.align	2
	
	.global	Dio_ReadChannel

; ..\mcal\Dio\ssc\src\Dio.c	     1  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	     2  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	     3  ** Copyright (C) Infineon Technologies (2023)                                 **
; ..\mcal\Dio\ssc\src\Dio.c	     4  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	     5  ** All rights reserved.                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	     6  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	     7  ** This document contains proprietary information belonging to Infineon       **
; ..\mcal\Dio\ssc\src\Dio.c	     8  ** Technologies. Passing on and copying of this document, and communication   **
; ..\mcal\Dio\ssc\src\Dio.c	     9  ** of its contents is not permitted without prior written authorization.      **
; ..\mcal\Dio\ssc\src\Dio.c	    10  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	    11  ********************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	    12  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	    13  **  FILENAME     : Dio.c                                                      **
; ..\mcal\Dio\ssc\src\Dio.c	    14  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	    15  **  VERSION      : 28.0.0                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	    16  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	    17  **  DATE         : 2023-07-05                                                 **
; ..\mcal\Dio\ssc\src\Dio.c	    18  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	    19  **  VARIANT      : Variant LT                                                 **
; ..\mcal\Dio\ssc\src\Dio.c	    20  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	    21  **  PLATFORM     : Infineon AURIX2G                                           **
; ..\mcal\Dio\ssc\src\Dio.c	    22  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	    23  **  AUTHOR       : DL-AUTOSAR-Engineering                                     **
; ..\mcal\Dio\ssc\src\Dio.c	    24  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	    25  **  VENDOR       : Infineon Technologies                                      **
; ..\mcal\Dio\ssc\src\Dio.c	    26  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	    27  **  DESCRIPTION  : Dio Driver source file                                     **
; ..\mcal\Dio\ssc\src\Dio.c	    28  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	    29  **  SPECIFICATION(S) : Specification of Dio Driver, AUTOSAR Release 4.2.2     **
; ..\mcal\Dio\ssc\src\Dio.c	    30  **                     and AUTOSAR Release 4.4.0                              **
; ..\mcal\Dio\ssc\src\Dio.c	    31  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	    32  ** MAY BE CHANGED BY USER : no                                                **
; ..\mcal\Dio\ssc\src\Dio.c	    33  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	    34  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	    35  /* [cover parentID={F5CF0050-FA3F-4e14-8C3E-FD0E8CB08831}][/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	    36  /* [cover parentID={684B8436-0E72-4797-A3B4-2A4FBDD083F0},
; ..\mcal\Dio\ssc\src\Dio.c	    37                     {AC8683E3-C8D8-4704-B9CC-4620683FE9C3}] [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	    38  
; ..\mcal\Dio\ssc\src\Dio.c	    39  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	    40  **                      Include Section                                       **
; ..\mcal\Dio\ssc\src\Dio.c	    41  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	    42  
; ..\mcal\Dio\ssc\src\Dio.c	    43  /* Inclusion of Port Register structure header file */
; ..\mcal\Dio\ssc\src\Dio.c	    44  #include "IfxPort_reg.h"
; ..\mcal\Dio\ssc\src\Dio.c	    45  
; ..\mcal\Dio\ssc\src\Dio.c	    46  /* Own header file, this includes own configuration file also */
; ..\mcal\Dio\ssc\src\Dio.c	    47  #include "Dio.h"
; ..\mcal\Dio\ssc\src\Dio.c	    48  /* Include Mcal.h to import the library functions */
; ..\mcal\Dio\ssc\src\Dio.c	    49  #include "McalLib.h"
; ..\mcal\Dio\ssc\src\Dio.c	    50  /* Conditional Inclusion of Safety Error Tracer File */
; ..\mcal\Dio\ssc\src\Dio.c	    51  #if (DIO_SAFETY_ENABLE == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	    52  #include "Mcal_SafetyError.h"
; ..\mcal\Dio\ssc\src\Dio.c	    53  #endif /* (DIO_SAFETY_ENABLE == STD_ON) */
; ..\mcal\Dio\ssc\src\Dio.c	    54  /* Conditional Inclusion of Developement Error Tracer File */
; ..\mcal\Dio\ssc\src\Dio.c	    55  #if (DIO_DEV_ERROR_DETECT == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	    56  #include "Det.h"
; ..\mcal\Dio\ssc\src\Dio.c	    57  #endif /* ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT == STD_ON)) */
; ..\mcal\Dio\ssc\src\Dio.c	    58  
; ..\mcal\Dio\ssc\src\Dio.c	    59  
; ..\mcal\Dio\ssc\src\Dio.c	    60  
; ..\mcal\Dio\ssc\src\Dio.c	    61  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	    62  **                      Imported Compiler Switch Check                        **
; ..\mcal\Dio\ssc\src\Dio.c	    63  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	    64  
; ..\mcal\Dio\ssc\src\Dio.c	    65  /* Version checks */
; ..\mcal\Dio\ssc\src\Dio.c	    66  
; ..\mcal\Dio\ssc\src\Dio.c	    67  #ifndef DIO_SW_MAJOR_VERSION
; ..\mcal\Dio\ssc\src\Dio.c	    68  #error "DIO_SW_MAJOR_VERSION is not defined. "
; ..\mcal\Dio\ssc\src\Dio.c	    69  #endif
; ..\mcal\Dio\ssc\src\Dio.c	    70  
; ..\mcal\Dio\ssc\src\Dio.c	    71  #ifndef DIO_SW_MINOR_VERSION
; ..\mcal\Dio\ssc\src\Dio.c	    72  #error "DIO_SW_MINOR_VERSION is not defined. "
; ..\mcal\Dio\ssc\src\Dio.c	    73  #endif
; ..\mcal\Dio\ssc\src\Dio.c	    74  
; ..\mcal\Dio\ssc\src\Dio.c	    75  #ifndef DIO_SW_PATCH_VERSION
; ..\mcal\Dio\ssc\src\Dio.c	    76  #error "DIO_SW_PATCH_VERSION is not defined. "
; ..\mcal\Dio\ssc\src\Dio.c	    77  #endif
; ..\mcal\Dio\ssc\src\Dio.c	    78  /* Check for Correct inclusion of headers */
; ..\mcal\Dio\ssc\src\Dio.c	    79  #if ( DIO_SW_MAJOR_VERSION != 20U )
; ..\mcal\Dio\ssc\src\Dio.c	    80  #error "DIO_SW_MAJOR_VERSION does not match. "
; ..\mcal\Dio\ssc\src\Dio.c	    81  #endif
; ..\mcal\Dio\ssc\src\Dio.c	    82  
; ..\mcal\Dio\ssc\src\Dio.c	    83  #if ( DIO_SW_MINOR_VERSION != 25U )
; ..\mcal\Dio\ssc\src\Dio.c	    84  #error "DIO_SW_MINOR_VERSION does not match. "
; ..\mcal\Dio\ssc\src\Dio.c	    85  #endif
; ..\mcal\Dio\ssc\src\Dio.c	    86  
; ..\mcal\Dio\ssc\src\Dio.c	    87  #if ( DIO_SW_PATCH_VERSION != 0U )
; ..\mcal\Dio\ssc\src\Dio.c	    88  #error "DIO_SW_PATCH_VERSION does not match. "
; ..\mcal\Dio\ssc\src\Dio.c	    89  #endif
; ..\mcal\Dio\ssc\src\Dio.c	    90  
; ..\mcal\Dio\ssc\src\Dio.c	    91  #ifndef DIO_AR_RELEASE_MAJOR_VERSION
; ..\mcal\Dio\ssc\src\Dio.c	    92  #error "DIO_AR_RELEASE_MAJOR_VERSION is not defined."
; ..\mcal\Dio\ssc\src\Dio.c	    93  #endif
; ..\mcal\Dio\ssc\src\Dio.c	    94  
; ..\mcal\Dio\ssc\src\Dio.c	    95  #ifndef DIO_AR_RELEASE_MINOR_VERSION
; ..\mcal\Dio\ssc\src\Dio.c	    96  #error "DIO_AR_RELEASE_MINOR_VERSION is not defined. "
; ..\mcal\Dio\ssc\src\Dio.c	    97  #endif
; ..\mcal\Dio\ssc\src\Dio.c	    98  
; ..\mcal\Dio\ssc\src\Dio.c	    99  #ifndef DIO_AR_RELEASE_REVISION_VERSION
; ..\mcal\Dio\ssc\src\Dio.c	   100  #error "DIO_AR_RELEASE_REVISION_VERSION is not defined. "
; ..\mcal\Dio\ssc\src\Dio.c	   101  #endif
; ..\mcal\Dio\ssc\src\Dio.c	   102  
; ..\mcal\Dio\ssc\src\Dio.c	   103  /* [cover parentID={F7FBC1BE-361C-48d8-BE05-13B8C0CF8618}]
; ..\mcal\Dio\ssc\src\Dio.c	   104    [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   105  #if ( DIO_AR_RELEASE_MAJOR_VERSION != MCAL_AR_RELEASE_MAJOR_VERSION )
; ..\mcal\Dio\ssc\src\Dio.c	   106  #error "DIO_AR_RELEASE_MAJOR_VERSION does not match."
; ..\mcal\Dio\ssc\src\Dio.c	   107  #endif
; ..\mcal\Dio\ssc\src\Dio.c	   108  
; ..\mcal\Dio\ssc\src\Dio.c	   109  #if (DIO_AR_RELEASE_MINOR_VERSION != MCAL_AR_RELEASE_MINOR_VERSION )
; ..\mcal\Dio\ssc\src\Dio.c	   110  #error "DIO_AR_RELEASE_MINOR_VERSION does not match. "
; ..\mcal\Dio\ssc\src\Dio.c	   111  #endif
; ..\mcal\Dio\ssc\src\Dio.c	   112  
; ..\mcal\Dio\ssc\src\Dio.c	   113  #if ( DIO_AR_RELEASE_REVISION_VERSION != MCAL_AR_RELEASE_REVISION_VERSION )
; ..\mcal\Dio\ssc\src\Dio.c	   114  #error "DIO_AR_RELEASE_REVISION_VERSION does not match. "
; ..\mcal\Dio\ssc\src\Dio.c	   115  #endif
; ..\mcal\Dio\ssc\src\Dio.c	   116  
; ..\mcal\Dio\ssc\src\Dio.c	   117  /* [cover parentID={905B21B2-76DD-4e4d-8BE1-81E809E398B0}]
; ..\mcal\Dio\ssc\src\Dio.c	   118    [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   119  #if (DIO_DEV_ERROR_DETECT == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	   120  
; ..\mcal\Dio\ssc\src\Dio.c	   121  #ifndef DET_AR_RELEASE_MAJOR_VERSION
; ..\mcal\Dio\ssc\src\Dio.c	   122  #error "DET_AR_RELEASE_MAJOR_VERSION is not defined."
; ..\mcal\Dio\ssc\src\Dio.c	   123  #endif
; ..\mcal\Dio\ssc\src\Dio.c	   124  
; ..\mcal\Dio\ssc\src\Dio.c	   125  #if ( DET_AR_RELEASE_MAJOR_VERSION != 4U )
; ..\mcal\Dio\ssc\src\Dio.c	   126  #error "DET_AR_RELEASE_MAJOR_VERSION does not match."
; ..\mcal\Dio\ssc\src\Dio.c	   127  #endif
; ..\mcal\Dio\ssc\src\Dio.c	   128  
; ..\mcal\Dio\ssc\src\Dio.c	   129  
; ..\mcal\Dio\ssc\src\Dio.c	   130  
; ..\mcal\Dio\ssc\src\Dio.c	   131  #endif /* End for DIO_DEV_ERROR_DETECT */
; ..\mcal\Dio\ssc\src\Dio.c	   132  
; ..\mcal\Dio\ssc\src\Dio.c	   133  
; ..\mcal\Dio\ssc\src\Dio.c	   134  
; ..\mcal\Dio\ssc\src\Dio.c	   135  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   136  **                      Private Object Like Macro Definitions                 **
; ..\mcal\Dio\ssc\src\Dio.c	   137  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   138  #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT == STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   139  
; ..\mcal\Dio\ssc\src\Dio.c	   140  /* 0th Bit Mask value */
; ..\mcal\Dio\ssc\src\Dio.c	   141  #define DIO_CHANNEL_BIT_MASK         (0x01U)
; ..\mcal\Dio\ssc\src\Dio.c	   142  
; ..\mcal\Dio\ssc\src\Dio.c	   143  /* Error status values */
; ..\mcal\Dio\ssc\src\Dio.c	   144  #define DIO_NO_ERROR                 (1U)
; ..\mcal\Dio\ssc\src\Dio.c	   145  #define DIO_ERROR                    (0U)
; ..\mcal\Dio\ssc\src\Dio.c	   146  
; ..\mcal\Dio\ssc\src\Dio.c	   147  /* Port numbers */
; ..\mcal\Dio\ssc\src\Dio.c	   148  #define DIO_NUMBER_31                (0x1FU)
; ..\mcal\Dio\ssc\src\Dio.c	   149  #define DIO_NUMBER_32                (0x20U)
; ..\mcal\Dio\ssc\src\Dio.c	   150  #endif /* DIO_DEV_ERROR_DETECT == STD_ON */
; ..\mcal\Dio\ssc\src\Dio.c	   151  
; ..\mcal\Dio\ssc\src\Dio.c	   152  #define DIO_NUMBER_0                 (0x0U)
; ..\mcal\Dio\ssc\src\Dio.c	   153  #define DIO_NUMBER_16                (0x10U)
; ..\mcal\Dio\ssc\src\Dio.c	   154  #define DIO_NUMBER_1                 (0x1U)
; ..\mcal\Dio\ssc\src\Dio.c	   155  
; ..\mcal\Dio\ssc\src\Dio.c	   156  /* lower 4 bit mask value */
; ..\mcal\Dio\ssc\src\Dio.c	   157  #define DIO_PIN_LOW4_MASK     (0x0FU)
; ..\mcal\Dio\ssc\src\Dio.c	   158  
; ..\mcal\Dio\ssc\src\Dio.c	   159  /* Bit 4 to 11 Mask value */
; ..\mcal\Dio\ssc\src\Dio.c	   160  #define DIO_4_TO_11_MASK      (0x0FF0U)
; ..\mcal\Dio\ssc\src\Dio.c	   161  
; ..\mcal\Dio\ssc\src\Dio.c	   162  /* This is the reset bit set for Pn_Omr register*/
; ..\mcal\Dio\ssc\src\Dio.c	   163  #define DIO_OMR_RESET_BIT            (0x1U)
; ..\mcal\Dio\ssc\src\Dio.c	   164  
; ..\mcal\Dio\ssc\src\Dio.c	   165  /* Port Number offset */
; ..\mcal\Dio\ssc\src\Dio.c	   166  #define DIO_PORT_NUM_OFFSET   (0x4U)
; ..\mcal\Dio\ssc\src\Dio.c	   167  
; ..\mcal\Dio\ssc\src\Dio.c	   168  #if (DIO_FLIP_CHANNEL_API == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	   169  /* IOCR0 register offset in Port_RegType */
; ..\mcal\Dio\ssc\src\Dio.c	   170  #define DIO_PORT_IOCR0_REG_OFFSET  (0x4U)
; ..\mcal\Dio\ssc\src\Dio.c	   171  
; ..\mcal\Dio\ssc\src\Dio.c	   172  /* Mask to get direction info from Pin control value */
; ..\mcal\Dio\ssc\src\Dio.c	   173  #define DIO_PORT_DIR_MSK             (0x80U)
; ..\mcal\Dio\ssc\src\Dio.c	   174  
; ..\mcal\Dio\ssc\src\Dio.c	   175  /*  Port pin input dirction value */
; ..\mcal\Dio\ssc\src\Dio.c	   176  #define DIO_PORT_PIN_IN              (0x00U)
; ..\mcal\Dio\ssc\src\Dio.c	   177  
; ..\mcal\Dio\ssc\src\Dio.c	   178  /* This is the mask to toggle bit set for Pn_Omr Register */
; ..\mcal\Dio\ssc\src\Dio.c	   179  #define DIO_OMR_MASK_BIT            ((uint32)0x00010001)
; ..\mcal\Dio\ssc\src\Dio.c	   180  
; ..\mcal\Dio\ssc\src\Dio.c	   181  #endif
; ..\mcal\Dio\ssc\src\Dio.c	   182  
; ..\mcal\Dio\ssc\src\Dio.c	   183  #if(DIO_MASKED_WRITE_PORT_API == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	   184  #define OMR_BIT_UPDATE_SHIFT        (16U)
; ..\mcal\Dio\ssc\src\Dio.c	   185  #endif
; ..\mcal\Dio\ssc\src\Dio.c	   186  
; ..\mcal\Dio\ssc\src\Dio.c	   187  #if((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT == STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   188  #define PORT_NO_GREATER_THAN_32  (32U)
; ..\mcal\Dio\ssc\src\Dio.c	   189  #define PORT_POPCNT_CALC         (31U)
; ..\mcal\Dio\ssc\src\Dio.c	   190  #define PORT_POPCNT_CALC_32_63   (PORT_POPCNT_CALC + PORT_NO_GREATER_THAN_32)
; ..\mcal\Dio\ssc\src\Dio.c	   191  #endif
; ..\mcal\Dio\ssc\src\Dio.c	   192  
; ..\mcal\Dio\ssc\src\Dio.c	   193  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   194  **                         User Mode Macros                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   195  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   196  
; ..\mcal\Dio\ssc\src\Dio.c	   197  /*[cover parentID={89094628-24A7-41b5-B0E1-47A7736F20AE}]
; ..\mcal\Dio\ssc\src\Dio.c	   198  User Mode macros not required
; ..\mcal\Dio\ssc\src\Dio.c	   199  [/cover]*/
; ..\mcal\Dio\ssc\src\Dio.c	   200  
; ..\mcal\Dio\ssc\src\Dio.c	   201  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   202  **                   Function like macro definitions                          **
; ..\mcal\Dio\ssc\src\Dio.c	   203  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   204  
; ..\mcal\Dio\ssc\src\Dio.c	   205  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   206  **                      Private Type Definitions                              **
; ..\mcal\Dio\ssc\src\Dio.c	   207  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   208  
; ..\mcal\Dio\ssc\src\Dio.c	   209  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   210  **                      Global Constant Definitions                           **
; ..\mcal\Dio\ssc\src\Dio.c	   211  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   212  
; ..\mcal\Dio\ssc\src\Dio.c	   213  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   214  **                      Global Variable Definitions                           **
; ..\mcal\Dio\ssc\src\Dio.c	   215  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   216  
; ..\mcal\Dio\ssc\src\Dio.c	   217  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   218  **                      Private Constant Definitions                          **
; ..\mcal\Dio\ssc\src\Dio.c	   219  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   220  /* [cover parentID={5713A17A-3FA1-427f-A0B6-89125A17689A},
; ..\mcal\Dio\ssc\src\Dio.c	   221                     {72DABBEB-F27B-4677-B6B4-B53F634341BA}] [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   222  /* [cover parentID={2757CB7F-252C-4231-80B1-F6375E8BAE83},
; ..\mcal\Dio\ssc\src\Dio.c	   223                     {EA0715EE-3E3C-4aac-A42E-4B5CFC96CEED},
; ..\mcal\Dio\ssc\src\Dio.c	   224                     {566ED99C-0D96-46ac-97BF-E97B04E2C700}] [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   225  /* Start of memory mapping of 16 bit constant */
; ..\mcal\Dio\ssc\src\Dio.c	   226  #define DIO_START_SEC_CONST_ASIL_B_GLOBAL_16
; ..\mcal\Dio\ssc\src\Dio.c	   227  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\mcal\Dio\ssc\src\Dio.c	   228  Dio_Memmap.h header is included without safegaurd.*/
; ..\mcal\Dio\ssc\src\Dio.c	   229  #include "Dio_MemMap.h"
; ..\mcal\Dio\ssc\src\Dio.c	   230  
; ..\mcal\Dio\ssc\src\Dio.c	   231  /* MISRA2012_RULE_8_9_JUSTIFICATION: The array Dio_kMaskAllPortPins
; ..\mcal\Dio\ssc\src\Dio.c	   232  cannot be made local since it is used by various APIs when Safety/DET is ON.
; ..\mcal\Dio\ssc\src\Dio.c	   233  Hence it cannot be defined within block scope. */
; ..\mcal\Dio\ssc\src\Dio.c	   234  /* Mask values for all the ports.
; ..\mcal\Dio\ssc\src\Dio.c	   235     This constant is used to mask the All port pins within the port */
; ..\mcal\Dio\ssc\src\Dio.c	   236  static const Dio_PortLevelType Dio_kMaskAllPortPins[] =
; ..\mcal\Dio\ssc\src\Dio.c	   237  {
; ..\mcal\Dio\ssc\src\Dio.c	   238    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT0,
; ..\mcal\Dio\ssc\src\Dio.c	   239    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT1,
; ..\mcal\Dio\ssc\src\Dio.c	   240    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT2,
; ..\mcal\Dio\ssc\src\Dio.c	   241    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT3,
; ..\mcal\Dio\ssc\src\Dio.c	   242    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT4,
; ..\mcal\Dio\ssc\src\Dio.c	   243    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT5,
; ..\mcal\Dio\ssc\src\Dio.c	   244    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT6,
; ..\mcal\Dio\ssc\src\Dio.c	   245    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT7,
; ..\mcal\Dio\ssc\src\Dio.c	   246    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT8,
; ..\mcal\Dio\ssc\src\Dio.c	   247    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT9,
; ..\mcal\Dio\ssc\src\Dio.c	   248    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT10,
; ..\mcal\Dio\ssc\src\Dio.c	   249    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT11,
; ..\mcal\Dio\ssc\src\Dio.c	   250    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT12,
; ..\mcal\Dio\ssc\src\Dio.c	   251    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT13,
; ..\mcal\Dio\ssc\src\Dio.c	   252    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT14,
; ..\mcal\Dio\ssc\src\Dio.c	   253    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT15,
; ..\mcal\Dio\ssc\src\Dio.c	   254    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT16,
; ..\mcal\Dio\ssc\src\Dio.c	   255    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT17,
; ..\mcal\Dio\ssc\src\Dio.c	   256    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT18,
; ..\mcal\Dio\ssc\src\Dio.c	   257    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT19,
; ..\mcal\Dio\ssc\src\Dio.c	   258    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT20,
; ..\mcal\Dio\ssc\src\Dio.c	   259    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT21,
; ..\mcal\Dio\ssc\src\Dio.c	   260    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT22,
; ..\mcal\Dio\ssc\src\Dio.c	   261    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT23,
; ..\mcal\Dio\ssc\src\Dio.c	   262    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT24,
; ..\mcal\Dio\ssc\src\Dio.c	   263    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT25,
; ..\mcal\Dio\ssc\src\Dio.c	   264    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT26,
; ..\mcal\Dio\ssc\src\Dio.c	   265    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT27,
; ..\mcal\Dio\ssc\src\Dio.c	   266    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT28,
; ..\mcal\Dio\ssc\src\Dio.c	   267    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT29,
; ..\mcal\Dio\ssc\src\Dio.c	   268    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT30,
; ..\mcal\Dio\ssc\src\Dio.c	   269    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT31,
; ..\mcal\Dio\ssc\src\Dio.c	   270    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT32,
; ..\mcal\Dio\ssc\src\Dio.c	   271    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT33,
; ..\mcal\Dio\ssc\src\Dio.c	   272    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT34,
; ..\mcal\Dio\ssc\src\Dio.c	   273    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT35,
; ..\mcal\Dio\ssc\src\Dio.c	   274    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT36,
; ..\mcal\Dio\ssc\src\Dio.c	   275    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT37,
; ..\mcal\Dio\ssc\src\Dio.c	   276    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT38,
; ..\mcal\Dio\ssc\src\Dio.c	   277    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT39,
; ..\mcal\Dio\ssc\src\Dio.c	   278    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT40,
; ..\mcal\Dio\ssc\src\Dio.c	   279    (Dio_PortLevelType)DIO_MASK_ALL_PINS_PORT41
; ..\mcal\Dio\ssc\src\Dio.c	   280  
; ..\mcal\Dio\ssc\src\Dio.c	   281  };
; ..\mcal\Dio\ssc\src\Dio.c	   282  
; ..\mcal\Dio\ssc\src\Dio.c	   283  /* Stop of memory mapping of 16 bit constant */
; ..\mcal\Dio\ssc\src\Dio.c	   284  #define DIO_STOP_SEC_CONST_ASIL_B_GLOBAL_16
; ..\mcal\Dio\ssc\src\Dio.c	   285  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\mcal\Dio\ssc\src\Dio.c	   286  Dio_Memmap.h header is included without safegaurd.*/
; ..\mcal\Dio\ssc\src\Dio.c	   287  /*MISRA2012_RULE_20_1_JUSTIFICATION: Dio_Memmap.h header included as per
; ..\mcal\Dio\ssc\src\Dio.c	   288  Autosar guidelines. */
; ..\mcal\Dio\ssc\src\Dio.c	   289  #include "Dio_MemMap.h"
; ..\mcal\Dio\ssc\src\Dio.c	   290  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   291  **                      Private Variable Definitions                          **
; ..\mcal\Dio\ssc\src\Dio.c	   292  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   293  #if((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT == STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   294  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\mcal\Dio\ssc\src\Dio.c	   295    in generated code due to Autosar Naming constraints.*/
; ..\mcal\Dio\ssc\src\Dio.c	   296  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\mcal\Dio\ssc\src\Dio.c	   297    in generated code due to Autosar Naming constraints.*/
; ..\mcal\Dio\ssc\src\Dio.c	   298  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\mcal\Dio\ssc\src\Dio.c	   299    in generated code due to Autosar Naming constraints.*/
; ..\mcal\Dio\ssc\src\Dio.c	   300  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\mcal\Dio\ssc\src\Dio.c	   301    in generated code due to Autosar Naming constraints.*/
; ..\mcal\Dio\ssc\src\Dio.c	   302  #define DIO_START_SEC_CONST_ASIL_B_GLOBAL_32
; ..\mcal\Dio\ssc\src\Dio.c	   303  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\mcal\Dio\ssc\src\Dio.c	   304  Dio_Memmap.h header is included without safegaurd.*/
; ..\mcal\Dio\ssc\src\Dio.c	   305  /*MISRA2012_RULE_20_1_JUSTIFICATION: Dio_Memmap.h header included as per
; ..\mcal\Dio\ssc\src\Dio.c	   306  Autosar guidelines. */
; ..\mcal\Dio\ssc\src\Dio.c	   307  #include "Dio_MemMap.h"
; ..\mcal\Dio\ssc\src\Dio.c	   308  static const Dio_ConfigType * const Dio_kConfigPtr = &Dio_Config;
; ..\mcal\Dio\ssc\src\Dio.c	   309  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\mcal\Dio\ssc\src\Dio.c	   310    in generated code due to Autosar Naming constraints.*/
; ..\mcal\Dio\ssc\src\Dio.c	   311  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\mcal\Dio\ssc\src\Dio.c	   312    in generated code due to Autosar Naming constraints.*/
; ..\mcal\Dio\ssc\src\Dio.c	   313  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\mcal\Dio\ssc\src\Dio.c	   314    in generated code due to Autosar Naming constraints.*/
; ..\mcal\Dio\ssc\src\Dio.c	   315  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\mcal\Dio\ssc\src\Dio.c	   316    in generated code due to Autosar Naming constraints.*/
; ..\mcal\Dio\ssc\src\Dio.c	   317  #define DIO_STOP_SEC_CONST_ASIL_B_GLOBAL_32
; ..\mcal\Dio\ssc\src\Dio.c	   318  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\mcal\Dio\ssc\src\Dio.c	   319  Dio_Memmap.h header is included without safegaurd.*/
; ..\mcal\Dio\ssc\src\Dio.c	   320  /*MISRA2012_RULE_20_1_JUSTIFICATION: Dio_Memmap.h header included as per
; ..\mcal\Dio\ssc\src\Dio.c	   321  Autosar guidelines. */
; ..\mcal\Dio\ssc\src\Dio.c	   322  #include "Dio_MemMap.h"
; ..\mcal\Dio\ssc\src\Dio.c	   323  #endif /*(DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT == STD_ON)*/
; ..\mcal\Dio\ssc\src\Dio.c	   324  
; ..\mcal\Dio\ssc\src\Dio.c	   325  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   326  **                      Private Function Declarations                         **
; ..\mcal\Dio\ssc\src\Dio.c	   327  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   328  /*[[cover parentID={4579FE20-92DA-4848-93DB-7AD4FD35DD50}] [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   329  #define DIO_START_SEC_CODE_ASIL_B_GLOBAL
; ..\mcal\Dio\ssc\src\Dio.c	   330  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\mcal\Dio\ssc\src\Dio.c	   331  Dio_Memmap.h header is included without safegaurd.*/
; ..\mcal\Dio\ssc\src\Dio.c	   332  /*MISRA2012_RULE_20_1_JUSTIFICATION: Dio_Memmap.h header included as per
; ..\mcal\Dio\ssc\src\Dio.c	   333  Autosar guidelines. */
; ..\mcal\Dio\ssc\src\Dio.c	   334  #include "Dio_MemMap.h"
; ..\mcal\Dio\ssc\src\Dio.c	   335  
; ..\mcal\Dio\ssc\src\Dio.c	   336  #if((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT == STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   337  
; ..\mcal\Dio\ssc\src\Dio.c	   338  /* Function to Report Error*/
; ..\mcal\Dio\ssc\src\Dio.c	   339  static void Dio_lReportError(const uint8 ApiId, const uint8 ErrorId);
; ..\mcal\Dio\ssc\src\Dio.c	   340  
; ..\mcal\Dio\ssc\src\Dio.c	   341  #endif
; ..\mcal\Dio\ssc\src\Dio.c	   342  
; ..\mcal\Dio\ssc\src\Dio.c	   343  #if((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT == STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   344  
; ..\mcal\Dio\ssc\src\Dio.c	   345  /* INLINE Function to check if ChannelId is valid or not*/
; ..\mcal\Dio\ssc\src\Dio.c	   346  LOCAL_INLINE uint8 Dio_lCheckChannelId(const Dio_ChannelType ChannelId,
; ..\mcal\Dio\ssc\src\Dio.c	   347                                         const Dio_PortType PortNumber,\ 
; ..\mcal\Dio\ssc\src\Dio.c	   348                                         const uint8 PinNumber);
; ..\mcal\Dio\ssc\src\Dio.c	   349  
; ..\mcal\Dio\ssc\src\Dio.c	   350  /* INLINE Function to check if GroupIdptr is valid or not*/
; ..\mcal\Dio\ssc\src\Dio.c	   351  LOCAL_INLINE uint8 Dio_lCheckGroupId
; ..\mcal\Dio\ssc\src\Dio.c	   352  ( const Dio_ChannelGroupType * const GroupIdPtr);
; ..\mcal\Dio\ssc\src\Dio.c	   353  
; ..\mcal\Dio\ssc\src\Dio.c	   354  /* INLINE Function to check if PortId is valid or not*/
; ..\mcal\Dio\ssc\src\Dio.c	   355  LOCAL_INLINE uint8 Dio_lCheckPortId (const Dio_PortType PortId);
; ..\mcal\Dio\ssc\src\Dio.c	   356  
; ..\mcal\Dio\ssc\src\Dio.c	   357  /* INLINE Function to check if GroupIdPtr is configured or not*/
; ..\mcal\Dio\ssc\src\Dio.c	   358  LOCAL_INLINE uint8 Dio_lCheckChGrpValue
; ..\mcal\Dio\ssc\src\Dio.c	   359  (const Dio_ChannelGroupType * const GroupIdPtr);
; ..\mcal\Dio\ssc\src\Dio.c	   360  
; ..\mcal\Dio\ssc\src\Dio.c	   361  /* INLINE Function to check if the port is
; ..\mcal\Dio\ssc\src\Dio.c	   362        available or not for the microcontroller*/
; ..\mcal\Dio\ssc\src\Dio.c	   363  LOCAL_INLINE uint32 Dio_lIsPortAvailable31(const uint32 Port);
; ..\mcal\Dio\ssc\src\Dio.c	   364  
; ..\mcal\Dio\ssc\src\Dio.c	   365  /* INLINE Function to check if the port is
; ..\mcal\Dio\ssc\src\Dio.c	   366         available or not for the microcontroller*/
; ..\mcal\Dio\ssc\src\Dio.c	   367  LOCAL_INLINE uint32 Dio_lIsPortAvailable63(const uint32 Port);
; ..\mcal\Dio\ssc\src\Dio.c	   368  
; ..\mcal\Dio\ssc\src\Dio.c	   369  /* INLINE Function to check if the port is
; ..\mcal\Dio\ssc\src\Dio.c	   370         available or not for the microcontroller*/
; ..\mcal\Dio\ssc\src\Dio.c	   371  LOCAL_INLINE uint32 Dio_lIsPortAvailable(const uint32 Port);
; ..\mcal\Dio\ssc\src\Dio.c	   372  
; ..\mcal\Dio\ssc\src\Dio.c	   373  /* INLINE Function to check if the
; ..\mcal\Dio\ssc\src\Dio.c	   374       port is read only or it is writable */
; ..\mcal\Dio\ssc\src\Dio.c	   375  LOCAL_INLINE uint32 Dio_lIsPortReadOnly31(const uint32 Port);
; ..\mcal\Dio\ssc\src\Dio.c	   376  
; ..\mcal\Dio\ssc\src\Dio.c	   377  /* INLINE Function to check if the
; ..\mcal\Dio\ssc\src\Dio.c	   378       port is read only or it is writable */
; ..\mcal\Dio\ssc\src\Dio.c	   379  LOCAL_INLINE uint32 Dio_lIsPortReadOnly63(const uint32 Port);
; ..\mcal\Dio\ssc\src\Dio.c	   380  
; ..\mcal\Dio\ssc\src\Dio.c	   381  /* INLINE Function to check if the port
; ..\mcal\Dio\ssc\src\Dio.c	   382            is read only or it is writable */
; ..\mcal\Dio\ssc\src\Dio.c	   383  LOCAL_INLINE uint32 Dio_lIsPortReadOnly(const uint32 Port);
; ..\mcal\Dio\ssc\src\Dio.c	   384  
; ..\mcal\Dio\ssc\src\Dio.c	   385  /* INLINE Function to check if the Pin
; ..\mcal\Dio\ssc\src\Dio.c	   386            available or not for the input parameter port */
; ..\mcal\Dio\ssc\src\Dio.c	   387  LOCAL_INLINE uint16 Dio_lIsPinAvailable(const uint32 Port, const uint8 Pin);
; ..\mcal\Dio\ssc\src\Dio.c	   388  #endif /* ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT == STD_ON))*/
; ..\mcal\Dio\ssc\src\Dio.c	   389  
; ..\mcal\Dio\ssc\src\Dio.c	   390  /* INLINE function to identify the port number from the passed ChannelId */
; ..\mcal\Dio\ssc\src\Dio.c	   391  LOCAL_INLINE Dio_PortType Dio_lGetPortNumber(const Dio_ChannelType ChannelId);
; ..\mcal\Dio\ssc\src\Dio.c	   392  
; ..\mcal\Dio\ssc\src\Dio.c	   393  /* INLINE function to extract the Address of Px module */
; ..\mcal\Dio\ssc\src\Dio.c	   394  LOCAL_INLINE Ifx_P *Dio_lGetPortAdr(const Dio_PortType PortNumber);
; ..\mcal\Dio\ssc\src\Dio.c	   395  
; ..\mcal\Dio\ssc\src\Dio.c	   396  /* INLINE function to identify the pin number from the passed ChannelId */
; ..\mcal\Dio\ssc\src\Dio.c	   397  LOCAL_INLINE uint8 Dio_lGetPinNumber(const Dio_ChannelType ChannelId);
; ..\mcal\Dio\ssc\src\Dio.c	   398  
; ..\mcal\Dio\ssc\src\Dio.c	   399  #if(DIO_SAFETY_ENABLE == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	   400  /*INLINE function to check if the Level passed is valid */
; ..\mcal\Dio\ssc\src\Dio.c	   401  LOCAL_INLINE uint8 Dio_lCheckLevel(const Dio_LevelType Level);
; ..\mcal\Dio\ssc\src\Dio.c	   402  #endif
; ..\mcal\Dio\ssc\src\Dio.c	   403  
; ..\mcal\Dio\ssc\src\Dio.c	   404  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   405  **                      Global Function Definitions                           **
; ..\mcal\Dio\ssc\src\Dio.c	   406  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   407  
; ..\mcal\Dio\ssc\src\Dio.c	   408  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   409  ** Traceability:[cover parentID={2FCCA836-116C-4ec3-9866-ED48D757D432}]       **
; ..\mcal\Dio\ssc\src\Dio.c	   410  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   411  ** Syntax           : Dio_LevelType Dio_ReadChannel                           **
; ..\mcal\Dio\ssc\src\Dio.c	   412  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	   413  **                     const Dio_ChannelType ChannelId                        **
; ..\mcal\Dio\ssc\src\Dio.c	   414  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	   415  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   416  ** Description :  This Api:                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   417  **      - returns the level of specified channel                              **
; ..\mcal\Dio\ssc\src\Dio.c	   418  **      - The specified channel can be input or output                        **
; ..\mcal\Dio\ssc\src\Dio.c	   419  **      - returns the physical level of the channel                           **
; ..\mcal\Dio\ssc\src\Dio.c	   420  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   421  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   422  ** Service ID:  0x00                                                          **
; ..\mcal\Dio\ssc\src\Dio.c	   423  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   424  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   425  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   426  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	   427  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   428  ** Parameters (in)  : ChannelId - ChannelId whose level to be read            **
; ..\mcal\Dio\ssc\src\Dio.c	   429  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   430  ** Parameters (out) : none                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	   431  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   432  ** Return value     : RetVal - The Api returns level                          **
; ..\mcal\Dio\ssc\src\Dio.c	   433  **                    of the specified channel                                **
; ..\mcal\Dio\ssc\src\Dio.c	   434  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   435  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   436  
; ..\mcal\Dio\ssc\src\Dio.c	   437  Dio_LevelType Dio_ReadChannel(const Dio_ChannelType ChannelId)
; Function Dio_ReadChannel
.L9:
Dio_ReadChannel:	.type	func

; ..\mcal\Dio\ssc\src\Dio.c	   438  {
; ..\mcal\Dio\ssc\src\Dio.c	   439    uint32         PinPosition;
; ..\mcal\Dio\ssc\src\Dio.c	   440    Dio_PortType   PortNumber;
; ..\mcal\Dio\ssc\src\Dio.c	   441    uint8          PinNumber;
; ..\mcal\Dio\ssc\src\Dio.c	   442    Dio_LevelType  RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	   443    const Ifx_P *GetPortAddressPtr;
; ..\mcal\Dio\ssc\src\Dio.c	   444  
; ..\mcal\Dio\ssc\src\Dio.c	   445    /* Return value should be zero for errors*/
; ..\mcal\Dio\ssc\src\Dio.c	   446    RetVal = (Dio_LevelType)STD_LOW;
; ..\mcal\Dio\ssc\src\Dio.c	   447  
; ..\mcal\Dio\ssc\src\Dio.c	   448    /* GetPortNumber will get the Port Number */
; ..\mcal\Dio\ssc\src\Dio.c	   449    PortNumber = Dio_lGetPortNumber(ChannelId);
; ..\mcal\Dio\ssc\src\Dio.c	   450    /* GetPinNumber will get the Pin Number */
; ..\mcal\Dio\ssc\src\Dio.c	   451    PinNumber = Dio_lGetPinNumber(ChannelId);
; ..\mcal\Dio\ssc\src\Dio.c	   452  
; ..\mcal\Dio\ssc\src\Dio.c	   453    /* [cover parentID={D6CF8A26-846E-41bd-B070-735583623161}]
; ..\mcal\Dio\ssc\src\Dio.c	   454       Det is Enabled or Safety is Enabled
; ..\mcal\Dio\ssc\src\Dio.c	   455       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   456  
; ..\mcal\Dio\ssc\src\Dio.c	   457    #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT ==STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   458    uint8 ErrStatus;
; ..\mcal\Dio\ssc\src\Dio.c	   459    ErrStatus = E_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   460  
; ..\mcal\Dio\ssc\src\Dio.c	   461    /* [cover parentID={78B6E21A-C072-44ff-9DCD-F5FBA4760844}]
; ..\mcal\Dio\ssc\src\Dio.c	   462       Verify ChannelID
; ..\mcal\Dio\ssc\src\Dio.c	   463       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   464    /* [cover parentID={D3D46F48-C883-4029-903D-504C0D98DA08}]
; ..\mcal\Dio\ssc\src\Dio.c	   465       Check For Channel Id
; ..\mcal\Dio\ssc\src\Dio.c	   466       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   467  
; ..\mcal\Dio\ssc\src\Dio.c	   468    if(Dio_lCheckChannelId(ChannelId, PortNumber, PinNumber) == (uint8)DIO_ERROR)
; ..\mcal\Dio\ssc\src\Dio.c	   469    {
; ..\mcal\Dio\ssc\src\Dio.c	   470  
; ..\mcal\Dio\ssc\src\Dio.c	   471      /* The port id passed to the Api is invalid. Report error id
; ..\mcal\Dio\ssc\src\Dio.c	   472           DIO_E_PARAM_INVALID_PORT_ID to the error hook Api */
; ..\mcal\Dio\ssc\src\Dio.c	   473      /* [cover parentID={A9221E36-068F-4ce1-9580-D2984C1523D2}]
; ..\mcal\Dio\ssc\src\Dio.c	   474         Report Error
; ..\mcal\Dio\ssc\src\Dio.c	   475         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   476      Dio_lReportError(DIO_SID_READCHANNEL, DIO_E_PARAM_INVALID_CHANNEL_ID);
; ..\mcal\Dio\ssc\src\Dio.c	   477      ErrStatus = (uint8)E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   478    }
; ..\mcal\Dio\ssc\src\Dio.c	   479    /* [cover parentID={603FF38D-C496-4f72-BAFE-0A0A3DA18E06}]
; ..\mcal\Dio\ssc\src\Dio.c	   480       Have all Checked Passed
; ..\mcal\Dio\ssc\src\Dio.c	   481       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   482    if(ErrStatus == (uint8)E_OK)
; ..\mcal\Dio\ssc\src\Dio.c	   483    #endif /*DIO_DEV_ERROR_DETECT == STD_ON*/
; ..\mcal\Dio\ssc\src\Dio.c	   484    {
; ..\mcal\Dio\ssc\src\Dio.c	   485      /* GetPortAddressPtr will hold the port address */
; ..\mcal\Dio\ssc\src\Dio.c	   486      GetPortAddressPtr = Dio_lGetPortAdr(PortNumber);
; ..\mcal\Dio\ssc\src\Dio.c	   487  
; ..\mcal\Dio\ssc\src\Dio.c	   488      /* Get the Pin position */
; ..\mcal\Dio\ssc\src\Dio.c	   489      PinPosition = ((uint32)DIO_NUMBER_1 << PinNumber);
	mov	d0,#1
.L165:

; ..\mcal\Dio\ssc\src\Dio.c	   490  
; ..\mcal\Dio\ssc\src\Dio.c	   491  
; ..\mcal\Dio\ssc\src\Dio.c	   492      /* Read the Channel level and decide the return value */
; ..\mcal\Dio\ssc\src\Dio.c	   493      /* [cover parentID={D5B9A5B5-0FCB-4e7e-BD3D-3048FD74EB2F}]
; ..\mcal\Dio\ssc\src\Dio.c	   494         PinPosition Not Low
; ..\mcal\Dio\ssc\src\Dio.c	   495         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   496      if ((PinPosition & (uint32)(GetPortAddressPtr->IN.U)) != (uint32)STD_LOW)
; ..\mcal\Dio\ssc\src\Dio.c	   497      {
; ..\mcal\Dio\ssc\src\Dio.c	   498        RetVal = (Dio_LevelType)STD_HIGH;
; ..\mcal\Dio\ssc\src\Dio.c	   499      }
; ..\mcal\Dio\ssc\src\Dio.c	   500    }
; ..\mcal\Dio\ssc\src\Dio.c	   501    /* [cover parentID={F2E636E0-8CA6-4fd7-A2A9-5C3BD7911445}]
; ..\mcal\Dio\ssc\src\Dio.c	   502       Return the Value
; ..\mcal\Dio\ssc\src\Dio.c	   503       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   504    return RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	   505  }/* Dio_ReadChannel */
; ..\mcal\Dio\ssc\src\Dio.c	   506  
; ..\mcal\Dio\ssc\src\Dio.c	   507  
; ..\mcal\Dio\ssc\src\Dio.c	   508  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   509  ** Traceability:[cover parentID={2E143AC8-A3EE-4bb0-BAFF-6EA8BC0DA0AA}]       **
; ..\mcal\Dio\ssc\src\Dio.c	   510  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   511  ** Syntax           : void Dio_WriteChannel                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   512  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	   513  **                    const Dio_ChannelType ChannelId,                        **
; ..\mcal\Dio\ssc\src\Dio.c	   514  **                     const Dio_LevelType Level                              **
; ..\mcal\Dio\ssc\src\Dio.c	   515  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	   516  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   517  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   518  ** Description :  This Api:                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   519  **      - sets the specified level for specified channel                      **
; ..\mcal\Dio\ssc\src\Dio.c	   520  **      - Possible levels for channel are STD_HIGH and STD_LOW                **
; ..\mcal\Dio\ssc\src\Dio.c	   521  **      - The real physical level of pin is not                               **
; ..\mcal\Dio\ssc\src\Dio.c	   522  **        modified if the specified channel is configured as input            **
; ..\mcal\Dio\ssc\src\Dio.c	   523  **      - For input channel this Api writes into the output                   **
; ..\mcal\Dio\ssc\src\Dio.c	   524  **        register, so that pin level can be set immediately when direction   **
; ..\mcal\Dio\ssc\src\Dio.c	   525  **        changed by PORT driver                                              **
; ..\mcal\Dio\ssc\src\Dio.c	   526  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   527  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   528  ** Service ID:  0x01                                                          **
; ..\mcal\Dio\ssc\src\Dio.c	   529  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   530  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   531  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   532  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	   533  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   534  ** Parameters(in)   : ChannelId - ID of DIO channel                           **
; ..\mcal\Dio\ssc\src\Dio.c	   535  **                    Level - Level to be written                             **
; ..\mcal\Dio\ssc\src\Dio.c	   536  ** Parameters (out) : none                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	   537  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   538  ** Return value     : none                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	   539  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   540  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   541  void Dio_WriteChannel(const Dio_ChannelType ChannelId,
; ..\mcal\Dio\ssc\src\Dio.c	   542                        const Dio_LevelType Level)
; ..\mcal\Dio\ssc\src\Dio.c	   543  {
; ..\mcal\Dio\ssc\src\Dio.c	   544  
; ..\mcal\Dio\ssc\src\Dio.c	   545    const Ifx_P *GetPortAddressPtr;
; ..\mcal\Dio\ssc\src\Dio.c	   546    uint32 OmrVal;
; ..\mcal\Dio\ssc\src\Dio.c	   547    Dio_PortType   PortNumber;
; ..\mcal\Dio\ssc\src\Dio.c	   548    uint8          PinNumber;
; ..\mcal\Dio\ssc\src\Dio.c	   549    uint8          Offset;
; ..\mcal\Dio\ssc\src\Dio.c	   550  
; ..\mcal\Dio\ssc\src\Dio.c	   551    #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT ==STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   552    uint8 ErrStatus = E_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   553    #if (((DIO_PORTS_READONLY_00_31 != DIO_NUMBER_0)|| \ 
; ..\mcal\Dio\ssc\src\Dio.c	   554                                     (DIO_PORTS_READONLY_32_63 != DIO_NUMBER_0)))
; ..\mcal\Dio\ssc\src\Dio.c	   555    uint32      PortReadOnly;
; ..\mcal\Dio\ssc\src\Dio.c	   556    #endif
; ..\mcal\Dio\ssc\src\Dio.c	   557    #endif
; ..\mcal\Dio\ssc\src\Dio.c	   558  
; ..\mcal\Dio\ssc\src\Dio.c	   559    OmrVal = DIO_OMR_RESET_BIT;
; ..\mcal\Dio\ssc\src\Dio.c	   560    Offset = DIO_NUMBER_16;
; ..\mcal\Dio\ssc\src\Dio.c	   561  
; ..\mcal\Dio\ssc\src\Dio.c	   562    /* GetPortNumber will get the Port Number */
; ..\mcal\Dio\ssc\src\Dio.c	   563    PortNumber = Dio_lGetPortNumber(ChannelId);
; ..\mcal\Dio\ssc\src\Dio.c	   564    /* GetPinNumber will get the Pin Number */
; ..\mcal\Dio\ssc\src\Dio.c	   565    PinNumber = Dio_lGetPinNumber(ChannelId);
; ..\mcal\Dio\ssc\src\Dio.c	   566  
; ..\mcal\Dio\ssc\src\Dio.c	   567    /* [cover parentID={59CCA3A3-E3DA-4fce-89C5-38A12781B286}]
; ..\mcal\Dio\ssc\src\Dio.c	   568       Det is enbled or Safety is Enabled
; ..\mcal\Dio\ssc\src\Dio.c	   569       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   570    #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT ==STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   571    /* [cover parentID={963C4E08-5B22-4465-9347-708C76E676F5},
; ..\mcal\Dio\ssc\src\Dio.c	   572                                           {18026834-5363-4066-805E-192C75A3451F}]
; ..\mcal\Dio\ssc\src\Dio.c	   573       For Channel Id,Check is Port Configured
; ..\mcal\Dio\ssc\src\Dio.c	   574       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   575    if((Dio_lCheckChannelId(ChannelId, PortNumber, PinNumber) ==
; ..\mcal\Dio\ssc\src\Dio.c	   576        (uint8)DIO_ERROR))
; ..\mcal\Dio\ssc\src\Dio.c	   577    {
; ..\mcal\Dio\ssc\src\Dio.c	   578      /* The channel id passed to the Api is invalid. Report error id.
; ..\mcal\Dio\ssc\src\Dio.c	   579          DIO_E_PARAM_INVALID_CHANNEL_ID to the error hook Api */
; ..\mcal\Dio\ssc\src\Dio.c	   580      /* [cover parentID={5A932FF5-0AD2-4acf-A74B-EA1EAC0FA9DB}]
; ..\mcal\Dio\ssc\src\Dio.c	   581         Call Dio_lReportError
; ..\mcal\Dio\ssc\src\Dio.c	   582         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   583  
; ..\mcal\Dio\ssc\src\Dio.c	   584      Dio_lReportError(DIO_SID_WRITECHANNEL, DIO_E_PARAM_INVALID_CHANNEL_ID);
; ..\mcal\Dio\ssc\src\Dio.c	   585      ErrStatus = (uint8)E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   586    }
; ..\mcal\Dio\ssc\src\Dio.c	   587    else
; ..\mcal\Dio\ssc\src\Dio.c	   588    {
; ..\mcal\Dio\ssc\src\Dio.c	   589      /* [cover parentID={6D238403-3087-41cd-8AD3-9BE5DD7FEBB7}]
; ..\mcal\Dio\ssc\src\Dio.c	   590         ReadOnly Port is there
; ..\mcal\Dio\ssc\src\Dio.c	   591         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   592      #if (((DIO_PORTS_READONLY_00_31 != DIO_NUMBER_0)|| \ 
; ..\mcal\Dio\ssc\src\Dio.c	   593                                       (DIO_PORTS_READONLY_32_63 != DIO_NUMBER_0)))
; ..\mcal\Dio\ssc\src\Dio.c	   594      PortReadOnly = Dio_lIsPortReadOnly((uint32)PortNumber);
; ..\mcal\Dio\ssc\src\Dio.c	   595      /* [cover parentID={275099F0-582F-44b8-B84F-B6F47C3B8E1C}]
; ..\mcal\Dio\ssc\src\Dio.c	   596         Is Port Read Only
; ..\mcal\Dio\ssc\src\Dio.c	   597         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   598      if((PortReadOnly != (uint32)DIO_NUMBER_0))
; ..\mcal\Dio\ssc\src\Dio.c	   599      {
; ..\mcal\Dio\ssc\src\Dio.c	   600        /* The channel id passed to the Api is invalid. Report error id.
; ..\mcal\Dio\ssc\src\Dio.c	   601            DIO_E_PARAM_INVALID_CHANNEL_ID to the error hook Api */
; ..\mcal\Dio\ssc\src\Dio.c	   602        /* [cover parentID={E80D8D15-85B7-4234-822D-32AD6375074D}]
; ..\mcal\Dio\ssc\src\Dio.c	   603           Call Dio_lReportError
; ..\mcal\Dio\ssc\src\Dio.c	   604          [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   605  
; ..\mcal\Dio\ssc\src\Dio.c	   606        Dio_lReportError(DIO_SID_WRITECHANNEL, DIO_E_PARAM_INVALID_CHANNEL_ID);
; ..\mcal\Dio\ssc\src\Dio.c	   607        ErrStatus = (uint8)E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   608      }
; ..\mcal\Dio\ssc\src\Dio.c	   609      #endif
; ..\mcal\Dio\ssc\src\Dio.c	   610    }
; ..\mcal\Dio\ssc\src\Dio.c	   611    /* [cover parentID={9B9B7CD6-F0D7-4548-B082-52B225435AB4}]
; ..\mcal\Dio\ssc\src\Dio.c	   612       Have all checks Passed
; ..\mcal\Dio\ssc\src\Dio.c	   613       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   614    if(ErrStatus == (uint8)E_OK)
; ..\mcal\Dio\ssc\src\Dio.c	   615    #endif /* DIO_DEV_ERROR_DETECT == STD_ON*/
; ..\mcal\Dio\ssc\src\Dio.c	   616    {
; ..\mcal\Dio\ssc\src\Dio.c	   617      #if(DIO_SAFETY_ENABLE == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	   618      ErrStatus=Dio_lCheckLevel(Level);
; ..\mcal\Dio\ssc\src\Dio.c	   619       /* [cover parentID={10D47BAE-3095-4e05-A568-3D6057D3CE29}]
; ..\mcal\Dio\ssc\src\Dio.c	   620       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   621      if(ErrStatus == (uint8)E_OK)
; ..\mcal\Dio\ssc\src\Dio.c	   622      #endif
; ..\mcal\Dio\ssc\src\Dio.c	   623      {
; ..\mcal\Dio\ssc\src\Dio.c	   624      /* Decide the value to be written depending
; ..\mcal\Dio\ssc\src\Dio.c	   625        on the input parameter Level */
; ..\mcal\Dio\ssc\src\Dio.c	   626      /* [cover parentID={6D6740AD-E184-4a0b-9408-DB950AA309DF}]
; ..\mcal\Dio\ssc\src\Dio.c	   627         Decide the value to be witten
; ..\mcal\Dio\ssc\src\Dio.c	   628         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   629      if (Level != (Dio_LevelType)STD_LOW)
; ..\mcal\Dio\ssc\src\Dio.c	   630      {
; ..\mcal\Dio\ssc\src\Dio.c	   631        Offset = DIO_NUMBER_0;
; ..\mcal\Dio\ssc\src\Dio.c	   632      }
; ..\mcal\Dio\ssc\src\Dio.c	   633  
; ..\mcal\Dio\ssc\src\Dio.c	   634      /* GetPortAddressPtr will hold the port address */
; ..\mcal\Dio\ssc\src\Dio.c	   635      GetPortAddressPtr = Dio_lGetPortAdr(PortNumber);
; ..\mcal\Dio\ssc\src\Dio.c	   636  
; ..\mcal\Dio\ssc\src\Dio.c	   637      /* Write to the PORT OMR register to reflect at the channel*/
; ..\mcal\Dio\ssc\src\Dio.c	   638      /* [cover parentID={5D9F71A3-819D-4eb0-B877-F999764818E8}]
; ..\mcal\Dio\ssc\src\Dio.c	   639         Write to the Channel
; ..\mcal\Dio\ssc\src\Dio.c	   640         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   641      Mcal_SetBitAtomic(&(GetPortAddressPtr->OMR), Offset, 16,\ 
; ..\mcal\Dio\ssc\src\Dio.c	   642                         (OmrVal << PinNumber));
; ..\mcal\Dio\ssc\src\Dio.c	   643      }
; ..\mcal\Dio\ssc\src\Dio.c	   644  
; ..\mcal\Dio\ssc\src\Dio.c	   645    }
; ..\mcal\Dio\ssc\src\Dio.c	   646    /* MISRA2012_RULE_2_2_JUSTIFICATION:Value assigned to variable
; ..\mcal\Dio\ssc\src\Dio.c	   647    GetPortAddressPtr is passed to Mcal_SetBitAtomic operation*/
; ..\mcal\Dio\ssc\src\Dio.c	   648    /* MISRA2012_RULE_2_2_JUSTIFICATION:Value assigned to variable
; ..\mcal\Dio\ssc\src\Dio.c	   649    OmrVal is passed to Mcal_SetBitAtomic operation*/
; ..\mcal\Dio\ssc\src\Dio.c	   650    /* MISRA2012_RULE_2_2_JUSTIFICATION:Value assigned to variable
; ..\mcal\Dio\ssc\src\Dio.c	   651    Offset is passed to Mcal_SetBitAtomic operation*/
; ..\mcal\Dio\ssc\src\Dio.c	   652  }/* Dio_WriteChannel */
; ..\mcal\Dio\ssc\src\Dio.c	   653  
; ..\mcal\Dio\ssc\src\Dio.c	   654  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   655  ** Traceability:[cover parentID={4EB38A01-F94D-4e46-8CBA-0F0E549CDD4E}]       **
; ..\mcal\Dio\ssc\src\Dio.c	   656  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   657  ** Syntax           : Dio_PortLevelType Dio_ReadPort                          **
; ..\mcal\Dio\ssc\src\Dio.c	   658  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	   659  **                     const Dio_PortType PortId                              **
; ..\mcal\Dio\ssc\src\Dio.c	   660  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	   661  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   662  ** Description :  This Api:                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   663  **      - returns the level of specified port                                 **
; ..\mcal\Dio\ssc\src\Dio.c	   664  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   665  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   666  ** Service ID:  0x02                                                          **
; ..\mcal\Dio\ssc\src\Dio.c	   667  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   668  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   669  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   670  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	   671  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   672  ** Parameters (in):  PortId - Port id whose level to be read                  **
; ..\mcal\Dio\ssc\src\Dio.c	   673  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   674  ** Parameters (out):  none                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	   675  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   676  ** Return value     : RetVal - The Api returns level                          **
; ..\mcal\Dio\ssc\src\Dio.c	   677  **                    of the specified port                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   678  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   679  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   680  Dio_PortLevelType Dio_ReadPort(const Dio_PortType PortId)
; ..\mcal\Dio\ssc\src\Dio.c	   681  {
; ..\mcal\Dio\ssc\src\Dio.c	   682    const Ifx_P   *GetPortAddressPtr;
; ..\mcal\Dio\ssc\src\Dio.c	   683    Dio_PortLevelType  RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	   684  
; ..\mcal\Dio\ssc\src\Dio.c	   685    /* [cover parentID={27DC0E96-0DDD-433a-8245-07EF2D1E1A63}]
; ..\mcal\Dio\ssc\src\Dio.c	   686       DET is Enabled or Safety is Enabled
; ..\mcal\Dio\ssc\src\Dio.c	   687       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   688  
; ..\mcal\Dio\ssc\src\Dio.c	   689    #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT ==STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   690    uint8 ErrStatus;
; ..\mcal\Dio\ssc\src\Dio.c	   691    ErrStatus = E_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   692    /* Return value should be zero for errors*/
; ..\mcal\Dio\ssc\src\Dio.c	   693    RetVal = (Dio_PortLevelType)STD_LOW;
; ..\mcal\Dio\ssc\src\Dio.c	   694  
; ..\mcal\Dio\ssc\src\Dio.c	   695    /* [cover parentID={F283A2B8-3B51-4360-87FD-4A12EEA5161B}]
; ..\mcal\Dio\ssc\src\Dio.c	   696       Verify Port Id
; ..\mcal\Dio\ssc\src\Dio.c	   697       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   698  
; ..\mcal\Dio\ssc\src\Dio.c	   699    /* [cover parentID={BD6402BA-0071-4a55-98ED-A5F046F56D4C}]
; ..\mcal\Dio\ssc\src\Dio.c	   700       Check for PortID
; ..\mcal\Dio\ssc\src\Dio.c	   701       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   702  
; ..\mcal\Dio\ssc\src\Dio.c	   703    if(Dio_lCheckPortId(PortId) == (uint8)DIO_ERROR)
; ..\mcal\Dio\ssc\src\Dio.c	   704    {
; ..\mcal\Dio\ssc\src\Dio.c	   705  
; ..\mcal\Dio\ssc\src\Dio.c	   706      /* The port id passed to the Api is invalid. Report error id
; ..\mcal\Dio\ssc\src\Dio.c	   707       DIO_E_PARAM_INVALID_PORT_ID to the error hook Api */
; ..\mcal\Dio\ssc\src\Dio.c	   708      /* [cover parentID={EAA5B4E6-5EA8-4be8-897B-7993024E5475}]
; ..\mcal\Dio\ssc\src\Dio.c	   709         Report Error
; ..\mcal\Dio\ssc\src\Dio.c	   710         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   711      Dio_lReportError(DIO_SID_READPORT, DIO_E_PARAM_INVALID_PORT_ID);
; ..\mcal\Dio\ssc\src\Dio.c	   712      ErrStatus = E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   713    }
; ..\mcal\Dio\ssc\src\Dio.c	   714    /* [cover parentID={EEDD33A5-A37C-4019-B837-20961EA3EF72}]
; ..\mcal\Dio\ssc\src\Dio.c	   715       Have all Checks Passed
; ..\mcal\Dio\ssc\src\Dio.c	   716       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   717    if(ErrStatus == (uint8)E_OK)
; ..\mcal\Dio\ssc\src\Dio.c	   718    #endif /*DIO_DEV_ERROR_DETECT == STD_ON*/
; ..\mcal\Dio\ssc\src\Dio.c	   719    {
; ..\mcal\Dio\ssc\src\Dio.c	   720      GetPortAddressPtr = Dio_lGetPortAdr(PortId);
; ..\mcal\Dio\ssc\src\Dio.c	   721      /* [cover parentID={EA1BE923-0188-482c-B5C2-82A1E4640CDE}]
; ..\mcal\Dio\ssc\src\Dio.c	   722         Read Value from the Port
; ..\mcal\Dio\ssc\src\Dio.c	   723         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   724      RetVal = ((Dio_PortLevelType)GetPortAddressPtr->IN.U &
; ..\mcal\Dio\ssc\src\Dio.c	   725                Dio_kMaskAllPortPins[PortId]);
; ..\mcal\Dio\ssc\src\Dio.c	   726    }
; ..\mcal\Dio\ssc\src\Dio.c	   727    /* [cover parentID={AF145CB7-62AF-43f9-9A40-6EEB5F272FF6}]
; ..\mcal\Dio\ssc\src\Dio.c	   728       Return the Read Value
; ..\mcal\Dio\ssc\src\Dio.c	   729       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   730    return (RetVal);
; ..\mcal\Dio\ssc\src\Dio.c	   731  }/* Dio_ReadPort */
; ..\mcal\Dio\ssc\src\Dio.c	   732  
; ..\mcal\Dio\ssc\src\Dio.c	   733  
; ..\mcal\Dio\ssc\src\Dio.c	   734  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   735  ** Traceability:[cover parentID={D2AB80C0-4E8B-4a48-BC44-AB5FC27792DA}]       **
; ..\mcal\Dio\ssc\src\Dio.c	   736  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   737  ** Syntax           : void Dio_WritePort                                      **
; ..\mcal\Dio\ssc\src\Dio.c	   738  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	   739  **                     const Dio_PortType PortId,                             **
; ..\mcal\Dio\ssc\src\Dio.c	   740  **                     const Dio_PortLevelType Level                          **
; ..\mcal\Dio\ssc\src\Dio.c	   741  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	   742  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   743  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   744  ** Description :  This Api:                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   745  **      - sets the specified level for specified port                         **
; ..\mcal\Dio\ssc\src\Dio.c	   746  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   747  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   748  ** Service ID:  0x03                                                          **
; ..\mcal\Dio\ssc\src\Dio.c	   749  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   750  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   751  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   752  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	   753  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   754  ** Parameters(in)   : PortId - ID of DIO port                                 **
; ..\mcal\Dio\ssc\src\Dio.c	   755  **                    Level - Level to be written                             **
; ..\mcal\Dio\ssc\src\Dio.c	   756  ** Parameters (out) : none                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	   757  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   758  ** Return value     : none                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	   759  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   760  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   761  
; ..\mcal\Dio\ssc\src\Dio.c	   762  void Dio_WritePort (const Dio_PortType PortId, const  Dio_PortLevelType Level)
; ..\mcal\Dio\ssc\src\Dio.c	   763  {
; ..\mcal\Dio\ssc\src\Dio.c	   764    const Ifx_P *GetPortAddressPtr;
; ..\mcal\Dio\ssc\src\Dio.c	   765  
; ..\mcal\Dio\ssc\src\Dio.c	   766    #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT ==STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   767    uint8 ErrStatus = E_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   768    #if (((DIO_PORTS_READONLY_00_31 != DIO_NUMBER_0)|| \ 
; ..\mcal\Dio\ssc\src\Dio.c	   769                                     (DIO_PORTS_READONLY_32_63 != DIO_NUMBER_0)))
; ..\mcal\Dio\ssc\src\Dio.c	   770    uint32  PortReadOnly;
; ..\mcal\Dio\ssc\src\Dio.c	   771    #endif
; ..\mcal\Dio\ssc\src\Dio.c	   772    #endif
; ..\mcal\Dio\ssc\src\Dio.c	   773  
; ..\mcal\Dio\ssc\src\Dio.c	   774     /* [cover parentID={0A678F0C-6A6B-4c0e-839B-19AAE20E59C7}]
; ..\mcal\Dio\ssc\src\Dio.c	   775       Det is Enabled or Safety is Enabled
; ..\mcal\Dio\ssc\src\Dio.c	   776       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   777    #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT ==STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   778    /* [cover parentID={D7049714-D4FF-4c68-8003-4EEB856D8027}]
; ..\mcal\Dio\ssc\src\Dio.c	   779       Check is Port Configured
; ..\mcal\Dio\ssc\src\Dio.c	   780       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   781    if((Dio_lCheckPortId(PortId) == (uint8)DIO_ERROR))
; ..\mcal\Dio\ssc\src\Dio.c	   782    {
; ..\mcal\Dio\ssc\src\Dio.c	   783      /* The port id passed to the Api is invalid. Report error id
; ..\mcal\Dio\ssc\src\Dio.c	   784         DIO_E_PARAM_INVALID_PORT_ID to the error hook Api */
; ..\mcal\Dio\ssc\src\Dio.c	   785      /* [cover parentID={68F46755-326A-43f2-817E-69CCA2217650}]
; ..\mcal\Dio\ssc\src\Dio.c	   786         Call Dio_lReportError
; ..\mcal\Dio\ssc\src\Dio.c	   787         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   788      Dio_lReportError(DIO_SID_WRITEPORT, DIO_E_PARAM_INVALID_PORT_ID);
; ..\mcal\Dio\ssc\src\Dio.c	   789      ErrStatus = E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   790    }
; ..\mcal\Dio\ssc\src\Dio.c	   791    else
; ..\mcal\Dio\ssc\src\Dio.c	   792    {
; ..\mcal\Dio\ssc\src\Dio.c	   793      /* PortReadOnly will check for Read Only Ports */
; ..\mcal\Dio\ssc\src\Dio.c	   794      /* [cover parentID={F2208B41-B9DB-4dfd-92FF-BE6D1E58983E}]
; ..\mcal\Dio\ssc\src\Dio.c	   795         ReadOnly Port is there
; ..\mcal\Dio\ssc\src\Dio.c	   796         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   797      #if (((DIO_PORTS_READONLY_00_31 != DIO_NUMBER_0)|| \ 
; ..\mcal\Dio\ssc\src\Dio.c	   798                                       (DIO_PORTS_READONLY_32_63 != DIO_NUMBER_0)))
; ..\mcal\Dio\ssc\src\Dio.c	   799      PortReadOnly = Dio_lIsPortReadOnly((uint32)PortId);
; ..\mcal\Dio\ssc\src\Dio.c	   800      /* [cover parentID={B024CA9F-E965-474f-9C8B-2A6084B64F06}]
; ..\mcal\Dio\ssc\src\Dio.c	   801         Is Port ReadOnly
; ..\mcal\Dio\ssc\src\Dio.c	   802         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   803      if ((PortReadOnly != (uint32)DIO_NUMBER_0))
; ..\mcal\Dio\ssc\src\Dio.c	   804      {
; ..\mcal\Dio\ssc\src\Dio.c	   805        /* [cover parentID={A8805437-29A6-4aca-A98B-EEA610B6BA5B}]
; ..\mcal\Dio\ssc\src\Dio.c	   806           Call Dio_lReportError
; ..\mcal\Dio\ssc\src\Dio.c	   807           [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   808        Dio_lReportError(DIO_SID_WRITEPORT, DIO_E_PARAM_INVALID_PORT_ID);
; ..\mcal\Dio\ssc\src\Dio.c	   809        ErrStatus = E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   810      }
; ..\mcal\Dio\ssc\src\Dio.c	   811      #endif
; ..\mcal\Dio\ssc\src\Dio.c	   812    }
; ..\mcal\Dio\ssc\src\Dio.c	   813    /* [cover parentID={7170CAC6-E245-4ccc-8CA8-1D74D32755DA}]
; ..\mcal\Dio\ssc\src\Dio.c	   814        Have all checks passed
; ..\mcal\Dio\ssc\src\Dio.c	   815       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   816    if(ErrStatus == (uint8)E_OK)
; ..\mcal\Dio\ssc\src\Dio.c	   817    #endif /*DIO_DEV_ERROR_DETECT == STD_ON*/
; ..\mcal\Dio\ssc\src\Dio.c	   818    {
; ..\mcal\Dio\ssc\src\Dio.c	   819      /* Write the Level to the Port OUT register
; ..\mcal\Dio\ssc\src\Dio.c	   820              GetPortAddressPtr will hold the port address */
; ..\mcal\Dio\ssc\src\Dio.c	   821      /* [cover parentID={74DAB331-7573-4f6c-99D5-2C4067A50D79}]
; ..\mcal\Dio\ssc\src\Dio.c	   822         Get Port Address and Hold it
; ..\mcal\Dio\ssc\src\Dio.c	   823         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   824      GetPortAddressPtr = Dio_lGetPortAdr(PortId);
; ..\mcal\Dio\ssc\src\Dio.c	   825      /* [cover parentID={91FF9E21-EFE0-4569-9AE1-F210780650AF}]
; ..\mcal\Dio\ssc\src\Dio.c	   826         Write to the Port
; ..\mcal\Dio\ssc\src\Dio.c	   827         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   828      Mcal_SetBitAtomic(&(GetPortAddressPtr->OUT), DIO_NUMBER_0, 16,\ 
; ..\mcal\Dio\ssc\src\Dio.c	   829                         (uint16)Level);
; ..\mcal\Dio\ssc\src\Dio.c	   830  
; ..\mcal\Dio\ssc\src\Dio.c	   831    }
; ..\mcal\Dio\ssc\src\Dio.c	   832    /* MISRA2012_RULE_2_2_JUSTIFICATION:Value assigned to variable
; ..\mcal\Dio\ssc\src\Dio.c	   833    GetPortAddressPtr is passed to Mcal_SetBitAtomic operation*/
; ..\mcal\Dio\ssc\src\Dio.c	   834    /* MISRA2012_RULE_2_7_JUSTIFICATION:Variable Level is passed to
; ..\mcal\Dio\ssc\src\Dio.c	   835    Mcal_SetBitAtomic operation*/
; ..\mcal\Dio\ssc\src\Dio.c	   836  }/* Dio_WritePort */
; ..\mcal\Dio\ssc\src\Dio.c	   837  
; ..\mcal\Dio\ssc\src\Dio.c	   838  
; ..\mcal\Dio\ssc\src\Dio.c	   839  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   840  ** Traceability:[cover parentID={F36DDC75-C36E-4698-91A0-DDCB86FEBD75}]       **
; ..\mcal\Dio\ssc\src\Dio.c	   841  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   842  ** Syntax           : Dio_PortLevelType Dio_ReadChannelGroup                  **
; ..\mcal\Dio\ssc\src\Dio.c	   843  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	   844  **                      const Dio_ChannelGroupType * const ChannelGroupIdPtr  **
; ..\mcal\Dio\ssc\src\Dio.c	   845  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	   846  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   847  ** Description :  This Api:                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   848  **  - returns the level of specified channel group                            **
; ..\mcal\Dio\ssc\src\Dio.c	   849  **  [/cover]                                                                  **
; ..\mcal\Dio\ssc\src\Dio.c	   850  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   851  ** Service ID:  0x04                                                          **
; ..\mcal\Dio\ssc\src\Dio.c	   852  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   853  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   854  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   855  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	   856  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   857  ** Parameters (in)  : ChannelGroupIdPtr -                                     **
; ..\mcal\Dio\ssc\src\Dio.c	   858  **                    pointer to channel group configuration                  **
; ..\mcal\Dio\ssc\src\Dio.c	   859  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   860  ** Parameters (out):  none                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	   861  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   862  ** Return value     : RetVal - The Api returns level                          **
; ..\mcal\Dio\ssc\src\Dio.c	   863  **                    of the specified channel group                          **
; ..\mcal\Dio\ssc\src\Dio.c	   864  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   865  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   866  Dio_PortLevelType Dio_ReadChannelGroup
; ..\mcal\Dio\ssc\src\Dio.c	   867  ( const Dio_ChannelGroupType* const ChannelGroupIdPtr)
; ..\mcal\Dio\ssc\src\Dio.c	   868  {
; ..\mcal\Dio\ssc\src\Dio.c	   869    const Ifx_P   *GetPortAddressPtr;
; ..\mcal\Dio\ssc\src\Dio.c	   870    Dio_PortLevelType  RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	   871  
; ..\mcal\Dio\ssc\src\Dio.c	   872    /* [cover parentID={9983D909-3C6D-4c94-9009-93F130372431}]
; ..\mcal\Dio\ssc\src\Dio.c	   873       Det is Enabled or Safety is Enabled
; ..\mcal\Dio\ssc\src\Dio.c	   874       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   875  
; ..\mcal\Dio\ssc\src\Dio.c	   876    #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT ==STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   877  
; ..\mcal\Dio\ssc\src\Dio.c	   878    uint8 ErrStatus;
; ..\mcal\Dio\ssc\src\Dio.c	   879    ErrStatus = E_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   880  
; ..\mcal\Dio\ssc\src\Dio.c	   881    /* Return value should be zero for errors*/
; ..\mcal\Dio\ssc\src\Dio.c	   882    RetVal = (Dio_PortLevelType)STD_LOW;
; ..\mcal\Dio\ssc\src\Dio.c	   883    /*  [cover parentID={3D6FB53B-C8DB-4bf6-8D0D-66B5091A75A3}]
; ..\mcal\Dio\ssc\src\Dio.c	   884        Verify GroupId
; ..\mcal\Dio\ssc\src\Dio.c	   885        [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   886  
; ..\mcal\Dio\ssc\src\Dio.c	   887    /*  [cover parentID={D6AA7AB3-0F4F-480d-8EE6-1C6404026E7A}]
; ..\mcal\Dio\ssc\src\Dio.c	   888        Check for GroupID
; ..\mcal\Dio\ssc\src\Dio.c	   889        [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   890    /*  [cover parentID={6D8BC7AB-2AEF-463b-B497-CA0339576B64}]
; ..\mcal\Dio\ssc\src\Dio.c	   891         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   892    if(ChannelGroupIdPtr == NULL_PTR)
; ..\mcal\Dio\ssc\src\Dio.c	   893    {
; ..\mcal\Dio\ssc\src\Dio.c	   894      /*  [cover parentID={6D55A459-F313-4e12-985C-56A53889E39F}]
; ..\mcal\Dio\ssc\src\Dio.c	   895           [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   896      Dio_lReportError(DIO_SID_READCHANNELGROUP, DIO_E_PARAM_POINTER);
; ..\mcal\Dio\ssc\src\Dio.c	   897      ErrStatus = (uint8)E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   898    }
; ..\mcal\Dio\ssc\src\Dio.c	   899   /*  [cover parentID={093FB499-6E07-42d2-A831-38AFC46FA444}]
; ..\mcal\Dio\ssc\src\Dio.c	   900         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   901    if(ErrStatus == (uint8)E_OK)
; ..\mcal\Dio\ssc\src\Dio.c	   902    {
; ..\mcal\Dio\ssc\src\Dio.c	   903      if( Dio_lCheckGroupId(ChannelGroupIdPtr) == (uint8)DIO_ERROR)
; ..\mcal\Dio\ssc\src\Dio.c	   904      {
; ..\mcal\Dio\ssc\src\Dio.c	   905        /* The group id passed to the Api is invalid. Report error id
; ..\mcal\Dio\ssc\src\Dio.c	   906             DIO_E_PARAM_INVALID__GROUP to the error hook Api */
; ..\mcal\Dio\ssc\src\Dio.c	   907        /* [cover parentID={4801209C-8E6E-4add-A591-830CD2141060}]
; ..\mcal\Dio\ssc\src\Dio.c	   908           Report Error
; ..\mcal\Dio\ssc\src\Dio.c	   909           [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   910        Dio_lReportError(DIO_SID_READCHANNELGROUP, DIO_E_PARAM_INVALID_GROUP);
; ..\mcal\Dio\ssc\src\Dio.c	   911        ErrStatus = (uint8)E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   912      }
; ..\mcal\Dio\ssc\src\Dio.c	   913    }
; ..\mcal\Dio\ssc\src\Dio.c	   914    /* [cover parentID={01553059-1114-447e-9EEB-C3805171FE0F}]
; ..\mcal\Dio\ssc\src\Dio.c	   915       Have all Checks Passed
; ..\mcal\Dio\ssc\src\Dio.c	   916       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   917    if(ErrStatus == (uint8)E_OK)
; ..\mcal\Dio\ssc\src\Dio.c	   918    #endif /* DIO_DEV_ERROR_DETECT == STD_ON*/
; ..\mcal\Dio\ssc\src\Dio.c	   919    {
; ..\mcal\Dio\ssc\src\Dio.c	   920      /* GetPortAddressPtr will hold the port address  */
; ..\mcal\Dio\ssc\src\Dio.c	   921      GetPortAddressPtr = Dio_lGetPortAdr(ChannelGroupIdPtr->port);
; ..\mcal\Dio\ssc\src\Dio.c	   922  
; ..\mcal\Dio\ssc\src\Dio.c	   923      /* [cover parentID={733B3CB2-186F-485d-9F4D-C057A0D238BA}]
; ..\mcal\Dio\ssc\src\Dio.c	   924         Mask the Value from the Port Address to be read
; ..\mcal\Dio\ssc\src\Dio.c	   925         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   926  
; ..\mcal\Dio\ssc\src\Dio.c	   927      RetVal = (Dio_PortLevelType)((uint32)GetPortAddressPtr->IN.U &
; ..\mcal\Dio\ssc\src\Dio.c	   928                                   (uint32)ChannelGroupIdPtr->mask);
; ..\mcal\Dio\ssc\src\Dio.c	   929      /* [cover parentID={1D39EFAE-369C-4f91-A972-803282E528E1}]
; ..\mcal\Dio\ssc\src\Dio.c	   930         Allign the values to be read
; ..\mcal\Dio\ssc\src\Dio.c	   931         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   932      RetVal = (RetVal >> ChannelGroupIdPtr->offset);
; ..\mcal\Dio\ssc\src\Dio.c	   933    }
; ..\mcal\Dio\ssc\src\Dio.c	   934    /* [cover parentID={346DF988-B72F-441d-9246-57CB0A401A60}]
; ..\mcal\Dio\ssc\src\Dio.c	   935       Return the Level of the ChannelGroup
; ..\mcal\Dio\ssc\src\Dio.c	   936       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   937    return (RetVal);
; ..\mcal\Dio\ssc\src\Dio.c	   938  } /* Dio_ReadChannelGroup */
; ..\mcal\Dio\ssc\src\Dio.c	   939  
; ..\mcal\Dio\ssc\src\Dio.c	   940  
; ..\mcal\Dio\ssc\src\Dio.c	   941  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	   942  ** Traceability:[cover parentID={46E02FDD-4650-4411-BAA5-F708750A821F}]       **
; ..\mcal\Dio\ssc\src\Dio.c	   943  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   944  ** Syntax           : void Dio_WriteChannelGroup                              **
; ..\mcal\Dio\ssc\src\Dio.c	   945  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	   946  **                      const Dio_ChannelGroupType *const ChannelGroupIdPtr   **
; ..\mcal\Dio\ssc\src\Dio.c	   947  **                      Dio_PortLevelType Level                               **
; ..\mcal\Dio\ssc\src\Dio.c	   948  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	   949  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   950  ** Description :  This Api:                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   951  **  - sets the level of specified channel group                               **
; ..\mcal\Dio\ssc\src\Dio.c	   952  **  - The value for all the pins the channel group are set at one shot        **
; ..\mcal\Dio\ssc\src\Dio.c	   953  **  - Other pins of the port and pins that are configured as                  **
; ..\mcal\Dio\ssc\src\Dio.c	   954  **    input remains unchanged                                                 **
; ..\mcal\Dio\ssc\src\Dio.c	   955  **  [/cover]                                                                  **
; ..\mcal\Dio\ssc\src\Dio.c	   956  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   957  ** Service ID:  0x05                                                          **
; ..\mcal\Dio\ssc\src\Dio.c	   958  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   959  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	   960  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   961  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	   962  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   963  ** Parameters (in)  : ChannelGroupIdPtr -                                     **
; ..\mcal\Dio\ssc\src\Dio.c	   964  **                    pointer to channel group configuration                  **
; ..\mcal\Dio\ssc\src\Dio.c	   965  **                    Level - Sets level of specified channel group           **
; ..\mcal\Dio\ssc\src\Dio.c	   966  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   967  ** Parameters (out):  none                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	   968  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   969  ** Return value     : none                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	   970  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	   971  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	   972  void Dio_WriteChannelGroup
; ..\mcal\Dio\ssc\src\Dio.c	   973  ( const Dio_ChannelGroupType * const ChannelGroupIdPtr,
; ..\mcal\Dio\ssc\src\Dio.c	   974    const Dio_PortLevelType Level)
; ..\mcal\Dio\ssc\src\Dio.c	   975  {
; ..\mcal\Dio\ssc\src\Dio.c	   976  
; ..\mcal\Dio\ssc\src\Dio.c	   977    Ifx_P *GetPortAddressPtr;
; ..\mcal\Dio\ssc\src\Dio.c	   978    uint32          PortVal;
; ..\mcal\Dio\ssc\src\Dio.c	   979    uint32          PortResetVal;
; ..\mcal\Dio\ssc\src\Dio.c	   980  
; ..\mcal\Dio\ssc\src\Dio.c	   981    /* [cover parentID={3CA5CBC4-3BDA-45cd-9A28-ECFEF9D7701D}]
; ..\mcal\Dio\ssc\src\Dio.c	   982       Det is Enabled or Safety is Enabled
; ..\mcal\Dio\ssc\src\Dio.c	   983       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   984    #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT ==STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	   985    uint8  ErrStatus;
; ..\mcal\Dio\ssc\src\Dio.c	   986    uint8  DioErrorStatus;
; ..\mcal\Dio\ssc\src\Dio.c	   987  
; ..\mcal\Dio\ssc\src\Dio.c	   988    ErrStatus = E_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   989     /* [cover parentID={2F2519CC-3F48-4bd0-B28B-EAD602D3AAFE}]
; ..\mcal\Dio\ssc\src\Dio.c	   990    [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   991    if(ChannelGroupIdPtr == NULL_PTR)
; ..\mcal\Dio\ssc\src\Dio.c	   992    {
; ..\mcal\Dio\ssc\src\Dio.c	   993      /* [cover parentID={E2312224-8CE6-469e-8576-CB8A8D4B67D9}]
; ..\mcal\Dio\ssc\src\Dio.c	   994      [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	   995      Dio_lReportError(DIO_SID_WRITECHANNELGROUP, DIO_E_PARAM_POINTER);
; ..\mcal\Dio\ssc\src\Dio.c	   996      ErrStatus = (uint8)E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	   997    }
; ..\mcal\Dio\ssc\src\Dio.c	   998     /* [cover parentID={69F87D63-527F-4abd-8703-D66C40662AD5}]
; ..\mcal\Dio\ssc\src\Dio.c	   999    [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1000    if(ErrStatus == (uint8)E_OK)
; ..\mcal\Dio\ssc\src\Dio.c	  1001    {
; ..\mcal\Dio\ssc\src\Dio.c	  1002      /* [cover parentID={A5D86D3E-A74B-477c-84BE-45128301E9D4}]
; ..\mcal\Dio\ssc\src\Dio.c	  1003       If Invalid ChannelGroup
; ..\mcal\Dio\ssc\src\Dio.c	  1004       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1005      /* [cover parentID={1D325D81-BD2F-4f1b-AF97-62C94394B62E}]
; ..\mcal\Dio\ssc\src\Dio.c	  1006       Verify Group Id
; ..\mcal\Dio\ssc\src\Dio.c	  1007       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1008      if(Dio_lCheckGroupId(ChannelGroupIdPtr) == (uint8)DIO_ERROR)
; ..\mcal\Dio\ssc\src\Dio.c	  1009      {
; ..\mcal\Dio\ssc\src\Dio.c	  1010        DioErrorStatus = DIO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1011      }
; ..\mcal\Dio\ssc\src\Dio.c	  1012  
; ..\mcal\Dio\ssc\src\Dio.c	  1013      /* Check if the port is Analog port for Write operation */
; ..\mcal\Dio\ssc\src\Dio.c	  1014      /* [cover parentID={382F4FCB-4C5B-439d-9357-A2154158A6A3}]
; ..\mcal\Dio\ssc\src\Dio.c	  1015         If Read Only port not Zero
; ..\mcal\Dio\ssc\src\Dio.c	  1016         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1017      /* [cover parentID={31C3A394-C76B-4763-A4ED-34F6F8A4EE96}]
; ..\mcal\Dio\ssc\src\Dio.c	  1018         Verify Read Only Port
; ..\mcal\Dio\ssc\src\Dio.c	  1019        [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1020      else if (Dio_lIsPortReadOnly((uint32)(ChannelGroupIdPtr->port))
; ..\mcal\Dio\ssc\src\Dio.c	  1021             != (uint32)DIO_NUMBER_0)
; ..\mcal\Dio\ssc\src\Dio.c	  1022      {
; ..\mcal\Dio\ssc\src\Dio.c	  1023        DioErrorStatus = DIO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1024      }
; ..\mcal\Dio\ssc\src\Dio.c	  1025      else
; ..\mcal\Dio\ssc\src\Dio.c	  1026      {
; ..\mcal\Dio\ssc\src\Dio.c	  1027        DioErrorStatus = DIO_NO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1028      }
; ..\mcal\Dio\ssc\src\Dio.c	  1029          /* [cover parentID={5E8EACC6-B779-4ba0-8587-78732826E2B1}]
; ..\mcal\Dio\ssc\src\Dio.c	  1030         Check for Status
; ..\mcal\Dio\ssc\src\Dio.c	  1031         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1032      if (DioErrorStatus == DIO_ERROR)
; ..\mcal\Dio\ssc\src\Dio.c	  1033      {
; ..\mcal\Dio\ssc\src\Dio.c	  1034        /* The group id passed to the Api is invalid. Report error id
; ..\mcal\Dio\ssc\src\Dio.c	  1035               DIO_E_PARAM_INVALID__GROUP to the error hook Api */
; ..\mcal\Dio\ssc\src\Dio.c	  1036        /* [cover parentID={EF0EFB86-DEB2-453d-8AB2-88BE43DE43E8}]
; ..\mcal\Dio\ssc\src\Dio.c	  1037             Report Error
; ..\mcal\Dio\ssc\src\Dio.c	  1038             [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1039        Dio_lReportError(DIO_SID_WRITECHANNELGROUP, DIO_E_PARAM_INVALID_GROUP);
; ..\mcal\Dio\ssc\src\Dio.c	  1040        ErrStatus = (uint8)E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	  1041  
; ..\mcal\Dio\ssc\src\Dio.c	  1042      }
; ..\mcal\Dio\ssc\src\Dio.c	  1043    }
; ..\mcal\Dio\ssc\src\Dio.c	  1044    /* [cover parentID={272C597D-86F8-48a7-A27B-9F6E70D48153}]
; ..\mcal\Dio\ssc\src\Dio.c	  1045       Have all Checks passed
; ..\mcal\Dio\ssc\src\Dio.c	  1046       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1047    if(ErrStatus == (uint8)E_OK)
; ..\mcal\Dio\ssc\src\Dio.c	  1048    #endif /*DIO_DEV_ERROR_DETECT == STD_ON*/
; ..\mcal\Dio\ssc\src\Dio.c	  1049    {
; ..\mcal\Dio\ssc\src\Dio.c	  1050      /* Passed Level is masked as per the configuration */
; ..\mcal\Dio\ssc\src\Dio.c	  1051      /*  Level is shifted by the configured offset */
; ..\mcal\Dio\ssc\src\Dio.c	  1052      /* [cover parentID={2C1D1042-D567-421c-9B6C-162222122D1A}]
; ..\mcal\Dio\ssc\src\Dio.c	  1053         Mask the Value to set the bit
; ..\mcal\Dio\ssc\src\Dio.c	  1054         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1055      /* PortVal is used to set the bits */
; ..\mcal\Dio\ssc\src\Dio.c	  1056      PortVal = (uint32)(((uint32)Level << (uint32)ChannelGroupIdPtr->offset) & \ 
; ..\mcal\Dio\ssc\src\Dio.c	  1057                         (uint32) ChannelGroupIdPtr->mask);
; ..\mcal\Dio\ssc\src\Dio.c	  1058      /* [cover parentID={9269F549-B50A-4414-A6E6-2773054576C5}]
; ..\mcal\Dio\ssc\src\Dio.c	  1059         Mask the value to reset the remaining bits
; ..\mcal\Dio\ssc\src\Dio.c	  1060         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1061      /* PortResetVal is used to reset the bits */
; ..\mcal\Dio\ssc\src\Dio.c	  1062      PortResetVal = ((~PortVal) & ((uint32)ChannelGroupIdPtr->mask));
; ..\mcal\Dio\ssc\src\Dio.c	  1063  
; ..\mcal\Dio\ssc\src\Dio.c	  1064      /* [cover parentID={D42FD32D-CE91-4004-91AE-43C9E2ACC180}]
; ..\mcal\Dio\ssc\src\Dio.c	  1065         Allign the data to be set
; ..\mcal\Dio\ssc\src\Dio.c	  1066         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1067      PortVal = (PortVal | (PortResetVal << DIO_NUMBER_16));
; ..\mcal\Dio\ssc\src\Dio.c	  1068  
; ..\mcal\Dio\ssc\src\Dio.c	  1069      /* GetPortAddressPtr will hold the port address */
; ..\mcal\Dio\ssc\src\Dio.c	  1070      /* [cover parentID={D6E8EE9F-DCFE-4aee-A248-CDD041DC13D4}]
; ..\mcal\Dio\ssc\src\Dio.c	  1071         Get Port Address
; ..\mcal\Dio\ssc\src\Dio.c	  1072         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1073      GetPortAddressPtr = Dio_lGetPortAdr(ChannelGroupIdPtr->port);
; ..\mcal\Dio\ssc\src\Dio.c	  1074      /* [cover parentID={E9161F6A-BF3D-48c0-B300-9BBF777C0C1B}]
; ..\mcal\Dio\ssc\src\Dio.c	  1075         Update the Channel Group
; ..\mcal\Dio\ssc\src\Dio.c	  1076         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1077      GetPortAddressPtr->OMR.U = PortVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1078    }
; ..\mcal\Dio\ssc\src\Dio.c	  1079  } /* Dio_WriteChannelGroup */
; ..\mcal\Dio\ssc\src\Dio.c	  1080  
; ..\mcal\Dio\ssc\src\Dio.c	  1081  
; ..\mcal\Dio\ssc\src\Dio.c	  1082  /* Enable / Disable the use of the Api */
; ..\mcal\Dio\ssc\src\Dio.c	  1083  /* [cover parentID={17DCE761-49D9-4ca9-A476-D98ACE8298BF}]
; ..\mcal\Dio\ssc\src\Dio.c	  1084     Check FlipChannel is Enabled
; ..\mcal\Dio\ssc\src\Dio.c	  1085     [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1086  
; ..\mcal\Dio\ssc\src\Dio.c	  1087  #if (DIO_FLIP_CHANNEL_API == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	  1088  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1089  ** Traceability: [cover parentID={8A96E708-10AB-415b-BF43-BCF62D23D341}]      **
; ..\mcal\Dio\ssc\src\Dio.c	  1090  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1091  ** Syntax           : Dio_LevelType Dio_FlipChannel                           **
; ..\mcal\Dio\ssc\src\Dio.c	  1092  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1093  **                      Dio_ChannelType ChannelId                             **
; ..\mcal\Dio\ssc\src\Dio.c	  1094  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1095  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1096  ** Description :  This Api: Flip the channel level                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1097  **      - returns the inverted level of specified output channel              **
; ..\mcal\Dio\ssc\src\Dio.c	  1098  **      - The specified channel is input, API shall have no influence         **
; ..\mcal\Dio\ssc\src\Dio.c	  1099  **        on the physical output of the channel                               **
; ..\mcal\Dio\ssc\src\Dio.c	  1100  **      - The specified channel is input, API shall have no influence         **
; ..\mcal\Dio\ssc\src\Dio.c	  1101  **        on the result of next Read service                                  **
; ..\mcal\Dio\ssc\src\Dio.c	  1102  **  [/cover]                                                                  **
; ..\mcal\Dio\ssc\src\Dio.c	  1103  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1104  ** Service ID:  0x11                                                          **
; ..\mcal\Dio\ssc\src\Dio.c	  1105  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1106  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1107  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1108  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1109  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1110  ** Parameters (in)  : ChannelId - ChannelId whose level to be inverted        **
; ..\mcal\Dio\ssc\src\Dio.c	  1111  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1112  ** Parameters (out) : none                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1113  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1114  ** Return value     : RetVal - The Api returns the level                      **
; ..\mcal\Dio\ssc\src\Dio.c	  1115  **                  of the specified channel after inversion                  **
; ..\mcal\Dio\ssc\src\Dio.c	  1116  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1117  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1118  Dio_LevelType Dio_FlipChannel(const Dio_ChannelType ChannelId)
; ..\mcal\Dio\ssc\src\Dio.c	  1119  {
; ..\mcal\Dio\ssc\src\Dio.c	  1120    Ifx_P           *GetPortAddressPtr;
; ..\mcal\Dio\ssc\src\Dio.c	  1121    uint32           OmrVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1122    uint8           PinNumber;
; ..\mcal\Dio\ssc\src\Dio.c	  1123    uint8           PortNumber;
; ..\mcal\Dio\ssc\src\Dio.c	  1124    uint32           PinPosition;
; ..\mcal\Dio\ssc\src\Dio.c	  1125    Dio_LevelType    RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1126    const volatile uint8  *IocrRegPtr;
; ..\mcal\Dio\ssc\src\Dio.c	  1127    #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT ==STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	  1128    uint8 ErrStatus = E_OK;
; ..\mcal\Dio\ssc\src\Dio.c	  1129    #if (((DIO_PORTS_READONLY_00_31 != DIO_NUMBER_0)|| \ 
; ..\mcal\Dio\ssc\src\Dio.c	  1130                                     (DIO_PORTS_READONLY_32_63 != DIO_NUMBER_0)))
; ..\mcal\Dio\ssc\src\Dio.c	  1131    uint32      PortReadOnly;
; ..\mcal\Dio\ssc\src\Dio.c	  1132    #endif
; ..\mcal\Dio\ssc\src\Dio.c	  1133    #endif
; ..\mcal\Dio\ssc\src\Dio.c	  1134  
; ..\mcal\Dio\ssc\src\Dio.c	  1135    OmrVal = DIO_OMR_MASK_BIT;
; ..\mcal\Dio\ssc\src\Dio.c	  1136  
; ..\mcal\Dio\ssc\src\Dio.c	  1137    PortNumber = Dio_lGetPortNumber(ChannelId);
; ..\mcal\Dio\ssc\src\Dio.c	  1138    PinNumber  = Dio_lGetPinNumber(ChannelId);
; ..\mcal\Dio\ssc\src\Dio.c	  1139  
; ..\mcal\Dio\ssc\src\Dio.c	  1140    /* Check for the validity of symbolic channel ID
; ..\mcal\Dio\ssc\src\Dio.c	  1141         Reported DET if error detected */
; ..\mcal\Dio\ssc\src\Dio.c	  1142    /* [cover parentID={81C4C43A-7788-4a73-BCF7-01A94BD186D3}]
; ..\mcal\Dio\ssc\src\Dio.c	  1143       Det is Enabled or Safety is Enabled
; ..\mcal\Dio\ssc\src\Dio.c	  1144       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1145    #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT ==STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	  1146  
; ..\mcal\Dio\ssc\src\Dio.c	  1147    /* Return value should be zero for errors*/
; ..\mcal\Dio\ssc\src\Dio.c	  1148    RetVal = (Dio_LevelType)STD_LOW;
; ..\mcal\Dio\ssc\src\Dio.c	  1149  
; ..\mcal\Dio\ssc\src\Dio.c	  1150    /* [cover parentID={34C1CCA4-3EE6-427d-8B03-026FD3290AAE}
; ..\mcal\Dio\ssc\src\Dio.c	  1151                                           {C6BBB3AB-A465-42cd-A63D-8E3BBD8E6725}]
; ..\mcal\Dio\ssc\src\Dio.c	  1152        Verify ChannelId, Is Port Configured
; ..\mcal\Dio\ssc\src\Dio.c	  1153       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1154  
; ..\mcal\Dio\ssc\src\Dio.c	  1155    if((Dio_lCheckChannelId(ChannelId, PortNumber, PinNumber) ==
; ..\mcal\Dio\ssc\src\Dio.c	  1156        (uint8)DIO_ERROR))
; ..\mcal\Dio\ssc\src\Dio.c	  1157    {
; ..\mcal\Dio\ssc\src\Dio.c	  1158      /* The channel id passed to the Api is invalid. Report error id.
; ..\mcal\Dio\ssc\src\Dio.c	  1159                  DIO_E_PARAM_INVALID_CHANNEL_ID to the error hook Api */
; ..\mcal\Dio\ssc\src\Dio.c	  1160      /* [cover parentID={A89D2009-B01B-4e2b-86C0-42EB5F6BE879}]
; ..\mcal\Dio\ssc\src\Dio.c	  1161         Call Dio_lReportError
; ..\mcal\Dio\ssc\src\Dio.c	  1162         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1163  
; ..\mcal\Dio\ssc\src\Dio.c	  1164      Dio_lReportError(DIO_SID_FLIPCHANNEL, DIO_E_PARAM_INVALID_CHANNEL_ID);
; ..\mcal\Dio\ssc\src\Dio.c	  1165      ErrStatus = (uint8)E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	  1166    }
; ..\mcal\Dio\ssc\src\Dio.c	  1167    else
; ..\mcal\Dio\ssc\src\Dio.c	  1168    {
; ..\mcal\Dio\ssc\src\Dio.c	  1169      /* [cover parentID={D65EBB11-5F03-4047-A192-777A40874A43}]
; ..\mcal\Dio\ssc\src\Dio.c	  1170         ReadOnly Port is there
; ..\mcal\Dio\ssc\src\Dio.c	  1171         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1172      #if (((DIO_PORTS_READONLY_00_31 != DIO_NUMBER_0)|| \ 
; ..\mcal\Dio\ssc\src\Dio.c	  1173                                     (DIO_PORTS_READONLY_32_63 != DIO_NUMBER_0)))
; ..\mcal\Dio\ssc\src\Dio.c	  1174      PortReadOnly = Dio_lIsPortReadOnly((uint32)PortNumber);
; ..\mcal\Dio\ssc\src\Dio.c	  1175      /* [cover parentID={112495DD-F6E8-4868-9C25-989E3E2D7B14}]
; ..\mcal\Dio\ssc\src\Dio.c	  1176         Is Port ReadOnly
; ..\mcal\Dio\ssc\src\Dio.c	  1177         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1178      if ((PortReadOnly != (uint32)DIO_NUMBER_0))
; ..\mcal\Dio\ssc\src\Dio.c	  1179      {
; ..\mcal\Dio\ssc\src\Dio.c	  1180        /* [cover parentID={14C7DB5C-9A13-449d-91D0-EF85388BE4E8}]
; ..\mcal\Dio\ssc\src\Dio.c	  1181           Call Dio_lReportError
; ..\mcal\Dio\ssc\src\Dio.c	  1182           [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1183        Dio_lReportError(DIO_SID_WRITEPORT, DIO_E_PARAM_INVALID_PORT_ID);
; ..\mcal\Dio\ssc\src\Dio.c	  1184        ErrStatus = E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	  1185      }
; ..\mcal\Dio\ssc\src\Dio.c	  1186      #endif
; ..\mcal\Dio\ssc\src\Dio.c	  1187    }
; ..\mcal\Dio\ssc\src\Dio.c	  1188    /* [cover parentID={9362FE94-3BC9-4e9b-A6FB-774E45F36DF3}]
; ..\mcal\Dio\ssc\src\Dio.c	  1189       Have all Checks Passed
; ..\mcal\Dio\ssc\src\Dio.c	  1190       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1191    if(ErrStatus == (uint8)E_OK)
; ..\mcal\Dio\ssc\src\Dio.c	  1192    #endif /*DIO_DEV_ERROR_DETECT == STD_ON*/
; ..\mcal\Dio\ssc\src\Dio.c	  1193    {
; ..\mcal\Dio\ssc\src\Dio.c	  1194  
; ..\mcal\Dio\ssc\src\Dio.c	  1195      volatile uint32 DummyRead;
; ..\mcal\Dio\ssc\src\Dio.c	  1196  
; ..\mcal\Dio\ssc\src\Dio.c	  1197      /* GetPortAddressPtr will hold the port address */
; ..\mcal\Dio\ssc\src\Dio.c	  1198      GetPortAddressPtr = Dio_lGetPortAdr(PortNumber);
; ..\mcal\Dio\ssc\src\Dio.c	  1199      /* MISRA2012_RULE_11_5_JUSTIFICATION: Conversion from pointer to void to
; ..\mcal\Dio\ssc\src\Dio.c	  1200         pointer to other type is done to calculate 1 Byte data
; ..\mcal\Dio\ssc\src\Dio.c	  1201         for a Pin Number. */
; ..\mcal\Dio\ssc\src\Dio.c	  1202      /* MISRA2012_RULE_11_3_JUSTIFICATION: cast performed between a pointer to
; ..\mcal\Dio\ssc\src\Dio.c	  1203      object type and a pointer to a different object type is done to calculate
; ..\mcal\Dio\ssc\src\Dio.c	  1204      1 Byte data for a Pin Number.*/
; ..\mcal\Dio\ssc\src\Dio.c	  1205      /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\mcal\Dio\ssc\src\Dio.c	  1206         SFR address calculation and is within allowed range.*/
; ..\mcal\Dio\ssc\src\Dio.c	  1207      /* Get the IOCR0 register address of particular port */
; ..\mcal\Dio\ssc\src\Dio.c	  1208      IocrRegPtr=(const volatile uint8*)((const volatile uint32*)\ 
; ..\mcal\Dio\ssc\src\Dio.c	  1209                                         (const volatile void*)\ 
; ..\mcal\Dio\ssc\src\Dio.c	  1210                                          GetPortAddressPtr + \ 
; ..\mcal\Dio\ssc\src\Dio.c	  1211                                          DIO_PORT_IOCR0_REG_OFFSET);
; ..\mcal\Dio\ssc\src\Dio.c	  1212  
; ..\mcal\Dio\ssc\src\Dio.c	  1213  
; ..\mcal\Dio\ssc\src\Dio.c	  1214      /* Get the Pin position */
; ..\mcal\Dio\ssc\src\Dio.c	  1215      PinPosition = ((uint32)DIO_NUMBER_1 << (uint32)PinNumber);
; ..\mcal\Dio\ssc\src\Dio.c	  1216      /*Check the channel is configured as output channel*/
; ..\mcal\Dio\ssc\src\Dio.c	  1217      /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used to
; ..\mcal\Dio\ssc\src\Dio.c	  1218            calculate data for given Pin Number and is within allowed range.*/
; ..\mcal\Dio\ssc\src\Dio.c	  1219      /* [cover parentID={C8DF62DD-CD44-4b95-88B7-6727C0AC308E}]
; ..\mcal\Dio\ssc\src\Dio.c	  1220          Check the Configuration of Channel
; ..\mcal\Dio\ssc\src\Dio.c	  1221           [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1222      if((*(IocrRegPtr + PinNumber) & (uint8)DIO_PORT_DIR_MSK)
; ..\mcal\Dio\ssc\src\Dio.c	  1223          != (uint8)DIO_PORT_PIN_IN)
; ..\mcal\Dio\ssc\src\Dio.c	  1224      {
; ..\mcal\Dio\ssc\src\Dio.c	  1225        OmrVal = (OmrVal << PinNumber);
; ..\mcal\Dio\ssc\src\Dio.c	  1226  
; ..\mcal\Dio\ssc\src\Dio.c	  1227        /* [cover parentID={B1112551-9C26-47af-9F1C-AA86A729E347}]
; ..\mcal\Dio\ssc\src\Dio.c	  1228            Update the Channel
; ..\mcal\Dio\ssc\src\Dio.c	  1229            [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1230        GetPortAddressPtr->OMR.U = OmrVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1231  
; ..\mcal\Dio\ssc\src\Dio.c	  1232        /*After write to the OMR register, one SPB clock cycle delay is required
; ..\mcal\Dio\ssc\src\Dio.c	  1233        for the pins flipped value to propogate back to IN register. Hence a
; ..\mcal\Dio\ssc\src\Dio.c	  1234        dummy read of OMR is added to add the SPB clock cycle delay */
; ..\mcal\Dio\ssc\src\Dio.c	  1235        DummyRead = GetPortAddressPtr->OMR.U;
; ..\mcal\Dio\ssc\src\Dio.c	  1236        UNUSED_PARAMETER(DummyRead);
; ..\mcal\Dio\ssc\src\Dio.c	  1237      }
; ..\mcal\Dio\ssc\src\Dio.c	  1238  
; ..\mcal\Dio\ssc\src\Dio.c	  1239      /* [cover parentID={02C5BC82-8241-4e86-97EB-6DB8AFFA8ED5}]
; ..\mcal\Dio\ssc\src\Dio.c	  1240      Read the Channel level to be returned
; ..\mcal\Dio\ssc\src\Dio.c	  1241      [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1242      RetVal = (Dio_LevelType)((PinPosition & (uint32)(GetPortAddressPtr->IN.U))\ 
; ..\mcal\Dio\ssc\src\Dio.c	  1243                               >> (uint32)PinNumber);
; ..\mcal\Dio\ssc\src\Dio.c	  1244    }
; ..\mcal\Dio\ssc\src\Dio.c	  1245    /* [cover parentID={946ACB5F-29A7-41c6-885D-408D5FD2407A}]
; ..\mcal\Dio\ssc\src\Dio.c	  1246       Return the Value
; ..\mcal\Dio\ssc\src\Dio.c	  1247       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1248    return RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1249  }/* Dio_FlipChannel */
; ..\mcal\Dio\ssc\src\Dio.c	  1250  #endif /*(DIO_FLIP_CHANNEL_API == STD_ON) */
; ..\mcal\Dio\ssc\src\Dio.c	  1251  
; ..\mcal\Dio\ssc\src\Dio.c	  1252  /* [cover parentID={B2B9AE16-52E9-46b5-9FA6-EDA7D473F3BE}]
; ..\mcal\Dio\ssc\src\Dio.c	  1253     Check VersionInfo Enabled
; ..\mcal\Dio\ssc\src\Dio.c	  1254     [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1255  #if (DIO_VERSION_INFO_API == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	  1256  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1257  ** Traceability:[cover parentID= {F37CBFFC-7762-467b-B7A5-8AF16D9DB201}]      **
; ..\mcal\Dio\ssc\src\Dio.c	  1258  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1259  ** Syntax :void Dio_GetVersionInfo                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1260  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1261  **                      Std_VersionInfoType * const VersionInfo               **
; ..\mcal\Dio\ssc\src\Dio.c	  1262  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1263  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1264  ** Description :  This Api:                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1265  **   - This Api returns the version information of this module                **
; ..\mcal\Dio\ssc\src\Dio.c	  1266  **     The version information include : Module ID, Vendor ID,                **
; ..\mcal\Dio\ssc\src\Dio.c	  1267  **     Vendor specific version numbers                                        **
; ..\mcal\Dio\ssc\src\Dio.c	  1268  **   - This Api is available if the DIO_VERSION_INFO_API is                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1269  **     set ON                                                                 **
; ..\mcal\Dio\ssc\src\Dio.c	  1270  **  [/cover]                                                                  **
; ..\mcal\Dio\ssc\src\Dio.c	  1271  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1272  ** Service ID:  0x12                                                          **
; ..\mcal\Dio\ssc\src\Dio.c	  1273  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1274  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1275  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1276  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1277  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1278  ** Parameters (in) :  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1279  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1280  ** Parameters (out):  VersionInfo - Pointer to where to store the             **
; ..\mcal\Dio\ssc\src\Dio.c	  1281  **                    version information of this module.                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1282  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1283  ** Return value    :  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1284  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1285  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1286  /* [cover parentID={C023A192-753C-482f-9EEE-D50FF5D959D7}]
; ..\mcal\Dio\ssc\src\Dio.c	  1287     Dio_GetVersionInfo
; ..\mcal\Dio\ssc\src\Dio.c	  1288     [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1289  void Dio_GetVersionInfo(Std_VersionInfoType * const VersionInfo)
; ..\mcal\Dio\ssc\src\Dio.c	  1290  {
; ..\mcal\Dio\ssc\src\Dio.c	  1291  
; ..\mcal\Dio\ssc\src\Dio.c	  1292    /* [cover parentID={B80D52E2-6F3F-42b0-A066-9EC8DE66B63B}]
; ..\mcal\Dio\ssc\src\Dio.c	  1293      Det is Enabled or Safety is Enabled
; ..\mcal\Dio\ssc\src\Dio.c	  1294      [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1295    #if ((DIO_SAFETY_ENABLE == STD_ON)||(DIO_DEV_ERROR_DETECT == STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	  1296  
; ..\mcal\Dio\ssc\src\Dio.c	  1297    /* Check for DET: DIO_E_PARAM_POINTER */
; ..\mcal\Dio\ssc\src\Dio.c	  1298    /* [cover parentID={D5D98A08-5CED-4a94-893B-9E8363955F6D}]
; ..\mcal\Dio\ssc\src\Dio.c	  1299       Check Error
; ..\mcal\Dio\ssc\src\Dio.c	  1300       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1301    if ((VersionInfo) == NULL_PTR)
; ..\mcal\Dio\ssc\src\Dio.c	  1302    {
; ..\mcal\Dio\ssc\src\Dio.c	  1303      /*  Report DIO_E_PARAM_POINTER DET if service called with NULL_PTR */
; ..\mcal\Dio\ssc\src\Dio.c	  1304      /* [cover parentID={1DBFAD1B-8F73-47f6-8B64-6453F708FECD}]
; ..\mcal\Dio\ssc\src\Dio.c	  1305         Report Error
; ..\mcal\Dio\ssc\src\Dio.c	  1306         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1307      Dio_lReportError(DIO_SID_GETVERSIONINFO, DIO_E_PARAM_POINTER);
; ..\mcal\Dio\ssc\src\Dio.c	  1308    }
; ..\mcal\Dio\ssc\src\Dio.c	  1309    else
; ..\mcal\Dio\ssc\src\Dio.c	  1310    #endif /*DIO_DEV_ERROR_DETECT == STD_ON*/
; ..\mcal\Dio\ssc\src\Dio.c	  1311    {
; ..\mcal\Dio\ssc\src\Dio.c	  1312  
; ..\mcal\Dio\ssc\src\Dio.c	  1313      /* Vendor ID information */
; ..\mcal\Dio\ssc\src\Dio.c	  1314      /* [cover parentID={FFAF0D49-4F4A-48ea-9D16-74B3CC4FE03C}]
; ..\mcal\Dio\ssc\src\Dio.c	  1315         Update Module_ID,Instance_ID and SW Version
; ..\mcal\Dio\ssc\src\Dio.c	  1316         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1317      ((Std_VersionInfoType*)(VersionInfo))->vendorID = DIO_VENDOR_ID;
; ..\mcal\Dio\ssc\src\Dio.c	  1318      /*DIO module ID information */
; ..\mcal\Dio\ssc\src\Dio.c	  1319      ((Std_VersionInfoType*)(VersionInfo))->moduleID = DIO_MODULE_ID;
; ..\mcal\Dio\ssc\src\Dio.c	  1320      /*DIO Instance ID information */
; ..\mcal\Dio\ssc\src\Dio.c	  1321      /* DIO module Software major version information */
; ..\mcal\Dio\ssc\src\Dio.c	  1322      ((Std_VersionInfoType*)(VersionInfo))->sw_major_version =
; ..\mcal\Dio\ssc\src\Dio.c	  1323        (uint8)DIO_SW_MAJOR_VERSION;
; ..\mcal\Dio\ssc\src\Dio.c	  1324      /* DIO module Software minor version information */
; ..\mcal\Dio\ssc\src\Dio.c	  1325      ((Std_VersionInfoType*)(VersionInfo))->sw_minor_version =
; ..\mcal\Dio\ssc\src\Dio.c	  1326        (uint8)DIO_SW_MINOR_VERSION;
; ..\mcal\Dio\ssc\src\Dio.c	  1327      /* DIO module Software patch version information */
; ..\mcal\Dio\ssc\src\Dio.c	  1328      ((Std_VersionInfoType*)(VersionInfo))->sw_patch_version =
; ..\mcal\Dio\ssc\src\Dio.c	  1329        (uint8)DIO_SW_PATCH_VERSION;
; ..\mcal\Dio\ssc\src\Dio.c	  1330    }
; ..\mcal\Dio\ssc\src\Dio.c	  1331  }
; ..\mcal\Dio\ssc\src\Dio.c	  1332  #endif /* #if (DIO_VERSION_INFO_API == STD_ON) */
; ..\mcal\Dio\ssc\src\Dio.c	  1333  
; ..\mcal\Dio\ssc\src\Dio.c	  1334  
; ..\mcal\Dio\ssc\src\Dio.c	  1335  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1336  **                      Private Function Definitions                          **
; ..\mcal\Dio\ssc\src\Dio.c	  1337  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1338  #if((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT == STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	  1339  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1340  ** Traceability:[cover parentID={C8417139-0F95-40bf-884D-A5BA2CC8D9B1}]       **                                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1341  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1342  ** Syntax : LOCAL_INLINE void Dio_lReportError( const uint8 ApiId,            **
; ..\mcal\Dio\ssc\src\Dio.c	  1343  **                                          const uint8 ErrorId)              **
; ..\mcal\Dio\ssc\src\Dio.c	  1344  **                                                                            **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1345  ** Service ID:       None                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1346  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1347  ** Sync/Async:       Synchronous                                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1348  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1349  ** Reentrancy:       Reentrant                                                **
; ..\mcal\Dio\ssc\src\Dio.c	  1350  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1351  ** Parameters (in):  ApiId - Service ID of the API reporting an error         **
; ..\mcal\Dio\ssc\src\Dio.c	  1352  **                   ErrorId - ID of the error reported                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1353  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1354  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1355  ** Parameters (out): None                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1356  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1357  ** Return value:     None                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1358  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1359  ** Description :    Function to report Safety Error and DET                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1360  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1361  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1362  static void Dio_lReportError(const uint8 ApiId, const uint8 ErrorId)
; ..\mcal\Dio\ssc\src\Dio.c	  1363  {
; ..\mcal\Dio\ssc\src\Dio.c	  1364    /* [cover parentID={4990BA09-B1EA-4f3f-A21B-643DC09AB0BB},
; ..\mcal\Dio\ssc\src\Dio.c	  1365                       {21A49075-C928-4e72-8858-1E1F52B2CF3A}]
; ..\mcal\Dio\ssc\src\Dio.c	  1366       Check Det is Enabled
; ..\mcal\Dio\ssc\src\Dio.c	  1367       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1368    #if (DIO_DEV_ERROR_DETECT == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	  1369    (void)Det_ReportError(
; ..\mcal\Dio\ssc\src\Dio.c	  1370      DIO_MODULE_ID,
; ..\mcal\Dio\ssc\src\Dio.c	  1371      DIO_INSTANCE_ID,
; ..\mcal\Dio\ssc\src\Dio.c	  1372      ApiId,
; ..\mcal\Dio\ssc\src\Dio.c	  1373      ErrorId);/* End of report to DET */
; ..\mcal\Dio\ssc\src\Dio.c	  1374    #endif
; ..\mcal\Dio\ssc\src\Dio.c	  1375  
; ..\mcal\Dio\ssc\src\Dio.c	  1376    /* [cover parentID={5D024C84-F280-4c81-B89F-D6C39A99B354}]
; ..\mcal\Dio\ssc\src\Dio.c	  1377       Check Safety is Enabled
; ..\mcal\Dio\ssc\src\Dio.c	  1378       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1379  
; ..\mcal\Dio\ssc\src\Dio.c	  1380    #if (DIO_SAFETY_ENABLE == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	  1381    Mcal_ReportSafetyError(
; ..\mcal\Dio\ssc\src\Dio.c	  1382      DIO_MODULE_ID,
; ..\mcal\Dio\ssc\src\Dio.c	  1383      DIO_INSTANCE_ID,
; ..\mcal\Dio\ssc\src\Dio.c	  1384      ApiId,
; ..\mcal\Dio\ssc\src\Dio.c	  1385      ErrorId);/* End of report to Safety */
; ..\mcal\Dio\ssc\src\Dio.c	  1386  
; ..\mcal\Dio\ssc\src\Dio.c	  1387    #endif
; ..\mcal\Dio\ssc\src\Dio.c	  1388  }/* Dio_lReportError */
; ..\mcal\Dio\ssc\src\Dio.c	  1389  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1390  ** Traceability:[cover parentID={58C777A3-9B0D-4ce4-B51B-861566C26396},       **
; ..\mcal\Dio\ssc\src\Dio.c	  1391  **                             {63917478-91DF-434f-8C6C-59E511835B77}]        **
; ..\mcal\Dio\ssc\src\Dio.c	  1392  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1393  ** Syntax           : uint8 Dio_lCheckChannelId                               **
; ..\mcal\Dio\ssc\src\Dio.c	  1394  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1395  **                     const Dio_ChannelType ChannelId,                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1396  **                     const Dio_PortType PortNumber,                         **
; ..\mcal\Dio\ssc\src\Dio.c	  1397  **                     const uint8 PinNumber                                  **
; ..\mcal\Dio\ssc\src\Dio.c	  1398  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1399  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1400  ** Description      : Function to check if ChannelId is valid or not          **
; ..\mcal\Dio\ssc\src\Dio.c	  1401  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1402  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1403  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1404  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1405  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1406  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1407  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1408  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1409  ** Parameters (in) :  ChannelId  - ChannelId to be checked                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1410  **                    PortNumber - Port Number of ChannelId                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1411  **                    PinNumber - Pin Number of ChannelId                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1412  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1413  ** Parameters (out):  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1414  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1415  ** Return value     : ErrStatus                                               **
; ..\mcal\Dio\ssc\src\Dio.c	  1416  **                    DIO_ERROR - denotes ChannelId is valid                  **
; ..\mcal\Dio\ssc\src\Dio.c	  1417  **                    DIO_NO_ERROR - denotes ChannelId is invalid             **
; ..\mcal\Dio\ssc\src\Dio.c	  1418  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1419  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1420  LOCAL_INLINE uint8 Dio_lCheckChannelId(const Dio_ChannelType ChannelId,
; ..\mcal\Dio\ssc\src\Dio.c	  1421                             const Dio_PortType PortNumber, const uint8 PinNumber)
; ..\mcal\Dio\ssc\src\Dio.c	  1422  {
; ..\mcal\Dio\ssc\src\Dio.c	  1423  
; ..\mcal\Dio\ssc\src\Dio.c	  1424    uint32       ConfigIndex;
; ..\mcal\Dio\ssc\src\Dio.c	  1425    uint32       PortAvailable;
; ..\mcal\Dio\ssc\src\Dio.c	  1426    uint32       PinAvailable;
; ..\mcal\Dio\ssc\src\Dio.c	  1427    uint8        ErrStatus;
; ..\mcal\Dio\ssc\src\Dio.c	  1428    uint32       PopcntTempVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1429  
; ..\mcal\Dio\ssc\src\Dio.c	  1430    ErrStatus = (uint8)DIO_NO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1431  
; ..\mcal\Dio\ssc\src\Dio.c	  1432    /* [cover parentID={A3FAA4D9-94E0-4551-B208-AF2032F87771}]
; ..\mcal\Dio\ssc\src\Dio.c	  1433       ChannelID > MaxPort Pin
; ..\mcal\Dio\ssc\src\Dio.c	  1434       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1435    /* If the DIO channel ID is greater than the max value of Port pin ID */
; ..\mcal\Dio\ssc\src\Dio.c	  1436    if(ChannelId > (uint16)DIO_MAX_VALID_PORT_PIN_ID)
; ..\mcal\Dio\ssc\src\Dio.c	  1437    {
; ..\mcal\Dio\ssc\src\Dio.c	  1438      ErrStatus = (uint8)DIO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1439    }
; ..\mcal\Dio\ssc\src\Dio.c	  1440    else
; ..\mcal\Dio\ssc\src\Dio.c	  1441    {
; ..\mcal\Dio\ssc\src\Dio.c	  1442  
; ..\mcal\Dio\ssc\src\Dio.c	  1443      PortAvailable = Dio_lIsPortAvailable((uint32)PortNumber);
; ..\mcal\Dio\ssc\src\Dio.c	  1444      PinAvailable  = Dio_lIsPinAvailable((uint32)PortNumber, PinNumber);
; ..\mcal\Dio\ssc\src\Dio.c	  1445      /* [cover parentID={13EA46B8-0352-44ab-BF65-000C655745D0}]
; ..\mcal\Dio\ssc\src\Dio.c	  1446         Available Port is Zero or Available Pin is Zero
; ..\mcal\Dio\ssc\src\Dio.c	  1447         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1448      if( (PortAvailable == (uint32)DIO_NUMBER_0)
; ..\mcal\Dio\ssc\src\Dio.c	  1449          || (PinAvailable == (uint32)DIO_NUMBER_0) )
; ..\mcal\Dio\ssc\src\Dio.c	  1450      {
; ..\mcal\Dio\ssc\src\Dio.c	  1451        ErrStatus = (uint8)DIO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1452      }
; ..\mcal\Dio\ssc\src\Dio.c	  1453      else
; ..\mcal\Dio\ssc\src\Dio.c	  1454      {
; ..\mcal\Dio\ssc\src\Dio.c	  1455        /* [cover parentID={1F3A93AB-E025-4f0d-8306-196B2C576BF1}]
; ..\mcal\Dio\ssc\src\Dio.c	  1456        [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1457        if(PortNumber < PORT_NO_GREATER_THAN_32)
; ..\mcal\Dio\ssc\src\Dio.c	  1458        {
; ..\mcal\Dio\ssc\src\Dio.c	  1459         PopcntTempVal=DIO_PORTS_AVAILABLE_00_31 << (PORT_POPCNT_CALC - PortNumber);
; ..\mcal\Dio\ssc\src\Dio.c	  1460         ConfigIndex=POPCNT(PopcntTempVal)-1U;
; ..\mcal\Dio\ssc\src\Dio.c	  1461        }
; ..\mcal\Dio\ssc\src\Dio.c	  1462        else
; ..\mcal\Dio\ssc\src\Dio.c	  1463        {
; ..\mcal\Dio\ssc\src\Dio.c	  1464         ConfigIndex=POPCNT(DIO_PORTS_AVAILABLE_00_31);
; ..\mcal\Dio\ssc\src\Dio.c	  1465         PopcntTempVal= (uint32)DIO_PORTS_AVAILABLE_32_63 <<(PORT_POPCNT_CALC_32_63 - PortNumber);
; ..\mcal\Dio\ssc\src\Dio.c	  1466         ConfigIndex +=POPCNT(PopcntTempVal) - 1U;
; ..\mcal\Dio\ssc\src\Dio.c	  1467        }
; ..\mcal\Dio\ssc\src\Dio.c	  1468  
; ..\mcal\Dio\ssc\src\Dio.c	  1469        /* [cover parentID={AF6C6856-F626-4f56-8CCA-5472851357B3}]
; ..\mcal\Dio\ssc\src\Dio.c	  1470           If Port Not Configured
; ..\mcal\Dio\ssc\src\Dio.c	  1471           [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1472        if(
; ..\mcal\Dio\ssc\src\Dio.c	  1473          Dio_kConfigPtr->Dio_PortChannelIdConfigPtr[ConfigIndex].Dio_PortIdConfig
; ..\mcal\Dio\ssc\src\Dio.c	  1474          == DIO_PORT_NOT_CONFIGURED)
; ..\mcal\Dio\ssc\src\Dio.c	  1475        {
; ..\mcal\Dio\ssc\src\Dio.c	  1476          ErrStatus = (uint8)DIO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1477        }
; ..\mcal\Dio\ssc\src\Dio.c	  1478        else
; ..\mcal\Dio\ssc\src\Dio.c	  1479        {
; ..\mcal\Dio\ssc\src\Dio.c	  1480          /* [cover parentID={D7C72517-6C6C-4aed-B7FA-63656D4ACC86}]
; ..\mcal\Dio\ssc\src\Dio.c	  1481             Check Configuration Pointer
; ..\mcal\Dio\ssc\src\Dio.c	  1482             [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1483          if(
; ..\mcal\Dio\ssc\src\Dio.c	  1484            ((Dio_kConfigPtr->Dio_PortChannelIdConfigPtr[ConfigIndex].\ 
; ..\mcal\Dio\ssc\src\Dio.c	  1485              Dio_ChannelConfig) & ((uint16)DIO_NUMBER_1 << (uint16)PinNumber))
; ..\mcal\Dio\ssc\src\Dio.c	  1486            == (uint16)DIO_NUMBER_0)
; ..\mcal\Dio\ssc\src\Dio.c	  1487          {
; ..\mcal\Dio\ssc\src\Dio.c	  1488            ErrStatus = (uint8)DIO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1489          }
; ..\mcal\Dio\ssc\src\Dio.c	  1490        }
; ..\mcal\Dio\ssc\src\Dio.c	  1491      }
; ..\mcal\Dio\ssc\src\Dio.c	  1492    }
; ..\mcal\Dio\ssc\src\Dio.c	  1493  
; ..\mcal\Dio\ssc\src\Dio.c	  1494    return (ErrStatus);
; ..\mcal\Dio\ssc\src\Dio.c	  1495  }/* Dio_lCheckChannelId */
; ..\mcal\Dio\ssc\src\Dio.c	  1496  
; ..\mcal\Dio\ssc\src\Dio.c	  1497  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1498  ** Traceability:[cover parentID={8A97CBBE-028D-4c84-9645-412DE27F19D6}]       **
; ..\mcal\Dio\ssc\src\Dio.c	  1499  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1500  ** Syntax           : uint8 Dio_lCheckGroupId                                 **
; ..\mcal\Dio\ssc\src\Dio.c	  1501  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1502  **                      const Dio_ChannelGroupType * const GroupIdPtr         **
; ..\mcal\Dio\ssc\src\Dio.c	  1503  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1504  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1505  ** Parameters (in) :  GroupIdPtr  - Pointer for ChannelGroup to be checked    **
; ..\mcal\Dio\ssc\src\Dio.c	  1506  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1507  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1508  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1509  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1510  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1511  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1512  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1513  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1514  ** Parameters (in) :  GroupIdPtr  - Pointer to ChannelGroup to be checked     **
; ..\mcal\Dio\ssc\src\Dio.c	  1515  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1516  ** Parameters (out):  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1517  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1518  ** Return value     : ErrStatus                                               **
; ..\mcal\Dio\ssc\src\Dio.c	  1519  **                    DIO_ERROR - denotes GroupIdPtr is valid                 **
; ..\mcal\Dio\ssc\src\Dio.c	  1520  **                    DIO_NO_ERROR - denotes GroupIdPtr is invalid            **
; ..\mcal\Dio\ssc\src\Dio.c	  1521  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1522  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1523  LOCAL_INLINE uint8 Dio_lCheckGroupId
; ..\mcal\Dio\ssc\src\Dio.c	  1524  (
; ..\mcal\Dio\ssc\src\Dio.c	  1525    const Dio_ChannelGroupType * const GroupIdPtr
; ..\mcal\Dio\ssc\src\Dio.c	  1526  )
; ..\mcal\Dio\ssc\src\Dio.c	  1527  {
; ..\mcal\Dio\ssc\src\Dio.c	  1528  
; ..\mcal\Dio\ssc\src\Dio.c	  1529    uint8  ErrStatus;
; ..\mcal\Dio\ssc\src\Dio.c	  1530  
; ..\mcal\Dio\ssc\src\Dio.c	  1531    /* Initialise the Error status to DIO_ERROR */
; ..\mcal\Dio\ssc\src\Dio.c	  1532    ErrStatus = (uint8)DIO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1533    /* [cover parentID={1231543B-7056-4868-9C42-989E7118912B}]
; ..\mcal\Dio\ssc\src\Dio.c	  1534       Is Parameter Null
; ..\mcal\Dio\ssc\src\Dio.c	  1535       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1536    /* Check GroupIdPtr for NULL_PTR */
; ..\mcal\Dio\ssc\src\Dio.c	  1537    if (GroupIdPtr != NULL_PTR)
; ..\mcal\Dio\ssc\src\Dio.c	  1538    {
; ..\mcal\Dio\ssc\src\Dio.c	  1539      ErrStatus = Dio_lCheckChGrpValue(GroupIdPtr);
; ..\mcal\Dio\ssc\src\Dio.c	  1540    } /* GroupIdPtr != NULL_PTR */
; ..\mcal\Dio\ssc\src\Dio.c	  1541    return (ErrStatus);
; ..\mcal\Dio\ssc\src\Dio.c	  1542  
; ..\mcal\Dio\ssc\src\Dio.c	  1543  }/* Dio_lCheckGroupId */
; ..\mcal\Dio\ssc\src\Dio.c	  1544  
; ..\mcal\Dio\ssc\src\Dio.c	  1545  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1546  ** Traceability:[cover parentID={0BD9D851-A4F0-4e67-B33D-ADC0E669EA33}]       **
; ..\mcal\Dio\ssc\src\Dio.c	  1547  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1548  ** Syntax           : uint8 Dio_lCheckChGrpValue                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1549  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1550  **                      const Dio_ChannelGroupType * const GroupIdPtr         **
; ..\mcal\Dio\ssc\src\Dio.c	  1551  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1552  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1553  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1554  ** Description      : Function to validate GroupIdPtr                         **
; ..\mcal\Dio\ssc\src\Dio.c	  1555  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1556  **[/cover]                                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1557  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1558  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1559  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1560  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1561  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1562  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1563  ** Parameters (in) :  GroupIdPtr  - Pointer for ChannelGroup to be checked    **
; ..\mcal\Dio\ssc\src\Dio.c	  1564  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1565  ** Parameters (out):  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1566  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1567  ** Return value     : ErrStatus                                               **
; ..\mcal\Dio\ssc\src\Dio.c	  1568  **                    DIO_ERROR - denotes GroupIdPtr is valid                 **
; ..\mcal\Dio\ssc\src\Dio.c	  1569  **                    DIO_NO_ERROR - denotes GroupIdPtr is invalid            **
; ..\mcal\Dio\ssc\src\Dio.c	  1570  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1571  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1572  LOCAL_INLINE uint8 Dio_lCheckChGrpValue
; ..\mcal\Dio\ssc\src\Dio.c	  1573  (
; ..\mcal\Dio\ssc\src\Dio.c	  1574    const Dio_ChannelGroupType * const GroupIdPtr
; ..\mcal\Dio\ssc\src\Dio.c	  1575  )
; ..\mcal\Dio\ssc\src\Dio.c	  1576  {
; ..\mcal\Dio\ssc\src\Dio.c	  1577  
; ..\mcal\Dio\ssc\src\Dio.c	  1578    uint32 Index;
; ..\mcal\Dio\ssc\src\Dio.c	  1579    uint8  ErrStatus = DIO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1580  
; ..\mcal\Dio\ssc\src\Dio.c	  1581  
; ..\mcal\Dio\ssc\src\Dio.c	  1582    /* [cover parentID={C3808803-B5CE-409d-8A72-75C1D3DD4AF0}]
; ..\mcal\Dio\ssc\src\Dio.c	  1583       Channel Group Configuration
; ..\mcal\Dio\ssc\src\Dio.c	  1584       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1585    for(Index = 0U; Index < (Dio_kConfigPtr->Dio_ChannelGroupConfigSize); Index++)
; ..\mcal\Dio\ssc\src\Dio.c	  1586    {
; ..\mcal\Dio\ssc\src\Dio.c	  1587      /* [cover parentID={867658FF-ACFA-4c86-B59C-D95FC16D97B1}]
; ..\mcal\Dio\ssc\src\Dio.c	  1588         Group Identification Pointer
; ..\mcal\Dio\ssc\src\Dio.c	  1589         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1590      if (GroupIdPtr == &(Dio_kConfigPtr->Dio_ChannelGroupConfigPtr[Index]))
; ..\mcal\Dio\ssc\src\Dio.c	  1591      {
; ..\mcal\Dio\ssc\src\Dio.c	  1592        /*DIO114: channel group is valid within the current configuration*/
; ..\mcal\Dio\ssc\src\Dio.c	  1593        ErrStatus = (uint8)DIO_NO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1594      }
; ..\mcal\Dio\ssc\src\Dio.c	  1595    }
; ..\mcal\Dio\ssc\src\Dio.c	  1596    return ErrStatus;
; ..\mcal\Dio\ssc\src\Dio.c	  1597  }/* Dio_lCheckChGrpValue */
; ..\mcal\Dio\ssc\src\Dio.c	  1598  
; ..\mcal\Dio\ssc\src\Dio.c	  1599  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1600  **Traceability:[cover parentID={E58D60FD-8A43-4b10-9C6C-4CD2C4F21B31}]        **
; ..\mcal\Dio\ssc\src\Dio.c	  1601  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1602  ** Syntax           : uint8 Dio_lCheckPortId                                  **
; ..\mcal\Dio\ssc\src\Dio.c	  1603  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1604  **                     const Dio_PortType PortId                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1605  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1606  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1607  ** Description      : Function to check if PortId is valid or not             **
; ..\mcal\Dio\ssc\src\Dio.c	  1608  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1609  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1610  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1611  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1612  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1613  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1614  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1615  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1616  ** Parameters (in) :  PortId  - Port to be checked                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1617  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1618  ** Parameters (out):  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1619  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1620  ** Return value     : ErrStatus                                               **
; ..\mcal\Dio\ssc\src\Dio.c	  1621  **                    DIO_ERROR - denotes PortId is valid                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1622  **                    DIO_NO_ERROR - denotes PortId is invalid                **
; ..\mcal\Dio\ssc\src\Dio.c	  1623  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1624  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1625  LOCAL_INLINE uint8 Dio_lCheckPortId (const Dio_PortType PortId)
; ..\mcal\Dio\ssc\src\Dio.c	  1626  {
; ..\mcal\Dio\ssc\src\Dio.c	  1627    uint32      ConfigIndex;
; ..\mcal\Dio\ssc\src\Dio.c	  1628    uint32      PortAvailable;
; ..\mcal\Dio\ssc\src\Dio.c	  1629    uint8       ErrStatus;
; ..\mcal\Dio\ssc\src\Dio.c	  1630    uint32      PopcntTempVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1631  
; ..\mcal\Dio\ssc\src\Dio.c	  1632    ErrStatus = (uint8)DIO_NO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1633  
; ..\mcal\Dio\ssc\src\Dio.c	  1634    PortAvailable = (uint32)Dio_lIsPortAvailable((uint32)PortId);
; ..\mcal\Dio\ssc\src\Dio.c	  1635  
; ..\mcal\Dio\ssc\src\Dio.c	  1636    /* Check for the validity of symbolic port ID */
; ..\mcal\Dio\ssc\src\Dio.c	  1637    /* [cover parentID={94327A98-1764-443a-A210-F3E30B6367CA}]
; ..\mcal\Dio\ssc\src\Dio.c	  1638       Checdk for Validity of symbolic PortId
; ..\mcal\Dio\ssc\src\Dio.c	  1639       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1640    if( (PortAvailable == (uint32)0U) )
; ..\mcal\Dio\ssc\src\Dio.c	  1641    {
; ..\mcal\Dio\ssc\src\Dio.c	  1642      ErrStatus = (uint8)DIO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1643    }
; ..\mcal\Dio\ssc\src\Dio.c	  1644    else
; ..\mcal\Dio\ssc\src\Dio.c	  1645    {
; ..\mcal\Dio\ssc\src\Dio.c	  1646      /* [cover parentID={35A07763-3B37-45da-B5B0-05ECFB7E2AF8}]
; ..\mcal\Dio\ssc\src\Dio.c	  1647      */
; ..\mcal\Dio\ssc\src\Dio.c	  1648      if(PortId < PORT_NO_GREATER_THAN_32)
; ..\mcal\Dio\ssc\src\Dio.c	  1649        {
; ..\mcal\Dio\ssc\src\Dio.c	  1650         PopcntTempVal=DIO_PORTS_AVAILABLE_00_31 << (PORT_POPCNT_CALC - PortId);
; ..\mcal\Dio\ssc\src\Dio.c	  1651         ConfigIndex=POPCNT(PopcntTempVal)-1U;
; ..\mcal\Dio\ssc\src\Dio.c	  1652        }
; ..\mcal\Dio\ssc\src\Dio.c	  1653       else
; ..\mcal\Dio\ssc\src\Dio.c	  1654        {
; ..\mcal\Dio\ssc\src\Dio.c	  1655          ConfigIndex=POPCNT(DIO_PORTS_AVAILABLE_00_31);
; ..\mcal\Dio\ssc\src\Dio.c	  1656          PopcntTempVal= (uint32)DIO_PORTS_AVAILABLE_32_63 <<(PORT_POPCNT_CALC_32_63 - PortId);
; ..\mcal\Dio\ssc\src\Dio.c	  1657          ConfigIndex+= POPCNT(PopcntTempVal) - 1U;
; ..\mcal\Dio\ssc\src\Dio.c	  1658        }
; ..\mcal\Dio\ssc\src\Dio.c	  1659      /* [cover parentID={DC80E749-616F-4375-982F-89EBD013F9CF}]
; ..\mcal\Dio\ssc\src\Dio.c	  1660         Check for Configuration
; ..\mcal\Dio\ssc\src\Dio.c	  1661         [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1662      if(
; ..\mcal\Dio\ssc\src\Dio.c	  1663        Dio_kConfigPtr->Dio_PortChannelIdConfigPtr[ConfigIndex].Dio_PortIdConfig
; ..\mcal\Dio\ssc\src\Dio.c	  1664        == DIO_PORT_NOT_CONFIGURED)
; ..\mcal\Dio\ssc\src\Dio.c	  1665      {
; ..\mcal\Dio\ssc\src\Dio.c	  1666        ErrStatus = (uint8)DIO_ERROR;
; ..\mcal\Dio\ssc\src\Dio.c	  1667      }
; ..\mcal\Dio\ssc\src\Dio.c	  1668  
; ..\mcal\Dio\ssc\src\Dio.c	  1669    }
; ..\mcal\Dio\ssc\src\Dio.c	  1670  
; ..\mcal\Dio\ssc\src\Dio.c	  1671    return (ErrStatus);
; ..\mcal\Dio\ssc\src\Dio.c	  1672  }/* Dio_lCheckPortId */
; ..\mcal\Dio\ssc\src\Dio.c	  1673  
; ..\mcal\Dio\ssc\src\Dio.c	  1674  
; ..\mcal\Dio\ssc\src\Dio.c	  1675  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1676  ** Traceability:[cover parentID={43EF9D83-ECBA-4c35-9D29-507AC298045A}]       **
; ..\mcal\Dio\ssc\src\Dio.c	  1677  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1678  ** Syntax           : LOCAL_INLINE uint32 Dio_lIsPortAvailable31              **
; ..\mcal\Dio\ssc\src\Dio.c	  1679  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1680  **                     const uint32 Port                                      **
; ..\mcal\Dio\ssc\src\Dio.c	  1681  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1682  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1683  ** Description :  This INLINE function:                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1684  **   - checks if the port is available or not for the microcontroller.        **
; ..\mcal\Dio\ssc\src\Dio.c	  1685  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1686  **[/cover]                                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1687  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1688  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1689  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1690  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1691  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1692  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1693  ** Parameters (in) :  Port  - Port to be checked                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1694  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1695  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1696  ** Parameters (out):  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1697  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1698  ** Return value     : RetVal - Value which denotes whether the port is        **
; ..\mcal\Dio\ssc\src\Dio.c	  1699  **                    available or not                                        **
; ..\mcal\Dio\ssc\src\Dio.c	  1700  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1701  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1702  LOCAL_INLINE uint32 Dio_lIsPortAvailable31(const uint32 Port)
; ..\mcal\Dio\ssc\src\Dio.c	  1703  {
; ..\mcal\Dio\ssc\src\Dio.c	  1704    uint32 RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1705  
; ..\mcal\Dio\ssc\src\Dio.c	  1706    RetVal = ( ((uint32)(DIO_CHANNEL_BIT_MASK) << (Port)) &
; ..\mcal\Dio\ssc\src\Dio.c	  1707               ((uint32)DIO_PORTS_AVAILABLE_00_31));
; ..\mcal\Dio\ssc\src\Dio.c	  1708    return(RetVal);
; ..\mcal\Dio\ssc\src\Dio.c	  1709  }
; ..\mcal\Dio\ssc\src\Dio.c	  1710  
; ..\mcal\Dio\ssc\src\Dio.c	  1711  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1712  ** Traceability:[cover parentID={A71B0F4E-DB94-4e2c-B89E-EA0CA6BA4A10}]                                                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1713  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1714  ** Syntax           : LOCAL_INLINE uint32 Dio_lIsPortAvailable63              **
; ..\mcal\Dio\ssc\src\Dio.c	  1715  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1716  **                     const uint32 Port                                      **
; ..\mcal\Dio\ssc\src\Dio.c	  1717  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1718  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1719  ** Description :  This INLINE function:                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1720  **   - checks if the port is available or not for the microcontroller.        **
; ..\mcal\Dio\ssc\src\Dio.c	  1721  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1722  **  [/cover]                                                                  **
; ..\mcal\Dio\ssc\src\Dio.c	  1723  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1724  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1725  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1726  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1727  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1728  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1729  ** Parameters (in) :  Port  - Port to be checked                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1730  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1731  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1732  ** Parameters (out):  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1733  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1734  ** Return value     : RetVal - Value which denotes whether the port is        **
; ..\mcal\Dio\ssc\src\Dio.c	  1735  **                    available or not                                        **
; ..\mcal\Dio\ssc\src\Dio.c	  1736  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1737  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1738  LOCAL_INLINE uint32 Dio_lIsPortAvailable63(const uint32 Port)
; ..\mcal\Dio\ssc\src\Dio.c	  1739  {
; ..\mcal\Dio\ssc\src\Dio.c	  1740    uint32 RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1741  
; ..\mcal\Dio\ssc\src\Dio.c	  1742    RetVal = (((uint32)(DIO_CHANNEL_BIT_MASK) << (Port - (uint32)DIO_NUMBER_32)) &
; ..\mcal\Dio\ssc\src\Dio.c	  1743              ((uint32)DIO_PORTS_AVAILABLE_32_63));
; ..\mcal\Dio\ssc\src\Dio.c	  1744    return(RetVal);
; ..\mcal\Dio\ssc\src\Dio.c	  1745  }
; ..\mcal\Dio\ssc\src\Dio.c	  1746  
; ..\mcal\Dio\ssc\src\Dio.c	  1747  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1748  ** Traceability:[cover parentID={933DA943-9D62-44f8-9C34-A12FA2CED33D}]       **
; ..\mcal\Dio\ssc\src\Dio.c	  1749  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1750  ** Syntax           : LOCAL_INLINE uint32 Dio_lIsPortAvailable                **
; ..\mcal\Dio\ssc\src\Dio.c	  1751  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1752  **                     const uint32 Port                                      **
; ..\mcal\Dio\ssc\src\Dio.c	  1753  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1754  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1755  ** Description :  This INLINE function:                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1756  **   - checks if the port is available or not for the microcontroller.        **
; ..\mcal\Dio\ssc\src\Dio.c	  1757  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1758  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1759  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1760  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1761  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1762  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1763  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1764  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1765  ** Parameters (in) :  Port  - Port to be checked                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1766  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1767  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1768  ** Parameters (out):  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1769  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1770  ** Return value     : RetVal - Value which denotes whether the port is        **
; ..\mcal\Dio\ssc\src\Dio.c	  1771  **                    available or not                                        **
; ..\mcal\Dio\ssc\src\Dio.c	  1772  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1773  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1774  LOCAL_INLINE uint32 Dio_lIsPortAvailable(const uint32 Port)
; ..\mcal\Dio\ssc\src\Dio.c	  1775  {
; ..\mcal\Dio\ssc\src\Dio.c	  1776    uint32 RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1777    /* [cover parentID={68C41933-A848-4640-BF33-302B2B7AB6FA}]
; ..\mcal\Dio\ssc\src\Dio.c	  1778       Is Port Number is greater than 31
; ..\mcal\Dio\ssc\src\Dio.c	  1779       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1780    RetVal = ((Port > (uint32)DIO_NUMBER_31) ? (Dio_lIsPortAvailable63(Port)) :
; ..\mcal\Dio\ssc\src\Dio.c	  1781              (Dio_lIsPortAvailable31(Port)));
; ..\mcal\Dio\ssc\src\Dio.c	  1782    return(RetVal);
; ..\mcal\Dio\ssc\src\Dio.c	  1783  }
; ..\mcal\Dio\ssc\src\Dio.c	  1784  
; ..\mcal\Dio\ssc\src\Dio.c	  1785  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1786  ** Traceability:[cover parentID={E3EB1235-FF60-4e60-92D5-B3BB67992BFC}]                                                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1787  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1788  ** Syntax           : LOCAL_INLINE uint32 Dio_lIsPortReadOnly31               **
; ..\mcal\Dio\ssc\src\Dio.c	  1789  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1790  **                     const uint32 Port                                      **
; ..\mcal\Dio\ssc\src\Dio.c	  1791  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1792  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1793  ** Description :  This INLINE function:                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1794  **   - checks if the port is read only or it is writable.                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1795  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1796  **  [/cover]                                                                  **
; ..\mcal\Dio\ssc\src\Dio.c	  1797  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1798  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1799  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1800  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1801  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1802  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1803  ** Parameters (in) :  Port  - Port to be checked                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1804  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1805  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1806  ** Parameters (out):  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1807  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1808  ** Return value     : RetValue -Value which denotes whether the Port          **
; ..\mcal\Dio\ssc\src\Dio.c	  1809  **                    is read only or not                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1810  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1811  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1812  LOCAL_INLINE uint32 Dio_lIsPortReadOnly31(const uint32 Port)
; ..\mcal\Dio\ssc\src\Dio.c	  1813  {
; ..\mcal\Dio\ssc\src\Dio.c	  1814    uint32 RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1815  
; ..\mcal\Dio\ssc\src\Dio.c	  1816    RetVal = ( ((uint32)(DIO_CHANNEL_BIT_MASK) << (Port)) & \ 
; ..\mcal\Dio\ssc\src\Dio.c	  1817               ((uint32)DIO_PORTS_READONLY_00_31));
; ..\mcal\Dio\ssc\src\Dio.c	  1818    return(RetVal);
; ..\mcal\Dio\ssc\src\Dio.c	  1819  }
; ..\mcal\Dio\ssc\src\Dio.c	  1820  
; ..\mcal\Dio\ssc\src\Dio.c	  1821  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1822  **Traceability:[cover parentID={8FD009AD-B20A-4107-98A0-184785D5EAB2}]        **
; ..\mcal\Dio\ssc\src\Dio.c	  1823  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1824  ** Syntax           : LOCAL_INLINE uint32 Dio_lIsPortReadOnly63               **
; ..\mcal\Dio\ssc\src\Dio.c	  1825  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1826  **                     const uint32 Port                                      **
; ..\mcal\Dio\ssc\src\Dio.c	  1827  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1828  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1829  ** Description :  This INLINE function:                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1830  **   - checks if the port is read only or it is writable.                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1831  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1832  **  [/cover]                                                                  **
; ..\mcal\Dio\ssc\src\Dio.c	  1833  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1834  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1835  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1836  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1837  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1838  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1839  ** Parameters (in) :  Port  - Port to be checked                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1840  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1841  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1842  ** Parameters (out):  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1843  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1844  ** Return value     : RetValue -Value which denotes whether the Port          **
; ..\mcal\Dio\ssc\src\Dio.c	  1845  **                    is read only or not                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1846  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1847  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1848  LOCAL_INLINE uint32 Dio_lIsPortReadOnly63(const uint32 Port)
; ..\mcal\Dio\ssc\src\Dio.c	  1849  {
; ..\mcal\Dio\ssc\src\Dio.c	  1850    uint32 RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1851  
; ..\mcal\Dio\ssc\src\Dio.c	  1852    RetVal = (((uint32)(DIO_CHANNEL_BIT_MASK) << (Port - (uint32)DIO_NUMBER_32)) &
; ..\mcal\Dio\ssc\src\Dio.c	  1853              ((uint32)DIO_PORTS_READONLY_32_63));
; ..\mcal\Dio\ssc\src\Dio.c	  1854  
; ..\mcal\Dio\ssc\src\Dio.c	  1855    return(RetVal);
; ..\mcal\Dio\ssc\src\Dio.c	  1856  }
; ..\mcal\Dio\ssc\src\Dio.c	  1857  
; ..\mcal\Dio\ssc\src\Dio.c	  1858  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1859  ** Traceability:[cover parentID={248A97E3-6170-404c-BD79-0A1B1274435A}]                                                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1860  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1861  ** Syntax           : LOCAL_INLINE uint32 Dio_lIsPortReadOnly                 **
; ..\mcal\Dio\ssc\src\Dio.c	  1862  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1863  **                     const uint32 Port                                      **
; ..\mcal\Dio\ssc\src\Dio.c	  1864  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1865  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1866  ** Description :  This INLINE function:                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1867  **   - checks if the port is read only or it is writable.                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1868  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1869  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1870  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1871  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1872  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1873  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1874  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1875  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1876  ** Parameters (in) :  Port  - Port to be checked                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1877  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1878  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1879  ** Parameters (out):  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1880  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1881  ** Return value     : RetValue -Value which denotes whether the Port          **
; ..\mcal\Dio\ssc\src\Dio.c	  1882  **                    is read only or not                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1883  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1884  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1885  LOCAL_INLINE uint32 Dio_lIsPortReadOnly(const uint32 Port)
; ..\mcal\Dio\ssc\src\Dio.c	  1886  {
; ..\mcal\Dio\ssc\src\Dio.c	  1887    uint32 RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1888    /* [cover parentID={81CA48C5-FB00-43d0-91AD-78E3AA367A2F}]
; ..\mcal\Dio\ssc\src\Dio.c	  1889       Is port less than or equal to 31
; ..\mcal\Dio\ssc\src\Dio.c	  1890       [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  1891    RetVal = ((Port <= (uint32)DIO_NUMBER_31) ? (Dio_lIsPortReadOnly31(Port)) : \ 
; ..\mcal\Dio\ssc\src\Dio.c	  1892              (Dio_lIsPortReadOnly63(Port)) );
; ..\mcal\Dio\ssc\src\Dio.c	  1893    return(RetVal);
; ..\mcal\Dio\ssc\src\Dio.c	  1894  }
; ..\mcal\Dio\ssc\src\Dio.c	  1895  
; ..\mcal\Dio\ssc\src\Dio.c	  1896  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1897  ** Traceability:[cover parentID={54272B0C-EBE5-467e-B001-998F2B61B6F9}]                                                              **
; ..\mcal\Dio\ssc\src\Dio.c	  1898  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1899  ** Syntax           : LOCAL_INLINE uint16 Dio_lIsPinAvailable                 **
; ..\mcal\Dio\ssc\src\Dio.c	  1900  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1901  **                     const uint32 Port,                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1902  **                     const uint8 Pin                                        **
; ..\mcal\Dio\ssc\src\Dio.c	  1903  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1904  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1905  ** Description :  This INLINE function:                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1906  **   - checks if the pin is available for port.                               **
; ..\mcal\Dio\ssc\src\Dio.c	  1907  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1908  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1909  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1910  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1911  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1912  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1913  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1914  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1915  ** Parameters (in)  : Port - Port number                                      **
; ..\mcal\Dio\ssc\src\Dio.c	  1916  **                    Pin  - Pin to be validated for Port                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1917  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1918  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1919  ** Parameters (out):  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1920  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1921  ** Return value     : RetVal -Value which denotes whether the Pin is present  **
; ..\mcal\Dio\ssc\src\Dio.c	  1922  **                    on the Port or not.                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1923  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1924  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1925  LOCAL_INLINE uint16 Dio_lIsPinAvailable(const uint32 Port, const uint8 Pin)
; ..\mcal\Dio\ssc\src\Dio.c	  1926  {
; ..\mcal\Dio\ssc\src\Dio.c	  1927    uint16 RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1928  
; ..\mcal\Dio\ssc\src\Dio.c	  1929    RetVal =  ( (uint16)((uint32)DIO_CHANNEL_BIT_MASK << (Pin)) & \ 
; ..\mcal\Dio\ssc\src\Dio.c	  1930                Dio_kMaskAllPortPins[Port] );
; ..\mcal\Dio\ssc\src\Dio.c	  1931    return RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1932  }
; ..\mcal\Dio\ssc\src\Dio.c	  1933  #endif /*(DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT == STD_ON) */
; ..\mcal\Dio\ssc\src\Dio.c	  1934  
; ..\mcal\Dio\ssc\src\Dio.c	  1935  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1936  **  Traceability:[cover parentID={2D2E8022-D6F6-4bb5-A14B-3219FF69625B}]      **
; ..\mcal\Dio\ssc\src\Dio.c	  1937  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1938  ** Syntax           : Dio_PortType Dio_lGetPortNumber                         **
; ..\mcal\Dio\ssc\src\Dio.c	  1939  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1940  **                     const Dio_ChannelType ChannelId                        **
; ..\mcal\Dio\ssc\src\Dio.c	  1941  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1942  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1943  ** Description :  This INLINE function:                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1944  **   - extract the port number from pin symbolic ID                           **
; ..\mcal\Dio\ssc\src\Dio.c	  1945  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1946  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1947  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1948  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1949  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1950  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1951  ** Reentrancy:   Reentrant                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1952  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1953  ** Parameters (in)  : ChannelId -                                             **
; ..\mcal\Dio\ssc\src\Dio.c	  1954  **                    Pin Symbolic containing port number                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1955  ** Parameters (out) : None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1956  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1957  ** Return value     : RetValue -Value which denotes port number extracted     **
; ..\mcal\Dio\ssc\src\Dio.c	  1958  **                    from pin symbolic ID                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1959  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1960  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1961  LOCAL_INLINE Dio_PortType Dio_lGetPortNumber(const Dio_ChannelType ChannelId)
; ..\mcal\Dio\ssc\src\Dio.c	  1962  {
; ..\mcal\Dio\ssc\src\Dio.c	  1963    Dio_PortType RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1964  
; ..\mcal\Dio\ssc\src\Dio.c	  1965    RetVal = (Dio_PortType)((ChannelId & (uint16)DIO_4_TO_11_MASK) \ 
; ..\mcal\Dio\ssc\src\Dio.c	  1966                            >> (uint16)DIO_PORT_NUM_OFFSET);
; ..\mcal\Dio\ssc\src\Dio.c	  1967    return(RetVal);
; ..\mcal\Dio\ssc\src\Dio.c	  1968  }
; ..\mcal\Dio\ssc\src\Dio.c	  1969  
; ..\mcal\Dio\ssc\src\Dio.c	  1970  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  1971  ** Traceability:[cover parentID={2BA9A932-A8A9-44f1-9DA3-ECED0DC583ED}]       **
; ..\mcal\Dio\ssc\src\Dio.c	  1972  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1973  ** Syntax :       Ifx_P * Dio_lGetPortAdr                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1974  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1975  **                     const Dio_PortType PortNumber                          **
; ..\mcal\Dio\ssc\src\Dio.c	  1976  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1977  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1978  ** Description :  This INLINE function:                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1979  **   - returns the address of P<x> Module                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1980  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1981  **[/cover]                                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1982  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1983  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1984  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  1985  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1986  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  1987  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1988  ** Parameters (in) :  uint32 PortNumber                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  1989  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1990  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1991  ** Parameters (out):  None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  1992  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1993  ** Return value    :  RetVal - P<x> Module address                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1994  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  1995  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  1996  LOCAL_INLINE Ifx_P *Dio_lGetPortAdr(const Dio_PortType PortNumber)
; ..\mcal\Dio\ssc\src\Dio.c	  1997  {
; ..\mcal\Dio\ssc\src\Dio.c	  1998    Ifx_P *RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  1999    /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is performed to
; ..\mcal\Dio\ssc\src\Dio.c	  2000     calculate address for a Port Number */
; ..\mcal\Dio\ssc\src\Dio.c	  2001    RetVal = ( ((Ifx_P *)&MODULE_P00 + PortNumber ));
; ..\mcal\Dio\ssc\src\Dio.c	  2002    return(RetVal);
; ..\mcal\Dio\ssc\src\Dio.c	  2003  
; ..\mcal\Dio\ssc\src\Dio.c	  2004  }
; ..\mcal\Dio\ssc\src\Dio.c	  2005  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  2006  ** Traceability:[cover parentID={E552AB43-0F71-4d46-A5BB-0DC1E6BB845E}]       **
; ..\mcal\Dio\ssc\src\Dio.c	  2007  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2008  ** Syntax           : uint8 Dio_lGetPinNumber                                 **
; ..\mcal\Dio\ssc\src\Dio.c	  2009  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  2010  **                     const Dio_ChannelType ChannelId                        **
; ..\mcal\Dio\ssc\src\Dio.c	  2011  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  2012  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2013  ** Description :  This INLINE function:                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  2014  **   - extract the pin number from pin symbolic ID                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2015  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2016  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  2017  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2018  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2019  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  2020  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2021  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  2022  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2023  ** Parameters (in)  : ChannelId                                               **
; ..\mcal\Dio\ssc\src\Dio.c	  2024  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2025  ** Parameters (out) : None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  2026  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2027  ** Return value     : RetValue -Value which denotes pin number extracted      **
; ..\mcal\Dio\ssc\src\Dio.c	  2028  **                    from pin symbolic ID                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  2029  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2030  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  2031  LOCAL_INLINE uint8 Dio_lGetPinNumber(const Dio_ChannelType ChannelId)
; ..\mcal\Dio\ssc\src\Dio.c	  2032  {
; ..\mcal\Dio\ssc\src\Dio.c	  2033    uint8 RetVal;
; ..\mcal\Dio\ssc\src\Dio.c	  2034  
; ..\mcal\Dio\ssc\src\Dio.c	  2035    RetVal = (uint8)(ChannelId & (uint16)DIO_PIN_LOW4_MASK );
	and	d15,d4,#15
.L166:
	sh	d0,d0,d15
	fcall	.cocofun_2
.L167:
	mov	d15,#4080
.L168:
	and	d4,d15
.L149:
	sha	d4,#-4
.L169:
	sha	d15,d4,#8
.L170:
	addsc.a	a15,a15,d15,#0
.L171:
	ld.w	d15,[a15]36
.L172:
	and	d0,d15
.L173:
	ne	d2,d0,#0
	ret
.L78:
	
__Dio_ReadChannel_function_end:
	.size	Dio_ReadChannel,__Dio_ReadChannel_function_end-Dio_ReadChannel
.L34:
	; End of function
	
	.sdecl	'.text.Dio..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.Dio..cocofun_2'
	.align	2
; Function .cocofun_2
.L11:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:1
	movh.a	a15,#61444
.L148:
	lea	a15,[a15]@los(0xf003a000)
	fret
.L74:
	; End of function
	.sdecl	'.text.Dio.Dio_WriteChannel',code,cluster('Dio_WriteChannel')
	.sect	'.text.Dio.Dio_WriteChannel'
	.align	2
	
	.global	Dio_WriteChannel
; Function Dio_WriteChannel
.L13:
Dio_WriteChannel:	.type	func
	mov	d0,#16
.L89:
	mov	d15,#4080
.L178:
	and	d15,d4
.L179:
	sha	d1,d15,#-4
.L90:
	and	d15,d4,#15
.L95:
	seln	d0,d5,d0,#0
.L180:
	mov	d4,#1
.L150:
	sh	d4,d4,d15
	fcall	.cocofun_2
.L181:
	sha	d15,d1,#8
.L182:
	addsc.a	a15,a15,d15,#0
.L183:
	add.a	a15,#4
	
	imask e2,d4,d0,#(16) 
 ldmst [a15]0,e2
	
.L184:
	ret
.L82:
	
__Dio_WriteChannel_function_end:
	.size	Dio_WriteChannel,__Dio_WriteChannel_function_end-Dio_WriteChannel
.L39:
	; End of function
	
	.sdecl	'.text.Dio.Dio_ReadPort',code,cluster('Dio_ReadPort')
	.sect	'.text.Dio.Dio_ReadPort'
	.align	2
	
	.global	Dio_ReadPort
; Function Dio_ReadPort
.L15:
Dio_ReadPort:	.type	func
	fcall	.cocofun_1
.L107:
	ld.w	d15,[a15]36
.L189:
	movh.a	a15,#@his(Dio_kMaskAllPortPins)
	lea	a15,[a15]@los(Dio_kMaskAllPortPins)
.L190:
	addsc.a	a15,a15,d4,#1
.L191:
	extr.u	d2,d15,#0,#16
.L192:
	ld.hu	d15,[a15]0
.L152:
	and	d2,d15
	ret
.L100:
	
__Dio_ReadPort_function_end:
	.size	Dio_ReadPort,__Dio_ReadPort_function_end-Dio_ReadPort
.L44:
	; End of function
	
	.sdecl	'.text.Dio..cocofun_1',code,cluster('.cocofun_1')
	.sect	'.text.Dio..cocofun_1'
	.align	2
; Function .cocofun_1
.L17:
.cocofun_1:	.type	func
; Function body .cocofun_1, coco_iter:0
	fcall	.cocofun_2
.L151:
	sha	d15,d4,#8
.L244:
	addsc.a	a15,a15,d15,#0
	fret
.L69:
	; End of function
	.sdecl	'.text.Dio.Dio_WritePort',code,cluster('Dio_WritePort')
	.sect	'.text.Dio.Dio_WritePort'
	.align	2
	
	.global	Dio_WritePort
; Function Dio_WritePort
.L19:
Dio_WritePort:	.type	func
	mov	d0,#0
	fcall	.cocofun_1
.L197:
	
	imask e2,d5,d0,#(16) 
 ldmst [a15]0,e2
	
.L198:
	ret
.L112:
	
__Dio_WritePort_function_end:
	.size	Dio_WritePort,__Dio_WritePort_function_end-Dio_WritePort
.L49:
	; End of function
	
	.sdecl	'.text.Dio.Dio_ReadChannelGroup',code,cluster('Dio_ReadChannelGroup')
	.sect	'.text.Dio.Dio_ReadChannelGroup'
	.align	2
	
	.global	Dio_ReadChannelGroup
; Function Dio_ReadChannelGroup
.L21:
Dio_ReadChannelGroup:	.type	func
	ld.bu	d15,[a4]3
.L122:
	fcall	.cocofun_2
.L203:
	sha	d15,d15,#8
.L204:
	addsc.a	a15,a15,d15,#0
.L123:
	ld.w	d15,[a15]36
.L205:
	extr.u	d0,d15,#0,#16
	ld.hu	d15,[a4]0
.L206:
	and	d0,d15
	ld.bu	d15,[a4]2
.L207:
	rsub	d15,#0
.L208:
	sha	d2,d0,d15
	ret
.L117:
	
__Dio_ReadChannelGroup_function_end:
	.size	Dio_ReadChannelGroup,__Dio_ReadChannelGroup_function_end-Dio_ReadChannelGroup
.L54:
	; End of function
	
	.sdecl	'.text.Dio.Dio_WriteChannelGroup',code,cluster('Dio_WriteChannelGroup')
	.sect	'.text.Dio.Dio_WriteChannelGroup'
	.align	2
	
	.global	Dio_WriteChannelGroup
; Function Dio_WriteChannelGroup
.L23:
Dio_WriteChannelGroup:	.type	func
	ld.bu	d15,[a4]2
.L213:
	ld.hu	d0,[a4]0
.L214:
	sh	d4,d4,d15
.L153:
	and	d4,d0
.L215:
	mov	d15,#-1
	xor	d15,d4
.L216:
	and	d0,d15
.L217:
	sh	d15,d0,#16
.L218:
	or	d4,d15
	fcall	.cocofun_2
.L219:
	ld.bu	d15,[a4]3
.L220:
	sha	d15,d15,#8
.L221:
	addsc.a	a15,a15,d15,#0
.L222:
	st.w	[a15]4,d4
.L223:
	ret
.L125:
	
__Dio_WriteChannelGroup_function_end:
	.size	Dio_WriteChannelGroup,__Dio_WriteChannelGroup_function_end-Dio_WriteChannelGroup
.L59:
	; End of function
	
	.sdecl	'.text.Dio.Dio_FlipChannel',code,cluster('Dio_FlipChannel')
	.sect	'.text.Dio.Dio_FlipChannel'
	.align	2
	
	.global	Dio_FlipChannel
; Function Dio_FlipChannel
.L25:
Dio_FlipChannel:	.type	func
	mov	d15,#4080
	sub.a	a10,#8
.L154:
	and	d15,d4
.L137:
	and	d1,d4,#15
.L140:
	sha	d0,d15,#-4
	fcall	.cocofun_2
.L141:
	sha	d15,d0,#8
.L228:
	addsc.a	a15,a15,d15,#0
.L145:
	mov	d0,#1
.L229:
	addsc.a	a2,a15,d1,#0
.L230:
	sh	d0,d0,d1
.L155:
	ld.bu	d15,[a2]16
.L231:
	jz.t	d15:7,.L6
.L232:
	mov	d15,#1
	addih	d15,d15,#1
.L233:
	sh	d15,d15,d1
	st.w	[a15]4,d15
.L234:
	ld.w	d15,[a15]4
.L235:
	st.w	[a10],d15
.L236:
	ld.w	d15,[a10]
.L6:
	ld.w	d15,[a15]36
.L237:
	rsub	d1,#0
.L238:
	and	d0,d15
.L156:
	sh	d0,d0,d1
.L239:
	extr.u	d2,d0,#0,#8
	ret
.L132:
	
__Dio_FlipChannel_function_end:
	.size	Dio_FlipChannel,__Dio_FlipChannel_function_end-Dio_FlipChannel
.L64:
	; End of function
	
	.sdecl	'.rodata.Dio.Dio_kMaskAllPortPins',data,rom,cluster('Dio_kMaskAllPortPins')
	.sect	'.rodata.Dio.Dio_kMaskAllPortPins'
	.align	2
Dio_kMaskAllPortPins:	.type	object
	.size	Dio_kMaskAllPortPins,84
	.half	65535,65535,65535
	.space	14
	.half	61439,65535,3,65279
	.half	65535,65023
	.space	8
	.half	32719,255,4095,255
	.half	65535,65535,1
	.space	6
	.half	65535,65535,255,65535
	.half	62
	.space	10
	.half	65535,511
	.calls	'Dio_ReadChannel','.cocofun_2'
	.calls	'Dio_WriteChannel','.cocofun_2'
	.calls	'Dio_ReadPort','.cocofun_1'
	.calls	'.cocofun_1','.cocofun_2'
	.calls	'Dio_WritePort','.cocofun_1'
	.calls	'Dio_ReadChannelGroup','.cocofun_2'
	.calls	'Dio_WriteChannelGroup','.cocofun_2'
	.calls	'Dio_FlipChannel','.cocofun_2'
	.calls	'Dio_ReadChannel','',0
	.calls	'.cocofun_2','',0
	.calls	'Dio_WriteChannel','',0
	.calls	'Dio_ReadPort','',0
	.calls	'.cocofun_1','',0
	.calls	'Dio_WritePort','',0
	.calls	'Dio_ReadChannelGroup','',0
	.calls	'Dio_WriteChannelGroup','',0
	.calls	'Dio_FlipChannel','',8
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L27:
	.word	9722
	.half	3
	.word	.L28
	.byte	4
.L26:
	.byte	1
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L29
.L77:
	.byte	2
	.byte	'unsigned char',0,1,8
.L99:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.word	136
.L88:
	.byte	4
	.byte	'Dio_lGetPortNumber',0,3,1,169,15,27
	.word	119
	.byte	1,1
.L91:
	.byte	5
	.byte	'ChannelId',0,1,169,15,68
	.word	158
.L93:
	.byte	6,0,2
	.byte	'unsigned int',0,4,7,2
	.byte	'int',0,4,5,7
	.byte	'_Ifx_P_OUT_Bits',0,2,147,3,16,4,8
	.byte	'P0',0,1
	.word	119
	.byte	1,7,2,35,0,8
	.byte	'P1',0,1
	.word	119
	.byte	1,6,2,35,0,8
	.byte	'P2',0,1
	.word	119
	.byte	1,5,2,35,0,8
	.byte	'P3',0,1
	.word	119
	.byte	1,4,2,35,0,8
	.byte	'P4',0,1
	.word	119
	.byte	1,3,2,35,0,8
	.byte	'P5',0,1
	.word	119
	.byte	1,2,2,35,0,8
	.byte	'P6',0,1
	.word	119
	.byte	1,1,2,35,0,8
	.byte	'P7',0,1
	.word	119
	.byte	1,0,2,35,0,8
	.byte	'P8',0,1
	.word	119
	.byte	1,7,2,35,1,8
	.byte	'P9',0,1
	.word	119
	.byte	1,6,2,35,1,8
	.byte	'P10',0,1
	.word	119
	.byte	1,5,2,35,1,8
	.byte	'P11',0,1
	.word	119
	.byte	1,4,2,35,1,8
	.byte	'P12',0,1
	.word	119
	.byte	1,3,2,35,1,8
	.byte	'P13',0,1
	.word	119
	.byte	1,2,2,35,1,8
	.byte	'P14',0,1
	.word	119
	.byte	1,1,2,35,1,8
	.byte	'P15',0,1
	.word	119
	.byte	1,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	136
	.byte	16,0,2,35,2,0,9,2,173,5,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	238
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_OMR_Bits',0,2,173,2,16,4,8
	.byte	'PS0',0,1
	.word	119
	.byte	1,7,2,35,0,8
	.byte	'PS1',0,1
	.word	119
	.byte	1,6,2,35,0,8
	.byte	'PS2',0,1
	.word	119
	.byte	1,5,2,35,0,8
	.byte	'PS3',0,1
	.word	119
	.byte	1,4,2,35,0,8
	.byte	'PS4',0,1
	.word	119
	.byte	1,3,2,35,0,8
	.byte	'PS5',0,1
	.word	119
	.byte	1,2,2,35,0,8
	.byte	'PS6',0,1
	.word	119
	.byte	1,1,2,35,0,8
	.byte	'PS7',0,1
	.word	119
	.byte	1,0,2,35,0,8
	.byte	'PS8',0,1
	.word	119
	.byte	1,7,2,35,1,8
	.byte	'PS9',0,1
	.word	119
	.byte	1,6,2,35,1,8
	.byte	'PS10',0,1
	.word	119
	.byte	1,5,2,35,1,8
	.byte	'PS11',0,1
	.word	119
	.byte	1,4,2,35,1,8
	.byte	'PS12',0,1
	.word	119
	.byte	1,3,2,35,1,8
	.byte	'PS13',0,1
	.word	119
	.byte	1,2,2,35,1,8
	.byte	'PS14',0,1
	.word	119
	.byte	1,1,2,35,1,8
	.byte	'PS15',0,1
	.word	119
	.byte	1,0,2,35,1,8
	.byte	'PCL0',0,1
	.word	119
	.byte	1,7,2,35,2,8
	.byte	'PCL1',0,1
	.word	119
	.byte	1,6,2,35,2,8
	.byte	'PCL2',0,1
	.word	119
	.byte	1,5,2,35,2,8
	.byte	'PCL3',0,1
	.word	119
	.byte	1,4,2,35,2,8
	.byte	'PCL4',0,1
	.word	119
	.byte	1,3,2,35,2,8
	.byte	'PCL5',0,1
	.word	119
	.byte	1,2,2,35,2,8
	.byte	'PCL6',0,1
	.word	119
	.byte	1,1,2,35,2,8
	.byte	'PCL7',0,1
	.word	119
	.byte	1,0,2,35,2,8
	.byte	'PCL8',0,1
	.word	119
	.byte	1,7,2,35,3,8
	.byte	'PCL9',0,1
	.word	119
	.byte	1,6,2,35,3,8
	.byte	'PCL10',0,1
	.word	119
	.byte	1,5,2,35,3,8
	.byte	'PCL11',0,1
	.word	119
	.byte	1,4,2,35,3,8
	.byte	'PCL12',0,1
	.word	119
	.byte	1,3,2,35,3,8
	.byte	'PCL13',0,1
	.word	119
	.byte	1,2,2,35,3,8
	.byte	'PCL14',0,1
	.word	119
	.byte	1,1,2,35,3,8
	.byte	'PCL15',0,1
	.word	119
	.byte	1,0,2,35,3,0,9,2,253,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	554
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_ID_Bits',0,2,135,1,16,4,8
	.byte	'MODREV',0,1
	.word	119
	.byte	8,0,2,35,0,8
	.byte	'MODTYPE',0,1
	.word	119
	.byte	8,0,2,35,1,8
	.byte	'MODNUMBER',0,2
	.word	136
	.byte	16,0,2,35,2,0,9,2,157,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	1125
	.byte	4,2,35,0,0,11,4
	.word	119
	.byte	12,3,0,7
	.byte	'_Ifx_P_IOCR0_Bits',0,2,165,1,16,4,8
	.byte	'reserved_0',0,1
	.word	119
	.byte	3,5,2,35,0,8
	.byte	'PC0',0,1
	.word	119
	.byte	5,0,2,35,0,8
	.byte	'reserved_8',0,1
	.word	119
	.byte	3,5,2,35,1,8
	.byte	'PC1',0,1
	.word	119
	.byte	5,0,2,35,1,8
	.byte	'reserved_16',0,1
	.word	119
	.byte	3,5,2,35,2,8
	.byte	'PC2',0,1
	.word	119
	.byte	5,0,2,35,2,8
	.byte	'reserved_24',0,1
	.word	119
	.byte	3,5,2,35,3,8
	.byte	'PC3',0,1
	.word	119
	.byte	5,0,2,35,3,0,9,2,173,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	1254
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_IOCR4_Bits',0,2,191,1,16,4,8
	.byte	'reserved_0',0,1
	.word	119
	.byte	3,5,2,35,0,8
	.byte	'PC4',0,1
	.word	119
	.byte	5,0,2,35,0,8
	.byte	'reserved_8',0,1
	.word	119
	.byte	3,5,2,35,1,8
	.byte	'PC5',0,1
	.word	119
	.byte	5,0,2,35,1,8
	.byte	'reserved_16',0,1
	.word	119
	.byte	3,5,2,35,2,8
	.byte	'PC6',0,1
	.word	119
	.byte	5,0,2,35,2,8
	.byte	'reserved_24',0,1
	.word	119
	.byte	3,5,2,35,3,8
	.byte	'PC7',0,1
	.word	119
	.byte	5,0,2,35,3,0,9,2,189,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	1469
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_IOCR8_Bits',0,2,204,1,16,4,8
	.byte	'reserved_0',0,1
	.word	119
	.byte	3,5,2,35,0,8
	.byte	'PC8',0,1
	.word	119
	.byte	5,0,2,35,0,8
	.byte	'reserved_8',0,1
	.word	119
	.byte	3,5,2,35,1,8
	.byte	'PC9',0,1
	.word	119
	.byte	5,0,2,35,1,8
	.byte	'reserved_16',0,1
	.word	119
	.byte	3,5,2,35,2,8
	.byte	'PC10',0,1
	.word	119
	.byte	5,0,2,35,2,8
	.byte	'reserved_24',0,1
	.word	119
	.byte	3,5,2,35,3,8
	.byte	'PC11',0,1
	.word	119
	.byte	5,0,2,35,3,0,9,2,197,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	1684
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_IOCR12_Bits',0,2,178,1,16,4,8
	.byte	'reserved_0',0,1
	.word	119
	.byte	3,5,2,35,0,8
	.byte	'PC12',0,1
	.word	119
	.byte	5,0,2,35,0,8
	.byte	'reserved_8',0,1
	.word	119
	.byte	3,5,2,35,1,8
	.byte	'PC13',0,1
	.word	119
	.byte	5,0,2,35,1,8
	.byte	'reserved_16',0,1
	.word	119
	.byte	3,5,2,35,2,8
	.byte	'PC14',0,1
	.word	119
	.byte	5,0,2,35,2,8
	.byte	'reserved_24',0,1
	.word	119
	.byte	3,5,2,35,3,8
	.byte	'PC15',0,1
	.word	119
	.byte	5,0,2,35,3,0,9,2,181,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	1901
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_IN_Bits',0,2,143,1,16,4,8
	.byte	'P0',0,1
	.word	119
	.byte	1,7,2,35,0,8
	.byte	'P1',0,1
	.word	119
	.byte	1,6,2,35,0,8
	.byte	'P2',0,1
	.word	119
	.byte	1,5,2,35,0,8
	.byte	'P3',0,1
	.word	119
	.byte	1,4,2,35,0,8
	.byte	'P4',0,1
	.word	119
	.byte	1,3,2,35,0,8
	.byte	'P5',0,1
	.word	119
	.byte	1,2,2,35,0,8
	.byte	'P6',0,1
	.word	119
	.byte	1,1,2,35,0,8
	.byte	'P7',0,1
	.word	119
	.byte	1,0,2,35,0,8
	.byte	'P8',0,1
	.word	119
	.byte	1,7,2,35,1,8
	.byte	'P9',0,1
	.word	119
	.byte	1,6,2,35,1,8
	.byte	'P10',0,1
	.word	119
	.byte	1,5,2,35,1,8
	.byte	'P11',0,1
	.word	119
	.byte	1,4,2,35,1,8
	.byte	'P12',0,1
	.word	119
	.byte	1,3,2,35,1,8
	.byte	'P13',0,1
	.word	119
	.byte	1,2,2,35,1,8
	.byte	'P14',0,1
	.word	119
	.byte	1,1,2,35,1,8
	.byte	'P15',0,1
	.word	119
	.byte	1,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	136
	.byte	16,0,2,35,2,0,9,2,165,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2121
	.byte	4,2,35,0,0,11,24
	.word	119
	.byte	12,23,0,7
	.byte	'_Ifx_P_PDR0_Bits',0,2,214,3,16,4,8
	.byte	'PD0',0,1
	.word	119
	.byte	2,6,2,35,0,8
	.byte	'PL0',0,1
	.word	119
	.byte	2,4,2,35,0,8
	.byte	'PD1',0,1
	.word	119
	.byte	2,2,2,35,0,8
	.byte	'PL1',0,1
	.word	119
	.byte	2,0,2,35,0,8
	.byte	'PD2',0,1
	.word	119
	.byte	2,6,2,35,1,8
	.byte	'PL2',0,1
	.word	119
	.byte	2,4,2,35,1,8
	.byte	'PD3',0,1
	.word	119
	.byte	2,2,2,35,1,8
	.byte	'PL3',0,1
	.word	119
	.byte	2,0,2,35,1,8
	.byte	'PD4',0,1
	.word	119
	.byte	2,6,2,35,2,8
	.byte	'PL4',0,1
	.word	119
	.byte	2,4,2,35,2,8
	.byte	'PD5',0,1
	.word	119
	.byte	2,2,2,35,2,8
	.byte	'PL5',0,1
	.word	119
	.byte	2,0,2,35,2,8
	.byte	'PD6',0,1
	.word	119
	.byte	2,6,2,35,3,8
	.byte	'PL6',0,1
	.word	119
	.byte	2,4,2,35,3,8
	.byte	'PD7',0,1
	.word	119
	.byte	2,2,2,35,3,8
	.byte	'PL7',0,1
	.word	119
	.byte	2,0,2,35,3,0,9,2,197,5,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2445
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_PDR1_Bits',0,2,235,3,16,4,8
	.byte	'PD8',0,1
	.word	119
	.byte	2,6,2,35,0,8
	.byte	'PL8',0,1
	.word	119
	.byte	2,4,2,35,0,8
	.byte	'PD9',0,1
	.word	119
	.byte	2,2,2,35,0,8
	.byte	'PL9',0,1
	.word	119
	.byte	2,0,2,35,0,8
	.byte	'PD10',0,1
	.word	119
	.byte	2,6,2,35,1,8
	.byte	'PL10',0,1
	.word	119
	.byte	2,4,2,35,1,8
	.byte	'PD11',0,1
	.word	119
	.byte	2,2,2,35,1,8
	.byte	'PL11',0,1
	.word	119
	.byte	2,0,2,35,1,8
	.byte	'PD12',0,1
	.word	119
	.byte	2,6,2,35,2,8
	.byte	'PL12',0,1
	.word	119
	.byte	2,4,2,35,2,8
	.byte	'PD13',0,1
	.word	119
	.byte	2,2,2,35,2,8
	.byte	'PL13',0,1
	.word	119
	.byte	2,0,2,35,2,8
	.byte	'PD14',0,1
	.word	119
	.byte	2,6,2,35,3,8
	.byte	'PL14',0,1
	.word	119
	.byte	2,4,2,35,3,8
	.byte	'PD15',0,1
	.word	119
	.byte	2,2,2,35,3,8
	.byte	'PL15',0,1
	.word	119
	.byte	2,0,2,35,3,0,9,2,205,5,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2749
	.byte	4,2,35,0,0,11,8
	.word	119
	.byte	12,7,0,7
	.byte	'_Ifx_P_ESR_Bits',0,2,113,16,4,8
	.byte	'EN0',0,1
	.word	119
	.byte	1,7,2,35,0,8
	.byte	'EN1',0,1
	.word	119
	.byte	1,6,2,35,0,8
	.byte	'EN2',0,1
	.word	119
	.byte	1,5,2,35,0,8
	.byte	'EN3',0,1
	.word	119
	.byte	1,4,2,35,0,8
	.byte	'EN4',0,1
	.word	119
	.byte	1,3,2,35,0,8
	.byte	'EN5',0,1
	.word	119
	.byte	1,2,2,35,0,8
	.byte	'EN6',0,1
	.word	119
	.byte	1,1,2,35,0,8
	.byte	'EN7',0,1
	.word	119
	.byte	1,0,2,35,0,8
	.byte	'EN8',0,1
	.word	119
	.byte	1,7,2,35,1,8
	.byte	'EN9',0,1
	.word	119
	.byte	1,6,2,35,1,8
	.byte	'EN10',0,1
	.word	119
	.byte	1,5,2,35,1,8
	.byte	'EN11',0,1
	.word	119
	.byte	1,4,2,35,1,8
	.byte	'EN12',0,1
	.word	119
	.byte	1,3,2,35,1,8
	.byte	'EN13',0,1
	.word	119
	.byte	1,2,2,35,1,8
	.byte	'EN14',0,1
	.word	119
	.byte	1,1,2,35,1,8
	.byte	'EN15',0,1
	.word	119
	.byte	1,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	136
	.byte	16,0,2,35,2,0,9,2,149,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	3074
	.byte	4,2,35,0,0,11,12
	.word	119
	.byte	12,11,0,7
	.byte	'_Ifx_P_PDISC_Bits',0,2,192,3,16,4,8
	.byte	'PDIS0',0,1
	.word	119
	.byte	1,7,2,35,0,8
	.byte	'PDIS1',0,1
	.word	119
	.byte	1,6,2,35,0,8
	.byte	'PDIS2',0,1
	.word	119
	.byte	1,5,2,35,0,8
	.byte	'PDIS3',0,1
	.word	119
	.byte	1,4,2,35,0,8
	.byte	'PDIS4',0,1
	.word	119
	.byte	1,3,2,35,0,8
	.byte	'PDIS5',0,1
	.word	119
	.byte	1,2,2,35,0,8
	.byte	'PDIS6',0,1
	.word	119
	.byte	1,1,2,35,0,8
	.byte	'PDIS7',0,1
	.word	119
	.byte	1,0,2,35,0,8
	.byte	'PDIS8',0,1
	.word	119
	.byte	1,7,2,35,1,8
	.byte	'PDIS9',0,1
	.word	119
	.byte	1,6,2,35,1,8
	.byte	'PDIS10',0,1
	.word	119
	.byte	1,5,2,35,1,8
	.byte	'PDIS11',0,1
	.word	119
	.byte	1,4,2,35,1,8
	.byte	'PDIS12',0,1
	.word	119
	.byte	1,3,2,35,1,8
	.byte	'PDIS13',0,1
	.word	119
	.byte	1,2,2,35,1,8
	.byte	'PDIS14',0,1
	.word	119
	.byte	1,1,2,35,1,8
	.byte	'PDIS15',0,1
	.word	119
	.byte	1,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	136
	.byte	16,0,2,35,2,0,9,2,189,5,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	3414
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_PCSR_Bits',0,2,169,3,16,4,8
	.byte	'SEL0',0,1
	.word	119
	.byte	1,7,2,35,0,8
	.byte	'SEL1',0,1
	.word	119
	.byte	1,6,2,35,0,8
	.byte	'SEL2',0,1
	.word	119
	.byte	1,5,2,35,0,8
	.byte	'SEL3',0,1
	.word	119
	.byte	1,4,2,35,0,8
	.byte	'SEL4',0,1
	.word	119
	.byte	1,3,2,35,0,8
	.byte	'SEL5',0,1
	.word	119
	.byte	1,2,2,35,0,8
	.byte	'SEL6',0,1
	.word	119
	.byte	1,1,2,35,0,8
	.byte	'SEL7',0,1
	.word	119
	.byte	1,0,2,35,0,8
	.byte	'SEL8',0,1
	.word	119
	.byte	1,7,2,35,1,8
	.byte	'SEL9',0,1
	.word	119
	.byte	1,6,2,35,1,8
	.byte	'SEL10',0,1
	.word	119
	.byte	1,5,2,35,1,8
	.byte	'SEL11',0,1
	.word	119
	.byte	1,4,2,35,1,8
	.byte	'SEL12',0,1
	.word	119
	.byte	1,3,2,35,1,8
	.byte	'SEL13',0,1
	.word	119
	.byte	1,2,2,35,1,8
	.byte	'SEL14',0,1
	.word	119
	.byte	1,1,2,35,1,8
	.byte	'SEL15',0,1
	.word	119
	.byte	1,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	136
	.byte	15,1,2,35,2,8
	.byte	'LCK',0,1
	.word	119
	.byte	1,0,2,35,3,0,9,2,181,5,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	3780
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_OMSR0_Bits',0,2,232,2,16,4,8
	.byte	'PS0',0,1
	.word	119
	.byte	1,7,2,35,0,8
	.byte	'PS1',0,1
	.word	119
	.byte	1,6,2,35,0,8
	.byte	'PS2',0,1
	.word	119
	.byte	1,5,2,35,0,8
	.byte	'PS3',0,1
	.word	119
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,4
	.word	215
	.byte	28,0,2,35,0,0,9,2,141,5,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	4144
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_OMSR4_Bits',0,2,253,2,16,4,8
	.byte	'reserved_0',0,1
	.word	119
	.byte	4,4,2,35,0,8
	.byte	'PS4',0,1
	.word	119
	.byte	1,3,2,35,0,8
	.byte	'PS5',0,1
	.word	119
	.byte	1,2,2,35,0,8
	.byte	'PS6',0,1
	.word	119
	.byte	1,1,2,35,0,8
	.byte	'PS7',0,1
	.word	119
	.byte	1,0,2,35,0,8
	.byte	'reserved_8',0,4
	.word	215
	.byte	24,0,2,35,0,0,9,2,157,5,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	4291
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_OMSR8_Bits',0,2,136,3,16,4,8
	.byte	'reserved_0',0,1
	.word	119
	.byte	8,0,2,35,0,8
	.byte	'PS8',0,1
	.word	119
	.byte	1,7,2,35,1,8
	.byte	'PS9',0,1
	.word	119
	.byte	1,6,2,35,1,8
	.byte	'PS10',0,1
	.word	119
	.byte	1,5,2,35,1,8
	.byte	'PS11',0,1
	.word	119
	.byte	1,4,2,35,1,8
	.byte	'reserved_12',0,4
	.word	215
	.byte	20,0,2,35,0,0,9,2,165,5,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	4460
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_OMSR12_Bits',0,2,242,2,16,4,8
	.byte	'reserved_0',0,2
	.word	136
	.byte	12,4,2,35,0,8
	.byte	'PS12',0,1
	.word	119
	.byte	1,3,2,35,1,8
	.byte	'PS13',0,1
	.word	119
	.byte	1,2,2,35,1,8
	.byte	'PS14',0,1
	.word	119
	.byte	1,1,2,35,1,8
	.byte	'PS15',0,1
	.word	119
	.byte	1,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	136
	.byte	16,0,2,35,2,0,9,2,149,5,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	4632
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_OMCR0_Bits',0,2,130,2,16,4,8
	.byte	'reserved_0',0,2
	.word	136
	.byte	16,0,2,35,0,8
	.byte	'PCL0',0,1
	.word	119
	.byte	1,7,2,35,2,8
	.byte	'PCL1',0,1
	.word	119
	.byte	1,6,2,35,2,8
	.byte	'PCL2',0,1
	.word	119
	.byte	1,5,2,35,2,8
	.byte	'PCL3',0,1
	.word	119
	.byte	1,4,2,35,2,8
	.byte	'reserved_20',0,2
	.word	136
	.byte	12,0,2,35,2,0,9,2,221,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	4807
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_OMCR4_Bits',0,2,151,2,16,4,8
	.byte	'reserved_0',0,4
	.word	215
	.byte	20,12,2,35,0,8
	.byte	'PCL4',0,1
	.word	119
	.byte	1,3,2,35,2,8
	.byte	'PCL5',0,1
	.word	119
	.byte	1,2,2,35,2,8
	.byte	'PCL6',0,1
	.word	119
	.byte	1,1,2,35,2,8
	.byte	'PCL7',0,1
	.word	119
	.byte	1,0,2,35,2,8
	.byte	'reserved_24',0,1
	.word	119
	.byte	8,0,2,35,3,0,9,2,237,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	4981
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_OMCR8_Bits',0,2,162,2,16,4,8
	.byte	'reserved_0',0,4
	.word	215
	.byte	24,8,2,35,0,8
	.byte	'PCL8',0,1
	.word	119
	.byte	1,7,2,35,3,8
	.byte	'PCL9',0,1
	.word	119
	.byte	1,6,2,35,3,8
	.byte	'PCL10',0,1
	.word	119
	.byte	1,5,2,35,3,8
	.byte	'PCL11',0,1
	.word	119
	.byte	1,4,2,35,3,8
	.byte	'reserved_28',0,1
	.word	119
	.byte	4,0,2,35,3,0,9,2,245,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5155
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_OMCR12_Bits',0,2,141,2,16,4,8
	.byte	'reserved_0',0,4
	.word	215
	.byte	28,4,2,35,0,8
	.byte	'PCL12',0,1
	.word	119
	.byte	1,3,2,35,3,8
	.byte	'PCL13',0,1
	.word	119
	.byte	1,2,2,35,3,8
	.byte	'PCL14',0,1
	.word	119
	.byte	1,1,2,35,3,8
	.byte	'PCL15',0,1
	.word	119
	.byte	1,0,2,35,3,0,9,2,229,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5331
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_OMSR_Bits',0,2,210,2,16,4,8
	.byte	'PS0',0,1
	.word	119
	.byte	1,7,2,35,0,8
	.byte	'PS1',0,1
	.word	119
	.byte	1,6,2,35,0,8
	.byte	'PS2',0,1
	.word	119
	.byte	1,5,2,35,0,8
	.byte	'PS3',0,1
	.word	119
	.byte	1,4,2,35,0,8
	.byte	'PS4',0,1
	.word	119
	.byte	1,3,2,35,0,8
	.byte	'PS5',0,1
	.word	119
	.byte	1,2,2,35,0,8
	.byte	'PS6',0,1
	.word	119
	.byte	1,1,2,35,0,8
	.byte	'PS7',0,1
	.word	119
	.byte	1,0,2,35,0,8
	.byte	'PS8',0,1
	.word	119
	.byte	1,7,2,35,1,8
	.byte	'PS9',0,1
	.word	119
	.byte	1,6,2,35,1,8
	.byte	'PS10',0,1
	.word	119
	.byte	1,5,2,35,1,8
	.byte	'PS11',0,1
	.word	119
	.byte	1,4,2,35,1,8
	.byte	'PS12',0,1
	.word	119
	.byte	1,3,2,35,1,8
	.byte	'PS13',0,1
	.word	119
	.byte	1,2,2,35,1,8
	.byte	'PS14',0,1
	.word	119
	.byte	1,1,2,35,1,8
	.byte	'PS15',0,1
	.word	119
	.byte	1,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	136
	.byte	16,0,2,35,2,0,9,2,133,5,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5487
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_OMCR_Bits',0,2,236,1,16,4,8
	.byte	'reserved_0',0,2
	.word	136
	.byte	16,0,2,35,0,8
	.byte	'PCL0',0,1
	.word	119
	.byte	1,7,2,35,2,8
	.byte	'PCL1',0,1
	.word	119
	.byte	1,6,2,35,2,8
	.byte	'PCL2',0,1
	.word	119
	.byte	1,5,2,35,2,8
	.byte	'PCL3',0,1
	.word	119
	.byte	1,4,2,35,2,8
	.byte	'PCL4',0,1
	.word	119
	.byte	1,3,2,35,2,8
	.byte	'PCL5',0,1
	.word	119
	.byte	1,2,2,35,2,8
	.byte	'PCL6',0,1
	.word	119
	.byte	1,1,2,35,2,8
	.byte	'PCL7',0,1
	.word	119
	.byte	1,0,2,35,2,8
	.byte	'PCL8',0,1
	.word	119
	.byte	1,7,2,35,3,8
	.byte	'PCL9',0,1
	.word	119
	.byte	1,6,2,35,3,8
	.byte	'PCL10',0,1
	.word	119
	.byte	1,5,2,35,3,8
	.byte	'PCL11',0,1
	.word	119
	.byte	1,4,2,35,3,8
	.byte	'PCL12',0,1
	.word	119
	.byte	1,3,2,35,3,8
	.byte	'PCL13',0,1
	.word	119
	.byte	1,2,2,35,3,8
	.byte	'PCL14',0,1
	.word	119
	.byte	1,1,2,35,3,8
	.byte	'PCL15',0,1
	.word	119
	.byte	1,0,2,35,3,0,9,2,213,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5820
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_LPCR_Bits',0,2,217,1,16,4,8
	.byte	'REN_CTRL',0,1
	.word	119
	.byte	1,7,2,35,0,8
	.byte	'RX_EN',0,1
	.word	119
	.byte	1,6,2,35,0,8
	.byte	'TERM',0,1
	.word	119
	.byte	1,5,2,35,0,8
	.byte	'LRXTERM',0,1
	.word	119
	.byte	3,2,2,35,0,8
	.byte	'LVDSM',0,1
	.word	119
	.byte	1,1,2,35,0,8
	.byte	'PS',0,1
	.word	119
	.byte	1,0,2,35,0,8
	.byte	'TEN_CTRL',0,1
	.word	119
	.byte	1,7,2,35,1,8
	.byte	'TX_EN',0,1
	.word	119
	.byte	1,6,2,35,1,8
	.byte	'VDIFFADJ',0,1
	.word	119
	.byte	2,4,2,35,1,8
	.byte	'VOSDYN',0,1
	.word	119
	.byte	1,3,2,35,1,8
	.byte	'VOSEXT',0,1
	.word	119
	.byte	1,2,2,35,1,8
	.byte	'TX_PD',0,1
	.word	119
	.byte	1,1,2,35,1,8
	.byte	'TX_PWDPD',0,1
	.word	119
	.byte	1,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	136
	.byte	16,0,2,35,2,0,9,2,205,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	6168
	.byte	4,2,35,0,0,11,32
	.word	6448
	.byte	12,7,0,11,56
	.word	119
	.byte	12,55,0,7
	.byte	'_Ifx_P_ACCEN1_Bits',0,2,107,16,4,8
	.byte	'reserved_0',0,4
	.word	215
	.byte	32,0,2,35,0,0,9,2,141,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	6506
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P_ACCEN0_Bits',0,2,70,16,4,8
	.byte	'EN0',0,1
	.word	119
	.byte	1,7,2,35,0,8
	.byte	'EN1',0,1
	.word	119
	.byte	1,6,2,35,0,8
	.byte	'EN2',0,1
	.word	119
	.byte	1,5,2,35,0,8
	.byte	'EN3',0,1
	.word	119
	.byte	1,4,2,35,0,8
	.byte	'EN4',0,1
	.word	119
	.byte	1,3,2,35,0,8
	.byte	'EN5',0,1
	.word	119
	.byte	1,2,2,35,0,8
	.byte	'EN6',0,1
	.word	119
	.byte	1,1,2,35,0,8
	.byte	'EN7',0,1
	.word	119
	.byte	1,0,2,35,0,8
	.byte	'EN8',0,1
	.word	119
	.byte	1,7,2,35,1,8
	.byte	'EN9',0,1
	.word	119
	.byte	1,6,2,35,1,8
	.byte	'EN10',0,1
	.word	119
	.byte	1,5,2,35,1,8
	.byte	'EN11',0,1
	.word	119
	.byte	1,4,2,35,1,8
	.byte	'EN12',0,1
	.word	119
	.byte	1,3,2,35,1,8
	.byte	'EN13',0,1
	.word	119
	.byte	1,2,2,35,1,8
	.byte	'EN14',0,1
	.word	119
	.byte	1,1,2,35,1,8
	.byte	'EN15',0,1
	.word	119
	.byte	1,0,2,35,1,8
	.byte	'EN16',0,1
	.word	119
	.byte	1,7,2,35,2,8
	.byte	'EN17',0,1
	.word	119
	.byte	1,6,2,35,2,8
	.byte	'EN18',0,1
	.word	119
	.byte	1,5,2,35,2,8
	.byte	'EN19',0,1
	.word	119
	.byte	1,4,2,35,2,8
	.byte	'EN20',0,1
	.word	119
	.byte	1,3,2,35,2,8
	.byte	'EN21',0,1
	.word	119
	.byte	1,2,2,35,2,8
	.byte	'EN22',0,1
	.word	119
	.byte	1,1,2,35,2,8
	.byte	'EN23',0,1
	.word	119
	.byte	1,0,2,35,2,8
	.byte	'EN24',0,1
	.word	119
	.byte	1,7,2,35,3,8
	.byte	'EN25',0,1
	.word	119
	.byte	1,6,2,35,3,8
	.byte	'EN26',0,1
	.word	119
	.byte	1,5,2,35,3,8
	.byte	'EN27',0,1
	.word	119
	.byte	1,4,2,35,3,8
	.byte	'EN28',0,1
	.word	119
	.byte	1,3,2,35,3,8
	.byte	'EN29',0,1
	.word	119
	.byte	1,2,2,35,3,8
	.byte	'EN30',0,1
	.word	119
	.byte	1,1,2,35,3,8
	.byte	'EN31',0,1
	.word	119
	.byte	1,0,2,35,3,0,9,2,133,4,9,4,10
	.byte	'U',0
	.word	215
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	231
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	6593
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_P',0,2,222,5,25,128,2,10
	.byte	'OUT',0
	.word	514
	.byte	4,2,35,0,10
	.byte	'OMR',0
	.word	1085
	.byte	4,2,35,4,10
	.byte	'ID',0
	.word	1205
	.byte	4,2,35,8,10
	.byte	'reserved_C',0
	.word	1245
	.byte	4,2,35,12,10
	.byte	'IOCR0',0
	.word	1429
	.byte	4,2,35,16,10
	.byte	'IOCR4',0
	.word	1644
	.byte	4,2,35,20,10
	.byte	'IOCR8',0
	.word	1861
	.byte	4,2,35,24,10
	.byte	'IOCR12',0
	.word	2081
	.byte	4,2,35,28,10
	.byte	'reserved_20',0
	.word	1245
	.byte	4,2,35,32,10
	.byte	'IN',0
	.word	2396
	.byte	4,2,35,36,10
	.byte	'reserved_28',0
	.word	2436
	.byte	24,2,35,40,10
	.byte	'PDR0',0
	.word	2709
	.byte	4,2,35,64,10
	.byte	'PDR1',0
	.word	3025
	.byte	4,2,35,68,10
	.byte	'reserved_48',0
	.word	3065
	.byte	8,2,35,72,10
	.byte	'ESR',0
	.word	3365
	.byte	4,2,35,80,10
	.byte	'reserved_54',0
	.word	3405
	.byte	12,2,35,84,10
	.byte	'PDISC',0
	.word	3740
	.byte	4,2,35,96,10
	.byte	'PCSR',0
	.word	4104
	.byte	4,2,35,100,10
	.byte	'reserved_68',0
	.word	3065
	.byte	8,2,35,104,10
	.byte	'OMSR0',0
	.word	4251
	.byte	4,2,35,112,10
	.byte	'OMSR4',0
	.word	4420
	.byte	4,2,35,116,10
	.byte	'OMSR8',0
	.word	4592
	.byte	4,2,35,120,10
	.byte	'OMSR12',0
	.word	4767
	.byte	4,2,35,124,10
	.byte	'OMCR0',0
	.word	4941
	.byte	4,3,35,128,1,10
	.byte	'OMCR4',0
	.word	5115
	.byte	4,3,35,132,1,10
	.byte	'OMCR8',0
	.word	5291
	.byte	4,3,35,136,1,10
	.byte	'OMCR12',0
	.word	5447
	.byte	4,3,35,140,1,10
	.byte	'OMSR',0
	.word	5780
	.byte	4,3,35,144,1,10
	.byte	'OMCR',0
	.word	6128
	.byte	4,3,35,148,1,10
	.byte	'reserved_98',0
	.word	3065
	.byte	8,3,35,152,1,10
	.byte	'LPCR',0
	.word	6488
	.byte	32,3,35,160,1,10
	.byte	'reserved_C0',0
	.word	6497
	.byte	56,3,35,192,1,10
	.byte	'ACCEN1',0
	.word	6553
	.byte	4,3,35,248,1,10
	.byte	'ACCEN0',0
	.word	7120
	.byte	4,3,35,252,1,0,13
	.word	7160
	.byte	14
	.word	7730
	.byte	3
	.word	119
.L106:
	.byte	4
	.byte	'Dio_lGetPortAdr',0,3,1,204,15,21
	.word	7735
	.byte	1,1
.L108:
	.byte	5
	.byte	'PortNumber',0,1,204,15,56
	.word	7740
.L110:
	.byte	6,0,3
	.word	136
.L94:
	.byte	4
	.byte	'Dio_lGetPinNumber',0,3,1,239,15,20
	.word	119
	.byte	1,1
.L96:
	.byte	5
	.byte	'ChannelId',0,1,239,15,60
	.word	7795
.L98:
	.byte	6,0,3
	.word	231
	.byte	15
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,16
	.word	7851
	.byte	0,13
	.word	215
	.byte	14
	.word	215
	.byte	17
	.byte	'__cmpswapw',0
	.word	7893
	.byte	1,1,1,1,18
	.byte	'p',0
	.word	7898
	.byte	18
	.byte	'value',0
	.word	215
	.byte	18
	.byte	'compare',0
	.word	215
	.byte	0
.L79:
	.byte	3
	.word	136
.L83:
	.byte	3
	.word	136
.L85:
	.byte	3
	.word	119
.L101:
	.byte	3
	.word	119
	.byte	13
	.word	7160
	.byte	3
	.word	7975
.L103:
	.byte	14
	.word	7980
.L113:
	.byte	3
	.word	119
.L115:
	.byte	3
	.word	136
	.byte	19,3,148,1,9,4,10
	.byte	'mask',0
	.word	136
	.byte	2,2,35,0,10
	.byte	'offset',0
	.word	119
	.byte	1,2,35,2,10
	.byte	'port',0
	.word	119
	.byte	1,2,35,3,0,3
	.word	8000
	.byte	14
	.word	8051
.L118:
	.byte	3
	.word	8056
.L126:
	.byte	3
	.word	8056
.L128:
	.byte	3
	.word	136
.L130:
	.byte	2
	.byte	'unsigned long int',0,4,7
.L133:
	.byte	3
	.word	136
.L143:
	.byte	13
	.word	8076
	.byte	20
	.word	163
	.byte	21
	.word	194
	.byte	6,0,20
	.word	7745
	.byte	21
	.word	7773
	.byte	6,0,20
	.word	7800
	.byte	21
	.word	7830
	.byte	6,0,22,1,14
	.word	8143
	.byte	23
	.byte	'__codeptr',0,1,1,1
	.word	8145
	.byte	23
	.byte	'Ifx_UReg_8Bit',0,4,79,24
	.word	119
	.byte	23
	.byte	'Ifx_UReg_32Bit',0,4,81,24
	.word	215
	.byte	23
	.byte	'Ifx_SReg_32Bit',0,4,84,24
	.word	231
	.byte	23
	.byte	'Ifx_P_ACCEN0_Bits',0,2,104,3
	.word	6593
	.byte	23
	.byte	'Ifx_P_ACCEN1_Bits',0,2,110,3
	.word	6506
	.byte	23
	.byte	'Ifx_P_ESR_Bits',0,2,132,1,3
	.word	3074
	.byte	23
	.byte	'Ifx_P_ID_Bits',0,2,140,1,3
	.word	1125
	.byte	23
	.byte	'Ifx_P_IN_Bits',0,2,162,1,3
	.word	2121
	.byte	23
	.byte	'Ifx_P_IOCR0_Bits',0,2,175,1,3
	.word	1254
	.byte	23
	.byte	'Ifx_P_IOCR12_Bits',0,2,188,1,3
	.word	1901
	.byte	23
	.byte	'Ifx_P_IOCR4_Bits',0,2,201,1,3
	.word	1469
	.byte	23
	.byte	'Ifx_P_IOCR8_Bits',0,2,214,1,3
	.word	1684
	.byte	23
	.byte	'Ifx_P_LPCR_Bits',0,2,233,1,3
	.word	6168
	.byte	23
	.byte	'Ifx_P_OMCR_Bits',0,2,255,1,3
	.word	5820
	.byte	23
	.byte	'Ifx_P_OMCR0_Bits',0,2,138,2,3
	.word	4807
	.byte	23
	.byte	'Ifx_P_OMCR12_Bits',0,2,148,2,3
	.word	5331
	.byte	23
	.byte	'Ifx_P_OMCR4_Bits',0,2,159,2,3
	.word	4981
	.byte	23
	.byte	'Ifx_P_OMCR8_Bits',0,2,170,2,3
	.word	5155
	.byte	23
	.byte	'Ifx_P_OMR_Bits',0,2,207,2,3
	.word	554
	.byte	23
	.byte	'Ifx_P_OMSR_Bits',0,2,229,2,3
	.word	5487
	.byte	23
	.byte	'Ifx_P_OMSR0_Bits',0,2,239,2,3
	.word	4144
	.byte	23
	.byte	'Ifx_P_OMSR12_Bits',0,2,250,2,3
	.word	4632
	.byte	23
	.byte	'Ifx_P_OMSR4_Bits',0,2,133,3,3
	.word	4291
	.byte	23
	.byte	'Ifx_P_OMSR8_Bits',0,2,144,3,3
	.word	4460
	.byte	23
	.byte	'Ifx_P_OUT_Bits',0,2,166,3,3
	.word	238
	.byte	23
	.byte	'Ifx_P_PCSR_Bits',0,2,189,3,3
	.word	3780
	.byte	23
	.byte	'Ifx_P_PDISC_Bits',0,2,211,3,3
	.word	3414
	.byte	23
	.byte	'Ifx_P_PDR0_Bits',0,2,232,3,3
	.word	2445
	.byte	23
	.byte	'Ifx_P_PDR1_Bits',0,2,253,3,3
	.word	2749
	.byte	23
	.byte	'Ifx_P_ACCEN0',0,2,138,4,3
	.word	7120
	.byte	23
	.byte	'Ifx_P_ACCEN1',0,2,146,4,3
	.word	6553
	.byte	23
	.byte	'Ifx_P_ESR',0,2,154,4,3
	.word	3365
	.byte	23
	.byte	'Ifx_P_ID',0,2,162,4,3
	.word	1205
	.byte	23
	.byte	'Ifx_P_IN',0,2,170,4,3
	.word	2396
	.byte	23
	.byte	'Ifx_P_IOCR0',0,2,178,4,3
	.word	1429
	.byte	23
	.byte	'Ifx_P_IOCR12',0,2,186,4,3
	.word	2081
	.byte	23
	.byte	'Ifx_P_IOCR4',0,2,194,4,3
	.word	1644
	.byte	23
	.byte	'Ifx_P_IOCR8',0,2,202,4,3
	.word	1861
	.byte	23
	.byte	'Ifx_P_LPCR',0,2,210,4,3
	.word	6448
	.byte	23
	.byte	'Ifx_P_OMCR',0,2,218,4,3
	.word	6128
	.byte	23
	.byte	'Ifx_P_OMCR0',0,2,226,4,3
	.word	4941
	.byte	23
	.byte	'Ifx_P_OMCR12',0,2,234,4,3
	.word	5447
	.byte	23
	.byte	'Ifx_P_OMCR4',0,2,242,4,3
	.word	5115
	.byte	23
	.byte	'Ifx_P_OMCR8',0,2,250,4,3
	.word	5291
	.byte	23
	.byte	'Ifx_P_OMR',0,2,130,5,3
	.word	1085
	.byte	23
	.byte	'Ifx_P_OMSR',0,2,138,5,3
	.word	5780
	.byte	23
	.byte	'Ifx_P_OMSR0',0,2,146,5,3
	.word	4251
	.byte	23
	.byte	'Ifx_P_OMSR12',0,2,154,5,3
	.word	4767
	.byte	23
	.byte	'Ifx_P_OMSR4',0,2,162,5,3
	.word	4420
	.byte	23
	.byte	'Ifx_P_OMSR8',0,2,170,5,3
	.word	4592
	.byte	23
	.byte	'Ifx_P_OUT',0,2,178,5,3
	.word	514
	.byte	23
	.byte	'Ifx_P_PCSR',0,2,186,5,3
	.word	4104
	.byte	23
	.byte	'Ifx_P_PDISC',0,2,194,5,3
	.word	3740
	.byte	23
	.byte	'Ifx_P_PDR0',0,2,202,5,3
	.word	2709
	.byte	23
	.byte	'Ifx_P_PDR1',0,2,210,5,3
	.word	3025
	.byte	13
	.word	7160
	.byte	23
	.byte	'Ifx_P',0,2,130,6,3
	.word	9430
	.byte	23
	.byte	'uint8',0,5,104,31
	.word	119
	.byte	23
	.byte	'uint16',0,5,106,31
	.word	136
	.byte	23
	.byte	'uint32',0,5,108,31
	.word	8076
	.byte	23
	.byte	'Dio_ChannelType',0,3,127,16
	.word	136
	.byte	23
	.byte	'Dio_LevelType',0,3,133,1,15
	.word	119
	.byte	23
	.byte	'Dio_PortType',0,3,138,1,15
	.word	119
	.byte	23
	.byte	'Dio_PortLevelType',0,3,143,1,16
	.word	136
	.byte	23
	.byte	'Dio_ChannelGroupType',0,3,158,1,3
	.word	8000
	.byte	19,3,163,1,9,4,10
	.byte	'Dio_PortIdConfig',0
	.word	119
	.byte	1,2,35,0,10
	.byte	'Dio_ChannelConfig',0
	.word	136
	.byte	2,2,35,2,0,23
	.byte	'Dio_PortChannelIdType',0,3,171,1,3
	.word	9620
	.byte	11,84
	.word	136
	.byte	12,41,0
.L147:
	.byte	3
	.word	9711
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L28:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,19,1,3,8
	.byte	58,15,59,15,57,15,11,15,0,0,8,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,9,23,1,58,15,59,15,57,15,11,15
	.byte	0,0,10,13,0,3,8,73,19,11,15,56,9,0,0,11,1,1,11,15,73,19,0,0,12,33,0,47,15,0,0,13,53,0,73,19,0,0,14,15
	.byte	0,73,19,0,0,15,46,1,3,8,54,15,39,12,63,12,60,12,0,0,16,5,0,73,19,0,0,17,46,1,3,8,73,19,54,15,39,12,63
	.byte	12,60,12,0,0,18,5,0,3,8,73,19,0,0,19,19,1,58,15,59,15,57,15,11,15,0,0,20,46,1,49,19,0,0,21,5,0,49,19,0
	.byte	0,22,21,0,54,15,0,0,23,22,0,3,8,58,15,59,15,57,15,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L29:
	.word	.L158-.L157
.L157:
	.half	3
	.word	.L160-.L159
.L159:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg',0
	.byte	'D:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\inc',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation',0,0
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0,0,0,0
	.byte	'IfxPort_regdef.h',0,1,0,0
	.byte	'Dio.h',0,2,0,0
	.byte	'Ifx_TypesReg.h',0,1,0,0
	.byte	'Platform_Types.h',0,3,0,0,0
.L160:
.L158:
	.sdecl	'.debug_info',debug,cluster('Dio_ReadChannel')
	.sect	'.debug_info'
.L30:
	.word	194
	.half	3
	.word	.L31
	.byte	4,1
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L33,.L32
	.byte	2
	.word	.L26
	.byte	3
	.byte	'Dio_ReadChannel',0,1,181,3,15
	.word	.L77
	.byte	1,1,1
	.word	.L9,.L78,.L8
	.byte	4
	.byte	'ChannelId',0,1,181,3,53
	.word	.L79,.L80
	.byte	5
	.word	.L81
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dio_ReadChannel')
	.sect	'.debug_abbrev'
.L31:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dio_ReadChannel')
	.sect	'.debug_line'
.L32:
	.word	.L162-.L161
.L161:
	.half	3
	.word	.L164-.L163
.L163:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0,0,0,0,0
.L164:
	.byte	5,20,7,0,5,2
	.word	.L9
	.byte	3,232,3,1,5,30,9
	.half	.L165-.L9
	.byte	3,138,12,1,5,41,9
	.half	.L166-.L165
	.byte	3,246,115,1,5,25,3,232,11,1,5,40,9
	.half	.L167-.L166
	.byte	3,92,1,5,38,9
	.half	.L168-.L167
	.byte	1,5,27,9
	.half	.L149-.L168
	.byte	3,1,1,5,38,9
	.half	.L169-.L149
	.byte	3,35,1,5,36,9
	.half	.L170-.L169
	.byte	1,5,54,9
	.half	.L171-.L170
	.byte	3,159,116,1,5,22,9
	.half	.L172-.L171
	.byte	1,5,59,9
	.half	.L173-.L172
	.byte	1,5,1,3,9,1,7,9
	.half	.L34-.L173
	.byte	0,1,1
.L162:
	.sdecl	'.debug_ranges',debug,cluster('Dio_ReadChannel')
	.sect	'.debug_ranges'
.L33:
	.word	-1,.L9,0,.L34-.L9,0,0
.L81:
	.word	-1,.L9,0,.L78-.L9,-1,.L11,0,.L74-.L11,0,0
	.sdecl	'.debug_info',debug,cluster('Dio_WriteChannel')
	.sect	'.debug_info'
.L35:
	.word	307
	.half	3
	.word	.L36
	.byte	4,1
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L38,.L37
	.byte	2
	.word	.L26
	.byte	3
	.byte	'Dio_WriteChannel',0,1,157,4,6,1,1,1
	.word	.L13,.L82,.L12
	.byte	4
	.byte	'ChannelId',0,1,157,4,45
	.word	.L83,.L84
	.byte	4
	.byte	'Level',0,1,158,4,43
	.word	.L85,.L86
	.byte	5
	.word	.L13,.L82
	.byte	6
	.byte	'Offset',0,1,165,4,18
	.word	.L77,.L87
	.byte	7
	.word	.L88,.L89,.L90
	.byte	8
	.word	.L91,.L92
	.byte	9
	.word	.L93,.L89,.L90
	.byte	0,7
	.word	.L94,.L90,.L95
	.byte	8
	.word	.L96,.L97
	.byte	9
	.word	.L98,.L90,.L95
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dio_WriteChannel')
	.sect	'.debug_abbrev'
.L36:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dio_WriteChannel')
	.sect	'.debug_line'
.L37:
	.word	.L175-.L174
.L174:
	.half	3
	.word	.L177-.L176
.L176:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0,0,0,0,0
.L177:
	.byte	5,10,7,0,5,2
	.word	.L13
	.byte	3,175,4,1,5,40,9
	.half	.L89-.L13
	.byte	3,253,10,1,5,38,9
	.half	.L178-.L89
	.byte	1,5,27,9
	.half	.L179-.L178
	.byte	3,1,1,5,30,9
	.half	.L90-.L179
	.byte	3,197,0,1,5,14,9
	.half	.L95-.L90
	.byte	3,132,117,1,5,5,9
	.half	.L180-.L95
	.byte	3,10,1,5,25,9
	.half	.L150-.L180
	.byte	3,208,10,1,5,38,9
	.half	.L181-.L150
	.byte	1,5,36,9
	.half	.L182-.L181
	.byte	1,5,5,9
	.half	.L183-.L182
	.byte	3,176,117,1,5,1,9
	.half	.L184-.L183
	.byte	3,11,1,7,9
	.half	.L39-.L184
	.byte	0,1,1
.L175:
	.sdecl	'.debug_ranges',debug,cluster('Dio_WriteChannel')
	.sect	'.debug_ranges'
.L38:
	.word	-1,.L13,0,.L39-.L13,0,0
	.sdecl	'.debug_info',debug,cluster('Dio_ReadPort')
	.sect	'.debug_info'
.L40:
	.word	276
	.half	3
	.word	.L41
	.byte	4,1
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L43,.L42
	.byte	2
	.word	.L26
	.byte	3
	.byte	'Dio_ReadPort',0,1,168,5,19
	.word	.L99
	.byte	1,1,1
	.word	.L15,.L100,.L14
	.byte	4
	.byte	'PortId',0,1,168,5,51
	.word	.L101,.L102
	.byte	5
	.word	.L15,.L100
	.byte	6
	.byte	'GetPortAddressPtr',0,1,170,5,18
	.word	.L103,.L104
	.byte	6
	.byte	'RetVal',0,1,171,5,22
	.word	.L99,.L105
	.byte	7
	.word	.L106,.L15,.L107
	.byte	8
	.word	.L108,.L109
	.byte	9
	.word	.L110,.L111
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dio_ReadPort')
	.sect	'.debug_abbrev'
.L41:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85
	.byte	6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dio_ReadPort')
	.sect	'.debug_line'
.L42:
	.word	.L186-.L185
.L185:
	.half	3
	.word	.L188-.L187
.L187:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0,0,0,0,0
.L188:
	.byte	5,25,7,0,5,2
	.word	.L15
	.byte	3,208,15,1,5,55,9
	.half	.L107-.L15
	.byte	3,131,118,1,5,15,9
	.half	.L189-.L107
	.byte	3,1,1,5,35,9
	.half	.L190-.L189
	.byte	1,5,15,9
	.half	.L191-.L190
	.byte	3,127,1,5,35,9
	.half	.L192-.L191
	.byte	3,1,1,5,58,9
	.half	.L152-.L192
	.byte	3,127,1,5,1,3,7,1,7,9
	.half	.L44-.L152
	.byte	0,1,1
.L186:
	.sdecl	'.debug_ranges',debug,cluster('Dio_ReadPort')
	.sect	'.debug_ranges'
.L43:
	.word	-1,.L15,0,.L44-.L15,0,0
.L111:
	.word	-1,.L15,0,.L107-.L15,-1,.L17,0,.L69-.L17,0,0
	.sdecl	'.debug_info',debug,cluster('Dio_WritePort')
	.sect	'.debug_info'
.L45:
	.word	208
	.half	3
	.word	.L46
	.byte	4,1
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L48,.L47
	.byte	2
	.word	.L26
	.byte	3
	.byte	'Dio_WritePort',0,1,250,5,6,1,1,1
	.word	.L19,.L112,.L18
	.byte	4
	.byte	'PortId',0,1,250,5,40
	.word	.L113,.L114
	.byte	4
	.byte	'Level',0,1,250,5,73
	.word	.L115,.L116
	.byte	5
	.word	.L19,.L112
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dio_WritePort')
	.sect	'.debug_abbrev'
.L46:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dio_WritePort')
	.sect	'.debug_line'
.L47:
	.word	.L194-.L193
.L193:
	.half	3
	.word	.L196-.L195
.L195:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0,0,0,0,0
.L196:
	.byte	5,5,7,0,5,2
	.word	.L19
	.byte	3,187,6,1,5,25,3,149,9,1,5,5,9
	.half	.L197-.L19
	.byte	3,235,118,1,5,1,9
	.half	.L198-.L197
	.byte	3,8,1,7,9
	.half	.L49-.L198
	.byte	0,1,1
.L194:
	.sdecl	'.debug_ranges',debug,cluster('Dio_WritePort')
	.sect	'.debug_ranges'
.L48:
	.word	-1,.L19,0,.L49-.L19,0,0
	.sdecl	'.debug_info',debug,cluster('Dio_ReadChannelGroup')
	.sect	'.debug_info'
.L50:
	.word	299
	.half	3
	.word	.L51
	.byte	4,1
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L53,.L52
	.byte	2
	.word	.L26
	.byte	3
	.byte	'Dio_ReadChannelGroup',0,1,226,6,19
	.word	.L99
	.byte	1,1,1
	.word	.L21,.L117,.L20
	.byte	4
	.byte	'ChannelGroupIdPtr',0,1,227,6,37
	.word	.L118,.L119
	.byte	5
	.word	.L21,.L117
	.byte	6
	.byte	'GetPortAddressPtr',0,1,229,6,18
	.word	.L103,.L120
	.byte	6
	.byte	'RetVal',0,1,230,6,22
	.word	.L99,.L121
	.byte	7
	.word	.L106,.L122,.L123
	.byte	8
	.word	.L108,.L124
	.byte	9
	.word	.L110,.L122,.L123
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dio_ReadChannelGroup')
	.sect	'.debug_abbrev'
.L51:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dio_ReadChannelGroup')
	.sect	'.debug_line'
.L52:
	.word	.L200-.L199
.L199:
	.half	3
	.word	.L202-.L201
.L201:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0,0,0,0,0
.L202:
	.byte	5,58,7,0,5,2
	.word	.L21
	.byte	3,152,7,1,5,25,9
	.half	.L122-.L21
	.byte	3,184,8,1,5,38,9
	.half	.L203-.L122
	.byte	1,5,36,9
	.half	.L204-.L203
	.byte	1,5,63,9
	.half	.L123-.L204
	.byte	3,206,119,1,5,34,9
	.half	.L205-.L123
	.byte	1,5,59,3,1,1,5,66,9
	.half	.L206-.L205
	.byte	3,127,1,5,42,3,5,1,5,22,9
	.half	.L207-.L206
	.byte	1,5,1,9
	.half	.L208-.L207
	.byte	3,6,1,7,9
	.half	.L54-.L208
	.byte	0,1,1
.L200:
	.sdecl	'.debug_ranges',debug,cluster('Dio_ReadChannelGroup')
	.sect	'.debug_ranges'
.L53:
	.word	-1,.L21,0,.L54-.L21,0,0
	.sdecl	'.debug_info',debug,cluster('Dio_WriteChannelGroup')
	.sect	'.debug_info'
.L55:
	.word	249
	.half	3
	.word	.L56
	.byte	4,1
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L58,.L57
	.byte	2
	.word	.L26
	.byte	3
	.byte	'Dio_WriteChannelGroup',0,1,204,7,6,1,1,1
	.word	.L23,.L125,.L22
	.byte	4
	.byte	'ChannelGroupIdPtr',0,1,205,7,38
	.word	.L126,.L127
	.byte	4
	.byte	'Level',0,1,206,7,27
	.word	.L128,.L129
	.byte	5
	.word	.L23,.L125
	.byte	6
	.byte	'PortVal',0,1,210,7,19
	.word	.L130,.L131
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dio_WriteChannelGroup')
	.sect	'.debug_abbrev'
.L56:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dio_WriteChannelGroup')
	.sect	'.debug_line'
.L57:
	.word	.L210-.L209
.L209:
	.half	3
	.word	.L212-.L211
.L211:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0,0,0,0,0
.L212:
	.byte	5,67,7,0,5,2
	.word	.L23
	.byte	3,159,8,1,5,50,9
	.half	.L213-.L23
	.byte	3,1,1,5,39,9
	.half	.L214-.L213
	.byte	3,127,1,5,77,9
	.half	.L153-.L214
	.byte	1,5,22,9
	.half	.L215-.L153
	.byte	3,6,1,5,32,9
	.half	.L216-.L215
	.byte	1,5,40,9
	.half	.L217-.L216
	.byte	3,5,1,5,24,9
	.half	.L218-.L217
	.byte	1,5,25,3,166,7,1,5,58,9
	.half	.L219-.L218
	.byte	3,224,120,1,5,38,9
	.half	.L220-.L219
	.byte	3,160,7,1,5,36,9
	.half	.L221-.L220
	.byte	1,5,30,9
	.half	.L222-.L221
	.byte	3,228,120,1,5,1,9
	.half	.L223-.L222
	.byte	3,2,1,7,9
	.half	.L59-.L223
	.byte	0,1,1
.L210:
	.sdecl	'.debug_ranges',debug,cluster('Dio_WriteChannelGroup')
	.sect	'.debug_ranges'
.L58:
	.word	-1,.L23,0,.L59-.L23,0,0
	.sdecl	'.debug_info',debug,cluster('Dio_FlipChannel')
	.sect	'.debug_info'
.L60:
	.word	404
	.half	3
	.word	.L61
	.byte	4,1
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L63,.L62
	.byte	2
	.word	.L26
	.byte	3
	.byte	'Dio_FlipChannel',0,1,222,8,15
	.word	.L77
	.byte	1,1,1
	.word	.L25,.L132,.L24
	.byte	4
	.byte	'ChannelId',0,1,222,8,53
	.word	.L133,.L134
	.byte	5
	.word	.L25,.L132
	.byte	6
	.byte	'PinPosition',0,1,228,8,20
	.word	.L130,.L135
	.byte	6
	.byte	'RetVal',0,1,229,8,20
	.word	.L77,.L136
	.byte	7
	.word	.L88,.L25,.L137
	.byte	8
	.word	.L91,.L138
	.byte	9
	.word	.L93,.L139
	.byte	0,7
	.word	.L94,.L137,.L140
	.byte	8
	.word	.L96,.L142
	.byte	10
	.word	.L98,.L137,.L140
	.byte	0,7
	.word	.L88,.L140,.L141
	.byte	8
	.word	.L91,.L138
	.byte	0,5
	.word	.L141,.L132
	.byte	6
	.byte	'DummyRead',0,1,171,9,21
	.word	.L143,.L144
	.byte	7
	.word	.L106,.L141,.L145
	.byte	8
	.word	.L108,.L146
	.byte	10
	.word	.L110,.L141,.L145
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dio_FlipChannel')
	.sect	'.debug_abbrev'
.L61:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85
	.byte	6,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dio_FlipChannel')
	.sect	'.debug_line'
.L62:
	.word	.L225-.L224
.L224:
	.half	3
	.word	.L227-.L226
.L226:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0,0,0,0,0
.L227:
	.byte	5,40,7,0,5,2
	.word	.L25
	.byte	3,172,15,1,5,15,3,177,121,1,5,38,9
	.half	.L154-.L25
	.byte	3,207,6,1,5,30,9
	.half	.L137-.L154
	.byte	3,198,0,1,5,27,9
	.half	.L140-.L137
	.byte	3,187,127,1,5,25,3,35,1,5,38,9
	.half	.L141-.L140
	.byte	1,5,36,9
	.half	.L228-.L141
	.byte	1,5,20,9
	.half	.L145-.L228
	.byte	3,238,121,1,5,22,9
	.half	.L229-.L145
	.byte	3,7,1,5,41,9
	.half	.L230-.L229
	.byte	3,121,1,5,9,9
	.half	.L155-.L230
	.byte	3,7,1,5,5,9
	.half	.L231-.L155
	.byte	1,5,17,7,9
	.half	.L232-.L231
	.byte	3,3,1,5,24,9
	.half	.L233-.L232
	.byte	1,5,32,3,5,1,5,41,9
	.half	.L234-.L233
	.byte	3,5,1,5,17,9
	.half	.L235-.L234
	.byte	1,5,7,9
	.half	.L236-.L235
	.byte	3,1,1,5,75,9
	.half	.L6-.L236
	.byte	3,6,1,5,30,9
	.half	.L237-.L6
	.byte	3,1,1,5,43,9
	.half	.L238-.L237
	.byte	3,127,1,5,30,9
	.half	.L156-.L238
	.byte	3,1,1,5,14,9
	.half	.L239-.L156
	.byte	3,127,1,5,1,3,7,1,7,9
	.half	.L64-.L239
	.byte	0,1,1
.L225:
	.sdecl	'.debug_ranges',debug,cluster('Dio_FlipChannel')
	.sect	'.debug_ranges'
.L63:
	.word	-1,.L25,0,.L64-.L25,0,0
.L139:
	.word	-1,.L25,0,.L137-.L25,.L140-.L25,.L141-.L25,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_1')
	.sect	'.debug_info'
.L65:
	.word	154
	.half	3
	.word	.L66
	.byte	4,1
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L68,.L67
	.byte	2
	.word	.L26
	.byte	3
	.byte	'.cocofun_1',0,1,168,5,19,1
	.word	.L17,.L69,.L16
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_1')
	.sect	'.debug_abbrev'
.L66:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_1')
	.sect	'.debug_line'
.L67:
	.word	.L241-.L240
.L240:
	.half	3
	.word	.L243-.L242
.L242:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0,0,0,0,0
.L243:
	.byte	5,25,7,0,5,2
	.word	.L17
	.byte	3,208,15,1,5,38,9
	.half	.L151-.L17
	.byte	1,5,36,9
	.half	.L244-.L151
	.byte	1,9
	.half	.L69-.L244
	.byte	0,1,1,5,25,0,5,2
	.word	.L17
	.byte	3,208,15,1,5,38,9
	.half	.L151-.L17
	.byte	1,5,36,9
	.half	.L244-.L151
	.byte	1,9
	.half	.L69-.L244
	.byte	0,1,1
.L241:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_1')
	.sect	'.debug_ranges'
.L68:
	.word	-1,.L17,0,.L69-.L17,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L70:
	.word	154
	.half	3
	.word	.L71
	.byte	4,1
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L73,.L72
	.byte	2
	.word	.L26
	.byte	3
	.byte	'.cocofun_2',0,1,181,3,15,1
	.word	.L11,.L74,.L10
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L71:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L72:
	.word	.L246-.L245
.L245:
	.half	3
	.word	.L248-.L247
.L247:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0,0,0,0,0
.L248:
	.byte	5,25,7,0,5,2
	.word	.L11
	.byte	3,208,15,1,9
	.half	.L74-.L11
	.byte	0,1,1,5,25,0,5,2
	.word	.L11
	.byte	3,208,15,1,9
	.half	.L74-.L11
	.byte	0,1,1,5,25,0,5,2
	.word	.L11
	.byte	3,208,15,1,9
	.half	.L74-.L11
	.byte	0,1,1,5,25,0,5,2
	.word	.L11
	.byte	3,208,15,1,9
	.half	.L74-.L11
	.byte	0,1,1,5,25,0,5,2
	.word	.L11
	.byte	3,208,15,1,9
	.half	.L74-.L11
	.byte	0,1,1,5,25,0,5,2
	.word	.L11
	.byte	3,208,15,1,9
	.half	.L74-.L11
	.byte	0,1,1,5,25,0,5,2
	.word	.L11
	.byte	3,208,15,1,9
	.half	.L74-.L11
	.byte	0,1,1
.L246:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L73:
	.word	-1,.L11,0,.L74-.L11,0,0
	.sdecl	'.debug_info',debug,cluster('Dio_kMaskAllPortPins')
	.sect	'.debug_info'
.L75:
	.word	153
	.half	3
	.word	.L76
	.byte	4,1
	.byte	'..\\mcal\\Dio\\ssc\\src\\Dio.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L26
	.byte	3
	.byte	'Dio_kMaskAllPortPins',0,1,236,1,32
	.word	.L147
	.byte	5,3
	.word	Dio_kMaskAllPortPins
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dio_kMaskAllPortPins')
	.sect	'.debug_abbrev'
.L76:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_1')
	.sect	'.debug_loc'
.L16:
	.word	-1,.L17,0,.L69-.L17
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L10:
	.word	-1,.L11,0,.L74-.L11
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dio_FlipChannel')
	.sect	'.debug_loc'
.L134:
	.word	-1,.L25,.L148-.L25,.L74-.L25
	.half	1
	.byte	84
	.word	0,.L132-.L25
	.half	1
	.byte	84
	.word	0,0
.L138:
	.word	0,0
.L142:
	.word	0,0
.L24:
	.word	-1,.L25,0,.L154-.L25
	.half	2
	.byte	138,0
	.word	.L154-.L25,.L132-.L25
	.half	2
	.byte	138,8
	.word	.L132-.L25,.L132-.L25
	.half	2
	.byte	138,0
	.word	0,0
.L144:
	.word	-1,.L25,.L148-.L25,.L74-.L25
	.half	2
	.byte	145,120
	.word	0,.L132-.L25
	.half	2
	.byte	145,120
	.word	0,0
.L135:
	.word	-1,.L25,.L155-.L25,.L156-.L25
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L146:
	.word	0,0
.L136:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dio_ReadChannel')
	.sect	'.debug_loc'
.L80:
	.word	-1,.L9,.L148-.L9,.L74-.L9
	.half	1
	.byte	84
	.word	0,.L149-.L9
	.half	1
	.byte	84
	.word	0,0
.L8:
	.word	-1,.L9,0,.L78-.L9
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dio_ReadChannelGroup')
	.sect	'.debug_loc'
.L119:
	.word	-1,.L21,.L11-.L21,.L74-.L21
	.half	1
	.byte	100
	.word	0,.L117-.L21
	.half	1
	.byte	100
	.word	0,0
.L20:
	.word	-1,.L21,0,.L117-.L21
	.half	2
	.byte	138,0
	.word	0,0
.L120:
	.word	0,0
.L124:
	.word	0,0
.L121:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dio_ReadPort')
	.sect	'.debug_loc'
.L14:
	.word	-1,.L15,0,.L100-.L15
	.half	2
	.byte	138,0
	.word	0,0
.L104:
	.word	0,0
.L102:
	.word	-1,.L15,.L11-.L15,.L74-.L15
	.half	1
	.byte	84
	.word	.L151-.L15,.L69-.L15
	.half	1
	.byte	84
	.word	.L107-.L15,.L100-.L15
	.half	1
	.byte	84
	.word	0,0
.L109:
	.word	0,0
.L105:
	.word	-1,.L15,.L152-.L15,.L100-.L15
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dio_WriteChannel')
	.sect	'.debug_loc'
.L84:
	.word	-1,.L13,0,.L150-.L13
	.half	1
	.byte	84
	.word	0,0
.L92:
	.word	0,0
.L97:
	.word	0,0
.L12:
	.word	-1,.L13,0,.L82-.L13
	.half	2
	.byte	138,0
	.word	0,0
.L86:
	.word	-1,.L13,.L148-.L13,.L74-.L13
	.half	1
	.byte	85
	.word	0,.L82-.L13
	.half	1
	.byte	85
	.word	0,0
.L87:
	.word	-1,.L13,.L148-.L13,.L74-.L13
	.half	5
	.byte	144,32,157,32,0
	.word	.L89-.L13,.L82-.L13
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dio_WriteChannelGroup')
	.sect	'.debug_loc'
.L127:
	.word	-1,.L23,.L148-.L23,.L74-.L23
	.half	1
	.byte	100
	.word	0,.L125-.L23
	.half	1
	.byte	100
	.word	0,0
.L22:
	.word	-1,.L23,0,.L125-.L23
	.half	2
	.byte	138,0
	.word	0,0
.L129:
	.word	-1,.L23,0,.L153-.L23
	.half	1
	.byte	84
	.word	0,0
.L131:
	.word	-1,.L23,.L148-.L23,.L74-.L23
	.half	1
	.byte	84
	.word	.L153-.L23,.L125-.L23
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dio_WritePort')
	.sect	'.debug_loc'
.L18:
	.word	-1,.L19,0,.L112-.L19
	.half	2
	.byte	138,0
	.word	0,0
.L116:
	.word	-1,.L19,.L148-.L19,.L74-.L19
	.half	1
	.byte	85
	.word	.L151-.L19,.L69-.L19
	.half	1
	.byte	85
	.word	0,.L112-.L19
	.half	1
	.byte	85
	.word	0,0
.L114:
	.word	-1,.L19,.L148-.L19,.L74-.L19
	.half	1
	.byte	84
	.word	.L151-.L19,.L69-.L19
	.half	1
	.byte	84
	.word	0,.L112-.L19
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L249:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dio_ReadChannel')
	.sect	'.debug_frame'
	.word	24
	.word	.L249,.L9,.L78-.L9
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dio_WriteChannel')
	.sect	'.debug_frame'
	.word	24
	.word	.L249,.L13,.L82-.L13
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dio_ReadPort')
	.sect	'.debug_frame'
	.word	24
	.word	.L249,.L15,.L100-.L15
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dio_WritePort')
	.sect	'.debug_frame'
	.word	24
	.word	.L249,.L19,.L112-.L19
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dio_ReadChannelGroup')
	.sect	'.debug_frame'
	.word	24
	.word	.L249,.L21,.L117-.L21
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dio_WriteChannelGroup')
	.sect	'.debug_frame'
	.word	24
	.word	.L249,.L23,.L125-.L23
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dio_FlipChannel')
	.sect	'.debug_frame'
	.word	44
	.word	.L249,.L25,.L132-.L25
	.byte	8,19,8,20,8,21,8,22,8,23,4
	.word	(.L154-.L25)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L132-.L154)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L250:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L250,.L11,.L74-.L11
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_1')
	.sect	'.debug_frame'
	.word	24
	.word	.L250,.L17,.L69-.L17
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\mcal\Dio\ssc\src\Dio.c	  2036    return(RetVal);
; ..\mcal\Dio\ssc\src\Dio.c	  2037  }
; ..\mcal\Dio\ssc\src\Dio.c	  2038  #if(DIO_SAFETY_ENABLE == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	  2039  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  2040  ** Traceability:[cover parentID={32B937D0-981A-4edb-A2E8-8196CF21378D}]       **
; ..\mcal\Dio\ssc\src\Dio.c	  2041  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2042  ** Syntax           : LOCAL_INLINE uint8 Dio_lCheckLevel                      **
; ..\mcal\Dio\ssc\src\Dio.c	  2043  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  2044  **                     const Dio_LevelType Level                              **
; ..\mcal\Dio\ssc\src\Dio.c	  2045  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  2046  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2047  ** Description :  This INLINE function:                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  2048  **   - Checks if the level passed is valid                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  2049  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2050  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  2051  ** Service ID:  NA                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2052  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2053  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  2054  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2055  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  2056  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2057  ** Parameters (in)  : Level- Level to be checked                              **
; ..\mcal\Dio\ssc\src\Dio.c	  2058  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2059  ** Parameters (out) : None                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  2060  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2061  ** Return value     : ErrStatus -E_OK  Level passed is Valid                  **
; ..\mcal\Dio\ssc\src\Dio.c	  2062  **                    ErrStatus -E_NOT_OK  Level passed is not Valid          **
; ..\mcal\Dio\ssc\src\Dio.c	  2063  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2064  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  2065  
; ..\mcal\Dio\ssc\src\Dio.c	  2066  LOCAL_INLINE uint8 Dio_lCheckLevel(const Dio_LevelType Level)
; ..\mcal\Dio\ssc\src\Dio.c	  2067  {
; ..\mcal\Dio\ssc\src\Dio.c	  2068    uint8 ErrStatus = E_OK;
; ..\mcal\Dio\ssc\src\Dio.c	  2069     /* [cover parentID={A0E39821-FDC2-4717-B407-23CF9C3D11AC}]
; ..\mcal\Dio\ssc\src\Dio.c	  2070     [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  2071    if((Level != STD_HIGH) && (Level != STD_LOW))
; ..\mcal\Dio\ssc\src\Dio.c	  2072    {
; ..\mcal\Dio\ssc\src\Dio.c	  2073     /* [cover parentID={B233AC52-EE3A-473a-A68C-D76AFB0438F7}]
; ..\mcal\Dio\ssc\src\Dio.c	  2074     [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  2075     Mcal_ReportSafetyError(DIO_MODULE_ID, DIO_INSTANCE_ID,
; ..\mcal\Dio\ssc\src\Dio.c	  2076                    DIO_SID_WRITECHANNEL, DIO_E_PARAM_INVALID_LEVEL);
; ..\mcal\Dio\ssc\src\Dio.c	  2077     ErrStatus = E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	  2078    }
; ..\mcal\Dio\ssc\src\Dio.c	  2079    return(ErrStatus);
; ..\mcal\Dio\ssc\src\Dio.c	  2080  }
; ..\mcal\Dio\ssc\src\Dio.c	  2081  #endif
; ..\mcal\Dio\ssc\src\Dio.c	  2082  
; ..\mcal\Dio\ssc\src\Dio.c	  2083  #if(DIO_MASKED_WRITE_PORT_API == STD_ON)
; ..\mcal\Dio\ssc\src\Dio.c	  2084  /*******************************************************************************
; ..\mcal\Dio\ssc\src\Dio.c	  2085  ** Traceability:[cover parentID={7E417147-9571-4530-A9B6-59ED1BAED7B8}]       **
; ..\mcal\Dio\ssc\src\Dio.c	  2086  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2087  ** Syntax           : void Dio_MaskedWritePort                                **
; ..\mcal\Dio\ssc\src\Dio.c	  2088  **                    (                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  2089  **                     const PortId,                                          **
; ..\mcal\Dio\ssc\src\Dio.c	  2090  **                     const Dio_PortLevelType Level                          **
; ..\mcal\Dio\ssc\src\Dio.c	  2091  **                     const Dio_PortLevelType Mask                           **
; ..\mcal\Dio\ssc\src\Dio.c	  2092  **                    )                                                       **
; ..\mcal\Dio\ssc\src\Dio.c	  2093  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2094  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2095  ** Description :  This Api:                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  2096  **      - Service to set the value of a given port with required mask.        **
; ..\mcal\Dio\ssc\src\Dio.c	  2097  ** [/cover]                                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  2098  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2099  ** Service ID:  0x13                                                          **
; ..\mcal\Dio\ssc\src\Dio.c	  2100  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2101  ** Sync/Async:  Synchronous                                                   **
; ..\mcal\Dio\ssc\src\Dio.c	  2102  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2103  ** Reentrancy:  Reentrant                                                     **
; ..\mcal\Dio\ssc\src\Dio.c	  2104  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2105  ** Parameters(in)   : PortId - ID of DIO port                                 **
; ..\mcal\Dio\ssc\src\Dio.c	  2106  **                    Level - Level to be written                             **
; ..\mcal\Dio\ssc\src\Dio.c	  2107  **                    Mask - Channels to be masked in the port                **
; ..\mcal\Dio\ssc\src\Dio.c	  2108  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2109  ** Parameters (out) : none                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  2110  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2111  ** Return value     : none                                                    **
; ..\mcal\Dio\ssc\src\Dio.c	  2112  **                                                                            **
; ..\mcal\Dio\ssc\src\Dio.c	  2113  *******************************************************************************/
; ..\mcal\Dio\ssc\src\Dio.c	  2114  void Dio_MaskedWritePort
; ..\mcal\Dio\ssc\src\Dio.c	  2115  (
; ..\mcal\Dio\ssc\src\Dio.c	  2116    const Dio_PortType PortId,
; ..\mcal\Dio\ssc\src\Dio.c	  2117    const Dio_PortLevelType Level,
; ..\mcal\Dio\ssc\src\Dio.c	  2118    const Dio_PortLevelType Mask
; ..\mcal\Dio\ssc\src\Dio.c	  2119  )
; ..\mcal\Dio\ssc\src\Dio.c	  2120  {
; ..\mcal\Dio\ssc\src\Dio.c	  2121  
; ..\mcal\Dio\ssc\src\Dio.c	  2122    Ifx_P *GetPortAddressPtr;
; ..\mcal\Dio\ssc\src\Dio.c	  2123    #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT ==STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	  2124    #if (((DIO_PORTS_READONLY_00_31 != DIO_NUMBER_0)|| \ 
; ..\mcal\Dio\ssc\src\Dio.c	  2125                                     (DIO_PORTS_READONLY_32_63 != DIO_NUMBER_0)))
; ..\mcal\Dio\ssc\src\Dio.c	  2126    uint32  PortReadOnly;
; ..\mcal\Dio\ssc\src\Dio.c	  2127    #endif
; ..\mcal\Dio\ssc\src\Dio.c	  2128    uint8 ErrStatus = E_OK;
; ..\mcal\Dio\ssc\src\Dio.c	  2129    #endif
; ..\mcal\Dio\ssc\src\Dio.c	  2130    uint32 Clrbits;
; ..\mcal\Dio\ssc\src\Dio.c	  2131    uint32 Setbits;
; ..\mcal\Dio\ssc\src\Dio.c	  2132    uint32 PortVal;
; ..\mcal\Dio\ssc\src\Dio.c	  2133  
; ..\mcal\Dio\ssc\src\Dio.c	  2134    #if ((DIO_SAFETY_ENABLE == STD_ON) || (DIO_DEV_ERROR_DETECT ==STD_ON))
; ..\mcal\Dio\ssc\src\Dio.c	  2135     /* [cover parentID={A22FFFB0-86DD-4358-8348-EE06FFA46A46}]
; ..\mcal\Dio\ssc\src\Dio.c	  2136     [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  2137    if((Dio_lCheckPortId(PortId) == (uint8)DIO_ERROR))
; ..\mcal\Dio\ssc\src\Dio.c	  2138    {
; ..\mcal\Dio\ssc\src\Dio.c	  2139    /* [cover parentID={8D81B7FD-C398-421f-AD4C-47A1BF95DF48}]
; ..\mcal\Dio\ssc\src\Dio.c	  2140        [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  2141    Dio_lReportError(DIO_SID_MASKEDWRITEPORT, DIO_E_PARAM_INVALID_PORT_ID);
; ..\mcal\Dio\ssc\src\Dio.c	  2142    ErrStatus = E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	  2143    }
; ..\mcal\Dio\ssc\src\Dio.c	  2144    else
; ..\mcal\Dio\ssc\src\Dio.c	  2145    {
; ..\mcal\Dio\ssc\src\Dio.c	  2146     #if (((DIO_PORTS_READONLY_00_31 != DIO_NUMBER_0)|| \ 
; ..\mcal\Dio\ssc\src\Dio.c	  2147                                       (DIO_PORTS_READONLY_32_63 != DIO_NUMBER_0)))
; ..\mcal\Dio\ssc\src\Dio.c	  2148     PortReadOnly = Dio_lIsPortReadOnly((uint32)PortId);
; ..\mcal\Dio\ssc\src\Dio.c	  2149     /* [cover parentID={03D367D6-DBF9-48b1-B7C4-C653830EECFD}]
; ..\mcal\Dio\ssc\src\Dio.c	  2150        [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  2151     if ((PortReadOnly != (uint32)DIO_NUMBER_0))
; ..\mcal\Dio\ssc\src\Dio.c	  2152      {
; ..\mcal\Dio\ssc\src\Dio.c	  2153        /* [cover parentID={F0E92ECF-5B1D-469a-9F8F-50ED10125FEF}]
; ..\mcal\Dio\ssc\src\Dio.c	  2154        [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  2155        Dio_lReportError(DIO_SID_MASKEDWRITEPORT, DIO_E_PARAM_INVALID_PORT_ID);
; ..\mcal\Dio\ssc\src\Dio.c	  2156        ErrStatus = E_NOT_OK;
; ..\mcal\Dio\ssc\src\Dio.c	  2157      }
; ..\mcal\Dio\ssc\src\Dio.c	  2158    #endif
; ..\mcal\Dio\ssc\src\Dio.c	  2159    }
; ..\mcal\Dio\ssc\src\Dio.c	  2160    /* [cover parentID={50D2FC1B-7DFC-4c3f-BB42-4D48E977913A}]
; ..\mcal\Dio\ssc\src\Dio.c	  2161     [/cover] */
; ..\mcal\Dio\ssc\src\Dio.c	  2162    if(ErrStatus == E_OK)
; ..\mcal\Dio\ssc\src\Dio.c	  2163    #endif
; ..\mcal\Dio\ssc\src\Dio.c	  2164      {
; ..\mcal\Dio\ssc\src\Dio.c	  2165       /* GetPortAddressPtr will hold the port address */
; ..\mcal\Dio\ssc\src\Dio.c	  2166      GetPortAddressPtr = Dio_lGetPortAdr(PortId);
; ..\mcal\Dio\ssc\src\Dio.c	  2167  
; ..\mcal\Dio\ssc\src\Dio.c	  2168      Clrbits = ((~(uint32)Level)& ((uint32)Mask));
; ..\mcal\Dio\ssc\src\Dio.c	  2169  
; ..\mcal\Dio\ssc\src\Dio.c	  2170      Setbits = (Level & ((uint32)Mask));
; ..\mcal\Dio\ssc\src\Dio.c	  2171  
; ..\mcal\Dio\ssc\src\Dio.c	  2172      PortVal= (uint32)((Clrbits << OMR_BIT_UPDATE_SHIFT )| Setbits);
; ..\mcal\Dio\ssc\src\Dio.c	  2173  
; ..\mcal\Dio\ssc\src\Dio.c	  2174      GetPortAddressPtr->OMR.U = PortVal;
; ..\mcal\Dio\ssc\src\Dio.c	  2175      }
; ..\mcal\Dio\ssc\src\Dio.c	  2176  }
; ..\mcal\Dio\ssc\src\Dio.c	  2177  #endif
; ..\mcal\Dio\ssc\src\Dio.c	  2178  #define DIO_STOP_SEC_CODE_ASIL_B_GLOBAL
; ..\mcal\Dio\ssc\src\Dio.c	  2179  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\mcal\Dio\ssc\src\Dio.c	  2180  Dio_Memmap.h header is included without safegaurd.*/
; ..\mcal\Dio\ssc\src\Dio.c	  2181  /*MISRA2012_RULE_20_1_JUSTIFICATION: Dio_Memmap.h header included as per
; ..\mcal\Dio\ssc\src\Dio.c	  2182  Autosar guidelines. */
; ..\mcal\Dio\ssc\src\Dio.c	  2183  #include "Dio_MemMap.h"
; ..\mcal\Dio\ssc\src\Dio.c	  2184  /***************** End of Dio driver module **********************************/

	; Module end
