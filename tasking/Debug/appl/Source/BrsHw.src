	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 21092262 SN 73118428"
	.compiler_invocation	"ctc --dep-file=appl\\Source\\.BrsHw.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc39xb -D__CPU_TC39XB__ --core=tc1.6.2 --iso=99 -DBRS_COMP_TASKING -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\testdemo\\taskingdemo\\demo001 -ID:\\Zonal\\demo011\\tasking -ID:\\Zonal\\demo011\\tasking\\appl -ID:\\Zonal\\demo011\\tasking\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\Components -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\ContractPhase -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\inc -ID:\\Zonal\\demo011\\tasking\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\appl\\Include -ID:\\Zonal\\demo011\\tasking\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\appl\\Source\\swc_test -ID:\\Zonal\\demo011\\tasking\\component -ID:\\Zonal\\demo011\\tasking\\component\\_Common -ID:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Mcal_Tc3xx\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os -ID:\\Zonal\\demo011\\tasking\\component\\Os\\BSWMD\\Os\\TC39xQ -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\Os\\GeneratorMsr -ID:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Documentation -ID:\\Zonal\\demo011\\tasking\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug -ID:\\Zonal\\demo011\\tasking\\Debug\\appl -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\GenData\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\appl\\Source -ID:\\Zonal\\demo011\\tasking\\Debug\\component -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\BswM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\EcuM\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\Os\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib -ID:\\Zonal\\demo011\\tasking\\Debug\\component\\VStdLib\\Implementation -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\Debug\\mcal\\Port\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Dio\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Platform\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB -ID:\\Zonal\\demo011\\tasking\\mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\inc\\AS440 -ID:\\Zonal\\demo011\\tasking\\mcal\\McalLib\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Mcu\\ssc\\src -ID:\\Zonal\\demo011\\tasking\\mcal\\Port -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\inc -ID:\\Zonal\\demo011\\tasking\\mcal\\Port\\ssc\\src -g2 --make-target=appl\\Source\\BrsHw.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o appl\\Source\\BrsHw.src ..\\appl\\Source\\BrsHw.c"
	.compiler_name		"ctc"
	;source	'..\\appl\\Source\\BrsHw.c'

	
$TC162
	
	.sdecl	'.text.BrsHw.BrsHwDisableInterruptAtPowerOn',code,cluster('BrsHwDisableInterruptAtPowerOn'),protect
	.sect	'.text.BrsHw.BrsHwDisableInterruptAtPowerOn'
	.align	2
	
	.global	BrsHwDisableInterruptAtPowerOn

; ..\appl\Source\BrsHw.c	     1  
; ..\appl\Source\BrsHw.c	     2  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	     3    COPYRIGHT
; ..\appl\Source\BrsHw.c	     4  -----------------------------------------------------------------------------------------------------------------------
; ..\appl\Source\BrsHw.c	     5    \par      copyright
; ..\appl\Source\BrsHw.c	     6    \verbatim
; ..\appl\Source\BrsHw.c	     7    Copyright (c) 2020 by Vector Informatik GmbH.                                                  All rights reserved.
; ..\appl\Source\BrsHw.c	     8  
; ..\appl\Source\BrsHw.c	     9                  This software is copyright protected and proprietary to Vector Informatik GmbH.
; ..\appl\Source\BrsHw.c	    10                  Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
; ..\appl\Source\BrsHw.c	    11                  All other rights remain with Vector Informatik GmbH.
; ..\appl\Source\BrsHw.c	    12    \endverbatim
; ..\appl\Source\BrsHw.c	    13  -----------------------------------------------------------------------------------------------------------------------
; ..\appl\Source\BrsHw.c	    14    FILE DESCRIPTION
; ..\appl\Source\BrsHw.c	    15  -----------------------------------------------------------------------------------------------------------------------
; ..\appl\Source\BrsHw.c	    16    \file  File:  BrsHw.c
; ..\appl\Source\BrsHw.c	    17        Project:  Vector Basic Runtime System
; ..\appl\Source\BrsHw.c	    18         Module:  BrsHw for platform Infineon Aurix/AurixPlus
; ..\appl\Source\BrsHw.c	    19       Template:  This file is reviewed according to Brs_Template@Implementation[1.00.00]
; ..\appl\Source\BrsHw.c	    20  
; ..\appl\Source\BrsHw.c	    21    \brief Description:  This is the hardware specific code file for Vector Basic Runtime System (BRS).
; ..\appl\Source\BrsHw.c	    22  
; ..\appl\Source\BrsHw.c	    23    \attention Please note:
; ..\appl\Source\BrsHw.c	    24      The demo and example programs only show special aspects of the software. With regard to the fact
; ..\appl\Source\BrsHw.c	    25      that these programs are meant for demonstration purposes only, Vector Informatik liability shall be
; ..\appl\Source\BrsHw.c	    26      expressly excluded in cases of ordinary negligence, to the extent admissible by law or statute.
; ..\appl\Source\BrsHw.c	    27  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	    28  
; ..\appl\Source\BrsHw.c	    29  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	    30    REVISION HISTORY
; ..\appl\Source\BrsHw.c	    31   ----------------------------------------------------------------------------------------------------------------------
; ..\appl\Source\BrsHw.c	    32    Version   Date        Author  Description
; ..\appl\Source\BrsHw.c	    33    --------  ----------  ------  ---------------------------------------------------------------------------------------
; ..\appl\Source\BrsHw.c	    34    01.00.00  2020-05-19  virrlu  New branch for vBaseEnv 2.0, based on zBrs_Aurix BrsHw.c 3.00.12
; ..\appl\Source\BrsHw.c	    35              2020-05-28  vismaa  Changed pin naming for BRS_ENABLE_FLEXRAY_CHANNEL_x_B from FRxB_ERRNA TO FRxB_ERRNB
; ..\appl\Source\BrsHw.c	    36    01.00.01  2020-06-16  vismaa  Added support for 40MHz OSC (AurixPlus)
; ..\appl\Source\BrsHw.c	    37    01.00.02  2020-06-26  visbpz  Implemented BrsHw_UnlockCores() as an empty function
; ..\appl\Source\BrsHw.c	    38    01.00.03  2020-07-15  visrgm  Fixed ETH port initialization due to support quest
; ..\appl\Source\BrsHw.c	    39    01.00.04  2020-07-22  visto   HALBE-2249: Remove unecessary inline function prototypes -> all prototypes are declared 
; ..\appl\Source\BrsHw.c	    40                                              within tcasm.h
; ..\appl\Source\BrsHw.c	    41    01.01.00  2020-07-28  virrlu  Fixed Tasking BRS_STARTUP_LABEL in BrsHw.h to support default startup label
; ..\appl\Source\BrsHw.c	    42    01.02.00  2020-08-04  visbwa  Experimental support for FBL UseCase Legacy w/o OS
; ..\appl\Source\BrsHw.c	    43              2020-09-17  visbwa  Fixed initialization of BRSHW_PORT_ETH0_MDIO
; ..\appl\Source\BrsHw.c	    44              2020-09-20  vismaa  Added BRS_PORT_GROUP_C (TC49xx)
; ..\appl\Source\BrsHw.c	    45              2020-09-22  visto   HALBE-2176 create inline functions for ENDINIT handling
; ..\appl\Source\BrsHw.c	    46    01.03.00  2020-10-26  visto   HALBE-2633 - vBaseEnv_TricoreAurix: Adaptions for FBL UseCase
; ..\appl\Source\BrsHw.c	    47    01.03.01  2020-10-28  visbpz  Added inline to HighTec BRS_FUNC_DECLARATION in BrsHw.h, to get rid of "always_inline
; ..\appl\Source\BrsHw.c	    48                                  function might not be inlinable [-Wattributes]" compiler warning
; ..\appl\Source\BrsHw.c	    49              2020-10-29  vishci  removed Author Identity and added wait status between PLL up rampings
; ..\appl\Source\BrsHw.c	    50    01-03.02  2021-01-15  visto   ESCAN00108312 - Incorrect condition on Wait for System PLL to be stable
; ..\appl\Source\BrsHw.c	    51  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	    52  
; ..\appl\Source\BrsHw.c	    53  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	    54  *  EXAMPLE CODE ONLY
; ..\appl\Source\BrsHw.c	    55  *  -------------------------------------------------------------------------------------------------------------------
; ..\appl\Source\BrsHw.c	    56  *  This Example Code is only intended for illustrating an example of a possible BSW integration and BSW configuration.
; ..\appl\Source\BrsHw.c	    57  *  The Example Code has not passed any quality control measures and may be incomplete. The Example Code is neither
; ..\appl\Source\BrsHw.c	    58  *  intended nor qualified for use in series production. The Example Code as well as any of its modifications and/or
; ..\appl\Source\BrsHw.c	    59  *  implementations must be tested with diligent care and must comply with all quality requirements which are necessary
; ..\appl\Source\BrsHw.c	    60  *  according to the state of the art before their use.
; ..\appl\Source\BrsHw.c	    61  *********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	    62  
; ..\appl\Source\BrsHw.c	    63  #define _BRSHW_C_
; ..\appl\Source\BrsHw.c	    64  
; ..\appl\Source\BrsHw.c	    65  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	    66    INCLUDES
; ..\appl\Source\BrsHw.c	    67  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	    68  #include "BrsHw.h"
; ..\appl\Source\BrsHw.c	    69  
; ..\appl\Source\BrsHw.c	    70  #if !defined (BRS_ENABLE_FBL_SUPPORT)
; ..\appl\Source\BrsHw.c	    71  #include "Os.h"
; ..\appl\Source\BrsHw.c	    72  #endif
; ..\appl\Source\BrsHw.c	    73  
; ..\appl\Source\BrsHw.c	    74  #include "BrsMain.h"
; ..\appl\Source\BrsHw.c	    75  
; ..\appl\Source\BrsHw.c	    76  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	    77    VERSION CHECK
; ..\appl\Source\BrsHw.c	    78  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	    79  #if (BRSHW_VERSION != 0x0103u)
; ..\appl\Source\BrsHw.c	    80    #error "Header and source file are inconsistent!"
; ..\appl\Source\BrsHw.c	    81  #endif
; ..\appl\Source\BrsHw.c	    82  #if (BRSHW_BUGFIX_VERSION != 0x02u)
; ..\appl\Source\BrsHw.c	    83    #error "Different versions of bugfix in Header and Source used!"
; ..\appl\Source\BrsHw.c	    84  #endif
; ..\appl\Source\BrsHw.c	    85  
; ..\appl\Source\BrsHw.c	    86  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	    87    CONFIGURATION CHECK
; ..\appl\Source\BrsHw.c	    88  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	    89  #if defined (BRS_COMP_TASKING) 
; ..\appl\Source\BrsHw.c	    90  
; ..\appl\Source\BrsHw.c	    91  #else
; ..\appl\Source\BrsHw.c	    92    #error "Unknown compiler specified!"
; ..\appl\Source\BrsHw.c	    93  #endif
; ..\appl\Source\BrsHw.c	    94  
; ..\appl\Source\BrsHw.c	    95  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	    96    DEFINITION + MACROS
; ..\appl\Source\BrsHw.c	    97  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	    98  
; ..\appl\Source\BrsHw.c	    99  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	   100    GLOBAL VARIABLES
; ..\appl\Source\BrsHw.c	   101  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	   102  
; ..\appl\Source\BrsHw.c	   103  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	   104    GLOBAL CONST VARIABLES
; ..\appl\Source\BrsHw.c	   105  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	   106  /*
; ..\appl\Source\BrsHw.c	   107   * Description: These constants are used to propagate the Versions over
; ..\appl\Source\BrsHw.c	   108   *              module boundaries.The version numbers are BCD coded. E.g. a sub
; ..\appl\Source\BrsHw.c	   109   *              version of 23 is coded with 0x23, a bug fix version of 9 is
; ..\appl\Source\BrsHw.c	   110   *              coded 0x09.
; ..\appl\Source\BrsHw.c	   111   */
; ..\appl\Source\BrsHw.c	   112  uint8 const kBrsHwMainVersion   = (uint8)(BRSHW_VERSION >> 8);
; ..\appl\Source\BrsHw.c	   113  uint8 const kBrsHwSubVersion    = (uint8)(BRSHW_VERSION & 0xFF);
; ..\appl\Source\BrsHw.c	   114  uint8 const kBrsHwBugfixVersion = (uint8)(BRSHW_BUGFIX_VERSION);
; ..\appl\Source\BrsHw.c	   115  
; ..\appl\Source\BrsHw.c	   116  #if defined (BRS_WATCHDOG_GROUP_A)
; ..\appl\Source\BrsHw.c	   117  const uint32 kBrsWdtCon0Addresses[4] = {
; ..\appl\Source\BrsHw.c	   118    BRS_SFR_WDTCPU0CON0_ADDRESS,
; ..\appl\Source\BrsHw.c	   119    BRS_SFR_WDTCPU1CON0_ADDRESS,
; ..\appl\Source\BrsHw.c	   120    BRS_SFR_WDTCPU2CON0_ADDRESS,
; ..\appl\Source\BrsHw.c	   121    BRS_SFR_WDTSCON0_ADDRESS
; ..\appl\Source\BrsHw.c	   122  };
; ..\appl\Source\BrsHw.c	   123  
; ..\appl\Source\BrsHw.c	   124  #elif defined (BRS_WATCHDOG_GROUP_B)
; ..\appl\Source\BrsHw.c	   125  const uint32 kBrsWdtCon0Addresses[8] = {
; ..\appl\Source\BrsHw.c	   126    BRS_SFR_WDTCPU0CON0_ADDRESS,
; ..\appl\Source\BrsHw.c	   127    BRS_SFR_WDTCPU1CON0_ADDRESS,
; ..\appl\Source\BrsHw.c	   128    BRS_SFR_WDTCPU2CON0_ADDRESS,
; ..\appl\Source\BrsHw.c	   129    BRS_SFR_WDTCPU3CON0_ADDRESS,
; ..\appl\Source\BrsHw.c	   130    BRS_SFR_WDTCPU4CON0_ADDRESS,
; ..\appl\Source\BrsHw.c	   131    0,  /* core ID 5 is not a valid core ID */
; ..\appl\Source\BrsHw.c	   132    BRS_SFR_WDTCPU5CON0_ADDRESS,
; ..\appl\Source\BrsHw.c	   133    BRS_SFR_WDTSCON0_ADDRESS
; ..\appl\Source\BrsHw.c	   134  };
; ..\appl\Source\BrsHw.c	   135  #endif
; ..\appl\Source\BrsHw.c	   136   
; ..\appl\Source\BrsHw.c	   137  # if defined (BRS_COMP_TASKING)
; ..\appl\Source\BrsHw.c	   138  #pragma protect
; ..\appl\Source\BrsHw.c	   139  # endif
; ..\appl\Source\BrsHw.c	   140  /* Boot Mode Headers - use boot from internal flash    */
; ..\appl\Source\BrsHw.c	   141  /* At least 1 of these headers has to be present       */
; ..\appl\Source\BrsHw.c	   142  /* TODO: Check if this configuration suits your setup. */
; ..\appl\Source\BrsHw.c	   143  
; ..\appl\Source\BrsHw.c	   144  /*+++++++++++++++++++++++++++++++++++++Attention!++++++++++++++++++++++++++++++++++++++++++++++++++++++
; ..\appl\Source\BrsHw.c	   145  ++ If you have to adjust the bmiField you have to change the bmi header value and CRC calculation.    +
; ..\appl\Source\BrsHw.c	   146  ++ Otherwise you could be locked out of your device! Read the manual for more information.            +
; ..\appl\Source\BrsHw.c	   147  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
; ..\appl\Source\BrsHw.c	   148  #if defined (BRS_COMP_TASKING)
; ..\appl\Source\BrsHw.c	   149  #pragma section farrom "BMHD0"
; ..\appl\Source\BrsHw.c	   150  #endif
; ..\appl\Source\BrsHw.c	   151  #if defined (BRS_DERIVATIVE_GROUP_TC2xx)
; ..\appl\Source\BrsHw.c	   152  volatile const uint32 bmiField0[0x08] =
; ..\appl\Source\BrsHw.c	   153  {
; ..\appl\Source\BrsHw.c	   154    0x00000000ul, 0xB3590070ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   155    0x00000000ul, 0x00000000ul, 0x791EB864ul, 0x86E1479Bul
; ..\appl\Source\BrsHw.c	   156  };
; ..\appl\Source\BrsHw.c	   157  
; ..\appl\Source\BrsHw.c	   158  #elif defined (BRS_DERIVATIVE_GROUP_TC3xx)
; ..\appl\Source\BrsHw.c	   159  volatile const uint32 bmiField0[128] =
; ..\appl\Source\BrsHw.c	   160  {
; ..\appl\Source\BrsHw.c	   161    0xB359000Eul, 0xA00A0020ul, 0x4FB4A033ul, 0xB04B5FCCul,
; ..\appl\Source\BrsHw.c	   162    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   163    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   164    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   165    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   166    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   167    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   168    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   169    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   170    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   171    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   172    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   173    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   174    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   175    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   176    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   177    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   178    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   179    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   180    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   181    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   182    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   183    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   184    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   185    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   186    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   187    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   188    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   189    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   190    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   191    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   192    0x43211234ul, 0x00000000ul, 0x00000000ul, 0x00000000ul  /* UCB CONFIRMATION - 32-bit CODE = UNLOCKED */
; ..\appl\Source\BrsHw.c	   193  };
; ..\appl\Source\BrsHw.c	   194  #endif /*BRS_DERIVATIVE_GROUP_x*/
; ..\appl\Source\BrsHw.c	   195  #if defined (BRS_COMP_TASKING)
; ..\appl\Source\BrsHw.c	   196  #pragma section farrom restore
; ..\appl\Source\BrsHw.c	   197  #endif
; ..\appl\Source\BrsHw.c	   198  
; ..\appl\Source\BrsHw.c	   199  #if defined (BRS_COMP_TASKING)
; ..\appl\Source\BrsHw.c	   200  #pragma section farrom "BMHD1"
; ..\appl\Source\BrsHw.c	   201  #endif
; ..\appl\Source\BrsHw.c	   202  
; ..\appl\Source\BrsHw.c	   203  #if defined (BRS_DERIVATIVE_GROUP_TC2xx)
; ..\appl\Source\BrsHw.c	   204  volatile const uint32 bmiField1[0x08] =
; ..\appl\Source\BrsHw.c	   205  {
; ..\appl\Source\BrsHw.c	   206    0x00000000ul, 0xB3590070ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   207    0x00000000ul, 0x00000000ul, 0x791EB864ul, 0x86E1479Bul
; ..\appl\Source\BrsHw.c	   208  };
; ..\appl\Source\BrsHw.c	   209  
; ..\appl\Source\BrsHw.c	   210  #elif defined (BRS_DERIVATIVE_GROUP_TC3xx)
; ..\appl\Source\BrsHw.c	   211  volatile const uint32 bmiField1[128] =
; ..\appl\Source\BrsHw.c	   212  {
; ..\appl\Source\BrsHw.c	   213    0xB359000Eul, 0xA00A0020ul, 0x4FB4A033ul, 0xB04B5FCCul,
; ..\appl\Source\BrsHw.c	   214    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   215    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   216    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   217    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   218    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   219    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   220    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   221    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   222    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   223    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   224    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   225    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   226    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   227    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   228    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   229    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   230    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   231    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   232    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   233    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   234    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   235    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   236    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   237    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   238    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   239    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   240    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   241    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   242    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   243    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   244    0x43211234ul, 0x00000000ul, 0x00000000ul, 0x00000000ul  /* UCB CONFIRMATION - 32-bit CODE = UNLOCKED */
; ..\appl\Source\BrsHw.c	   245  };
; ..\appl\Source\BrsHw.c	   246  #endif /*BRS_DERIVATIVE_GROUP_x*/
; ..\appl\Source\BrsHw.c	   247  
; ..\appl\Source\BrsHw.c	   248  #if defined (BRS_COMP_TASKING)
; ..\appl\Source\BrsHw.c	   249  #pragma section farrom restore
; ..\appl\Source\BrsHw.c	   250  #endif
; ..\appl\Source\BrsHw.c	   251  
; ..\appl\Source\BrsHw.c	   252  #if defined (BRS_COMP_TASKING)
; ..\appl\Source\BrsHw.c	   253  #pragma section farrom "BMHD2"
; ..\appl\Source\BrsHw.c	   254  #endif
; ..\appl\Source\BrsHw.c	   255  
; ..\appl\Source\BrsHw.c	   256  #if defined (BRS_DERIVATIVE_GROUP_TC2xx)
; ..\appl\Source\BrsHw.c	   257  volatile const uint32 bmiField2[0x08] =
; ..\appl\Source\BrsHw.c	   258  {
; ..\appl\Source\BrsHw.c	   259    0x00000000ul, 0xB3590070ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   260    0x00000000ul, 0x00000000ul, 0x791EB864ul, 0x86E1479Bul
; ..\appl\Source\BrsHw.c	   261  };
; ..\appl\Source\BrsHw.c	   262  
; ..\appl\Source\BrsHw.c	   263  #elif defined (BRS_DERIVATIVE_GROUP_TC3xx)
; ..\appl\Source\BrsHw.c	   264  volatile const uint32 bmiField2[128] =
; ..\appl\Source\BrsHw.c	   265  {
; ..\appl\Source\BrsHw.c	   266    0xB359000Eul, 0xA00A0020ul, 0x4FB4A033ul, 0xB04B5FCCul,
; ..\appl\Source\BrsHw.c	   267    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   268    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   269    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   270    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   271    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   272    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   273    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   274    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   275    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   276    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   277    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   278    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   279    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   280    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   281    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   282    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   283    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   284    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   285    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   286    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   287    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   288    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   289    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   290    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   291    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   292    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   293    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   294    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   295    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   296    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   297    0x43211234ul, 0x00000000ul, 0x00000000ul, 0x00000000ul  /* UCB CONFIRMATION - 32-bit CODE = UNLOCKED */
; ..\appl\Source\BrsHw.c	   298  };
; ..\appl\Source\BrsHw.c	   299  #endif /*BRS_DERIVATIVE_GROUP_x*/
; ..\appl\Source\BrsHw.c	   300  
; ..\appl\Source\BrsHw.c	   301  #if defined (BRS_COMP_TASKING)
; ..\appl\Source\BrsHw.c	   302  #pragma section farrom restore
; ..\appl\Source\BrsHw.c	   303  #endif
; ..\appl\Source\BrsHw.c	   304  
; ..\appl\Source\BrsHw.c	   305  #if defined (BRS_COMP_TASKING)
; ..\appl\Source\BrsHw.c	   306  #pragma section farrom "BMHD3"
; ..\appl\Source\BrsHw.c	   307  #endif
; ..\appl\Source\BrsHw.c	   308  
; ..\appl\Source\BrsHw.c	   309  #if defined (BRS_DERIVATIVE_GROUP_TC2xx)
; ..\appl\Source\BrsHw.c	   310  volatile const uint32 bmiField3[0x08] =
; ..\appl\Source\BrsHw.c	   311  {
; ..\appl\Source\BrsHw.c	   312    0x00000000ul, 0xB3590070ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   313    0x00000000ul, 0x00000000ul, 0x791EB864ul, 0x86E1479Bul
; ..\appl\Source\BrsHw.c	   314  };
; ..\appl\Source\BrsHw.c	   315  
; ..\appl\Source\BrsHw.c	   316  #elif defined (BRS_DERIVATIVE_GROUP_TC3xx)
; ..\appl\Source\BrsHw.c	   317  volatile const uint32 bmiField3[128] =
; ..\appl\Source\BrsHw.c	   318  {
; ..\appl\Source\BrsHw.c	   319    0xB359000Eul, 0xA00A0020ul, 0x4FB4A033ul, 0xB04B5FCCul,
; ..\appl\Source\BrsHw.c	   320    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   321    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   322    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   323    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   324    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   325    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   326    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   327    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   328    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   329    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   330    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   331    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   332    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   333    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   334    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   335    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   336    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   337    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   338    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   339    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   340    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   341    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   342    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   343    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   344    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   345    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   346    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   347    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   348    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   349    0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul,
; ..\appl\Source\BrsHw.c	   350    0x43211234ul, 0x00000000ul, 0x00000000ul, 0x00000000ul  /* UCB CONFIRMATION - 32-bit CODE = UNLOCKED */
; ..\appl\Source\BrsHw.c	   351  };
; ..\appl\Source\BrsHw.c	   352  #endif /*BRS_DERIVATIVE_GROUP_x*/
; ..\appl\Source\BrsHw.c	   353  
; ..\appl\Source\BrsHw.c	   354  #if defined (BRS_COMP_TASKING)
; ..\appl\Source\BrsHw.c	   355  #pragma section farrom restore
; ..\appl\Source\BrsHw.c	   356  #endif
; ..\appl\Source\BrsHw.c	   357  
; ..\appl\Source\BrsHw.c	   358  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	   359    LOCAL VARIABLES AND LOCAL HW REGISTERS
; ..\appl\Source\BrsHw.c	   360  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	   361  
; ..\appl\Source\BrsHw.c	   362  #if defined (BRS_PLL_GROUP_A)
; ..\appl\Source\BrsHw.c	   363  /*******************************************************************************
; ..\appl\Source\BrsHw.c	   364    PLL  GROUP  CONFIG
; ..\appl\Source\BrsHw.c	   365  *******************************************************************************/
; ..\appl\Source\BrsHw.c	   366  #define BRS_PLLCLC        BRSHW_IOS(uint32, 0xF0000040) /* original name: PLL_CLC */
; ..\appl\Source\BrsHw.c	   367  #define BRS_VCO_BYPASS    0x00000020
; ..\appl\Source\BrsHw.c	   368  #define BRS_OSC_DISC      0x01000000
; ..\appl\Source\BrsHw.c	   369  #define BRS_PLL_LOCK      0x00000001
; ..\appl\Source\BrsHw.c	   370  #define BRS_PLL_LOCK_RES  0x00000002
; ..\appl\Source\BrsHw.c	   371  #define BRS_CLOCK_MASK    0x007FFFC4
; ..\appl\Source\BrsHw.c	   372  
; ..\appl\Source\BrsHw.c	   373  /*******************************************************************************
; ..\appl\Source\BrsHw.c	   374    SYSTEM  CONTROL  UNIT  SCU
; ..\appl\Source\BrsHw.c	   375  *******************************************************************************/
; ..\appl\Source\BrsHw.c	   376  #define BRS_SCU_BASE  0xF0036000
; ..\appl\Source\BrsHw.c	   377  
; ..\appl\Source\BrsHw.c	   378  #define BRS_SCU_OSCCON       BRSHW_IOS(uint32, BRS_SCU_BASE + 0x10)  /* OSCCON  OSC Control Register */
; ..\appl\Source\BrsHw.c	   379  #define BRS_SCU_PLLCON0      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x18)  /* PLLCON0 PLL Configuration 0 Register */
; ..\appl\Source\BrsHw.c	   380  #define BRS_SCU_PLLCON1      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x1C)  /* PLLCON1 PLL Configuration 1 Register */
; ..\appl\Source\BrsHw.c	   381  #define BRS_SCU_PLLCON2      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x20)  /* PLLCON2 PLL Configuration 2 Register */
; ..\appl\Source\BrsHw.c	   382  #define BRS_SCU_PLLSTAT      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x14)  /* PLLSTAT PLL Status Register */
; ..\appl\Source\BrsHw.c	   383  
; ..\appl\Source\BrsHw.c	   384  #define BRS_SCU_CCUCON0      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x30)  /* CCUCON0 CCU Control Register 0 */
; ..\appl\Source\BrsHw.c	   385  #define BRS_SCU_CCUCON1      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x34)  /* CCUCON1 CCU Control Register 1 */
; ..\appl\Source\BrsHw.c	   386  #define BRS_SCU_CCUCON5      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x4C)  /* CCUCON5 CCU Control Register 5 */
; ..\appl\Source\BrsHw.c	   387  #define BRS_SCU_CCUCON6      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x80)  /* CCUCON6 CCU Control Register 6 */
; ..\appl\Source\BrsHw.c	   388  #define BRS_SCU_CCUCON7      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x84)  /* CCUCON7 CCU Control Register 7 */
; ..\appl\Source\BrsHw.c	   389  #define BRS_SCU_CCUCON8      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x88)  /* CCUCON8 CCU Control Register 8 */
; ..\appl\Source\BrsHw.c	   390  
; ..\appl\Source\BrsHw.c	   391  #define BRS_SCU_PLLERAYCON0  BRSHW_IOS(uint32, BRS_SCU_BASE + 0x28)  /* PLL_ERAY Configuration 0 Register */
; ..\appl\Source\BrsHw.c	   392  #define BRS_SCU_PLLERAYCON1  BRSHW_IOS(uint32, BRS_SCU_BASE + 0x2C)  /* PLL_ERAY Configuration 1 Register */
; ..\appl\Source\BrsHw.c	   393  #define BRS_SCU_PLLERAYSTAT  BRSHW_IOS(uint32, BRS_SCU_BASE + 0x24)  /* PLL_ERAY Status Register */
; ..\appl\Source\BrsHw.c	   394  
; ..\appl\Source\BrsHw.c	   395  #define BRS_RSTSTAT          BRSHW_IOS(uint32, BRS_SCU_BASE + 0x50)  /* Reset Status Register */ 
; ..\appl\Source\BrsHw.c	   396  #define BRS_SWRSTCON         BRSHW_IOS(uint32, BRS_SCU_BASE + 0x60)  /* Software Reset Configuration Register */
; ..\appl\Source\BrsHw.c	   397  #define BRS_SCU_TRAPCLR      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x12C) /* Trap Clear Register */
; ..\appl\Source\BrsHw.c	   398  #define BRS_SCU_TRAPDIS      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x130) /* Trap Disable Register */
; ..\appl\Source\BrsHw.c	   399  
; ..\appl\Source\BrsHw.c	   400  /*******************************************************************************
; ..\appl\Source\BrsHw.c	   401    GENERAL PURPOSE TIMER CLOCK CONTROL REGISTER
; ..\appl\Source\BrsHw.c	   402  *******************************************************************************/
; ..\appl\Source\BrsHw.c	   403  #define BRS_GPT120_BASE  0xF0002E00
; ..\appl\Source\BrsHw.c	   404  #define BRS_GPT120_CLC       BRSHW_IOS(uint32, BRS_GPT120_BASE)
; ..\appl\Source\BrsHw.c	   405  
; ..\appl\Source\BrsHw.c	   406  #elif defined (BRS_PLL_GROUP_B) || defined (BRS_PLL_GROUP_C)
; ..\appl\Source\BrsHw.c	   407  /*******************************************************************************
; ..\appl\Source\BrsHw.c	   408    SYSTEM  CONTROL  UNIT  SCU
; ..\appl\Source\BrsHw.c	   409  *******************************************************************************/
; ..\appl\Source\BrsHw.c	   410  #define BRS_SCU_BASE  0xF0036000
; ..\appl\Source\BrsHw.c	   411  
; ..\appl\Source\BrsHw.c	   412  #define BRS_SCU_OSCCON       BRSHW_IOS(uint32, BRS_SCU_BASE + 0x10)  /* OSCCON  OSC Control Register */
; ..\appl\Source\BrsHw.c	   413  #define BRS_SCU_SYSPLLCON0   BRSHW_IOS(uint32, BRS_SCU_BASE + 0x18)  /* SYSPLLCON0 System PLL Configuration 0 Register */
; ..\appl\Source\BrsHw.c	   414  #define BRS_SCU_SYSPLLCON1   BRSHW_IOS(uint32, BRS_SCU_BASE + 0x1C)  /* SYSPLLCON1 System PLL Configuration 1 Register */
; ..\appl\Source\BrsHw.c	   415  #define BRS_SCU_SYSPLLCON2   BRSHW_IOS(uint32, BRS_SCU_BASE + 0x20)  /* SYSPLLCON2 System PLL Configuration 2 Register */
; ..\appl\Source\BrsHw.c	   416  #define BRS_SCU_SYSPLLSTAT   BRSHW_IOS(uint32, BRS_SCU_BASE + 0x14)  /* SYSPLLSTAT System PLL Status Register */
; ..\appl\Source\BrsHw.c	   417  
; ..\appl\Source\BrsHw.c	   418  #define BRS_SCU_CCUCON0      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x30)  /* CCUCON0 CCU Control Register  0 */
; ..\appl\Source\BrsHw.c	   419  #define BRS_SCU_CCUCON1      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x34)  /* CCUCON1 CCU Control Register  1 */
; ..\appl\Source\BrsHw.c	   420  
; ..\appl\Source\BrsHw.c	   421  #define BRS_SCU_CCUCON2      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x40)  /* CCUCON2 CCU Control Register  2 */
; ..\appl\Source\BrsHw.c	   422  #define BRS_SCU_CCUCON5      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x4C)  /* CCUCON5 CCU Control Register  5 */
; ..\appl\Source\BrsHw.c	   423  #define BRS_SCU_CCUCON6      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x80)  /* CCUCON6 CCU Control Register  6 */
; ..\appl\Source\BrsHw.c	   424  #define BRS_SCU_CCUCON7      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x84)  /* CCUCON7 CCU Control Register  7 */
; ..\appl\Source\BrsHw.c	   425  #define BRS_SCU_CCUCON8      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x88)  /* CCUCON8 CCU Control Register  8 */
; ..\appl\Source\BrsHw.c	   426  #define BRS_SCU_CCUCON9      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x8C)  /* CCUCON8 CCU Control Register  9 */
; ..\appl\Source\BrsHw.c	   427  #define BRS_SCU_CCUCON10     BRSHW_IOS(uint32, BRS_SCU_BASE + 0x90)  /* CCUCON8 CCU Control Register 10 */
; ..\appl\Source\BrsHw.c	   428  #define BRS_SCU_CCUCON11     BRSHW_IOS(uint32, BRS_SCU_BASE + 0x94)  /* CCUCON8 CCU Control Register 11 */
; ..\appl\Source\BrsHw.c	   429  
; ..\appl\Source\BrsHw.c	   430  #define BRS_SCU_PERPLLCON0   BRSHW_IOS(uint32, BRS_SCU_BASE + 0x28)  /* PERPLLCON0 Peripheral PLL Configuration 0 Register */
; ..\appl\Source\BrsHw.c	   431  #define BRS_SCU_PERPLLCON1   BRSHW_IOS(uint32, BRS_SCU_BASE + 0x2C)  /* PERPLLCON1 Peripheral PLL Configuration 1 Register */
; ..\appl\Source\BrsHw.c	   432  #define BRS_SCU_PERPLLSTAT   BRSHW_IOS(uint32, BRS_SCU_BASE + 0x24)  /* PERPLLSTAT Peripheral PLL Status Register */
; ..\appl\Source\BrsHw.c	   433  
; ..\appl\Source\BrsHw.c	   434  #define BRS_RSTSTAT          BRSHW_IOS(uint32, BRS_SCU_BASE + 0x50)  /* Reset Status Register */ 
; ..\appl\Source\BrsHw.c	   435  #define BRS_SWRSTCON         BRSHW_IOS(uint32, BRS_SCU_BASE + 0x60)  /*Software Reset Configuration Register */
; ..\appl\Source\BrsHw.c	   436  
; ..\appl\Source\BrsHw.c	   437  #define BRS_SCU_TRAPCLR      BRSHW_IOS(uint32, BRS_SCU_BASE + 0x12C) /* Trap Clear Register */
; ..\appl\Source\BrsHw.c	   438  #define BRS_SCU_TRAPDIS0     BRSHW_IOS(uint32, BRS_SCU_BASE + 0x130) /* Trap Disable Register 0 */
; ..\appl\Source\BrsHw.c	   439  #define BRS_SCU_TRAPDIS1     BRSHW_IOS(uint32, BRS_SCU_BASE + 0x120) /* Trap Disable Register 1 */
; ..\appl\Source\BrsHw.c	   440  
; ..\appl\Source\BrsHw.c	   441  /*******************************************************************************
; ..\appl\Source\BrsHw.c	   442    GENERAL PURPOSE TIMER CLOCK CONTROL REGISTER
; ..\appl\Source\BrsHw.c	   443  *******************************************************************************/
; ..\appl\Source\BrsHw.c	   444  #define BRS_GPT120_BASE  0xF0001800
; ..\appl\Source\BrsHw.c	   445  #define BRS_GPT120_CLC       BRSHW_IOS(uint32, BRS_GPT120_BASE)
; ..\appl\Source\BrsHw.c	   446  #endif /*BRS_PLL_GROUP_X*/
; ..\appl\Source\BrsHw.c	   447  
; ..\appl\Source\BrsHw.c	   448  #if defined (BRS_ENABLE_PORT)
; ..\appl\Source\BrsHw.c	   449  /*******************************************************************************
; ..\appl\Source\BrsHw.c	   450    PORT  GROUP  CONFIG
; ..\appl\Source\BrsHw.c	   451  *******************************************************************************/
; ..\appl\Source\BrsHw.c	   452  #define PORT_BASE_ADDRESS  0xF003A000
; ..\appl\Source\BrsHw.c	   453  
; ..\appl\Source\BrsHw.c	   454  # if defined (BRS_PORT_GROUP_A) || defined (BRS_PORT_GROUP_B)
; ..\appl\Source\BrsHw.c	   455  #define BRS_OFFSET_IOCR0  0x10 /* Port n Input/Output Control Register 0 */
; ..\appl\Source\BrsHw.c	   456  #define BRS_OFFSET_POUT   0x00 /* Port n Output Register */
; ..\appl\Source\BrsHw.c	   457  #define BRS_OFFSET_PIN    0x24 /* Port n Input Register */
; ..\appl\Source\BrsHw.c	   458  #define BRS_OFFSET_PDR0   0x40 /* Port n Pad Driver Mode 0 Register */
; ..\appl\Source\BrsHw.c	   459  #define BRS_OFFSET_PCSR   0x64 /* Port n Pin Controller Select Register */
; ..\appl\Source\BrsHw.c	   460  
; ..\appl\Source\BrsHw.c	   461  # elif defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	   462  #define BRS_PADCFG_DRVCFG  0x304 /* Port n Input/Output Control Register 0 */
; ..\appl\Source\BrsHw.c	   463  #define BRS_OFFSET_POUT    0x20  /* Port n Output Register */
; ..\appl\Source\BrsHw.c	   464  #define BRS_OFFSET_PIN     0x24  /* Port n Input Register */
; ..\appl\Source\BrsHw.c	   465  #define BRS_OFFSET_PCSRSEL 0x34  /* Port n Pin Controller Select Register */
; ..\appl\Source\BrsHw.c	   466  # endif /*BRS_PORT_GROUP_x*/
; ..\appl\Source\BrsHw.c	   467  
; ..\appl\Source\BrsHw.c	   468  # if defined (BRS_PORT_GROUP_A)
; ..\appl\Source\BrsHw.c	   469  #define BRS_PORT_IOCR(g,n) BRSHW_IOS(uint32, PORT_BASE_ADDRESS + 0x1000 * (g / 10) + 0x100 * (g % 10) + BRS_OFFSET_IOCR0 + 4 * ((uint32)n / 4)) /* Port Input/Output Control Register (group, number) */
; ..\appl\Source\BrsHw.c	   470  #define BRS_PORT_POUT(g)   BRSHW_IOS(uint32, PORT_BASE_ADDRESS + 0x1000 * (g / 10) + 0x100 * (g % 10) + BRS_OFFSET_POUT)                        /* Port Output Register (group) */
; ..\appl\Source\BrsHw.c	   471  #define BRS_PORT_PIN(g)    BRSHW_IOS(uint32, PORT_BASE_ADDRESS + 0x1000 * (g / 10) + 0x100 * (g % 10) + BRS_OFFSET_PIN)                         /* Port Input Register (group) */
; ..\appl\Source\BrsHw.c	   472  #define BRS_PORT_PDR(g,n)  BRSHW_IOS(uint32, PORT_BASE_ADDRESS + 0x1000 * (g / 10) + 0x100 * (g % 10) + BRS_OFFSET_PDR0 + 4 * ((uint32)n / 8))  /* Port Pad Driver Mode Register (group, number) */
; ..\appl\Source\BrsHw.c	   473  #define BRS_PORT_PCSR(g)   BRSHW_IOS(uint32, PORT_BASE_ADDRESS + 0x1000 * (g / 10) + 0x100 * (g % 10) + BRS_OFFSET_PCSR)                        /* Port g Pin Controller Select Register */
; ..\appl\Source\BrsHw.c	   474  
; ..\appl\Source\BrsHw.c	   475  # elif defined (BRS_PORT_GROUP_B)
; ..\appl\Source\BrsHw.c	   476  #define BRS_PORT_IOCR(g,n) BRSHW_IOS(uint32, PORT_BASE_ADDRESS + g * 0x100 + BRS_OFFSET_IOCR0 + 4 * ((uint32)n / 4)) /* Port Input/Output Control Register (group, number) */
; ..\appl\Source\BrsHw.c	   477  #define BRS_PORT_POUT(g)   BRSHW_IOS(uint32, PORT_BASE_ADDRESS + g * 0x100 + BRS_OFFSET_POUT)                        /* Port Output Register (group) */
; ..\appl\Source\BrsHw.c	   478  #define BRS_PORT_PIN(g)    BRSHW_IOS(uint32, PORT_BASE_ADDRESS + g * 0x100 + BRS_OFFSET_PIN)                         /* Port Input Register (group) */
; ..\appl\Source\BrsHw.c	   479  #define BRS_PORT_PDR(g,n)  BRSHW_IOS(uint32, PORT_BASE_ADDRESS + g * 0x100 + BRS_OFFSET_PDR0 + 4 * ((uint32)n / 8))  /* Port Pad Driver Mode Register (group, number) */
; ..\appl\Source\BrsHw.c	   480  #define BRS_PORT_PCSR(g)   BRSHW_IOS(uint32, PORT_BASE_ADDRESS + g * 0x100 + BRS_OFFSET_PCSR)                        /* Port g Pin Controller Select Register */
; ..\appl\Source\BrsHw.c	   481  
; ..\appl\Source\BrsHw.c	   482  # elif defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	   483  #define BRS_PORT_PADCFG_DRVCFG(g,n) BRSHW_IOS(uint32, PORT_BASE_ADDRESS + g * 0x400 + BRS_PADCFG_DRVCFG +  ((uint32)n *10)) /* Port Input/Output Control Register (group, number) */
; ..\appl\Source\BrsHw.c	   484  #define BRS_PORT_POUT(g)            BRSHW_IOS(uint32, PORT_BASE_ADDRESS + g * 0x100 + BRS_OFFSET_POUT)                      /* Port Output Register (group) */
; ..\appl\Source\BrsHw.c	   485  #define BRS_PORT_PIN(g)             BRSHW_IOS(uint32, PORT_BASE_ADDRESS + g * 0x100 + BRS_OFFSET_PIN)                       /* Port Input Register (group) */
; ..\appl\Source\BrsHw.c	   486  #define BRS_PORT_PCSRSEL(g)         BRSHW_IOS(uint32, PORT_BASE_ADDRESS + g * 0x100 + BRS_OFFSET_PCSRSEL)                   /* Port g Enables or disables Standby Controller(SCR) port control */
; ..\appl\Source\BrsHw.c	   487  
; ..\appl\Source\BrsHw.c	   488  /*Defines for shifting*/
; ..\appl\Source\BrsHw.c	   489  #define DIR_Bit   0UL /* */
; ..\appl\Source\BrsHw.c	   490  #define MODE_Bits 4UL /* */
; ..\appl\Source\BrsHw.c	   491  
; ..\appl\Source\BrsHw.c	   492  /*Defines correct value*/
; ..\appl\Source\BrsHw.c	   493  /*Used for MODE*/
; ..\appl\Source\BrsHw.c	   494  #define TRISTATE_INPUT_GPIO_OUTPUT   0Ul
; ..\appl\Source\BrsHw.c	   495  #define INPUT_PULL_DOWN              1Ul
; ..\appl\Source\BrsHw.c	   496  #define INPUT_PULL_UP                2Ul
; ..\appl\Source\BrsHw.c	   497  
; ..\appl\Source\BrsHw.c	   498  /*Used for DIR*/
; ..\appl\Source\BrsHw.c	   499  #define INPUT                        0UL
; ..\appl\Source\BrsHw.c	   500  #define OUTPUT                       1UL
; ..\appl\Source\BrsHw.c	   501  # endif /*BRS_PORT_GROUP_x*/
; ..\appl\Source\BrsHw.c	   502  #endif /*BRS_ENABLE_PORT*/
; ..\appl\Source\BrsHw.c	   503  
; ..\appl\Source\BrsHw.c	   504  /*******************************************************************************
; ..\appl\Source\BrsHw.c	   505    INTERRUPT  GROUP  CONFIG
; ..\appl\Source\BrsHw.c	   506  *******************************************************************************/
; ..\appl\Source\BrsHw.c	   507  #define BRS_INTERRUPT_IR_BASE  0xF0037000                        /* Interrupt base Adresse */
; ..\appl\Source\BrsHw.c	   508  #define BRS_INT_SRC_BASE        (BRS_INTERRUPT_IR_BASE + 0x1000)  /* Interrupt base source adresse */
; ..\appl\Source\BrsHw.c	   509  
; ..\appl\Source\BrsHw.c	   510  /* Defining some interrupt masks */
; ..\appl\Source\BrsHw.c	   511  #define BRS_INT_SRC_SRE_MASK    0x00000400
; ..\appl\Source\BrsHw.c	   512  #define BRS_INT_SRC_SETR_MASK   0x04000000
; ..\appl\Source\BrsHw.c	   513  
; ..\appl\Source\BrsHw.c	   514  #define BRS_INT_SRC(x)          BRSHW_IOS(uint32, BRS_INT_SRC_BASE + x) /* Interrupt Router SRC Registers */
; ..\appl\Source\BrsHw.c	   515  
; ..\appl\Source\BrsHw.c	   516  #if defined (BRS_ENABLE_FBL_SUPPORT)
; ..\appl\Source\BrsHw.c	   517  /*******************************************************************************
; ..\appl\Source\BrsHw.c	   518    FLASH  GROUP  CONFIG
; ..\appl\Source\BrsHw.c	   519  *******************************************************************************/
; ..\appl\Source\BrsHw.c	   520  # if defined(BRS_DERIVATIVE_GROUP_TC2xx)
; ..\appl\Source\BrsHw.c	   521  #define BRS_FLASH0_BASE  0xF8001000
; ..\appl\Source\BrsHw.c	   522  #define BRS_FLASH0_MARP           BRSHW_IOS(uint32, BRS_FLASH0_BASE + 0x10A8)  /* PMU Margin Control PFlash register, CPU protected */
; ..\appl\Source\BrsHw.c	   523  #define BRS_FLASH0_MARD           BRSHW_IOS(uint32, BRS_FLASH0_BASE + 0x10AC)  /* PMU Margin Control DFlash register */
; ..\appl\Source\BrsHw.c	   524  
; ..\appl\Source\BrsHw.c	   525  # elif defined (BRS_DERIVATIVE_GROUP_TC3xx)
; ..\appl\Source\BrsHw.c	   526  #define BRS_CPUSFR_BASE  0xF8800000u
; ..\appl\Source\BrsHw.c	   527  #define BRS_DMU_BASE     0xF8040000u
; ..\appl\Source\BrsHw.c	   528  
; ..\appl\Source\BrsHw.c	   529  #define BRS_CPU0_OFFSET_FLASHCON0  0x00000000u
; ..\appl\Source\BrsHw.c	   530  #define BRS_CPU1_OFFSET_FLASHCON0  0x00020000u
; ..\appl\Source\BrsHw.c	   531  #define BRS_CPU2_OFFSET_FLASHCON0  0x00040000u
; ..\appl\Source\BrsHw.c	   532  #define BRS_CPU3_OFFSET_FLASHCON0  0x00060000u
; ..\appl\Source\BrsHw.c	   533  #define BRS_CPU4_OFFSET_FLASHCON0  0x00080000u
; ..\appl\Source\BrsHw.c	   534  #define BRS_CPU5_OFFSET_FLASHCON0  0x000C0000u
; ..\appl\Source\BrsHw.c	   535  
; ..\appl\Source\BrsHw.c	   536  /* CPU Flash Configuration registers */ /** CPU x flash configuration register y, CPU protected */
; ..\appl\Source\BrsHw.c	   537  #define BRS_CPU_FLASHCON(x, y)    BRSHW_IOS(uint32, BRS_CPUSFR_BASE + 0x1100u + BRS_CPU##x##_OFFSET_FLASHCON0 + ((y) * 0x04u))
; ..\appl\Source\BrsHw.c	   538  
; ..\appl\Source\BrsHw.c	   539  #define BRS_DMU_ECCC(x)           BRSHW_IOS(uint32, BRS_DMU_BASE + 0x48u + ((x) * 0x200000u))  /**< DF x ECC control register, safety/cpu protected */
; ..\appl\Source\BrsHw.c	   540  
; ..\appl\Source\BrsHw.c	   541  #define BRS_FLASHCON1_MASKUECC  0x00010000u  /* MASKUECC bit in FLASHCON1 registers */
; ..\appl\Source\BrsHw.c	   542  #define BRS_DMU_ECCC_TRAPDIS    0xC0000000u  /* TRAPDIS bit in ECCC registers - disable ECC traps */
; ..\appl\Source\BrsHw.c	   543  
; ..\appl\Source\BrsHw.c	   544  # endif /*BRS_DERIVATIVE_GROUP_x*/
; ..\appl\Source\BrsHw.c	   545  #endif /*BRS_ENABLE_FBL_SUPPORT*/
; ..\appl\Source\BrsHw.c	   546  
; ..\appl\Source\BrsHw.c	   547  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	   548    LOCAL VARIABLES
; ..\appl\Source\BrsHw.c	   549  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	   550  
; ..\appl\Source\BrsHw.c	   551  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	   552    LOCAL CONST VARIABLES
; ..\appl\Source\BrsHw.c	   553  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	   554  
; ..\appl\Source\BrsHw.c	   555  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	   556    PROTOTYPES OF GLOBAL FUNCTIONS
; ..\appl\Source\BrsHw.c	   557  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	   558  extern void BrsMain_SoftwareResetECU_Hook(void);
; ..\appl\Source\BrsHw.c	   559  
; ..\appl\Source\BrsHw.c	   560  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	   561    PROTOTYPES OF LOCAL FUNCTIONS
; ..\appl\Source\BrsHw.c	   562  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	   563  
; ..\appl\Source\BrsHw.c	   564  #if defined (BRS_ENABLE_CAN_SUPPORT)      || \ 
; ..\appl\Source\BrsHw.c	   565      defined (BRS_ENABLE_LIN_SUPPORT)      || \ 
; ..\appl\Source\BrsHw.c	   566      defined (BRS_ENABLE_FLEXRAY_SUPPORT)  || \ 
; ..\appl\Source\BrsHw.c	   567      defined (BRS_ENABLE_ETHERNET_SUPPORT)
; ..\appl\Source\BrsHw.c	   568  void Appl_UnlockInit(void);
; ..\appl\Source\BrsHw.c	   569  void Appl_UnlockEndinit(void);
; ..\appl\Source\BrsHw.c	   570  void Appl_LockInit(void);
; ..\appl\Source\BrsHw.c	   571  void Appl_LockEndinit(void);
; ..\appl\Source\BrsHw.c	   572  #endif
; ..\appl\Source\BrsHw.c	   573  
; ..\appl\Source\BrsHw.c	   574  #if defined (BRS_ENABLE_CAN_SUPPORT)
; ..\appl\Source\BrsHw.c	   575  void ApplCanWaitSetMCR(void);
; ..\appl\Source\BrsHw.c	   576  #endif
; ..\appl\Source\BrsHw.c	   577  
; ..\appl\Source\BrsHw.c	   578  #if defined (BRS_ENABLE_FLEXRAY_SUPPORT)
; ..\appl\Source\BrsHw.c	   579  Std_ReturnType BrsHwErayPllInitPowerOn(void);
; ..\appl\Source\BrsHw.c	   580  Std_ReturnType BrsHwErayPllWaitVcoLock(void);
; ..\appl\Source\BrsHw.c	   581  #endif
; ..\appl\Source\BrsHw.c	   582  
; ..\appl\Source\BrsHw.c	   583  /**********************************************************************************************************************
; ..\appl\Source\BrsHw.c	   584    FUNCTION DEFINITIONS
; ..\appl\Source\BrsHw.c	   585  **********************************************************************************************************************/
; ..\appl\Source\BrsHw.c	   586  
; ..\appl\Source\BrsHw.c	   587  #if defined (BRS_ENABLE_WATCHDOG)
; ..\appl\Source\BrsHw.c	   588  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	   589  /**
; ..\appl\Source\BrsHw.c	   590   * @brief      This function must be used to initialize the Watchdog.
; ..\appl\Source\BrsHw.c	   591   * @pre        -
; ..\appl\Source\BrsHw.c	   592   * @param[in]  -
; ..\appl\Source\BrsHw.c	   593   * @param[out] -
; ..\appl\Source\BrsHw.c	   594   * @return     -
; ..\appl\Source\BrsHw.c	   595   * @context    Function is called from BrsMainInit() at power on initialization
; ..\appl\Source\BrsHw.c	   596   */
; ..\appl\Source\BrsHw.c	   597  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	   598  void BrsHwWatchdogInitPowerOn(void)
; ..\appl\Source\BrsHw.c	   599  {
; ..\appl\Source\BrsHw.c	   600    BrsHwUnlockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	   601    BRS_SFR_WDTCPU0CON1 |= 0x8;
; ..\appl\Source\BrsHw.c	   602    BrsHwLockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	   603    
; ..\appl\Source\BrsHw.c	   604    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   605    BRS_SFR_WDTSCON1 |= 0x8;
; ..\appl\Source\BrsHw.c	   606    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   607  }
; ..\appl\Source\BrsHw.c	   608  #endif /*BRS_ENABLE_WATCHDOG*/
; ..\appl\Source\BrsHw.c	   609  
; ..\appl\Source\BrsHw.c	   610  #if defined (BRS_ENABLE_PLLCLOCKS)
; ..\appl\Source\BrsHw.c	   611  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	   612  /**
; ..\appl\Source\BrsHw.c	   613   * @brief      This function must be used to initialize the PLL.
; ..\appl\Source\BrsHw.c	   614   * @pre        -
; ..\appl\Source\BrsHw.c	   615   * @param[in]  -
; ..\appl\Source\BrsHw.c	   616   * @param[out] -
; ..\appl\Source\BrsHw.c	   617   * @return     -
; ..\appl\Source\BrsHw.c	   618   * @context    Function is called from BrsMainInit() at power on initialization
; ..\appl\Source\BrsHw.c	   619   */
; ..\appl\Source\BrsHw.c	   620  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	   621  void BrsHwPllInitPowerOn(void)
; ..\appl\Source\BrsHw.c	   622  {
; ..\appl\Source\BrsHw.c	   623  #if (BRS_TIMEBASE_CLOCK > BRS_CPU_MAX_FREQUENCY)
; ..\appl\Source\BrsHw.c	   624    #error "The selected derivative does not support frequencies above BRS_CPU_MAX_FREQUENCY (please find the defined value inside vBrsCfg.h)"
; ..\appl\Source\BrsHw.c	   625  #endif
; ..\appl\Source\BrsHw.c	   626  
; ..\appl\Source\BrsHw.c	   627  #if defined (BRS_PLL_GROUP_A)
; ..\appl\Source\BrsHw.c	   628    uint32 pllfreq;
; ..\appl\Source\BrsHw.c	   629    /*CPU DIVIDER VALUES*/
; ..\appl\Source\BrsHw.c	   630    uint32 cpu0div, cpu1div, cpu2div;
; ..\appl\Source\BrsHw.c	   631    /*PERIPHERAL DIVIDER VALUES*/
; ..\appl\Source\BrsHw.c	   632    uint32 stmdivider, spbdivider, candivider, linfdivider, linsdivider, baud1divider, baud2divider, sridivider, gtmdivider, ethdivider, eraydivider;
; ..\appl\Source\BrsHw.c	   633  
; ..\appl\Source\BrsHw.c	   634    /* fvco has to be in the range 400...800MHZ */
; ..\appl\Source\BrsHw.c	   635    /* fpll = fosc*(N_DIVIDER/(P_DIVIDER*K2_DIVIDER)) */
; ..\appl\Source\BrsHw.c	   636  
; ..\appl\Source\BrsHw.c	   637    /*Divider values for fpll and fpllERAY*/
; ..\appl\Source\BrsHw.c	   638    #define P_DIVIDER 0x1  /*P_DIVIDER = 2*/
; ..\appl\Source\BrsHw.c	   639    #define K2_DIVIDER 0x3 /*K2_DIVIDER = 4*/
; ..\appl\Source\BrsHw.c	   640  
; ..\appl\Source\BrsHw.c	   641    /*fpll = 200MHZ fix*/
; ..\appl\Source\BrsHw.c	   642  # if (BRS_OSC_CLK == 40)
; ..\appl\Source\BrsHw.c	   643    #define N_DIVIDER 0x27 /*N_DIVIDER = 40*/
; ..\appl\Source\BrsHw.c	   644  # elif (BRS_OSC_CLK == 20)
; ..\appl\Source\BrsHw.c	   645    #define N_DIVIDER 0x4F /*N_DIVIDER = 80*/
; ..\appl\Source\BrsHw.c	   646  # elif (BRS_OSC_CLK == 16)
; ..\appl\Source\BrsHw.c	   647    #define N_DIVIDER 0x63/*N_DIVIDER = 100*/
; ..\appl\Source\BrsHw.c	   648  
; ..\appl\Source\BrsHw.c	   649  # else
; ..\appl\Source\BrsHw.c	   650    #error "Actual BRS implementation supports oscillator frequencies of 40, 20 and 16 MHz only"
; ..\appl\Source\BrsHw.c	   651  # endif /*BRS_OSC_CLK*/
; ..\appl\Source\BrsHw.c	   652  
; ..\appl\Source\BrsHw.c	   653    /*check vco range*/
; ..\appl\Source\BrsHw.c	   654  # if( (BRS_OSC_CLK*(N_DIVIDER+0x1))/(P_DIVIDER+0x1) < 400 || (BRS_OSC_CLK*(N_DIVIDER+0x1))/(P_DIVIDER+0x1) > 800)
; ..\appl\Source\BrsHw.c	   655    #error "fvco must be greater than 400MHZ and less than 800MHZ."
; ..\appl\Source\BrsHw.c	   656  # endif
; ..\appl\Source\BrsHw.c	   657  
; ..\appl\Source\BrsHw.c	   658  # if defined (BRS_DERIVATIVE_TC29x) /* Errata:PLL_TC.005 */
; ..\appl\Source\BrsHw.c	   659    #define nop10() nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
; ..\appl\Source\BrsHw.c	   660    uint32 errataPllStableDelay = 0;
; ..\appl\Source\BrsHw.c	   661    BRS_SCU_CCUCON0 &= ~0x30000000; /* switch system clock to back-up clock - should be used as default anyway */
; ..\appl\Source\BrsHw.c	   662    BRS_SCU_CCUCON0 |=  0x30000000; /* request update */
; ..\appl\Source\BrsHw.c	   663    BRS_SCU_PLLCON0 &= ~0x00010000; /* set PLL to power saving mode */
; ..\appl\Source\BrsHw.c	   664  
; ..\appl\Source\BrsHw.c	   665    /* Wait 10us:
; ..\appl\Source\BrsHw.c	   666       - Back-up clock should be 100 MHz: 1us = 1.000 nops -> 10us = 10.000 nops */
; ..\appl\Source\BrsHw.c	   667    for(errataPllStableDelay = 0; errataPllStableDelay < 1000; errataPllStableDelay++)
; ..\appl\Source\BrsHw.c	   668      nop10();
; ..\appl\Source\BrsHw.c	   669    BRS_SCU_PLLCON0 |=  0x00010000; /* set PLL to power saving mode */
; ..\appl\Source\BrsHw.c	   670  # endif /*BRS_DERIVATIVE_TC29x*/
; ..\appl\Source\BrsHw.c	   671  
; ..\appl\Source\BrsHw.c	   672    pllfreq= BRS_OSC_CLK *(N_DIVIDER+0x1)/((K2_DIVIDER+0x1)*(P_DIVIDER+0x1)); /*pllfreq = 200MHZ*/
; ..\appl\Source\BrsHw.c	   673  
; ..\appl\Source\BrsHw.c	   674  # if (BRS_TIMEBASE_CLOCK == 50 || BRS_TIMEBASE_CLOCK == 75 || BRS_TIMEBASE_CLOCK == 100 || BRS_TIMEBASE_CLOCK == 125 || BRS_TIMEBASE_CLOCK == 150 || BRS_TIMEBASE_CLOCK == 175 || BRS_TIMEBASE_CLOCK == 200)
; ..\appl\Source\BrsHw.c	   675    cpu0div = 64 - ((BRS_TIMEBASE_CLOCK*64)/pllfreq);
; ..\appl\Source\BrsHw.c	   676    cpu1div = 64 - ((BRS_TIMEBASE_CLOCK*64)/pllfreq);
; ..\appl\Source\BrsHw.c	   677    cpu2div = 64 - ((BRS_TIMEBASE_CLOCK*64)/pllfreq);
; ..\appl\Source\BrsHw.c	   678  # else
; ..\appl\Source\BrsHw.c	   679    #error "The selected CPU frequency is not yet supported (please choose 25, 50, 75, 100, 125, 150, 175 or 200MHZ)."
; ..\appl\Source\BrsHw.c	   680  # endif
; ..\appl\Source\BrsHw.c	   681  
; ..\appl\Source\BrsHw.c	   682    /*Set peripheral, system timer and SPB bus clock divider values*/
; ..\appl\Source\BrsHw.c	   683    stmdivider = pllfreq/25;   /*stmdivider for fstm = 25MHZ;*/
; ..\appl\Source\BrsHw.c	   684    spbdivider = pllfreq/50;   /*spbdivider for fspb = 50MHZ*/
; ..\appl\Source\BrsHw.c	   685    candivider = pllfreq/25;   /*candivider for fcan = 25MHZ*/
; ..\appl\Source\BrsHw.c	   686    linfdivider = pllfreq/25;  /*linfdivider for flinf = 25MHZ*/
; ..\appl\Source\BrsHw.c	   687    linsdivider = pllfreq/25;  /*linsdivider for flins = 25MHZ*/
; ..\appl\Source\BrsHw.c	   688    baud1divider = pllfreq/25; /*baud1divider for fbaud1 = 25MHZ*/
; ..\appl\Source\BrsHw.c	   689    baud2divider = pllfreq/25; /*baud2divider for fbaud2 = 25MHZ*/
; ..\appl\Source\BrsHw.c	   690    sridivider = 0x1;          /*sridivider for fsri = BRS_TIMEBASE_CLOCK*/
; ..\appl\Source\BrsHw.c	   691    gtmdivider = pllfreq/25;   /*gtmdivider for fgtm = 25MHZ*/
; ..\appl\Source\BrsHw.c	   692  
; ..\appl\Source\BrsHw.c	   693  # if defined (BRS_ENABLE_FLEXRAY_SUPPORT)
; ..\appl\Source\BrsHw.c	   694    eraydivider = 0x1;         /*eraydivider for feray = 80MHZ*/
; ..\appl\Source\BrsHw.c	   695  # else
; ..\appl\Source\BrsHw.c	   696    eraydivider = 0x0;         /* no ERAYPLL */
; ..\appl\Source\BrsHw.c	   697  # endif
; ..\appl\Source\BrsHw.c	   698  
; ..\appl\Source\BrsHw.c	   699  # if defined (BRS_ENABLE_ETHERNET_SUPPORT)
; ..\appl\Source\BrsHw.c	   700    ethdivider = 0x1;
; ..\appl\Source\BrsHw.c	   701  # else
; ..\appl\Source\BrsHw.c	   702    ethdivider = 0x0;
; ..\appl\Source\BrsHw.c	   703  # endif
; ..\appl\Source\BrsHw.c	   704  
; ..\appl\Source\BrsHw.c	   705    /*Configuration of PLL and PLLERAY starts here*/
; ..\appl\Source\BrsHw.c	   706    BrsHwUnlockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	   707    BRS_GPT120_CLC = 0x0;
; ..\appl\Source\BrsHw.c	   708    BRS_SCU_TRAPDIS |= 0x3E0; /* Traps can not be generated for PLLs and Clocksystem */
; ..\appl\Source\BrsHw.c	   709    BrsHwLockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	   710  
; ..\appl\Source\BrsHw.c	   711    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   712    /*Frist: Select prescaler mode*/
; ..\appl\Source\BrsHw.c	   713    /*Prescaler mode for pll*/
; ..\appl\Source\BrsHw.c	   714    BRS_SCU_PLLCON0 = BRS_SCU_PLLCON0
; ..\appl\Source\BrsHw.c	   715                    | (0x1 << 0)  /*VCOBYP=1    ---> Prescaler mode*/
; ..\appl\Source\BrsHw.c	   716                    | (0x1 << 4); /*SETFINDIS=1 ---> oscillator clock disconnect to PLL*/
; ..\appl\Source\BrsHw.c	   717  
; ..\appl\Source\BrsHw.c	   718    while((BRS_SCU_CCUCON1 & 0x80000000) == 0x80000000); /* wait until the lock of CCUCON1 is not set */
; ..\appl\Source\BrsHw.c	   719    BRS_SCU_CCUCON1 = (BRS_SCU_CCUCON1 & 0x0FFFFFFF)
; ..\appl\Source\BrsHw.c	   720                    | (0x1 << 28); /* pll and pll_ERAY clock source = fosc0 (fxtal1) */
; ..\appl\Source\BrsHw.c	   721  
; ..\appl\Source\BrsHw.c	   722    /* Write CCUCON1 with all values */ 
; ..\appl\Source\BrsHw.c	   723    while((BRS_SCU_CCUCON1 & 0x80000000) == 0x80000000); /* wait until the lock of CCUCON1 is not set */
; ..\appl\Source\BrsHw.c	   724    BRS_SCU_CCUCON1 =  (BRS_SCU_CCUCON1 & 0x30000000)
; ..\appl\Source\BrsHw.c	   725                    |  (candivider  << 0)   /*fcan = fpll/candivider*/
; ..\appl\Source\BrsHw.c	   726                    |  (eraydivider << 4)   /*fERAY = fplleray/eraydivider*/
; ..\appl\Source\BrsHw.c	   727                    |  (stmdivider  << 8)   /*fstm = fpll/stmdivider*/ /*fstm = system timer clock*/
; ..\appl\Source\BrsHw.c	   728                    |  (gtmdivider  << 12)  /*fgtm = fpll/gtmdivider*/
; ..\appl\Source\BrsHw.c	   729                    |  (ethdivider  << 16)  /*feth*/
; ..\appl\Source\BrsHw.c	   730                    |  (linfdivider << 20)  /*fasclinf = fpll/linfdivider*/
; ..\appl\Source\BrsHw.c	   731                    |  (linsdivider << 24); /*fasclins = fpll/linsdivider*/
; ..\appl\Source\BrsHw.c	   732  
; ..\appl\Source\BrsHw.c	   733    /*Write CCUCON0 with all values*/
; ..\appl\Source\BrsHw.c	   734    while((BRS_SCU_CCUCON0 & 0x80000000) == 0x80000000); /* wait until the lock of CCUCON0 is not set */
; ..\appl\Source\BrsHw.c	   735    BRS_SCU_CCUCON0 = (BRS_SCU_CCUCON0 & 0x0FFFFFFF)
; ..\appl\Source\BrsHw.c	   736                    | (0x1 << 28); /* Choose fpll as clock source, fpll=fsource */
; ..\appl\Source\BrsHw.c	   737  
; ..\appl\Source\BrsHw.c	   738    while((BRS_SCU_CCUCON0 & 0x80000000) == 0x80000000); /* wait until the lock of CCUCON0 is not set */
; ..\appl\Source\BrsHw.c	   739    BRS_SCU_CCUCON0 = (BRS_SCU_CCUCON0 & 0x30000000)
; ..\appl\Source\BrsHw.c	   740                    | (baud1divider << 0)   /*fbaud1 = fpll/baud1divider*/ /*Not available for TC22X and TC23X*/
; ..\appl\Source\BrsHw.c	   741                    | (baud2divider << 4)   /*fbaud2 = fpll/baud2divider*/
; ..\appl\Source\BrsHw.c	   742                    | (sridivider   << 8)   /*fsri = fpll/sridivider*/
; ..\appl\Source\BrsHw.c	   743                    | (spbdivider   << 16)  /*fspb = fpll/spbdivider*/ /*fspb = general purpose timer clock*/
; ..\appl\Source\BrsHw.c	   744                    | (0x2          << 20)  /*ffsi2= fsri/2*/
; ..\appl\Source\BrsHw.c	   745                    | (0x2          << 24)  /*ffsi =fsri/2*/
; ..\appl\Source\BrsHw.c	   746                    | (0x1          << 30); /*update CCUCON0, CCUCON1*/
; ..\appl\Source\BrsHw.c	   747  
; ..\appl\Source\BrsHw.c	   748    while((BRS_SCU_CCUCON5 & 0x80000000) == 0x80000000); /* wait until the lock of CCUCON5 is not set */
; ..\appl\Source\BrsHw.c	   749    BRS_SCU_CCUCON5 = (0x40000040); /* fmax = fsource and update CCUCON5 */
; ..\appl\Source\BrsHw.c	   750  
; ..\appl\Source\BrsHw.c	   751    BRS_SCU_CCUCON6 = cpu0div; /*fcpu0 = fsri*/
; ..\appl\Source\BrsHw.c	   752    BRS_SCU_CCUCON7 = cpu1div; /*fcpu1 = fsri*/
; ..\appl\Source\BrsHw.c	   753    BRS_SCU_CCUCON8 = cpu2div; /*fcpu2 = fsri*/
; ..\appl\Source\BrsHw.c	   754  
; ..\appl\Source\BrsHw.c	   755  # if (BRS_OSC_CLK == 40)
; ..\appl\Source\BrsHw.c	   756    BRS_SCU_OSCCON = 0x00000000   /*clear reg.*/
; ..\appl\Source\BrsHw.c	   757                   | (0x2 << 3)   /*gain control from 4MHZ to 20MHZ*/
; ..\appl\Source\BrsHw.c	   758                   | (0xF << 16); /*crystalfreq(40MHZ) / 15+1 = 2,5MHZ ---> OSCVAL = 40MHZ/2.5MHZ*/
; ..\appl\Source\BrsHw.c	   759  
; ..\appl\Source\BrsHw.c	   760  # elif (BRS_OSC_CLK == 20)
; ..\appl\Source\BrsHw.c	   761    BRS_SCU_OSCCON = 0x00000000   /*clear reg.*/
; ..\appl\Source\BrsHw.c	   762                   | (0x2 << 3)   /*gain control from 4MHZ to 20MHZ*/
; ..\appl\Source\BrsHw.c	   763                   | (0x7 << 16); /*crystalfreq(20MHZ) / 7+1 = 2,5MHZ ---> OSCVAL = 20MHZ/2.5MHZ*/
; ..\appl\Source\BrsHw.c	   764  
; ..\appl\Source\BrsHw.c	   765  # elif (BRS_OSC_CLK == 16)
; ..\appl\Source\BrsHw.c	   766    BRS_SCU_OSCCON = 0x00000000   /*clear reg.*/
; ..\appl\Source\BrsHw.c	   767                   | (0x2 << 3)   /*gain control from 4MHZ to 20MHZ*/
; ..\appl\Source\BrsHw.c	   768                   | (0x5 << 16); /*crystalfreq(16MHZ) / 5+1 = 2,67MHZ ---> OSCVAL = 16MHZ/2.5MHZ*/
; ..\appl\Source\BrsHw.c	   769  # endif /*BRS_OSC_CLK*/
; ..\appl\Source\BrsHw.c	   770  
; ..\appl\Source\BrsHw.c	   771    /* Set n and p dividers for pll */
; ..\appl\Source\BrsHw.c	   772    BRS_SCU_PLLCON0 = (BRS_SCU_PLLCON0 & 0xF0FF01FF)
; ..\appl\Source\BrsHw.c	   773                    | (N_DIVIDER << 9)    /* Set N-Divider */
; ..\appl\Source\BrsHw.c	   774                    | (P_DIVIDER  << 24); /* Set P-Divider */
; ..\appl\Source\BrsHw.c	   775  
; ..\appl\Source\BrsHw.c	   776    /* Set k2 divider for pll */
; ..\appl\Source\BrsHw.c	   777    BRS_SCU_PLLCON1  = (BRS_SCU_PLLCON1 & 0xFFFFFFC0)
; ..\appl\Source\BrsHw.c	   778                     | K2_DIVIDER; /* K2-Divider */
; ..\appl\Source\BrsHw.c	   779  
; ..\appl\Source\BrsHw.c	   780    while((BRS_SCU_PLLSTAT & 0x00000020) != 0x00000020); /* K2RDY == 1 ? */
; ..\appl\Source\BrsHw.c	   781  
; ..\appl\Source\BrsHw.c	   782    BRS_SCU_PLLCON0 |= 0x00000040; /* In case of a PLL loss-of-lock bit PLLSTAT.FINDIS is cleared */
; ..\appl\Source\BrsHw.c	   783  
; ..\appl\Source\BrsHw.c	   784    while((BRS_SCU_OSCCON & 0x00000102) != 0x00000102); /* check if the OSC frequency is usable */
; ..\appl\Source\BrsHw.c	   785  
; ..\appl\Source\BrsHw.c	   786    /* Second: Select normal mode for pll and for pllERAY */
; ..\appl\Source\BrsHw.c	   787    BRS_SCU_PLLCON0 |= 0x00000020; /* CLRFINDIS=1 ---> oscillator clock is connected to pll */
; ..\appl\Source\BrsHw.c	   788    BRS_SCU_PLLCON0 |= 0x00040000; /* RESLD = 1   ---> restart lock detection */
; ..\appl\Source\BrsHw.c	   789    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   790  
; ..\appl\Source\BrsHw.c	   791    /* wait for lock */
; ..\appl\Source\BrsHw.c	   792    while((BRS_SCU_PLLSTAT & 0x00000004) != 0x00000004); /* VCOLOCK == 1 ?*/
; ..\appl\Source\BrsHw.c	   793  
; ..\appl\Source\BrsHw.c	   794    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   795    BRS_SCU_PLLCON0 &= 0xFFFFFFFE; /* VCOBYP=0 ---> select normal mode */
; ..\appl\Source\BrsHw.c	   796  
; ..\appl\Source\BrsHw.c	   797  # if defined (BRS_ENABLE_FLEXRAY_SUPPORT)
; ..\appl\Source\BrsHw.c	   798    /*Configuration of PLLERAY starts here*/
; ..\appl\Source\BrsHw.c	   799    BrsHwErayPllInitPowerOn();
; ..\appl\Source\BrsHw.c	   800  # endif
; ..\appl\Source\BrsHw.c	   801  
; ..\appl\Source\BrsHw.c	   802    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   803  
; ..\appl\Source\BrsHw.c	   804    /* clear only pending traps related to PLLs and Clocksystem */
; ..\appl\Source\BrsHw.c	   805    BRS_SCU_TRAPCLR = 0x3E0;
; ..\appl\Source\BrsHw.c	   806    BrsHwUnlockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	   807  
; ..\appl\Source\BrsHw.c	   808    /*enable all Traps again*/
; ..\appl\Source\BrsHw.c	   809    BRS_SCU_TRAPDIS = BRS_SCU_TRAPDIS & ~0x3E0;
; ..\appl\Source\BrsHw.c	   810    BrsHwLockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	   811  #endif /*BRS_PLL_GROUP_A*/
; ..\appl\Source\BrsHw.c	   812  
; ..\appl\Source\BrsHw.c	   813  #if defined (BRS_PLL_GROUP_B) || defined (BRS_PLL_GROUP_C)
; ..\appl\Source\BrsHw.c	   814    uint32 ulIdx;
; ..\appl\Source\BrsHw.c	   815  
; ..\appl\Source\BrsHw.c	   816  # if (BRS_OSC_CLK==20) || (BRS_OSC_CLK==25) || (BRS_OSC_CLK==40)
; ..\appl\Source\BrsHw.c	   817  # else
; ..\appl\Source\BrsHw.c	   818    #error "Actual BRS implementation supports oscillator frequency of 20,25MHz and 40MHz"
; ..\appl\Source\BrsHw.c	   819  # endif /*BRS_OSC_CLK*/
; ..\appl\Source\BrsHw.c	   820  
; ..\appl\Source\BrsHw.c	   821    /* actual peripheral frequencies for OSC = 20MHz or [25MHz]
; ..\appl\Source\BrsHw.c	   822    System PLL DCO: 600 MHz  [600 MHz]
; ..\appl\Source\BrsHw.c	   823    fPLL0:          300 MHz  [300 MHz]
; ..\appl\Source\BrsHw.c	   824    fPLL1:          320 MHz  [160 MHz]
; ..\appl\Source\BrsHw.c	   825    fPLL2:          200 MHz  [200 MHz]
; ..\appl\Source\BrsHw.c	   826    FSI_clock:      100 MHz  [100 MHz]
; ..\appl\Source\BrsHw.c	   827    FSI2_clock:     300 MHz  [300 MHz]
; ..\appl\Source\BrsHw.c	   828    GTM_clock:      200 MHz  [200 MHz]
; ..\appl\Source\BrsHw.c	   829    STM_clock:      100 MHz  [100 MHz]
; ..\appl\Source\BrsHw.c	   830    SRI_clock:      300 MHz  [300 MHz]
; ..\appl\Source\BrsHw.c	   831    SPB_clock:      100 MHz  [100 MHz](System Peripheral Bus)
; ..\appl\Source\BrsHw.c	   832    GPT12_clock:    100 MHz  [100 MHz]
; ..\appl\Source\BrsHw.c	   833    BBB_clock:      150 MHz  [150 MHz]
; ..\appl\Source\BrsHw.c	   834    REFCLK1:       12.5 MHz [12.5 MHz]
; ..\appl\Source\BrsHw.c	   835    HSCT_clock:     320 MHz [not USED]
; ..\appl\Source\BrsHw.c	   836    EBU_clock:      160 MHz  [160 MHz]
; ..\appl\Source\BrsHw.c	   837    QSPI_clock:     200 MHz  [200 MHz]
; ..\appl\Source\BrsHw.c	   838    ADC_clock:      160 MHz  [160 MHz]
; ..\appl\Source\BrsHw.c	   839    I2C_clock:     66.6 MHz [66.6 MHz]
; ..\appl\Source\BrsHw.c	   840    MCAN_clock:      80 MHz   [80 MHz]
; ..\appl\Source\BrsHw.c	   841    ERAY_clock:      80 MHz   [80 MHz]
; ..\appl\Source\BrsHw.c	   842    ASCLINF_clock:  200 MHz  [200 MHz]
; ..\appl\Source\BrsHw.c	   843    ASCLINS_clock:   80 MHz   [80 MHz]
; ..\appl\Source\BrsHw.c	   844    MSC_clock:      200 MHz  [200 MHz]  
; ..\appl\Source\BrsHw.c	   845    */
; ..\appl\Source\BrsHw.c	   846  
; ..\appl\Source\BrsHw.c	   847    /*Configuration of PLL starts here*/
; ..\appl\Source\BrsHw.c	   848    BrsHwUnlockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	   849    BRS_GPT120_CLC = 0x0;
; ..\appl\Source\BrsHw.c	   850    BRS_SCU_TRAPDIS0 |= 0x0F0F0F0F; /* Traps can not be generated for PLLs and Clocksystem */
; ..\appl\Source\BrsHw.c	   851    BRS_SCU_TRAPDIS1 |= 0x0F0F;
; ..\appl\Source\BrsHw.c	   852    BrsHwLockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	   853  
; ..\appl\Source\BrsHw.c	   854    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   855    /* *** Step 1: setup osc control *** */
; ..\appl\Source\BrsHw.c	   856  
; ..\appl\Source\BrsHw.c	   857  # if (BRS_OSC_CLK==20)
; ..\appl\Source\BrsHw.c	   858    #define OSCVAL 3  /*fOSCREF = 20 MHz = OSCCON.OSCVAL + 1 + 16 MHz -> OSCVAL = 3 */
; ..\appl\Source\BrsHw.c	   859  # elif (BRS_OSC_CLK==25)
; ..\appl\Source\BrsHw.c	   860    #define OSCVAL 8  /*fOSCREF = 25 MHz = OSCCON.OSCVAL + 1 + 16 MHz -> OSCVAL = 8 */
; ..\appl\Source\BrsHw.c	   861  # elif (BRS_OSC_CLK==40)
; ..\appl\Source\BrsHw.c	   862    #define OSCVAL 23 /*fOSCREF = 40 MHz = OSCCON.OSCVAL + 1 + 16 MHz -> OSCVAL = 23 */
; ..\appl\Source\BrsHw.c	   863  # endif
; ..\appl\Source\BrsHw.c	   864  
; ..\appl\Source\BrsHw.c	   865    BRS_SCU_OSCCON = 0x00000000      /* mode = 0 -> External Crystal Mode. The oscillator Power-Saving Mode is not entered. */
; ..\appl\Source\BrsHw.c	   866                   | (0x3 << 3)      /* gain control */
; ..\appl\Source\BrsHw.c	   867                   | (OSCVAL << 16); /* fOSCREF = OSCCON.OSCVAL + 1 + 16 MHz */
; ..\appl\Source\BrsHw.c	   868  
; ..\appl\Source\BrsHw.c	   869    BRS_SCU_OSCCON |= (0x1 << 2);    /* OSCRES -> reset OSC watchdog with new settings */
; ..\appl\Source\BrsHw.c	   870    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   871  
; ..\appl\Source\BrsHw.c	   872    while((BRS_SCU_OSCCON & 0x00000102) != 0x00000102); /* wait until PLLLV and PLLHV are set */
; ..\appl\Source\BrsHw.c	   873  
; ..\appl\Source\BrsHw.c	   874    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   875  
; ..\appl\Source\BrsHw.c	   876    /* *** Step 2: Initialize the PLLs to target fDCO and fPLLx frequency *** */
; ..\appl\Source\BrsHw.c	   877    /* set SYSPLLCON0.INSEL = 0x01 -> fOSC is used as clock source */
; ..\appl\Source\BrsHw.c	   878    BRS_SCU_SYSPLLCON0 &= ~(0x3 << 30);
; ..\appl\Source\BrsHw.c	   879    BRS_SCU_SYSPLLCON0 |= (0x1 << 30);
; ..\appl\Source\BrsHw.c	   880  
; ..\appl\Source\BrsHw.c	   881  # if (BRS_OSC_CLK==20)
; ..\appl\Source\BrsHw.c	   882    #define PllNdiv 0x1D   /* NDIV = 0x1D = 29 */
; ..\appl\Source\BrsHw.c	   883  # elif (BRS_OSC_CLK==25)
; ..\appl\Source\BrsHw.c	   884    #define PllNdiv 0x17   /* NDIV = 0x17 = 23 */
; ..\appl\Source\BrsHw.c	   885  # elif (BRS_OSC_CLK==40)
; ..\appl\Source\BrsHw.c	   886    #define PllNdiv 0xE   /* NDIV = 0xE = 14 */
; ..\appl\Source\BrsHw.c	   887  # endif
; ..\appl\Source\BrsHw.c	   888  
; ..\appl\Source\BrsHw.c	   889    /* fDCO = ((NDIV+1)* fOSC) */
; ..\appl\Source\BrsHw.c	   890    /* fPll= fDCO /((PDIV+1)*(K2DIV+1)) */
; ..\appl\Source\BrsHw.c	   891  
; ..\appl\Source\BrsHw.c	   892    /* SysPll fDCO = 600MHz, fPLL0 = 100MHz */
; ..\appl\Source\BrsHw.c	   893    BRS_SCU_SYSPLLCON0 = 0x00000000  /* PDIV = 0, PLLPWD = 0, MODEN = 0 */
; ..\appl\Source\BrsHw.c	   894                       | (0x1 << 30) /* fOSC used as clock source*/
; ..\appl\Source\BrsHw.c	   895                       | (0x1 << 16) /* System PLL power saving mode set to normal behavior */
; ..\appl\Source\BrsHw.c	   896                       | (PllNdiv << 9); /*Ndiv depening on fOSC*/
; ..\appl\Source\BrsHw.c	   897                       
; ..\appl\Source\BrsHw.c	   898    /* K2DIV = 5 -> K2 divider = 6 */
; ..\appl\Source\BrsHw.c	   899    BRS_SCU_SYSPLLCON1 = 0x00000005;
; ..\appl\Source\BrsHw.c	   900  
; ..\appl\Source\BrsHw.c	   901  # if (BRS_OSC_CLK==20)
; ..\appl\Source\BrsHw.c	   902    #define PerPllNdiv 0x1F /* NDIV = 0x1F = 31 */
; ..\appl\Source\BrsHw.c	   903    #define DIVBY 0         /* DIVBY = 0  */
; ..\appl\Source\BrsHw.c	   904  # elif (BRS_OSC_CLK==25)
; ..\appl\Source\BrsHw.c	   905    #define PerPllNdiv 0x1F /* NDIV = 0x1F = 31 */
; ..\appl\Source\BrsHw.c	   906    #define DIVBY 1         /* DIVBY = 1  */
; ..\appl\Source\BrsHw.c	   907  # elif (BRS_OSC_CLK==40)
; ..\appl\Source\BrsHw.c	   908    #define PerPllNdiv 0xF /* NDIV = 0xF = 16 */
; ..\appl\Source\BrsHw.c	   909    #define DIVBY 1        /* DIVBY = 1  */
; ..\appl\Source\BrsHw.c	   910  # endif
; ..\appl\Source\BrsHw.c	   911  
; ..\appl\Source\BrsHw.c	   912    /* PerPll fDCO = 640MHz; fPLL1 = 320MHz; f PLL2 = 200MHz */
; ..\appl\Source\BrsHw.c	   913    /* NDIV = 0x1F = 31, PDIV = 0, PLLPWD = 0, MODEN = 0, DIVBY = 0 */
; ..\appl\Source\BrsHw.c	   914    BRS_SCU_PERPLLCON0 =  0x00000000 /* PDIV = 0, PLLPWD = 0, MODEN = 0 */
; ..\appl\Source\BrsHw.c	   915                       | (0x1 << 16) /* System PLL power saving mode set to normal behavior */
; ..\appl\Source\BrsHw.c	   916                       | (PerPllNdiv << 9)
; ..\appl\Source\BrsHw.c	   917                       | (DIVBY << 0); /* DIVBY depends on fOSC*/
; ..\appl\Source\BrsHw.c	   918  
; ..\appl\Source\BrsHw.c	   919    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   920  
; ..\appl\Source\BrsHw.c	   921    for (ulIdx=0; ulIdx < 1000000; ulIdx++) nop(); /* yes this needs so much time!!! */
; ..\appl\Source\BrsHw.c	   922  
; ..\appl\Source\BrsHw.c	   923    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   924  
; ..\appl\Source\BrsHw.c	   925  # if (BRS_OSC_CLK==20)
; ..\appl\Source\BrsHw.c	   926    #define K3div 0x1     /* K3DIV = 1 -> K3 divider = 2 */
; ..\appl\Source\BrsHw.c	   927    #define K2div 0x1     /* K2DIV = 1 --> K2 divider 2 */
; ..\appl\Source\BrsHw.c	   928  # elif (BRS_OSC_CLK==25)
; ..\appl\Source\BrsHw.c	   929    #define K3div 0x1     /* K3DIV = 1 -> K3 divider = 2 */
; ..\appl\Source\BrsHw.c	   930    #define K2div 0x4     /* K2DIV = 4 --> K2 divider 5 */
; ..\appl\Source\BrsHw.c	   931  # elif (BRS_OSC_CLK==40)
; ..\appl\Source\BrsHw.c	   932    #define K3div 0x1     /* K3DIV = 1 -> K3 divider = 2 */
; ..\appl\Source\BrsHw.c	   933    #define K2div 0x1     /* K2DIV = 1 --> K2 divider 2 */
; ..\appl\Source\BrsHw.c	   934  # endif
; ..\appl\Source\BrsHw.c	   935  
; ..\appl\Source\BrsHw.c	   936    BRS_SCU_PERPLLCON1 = 0x00000000
; ..\appl\Source\BrsHw.c	   937                       | (K3div << 8)  /* K3DIV */
; ..\appl\Source\BrsHw.c	   938                       | (K2div << 0); /* K2DIV */
; ..\appl\Source\BrsHw.c	   939  
; ..\appl\Source\BrsHw.c	   940    /* *** Step 3: Wait for PLL lock to be set *** */
; ..\appl\Source\BrsHw.c	   941    /* Restart DCO lock detection */
; ..\appl\Source\BrsHw.c	   942    BRS_SCU_SYSPLLCON0 |= 0x00040000;
; ..\appl\Source\BrsHw.c	   943  
; ..\appl\Source\BrsHw.c	   944    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   945  
; ..\appl\Source\BrsHw.c	   946    /* Wait for PLL lock */
; ..\appl\Source\BrsHw.c	   947    while((BRS_SCU_SYSPLLSTAT & 0x4) == 0);
; ..\appl\Source\BrsHw.c	   948  
; ..\appl\Source\BrsHw.c	   949    /* *** Step 4: Configure CCUCON0, and CCUCON1 to first target setting *** */
; ..\appl\Source\BrsHw.c	   950    while((BRS_SCU_CCUCON0 & 0x80000000) != 0); /* Wait for CCUCON0 unlocked */
; ..\appl\Source\BrsHw.c	   951  
; ..\appl\Source\BrsHw.c	   952    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   953    BRS_SCU_CCUCON0 = 0x47230113;
; ..\appl\Source\BrsHw.c	   954    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   955  
; ..\appl\Source\BrsHw.c	   956    while((BRS_SCU_CCUCON0 & 0x80000000) != 0); /* Wait until change is executed */
; ..\appl\Source\BrsHw.c	   957    while((BRS_SCU_CCUCON1 & 0x80000000) != 0); /* Wait for CCUCON1 unlocked */
; ..\appl\Source\BrsHw.c	   958  
; ..\appl\Source\BrsHw.c	   959    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   960  
; ..\appl\Source\BrsHw.c	   961  # if (BRS_OSC_CLK==20)
; ..\appl\Source\BrsHw.c	   962    BRS_SCU_CCUCON1 = 0x21210012;
; ..\appl\Source\BrsHw.c	   963  # elif (BRS_OSC_CLK==25)
; ..\appl\Source\BrsHw.c	   964    BRS_SCU_CCUCON1 = 0x21210092;
; ..\appl\Source\BrsHw.c	   965  # elif (BRS_OSC_CLK==40)
; ..\appl\Source\BrsHw.c	   966    BRS_SCU_CCUCON1 = 0x21210012; /*divider disabled for fpll1 fpll1= fsource1, fMCAN=fsource1/2*/
; ..\appl\Source\BrsHw.c	   967  # endif
; ..\appl\Source\BrsHw.c	   968  
; ..\appl\Source\BrsHw.c	   969    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   970  
; ..\appl\Source\BrsHw.c	   971    while((BRS_SCU_CCUCON1 & 0x80000000) != 0); /* Wait until change is executed */
; ..\appl\Source\BrsHw.c	   972    while((BRS_SCU_CCUCON2 & 0x80000000) != 0); /* Wait for CCUCON2 unlocked */
; ..\appl\Source\BrsHw.c	   973  
; ..\appl\Source\BrsHw.c	   974    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   975    BRS_SCU_CCUCON2 = 0x02001201; /*additional set ERAYPERON*/
; ..\appl\Source\BrsHw.c	   976    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   977  
; ..\appl\Source\BrsHw.c	   978    while((BRS_SCU_CCUCON2 & 0x80000000) != 0); /* Wait until change is executed */
; ..\appl\Source\BrsHw.c	   979  
; ..\appl\Source\BrsHw.c	   980    /* *** Step 5: Switch CCU input clock fSOURCE0 to PLL via CCUCON0.CLKSEL *** */
; ..\appl\Source\BrsHw.c	   981    while((BRS_SCU_CCUCON0 & 0x80000000) != 0); /* Wait for CCUCON0 unlocked */
; ..\appl\Source\BrsHw.c	   982  
; ..\appl\Source\BrsHw.c	   983    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   984    BRS_SCU_CCUCON0 = 0x57230113;
; ..\appl\Source\BrsHw.c	   985    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   986  
; ..\appl\Source\BrsHw.c	   987    while((BRS_SCU_CCUCON0 & 0x80000000) != 0); /* Wait until change is executed */
; ..\appl\Source\BrsHw.c	   988  
; ..\appl\Source\BrsHw.c	   989    /* *** Step 6: fPLL has to be increased step by step to target frequency *** */
; ..\appl\Source\BrsHw.c	   990    /* K2DIV = 3 -> K2 divider = 4 */
; ..\appl\Source\BrsHw.c	   991    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   992    BRS_SCU_SYSPLLCON1 = 0x00000003;
; ..\appl\Source\BrsHw.c	   993    while((BRS_SCU_SYSPLLSTAT & 0x4) == 0); /* Wait for System PLL to be stable */
; ..\appl\Source\BrsHw.c	   994    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   995  
; ..\appl\Source\BrsHw.c	   996    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	   997    BRS_SCU_SYSPLLCON1 = 0x00000002;
; ..\appl\Source\BrsHw.c	   998    while((BRS_SCU_SYSPLLSTAT & 0x4) == 0); /* Wait for System PLL to be stable */
; ..\appl\Source\BrsHw.c	   999    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1000  
; ..\appl\Source\BrsHw.c	  1001    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1002    BRS_SCU_SYSPLLCON1 = 0x00000001;
; ..\appl\Source\BrsHw.c	  1003    while((BRS_SCU_SYSPLLSTAT & 0x4) == 0); /* Wait for System PLL to be stable */
; ..\appl\Source\BrsHw.c	  1004    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1005  
; ..\appl\Source\BrsHw.c	  1006  # if !defined (BRS_PLL_GROUP_C)
; ..\appl\Source\BrsHw.c	  1007    while((BRS_SCU_CCUCON5 & 0x80000000) != 0); /* Wait for CCUCON5 unlocked - additionally added (GETH)*/
; ..\appl\Source\BrsHw.c	  1008  
; ..\appl\Source\BrsHw.c	  1009    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1010  
; ..\appl\Source\BrsHw.c	  1011    BRS_SCU_CCUCON5 = (BRS_SCU_CCUCON5 | 0x01);
; ..\appl\Source\BrsHw.c	  1012    BRS_SCU_CCUCON5 = (BRS_SCU_CCUCON5 | 0x01 << 30u);
; ..\appl\Source\BrsHw.c	  1013    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1014  # endif /*!BRS_PLL_GROUP_C*/
; ..\appl\Source\BrsHw.c	  1015  
; ..\appl\Source\BrsHw.c	  1016    BrsHwUnlockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	  1017    /* clear only pending traps related to PLLs and Clocksystem */
; ..\appl\Source\BrsHw.c	  1018    BRS_SCU_TRAPCLR = 0xF;
; ..\appl\Source\BrsHw.c	  1019  
; ..\appl\Source\BrsHw.c	  1020    /* enable all Traps again - except for ESR1T for all cores*/
; ..\appl\Source\BrsHw.c	  1021    /* The ESR1 Pin on 2nd Gen TC3xx Triboards is pulled to high level via pull-up resistor which triggers an non-maskable Interrupt*/
; ..\appl\Source\BrsHw.c	  1022    BRS_SCU_TRAPDIS0 = 0xF2F2F2F2;
; ..\appl\Source\BrsHw.c	  1023    BRS_SCU_TRAPDIS1 = 0xF2F2;
; ..\appl\Source\BrsHw.c	  1024  
; ..\appl\Source\BrsHw.c	  1025    BrsHwLockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	  1026  #endif /*BRS_PLL_GROUP_B||BRS_PLL_GROUP_C*/
; ..\appl\Source\BrsHw.c	  1027  }
; ..\appl\Source\BrsHw.c	  1028  
; ..\appl\Source\BrsHw.c	  1029  # if defined (BRS_PLL_GROUP_A)
; ..\appl\Source\BrsHw.c	  1030  #  if defined (BRS_ENABLE_FLEXRAY_SUPPORT)
; ..\appl\Source\BrsHw.c	  1031  /* function to initialize ERAY PLL */
; ..\appl\Source\BrsHw.c	  1032  Std_ReturnType BrsHwErayPllInitPowerOn(void)
; ..\appl\Source\BrsHw.c	  1033  {
; ..\appl\Source\BrsHw.c	  1034    Std_ReturnType ErrorFlag;
; ..\appl\Source\BrsHw.c	  1035    volatile uint32 PllStableDelay;
; ..\appl\Source\BrsHw.c	  1036    uint8 PllNdiv;
; ..\appl\Source\BrsHw.c	  1037    uint8 PllK2div;
; ..\appl\Source\BrsHw.c	  1038    uint8 PllK3div;
; ..\appl\Source\BrsHw.c	  1039    uint8 PllPdiv;
; ..\appl\Source\BrsHw.c	  1040  
; ..\appl\Source\BrsHw.c	  1041    /*Store PLL Divider values in local variables*/
; ..\appl\Source\BrsHw.c	  1042  # if (BRS_OSC_CLK == 40)
; ..\appl\Source\BrsHw.c	  1043    PllNdiv = 0x7; /* 8 - 1*/
; ..\appl\Source\BrsHw.c	  1044    PllK2div = 0x3; /* 4 - 1*/
; ..\appl\Source\BrsHw.c	  1045    PllK3div = 0x3; /* 4 - 1*/
; ..\appl\Source\BrsHw.c	  1046    PllPdiv =  0x0; /* 1 - 1*/
; ..\appl\Source\BrsHw.c	  1047  
; ..\appl\Source\BrsHw.c	  1048  # elif (BRS_OSC_CLK == 20)
; ..\appl\Source\BrsHw.c	  1049    PllNdiv = 0xF; /* 16 - 1*/
; ..\appl\Source\BrsHw.c	  1050    PllK2div = 0x3; /* 4 - 1*/
; ..\appl\Source\BrsHw.c	  1051    PllK3div = 0x3; /* 4 - 1*/
; ..\appl\Source\BrsHw.c	  1052    PllPdiv =  0x0; /* 1 - 1*/
; ..\appl\Source\BrsHw.c	  1053  
; ..\appl\Source\BrsHw.c	  1054  # elif (BRS_OSC_CLK == 16)
; ..\appl\Source\BrsHw.c	  1055    PllNdiv = 0x13; /* 20 - 1*/
; ..\appl\Source\BrsHw.c	  1056    PllK2div = 0x3; /* 4 - 1*/
; ..\appl\Source\BrsHw.c	  1057    PllK3div = 0x3; /* 4 - 1*/
; ..\appl\Source\BrsHw.c	  1058    PllPdiv =  0x0; /* 1 - 1*/
; ..\appl\Source\BrsHw.c	  1059  # endif /*BRS_OSC_CLK*/
; ..\appl\Source\BrsHw.c	  1060  
; ..\appl\Source\BrsHw.c	  1061    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1062  
; ..\appl\Source\BrsHw.c	  1063    /* Enter Prescalar mode */
; ..\appl\Source\BrsHw.c	  1064    /* Update K and N dividers */
; ..\appl\Source\BrsHw.c	  1065    BRS_SCU_PLLERAYCON1 = (BRS_SCU_PLLERAYCON1 & 0xFF80FFFF); /* Clear K1DIV. K1DIV = 1 */
; ..\appl\Source\BrsHw.c	  1066  
; ..\appl\Source\BrsHw.c	  1067    BRS_SCU_PLLERAYCON0 = (BRS_SCU_PLLERAYCON0 & 0xFFFFFFEE)
; ..\appl\Source\BrsHw.c	  1068                        | (0x1 << 0)    /* VCOBYP = 1 */
; ..\appl\Source\BrsHw.c	  1069                        | (0x1 << 4);   /* SETFINDIS = 1 */
; ..\appl\Source\BrsHw.c	  1070  
; ..\appl\Source\BrsHw.c	  1071    BRS_SCU_PLLERAYCON1 = (BRS_SCU_PLLERAYCON1 & 0xFFFFF080)
; ..\appl\Source\BrsHw.c	  1072                        | (PllK2div << 0)   /* K2DIV */
; ..\appl\Source\BrsHw.c	  1073                        | (PllK3div << 8);  /* K3DIV */
; ..\appl\Source\BrsHw.c	  1074  
; ..\appl\Source\BrsHw.c	  1075    BRS_SCU_PLLERAYCON0 = (BRS_SCU_PLLERAYCON0 & 0xF0FFC1FF)
; ..\appl\Source\BrsHw.c	  1076                        | (PllNdiv << 9)     /* NDIV */
; ..\appl\Source\BrsHw.c	  1077                        | (PllPdiv << 24);   /* PDIV */
; ..\appl\Source\BrsHw.c	  1078  
; ..\appl\Source\BrsHw.c	  1079    /* Enter normal mode */
; ..\appl\Source\BrsHw.c	  1080    BRS_SCU_PLLERAYCON0 = (BRS_SCU_PLLERAYCON0 & 0xFFFEFF9F)
; ..\appl\Source\BrsHw.c	  1081                        | (0x1 << 5)     /* CLRFINDIS=1 */
; ..\appl\Source\BrsHw.c	  1082                        | (0x1 << 6)     /* OSCDISCDIS=1 */
; ..\appl\Source\BrsHw.c	  1083                        | (0x0 << 16);   /* PLLPWD=0 */
; ..\appl\Source\BrsHw.c	  1084  
; ..\appl\Source\BrsHw.c	  1085    /*
; ..\appl\Source\BrsHw.c	  1086      RESLD = 1     ==> Restart VCO lock detection
; ..\appl\Source\BrsHw.c	  1087      CLRFINDIS = 1 ==> Connect OSC to PLL
; ..\appl\Source\BrsHw.c	  1088      PLLPWD = 1    ==> PLL Power Saving Mode : Normal behaviour
; ..\appl\Source\BrsHw.c	  1089      NDIV = FR_17_ERAY_PLL_NDIV (Pre-compile parameter)
; ..\appl\Source\BrsHw.c	  1090    */
; ..\appl\Source\BrsHw.c	  1091  
; ..\appl\Source\BrsHw.c	  1092    BRS_SCU_PLLERAYCON0 = (BRS_SCU_PLLERAYCON0 & 0xFFFEFFFF)
; ..\appl\Source\BrsHw.c	  1093                        | (0x1 << 16);   /*PLLPWD = 1*/
; ..\appl\Source\BrsHw.c	  1094  
; ..\appl\Source\BrsHw.c	  1095    for(PllStableDelay=0U;PllStableDelay < 100 ;PllStableDelay++)
; ..\appl\Source\BrsHw.c	  1096    {}/*Errata*/
; ..\appl\Source\BrsHw.c	  1097  
; ..\appl\Source\BrsHw.c	  1098    BRS_SCU_PLLERAYCON0 = (BRS_SCU_PLLERAYCON0 & 0xFFFBFFFF)
; ..\appl\Source\BrsHw.c	  1099                | (0x1 << 18);   /* RESLD = 1 */
; ..\appl\Source\BrsHw.c	  1100  
; ..\appl\Source\BrsHw.c	  1101    /* Set the ENDINIT bit in the WDT_CON0 register again
; ..\appl\Source\BrsHw.c	  1102    to enable the write-protection and to prevent a time-out */
; ..\appl\Source\BrsHw.c	  1103    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1104  
; ..\appl\Source\BrsHw.c	  1105    /* Wait for ERAY PLL VCO locking */
; ..\appl\Source\BrsHw.c	  1106    ErrorFlag = BrsHwErayPllWaitVcoLock();
; ..\appl\Source\BrsHw.c	  1107  
; ..\appl\Source\BrsHw.c	  1108    /*By Pass VCO only if PLL is locked*/
; ..\appl\Source\BrsHw.c	  1109    if(ErrorFlag == E_OK)
; ..\appl\Source\BrsHw.c	  1110    {
; ..\appl\Source\BrsHw.c	  1111      /* Clear the ENDINIT bit in the WDT_CON0 register in order
; ..\appl\Source\BrsHw.c	  1112      to disable the write-protection for registers protected
; ..\appl\Source\BrsHw.c	  1113      via the EndInit feature */
; ..\appl\Source\BrsHw.c	  1114      BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1115  
; ..\appl\Source\BrsHw.c	  1116      /*Bypass VCO*/
; ..\appl\Source\BrsHw.c	  1117      /* Distribute the clock */
; ..\appl\Source\BrsHw.c	  1118      BRS_SCU_PLLERAYCON0 = (BRS_SCU_PLLERAYCON0 & 0xFFFFFFBE)
; ..\appl\Source\BrsHw.c	  1119                          | (0x0 << 0)     /*VCOBYP = 0*/
; ..\appl\Source\BrsHw.c	  1120                          | (0x0 << 6);    /*OSCDISCDIS = 0*/
; ..\appl\Source\BrsHw.c	  1121  
; ..\appl\Source\BrsHw.c	  1122      /* Set the ENDINIT bit in the WDT_CON0 register again
; ..\appl\Source\BrsHw.c	  1123      to enable the write-protection and to prevent a time-out */
; ..\appl\Source\BrsHw.c	  1124      BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1125    }
; ..\appl\Source\BrsHw.c	  1126    return(ErrorFlag);
; ..\appl\Source\BrsHw.c	  1127  }
; ..\appl\Source\BrsHw.c	  1128  
; ..\appl\Source\BrsHw.c	  1129  Std_ReturnType BrsHwErayPllWaitVcoLock(void)
; ..\appl\Source\BrsHw.c	  1130  {
; ..\appl\Source\BrsHw.c	  1131    Std_ReturnType ErrorFlag;
; ..\appl\Source\BrsHw.c	  1132    uint32 TimeOutCount;
; ..\appl\Source\BrsHw.c	  1133  
; ..\appl\Source\BrsHw.c	  1134    ErrorFlag = E_OK;
; ..\appl\Source\BrsHw.c	  1135    TimeOutCount = ((uint32)0x000001FFU);
; ..\appl\Source\BrsHw.c	  1136    do
; ..\appl\Source\BrsHw.c	  1137    {
; ..\appl\Source\BrsHw.c	  1138      TimeOutCount-- ;
; ..\appl\Source\BrsHw.c	  1139    } while (((BRS_SCU_PLLERAYSTAT & 0x00000004) != 0x00000004) && (TimeOutCount > 0U)) ;
; ..\appl\Source\BrsHw.c	  1140  
; ..\appl\Source\BrsHw.c	  1141    if (TimeOutCount == 0U)
; ..\appl\Source\BrsHw.c	  1142    {
; ..\appl\Source\BrsHw.c	  1143      ErrorFlag = E_NOT_OK;
; ..\appl\Source\BrsHw.c	  1144    }
; ..\appl\Source\BrsHw.c	  1145  
; ..\appl\Source\BrsHw.c	  1146    return(ErrorFlag);
; ..\appl\Source\BrsHw.c	  1147  }
; ..\appl\Source\BrsHw.c	  1148  #  endif /*BRS_ENABLE_FLEXRAY_SUPPORT*/
; ..\appl\Source\BrsHw.c	  1149  # endif /*BRS_PLL_GROUP_A*/
; ..\appl\Source\BrsHw.c	  1150  #endif /*BRS_ENABLE_PLLCLOCKS*/
; ..\appl\Source\BrsHw.c	  1151  
; ..\appl\Source\BrsHw.c	  1152  #if defined (BRS_ENABLE_PORT)
; ..\appl\Source\BrsHw.c	  1153  /*******************************************************************************
; ..\appl\Source\BrsHw.c	  1154    Port Pin initialization helper functions for usage of BrsHw_Ports.h
; ..\appl\Source\BrsHw.c	  1155  ********************************************************************************/
; ..\appl\Source\BrsHw.c	  1156  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1157  /**
; ..\appl\Source\BrsHw.c	  1158   * @brief      This function configures a port pin as input pin.
; ..\appl\Source\BrsHw.c	  1159   * @pre        Port pin configurations available within BrsHw_Ports.h and
; ..\appl\Source\BrsHw.c	  1160   *             no DrvPort used for port pin initialization.
; ..\appl\Source\BrsHw.c	  1161   * @param[in]  p - brsHw_Port_PortType, to be initialized.
; ..\appl\Source\BrsHw.c	  1162   * @param[out] -
; ..\appl\Source\BrsHw.c	  1163   * @return     -
; ..\appl\Source\BrsHw.c	  1164   * @context    Function is called from BrsHwPortInitPowerOn() locally.
; ..\appl\Source\BrsHw.c	  1165   */
; ..\appl\Source\BrsHw.c	  1166  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1167  void BrsHwInitPortInput(brsHw_Port_PortType p)
; ..\appl\Source\BrsHw.c	  1168  {
; ..\appl\Source\BrsHw.c	  1169  #if defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1170    BRS_PORT_PADCFG_DRVCFG(p.portGroup,p.portNumber) &= ~(uint32)(0xFF); /* clear mode, outp buffer configuration(OD) and Pad signal direction(DIR) */
; ..\appl\Source\BrsHw.c	  1171    BRS_PORT_PADCFG_DRVCFG(p.portGroup,p.portNumber) |= (uint32)(INPUT_PULL_UP) << (MODE_Bits) | (INPUT) << (DIR_Bit);  /* mode= input pull up, DIR= Input */
; ..\appl\Source\BrsHw.c	  1172  
; ..\appl\Source\BrsHw.c	  1173  #else
; ..\appl\Source\BrsHw.c	  1174    BRS_PORT_IOCR(p.portGroup,p.portNumber) &= ~(uint32)( 0x1F << (3 + 8 * ((uint32)p.portNumber % 4)));
; ..\appl\Source\BrsHw.c	  1175    BRS_PORT_IOCR(p.portGroup,p.portNumber) |= (uint32)( 0x10 + p.portAlternative ) << (8 * ((uint32)p.portNumber % 4));
; ..\appl\Source\BrsHw.c	  1176  #endif
; ..\appl\Source\BrsHw.c	  1177  }
; ..\appl\Source\BrsHw.c	  1178  
; ..\appl\Source\BrsHw.c	  1179  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1180  /**
; ..\appl\Source\BrsHw.c	  1181   * @brief      This function configures a port pin as output pin.
; ..\appl\Source\BrsHw.c	  1182   * @pre        Port pin configurations available within BrsHw_Ports.h and
; ..\appl\Source\BrsHw.c	  1183   *             no DrvPort used for port pin initialization.
; ..\appl\Source\BrsHw.c	  1184   * @param[in]  p - brsHw_Port_PortType, to be initialized.
; ..\appl\Source\BrsHw.c	  1185   * @param[out] -
; ..\appl\Source\BrsHw.c	  1186   * @return     -
; ..\appl\Source\BrsHw.c	  1187   * @context    Function is called from BrsHwPortInitPowerOn() locally.
; ..\appl\Source\BrsHw.c	  1188   */
; ..\appl\Source\BrsHw.c	  1189  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1190  void BrsHwInitPortOutput(brsHw_Port_PortType p)
; ..\appl\Source\BrsHw.c	  1191  {
; ..\appl\Source\BrsHw.c	  1192  #if defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1193    BRS_PORT_PADCFG_DRVCFG(p.portGroup,p.portNumber) &= ~(uint32)(0xFF); /* clear mode, outp buffer configuration(OD) and Pad signal direction(DIR) */
; ..\appl\Source\BrsHw.c	  1194    BRS_PORT_PADCFG_DRVCFG(p.portGroup,p.portNumber) |= (uint32)(p.portAlternative) << (MODE_Bits) | (OUTPUT) << (DIR_Bit);  /* mode= output alternative Fx, DIR= out */
; ..\appl\Source\BrsHw.c	  1195  
; ..\appl\Source\BrsHw.c	  1196  #else
; ..\appl\Source\BrsHw.c	  1197    BRS_PORT_IOCR(p.portGroup,p.portNumber) &= ~(uint32)( 0x1F << (3 + 8 * ((uint32)p.portNumber % 4)));
; ..\appl\Source\BrsHw.c	  1198    BRS_PORT_IOCR(p.portGroup,p.portNumber) |= (uint32)( 0x10 + p.portAlternative ) << (3 + 8 * ((uint32)p.portNumber % 4));
; ..\appl\Source\BrsHw.c	  1199  #endif
; ..\appl\Source\BrsHw.c	  1200  }
; ..\appl\Source\BrsHw.c	  1201  
; ..\appl\Source\BrsHw.c	  1202  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1203  /**
; ..\appl\Source\BrsHw.c	  1204   * @brief      This function configures a port pin as input and output pin.
; ..\appl\Source\BrsHw.c	  1205   * @pre        Port pin configurations available within BrsHw_Ports.h and
; ..\appl\Source\BrsHw.c	  1206   *             no DrvPort used for port pin initialization.
; ..\appl\Source\BrsHw.c	  1207   * @param[in]  p - brsHw_Port_PortType, to be initialized.
; ..\appl\Source\BrsHw.c	  1208   * @param[out] -
; ..\appl\Source\BrsHw.c	  1209   * @return     -
; ..\appl\Source\BrsHw.c	  1210   * @context    Function is called from BrsHwPortInitPowerOn() locally.
; ..\appl\Source\BrsHw.c	  1211   */
; ..\appl\Source\BrsHw.c	  1212  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1213  void BrsHwInitPortInputOutput(brsHw_Port_PortType p)
; ..\appl\Source\BrsHw.c	  1214  {
; ..\appl\Source\BrsHw.c	  1215    /* no classical input buffer setting on this platform. Output with alternative function should be suitable */
; ..\appl\Source\BrsHw.c	  1216    BrsHwInitPortOutput(p);
; ..\appl\Source\BrsHw.c	  1217  }
; ..\appl\Source\BrsHw.c	  1218  
; ..\appl\Source\BrsHw.c	  1219  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1220  /**
; ..\appl\Source\BrsHw.c	  1221   * @brief      This function configures the port pin configuration registers
; ..\appl\Source\BrsHw.c	  1222   *             (set DriverStrength and pad level at automotive level)
; ..\appl\Source\BrsHw.c	  1223   * @pre        Port pin configurations available within BrsHw_Ports.h and
; ..\appl\Source\BrsHw.c	  1224   *             no DrvPort used for port pin initialization.
; ..\appl\Source\BrsHw.c	  1225   * @param[in]  p - brsHw_Port_PortType, to be initialized,
; ..\appl\Source\BrsHw.c	  1226                 n - brsHw_Port_ConfType, for port pin configuration
; ..\appl\Source\BrsHw.c	  1227   * @param[out] -
; ..\appl\Source\BrsHw.c	  1228   * @return     -
; ..\appl\Source\BrsHw.c	  1229   * @context    Function is called from BrsHwPortInitPowerOn() and
; ..\appl\Source\BrsHw.c	  1230   *             BrsHwEvaBoardInitPowerOn() locally.
; ..\appl\Source\BrsHw.c	  1231   */
; ..\appl\Source\BrsHw.c	  1232  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1233  void BrsHwInitPortConfig(brsHw_Port_PortType p, brsHw_Port_ConfType n)
; ..\appl\Source\BrsHw.c	  1234  {
; ..\appl\Source\BrsHw.c	  1235  # if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1236    BrsHwUnlockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	  1237    BRS_PORT_PDR(p.portGroup,p.portNumber)  &= ~(uint32)( 0x0F << (4 * ((uint32)p.portNumber % 8)) );
; ..\appl\Source\BrsHw.c	  1238    switch (n.PortDriverSetting)
; ..\appl\Source\BrsHw.c	  1239    {
; ..\appl\Source\BrsHw.c	  1240      case PORT_STRONG_DRIVER_SHARP_EDGE:
; ..\appl\Source\BrsHw.c	  1241        BRS_PORT_PDR(p.portGroup,p.portNumber)  |= (0x1 | PORT_STRONG_DRIVER_SHARP_EDGE) << (4 * ((uint32)p.portNumber % 8));
; ..\appl\Source\BrsHw.c	  1242        break;
; ..\appl\Source\BrsHw.c	  1243      case PORT_STRONG_DRIVER_MEDIUM_EDGE:
; ..\appl\Source\BrsHw.c	  1244        BRS_PORT_PDR(p.portGroup,p.portNumber)  |= (0x1 | PORT_STRONG_DRIVER_MEDIUM_EDGE) << (4 * ((uint32)p.portNumber % 8));
; ..\appl\Source\BrsHw.c	  1245        break;
; ..\appl\Source\BrsHw.c	  1246      case PORT_MEDIUM_DRIVER:
; ..\appl\Source\BrsHw.c	  1247        BRS_PORT_PDR(p.portGroup,p.portNumber)  |= (0x1 | PORT_MEDIUM_DRIVER) << (4 * ((uint32)p.portNumber % 8));
; ..\appl\Source\BrsHw.c	  1248        break;
; ..\appl\Source\BrsHw.c	  1249      case PORT_RGMII_DRIVER:
; ..\appl\Source\BrsHw.c	  1250        BRS_PORT_PDR(p.portGroup,p.portNumber)  |= (0x1 | PORT_RGMII_DRIVER) << (4 * ((uint32)p.portNumber % 8));
; ..\appl\Source\BrsHw.c	  1251        break;
; ..\appl\Source\BrsHw.c	  1252    }
; ..\appl\Source\BrsHw.c	  1253    BrsHwLockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	  1254  # endif 
; ..\appl\Source\BrsHw.c	  1255  }
; ..\appl\Source\BrsHw.c	  1256  
; ..\appl\Source\BrsHw.c	  1257  # if defined (BRS_ENABLE_FBL_SUPPORT)
; ..\appl\Source\BrsHw.c	  1258    #define BRS_START_SEC_RAM_CODE
; ..\appl\Source\BrsHw.c	  1259    #include "Brs_MemMap.h"
; ..\appl\Source\BrsHw.c	  1260  # endif
; ..\appl\Source\BrsHw.c	  1261  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1262  /**
; ..\appl\Source\BrsHw.c	  1263   * @brief      This function sets the output level of a port pin.
; ..\appl\Source\BrsHw.c	  1264   * @pre        Port pin configurations available within BrsHw_Ports.h,
; ..\appl\Source\BrsHw.c	  1265   *             no DrvPort used for port pin initialization and
; ..\appl\Source\BrsHw.c	  1266   *             transferred port pin has to be initialized as output pin with
; ..\appl\Source\BrsHw.c	  1267   *             GPIO functionality.
; ..\appl\Source\BrsHw.c	  1268   * @param[in]  p     - brsHw_Port_PortType, to be set,
; ..\appl\Source\BrsHw.c	  1269   *             Level - level, port pin has to be set to
; ..\appl\Source\BrsHw.c	  1270   *                     (BRSHW_PORT_LOGIC_LOW or BRSHW_PORT_LOGIC_HIGH).
; ..\appl\Source\BrsHw.c	  1271   * @param[out] -
; ..\appl\Source\BrsHw.c	  1272   * @return     -
; ..\appl\Source\BrsHw.c	  1273   * @context    Function is called from BrsHwPortInitPowerOn() and
; ..\appl\Source\BrsHw.c	  1274   *             provided to external modules (e.g. BrsMainTogglePin()).
; ..\appl\Source\BrsHw.c	  1275   */
; ..\appl\Source\BrsHw.c	  1276  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1277  void BrsHwPort_SetLevel(brsHw_Port_PortType p, uint8 Level)
; ..\appl\Source\BrsHw.c	  1278  {
; ..\appl\Source\BrsHw.c	  1279    if (Level == BRSHW_PORT_LOGIC_LOW)
; ..\appl\Source\BrsHw.c	  1280    {
; ..\appl\Source\BrsHw.c	  1281      BRS_PORT_POUT(p.portGroup) &= ~(0x1 << p.portNumber);
; ..\appl\Source\BrsHw.c	  1282    }
; ..\appl\Source\BrsHw.c	  1283    else
; ..\appl\Source\BrsHw.c	  1284    {
; ..\appl\Source\BrsHw.c	  1285      BRS_PORT_POUT(p.portGroup) |=  (0x1 << p.portNumber);
; ..\appl\Source\BrsHw.c	  1286    }
; ..\appl\Source\BrsHw.c	  1287  }
; ..\appl\Source\BrsHw.c	  1288  # if defined (BRS_ENABLE_FBL_SUPPORT)
; ..\appl\Source\BrsHw.c	  1289    #define BRS_STOP_SEC_RAM_CODE
; ..\appl\Source\BrsHw.c	  1290    #include "Brs_MemMap.h"
; ..\appl\Source\BrsHw.c	  1291  # endif
; ..\appl\Source\BrsHw.c	  1292  
; ..\appl\Source\BrsHw.c	  1293  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1294  /**
; ..\appl\Source\BrsHw.c	  1295   * @brief      This function reads the input level of a port pin.
; ..\appl\Source\BrsHw.c	  1296   * @pre        Port pin configurations available within BrsHw_Ports.h,
; ..\appl\Source\BrsHw.c	  1297   *             no DrvPort used for port pin initialization and
; ..\appl\Source\BrsHw.c	  1298   *             transferred port pin has to be initialized as input pin with
; ..\appl\Source\BrsHw.c	  1299   *             GPIO functionality.
; ..\appl\Source\BrsHw.c	  1300   * @param[in]  p - brsHw_Port_PortType, to be read.
; ..\appl\Source\BrsHw.c	  1301   * @param[out] -
; ..\appl\Source\BrsHw.c	  1302   * @return     Level, read from port pin
; ..\appl\Source\BrsHw.c	  1303   *             (BRSHW_PORT_LOGIC_LOW or BRSHW_PORT_LOGIC_HIGH).
; ..\appl\Source\BrsHw.c	  1304   * @context    Function is provided to external modules.
; ..\appl\Source\BrsHw.c	  1305   */
; ..\appl\Source\BrsHw.c	  1306  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1307  uint8 BrsHwPort_GetLevel(brsHw_Port_PortType p)
; ..\appl\Source\BrsHw.c	  1308  {
; ..\appl\Source\BrsHw.c	  1309    uint32 temp;
; ..\appl\Source\BrsHw.c	  1310  
; ..\appl\Source\BrsHw.c	  1311    temp = BRS_PORT_PIN(p.portGroup);
; ..\appl\Source\BrsHw.c	  1312    temp &= (1 << p.portNumber);
; ..\appl\Source\BrsHw.c	  1313  
; ..\appl\Source\BrsHw.c	  1314    if(temp !=0x0000)
; ..\appl\Source\BrsHw.c	  1315    {
; ..\appl\Source\BrsHw.c	  1316      return BRSHW_PORT_LOGIC_HIGH;
; ..\appl\Source\BrsHw.c	  1317    }
; ..\appl\Source\BrsHw.c	  1318    else
; ..\appl\Source\BrsHw.c	  1319    {
; ..\appl\Source\BrsHw.c	  1320      return BRSHW_PORT_LOGIC_LOW;
; ..\appl\Source\BrsHw.c	  1321    }
; ..\appl\Source\BrsHw.c	  1322  }
; ..\appl\Source\BrsHw.c	  1323  
; ..\appl\Source\BrsHw.c	  1324  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1325  /**
; ..\appl\Source\BrsHw.c	  1326   * @brief      This function must be used to initialize the used ports.
; ..\appl\Source\BrsHw.c	  1327   * @pre        -
; ..\appl\Source\BrsHw.c	  1328   * @param[in]  -
; ..\appl\Source\BrsHw.c	  1329   * @param[out] -
; ..\appl\Source\BrsHw.c	  1330   * @return     -
; ..\appl\Source\BrsHw.c	  1331   * @context    Function is called from BrsMainInit() at power on initialization
; ..\appl\Source\BrsHw.c	  1332   */
; ..\appl\Source\BrsHw.c	  1333  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1334  void BrsHwPortInitPowerOn(void)
; ..\appl\Source\BrsHw.c	  1335  {
; ..\appl\Source\BrsHw.c	  1336  #if defined (BRS_ENABLE_SUPPORT_LEDS)
; ..\appl\Source\BrsHw.c	  1337    BrsHwInitPortOutput(BRSHW_PORT_LED);
; ..\appl\Source\BrsHw.c	  1338  
; ..\appl\Source\BrsHw.c	  1339    /* Set LED on EVB demo board to show the system is alive */
; ..\appl\Source\BrsHw.c	  1340    BrsMainTogglePin(BRSMAIN_TOGGLEPIN_LED);
; ..\appl\Source\BrsHw.c	  1341  #endif
; ..\appl\Source\BrsHw.c	  1342  
; ..\appl\Source\BrsHw.c	  1343  #if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
; ..\appl\Source\BrsHw.c	  1344    BrsHwInitPortOutput(BRSHW_PORT_TOGGLE_WD);
; ..\appl\Source\BrsHw.c	  1345  #endif
; ..\appl\Source\BrsHw.c	  1346  
; ..\appl\Source\BrsHw.c	  1347  #if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
; ..\appl\Source\BrsHw.c	  1348    BrsHwInitPortOutput(BRSHW_PORT_TOGGLE_CUSTOM);
; ..\appl\Source\BrsHw.c	  1349  #endif
; ..\appl\Source\BrsHw.c	  1350  
; ..\appl\Source\BrsHw.c	  1351  /*******************************************************************************
; ..\appl\Source\BrsHw.c	  1352    CAN driver
; ..\appl\Source\BrsHw.c	  1353  ********************************************************************************/
; ..\appl\Source\BrsHw.c	  1354  #if defined (BRS_ENABLE_CAN_SUPPORT)
; ..\appl\Source\BrsHw.c	  1355  # if defined (BRS_ENABLE_CAN_CHANNEL_0)
; ..\appl\Source\BrsHw.c	  1356    BrsHwInitPortOutput(BRSHW_PORT_CAN0_TX);
; ..\appl\Source\BrsHw.c	  1357    BrsHwInitPortInput(BRSHW_PORT_CAN0_RX);
; ..\appl\Source\BrsHw.c	  1358  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1359    BrsHwInitPortConfig(BRSHW_PORT_CAN0_TX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1360    BrsHwInitPortConfig(BRSHW_PORT_CAN0_RX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1361  #  endif
; ..\appl\Source\BrsHw.c	  1362  #  if defined(_BRSHW_PORT_CAN0_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1363    BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1364    BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1365  #  endif
; ..\appl\Source\BrsHw.c	  1366  #  if defined (_BRSHW_PORT_CAN0_TRCV_EN)
; ..\appl\Source\BrsHw.c	  1367    BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_EN);
; ..\appl\Source\BrsHw.c	  1368    BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1369  #  endif
; ..\appl\Source\BrsHw.c	  1370  # endif /*BRS_ENABLE_CAN_CHANNEL_0*/
; ..\appl\Source\BrsHw.c	  1371  
; ..\appl\Source\BrsHw.c	  1372  # if defined (BRS_ENABLE_CAN_CHANNEL_1)
; ..\appl\Source\BrsHw.c	  1373    BrsHwInitPortOutput(BRSHW_PORT_CAN1_TX);
; ..\appl\Source\BrsHw.c	  1374    BrsHwInitPortInput(BRSHW_PORT_CAN1_RX);
; ..\appl\Source\BrsHw.c	  1375  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1376    BrsHwInitPortConfig(BRSHW_PORT_CAN1_TX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1377    BrsHwInitPortConfig(BRSHW_PORT_CAN1_RX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1378  #  endif
; ..\appl\Source\BrsHw.c	  1379  #  if defined(_BRSHW_PORT_CAN1_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1380    BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1381    BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1382  #  endif
; ..\appl\Source\BrsHw.c	  1383  #  if defined (_BRSHW_PORT_CAN1_TRCV_EN)
; ..\appl\Source\BrsHw.c	  1384    BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_EN);
; ..\appl\Source\BrsHw.c	  1385    BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1386  #  endif
; ..\appl\Source\BrsHw.c	  1387  # endif /*BRS_ENABLE_CAN_CHANNEL_1*/
; ..\appl\Source\BrsHw.c	  1388  
; ..\appl\Source\BrsHw.c	  1389  # if defined (BRS_ENABLE_CAN_CHANNEL_2)
; ..\appl\Source\BrsHw.c	  1390    BrsHwInitPortOutput(BRSHW_PORT_CAN2_TX);
; ..\appl\Source\BrsHw.c	  1391    BrsHwInitPortInput(BRSHW_PORT_CAN2_RX);
; ..\appl\Source\BrsHw.c	  1392  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1393    BrsHwInitPortConfig(BRSHW_PORT_CAN2_TX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1394    BrsHwInitPortConfig(BRSHW_PORT_CAN2_RX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1395  #  endif
; ..\appl\Source\BrsHw.c	  1396  #  if defined(_BRSHW_PORT_CAN2_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1397    BrsHwInitPortOutput(BRSHW_PORT_CAN2_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1398    BrsHwPort_SetLevel(BRSHW_PORT_CAN2_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1399  #  endif
; ..\appl\Source\BrsHw.c	  1400  #  if defined (_BRSHW_PORT_CAN2_TRCV_EN)
; ..\appl\Source\BrsHw.c	  1401    BrsHwInitPortOutput(BRSHW_PORT_CAN2_TRCV_EN);
; ..\appl\Source\BrsHw.c	  1402    BrsHwPort_SetLevel(BRSHW_PORT_CAN2_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1403  #  endif
; ..\appl\Source\BrsHw.c	  1404  # endif /*BRS_ENABLE_CAN_CHANNEL_2*/
; ..\appl\Source\BrsHw.c	  1405  
; ..\appl\Source\BrsHw.c	  1406  # if defined (BRS_ENABLE_CAN_CHANNEL_3)
; ..\appl\Source\BrsHw.c	  1407    BrsHwInitPortOutput(BRSHW_PORT_CAN3_TX);
; ..\appl\Source\BrsHw.c	  1408    BrsHwInitPortInput(BRSHW_PORT_CAN3_RX);
; ..\appl\Source\BrsHw.c	  1409  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1410    BrsHwInitPortConfig(BRSHW_PORT_CAN3_TX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1411    BrsHwInitPortConfig(BRSHW_PORT_CAN3_RX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1412  #  endif
; ..\appl\Source\BrsHw.c	  1413  #  if defined(_BRSHW_PORT_CAN3_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1414    BrsHwInitPortOutput(BRSHW_PORT_CAN3_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1415    BrsHwPort_SetLevel(BRSHW_PORT_CAN3_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1416  #  endif
; ..\appl\Source\BrsHw.c	  1417  #  if defined (_BRSHW_PORT_CAN3_TRCV_EN)
; ..\appl\Source\BrsHw.c	  1418    BrsHwInitPortOutput(BRSHW_PORT_CAN3_TRCV_EN);
; ..\appl\Source\BrsHw.c	  1419    BrsHwPort_SetLevel(BRSHW_PORT_CAN3_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1420  #  endif
; ..\appl\Source\BrsHw.c	  1421  # endif /*BRS_ENABLE_CAN_CHANNEL_3*/
; ..\appl\Source\BrsHw.c	  1422  
; ..\appl\Source\BrsHw.c	  1423  # if defined (BRS_ENABLE_CAN_CHANNEL_4)
; ..\appl\Source\BrsHw.c	  1424    BrsHwInitPortOutput(BRSHW_PORT_CAN4_TX);
; ..\appl\Source\BrsHw.c	  1425    BrsHwInitPortInput(BRSHW_PORT_CAN4_RX);
; ..\appl\Source\BrsHw.c	  1426  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1427    BrsHwInitPortConfig(BRSHW_PORT_CAN4_TX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1428    BrsHwInitPortConfig(BRSHW_PORT_CAN4_RX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1429  #  endif
; ..\appl\Source\BrsHw.c	  1430  #  if defined(_BRSHW_PORT_CAN4_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1431    BrsHwInitPortOutput(BRSHW_PORT_CAN4_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1432    BrsHwPort_SetLevel(BRSHW_PORT_CAN4_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1433  #  endif
; ..\appl\Source\BrsHw.c	  1434  #  if defined (_BRSHW_PORT_CAN4_TRCV_EN)
; ..\appl\Source\BrsHw.c	  1435    BrsHwInitPortOutput(BRSHW_PORT_CAN4_TRCV_EN);
; ..\appl\Source\BrsHw.c	  1436    BrsHwPort_SetLevel(BRSHW_PORT_CAN4_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1437  #  endif
; ..\appl\Source\BrsHw.c	  1438  # endif /*BRS_ENABLE_CAN_CHANNEL_4*/
; ..\appl\Source\BrsHw.c	  1439  
; ..\appl\Source\BrsHw.c	  1440  # if defined (BRS_ENABLE_CAN_CHANNEL_5)
; ..\appl\Source\BrsHw.c	  1441    BrsHwInitPortOutput(BRSHW_PORT_CAN5_TX);
; ..\appl\Source\BrsHw.c	  1442    BrsHwInitPortInput(BRSHW_PORT_CAN5_RX);
; ..\appl\Source\BrsHw.c	  1443  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1444    BrsHwInitPortConfig(BRSHW_PORT_CAN5_TX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1445    BrsHwInitPortConfig(BRSHW_PORT_CAN5_RX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1446  #endif
; ..\appl\Source\BrsHw.c	  1447  #  if defined(_BRSHW_PORT_CAN5_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1448    BrsHwInitPortOutput(BRSHW_PORT_CAN5_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1449    BrsHwPort_SetLevel(BRSHW_PORT_CAN5_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1450  #  endif
; ..\appl\Source\BrsHw.c	  1451  #  if defined (_BRSHW_PORT_CAN5_TRCV_EN)
; ..\appl\Source\BrsHw.c	  1452    BrsHwInitPortOutput(BRSHW_PORT_CAN5_TRCV_EN);
; ..\appl\Source\BrsHw.c	  1453    BrsHwPort_SetLevel(BRSHW_PORT_CAN5_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1454  #  endif
; ..\appl\Source\BrsHw.c	  1455  # endif /*BRS_ENABLE_CAN_CHANNEL_5*/
; ..\appl\Source\BrsHw.c	  1456  
; ..\appl\Source\BrsHw.c	  1457  # if defined (BRS_ENABLE_CAN_CHANNEL_6)
; ..\appl\Source\BrsHw.c	  1458    BrsHwInitPortOutput(BRSHW_PORT_CAN6_TX);
; ..\appl\Source\BrsHw.c	  1459    BrsHwInitPortInput(BRSHW_PORT_CAN6_RX);
; ..\appl\Source\BrsHw.c	  1460  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1461    BrsHwInitPortConfig(BRSHW_PORT_CAN6_TX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1462    BrsHwInitPortConfig(BRSHW_PORT_CAN6_RX, BRSHW_PORT_CONF_CAN);
; ..\appl\Source\BrsHw.c	  1463  #endif
; ..\appl\Source\BrsHw.c	  1464  #  if defined(_BRSHW_PORT_CAN6_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1465    BrsHwInitPortOutput(BRSHW_PORT_CAN6_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1466    BrsHwPort_SetLevel(BRSHW_PORT_CAN6_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1467  #  endif
; ..\appl\Source\BrsHw.c	  1468  #  if defined (_BRSHW_PORT_CAN6_TRCV_EN)
; ..\appl\Source\BrsHw.c	  1469    BrsHwInitPortOutput(BRSHW_PORT_CAN6_TRCV_EN);
; ..\appl\Source\BrsHw.c	  1470    BrsHwPort_SetLevel(BRSHW_PORT_CAN6_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1471  #  endif
; ..\appl\Source\BrsHw.c	  1472  # endif /*BRS_ENABLE_CAN_CHANNEL_6*/
; ..\appl\Source\BrsHw.c	  1473  
; ..\appl\Source\BrsHw.c	  1474  # if defined (BRS_ENABLE_CAN_CHANNEL_7) || defined (BRS_ENABLE_CAN_CHANNEL_8)  || \ 
; ..\appl\Source\BrsHw.c	  1475       defined (BRS_ENABLE_CAN_CHANNEL_9) || defined (BRS_ENABLE_CAN_CHANNEL_10) || \ 
; ..\appl\Source\BrsHw.c	  1476       defined (BRS_ENABLE_CAN_CHANNEL_11)
; ..\appl\Source\BrsHw.c	  1477    #error "Port config for your CAN channel not yet implemented"
; ..\appl\Source\BrsHw.c	  1478  # endif
; ..\appl\Source\BrsHw.c	  1479  #endif /*BRS_ENABLE_CAN_SUPPORT*/
; ..\appl\Source\BrsHw.c	  1480  
; ..\appl\Source\BrsHw.c	  1481  /*******************************************************************************
; ..\appl\Source\BrsHw.c	  1482    LIN driver
; ..\appl\Source\BrsHw.c	  1483  ********************************************************************************/
; ..\appl\Source\BrsHw.c	  1484  #if defined (BRS_ENABLE_LIN_SUPPORT)
; ..\appl\Source\BrsHw.c	  1485  # if defined (BRS_ENABLE_LIN_CHANNEL_0)
; ..\appl\Source\BrsHw.c	  1486    BrsHwInitPortOutput(BRSHW_PORT_LIN0_TX);
; ..\appl\Source\BrsHw.c	  1487    BrsHwInitPortInput(BRSHW_PORT_LIN0_RX);
; ..\appl\Source\BrsHw.c	  1488  #  if defined(_BRSHW_PORT_LIN0_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1489    BrsHwInitPortOutput(BRSHW_PORT_LIN0_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1490    BrsHwPort_SetLevel(BRSHW_PORT_LIN0_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1491  #  endif
; ..\appl\Source\BrsHw.c	  1492  # endif /*BRS_ENABLE_LIN_CHANNEL_0*/
; ..\appl\Source\BrsHw.c	  1493  
; ..\appl\Source\BrsHw.c	  1494  # if defined (BRS_ENABLE_LIN_CHANNEL_1)
; ..\appl\Source\BrsHw.c	  1495    BrsHwInitPortOutput(BRSHW_PORT_LIN1_TX);
; ..\appl\Source\BrsHw.c	  1496    BrsHwInitPortInput(BRSHW_PORT_LIN1_RX);
; ..\appl\Source\BrsHw.c	  1497  #  if defined(_BRSHW_PORT_LIN1_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1498    BrsHwInitPortOutput(BRSHW_PORT_LIN1_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1499    BrsHwPort_SetLevel(BRSHW_PORT_LIN1_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1500  #  endif
; ..\appl\Source\BrsHw.c	  1501  # endif /*BRS_ENABLE_LIN_CHANNEL_1*/
; ..\appl\Source\BrsHw.c	  1502  
; ..\appl\Source\BrsHw.c	  1503  # if defined (BRS_ENABLE_LIN_CHANNEL_2)
; ..\appl\Source\BrsHw.c	  1504    BrsHwInitPortOutput(BRSHW_PORT_LIN2_TX);
; ..\appl\Source\BrsHw.c	  1505    BrsHwInitPortInput(BRSHW_PORT_LIN2_RX);
; ..\appl\Source\BrsHw.c	  1506  #  if defined(_BRSHW_PORT_LIN2_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1507    BrsHwInitPortOutput(BRSHW_PORT_LIN2_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1508    BrsHwPort_SetLevel(BRSHW_PORT_LIN2_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1509  #  endif
; ..\appl\Source\BrsHw.c	  1510  # endif /*BRS_ENABLE_LIN_CHANNEL_2*/
; ..\appl\Source\BrsHw.c	  1511  
; ..\appl\Source\BrsHw.c	  1512  # if defined (BRS_ENABLE_LIN_CHANNEL_3)
; ..\appl\Source\BrsHw.c	  1513    BrsHwInitPortOutput(BRSHW_PORT_LIN3_TX);
; ..\appl\Source\BrsHw.c	  1514    BrsHwInitPortInput(BRSHW_PORT_LIN3_RX);
; ..\appl\Source\BrsHw.c	  1515  #  if defined(_BRSHW_PORT_LIN3_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1516    BrsHwInitPortOutput(BRSHW_PORT_LIN3_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1517    BrsHwPort_SetLevel(BRSHW_PORT_LIN3_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1518  #  endif
; ..\appl\Source\BrsHw.c	  1519  # endif /*BRS_ENABLE_LIN_CHANNEL_3*/
; ..\appl\Source\BrsHw.c	  1520  
; ..\appl\Source\BrsHw.c	  1521  # if defined (BRS_ENABLE_LIN_CHANNEL_4) || defined (BRS_ENABLE_LIN_CHANNEL_5) || \ 
; ..\appl\Source\BrsHw.c	  1522       defined (BRS_ENABLE_LIN_CHANNEL_6) || defined (BRS_ENABLE_LIN_CHANNEL_7) || \ 
; ..\appl\Source\BrsHw.c	  1523       defined (BRS_ENABLE_LIN_CHANNEL_8) || defined (BRS_ENABLE_LIN_CHANNEL_9) || \ 
; ..\appl\Source\BrsHw.c	  1524       defined (BRS_ENABLE_LIN_CHANNEL_10) || defined (BRS_ENABLE_LIN_CHANNEL_11)
; ..\appl\Source\BrsHw.c	  1525    #error "Port config for your LIN channel not yet implemented"
; ..\appl\Source\BrsHw.c	  1526  # endif
; ..\appl\Source\BrsHw.c	  1527  #endif /*BRS_ENABLE_LIN_SUPPORT*/
; ..\appl\Source\BrsHw.c	  1528  
; ..\appl\Source\BrsHw.c	  1529  /*******************************************************************************
; ..\appl\Source\BrsHw.c	  1530    FLEXRAY driver
; ..\appl\Source\BrsHw.c	  1531  ********************************************************************************/
; ..\appl\Source\BrsHw.c	  1532  #if defined (BRS_ENABLE_FLEXRAY_SUPPORT)
; ..\appl\Source\BrsHw.c	  1533  # if defined (BRS_ENABLE_FLEXRAY_CHANNEL_0_A)
; ..\appl\Source\BrsHw.c	  1534    BrsHwInitPortOutput(BRSHW_PORT_FR0A_TX);
; ..\appl\Source\BrsHw.c	  1535    BrsHwInitPortInput(BRSHW_PORT_FR0A_RX);
; ..\appl\Source\BrsHw.c	  1536    BrsHwInitPortOutput(BRSHW_PORT_FR0A_TXEN);
; ..\appl\Source\BrsHw.c	  1537    BrsHwInitPortInput(BRSHW_PORT_FR0A_ERRNA);
; ..\appl\Source\BrsHw.c	  1538  #  if defined (_BRSHW_PORT_FR0A_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1539    BrsHwInitPortOutput(BRSHW_PORT_FR0A_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1540    BrsHwPort_SetLevel(BRSHW_PORT_FR0A_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1541  #  endif
; ..\appl\Source\BrsHw.c	  1542  #  if defined (_BRSHW_PORT_FR0A_TRCV_EN)
; ..\appl\Source\BrsHw.c	  1543    BrsHwInitPortOutput(BRSHW_PORT_FR0A_TRCV_EN);
; ..\appl\Source\BrsHw.c	  1544    BrsHwPort_SetLevel(BRSHW_PORT_FR0A_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1545  #  endif
; ..\appl\Source\BrsHw.c	  1546  # endif /*BRS_ENABLE_FLEXRAY_CHANNEL_0_A*/
; ..\appl\Source\BrsHw.c	  1547  
; ..\appl\Source\BrsHw.c	  1548  # if defined (BRS_ENABLE_FLEXRAY_CHANNEL_0_B)
; ..\appl\Source\BrsHw.c	  1549    BrsHwInitPortOutput(BRSHW_PORT_FR0B_TX);
; ..\appl\Source\BrsHw.c	  1550    BrsHwInitPortInput(BRSHW_PORT_FR0B_RX);
; ..\appl\Source\BrsHw.c	  1551    BrsHwInitPortOutput(BRSHW_PORT_FR0B_TXEN);
; ..\appl\Source\BrsHw.c	  1552    BrsHwInitPortInput(BRSHW_PORT_FR0B_ERRNB);
; ..\appl\Source\BrsHw.c	  1553  #  if defined (_BRSHW_PORT_FR0B_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1554    BrsHwInitPortOutput(BRSHW_PORT_FR0B_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1555    BrsHwPort_SetLevel(BRSHW_PORT_FR0B_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1556  #  endif
; ..\appl\Source\BrsHw.c	  1557  #  if defined (_BRSHW_PORT_FR0B_TRCV_EN)
; ..\appl\Source\BrsHw.c	  1558    BrsHwInitPortOutput(BRSHW_PORT_FR0B_TRCV_EN);
; ..\appl\Source\BrsHw.c	  1559    BrsHwPort_SetLevel(BRSHW_PORT_FR0B_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1560  #  endif
; ..\appl\Source\BrsHw.c	  1561  # endif /*BRS_ENABLE_FLEXRAY_CHANNEL_0_B*/
; ..\appl\Source\BrsHw.c	  1562  
; ..\appl\Source\BrsHw.c	  1563  #  if defined (BRS_ENABLE_FLEXRAY_CHANNEL_1_A)
; ..\appl\Source\BrsHw.c	  1564    BrsHwInitPortOutput(BRSHW_PORT_FR1A_TX);
; ..\appl\Source\BrsHw.c	  1565    BrsHwInitPortInput(BRSHW_PORT_FR1A_RX);
; ..\appl\Source\BrsHw.c	  1566    BrsHwInitPortOutput(BRSHW_PORT_FR1A_TXEN);
; ..\appl\Source\BrsHw.c	  1567    BrsHwInitPortInput(BRSHW_PORT_FR1A_ERRNA);
; ..\appl\Source\BrsHw.c	  1568  #   if defined(_BRSHW_PORT_FR1A_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1569    BrsHwInitPortOutput(BRSHW_PORT_FR1A_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1570    BrsHwPort_SetLevel(BRSHW_PORT_FR1A_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1571  #   endif
; ..\appl\Source\BrsHw.c	  1572  #   if defined (_BRSHW_PORT_FR1A_TRCV_EN)
; ..\appl\Source\BrsHw.c	  1573    BrsHwInitPortOutput(BRSHW_PORT_FR1A_TRCV_EN);
; ..\appl\Source\BrsHw.c	  1574    BrsHwPort_SetLevel(BRSHW_PORT_FR1A_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1575  #   endif
; ..\appl\Source\BrsHw.c	  1576  #  endif /*BRS_ENABLE_FLEXRAY_CHANNEL_1_A*/
; ..\appl\Source\BrsHw.c	  1577  
; ..\appl\Source\BrsHw.c	  1578  #  if defined (BRS_ENABLE_FLEXRAY_CHANNEL_1_B)
; ..\appl\Source\BrsHw.c	  1579    BrsHwInitPortOutput(BRSHW_PORT_FR1B_TX);
; ..\appl\Source\BrsHw.c	  1580    BrsHwInitPortInput(BRSHW_PORT_FR1B_RX);
; ..\appl\Source\BrsHw.c	  1581    BrsHwInitPortOutput(BRSHW_PORT_FR1B_TXEN);
; ..\appl\Source\BrsHw.c	  1582    BrsHwInitPortInput(BRSHW_PORT_FR1B_ERRNB);
; ..\appl\Source\BrsHw.c	  1583  #   if defined(_BRSHW_PORT_FR1B_TRCV_STB)
; ..\appl\Source\BrsHw.c	  1584    BrsHwInitPortOutput(BRSHW_PORT_FR1B_TRCV_STB);
; ..\appl\Source\BrsHw.c	  1585    BrsHwPort_SetLevel(BRSHW_PORT_FR1B_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1586  #   endif
; ..\appl\Source\BrsHw.c	  1587  #   if defined (_BRSHW_PORT_FR1B_TRCV_EN)
; ..\appl\Source\BrsHw.c	  1588    BrsHwInitPortOutput(BRSHW_PORT_FR1B_TRCV_EN);
; ..\appl\Source\BrsHw.c	  1589    BrsHwPort_SetLevel(BRSHW_PORT_FR1B_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1590  #   endif
; ..\appl\Source\BrsHw.c	  1591  #  endif /*BRS_ENABLE_FLEXRAY_CHANNEL_1_B*/
; ..\appl\Source\BrsHw.c	  1592  #endif /*BRS_ENABLE_FLEXRAY_SUPPORT*/
; ..\appl\Source\BrsHw.c	  1593  
; ..\appl\Source\BrsHw.c	  1594  /*******************************************************************************
; ..\appl\Source\BrsHw.c	  1595    ETHERNET driver
; ..\appl\Source\BrsHw.c	  1596  ********************************************************************************/
; ..\appl\Source\BrsHw.c	  1597  #if defined (BRS_ENABLE_ETHERNET_SUPPORT)
; ..\appl\Source\BrsHw.c	  1598    /* -- Transmitter signals -- */
; ..\appl\Source\BrsHw.c	  1599    BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXCLK);
; ..\appl\Source\BrsHw.c	  1600  # if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1601    BrsHwInitPortConfig(BRSHW_PORT_ETH0_TXCLK, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1602  # endif
; ..\appl\Source\BrsHw.c	  1603    BrsHwInitPortInput(BRSHW_PORT_ETH0_REFCLK);
; ..\appl\Source\BrsHw.c	  1604  # if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1605    BrsHwInitPortConfig(BRSHW_PORT_ETH0_REFCLK, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1606  # endif
; ..\appl\Source\BrsHw.c	  1607    BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD0);
; ..\appl\Source\BrsHw.c	  1608    BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD1);
; ..\appl\Source\BrsHw.c	  1609  # if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1610    BrsHwInitPortConfig(BRSHW_PORT_ETH0_TXD0, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1611    BrsHwInitPortConfig(BRSHW_PORT_ETH0_TXD1, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1612  # endif
; ..\appl\Source\BrsHw.c	  1613  # if defined (_BRSHW_PORT_ETH0_TXD2)
; ..\appl\Source\BrsHw.c	  1614    /* Transmit signal 2 is obsolete within RMII */
; ..\appl\Source\BrsHw.c	  1615    BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD2);
; ..\appl\Source\BrsHw.c	  1616  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1617    BrsHwInitPortConfig(BRSHW_PORT_ETH0_TXD2, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1618  #  endif
; ..\appl\Source\BrsHw.c	  1619  # endif
; ..\appl\Source\BrsHw.c	  1620  # if defined (_BRSHW_PORT_ETH0_TXD3)
; ..\appl\Source\BrsHw.c	  1621    /* Transmit signal 3 is obsolete within RMII */
; ..\appl\Source\BrsHw.c	  1622    BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD3);
; ..\appl\Source\BrsHw.c	  1623  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1624    BrsHwInitPortConfig(BRSHW_PORT_ETH0_TXD3, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1625  #  endif
; ..\appl\Source\BrsHw.c	  1626  # endif
; ..\appl\Source\BrsHw.c	  1627    BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXEN);
; ..\appl\Source\BrsHw.c	  1628  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1629    BrsHwInitPortConfig(BRSHW_PORT_ETH0_TXEN, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1630  #  endif
; ..\appl\Source\BrsHw.c	  1631  # if defined (_BRSHW_PORT_ETH0_TXER)
; ..\appl\Source\BrsHw.c	  1632    /* Transmit Error signal is only optional within MII and obsolete within RMII */
; ..\appl\Source\BrsHw.c	  1633    BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXER);
; ..\appl\Source\BrsHw.c	  1634  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1635    BrsHwInitPortConfig(BRSHW_PORT_ETH0_TXER, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1636     # endif
; ..\appl\Source\BrsHw.c	  1637  # endif
; ..\appl\Source\BrsHw.c	  1638  
; ..\appl\Source\BrsHw.c	  1639    /* -- Receiver signals -- */
; ..\appl\Source\BrsHw.c	  1640  # if defined (_BRSHW_PORT_ETH0_RXCLK)
; ..\appl\Source\BrsHw.c	  1641    /* Receive clock signal is obsolete within RMII */
; ..\appl\Source\BrsHw.c	  1642    BrsHwInitPortInput(BRSHW_PORT_ETH0_RXCLK);
; ..\appl\Source\BrsHw.c	  1643  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1644    BrsHwInitPortConfig(BRSHW_PORT_ETH0_RXCLK, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1645  #  endif
; ..\appl\Source\BrsHw.c	  1646  # endif
; ..\appl\Source\BrsHw.c	  1647    BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD0);
; ..\appl\Source\BrsHw.c	  1648    BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD1);
; ..\appl\Source\BrsHw.c	  1649  # if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1650    BrsHwInitPortConfig(BRSHW_PORT_ETH0_RXD0, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1651    BrsHwInitPortConfig(BRSHW_PORT_ETH0_RXD1, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1652  # endif
; ..\appl\Source\BrsHw.c	  1653  # if defined (_BRSHW_PORT_ETH0_RXD2)
; ..\appl\Source\BrsHw.c	  1654    /* Receive signal 2 is obsolete within RMII */
; ..\appl\Source\BrsHw.c	  1655    BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD2);
; ..\appl\Source\BrsHw.c	  1656  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1657    BrsHwInitPortConfig(BRSHW_PORT_ETH0_RXD2, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1658  #  endif
; ..\appl\Source\BrsHw.c	  1659  # endif
; ..\appl\Source\BrsHw.c	  1660  # if defined (_BRSHW_PORT_ETH0_RXD3)
; ..\appl\Source\BrsHw.c	  1661    /* Receive signal 3 is obsolete within RMII */
; ..\appl\Source\BrsHw.c	  1662    BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD3);
; ..\appl\Source\BrsHw.c	  1663  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1664    BrsHwInitPortConfig(BRSHW_PORT_ETH0_RXD3, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1665  #  endif
; ..\appl\Source\BrsHw.c	  1666  # endif
; ..\appl\Source\BrsHw.c	  1667    BrsHwInitPortInput(BRSHW_PORT_ETH0_CRSDV);
; ..\appl\Source\BrsHw.c	  1668  #  if !defined (BRS_PORT_GROUP_C)
; ..\appl\Source\BrsHw.c	  1669    BrsHwInitPortConfig(BRSHW_PORT_ETH0_CRSDV, BRSHW_PORT_CONF_ETHERNET);
; ..\appl\Source\BrsHw.c	  1670  #  endif
; ..\appl\Source\BrsHw.c	  1671  
; ..\appl\Source\BrsHw.c	  1672    /* -- Management signals -- */
; ..\appl\Source\BrsHw.c	  1673    BrsHwInitPortInputOutput(BRSHW_PORT_ETH0_MDIO);
; ..\appl\Source\BrsHw.c	  1674  # if defined (_BRSHW_PORT_ETH0_MDC)
; ..\appl\Source\BrsHw.c	  1675    /* Management data clock not always needed */
; ..\appl\Source\BrsHw.c	  1676    BrsHwInitPortOutput(BRSHW_PORT_ETH0_MDC);
; ..\appl\Source\BrsHw.c	  1677  # endif
; ..\appl\Source\BrsHw.c	  1678  
; ..\appl\Source\BrsHw.c	  1679  # if defined (_BRSHW_PORT_ETH0_TRCV_EN)
; ..\appl\Source\BrsHw.c	  1680    BrsHwInitPortOutput(BRSHW_PORT_ETH0_TRCV_EN);
; ..\appl\Source\BrsHw.c	  1681    BrsHwPort_SetLevel(BRSHW_PORT_ETH0_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
; ..\appl\Source\BrsHw.c	  1682  # endif
; ..\appl\Source\BrsHw.c	  1683  
; ..\appl\Source\BrsHw.c	  1684  # if defined (BRS_PORT_GROUP_B)
; ..\appl\Source\BrsHw.c	  1685    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1686    while((BRS_PORT_PCSR(BRSHW_PORT_ETH0_TXEN.portGroup) & 0x80000000) != 0);
; ..\appl\Source\BrsHw.c	  1687    BRS_PORT_PCSR(BRSHW_PORT_ETH0_TXEN.portGroup) = (0x01 << BRSHW_PORT_ETH0_TXEN.portNumber) |
; ..\appl\Source\BrsHw.c	  1688                                                    (0x01 << BRSHW_PORT_ETH0_TXD0.portNumber) |
; ..\appl\Source\BrsHw.c	  1689                                                    (0x01 << BRSHW_PORT_ETH0_TXD1.portNumber) |
; ..\appl\Source\BrsHw.c	  1690                                                    (0x01 << BRSHW_PORT_ETH0_TXD2.portNumber) |
; ..\appl\Source\BrsHw.c	  1691                                                    (0x01 << BRSHW_PORT_ETH0_TXD3.portNumber) |
; ..\appl\Source\BrsHw.c	  1692                                                    (0x01 << BRSHW_PORT_ETH0_TXCLK.portNumber);
; ..\appl\Source\BrsHw.c	  1693    /* while((BRS_PORT_PCSR(11) & 0x80000000) != 0); */ /* Wait for unlock */  /* considering lck bit ? */ /*?? Datenblatt vom TC38x ist dieser Bereich reserviert*/
; ..\appl\Source\BrsHw.c	  1694   /*  BRS_PORT_PCSR(11) = 0xFFFF; */ /* Set SEL0-4,6 for fast XY-MII mode */
; ..\appl\Source\BrsHw.c	  1695    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1696  # endif /*BRS_PORT_GROUP_B*/
; ..\appl\Source\BrsHw.c	  1697  #endif /*BRS_ENABLE_ETHERNET_SUPPORT*/
; ..\appl\Source\BrsHw.c	  1698  }
; ..\appl\Source\BrsHw.c	  1699  #endif /*BRS_ENABLE_PORT*/
; ..\appl\Source\BrsHw.c	  1700  
; ..\appl\Source\BrsHw.c	  1701  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1702  /**
; ..\appl\Source\BrsHw.c	  1703   * @brief      Disable the global system interrupt.
; ..\appl\Source\BrsHw.c	  1704   * @pre        Must be the first function call in main@BrsMain
; ..\appl\Source\BrsHw.c	  1705   * @param[in]  -
; ..\appl\Source\BrsHw.c	  1706   * @param[out] -
; ..\appl\Source\BrsHw.c	  1707   * @return     -
; ..\appl\Source\BrsHw.c	  1708   * @context    Function is called from main@BrsMain at power on initialization
; ..\appl\Source\BrsHw.c	  1709   */
; ..\appl\Source\BrsHw.c	  1710  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1711  void BrsHwDisableInterruptAtPowerOn(void)
; Function BrsHwDisableInterruptAtPowerOn
.L10:
BrsHwDisableInterruptAtPowerOn:	.type	func

; ..\appl\Source\BrsHw.c	  1712  {
; ..\appl\Source\BrsHw.c	  1713  #if defined (BRS_COMP_TASKING) 
; ..\appl\Source\BrsHw.c	  1714    __disable();
	disable
.L149:

; ..\appl\Source\BrsHw.c	  1715  #endif /*BRS_COMP_x*/
; ..\appl\Source\BrsHw.c	  1716  }
	ret
.L92:
	
__BrsHwDisableInterruptAtPowerOn_function_end:
	.size	BrsHwDisableInterruptAtPowerOn,__BrsHwDisableInterruptAtPowerOn_function_end-BrsHwDisableInterruptAtPowerOn
.L35:
	; End of function
	
	.sdecl	'.text.BrsHw.BrsHwSoftwareResetECU',code,cluster('BrsHwSoftwareResetECU'),protect
	.sect	'.text.BrsHw.BrsHwSoftwareResetECU'
	.align	2
	
	.global	BrsHwSoftwareResetECU

; ..\appl\Source\BrsHw.c	  1717  
; ..\appl\Source\BrsHw.c	  1718  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1719  /**
; ..\appl\Source\BrsHw.c	  1720   * @brief      restart ECU (issue a software reset or jump to startup code)
; ..\appl\Source\BrsHw.c	  1721   * @pre        -
; ..\appl\Source\BrsHw.c	  1722   * @param[in]  -
; ..\appl\Source\BrsHw.c	  1723   * @param[out] -
; ..\appl\Source\BrsHw.c	  1724   * @return     -
; ..\appl\Source\BrsHw.c	  1725   * @context    Function is called from e.g. ECU state handling
; ..\appl\Source\BrsHw.c	  1726   */
; ..\appl\Source\BrsHw.c	  1727  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1728  void BrsHwSoftwareResetECU(void)
; Function BrsHwSoftwareResetECU
.L12:
BrsHwSoftwareResetECU:	.type	func
	sub.a	a10,#8
.L138:

; ..\appl\Source\BrsHw.c	  1729  {
; ..\appl\Source\BrsHw.c	  1730  #if !defined (BRS_ENABLE_FBL_SUPPORT)
; ..\appl\Source\BrsHw.c	  1731    DisableAllInterrupts();
	call	DisableAllInterrupts
.L154:

; ..\appl\Source\BrsHw.c	  1732  #endif
; ..\appl\Source\BrsHw.c	  1733  
; ..\appl\Source\BrsHw.c	  1734  #if defined (BRS_RESET_GROUP_A)
; ..\appl\Source\BrsHw.c	  1735    BrsHwUnlockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1736    BRS_SWRSTCON |= 0x00000002;
; ..\appl\Source\BrsHw.c	  1737    BrsHwLockInitInline(BRS_SAFETY_WATCHDOG_INDEX);
; ..\appl\Source\BrsHw.c	  1738  
; ..\appl\Source\BrsHw.c	  1739  #elif defined (BRS_RESET_GROUP_B)
; ..\appl\Source\BrsHw.c	  1740    BrsHwUnlockInitInline(BrsHw_GetCore());
	call	BrsHw_GetCore
.L95:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     1  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     2  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     3    COPYRIGHT
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     4  -----------------------------------------------------------------------------------------------------------------------
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     5    \par      copyright
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     6    \verbatim
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     7    Copyright (c) 2020 by Vector Informatik GmbH.                                                  All rights reserved.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     8  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     9                  This software is copyright protected and proprietary to Vector Informatik GmbH.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    10                  Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    11                  All other rights remain with Vector Informatik GmbH.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    12    \endverbatim
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    13  -----------------------------------------------------------------------------------------------------------------------
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    14    FILE DESCRIPTION
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    15  -----------------------------------------------------------------------------------------------------------------------
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    16    \file  File:  BrsHw.h
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    17        Project:  Vector Basic Runtime System
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    18         Module:  BrsHw for platform Infineon Aurix/AurixPlus
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    19  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    20    \brief Description:  This is the hardware specific header file for Vector Basic Runtime System (BRS).
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    21  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    22    \attention Please note:
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    23      The demo and example programs only show special aspects of the software. With regard to the fact
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    24      that these programs are meant for demonstration purposes only, Vector Informatik liability shall be
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    25      expressly excluded in cases of ordinary negligence, to the extent admissible by law or statute.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    26  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    27  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    28  #ifndef _BRSHW_H_
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    29  #define _BRSHW_H_
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    30  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    31  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    32    INCLUDES
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    33  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    34  /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    35   * Description: The BrsCfg header is used to configure different types of
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    36   *              tests and system setups. Therefore it must be included first
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    37   *              in each BRS and test module.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    38   *              This file is part of the BRS.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    39   */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    40  #include "vBrsCfg.h"
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    41  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    42  #if defined (BRS_ENABLE_PORT)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    43    #include "BrsHw_Ports.h"
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    44  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    45  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    46  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    47    MODULE VERSION
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    48  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    49  /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    50   * Description: This is the BrsHw main and bug fix version. The version numbers are BCD coded.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    51   *              E.g. a main version of 1.23 is coded with 0x0123, a bug fix version of 9 is coded 0x09.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    52   */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    53  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    54  /* This is the BrsHw template main and bug fix version, the platform BrsHw is reviewed to */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    55  #define BRSHW_SOURCECODE_TEMPLATE_VERSION        0x0101u
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    56  #define BRSHW_SOURCECODE_TEMPLATE_BUGFIX_VERSION 0x01u
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    57  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    58  /* This is the BrsHw main and bug fix version */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    59  #define BRSHW_VERSION        0x0103u
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    60  #define BRSHW_BUGFIX_VERSION 0x02u
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    61  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    62  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    63    CONFIGURATION CHECK
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    64  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    65  /* The following parameters are necessary for this platform, to be generated by BRS-Cfg5-Generator into BrsCfg.h */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    66  #if !defined (BRS_OSC_CLK)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    67    #error "BRS CHECK: The parameter BRS_OSC_CLK is missing! Please check your BRS Cfg5 configuration."
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    68  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    69  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    70  #if !defined (BRS_TIMEBASE_CLOCK)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    71    #error "BRS CHECK: The parameter BRS_TIMEBASE_CLOCK is missing! Please check your BRS Cfg5 configuration."
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    72  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    73  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    74  #if !defined (BRS_PERIPH_CLOCK)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    75    #error "BRS CHECK: The parameter BRS_PERIPH_CLOCK is missing! Please check your BRS Cfg5 configuration."
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    76  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    77  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    78  #if !defined (BRS_CPU_MAX_FREQUENCY)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    79    #error "BRS CHECK: The parameter BRS_CPU_MAX_FREQUENCY is missing! Please check your BRS Cfg5 configuration."
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    80  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    81  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    82  #if !(defined (BRS_CPU_CORE_TC161) || defined (BRS_CPU_CORE_TC162) || defined (BRS_CPU_CORE_TC18))
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    83    #error "BRS CHECK: The parameter BRS_CPU_CORE_x is missing or not supported! Please check your BRS Cfg5 configuration."
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    84  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    85  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    86  #if !defined (BRS_CPU_CORE_AMOUNT)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    87    #error "BRS CHECK: The parameter BRS_CPU_CORE_AMOUNT is missing! Please check your BRS Cfg5 configuration."
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    88  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    89  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    90  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    91    GLOBAL CONSTANT MACROS
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    92  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    93  /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    94   * Description: Macro for access to IO addresses
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    95   */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    96  #define BRSHW_IOS(type, address) (*((volatile type *)(address)))
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    97  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    98  /* STATIC */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    99  #define BRSHW_DERIVATIVE_CORE0_ID  0x0
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   100  #define BRSHW_DERIVATIVE_CORE1_ID  0x1
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   101  #define BRSHW_DERIVATIVE_CORE2_ID  0x2
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   102  #define BRSHW_DERIVATIVE_CORE3_ID  0x3
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   103  #define BRSHW_DERIVATIVE_CORE4_ID  0x4
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   104  #define BRSHW_DERIVATIVE_CORE5_ID  0x6
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   105  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   106  /* DERIVATIVE DEPENDENT STATIC */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   107  #define BRSHW_INIT_CORE_ID  BRSHW_DERIVATIVE_CORE0_ID
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   108  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   109  #define BRS_CORE_ID_REGISTER  0xFE1C
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   110  #define BRS_PCXI_OFFSET       0xFE00
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   111  #define BRS_PSW_OFFSET        0xFE04
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   112  #define BRS_FCX_OFFSET        0xFE38
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   113  #define BRS_LCX_OFFSET        0xFE3C
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   114  #define BRS_BTV_OFFSET        0xFE24
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   115  #define BRS_BIV_OFFSET        0xFE20
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   116  #define BRS_PCON0_OFFSET      0x920C
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   117  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   118  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   119    Compiler abstraction
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   120  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   121  #if defined (BRS_COMP_TASKING)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   122    #define nop()                    __nop()
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   123  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   124    #define BRS_FORCE_ACTIVE         __attribute__((protect))
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   125  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   126    #define BRS_ISYNC()              __isync()
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   127    #define BRS_DSYNC()              __dsync()
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   128  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   129    #define BRS_HAL_EXPAND(x)        #x
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   130  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   131    #define BRS_MOVE_FROM_CSFR(x)    (uint32)__mfcr((sint32)(x))
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   132    #define BRS_MOVE_TO_CSFR(x, y)   BRS_DSYNC(); __asm("mtcr  #"BRS_HAL_EXPAND(x)", %0" ::"d"(y):); BRS_ISYNC()
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   133  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   134    #define BRS_SET_SP(x)            __asm("mov.a  a10, %0" ::"d"(x):"a10")
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   135  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   136    #define BRS_STARTUP_LABEL(c)     _Pragma("section code brsStartupEntry") \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   137                                     _Pragma("optimize g")                   \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   138                                     void c(void)                            \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   139                                     {                                       \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   140                                      __asm(".GLOBAL StartupEntry");                       \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   141                                      __asm("StartupEntry:");                              \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   142                                      __asm("movh.a a4, #@his(brsStartupEntry_internal)"); \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   143                                      __asm("lea a4,[a4]@los(brsStartupEntry_internal)");  \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   144                                      __asm("ji a4");                       \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   145                                     }                                      \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   146                                     _Pragma("optimize restore")            \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   147                                     _Pragma("section code restore")
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   148  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   149      #define BRS_FUNC_DECLARATION(rettype, attribute, functionName, arguments) \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   150           rettype functionName (arguments) __attribute__((attribute))
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   151  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   152      #define BRS_FUNC_DECLARATION_PROTOTYPE(rettype, attribute, functionName, arguments) \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   153           rettype functionName (arguments) __attribute__((attribute))
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   154   
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   155  #else
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   156    #error "Compiler not yet supported"
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   157  #endif /*BRS_COMP_x*/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   158  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   159  /* Reads core id value */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   160  #define BRS_READ_COREID()  BRS_MOVE_FROM_CSFR(BRS_CORE_ID_REGISTER)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   161  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   162  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   163    BrsHW configuration
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   164  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   165  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   166  /*******************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   167    WATCHDOG  GROUP  CONFIG
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   168  *******************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   169  #define BRS_SAFETY_WATCHDOG_INDEX  -1
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   170  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   171  #if defined (BRS_WATCHDOG_GROUP_A)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   172    #define BRS_SFR_WDTCPU0CON0_ADDRESS 0xF0036100
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   173    #define BRS_SFR_WDTCPU1CON0_ADDRESS 0xF003610C
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   174    #define BRS_SFR_WDTCPU2CON0_ADDRESS 0xF0036118
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   175    #define BRS_SFR_WDTSCON0_ADDRESS    0xF00360F0
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   176  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   177    #define BRS_SFR_WDTCPU0CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU0CON0_ADDRESS)  /* original name: SCU_WDTCPU0CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   178    #define BRS_SFR_WDTCPU0CON1  BRSHW_IOS(uint32, 0xF0036104)  /* original name: SCU_WDTCPU0CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   179  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   180    #define BRS_SFR_WDTCPU1CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU1CON0_ADDRESS)  /* original name: SCU_WDTCPU1CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   181    #define BRS_SFR_WDTCPU1CON1  BRSHW_IOS(uint32, 0xF0036110)  /* original name: SCU_WDTCPU1CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   182  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   183    #define BRS_SFR_WDTCPU2CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU2CON0_ADDRESS)  /* original name: SCU_WDTCPU2CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   184    #define BRS_SFR_WDTCPU2CON1  BRSHW_IOS(uint32, 0xF003611C)  /* original name: SCU_WDTCPU2CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   185  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   186    #define BRS_SFR_WDTSCON0     BRSHW_IOS(uint32, BRS_SFR_WDTSCON0_ADDRESS)  /* original name: SCU_WDTSCON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   187    #define BRS_SFR_WDTSCON1     BRSHW_IOS(uint32, 0xF00360F4)  /* original name: SCU_WDTSCON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   188    
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   189    #define BRS_SAFETY_WATCHDOG_ARRAY_INDEX 3
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   190  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   191  #elif defined (BRS_WATCHDOG_GROUP_B)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   192    #define BRS_SFR_WDTCPU0CON0_ADDRESS 0xF003624C
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   193    #define BRS_SFR_WDTCPU1CON0_ADDRESS 0xF0036258
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   194    #define BRS_SFR_WDTCPU2CON0_ADDRESS 0xF0036264
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   195    #define BRS_SFR_WDTCPU3CON0_ADDRESS 0xF0036270
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   196    #define BRS_SFR_WDTCPU4CON0_ADDRESS 0xF003627C
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   197    #define BRS_SFR_WDTCPU5CON0_ADDRESS 0xF0036288
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   198    #define BRS_SFR_WDTSCON0_ADDRESS    0xF00362A8
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   199  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   200    #define BRS_SFR_WDTCPU0CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU0CON0_ADDRESS)  /* CPU0 WDT Control Register 0 - original name: SCU_WDTCPU0CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   201    #define BRS_SFR_WDTCPU0CON1  BRSHW_IOS(uint32, 0xF0036250)  /* CPU0 WDT Control Register 1 - original name: SCU_WDTCPU0CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   202    #define BRS_SFR_WDTCPU0_SR   BRSHW_IOS(uint32, 0xF0036254)  /* CPU0 WDT Status Register - original name: SCU_WDTCPU0_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   203  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   204    #define BRS_SFR_WDTCPU1CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU1CON0_ADDRESS)  /* CPU1 WDT Control Register 0 - original name: SCU_WDTCPU1CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   205    #define BRS_SFR_WDTCPU1CON1  BRSHW_IOS(uint32, 0xF003625C)  /* CPU1 WDT Control Register 1 - original name: SCU_WDTCPU1CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   206    #define BRS_SFR_WDTCPU1_SR   BRSHW_IOS(uint32, 0xF0036260)  /* CPU1 WDT Status Register - original name: SCU_WDTCPU1_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   207  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   208    #define BRS_SFR_WDTCPU2CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU2CON0_ADDRESS)  /* CPU2 WDT Control Register 0 - original name: SCU_WDTCPU2CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   209    #define BRS_SFR_WDTCPU2CON1  BRSHW_IOS(uint32, 0xF0036268)  /* CPU2 WDT Control Register 1 - original name: SCU_WDTCPU2CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   210    #define BRS_SFR_WDTCPU2_SR   BRSHW_IOS(uint32, 0xF003626C)  /* CPU2 WDT Status Register - original name: SCU_WDTCPU2_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   211  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   212    #define BRS_SFR_WDTCPU3CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU3CON0_ADDRESS)  /* CPU3 WDT Control Register 0 - original name: SCU_WDTCPU3CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   213    #define BRS_SFR_WDTCPU3CON1  BRSHW_IOS(uint32, 0xF0036274)  /* CPU3 WDT Control Register 1 - original name: SCU_WDTCPU3CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   214    #define BRS_SFR_WDTCPU3_SR   BRSHW_IOS(uint32, 0xF0036278)  /* CPU3 WDT Status Register - original name: SCU_WDTCPU3_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   215  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   216    #define BRS_SFR_WDTCPU4CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU4CON0_ADDRESS)  /* CPU4 WDT Control Register 0 - original name: SCU_WDTCPU4CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   217    #define BRS_SFR_WDTCPU4CON1  BRSHW_IOS(uint32, 0xF0036280)  /* CPU4 WDT Control Register 1 - original name: SCU_WDTCPU4CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   218    #define BRS_SFR_WDTCPU4_SR   BRSHW_IOS(uint32, 0xF0036284)  /* CPU4 WDT Status Register - original name: SCU_WDTCPU4_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   219  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   220    #define BRS_SFR_WDTCPU5CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU5CON0_ADDRESS)  /* CPU5 WDT Control Register 0 - original name: SCU_WDTCPU5CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   221    #define BRS_SFR_WDTCPU5CON1  BRSHW_IOS(uint32, 0xF003628C)  /* CPU5 WDT Control Register 1 - original name: SCU_WDTCPU5CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   222    #define BRS_SFR_WDTCPU5_SR   BRSHW_IOS(uint32, 0xF0036290)  /* CPU5 WDT Status Register - original name: SCU_WDTCPU5_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   223  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   224    #define BRS_SFR_WDTSCON0     BRSHW_IOS(uint32, BRS_SFR_WDTSCON0_ADDRESS)  /* Safety WDT Control Register 0 - original name: SCU_WDTS_CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   225    #define BRS_SFR_WDTSCON1     BRSHW_IOS(uint32, 0xF00362AC)  /* Safety WDT Control Register 1 - original name: SCU_WDTS_CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   226  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   227    #define BRS_SAFETY_WATCHDOG_ARRAY_INDEX 7
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   228  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   229    #define BRS_SFR_WDTS_SR      BRSHW_IOS(uint32, 0xF00362B0)  /* Safety WDT Status Register - original name: SCU_WDTS_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   230  #endif /*BRS_WATCHDOG_GROUP_x*/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   231  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   232  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   233    Global variables
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   234  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   235  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   236  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   237    Global const variables
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   238  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   239  /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   240   * Description: These constants are used to propagate the Versions over module boundaries.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   241   *              The version numbers are BCD coded. E.g. a sub version of 23 is coded with 0x23, 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   242   *              a bug fix version of 9 is coded 0x09.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   243   */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   244  extern uint8 const kBrsHwMainVersion;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   245  extern uint8 const kBrsHwSubVersion;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   246  extern uint8 const kBrsHwBugfixVersion;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   247  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   248  #if defined (BRS_WATCHDOG_GROUP_A)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   249  extern const uint32 kBrsWdtCon0Addresses[4];
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   250  #elif defined (BRS_WATCHDOG_GROUP_B)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   251  extern const uint32 kBrsWdtCon0Addresses[8];
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   252  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   253  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   254  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   255    Global function prototypes
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   256  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   257  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   258   /*******************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   259   CPU Core Amount (number of cores)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   260  *******************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   261  BRS_FUNC_DECLARATION_PROTOTYPE(static uint32 *, always_inline, BrsHw_GetAddrWDTCON0, sint32 nr);
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   262  BRS_FUNC_DECLARATION(static uint32 *, always_inline, BrsHw_GetAddrWDTCON0, sint32 nr)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   263  {
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   264    if (nr == BRS_SAFETY_WATCHDOG_INDEX)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   265    {
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   266      return (uint32*)(kBrsWdtCon0Addresses[BRS_SAFETY_WATCHDOG_ARRAY_INDEX]);
	movh.a	a12,#61443
	lea	a12,[a12]@los(0xf00362a8)
.L155:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   267    }
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   268    else
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   269    {
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   270      return (uint32*)(kBrsWdtCon0Addresses[nr]);
	movh.a	a13,#@his(kBrsWdtCon0Addresses)
	lea	a13,[a13]@los(kBrsWdtCon0Addresses)
.L156:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   264    if (nr == BRS_SAFETY_WATCHDOG_INDEX)      (inlined)
	jne	d2,#-1,.L2
.L157:
	mov.aa	a15,a12

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   266      return (uint32*)(kBrsWdtCon0Addresses[BRS_SAFETY_WATCHDOG_ARRAY_INDEX]);      (inlined)
	j	.L3

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   264    if (nr == BRS_SAFETY_WATCHDOG_INDEX)      (inlined)
.L2:
	addsc.a	a15,a13,d2,#2
	ld.w	d15,[a15]
.L158:
	mov.a	a15,d15

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   272  }      (inlined)
.L3:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   271    }
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   272  }
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   273  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   274  /*****************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   275  /**
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   276   * @brief Routine to unlock registers that are normally protected
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   277   * @pre   Interrupts must be disabled
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   278   */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   279  /*****************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   280  BRS_FUNC_DECLARATION_PROTOTYPE(static void, always_inline, BrsHwUnlockInitInline, sint32 coreID);
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   281  BRS_FUNC_DECLARATION(static void, always_inline, BrsHwUnlockInitInline, sint32 coreID)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   282  {
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   283    volatile uint32 wdtcon0value;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   284    uint32 *WDTCON0;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   285  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   286    WDTCON0 = BrsHw_GetAddrWDTCON0(coreID);
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   287  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   288    /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   289     * 1st step: Password access (create password and send to WDT_CON0)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   290     */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   291    wdtcon0value = *WDTCON0;
	ld.w	d15,[a15]
.L159:
	st.w	[a10],d15
.L160:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   292    wdtcon0value &= 0xFFFFFF01;  /* clear WDTLCK, WDTHPW0, WDTHPW1 */
	ld.w	d15,[a10]
.L161:
	insert	d15,d15,#0,#1,#7
	st.w	[a10],d15
.L162:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   293    wdtcon0value |= 0xF0;        /* set WDTHPW1 to 0xf */
	ld.w	d15,[a10]
.L163:
	or	d15,#240
	st.w	[a10],d15
.L164:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   294    wdtcon0value |= 0x01;        /* 1 must be written to ENDINIT for password access
	ld.w	d15,[a10]
.L165:
	or	d15,#1
	st.w	[a10],d15
.L166:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   295                                  (but this will not actually modify the bit) */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   296    *WDTCON0 = wdtcon0value; /* modify access to WDTCON0 */
	ld.w	d15,[a10]
.L167:
	st.w	[a15],d15
.L168:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   297    /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   298     * 2nd step: Modify access, set the bit ENDINIT to 1 or 0 to allow access to
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   299     *           registers: WDT_CON1, BTV, BIV, ISP and mod_CLC
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   300     */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   301    wdtcon0value &= 0xFFFFFFF0;  /* clear WDTHPW0, WDTLCK, ENDINIT  */
	ld.w	d15,[a10]
.L169:
	insert	d15,d15,#0,#0,#4
	st.w	[a10],d15
.L170:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   302    wdtcon0value |= 0x02;        /* WDTHPW0=0, WDTLCK=1, ENDINIT=0 */
	ld.w	d15,[a10]
.L171:
	or	d15,#2
	st.w	[a10],d15
.L172:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   303    BRS_ISYNC();
	isync
.L173:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   304    *WDTCON0 = wdtcon0value;
	ld.w	d15,[a10]
.L174:
	st.w	[a15],d15
.L175:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   305    wdtcon0value = *WDTCON0; /* read is required */
	st.w	[a10],d15
.L176:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   306    BRS_ISYNC();
	isync
.L177:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   307    BRS_DSYNC();
	dsync
.L96:

; ..\appl\Source\BrsHw.c	  1741    BRS_SWRSTCON |= 0x00000002;
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf0036060)
.L178:
	or	d15,#2
	st.w	[a15]@los(0xf0036060),d15
.L179:

; ..\appl\Source\BrsHw.c	  1742    BrsHwLockInitInline(BrsHw_GetCore());
	call	BrsHw_GetCore
.L109:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   264    if (nr == BRS_SAFETY_WATCHDOG_INDEX)      (inlined)
	jeq	d2,#-1,.L5
.L180:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     1  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     2  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     3    COPYRIGHT
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     4  -----------------------------------------------------------------------------------------------------------------------
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     5    \par      copyright
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     6    \verbatim
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     7    Copyright (c) 2020 by Vector Informatik GmbH.                                                  All rights reserved.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     8  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	     9                  This software is copyright protected and proprietary to Vector Informatik GmbH.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    10                  Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    11                  All other rights remain with Vector Informatik GmbH.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    12    \endverbatim
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    13  -----------------------------------------------------------------------------------------------------------------------
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    14    FILE DESCRIPTION
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    15  -----------------------------------------------------------------------------------------------------------------------
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    16    \file  File:  BrsHw.h
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    17        Project:  Vector Basic Runtime System
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    18         Module:  BrsHw for platform Infineon Aurix/AurixPlus
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    19  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    20    \brief Description:  This is the hardware specific header file for Vector Basic Runtime System (BRS).
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    21  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    22    \attention Please note:
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    23      The demo and example programs only show special aspects of the software. With regard to the fact
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    24      that these programs are meant for demonstration purposes only, Vector Informatik liability shall be
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    25      expressly excluded in cases of ordinary negligence, to the extent admissible by law or statute.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    26  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    27  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    28  #ifndef _BRSHW_H_
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    29  #define _BRSHW_H_
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    30  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    31  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    32    INCLUDES
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    33  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    34  /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    35   * Description: The BrsCfg header is used to configure different types of
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    36   *              tests and system setups. Therefore it must be included first
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    37   *              in each BRS and test module.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    38   *              This file is part of the BRS.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    39   */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    40  #include "vBrsCfg.h"
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    41  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    42  #if defined (BRS_ENABLE_PORT)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    43    #include "BrsHw_Ports.h"
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    44  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    45  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    46  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    47    MODULE VERSION
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    48  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    49  /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    50   * Description: This is the BrsHw main and bug fix version. The version numbers are BCD coded.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    51   *              E.g. a main version of 1.23 is coded with 0x0123, a bug fix version of 9 is coded 0x09.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    52   */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    53  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    54  /* This is the BrsHw template main and bug fix version, the platform BrsHw is reviewed to */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    55  #define BRSHW_SOURCECODE_TEMPLATE_VERSION        0x0101u
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    56  #define BRSHW_SOURCECODE_TEMPLATE_BUGFIX_VERSION 0x01u
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    57  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    58  /* This is the BrsHw main and bug fix version */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    59  #define BRSHW_VERSION        0x0103u
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    60  #define BRSHW_BUGFIX_VERSION 0x02u
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    61  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    62  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    63    CONFIGURATION CHECK
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    64  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    65  /* The following parameters are necessary for this platform, to be generated by BRS-Cfg5-Generator into BrsCfg.h */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    66  #if !defined (BRS_OSC_CLK)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    67    #error "BRS CHECK: The parameter BRS_OSC_CLK is missing! Please check your BRS Cfg5 configuration."
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    68  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    69  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    70  #if !defined (BRS_TIMEBASE_CLOCK)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    71    #error "BRS CHECK: The parameter BRS_TIMEBASE_CLOCK is missing! Please check your BRS Cfg5 configuration."
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    72  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    73  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    74  #if !defined (BRS_PERIPH_CLOCK)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    75    #error "BRS CHECK: The parameter BRS_PERIPH_CLOCK is missing! Please check your BRS Cfg5 configuration."
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    76  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    77  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    78  #if !defined (BRS_CPU_MAX_FREQUENCY)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    79    #error "BRS CHECK: The parameter BRS_CPU_MAX_FREQUENCY is missing! Please check your BRS Cfg5 configuration."
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    80  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    81  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    82  #if !(defined (BRS_CPU_CORE_TC161) || defined (BRS_CPU_CORE_TC162) || defined (BRS_CPU_CORE_TC18))
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    83    #error "BRS CHECK: The parameter BRS_CPU_CORE_x is missing or not supported! Please check your BRS Cfg5 configuration."
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    84  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    85  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    86  #if !defined (BRS_CPU_CORE_AMOUNT)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    87    #error "BRS CHECK: The parameter BRS_CPU_CORE_AMOUNT is missing! Please check your BRS Cfg5 configuration."
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    88  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    89  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    90  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    91    GLOBAL CONSTANT MACROS
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    92  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    93  /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    94   * Description: Macro for access to IO addresses
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    95   */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    96  #define BRSHW_IOS(type, address) (*((volatile type *)(address)))
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    97  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    98  /* STATIC */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	    99  #define BRSHW_DERIVATIVE_CORE0_ID  0x0
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   100  #define BRSHW_DERIVATIVE_CORE1_ID  0x1
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   101  #define BRSHW_DERIVATIVE_CORE2_ID  0x2
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   102  #define BRSHW_DERIVATIVE_CORE3_ID  0x3
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   103  #define BRSHW_DERIVATIVE_CORE4_ID  0x4
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   104  #define BRSHW_DERIVATIVE_CORE5_ID  0x6
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   105  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   106  /* DERIVATIVE DEPENDENT STATIC */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   107  #define BRSHW_INIT_CORE_ID  BRSHW_DERIVATIVE_CORE0_ID
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   108  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   109  #define BRS_CORE_ID_REGISTER  0xFE1C
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   110  #define BRS_PCXI_OFFSET       0xFE00
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   111  #define BRS_PSW_OFFSET        0xFE04
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   112  #define BRS_FCX_OFFSET        0xFE38
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   113  #define BRS_LCX_OFFSET        0xFE3C
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   114  #define BRS_BTV_OFFSET        0xFE24
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   115  #define BRS_BIV_OFFSET        0xFE20
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   116  #define BRS_PCON0_OFFSET      0x920C
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   117  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   118  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   119    Compiler abstraction
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   120  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   121  #if defined (BRS_COMP_TASKING)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   122    #define nop()                    __nop()
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   123  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   124    #define BRS_FORCE_ACTIVE         __attribute__((protect))
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   125  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   126    #define BRS_ISYNC()              __isync()
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   127    #define BRS_DSYNC()              __dsync()
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   128  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   129    #define BRS_HAL_EXPAND(x)        #x
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   130  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   131    #define BRS_MOVE_FROM_CSFR(x)    (uint32)__mfcr((sint32)(x))
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   132    #define BRS_MOVE_TO_CSFR(x, y)   BRS_DSYNC(); __asm("mtcr  #"BRS_HAL_EXPAND(x)", %0" ::"d"(y):); BRS_ISYNC()
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   133  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   134    #define BRS_SET_SP(x)            __asm("mov.a  a10, %0" ::"d"(x):"a10")
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   135  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   136    #define BRS_STARTUP_LABEL(c)     _Pragma("section code brsStartupEntry") \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   137                                     _Pragma("optimize g")                   \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   138                                     void c(void)                            \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   139                                     {                                       \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   140                                      __asm(".GLOBAL StartupEntry");                       \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   141                                      __asm("StartupEntry:");                              \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   142                                      __asm("movh.a a4, #@his(brsStartupEntry_internal)"); \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   143                                      __asm("lea a4,[a4]@los(brsStartupEntry_internal)");  \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   144                                      __asm("ji a4");                       \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   145                                     }                                      \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   146                                     _Pragma("optimize restore")            \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   147                                     _Pragma("section code restore")
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   148  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   149      #define BRS_FUNC_DECLARATION(rettype, attribute, functionName, arguments) \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   150           rettype functionName (arguments) __attribute__((attribute))
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   151  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   152      #define BRS_FUNC_DECLARATION_PROTOTYPE(rettype, attribute, functionName, arguments) \ 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   153           rettype functionName (arguments) __attribute__((attribute))
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   154   
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   155  #else
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   156    #error "Compiler not yet supported"
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   157  #endif /*BRS_COMP_x*/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   158  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   159  /* Reads core id value */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   160  #define BRS_READ_COREID()  BRS_MOVE_FROM_CSFR(BRS_CORE_ID_REGISTER)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   161  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   162  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   163    BrsHW configuration
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   164  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   165  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   166  /*******************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   167    WATCHDOG  GROUP  CONFIG
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   168  *******************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   169  #define BRS_SAFETY_WATCHDOG_INDEX  -1
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   170  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   171  #if defined (BRS_WATCHDOG_GROUP_A)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   172    #define BRS_SFR_WDTCPU0CON0_ADDRESS 0xF0036100
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   173    #define BRS_SFR_WDTCPU1CON0_ADDRESS 0xF003610C
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   174    #define BRS_SFR_WDTCPU2CON0_ADDRESS 0xF0036118
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   175    #define BRS_SFR_WDTSCON0_ADDRESS    0xF00360F0
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   176  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   177    #define BRS_SFR_WDTCPU0CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU0CON0_ADDRESS)  /* original name: SCU_WDTCPU0CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   178    #define BRS_SFR_WDTCPU0CON1  BRSHW_IOS(uint32, 0xF0036104)  /* original name: SCU_WDTCPU0CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   179  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   180    #define BRS_SFR_WDTCPU1CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU1CON0_ADDRESS)  /* original name: SCU_WDTCPU1CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   181    #define BRS_SFR_WDTCPU1CON1  BRSHW_IOS(uint32, 0xF0036110)  /* original name: SCU_WDTCPU1CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   182  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   183    #define BRS_SFR_WDTCPU2CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU2CON0_ADDRESS)  /* original name: SCU_WDTCPU2CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   184    #define BRS_SFR_WDTCPU2CON1  BRSHW_IOS(uint32, 0xF003611C)  /* original name: SCU_WDTCPU2CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   185  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   186    #define BRS_SFR_WDTSCON0     BRSHW_IOS(uint32, BRS_SFR_WDTSCON0_ADDRESS)  /* original name: SCU_WDTSCON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   187    #define BRS_SFR_WDTSCON1     BRSHW_IOS(uint32, 0xF00360F4)  /* original name: SCU_WDTSCON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   188    
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   189    #define BRS_SAFETY_WATCHDOG_ARRAY_INDEX 3
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   190  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   191  #elif defined (BRS_WATCHDOG_GROUP_B)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   192    #define BRS_SFR_WDTCPU0CON0_ADDRESS 0xF003624C
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   193    #define BRS_SFR_WDTCPU1CON0_ADDRESS 0xF0036258
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   194    #define BRS_SFR_WDTCPU2CON0_ADDRESS 0xF0036264
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   195    #define BRS_SFR_WDTCPU3CON0_ADDRESS 0xF0036270
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   196    #define BRS_SFR_WDTCPU4CON0_ADDRESS 0xF003627C
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   197    #define BRS_SFR_WDTCPU5CON0_ADDRESS 0xF0036288
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   198    #define BRS_SFR_WDTSCON0_ADDRESS    0xF00362A8
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   199  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   200    #define BRS_SFR_WDTCPU0CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU0CON0_ADDRESS)  /* CPU0 WDT Control Register 0 - original name: SCU_WDTCPU0CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   201    #define BRS_SFR_WDTCPU0CON1  BRSHW_IOS(uint32, 0xF0036250)  /* CPU0 WDT Control Register 1 - original name: SCU_WDTCPU0CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   202    #define BRS_SFR_WDTCPU0_SR   BRSHW_IOS(uint32, 0xF0036254)  /* CPU0 WDT Status Register - original name: SCU_WDTCPU0_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   203  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   204    #define BRS_SFR_WDTCPU1CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU1CON0_ADDRESS)  /* CPU1 WDT Control Register 0 - original name: SCU_WDTCPU1CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   205    #define BRS_SFR_WDTCPU1CON1  BRSHW_IOS(uint32, 0xF003625C)  /* CPU1 WDT Control Register 1 - original name: SCU_WDTCPU1CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   206    #define BRS_SFR_WDTCPU1_SR   BRSHW_IOS(uint32, 0xF0036260)  /* CPU1 WDT Status Register - original name: SCU_WDTCPU1_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   207  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   208    #define BRS_SFR_WDTCPU2CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU2CON0_ADDRESS)  /* CPU2 WDT Control Register 0 - original name: SCU_WDTCPU2CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   209    #define BRS_SFR_WDTCPU2CON1  BRSHW_IOS(uint32, 0xF0036268)  /* CPU2 WDT Control Register 1 - original name: SCU_WDTCPU2CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   210    #define BRS_SFR_WDTCPU2_SR   BRSHW_IOS(uint32, 0xF003626C)  /* CPU2 WDT Status Register - original name: SCU_WDTCPU2_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   211  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   212    #define BRS_SFR_WDTCPU3CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU3CON0_ADDRESS)  /* CPU3 WDT Control Register 0 - original name: SCU_WDTCPU3CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   213    #define BRS_SFR_WDTCPU3CON1  BRSHW_IOS(uint32, 0xF0036274)  /* CPU3 WDT Control Register 1 - original name: SCU_WDTCPU3CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   214    #define BRS_SFR_WDTCPU3_SR   BRSHW_IOS(uint32, 0xF0036278)  /* CPU3 WDT Status Register - original name: SCU_WDTCPU3_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   215  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   216    #define BRS_SFR_WDTCPU4CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU4CON0_ADDRESS)  /* CPU4 WDT Control Register 0 - original name: SCU_WDTCPU4CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   217    #define BRS_SFR_WDTCPU4CON1  BRSHW_IOS(uint32, 0xF0036280)  /* CPU4 WDT Control Register 1 - original name: SCU_WDTCPU4CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   218    #define BRS_SFR_WDTCPU4_SR   BRSHW_IOS(uint32, 0xF0036284)  /* CPU4 WDT Status Register - original name: SCU_WDTCPU4_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   219  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   220    #define BRS_SFR_WDTCPU5CON0  BRSHW_IOS(uint32, BRS_SFR_WDTCPU5CON0_ADDRESS)  /* CPU5 WDT Control Register 0 - original name: SCU_WDTCPU5CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   221    #define BRS_SFR_WDTCPU5CON1  BRSHW_IOS(uint32, 0xF003628C)  /* CPU5 WDT Control Register 1 - original name: SCU_WDTCPU5CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   222    #define BRS_SFR_WDTCPU5_SR   BRSHW_IOS(uint32, 0xF0036290)  /* CPU5 WDT Status Register - original name: SCU_WDTCPU5_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   223  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   224    #define BRS_SFR_WDTSCON0     BRSHW_IOS(uint32, BRS_SFR_WDTSCON0_ADDRESS)  /* Safety WDT Control Register 0 - original name: SCU_WDTS_CON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   225    #define BRS_SFR_WDTSCON1     BRSHW_IOS(uint32, 0xF00362AC)  /* Safety WDT Control Register 1 - original name: SCU_WDTS_CON1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   226  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   227    #define BRS_SAFETY_WATCHDOG_ARRAY_INDEX 7
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   228  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   229    #define BRS_SFR_WDTS_SR      BRSHW_IOS(uint32, 0xF00362B0)  /* Safety WDT Status Register - original name: SCU_WDTS_SR */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   230  #endif /*BRS_WATCHDOG_GROUP_x*/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   231  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   232  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   233    Global variables
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   234  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   235  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   236  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   237    Global const variables
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   238  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   239  /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   240   * Description: These constants are used to propagate the Versions over module boundaries.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   241   *              The version numbers are BCD coded. E.g. a sub version of 23 is coded with 0x23, 
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   242   *              a bug fix version of 9 is coded 0x09.
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   243   */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   244  extern uint8 const kBrsHwMainVersion;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   245  extern uint8 const kBrsHwSubVersion;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   246  extern uint8 const kBrsHwBugfixVersion;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   247  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   248  #if defined (BRS_WATCHDOG_GROUP_A)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   249  extern const uint32 kBrsWdtCon0Addresses[4];
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   250  #elif defined (BRS_WATCHDOG_GROUP_B)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   251  extern const uint32 kBrsWdtCon0Addresses[8];
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   252  #endif
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   253  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   254  /**********************************************************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   255    Global function prototypes
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   256  **********************************************************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   257  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   258   /*******************************************************************************
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   259   CPU Core Amount (number of cores)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   260  *******************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   261  BRS_FUNC_DECLARATION_PROTOTYPE(static uint32 *, always_inline, BrsHw_GetAddrWDTCON0, sint32 nr);
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   262  BRS_FUNC_DECLARATION(static uint32 *, always_inline, BrsHw_GetAddrWDTCON0, sint32 nr)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   263  {
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   264    if (nr == BRS_SAFETY_WATCHDOG_INDEX)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   265    {
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   266      return (uint32*)(kBrsWdtCon0Addresses[BRS_SAFETY_WATCHDOG_ARRAY_INDEX]);
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   267    }
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   268    else
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   269    {
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   270      return (uint32*)(kBrsWdtCon0Addresses[nr]);
	addsc.a	a15,a13,d2,#2
	ld.w	d15,[a15]
.L181:
	mov.a	a12,d15

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   272  }      (inlined)
.L5:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   271    }
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   272  }
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   273  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   274  /*****************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   275  /**
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   276   * @brief Routine to unlock registers that are normally protected
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   277   * @pre   Interrupts must be disabled
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   278   */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   279  /*****************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   280  BRS_FUNC_DECLARATION_PROTOTYPE(static void, always_inline, BrsHwUnlockInitInline, sint32 coreID);
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   281  BRS_FUNC_DECLARATION(static void, always_inline, BrsHwUnlockInitInline, sint32 coreID)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   282  {
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   283    volatile uint32 wdtcon0value;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   284    uint32 *WDTCON0;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   285  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   286    WDTCON0 = BrsHw_GetAddrWDTCON0(coreID);
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   287  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   288    /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   289     * 1st step: Password access (create password and send to WDT_CON0)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   290     */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   291    wdtcon0value = *WDTCON0;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   292    wdtcon0value &= 0xFFFFFF01;  /* clear WDTLCK, WDTHPW0, WDTHPW1 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   293    wdtcon0value |= 0xF0;        /* set WDTHPW1 to 0xf */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   294    wdtcon0value |= 0x01;        /* 1 must be written to ENDINIT for password access
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   295                                  (but this will not actually modify the bit) */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   296    *WDTCON0 = wdtcon0value; /* modify access to WDTCON0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   297    /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   298     * 2nd step: Modify access, set the bit ENDINIT to 1 or 0 to allow access to
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   299     *           registers: WDT_CON1, BTV, BIV, ISP and mod_CLC
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   300     */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   301    wdtcon0value &= 0xFFFFFFF0;  /* clear WDTHPW0, WDTLCK, ENDINIT  */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   302    wdtcon0value |= 0x02;        /* WDTHPW0=0, WDTLCK=1, ENDINIT=0 */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   303    BRS_ISYNC();
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   304    *WDTCON0 = wdtcon0value;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   305    wdtcon0value = *WDTCON0; /* read is required */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   306    BRS_ISYNC();
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   307    BRS_DSYNC();
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   308  }
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   309  
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   310  /*****************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   311  /**
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   312   * @brief Routine to lock registers that are normally protected
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   313   * @pre   Interrupts must be disabled
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   314   */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   315  /*****************************************************************************/
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   316  BRS_FUNC_DECLARATION_PROTOTYPE(static void, always_inline, BrsHwLockInitInline, sint32 coreID);
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   317  BRS_FUNC_DECLARATION(static void, always_inline, BrsHwLockInitInline, sint32 coreID)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   318  {
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   319    volatile uint32 wdtcon0value;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   320    uint32 *WDTCON0;
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   321    WDTCON0 = BrsHw_GetAddrWDTCON0(coreID);
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   322    /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   323     * 1st step: Password access (create password and send to WDT_CON0)
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   324     */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   325    wdtcon0value = *WDTCON0;
	ld.w	d15,[a12]
.L182:
	st.w	[a10],d15
.L183:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   326    wdtcon0value &= 0xFFFFFF01;  /* clear WDTLCK, WDTHPW0, WDTHPW1 */
	ld.w	d15,[a10]
.L184:
	insert	d15,d15,#0,#1,#7
	st.w	[a10],d15
.L185:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   327    wdtcon0value |= 0xF0;        /* set WDTHPW1 to 0xf */
	ld.w	d15,[a10]
.L186:
	or	d15,#240
	st.w	[a10],d15
.L187:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   328    wdtcon0value |= 0x01;        /* 1 must be written to ENDINIT for password access
	ld.w	d15,[a10]
.L188:
	or	d15,#1
	st.w	[a10],d15
.L189:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   329                                   (but this will not actually modify the bit) */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   330    *WDTCON0 = wdtcon0value; /* modify access to WDTCON0 */
	ld.w	d15,[a10]
.L190:
	st.w	[a12],d15
.L191:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   331    /*
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   332     * 2nd step: Modify access, set the bit ENDINIT to 1 or 0 to allow access to
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   333     *           registers: WDT_CON1, BTV, BIV, ISP and mod_CLC
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   334     */
; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   335    wdtcon0value &= 0xFFFFFFF0;  /* clear WDTHPW0, WDTLCK, ENDINIT  */
	ld.w	d15,[a10]
.L192:
	insert	d15,d15,#0,#0,#4
	st.w	[a10],d15
.L193:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   336    wdtcon0value |= 0x03;        /* WDTHPW0=0, WDTLCK=1, ENDINIT=1 */
	ld.w	d15,[a10]
.L194:
	or	d15,#3
	st.w	[a10],d15
.L195:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   337    BRS_ISYNC();
	isync
.L196:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   338    *WDTCON0 = wdtcon0value;
	ld.w	d15,[a10]
.L197:
	st.w	[a12],d15
.L198:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   339    wdtcon0value = *WDTCON0; /* read is required */
	st.w	[a10],d15
.L199:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   340    BRS_ISYNC();
	isync
.L200:

; D:\Zonal\demo011\tasking\appl\Include\BrsHw.h	   341    BRS_DSYNC();
	dsync

; ..\appl\Source\BrsHw.c	  1743  #endif
; ..\appl\Source\BrsHw.c	  1744  
; ..\appl\Source\BrsHw.c	  1745    while (1)
.L6:
	j	.L6
.L93:
	
__BrsHwSoftwareResetECU_function_end:
	.size	BrsHwSoftwareResetECU,__BrsHwSoftwareResetECU_function_end-BrsHwSoftwareResetECU
.L40:
	; End of function
	
	.sdecl	'.text.BrsHw.BrsHwGetResetReason',code,cluster('BrsHwGetResetReason'),protect
	.sect	'.text.BrsHw.BrsHwGetResetReason'
	.align	2
	
	.global	BrsHwGetResetReason

; ..\appl\Source\BrsHw.c	  1746    {
; ..\appl\Source\BrsHw.c	  1747      /* Wait until reset/watchdog reset occurs */
; ..\appl\Source\BrsHw.c	  1748    }
; ..\appl\Source\BrsHw.c	  1749  }
; ..\appl\Source\BrsHw.c	  1750  
; ..\appl\Source\BrsHw.c	  1751  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1752  /**
; ..\appl\Source\BrsHw.c	  1753   * @brief      Get reset reason
; ..\appl\Source\BrsHw.c	  1754   * @pre        -
; ..\appl\Source\BrsHw.c	  1755   * @param[in]  -
; ..\appl\Source\BrsHw.c	  1756   * @param[out] -
; ..\appl\Source\BrsHw.c	  1757   * @return     Reset reason 
; ..\appl\Source\BrsHw.c	  1758   * @context    Function is called from BrsMainStartup to determine if reset
; ..\appl\Source\BrsHw.c	  1759   *             was triggered through software call (BrsHwSoftwareResetECU()).
; ..\appl\Source\BrsHw.c	  1760   */
; ..\appl\Source\BrsHw.c	  1761  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1762  brsHw_ResetReasonType BrsHwGetResetReason(void)
; Function BrsHwGetResetReason
.L14:
BrsHwGetResetReason:	.type	func

; ..\appl\Source\BrsHw.c	  1763  {
; ..\appl\Source\BrsHw.c	  1764    if((BRS_RSTSTAT & 0x10) == 0x10)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf0036050)
.L205:
	and	d15,#16
.L206:

; ..\appl\Source\BrsHw.c	  1765    {
; ..\appl\Source\BrsHw.c	  1766      return BRSHW_RESET_SW;
; ..\appl\Source\BrsHw.c	  1767    }
; ..\appl\Source\BrsHw.c	  1768    else
; ..\appl\Source\BrsHw.c	  1769    {
; ..\appl\Source\BrsHw.c	  1770      return BRSHW_RESET_OTHER;
; ..\appl\Source\BrsHw.c	  1771    }
; ..\appl\Source\BrsHw.c	  1772  }
	eq	d2,d15,#0
	ret
.L117:
	
__BrsHwGetResetReason_function_end:
	.size	BrsHwGetResetReason,__BrsHwGetResetReason_function_end-BrsHwGetResetReason
.L45:
	; End of function
	
	.sdecl	'.text.BrsHw.BrsHwTime100NOP',code,cluster('BrsHwTime100NOP'),protect
	.sect	'.text.BrsHw.BrsHwTime100NOP'
	.align	2
	
	.global	BrsHwTime100NOP

; ..\appl\Source\BrsHw.c	  1773  
; ..\appl\Source\BrsHw.c	  1774  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1775  /**
; ..\appl\Source\BrsHw.c	  1776   * @brief      This API is used for the BRS time measurement support to get a
; ..\appl\Source\BrsHw.c	  1777   *             default time value for all measurements with this platform to
; ..\appl\Source\BrsHw.c	  1778   *             be able to compare time measurements on different dates based
; ..\appl\Source\BrsHw.c	  1779   *             on this time result.
; ..\appl\Source\BrsHw.c	  1780   * @pre        Should be called with interrupts global disabled
; ..\appl\Source\BrsHw.c	  1781   * @param[in]  -
; ..\appl\Source\BrsHw.c	  1782   * @param[out] -
; ..\appl\Source\BrsHw.c	  1783   * @return     -
; ..\appl\Source\BrsHw.c	  1784   * @context    Function is called from e.g. component testsuits for calibration
; ..\appl\Source\BrsHw.c	  1785   */
; ..\appl\Source\BrsHw.c	  1786  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1787  void BrsHwTime100NOP(void)
; Function BrsHwTime100NOP
.L16:
BrsHwTime100NOP:	.type	func

; ..\appl\Source\BrsHw.c	  1788  {
; ..\appl\Source\BrsHw.c	  1789  
; ..\appl\Source\BrsHw.c	  1790    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
	nop
.L211:
	nop
.L212:
	nop
.L213:
	nop
.L214:
	nop
.L215:
	nop
.L216:
	nop
.L217:
	nop
.L218:
	nop
.L219:
	nop
.L220:

; ..\appl\Source\BrsHw.c	  1791    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
	nop
.L221:
	nop
.L222:
	nop
.L223:
	nop
.L224:
	nop
.L225:
	nop
.L226:
	nop
.L227:
	nop
.L228:
	nop
.L229:
	nop
.L230:

; ..\appl\Source\BrsHw.c	  1792    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
	nop
.L231:
	nop
.L232:
	nop
.L233:
	nop
.L234:
	nop
.L235:
	nop
.L236:
	nop
.L237:
	nop
.L238:
	nop
.L239:
	nop
.L240:

; ..\appl\Source\BrsHw.c	  1793    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
	nop
.L241:
	nop
.L242:
	nop
.L243:
	nop
.L244:
	nop
.L245:
	nop
.L246:
	nop
.L247:
	nop
.L248:
	nop
.L249:
	nop
.L250:

; ..\appl\Source\BrsHw.c	  1794    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
	nop
.L251:
	nop
.L252:
	nop
.L253:
	nop
.L254:
	nop
.L255:
	nop
.L256:
	nop
.L257:
	nop
.L258:
	nop
.L259:
	nop
.L260:

; ..\appl\Source\BrsHw.c	  1795  
; ..\appl\Source\BrsHw.c	  1796    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
	nop
.L261:
	nop
.L262:
	nop
.L263:
	nop
.L264:
	nop
.L265:
	nop
.L266:
	nop
.L267:
	nop
.L268:
	nop
.L269:
	nop
.L270:

; ..\appl\Source\BrsHw.c	  1797    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
	nop
.L271:
	nop
.L272:
	nop
.L273:
	nop
.L274:
	nop
.L275:
	nop
.L276:
	nop
.L277:
	nop
.L278:
	nop
.L279:
	nop
.L280:

; ..\appl\Source\BrsHw.c	  1798    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
	nop
.L281:
	nop
.L282:
	nop
.L283:
	nop
.L284:
	nop
.L285:
	nop
.L286:
	nop
.L287:
	nop
.L288:
	nop
.L289:
	nop
.L290:

; ..\appl\Source\BrsHw.c	  1799    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
	nop
.L291:
	nop
.L292:
	nop
.L293:
	nop
.L294:
	nop
.L295:
	nop
.L296:
	nop
.L297:
	nop
.L298:
	nop
.L299:
	nop
.L300:

; ..\appl\Source\BrsHw.c	  1800    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
	nop
.L301:
	nop
.L302:
	nop
.L303:
	nop
.L304:
	nop
.L305:
	nop
.L306:
	nop
.L307:
	nop
.L308:
	nop
.L309:
	nop
.L310:

; ..\appl\Source\BrsHw.c	  1801  
; ..\appl\Source\BrsHw.c	  1802  }
	ret
.L118:
	
__BrsHwTime100NOP_function_end:
	.size	BrsHwTime100NOP,__BrsHwTime100NOP_function_end-BrsHwTime100NOP
.L50:
	; End of function
	
	.sdecl	'.text.BrsHw.BrsHw_GetCore',code,cluster('BrsHw_GetCore'),protect
	.sect	'.text.BrsHw.BrsHw_GetCore'
	.align	2
	
	.global	BrsHw_GetCore

; ..\appl\Source\BrsHw.c	  1803  
; ..\appl\Source\BrsHw.c	  1804  #if defined (BRS_ENABLE_SAFECTXSUPPORT)
; ..\appl\Source\BrsHw.c	  1805  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1806  /**
; ..\appl\Source\BrsHw.c	  1807   * @brief      This API is used to enable hardware access in untrusted mode
; ..\appl\Source\BrsHw.c	  1808   * @pre        -
; ..\appl\Source\BrsHw.c	  1809   * @param[in]  -
; ..\appl\Source\BrsHw.c	  1810   * @param[out] -
; ..\appl\Source\BrsHw.c	  1811   * @return     -
; ..\appl\Source\BrsHw.c	  1812   * @context    Function must be called after all depending peripheral modules
; ..\appl\Source\BrsHw.c	  1813   *             are supplied by proper clocks AND before the OS is started.
; ..\appl\Source\BrsHw.c	  1814   */
; ..\appl\Source\BrsHw.c	  1815  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1816  void BrsHw_EnableHwAccess(void)
; ..\appl\Source\BrsHw.c	  1817  {
; ..\appl\Source\BrsHw.c	  1818    /* Nothing to do for Aurix/AurixPlus yet */
; ..\appl\Source\BrsHw.c	  1819  }
; ..\appl\Source\BrsHw.c	  1820  #endif /*BRS_ENABLE_SAFECTXSUPPORT*/
; ..\appl\Source\BrsHw.c	  1821  
; ..\appl\Source\BrsHw.c	  1822  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1823  /**
; ..\appl\Source\BrsHw.c	  1824   * @brief      This API is used to read the core ID of the actual running core
; ..\appl\Source\BrsHw.c	  1825   * @pre        -
; ..\appl\Source\BrsHw.c	  1826   * @param[in]  -
; ..\appl\Source\BrsHw.c	  1827   * @param[out] -
; ..\appl\Source\BrsHw.c	  1828   * @return     Core ID of the actual running core
; ..\appl\Source\BrsHw.c	  1829   * @context    Function is e.g. called from main@BrsMain, to only call HW-init
; ..\appl\Source\BrsHw.c	  1830   *             code once, on the boot core.
; ..\appl\Source\BrsHw.c	  1831   *             In MultiCore setups, additional BRSHW_INIT_CORE_ID must be
; ..\appl\Source\BrsHw.c	  1832   *             declared inside BrsHw.h, to configure the proper core ID value
; ..\appl\Source\BrsHw.c	  1833   *             of that boot core.
; ..\appl\Source\BrsHw.c	  1834   */
; ..\appl\Source\BrsHw.c	  1835  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1836  uint32 BrsHw_GetCore(void)
; Function BrsHw_GetCore
.L18:
BrsHw_GetCore:	.type	func

; ..\appl\Source\BrsHw.c	  1837  {
; ..\appl\Source\BrsHw.c	  1838    return BRS_MOVE_FROM_CSFR(BRS_CORE_ID_REGISTER);
	mfcr	d2,#65052
.L315:

; ..\appl\Source\BrsHw.c	  1839  }
	ret
.L120:
	
__BrsHw_GetCore_function_end:
	.size	BrsHw_GetCore,__BrsHw_GetCore_function_end-BrsHw_GetCore
.L55:
	; End of function
	
	.sdecl	'.text.BrsHw.BrsHw_EnableInterrupt',code,cluster('BrsHw_EnableInterrupt'),protect
	.sect	'.text.BrsHw.BrsHw_EnableInterrupt'
	.align	2
	
	.global	BrsHw_EnableInterrupt

; ..\appl\Source\BrsHw.c	  1840  
; ..\appl\Source\BrsHw.c	  1841  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1842  /**
; ..\appl\Source\BrsHw.c	  1843   * @brief      This API is used to enable an interrupt source in the core
; ..\appl\Source\BrsHw.c	  1844   *             interrupt controller.
; ..\appl\Source\BrsHw.c	  1845   * @pre        -
; ..\appl\Source\BrsHw.c	  1846   * @param[in]  Source to be enabled.
; ..\appl\Source\BrsHw.c	  1847   * @param[in]  Priority level to be set.
; ..\appl\Source\BrsHw.c	  1848   * @param[out] -
; ..\appl\Source\BrsHw.c	  1849   * @return     -
; ..\appl\Source\BrsHw.c	  1850   * @context    Function is called from HlpTest and other test environments.
; ..\appl\Source\BrsHw.c	  1851   */
; ..\appl\Source\BrsHw.c	  1852  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1853  void BrsHw_EnableInterrupt(uint32 Source, uint8 Priority)
; Function BrsHw_EnableInterrupt
.L20:
BrsHw_EnableInterrupt:	.type	func

; ..\appl\Source\BrsHw.c	  1854  {
; ..\appl\Source\BrsHw.c	  1855    /* #10 Enable the given interrupt source in its SRC register. */
; ..\appl\Source\BrsHw.c	  1856    BRS_INT_SRC(Source) |= BRS_INT_SRC_SRE_MASK;
	fcall	.cocofun_1
.L140:
	insert	d15,d15,#1,#10,#1
	st.w	[a15],d15
.L320:

; ..\appl\Source\BrsHw.c	  1857    BRS_INT_SRC(Source) |= Priority;
	ld.w	d15,[a15]
.L321:
	or	d15,d5
	st.w	[a15],d15
.L322:

; ..\appl\Source\BrsHw.c	  1858  }
	ret
.L121:
	
__BrsHw_EnableInterrupt_function_end:
	.size	BrsHw_EnableInterrupt,__BrsHw_EnableInterrupt_function_end-BrsHw_EnableInterrupt
.L60:
	; End of function
	
	.sdecl	'.text.BrsHw..cocofun_1',code,cluster('.cocofun_1'),protect
	.sect	'.text.BrsHw..cocofun_1'
	.align	2
; Function .cocofun_1
.L22:
.cocofun_1:	.type	func
; Function body .cocofun_1, coco_iter:0
	mov.u	d15,#32768
	addih	d15,d15,#61443
	add	d4,d15
.L139:
	mov.a	a15,d4
	ld.w	d15,[a15]
.L339:
	fret
.L75:
	; End of function
	.sdecl	'.text.BrsHw.BrsHw_DisableInterrupt',code,cluster('BrsHw_DisableInterrupt'),protect
	.sect	'.text.BrsHw.BrsHw_DisableInterrupt'
	.align	2
	
	.global	BrsHw_DisableInterrupt

; ..\appl\Source\BrsHw.c	  1859  
; ..\appl\Source\BrsHw.c	  1860  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1861  /**
; ..\appl\Source\BrsHw.c	  1862   * @brief      This API is used to disable an interrupt source in the core
; ..\appl\Source\BrsHw.c	  1863   *             interrupt controller.
; ..\appl\Source\BrsHw.c	  1864   * @pre        -
; ..\appl\Source\BrsHw.c	  1865   * @param[in]  Source to be disabled.
; ..\appl\Source\BrsHw.c	  1866   * @param[out] -
; ..\appl\Source\BrsHw.c	  1867   * @return     -
; ..\appl\Source\BrsHw.c	  1868   * @context    Function is called from HlpTest and other test environments.
; ..\appl\Source\BrsHw.c	  1869   */
; ..\appl\Source\BrsHw.c	  1870  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1871  void BrsHw_DisableInterrupt(uint32 Source)
; Function BrsHw_DisableInterrupt
.L24:
BrsHw_DisableInterrupt:	.type	func

; ..\appl\Source\BrsHw.c	  1872  {
; ..\appl\Source\BrsHw.c	  1873    /* #10 Disable the given interrupt source in its SRC register. */
; ..\appl\Source\BrsHw.c	  1874    BRS_INT_SRC(Source) &= ~BRS_INT_SRC_SRE_MASK;
	fcall	.cocofun_1
.L327:
	insert	d15,d15,#0,#10,#1
	st.w	[a15],d15
.L328:

; ..\appl\Source\BrsHw.c	  1875  }
	ret
.L126:
	
__BrsHw_DisableInterrupt_function_end:
	.size	BrsHw_DisableInterrupt,__BrsHw_DisableInterrupt_function_end-BrsHw_DisableInterrupt
.L65:
	; End of function
	
	.sdecl	'.text.BrsHw.BrsHw_TriggerSoftwareInterrupt',code,cluster('BrsHw_TriggerSoftwareInterrupt'),protect
	.sect	'.text.BrsHw.BrsHw_TriggerSoftwareInterrupt'
	.align	2
	
	.global	BrsHw_TriggerSoftwareInterrupt

; ..\appl\Source\BrsHw.c	  1876  
; ..\appl\Source\BrsHw.c	  1877  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1878  /**
; ..\appl\Source\BrsHw.c	  1879   * @brief      This API is used to trigger the given software interrupt source.
; ..\appl\Source\BrsHw.c	  1880   * @pre        
; ..\appl\Source\BrsHw.c	  1881   * @param[in]  Source to be triggered.
; ..\appl\Source\BrsHw.c	  1882   *             Some derivatives only support few software triggerable sources,
; ..\appl\Source\BrsHw.c	  1883   *             check for their validity.
; ..\appl\Source\BrsHw.c	  1884   * @param[out] -
; ..\appl\Source\BrsHw.c	  1885   * @return     -
; ..\appl\Source\BrsHw.c	  1886   * @context    Function is called from HlpTest and other test environments.
; ..\appl\Source\BrsHw.c	  1887   */
; ..\appl\Source\BrsHw.c	  1888  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1889  void BrsHw_TriggerSoftwareInterrupt(uint32 Source)
; Function BrsHw_TriggerSoftwareInterrupt
.L26:
BrsHw_TriggerSoftwareInterrupt:	.type	func

; ..\appl\Source\BrsHw.c	  1890  {
; ..\appl\Source\BrsHw.c	  1891    BRS_INT_SRC(Source) |= BRS_INT_SRC_SETR_MASK;
	fcall	.cocofun_1
.L333:
	insert	d15,d15,#1,#26,#1
	st.w	[a15],d15
.L334:

; ..\appl\Source\BrsHw.c	  1892  }
	ret
.L128:
	
__BrsHw_TriggerSoftwareInterrupt_function_end:
	.size	BrsHw_TriggerSoftwareInterrupt,__BrsHw_TriggerSoftwareInterrupt_function_end-BrsHw_TriggerSoftwareInterrupt
.L70:
	; End of function
	
	.sdecl	'.rodata.BrsHw.kBrsHwMainVersion',data,rom,cluster('kBrsHwMainVersion')
	.sect	'.rodata.BrsHw.kBrsHwMainVersion'
	.global	kBrsHwMainVersion
kBrsHwMainVersion:	.type	object
	.size	kBrsHwMainVersion,1
	.byte	1
	.sdecl	'.rodata.BrsHw.kBrsHwSubVersion',data,rom,cluster('kBrsHwSubVersion')
	.sect	'.rodata.BrsHw.kBrsHwSubVersion'
	.global	kBrsHwSubVersion
kBrsHwSubVersion:	.type	object
	.size	kBrsHwSubVersion,1
	.byte	3
	.sdecl	'.rodata.BrsHw.kBrsHwBugfixVersion',data,rom,cluster('kBrsHwBugfixVersion')
	.sect	'.rodata.BrsHw.kBrsHwBugfixVersion'
	.global	kBrsHwBugfixVersion
kBrsHwBugfixVersion:	.type	object
	.size	kBrsHwBugfixVersion,1
	.byte	2
	.sdecl	'.rodata.BrsHw.kBrsWdtCon0Addresses',data,rom,cluster('kBrsWdtCon0Addresses')
	.sect	'.rodata.BrsHw.kBrsWdtCon0Addresses'
	.global	kBrsWdtCon0Addresses
	.align	2
kBrsWdtCon0Addresses:	.type	object
	.size	kBrsWdtCon0Addresses,32
	.word	-268213684,-268213672,-268213660,-268213648
	.word	-268213636
	.space	4
	.word	-268213624,-268213592
	.sdecl	'.rodata.BMHD0',data,rom,cluster('bmiField0'),protect
	.sect	'.rodata.BMHD0'
	.global	bmiField0
	.align	2
bmiField0:	.type	object
	.size	bmiField0,512
	.word	-1286012914,-1609957344,1337237555,-1337237556
	.space	480
	.word	1126240820
	.space	12
	.sdecl	'.rodata.BMHD1',data,rom,cluster('bmiField1'),protect
	.sect	'.rodata.BMHD1'
	.global	bmiField1
	.align	2
bmiField1:	.type	object
	.size	bmiField1,512
	.word	-1286012914,-1609957344,1337237555,-1337237556
	.space	480
	.word	1126240820
	.space	12
	.sdecl	'.rodata.BMHD2',data,rom,cluster('bmiField2'),protect
	.sect	'.rodata.BMHD2'
	.global	bmiField2
	.align	2
bmiField2:	.type	object
	.size	bmiField2,512
	.word	-1286012914,-1609957344,1337237555,-1337237556
	.space	480
	.word	1126240820
	.space	12
	.sdecl	'.rodata.BMHD3',data,rom,cluster('bmiField3'),protect
	.sect	'.rodata.BMHD3'
	.global	bmiField3
	.align	2
bmiField3:	.type	object
	.size	bmiField3,512
	.word	-1286012914,-1609957344,1337237555,-1337237556
	.space	480
	.word	1126240820
	.space	12
	.calls	'BrsHwSoftwareResetECU','DisableAllInterrupts'
	.calls	'BrsHwSoftwareResetECU','BrsHw_GetCore'
	.calls	'BrsHw_EnableInterrupt','.cocofun_1'
	.calls	'BrsHw_DisableInterrupt','.cocofun_1'
	.calls	'BrsHw_TriggerSoftwareInterrupt','.cocofun_1'
	.calls	'BrsHwDisableInterruptAtPowerOn','',0
	.calls	'BrsHwSoftwareResetECU','',8
	.calls	'BrsHwGetResetReason','',0
	.calls	'BrsHwTime100NOP','',0
	.calls	'BrsHw_GetCore','',0
	.calls	'BrsHw_EnableInterrupt','',0
	.calls	'.cocofun_1','',0
	.calls	'BrsHw_DisableInterrupt','',0
	.extern	DisableAllInterrupts
	.calls	'BrsHw_TriggerSoftwareInterrupt','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L28:
	.word	8713
	.half	3
	.word	.L29
	.byte	4
.L27:
	.byte	1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L30
.L119:
	.byte	2
	.byte	'unsigned long int',0,4,7
.L102:
	.byte	3
	.word	116
	.byte	2
	.byte	'long int',0,4,5
.L104:
	.byte	4
	.byte	'BrsHw_GetAddrWDTCON0',0,1,1,134,2,1
	.word	137
	.byte	1,1
.L105:
	.byte	5
	.byte	'nr',0,1,134,2,1
	.word	142
.L107:
	.byte	6,0
.L94:
	.byte	7
	.byte	'BrsHwUnlockInitInline',0,1,1,153,2,1,1,1
.L97:
	.byte	5
	.byte	'coreID',0,1,153,2,1
	.word	142
.L99:
	.byte	8,6,0,0
.L108:
	.byte	7
	.byte	'BrsHwLockInitInline',0,1,1,189,2,1,1,1
.L110:
	.byte	5
	.byte	'coreID',0,1,189,2,1
	.word	142
.L112:
	.byte	8,6,0,0,2
	.byte	'int',0,4,5,9
	.word	299
	.byte	10
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,11
	.word	306
	.byte	0,2
	.byte	'unsigned int',0,4,7,12
	.word	348
	.byte	3
	.word	348
	.byte	13
	.byte	'__cmpswapw',0
	.word	364
	.byte	1,1,1,1,14
	.byte	'p',0
	.word	369
	.byte	14
	.byte	'value',0
	.word	348
	.byte	14
	.byte	'compare',0
	.word	348
	.byte	0,12
	.word	299
	.byte	13
	.byte	'__mfcr',0
	.word	426
	.byte	1,1,1,1,11
	.word	299
	.byte	0,15
	.byte	'__nop',0,1,1,1,1,15
	.byte	'__isync',0,1,1,1,1,15
	.byte	'__dsync',0,1,1,1,1,15
	.byte	'__disable',0,1,1,1,1,16
	.word	154
	.byte	17
	.word	187
	.byte	6,0,16
	.word	201
	.byte	17
	.word	231
	.byte	8,18
	.word	154
	.byte	17
	.word	187
	.byte	19
	.word	199
	.byte	0,6,0,0,16
	.word	251
	.byte	17
	.word	279
	.byte	8,18
	.word	154
	.byte	17
	.word	187
	.byte	19
	.word	199
	.byte	0,6,0,0
.L100:
	.byte	12
	.word	116
.L113:
	.byte	12
	.word	116
.L116:
	.byte	20,1,196,3,9,1,21
	.byte	'BRSHW_RESET_SW',0,0,21
	.byte	'BRSHW_RESET_OTHER',0,1,0
.L123:
	.byte	2
	.byte	'unsigned char',0,1,8,22
	.byte	'DisableAllInterrupts',0,2,185,10,21,1,1,1,1,23,1,3
	.word	678
	.byte	24
	.byte	'__codeptr',0,3,1,1
	.word	680
	.byte	24
	.byte	'uint8',0,4,104,31
	.word	631
	.byte	2
	.byte	'unsigned short int',0,2,7,24
	.byte	'uint16',0,4,106,31
	.word	717
	.byte	24
	.byte	'sint32',0,4,107,31
	.word	142
	.byte	24
	.byte	'uint32',0,4,108,31
	.word	116
	.byte	24
	.byte	'uint8_least',0,4,111,31
	.word	631
	.byte	2
	.byte	'unsigned long long int',0,8,7,24
	.byte	'uint64',0,4,121,30
	.word	804
	.byte	24
	.byte	'StatusType',0,5,127,23
	.word	631
.L130:
	.byte	9
	.word	631
.L131:
	.byte	9
	.word	631
.L132:
	.byte	9
	.word	631
	.byte	25,32
	.word	116
	.byte	26,7,0
.L133:
	.byte	9
	.word	879
	.byte	24
	.byte	'brsHw_ResetReasonType',0,1,200,3,2
	.word	587
	.byte	20,6,145,1,9,1,21
	.byte	'Default_Init_Task',0,0,21
	.byte	'Default_Init_Task_Trusted',0,1,21
	.byte	'IdleTask_OsCore0',0,2,21
	.byte	'bsw_task',0,3,21
	.byte	'swc_init',0,4,21
	.byte	'swc_task',0,5,21
	.byte	'INVALID_TASK',0,6,21
	.byte	'OS_TASKID_COUNT',0,6,0,24
	.byte	'TaskType',0,6,155,1,3
	.word	924
	.byte	24
	.byte	'Os_Hal_AddressType',0,7,61,16
	.word	116
	.byte	25,64
	.word	116
	.byte	26,15,0,27
	.byte	'Os_ExceptionContextType_Tag',0,8,71,8,160,1,28
	.byte	'AddressRegisters',0
	.word	1109
	.byte	64,2,35,0,28
	.byte	'DataRegisters',0
	.word	1109
	.byte	64,2,35,64,28
	.byte	'Ra',0
	.word	116
	.byte	4,3,35,128,1,28
	.byte	'Psw',0
	.word	116
	.byte	4,3,35,132,1,28
	.byte	'ExceptionSource',0
	.word	116
	.byte	4,3,35,136,1,28
	.byte	'Pcpn',0
	.word	116
	.byte	4,3,35,140,1,28
	.byte	'Pie',0
	.word	116
	.byte	4,3,35,144,1,28
	.byte	'MpuRegionForStackLow',0
	.word	116
	.byte	4,3,35,148,1,28
	.byte	'MpuRegionForStackUpper',0
	.word	116
	.byte	4,3,35,152,1,28
	.byte	'RawPCXI',0
	.word	116
	.byte	4,3,35,156,1,0,24
	.byte	'Os_ExceptionContextType',0,7,66,44
	.word	1118
	.byte	24
	.byte	'Os_InterruptSourceIdType',0,9,238,1,16
	.word	116
	.byte	24
	.byte	'Os_ExceptionSourceIdType',0,9,246,1,16
	.word	116
	.byte	20,9,161,2,9,1,21
	.byte	'RUNNING',0,0,21
	.byte	'READY',0,1,21
	.byte	'WAITING',0,2,21
	.byte	'SUSPENDED',0,3,0,24
	.byte	'TaskStateType',0,9,175,2,3
	.word	1466
	.byte	24
	.byte	'EventMaskType',0,9,182,2,16
	.word	804
	.byte	24
	.byte	'Os_TickType',0,9,200,2,19
	.word	116
	.byte	24
	.byte	'TickType',0,9,206,2,21
	.word	116
	.byte	29,9,220,2,9,12,28
	.byte	'maxallowedvalue',0
	.word	116
	.byte	4,2,35,0,28
	.byte	'ticksperbase',0
	.word	116
	.byte	4,2,35,4,28
	.byte	'mincycle',0
	.word	116
	.byte	4,2,35,8,0,24
	.byte	'AlarmBaseType',0,9,228,2,2
	.word	1598
	.byte	20,9,128,3,9,1,21
	.byte	'APPLICATION_TERMINATED',0,0,21
	.byte	'APPLICATION_RESTARTING',0,1,21
	.byte	'APPLICATION_ACCESSIBLE',0,2,0,24
	.byte	'ApplicationStateType',0,9,133,3,3
	.word	1693
	.byte	20,9,177,3,9,1,21
	.byte	'OSServiceId_GetApplicationID',0,0,21
	.byte	'OSServiceId_GetISRID',0,1,21
	.byte	'OSServiceId_CallTrustedFunction',0,2,21
	.byte	'OSServiceId_CheckISRMemoryAccess',0,3,21
	.byte	'OSServiceId_CheckTaskMemoryAccess',0,4,21
	.byte	'OSServiceId_CheckObjectAccess',0,5,21
	.byte	'OSServiceId_CheckObjectOwnership',0,6,21
	.byte	'OSServiceId_StartScheduleTableRel',0,7,21
	.byte	'OSServiceId_StartScheduleTableAbs',0,8,21
	.byte	'OSServiceId_StopScheduleTable',0,9,21
	.byte	'OSServiceId_NextScheduleTable',0,10,21
	.byte	'OSServiceId_StartScheduleTableSynchron',0,11,21
	.byte	'OSServiceId_SyncScheduleTable',0,12,21
	.byte	'OSServiceId_SetScheduleTableAsync',0,13,21
	.byte	'OSServiceId_GetScheduleTableStatus',0,14,21
	.byte	'OSServiceId_IncrementCounter',0,15,21
	.byte	'OSServiceId_GetCounterValue',0,16,21
	.byte	'OSServiceId_GetElapsedValue',0,17,21
	.byte	'OSServiceId_TerminateApplication',0,18,21
	.byte	'OSServiceId_AllowAccess',0,19,21
	.byte	'OSServiceId_GetApplicationState',0,20,21
	.byte	'OSServiceId_GetNumberOfActivatedCores',0,21,21
	.byte	'OSServiceId_GetCoreID',0,22,21
	.byte	'OSServiceId_StartCore',0,23,21
	.byte	'OSServiceId_StartNonAutosarCore',0,24,21
	.byte	'OSServiceId_GetSpinlock',0,25,21
	.byte	'OSServiceId_ReleaseSpinlock',0,26,21
	.byte	'OSServiceId_TryToGetSpinlock',0,27,21
	.byte	'OSServiceId_ShutdownAllCores',0,28,21
	.byte	'OSServiceId_ControlIdle',0,29,21
	.byte	'OSServiceId_IocSend',0,30,21
	.byte	'OSServiceId_IocWrite',0,31,21
	.byte	'OSServiceId_IocSendGroup',0,32,21
	.byte	'OSServiceId_IocWriteGroup',0,33,21
	.byte	'OSServiceId_IocReceive',0,34,21
	.byte	'OSServiceId_IocRead',0,35,21
	.byte	'OSServiceId_IocReceiveGroup',0,36,21
	.byte	'OSServiceId_IocReadGroup',0,37,21
	.byte	'OSServiceId_IocEmptyQueue',0,38,21
	.byte	'OSServiceId_GetCurrentApplicationID',0,39,21
	.byte	'OSServiceId_GetExceptionContext',0,160,1,21
	.byte	'OSServiceId_SetExceptionContext',0,161,1,21
	.byte	'OSServiceId_CallNonTrustedFunction',0,162,1,21
	.byte	'OSServiceId_AppKill',0,163,1,21
	.byte	'OSServiceId_AlarmActionSetEvent',0,164,1,21
	.byte	'OSServiceId_AlarmActionActivateTask',0,165,1,21
	.byte	'OSServiceId_AlarmActionIncrementCounter',0,166,1,21
	.byte	'OSServiceId_AlarmActionCallback',0,167,1,21
	.byte	'OSServiceId_TimerIsr',0,168,1,21
	.byte	'OSServiceId_IsrWrapper',0,169,1,21
	.byte	'OSServiceId_GetTaskStackUsage',0,170,1,21
	.byte	'OSServiceId_GetISRStackUsage',0,171,1,21
	.byte	'OSServiceId_GetKernelStackUsage',0,172,1,21
	.byte	'OSServiceId_GetStartupHookStackUsage',0,173,1,21
	.byte	'OSServiceId_GetErrorHookStackUsage',0,174,1,21
	.byte	'OSServiceId_GetShutdownHookStackUsage',0,175,1,21
	.byte	'OSServiceId_GetProtectionHookStackUsage',0,176,1,21
	.byte	'OSServiceId_GetSemaphore',0,177,1,21
	.byte	'OSServiceId_ReleaseSemaphore',0,178,1,21
	.byte	'OSServiceId_ScheduleTableActivateTask',0,179,1,21
	.byte	'OSServiceId_ScheduleTableSetEvent',0,180,1,21
	.byte	'OSServiceId_DisableInterruptSource',0,181,1,21
	.byte	'OSServiceId_EnableInterruptSource',0,182,1,21
	.byte	'OSServiceId_ClearPendingInterrupt',0,183,1,21
	.byte	'OSServiceId_GetUnhandledIrq',0,184,1,21
	.byte	'OSServiceId_GetUnhandledExc',0,185,1,21
	.byte	'OSServiceId_HookCallCallback',0,186,1,21
	.byte	'OSServiceId_IsInterruptSourceEnabled',0,187,1,21
	.byte	'OSServiceId_IsInterruptPending',0,188,1,21
	.byte	'OSServiceId_CallFastTrustedFunction',0,189,1,21
	.byte	'OSServiceId_BarrierSynchronize',0,190,1,21
	.byte	'OSServiceId_InitialEnableInterruptSources',0,191,1,21
	.byte	'OSServiceId_GetCoreStartState',0,192,1,21
	.byte	'OSServiceId_StartOS',0,208,1,21
	.byte	'OSServiceId_GetActiveApplicationMode',0,210,1,21
	.byte	'OSServiceId_DisableAllInterrupts',0,211,1,21
	.byte	'OSServiceId_EnableAllInterrupts',0,212,1,21
	.byte	'OSServiceId_SuspendAllInterrupts',0,213,1,21
	.byte	'OSServiceId_ResumeAllInterrupts',0,214,1,21
	.byte	'OSServiceId_SuspendOSInterrupts',0,215,1,21
	.byte	'OSServiceId_ResumeOSInterrupts',0,216,1,21
	.byte	'OSServiceId_ActivateTask',0,217,1,21
	.byte	'OSServiceId_TerminateTask',0,218,1,21
	.byte	'OSServiceId_ChainTask',0,219,1,21
	.byte	'OSServiceId_GetTaskID',0,220,1,21
	.byte	'OSServiceId_GetTaskState',0,221,1,21
	.byte	'OSServiceId_Schedule',0,222,1,21
	.byte	'OSServiceId_SetEvent',0,223,1,21
	.byte	'OSServiceId_ClearEvent',0,224,1,21
	.byte	'OSServiceId_GetEvent',0,225,1,21
	.byte	'OSServiceId_WaitEvent',0,226,1,21
	.byte	'OSServiceId_GetAlarmBase',0,227,1,21
	.byte	'OSServiceId_GetAlarm',0,228,1,21
	.byte	'OSServiceId_SetRelAlarm',0,229,1,21
	.byte	'OSServiceId_SetAbsAlarm',0,230,1,21
	.byte	'OSServiceId_CancelAlarm',0,231,1,21
	.byte	'OSServiceId_GetResource',0,232,1,21
	.byte	'OSServiceId_ReleaseResource',0,233,1,21
	.byte	'OSSERVICEID_COUNT',0,255,1,0,24
	.byte	'OSServiceIdType',0,9,156,4,3
	.word	1805
	.byte	20,9,172,4,9,2,21
	.byte	'OS_STATUS_OK',0,0,21
	.byte	'OS_STATUS_CALLEVEL',0,2,21
	.byte	'OS_STATUS_LIMIT',0,4,21
	.byte	'OS_STATUS_RESOURCE',0,6,21
	.byte	'OS_STATUS_SERVICEID',0,9,21
	.byte	'OS_STATUS_ILLEGAL_ADDRESS',0,10,21
	.byte	'OS_STATUS_MISSINGEND',0,11,21
	.byte	'OS_STATUS_DISABLEDINT',0,12,21
	.byte	'OS_STATUS_STACKFAULT',0,13,21
	.byte	'OS_STATUS_PROTECTION_MEMORY',0,14,21
	.byte	'OS_STATUS_PROTECTION_TIME',0,15,21
	.byte	'OS_STATUS_PROTECTION_ARRIVAL',0,16,21
	.byte	'OS_STATUS_PROTECTION_LOCKED',0,17,21
	.byte	'OS_STATUS_PROTECTION_EXCEPTION',0,18,21
	.byte	'OS_STATUS_INTERFERENCE_DEADLOCK',0,19,21
	.byte	'OS_STATUS_NESTING_DEADLOCK',0,20,21
	.byte	'OS_STATUS_SPINLOCK',0,21,21
	.byte	'OS_STATUS_CORE',0,22,21
	.byte	'OS_STATUS_OVERFLOW',0,245,1,21
	.byte	'OS_STATUS_KILL_KERNEL_OBJ',0,246,1,21
	.byte	'OS_STATUS_NO_RESTARTTASK',0,247,1,21
	.byte	'OS_STATUS_CALL_NOT_ALLOWED',0,248,1,21
	.byte	'OS_STATUS_FUNCTION_UNAVAILABLE',0,249,1,21
	.byte	'OS_STATUS_PROTECTION_SYSCALL',0,250,1,21
	.byte	'OS_STATUS_PROTECTION_IRQ',0,251,1,21
	.byte	'OS_STATUS_API_ERROR',0,252,1,21
	.byte	'OS_STATUS_ASSERTION',0,253,1,21
	.byte	'OS_STATUS_OVERLOAD',0,254,1,21
	.byte	'OS_STATUS_ACCESSRIGHTS_1',0,129,2,21
	.byte	'OS_STATUS_CALLEVEL_SHARED_STACK',0,130,2,21
	.byte	'OS_STATUS_ID_1',0,131,2,21
	.byte	'OS_STATUS_UNLOCKED',0,133,2,21
	.byte	'OS_STATUS_STATE_1',0,135,2,21
	.byte	'OS_STATUS_VALUE_IS_ZERO_1',0,136,2,21
	.byte	'OS_STATUS_CORE_CROSS_DATA',0,150,2,21
	.byte	'OS_STATUS_PARAM_POINTER_1',0,151,2,21
	.byte	'OS_STATUS_STACKUSAGE_DISABLED_BY_CONFIG',0,241,3,21
	.byte	'OS_STATUS_NO_BARRIER_PARTICIPANT',0,242,3,21
	.byte	'OS_STATUS_UNIMPLEMENTED_CLEARPENDING',0,243,3,21
	.byte	'OS_STATUS_NO_NTFSTACK_POOL_EMPTY',0,244,3,21
	.byte	'OS_STATUS_ACCESSRIGHTS_2',0,129,4,21
	.byte	'OS_STATUS_CALLEVEL_CROSS_CORE_SYNC',0,130,4,21
	.byte	'OS_STATUS_ID_2',0,131,4,21
	.byte	'OS_STATUS_NOFUNC_1',0,133,4,21
	.byte	'OS_STATUS_STATE_2',0,135,4,21
	.byte	'OS_STATUS_VALUE_IS_ZERO_2',0,136,4,21
	.byte	'OS_STATUS_PARAM_POINTER_2',0,151,4,21
	.byte	'OS_STATUS_EVENT_DISABLED_BY_CONFIG',0,241,5,21
	.byte	'OS_STATUS_UNIMPLEMENTED_EXCEPTIONCONTEXT',0,243,5,21
	.byte	'OS_STATUS_NO_NTFSTACK_APPLIMIT_EXCEEDED',0,244,5,21
	.byte	'OS_STATUS_NOTACCESSIBLE_1',0,129,6,21
	.byte	'OS_STATUS_ID_TYPE_1',0,131,6,21
	.byte	'OS_STATUS_NOFUNC_2',0,133,6,21
	.byte	'OS_STATUS_STATE_STOPPED',0,135,6,21
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_1',0,136,6,21
	.byte	'OS_STATUS_PARAM_POINTER_3',0,151,6,21
	.byte	'OS_STATUS_NOTACCESSIBLE_2',0,129,8,21
	.byte	'OS_STATUS_ID_DIFFERENT_COUNTER',0,131,8,21
	.byte	'OS_STATUS_SPINLOCK_ORDER',0,133,8,21
	.byte	'OS_STATUS_STATE_RUNNING',0,135,8,21
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_2',0,136,8,21
	.byte	'OS_STATUS_NOEXTENDEDTASK_1',0,129,10,21
	.byte	'OS_STATUS_ID_DIFFERENT_SYNC',0,131,10,21
	.byte	'OS_STATUS_STOPPED_1',0,133,10,21
	.byte	'OS_STATUS_STATE_NEXTED',0,135,10,21
	.byte	'OS_STATUS_VALUE_IS_TOO_HIGH_3',0,136,10,21
	.byte	'OS_STATUS_NOEXTENDEDTASK_2',0,129,12,21
	.byte	'OS_STATUS_HOOK_NOT_AVAILABLE',0,131,12,21
	.byte	'OS_STATUS_NOT_STOPPED_2',0,133,12,21
	.byte	'OS_STATUS_STATE_WAITING',0,135,12,21
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_1',0,136,12,21
	.byte	'OS_STATUS_NOEXTENDEDTASK_CALLER',0,129,14,21
	.byte	'OS_STATUS_NEXTED_1',0,133,14,21
	.byte	'OS_STATUS_STATE_NO_RESTART',0,135,14,21
	.byte	'OS_STATUS_VALUE_IS_OUT_OF_BOUNDS_2',0,136,14,21
	.byte	'OS_STATUS_LOCKED',0,129,16,21
	.byte	'OS_STATUS_KILLING_IS_DISABLED',0,133,16,21
	.byte	'OS_STATUS_STATE_ALREADY_TERMINATED',0,135,16,21
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_1',0,136,16,21
	.byte	'OS_STATUS_PRIORITY',0,129,18,21
	.byte	'OS_STATUS_ORDER',0,133,18,21
	.byte	'OS_STATUS_STATE_RESTARTING_NO_MEMBER',0,135,18,21
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_2',0,136,18,21
	.byte	'OS_STATUS_NOT_THE_OWNER_1',0,129,20,21
	.byte	'OS_STATUS_STATE_ALREADY_RESTARTING',0,135,20,21
	.byte	'OS_STATUS_VALUE_IS_TOO_LOW_3',0,136,20,21
	.byte	'OS_STATUS_VALUE_IS_NOT_BOOLEAN',0,136,22,0,24
	.byte	'Os_StatusType',0,9,232,5,3
	.word	4975
	.byte	29,9,133,6,9,4,28
	.byte	'Service',0
	.word	1805
	.byte	1,2,35,0,28
	.byte	'Error',0
	.word	631
	.byte	1,2,35,1,28
	.byte	'DetailedError',0
	.word	4975
	.byte	2,2,35,2,0,24
	.byte	'Os_ErrorInformationType',0,9,143,6,3
	.word	7505
	.byte	20,9,175,6,9,1,21
	.byte	'SCHEDULETABLE_STOPPED',0,0,21
	.byte	'SCHEDULETABLE_NEXT',0,1,21
	.byte	'SCHEDULETABLE_WAITING',0,2,21
	.byte	'SCHEDULETABLE_RUNNING',0,3,21
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,24
	.byte	'ScheduleTableStatusType',0,9,192,6,3
	.word	7600
	.byte	24
	.byte	'Os_AccessCheckAddress',0,9,199,6,29
	.word	116
	.byte	20,9,211,6,9,1,21
	.byte	'OS_MEM_ACCESS_TYPE_NON',0,0,21
	.byte	'OS_MEM_ACCESS_TYPE_R',0,1,21
	.byte	'OS_MEM_ACCESS_TYPE_READ',0,1,21
	.byte	'OS_MEM_ACCESS_TYPE_W',0,2,21
	.byte	'OS_MEM_ACCESS_TYPE_WRITE',0,2,21
	.byte	'OS_MEM_ACCESS_TYPE_RW',0,3,21
	.byte	'OS_MEM_ACCESS_TYPE_EXECUTE',0,4,21
	.byte	'OS_MEM_ACCESS_TYPE_X',0,4,21
	.byte	'OS_MEM_ACCESS_TYPE_RX',0,5,21
	.byte	'OS_MEM_ACCESS_TYPE_WX',0,6,21
	.byte	'OS_MEM_ACCESS_TYPE_RWX',0,7,21
	.byte	'OS_MEM_ACCESS_TYPE_S',0,8,21
	.byte	'OS_MEM_ACCESS_TYPE_STACK',0,8,21
	.byte	'OS_MEM_ACCESS_TYPE_RS',0,9,21
	.byte	'OS_MEM_ACCESS_TYPE_WS',0,10,21
	.byte	'OS_MEM_ACCESS_TYPE_RWS',0,11,21
	.byte	'OS_MEM_ACCESS_TYPE_XS',0,12,21
	.byte	'OS_MEM_ACCESS_TYPE_RXS',0,13,21
	.byte	'OS_MEM_ACCESS_TYPE_WXS',0,14,21
	.byte	'OS_MEM_ACCESS_TYPE_RWXS',0,15,0,24
	.byte	'Os_MemAccessType',0,9,233,6,3
	.word	7804
	.byte	24
	.byte	'EcuM_ModeType',0,10,55,15
	.word	631
	.byte	24
	.byte	'EcuM_StateType',0,10,61,15
	.word	631
	.byte	30,1,1,3
	.word	8378
	.byte	24
	.byte	'EcuM_DriverFuncType',0,11,194,2,9
	.word	8381
	.byte	24
	.byte	'EcuM_DefaultAppModeType',0,11,227,2,16
	.word	116
	.byte	24
	.byte	'EcuM_NormalMcuModeType',0,11,245,2,16
	.word	116
	.byte	27
	.byte	'sEcuM_DriverInitOneType',0,11,136,3,16,4,28
	.byte	'FunctionOfDriverInitOne',0
	.word	8386
	.byte	4,2,35,0,0,24
	.byte	'EcuM_DriverInitOneType',0,11,139,3,3
	.word	8480
	.byte	3
	.word	8378
	.byte	27
	.byte	'sEcuM_PCConfigType',0,11,175,3,16,1,28
	.byte	'EcuM_PCConfigNeverUsed',0
	.word	631
	.byte	1,2,35,0,0,24
	.byte	'EcuM_PCConfigType',0,11,178,3,3
	.word	8581
	.byte	25,128,4
	.word	116
	.byte	26,127,0,12
	.word	8666
.L134:
	.byte	9
	.word	8676
	.byte	12
	.word	8666
.L135:
	.byte	9
	.word	8686
	.byte	12
	.word	8666
.L136:
	.byte	9
	.word	8696
	.byte	12
	.word	8666
.L137:
	.byte	9
	.word	8706
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L29:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,46,1,3,8
	.byte	32,13,58,15,59,15,57,15,54,15,39,12,0,0,8,11,1,0,0,9,38,0,73,19,0,0,10,46,1,3,8,54,15,39,12,63,12,60,12
	.byte	0,0,11,5,0,73,19,0,0,12,53,0,73,19,0,0,13,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,14,5,0,3,8,73,19
	.byte	0,0,15,46,0,3,8,54,15,39,12,63,12,60,12,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11
	.byte	0,49,19,0,0,20,4,1,58,15,59,15,57,15,11,15,0,0,21,40,0,3,8,28,13,0,0,22,46,0,3,8,58,15,59,15,57,15,54
	.byte	15,39,12,63,12,60,12,0,0,23,21,0,54,15,0,0,24,22,0,3,8,58,15,59,15,57,15,73,19,0,0,25,1,1,11,15,73,19
	.byte	0,0,26,33,0,47,15,0,0,27,19,1,3,8,58,15,59,15,57,15,11,15,0,0,28,13,0,3,8,73,19,11,15,56,9,0,0,29,19,1
	.byte	58,15,59,15,57,15,11,15,0,0,30,21,0,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L30:
	.word	.L142-.L141
.L141:
	.half	3
	.word	.L144-.L143
.L143:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\Zonal\\demo011\\tasking\\appl\\Include',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\Os\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\component\\_Common\\Implementation',0
	.byte	'D:\\Zonal\\demo011\\tasking\\appl\\GenData',0,0
	.byte	'BrsHw.h',0,1,0,0
	.byte	'Os.h',0,2,0,0
	.byte	'..\\appl\\Source\\BrsHw.c',0,0,0,0
	.byte	'Platform_Types.h',0,3,0,0
	.byte	'Std_Types.h',0,3,0,0
	.byte	'Os_Types_Lcfg.h',0,4,0,0
	.byte	'Os_Hal_Os_Types.h',0,2,0,0
	.byte	'Os_Hal_OsInt.h',0,2,0,0
	.byte	'Os_Types.h',0,2,0,0
	.byte	'Rte_Type.h',0,4,0,0
	.byte	'EcuM_Cfg.h',0,4,0,0,0
.L144:
.L142:
	.sdecl	'.debug_info',debug,cluster('BrsHwDisableInterruptAtPowerOn')
	.sect	'.debug_info'
.L31:
	.word	183
	.half	3
	.word	.L32
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L34,.L33
	.byte	2
	.word	.L27
	.byte	3
	.byte	'BrsHwDisableInterruptAtPowerOn',0,1,175,13,6,1,1,1
	.word	.L10,.L92,.L9
	.byte	4
	.word	.L10,.L92
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('BrsHwDisableInterruptAtPowerOn')
	.sect	'.debug_abbrev'
.L32:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('BrsHwDisableInterruptAtPowerOn')
	.sect	'.debug_line'
.L33:
	.word	.L146-.L145
.L145:
	.half	3
	.word	.L148-.L147
.L147:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\appl\\Source\\BrsHw.c',0,0,0,0,0
.L148:
	.byte	5,12,7,0,5,2
	.word	.L10
	.byte	3,177,13,1,5,1,9
	.half	.L149-.L10
	.byte	3,2,1,7,9
	.half	.L35-.L149
	.byte	0,1,1
.L146:
	.sdecl	'.debug_ranges',debug,cluster('BrsHwDisableInterruptAtPowerOn')
	.sect	'.debug_ranges'
.L34:
	.word	-1,.L10,0,.L35-.L10,0,0
	.sdecl	'.debug_info',debug,cluster('BrsHwSoftwareResetECU')
	.sect	'.debug_info'
.L36:
	.word	415
	.half	3
	.word	.L37
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L39,.L38
	.byte	2
	.word	.L27
	.byte	3
	.byte	'BrsHwSoftwareResetECU',0,1,192,13,6,1,1,1
	.word	.L12,.L93,.L11
	.byte	4
	.word	.L12,.L93
	.byte	5
	.word	.L94,.L95,.L96
	.byte	6
	.word	.L97,.L98
	.byte	7
	.word	.L99,.L95,.L96
	.byte	8
	.byte	'wdtcon0value',0,2,155,2,19
	.word	.L100,.L101
	.byte	8
	.byte	'WDTCON0',0,2,156,2,11
	.word	.L102,.L103
	.byte	5
	.word	.L104,.L95,.L3
	.byte	6
	.word	.L105,.L106
	.byte	9
	.word	.L107,.L95,.L3
	.byte	0,0,0,5
	.word	.L108,.L109,.L6
	.byte	6
	.word	.L110,.L111
	.byte	7
	.word	.L112,.L109,.L6
	.byte	8
	.byte	'wdtcon0value',0,2,191,2,19
	.word	.L113,.L114
	.byte	8
	.byte	'WDTCON0',0,2,192,2,11
	.word	.L102,.L115
	.byte	5
	.word	.L104,.L109,.L5
	.byte	6
	.word	.L105,.L106
	.byte	9
	.word	.L107,.L109,.L5
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('BrsHwSoftwareResetECU')
	.sect	'.debug_abbrev'
.L37:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,5,0,49,16,2,6,0,0,7,11
	.byte	1,49,16,17,1,18,1,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('BrsHwSoftwareResetECU')
	.sect	'.debug_line'
.L38:
	.word	.L151-.L150
.L150:
	.half	3
	.word	.L153-.L152
.L152:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\Zonal\\demo011\\tasking\\appl\\Include',0,0
	.byte	'..\\appl\\Source\\BrsHw.c',0,0,0,0
	.byte	'BrsHw.h',0,1,0,0,0
.L153:
	.byte	5,6,7,0,5,2
	.word	.L12
	.byte	3,191,13,1,5,23,9
	.half	.L138-.L12
	.byte	3,3,1,5,38,9
	.half	.L154-.L138
	.byte	3,9,1,4,2,5,12,9
	.half	.L95-.L154
	.byte	3,190,116,1,5,22,9
	.half	.L155-.L95
	.byte	3,4,1,5,3,9
	.half	.L156-.L155
	.byte	3,122,1,5,5,7,9
	.half	.L157-.L156
	.byte	3,2,1,5,42,9
	.half	.L2-.L157
	.byte	3,4,1,5,5,9
	.half	.L158-.L2
	.byte	1,5,18,9
	.half	.L3-.L158
	.byte	3,21,1,5,16,9
	.half	.L159-.L3
	.byte	1,5,3,9
	.half	.L160-.L159
	.byte	3,1,1,5,16,9
	.half	.L161-.L160
	.byte	1,5,3,9
	.half	.L162-.L161
	.byte	3,1,1,5,16,9
	.half	.L163-.L162
	.byte	1,5,3,9
	.half	.L164-.L163
	.byte	3,1,1,5,16,9
	.half	.L165-.L164
	.byte	1,5,14,9
	.half	.L166-.L165
	.byte	3,2,1,5,12,9
	.half	.L167-.L166
	.byte	1,5,3,9
	.half	.L168-.L167
	.byte	3,5,1,5,16,9
	.half	.L169-.L168
	.byte	1,5,3,9
	.half	.L170-.L169
	.byte	3,1,1,5,16,9
	.half	.L171-.L170
	.byte	1,5,3,9
	.half	.L172-.L171
	.byte	3,1,1,5,14,9
	.half	.L173-.L172
	.byte	3,1,1,5,12,9
	.half	.L174-.L173
	.byte	1,5,16,9
	.half	.L175-.L174
	.byte	3,1,1,5,3,9
	.half	.L176-.L175
	.byte	3,1,1,9
	.half	.L177-.L176
	.byte	3,1,1,4,1,9
	.half	.L96-.L177
	.byte	3,154,11,1,5,16,9
	.half	.L178-.L96
	.byte	1,5,36,9
	.half	.L179-.L178
	.byte	3,1,1,4,2,5,3,9
	.half	.L109-.L179
	.byte	3,186,116,1,5,42,7,9
	.half	.L180-.L109
	.byte	3,6,1,5,5,9
	.half	.L181-.L180
	.byte	1,5,18,9
	.half	.L5-.L181
	.byte	3,55,1,5,16,9
	.half	.L182-.L5
	.byte	1,5,3,9
	.half	.L183-.L182
	.byte	3,1,1,5,16,9
	.half	.L184-.L183
	.byte	1,5,3,9
	.half	.L185-.L184
	.byte	3,1,1,5,16,9
	.half	.L186-.L185
	.byte	1,5,3,9
	.half	.L187-.L186
	.byte	3,1,1,5,16,9
	.half	.L188-.L187
	.byte	1,5,14,9
	.half	.L189-.L188
	.byte	3,2,1,5,12,9
	.half	.L190-.L189
	.byte	1,5,3,9
	.half	.L191-.L190
	.byte	3,5,1,5,16,9
	.half	.L192-.L191
	.byte	1,5,3,9
	.half	.L193-.L192
	.byte	3,1,1,5,16,9
	.half	.L194-.L193
	.byte	1,5,3,9
	.half	.L195-.L194
	.byte	3,1,1,5,14,9
	.half	.L196-.L195
	.byte	3,1,1,5,12,9
	.half	.L197-.L196
	.byte	1,5,16,9
	.half	.L198-.L197
	.byte	3,1,1,5,3,9
	.half	.L199-.L198
	.byte	3,1,1,9
	.half	.L200-.L199
	.byte	3,1,1,4,1,5,11,9
	.half	.L6-.L200
	.byte	3,252,10,1,5,1,9
	.half	.L40-.L6
	.byte	3,4,0,1,1
.L151:
	.sdecl	'.debug_ranges',debug,cluster('BrsHwSoftwareResetECU')
	.sect	'.debug_ranges'
.L39:
	.word	-1,.L12,0,.L40-.L12,0,0
	.sdecl	'.debug_info',debug,cluster('BrsHwGetResetReason')
	.sect	'.debug_info'
.L41:
	.word	176
	.half	3
	.word	.L42
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L44,.L43
	.byte	2
	.word	.L27
	.byte	3
	.byte	'BrsHwGetResetReason',0,1,226,13,23
	.word	.L116
	.byte	1,1,1
	.word	.L14,.L117,.L13
	.byte	4
	.word	.L14,.L117
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('BrsHwGetResetReason')
	.sect	'.debug_abbrev'
.L42:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('BrsHwGetResetReason')
	.sect	'.debug_line'
.L43:
	.word	.L202-.L201
.L201:
	.half	3
	.word	.L204-.L203
.L203:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\appl\\Source\\BrsHw.c',0,0,0,0,0
.L204:
	.byte	5,7,7,0,5,2
	.word	.L14
	.byte	3,227,13,1,5,19,9
	.half	.L205-.L14
	.byte	1,5,1,9
	.half	.L206-.L205
	.byte	3,8,1,7,9
	.half	.L45-.L206
	.byte	0,1,1
.L202:
	.sdecl	'.debug_ranges',debug,cluster('BrsHwGetResetReason')
	.sect	'.debug_ranges'
.L44:
	.word	-1,.L14,0,.L45-.L14,0,0
	.sdecl	'.debug_info',debug,cluster('BrsHwTime100NOP')
	.sect	'.debug_info'
.L46:
	.word	168
	.half	3
	.word	.L47
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L49,.L48
	.byte	2
	.word	.L27
	.byte	3
	.byte	'BrsHwTime100NOP',0,1,251,13,6,1,1,1
	.word	.L16,.L118,.L15
	.byte	4
	.word	.L16,.L118
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('BrsHwTime100NOP')
	.sect	'.debug_abbrev'
.L47:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('BrsHwTime100NOP')
	.sect	'.debug_line'
.L48:
	.word	.L208-.L207
.L207:
	.half	3
	.word	.L210-.L209
.L209:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\appl\\Source\\BrsHw.c',0,0,0,0,0
.L210:
	.byte	5,3,7,0,5,2
	.word	.L16
	.byte	3,253,13,1,5,10,9
	.half	.L211-.L16
	.byte	1,5,17,9
	.half	.L212-.L211
	.byte	1,5,24,9
	.half	.L213-.L212
	.byte	1,5,31,9
	.half	.L214-.L213
	.byte	1,5,38,9
	.half	.L215-.L214
	.byte	1,5,45,9
	.half	.L216-.L215
	.byte	1,5,52,9
	.half	.L217-.L216
	.byte	1,5,59,9
	.half	.L218-.L217
	.byte	1,5,66,9
	.half	.L219-.L218
	.byte	1,5,3,9
	.half	.L220-.L219
	.byte	3,1,1,5,10,9
	.half	.L221-.L220
	.byte	1,5,17,9
	.half	.L222-.L221
	.byte	1,5,24,9
	.half	.L223-.L222
	.byte	1,5,31,9
	.half	.L224-.L223
	.byte	1,5,38,9
	.half	.L225-.L224
	.byte	1,5,45,9
	.half	.L226-.L225
	.byte	1,5,52,9
	.half	.L227-.L226
	.byte	1,5,59,9
	.half	.L228-.L227
	.byte	1,5,66,9
	.half	.L229-.L228
	.byte	1,5,3,9
	.half	.L230-.L229
	.byte	3,1,1,5,10,9
	.half	.L231-.L230
	.byte	1,5,17,9
	.half	.L232-.L231
	.byte	1,5,24,9
	.half	.L233-.L232
	.byte	1,5,31,9
	.half	.L234-.L233
	.byte	1,5,38,9
	.half	.L235-.L234
	.byte	1,5,45,9
	.half	.L236-.L235
	.byte	1,5,52,9
	.half	.L237-.L236
	.byte	1,5,59,9
	.half	.L238-.L237
	.byte	1,5,66,9
	.half	.L239-.L238
	.byte	1,5,3,9
	.half	.L240-.L239
	.byte	3,1,1,5,10,9
	.half	.L241-.L240
	.byte	1,5,17,9
	.half	.L242-.L241
	.byte	1,5,24,9
	.half	.L243-.L242
	.byte	1,5,31,9
	.half	.L244-.L243
	.byte	1,5,38,9
	.half	.L245-.L244
	.byte	1,5,45,9
	.half	.L246-.L245
	.byte	1,5,52,9
	.half	.L247-.L246
	.byte	1,5,59,9
	.half	.L248-.L247
	.byte	1,5,66,9
	.half	.L249-.L248
	.byte	1,5,3,9
	.half	.L250-.L249
	.byte	3,1,1,5,10,9
	.half	.L251-.L250
	.byte	1,5,17,9
	.half	.L252-.L251
	.byte	1,5,24,9
	.half	.L253-.L252
	.byte	1,5,31,9
	.half	.L254-.L253
	.byte	1,5,38,9
	.half	.L255-.L254
	.byte	1,5,45,9
	.half	.L256-.L255
	.byte	1,5,52,9
	.half	.L257-.L256
	.byte	1,5,59,9
	.half	.L258-.L257
	.byte	1,5,66,9
	.half	.L259-.L258
	.byte	1,5,3,9
	.half	.L260-.L259
	.byte	3,2,1,5,10,9
	.half	.L261-.L260
	.byte	1,5,17,9
	.half	.L262-.L261
	.byte	1,5,24,9
	.half	.L263-.L262
	.byte	1,5,31,9
	.half	.L264-.L263
	.byte	1,5,38,9
	.half	.L265-.L264
	.byte	1,5,45,9
	.half	.L266-.L265
	.byte	1,5,52,9
	.half	.L267-.L266
	.byte	1,5,59,9
	.half	.L268-.L267
	.byte	1,5,66,9
	.half	.L269-.L268
	.byte	1,5,3,9
	.half	.L270-.L269
	.byte	3,1,1,5,10,9
	.half	.L271-.L270
	.byte	1,5,17,9
	.half	.L272-.L271
	.byte	1,5,24,9
	.half	.L273-.L272
	.byte	1,5,31,9
	.half	.L274-.L273
	.byte	1,5,38,9
	.half	.L275-.L274
	.byte	1,5,45,9
	.half	.L276-.L275
	.byte	1,5,52,9
	.half	.L277-.L276
	.byte	1,5,59,9
	.half	.L278-.L277
	.byte	1,5,66,9
	.half	.L279-.L278
	.byte	1,5,3,9
	.half	.L280-.L279
	.byte	3,1,1,5,10,9
	.half	.L281-.L280
	.byte	1,5,17,9
	.half	.L282-.L281
	.byte	1,5,24,9
	.half	.L283-.L282
	.byte	1,5,31,9
	.half	.L284-.L283
	.byte	1,5,38,9
	.half	.L285-.L284
	.byte	1,5,45,9
	.half	.L286-.L285
	.byte	1,5,52,9
	.half	.L287-.L286
	.byte	1,5,59,9
	.half	.L288-.L287
	.byte	1,5,66,9
	.half	.L289-.L288
	.byte	1,5,3,9
	.half	.L290-.L289
	.byte	3,1,1,5,10,9
	.half	.L291-.L290
	.byte	1,5,17,9
	.half	.L292-.L291
	.byte	1,5,24,9
	.half	.L293-.L292
	.byte	1,5,31,9
	.half	.L294-.L293
	.byte	1,5,38,9
	.half	.L295-.L294
	.byte	1,5,45,9
	.half	.L296-.L295
	.byte	1,5,52,9
	.half	.L297-.L296
	.byte	1,5,59,9
	.half	.L298-.L297
	.byte	1,5,66,9
	.half	.L299-.L298
	.byte	1,5,3,9
	.half	.L300-.L299
	.byte	3,1,1,5,10,9
	.half	.L301-.L300
	.byte	1,5,17,9
	.half	.L302-.L301
	.byte	1,5,24,9
	.half	.L303-.L302
	.byte	1,5,31,9
	.half	.L304-.L303
	.byte	1,5,38,9
	.half	.L305-.L304
	.byte	1,5,45,9
	.half	.L306-.L305
	.byte	1,5,52,9
	.half	.L307-.L306
	.byte	1,5,59,9
	.half	.L308-.L307
	.byte	1,5,66,9
	.half	.L309-.L308
	.byte	1,5,1,9
	.half	.L310-.L309
	.byte	3,2,1,7,9
	.half	.L50-.L310
	.byte	0,1,1
.L208:
	.sdecl	'.debug_ranges',debug,cluster('BrsHwTime100NOP')
	.sect	'.debug_ranges'
.L49:
	.word	-1,.L16,0,.L50-.L16,0,0
	.sdecl	'.debug_info',debug,cluster('BrsHw_GetCore')
	.sect	'.debug_info'
.L51:
	.word	170
	.half	3
	.word	.L52
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L54,.L53
	.byte	2
	.word	.L27
	.byte	3
	.byte	'BrsHw_GetCore',0,1,172,14,8
	.word	.L119
	.byte	1,1,1
	.word	.L18,.L120,.L17
	.byte	4
	.word	.L18,.L120
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('BrsHw_GetCore')
	.sect	'.debug_abbrev'
.L52:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('BrsHw_GetCore')
	.sect	'.debug_line'
.L53:
	.word	.L312-.L311
.L311:
	.half	3
	.word	.L314-.L313
.L313:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\appl\\Source\\BrsHw.c',0,0,0,0,0
.L314:
	.byte	5,10,7,0,5,2
	.word	.L18
	.byte	3,173,14,1,5,1,9
	.half	.L315-.L18
	.byte	3,1,1,7,9
	.half	.L55-.L315
	.byte	0,1,1
.L312:
	.sdecl	'.debug_ranges',debug,cluster('BrsHw_GetCore')
	.sect	'.debug_ranges'
.L54:
	.word	-1,.L18,0,.L55-.L18,0,0
	.sdecl	'.debug_info',debug,cluster('BrsHw_EnableInterrupt')
	.sect	'.debug_info'
.L56:
	.word	212
	.half	3
	.word	.L57
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L59,.L58
	.byte	2
	.word	.L27
	.byte	3
	.byte	'BrsHw_EnableInterrupt',0,1,189,14,6,1,1,1
	.word	.L20,.L121,.L19
	.byte	4
	.byte	'Source',0,1,189,14,35
	.word	.L119,.L122
	.byte	4
	.byte	'Priority',0,1,189,14,49
	.word	.L123,.L124
	.byte	5
	.word	.L125
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('BrsHw_EnableInterrupt')
	.sect	'.debug_abbrev'
.L57:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('BrsHw_EnableInterrupt')
	.sect	'.debug_line'
.L58:
	.word	.L317-.L316
.L316:
	.half	3
	.word	.L319-.L318
.L318:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\appl\\Source\\BrsHw.c',0,0,0,0,0
.L319:
	.byte	5,3,7,0,5,2
	.word	.L20
	.byte	3,191,14,1,5,23,9
	.half	.L140-.L20
	.byte	1,5,3,9
	.half	.L320-.L140
	.byte	3,1,1,5,23,9
	.half	.L321-.L320
	.byte	1,5,1,9
	.half	.L322-.L321
	.byte	3,1,1,7,9
	.half	.L60-.L322
	.byte	0,1,1
.L317:
	.sdecl	'.debug_ranges',debug,cluster('BrsHw_EnableInterrupt')
	.sect	'.debug_ranges'
.L59:
	.word	-1,.L20,0,.L60-.L20,0,0
.L125:
	.word	-1,.L20,0,.L121-.L20,-1,.L22,0,.L75-.L22,0,0
	.sdecl	'.debug_info',debug,cluster('BrsHw_DisableInterrupt')
	.sect	'.debug_info'
.L61:
	.word	195
	.half	3
	.word	.L62
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L64,.L63
	.byte	2
	.word	.L27
	.byte	3
	.byte	'BrsHw_DisableInterrupt',0,1,207,14,6,1,1,1
	.word	.L24,.L126,.L23
	.byte	4
	.byte	'Source',0,1,207,14,36
	.word	.L119,.L127
	.byte	5
	.word	.L24,.L126
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('BrsHw_DisableInterrupt')
	.sect	'.debug_abbrev'
.L62:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('BrsHw_DisableInterrupt')
	.sect	'.debug_line'
.L63:
	.word	.L324-.L323
.L323:
	.half	3
	.word	.L326-.L325
.L325:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\appl\\Source\\BrsHw.c',0,0,0,0,0
.L326:
	.byte	5,3,7,0,5,2
	.word	.L24
	.byte	3,209,14,1,5,23,9
	.half	.L327-.L24
	.byte	1,5,1,9
	.half	.L328-.L327
	.byte	3,1,1,7,9
	.half	.L65-.L328
	.byte	0,1,1
.L324:
	.sdecl	'.debug_ranges',debug,cluster('BrsHw_DisableInterrupt')
	.sect	'.debug_ranges'
.L64:
	.word	-1,.L24,0,.L65-.L24,0,0
	.sdecl	'.debug_info',debug,cluster('BrsHw_TriggerSoftwareInterrupt')
	.sect	'.debug_info'
.L66:
	.word	203
	.half	3
	.word	.L67
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L69,.L68
	.byte	2
	.word	.L27
	.byte	3
	.byte	'BrsHw_TriggerSoftwareInterrupt',0,1,225,14,6,1,1,1
	.word	.L26,.L128,.L25
	.byte	4
	.byte	'Source',0,1,225,14,44
	.word	.L119,.L129
	.byte	5
	.word	.L26,.L128
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('BrsHw_TriggerSoftwareInterrupt')
	.sect	'.debug_abbrev'
.L67:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('BrsHw_TriggerSoftwareInterrupt')
	.sect	'.debug_line'
.L68:
	.word	.L330-.L329
.L329:
	.half	3
	.word	.L332-.L331
.L331:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\appl\\Source\\BrsHw.c',0,0,0,0,0
.L332:
	.byte	5,3,7,0,5,2
	.word	.L26
	.byte	3,226,14,1,5,23,9
	.half	.L333-.L26
	.byte	1,5,1,9
	.half	.L334-.L333
	.byte	3,1,1,7,9
	.half	.L70-.L334
	.byte	0,1,1
.L330:
	.sdecl	'.debug_ranges',debug,cluster('BrsHw_TriggerSoftwareInterrupt')
	.sect	'.debug_ranges'
.L69:
	.word	-1,.L26,0,.L70-.L26,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_1')
	.sect	'.debug_info'
.L71:
	.word	151
	.half	3
	.word	.L72
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1
	.word	.L74,.L73
	.byte	2
	.word	.L27
	.byte	3
	.byte	'.cocofun_1',0,1,189,14,6,1
	.word	.L22,.L75,.L21
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_1')
	.sect	'.debug_abbrev'
.L72:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_1')
	.sect	'.debug_line'
.L73:
	.word	.L336-.L335
.L335:
	.half	3
	.word	.L338-.L337
.L337:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\appl\\Source\\BrsHw.c',0,0,0,0,0
.L338:
	.byte	5,3,7,0,5,2
	.word	.L22
	.byte	3,191,14,1,9
	.half	.L75-.L22
	.byte	0,1,1,5,3,0,5,2
	.word	.L22
	.byte	3,209,14,1,9
	.half	.L339-.L22
	.byte	3,110,1,7,9
	.half	.L75-.L339
	.byte	0,1,1,5,3,0,5,2
	.word	.L22
	.byte	3,226,14,1,9
	.half	.L339-.L22
	.byte	3,93,1,7,9
	.half	.L75-.L339
	.byte	0,1,1
.L336:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_1')
	.sect	'.debug_ranges'
.L74:
	.word	-1,.L22,0,.L75-.L22,0,0
	.sdecl	'.debug_info',debug,cluster('kBrsHwMainVersion')
	.sect	'.debug_info'
.L76:
	.word	147
	.half	3
	.word	.L77
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L27
	.byte	3
	.byte	'kBrsHwMainVersion',0,3,112,13
	.word	.L130
	.byte	1,5,3
	.word	kBrsHwMainVersion
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('kBrsHwMainVersion')
	.sect	'.debug_abbrev'
.L77:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('kBrsHwSubVersion')
	.sect	'.debug_info'
.L78:
	.word	146
	.half	3
	.word	.L79
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L27
	.byte	3
	.byte	'kBrsHwSubVersion',0,3,113,13
	.word	.L131
	.byte	1,5,3
	.word	kBrsHwSubVersion
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('kBrsHwSubVersion')
	.sect	'.debug_abbrev'
.L79:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('kBrsHwBugfixVersion')
	.sect	'.debug_info'
.L80:
	.word	149
	.half	3
	.word	.L81
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L27
	.byte	3
	.byte	'kBrsHwBugfixVersion',0,3,114,13
	.word	.L132
	.byte	1,5,3
	.word	kBrsHwBugfixVersion
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('kBrsHwBugfixVersion')
	.sect	'.debug_abbrev'
.L81:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('kBrsWdtCon0Addresses')
	.sect	'.debug_info'
.L82:
	.word	150
	.half	3
	.word	.L83
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L27
	.byte	3
	.byte	'kBrsWdtCon0Addresses',0,3,125,14
	.word	.L133
	.byte	1,5,3
	.word	kBrsWdtCon0Addresses
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('kBrsWdtCon0Addresses')
	.sect	'.debug_abbrev'
.L83:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('bmiField0')
	.sect	'.debug_info'
.L84:
	.word	140
	.half	3
	.word	.L85
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L27
	.byte	3
	.byte	'bmiField0',0,3,159,1,23
	.word	.L134
	.byte	1,5,3
	.word	bmiField0
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('bmiField0')
	.sect	'.debug_abbrev'
.L85:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('bmiField1')
	.sect	'.debug_info'
.L86:
	.word	140
	.half	3
	.word	.L87
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L27
	.byte	3
	.byte	'bmiField1',0,3,211,1,23
	.word	.L135
	.byte	1,5,3
	.word	bmiField1
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('bmiField1')
	.sect	'.debug_abbrev'
.L87:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('bmiField2')
	.sect	'.debug_info'
.L88:
	.word	140
	.half	3
	.word	.L89
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L27
	.byte	3
	.byte	'bmiField2',0,3,136,2,23
	.word	.L136
	.byte	1,5,3
	.word	bmiField2
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('bmiField2')
	.sect	'.debug_abbrev'
.L89:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('bmiField3')
	.sect	'.debug_info'
.L90:
	.word	140
	.half	3
	.word	.L91
	.byte	4,1
	.byte	'..\\appl\\Source\\BrsHw.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\Zonal\\demo011\\tasking\\Debug\\',0,12,1,2
	.word	.L27
	.byte	3
	.byte	'bmiField3',0,3,189,2,23
	.word	.L137
	.byte	1,5,3
	.word	bmiField3
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('bmiField3')
	.sect	'.debug_abbrev'
.L91:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_1')
	.sect	'.debug_loc'
.L21:
	.word	-1,.L22,0,.L75-.L22
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('BrsHwDisableInterruptAtPowerOn')
	.sect	'.debug_loc'
.L9:
	.word	-1,.L10,0,.L92-.L10
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('BrsHwGetResetReason')
	.sect	'.debug_loc'
.L13:
	.word	-1,.L14,0,.L117-.L14
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('BrsHwSoftwareResetECU')
	.sect	'.debug_loc'
.L11:
	.word	-1,.L12,0,.L138-.L12
	.half	2
	.byte	138,0
	.word	.L138-.L12,.L93-.L12
	.half	2
	.byte	138,8
	.word	0,0
.L103:
	.word	0,0
.L115:
	.word	0,0
.L98:
	.word	0,0
.L111:
	.word	0,0
.L106:
	.word	0,0
.L101:
	.word	-1,.L12,0,.L93-.L12
	.half	2
	.byte	145,120
	.word	0,0
.L114:
	.word	-1,.L12,0,.L93-.L12
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('BrsHwTime100NOP')
	.sect	'.debug_loc'
.L15:
	.word	-1,.L16,0,.L118-.L16
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('BrsHw_DisableInterrupt')
	.sect	'.debug_loc'
.L23:
	.word	-1,.L24,0,.L126-.L24
	.half	2
	.byte	138,0
	.word	0,0
.L127:
	.word	-1,.L24,.L22-.L24,.L139-.L24
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('BrsHw_EnableInterrupt')
	.sect	'.debug_loc'
.L19:
	.word	-1,.L20,0,.L121-.L20
	.half	2
	.byte	138,0
	.word	0,0
.L124:
	.word	-1,.L20,.L22-.L20,.L75-.L20
	.half	1
	.byte	85
	.word	.L140-.L20,.L121-.L20
	.half	1
	.byte	85
	.word	0,0
.L122:
	.word	-1,.L20,.L22-.L20,.L139-.L20
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('BrsHw_GetCore')
	.sect	'.debug_loc'
.L17:
	.word	-1,.L18,0,.L120-.L18
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('BrsHw_TriggerSoftwareInterrupt')
	.sect	'.debug_loc'
.L25:
	.word	-1,.L26,0,.L128-.L26
	.half	2
	.byte	138,0
	.word	0,0
.L129:
	.word	-1,.L26,.L22-.L26,.L139-.L26
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L340:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('BrsHwDisableInterruptAtPowerOn')
	.sect	'.debug_frame'
	.word	24
	.word	.L340,.L10,.L92-.L10
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('BrsHwSoftwareResetECU')
	.sect	'.debug_frame'
	.word	28
	.word	.L340,.L12,.L93-.L12
	.byte	4
	.word	(.L138-.L12)/2
	.byte	19,8,22,26,3,19,138,8,0,0,0
	.sdecl	'.debug_frame',debug,cluster('BrsHwGetResetReason')
	.sect	'.debug_frame'
	.word	24
	.word	.L340,.L14,.L117-.L14
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('BrsHwTime100NOP')
	.sect	'.debug_frame'
	.word	24
	.word	.L340,.L16,.L118-.L16
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('BrsHw_GetCore')
	.sect	'.debug_frame'
	.word	24
	.word	.L340,.L18,.L120-.L18
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('BrsHw_EnableInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L340,.L20,.L121-.L20
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('BrsHw_DisableInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L340,.L24,.L126-.L24
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('BrsHw_TriggerSoftwareInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L340,.L26,.L128-.L26
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L341:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_1')
	.sect	'.debug_frame'
	.word	24
	.word	.L341,.L22,.L75-.L22
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\appl\Source\BrsHw.c	  1893  
; ..\appl\Source\BrsHw.c	  1894  #if defined (BRS_ENABLE_FBL_SUPPORT)
; ..\appl\Source\BrsHw.c	  1895  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1896  /**
; ..\appl\Source\BrsHw.c	  1897   * @brief      This API is used to disable the flash ECC error reporting,
; ..\appl\Source\BrsHw.c	  1898   *             if this is necessary on the platform to grant access to it.
; ..\appl\Source\BrsHw.c	  1899   * @pre        
; ..\appl\Source\BrsHw.c	  1900   * @param[in]  -
; ..\appl\Source\BrsHw.c	  1901   * @param[out] -
; ..\appl\Source\BrsHw.c	  1902   * @return     -
; ..\appl\Source\BrsHw.c	  1903   * @context    Function is called from FBL boot code, before flash is accessed.
; ..\appl\Source\BrsHw.c	  1904   */
; ..\appl\Source\BrsHw.c	  1905  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1906  void BrsHwDisableEccErrorReporting(void)
; ..\appl\Source\BrsHw.c	  1907  {
; ..\appl\Source\BrsHw.c	  1908  #if defined (BRS_DERIVATIVE_GROUP_TC2xx)
; ..\appl\Source\BrsHw.c	  1909    /* Disable Flash 0 traps. TODO: Check if this is needed by your configuration. */
; ..\appl\Source\BrsHw.c	  1910    /* FLASH0_MARD */
; ..\appl\Source\BrsHw.c	  1911    BRS_FLASH0_MARD = 0x00008000ul;
; ..\appl\Source\BrsHw.c	  1912    /* FLASH0_MARP */
; ..\appl\Source\BrsHw.c	  1913    BrsHwUnlockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	  1914    BRS_FLASH0_MARP = 0x00008000ul;
; ..\appl\Source\BrsHw.c	  1915    BrsHwLockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	  1916  
; ..\appl\Source\BrsHw.c	  1917  #elif defined (BRS_DERIVATIVE_GROUP_TC3xx)
; ..\appl\Source\BrsHw.c	  1918    /* Disable uncorrectable bit error traps */
; ..\appl\Source\BrsHw.c	  1919    BrsHwUnlockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	  1920  
; ..\appl\Source\BrsHw.c	  1921    /* Mask PFLASH uncorrectable ECC bit error */
; ..\appl\Source\BrsHw.c	  1922    BRS_CPU_FLASHCON(0, 1u) = BRS_FLASHCON1_MASKUECC;       /* CPU0_FLASHCON1 MASKUECC=1 (ECC error disabled) */
; ..\appl\Source\BrsHw.c	  1923  #if (BRS_CPU_CORE_AMOUNT > 1)
; ..\appl\Source\BrsHw.c	  1924    BRS_CPU_FLASHCON(1, 1u) = BRS_FLASHCON1_MASKUECC;       /* CPU1_FLASHCON1 MASKUECC=1 (ECC error disabled) */
; ..\appl\Source\BrsHw.c	  1925  #endif
; ..\appl\Source\BrsHw.c	  1926  #if (BRS_CPU_CORE_AMOUNT > 2)
; ..\appl\Source\BrsHw.c	  1927    BRS_CPU_FLASHCON(2, 1u) = BRS_FLASHCON1_MASKUECC;       /* CPU2_FLASHCON1 MASKUECC=1 (ECC error disabled) */
; ..\appl\Source\BrsHw.c	  1928  #endif
; ..\appl\Source\BrsHw.c	  1929  #if (BRS_CPU_CORE_AMOUNT > 3)
; ..\appl\Source\BrsHw.c	  1930    BRS_CPU_FLASHCON(3, 1u) = BRS_FLASHCON1_MASKUECC;       /* CPU3_FLASHCON1 MASKUECC=1 (ECC error disabled) */
; ..\appl\Source\BrsHw.c	  1931  #endif
; ..\appl\Source\BrsHw.c	  1932  #if (BRS_CPU_CORE_AMOUNT > 5)
; ..\appl\Source\BrsHw.c	  1933    BRS_CPU_FLASHCON(4, 1u) = BRS_FLASHCON1_MASKUECC;       /* CPU4_FLASHCON1 MASKUECC=1 (ECC error disabled) */
; ..\appl\Source\BrsHw.c	  1934    BRS_CPU_FLASHCON(5, 1u) = BRS_FLASHCON1_MASKUECC;       /* CPU5_FLASHCON1 MASKUECC=1 (ECC error disabled) */
; ..\appl\Source\BrsHw.c	  1935  #endif
; ..\appl\Source\BrsHw.c	  1936  
; ..\appl\Source\BrsHw.c	  1937    /* For DF0 and DF1 (when DF1 is configured as not HSM_exclusive), the uncorrectable ECC error trap is disabled. */
; ..\appl\Source\BrsHw.c	  1938    BRS_DMU_ECCC(0) = BRS_DMU_ECCC_TRAPDIS; /* DMU_HF_ECCC TRAPDIS = ECC error trap is disabled */
; ..\appl\Source\BrsHw.c	  1939    /* If DF1 is configured as HSM_exclusive then the uncorrectable ECC error trap is disabled. */
; ..\appl\Source\BrsHw.c	  1940    /* BRS_DMU_ECCC(1) = BRS_DMU_ECCC_TRAPDIS; */ /* DMU_SF_ECCC TRAPDIS = ECC error trap is disabled */
; ..\appl\Source\BrsHw.c	  1941  
; ..\appl\Source\BrsHw.c	  1942    BrsHwLockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	  1943  
; ..\appl\Source\BrsHw.c	  1944  # else
; ..\appl\Source\BrsHw.c	  1945    #error Function to Disable Ecc Error Reporting is currently only supported for TC2xx and TC3xx derivative groups.
; ..\appl\Source\BrsHw.c	  1946  #endif /*BRS_DERIVATIVE_GROUP_x*/
; ..\appl\Source\BrsHw.c	  1947  }
; ..\appl\Source\BrsHw.c	  1948  #endif /*BRS_ENABLE_FBL_SUPPORT*/
; ..\appl\Source\BrsHw.c	  1949  
; ..\appl\Source\BrsHw.c	  1950  /* DrvCan/DrvLin/DrvFr/DrvEth application callback functions for access protection of critical registers */
; ..\appl\Source\BrsHw.c	  1951  /* As different driver versions use different callback names, they are duplicated. */
; ..\appl\Source\BrsHw.c	  1952  #if defined (BRS_ENABLE_CAN_SUPPORT)      || \ 
; ..\appl\Source\BrsHw.c	  1953      defined (BRS_ENABLE_LIN_SUPPORT)      || \ 
; ..\appl\Source\BrsHw.c	  1954      defined (BRS_ENABLE_FLEXRAY_SUPPORT)  || \ 
; ..\appl\Source\BrsHw.c	  1955      defined (BRS_ENABLE_ETHERNET_SUPPORT)
; ..\appl\Source\BrsHw.c	  1956  void Appl_UnlockInit(void)
; ..\appl\Source\BrsHw.c	  1957  {
; ..\appl\Source\BrsHw.c	  1958    BrsHwUnlockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	  1959  }
; ..\appl\Source\BrsHw.c	  1960  
; ..\appl\Source\BrsHw.c	  1961  void Appl_UnlockEndinit(void)
; ..\appl\Source\BrsHw.c	  1962  {
; ..\appl\Source\BrsHw.c	  1963    BrsHwUnlockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	  1964  }
; ..\appl\Source\BrsHw.c	  1965  
; ..\appl\Source\BrsHw.c	  1966  void Appl_LockInit(void)
; ..\appl\Source\BrsHw.c	  1967  {
; ..\appl\Source\BrsHw.c	  1968    BrsHwLockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	  1969  }
; ..\appl\Source\BrsHw.c	  1970  
; ..\appl\Source\BrsHw.c	  1971  void Appl_LockEndinit(void)
; ..\appl\Source\BrsHw.c	  1972  {
; ..\appl\Source\BrsHw.c	  1973    BrsHwLockInitInline(BrsHw_GetCore());
; ..\appl\Source\BrsHw.c	  1974  }
; ..\appl\Source\BrsHw.c	  1975  #endif /*BRS_ENABLE_CAN_SUPPORT || BRS_ENABLE_LIN_SUPPORT || BRS_ENABLE_FLEXRAY_SUPPORT || BRS_ENABLE_ETHERNET_SUPPORT*/
; ..\appl\Source\BrsHw.c	  1976  
; ..\appl\Source\BrsHw.c	  1977  /* DrvCan Application function for wait mechanism */
; ..\appl\Source\BrsHw.c	  1978  #if defined (BRS_ENABLE_CAN_SUPPORT)
; ..\appl\Source\BrsHw.c	  1979  void ApplCanWaitSetMCR(void)
; ..\appl\Source\BrsHw.c	  1980  {
; ..\appl\Source\BrsHw.c	  1981    uint32 i;
; ..\appl\Source\BrsHw.c	  1982    for (i=0; i<10000; i++)
; ..\appl\Source\BrsHw.c	  1983    {
; ..\appl\Source\BrsHw.c	  1984      nop();
; ..\appl\Source\BrsHw.c	  1985    }
; ..\appl\Source\BrsHw.c	  1986  }
; ..\appl\Source\BrsHw.c	  1987  #endif /*BRS_ENABLE_CAN_SUPPORT*/
; ..\appl\Source\BrsHw.c	  1988  
; ..\appl\Source\BrsHw.c	  1989  
; ..\appl\Source\BrsHw.c	  1990  #if defined (BRS_ENABLE_FLEXRAY_SUPPORT)
; ..\appl\Source\BrsHw.c	  1991  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  1992  /**
; ..\appl\Source\BrsHw.c	  1993   * @brief      Callback from communication stack. Init E-RAY RAM to avoid ECC errors
; ..\appl\Source\BrsHw.c	  1994   * @pre        
; ..\appl\Source\BrsHw.c	  1995   * @param[in]  -
; ..\appl\Source\BrsHw.c	  1996   * @param[out] -
; ..\appl\Source\BrsHw.c	  1997   * @return     -
; ..\appl\Source\BrsHw.c	  1998   * @context    Function is called Fr_InitMemory(). It is just an empty function
; ..\appl\Source\BrsHw.c	  1999   *             because the RAM init is already done during startup.
; ..\appl\Source\BrsHw.c	  2000   */
; ..\appl\Source\BrsHw.c	  2001  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  2002  void Appl_TricoreAurixInit(void)
; ..\appl\Source\BrsHw.c	  2003  {
; ..\appl\Source\BrsHw.c	  2004     /* Callback from communication stack. Init E-RAY RAM to avoid ECC errors
; ..\appl\Source\BrsHw.c	  2005        -> Already done in startup! */
; ..\appl\Source\BrsHw.c	  2006  }
; ..\appl\Source\BrsHw.c	  2007  #endif /*BRS_ENABLE_FLEXRAY_SUPPORT*/
; ..\appl\Source\BrsHw.c	  2008  
; ..\appl\Source\BrsHw.c	  2009  
; ..\appl\Source\BrsHw.c	  2010  #if defined (BRS_ENABLE_OS_MULTICORESUPPORT)
; ..\appl\Source\BrsHw.c	  2011  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  2012  /**
; ..\appl\Source\BrsHw.c	  2013   * @brief      This API is used as sync barrier. It is used to unlock cores
; ..\appl\Source\BrsHw.c	  2014   *             that are locked in the Startup code. The implementation is only
; ..\appl\Source\BrsHw.c	  2015   *             needed on platforms, where all cores are started automatically
; ..\appl\Source\BrsHw.c	  2016   *             after a power-on reset. All additional cores are looped, until
; ..\appl\Source\BrsHw.c	  2017   *             the boot core reaches this function.
; ..\appl\Source\BrsHw.c	  2018   * @pre        
; ..\appl\Source\BrsHw.c	  2019   * @param[in]  uint32 coreId
; ..\appl\Source\BrsHw.c	  2020   * @param[out] -
; ..\appl\Source\BrsHw.c	  2021   * @return     -
; ..\appl\Source\BrsHw.c	  2022   * @context    Function is called from BrsMainStartup on the boot core.
; ..\appl\Source\BrsHw.c	  2023   */
; ..\appl\Source\BrsHw.c	  2024  /*****************************************************************************/
; ..\appl\Source\BrsHw.c	  2025  void BrsHw_UnlockCores(uint32 coreId)
; ..\appl\Source\BrsHw.c	  2026  {
; ..\appl\Source\BrsHw.c	  2027    /* The mechanism is not used/needed on this platform */
; ..\appl\Source\BrsHw.c	  2028  }
; ..\appl\Source\BrsHw.c	  2029  #endif /*BRS_ENABLE_OS_MULTICORESUPPORT*/

	; Module end
